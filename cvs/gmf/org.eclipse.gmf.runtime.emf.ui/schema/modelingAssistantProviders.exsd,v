head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080516-1748:1.5
	v20080425-1959:1.5
	v20080222-1200:1.5
	v20080114-1111:1.5
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070413-1300:1.4
	v20070330-1300:1.4
	v20070221-1500:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	v20060907-1100:1.4
	M1_20:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060526-1200:1.4
	I20060505-1400:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2008.01.08.20.58.40;	author crevells;	state Exp;
branches;
next	1.4;
commitid	59654783e4004567;

1.4
date	2006.04.12.17.54.56;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.13.01.31.48;	author rgronback;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.14.18.22.28;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.56;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[169886] gmf_head crevells 080108 [ModelingAssistant] modelingAssistantProviders.exsd does not reference the staticMethod element within the object element
@
text
@<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.gmf.runtime.emf.ui">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.gmf.runtime.emf.ui" id="modelingAssistantProviders" name="Modeling Assistant Providers"/>
      </appInfo>
      <documentation>
         This extension point is used to define modeling assistant providers for the modeling assistant service.  The modeling assistant service allows plug-ins to modify or contribute to the modeling assistant behavior (e.g. connector handles).
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="modelingAssistantProvider" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  The identifier of the extension point, i.e. &lt;tt&gt;org.eclipse.gmf.runtime.emf.ui.modelingAssistantProvider&lt;/tt&gt;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  The identifier of the extension, e.g. MyModelingAssistantProvider.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  The name of the extension, e.g. %ext.myModelingAssistantProvider.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="modelingAssistantProvider">
      <annotation>
         <documentation>
            The modeling assistant provider description tag
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="Priority"/>
            <element ref="object" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="context" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The fully qualified name of the modeling assistant provider class
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.IModelingAssistantProvider"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="Priority">
      <annotation>
         <documentation>
            The description for the priority of the modeling assistant provider
         </documentation>
      </annotation>
      <complexType>
         <attribute name="name" use="required">
            <annotation>
               <documentation>
                  The priority of the provider. It can be one of the following values:
&lt;Lowest, Low, Medium, High, Highest&gt;.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="Lowest">
                  </enumeration>
                  <enumeration value="Low">
                  </enumeration>
                  <enumeration value="Medium">
                  </enumeration>
                  <enumeration value="High">
                  </enumeration>
                  <enumeration value="Highest">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
      </complexType>
   </element>

   <element name="object">
      <annotation>
         <documentation>
            A descriptor of an object that is examined by this provider. The object descriptor can include an optional set of methods to call on the object.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
	     	<element ref="method" minOccurs="0" maxOccurs="unbounded"/>
         	<element ref="staticMethod" minOccurs="0" maxOccurs="unbounded"/>
      	 </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique (within the context of this provider definition) identifier for the object
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string">
            <annotation>
               <documentation>
                  The fully qualified name of a class/interface that is assignable from or adaptable to the object. The name could be followed (between paranthesis &quot;()&quot;) by the id of a plugin whose classloader is able to load that class. The finaly syntax is:
className&lt;(plugin id)&gt;?
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="method">
      <annotation>
         <documentation>
            A method to call by reflection on the object. The method has a name and a value. The value could be described by its string representation (value &amp; notValue), or as an object &quot;value&quot; or &quot;notValue&quot;. 

The rules of evaluation are as follows:

1- The return value string has to be in the &quot;value&quot; string set.
2- The return value string has to be not in the &quot;notValue&quot; string set.
3- The return value object has to be in the &quot;value&quot; object set.
4- The return value object has to be not in the &quot;notValue&quot; object set.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="value" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="notValue" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  The name of the method followed by an optional paramter set between paranthesis &quot;()&quot;. The parameter set can contain any number of string parameters (literals). other param types are not supported. The method name could contain nested calling separated by &quot;.&quot; The general format for this method name is : &lt;func(&lt;param&lt;,param&gt;*&gt;?).&lt;&lt;func(&lt;param&lt;,param&gt;*&gt;?)&gt;*
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string">
            <annotation>
               <documentation>
                  A comma-separated (&quot;,&quot;) list of string representations of the method return value. The string representation of the value is expected to be &quot;one&quot; of those in the list. The syntax to use is the following: &lt;string&gt;&lt;,&lt;string&gt;&gt;*
If (&quot;,&quot;) is expected to be in one of the strings, it has to be escaped by a forward slash (&quot;\&quot;). &quot;null&quot; is accepted as a string and it means (a null object).
               </documentation>
            </annotation>
         </attribute>
         <attribute name="notValue" type="string">
            <annotation>
               <documentation>
                  A comma-separated (&quot;,&quot;) list of string representations of the method return value that is not expected (the execulsion set). The string representation of the value is expected &quot;not&quot; to be &quot;one&quot; of those in the list. The syntax to use is the following: &lt;string&gt;&lt;,&lt;string&gt;&gt;*
If (&quot;,&quot;) is expected to be in one of the strings, it has to be escaped by a forward slash (&quot;\&quot;). &quot;null&quot; is accepted as a string and it means (a null object).
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>
   
   <element name="staticMethod">
      <annotation>
         <documentation>
            A static method to call by reflection on the class.
The static method has a name and a value. The value could be described by its string representation (value &amp; notValue), or as an object &quot;value&quot; or &quot;notValue&quot;. 

The rules of evaluation are as follows:
1- The return value string has to be in the &quot;value&quot; string set.
2- The return value string has to be not in the &quot;notValue&quot; string set.
3- The return value object has to be in the &quot;value&quot; object set.
4- The return value object has to be not in the &quot;notValue&quot; object set.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="value" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="notValue" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  The name of the Static Method, the format should be PluginID\ClassName.method followed by an optional paramter set between paranthesis &quot;()&quot;. The parameter set can contain any number of primitive parameters or %Context(pluginID/className) to use the context object as a parameter . other param types are not supported. The method name could contain nested calling separated by &quot;.&quot; The general format for this method name is : &lt;pluginID/ClassName.func(&lt;param&lt;,param&gt;*&gt;?).&lt;&lt;func(&lt;param&lt;,param&gt;*&gt;?)&gt;*
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string">
            <annotation>
               <documentation>
                  A comma-separated (&quot;,&quot;) list of string representations of the method return value. The string representation of the value is expected to be &quot;one&quot; of those in the list. The syntax to use is the following: &lt;string&gt;&lt;,&lt;string&gt;&gt;*
If (&quot;,&quot;) is expected to be in one of the strings, it has to be escaped by a forward slash (&quot;\&quot;). &quot;null&quot; is accepted as a string and it means (a null object).
               </documentation>
            </annotation>
         </attribute>
         <attribute name="notValue" type="string">
            <annotation>
               <documentation>
                  A comma-separated (&quot;,&quot;) list of string representations of the method return value that is not expected (the execulsion set). The string representation of the value is expected &quot;not&quot; to be &quot;one&quot; of those in the list. The syntax to use is the following: &lt;string&gt;&lt;,&lt;string&gt;&gt;*
If (&quot;,&quot;) is expected to be in one of the strings, it has to be escaped by a forward slash (&quot;\&quot;). &quot;null&quot; is accepted as a string and it means (a null object).
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>
   
   <element name="value">
      <annotation>
         <documentation>
            A descriptor of an object that represents a method&apos;s returned value. The descriptor can include an optional set of methods to call on the &quot;value&quot; object.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="method" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="class" type="string">
            <annotation>
               <documentation>
                  The fully qualified name of a class/interface that is assignable from or adaptable to the &quot;value&quot; object. The name could be followed (between paranthesis &quot;()&quot;) by the id of a plugin whose classloader is able to load that class. The finaly syntax is:
className&lt;(plugin id)&gt;?
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="notValue">
      <annotation>
         <documentation>
            A descriptor of an object that represents a method&apos;s returned value that is not required. The descriptor can include an optional set of methods to call on the &quot;notValue&quot; object.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="method" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="class" type="string">
            <annotation>
               <documentation>
                  The fully qualified name of a class/interface that is assignable from or adaptable to the &quot;value&quot; object. The name could be followed (between paranthesis &quot;()&quot;) by the id of a plugin whose classloader is able to load that class. The finaly syntax is:
className&lt;(plugin id)&gt;?
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="context">
      <annotation>
         <documentation>
            The context of a modeling assistant provider.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
         </sequence>
         <attribute name="operationId" type="string">
            <annotation>
               <documentation>
                  A string representation of the operation id in this context (see IModelingAssistantOperation).  If this field is omitted, the provider will be considered for all operation types.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="elements" type="string">
            <annotation>
               <documentation>
                  A comma-separated list of object ids (from the provider XML definition) that are valid element context(s) for the operation id in this context description.  If this field is omitted, the provider will be considered for all element types.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         Here is an example for a modeling assistant provider that provides types for all outgoing connector handle gestures on classes and interfaces.

&lt;PRE&gt;
   &lt;extension id=&quot;LogicModelingAssistantProvider&quot; name=&quot;%logic.provider.modelingassistant&quot; point=&quot;org.eclipse.gmf.runtime.emf.ui.modelingAssistantProviders&quot;&gt;
      &lt;modelingAssistantProvider class=&quot;org.eclipse.gmf.examples.runtime.diagram.logic.internal.providers.LogicModelingAssistantProvider&quot;&gt;
         &lt;Priority name=&quot;Low&quot;/&gt;
         &lt;object class=&quot;org.eclipse.gmf.examples.runtime.diagram.logic.internal.editparts.ConnectionPointEditPart(org.eclipse.gmf.examples.runtime.diagram.logic)&quot; 
         	id=&quot;CONNECTIONPOINT&quot;&gt;                        
         &lt;/object&gt;
         &lt;object class=&quot;org.eclipse.gmf.examples.runtime.diagram.logic.internal.editparts.LogicFlowCompartmentEditPart(org.eclipse.gmf.examples.runtime.diagram.logic)&quot; 
         	id=&quot;LOGIC_FLOW_COMPARTMENT&quot;&gt;               
         &lt;/object&gt;
         &lt;object class=&quot;org.eclipse.gmf.examples.runtime.diagram.logic.internal.editparts.LogicShapeCompartmentEditPart(org.eclipse.gmf.examples.runtime.diagram.logic)&quot; 
         	id=&quot;LOGIC_SHAPE_COMPARTMENT&quot;&gt;               
         &lt;/object&gt;
         &lt;context elements=&quot;CONNECTIONPOINT,LOGIC_FLOW_COMPARTMENT,LOGIC_SHAPE_COMPARTMENT&quot;/&gt;
      &lt;/modelingAssistantProvider&gt;
   &lt;/extension&gt;
&lt;/PRE&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2005 IBM Corporation and others.&lt;br&gt;
 All rights reserved. This program and the accompanying materials 
 are made available under the terms of the Eclipse Public License v1.0 
 which accompanies this distribution, and is available at 
 &lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
@


1.4
log
@[136398] gmf_head ldamus 060412 Remove references to xtools from the runtime documentation
@
text
@d107 3
a109 2
            <element ref="method" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
d171 6
d178 38
@


1.3
log
@Corrected extension-point name.
@
text
@d3 1
a3 1
<schema targetNamespace="com.ibm.xtools.bml.ui">
d6 1
a6 1
         <meta.schema plugin="com.ibm.xtools.bml.ui" id="modelingAssistantProviders" name="Modeling Assistant Providers"/>
d21 1
a21 1
                  The identifier of the extension point, i.e. &lt;tt&gt;com.ibm.xtools.bml.ui.modelingAssistantProvider&lt;/tt&gt;
d60 1
a60 1
                  <meta.attribute kind="java" basedOn="com.ibm.xtools.bml.ui.internal.services.modelingassistant.IModelingAssistantProvider"/>
d255 17
a271 28
&lt;extension id=&quot;ClassModelingAssistantProvider&quot; name=&quot;%ClassModelingAssistantProvider.name&quot;  point=&quot;com.ibm.xtools.bml.ui.modelingAssistantProviders&quot;&gt;
  &lt;modelingAssistantProvider class=&quot;com.ibm.xtools.uml.ui.diagrams.clazz.internal.providers.ClassModelingAssistantProvider&quot;&gt;
     &lt;Priority name=&quot;Low&quot;&gt;
     &lt;/Priority&gt;    
     &lt;object class=&quot;com.ibm.xtools.uml2.model.internal.IUML2Class&quot; 
      id=&quot;CLASS&quot;&gt;
     &lt;/object&gt;
     &lt;object class=&quot;com.ibm.xtools.uml2.model.internal.IUML2Interface&quot; 
      id=&quot;INTERFACE&quot;&gt;
     &lt;/object&gt;
     &lt;context 
        operationId=&quot;GetRelTypesOnSource&quot;
      elements=&quot;CLASS, INTERFACE&quot;&gt;
     &lt;/context&gt;  
     &lt;context
      operationId=&quot;GetRelTypesOnSourceAndTarget&quot;
      elements=&quot;CLASS, INTERFACE&quot;&gt;
     &lt;/context&gt;  
     &lt;context 
        operationId=&quot;GetTypesForTarget&quot;
      elements=&quot;CLASS, INTERFACE&quot;&gt;
     &lt;/context&gt;  
     &lt;context
      operationId=&quot;GetRelTypesForSREOnSource&quot;
      elements=&quot;CLASS, INTERFACE&quot;&gt;
     &lt;/context&gt;      
  &lt;/modelingAssistantProvider&gt;
&lt;/extension&gt;
@


1.2
log
@Bugzilla 109527 gmf_head tmacdoug 050914 - GMF runtime and EMFT copyrights in exsd shema files need updating
@
text
@d6 1
a6 1
         <meta.schema plugin="com.ibm.xtools.bml.ui" id="modelingAssistantProviders" name="%modelingAssistantProvidersExtensionPointName"/>
d255 1
a255 1
&lt;extension id=&quot;ClassModelingAssistantProvider&quot; name=&quot;%ClassModelingAssistantProvider.name&quot; 	point=&quot;com.ibm.xtools.bml.ui.modelingAssistantProviders&quot;&gt;
d260 1
a260 1
     	id=&quot;CLASS&quot;&gt;
d263 1
a263 1
     	id=&quot;INTERFACE&quot;&gt;
d267 1
a267 1
     	elements=&quot;CLASS, INTERFACE&quot;&gt;
d270 2
a271 2
     	operationId=&quot;GetRelTypesOnSourceAndTarget&quot;
     	elements=&quot;CLASS, INTERFACE&quot;&gt;
d275 1
a275 1
     	elements=&quot;CLASS, INTERFACE&quot;&gt;
d278 2
a279 2
     	operationId=&quot;GetRelTypesForSREOnSource&quot;
     	elements=&quot;CLASS, INTERFACE&quot;&gt;
d309 5
a313 7
        Copyright (c) 2005 IBM Corporation and others.&lt;br&gt;
	All rights reserved. This program and the accompanying materials 
	are made available under the terms of the Eclipse Public License v1.0 
	which accompanies this distribution, and is available at 
	&lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;

         
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d309 6
@

