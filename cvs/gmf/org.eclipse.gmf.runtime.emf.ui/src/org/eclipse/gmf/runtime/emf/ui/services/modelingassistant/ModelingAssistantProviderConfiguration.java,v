head	1.2;
access;
symbols
	v20081020-0700:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080516-1748:1.2
	v20080425-1959:1.2
	v20080222-1200:1.2
	v20080114-1111:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070413-1300:1.2
	v20070330-1300:1.2
	v20070221-1500:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	v20060907-1100:1.2
	M1_20:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060526-1200:1.2
	I20060505-1400:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.2
date	2005.09.12.21.30.13;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.34;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@/******************************************************************************
 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.ui.services.modelingassistant;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.gmf.runtime.common.core.service.AbstractProviderConfiguration;

/**
 * A provider configuration for the ModelingAssistantService.  It helps in
 * filtering out and delay loading unrelated providers.
 * 
 * @@author cmahoney
 */
public class ModelingAssistantProviderConfiguration
	extends AbstractProviderConfiguration {

	/** constants corresponding to different symbols in the extention schema */
	private static final String CONTEXT = "context"; //$NON-NLS-1$

	private static final String OPERATION_ID = "operationId"; //$NON-NLS-1$

	private static final String ELEMENTS = "elements"; //$NON-NLS-1$

	/** a map of context descriptors supported by this provider to their target contexts */
	private List contextDescriptors = new ArrayList();

	/**
	 * Builds a new provider contribution descriptor by parsing its configuration element
	 * 
	 * @@param configElement A provider configuration element
	 * @@return A provider XML contribution descriptor
	 */
	public static ModelingAssistantProviderConfiguration parse(
		IConfigurationElement configElement) {
		assert configElement != null: "null provider configuration element"; //$NON-NLS-1$
		return new ModelingAssistantProviderConfiguration(configElement);
	}

	/**
	 * Creates a new <code>ModelingAssistantProviderConfiguration</code> instance
	 * given a provider configuration element
	 * 
	 * @@param configElement The provider XML configuration element
	 */
	private ModelingAssistantProviderConfiguration(
		IConfigurationElement configElement) {
		IConfigurationElement configChildren[];

		// read the object descriptors
		Map objects = new HashMap();
		configChildren = configElement.getChildren(OBJECT);
		for (int i = 0; i < configChildren.length; i++) {
			String id = configChildren[i].getAttribute(ID);
			if (id != null)
				objects.put(id, new ObjectDescriptor(configChildren[i]));
		}

		// read the context descriptors
		configChildren = configElement.getChildren(CONTEXT);
		for (int i = 0; i < configChildren.length; i++) {
			String operationType = configChildren[i].getAttribute(OPERATION_ID);
			List elements = getObjectList(configChildren[i]
				.getAttribute(ELEMENTS), objects, configElement);
			if (operationType != null || elements != null)
				contextDescriptors.add(new ContextDescriptor(operationType,
					elements));
		}
	}

	/**
	 * Determines if the provider understands the given context
	 * The provider understands the request if:
	 * 1- There are no listed provider contexts
	 * 2- The context matches one of the provider contexts 
	 * 
	 * @@param operationType The operation type
	 * @@param context  The element context
	 * @@return boolean <code>true</code> if it supports; <code>false</code> otherwise
	 */
	public boolean supports(String operationType, IAdaptable context) {
		if (contextDescriptors.isEmpty())
			return true;

		Iterator iter = contextDescriptors.iterator();
		while (iter.hasNext()) {
			ContextDescriptor descriptor = (ContextDescriptor) iter.next();
			if (descriptor.matches(operationType, context))
				return true;
		}
		return false;
	}

	/**
	 * A descriptor for a provider context
	 */
	private static class ContextDescriptor {

		/** the operation type */
		private final String operationType;

		/** the elements */
		private final List elements;

		/**
		 * creates a new context descriptor from its context info
		 * 
		 * @@param operationType The operation type
		 * @@param elements The elements
		 */
		public ContextDescriptor(String operationType, List elements) {
			this.operationType = operationType;
			this.elements = elements;
		}

		/**
		 * Determines if the context descriptor matches the given context
		 * 
		 * @@param anOperationType The operation type
		 * @@param context The element context
		 * @@return boolean
		 */
		public boolean matches(String anOperationType, IAdaptable context) {
			if (operationType != null) {
				if (!operationType.equals(anOperationType))
					return false;
			}
			if (elements != null) {
				if (!objectMatches(context, elements))
					return false;
			}
			return true;
		}
	}

}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.              	   |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

