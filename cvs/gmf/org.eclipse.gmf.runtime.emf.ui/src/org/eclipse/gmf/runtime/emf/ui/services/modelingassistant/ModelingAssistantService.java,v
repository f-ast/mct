head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	R2_1_maintenance:1.7.0.6
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080516-1748:1.7
	v20080425-1959:1.7
	v20080222-1200:1.7
	v20080114-1111:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.4
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070601-1400:1.7
	v20070413-1300:1.7
	v20070330-1300:1.7
	v20070221-1500:1.7
	M4_20:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061013-1330:1.7
	v20060925-1700:1.7
	v20060919-0800:1.7
	v20060907-1100:1.7
	M1_20:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1200:1.7
	v20060531-1730:1.7
	v20060526-1200:1.7
	I20060505-1400:1.7
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.7
	I20060407-1200:1.7
	I20060331-1000:1.7
	I20060324-0300:1.7
	I20060317-1300:1.7
	I20060317-1200:1.7
	I20060316-1300:1.7
	I20060309-1300:1.7
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.7
	I20060216-1945:1.7
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.7
	I20060129-1145:1.7
	I20060127-0900:1.7
	I20060120-1530:1.7
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.7
	I20051201-1800:1.7
	I20051124-2000:1.7
	M3_10:1.6
	I20051118-1245:1.6
	I20051111-1800:1.6
	I20051106-0900:1.6
	v20051030:1.5;
locks; strict;
comment	@# @;


1.7
date	2005.11.21.18.26.00;	author mmostafa;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.02.23.29.23;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.05.14.22.44;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.23.20.55.59;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.30.15;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.06.18.41.53;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.34;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@bugzilla 117343 gmf-head  mmostafa 051121 getPolicy on the Service class get called more than 500,000 times
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.ui.services.modelingassistant;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.core.service.Service;
import org.eclipse.gmf.runtime.common.ui.services.util.ActivityFilterProviderDescriptor;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.ui.internal.MslUIPlugin;

/**
 * This service is used to assist the user with modeling gestures.
 * 
 * @@author cmahoney
 */
public class ModelingAssistantService
	extends Service
	implements IModelingAssistantProvider {

	/**
	 * A descriptor for <code>IModelingAssistantProvider</code> defined
	 * by a configuration element.
	 */
	protected static class ProviderDescriptor
		extends ActivityFilterProviderDescriptor {

		/** the provider configuration parsed from XML */
		private ModelingAssistantProviderConfiguration providerConfiguration;

		/**
		 * Constructs a <code>ISemanticProvider</code> descriptor for
		 * the specified configuration element.
		 * 
		 * @@param element The configuration element describing the provider.
		 */
		public ProviderDescriptor(IConfigurationElement element) {
			super(element);

			this.providerConfiguration = ModelingAssistantProviderConfiguration
				.parse(element);
			assert providerConfiguration != null: "providerConfiguration is null"; //$NON-NLS-1$
		}

		public boolean provides(IOperation operation) {
			if (!super.provides(operation)) {
				return false;
			}
			if (!policyInitialized){
				policy = getPolicy();
				policyInitialized = true;
			}
			if (policy != null)
				return policy.provides(operation);

			return isSupportedInExtension(operation) ? getProvider().provides(
				operation) : false;
		}

		/**
		 * Checks if the operation is supported by the XML extension
		 * @@param operation
		 * @@return true if the operation is supported; false otherwise
		 */
		private boolean isSupportedInExtension(IOperation operation) {
			if (operation instanceof IModelingAssistantOperation) {
				String operationId = ((IModelingAssistantOperation) operation)
					.getId();
				IAdaptable context = ((IModelingAssistantOperation) operation)
					.getContext();

				return providerConfiguration.supports(operationId, context);
			}
			return false;
		}

	}

	/** The singleton instance of the modeling assistant service. */
	private final static ModelingAssistantService service = new ModelingAssistantService();

	static {
		service.configureProviders(MslUIPlugin.getPluginId(), "modelingAssistantProviders"); //$NON-NLS-1$
	}

	protected Service.ProviderDescriptor newProviderDescriptor(
		IConfigurationElement element) {
		return new ProviderDescriptor(element);
	}

	/**
	 * Retrieves the singleton instance of the modeling assistant service.
	 * 
	 * @@return The modeling assistant service singleton.
	 */
	public static ModelingAssistantService getInstance() {
		return service;
	}

	/**
	 * Accepts a list that may contain other lists and returns a list
	 * containing all the objects.  Also removes duplicates.
	 * @@param list
	 * @@return the collapsed list
	 */
	private static List collapseList(List list) {
		List collapsedList = new ArrayList();

		for (Iterator iter = list.iterator(); iter.hasNext();) {
			Object object = iter.next();
			if (object instanceof List) {
				for (Iterator iterator = ((List) object).iterator(); iterator
					.hasNext();) {
					Object subObject = iterator.next();
					if (!collapsedList.contains(subObject)) {
						collapsedList.add(subObject);
					}
				}
			} else {
				collapsedList.add(object);
			}
		}
		return collapsedList;
	}

	/**
	 * Executes the <code>GetTypesOperation</code> using the 
	 * <code>FORWARD</code> execution strategy.
	 */
	public List getTypes(String hint, IAdaptable data) {
		List results = execute(ExecutionStrategy.FORWARD,
			new GetTypesOperation(hint, data));
		return collapseList(results);
	}

	/**
	 * Executes the <code>GetRelTypesOnSourceOperation</code> using the 
	 * <code>FORWARD</code> execution strategy.
	 */
	public List getRelTypesOnSource(IAdaptable source) {
		List results = execute(ExecutionStrategy.FORWARD,
			new GetRelTypesOnSourceOperation(source));
		return collapseList(results);
	}

	/**
	 * Executes the <code>GetRelTypesOnTargetOperation</code> using the 
	 * <code>FORWARD</code> execution strategy.
	 */
	public List getRelTypesOnTarget(IAdaptable target) {
		List results = execute(ExecutionStrategy.FORWARD,
			new GetRelTypesOnTargetOperation(target));
		return collapseList(results);
	}

	/**
	 * Executes the <code>GetRelTypesOnSourceAndTargetOperation</code> using the 
	 * <code>FORWARD</code> execution strategy.
	 */
	public List getRelTypesOnSourceAndTarget(IAdaptable source, IAdaptable target) {
		List results = execute(ExecutionStrategy.FORWARD,
			new GetRelTypesOnSourceAndTargetOperation(source, target));
		return collapseList(results);
	}

	/**
	 * Executes the <code>GetRelTypesForSREOnSourceOperation</code> using the 
	 * <code>FORWARD</code> execution strategy.
	 */
	public List getRelTypesForSREOnSource(IAdaptable source) {
		List results = execute(ExecutionStrategy.FORWARD,
			new GetRelTypesForSREOnSourceOperation(source));
		return collapseList(results);
	}

	/**
	 * Executes the <code>GetRelTypesForSREOnTargetOperation</code> using the 
	 * <code>FORWARD</code> execution strategy.
	 */
	public List getRelTypesForSREOnTarget(IAdaptable target) {
		List results = execute(ExecutionStrategy.FORWARD,
			new GetRelTypesForSREOnTargetOperation(target));
		return collapseList(results);
	}

	/**
	 * Executes the <code>GetTypesForSourceOperation</code> using the 
	 * <code>FORWARD</code> execution strategy.
	 */
	public List getTypesForSource(IAdaptable target,
		IElementType relationshipType) {
		List results = execute(ExecutionStrategy.FORWARD,
			new GetTypesForSourceOperation(target, relationshipType));
		return collapseList(results);
	}

	/**
	 * Executes the <code>GetTypesForTargetOperation</code> using the 
	 * <code>FORWARD</code> execution strategy.
	 */
	public List getTypesForTarget(IAdaptable source,
		IElementType relationshipType) {
		List results = execute(ExecutionStrategy.FORWARD,
			new GetTypesForTargetOperation(source, relationshipType));
		return collapseList(results);
	}

	/**
	 * Executes the <code>SelectExistingElementForSourceOperation</code> using the 
	 * <code>FIRST</code> execution strategy.
	 */
	public EObject selectExistingElementForSource(IAdaptable target,
		IElementType relationshipType) {
		List results = execute(ExecutionStrategy.FIRST,
			new SelectExistingElementForSourceOperation(target,
				relationshipType));
		return (EObject) results.get(0);
	}

	/**
	 * Executes the <code>SelectExistingElementForTargetOperation</code> using the 
	 * <code>FIRST</code> execution strategy.
	 */
	public EObject selectExistingElementForTarget(IAdaptable source,
		IElementType relationshipType) {
		List results = execute(ExecutionStrategy.FIRST,
			new SelectExistingElementForTargetOperation(source,
				relationshipType));
		return (EObject) results.get(0);
	}

	/**
	 * Executes the <code>GetTypesForPopupBarOperation</code> using the 
	 * <code>FORWARD</code> execution strategy.
	 */
	public List getTypesForPopupBar(IAdaptable host) {
		List results = execute(ExecutionStrategy.FORWARD,
			new GetTypesForPopupBarOperation(host));
		return collapseList(results);
	}

	/**
	 * Executes the <code>GetTypesForPopupBarOperation</code> using the 
	 * <code>FORWARD</code> execution strategy.
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.IModelingAssistantProvider#getTypesForActionBar(IAdaptable)
	 * @@deprecated Renamed to {@@link #getTypesForPopupBar(IAdaptable)}
	 */
	public List getTypesForActionBar(IAdaptable host) {
		List results = execute(ExecutionStrategy.FORWARD,
			new GetTypesForPopupBarOperation(host));
		return collapseList(results);
	}

}
@


1.6
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d65 6
a70 2
			if (getPolicy() != null)
				return getPolicy().provides(operation);
@


1.5
log
@Bugzilla 110635 gmf_head keithc 051005 Delay configuration of services
@
text
@a60 3
		/**
		 * @@see org.eclipse.gmf.runtime.common.core.service.IProvider#provides(org.eclipse.gmf.runtime.common.core.service.IOperation)
		 */
a97 3
	/**
	 * @@see org.eclipse.gmf.runtime.common.core.service.Service#newProviderDescriptor(org.eclipse.core.runtime.IConfigurationElement)
	 */
a140 2
	 * 
	 * @@see com.ibm.xtools.msl.ui.internal.services.modelingassistant.IModelingAssistantProvider#getTypes(String, IAdaptable)
a150 2
	 * 
	 * @@see com.ibm.xtools.msl.ui.internal.services.modelingassistant.IModelingAssistantProvider#getRelTypesOnSource(IAdaptable)
a160 2
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.IModelingAssistantProvider#getRelTypesOnTarget(IAdaptable)
a170 2
	 * 
	 * @@see com.ibm.xtools.msl.ui.internal.services.modelingassistant.IModelingAssistantProvider#getRelTypesOnSourceAndTarget(IAdaptable, IAdaptable)
a180 2
	 * 
	 * @@see com.ibm.xtools.msl.ui.internal.services.modelingassistant.IModelingAssistantProvider#getRelTypesForSREOnSource(org.eclipse.core.runtime.IAdaptable)
a190 2
	 * 
	 * @@see com.ibm.xtools.msl.ui.internal.services.modelingassistant.IModelingAssistantProvider#getRelTypesForSREOnTarget(IAdaptable)
a200 2
	 * 
	 * @@see com.ibm.xtools.msl.ui.internal.services.modelingassistant.IModelingAssistantProvider#getTypesForSource(IAdaptable, IElementType)
a211 2
	 * 
	 * @@see com.ibm.xtools.msl.ui.internal.services.modelingassistant.IModelingAssistantProvider#getTypesForTarget(IAdaptable, IElementType)
a222 2
	 * 
	 * @@see com.ibm.xtools.msl.ui.internal.services.modelingassistant.IModelingAssistantProvider#selectExistingElementForSource(IAdaptable, IElementType)
a234 2
	 * 
	 * @@see com.ibm.xtools.msl.ui.internal.services.modelingassistant.IModelingAssistantProvider#selectExistingElementForTarget(IAdaptable, IElementType)
d245 11
a255 1
	 * Executes the <code>GetTypesForActionBarOperation</code> using the 
d259 1
d263 1
a263 1
			new GetTypesForActionBarOperation(host));
@


1.4
log
@Bugzilla 110480 gmf_head sshaw 050923 Modeling Assistant Service should have generic getTypes() operation to be used in commands with popups
Contributed by Cherie Mahoney
@
text
@d26 1
d70 1
d97 4
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a68 1

d139 1
a139 1
	 * Executes the <code>GetTypesForAttributeOperation</code> using the 
d142 1
a142 1
	 * @@see com.ibm.xtools.msl.ui.internal.services.modelingassistant.IModelingAssistantProvider#getTypesForAttribute(IAdaptable)
d144 1
a144 1
	public List getTypesForAttribute(IAdaptable attribute) {
d146 1
a146 1
			new GetTypesForAttributeOperation(attribute));
@


1.2
log
@Bugzilla 108849 gmf_head sshaw 050906 Capability support for Modeling Assistant and Palette Services
Contribution by: Cherie Mahoney
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@a18 1

d22 1
d39 1
a39 1
		extends Service.ProviderDescriptor {
d62 3
@

