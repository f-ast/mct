head	1.6;
access;
symbols
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.6
date	2006.05.02.21.25.56;	author ldamus;	state dead;
branches;
next	1.5;

1.5
date	2006.04.06.19.56.42;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.10.15.02.59;	author vramaswamy;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.09.21.16.47;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.30.16;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.49;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[138643] gmf_head ldamus 060502 [EMF UI] Deprecated validation-related code must be removed
@
text
@/******************************************************************************
 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.emf.ui.preferences;

import org.eclipse.jface.preference.FieldEditorPreferencePage;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPreferencePage;
import org.eclipse.ui.PlatformUI;

import org.eclipse.gmf.runtime.common.ui.preferences.CheckBoxFieldEditor;
import org.eclipse.gmf.runtime.common.ui.preferences.ComboFieldEditor;
import org.eclipse.gmf.runtime.emf.ui.internal.MslUIPlugin;
import org.eclipse.gmf.runtime.emf.ui.internal.l10n.EMFUIMessages;

/**
 * The preference page for Modeler validation controls.
 *
 * @@author Christian W. Damus (cdamus)
 * @@deprecated
 */
public class ValidationPreferencePage 
		extends FieldEditorPreferencePage
		implements IWorkbenchPreferencePage {

	/* Define an offset used to add spacing in the combobox so that international
	 * characters aren't truncated. */
	private static final int OFFSET = 5;
	
	private ComboFieldEditor liveProblemDisplayField;
	private Combo liveProblemDisplayCombo;
	
	private CheckBoxFieldEditor warningsInDialog;
	private CheckBoxFieldEditor showOutputView;
	
	/**
	 * Initializes me.
	 */
	public ValidationPreferencePage() {
		super(FieldEditorPreferencePage.GRID);
	}

	/**
     * The field editors for this preference page are inserted in this method.
     */
    protected void createFieldEditors() {
        final Composite parent = getFieldEditorParent();
        Composite panel = new Composite(parent, SWT.NONE);
        GridLayout panelLayout = new GridLayout();
        panelLayout.numColumns = 1;
        panel.setLayout(panelLayout);
        
		GridData blockData = new GridData();
		blockData.grabExcessHorizontalSpace = true;
		blockData.horizontalAlignment = GridData.FILL;
		blockData.horizontalSpan = 1;
		panel.setLayoutData(blockData);

		// create groups
		createLiveValidationProblemsGroup(panel);
        
        PlatformUI.getWorkbench().getHelpSystem().setHelp(parent, 
            "org.eclipse.gmf.runtime.emf.ui.egmf0500"); //$NON-NLS-1$
    }
    
    
	/**
	 * Extends the inherited method to set up the enablement of the checkboxes
	 * according to the current preference settings.
	 */
	protected void initialize() {
		super.initialize();
		
        // initialize the enablement of the checkboxes after the current
		//   preferences have been applied to the controls
        setCheckboxesEnablement();
    }

    /**
     * Create the "Live validation problems" group of the preference page.
     * 
     * @@param parent the parent composite
     */
    private void createLiveValidationProblemsGroup(Composite parent) {
		Group group = new Group(parent, SWT.NONE);
		group.setText(EMFUIMessages.Validation_liveValidationGroupLabel);
        GridLayout layout = new GridLayout();
        layout.numColumns = 1;
        group.setLayout(layout);
        
        GridData data = new GridData(GridData.FILL_HORIZONTAL);
        data.grabExcessHorizontalSpace = true;
        group.setLayoutData(data);

        SelectionListener checkBoxUpdater = new SelectionAdapter() {
			public void widgetSelected(SelectionEvent e) {
				// the "Show Output view ..." checkbox only applies when problems
				//    go to the output view
				setCheckboxesEnablement();
			}};
		
        Composite block = new Composite(group, SWT.NONE);
        liveProblemDisplayField = new ComboFieldEditor(
        	IPreferenceConstants.VALIDATION_LIVE_PROBLEMS_DISPLAY,
        	EMFUIMessages.Validation_liveValidationDestinationPrompt,
			block,
			ComboFieldEditor.INT_TYPE,
			false,
			0,
			0,
			true);
        addField(liveProblemDisplayField);
        liveProblemDisplayCombo = liveProblemDisplayField.getComboControl();
        liveProblemDisplayCombo.add(EMFUIMessages.Validation_liveValidationDestination_dialogComboItem);
        liveProblemDisplayCombo.add(EMFUIMessages.Validation_liveValidationDestination_consoleComboItem);
        data = new GridData();
        Point size = liveProblemDisplayCombo.computeSize(SWT.DEFAULT, SWT.DEFAULT);
        data.widthHint = size.x + OFFSET;
        data.grabExcessHorizontalSpace = true;
        liveProblemDisplayCombo.setLayoutData(data);
        liveProblemDisplayCombo.addSelectionListener(checkBoxUpdater);

        block = new Composite(group, SWT.NONE);
        warningsInDialog =
            new CheckBoxFieldEditor(
                IPreferenceConstants.VALIDATION_LIVE_WARNINGS_IN_DIALOG,
                EMFUIMessages.Validation_liveValidationWarnDialogPrompt,
                block);
        addField(warningsInDialog);
        warningsInDialog.getCheckbox().addSelectionListener(checkBoxUpdater);
        
        block = new Composite(group, SWT.NONE);
        showOutputView =
            new CheckBoxFieldEditor(
                IPreferenceConstants.VALIDATION_LIVE_SHOW_CONSOLE,
                EMFUIMessages.Validation_liveValidationShowConsolePrompt,
                block);
        addField(showOutputView);
	}
    
    /**
     * Sets the enablement of the "Show warnings in dialog ..." and
     * "Show Output view ..." checkboxes according to
     * whether the Output view is the destination of live validation problems.
     */
    void setCheckboxesEnablement() {
    	final Button warningsInDialogCheckbox = warningsInDialog.getCheckbox();
    	
    	warningsInDialogCheckbox.setEnabled(
    		liveProblemDisplayCombo.getSelectionIndex()
				== ValidationLiveProblemsDestination.DIALOG.getOrdinal());
    	
    	if (warningsInDialogCheckbox.isEnabled()
    			&& !warningsInDialogCheckbox.getSelection()) {
    		showOutputView.getCheckbox().setEnabled(true);
    	} else {
    		showOutputView.getCheckbox().setEnabled(
    			liveProblemDisplayCombo.getSelectionIndex()
					== ValidationLiveProblemsDestination.CONSOLE.getOrdinal());
    	}
    }

    /**
     * This method must be implemented to obtain the correct
     * location of the preference store, as it is called by
     * getPreferenceStore().
     * 
     * @@return IPreferenceStore the returned preference store
     */
    protected IPreferenceStore doGetPreferenceStore() {
        return MslUIPlugin.getDefault().getPreferenceStore();
    }

	/**
     * When the user clicks OK, save the values in the field
     * editors by calling storeValues() and also in the preference
     * store.
     * This is the same as what is done in apply.
     * @@return true since the ok function completed successfully.
     * If the saving does not complete successfully, for this
     * preference page, it was because of something the user
     * cannot fix, so return true anyway otherwise the page
     * will not close and becomes annoying.
     * <P>Looking at the samples, I don't think they expect this
     * to be false.
     */
    public boolean performOk() {
        super.performOk();
        MslUIPlugin.getDefault().savePluginPreferences();

        return true;
    }

	/* (non-Javadoc)
	 * Redefines/Implements/Extends the inherited method.
	 */
	public void init(IWorkbench workbench) {
		// Nothing to do in this implementation
	}
}
@


1.5
log
@[135376] gmf_head ahunter 060406 Clients would like context sensitive help ids for GMF dialogs
@
text
@@


1.4
log
@[113991] gmf_head cmcgee 060310 Support displaying a common dialog for live validation messages
@
text
@d30 1
d81 4
a84 1
		createLiveValidationProblemsGroup(panel);        
@


1.3
log
@Bugzilla Bug 109445 gmf_head etworkow 051109 New Eclipse Resources Bundles Should Be Used
@
text
@d40 1
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d34 1
a34 2
import org.eclipse.gmf.runtime.emf.ui.internal.l10n.ResourceManager;

a47 14

	
	private static final String LIVE_VALIDATION_GROUP_LABEL =
		ResourceManager.getI18NString("Validation.liveValidationGroupLabel"); //$NON-NLS-1$
	private static final String LIVE_VALIDATION_DESTINATION_PROMPT =
		ResourceManager.getI18NString("Validation.liveValidationDestinationPrompt"); //$NON-NLS-1$
	private static final String LIVE_VALIDATION_DESTINATION_DIALOG =
		ResourceManager.getI18NString("Validation.liveValidationDestination.dialogComboItem"); //$NON-NLS-1$
	private static final String LIVE_VALIDATION_DESTINATION_CONSOLE =
		ResourceManager.getI18NString("Validation.liveValidationDestination.consoleComboItem"); //$NON-NLS-1$
	private static final String LIVE_VALIDATION_SHOW_CONSOLE_PROMPT =
		ResourceManager.getI18NString("Validation.liveValidationShowConsolePrompt"); //$NON-NLS-1$
	private static final String LIVE_VALIDATION_WARN_DIALOG_PROMPT =
		ResourceManager.getI18NString("Validation.liveValidationWarnDialogPrompt"); //$NON-NLS-1$
d102 1
a102 1
		group.setText(LIVE_VALIDATION_GROUP_LABEL);
d121 1
a121 1
			LIVE_VALIDATION_DESTINATION_PROMPT,
d130 2
a131 2
        liveProblemDisplayCombo.add(LIVE_VALIDATION_DESTINATION_DIALOG);
        liveProblemDisplayCombo.add(LIVE_VALIDATION_DESTINATION_CONSOLE);
d143 1
a143 1
                LIVE_VALIDATION_WARN_DIALOG_PROMPT,
d152 1
a152 1
                LIVE_VALIDATION_SHOW_CONSOLE_PROMPT,
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

