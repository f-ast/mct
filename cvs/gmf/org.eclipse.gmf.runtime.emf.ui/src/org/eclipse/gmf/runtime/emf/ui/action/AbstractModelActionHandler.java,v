head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080516-1748:1.5
	v20080425-1959:1.5
	v20080222-1200:1.5
	v20080114-1111:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070413-1300:1.5
	v20070330-1300:1.5
	v20070221-1500:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061013-1330:1.5
	v20060925-1700:1.4.2.1
	v20060919-0800:1.4.2.1
	v20060907-1100:1.4
	M1_20:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060526-1200:1.4
	I20060505-1400:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.5
date	2006.10.03.15.06.39;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.13.19.10.34;	author ldamus;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.10.05.17.12.48;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.30.17;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.51;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.09.14.14.50.19;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.5
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.ui.action;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.operations.IUndoableOperation;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.action.AbstractActionHandler;
import org.eclipse.gmf.runtime.common.ui.action.IActionWithProgress;
import org.eclipse.gmf.runtime.emf.ui.internal.MslUIDebugOptions;
import org.eclipse.gmf.runtime.emf.ui.internal.MslUIPlugin;
import org.eclipse.gmf.runtime.emf.ui.internal.MslUIStatusCodes;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchPart;

/**
 * The abstract parent of all concrete action handlers that execute model
 * commands. Concrete subclasses must provide a definition of the
 * <code>doRun()</code> method to gather any required input and execute a model
 * command.
 * 
 * @@author khussey
 * @@auther ldamus
 */
public abstract class AbstractModelActionHandler
	extends AbstractActionHandler {
    
    private IStatus status;

	/**
	 * Constructs a new model action handler for the specified workbench part.
	 * 
	 * @@param workbenchPart The workbench part to which this model action
	 *                       handler applies.
	 */
	protected AbstractModelActionHandler(IWorkbenchPart workbenchPart) {
		super(workbenchPart);
	}

	/**
	 * Constructs a new model action handler for the specified workbench page.
	 * 
	 * @@param workbenchPage The workbench page to which this model action
	 *                       handler applies.
	 */
	protected AbstractModelActionHandler(IWorkbenchPage workbenchPage) {
		super(workbenchPage);
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractActionHandler#isSelectionListener()
	 */
	protected boolean isSelectionListener() {
		return true;
	}

	/**
	 * Runs this model action handler as a read action.
	 * 
	 * @@see IActionWithProgress#run(IProgressMonitor)
	 */
	public final void run(final IProgressMonitor progressMonitor) {
        
        if (isReadOnly()) {
            // run exclusive so that subclasses can only read from the model
            try {
                getEditingDomain().runExclusive(new Runnable() {

                    public void run() {
                        AbstractModelActionHandler.super.run(progressMonitor);
                    }
                });
            } catch (InterruptedException e) {
                Trace
                    .catching(MslUIPlugin.getDefault(),
                        MslUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                        "run", e); //$NON-NLS-1$
            }

        } else {
        	// Run in a composite transactional operation so that subclasses can
			// both read and write to the model. Commands executed by subclasses
			// to modify the model will be appended to this composite
			// transactional operation.
        	
        	Runnable runnable = new Runnable() {
				public void run() {
					AbstractModelActionHandler.super
							.run(progressMonitor);
				}
			};
			
        	WriteCommand write = new WriteCommand(getEditingDomain(),
					getLabel(), getActionManager().getOperationHistory(),
					runnable) {
        		
				public IStatus getStatus() {
					return AbstractModelActionHandler.this.getStatus();
				}
			};
			
            execute(write, new NullProgressMonitor(), null);
        }
        
	}
    
    /**
     * Gets my editing domain. Can be <code>null</code> if I don't modify
     * model resources.
     * 
     * @@return my editing domain.
     */
    protected abstract TransactionalEditingDomain getEditingDomain();
    
    /**
     * Answers whether or not I am a read-only action. Returns
     * <code>false</code> by default. Subclasses may override.
     * 
     * @@return <code>false</code>
     */
    protected boolean isReadOnly() {
        return false;
    }
    
    /**
     * Gets the status of running this action delegate.
     * 
     * @@return my status
     */
    protected IStatus getStatus() {
        if (status == null) {
            return Status.OK_STATUS;
        }
        return status;
    }
    
    /**
     * Sets the action delegate status. Subclasses should set the status when they
     * execute a command.
     * 
     * @@param status
     *            the new status
     */
    protected void setStatus(IStatus status) {
        this.status = status;
    }
    
    /**
	 * Convenience method for subclasses to execute an undoable operation on the
	 * action manager's operation history. Sets my status to the status of the
	 * operation execution, and returns that status.
	 * 
	 * @@param operation
	 *            the operation to be executed
	 * @@param progressMonitor
	 *            the progress monitor
	 * @@param info
	 *            the adaptable info, may be <code>null</code>
	 * @@return the status of the operation execution.
	 */
	protected IStatus execute(IUndoableOperation operation,
			IProgressMonitor progressMonitor, IAdaptable info) {

		try {
			setStatus(getActionManager().getOperationHistory().execute(
					operation, progressMonitor, info));

		} catch (ExecutionException e) {
			setStatus(new Status(Status.ERROR, MslUIPlugin.getPluginId(),
					MslUIStatusCodes.IGNORED_EXCEPTION_WARNING, e
							.getLocalizedMessage(), e));
			Trace
					.catching(MslUIPlugin.getDefault(),
							MslUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
							"run", e); //$NON-NLS-1$
			Log.error(MslUIPlugin.getDefault(),
					MslUIStatusCodes.IGNORED_EXCEPTION_WARNING, e
							.getLocalizedMessage(), e);
		}
		return getStatus();
	}

}
@


1.4
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d15 1
a21 1
import org.eclipse.emf.workspace.AbstractEMFOperation;
d39 1
d97 22
a118 27
            // run in an EMF operation so that subclasses can both read and
            // write to the model
            AbstractEMFOperation operation = new AbstractEMFOperation(
                getEditingDomain(), getLabel()) {

                protected IStatus doExecute(IProgressMonitor monitor,
                        IAdaptable info)
                    throws ExecutionException {

                    AbstractModelActionHandler.super.run(progressMonitor);
                    return getStatus();
                };
            };

            try {
                getActionManager().getOperationHistory().execute(operation,
                    new NullProgressMonitor(), null);

            } catch (ExecutionException e) {
                Trace
                    .catching(MslUIPlugin.getDefault(),
                        MslUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                        "run", e); //$NON-NLS-1$
                Log.error(MslUIPlugin.getDefault(),
                    MslUIStatusCodes.IGNORED_EXCEPTION_WARNING, e
                        .getLocalizedMessage(), e);
            }
d163 35
@


1.4.2.1
log
@[155418] gmf_R1_0_maintenance ldamus 060914 Read-only files are modifed because validate edit is not being called
@
text
@a14 1
import org.eclipse.core.commands.operations.IUndoableOperation;
d21 1
a38 1
 * @@auther ldamus
d96 27
a122 22
        	// Run in a composite transactional operation so that subclasses can
			// both read and write to the model. Commands executed by subclasses
			// to modify the model will be appended to this composite
			// transactional operation.
        	
        	Runnable runnable = new Runnable() {
				public void run() {
					AbstractModelActionHandler.super
							.run(progressMonitor);
				}
			};
			
        	WriteCommand write = new WriteCommand(getEditingDomain(),
					getLabel(), getActionManager().getOperationHistory(),
					runnable) {
        		
				public IStatus getStatus() {
					return AbstractModelActionHandler.this.getStatus();
				}
			};
			
            execute(write, new NullProgressMonitor(), null);
a166 35
    
    /**
	 * Convenience method for subclasses to execute an undoable operation on the
	 * action manager's operation history. Sets my status to the status of the
	 * operation execution, and returns that status.
	 * 
	 * @@param operation
	 *            the operation to be executed
	 * @@param progressMonitor
	 *            the progress monitor
	 * @@param info
	 *            the adaptable info, may be <code>null</code>
	 * @@return the status of the operation execution.
	 */
	protected IStatus execute(IUndoableOperation operation,
			IProgressMonitor progressMonitor, IAdaptable info) {

		try {
			setStatus(getActionManager().getOperationHistory().execute(
					operation, progressMonitor, info));

		} catch (ExecutionException e) {
			setStatus(new Status(Status.ERROR, MslUIPlugin.getPluginId(),
					MslUIStatusCodes.IGNORED_EXCEPTION_WARNING, e
							.getLocalizedMessage(), e));
			Trace
					.catching(MslUIPlugin.getDefault(),
							MslUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
							"run", e); //$NON-NLS-1$
			Log.error(MslUIPlugin.getDefault(),
					MslUIStatusCodes.IGNORED_EXCEPTION_WARNING, e
							.getLocalizedMessage(), e);
		}
		return getStatus();
	}
@


1.3
log
@Bugzilla 111637 gmf_head ldamus 051005 IRepeatableAction should be deprecated
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
d14 2
d17 6
a22 3
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchPart;

a25 2
import org.eclipse.gmf.runtime.emf.core.exceptions.MSLActionAbandonedException;
import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;
d28 3
d42 2
d78 47
a124 13
		try {
			OperationUtil.runAsRead(new Runnable() {

				public void run() {
					AbstractModelActionHandler.super.run(progressMonitor);
				}
			});
		} catch (MSLActionAbandonedException e) {
			// This is not expected to happen.
			Trace.trace(MslUIPlugin.getDefault(),
				MslUIDebugOptions.MODEL_OPERATIONS,
				"MSLActionAbandonedException"); //$NON-NLS-1$
		}
d126 41
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d20 1
a20 1
import org.eclipse.gmf.runtime.common.ui.action.IRepeatableAction;
d67 1
a67 1
	 * @@see IRepeatableAction#run(IProgressMonitor)
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

