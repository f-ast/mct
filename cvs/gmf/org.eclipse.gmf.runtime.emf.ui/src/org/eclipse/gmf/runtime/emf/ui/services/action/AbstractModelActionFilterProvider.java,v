head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.6
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080516-1748:1.4
	v20080425-1959:1.4
	v20080222-1200:1.4
	v20080114-1111:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070413-1300:1.4
	v20070330-1300:1.4
	v20070221-1500:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	v20060907-1100:1.4
	M1_20:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060526-1200:1.4
	I20060505-1400:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.4
date	2006.03.07.18.14.20;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.13.19.10.34;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.30.17;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.48;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[130758] gmf_head ldamus 060307 AbstractModelActionFilterProvider should allow subclasses to override how the editing domain is obtained
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.ui.services.action;

import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.services.action.filter.AbstractActionFilterProvider;
import org.eclipse.gmf.runtime.common.ui.services.action.filter.TestAttributeOperation;
import org.eclipse.gmf.runtime.emf.ui.internal.MslUIDebugOptions;
import org.eclipse.gmf.runtime.emf.ui.internal.MslUIPlugin;
import org.eclipse.gmf.runtime.emf.ui.internal.MslUIStatusCodes;

/**
 * The parent of all model action filter providers. Defines behavior to wrap
 * queries on this provider in read actions.
 * 
 * @@author khussey
 *
 */
public abstract class AbstractModelActionFilterProvider
	extends AbstractActionFilterProvider {

	/**
	 * The internal result of querying this model action filter provider.
	 * 
	 */
	private boolean result = false;

	/**
	 * Constructs a new model action filter provider.
	 * 
	 */
	protected AbstractModelActionFilterProvider() {
		super();
	}

	/**
	 * Retrieves the value of the <code>result</code> instance variable.
	 * 
	 * @@return The value of the <code>result</code> instance variable.
	 * 
	 */
	protected final boolean getResult() {
		return result;
	}

	/**
	 * Sets the <code>result</code> instance variable to the specified value.
	 * 
	 * @@param result The new value for the <code>result</code> instance
	 *                variable.
	 * 
	 */
	protected final void setResult(boolean result) {
		this.result = result;
	}

	/**
	 * Actually does the work of determining whether the specific attribute
	 * matches the state of the target object.
	 *
	 * @@return <code>true</code> if the attribute matches; <code>false</code>
	 *          otherwise.
	 * @@param target The target object.
	 * @@param name The attribute name.
	 * @@param value The attriute value.
	 * 
	 */
	protected abstract boolean doTestAttribute(Object target, String name,
		String value);

	/**
	 * Actually does the work of determining whether this provider provides the
	 * specified operation.
	 * 
	 * @@return <code>true</code> if this provider provides the operation;
	 *          <code>false</code> otherwise.
	 * @@param operation The operation in question.
	 * 
	 */
	protected abstract boolean doProvides(IOperation operation);

	/**
	 * Tests whether the specific attribute matches the state of the target
	 * object, as a read action.
	 *
	 * @@return <code>true</code> if the attribute matches; <code>false</code>
	 *          otherwise.
	 * @@param target The target object.
	 * @@param name The attribute name.
	 * @@param value The attriute value.
	 * 
	 * @@see org.eclipse.ui.IActionFilter#testAttribute(Object, String, String)
	 * 
	 */
	public final boolean testAttribute(final Object target, final String name,
		final String value) {

        TransactionalEditingDomain domain = getEditingDomain(target);

        if (domain == null) {
            return false;
        }
            
        try {
            domain.runExclusive(new Runnable() {

                public void run() {
                    try {
                        setResult(doTestAttribute(target, name, value));
                    } catch (Exception e) {
                        Trace.catching(MslUIPlugin.getDefault(),
                            MslUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                            "testAttribute", e); //$NON-NLS-1$
                        Log.warning(MslUIPlugin.getDefault(),
                            MslUIStatusCodes.IGNORED_EXCEPTION_WARNING, e
                                .getMessage(), e);
                        RuntimeException cre = new RuntimeException(e);
                        Trace.throwing(MslUIPlugin.getDefault(),
                            MslUIDebugOptions.EXCEPTIONS_THROWING, getClass(),
                            "testAttribute", cre); //$NON-NLS-1$
                        throw cre;
                    }
                }
            });
        } catch (InterruptedException e) {
            Trace.catching(MslUIPlugin.getDefault(),
                MslUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                "testAttribute", e); //$NON-NLS-1$
            Log.error(MslUIPlugin.getDefault(),
                MslUIStatusCodes.IGNORED_EXCEPTION_WARNING, e
                    .getLocalizedMessage(), e);
        }

        return getResult();
	}

	/**
     * Tests whether this provider provides the specified operation, as a read
     * action.
     * 
     * @@return <code>true</code> if this provider provides the operation;
     *         <code>false</code> otherwise.
     * @@param operation
     *            The operation in question.
     * 
     * @@see org.eclipse.gmf.runtime.common.core.service.IProvider#provides(IOperation)
     * 
     */
	public final boolean provides(final IOperation operation) {

        TransactionalEditingDomain domain = null;

        if (operation instanceof TestAttributeOperation) {
            Object target = ((TestAttributeOperation) operation).getTarget();

            if (target != null) {
                domain = getEditingDomain(target);
            }
        }

        if (domain == null) {
            return false;
        }
        
		try {
			domain.runExclusive(new Runnable() {

				public void run() {
					try {
						setResult(doProvides(operation));
					} catch (Exception e) {
						Trace.catching(MslUIPlugin.getDefault(),
							MslUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
							"provides", e); //$NON-NLS-1$
						Log.warning(MslUIPlugin.getDefault(),
							MslUIStatusCodes.IGNORED_EXCEPTION_WARNING, e
								.getMessage(), e);
						RuntimeException cre = new RuntimeException(
							e);
						Trace.throwing(MslUIPlugin.getDefault(),
							MslUIDebugOptions.EXCEPTIONS_THROWING, getClass(),
							"provides", cre); //$NON-NLS-1$
						throw cre;
					}
				}
			});
		} catch (InterruptedException e) {
            Trace.catching(MslUIPlugin.getDefault(),
                MslUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                "provides", e); //$NON-NLS-1$
            Log.error(MslUIPlugin.getDefault(),
                MslUIStatusCodes.IGNORED_EXCEPTION_WARNING, e
                    .getLocalizedMessage(), e);
		}

		return getResult();
	}
    
    /**
     * Determines the editing domain from the target object.
     * 
     * @@param target
     *            the target object
     * @@return the editing domain
     */
    protected TransactionalEditingDomain getEditingDomain(Object target) {
        return TransactionUtil.getEditingDomain(target);
    }

}
@


1.3
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d111 1
a111 1
        TransactionalEditingDomain domain = TransactionUtil.getEditingDomain(target);
d170 1
a170 1
                domain = TransactionUtil.getEditingDomain(target);
d211 11
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d14 2
d20 1
a20 2
import org.eclipse.gmf.runtime.emf.core.exceptions.MSLActionAbandonedException;
import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;
d111 1
a111 2
		try {
			OperationUtil.runAsRead(new Runnable() {
d113 33
a145 25
				public void run() {
					try {
						setResult(doTestAttribute(target, name, value));
					} catch (Exception e) {
						Trace.catching(MslUIPlugin.getDefault(),
							MslUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
							"testAttribute", e); //$NON-NLS-1$
						Log.warning(MslUIPlugin.getDefault(),
							MslUIStatusCodes.IGNORED_EXCEPTION_WARNING, e
								.getMessage(), e);
						RuntimeException cre = new RuntimeException(
							e);
						Trace.throwing(MslUIPlugin.getDefault(),
							MslUIDebugOptions.EXCEPTIONS_THROWING, getClass(),
							"testAttribute", cre); //$NON-NLS-1$
						throw cre;
					}
				}
			});
		} catch (MSLActionAbandonedException e) {
			// This is not expected to happen.
			Trace.trace(MslUIPlugin.getDefault(),
				MslUIDebugOptions.MODEL_OPERATIONS,
				"MSLActionAbandonedException"); //$NON-NLS-1$
		}
d147 1
a147 1
		return getResult();
d151 11
a161 10
	 * Tests whether this provider provides the specified operation, as a read
	 * action.
	 * 
	 * @@return <code>true</code> if this provider provides the operation;
	 *          <code>false</code> otherwise.
	 * @@param operation The operation in question.
	 * 
	 * @@see org.eclipse.gmf.runtime.common.core.service.IProvider#provides(IOperation)
	 * 
	 */
d164 14
d179 1
a179 1
			OperationUtil.runAsRead(new Runnable() {
d200 7
a206 5
		} catch (MSLActionAbandonedException e) {
			// This is not expected to happen.
			Trace.trace(MslUIPlugin.getDefault(),
				MslUIDebugOptions.MODEL_OPERATIONS,
				"MSLActionAbandonedException"); //$NON-NLS-1$
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

