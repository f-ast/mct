<<<<<<
abstract public class DiagramEditor extends GraphicalEditorWithFlyoutPalette {
    <<<<<<
    private ISelectionListener selectionListener = new ISelectionListener () {

        public void selectionChanged (IWorkbenchPart part, ISelection selection);
    }

    ;
    <<<<<<
    private static class UpdatableActionGroup {

        public void addAction (UpdateAction action);
        public void removeAction (UpdateAction action);
        public void update ();
    }

    protected CommandStackListener getStackActionsListener (); <<<<<<
    <<<<<<

    protected PaletteRoot getPaletteRoot ();
    protected PropertySheetPage getPropertySheetPage ();
    protected TransactionalEditingDomain getEditingDomain ();
    protected ZoomManager getZoomManager ();
    abstract protected AdapterFactory getDomainAdapterFactory ();
    abstract protected void configurePalette (PaletteRoot paletteRoot); protected class DiagramContentOutlinePage extends Page implements IContentOutlinePage {

        @Override
        public Control getControl ();
        @Override
        public void createControl (Composite parent); <<<<<<

        @Override
        public void init (IPageSite pageSite); <<<<<<

        protected void configureOutlinePage ();
        protected void configureTreeViewer (TreeViewer treeViewer);
        protected void hookOutlineViewer (TreeViewer viewer);
        protected void initializeOverview ();
        protected void showPage (int pageId);
        protected void unhookOutlineViewer (TreeViewer viewer);
        public ISelection getSelection ();
        public void addSelectionChangedListener (ISelectionChangedListener listener);
        public void removeSelectionChangedListener (ISelectionChangedListener listener);
        public void setSelection (ISelection selection);
    }

    <<<<<<
    final protected static int ID_OUTLINE = 1;
    final protected static int ID_OVERVIEW = 0;
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<

    protected void firePropertyChange (int propertyId);
    protected void save (IProgressMonitor progressMonitor) throws CoreException;
    public Object getAdapter (Class type);
    public boolean isDirty ();
    public boolean isSaveAsAllowed ();
    final public void createPartControl (Composite parent);
    public void dispose ();
    public void doSaveAs ();
    public void init (IEditorSite site, IEditorInput input) throws PartInitException;
    public void setFocus ();
}

>>>>>>
abstract public class DiagramEditor extends EditorPart implements IDiagramManager {

    @Override
    public Object getAdapter (Class type);
    @Override
    public boolean isDirty ();
    @Override
    public boolean isSaveAsAllowed ();
    @Override
    public void createPartControl (Composite parent); >>>>>>

    @Override
    public void doSaveAs ();
    @Override
    public void init (IEditorSite site, IEditorInput input) throws PartInitException; >>>>>>
    >>>>>>
    >>>>>>

    protected EditDomain createEditDomain (); >>>>>>
    >>>>>>

    protected IPropertySheetPage getPropertySheetPage ();
    protected TransactionalEditingDomain createEditingDomain ();
    protected TransactionalEditingDomain getEditingDomain (IEditorInput editorInput);
    abstract protected void createActions ();
    final protected ActionRegistry getActionRegistry ();
    final protected CommandStack getCommandStack ();
    final protected EditDomain getEditDomain ();
    final protected GraphicalViewer getGraphicalViewer ();
    final protected TransactionalEditingDomain getEditingDomain ();
    final protected ZoomManager getZoomManager (); >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>

    protected void save (IProgressMonitor monitor) throws CoreException;
    abstract public AdapterFactory getDomainAdapterFactory ();
    abstract public boolean isFlyoutPalette ();
    abstract public void configurePalette (PaletteRoot paletteRoot);
    abstract public void initializeGraphicalViewer ();
    public void configureGraphicalViewer ();
}

