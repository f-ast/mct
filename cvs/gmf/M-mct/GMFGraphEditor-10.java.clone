<<<<<<
public class GMFGraphEditor extends MultiPageEditorPart implements IEditingDomainProvider, IGotoMarker, IMenuListener, ISelectionProvider, IViewerProvider {
    <<<<<<
    protected Collection changedResources = new ArrayList ();
    protected Collection removedResources = new ArrayList ();
    protected Collection savedResources = new ArrayList ();
    protected Collection selectionChangedListeners = new ArrayList ();
    <<<<<<
    protected EContentAdapter problemIndicationAdapter = new EContentAdapter () {

        protected void setTarget (Resource target);
        protected void unsetTarget (Resource target);
        public void notifyChanged (Notification notification);
    }

    ;
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    protected Map resourceToDiagnosticMap = new LinkedHashMap ();
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<

    protected void firePropertyChange (int action); <<<<<<
    <<<<<<
    <<<<<<

    protected void pageChange (int pageIndex); <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<

    public IPropertySheetPage getPropertySheetPage () {
        if (propertySheetPage == null) {
            propertySheetPage = new ExtendedPropertySheetPage (editingDomain) {

                public void setActionBars (IActionBars actionBars);
                public void setSelectionToViewer (List selection);
            }

            ;
            propertySheetPage.setPropertySourceProvider (new AdapterFactoryContentProvider (adapterFactory));
        }
        return propertySheetPage;
    } <<<<<<

    public Object getAdapter (Class key); <<<<<<

    public boolean isDirty ();
    public boolean isSaveAsAllowed (); <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<

    public void createPages ();
    public void dispose ();
    public void doSave (IProgressMonitor progressMonitor);
    public void doSaveAs (); <<<<<<
    <<<<<<

    public void init (IEditorSite site, IEditorInput editorInput); <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<

    public void setFocus (); <<<<<<

    public void setSelectionToViewer (Collection collection); <<<<<<

}

>>>>>>
public class GMFGraphEditor extends MultiPageEditorPart implements IEditingDomainProvider, IGotoMarker, IMenuListener, ISelectionProvider, IViewerProvider {

    @Override
    protected void firePropertyChange (int action);
    @Override
    protected void pageChange (int pageIndex);
    @Override
    public boolean isDirty ();
    @Override
    public boolean isSaveAsAllowed ();
    @Override
    public void createPages ();
    @Override
    public void dispose ();
    @Override
    public void doSave (IProgressMonitor progressMonitor);
    @Override
    public void doSaveAs ();
    @Override
    public void init (IEditorSite site, IEditorInput editorInput);
    @Override
    public void setFocus ();
    @SuppressWarnings("unchecked")
    @Override
    public Object getAdapter (Class key); >>>>>>
    protected Collection < ISelectionChangedListener > selectionChangedListeners = new ArrayList < ISelectionChangedListener > ();
    protected Collection < Resource > changedResources = new ArrayList < Resource > ();
    protected Collection < Resource > removedResources = new ArrayList < Resource > ();
    protected Collection < Resource > savedResources = new ArrayList < Resource > ();
    >>>>>>
    protected EContentAdapter problemIndicationAdapter = new EContentAdapter () {

        @Override
        protected void setTarget (Resource target);
        @Override
        protected void unsetTarget (Resource target);
        @Override
        public void notifyChanged (Notification notification);
    }

    ;
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    protected Map < Resource, Diagnostic > resourceToDiagnosticMap = new LinkedHashMap < Resource, Diagnostic > ();
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>

    public IPropertySheetPage getPropertySheetPage () {
        if (propertySheetPage == null) {
            propertySheetPage = new ExtendedPropertySheetPage (editingDomain) {

                @Override
                public void setActionBars (IActionBars actionBars);
                @Override
                public void setSelectionToViewer (List < ? > selection);
            }

            ;
            propertySheetPage.setPropertySourceProvider (new AdapterFactoryContentProvider (adapterFactory));
        }
        return propertySheetPage;
    } >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>

    public void setSelectionToViewer (Collection < ? > collection); >>>>>>

}

