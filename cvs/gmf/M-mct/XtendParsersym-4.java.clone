<<<<<<
public interface XtendParsersym {
    final public static String orderedTerminalSymbols [] = {"", "IDENT", "LPAREN", "Collection", "List", "Set", "NOT", "STRING", "typeSelect", "collect", "select", "reject", "exists", "notExists", "forAll", "RPAREN", "LCURLY", "INT_CONST", "REAL_CONST", "new", "false", "true", "null", "MINUS", "switch", "SEMI", "COLON", "let", "DCOLON", "RCURLY", "DOT", "COMMA", "LSQUARE", "RSQUARE", "EOF_TOKEN", "implies", "default", "case", "QUESTION_MARK", "ARROW", "AND", "OR", "ASSIGN", "EQ", "NE", "GE", "LE", "GT", "LT", "PLUS", "MULTI", "DIV", "BAR", "import", "extension", "reexport", "private", "create", "cached", "JAVA", "GLOBALVAR", "ERROR_TOKEN"};
    <<<<<<
    final public static int TK_AND = 40, TK_ARROW = 39, TK_ASSIGN = 42, TK_BAR = 52, TK_COLON = 26, TK_COMMA = 31, TK_Collection = 3, TK_DCOLON = 28, TK_DIV = 51, TK_DOT = 30, TK_EOF_TOKEN = 34, TK_EQ = 43, TK_ERROR_TOKEN = 61, TK_GE = 45, TK_GLOBALVAR = 60, TK_GT = 47, TK_IDENT = 1, TK_INT_CONST = 17, TK_JAVA = 59, TK_LCURLY = 16, TK_LE = 46, TK_LPAREN = 2, TK_LSQUARE = 32, TK_LT = 48, TK_List = 4, TK_MINUS = 23, TK_MULTI = 50, TK_NE = 44, TK_NOT = 6, TK_OR = 41, TK_PLUS = 49, TK_QUESTION_MARK = 38, TK_RCURLY = 29, TK_REAL_CONST = 18, TK_RPAREN = 15, TK_RSQUARE = 33, TK_SEMI = 25, TK_STRING = 7, TK_Set = 5, TK_cached = 58, TK_case = 37, TK_collect = 9, TK_create = 57, TK_default = 36, TK_exists = 12, TK_extension = 54, TK_false = 20, TK_forAll = 14, TK_implies = 35, TK_import = 53, TK_let = 27, TK_new = 19, TK_notExists = 13, TK_null = 22, TK_private = 56, TK_reexport = 55, TK_reject = 11, TK_select = 10, TK_switch = 24, TK_true = 21, TK_typeSelect = 8;

}

>>>>>>
public interface XtendParsersym {
    final public static String orderedTerminalSymbols [] = {"", "IDENT", "LPAREN", "Collection", "List", "Set", "NOT", "STRING", "typeSelect", "collect", "select", "reject", "exists", "notExists", "forAll", "RPAREN", "LCURLY", "INT_CONST", "REAL_CONST", "new", "false", "true", "null", "MINUS", "switch", "SEMI", "COLON", "let", "DCOLON", "RCURLY", "DOT", "COMMA", "LSQUARE", "RSQUARE", "PLUS", "EOF_TOKEN", "implies", "default", "case", "QUESTION_MARK", "ARROW", "AND", "OR", "ASSIGN", "EQ", "NE", "GE", "LE", "GT", "LT", "MULTI", "DIV", "BAR", "import", "extension", "reexport", "private", "create", "cached", "JAVA", "GLOBALVAR", "ERROR_TOKEN"};
    >>>>>>
    final public static int TK_AND = 41, TK_ARROW = 40, TK_ASSIGN = 43, TK_BAR = 52, TK_COLON = 26, TK_COMMA = 31, TK_Collection = 3, TK_DCOLON = 28, TK_DIV = 51, TK_DOT = 30, TK_EOF_TOKEN = 35, TK_EQ = 44, TK_ERROR_TOKEN = 61, TK_GE = 46, TK_GLOBALVAR = 60, TK_GT = 48, TK_IDENT = 1, TK_INT_CONST = 17, TK_JAVA = 59, TK_LCURLY = 16, TK_LE = 47, TK_LPAREN = 2, TK_LSQUARE = 32, TK_LT = 49, TK_List = 4, TK_MINUS = 23, TK_MULTI = 50, TK_NE = 45, TK_NOT = 6, TK_OR = 42, TK_PLUS = 34, TK_QUESTION_MARK = 39, TK_RCURLY = 29, TK_REAL_CONST = 18, TK_RPAREN = 15, TK_RSQUARE = 33, TK_SEMI = 25, TK_STRING = 7, TK_Set = 5, TK_cached = 58, TK_case = 38, TK_collect = 9, TK_create = 57, TK_default = 37, TK_exists = 12, TK_extension = 54, TK_false = 20, TK_forAll = 14, TK_implies = 36, TK_import = 53, TK_let = 27, TK_new = 19, TK_notExists = 13, TK_null = 22, TK_private = 56, TK_reexport = 55, TK_reject = 11, TK_select = 10, TK_switch = 24, TK_true = 21, TK_typeSelect = 8;

}

