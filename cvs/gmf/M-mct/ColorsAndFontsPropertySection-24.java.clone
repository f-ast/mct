<<<<<<
public class ColorsAndFontsPropertySection extends AbstractNotationPropertiesSection {
    protected Button fillColorButton;
    protected Button fontColorButton;
    protected Button lineColorButton;
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<

}

>>>>>>
public class ColorsAndFontsPropertySection extends AbstractNotationPropertiesSection {
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>

    protected RGB changeColor (SelectionEvent event, ToolItem toolItem, String preferenceId, final String propertyId, String commandName, ImageDescriptor imageDescriptor);
    protected RGB changeColor (SelectionEvent event, ToolItem toolItem, final String propertyId, String commandName, ImageDescriptor imageDescriptor) {
        ColorPalettePopup popup = new ColorPalettePopup (toolItem.getParent ().getShell (), IDialogConstants.BUTTON_BAR_HEIGHT);
        popup.setPreviousColor (previousColor);
        Rectangle r = toolItem.getBounds ();
        Point location = toolItem.getParent ().toDisplay (r.x, r.y);
        popup.open (new Point (location.x, location.y + r.height));
        if (popup.getSelectedColor () == null && ! popup.useDefaultColor ()) {
            return null;
        }
        final RGB selectedColor = popup.getSelectedColor ();
        final EStructuralFeature feature = (EStructuralFeature) PackageUtil.getElement (propertyId);
        List commands = new ArrayList ();
        Iterator it = getInputIterator ();
        RGB colorToReturn = selectedColor;
        RGB color = selectedColor;
        while (it.hasNext ()) {
            final IGraphicalEditPart ep = (IGraphicalEditPart) it.next ();
            color = selectedColor;
            if (popup.useDefaultColor ()) {
                Object preferredValue = ep.getPreferredValue (feature);
                if (preferredValue instanceof Integer) {
                    color = FigureUtilities.integerToRGB ((Integer) preferredValue);
                }
            }
            if (colorToReturn == null) {
                colorToReturn = color;
            }
            if (color != null) {
                final RGB finalColor = color;
                commands.add (createCommand (commandName, ((View) ep.getModel ()).eResource (), new Runnable () {

                    public void run ();
                }

                ));
            }
        }
        if (! commands.isEmpty ()) {
            executeAsCompositeCommand (commandName, commands);
            Image overlyedImage = new ColorOverlayImageDescriptor (imageDescriptor.getImageData (), color).createImage ();
            disposeImage (toolItem.getImage ());
            toolItem.setImage (overlyedImage);
        }
        return colorToReturn;
    } >>>>>>
    >>>>>>
    >>>>>>
    protected ToolItem fillColorButton;
    protected ToolItem fontColorButton;
    protected ToolItem lineColorButton;
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>

}

