<<<<<<
public class CompositeCommand implements ICommand {

    protected CommandResult newCancelledCommandResult ();
    protected String getPluginId ();
    protected boolean isCanceled (); final protected static String EMPTY_STRING = "";

    protected void setCanceled (boolean canceled);
    protected void undoCancelledCommands (List executedCommands);
    public CMValidator getValidator ();
    public CommandResult getCommandResult (); <<<<<<

    public CompositeCommand (String label, List commands) {
    }

    public ICommand unwrap ();
    public boolean involvesReadOnlyNonWorkSpaceFiles ();
    final public Collection getAffectedObjects ();
    final public ICommand compose (ICommand command);
    final public List getCommands ();
    final public String getLabel (); <<<<<<

    final public boolean isExecutable ();
    final public boolean isRedoable ();
    final public boolean isUndoable ();
    public void execute (IProgressMonitor progressMonitor);
    public void redo ();
    public void undo ();
}

>>>>>>
public class CompositeCommand extends AbstractCommand implements ICompositeCommand {
    private class ChildIterator implements Iterator {
        protected Object last;
        final protected ListIterator iter;

        public Object next ();
        public boolean hasNext ();
        public void remove ();
    }

    private class ChildListIterator extends ChildIterator implements ListIterator {

        public Object previous ();
        public boolean hasPrevious ();
        public int nextIndex ();
        public int previousIndex ();
        public void add (Object o);
        public void set (Object o);
    }

    protected CommandResult doExecuteWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException;
    protected CommandResult doRedoWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException;
    protected CommandResult doUndoWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException;
    protected IStatus aggregateStatuses (List statuses);
    protected List getChildren ();
    protected List getReturnValues ();
    final protected boolean isExecuted ();
    final protected void assertNotExecuted (); >>>>>>

    public CompositeCommand (String label, List children) {
    }

    public ICommand reduce ();
    public Iterator iterator ();
    public List getAffectedFiles ();
    public ListIterator listIterator ();
    public ListIterator listIterator (int index);
    public boolean canExecute ();
    public boolean canRedo ();
    public boolean canUndo ();
    final public ICommand compose (IUndoableOperation operation); >>>>>>

    public int size ();
    public void add (IUndoableOperation operation);
    public void dispose ();
    public void remove (IUndoableOperation operation);
}

