<<<<<<
public class ColorsAndFontsPropertySection extends AbstractNotationPropertiesSection {
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    final protected static String BOLD_IMAGE_NAME = "bold.gif";
    final protected static String FILL_COLOR_IMAGE_NAME = "fill_color.gif";
    final protected static String FONTS_AND_COLORS_LABEL = ResourceManager.getI18NString ("FontAndColor.nameLabel");
    final protected static String FONT_COLOR_COMMAND_NAME = ResourceManager.getI18NString ("FontColor.commandText") + StringStatics.SPACE + VALUE_CHANGED_STRING;
    final protected static String FONT_COMMAND_NAME = ResourceManager.getI18NString ("Font.commandText") + StringStatics.SPACE + VALUE_CHANGED_STRING;
    final protected static String ITALIC_IMAGE_NAME = "italic.gif";
    final protected static String LINE_COLOR_COMMAND_NAME = ResourceManager.getI18NString ("LineColor.commandText") + StringStatics.SPACE + VALUE_CHANGED_STRING;
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    final protected static String FILL_COLOR_COMMAND_NAME = ResourceManager.getI18NString ("FillColor.commandText") + StringStatics.SPACE + VALUE_CHANGED_STRING;

}

>>>>>>
public class ColorsAndFontsPropertySection extends AbstractNotationPropertiesSection {
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>

    protected RGB changeColor (SelectionEvent event, ToolItem button, String preferenceId, final String propertyId, String commandName, ImageDescriptor imageDescriptor) {
        ColorPalettePopup popup = new ColorPalettePopup (button.getParent ().getShell (), preferenceId, IDialogConstants.BUTTON_BAR_HEIGHT);
        Rectangle r = button.getBounds ();
        Point location = button.getParent ().toDisplay (r.x, r.y);
        popup.open (new Point (location.x, location.y + r.height));
        if (popup.getSelectedColor () != null) {
            final RGB color = popup.getSelectedColor ();
            if (color != null) {
                List commands = new ArrayList ();
                Iterator it = getInputIterator ();
                while (it.hasNext ()) {
                    final IGraphicalEditPart ep = (IGraphicalEditPart) it.next ();
                    commands.add (createCommand (commandName, ((View) ep.getModel ()).eResource (), new Runnable () {

                        public void run ();
                    }

                    ));
                }
                executeAsCompositeCommand (commandName, commands);
                Image overlyedImage = new ColorOverlayImageDescriptor (imageDescriptor.getImageData (), color).createImage ();
                button.setImage (overlyedImage);
            }
            return color;
        }
        return null;
    } >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    final protected static String FONTS_AND_COLORS_LABEL = DiagramUIPropertiesMessages.FontAndColor_nameLabel;
    final protected static String FONT_COLOR_COMMAND_NAME = DiagramUIPropertiesMessages.FontColor_commandText + StringStatics.SPACE + VALUE_CHANGED_STRING;
    final protected static String FONT_COMMAND_NAME = DiagramUIPropertiesMessages.Font_commandText + StringStatics.SPACE + VALUE_CHANGED_STRING;
    final protected static String LINE_COLOR_COMMAND_NAME = DiagramUIPropertiesMessages.LineColor_commandText + StringStatics.SPACE + VALUE_CHANGED_STRING;
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    final protected static String FILL_COLOR_COMMAND_NAME = DiagramUIPropertiesMessages.FillColor_commandText + StringStatics.SPACE + VALUE_CHANGED_STRING;

}

