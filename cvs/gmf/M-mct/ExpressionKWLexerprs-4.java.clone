[ExpressionKWLexerprs-3.java, Txl/api_clone_java.Txl] : TXL0987E - Out of kid space - 4800000 kids have been allocated.
<<<<<<
public class ExpressionKWLexerprs implements ExpressionKWLexersym, lpg.lpgjavaruntime.ParseTable {
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<
    final public static int ACCEPT_ACTION = 109, EOFT_SYMBOL = 26, EOLT_SYMBOL = 55, ERROR_ACTION = 110, IDENTIFIER_SYMBOL = 0, LA_STATE_OFFSET = 129, MAX_LA = 0, NT_OFFSET = 54, NUM_NONTERMINALS = 2, NUM_RULES = 19, NUM_STATES = 87, NUM_SYMBOLS = 56, SEGMENT_SIZE = 8192, START_STATE = 20;
    <<<<<<
    <<<<<<
    public interface IsKeyword {
        final public static byte isKeyword [] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    };

    <<<<<<
    public interface TermCheck {
        final public static byte termCheck [] = {0, 0, 1, 2, 3, 4, 5, 6, 0, 0, 9, 2, 11, 12, 0, 0, 1, 16, 17, 0, 0, 0, 7, 9, 23, 10, 25, 7, 8, 0, 1, 0, 0, 1, 26, 21, 15, 0, 7, 8, 0, 0, 1, 14, 7, 0, 6, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 6, 3, 0, 0, 2, 2, 0, 20, 11, 13, 4, 0, 19, 0, 0, 0, 3, 6, 0, 0, 2, 0, 0, 9, 3, 0, 0, 2, 13, 10, 0, 1, 0, 0, 2, 0, 14, 4, 3, 0, 0, 2, 0, 0, 2, 0, 1, 0, 8, 0, 1, 0, 0, 0, 3, 2, 4, 0, 1, 0, 1, 0, 0, 1, 0, 22, 5, 3, 0, 0, 0, 24, 0, 1, 6, 5, 0, 0, 0, 10, 2, 5, 0, 1, 0, 0, 0, 0, 3, 0, 4, 2, 5, 16, 0, 1, 0, 0, 0, 15, 3, 5, 0, 0, 2, 0, 1, 0, 0, 6, 3, 0, 4, 0, 3, 0, 18, 0, 3, 2, 0, 0, 0, 1, 4, 0, 0, 6, 3, 0, 0, 0, 0, 7, 5, 4, 0, 0, 0, 3, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    };

}

>>>>>>
public class ExpressionKWLexerprs implements ExpressionKWLexersym, lpg.lpgjavaruntime.ParseTable {
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>
    final public static int ACCEPT_ACTION = 109, EOFT_SYMBOL = 26, EOLT_SYMBOL = 54, ERROR_ACTION = 110, IDENTIFIER_SYMBOL = 0, LA_STATE_OFFSET = 129, MAX_LA = 0, NT_OFFSET = 53, NUM_NONTERMINALS = 2, NUM_RULES = 19, NUM_STATES = 87, NUM_SYMBOLS = 55, SEGMENT_SIZE = 8192, START_STATE = 20;
    >>>>>>
    >>>>>>
    public interface IsKeyword {
        final public static byte isKeyword [] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    };

    >>>>>>
    public interface TermCheck {
        final public static byte termCheck [] = {0, 0, 1, 2, 3, 4, 5, 6, 0, 0, 9, 2, 11, 12, 0, 0, 1, 16, 17, 0, 0, 0, 7, 9, 23, 10, 25, 7, 8, 0, 1, 0, 0, 1, 26, 21, 15, 0, 7, 8, 0, 0, 1, 14, 7, 0, 6, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 6, 3, 0, 0, 2, 2, 0, 20, 11, 13, 4, 0, 19, 0, 0, 0, 3, 6, 0, 0, 2, 0, 0, 9, 3, 0, 0, 2, 13, 10, 0, 1, 0, 0, 2, 0, 14, 4, 3, 0, 0, 2, 0, 0, 2, 0, 1, 0, 8, 0, 1, 0, 0, 0, 3, 2, 4, 0, 1, 0, 1, 0, 0, 1, 0, 22, 5, 3, 0, 0, 0, 24, 0, 1, 6, 5, 0, 0, 0, 10, 2, 5, 0, 1, 0, 0, 0, 0, 3, 0, 4, 2, 5, 16, 0, 1, 0, 0, 0, 15, 3, 5, 0, 0, 2, 0, 1, 0, 0, 6, 3, 0, 4, 0, 3, 0, 18, 0, 3, 2, 0, 0, 0, 1, 4, 0, 0, 6, 3, 0, 0, 0, 0, 7, 5, 4, 0, 0, 0, 3, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    };

}

