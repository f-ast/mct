<<<<<<
abstract public class AbstractCommand implements ICommand {

    protected AbstractCommand (String label) {
    }

    protected CommandResult doRedo ();
    protected CommandResult doUndo ();
    protected CommandResult newCancelledCommandResult ();
    protected CommandResult newErrorCommandResult (String errorMessage);
    protected CommandResult newOKCommandResult ();
    protected CommandResult newOKCommandResult (Object returnValue);
    protected CommandResult newWarningCommandResult (String warningMessage, Object returnValue);
    protected String getPluginId ();
    abstract protected CommandResult doExecute (IProgressMonitor progressMonitor); <<<<<<
    final protected static String EMPTY_STRING = "";
    <<<<<<
    <<<<<<
    <<<<<<

    public ICommand compose (ICommand command);
    public String getLabel (); <<<<<<
    <<<<<<
    <<<<<<
    <<<<<<

    final public CommandResult getCommandResult (); <<<<<<
    <<<<<<
    <<<<<<

}

>>>>>>
abstract public class AbstractCommand extends AbstractOperation implements ICommand {

    abstract protected CommandResult doExecuteWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException;
    abstract protected CommandResult doRedoWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException;
    abstract protected CommandResult doUndoWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException; >>>>>>
    >>>>>>

    public AbstractCommand (String label) {
    }

    public AbstractCommand (String label, List affectedFiles) {
    }

    >>>>>>
    >>>>>>

    public CommandResult getCommandResult ();
    public ICommand compose (IUndoableOperation operation);
    public ICommand reduce ();
    public IStatus execute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException;
    public IStatus redo (IProgressMonitor monitor, IAdaptable info) throws ExecutionException;
    public IStatus undo (IProgressMonitor monitor, IAdaptable info) throws ExecutionException;
    public List getAffectedFiles (); >>>>>>
    >>>>>>
    >>>>>>
    >>>>>>

    public void dispose (); >>>>>>
    >>>>>>
    >>>>>>

}

