head	1.1;
access;
symbols
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2008.07.29.15.57.54;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	33cb488f3dd14567;

1.1.2.1
date	2008.07.29.15.57.54;	author ashatalin;	state Exp;
branches;
next	;
commitid	33cb488f3dd14567;


desc
@@


1.1
log
@file XpandParsersym.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@Xtend-based implementation of XPand extensions was separated into .migration plugin.
@
text
@a0 183
/*******************************************************************************
* Copyright (c) 2006, 2007 Eclipse.org
* 
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
package org.eclipse.gmf.internal.xpand.parser;

public interface XpandParsersym {
    public final static int
      TK_IDENT = 1,
      TK_STRING = 9,
      TK_INT_CONST = 18,
      TK_REAL_CONST = 19,
      TK_let = 27,
      TK_switch = 25,
      TK_implies = 42,
      TK_new = 20,
      TK_false = 21,
      TK_true = 22,
      TK_null = 23,
      TK_default = 43,
      TK_case = 44,
      TK_Collection = 3,
      TK_List = 4,
      TK_Set = 5,
      TK_typeSelect = 10,
      TK_collect = 11,
      TK_select = 12,
      TK_reject = 13,
      TK_exists = 14,
      TK_notExists = 15,
      TK_forAll = 16,
      TK_QUESTION_MARK = 45,
      TK_DCOLON = 28,
      TK_COLON = 30,
      TK_LPAREN = 2,
      TK_RPAREN = 7,
      TK_LCURLY = 17,
      TK_RCURLY = 32,
      TK_LSQUARE = 46,
      TK_RSQUARE = 47,
      TK_ARROW = 48,
      TK_NOT = 8,
      TK_AND = 49,
      TK_OR = 50,
      TK_ASSIGN = 51,
      TK_EQ = 52,
      TK_NE = 53,
      TK_GE = 54,
      TK_LE = 55,
      TK_GT = 56,
      TK_LT = 57,
      TK_PLUS = 34,
      TK_MINUS = 6,
      TK_MULTI = 29,
      TK_DIV = 58,
      TK_DOT = 35,
      TK_COMMA = 33,
      TK_BAR = 59,
      TK_IMPORT = 60,
      TK_EXTENSION = 61,
      TK_AROUND = 36,
      TK_ENDAROUND = 31,
      TK_DEFINE = 37,
      TK_ENDDEFINE = 38,
      TK_ERROR = 62,
      TK_EXPAND = 63,
      TK_FOR = 26,
      TK_SEPARATOR = 64,
      TK_AS = 39,
      TK_ITERATOR = 65,
      TK_FOREACH = 40,
      TK_ENDFOREACH = 66,
      TK_FILE = 67,
      TK_ENDFILE = 68,
      TK_IF = 69,
      TK_ELSEIF = 70,
      TK_ELSE = 71,
      TK_ENDIF = 72,
      TK_LET = 73,
      TK_ENDLET = 74,
      TK_PROTECT = 75,
      TK_CSTART = 76,
      TK_CEND = 77,
      TK_ID = 78,
      TK_DISABLE = 79,
      TK_ENDPROTECT = 80,
      TK_LG = 81,
      TK_EOF_TOKEN = 41,
      TK_TEXT = 24,
      TK_ERROR_TOKEN = 82;

      public final static String orderedTerminalSymbols[] = {
                 "",
                 "IDENT",
                 "LPAREN",
                 "Collection",
                 "List",
                 "Set",
                 "MINUS",
                 "RPAREN",
                 "NOT",
                 "STRING",
                 "typeSelect",
                 "collect",
                 "select",
                 "reject",
                 "exists",
                 "notExists",
                 "forAll",
                 "LCURLY",
                 "INT_CONST",
                 "REAL_CONST",
                 "new",
                 "false",
                 "true",
                 "null",
                 "TEXT",
                 "switch",
                 "FOR",
                 "let",
                 "DCOLON",
                 "MULTI",
                 "COLON",
                 "ENDAROUND",
                 "RCURLY",
                 "COMMA",
                 "PLUS",
                 "DOT",
                 "AROUND",
                 "DEFINE",
                 "ENDDEFINE",
                 "AS",
                 "FOREACH",
                 "EOF_TOKEN",
                 "implies",
                 "default",
                 "case",
                 "QUESTION_MARK",
                 "LSQUARE",
                 "RSQUARE",
                 "ARROW",
                 "AND",
                 "OR",
                 "ASSIGN",
                 "EQ",
                 "NE",
                 "GE",
                 "LE",
                 "GT",
                 "LT",
                 "DIV",
                 "BAR",
                 "IMPORT",
                 "EXTENSION",
                 "ERROR",
                 "EXPAND",
                 "SEPARATOR",
                 "ITERATOR",
                 "ENDFOREACH",
                 "FILE",
                 "ENDFILE",
                 "IF",
                 "ELSEIF",
                 "ELSE",
                 "ENDIF",
                 "LET",
                 "ENDLET",
                 "PROTECT",
                 "CSTART",
                 "CEND",
                 "ID",
                 "DISABLE",
                 "ENDPROTECT",
                 "LG",
                 "ERROR_TOKEN"
             };

    public final static boolean isValidForParser = true;
}
@

