head	1.1;
access;
symbols
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2008.07.29.15.57.58;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	33cb488f3dd14567;

1.1.2.1
date	2008.07.29.15.57.58;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	33cb488f3dd14567;

1.1.2.2
date	2008.08.01.09.16.53;	author ashatalin;	state Exp;
branches;
next	1.1.2.3;
commitid	6e264892d4804567;

1.1.2.3
date	2008.08.06.11.05.53;	author ashatalin;	state Exp;
branches;
next	1.1.2.4;
commitid	6b3c4899858e4567;

1.1.2.4
date	2008.08.28.15.51.00;	author ashatalin;	state Exp;
branches;
next	;
commitid	35c448b6c95d4567;


desc
@@


1.1
log
@file ExtensionFile.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@Xtend-based implementation of XPand extensions was separated into .migration plugin.
@
text
@a0 109
/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.xtend.ast;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.eclipse.gmf.internal.xpand.ResourceManager;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.expression.ast.SyntaxElement;

public class ExtensionFile extends SyntaxElement implements XtendResource {

    private final List<ImportStatement> nsImports;

    private final List<ImportStatement> extImports;

    private final List<Extension> extensions;

    @@SuppressWarnings("unchecked")
	public ExtensionFile(final int start, final int end, final int line, final List<? extends SyntaxElement> nsImports, final List<? extends SyntaxElement> extImports,
            final List<? extends SyntaxElement> extensions) {
        super(start, end, line);
        this.nsImports = (List<ImportStatement>) nsImports;
        this.extImports = (List<ImportStatement>) extImports;
        this.extensions = (List<Extension>) extensions;
        for (Extension ext: this.extensions) {
            ext.setExtensionFile(this);
        }
    }

    public List<Extension> getExtensions() {
        return extensions;
    }

    public List<ImportStatement> getExtImports() {
        return extImports;
    }

    public List<ImportStatement> getNsImports() {
        return nsImports;
    }

    public String[] getImportedNamespaces() {
        final List<String> namespaces = new ArrayList<String>(getNsImports().size());
        for (ImportStatement nsImport : getNsImports()) {
            namespaces.add(nsImport.getValue());
        }
        return namespaces.toArray(new String[namespaces.size()]);
    }

    public String[] getImportedExtensions() {
        final List<String> result = new ArrayList<String>(getExtImports().size());
        for (ImportStatement nsImport : getExtImports()) {
            result.add(nsImport.getValue());
        }
        return result.toArray(new String[result.size()]);
    }

    public void analyze(ExecutionContext ctx, final Set<AnalysationIssue> issues) {
        ctx = ctx.cloneWithResource(this);
        for (Extension ext : getExtensions()) {
            ext.analyze(ctx, issues);
        }
    }

    private String fullyQualifiedName;

    public void setFullyQualifiedName(final String fullyQualifiedName) {
        this.fullyQualifiedName = fullyQualifiedName;
    }

    /**
     * XXX who cares?
     */
    public String getFullyQualifiedName() {
        return fullyQualifiedName;
    }

    public List<Extension> getPublicExtensions(ResourceManager rm) {
        final List<Extension> result = new ArrayList<Extension>();
        for (Extension element : getExtensions()) {
            if (!element.isPrivate()) {
                result.add(element);
            }
        }
        for (ImportStatement imp  : getExtImports()) {
            if (imp.isExported()) {
                final XtendResource xf = rm.loadXtendResource(imp.getImportedId().getValue());
                result.addAll(xf.getPublicExtensions(rm));
            }
        }
        return result;
    }
}
@


1.1.2.2
log
@Migration implementation + unit-tests for basic extend elements.
@
text
@a108 9

	public boolean isReexported(String importedExtensionName) {
		for (ImportStatement extensionImport : getExtImports()) {
			if (extensionImport.getValue().equals(importedExtensionName)) {
				return extensionImport.isExported();
			}
		}
		return false;
	}
@


1.1.2.3
log
@Copyrights updated.
@
text
@d4 1
a4 1
 * Copyright (c) 2005-2008 Sven Efftinge and others.
a11 1
 *     Alexander Shatalin (Borland)
@


1.1.2.4
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 First step toward .xpt migration.
@
text
@d36 1
a36 1
	public ExtensionFile(final int start, final int end, final int line, final int startOffset, final int endOffset, final List<? extends SyntaxElement> nsImports, final List<? extends SyntaxElement> extImports,
d38 1
a38 1
        super(start, end, line, startOffset, endOffset);
@


