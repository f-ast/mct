head	1.1;
access;
symbols
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2008.08.13.09.24.39;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	1f3148a2a8554567;

1.1.2.1
date	2008.08.13.09.24.39;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	1f3148a2a8554567;

1.1.2.2
date	2008.08.15.11.48.33;	author ashatalin;	state Exp;
branches;
next	1.1.2.3;
commitid	373748a56d0c4567;

1.1.2.3
date	2008.09.26.18.15.48;	author ashatalin;	state Exp;
branches;
next	1.1.2.4;
commitid	2780148dd26d24567;

1.1.2.4
date	2008.10.01.17.10.23;	author ashatalin;	state Exp;
branches;
next	1.1.2.5;
commitid	3bbdb48e3aefd4567;

1.1.2.5
date	2008.10.20.17.07.39;	author ashatalin;	state Exp;
branches;
next	;
commitid	3206948fcbada4567;


desc
@@


1.1
log
@file OperationCallTrace.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 Correctly transforming collection types on implicit collect operations for OperationCall expression + unit-tests.
@
text
@a0 78
/**
 * Copyright (c) 2008 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.xpand.migration;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EOperation;

public class OperationCallTrace implements ExpressionAnalyzeTrace {

	public enum Type {
		UNDESOLVED_PARAMETER_TYPE, UNDESOLVED_TARGET_TYPE, STATIC_EXTENSION_REF, OPERATION_REF, EXTENSION_REF, IMPLICIT_COLLECT_OPERATION_REF, IMPLICIT_COLLECT_EXTENSION_REF
	}

	private EClassifier resultType;

	private Type type;

	private EOperation operation;

	private EClassifier targetType;

	public OperationCallTrace(EClassifier result, Type type) {
		resultType = result;
		this.type = type;
	}

	public OperationCallTrace(EClassifier result, EOperation operation) {
		this(result, Type.OPERATION_REF);
		this.operation = operation;
	}

	public OperationCallTrace(EClass result, EClassifier targetType) {
		this(result, Type.IMPLICIT_COLLECT_EXTENSION_REF);
		this.targetType = targetType;
	}

	public OperationCallTrace(EClass result, EClassifier targetType, EOperation operation) {
		this(result, Type.IMPLICIT_COLLECT_OPERATION_REF);
		this.targetType = targetType;
		this.operation = operation;
	}

	public EClassifier getResultType() {
		return resultType;
	}

	public Type getType() {
		return type;
	}

	/**
	 * @@return EOperation referenced by this OperationCall or null if getType()
	 *         != OPERATION_REF
	 */
	public EOperation getEOperation() {
		return operation;
	}

	/**
	 * @@return EClassifier representing the type of OperationCall target or null
	 *         if getType() != (IMPLICIT_COLLECT_OPERATION_REF ||
	 *         IMPLICIT_COLLECT_EXTENSION_REF)
	 */
	public EClassifier getTargetType() {
		return targetType;
	}

}
@


1.1.2.2
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 Supporting collection operation calls.
@
text
@a31 2
	private EClassifier[] paramTypes;

d37 5
d47 2
a48 2
	public OperationCallTrace(EClassifier result, EClassifier targetType, EOperation operation, Type type) {
		this(result, type);
a52 5
	public OperationCallTrace(EClassifier result, EClassifier targetType, EOperation operation, EClassifier[] paramTypes) {
		this(result, targetType, operation, OperationCallTrace.Type.OPERATION_REF);
		this.paramTypes = paramTypes;
	}

d63 1
a63 1
	 *         != (OPERATION_REF || IMPLICIT_COLLECT_OPERATION_REF)
d71 2
a72 2
	 *         if getType() != (OPERATION_REF || IMPLICIT_COLLECT_OPERATION_REF
	 *         || IMPLICIT_COLLECT_EXTENSION_REF)
a77 9
	// TODO: return only collection parameter type?..
	/**
	 * @@return EClassifier[] representing types of OperationCall parameters or
	 *         null if getType() != OPERATION_REF
	 */
	public EClassifier[] getParamTypes() {
		return paramTypes;
	}

@


1.1.2.3
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - more gentle collection operations migration implemented
@
text
@a13 2
import java.util.List;

d18 1
a18 1
public class OperationCallTrace extends ExpressionAnalyzeTrace {
d24 2
d32 1
a32 1
	private List<EClassifier> paramTypes;
d34 2
a35 3
	public OperationCallTrace(EClassifier result, List<EClassifier> paramTypes, Type type) {
		super(result);
		this.paramTypes = paramTypes;
d39 2
a40 2
	public OperationCallTrace(EClass result, List<EClassifier> paramTypes, EClassifier targetType) {
		this(result, paramTypes, Type.IMPLICIT_COLLECT_EXTENSION_REF);
d44 2
a45 2
	public OperationCallTrace(EClassifier result, List<EClassifier> paramTypes, EClassifier targetType, EOperation operation, Type type) {
		this(result, paramTypes, type);
d50 2
a51 2
	public OperationCallTrace(EClassifier result, List<EClassifier> paramTypes, EClassifier targetType, EOperation operation) {
		this(result, paramTypes, targetType, operation, OperationCallTrace.Type.OPERATION_REF);
d55 4
d80 6
a85 1
	public List<EClassifier> getParamTypes() {
@


1.1.2.4
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - Native library migration code added.
@
text
@a13 1
import java.util.ArrayList;
a15 1
import org.eclipse.emf.common.util.EList;
a18 7
import org.eclipse.emf.ecore.EParameter;
import org.eclipse.gmf.internal.xpand.BuiltinMetaModel;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.expression.SyntaxConstants;
import org.eclipse.gmf.internal.xpand.expression.ast.DeclaredParameter;
import org.eclipse.gmf.internal.xpand.xtend.ast.Extension;
import org.eclipse.gmf.internal.xpand.xtend.ast.JavaExtensionStatement;
d34 1
a34 33
	private String nativeLibraryName;
	
	public static String getNativeLibraryName(Extension extension) {
		if (extension instanceof JavaExtensionStatement) {
			String fQName = ((JavaExtensionStatement) extension).getExtensionFile().getFullyQualifiedName();
			return fQName.replaceAll(SyntaxConstants.NS_DELIM, "_");
		}
		return null;
	}
	
    public static List<EClassifier> getParamTypes(EOperation op) {
    	EList<EParameter> parameters = op.getEParameters();
    	List<EClassifier> result = new ArrayList<EClassifier>();
    	for (int i = 0; i < parameters.size(); i++) {
    		result.add(BuiltinMetaModel.getTypedElementType(parameters.get(i)));
    	}
		return result;
	}

	public static List<EClassifier> getParamTypes(Extension f, ExecutionContext ctx) {
		List<DeclaredParameter> formalParameters = f.getFormalParameters();
		List<EClassifier> result = new ArrayList<EClassifier>();
		for (int i = 0; i < formalParameters.size(); i++) {
			result.add(ctx.getTypeForName(formalParameters.get(i).getType().getValue()));
		}
		return result;
	}
	
	public OperationCallTrace(Type type) {
		this(null, null, null, type);
	}

	public OperationCallTrace(EClassifier result, List<EClassifier> paramTypes, String nativeLibraryName, Type type) {
a37 1
		this.nativeLibraryName = nativeLibraryName;
d40 2
a41 2
	public OperationCallTrace(EClass result, List<EClassifier> paramTypes, EClassifier targetType, String nativeLibraryName) {
		this(result, paramTypes, nativeLibraryName, Type.IMPLICIT_COLLECT_EXTENSION_REF);
d46 1
a46 1
		this(result, paramTypes, null, type);
a79 4
	
	public String getNativeLibraryName() {
		return nativeLibraryName;
	}
@


1.1.2.5
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - Native libraries support modified
@
text
@a47 3
			if (fQName.indexOf(SyntaxConstants.NS_DELIM) == -1) {
				return "_" + fQName;
			}
@


