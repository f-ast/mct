head	1.2;
access;
symbols
	ocl_qvt:1.1.0.2
	Root_ocl_qvt:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2008.09.26.18.25.21;	author ashatalin;	state dead;
branches;
next	1.1;
commitid	2a33048dd29104567;

1.1
date	2008.09.17.12.24.38;	author ashatalin;	state Exp;
branches
	1.1.2.1;
next	;
commitid	77f248d0f7054567;

1.1.2.1
date	2008.10.01.17.10.23;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	3bbdb48e3aefd4567;

1.1.2.2
date	2008.10.20.17.08.09;	author ashatalin;	state Exp;
branches;
next	1.1.2.3;
commitid	320b848fcbaf94567;

1.1.2.3
date	2008.10.23.10.22.51;	author ashatalin;	state Exp;
branches;
next	;
commitid	3a3784900507b4567;


desc
@@


1.2
log
@Removing incorrectly commited resources
@
text
@/**
 * Copyright (c) 2008 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.xpand.migration;

import java.util.HashSet;
import java.util.Set;

import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.expression.ast.FeatureCall;
import org.eclipse.gmf.internal.xpand.expression.ast.OperationCall;
import org.eclipse.ocl.Environment;

public class ModelManager {

	// TODO: fill this map with all necessary OCL keywords to substitute with
	private static final Set<String> OCL_KEYWORDS = new HashSet<String>();

	static {
		// TODO: add all keywords here
		// OCL_KEYWORDS.add("context");
	}

	private boolean mapThisToSelf;

	private StandardLibraryImports stdLibraryImports;

	public ModelManager(StandardLibraryImports libraryImports, boolean mapThisToSelf) {
		stdLibraryImports = libraryImports;
		this.mapThisToSelf = mapThisToSelf;
	}

	public String getName(OperationCall operationCall, OperationCallTrace trace) {
		if (trace.getType() == OperationCallTrace.Type.OPERATION_REF || trace.getType() == OperationCallTrace.Type.IMPLICIT_COLLECT_OPERATION_REF) {
			String operationName = stdLibraryImports.getOperationName(trace.getEOperation());
			if (operationName != null) {
				return operationName;
			}
		}
		return internalGetName(operationCall);
	}

	public String getName(FeatureCall featureCall, FeatureCallTrace trace) {
		// Only env. var. references with name "this" should be substituted with
		// "self"
		if (mapThisToSelf && trace.getType() == FeatureCallTrace.Type.ENV_VAR_REF && ExecutionContext.IMPLICIT_VARIABLE.equals(featureCall.getName().getValue())) {
			return Environment.SELF_VARIABLE_NAME;
		}
		return internalGetName(featureCall);
	}

	private String internalGetName(FeatureCall featureCall) {
		String featureName = featureCall.getName().getValue();
		if (OCL_KEYWORDS.contains(featureName)) {
			return OclCs.ESCAPE_PREFIX + featureName;
		}
		return featureName;
	}

}
@


1.1
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - ModelManager for model name substitutions was added
 - OclCs class added
 - FeatureCall positions calculation corrected
 - implicit/explicit extension first parameter migration with unit-tests
@
text
@@


1.1.2.1
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - Native library migration code added.
@
text
@a47 6
		if (trace.getType() == OperationCallTrace.Type.STATIC_EXTENSION_REF || trace.getType() == OperationCallTrace.Type.EXTENSION_REF
				|| trace.getType() == OperationCallTrace.Type.IMPLICIT_COLLECT_EXTENSION_REF) {
			if (trace.getNativeLibraryName() != null) {
				stdLibraryImports.registerNativeLibrary(trace.getNativeLibraryName());
			}
		}
@


1.1.2.2
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - Handling OCL keywords in <<define>> name and parameter names
@
text
@d14 3
d24 8
a35 2
	private OclKeywordManager oclKeywordManager;
	
a36 4
		this(libraryImports, new OclKeywordManager(), mapThisToSelf);
	}

	public ModelManager(StandardLibraryImports libraryImports, OclKeywordManager keywordManager, boolean mapThisToSelf) {
a38 1
		oclKeywordManager = keywordManager;
d54 1
a54 1
		return oclKeywordManager.getValidIdentifierValue(operationCall.getName());
d63 9
a71 1
		return oclKeywordManager.getValidIdentifierValue(featureCall.getName());
@


1.1.2.3
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - Using original operation/feature names instead of "potentially escaped"
@
text
@d26 1
a26 1

d50 1
a50 2
		return trace.getType() == OperationCallTrace.Type.OPERATION_REF || trace.getType() == OperationCallTrace.Type.IMPLICIT_COLLECT_OPERATION_REF ? oclKeywordManager.getValidIdentifierValue(trace
				.getEOperation().getName()) : oclKeywordManager.getValidIdentifierValue(operationCall.getName());
d59 1
a59 2
		return trace.getType() == FeatureCallTrace.Type.FEATURE_REF ? oclKeywordManager.getValidIdentifierValue(trace.getFeature().getName()) : oclKeywordManager.getValidIdentifierValue(featureCall
				.getName());
@


