head	1.1;
access;
symbols
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2008.07.29.15.57.41;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	33cb488f3dd14567;

1.1.2.1
date	2008.07.29.15.57.41;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	33cb488f3dd14567;

1.1.2.2
date	2008.08.05.19.27.03;	author ashatalin;	state Exp;
branches;
next	1.1.2.3;
commitid	2d344898a9834567;

1.1.2.3
date	2008.08.06.11.05.53;	author ashatalin;	state Exp;
branches;
next	1.1.2.4;
commitid	6b3c4899858e4567;

1.1.2.4
date	2008.08.28.15.51.00;	author ashatalin;	state Exp;
branches;
next	;
commitid	35c448b6c95d4567;


desc
@@


1.1
log
@file BooleanOperation.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@Xtend-based implementation of XPand extensions was separated into .migration plugin.
@
text
@a0 110
/*******************************************************************************
 * Copyright (c) 2005, 2006 committers of openArchitectureWare and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     committers of openArchitectureWare - initial API and implementation
 *******************************************************************************/
package org.eclipse.gmf.internal.xpand.expression.ast;

import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmf.internal.xpand.BuiltinMetaModel;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.EvaluationException;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;

public class BooleanOperation extends Expression {

	private static final String IMPLIES = "implies";

	private static final String OR = "||";

	private static final String AND = "&&";

	private String operator;

	private Expression left;

	private Expression right;

	public BooleanOperation(final int start, final int end, final int line, final String operator, final Expression e, final Expression r) {
		super(start, end, line);
		assert operator != null;
		this.operator = operator;
		left = e;
		right = r;
	}

	@@Override
	protected Object evaluateInternal(final ExecutionContext ctx) {
		final Boolean l = evaluateToBoolean(left, ctx);
		if (l == null) {
			return null;
		}
		if (operator.equals(AND)) {
			if (!l.booleanValue()) {
				return Boolean.FALSE;
			}
			final Boolean r = evaluateToBoolean(right, ctx);
			if (r == null) {
				return null;
			}
			return Boolean.valueOf(l.booleanValue() && r.booleanValue());
		} else if (operator.equals(OR)) {
			if (l.booleanValue()) {
				return Boolean.TRUE;
			}

			final Boolean r = evaluateToBoolean(right, ctx);
			if (r == null) {
				return null;
			}
			return Boolean.valueOf(l.booleanValue() || r.booleanValue());
		} else if (operator.equals(IMPLIES)) {
			if (!l.booleanValue()) {
				return Boolean.TRUE;
			}
			return evaluateToBoolean(right, ctx);
		} else {
			throw new EvaluationException("Unkown Boolean operator " + operator, this);
		}
	}

	private Boolean evaluateToBoolean(final Expression expr, final ExecutionContext ctx) {
		final Object l = expr.evaluate(ctx);
		if (l == null) {
			return null;
		}
		if (!(l instanceof Boolean)) {
			final EClassifier t = BuiltinMetaModel.getType(l);
			throw new EvaluationException("Boolean expected but was " + t.getName(), expr);
		}
		return (Boolean) l;
	}

	public EClassifier analyze(final ExecutionContext ctx, final Set<AnalysationIssue> issues) {
		final EClassifier l = left.analyze(ctx, issues);
		final EClassifier r = right.analyze(ctx, issues);
		if ((l == null) || (r == null)) {
			return null;
		}

		final EDataType dt = EcorePackage.eINSTANCE.getEBoolean();
		if (!dt.equals(l)) {
			issues.add(new AnalysationIssue(AnalysationIssue.Type.INCOMPATIBLE_TYPES, "Boolean expected! Found : " + l.getName(), left));
		}
		if (!dt.equals(r)) {
			issues.add(new AnalysationIssue(AnalysationIssue.Type.INCOMPATIBLE_TYPES, "Boolean expected! Found : " + r.getName(), right));
		}

		return dt;
	}

}
@


1.1.2.2
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
@
text
@d51 1
a51 1
		if (isAndOperation()) {
d60 1
a60 1
		} else if (isOrOperation()) {
d70 1
a70 1
		} else if (isImpliesOperation()) {
a108 24
	
	public Expression getLeft() {
		return left;
	}
	
	public Expression getRight() {
		return right;
	}
	
	public boolean isImpliesOperation() {
		return operator.equals(IMPLIES);
	}
	
	public boolean isOrOperation() {
		return operator.equals(OR);
	}
	
	public boolean isAndOperation() {
		return operator.equals(AND);
	}
	
	public String getOperator() {
		return operator;
	}
@


1.1.2.3
log
@Copyrights updated.
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2008 committers of openArchitectureWare and others.
a9 1
 *     Alexander Shatalin (Borland)
@


1.1.2.4
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 First step toward .xpt migration.
@
text
@d38 2
a39 2
	public BooleanOperation(final int start, final int end, final int line, final int startOffset, final int endOffset, final String operator, final Expression e, final Expression r) {
		super(start, end, line, startOffset, endOffset);
@


