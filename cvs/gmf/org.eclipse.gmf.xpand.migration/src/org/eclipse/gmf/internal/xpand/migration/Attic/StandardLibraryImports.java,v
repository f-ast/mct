head	1.1;
access;
symbols
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2008.08.21.12.22.19;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	348648ad5df34567;

1.1.2.1
date	2008.08.21.12.22.20;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	348648ad5df34567;

1.1.2.2
date	2008.08.21.15.35.29;	author ashatalin;	state Exp;
branches;
next	1.1.2.3;
commitid	1a2548ad8b3d4567;

1.1.2.3
date	2008.08.22.10.28.39;	author ashatalin;	state Exp;
branches;
next	1.1.2.4;
commitid	21fa48ae94d54567;

1.1.2.4
date	2008.08.22.12.32.38;	author ashatalin;	state Exp;
branches;
next	1.1.2.5;
commitid	752448aeb1e44567;

1.1.2.5
date	2008.08.28.15.51.01;	author ashatalin;	state Exp;
branches;
next	1.1.2.6;
commitid	35c448b6c95d4567;

1.1.2.6
date	2008.09.15.11.11.32;	author ashatalin;	state Exp;
branches;
next	1.1.2.7;
commitid	562548ce42e34567;

1.1.2.7
date	2008.09.17.12.24.38;	author ashatalin;	state Exp;
branches;
next	1.1.2.8;
commitid	77f248d0f7054567;

1.1.2.8
date	2008.10.01.17.10.23;	author ashatalin;	state Exp;
branches;
next	1.1.2.9;
commitid	3bbdb48e3aefd4567;

1.1.2.9
date	2008.10.20.17.08.37;	author ashatalin;	state Exp;
branches;
next	1.1.2.10;
commitid	320e548fcbb154567;

1.1.2.10
date	2008.10.23.10.23.18;	author ashatalin;	state Exp;
branches;
next	;
commitid	3a4d7490050964567;


desc
@@


1.1
log
@file StandardLibraryImports.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@Buildin String operations migrated using additional qvto library.
@
text
@a0 75
/**
 * Copyright (c) 2008 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.xpand.migration;

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import org.eclipse.emf.ecore.EOperation;
import org.eclipse.gmf.internal.xpand.BuiltinMetaModel;

public class StandardLibraryImports extends AbstractImportsManager {

	private static final String STRING_LIBRARY_NAME = "XpandStringOperations";

	private static final Map<EOperation, String> operationNames;

	static {
		operationNames = new HashMap<EOperation, String>();
		operationNames.put(BuiltinMetaModel.EString_ToFirstUpper, "firstToUpper");
		operationNames.put(BuiltinMetaModel.EString_ToFirstLower, "xpandToFirstLower");
		operationNames.put(BuiltinMetaModel.EString_SubString_StartEnd, "substring");
		operationNames.put(BuiltinMetaModel.EString_SubString, "xpandSubstring");
		operationNames.put(BuiltinMetaModel.EString_ToUpperCase, "toUpper");
		operationNames.put(BuiltinMetaModel.EString_ToLowerCase, "toLower");
		operationNames.put(BuiltinMetaModel.EString_ReplaceFirst, "xpandReplaceFirst");
		operationNames.put(BuiltinMetaModel.EString_ToCharList, "xpandToCharList");
		operationNames.put(BuiltinMetaModel.EString_ReplaceAll, "xpandReplaceAll");
		operationNames.put(BuiltinMetaModel.EString_Split, "xpandSplit");
		operationNames.put(BuiltinMetaModel.EString_Matches, "xpandMatches");
	}

	private static final Set<EOperation> stringLibOperations;

	static {
		stringLibOperations = new HashSet<EOperation>();
		stringLibOperations.add(BuiltinMetaModel.EString_ToFirstLower);
		stringLibOperations.add(BuiltinMetaModel.EString_SubString);
		stringLibOperations.add(BuiltinMetaModel.EString_ReplaceFirst);
		stringLibOperations.add(BuiltinMetaModel.EString_ToCharList);
		stringLibOperations.add(BuiltinMetaModel.EString_ReplaceAll);
		stringLibOperations.add(BuiltinMetaModel.EString_Split);
		stringLibOperations.add(BuiltinMetaModel.EString_Matches);
	}

	private Set<String> usedLibraries = new LinkedHashSet<String>();

	StandardLibraryImports(StringBuilder stringBuilder) {
		super(stringBuilder);
	}

	void injectImports() {
		for (String usedLibrary : usedLibraries) {
			writeln("import library " + usedLibrary + ";");
		}
	}

	public String getOperationName(EOperation eOperation) {
		if (stringLibOperations.contains(eOperation)) {
			usedLibraries.add(STRING_LIBRARY_NAME);
		}
		return operationNames.containsKey(eOperation) ? operationNames.get(eOperation) : eOperation.getName();
	}
}
@


1.1.2.2
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 Migration for OclAny operations
@
text
@a26 2
	private static final String OCLANY_LIBRARY_NAME = "XpandOclAnyOperations";

a41 2
		operationNames.put(BuiltinMetaModel.Object_CompareTo, "xpandCompareTo");
		operationNames.put(BuiltinMetaModel.Object_ToString, "repr");
a56 7
	private static final Set<EOperation> oclAnyLibOperations;

	static {
		oclAnyLibOperations = new HashSet<EOperation>();
		oclAnyLibOperations.add(BuiltinMetaModel.Object_CompareTo);
	}

a71 2
		} else if (oclAnyLibOperations.contains(eOperation)) {
			usedLibraries.add(OCLANY_LIBRARY_NAME);
@


1.1.2.3
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 Integer Operations migration.
@
text
@d15 1
d25 5
a29 1
	private static final Map<EOperation, MapEntry> operationsMap;
d32 15
a46 1
		operationsMap = new HashMap<EOperation, MapEntry>();
d48 18
a65 15
		operationsMap.put(BuiltinMetaModel.EString_ToFirstUpper, MapEntry.newEntry("firstToUpper"));
		operationsMap.put(BuiltinMetaModel.EString_ToFirstLower, MapEntry.newStringLibEntry("xpandToFirstLower"));
		operationsMap.put(BuiltinMetaModel.EString_SubString_StartEnd, MapEntry.newEntry("substring"));
		operationsMap.put(BuiltinMetaModel.EString_SubString, MapEntry.newStringLibEntry("xpandSubstring"));
		operationsMap.put(BuiltinMetaModel.EString_ToUpperCase, MapEntry.newEntry("toUpper"));
		operationsMap.put(BuiltinMetaModel.EString_ToLowerCase, MapEntry.newEntry("toLower"));
		operationsMap.put(BuiltinMetaModel.EString_ReplaceFirst, MapEntry.newStringLibEntry("xpandReplaceFirst"));
		operationsMap.put(BuiltinMetaModel.EString_ToCharList, MapEntry.newStringLibEntry("xpandToCharList"));
		operationsMap.put(BuiltinMetaModel.EString_ReplaceAll, MapEntry.newStringLibEntry("xpandReplaceAll"));
		operationsMap.put(BuiltinMetaModel.EString_Split, MapEntry.newStringLibEntry("xpandSplit"));
		operationsMap.put(BuiltinMetaModel.EString_Matches, MapEntry.newStringLibEntry("xpandMatches"));
		operationsMap.put(BuiltinMetaModel.Object_CompareTo, MapEntry.newOclAnyLibEntry("xpandCompareTo"));
		operationsMap.put(BuiltinMetaModel.Object_ToString, MapEntry.newEntry("repr"));
		operationsMap.put(BuiltinMetaModel.Int_Div_Int, MapEntry.newEntry("div"));
		operationsMap.put(BuiltinMetaModel.Int_UpTo, MapEntry.newIntegerLibEntry("xpandUpTo"));
d81 4
a84 24
		if (operationsMap.containsKey(eOperation)) {
			MapEntry entry = operationsMap.get(eOperation);
			if (entry.isLibraryOperation()) {
				usedLibraries.add(entry.getLibraryName());
			}
			return entry.getQvtOperationName();
		}
		return eOperation.getName();
	}

	private static class MapEntry {

		private static final String STRING_LIBRARY_NAME = "XpandStringOperations";

		private static final String OCLANY_LIBRARY_NAME = "XpandOclAnyOperations";

		private static final String INTEGER_LIBRARY_NAME = "XpandIntegerOperations";

		private String qvtOperationName;

		private String libraryName;

		public static MapEntry newEntry(String qvtOperationName) {
			return new MapEntry(qvtOperationName);
d86 1
a86 34

		public static MapEntry newStringLibEntry(String qvtOperationName) {
			return new MapEntry(qvtOperationName, STRING_LIBRARY_NAME);
		}

		public static MapEntry newOclAnyLibEntry(String qvtOperationName) {
			return new MapEntry(qvtOperationName, OCLANY_LIBRARY_NAME);
		}

		public static MapEntry newIntegerLibEntry(String qvtOperationName) {
			return new MapEntry(qvtOperationName, INTEGER_LIBRARY_NAME);
		}

		private MapEntry(String qvtOperationName) {
			this.qvtOperationName = qvtOperationName;
		}

		private MapEntry(String qvtOperationName, String libraryName) {
			this(qvtOperationName);
			this.libraryName = libraryName;
		}

		public String getQvtOperationName() {
			return qvtOperationName;
		}

		public boolean isLibraryOperation() {
			return libraryName != null;
		}

		public String getLibraryName() {
			return libraryName;
		}

a87 1

@


1.1.2.4
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 Formatting beautified.
@
text
@a55 3
		if (usedLibraries.size() > 0) {
			writeln("");
		}
@


1.1.2.5
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 First step toward .xpt migration.
@
text
@d51 8
a58 3
	
	StandardLibraryImports(int placeholder) {
		super(placeholder);
a59 13
	
	String[] getLibraries() {
		return usedLibraries.toArray(new String[usedLibraries.size()]);
	}

//	void injectImports() {
//		for (String usedLibrary : usedLibraries) {
//			writeln("import library " + usedLibrary + ";");
//		}
//		if (usedLibraries.size() > 0) {
//			writeln("");
//		}
//	}
@


1.1.2.6
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 Definition parameters migration + tests.
@
text
@d60 9
@


1.1.2.7
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - ModelManager for model name substitutions was added
 - OclCs class added
 - FeatureCall positions calculation corrected
 - implicit/explicit extension first parameter migration with unit-tests
@
text
@d51 1
a51 1

d55 1
a55 1

d60 1
a60 1
	String getOperationName(EOperation eOperation) {
d68 1
a68 1
		return null;
@


1.1.2.8
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - Native library migration code added.
@
text
@a69 4
	
	void registerNativeLibrary(String libraryName) {
		usedLibraries.add(libraryName);
	}
@


1.1.2.9
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - Additional native operations for String primitive type added
@
text
@a39 2
		operationsMap.put(BuiltinMetaModel.EString_StartsWith, MapEntry.newStringLibEntry("xpandStartsWith"));
		operationsMap.put(BuiltinMetaModel.EString_EndsWith, MapEntry.newStringLibEntry("xpandEndsWith"));
@


1.1.2.10
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
- Additional String operation necessary for "pureOCL" query language
@
text
@a41 2
		operationsMap.put(BuiltinMetaModel.EString_Plus_EJavaObject, MapEntry.newEntry("concat"));
		operationsMap.put(BuiltinMetaModel.EString_Length, MapEntry.newStringLibEntry("xpandLength"));
@


