head	1.1;
access;
symbols
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2008.08.28.07.30.33;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	5f8648b654184567;

1.1.2.1
date	2008.08.28.07.30.33;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	5f8648b654184567;

1.1.2.2
date	2008.08.28.15.51.01;	author ashatalin;	state Exp;
branches;
next	1.1.2.3;
commitid	35c448b6c95d4567;

1.1.2.3
date	2008.09.17.12.24.38;	author ashatalin;	state Exp;
branches;
next	1.1.2.4;
commitid	77f248d0f7054567;

1.1.2.4
date	2008.09.26.18.15.49;	author ashatalin;	state Exp;
branches;
next	1.1.2.5;
commitid	2780148dd26d24567;

1.1.2.5
date	2008.09.29.14.53.27;	author ashatalin;	state Exp;
branches;
next	1.1.2.6;
commitid	6da48e0ebe64567;

1.1.2.6
date	2008.10.01.17.10.23;	author ashatalin;	state Exp;
branches;
next	1.1.2.7;
commitid	3bbdb48e3aefd4567;

1.1.2.7
date	2008.10.07.14.44.38;	author ashatalin;	state Exp;
branches;
next	1.1.2.8;
commitid	1997848eb75d34567;

1.1.2.8
date	2008.10.20.17.09.53;	author ashatalin;	state Exp;
branches;
next	1.1.2.9;
commitid	3219148fcbb604567;

1.1.2.9
date	2008.10.23.10.24.03;	author ashatalin;	state Exp;
branches;
next	;
commitid	3a670490050c24567;


desc
@@


1.1
log
@file ExpressionMigrationFacade.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 Separate ExpressionMigrationFacade class was created covering expressions AST migration.
@
text
@a0 934
/**
 * Copyright (c) 2008 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.xpand.migration;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Stack;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EEnumLiteral;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.ETypedElement;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmf.internal.xpand.BuiltinMetaModel;
import org.eclipse.gmf.internal.xpand.expression.ast.BooleanLiteral;
import org.eclipse.gmf.internal.xpand.expression.ast.BooleanOperation;
import org.eclipse.gmf.internal.xpand.expression.ast.Case;
import org.eclipse.gmf.internal.xpand.expression.ast.Cast;
import org.eclipse.gmf.internal.xpand.expression.ast.ChainExpression;
import org.eclipse.gmf.internal.xpand.expression.ast.CollectionExpression;
import org.eclipse.gmf.internal.xpand.expression.ast.ConstructorCallExpression;
import org.eclipse.gmf.internal.xpand.expression.ast.Expression;
import org.eclipse.gmf.internal.xpand.expression.ast.FeatureCall;
import org.eclipse.gmf.internal.xpand.expression.ast.IfExpression;
import org.eclipse.gmf.internal.xpand.expression.ast.IntegerLiteral;
import org.eclipse.gmf.internal.xpand.expression.ast.LetExpression;
import org.eclipse.gmf.internal.xpand.expression.ast.ListLiteral;
import org.eclipse.gmf.internal.xpand.expression.ast.NullLiteral;
import org.eclipse.gmf.internal.xpand.expression.ast.OperationCall;
import org.eclipse.gmf.internal.xpand.expression.ast.RealLiteral;
import org.eclipse.gmf.internal.xpand.expression.ast.StringLiteral;
import org.eclipse.gmf.internal.xpand.expression.ast.SwitchExpression;
import org.eclipse.gmf.internal.xpand.expression.ast.TypeSelectExpression;
import org.eclipse.gmf.internal.xpand.migration.MigrationException.Type;


public class ExpressionMigrationFacade {
	
	static final String LF = System.getProperty("line.separator");
	
	private static final Set<EOperation> infixOperations = new HashSet<EOperation>(Arrays.asList(new EOperation[] {
			BuiltinMetaModel.Boolean_NE,
			BuiltinMetaModel.Int_Unary_Minus,
			BuiltinMetaModel.Double_Unary_Minus,
			BuiltinMetaModel.Int_Minus_Double, 
			BuiltinMetaModel.Int_Minus_Int, 
			BuiltinMetaModel.Double_Minus_Double, 
			BuiltinMetaModel.Double_Minus_Int,
			BuiltinMetaModel.Int_Plus_Double, 
			BuiltinMetaModel.Int_Plus_Int, 
			BuiltinMetaModel.Double_Plus_Double, 
			BuiltinMetaModel.Double_Plus_Int,
			BuiltinMetaModel.Int_Mult_Double, 
			BuiltinMetaModel.Int_Mult_Int, 
			BuiltinMetaModel.Double_Mult_Double, 
			BuiltinMetaModel.Double_Mult_Int,
			BuiltinMetaModel.Int_Div_Double,
			BuiltinMetaModel.Double_Div_Double,
			BuiltinMetaModel.Double_Div_Int,
			BuiltinMetaModel.Int_Less,
			BuiltinMetaModel.Int_LessOrEqual,
			BuiltinMetaModel.Int_Greater,
			BuiltinMetaModel.Int_GreatOrEqual,
			BuiltinMetaModel.EString_Plus_EJavaObject,
			BuiltinMetaModel.Object_EQ,
			BuiltinMetaModel.Object_NotEQ
		}));
	
	private static final Set<EOperation> collectionOperations = new HashSet<EOperation>(Arrays.asList(new EOperation[] {
			BuiltinMetaModel.Collection_Add,
			BuiltinMetaModel.Collection_AddAll,
			BuiltinMetaModel.Collection_Clear,
			BuiltinMetaModel.Collection_Contains,
			BuiltinMetaModel.Collection_ContainsAll, 
			BuiltinMetaModel.Collection_Flatten,
			BuiltinMetaModel.Collection_Intersect,
			BuiltinMetaModel.Collection_IsEmpty, 
			BuiltinMetaModel.Collection_Size, 
			BuiltinMetaModel.Collection_ToList,
			BuiltinMetaModel.Collection_ToSet,
			BuiltinMetaModel.Collection_Union,
			BuiltinMetaModel.Collection_Without,
			BuiltinMetaModel.List_First,
			BuiltinMetaModel.List_Get,
			BuiltinMetaModel.List_IndexOf,
			BuiltinMetaModel.List_Last,
			BuiltinMetaModel.List_PurgeDups,
			BuiltinMetaModel.List_WithoutFirst,
			BuiltinMetaModel.List_WithoutLast
	}));

	private Stack<Expression> expressionsStack = new Stack<Expression>();

	private StringBuilder output = new StringBuilder();

	private StandardLibraryImports stdLibImportsManager;

	private MigrationExecutionContext ctx;

	private int returnPosition;

	private VariableNameDispatcher variableDispatcher;

	private Expression rootExpression;

	private TypeManager typeManager;

	ExpressionMigrationFacade(Expression expression, TypeManager typeManager, StandardLibraryImports libImports, VariableNameDispatcher variableDispatcher, MigrationExecutionContext context) {
		rootExpression = expression;
		this.typeManager = typeManager;
		stdLibImportsManager = libImports;
		this.variableDispatcher = variableDispatcher;
		ctx = context;
		markReturnPosition();
	}

	StringBuilder migrate() throws MigrationException {
		migrateExpression(rootExpression);
		return output;
	}

	int getReturnPosition() {
		return returnPosition;
	}

	private void migrateExpression(Expression expression) throws MigrationException {
		expressionsStack.push(expression);
		try {
			if (expression instanceof BooleanOperation) {
				migrateBooleanOperation((BooleanOperation) expression);
			} else if (expression instanceof Cast) {
				migrateCast((Cast) expression);
			} else if (expression instanceof ChainExpression) {
				migrateChainExpression((ChainExpression) expression);
			} else if (expression instanceof ConstructorCallExpression) {
				migrateConstructorCallExpression((ConstructorCallExpression) expression);
			} else if (expression instanceof CollectionExpression) {
				migrateCollectionExpression((CollectionExpression) expression);
			} else if (expression instanceof OperationCall) {
				migrateOperationCall((OperationCall) expression);
			} else if (expression instanceof TypeSelectExpression) {
				migrateTypeSelectExpression((TypeSelectExpression) expression);
			} else if (expression instanceof FeatureCall) {
				migrateFeatureCall((FeatureCall) expression);
			} else if (expression instanceof IfExpression) {
				migrateIfExpression((IfExpression) expression);
			} else if (expression instanceof LetExpression) {
				migrateLetExpression((LetExpression) expression);
			} else if (expression instanceof ListLiteral) {
				migrateListLiteral((ListLiteral) expression);
			} else if (expression instanceof BooleanLiteral) {
				migrateBooleanLiteral((BooleanLiteral) expression);
			} else if (expression instanceof IntegerLiteral) {
				migrateIntegerLiteral((IntegerLiteral) expression);
			} else if (expression instanceof NullLiteral) {
				migrateNullLiteral((NullLiteral) expression);
			} else if (expression instanceof RealLiteral) {
				migrateRealLiteral((RealLiteral) expression);
			} else if (expression instanceof StringLiteral) {
				migrateStringLiteral((StringLiteral) expression);
			} else if (expression instanceof SwitchExpression) {
				migrateSwitchExpression((SwitchExpression) expression);
			} else {
				throw new MigrationException(Type.UNSUPPORTED_EXPRESSION, expression.getClass().getName());
			}
		} finally {
			expressionsStack.pop();
		}
	}

	private void migrateSwitchExpression(SwitchExpression switchExpression) throws MigrationException {
		if (switchExpression.getCases().size() == 0) {
			migrateExpression(switchExpression.getDefaultExpr());
		} else {
			writeln("switch { ");
			for (Case caseExpression : switchExpression.getCases()) {
				write("case (");
				migrateExpression(switchExpression.getSwitchExpr());
				write(" = ");
				migrateExpression(caseExpression.getCondition());
				write(") ");
				migrateExpression(caseExpression.getThenPart());
				writeln(";");
			}
			write("else ");
			migrateExpression(switchExpression.getDefaultExpr());
			writeln(";");
			writeln(" }");
		}
	}

	private void migrateStringLiteral(StringLiteral expression) {
		write("'");
		write(escape(expression.getValue()));
		write("'");
	}

	private String escape(String value) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < value.length(); i++) {
			char nextChar = value.charAt(i);
			if (nextChar == '\'') {
				// escaping single quote mark with one more single quote mark.
				sb.append(nextChar);
			}
			sb.append(nextChar);
		}
		return sb.toString();
	}

	private void migrateRealLiteral(RealLiteral realLiteral) {
		write(new Double(realLiteral.getLiteralValue()).toString());
	}

	private void migrateNullLiteral(NullLiteral expression) {
		write("null");
	}

	private void migrateIntegerLiteral(IntegerLiteral integerLiteral) {
		write(new Integer(integerLiteral.getLiteralValue()).toString());
	}

	private void migrateBooleanLiteral(BooleanLiteral booleanLiteral) {
		write(Boolean.valueOf(booleanLiteral.getLiteralValue()) ? Boolean.TRUE.toString() : Boolean.FALSE.toString());
	}

	private void migrateListLiteral(ListLiteral listLiteral) throws MigrationException {
		write("Sequence { ");
		for (int i = 0; i < listLiteral.getElements().length; i++) {
			if (i > 0) {
				write(", ");
			}
			migrateExpression(listLiteral.getElements()[i]);
		}
		write(" }");
	}

	private void migrateLetExpression(LetExpression letExpression) throws MigrationException {
		write("let ");
		write(letExpression.getVarName().getValue());
		write(" = ");
		migrateExpression(letExpression.getVarExpression());
		write(" in ");
		migrateExpression(letExpression.getTargetExpression());
	}

	private void migrateIfExpression(IfExpression ifExpression) throws MigrationException {
		write("if ");
		migrateExpression(ifExpression.getCondition());
		write(" then ");
		migrateExpression(ifExpression.getThenPart());
		write(" else ");
		migrateExpression(ifExpression.getElsePart());
		write(" endif");
	}

	private void migrateConstructorCallExpression(ConstructorCallExpression constructorCall) throws MigrationException {
		write("object ");
		EClassifier type = ctx.getTypeForName(constructorCall.getType().getValue());
		if (type == null) {
			throw new MigrationException(Type.TYPE_NOT_FOUND, constructorCall.getType().getValue());
		}

		write(typeManager.getQvtFQName(type));
		write(" {}");
	}

	private void migrateChainExpression(ChainExpression chainExpression) throws MigrationException {
		// TODO: currently only top-level chain expressions are supported. We
		// have to develop a way to support inner chain expressions like:
		// if(a.b()->c.d()->e.f) then {...} else {...}
		// for now solution is to use separate helpers for each nested chain
		// expression
		if (expressionsStack.size() > 1 && false == expressionsStack.peek() instanceof ChainExpression) {
			throw new MigrationException(Type.UNSUPPORTED_EXPRESSION, "Inner " + chainExpression.getClass().getName());
		}
		migrateExpression(chainExpression.getFirst());
		writeln(";");
		if (expressionsStack.size() == 1) {
			markReturnPosition();
		}
		migrateExpression(chainExpression.getNext());
	}

	private void migrateBooleanOperation(BooleanOperation booleanOperation) throws MigrationException {
		migrateExpression(booleanOperation.getLeft());
		if (booleanOperation.isAndOperation()) {
			write(" and ");
		} else if (booleanOperation.isOrOperation()) {
			write(" or ");
		} else if (booleanOperation.isImpliesOperation()) {
			write(" implies ");
		} else {
			throw new MigrationException(Type.UNSUPPORTED_BOOLEAN_OPERATION, booleanOperation.getOperator());
		}
		migrateExpression(booleanOperation.getRight());
	}

	private void migrateCast(Cast cast) throws MigrationException {
		migrateExpression(cast.getTarget());
		EClassifier type = ctx.getTypeForName(cast.getType().getValue());
		if (type == null) {
			throw new MigrationException(Type.TYPE_NOT_FOUND, cast.getType().getValue());
		}
		write(".oclAsType(");
		write(typeManager.getQvtFQName(type));
		write(")");
	}

	private void migrateTypeSelectExpression(TypeSelectExpression typeSelectExpression) throws MigrationException {
		int placeholder = getCurrentPosition();
		migrateExpression(typeSelectExpression.getTarget());
		EClassifier type = ctx.getTypeForName(typeSelectExpression.getTypeLiteral().getValue());
		if (type == null) {
			throw new MigrationException(Type.TYPE_NOT_FOUND, typeSelectExpression.getTypeLiteral().getValue());
		}
		ExpressionAnalyzeTrace expressionTrace = ctx.getTraces().get(typeSelectExpression);
		if (false == expressionTrace instanceof TypeSelectExpressionTrace) {
			throw new MigrationException(Type.UNSUPPORTED_TYPE_SELECT_EXPRESSION_TRACE, String.valueOf(expressionTrace));
		}
		TypeSelectExpressionTrace trace = (TypeSelectExpressionTrace) expressionTrace;
		if (!trace.isValid()) {
			throw new MigrationException(Type.UNSUPPORTED_TYPE_SELECT_EXPRESSION, trace.toString());
		}
		internalMigrateTypeSelectCastingCollectionToBag(trace.getTargetType(), typeManager.getQvtFQName(type), placeholder);
		if (!TypeManager.isListType(trace.getTargetType())) {
			write("->asSequence()");
		}
	}

	private void internalMigrateTypeSelectCastingCollectionToBag(EClassifier collectionType, String typeName, int placeholder) {
		assert BuiltinMetaModel.isCollectionType(collectionType);
		if (TypeManager.isListType(collectionType) || TypeManager.isSetType(collectionType)) {
			internalMigrateTypeSelect(typeName, placeholder);
		} else {
			internalMigrateCollectionToBag(typeName);
		}
	}

	private void internalMigrateTypeSelect(String typeName, int placeholder) {
		// TODO: This method should write braces around expression starting
		// at placeholder position conditionally depending on the last char
		// in output sequence.
		write("(", placeholder);
		write(")");
		write("[");
		write(typeName);
		write("]");
	}

	// TODO: use ->asSequence() here in addition?
	private void internalMigrateCollectionToBag(String typeName) {
		String iteratorName = variableDispatcher.getNextIteratorName();
		write("->collect(");
		write(iteratorName);
		write(" | ");
		write(iteratorName);
		if (typeName != null) {
			write(".oclAsType(");
			write(typeName);
			write(")");
		}
		write(")");
	}

	private void migrateCollectionExpression(CollectionExpression collectionExpression) throws MigrationException {
		if (collectionExpression.getTarget() == null) {
			throw new MigrationException(Type.UNSUPPORTED_EXPRESSION, "Collection expression without target specified: " + collectionExpression.toString());
		}
		int placeholder = getCurrentPosition();
		boolean hasNegation = false;
		migrateExpression(collectionExpression.getTarget());
		write("->");
		ExpressionAnalyzeTrace expressionTrace = ctx.getTraces().get(collectionExpression);
		if (false == expressionTrace instanceof CollectionExpressionTrace) {
			throw new MigrationException(Type.UNSUPPORTED_COLLECTION_EXPRESSION_TRACE, String.valueOf(expressionTrace));
		}
		CollectionExpressionTrace trace = (CollectionExpressionTrace) expressionTrace;
		switch (trace.getType()) {
		case NOTEXISTS_REF:
			hasNegation = true;
			write("not ", placeholder);
			write("exists");
			break;
		case COLLECT_REF:
		case SELECT_REF:
		case REJECT_REF:
		case EXISTS_REF:
		case FORALL_REF:
			write(collectionExpression.getName().getValue());
			break;
		case INCORRECT_EXPRESSION_TYPE:
		case UNDESOLVED_TARGET_TYPE:
			throw new MigrationException(Type.UNSUPPORTED_COLLECTION_EXPRESSION, trace.toString());
		default:
			throw new MigrationException(Type.UNSUPPORTED_COLLECTION_EXPRESSION_TRACE, "Incorrect type: " + trace.getType());
		}
		write("(");
		write(collectionExpression.getElementName());
		write(" | ");
		migrateExpression(collectionExpression.getClosure());
		write(")");
		if (trace.getType() == CollectionExpressionTrace.Type.COLLECT_REF && TypeManager.isSetType(trace.getResultType())) {
			// Does not work now due to the bug in xpand implementation - see
			// "TODO [AS]" comment in CollectionExpression
			write("->asSet()");
		}
		if (hasNegation) {
			addNegationBraces(placeholder);
		}
	}

	private void addNegationBraces(int placeholder) {
		if (expressionsStack.size() == 1) {
			return;
		}
		// TODO: check for the type of parent expression here + add braces
		// conditionaly
		// Expression parentExpression =
		// expressionsStack.get(expressionsStack.size() - 2);
		// check for the type of parent expression;
		write("(", placeholder);
		write(")");
	}

	private void migrateOperationCall(OperationCall operationCall) throws MigrationException {
		ExpressionAnalyzeTrace expressionTrace = ctx.getTraces().get(operationCall);
		if (false == expressionTrace instanceof OperationCallTrace) {
			throw new MigrationException(Type.UNSUPPORTED_OPERATION_CALL_TRACE, String.valueOf(expressionTrace));
		}
		OperationCallTrace trace = (OperationCallTrace) expressionTrace;
		switch (trace.getType()) {
		case UNDESOLVED_PARAMETER_TYPE:
		case UNDESOLVED_TARGET_TYPE:
			throw new MigrationException(Type.UNSUPPORTED_OPERATION_CALL, trace.toString());
		case STATIC_EXTENSION_REF:
			write(operationCall.getName().getValue());
			write("(");
			internalMigrateOperationCallParameters(operationCall);
			write(")");
			return;
		case OPERATION_REF:
			if (isInfixOperation(trace)) {
				internalMigrateInfixOperation(trace, operationCall);
			} else if (isCollectionOperation(trace)) {
				internalMigrateCollectionOperationCall(trace, operationCall);
			} else {
				internalMigrateOperationCall(trace, operationCall);
				convertTypedElementCallProduct(trace.getEOperation());
			}
			return;
		case IMPLICIT_COLLECT_OPERATION_REF:
			// TODO: Implicit collect of collection operation result is not
			// supported now
			internalMigrateOperationCall(trace, operationCall);
			convertImplicitCollectProduct(trace.getTargetType());
			return;
		case EXTENSION_REF:
			assert operationCall.getTarget() != null;
			write(operationCall.getName().getValue());
			write("(");
			migrateExpression(operationCall.getTarget());
			if (operationCall.getParams().length > 0) {
				write(", ");
				internalMigrateOperationCallParameters(operationCall);
			}
			write(")");
			return;
		case IMPLICIT_COLLECT_EXTENSION_REF:
			assert operationCall.getTarget() != null;
			migrateExpression(operationCall.getTarget());
			String iteratorName = variableDispatcher.getNextIteratorName();
			write("->collect(");
			write(iteratorName);
			write(" | ");
			write(operationCall.getName().getValue());
			write("(");
			write(iteratorName);
			if (operationCall.getParams().length > 0) {
				write(", ");
				internalMigrateOperationCallParameters(operationCall);
			}
			write(")");
			write(")");
			convertImplicitCollectProduct(trace.getTargetType());
			return;
		default:
			throw new MigrationException(Type.UNSUPPORTED_OPERATION_CALL_TRACE, "Incorrect type: " + trace.getType());
		}
	}

	private void internalMigrateInfixOperation(OperationCallTrace trace, OperationCall operationCall) throws MigrationException {
		EOperation eOperation = trace.getEOperation();
		assert eOperation != null;
		int placeholder = getCurrentPosition();
		internalMigrateOperationCallTarget(operationCall);
		String opName = eOperation.getName();
		if (BuiltinMetaModel.Boolean_NE == eOperation) {
			write("not ", placeholder);
		} else if (BuiltinMetaModel.Int_Unary_Minus == eOperation || BuiltinMetaModel.Double_Unary_Minus == eOperation) {
			write(opName, placeholder);
		} else if (BuiltinMetaModel.Int_Minus_Int == eOperation || BuiltinMetaModel.Int_Minus_Double == eOperation || BuiltinMetaModel.Double_Minus_Int == eOperation
				|| BuiltinMetaModel.Double_Minus_Double == eOperation || BuiltinMetaModel.Int_Plus_Int == eOperation || BuiltinMetaModel.Int_Plus_Double == eOperation
				|| BuiltinMetaModel.Double_Plus_Int == eOperation || BuiltinMetaModel.Double_Plus_Double == eOperation || BuiltinMetaModel.Int_Mult_Int == eOperation
				|| BuiltinMetaModel.Int_Mult_Double == eOperation || BuiltinMetaModel.Double_Mult_Int == eOperation || BuiltinMetaModel.Double_Mult_Double == eOperation
				|| BuiltinMetaModel.Int_Div_Double == eOperation || BuiltinMetaModel.Double_Div_Double == eOperation || BuiltinMetaModel.Double_Div_Int == eOperation
				|| BuiltinMetaModel.Int_Less == eOperation || BuiltinMetaModel.Int_LessOrEqual == eOperation || BuiltinMetaModel.Int_Greater == eOperation
				|| BuiltinMetaModel.Int_GreatOrEqual == eOperation || BuiltinMetaModel.EString_Plus_EJavaObject == eOperation) {
			write(" ");
			write(opName);
			write(" ");
		} else if (BuiltinMetaModel.Object_EQ == eOperation) {
			write(" = ");
		} else if (BuiltinMetaModel.Object_NotEQ == eOperation) {
			write(" <> ");
		} else {
			throw new MigrationException(Type.UNSUPPORTED_EXPRESSION, "Incorrect infix operation: " + opName);
		}
		internalMigrateOperationCallParameters(operationCall);
		if (BuiltinMetaModel.EString_Plus_EJavaObject == eOperation) {
			assert trace.getParamTypes().length == 1;
			if (trace.getParamTypes()[0] != EcorePackage.eINSTANCE.getEString()) {
				write(".repr()");
			}
		} else if (BuiltinMetaModel.Boolean_NE == eOperation || BuiltinMetaModel.Int_Unary_Minus == eOperation || BuiltinMetaModel.Double_Unary_Minus == eOperation) {
			// Enclosing with braces for "not" expression here
			addNegationBraces(placeholder);
		}
	}

	private void internalMigrateOperationCallTarget(OperationCall operationCall) throws MigrationException {
		if (operationCall.getTarget() != null) {
			migrateExpression(operationCall.getTarget());
		} else {
			// getTarget() == null if it is an implicit self operation.
			// TODO: check if it is working with XPand
			write("self");
		}
	}

	private void internalMigrateCollectionOperationCall(OperationCallTrace trace, OperationCall operationCall) throws MigrationException {
		EOperation eOperation = trace.getEOperation();
		assert eOperation != null;
		EClassifier targetType = trace.getTargetType();
		assert targetType != null;
		assert BuiltinMetaModel.isCollectionType(targetType);
		EClassifier elementType = BuiltinMetaModel.getInnerType(targetType);

		int placeholder = getCurrentPosition();
		if (BuiltinMetaModel.Collection_Clear != eOperation && BuiltinMetaModel.List_WithoutFirst != eOperation && BuiltinMetaModel.List_WithoutLast != eOperation) {
			internalMigrateOperationCallTarget(operationCall);
		}

		if (BuiltinMetaModel.Collection_Add == eOperation) {
			EClassifier commonSuperType = getCommonSuperType(elementType, getSingleParameterType(trace));
			internalMigrateToConcreteCollection(targetType, commonSuperType, placeholder);
			write("->including(");
			internalMigrateOperationCallParameters(operationCall);
			write(")");
			// internalMigrateToBag(targetType);
		} else if (BuiltinMetaModel.Collection_AddAll == eOperation) {
			EClassifier commonSuperType = getCommonSuperType(elementType, getSingleCollectionParameterElementType(trace));
			internalMigrateToConcreteCollection(targetType, commonSuperType, placeholder);
			write("->union(");
			internalMigrateOperationCallParameters(operationCall);
			internalMigrateParameterCollectionToMain(getSingleParameterType(trace), targetType);
			write(")");
			// internalMigrateToBag(targetType);
		} else if (BuiltinMetaModel.Collection_Union == eOperation) {
			EClassifier commonSuperType = getCommonSuperType(elementType, getSingleCollectionParameterElementType(trace));
			internalMigrateToSet(targetType, commonSuperType, placeholder);
			write("->union(");
			internalMigrateOperationCallParameters(operationCall);
			internalMigrateParameterCollectionToSet(getSingleParameterType(trace));
			write(")");
			// internalMigrateToBag(targetType);
		} else if (BuiltinMetaModel.Collection_Intersect == eOperation) {
			EClassifier commonSuperType = getCommonSuperType(elementType, getSingleCollectionParameterElementType(trace));
			internalMigrateToSet(targetType, commonSuperType, placeholder);
			write("->intersection(");
			internalMigrateOperationCallParameters(operationCall);
			internalMigrateParameterCollectionToSet(getSingleParameterType(trace));
			write(")");
			// internalMigrateToBag(targetType);
		} else if (BuiltinMetaModel.Collection_Without == eOperation) {
			EClassifier commonSuperType = getCommonSuperType(elementType, getSingleCollectionParameterElementType(trace));
			internalMigrateToSet(targetType, commonSuperType, placeholder);
			write("->-(");
			internalMigrateOperationCallParameters(operationCall);
			internalMigrateParameterCollectionToSet(getSingleParameterType(trace));
			write(")");
			// internalMigrateToBag(targetType);
		} else if (BuiltinMetaModel.Collection_Contains == eOperation) {
			EClassifier parameterType = getSingleParameterType(trace);
			if (!BuiltinMetaModel.isAssignableFrom(elementType, parameterType)) {
				EClassifier commonSuperType = getCommonSuperType(elementType, parameterType);
				internalMigrateTypeSelect(typeManager.getQvtFQName(commonSuperType), placeholder);
			}
			write("->includes(");
			internalMigrateOperationCallParameters(operationCall);
			write(")");
		} else if (BuiltinMetaModel.Collection_ContainsAll == eOperation) {
			EClassifier parameterElementType = getSingleCollectionParameterElementType(trace);
			if (!BuiltinMetaModel.isAssignableFrom(elementType, parameterElementType)) {
				EClassifier commonSuperType = getCommonSuperType(elementType, parameterElementType);
				internalMigrateTypeSelect(typeManager.getQvtFQName(commonSuperType), placeholder);
			}
			write("->includesAll(");
			internalMigrateOperationCallParameters(operationCall);
			write(")");
		} else if (BuiltinMetaModel.List_IndexOf == eOperation) {
			EClassifier parameterType = getSingleParameterType(trace);
			if (!BuiltinMetaModel.isAssignableFrom(elementType, parameterType)) {
				EClassifier commonSuperType = getCommonSuperType(elementType, parameterType);
				internalMigrateTypeSelectCastingCollectionToBag(targetType, typeManager.getQvtFQName(commonSuperType), placeholder);
			}
			write("->indexOf(");
			internalMigrateOperationCallParameters(operationCall);
			write(")");
			write("(", placeholder);
			write(" - 1)");
		} else if (BuiltinMetaModel.Collection_Clear == eOperation) {
			if (TypeManager.isSetType(targetType)) {
				write("Set{}");
			} else if (TypeManager.isListType(targetType)) {
				write("Sequence{}");
			} else {
				write("Bag{}");
			}
			// write("Bag{}");
			if (elementType != EcorePackage.eINSTANCE.getEJavaObject()) {
				write("[");
				write(typeManager.getQvtFQName(elementType));
				write("]");
			}
		} else if (BuiltinMetaModel.Collection_Flatten == eOperation) {
			internalMigrateToConcreteCollection(targetType, elementType, placeholder);
			write("->flatten()");
			// internalMigrateToBag(targetType);
		} else if (BuiltinMetaModel.Collection_ToSet == eOperation) {
			internalMigrateToSet(targetType, elementType, placeholder);
		} else if (BuiltinMetaModel.Collection_ToList == eOperation) {
			internalMigrateToList(targetType, elementType, placeholder);
		} else if (BuiltinMetaModel.List_Get == eOperation) {
			write("->at(");
			internalMigrateOperationCallParameters(operationCall);
			write(" + 1)");
		} else if (BuiltinMetaModel.List_WithoutFirst == eOperation) {
			String varName = variableDispatcher.getNextVariableName();
			write("let ");
			write(varName);
			write(" = ");
			internalMigrateOperationCallTarget(operationCall);
			write(" in ");
			write("if ");
			write(varName);
			write("->size() < 2 then Sequence{}");
			if (elementType != EcorePackage.eINSTANCE.getEJavaObject()) {
				write("[");
				write(typeManager.getQvtFQName(elementType));
				write("]");
			}
			write(" else ");
			write(varName);
			write("->subSequence(2, ");
			write(varName);
			write("->size()) endif");
		} else if (BuiltinMetaModel.List_WithoutLast == eOperation) {
			String varName = variableDispatcher.getNextVariableName();
			write("let ");
			write(varName);
			write(" = ");
			internalMigrateOperationCallTarget(operationCall);
			write(" in ");
			write("if ");
			write(varName);
			write("->size() < 2 then Sequence{}");
			if (elementType != EcorePackage.eINSTANCE.getEJavaObject()) {
				write("[");
				write(typeManager.getQvtFQName(elementType));
				write("]");
			}
			write(" else ");
			write(varName);
			write("->subSequence(1, ");
			write(varName);
			write("->size() - 1) endif");
		} else if (BuiltinMetaModel.List_PurgeDups == eOperation) {
			write("->asOrderedSet()->asSequence()");
		} else {
			/**
			 * .isEmpty() .size() .first() .last()
			 */
			assert operationCall.getParams().length == 0;
			write("->");
			write(eOperation.getName());
			write("(");
			internalMigrateOperationCallParameters(operationCall);
			write(")");
		}
	}

//	 private void internalMigrateToBag(EClassifier collectionType) {
//		if (TypeManager.isListType(collectionType) || TypeManager.isSetType(collectionType)) {
//			write("->asBag()");
//		}
//	}

	private EClassifier getCommonSuperType(EClassifier collectionElementType1, EClassifier collectionElementType2) {
		if (BuiltinMetaModel.VOID == collectionElementType1) {
			return EcorePackage.eINSTANCE.getEJavaObject();
		}
		if (BuiltinMetaModel.isAssignableFrom(collectionElementType1, collectionElementType2)) {
			return collectionElementType1;
		}
		if (collectionElementType1 instanceof EClass) {
			EClass eClass = (EClass) collectionElementType1;
			for (EClass nextSuperType : getAllSuperTypes(eClass)) {
				if (BuiltinMetaModel.isAssignableFrom(nextSuperType, collectionElementType2)) {
					return nextSuperType;
				}
			}
		}
		return EcorePackage.eINSTANCE.getEJavaObject();
	}

	private List<EClass> getAllSuperTypes(EClass eClass) {
		List<EClass> result = new ArrayList<EClass>(eClass.getESuperTypes());
		for (int i = 1; i < result.size(); i++) {
			EClass nextSuperType = result.get(i);
			result.addAll(nextSuperType.getESuperTypes());
		}
		return result;
	}

	private EClassifier getSingleParameterType(OperationCallTrace trace) {
		EClassifier[] paramTypes = trace.getParamTypes();
		assert paramTypes != null && paramTypes.length == 1;
		return paramTypes[0];
	}

	private EClassifier getSingleCollectionParameterElementType(OperationCallTrace trace) {
		EClassifier parameterType = getSingleParameterType(trace);
		assert BuiltinMetaModel.isCollectionType(parameterType);
		return BuiltinMetaModel.getInnerType(parameterType);
	}

	private void internalMigrateToConcreteCollection(EClassifier collectionType, EClassifier elementSuperType, int placeholder) throws MigrationException {
		assert BuiltinMetaModel.isCollectionType(collectionType);
		EClassifier elementType = BuiltinMetaModel.getInnerType(collectionType);
		if (elementSuperType != elementType) {
			internalMigrateTypeSelectCastingCollectionToBag(collectionType, typeManager.getQvtFQName(elementSuperType), placeholder);
		} else if (!TypeManager.isListType(collectionType) && !TypeManager.isSetType(collectionType)) {
			internalMigrateCollectionToBag(null);
		}
	}

	private void internalMigrateToSet(EClassifier collectionType, EClassifier elementSuperType, int placeholder) throws MigrationException {
		internalMigrateToConcreteCollection(collectionType, elementSuperType, placeholder);
		if (!TypeManager.isSetType(collectionType)) {
			write("->asSet()");
		}
	}

	private void internalMigrateToList(EClassifier collectionType, EClassifier elementSuperType, int placeholder) throws MigrationException {
		internalMigrateToConcreteCollection(collectionType, elementSuperType, placeholder);
		if (!TypeManager.isListType(collectionType)) {
			write("->asSequence()");
		}
	}

	private void internalMigrateParameterCollectionToMain(EClassifier parameterCollectionType, EClassifier mainCollectionType) {
		assert BuiltinMetaModel.isCollectionType(parameterCollectionType);
		assert BuiltinMetaModel.isCollectionType(mainCollectionType);
		if (TypeManager.isListType(mainCollectionType)) {
			if (TypeManager.isSetType(parameterCollectionType)) {
				write("->asSequence()");
			} else if (!TypeManager.isListType(parameterCollectionType)) {
				internalMigrateCollectionToBag(null);
				write("->asSequence()");
			}
		} else if (TypeManager.isSetType(mainCollectionType)) {
			if (TypeManager.isListType(parameterCollectionType)) {
				write("->asSet()");
			} else if (!TypeManager.isSetType(parameterCollectionType)) {
				internalMigrateCollectionToBag(null);
				write("->asSet()");
			}
		} else {
			if (TypeManager.isSetType(parameterCollectionType) || TypeManager.isListType(parameterCollectionType)) {
				write("->asBag()");
			} else {
				internalMigrateCollectionToBag(null);
			}
		}
	}

	private void internalMigrateParameterCollectionToSet(EClassifier parameterCollectionType) {
		assert BuiltinMetaModel.isCollectionType(parameterCollectionType);
		if (TypeManager.isListType(parameterCollectionType)) {
			write("->asSet()");
		} else if (!TypeManager.isSetType(parameterCollectionType)) {
			internalMigrateCollectionToBag(null);
			write("->asSet()");
		}
	}

	private boolean isCollectionOperation(OperationCallTrace trace) {
		EOperation eOperation = trace.getEOperation();
		assert eOperation != null;
		return collectionOperations.contains(eOperation);
	}

	private void convertTypedElementCallProduct(ETypedElement typedElement) {
		assert typedElement != null;
		if (typedElement.isMany() && typedElement.isOrdered() && typedElement.isUnique()) {
			write("->asSequence()");
		}
	}

	private void convertImplicitCollectProduct(EClassifier targetType) {
		assert targetType != null;
		if (!TypeManager.isListType(targetType)) {
			write("->asSequence()");
		}
	}

	private void internalMigrateOperationCallParameters(OperationCall operationCall) throws MigrationException {
		for (int i = 0; i < operationCall.getParams().length; i++) {
			if (i > 0) {
				write(", ");
			}
			migrateExpression(operationCall.getParams()[i]);
		}
	}

	private void internalMigrateOperationCall(OperationCallTrace trace, OperationCall operationCall) throws MigrationException {
		EOperation eOperation = trace.getEOperation();
		assert eOperation != null;
		internalMigrateOperationCallTarget(operationCall);
		write(".");
		write(stdLibImportsManager.getOperationName(eOperation));
		write("(");
		if (BuiltinMetaModel.EString_SubString_StartEnd == eOperation) {
			write("1 + ");
		}
		internalMigrateOperationCallParameters(operationCall);
		write(")");
	}

	private boolean isInfixOperation(OperationCallTrace trace) {
		EOperation eOperation = trace.getEOperation();
		assert eOperation != null;
		return infixOperations.contains(eOperation);
	}

	private void migrateFeatureCall(FeatureCall featureCall) throws MigrationException {
		ExpressionAnalyzeTrace expressionTrace = ctx.getTraces().get(featureCall);
		if (false == expressionTrace instanceof FeatureCallTrace) {
			throw new MigrationException(Type.UNSUPPORTED_FEATURE_CALL_TRACE, String.valueOf(expressionTrace));
		}
		FeatureCallTrace trace = (FeatureCallTrace) expressionTrace;
		switch (trace.getType()) {
		case ENUM_LITERAL_REF:
			EEnumLiteral enumLiteral = trace.getEnumLiteral();
			assert enumLiteral != null;
			write(typeManager.getQvtFQName(enumLiteral));
			return;
		case ENV_VAR_REF:
			write(featureCall.getName().getValue());
			return;
		case UNDESOLVED_TARGET_TYPE:
		case UNSUPPORTED_CLASSIFIER_REF:
			throw new MigrationException(Type.UNSUPPORTED_FEATURE_CALL, trace.toString());
		}
		// featureCall.getTarget() == null for FeatureCall of implicit variable
		// feature
		if (featureCall.getTarget() != null) {
			migrateExpression(featureCall.getTarget());
			write(".");
		}
		write(featureCall.getName().getValue());
		switch (trace.getType()) {
		case FEATURE_REF:
			EClassifier targetType = trace.getTargetType();
			assert targetType != null;
			if (BuiltinMetaModel.isParameterizedType(targetType)) {
				throw new MigrationException(Type.UNSUPPORTED_EXPRESSION, "Attribute call is not supported for the collection types: " + targetType.toString() + "." + featureCall.getName().getValue());
			}
			convertTypedElementCallProduct(trace.getFeature());
			return;
		case IMPLICIT_COLLECT_FEATURE_REF:
			convertImplicitCollectProduct(trace.getTargetType());
			return;
		default:
			throw new MigrationException(Type.UNSUPPORTED_FEATURE_CALL_TRACE, "Incorrect type: " + trace.getType());
		}
	}
	
	private void markReturnPosition() {
		returnPosition = getCurrentPosition();
	}

	private int getCurrentPosition() {
		return output.length();
	}

	private void write(String word, int index) {
		output.insert(index, word);
	}

	private void write(String word) {
		output.append(word);
	}

	private void writeln(String line) {
		output.append(line);
		output.append(LF);
	}

}
@


1.1.2.2
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 First step toward .xpt migration.
@
text
@d52 1
a52 1
	static final CharSequence LF = System.getProperty("line.separator");
d921 2
a922 2
	private void write(CharSequence cs, int index) {
		output.insert(index, cs);
d925 2
a926 2
	private void write(CharSequence cs) {
		output.append(cs);
d929 2
a930 2
	private void writeln(CharSequence cs) {
		output.append(cs);
@


1.1.2.3
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - ModelManager for model name substitutions was added
 - OclCs class added
 - FeatureCall positions calculation corrected
 - implicit/explicit extension first parameter migration with unit-tests
@
text
@a47 1
import org.eclipse.ocl.Environment;
d109 2
d121 1
a121 3
	private ModelManager modelManager;

	ExpressionMigrationFacade(Expression expression, TypeManager typeManager, ModelManager modelManager, VariableNameDispatcher variableDispatcher, MigrationExecutionContext context) {
d124 1
a124 1
		this.modelManager = modelManager;
a449 2
			// TODO: use ModelManager or StandardLibraryImports to escape
			// specific operation names here and below
d472 1
d475 1
a475 6
			if (operationCall.getTarget() != null) {
				migrateExpression(operationCall.getTarget());
			} else {
				// in case of xpand migration substituting implicit target of static extension call
				write(Environment.SELF_VARIABLE_NAME);
			}
d550 1
a550 1
			write(Environment.SELF_VARIABLE_NAME);
d853 3
a855 6
		// getTarget can be null for implicit call to "self" variable in xpand
		if (operationCall.getTarget() != null) {
			migrateExpression(operationCall.getTarget());
			write(".");
		}
		write(modelManager.getName(operationCall, trace));
d883 1
a883 1
			write(modelManager.getName(featureCall, trace));
d895 1
a895 1
		write(modelManager.getName(featureCall, trace));
@


1.1.2.4
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - more gentle collection operations migration implemented
@
text
@a15 1
import java.util.Collection;
d21 1
a27 7
import org.eclipse.gmf.internal.xpand.BuiltinMetaModelExt;
import org.eclipse.gmf.internal.xpand.ResourceManager;
import org.eclipse.gmf.internal.xpand.ResourceMarker;
import org.eclipse.gmf.internal.xpand.eval.EvaluationListener;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContextImpl;
import org.eclipse.gmf.internal.xpand.expression.Variable;
a47 2
import org.eclipse.gmf.internal.xpand.util.ClassLoadContext;
import org.eclipse.gmf.internal.xpand.xtend.ast.Extension;
a48 1
import org.eclipse.ocl.ecore.EcoreEnvironmentFactory;
a52 2
	static final EcoreEnvironmentFactory ECORE_ENV_FACTORY = new EcoreEnvironmentFactory(null);
	
a120 4
	
	private Stack<QvtExecutionContext> qvtContexts = new Stack<QvtExecutionContext>();

	private EClassifier rootExpressionType;
d122 1
a122 1
	ExpressionMigrationFacade(Expression expression, EClassifier requiredType, TypeManager typeManager, ModelManager modelManager, VariableNameDispatcher variableDispatcher, MigrationExecutionContext context) {
a123 1
		rootExpressionType = requiredType;
d132 1
a132 7
		qvtContexts.push(new QvtExecutionContext());
		try {
			EClassifier expressionQvtType = migrateExpression(rootExpression);
			internalConvertTypes(expressionQvtType, rootExpressionType);
		} finally {
			qvtContexts.pop();
		}
a135 25
	// TODO: similar to internalMigrateParameterCollectionToMain() ?
	private void internalConvertTypes(EClassifier actualType, EClassifier expectedType) {
		if (expectedType != BuiltinMetaModel.VOID && BuiltinMetaModel.isCollectionType(expectedType)) {
			assert BuiltinMetaModel.isCollectionType(actualType);
			
			if (BuiltinMetaModelExt.isListType(expectedType)) {
				if (BuiltinMetaModelExt.isSetType(actualType) || BuiltinMetaModelExt.isOrderedSetType(actualType) || BuiltinMetaModelExt.isBagType(actualType)) {
					write("->asSequence()");
				} else if (BuiltinMetaModelExt.isAbstractCollectionType(actualType)) {
					internalMigrateCollectionToBag(null);
					write("->asSequence()");
				}
			} else if (BuiltinMetaModelExt.isSetType(expectedType)) {
				if (BuiltinMetaModelExt.isListType(actualType) || BuiltinMetaModelExt.isBagType(actualType)) {
					write("->asSet()");
				} else if (BuiltinMetaModelExt.isAbstractCollectionType(actualType)) {
					internalMigrateCollectionToBag(null);
					write("->asSet()");
				}
			}
			// Abstract collection should be compatible with any other kind
			// on collections
		}
	}

d140 1
a140 3
	// Returning xpand types from here. This method can be modified to make use
	// of QVT type system instead.
	private EClassifier migrateExpression(Expression expression) throws MigrationException {
d144 1
a144 1
				return migrateBooleanOperation((BooleanOperation) expression);
d146 1
a146 1
				return migrateCast((Cast) expression);
d148 1
a148 1
				return migrateChainExpression((ChainExpression) expression);
d150 1
a150 1
				return migrateConstructorCallExpression((ConstructorCallExpression) expression);
d152 1
a152 1
				return migrateCollectionExpression((CollectionExpression) expression);
d154 1
a154 1
				return migrateOperationCall((OperationCall) expression);
d156 1
a156 1
				return migrateTypeSelectExpression((TypeSelectExpression) expression);
d158 1
a158 1
				return migrateFeatureCall((FeatureCall) expression);
d160 1
a160 1
				return migrateIfExpression((IfExpression) expression);
d162 1
a162 1
				return migrateLetExpression((LetExpression) expression);
d164 1
a164 1
				return migrateListLiteral((ListLiteral) expression);
d166 1
a166 1
				return migrateBooleanLiteral((BooleanLiteral) expression);
d168 1
a168 1
				return migrateIntegerLiteral((IntegerLiteral) expression);
d170 1
a170 1
				return migrateNullLiteral((NullLiteral) expression);
d172 1
a172 1
				return migrateRealLiteral((RealLiteral) expression);
d174 1
a174 1
				return migrateStringLiteral((StringLiteral) expression);
d176 1
a176 1
				return migrateSwitchExpression((SwitchExpression) expression);
d185 1
a185 2
	private EClassifier migrateSwitchExpression(SwitchExpression switchExpression) throws MigrationException {
		Collection<EClassifier> expressionTypes = new ArrayList<EClassifier>();
d187 1
a187 1
			expressionTypes.add(migrateExpression(switchExpression.getDefaultExpr()));
d189 1
a189 2
			// TODO: define additional variable here.
			write("switch { ");
d196 2
a197 2
				expressionTypes.add(migrateExpression(caseExpression.getThenPart()));
				write("; ");
d200 3
a202 2
			expressionTypes.add(migrateExpression(switchExpression.getDefaultExpr()));
			write("; }");
a203 2
		// TODO: check different types of collections was produced
		return BuiltinMetaModelExt.getCommonSuperType(expressionTypes);
d206 1
a206 1
	private EClassifier migrateStringLiteral(StringLiteral expression) {
a209 1
		return EcorePackage.eINSTANCE.getEString();
d225 1
a225 1
	private EClassifier migrateRealLiteral(RealLiteral realLiteral) {
a226 1
		return EcorePackage.eINSTANCE.getEDouble();
d229 1
a229 1
	private EClassifier migrateNullLiteral(NullLiteral expression) {
a230 1
		return BuiltinMetaModel.VOID;
d233 1
a233 1
	private EClassifier migrateIntegerLiteral(IntegerLiteral integerLiteral) {
a234 1
		return EcorePackage.eINSTANCE.getEInt();
d237 1
a237 1
	private EClassifier migrateBooleanLiteral(BooleanLiteral booleanLiteral) {
a238 1
		return EcorePackage.eINSTANCE.getEBoolean();
d241 1
a241 2
	private EClassifier migrateListLiteral(ListLiteral listLiteral) throws MigrationException {
		Collection<EClassifier> expressionTypes = new ArrayList<EClassifier>();
d247 1
a247 1
			expressionTypes.add(migrateExpression(listLiteral.getElements()[i]));
a249 1
		return BuiltinMetaModelExt.getListType(BuiltinMetaModelExt.getCommonSuperType(expressionTypes));
d252 1
a252 2
	private EClassifier migrateLetExpression(LetExpression letExpression) throws MigrationException {
		String varName = letExpression.getVarName().getValue();
d254 1
a254 1
		write(varName);
d256 3
a258 7
		pushContextWithVariable(varName, migrateExpression(letExpression.getVarExpression()));
		try {
			write(" in ");
			return migrateExpression(letExpression.getTargetExpression());
		} finally {
			qvtContexts.pop();
		}
d260 2
a261 2
	
	private EClassifier migrateIfExpression(IfExpression ifExpression) throws MigrationException {
d265 1
a265 1
		EClassifier thenType = migrateExpression(ifExpression.getThenPart());
d267 1
a267 1
		EClassifier elseType = migrateExpression(ifExpression.getElsePart());
a268 2
		// TODO: check if then/else produces different types of collections..
		return BuiltinMetaModelExt.getCommonSuperType(thenType, elseType);
d271 1
a271 1
	private EClassifier migrateConstructorCallExpression(ConstructorCallExpression constructorCall) throws MigrationException {
a279 1
		return type;
d282 1
a282 1
	private EClassifier migrateChainExpression(ChainExpression chainExpression) throws MigrationException {
d292 1
a292 1
		write("; ");
d296 1
a296 1
		return migrateExpression(chainExpression.getNext());
d299 1
a299 1
	private EClassifier migrateBooleanOperation(BooleanOperation booleanOperation) throws MigrationException {
a310 1
		return EcorePackage.eINSTANCE.getEBoolean();
d313 1
a313 1
	private EClassifier migrateCast(Cast cast) throws MigrationException {
a321 1
		return type;
d324 1
a324 1
	private EClassifier migrateTypeSelectExpression(TypeSelectExpression typeSelectExpression) throws MigrationException {
d326 1
a326 1
		EClassifier targetQvtType = migrateExpression(typeSelectExpression.getTarget());
d339 2
a340 2
		internalMigrateTypeSelectCastingCollectionToBag(targetQvtType, typeManager.getQvtFQName(type), placeholder);
		if (!BuiltinMetaModelExt.isListType(targetQvtType) && !BuiltinMetaModelExt.isOrderedSetType(targetQvtType)) {
a342 1
		return BuiltinMetaModelExt.isOrderedSetType(targetQvtType) ? BuiltinMetaModelExt.getOrderedSetType(type) : BuiltinMetaModelExt.getListType(type);
d348 1
a348 1
			internalMigrateTypeSelect(typeName, placeholder, getCurrentPosition());
d354 1
a354 1
	private void internalMigrateTypeSelect(String typeName, int expressionStartPosition, int expressionEndPosition) {
d358 5
a362 7
		StringBuffer sb = new StringBuffer();
		sb.append(")[");
		sb.append(typeName);
		sb.append("]");
		write(sb, expressionEndPosition);
		
		write("(", expressionStartPosition);
d379 2
a380 2
	
	private EClassifier migrateCollectionExpression(CollectionExpression collectionExpression) throws MigrationException {
d384 4
a392 8

		int placeholder = getCurrentPosition();
		boolean hasNegation = false;
		EClassifier targetQvtType = migrateExpression(collectionExpression.getTarget());
		assert BuiltinMetaModel.isCollectionType(targetQvtType);
		EClassifier innerTargetQvtType = BuiltinMetaModel.getInnerType(targetQvtType);

		write("->");
d413 8
a420 9
		String varName = collectionExpression.getElementName();
		write(varName);
		pushContextWithVariable(varName, innerTargetQvtType);
		EClassifier expressionType;
		try {
			write(" | ");
			expressionType = migrateExpression(collectionExpression.getClosure());
		} finally {
			qvtContexts.pop();
d422 2
a423 30
		write(")");
		try {
			// Determining actual result type
			switch (trace.getType()) {
			case NOTEXISTS_REF:
			case EXISTS_REF:
			case FORALL_REF:
				return EcorePackage.eINSTANCE.getEBoolean();
			case COLLECT_REF:
				if (BuiltinMetaModelExt.isSetType(trace.getResultType())) {
					// Does not work now due to the bug in xpand implementation
					// - see "TODO [AS]" comment in CollectionExpression
					write("->asSet()");
					// TODO: add flatten here?
					return BuiltinMetaModel.getSetType(expressionType);
				}else if (BuiltinMetaModelExt.isListType(trace.getResultType())) {
					return BuiltinMetaModelExt.getListType(expressionType);
				} else {
					return BuiltinMetaModelExt.getBagType(expressionType);
				}
			case SELECT_REF:
			case REJECT_REF:
				return targetQvtType;
			}
			// Unreachable
			return null;
		} finally {
			if (hasNegation) {
				addNegationBraces(placeholder);
			}
d440 1
a440 1
	private EClassifier migrateOperationCall(OperationCall operationCall) throws MigrationException {
d451 2
a452 2
			// TODO: use ModelManager to escape specific operation names here
			// and below
d455 1
a455 1
			internalMigrateOperationCallParameters(operationCall, trace.getParamTypes());
d457 1
a457 1
			return trace.getResultType();
d460 1
a460 1
				return internalMigrateInfixOperation(trace, operationCall);
d462 4
a465 1
				return internalMigrateCollectionOperationCall(trace, operationCall);
d467 1
a467 1
			// else same as IMPLICIT_COLLECT_OPERATION_REF:
d469 5
a473 24
			EOperation eOperation = trace.getEOperation();
			assert eOperation != null;
			EClassifier targetQvtType = trace.getTargetType();
			// getTarget can be null for implicit call to "self" variable in xpand
			if (operationCall.getTarget() != null) {
				targetQvtType = migrateExpression(operationCall.getTarget());
				write(".");
			}
			write(modelManager.getName(operationCall, trace));
			write("(");
			if (BuiltinMetaModel.EString_SubString_StartEnd == eOperation) {
				write("1 + ");
			}
			internalMigrateOperationCallParameters(operationCall, trace.getParamTypes());
			write(")");
			if (trace.getType() == OperationCallTrace.Type.OPERATION_REF) {
				return getTypedElementQvtType(eOperation);	
			} else {
				if (!BuiltinMetaModel.isParameterizedType(targetQvtType)) {
					throw new MigrationException(Type.UNSUPPORTED_EXPRESSION, "Implicit collect is not supported for simple types: " + targetQvtType.toString() + "." + operationCall.getName().getValue());
				}
				convertImplicitCollectProduct(targetQvtType);
				return BuiltinMetaModelExt.getListType(BuiltinMetaModel.getInnerType(targetQvtType));
			}
d485 1
a485 1
				internalMigrateOperationCallParameters(operationCall, withoutFirst(trace.getParamTypes()));
d488 1
a488 1
			return trace.getResultType();
d491 1
a491 1
			EClassifier implicitCollectTargetQvtType = migrateExpression(operationCall.getTarget());
d501 1
a501 1
				internalMigrateOperationCallParameters(operationCall, withoutFirst(trace.getParamTypes()));
d505 2
a506 5
			if (!BuiltinMetaModel.isParameterizedType(implicitCollectTargetQvtType)) {
				throw new MigrationException(Type.UNSUPPORTED_EXPRESSION, "Implicit collect is not supported for simple types: " + implicitCollectTargetQvtType.toString() + "." + operationCall.getName().getValue());
			}
			convertImplicitCollectProduct(implicitCollectTargetQvtType);
			return trace.getResultType();
d512 1
a512 6
	private List<EClassifier> withoutFirst(List<EClassifier> parameters) {
		assert parameters.size() > 0;
		return parameters.subList(1, parameters.size());
	}

	private EClassifier internalMigrateInfixOperation(OperationCallTrace trace, OperationCall operationCall) throws MigrationException {
d539 1
a539 1
		List<EClassifier> parameterTypes = internalMigrateOperationCallParameters(operationCall, null);
d541 2
a542 2
			assert parameterTypes.size() == 1;
			if (parameterTypes.get(0) != EcorePackage.eINSTANCE.getEString()) {
a548 1
		return getTypedElementQvtType(eOperation);
d551 1
a551 1
	private EClassifier internalMigrateOperationCallTarget(OperationCall operationCall) throws MigrationException {
d553 1
a553 1
			return migrateExpression(operationCall.getTarget());
a557 1
			return null;
d561 1
a561 4
	// TODO: check if "internalMigrateOperationCallParameters()" can be called
	// with non-null parameters here (used to transform parameter collection
	// types too)
	private EClassifier internalMigrateCollectionOperationCall(OperationCallTrace trace, OperationCall operationCall) throws MigrationException {
d569 1
a569 1
		int expressionStartPosition = getCurrentPosition();
d571 1
a571 5
			EClassifier targetQvtType = internalMigrateOperationCallTarget(operationCall);
			if (targetQvtType != null && BuiltinMetaModel.isCollectionType(targetQvtType)) {
				targetType = targetQvtType;
				elementType = BuiltinMetaModel.getInnerType(targetQvtType);
			}
d575 2
a576 1
			int operationStartPosition = getCurrentPosition();
d578 1
a578 1
			EClassifier parameterType = getSingleParameterType(internalMigrateOperationCallParameters(operationCall, null));
d580 1
a580 2
			EClassifier commonSuperType = BuiltinMetaModelExt.getCommonSuperType(elementType, parameterType);
			return internalMigrateToConcreteCollection(targetType, commonSuperType, expressionStartPosition, operationStartPosition);
d582 2
a583 1
			int operationStartPosition = getCurrentPosition();
d585 2
a586 4
			EClassifier parameterCollectionType = getSingleParameterType(internalMigrateOperationCallParameters(operationCall, null));
			EClassifier parameterCollectionElementType = getCollectionElementType(parameterCollectionType);
			EClassifier commonSuperType = BuiltinMetaModelExt.getCommonSuperType(elementType, parameterCollectionElementType);
			internalMigrateParameterCollectionToMain(parameterCollectionType, targetType);
d588 1
a588 1
			return internalMigrateToConcreteCollection(targetType, commonSuperType, expressionStartPosition, operationStartPosition);
d590 2
a591 1
			int operationStartPosition = getCurrentPosition();
d593 2
a594 4
			EClassifier parameterCollectionType = getSingleParameterType(internalMigrateOperationCallParameters(operationCall, null));
			EClassifier parameterCollectionElementType = getCollectionElementType(parameterCollectionType);
			EClassifier commonSuperType = BuiltinMetaModelExt.getCommonSuperType(elementType, parameterCollectionElementType);
			internalMigrateParameterCollectionToSet(parameterCollectionType);
d596 1
a596 1
			return internalMigrateToSet(targetType, commonSuperType, expressionStartPosition, operationStartPosition);
d598 2
a599 1
			int operationStartPosition = getCurrentPosition();
d601 2
a602 4
			EClassifier parameterCollectionType = getSingleParameterType(internalMigrateOperationCallParameters(operationCall, null));
			EClassifier parameterCollectionElementType = getCollectionElementType(parameterCollectionType);
			EClassifier commonSuperType = BuiltinMetaModelExt.getCommonSuperType(elementType, parameterCollectionElementType);
			internalMigrateParameterCollectionToSet(parameterCollectionType);
d604 1
a604 1
			return internalMigrateToSet(targetType, commonSuperType, expressionStartPosition, operationStartPosition);
d606 2
a607 1
			int operationStartPosition = getCurrentPosition();
d609 2
a610 4
			EClassifier parameterCollectionType = getSingleParameterType(internalMigrateOperationCallParameters(operationCall, null));
			EClassifier parameterCollectionElementType = getCollectionElementType(parameterCollectionType);
			EClassifier commonSuperType = BuiltinMetaModelExt.getCommonSuperType(elementType, parameterCollectionElementType);
			internalMigrateParameterCollectionToSet(parameterCollectionType);
d612 1
a612 1
			return internalMigrateToSet(targetType, commonSuperType, expressionStartPosition, operationStartPosition);
d614 5
a618 1
			int operationStartPosition = getCurrentPosition();
d620 1
a620 1
			EClassifier parameterType = getSingleParameterType(internalMigrateOperationCallParameters(operationCall, null));
d622 5
a626 3
			if (!BuiltinMetaModel.isAssignableFrom(elementType, parameterType)) {
				EClassifier commonSuperType = BuiltinMetaModelExt.getCommonSuperType(elementType, parameterType);
				internalMigrateTypeSelect(typeManager.getQvtFQName(commonSuperType), expressionStartPosition, operationStartPosition);
a627 3
			return EcorePackage.eINSTANCE.getEBoolean();
		} else if (BuiltinMetaModel.Collection_ContainsAll == eOperation) {
			int operationStartPosition = getCurrentPosition();
d629 1
a629 2
			EClassifier parameterCollectionType = getSingleParameterType(internalMigrateOperationCallParameters(operationCall, null));
			EClassifier parameterCollectionElementType = getCollectionElementType(parameterCollectionType);
d631 5
a635 3
			if (!BuiltinMetaModel.isAssignableFrom(elementType, parameterCollectionElementType)) {
				EClassifier commonSuperType = BuiltinMetaModelExt.getCommonSuperType(elementType, parameterCollectionElementType);
				internalMigrateTypeSelect(typeManager.getQvtFQName(commonSuperType), expressionStartPosition, operationStartPosition);
a636 3
			return EcorePackage.eINSTANCE.getEBoolean();
		} else if (BuiltinMetaModel.List_IndexOf == eOperation) {
			int operationStartPosition = getCurrentPosition();
d638 1
a638 1
			EClassifier parameterType = getSingleParameterType(internalMigrateOperationCallParameters(operationCall, null));
d640 1
a640 5
			if (!BuiltinMetaModel.isAssignableFrom(elementType, parameterType)) {
				EClassifier commonSuperType = BuiltinMetaModelExt.getCommonSuperType(elementType, parameterType);
				internalMigrateTypeSelect(typeManager.getQvtFQName(commonSuperType), expressionStartPosition, operationStartPosition);
			}
			write("(", expressionStartPosition);
a641 1
			return EcorePackage.eINSTANCE.getEInt();
d643 1
a643 2
			EClassifier resultType;
			if (BuiltinMetaModelExt.isSetType(targetType)) {
d645 1
a645 2
				resultType = BuiltinMetaModelExt.getSetType(elementType);
			} else if (BuiltinMetaModelExt.isListType(targetType) || BuiltinMetaModelExt.isOrderedSetType(targetType)) {
a646 1
				resultType = BuiltinMetaModelExt.getListType(elementType);
a648 1
				resultType = BuiltinMetaModelExt.getBagType(elementType);
a655 1
			return resultType;
d657 1
a657 1
			EClassifier resultType = internalMigrateToConcreteCollection(targetType, elementType, expressionStartPosition, getCurrentPosition());
d659 1
a659 10
			if (BuiltinMetaModel.isCollectionType(elementType)) {
				elementType = BuiltinMetaModel.getInnerType(elementType);
			}
			if (BuiltinMetaModelExt.isSetType(resultType) || BuiltinMetaModelExt.isOrderedSetType(resultType)) {
				return BuiltinMetaModelExt.getSetType(elementType);
			} else if (BuiltinMetaModelExt.isListType(resultType)) {
				return BuiltinMetaModelExt.getListType(elementType);
			} else {
				return BuiltinMetaModelExt.getBagType(elementType);
			}
d661 1
a661 1
			return internalMigrateToSet(targetType, elementType, expressionStartPosition, getCurrentPosition());
d663 1
a663 1
			return internalMigrateToList(targetType, elementType, expressionStartPosition);
d666 1
a666 1
			internalMigrateOperationCallParameters(operationCall, null);
a667 1
			return elementType;
a668 1
			boolean isOrderedSet = BuiltinMetaModelExt.isOrderedSetType(targetType);
d677 1
a677 7
			write("->size() < 2 then ");
			if (isOrderedSet) {
				write("OrderedSet");
			} else {
				write("Sequence");
			}
			write("{}");
d685 1
a685 7
			write("->");
			if (isOrderedSet) {
				write("subOrderedSet");
			} else {
				write("subSequence");
			}
			write("(2, ");
a687 1
			return targetType;
a688 1
			boolean isOrderedSet = BuiltinMetaModelExt.isOrderedSetType(targetType);
d697 1
a697 7
			write("->size() < 2 then ");
			if (isOrderedSet) {
				write("OrderedSet");
			} else {
				write("Sequence");
			}
			write("{}");
d705 1
a705 7
			write("->");
			if (isOrderedSet) {
				write("subOrderedSet");
			} else {
				write("subSequence");
			}
			write("(1, ");
a707 1
			return targetType;
d709 1
a709 4
			if (BuiltinMetaModelExt.isListType(targetType)) {
				write("->asOrderedSet()->asSequence()");	
			}
			return targetType;
d718 1
a718 1
			internalMigrateOperationCallParameters(operationCall, null);
d720 22
a741 8
			if (BuiltinMetaModel.Collection_IsEmpty == eOperation) {
				return EcorePackage.eINSTANCE.getEBoolean();
			} else if (BuiltinMetaModel.Collection_Size == eOperation) {
				return EcorePackage.eINSTANCE.getEInt();
			} else if (BuiltinMetaModel.List_First == eOperation || BuiltinMetaModel.List_Last == eOperation) {
				return elementType;
			} else {
				throw new MigrationException(Type.UNSUPPORTED_COLLECTION_OPERATION, eOperation.getName());
d744 10
d755 5
a759 4
	
	private EClassifier getSingleParameterType(List<EClassifier> parameterTypes) {
		assert parameterTypes.size() == 1;
		return parameterTypes.get(0);
d761 5
a765 4
	
	private EClassifier getCollectionElementType(EClassifier collectionType) {
		assert BuiltinMetaModel.isCollectionType(collectionType);
		return BuiltinMetaModel.getInnerType(collectionType);
d768 1
a768 1
	private EClassifier internalMigrateToConcreteCollection(EClassifier collectionType, EClassifier requestedElementType, int expressionStartPosition, int expressionEndPosition) throws MigrationException {
d771 4
a774 18
		if (BuiltinMetaModelExt.isAbstractCollectionType(collectionType)) {
			String iteratorName = variableDispatcher.getNextIteratorName();
			StringBuilder sb = new StringBuilder();
			sb.append("->collect(");
			sb.append(iteratorName);
			sb.append(" | ");
			sb.append(iteratorName);
			if (requestedElementType != elementType) {
				sb.append(".oclAsType(");
				sb.append(typeManager.getQvtFQName(requestedElementType));
				sb.append(")");
			}
			sb.append(")");
			write(sb, expressionEndPosition);
			return BuiltinMetaModelExt.getBagType(requestedElementType);
		} else if (requestedElementType != elementType) {
			internalMigrateTypeSelect(typeManager.getQvtFQName(requestedElementType), expressionStartPosition, expressionEndPosition);
			return BuiltinMetaModelExt.replaceCollectionElementType(collectionType, requestedElementType);
a775 1
		return collectionType;
d777 5
a781 4
	
	private EClassifier internalMigrateToSet(EClassifier collectionType, EClassifier elementSuperType, int expressionStartPosition, int expressionEndPosition) throws MigrationException {
		if (!BuiltinMetaModelExt.isSetType(collectionType) && !BuiltinMetaModelExt.isOrderedSetType(collectionType)) {
			write("->asSet()", expressionEndPosition);
a782 2
		internalMigrateToConcreteCollection(collectionType, elementSuperType, expressionStartPosition, expressionEndPosition);
		return BuiltinMetaModelExt.isOrderedSetType(collectionType) ? BuiltinMetaModelExt.getOrderedSetType(elementSuperType) : BuiltinMetaModelExt.getSetType(elementSuperType);
d784 4
a787 4
	
	private EClassifier internalMigrateToList(EClassifier collectionType, EClassifier elementSuperType, int placeholder) throws MigrationException {
		internalMigrateToConcreteCollection(collectionType, elementSuperType, placeholder, getCurrentPosition());
		if (!BuiltinMetaModelExt.isListType(collectionType) && !BuiltinMetaModelExt.isOrderedSetType(collectionType)) {
a788 1
			return BuiltinMetaModelExt.getListType(elementSuperType);
a789 1
		return collectionType;
d791 1
a791 1
	
d795 2
a796 2
		if (BuiltinMetaModelExt.isListType(mainCollectionType)) {
			if (BuiltinMetaModelExt.isSetType(parameterCollectionType) || BuiltinMetaModelExt.isOrderedSetType(parameterCollectionType)) {
d798 1
a798 1
			} else if (BuiltinMetaModelExt.isAbstractCollectionType(parameterCollectionType)) {
d802 2
a803 2
		} else if (BuiltinMetaModelExt.isSetType(mainCollectionType) || BuiltinMetaModelExt.isOrderedSetType(mainCollectionType)) {
			if (BuiltinMetaModelExt.isListType(parameterCollectionType) || BuiltinMetaModelExt.isBagType(parameterCollectionType)) {
d805 1
a805 1
			} else if (BuiltinMetaModelExt.isAbstractCollectionType(parameterCollectionType)) {
d809 2
a810 2
		} else { //For Bag/AbstractCollection (should be transformed to Bag)
			if (BuiltinMetaModelExt.isListType(parameterCollectionType)) {
d812 1
a812 1
			} else if (BuiltinMetaModelExt.isAbstractCollectionType(parameterCollectionType)) {
d820 1
a820 1
		if (BuiltinMetaModelExt.isListType(parameterCollectionType) || BuiltinMetaModelExt.isBagType(parameterCollectionType)) {
d822 1
a822 1
		} else if (BuiltinMetaModelExt.isAbstractCollectionType(parameterCollectionType)) {
d833 5
a837 13
	
	private EClassifier getTypedElementQvtType(ETypedElement typedElement) {
		EClassifier type = typedElement.getEType();
		if (typedElement.isMany()) {
			if (typedElement.isOrdered() && typedElement.isUnique()) {
				type = BuiltinMetaModelExt.getOrderedSetType(type);
			} else if (typedElement.isOrdered()) {
				type = BuiltinMetaModelExt.getListType(type);
			} else if (typedElement.isUnique()) {
				type = BuiltinMetaModelExt.getSetType(type);
			} else {
				type = BuiltinMetaModelExt.getBagType(type);
			}
a838 1
		return type;
d843 1
a843 1
		if (!BuiltinMetaModelExt.isListType(targetType) && !BuiltinMetaModelExt.isOrderedSetType(targetType)) {
d848 1
a848 3
	private List<EClassifier> internalMigrateOperationCallParameters(OperationCall operationCall, List<EClassifier> expectedParameterTypes) throws MigrationException {
		assert expectedParameterTypes == null || operationCall.getParams().length == expectedParameterTypes.size();
		List<EClassifier> parameterTypes = new ArrayList<EClassifier>();
d853 16
a868 4
			parameterTypes.add(migrateExpression(operationCall.getParams()[i]));
			if (expectedParameterTypes != null) {
				internalConvertTypes(parameterTypes.get(i), expectedParameterTypes.get(i));
			}
d870 2
a871 1
		return parameterTypes;
d880 1
a880 1
	private EClassifier migrateFeatureCall(FeatureCall featureCall) throws MigrationException {
d891 1
a891 1
			return enumLiteral.getEEnum();
d894 1
a894 2
			EClassifier variableType = getEnvVariableType(featureCall.getName().getValue());
			return variableType != null ? variableType : trace.getResultType();
a905 2
		EClassifier targetType = trace.getTargetType();
		assert targetType != null;
d908 2
d913 2
a914 1
			return getTypedElementQvtType(trace.getFeature());
d916 2
a917 5
			if (!BuiltinMetaModel.isParameterizedType(targetType)) {
				throw new MigrationException(Type.UNSUPPORTED_EXPRESSION, "Implicit collect is not supported for simple types: " + targetType.toString() + "." + featureCall.getName().getValue());
			}
			convertImplicitCollectProduct(targetType);
			return BuiltinMetaModelExt.getListType(BuiltinMetaModel.getInnerType(targetType));
a937 95
	
	private void pushContextWithVariable(String varName, EClassifier varType) {
		qvtContexts.push(qvtContexts.peek().cloneWithVariable(varName, varType));
	}
	
	private EClassifier getEnvVariableType(String varName) {
		return qvtContexts.peek().getVariableType(varName);
	}
	
	/**
	 * This class was intended to store QVT env. variable types during
	 * expression migration. It is necessary for more intelligent QVT
	 * (collections) types transformation during expression migration.
	 * 
	 * Only following methods can be used by clients:
	 * {@@link ExecutionContext#cloneWithVariable(java.util.Collection)}
	 * {@@link ExecutionContext#cloneWithVariable(org.eclipse.gmf.internal.xpand.expression.Variable...)}
	 * {@@link ExecutionContext#cloneContext()}
	 */
	private class QvtExecutionContext extends ExecutionContextImpl {

		public QvtExecutionContext() {
			super((ResourceManager) null);
		}

		private QvtExecutionContext(QvtExecutionContext original) {
			super(original);
		}

		public QvtExecutionContext cloneWithVariable(String name, EClassifier type) {
			return (QvtExecutionContext) super.cloneWithVariable(new Variable(name, type));
		}

		public EClassifier getVariableType(String name) {
			Variable var = getVariable(name);
			if (var != null) {
				return (EClassifier) var.getValue();
			}
			return null;
		}

		@@Override
		public QvtExecutionContext cloneContext() {
			return new QvtExecutionContext(this);
		}

		@@Override
		public EClassifier[] findTypesForPrefix(String prefix) {
			throw new UnsupportedOperationException();
		}

		@@Override
		public void setContextClassLoader(ClassLoadContext classLoadContext) {
			throw new UnsupportedOperationException();
		}

		@@Override
		public Class<?> loadClass(String value) {
			throw new UnsupportedOperationException();
		}

		@@Override
		public EClassifier getTypeForName(String name) {
			throw new UnsupportedOperationException();
		}

		@@Override
		public ExecutionContext cloneWithResource(ResourceMarker ns) {
			throw new UnsupportedOperationException();
		}

		@@Override
		public ResourceMarker currentResource() {
			throw new UnsupportedOperationException();
		}

		@@Override
		public Set<Extension> getAllExtensions() {
			throw new UnsupportedOperationException();
		}

		@@Override
		public Extension getExtension(String functionName, EClassifier[] parameterTypes) {
			throw new UnsupportedOperationException();
		}

		@@Override
		public EvaluationListener getEvaluationListener() {
			throw new UnsupportedOperationException();
		}

		@@Override
		public void setEvaluationListener(EvaluationListener listener) {
			throw new UnsupportedOperationException();
		}
d939 3
@


1.1.2.5
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - EnumLiteral .literal and .value features removed during migration
@
text
@a22 1
import org.eclipse.emf.ecore.EEnum;
a24 1
import org.eclipse.emf.ecore.EStructuralFeature;
a181 3
//		else if (EcorePackage.eINSTANCE.getEString() == expectedType && actualType != EcorePackage.eINSTANCE.getEString()) {
//			write(".repr()");
//		}
a1082 1
		EClassifier targetType = trace.getTargetType();
a1086 4
			// Skipping EnumLiteral.value/EnumLiteral.literal features
			if (targetType instanceof EEnum && trace.getType() == FeatureCallTrace.Type.FEATURE_REF && skippEnumLiteralFeature(trace.getFeature())) {
				return targetType;
			}
a1087 5
		} else {
			if (targetType instanceof EEnum && trace.getType() == FeatureCallTrace.Type.FEATURE_REF && skippEnumLiteralFeature(trace.getFeature())) {
				write(Environment.SELF_VARIABLE_NAME);
				return targetType;
			}
d1090 1
a1108 4
	private boolean skippEnumLiteralFeature(EStructuralFeature feature) {
		return EcorePackage.eINSTANCE.getEEnumLiteral_Value() == feature || EcorePackage.eINSTANCE.getEEnumLiteral_Literal() == feature;
	}

@


1.1.2.6
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - Native library migration code added.
@
text
@d67 1
a67 1
	static final String LF = System.getProperty("line.separator");
d562 3
a564 1
			write(modelManager.getName(operationCall, trace));
d602 1
a602 1
			write(modelManager.getName(operationCall, trace));
d623 1
a623 1
			write(modelManager.getName(operationCall, trace));
@


1.1.2.7
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - Project-wide migrate action handling native extensions was added.
@
text
@a63 2

	public static final String LF = System.getProperty("line.separator");
d67 2
@


1.1.2.8
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - Migrating to OCL-based queries (instead of QVT-based)
@
text
@a277 7
				sb.append(nextChar);
			} else if (nextChar == '\n') {
				sb.append("\\n");
			} else if (nextChar == '\r') {
				sb.append("\\r");
			} else {
				sb.append(nextChar);
d279 1
a320 2
		write(" : ");
		int typePosition = getCurrentPosition();
d322 1
a322 3
		EClassifier varType = migrateExpression(letExpression.getVarExpression());
		write(typeManager.getQvtFQName(varType), typePosition);
		pushContextWithVariable(varName, varType);
d423 3
a425 1
		if (BuiltinMetaModelExt.isAbstractCollectionType(collectionType)) {
a426 2
		} else {
			internalMigrateTypeSelect(typeName, collectionType, placeholder, getCurrentPosition());
d430 1
a430 1
	private void internalMigrateTypeSelect(String typeName, EClassifier originalCollectionType, int expressionStartPosition, int expressionEndPosition) {
d434 4
a437 6
		StringBuilder sb = new StringBuilder();
//		sb.append(")[");
//		sb.append(typeName);
//		sb.append("]");
		sb.append(")");
		sb.append(ts(typeName, originalCollectionType));
a441 24
	
	private StringBuilder ts(String typeName, EClassifier originalCollectionType) {
		String it = variableDispatcher.getNextIteratorName();
		StringBuilder sb = new StringBuilder();
		sb.append("->select(");
		sb.append(it);
		sb.append(" | ");
		sb.append(it);
		sb.append(".oclIsKindOf(");
		sb.append(typeName);
		sb.append("))->collect(");
		sb.append(it);
		sb.append(" | ");
		sb.append(it);
		sb.append(".oclAsType(");
		sb.append(typeName);
		sb.append("))");
		if (BuiltinMetaModelExt.isSetType(originalCollectionType)) {
			sb.append("->asSet()");
		} else if (BuiltinMetaModelExt.isOrderedSetType(originalCollectionType)) {
			sb.append("->asOrderedSet()");
		}
		return sb;
	}
d766 1
a766 1
				internalMigrateTypeSelect(typeManager.getQvtFQName(commonSuperType), targetType, expressionStartPosition, operationStartPosition);
d777 1
a777 1
				internalMigrateTypeSelect(typeManager.getQvtFQName(commonSuperType), targetType, expressionStartPosition, operationStartPosition);
d787 1
a787 1
				internalMigrateTypeSelect(typeManager.getQvtFQName(commonSuperType), targetType, expressionStartPosition, operationStartPosition);
d806 3
a808 4
//				write("[");
//				write(typeManager.getQvtFQName(elementType));
//				write("]");
				write(ts(typeManager.getQvtFQName(elementType), elementType));
d834 1
a837 2
			write(" : ");
			int typePosition = getCurrentPosition();
d839 1
a839 4
			targetType = internalMigrateOperationCallTarget(operationCall);
			assert BuiltinMetaModelExt.isListType(targetType) || BuiltinMetaModelExt.isOrderedSetType(targetType);
			boolean isOrderedSet = BuiltinMetaModelExt.isOrderedSetType(targetType);
			write((isOrderedSet ? "OrderedSet(" : "Sequence(") + typeManager.getQvtFQName(BuiltinMetaModel.getInnerType(targetType)) + ")", typePosition);
d851 3
a853 4
//				write("[");
//				write(typeManager.getQvtFQName(elementType));
//				write("]");
				ts(typeManager.getQvtFQName(elementType), targetType);
d866 1
a866 1
			return targetType;			
d868 1
a871 2
			write(" : ");
			int typePosition = getCurrentPosition();
d873 1
a873 4
			targetType = internalMigrateOperationCallTarget(operationCall);
			assert BuiltinMetaModelExt.isListType(targetType) || BuiltinMetaModelExt.isOrderedSetType(targetType);
			boolean isOrderedSet = BuiltinMetaModelExt.isOrderedSetType(targetType);
			write((isOrderedSet ? "OrderedSet(" : "Sequence(") + typeManager.getQvtFQName(BuiltinMetaModel.getInnerType(targetType)) + ")", typePosition);
d885 3
a887 4
//				write("[");
//				write(typeManager.getQvtFQName(elementType));
//				write("]");
				ts(typeManager.getQvtFQName(elementType), targetType);
d957 1
a957 1
			internalMigrateTypeSelect(typeManager.getQvtFQName(requestedElementType), collectionType, expressionStartPosition, expressionEndPosition);
@


1.1.2.9
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
- Additional String operation necessary for "pureOCL" query language
@
text
@d92 1
d398 1
a398 1
		EClassifier migratedExpressionType = migrateExpression(cast.getTarget());
a402 4
		if (BuiltinMetaModel.isCollectionType(type)) {
			// This operation is not supported now.
			return migratedExpressionType;
		}
d624 1
a624 7
			List<EClassifier> parameterTypes = internalMigrateOperationCallParameters(operationCall, trace.getParamTypes());
			if (BuiltinMetaModel.EString_Plus_EJavaObject == eOperation) {
				assert parameterTypes.size() == 1;
				if (parameterTypes.get(0) != EcorePackage.eINSTANCE.getEString()) {
					write(".repr()");
				}
			}
d697 1
a697 1
				|| BuiltinMetaModel.Int_GreatOrEqual == eOperation) {
d709 6
a714 1
		if (BuiltinMetaModel.Boolean_NE == eOperation || BuiltinMetaModel.Int_Unary_Minus == eOperation || BuiltinMetaModel.Double_Unary_Minus == eOperation) {
d1139 2
a1140 7
			if (targetType instanceof EEnum && trace.getType() == FeatureCallTrace.Type.FEATURE_REF) {
				if (skipEnumLiteralFeature(trace.getFeature())) {
					return targetType;
				} else if (addEnumLiteralStringRepresentation(trace.getFeature())) {
					write(".repr()");
					return EcorePackage.eINSTANCE.getEString();
				}
d1144 3
a1146 9
			if (targetType instanceof EEnum && trace.getType() == FeatureCallTrace.Type.FEATURE_REF) {
				if (skipEnumLiteralFeature(trace.getFeature())) {
					write(Environment.SELF_VARIABLE_NAME);
					return targetType;
				} else if (addEnumLiteralStringRepresentation(trace.getFeature())) {
					write(Environment.SELF_VARIABLE_NAME);
					write(".repr()");
					return EcorePackage.eINSTANCE.getEString();
				}
d1168 1
a1168 5
	private boolean addEnumLiteralStringRepresentation(EStructuralFeature feature) {
		return EcorePackage.eINSTANCE.getENamedElement_Name() == feature;
	}
	
	private boolean skipEnumLiteralFeature(EStructuralFeature feature) {
@


