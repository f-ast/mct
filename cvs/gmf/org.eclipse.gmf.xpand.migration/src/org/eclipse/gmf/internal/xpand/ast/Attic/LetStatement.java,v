head	1.1;
access;
symbols
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2008.07.29.15.57.59;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	33cb488f3dd14567;

1.1.2.1
date	2008.07.29.15.57.59;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	33cb488f3dd14567;

1.1.2.2
date	2008.08.28.15.51.00;	author ashatalin;	state Exp;
branches;
next	1.1.2.3;
commitid	35c448b6c95d4567;

1.1.2.3
date	2008.09.26.18.15.49;	author ashatalin;	state Exp;
branches;
next	;
commitid	2780148dd26d24567;


desc
@@


1.1
log
@file LetStatement.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@Xtend-based implementation of XPand extensions was separated into .migration plugin.
@
text
@a0 76
/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.ast;

import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.Variable;
import org.eclipse.gmf.internal.xpand.expression.ast.Expression;
import org.eclipse.gmf.internal.xpand.expression.ast.Identifier;
import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;

/**
 * @@author Sven Efftinge
 */
public class LetStatement extends Statement {

	private final Identifier varName;

	private final Expression varValue;

	private final Statement[] body;

	public LetStatement(final int start, final int end, final int line, final Identifier varName, final Expression value, final Statement[] body) {
		super(start, end, line);
		this.varName = varName;
		this.varValue = value;
		this.body = body;
	}

	public Statement[] getBody() {
		return body;
	}

	public Identifier getVarName() {
		return varName;
	}

	public Expression getVarValue() {
		return varValue;
	}

	public void analyze(XpandExecutionContext ctx, final Set<AnalysationIssue> issues) {
		EClassifier t = getVarValue().analyze(ctx, issues);
		if (t == null) {
			t = EcorePackage.eINSTANCE.getEObject();
		}
		ctx = ctx.cloneWithVariable(new Variable(getVarName().getValue(), t));
		for (Statement statement : getBody()) {
			statement.analyze(ctx, issues);
		}
	}

	@@Override
	public void evaluateInternal(XpandExecutionContext ctx) {
		ctx = ctx.cloneWithVariable(new Variable(getVarName().getValue(), getVarValue().evaluate(ctx)));
		for (Statement statement : getBody()) {
			statement.evaluate(ctx);
		}
	}

}
@


1.1.2.2
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 First step toward .xpt migration.
@
text
@d38 2
a39 2
	public LetStatement(final int start, final int end, final int line, final int startOffset, final int endOffset, final Identifier varName, final Expression value, final Statement[] body) {
		super(start, end, line, startOffset, endOffset);
@


1.1.2.3
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - more gentle collection operations migration implemented
@
text
@a24 1
import org.eclipse.gmf.internal.xpand.migration.ExpressionAnalyzeTrace;
a61 1
		createAnalyzeTrace(ctx, new ExpressionAnalyzeTrace(t));
@


