head	1.1;
access;
symbols
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2008.07.29.15.57.43;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	33cb488f3dd14567;

1.1.2.1
date	2008.07.29.15.57.43;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	33cb488f3dd14567;

1.1.2.2
date	2008.08.05.10.42.10;	author ashatalin;	state Exp;
branches;
next	1.1.2.3;
commitid	41ee48982e7f4567;

1.1.2.3
date	2008.08.06.11.05.53;	author ashatalin;	state Exp;
branches;
next	1.1.2.4;
commitid	6b3c4899858e4567;

1.1.2.4
date	2008.08.19.15.18.37;	author ashatalin;	state Exp;
branches;
next	1.1.2.5;
commitid	32fd48aae4494567;

1.1.2.5
date	2008.08.28.15.51.00;	author ashatalin;	state Exp;
branches;
next	1.1.2.6;
commitid	35c448b6c95d4567;

1.1.2.6
date	2008.09.26.18.15.48;	author ashatalin;	state Exp;
branches;
next	;
commitid	2780148dd26d24567;


desc
@@


1.1
log
@file CollectionExpression.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@Xtend-based implementation of XPand extensions was separated into .migration plugin.
@
text
@a0 210
/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.expression.ast;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmf.internal.xpand.BuiltinMetaModel;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.EvaluationException;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.expression.SyntaxConstants;
import org.eclipse.gmf.internal.xpand.expression.Variable;

/**
 * @@author Sven Efftinge
 * @@author Arno Haase
 */
public class CollectionExpression extends FeatureCall {

	private Expression closure;

	private String eleName;

	public CollectionExpression(final int end, final Identifier opNAme, final String eleName, final Expression closure, final Expression target) {
		super(opNAme.getStart(), end, opNAme.getLine(), opNAme, target);
		this.eleName = eleName;
		this.closure = closure;
	}

	@@Override
	public String toString() {
		return super.toString() + "(" + (eleName != null ? eleName + "|" : "") + closure + ")";
	}

	@@Override
	public Object evaluateInternal(final ExecutionContext ctx) {
		Object targetObj = null;
		if (getTarget() == null) {
			final Variable v = ctx.getVariable(ExecutionContext.IMPLICIT_VARIABLE);
			if (v != null) {
				targetObj = v.getValue();
			}
		} else {
			targetObj = getTarget().evaluate(ctx);
		}
		if (targetObj == null) {
			return null;
		}
		if (!(targetObj instanceof Collection)) {
			throw new EvaluationException("Couldn't call '" + this.toString() + "' on an object of java type " + targetObj.getClass().getName(), this);
		}

		if (getName().getValue().equals(SyntaxConstants.COLLECT)) {
			return executeCollect((Collection) targetObj, ctx);
		} else if (getName().getValue().equals(SyntaxConstants.SELECT)) {
			return executeSelect((Collection) targetObj, ctx);
		} else if (getName().getValue().equals(SyntaxConstants.REJECT)) {
			return executeReject((Collection) targetObj, ctx);
		} else if (getName().getValue().equals(SyntaxConstants.EXISTS)) {
			return executeExists((Collection) targetObj, ctx);
		} else if (getName().getValue().equals(SyntaxConstants.NOT_EXISTS)) {
			return executeNotExists((Collection) targetObj, ctx);
		} else if (getName().getValue().equals(SyntaxConstants.FOR_ALL)) {
			return executeForAll((Collection) targetObj, ctx);
		} else {
			throw new EvaluationException("Unkown collection operation : " + getName().getValue(), this);
		}

	}

	private Object executeForAll(final Collection collection, ExecutionContext ctx) {
		for (final Iterator iter = collection.iterator(); iter.hasNext();) {
			ctx = ctx.cloneWithVariable(new Variable(getElementName(), iter.next()));
			final Object result = closure.evaluate(ctx);
			if (!(result instanceof Boolean) || !((Boolean) result).booleanValue()) {
				return Boolean.FALSE;
			}
		}
		return Boolean.TRUE;
	}

	private Object executeExists(final Collection collection, ExecutionContext ctx) {
		for (final Iterator iter = collection.iterator(); iter.hasNext();) {
			ctx = ctx.cloneWithVariable(new Variable(getElementName(), iter.next()));
			final Object result = closure.evaluate(ctx);
			if ((result instanceof Boolean) && ((Boolean) result).booleanValue()) {
				return Boolean.TRUE;
			}
		}
		return Boolean.FALSE;
	}

	private Object executeNotExists(final Collection collection, ExecutionContext ctx) {
		for (final Iterator iter = collection.iterator(); iter.hasNext();) {
			ctx = ctx.cloneWithVariable(new Variable(getElementName(), iter.next()));
			final Object result = closure.evaluate(ctx);
			if ((result instanceof Boolean) && ((Boolean) result).booleanValue()) {
				return Boolean.FALSE;
			}
		}
		return Boolean.TRUE;
	}

	private Object executeReject(final Collection<?> collection, ExecutionContext ctx) {
		final Collection resultCol = new ArrayList<Object>(collection);
		for (Object ele : collection) {
			ctx = ctx.cloneWithVariable(new Variable(getElementName(), ele));
			final Object result = closure.evaluate(ctx);
			if ((result instanceof Boolean) && ((Boolean) result).booleanValue()) {
				resultCol.remove(ele);
			}
		}
		return resultCol;
	}

	private Object executeSelect(final Collection collection, ExecutionContext ctx) {
		final Collection<Object> resultCol = new ArrayList<Object>();
		for (final Iterator iter = collection.iterator(); iter.hasNext();) {
			final Object ele = iter.next();
			ctx = ctx.cloneWithVariable(new Variable(getElementName(), ele));
			final Object result = closure.evaluate(ctx);
			if ((result instanceof Boolean) && ((Boolean) result).booleanValue()) {
				resultCol.add(ele);
			}
		}
		return resultCol;
	}

	private Object executeCollect(final Collection collection, ExecutionContext ctx) {
		final Collection<Object> resultCol = new ArrayList<Object>();
		for (final Iterator iter = collection.iterator(); iter.hasNext();) {
			final Object ele = iter.next();
			ctx = ctx.cloneWithVariable(new Variable(getElementName(), ele));
			resultCol.add(closure.evaluate(ctx));
		}
		return resultCol;
	}

	@@Override
	public EClassifier analyze(ExecutionContext ctx, final Set<AnalysationIssue> issues) {
		EClassifier targetType = null;
		if (getTarget() == null) {
			final Variable v = ctx.getVariable(ExecutionContext.IMPLICIT_VARIABLE);
			if (v != null) {
				targetType = (EClassifier) v.getValue();
			}
		} else {
			targetType = getTarget().analyze(ctx, issues);
		}
		if (targetType == null) {
			return null;
		}

		if (!(BuiltinMetaModel.isParameterizedType(targetType))) {
			issues.add(new AnalysationIssue(AnalysationIssue.Type.INCOMPATIBLE_TYPES, "Collection type expected! was : " + targetType, getTarget()));
			return null;
		}

		final EClassifier innerEClassifier = BuiltinMetaModel.getInnerType(targetType);
		EClassifier result = null;
		ctx = ctx.cloneWithVariable(new Variable(getElementName(), innerEClassifier));
		final EClassifier closureEClassifier = closure.analyze(ctx, issues);
		if (getName().getValue().equals(SyntaxConstants.COLLECT)) {
			if (targetType.getName().startsWith(BuiltinMetaModel.SET)) {
				return BuiltinMetaModel.getSetType(closureEClassifier);
			} else if (targetType.getName().startsWith(BuiltinMetaModel.LIST)) {
				return BuiltinMetaModel.getListType(closureEClassifier);
			} else {
				return BuiltinMetaModel.getCollectionType(closureEClassifier);
			}
		} else if (getName().getValue().equals(SyntaxConstants.SELECT) || getName().getValue().equals(SyntaxConstants.REJECT)) {
			return targetType;
		} else if (getName().getValue().equals(SyntaxConstants.TYPE_SELECT)) {
			if (closureEClassifier == null) {
				return null;
			}
			return BuiltinMetaModel.getListType(closureEClassifier);
		} else if (getName().getValue().equals(SyntaxConstants.EXISTS) || getName().getValue().equals(SyntaxConstants.NOT_EXISTS) || getName().getValue().equals(SyntaxConstants.FOR_ALL)) {
			if (!BuiltinMetaModel.isAssignableFrom(EcorePackage.eINSTANCE.getEBoolean(), closureEClassifier)) {
				issues.add(new AnalysationIssue(AnalysationIssue.Type.INCOMPATIBLE_TYPES, "Boolean type expected! was : " + closureEClassifier, closure));
			}
			result = EcorePackage.eINSTANCE.getEBoolean();
		} else {
			issues.add(new AnalysationIssue(AnalysationIssue.Type.INTERNAL_ERROR, "Unknown operation : " + getName().getValue(), this));
		}
		return result;
	}

	private String getElementName() {
		return eleName != null ? eleName : SyntaxConstants.DEFAULT_ELE_NAME;
	}

}
@


1.1.2.2
log
@Supporting:
- CollectionExpression
- FeatureCall
- OperationCall
- TypeSelect
@
text
@a180 1
			// TODO: incorrect code - .endsWith() should be used instead.
d206 1
a206 1
	public String getElementName() {
a208 4
	
	public Expression getClosure() {
		return closure;
	}
@


1.1.2.3
log
@Copyrights updated.
@
text
@d4 1
a4 1
 * Copyright (c) 2005-2008 Sven Efftinge and others.
a11 1
 *     Alexander Shatalin (Borland)
@


1.1.2.4
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 Transforming Collection type on CollectionExpression migration.
@
text
@a30 1
import org.eclipse.gmf.internal.xpand.migration.CollectionExpressionTrace;
d169 1
a169 1
			return createAnalyzeTrace(ctx, new CollectionExpressionTrace(null, CollectionExpressionTrace.Type.UNDESOLVED_TARGET_TYPE));
d182 1
a182 1
			// TODO [AS]: incorrect code - .endsWith() should be used instead.
d184 1
a184 1
				return createAnalyzeTrace(ctx, new CollectionExpressionTrace(BuiltinMetaModel.getSetType(closureEClassifier), CollectionExpressionTrace.Type.COLLECT_REF));
d186 1
a186 1
				return createAnalyzeTrace(ctx, new CollectionExpressionTrace(BuiltinMetaModel.getListType(closureEClassifier), CollectionExpressionTrace.Type.COLLECT_REF));
d188 1
a188 1
				return createAnalyzeTrace(ctx, new CollectionExpressionTrace(BuiltinMetaModel.getCollectionType(closureEClassifier), CollectionExpressionTrace.Type.COLLECT_REF));
d191 1
a191 1
			return createAnalyzeTrace(ctx, new CollectionExpressionTrace(targetType, CollectionExpressionTrace.getType(this)));
a192 1
			// [AS]: Should not be here - separate TypeSelectExpression present in AST.
d201 1
a201 1
			createAnalyzeTrace(ctx, new CollectionExpressionTrace(result = EcorePackage.eINSTANCE.getEBoolean(), CollectionExpressionTrace.getType(this)));
@


1.1.2.5
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 First step toward .xpt migration.
@
text
@d43 2
a44 2
	public CollectionExpression(final int end, final int endOffset, final Identifier opNAme, final String eleName, final Expression closure, final Expression target) {
		super(opNAme.getStart(), end, opNAme.getLine(), opNAme.getStartOffset(), endOffset, opNAme, target);
@


1.1.2.6
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - more gentle collection operations migration implemented
@
text
@d183 2
a184 1
			if (targetType.getName().endsWith(BuiltinMetaModel.SET)) {
d186 1
a186 1
			} else if (targetType.getName().endsWith(BuiltinMetaModel.LIST)) {
@


