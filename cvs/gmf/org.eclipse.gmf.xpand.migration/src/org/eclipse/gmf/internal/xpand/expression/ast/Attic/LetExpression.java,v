head	1.1;
access;
symbols
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2008.07.29.15.57.42;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	33cb488f3dd14567;

1.1.2.1
date	2008.07.29.15.57.42;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	33cb488f3dd14567;

1.1.2.2
date	2008.08.05.19.27.03;	author ashatalin;	state Exp;
branches;
next	1.1.2.3;
commitid	2d344898a9834567;

1.1.2.3
date	2008.08.06.11.05.53;	author ashatalin;	state Exp;
branches;
next	1.1.2.4;
commitid	6b3c4899858e4567;

1.1.2.4
date	2008.08.28.15.51.00;	author ashatalin;	state Exp;
branches;
next	;
commitid	35c448b6c95d4567;


desc
@@


1.1
log
@file LetExpression.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@Xtend-based implementation of XPand extensions was separated into .migration plugin.
@
text
@a0 64
/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.expression.ast;

import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.expression.Variable;

/**
 * @@author Sven Efftinge
 * @@author Arno Haase
 */
public class LetExpression extends Expression {

    private Expression varExpression;

    private Expression targetExpression;

    private Identifier varName;

    public LetExpression(final int start, final int end, final int line, final Identifier varName,
            final Expression varExpression, final Expression target) {
        super(start, end, line);
        this.varName = varName;
        this.varExpression = varExpression;
        targetExpression = target;
    }

    @@Override
    public Object evaluateInternal(ExecutionContext ctx) {
        final Object o = varExpression.evaluate(ctx);
        ctx = ctx.cloneWithVariable(new Variable(varName.getValue(), o));
        return targetExpression.evaluate(ctx);
    }

    public EClassifier analyze(ExecutionContext ctx, final Set<AnalysationIssue> issues) {
        final EClassifier t = varExpression.analyze(ctx, issues);
        if (t == null) {
			return null;
		}
        ctx = ctx.cloneWithVariable(new Variable(varName.getValue(), t));
        return targetExpression.analyze(ctx, issues);
    }

    @@Override
    public String toString() {
        return "let " + varName + "=" + varExpression + " : " + targetExpression;
    }
}
@


1.1.2.2
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
@
text
@a63 12
    
    public Identifier getVarName() {
    	return varName;
    }
    
    public Expression getVarExpression() {
    	return varExpression;
    }
    
    public Expression getTargetExpression() {
    	return targetExpression;
    }
@


1.1.2.3
log
@Copyrights updated.
@
text
@d4 1
a4 1
 * Copyright (c) 2005-2008 Sven Efftinge and others.
a11 1
 *     Alexander Shatalin (Borland)
@


1.1.2.4
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 First step toward .xpt migration.
@
text
@d37 1
a37 1
    public LetExpression(final int start, final int end, final int line, final int startOffset, final int endOffset, final Identifier varName,
d39 1
a39 1
        super(start, end, line, startOffset, endOffset);
@


