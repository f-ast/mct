head	1.1;
access;
symbols
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2008.07.29.15.58.00;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	33cb488f3dd14567;

1.1.2.1
date	2008.07.29.15.58.00;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	33cb488f3dd14567;

1.1.2.2
date	2008.08.01.09.16.53;	author ashatalin;	state Exp;
branches;
next	1.1.2.3;
commitid	6e264892d4804567;

1.1.2.3
date	2008.08.06.11.05.54;	author ashatalin;	state Exp;
branches;
next	;
commitid	6b3c4899858e4567;


desc
@@


1.1
log
@file StreamConverter.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@Xtend-based implementation of XPand extensions was separated into .migration plugin.
@
text
@a0 82
/*******************************************************************************
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package org.eclipse.gmf.internal.xpand.util;

import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.gmf.xpand.migration.Activator;

/**
 * @@author artem
 */
public class StreamConverter {

	/**
	 * If this method completes successfully, whole input will be consumed, however, it won't be
	 * 'closed', so it's up to invoker to close the input
	 * @@throws IOException
	 */
	public char[] toCharArray(Reader input) throws IOException {
		return toCharWriter(input).toCharArray();
	}

	/**
	 * @@throws CoreException
	 * @@throws UnsupportedEncodingException
	 * @@throws IOException
	 */
	public char[] toCharArray(IFile file) throws CoreException, UnsupportedEncodingException, IOException {
		Reader r = null;
		try {
			r = toContentsReader(file);
			return toCharArray(r);
		} finally {
			if (r != null) {
				try {
					r.close();
				} catch (IOException ex) {
					Activator.logError(ex);
				}
			}
		}
	}

	/**
	 * It's caller's responsibility to close reader once it's no longer needed
	 * @@throws CoreException
	 * @@throws UnsupportedEncodingException
	 */
	public Reader toContentsReader(IFile file) throws CoreException, UnsupportedEncodingException {
		InputStream is = file.getContents();
		return new InputStreamReader(is, Charset.forName(file.getCharset(true)));
	}

	/**
	 * @@param input it's invoker's responsibility to close input
	 * @@return writer full of data taken from input
	 * @@throws IOException
	 */
	public CharArrayWriter toCharWriter(Reader input) throws IOException {
		CharArrayWriter buffer = new CharArrayWriter(4096);
		int r;
		char[] cbuf = new char[4096];
		while ((r = input.read(cbuf)) != -1) {
			buffer.write(cbuf, 0, r);
		}
		return buffer;
	}
}
@


1.1.2.2
log
@Migration implementation + unit-tests for basic extend elements.
@
text
@d21 1
a21 1
import org.eclipse.gmf.internal.xpand.migration.Activator;
@


1.1.2.3
log
@Copyrights updated.
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2008 Borland Software Corporation
@


