head	1.1;
access;
symbols
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2008.07.29.15.57.42;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	33cb488f3dd14567;

1.1.2.1
date	2008.07.29.15.57.42;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	33cb488f3dd14567;

1.1.2.2
date	2008.08.28.15.51.00;	author ashatalin;	state Exp;
branches;
next	1.1.2.3;
commitid	35c448b6c95d4567;

1.1.2.3
date	2008.09.26.18.15.48;	author ashatalin;	state Exp;
branches;
next	;
commitid	2780148dd26d24567;


desc
@@


1.1
log
@file SyntaxElement.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@Xtend-based implementation of XPand extensions was separated into .migration plugin.
@
text
@a0 51
/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.expression.ast;

public abstract class SyntaxElement {
    protected final int start;

    protected final int end;

    protected final int line;

    public SyntaxElement(final int start, final int end, final int line) {
        this.start = start;
        this.end = end;
        this.line = line;
    }

    public int getLine() {
        return line;
    }

    public int getEnd() {
        return end;
    }

    public int getStart() {
        return start;
    }

    private String fileName;

    public void setFileName(final String fileName) {
        this.fileName = fileName;
    }

    public String getFileName() {
        return fileName;
    }
}
@


1.1.2.2
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 First step toward .xpt migration.
@
text
@d24 1
a24 5
	protected int startOffset;

	protected int endOffset;

    public SyntaxElement(final int start, final int end, final int line, final int startOffset, final int endOffset) {
a27 2
        this.startOffset = startOffset;
        this.endOffset = endOffset;
a40 8
    
    public int getStartOffset() {
    	return startOffset;
    }
    
    public int getEndOffset() {
    	return endOffset;
    }
@


1.1.2.3
log
@[243157] - Develop automatic migration tool creating QVTO/OCL constructions having Xtend as an input
 - more gentle collection operations migration implemented
@
text
@a16 5
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.migration.ExpressionAnalyzeTrace;
import org.eclipse.gmf.internal.xpand.migration.MigrationExecutionContext;

d18 1
d20 1
a20 3
	protected final int start;

	protected final int end;
d22 1
a22 1
	protected final int line;
d28 37
a64 52
	public SyntaxElement(final int start, final int end, final int line, final int startOffset, final int endOffset) {
		this.start = start;
		this.end = end;
		this.line = line;
		this.startOffset = startOffset;
		this.endOffset = endOffset;
	}

	public int getLine() {
		return line;
	}

	public int getEnd() {
		return end;
	}

	public int getStart() {
		return start;
	}

	public int getStartOffset() {
		return startOffset;
	}
	
	public void setStartOffset(int startOffset) {
		this.startOffset = startOffset;
	}

	public int getEndOffset() {
		return endOffset;
	}
	
	public void setEndOffset(int endOffset) {
		this.endOffset = endOffset;
	}

	private String fileName;

	public void setFileName(final String fileName) {
		this.fileName = fileName;
	}

	public String getFileName() {
		return fileName;
	}

	protected EClassifier createAnalyzeTrace(ExecutionContext ctx, ExpressionAnalyzeTrace trace) {
		if (ctx instanceof MigrationExecutionContext) {
			((MigrationExecutionContext) ctx).getTraces().put(this, trace);
		}
		return trace.getResultType();
	}
@


