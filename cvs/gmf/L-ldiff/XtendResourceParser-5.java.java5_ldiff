7,12d6
< import java.util.ArrayList;
< 
< import lpg.lpgjavaruntime.LexStream;
< 
< import lpg.lpgjavaruntime.ParseErrorCodes;
< 
26,26d19
<         final ArrayList < ParserException.ErrorLocationInfo > errors = new ArrayList < ParserException.ErrorLocationInfo > ();
28a22,22
>             scanner = new XtendLexer (buffer, name);
29,39d21
<             scanner = new XtendLexer (buffer, name) {
< 
<                 @Override
<                 public void reportError (int left_loc, int right_loc) {
<                     errors.add (createError (this, left_loc, right_loc));
<                     super.reportError (left_loc, right_loc);
<                 }
< 
<             }
< 
<             ;
43a27,28
>             ParserException.ErrorLocationInfo [] errors = scanner.getErrors ();
>             if (errors.length == 0) {
44,44d26
<             if (errors.isEmpty ()) {
53a38,40
>         ParserException.ErrorLocationInfo [] errors = scanner.getErrors ();
>         assert errors.length > 0 : "otherwise, no reason not to get template";
>         throw new ParserException (errors);
54,66d37
<         return null;
<     }
< 
<     public static ParserException.ErrorLocationInfo createError (LexStream lexStream, int left_loc, int right_loc) {
<         int errorCode = (right_loc >= lexStream.getStreamLength () ? ParseErrorCodes.EOF_CODE : left_loc == right_loc ? ParseErrorCodes.LEX_ERROR_CODE : ParseErrorCodes.INVALID_TOKEN_CODE);
<         int end_loc = (left_loc == right_loc ? right_loc : right_loc - 1);
<         String tokenText = (errorCode == ParseErrorCodes.EOF_CODE ? "End-of-file " : errorCode == ParseErrorCodes.INVALID_TOKEN_CODE ? "\"" + new String (lexStream.getInputChars (), left_loc, right_loc - left_loc) + "\" " : "\"" + lexStream.getCharValue (left_loc) + "\" ");
<         final int startLine = lexStream.getLineNumberOfCharAt (left_loc);
<         final int startColumn = lexStream.getColumnOfCharAt (left_loc);
<         final int endLine = lexStream.getLineNumberOfCharAt (end_loc);
<         final int endColumn = lexStream.getColumnOfCharAt (end_loc);
<         final String message = tokenText + ParseErrorCodes.errorMsgText [errorCode];
<         return new ParserException.ErrorLocationInfo (message, startLine, startColumn, endLine, endColumn);
