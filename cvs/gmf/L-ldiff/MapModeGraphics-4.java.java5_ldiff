3,6d2
< import java.util.ArrayList;
< 
< import java.util.List;
< 
11,22d8
< import org.eclipse.draw2d.geometry.PointList;
< 
< import org.eclipse.draw2d.geometry.Rectangle;
< 
< import org.eclipse.jface.util.Assert;
< 
< import org.eclipse.swt.graphics.Color;
< 
< import org.eclipse.swt.graphics.Font;
< 
< import org.eclipse.swt.graphics.FontMetrics;
< 
23,23c9,9
< import org.eclipse.swt.graphics.Image;
---
> import org.eclipse.swt.graphics.Image;
24,24d9
< 
27,53d8
< public class MapModeGraphics extends Graphics {
<     protected static class State {
<         private double appliedX;
<         private double appliedY;
< 
<         protected State () {
<         }
< 
<         protected State (double x, double y) {
<             this.appliedX = x;
<             this.appliedY = y;
<         }
< 
<         protected void setValues (double x, double y) {
<             this.appliedX = x;
<             this.appliedY = y;
<         }
< 
<     }
< 
<     private List stack = new ArrayList ();
<     private int stackPointer = 0;
<     private static final Rectangle TEMP = new Rectangle ();
<     private Graphics graphics;
<     private double fractionalX;
<     private double fractionalY;
<     private double mapModeScale = 1.0;
54a11,11
> public class MapModeGraphics extends ScaledGraphics {
55,56d10
<     private MapModeGraphics () {
<     }
58a14,15
>         super (g);
>         setScale (MapMode.getScale ());
59,91d13
<         Assert.isNotNull (g);
<         graphics = g;
<         mapModeScale = MapMode.getScale ();
<     }
< 
<     public void clipRect (Rectangle r) {
<         graphics.clipRect (mapClipRect (r));
<     }
< 
<     public void dispose () {
<         stack.clear ();
<     }
< 
<     public void drawArc (int x, int y, int w, int h, int offset, int sweep) {
<         Rectangle z = mapRect (x, y, w, h);
<         if (z.isEmpty () || sweep == 0) return;
< 
<         graphics.drawArc (z, offset, sweep);
<     }
< 
<     public void fillArc (int x, int y, int w, int h, int offset, int sweep) {
<         Rectangle z = mapFillRect (x, y, w, h);
<         if (z.isEmpty () || sweep == 0) return;
< 
<         graphics.fillArc (z, offset, sweep);
<     }
< 
<     public void fillGradient (int x, int y, int w, int h, boolean vertical) {
<         graphics.fillGradient (mapFillRect (x, y, w, h), vertical);
<     }
< 
<     public void drawFocus (int x, int y, int w, int h) {
<         graphics.drawFocus (mapRect (x, y, w, h));
95a20,20
>         drawImage (srcImage, 0, 0, size.width, size.height, x, y, size.width, size.height);
96,98d19
<         int targetWidth = MapMode.DPtoLP (size.width);
<         int targetHeight = MapMode.DPtoLP (size.height);
<         graphics.drawImage (srcImage, 0, 0, size.width, size.height, (int) (Math.floor ((x * mapModeScale + fractionalX))), (int) (Math.floor ((y * mapModeScale + fractionalY))), (int) (Math.floor ((targetWidth * mapModeScale + fractionalX))), (int) (Math.floor ((targetHeight * mapModeScale + fractionalY))));
101a24,24
>         super.drawImage (srcImage, sx, sy, sw, sh, tx, ty, MapMode.DPtoLP (tw), MapMode.DPtoLP (th));
102,337d23
<         tw = MapMode.DPtoLP (tw);
<         th = MapMode.DPtoLP (th);
<         Rectangle t = mapRect (tx, ty, tw, th);
<         graphics.drawImage (srcImage, sx, sy, sw, sh, t.x, t.y, t.width, t.height);
<     }
< 
<     public void drawLine (int x1, int y1, int x2, int y2) {
<         graphics.drawLine ((int) (Math.floor ((x1 * mapModeScale + fractionalX))), (int) (Math.floor ((y1 * mapModeScale + fractionalY))), (int) (Math.floor ((x2 * mapModeScale + fractionalX))), (int) (Math.floor ((y2 * mapModeScale + fractionalY))));
<     }
< 
<     public void drawOval (int x, int y, int w, int h) {
<         graphics.drawOval (mapRect (x, y, w, h));
<     }
< 
<     public void fillOval (int x, int y, int w, int h) {
<         graphics.fillOval (mapFillRect (x, y, w, h));
<     }
< 
<     public void drawPolygon (int [] points) {
<         graphics.drawPolygon (mapPointList (points));
<     }
< 
<     public void drawPolygon (PointList points) {
<         Assert.isNotNull (points);
<         graphics.drawPolygon (mapPointList (points.toIntArray ()));
<     }
< 
<     public void drawPoint (int x, int y) {
<         graphics.drawPoint ((int) Math.floor (x * mapModeScale + fractionalX), (int) Math.floor (y * mapModeScale + fractionalY));
<     }
< 
<     public void fillPolygon (int [] points) {
<         graphics.fillPolygon (mapPointList (points));
<     }
< 
<     public void fillPolygon (PointList points) {
<         Assert.isNotNull (points);
<         graphics.fillPolygon (mapPointList (points.toIntArray ()));
<     }
< 
<     public void drawPolyline (int [] points) {
<         graphics.drawPolyline (mapPointList (points));
<     }
< 
<     public void drawPolyline (PointList points) {
<         Assert.isNotNull (points);
<         graphics.drawPolyline (mapPointList (points.toIntArray ()));
<     }
< 
<     public void drawRectangle (int x, int y, int w, int h) {
<         graphics.drawRectangle (mapRect (x, y, w, h));
<     }
< 
<     public void fillRectangle (int x, int y, int w, int h) {
<         graphics.fillRectangle (mapFillRect (x, y, w, h));
<     }
< 
<     public void drawRoundRectangle (Rectangle r, int arcWidth, int arcHeight) {
<         Assert.isNotNull (r);
<         graphics.drawRoundRectangle (mapRect (r.x, r.y, r.width, r.height), (int) (arcWidth * mapModeScale), (int) (arcHeight * mapModeScale));
<     }
< 
<     public void fillRoundRectangle (Rectangle r, int arcWidth, int arcHeight) {
<         Assert.isNotNull (r);
<         graphics.fillRoundRectangle (mapFillRect (r.x, r.y, r.width, r.height), (int) (arcWidth * mapModeScale), (int) (arcHeight * mapModeScale));
<     }
< 
<     public void drawString (String s, int x, int y) {
<         Assert.isNotNull (s);
<         graphics.drawString (s, mapPoint (x, y));
<     }
< 
<     public void fillString (String s, int x, int y) {
<         Assert.isNotNull (s);
<         graphics.fillString (s, mapPoint (x, y));
<     }
< 
<     public void drawText (String s, int x, int y) {
<         Assert.isNotNull (s);
<         graphics.drawText (s, mapPoint (x, y));
<     }
< 
<     public void fillText (String s, int x, int y) {
<         Assert.isNotNull (s);
<         graphics.fillText (s, mapPoint (x, y));
<     }
< 
<     public Color getBackgroundColor () {
<         return graphics.getBackgroundColor ();
<     }
< 
<     public Rectangle getClip (Rectangle rect) {
<         graphics.getClip (rect);
<         int x = (int) (rect.x / mapModeScale);
<         int y = (int) (rect.y / mapModeScale);
<         rect.width = (int) Math.ceil (rect.right () / mapModeScale) - x;
<         rect.height = (int) Math.ceil (rect.bottom () / mapModeScale) - y;
<         rect.x = x;
<         rect.y = y;
<         return rect;
<     }
< 
<     public Font getFont () {
<         return graphics.getFont ();
<     }
< 
<     public FontMetrics getFontMetrics () {
<         return graphics.getFontMetrics ();
<     }
< 
<     public Color getForegroundColor () {
<         return graphics.getForegroundColor ();
<     }
< 
<     public int getLineStyle () {
<         return graphics.getLineStyle ();
<     }
< 
<     public int getLineWidth () {
<         return graphics.getLineWidth ();
<     }
< 
<     public boolean getXORMode () {
<         return graphics.getXORMode ();
<     }
< 
<     public void popState () {
<         graphics.popState ();
<         stackPointer --;
<         restoreLocalState ((State) stack.get (stackPointer));
<     }
< 
<     public void pushState () {
<         State s;
<         if (stack.size () > stackPointer) {
<             s = (State) stack.get (stackPointer);
<             s.setValues (fractionalX, fractionalY);
<         } else {
<             stack.add (new State (fractionalX, fractionalY));
<         }
<         stackPointer ++;
<         graphics.pushState ();
<     }
< 
<     public void restoreState () {
<         graphics.restoreState ();
<         restoreLocalState ((State) stack.get (stackPointer - 1));
<     }
< 
<     private void restoreLocalState (State state) {
<         this.fractionalX = state.appliedX;
<         this.fractionalY = state.appliedY;
<     }
< 
<     public void scale (double amount) {
<         graphics.scale (amount);
<     }
< 
<     public void setBackgroundColor (Color rgb) {
<         graphics.setBackgroundColor (rgb);
<     }
< 
<     public void setClip (Rectangle r) {
<         graphics.setClip (mapClipRect (r));
<     }
< 
<     public void setFont (Font f) {
<         graphics.setFont (f);
<     }
< 
<     public void setForegroundColor (Color rgb) {
<         graphics.setForegroundColor (rgb);
<     }
< 
<     public void setLineStyle (int style) {
<         graphics.setLineStyle (style);
<     }
< 
<     public void setLineWidth (int width) {
<         graphics.setLineWidth (width);
<     }
< 
<     public void setXORMode (boolean b) {
<         graphics.setXORMode (b);
<     }
< 
<     public void translate (int dx, int dy) {
<         double dxFloat = dx * mapModeScale + fractionalX;
<         double dyFloat = dy * mapModeScale + fractionalY;
<         fractionalX = dxFloat - Math.floor (dxFloat);
<         fractionalY = dyFloat - Math.floor (dyFloat);
<         graphics.translate ((int) Math.floor (dxFloat), (int) Math.floor (dyFloat));
<     }
< 
<     private Point mapPoint (int x, int y) {
<         return new Point (((int) (Math.floor ((x * mapModeScale) + fractionalX))), (int) (Math.floor ((y * mapModeScale) + fractionalY)));
<     }
< 
<     private int [] mapPointList (int [] points) {
<         if (points == null || points.length < 2) return points;
< 
<         int [] mapped = new int [points.length];
<         for (int i = 0;
<         (i + 1) < points.length; i += 2) {
<             mapped [i] = (int) (Math.floor ((points [i] * mapModeScale + fractionalX)));
<             mapped [i + 1] = (int) (Math.floor ((points [i + 1] * mapModeScale + fractionalY)));
<         }
<         return mapped;
<     }
< 
<     private Rectangle mapFillRect (int x, int y, int w, int h) {
<         TEMP.x = (int) (Math.floor ((x * mapModeScale + fractionalX)));
<         TEMP.y = (int) (Math.floor ((y * mapModeScale + fractionalY)));
<         TEMP.width = (int) (Math.floor (((x + w - 1) * mapModeScale + fractionalX))) - TEMP.x + 1;
<         TEMP.height = (int) (Math.floor (((y + h - 1) * mapModeScale + fractionalY))) - TEMP.y + 1;
<         return TEMP;
<     }
< 
<     private Rectangle mapClipRect (Rectangle r) {
<         TEMP.x = (int) (Math.floor (r.x * mapModeScale + fractionalX));
<         TEMP.y = (int) (Math.floor (r.y * mapModeScale + fractionalY));
<         TEMP.width = (int) (Math.ceil (((r.x + r.width) * mapModeScale + fractionalX))) - TEMP.x;
<         TEMP.height = (int) (Math.ceil (((r.y + r.height) * mapModeScale + fractionalY))) - TEMP.y;
<         return TEMP;
<     }
< 
<     final protected Rectangle mapRect (int x, int y, int w, int h) {
<         TEMP.x = (int) (Math.floor (x * mapModeScale + fractionalX));
<         TEMP.y = (int) (Math.floor (y * mapModeScale + fractionalY));
<         TEMP.width = (int) (Math.floor (((x + w) * mapModeScale + fractionalX))) - TEMP.x;
<         TEMP.height = (int) (Math.floor (((y + h) * mapModeScale + fractionalY))) - TEMP.y;
<         return TEMP;
<     }
< 
<     final protected Graphics getGraphics () {
<         return graphics;
339a27,28
>     int zoomFontHeight (int height) {
>         return height;
340,341d26
<     final protected double getMapModeScale () {
<         return mapModeScale;
343a31,32
>     Point zoomTextPoint (int x, int y) {
>         return zoomRect (x, y, 0, 0).getTopLeft ();
344,345d30
<     public void setLineDash (int [] dash) {
<         getGraphics ().setLineDash (dash);
