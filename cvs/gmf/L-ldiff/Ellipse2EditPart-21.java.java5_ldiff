21,21c21,21
< import org.eclipse.draw2d.Figure;
---
> import org.eclipse.draw2d.Ellipse;
27,28d26
< import org.eclipse.draw2d.LayoutManager;
< 
33,34d30
< import org.eclipse.draw2d.geometry.Point;
< 
41,42d36
< import org.eclipse.emf.common.notify.impl.AdapterImpl;
< 
47,48d40
< import org.eclipse.gef.EditPart;
< 
52a195,196
>         org.eclipse.gmf.gmfgraph.Ellipse modelElement = (org.eclipse.gmf.gmfgraph.Ellipse) getModelFigureElement ();
>         if (modelElement != null) {
53,54d194
< import org.eclipse.gmf.gmfgraph.AbstractFigure;
< 
59,60d54
< import org.eclipse.gmf.gmfgraph.Dimension;
< 
61,61c55,55
< import org.eclipse.gmf.gmfgraph.Ellipse;
---
> import org.eclipse.gmf.gmfgraph.Shape;
62,62d55
< 
66a185,192
>     private org.eclipse.gmf.gmfgraph.Ellipse getModelFigureElement () {
>         Shape shape = getShape ();
>         if (shape instanceof org.eclipse.gmf.gmfgraph.Ellipse) {
>             org.eclipse.gmf.gmfgraph.Ellipse modelFigureElement = (org.eclipse.gmf.gmfgraph.Ellipse) shape;
>             return modelFigureElement;
>         }
>         return null;
>     }
67,67d184
< import org.eclipse.gmf.gmfgraph.Layoutable;
68,68c193,193
< 
---
> 
70a221,223
>         final org.eclipse.gmf.gmfgraph.Ellipse modelElement = (org.eclipse.gmf.gmfgraph.Ellipse) getModelFigureElement ();
>         if (modelElement == null) {
>             super.activate ();
71,71d220
< import org.eclipse.gmf.gmfgraph.XYLayoutData;
87,88d72
< import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;
< 
95,98d78
< import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy;
< 
< import org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy;
< 
102a61,61
> import org.eclipse.gmf.graphdef.editor.edit.polocies.DomainBasedXYLayoutEditPolicy;
103,103d60
< import org.eclipse.gmf.runtime.notation.Bounds;
104,104c62,62
< 
---
> 
109,110d86
< import org.eclipse.gmf.runtime.notation.Node;
< 
133a110,110
>         return new DomainBasedXYLayoutEditPolicy (getMapMode ());
134,160d109
<         XYLayoutEditPolicy lep = new XYLayoutEditPolicy () {
< 
<             protected EditPolicy createChildEditPolicy (EditPart child) {
<                 EditPolicy result = super.createChildEditPolicy (child);
<                 if (result == null) {
<                     return new ResizableShapeEditPolicy ();
<                 }
<                 return result;
<             }
< 
<             protected Point getLayoutOrigin () {
<                 return ((GraphicalEditPart) getHost ()).getContentPane ().getClientArea ().getLocation ();
<             }
< 
<             protected Rectangle getCurrentConstraintFor (org.eclipse.gef.GraphicalEditPart child) {
<                 Rectangle result = super.getCurrentConstraintFor (child);
<                 if (result == null) {
<                     IFigure fig = child.getFigure ();
<                     result = fig.getBounds ().getCopy ();
<                 }
<                 return result;
<             }
< 
<         }
< 
<         ;
<         return lep;
166a203,205
>     protected void setFigure (IFigure figure) {
>         super.setFigure (figure);
>         org.eclipse.gmf.gmfgraph.Ellipse modelElement = (org.eclipse.gmf.gmfgraph.Ellipse) getModelFigureElement ();
167,167d202
<         Ellipse modelElement = (Ellipse) ((View) getModel ()).getElement ();
168a207,209
>             myFigure.setOutline (modelElement.isOutline ());
>             myFigure.setFill (modelElement.isFill ());
>             myFigure.setLineWidth (modelElement.getLineWidth ());
168,168c206,206
<         if (modelElement != null) {
---
>         if (modelElement != null) {
169,179d206
<             {
<                 layoutDataChanged (modelElement.getLayoutData ());
<             } {
<                 layoutChanged (modelElement.getLayout ());
<             } {
<                 myFigure.setOutline (modelElement.isOutline ());
<             } {
<                 myFigure.setFill (modelElement.isFill ());
<             } {
<                 myFigure.setLineWidth (modelElement.getLineWidth ());
<             } {
180,180c210,210
<                 myFigure.setLineStyle (getLineStyle (modelElement.getLineKind ()));
---
>             myFigure.setLineStyle (getLineStyle (modelElement.getLineKind ()));
180a211,211
>             myFigure.setFillXOR (modelElement.isXorFill ());
181,183d210
<             } {
<                 myFigure.setFillXOR (modelElement.isXorFill ());
<             } {
184,184c212,212
<                 myFigure.setOutlineXOR (modelElement.isXorOutline ());
---
>             myFigure.setOutlineXOR (modelElement.isXorOutline ());
184a213,213
>             myFigure.setLayoutManager (getLayoutManager (modelElement.getLayout ()));
185,185d212
<             }}
195,195d125
<         myNodeFigure = result;
234,234c164,164
<     public class EllipseFigure extends org.eclipse.draw2d.Ellipse {
---
>     public class EllipseFigure extends Ellipse {
253,253d182
<     protected Figure myNodeFigure;
257,259d194
<         View view = (View) getModel ();
<         if (view.getElement () != null) {
<             Ellipse modelElement = (Ellipse) view.getElement ();
266,266c217,217
<     public void activate () {
---
>     public void activate () {
267,267c218,218
<         if (isActive ()) {
---
>         if (isActive ()) {
268,268d218
<             return;
270,273d214
<         View view = (View) getModel ();
<         if (view.getElement () == null) {
<             super.activate ();
<             return;
275,276d215
<         final Ellipse modelElement = (Ellipse) view.getElement ();
<         myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData (), new AdapterImpl () {
278,279d216
<             public void notifyChanged (Notification msg) {
<                 if (msg.isTouch ()) {
282,291d220
<                 layoutDataChanged (modelElement.getLayoutData ());
<             }
< 
<         }
< 
<         ));
<         myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getLayoutable_Layout (), new AdapterImpl () {
< 
<             public void notifyChanged (Notification msg) {
<                 if (msg.isTouch ()) {
293a226,226
>         ChangeTracker outlineTracker = new ChangeTracker () {
294,296d283
<                 layoutChanged (modelElement.getLayout ());
<             }
< 
297,297c284,284
<         }
---
>         ;
297a285,285
>         myDomainElementAdapters.add (new FeatureTracker (outlineXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorOutline ()));
298,299d284
< 
<         ));
300,300c286,286
<         myDomainElementAdapters.add (new FeatureTracker (new ChangeTracker () {
---
>         ChangeTracker layoutManagerTracker = new ChangeTracker () {
307a234,234
>         ;
308,308d233
<         , GMFGraphPackage.eINSTANCE.getShape_Outline ()));
309,309c235,235
<         myDomainElementAdapters.add (new FeatureTracker (new ChangeTracker () {
---
>         myDomainElementAdapters.add (new FeatureTracker (outlineTracker, GMFGraphPackage.eINSTANCE.getShape_Outline ()));
309a236,236
>         ChangeTracker fillTracker = new ChangeTracker () {
316a244,244
>         ;
317,317d243
<         , GMFGraphPackage.eINSTANCE.getShape_Fill ()));
318,318c245,245
<         myDomainElementAdapters.add (new FeatureTracker (new ChangeTracker () {
---
>         myDomainElementAdapters.add (new FeatureTracker (fillTracker, GMFGraphPackage.eINSTANCE.getShape_Fill ()));
318a246,246
>         ChangeTracker lineWidthTracker = new ChangeTracker () {
325a254,255
>         ;
>         myDomainElementAdapters.add (new FeatureTracker (lineWidthTracker, GMFGraphPackage.eINSTANCE.getShape_LineWidth ()));
326,326d253
<         , GMFGraphPackage.eINSTANCE.getShape_LineWidth ()));
327,327c256,256
<         myDomainElementAdapters.add (new FeatureTracker (new ChangeTracker () {
---
>         ChangeTracker lineStyleTracker = new ChangeTracker () {
334a264,264
>         ;
335,335d263
<         , GMFGraphPackage.eINSTANCE.getShape_LineKind ()));
336,336c265,265
<         myDomainElementAdapters.add (new FeatureTracker (new ChangeTracker () {
---
>         myDomainElementAdapters.add (new FeatureTracker (lineStyleTracker, GMFGraphPackage.eINSTANCE.getShape_LineKind ()));
336a266,266
>         ChangeTracker fillXORTracker = new ChangeTracker () {
343a274,275
>         ;
>         myDomainElementAdapters.add (new FeatureTracker (fillXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorFill ()));
344,344d273
<         , GMFGraphPackage.eINSTANCE.getShape_XorFill ()));
345,345c276,276
<         myDomainElementAdapters.add (new FeatureTracker (new ChangeTracker () {
---
>         ChangeTracker outlineXORTracker = new ChangeTracker () {
353,463d283
<         , GMFGraphPackage.eINSTANCE.getShape_XorOutline ()));
<         modelElement.eAdapters ().addAll (myDomainElementAdapters);
<         final Bounds bounds = (Bounds) ((Node) view).getLayoutConstraint ();
<         final int sizeX;
<         final int sizeY;
<         if (modelElement.getPreferredSize () != null) {
<             sizeX = getMapMode ().DPtoLP (modelElement.getPreferredSize ().getDx ());
<             sizeY = getMapMode ().DPtoLP (modelElement.getPreferredSize ().getDy ());
<         } else {
<             sizeX = getMapMode ().DPtoLP (20);
<             sizeY = getMapMode ().DPtoLP (20);
<         }
<         final int locationX;
<         final int locationY;
<         if (modelElement.getLocation () != null) {
<             locationX = getMapMode ().DPtoLP (modelElement.getLocation ().getX ());
<             locationY = getMapMode ().DPtoLP (modelElement.getLocation ().getY ());
<         } else {
<             locationX = bounds.getX ();
<             locationY = bounds.getY ();
<         }
<         if (sizeX != bounds.getWidth () || sizeY != bounds.getHeight () || locationX != bounds.getX () || locationY != bounds.getY ()) {
<             try {
<                 new AbstractEMFOperation (getEditingDomain (), "Synchronizing view size with the model", Collections.singletonMap (Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) {
< 
<                     protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
<                         bounds.setX (locationX);
<                         bounds.setY (locationY);
<                         bounds.setWidth (sizeX);
<                         bounds.setHeight (sizeY);
<                         return Status.OK_STATUS;
<                     }
< 
<                 }
< 
<                 .execute (new NullProgressMonitor (), null);
<             } catch (ExecutionException e) {
<                 GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize view size with the model", e);
<             }
<         }
<         addListenerFilter ("BoundsListener", new NotificationListener () {
< 
<             public void notifyChanged (final Notification notification) {
<                 try {
<                     new AbstractEMFOperation (getEditingDomain (), "Synchronizing model size with the view", Collections.singletonMap (Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) {
< 
<                         protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
<                             Bounds bounds = (Bounds) notification.getNotifier ();
<                             Dimension dim = modelElement.getPreferredSize ();
<                             if (dim == null) {
<                                 dim = GMFGraphFactory.eINSTANCE.createDimension ();
<                                 modelElement.setPreferredSize (dim);
<                             }
<                             org.eclipse.gmf.gmfgraph.Point location = modelElement.getLocation ();
<                             if (location == null) {
<                                 location = GMFGraphFactory.eINSTANCE.createPoint ();
<                                 modelElement.setLocation (location);
<                             }
<                             int x = getMapMode ().LPtoDP (bounds.getX ());
<                             int y = getMapMode ().LPtoDP (bounds.getY ());
<                             int width = getMapMode ().LPtoDP (bounds.getWidth ());
<                             int height = getMapMode ().LPtoDP (bounds.getHeight ());
<                             if (location.getX () != x || location.getY () != y) {
<                                 location.setX (x);
<                                 location.setY (y);
<                             }
<                             if (dim.getDx () != width || dim.getDy () != height) {
<                                 dim.setDx (width);
<                                 dim.setDy (height);
<                             }
<                             myNodeFigure.setPreferredSize (bounds.getWidth (), bounds.getHeight ());
<                             myNodeFigure.setLocation (new Point (bounds.getX (), bounds.getY ()));
<                             if (modelElement.getLayoutData () instanceof XYLayoutData || (modelElement.eContainer () instanceof Layoutable && ((Layoutable) modelElement.eContainer ()).getLayout () instanceof org.eclipse.gmf.gmfgraph.XYLayout)) {
<                                 XYLayoutData xyLayoutData = (XYLayoutData) modelElement.getLayoutData ();
<                                 if (xyLayoutData == null) {
<                                     xyLayoutData = GMFGraphFactory.eINSTANCE.createXYLayoutData ();
<                                     modelElement.setLayoutData (xyLayoutData);
<                                     xyLayoutData.setTopLeft (GMFGraphFactory.eINSTANCE.createPoint ());
<                                     xyLayoutData.getTopLeft ().setX (0);
<                                     xyLayoutData.getTopLeft ().setY (0);
<                                     xyLayoutData.setSize (GMFGraphFactory.eINSTANCE.createDimension ());
<                                     xyLayoutData.getSize ().setDx (40);
<                                     xyLayoutData.getSize ().setDy (40);
<                                 }
<                                 org.eclipse.gmf.gmfgraph.Point topLeft;
<                                 if (xyLayoutData.getTopLeft () != null) {
<                                     topLeft = xyLayoutData.getTopLeft ();
<                                 } else {
<                                     topLeft = GMFGraphFactory.eINSTANCE.createPoint ();
<                                     xyLayoutData.setTopLeft (topLeft);
<                                 }
<                                 if (topLeft.getX () != location.getX () || topLeft.getY () != location.getY ()) {
<                                     topLeft.setX (location.getX ());
<                                     topLeft.setY (location.getY ());
<                                 }
<                                 Dimension size;
<                                 if (xyLayoutData.getSize () != null) {
<                                     size = xyLayoutData.getSize ();
<                                 } else {
<                                     size = GMFGraphFactory.eINSTANCE.createDimension ();
<                                     xyLayoutData.setSize (size);
<                                 }
<                                 if (size.getDx () != dim.getDx () || size.getDy () != dim.getDy ()) {
<                                     size.setDx (dim.getDx ());
<                                     size.setDy (dim.getDy ());
<                                 }
<                             }
<                             return Status.OK_STATUS;
<                         }
< 
<                     }
464a288,289
>             public void modelChanged (Notification msg) {
>                 myFigure.setLayoutManager (getLayoutManager (modelElement.getLayout ()));
465,471d287
<                     .execute (new NullProgressMonitor (), null);
<                 } catch (ExecutionException e) {
<                     GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize model size with the view", e);
<                 }
<                 if (getRoot () != null) {
<                     handleMajorSemanticChange ();
<                 }
475a294,298
>         ;
>         myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getLayoutable_Layout (), layoutManagerTracker, new AttachAdapter (GMFGraphPackage.eINSTANCE.getBorderLayout_Spacing (), layoutManagerTracker, new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy ())), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_Vertical ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MatchMinorSize ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_ForceSingleLine ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorAlignment ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorAlignment ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorSpacing ()), new
>           FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorSpacing ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_NumColumns ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_EqualWidth ()), new AttachAdapter (GMFGraphPackage.eINSTANCE.getGridLayout_Margins (), layoutManagerTracker, new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy ())), new AttachAdapter (GMFGraphPackage.eINSTANCE.getGridLayout_Spacing (), layoutManagerTracker, new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy ()))));
>         modelElement.eAdapters ().addAll (myDomainElementAdapters);
>         View view = getNotationView ();
476,476d293
<         , bounds);
612,629d433
<     protected LayoutManager getFigureLayoutManager () {
<         return myFigure.getLayoutManager ();
<     }
< 
<     protected void setFigureLayoutManager (LayoutManager layoutManager) {
<         myFigure.setLayoutManager (layoutManager);
<     }
< 
<     protected void refreshBounds () {
<         if (((View) getParent ().getModel ()).getElement () instanceof AbstractFigure) {
<             int width = ((Integer) getStructuralFeatureValue (NotationPackage.eINSTANCE.getSize_Width ())).intValue ();
<             int height = ((Integer) getStructuralFeatureValue (NotationPackage.eINSTANCE.getSize_Height ())).intValue ();
<             myNodeFigure.setPreferredSize (new org.eclipse.draw2d.geometry.Dimension (width, height));
<         } else {
<             super.refreshBounds ();
<         }
<     }
< 
