2a3,4
> import java.util.Iterator;
> 
4a7,14
> import org.eclipse.core.commands.ExecutionException;
> 
> import org.eclipse.core.runtime.IAdaptable;
> 
> import org.eclipse.core.runtime.IProgressMonitor;
> 
> import org.eclipse.core.runtime.IStatus;
> 
6a17,18
> import org.eclipse.emf.workspace.AbstractEMFOperation;
> 
16a29,29
> import org.eclipse.gmf.runtime.common.core.command.CommandResult;
17,17c31,31
< import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
---
> import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
19a36,36
> 
19,19c35,35
< import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
---
> import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
85a100,124
>         TransactionalEditingDomain editingDomain = null;
>         for (Iterator iterator = getSelectedObjects ().iterator ();
>         iterator.hasNext ();) {
>             EditPart editPart = (EditPart) iterator.next ();
>             if (editPart instanceof IGraphicalEditPart) {
>                 editingDomain = ((IGraphicalEditPart) editPart).getEditingDomain ();
>                 break;
>             }
>         }
>         final Command command [] = new Command [1];
>         AbstractEMFOperation operation = new AbstractEMFOperation (editingDomain, DiagramUIMessages.DeleteCommand_Label) {
> 
>             protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
>                 command [0] = createCommand (getSelectedObjects ());
>                 return CommandResult.newOKCommandResult ().getStatus ();
>             }
> 
>         }
> 
>         ;
>         try {
>             operation.execute (null, null);
>         } catch (ExecutionException e) {
>         }
>         if (command [0] != null) execute (command [0]);
86,87d99
<         Command command = createCommand (getSelectedObjects ());
<         if (command != null) execute (command);
