18a19,20
> import org.eclipse.gmf.codegen.gmfgen.GenApplication;
> 
227a230,230
>         generateApplication ();
664a668,698
>     private void generateApplication () throws UnexpectedBehaviourException, InterruptedException {
>         GenApplication application = myEditorGen.getApplication ();
>         if (application != null) {
>             generateActionBarAdvisor (application);
>             generateApplication (application);
>             generatePerspective (application);
>             generateWorkbenchAdvisor (application);
>             generateWorkbenchWindowAdvisor (application);
>         }
>     }
> 
>     private void generateActionBarAdvisor (GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
>         internalGenerateJavaClass (myEmitters.getActionBarAdvisorEmitter (), application.getApplicationPackageName (), application.getActionBarAdvisorClassName (), application);
>     }
> 
>     private void generateApplication (GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
>         internalGenerateJavaClass (myEmitters.getApplicationEmitter (), application.getApplicationPackageName (), application.getApplicationClassName (), application);
>     }
> 
>     private void generatePerspective (GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
>         internalGenerateJavaClass (myEmitters.getPerspectiveEmitter (), application.getApplicationPackageName (), application.getPerspectiveClassName (), application);
>     }
> 
>     private void generateWorkbenchAdvisor (GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
>         internalGenerateJavaClass (myEmitters.getWorkbenchAdvisorEmitter (), application.getApplicationPackageName (), application.getWorkbenchAdvisorClassName (), application);
>     }
> 
>     private void generateWorkbenchWindowAdvisor (GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
>         internalGenerateJavaClass (myEmitters.getWorkbenchWindowAdvisorEmitter (), application.getApplicationPackageName (), application.getWorkbenchWindowAdvisorClassName (), application);
>     }
> 
