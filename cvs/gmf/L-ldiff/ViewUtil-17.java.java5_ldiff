104,104c104,104
<             if (dContainer.eIsSet (NotationPackage.eINSTANCE.getDiagram_TransientEdges ()) && dContainer.getTransientEdges ().size () > 0) return view;
---
>             if (dContainer.eIsSet (NotationPackage.Literals.DIAGRAM__TRANSIENT_EDGES)) return view;
109,109c109,109
<             if (vContainer.eIsSet (NotationPackage.eINSTANCE.getView_TransientChildren ()) && vContainer.getTransientChildren ().size () > 0) return view;
---
>             if (vContainer.eIsSet (NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN)) return view;
119a120,122
>         Iterator it = new ArrayList (view.getChildren ()).iterator ();
>         while (it.hasNext ()) {
>             View child = (View) it.next ();
120,123d119
<         List children = view.getChildren ();
<         for (int i = 0;
<         i < children.size (); i ++) {
<             View child = (View) children.get (i);
297,297c296,296
<         if (! view.eIsSet (NotationPackage.eINSTANCE.getView_SourceEdges ())) return Collections.EMPTY_LIST;
---
>         if (! view.eIsSet (NotationPackage.Literals.VIEW__SOURCE_EDGES)) return Collections.EMPTY_LIST;
303,303c302,302
<         if (! view.eIsSet (NotationPackage.eINSTANCE.getView_TargetEdges ())) return Collections.EMPTY_LIST;
---
>         if (! view.eIsSet (NotationPackage.Literals.VIEW__TARGET_EDGES)) return Collections.EMPTY_LIST;
307a307,347
>     public static List getSourceConnectionsConnectingVisibleViews (View view) {
>         if (! view.eIsSet (NotationPackage.Literals.VIEW__SOURCE_EDGES)) return Collections.EMPTY_LIST;
> 
>         List sourceConnections = new ArrayList ();
>         Iterator iter = view.getSourceEdges ().iterator ();
>         while (iter.hasNext ()) {
>             Edge edge = (Edge) iter.next ();
>             View target = edge.getTarget ();
>             if (edge.isVisible () && isVisible (target)) {
>                 sourceConnections.add (edge);
>             }
>         }
>         return sourceConnections;
>     }
> 
>     private static boolean isVisible (View target) {
>         if (target.isVisible ()) {
>             EObject parent = target.eContainer ();
>             if (parent instanceof View) {
>                 return isVisible ((View) parent);
>             }
>             return true;
>         }
>         return false;
>     }
> 
>     public static List getTargetConnectionsConnectingVisibleViews (View view) {
>         if (! view.eIsSet (NotationPackage.Literals.VIEW__TARGET_EDGES)) return Collections.EMPTY_LIST;
> 
>         List targteConnections = new ArrayList ();
>         Iterator iter = view.getTargetEdges ().iterator ();
>         while (iter.hasNext ()) {
>             Edge edge = (Edge) iter.next ();
>             View source = edge.getSource ();
>             if (edge.isVisible () && isVisible (source)) {
>                 targteConnections.add (edge);
>             }
>         }
>         return targteConnections;
>     }
> 
