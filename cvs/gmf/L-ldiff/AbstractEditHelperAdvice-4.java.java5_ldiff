4a5,6
> import org.eclipse.core.commands.ExecutionException;
> 
8a11,14
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
> 
> import org.eclipse.emf.transaction.util.TransactionUtil;
> 
10a17,20
> import org.eclipse.gmf.runtime.common.core.util.Log;
> 
> import org.eclipse.gmf.runtime.common.core.util.Trace;
> 
14a25,30
> import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypeDebugOptions;
> 
> import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePlugin;
> 
> import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePluginStatusCodes;
> 
192a209,209
>         TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain (container);
193,193c210,210
<         CreateElementRequest request = new CreateElementRequest (container, typeToCreate);
---
>         CreateElementRequest request = new CreateElementRequest (editingDomain, container, typeToCreate);
198a216,223
>         if (createTypeCommand != null && createTypeCommand.canExecute ()) {
>             try {
>                 createTypeCommand.execute (progressMonitor, null);
>             } catch (ExecutionException e) {
>                 Trace.catching (EMFTypePlugin.getPlugin (), EMFTypeDebugOptions.EXCEPTIONS_CATCHING, AbstractEditHelperAdvice.class, "createType", e);
>                 Log.error (EMFTypePlugin.getPlugin (), EMFTypePluginStatusCodes.COMMAND_FAILURE, e.getMessage (), e);
>                 return null;
>             }
199,200d215
<         if (createTypeCommand != null && createTypeCommand.isExecutable ()) {
<             createTypeCommand.execute (progressMonitor);
