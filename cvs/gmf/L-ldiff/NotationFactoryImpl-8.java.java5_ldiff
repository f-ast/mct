20a21,22
> import org.eclipse.emf.ecore.EPackage;
> 
22a25,26
> import org.eclipse.emf.ecore.plugin.EcorePlugin;
> 
104a109,120
>     public static NotationFactory init () {
>         try {
>             NotationFactory theNotationFactory = (NotationFactory) EPackage.Registry.INSTANCE.getEFactory ("http://www.eclipse.org/gmf/runtime/1.0.0/notation");
>             if (theNotationFactory != null) {
>                 return theNotationFactory;
>             }
>         } catch (Exception exception) {
>             EcorePlugin.INSTANCE.log (exception);
>         }
>         return new NotationFactoryImpl ();
>     }
> 
176a193,210
>                 return createSortingFromString (eDataType, initialValue);
>             case NotationPackage.FILTERING :
>                 return createFilteringFromString (eDataType, initialValue);
>             case NotationPackage.ROUTING :
>                 return createRoutingFromString (eDataType, initialValue);
>             case NotationPackage.SMOOTHNESS :
>                 return createSmoothnessFromString (eDataType, initialValue);
>             case NotationPackage.JUMP_LINK_STATUS :
>                 return createJumpLinkStatusFromString (eDataType, initialValue);
>             case NotationPackage.JUMP_LINK_TYPE :
>                 return createJumpLinkTypeFromString (eDataType, initialValue);
>             case NotationPackage.ALIGNMENT :
>                 return createAlignmentFromString (eDataType, initialValue);
>             case NotationPackage.SORTING_DIRECTION :
>                 return createSortingDirectionFromString (eDataType, initialValue);
>             case NotationPackage.MEASUREMENT_UNIT :
>                 return createMeasurementUnitFromString (eDataType, initialValue);
>             case NotationPackage.RELATIVE_BENDPOINT_LIST :
176a397,399
>     public Sorting createSortingFromString (EDataType eDataType, String initialValue) {
>         Sorting result = Sorting.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
177,179d396
<                 {
<                     Sorting result = Sorting.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
180,180c400,400
< 
---
> 
180a401,402
>         return result;
>     }
181,185d400
<                     return result;
<                 } case NotationPackage.FILTERING :
<                 {
<                     Filtering result = Filtering.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
186a404,406
>     public String convertSortingToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
186,186c403,403
< 
---
> 
187,191d403
<                     return result;
<                 } case NotationPackage.ROUTING :
<                 {
<                     Routing result = Routing.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
192a408,410
>     public Filtering createFilteringFromString (EDataType eDataType, String initialValue) {
>         Filtering result = Filtering.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
192,192c407,407
< 
---
> 
193,197d407
<                     return result;
<                 } case NotationPackage.SMOOTHNESS :
<                 {
<                     Smoothness result = Smoothness.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
198a412,413
>         return result;
>     }
198,198c411,411
< 
---
> 
199,203d411
<                     return result;
<                 } case NotationPackage.JUMP_LINK_STATUS :
<                 {
<                     JumpLinkStatus result = JumpLinkStatus.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
204,204c414,414
< 
---
> 
204a415,417
>     public String convertFilteringToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
205,209d414
<                     return result;
<                 } case NotationPackage.JUMP_LINK_TYPE :
<                 {
<                     JumpLinkType result = JumpLinkType.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
210a419,421
>     public Routing createRoutingFromString (EDataType eDataType, String initialValue) {
>         Routing result = Routing.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
210,210c418,418
< 
---
> 
211,215d418
<                     return result;
<                 } case NotationPackage.ALIGNMENT :
<                 {
<                     Alignment result = Alignment.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
216a423,424
>         return result;
>     }
216,216c422,422
< 
---
> 
217,221d422
<                     return result;
<                 } case NotationPackage.SORTING_DIRECTION :
<                 {
<                     SortingDirection result = SortingDirection.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
222,222c425,425
< 
---
> 
222a426,428
>     public String convertRoutingToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
223,227d425
<                     return result;
<                 } case NotationPackage.MEASUREMENT_UNIT :
<                 {
<                     MeasurementUnit result = MeasurementUnit.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
228a430,433
>     public Smoothness createSmoothnessFromString (EDataType eDataType, String initialValue) {
>         Smoothness result = Smoothness.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
228,228c429,429
< 
---
> 
229a435,495
>     }
> 
>     public String convertSmoothnessToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public JumpLinkStatus createJumpLinkStatusFromString (EDataType eDataType, String initialValue) {
>         JumpLinkStatus result = JumpLinkStatus.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertJumpLinkStatusToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public JumpLinkType createJumpLinkTypeFromString (EDataType eDataType, String initialValue) {
>         JumpLinkType result = JumpLinkType.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertJumpLinkTypeToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public Alignment createAlignmentFromString (EDataType eDataType, String initialValue) {
>         Alignment result = Alignment.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertAlignmentToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public SortingDirection createSortingDirectionFromString (EDataType eDataType, String initialValue) {
>         SortingDirection result = SortingDirection.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertSortingDirectionToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public MeasurementUnit createMeasurementUnitFromString (EDataType eDataType, String initialValue) {
>         MeasurementUnit result = MeasurementUnit.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertMeasurementUnitToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
229,229c434,434
<                     return result;
---
>         return result;
230,230d434
<                 } case NotationPackage.RELATIVE_BENDPOINT_LIST :
243a224,224
>                 return convertSortingToString (eDataType, instanceValue);
244,244d223
<                 return instanceValue == null ? null : instanceValue.toString ();
245a226,226
>                 return convertFilteringToString (eDataType, instanceValue);
246,246d225
<                 return instanceValue == null ? null : instanceValue.toString ();
247a228,228
>                 return convertRoutingToString (eDataType, instanceValue);
248,248d227
<                 return instanceValue == null ? null : instanceValue.toString ();
249a230,230
>                 return convertSmoothnessToString (eDataType, instanceValue);
250,250d229
<                 return instanceValue == null ? null : instanceValue.toString ();
251a232,232
>                 return convertJumpLinkStatusToString (eDataType, instanceValue);
252,252d231
<                 return instanceValue == null ? null : instanceValue.toString ();
253a234,234
>                 return convertJumpLinkTypeToString (eDataType, instanceValue);
254,254d233
<                 return instanceValue == null ? null : instanceValue.toString ();
255a236,236
>                 return convertAlignmentToString (eDataType, instanceValue);
256,256d235
<                 return instanceValue == null ? null : instanceValue.toString ();
257a238,238
>                 return convertSortingDirectionToString (eDataType, instanceValue);
258,258d237
<                 return instanceValue == null ? null : instanceValue.toString ();
259a240,240
>                 return convertMeasurementUnitToString (eDataType, instanceValue);
260,260d239
<                 return instanceValue == null ? null : instanceValue.toString ();
