8a9,10
> import java.util.HashSet;
> 
16a19,19
> import java.util.Set;
17,17c21,21
< import org.eclipse.core.runtime.IAdaptable;
---
> import org.eclipse.core.runtime.IAdaptable;
19,19d20
< import org.eclipse.emf.ecore.EClass;
26a41,41
> import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse3EditPart;
27,27d40
< import org.eclipse.gmf.gmfgraph.Canvas;
28,28c42,42
< 
---
> 
29,30d42
< import org.eclipse.gmf.gmfgraph.DiagramElement;
< 
38a33,33
> import org.eclipse.gmf.graphdef.editor.edit.parts.ChildAccessEditPart;
39,39d32
< import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramElementFigureEditPart;
40,40c34,34
< 
---
> 
44a45,46
> import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorEditPart;
> 
50a53,54
> import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline3EditPart;
> 
54a59,60
> import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle3EditPart;
> 
58a65,66
> import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle3EditPart;
> 
60a71,74
> import org.eclipse.gmf.graphdef.editor.part.GMFGraphLinkDescriptor;
> 
> import org.eclipse.gmf.graphdef.editor.part.GMFGraphNodeDescriptor;
> 
61,61c75,75
< import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
---
> import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
63,63c69,69
< import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;
---
> import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramUpdater;
79,82d90
< import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
< 
< import org.eclipse.gmf.runtime.emf.type.core.IElementType;
< 
89a98,98
>     Set myFeaturesToSynchronize;
92,93d100
<         List result = new LinkedList ();
<         EObject modelObject = ((View) getHost ().getModel ()).getElement ();
94a102,105
>         List result = new LinkedList ();
>         for (Iterator it = GMFGraphDiagramUpdater.getCanvas_1000SemanticChildren (viewObject).iterator ();
>         it.hasNext ();) {
>             result.add (((GMFGraphNodeDescriptor) it.next ()).getModelElement ());
95,127d101
<         EObject nextValue;
<         int nodeVID;
<         for (Iterator values = ((Canvas) modelObject).getCompartments ().iterator ();
<         values.hasNext ();) {
<             nextValue = (EObject) values.next ();
<             nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID (viewObject, nextValue);
<             if (CompartmentEditPart.VISUAL_ID == nodeVID) {
<                 result.add (nextValue);
<             }
<         }
<         for (Iterator values = ((Canvas) modelObject).getNodes ().iterator ();
<         values.hasNext ();) {
<             nextValue = (EObject) values.next ();
<             nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID (viewObject, nextValue);
<             if (NodeEditPart.VISUAL_ID == nodeVID) {
<                 result.add (nextValue);
<             }
<         }
<         for (Iterator values = ((Canvas) modelObject).getConnections ().iterator ();
<         values.hasNext ();) {
<             nextValue = (EObject) values.next ();
<             nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID (viewObject, nextValue);
<             if (ConnectionEditPart.VISUAL_ID == nodeVID) {
<                 result.add (nextValue);
<             }
<         }
<         for (Iterator values = ((Canvas) modelObject).getFigures ().iterator ();
<         values.hasNext ();) {
<             nextValue = (EObject) values.next ();
<             nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID (viewObject, nextValue);
<             if (FigureGalleryEditPart.VISUAL_ID == nodeVID) {
<                 result.add (nextValue);
<             }
132a111,114
>         return true;
>     }
> 
>     protected boolean isOrphaned (Collection semanticChildren, final View view) {
133a124,124
>                 return ! semanticChildren.contains (view.getElement ()) || visualID != GMFGraphVisualIDRegistry.getNodeVisualID ((View) getHost ().getModel (), view.getElement ());
133a116,116
>             return GMFGraphDiagramUpdater.isShortcutOrphaned (view);
134,134d123
<             return view.isSetElement () && (view.getElement () == null || view.getElement ().eIsProxy ());
136,136c118,118
<         int nodeVID = GMFGraphVisualIDRegistry.getVisualID (view);
---
>         int visualID = GMFGraphVisualIDRegistry.getVisualID (view);
137,137c119,119
<         switch (nodeVID) {
---
>         switch (visualID) {
142,142c309,309
<                 return true;
---
>         return result;
150a133,143
>     protected Set getFeaturesToSynchronize () {
>         if (myFeaturesToSynchronize == null) {
>             myFeaturesToSynchronize = new HashSet ();
>             myFeaturesToSynchronize.add (GMFGraphPackage.eINSTANCE.getCanvas_Compartments ());
>             myFeaturesToSynchronize.add (GMFGraphPackage.eINSTANCE.getCanvas_Nodes ());
>             myFeaturesToSynchronize.add (GMFGraphPackage.eINSTANCE.getCanvas_Connections ());
>             myFeaturesToSynchronize.add (GMFGraphPackage.eINSTANCE.getCanvas_Figures ());
>         }
>         return myFeaturesToSynchronize;
>     }
> 
180a174,176
>     private Diagram getDiagram () {
>         return ((View) getHost ().getModel ()).getDiagram ();
>     }
180a202,202
>     private Collection collectAllLinks (View view, Map domain2NotationMap) {
181a204,204
>         switch (GMFGraphVisualIDRegistry.getVisualID (view)) {
181,181c203,203
<     private Collection myLinkDescriptors = new LinkedList ();
---
>         Collection result = new LinkedList ();
182,182d203
<     private Map myEObject2ViewMap = new HashMap ();
184a179,180
>         Map domain2NotationMap = new HashMap ();
>         Collection linkDescriptors = collectAllLinks (getDiagram (), domain2NotationMap);
185,186d178
<         try {
<             collectAllLinks (getDiagram ());
188,188c182,182
<             for (Iterator diagramLinks = existingLinks.iterator ();
---
>         for (Iterator linksIterator = existingLinks.iterator ();
188a183,183
>         linksIterator.hasNext ();) {
189,189d182
<             diagramLinks.hasNext ();) {
190,190c184,184
<                 Edge nextDiagramLink = (Edge) diagramLinks.next ();
---
>             Edge nextDiagramLink = (Edge) linksIterator.next ();
194a189,191
>             for (Iterator LinkDescriptorsIterator = linkDescriptors.iterator ();
>             LinkDescriptorsIterator.hasNext ();) {
>                 GMFGraphLinkDescriptor nextLinkDescriptor = (GMFGraphLinkDescriptor) LinkDescriptorsIterator.next ();
195,197d188
<                 for (Iterator modelLinkDescriptors = myLinkDescriptors.iterator ();
<                 modelLinkDescriptors.hasNext ();) {
<                     LinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next ();
198,198c192,192
<                     if (diagramLinkObject == nextLinkDescriptor.getLinkElement () && diagramLinkSrc == nextLinkDescriptor.getSource () && diagramLinkDst == nextLinkDescriptor.getDestination () && diagramLinkVisualID == nextLinkDescriptor.getVisualID ()) {
---
>                 if (diagramLinkObject == nextLinkDescriptor.getModelElement () && diagramLinkSrc == nextLinkDescriptor.getSource () && diagramLinkDst == nextLinkDescriptor.getDestination () && diagramLinkVisualID == nextLinkDescriptor.getVisualID ()) {
199,199d192
<                         diagramLinks.remove ();
200,200c193,193
<                         modelLinkDescriptors.remove ();
---
>                     linksIterator.remove ();
200a194,194
>                     LinkDescriptorsIterator.remove ();
204a199,199
>         return createConnections (linkDescriptors, domain2NotationMap);
205,209d198
<             return createConnections (myLinkDescriptors);
<         } finally {
<             myLinkDescriptors.clear ();
<             myEObject2ViewMap.clear ();
<         }
212,227d201
<     private void collectAllLinks (View view) {
<         EObject modelElement = view.getElement ();
<         int diagramElementVisualID = GMFGraphVisualIDRegistry.getVisualID (view);
<         switch (diagramElementVisualID) {
<             case CompartmentEditPart.VISUAL_ID :
<             case NodeEditPart.VISUAL_ID :
<             case ConnectionEditPart.VISUAL_ID :
<             case FigureGalleryEditPart.VISUAL_ID :
<             case RectangleEditPart.VISUAL_ID :
<             case Rectangle2EditPart.VISUAL_ID :
<             case EllipseEditPart.VISUAL_ID :
<             case RoundedRectangleEditPart.VISUAL_ID :
<             case PolylineEditPart.VISUAL_ID :
<             case Ellipse2EditPart.VISUAL_ID :
<             case RoundedRectangle2EditPart.VISUAL_ID :
<             case Polyline2EditPart.VISUAL_ID :
229a207,280
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getCanvas_1000ContainedLinks (view));
>                     break;
>                 } case CompartmentEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getCompartment_2005ContainedLinks (view));
>                     break;
>                 } case NodeEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getNode_2006ContainedLinks (view));
>                     break;
>                 } case ConnectionEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getConnection_2007ContainedLinks (view));
>                     break;
>                 } case FigureGalleryEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getFigureGallery_2008ContainedLinks (view));
>                     break;
>                 } case FigureDescriptorEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getFigureDescriptor_3009ContainedLinks (view));
>                     break;
>                 } case RectangleEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getRectangle_3010ContainedLinks (view));
>                     break;
>                 } case Rectangle2EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getRectangle_3011ContainedLinks (view));
>                     break;
>                 } case EllipseEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getEllipse_3012ContainedLinks (view));
>                     break;
>                 } case RoundedRectangleEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getRoundedRectangle_3013ContainedLinks (view));
>                     break;
>                 } case PolylineEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getPolyline_3014ContainedLinks (view));
>                     break;
>                 } case Ellipse2EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getEllipse_3015ContainedLinks (view));
>                     break;
>                 } case RoundedRectangle2EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getRoundedRectangle_3016ContainedLinks (view));
>                     break;
>                 } case Polyline2EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getPolyline_3017ContainedLinks (view));
>                     break;
>                 } case Rectangle3EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getRectangle_3018ContainedLinks (view));
>                     break;
>                 } case Ellipse3EditPart.VISUAL_ID :
230,232d206
<                     myEObject2ViewMap.put (modelElement, view);
<                     storeLinks (modelElement, getDiagram ());
<                 } default :
233a282,301
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getEllipse_3019ContainedLinks (view));
>                     break;
>                 } case RoundedRectangle3EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getRoundedRectangle_3020ContainedLinks (view));
>                     break;
>                 } case Polyline3EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getPolyline_3021ContainedLinks (view));
>                     break;
>                 } case ChildAccessEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getChildAccess_4002ContainedLinks (view));
>                     break;
>                 }}
>         for (Iterator children = view.getChildren ().iterator ();
234,234d281
<                 } for (Iterator children = view.getChildren ().iterator ();
236,236c303,303
<                     View childView = (View) children.next ();
---
>             result.addAll (collectAllLinks ((View) children.next (), domain2NotationMap));
237,237d303
<                     collectAllLinks (childView);
238a305,307
>         for (Iterator edges = view.getSourceEdges ().iterator ();
>         edges.hasNext ();) {
>             result.addAll (collectAllLinks ((View) edges.next (), domain2NotationMap));
242,242c312,312
<     private Collection createConnections (Collection linkDescriptors) {
---
>     private Collection createConnections (Collection linkDescriptors, Map domain2NotationMap) {
243,245d312
<         if (linkDescriptors.isEmpty ()) {
<             return Collections.EMPTY_LIST;
<         }
249,249c316,316
<             final LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next ();
---
>             final GMFGraphLinkDescriptor nextLinkDescriptor = (GMFGraphLinkDescriptor) linkDescriptorsIterator.next ();
249a317,317
>             EditPart sourceEditPart = getEditPart (nextLinkDescriptor.getSource (), domain2NotationMap);
250,250d316
<             EditPart sourceEditPart = getEditPartFor (nextLinkDescriptor.getSource ());
251,251c318,318
<             EditPart targetEditPart = getEditPartFor (nextLinkDescriptor.getDestination ());
---
>             EditPart targetEditPart = getEditPart (nextLinkDescriptor.getDestination (), domain2NotationMap);
273a341,341
>     private EditPart getEditPart (EObject domainModelElement, Map domain2NotationMap) {
274,274d340
<     private EditPart getEditPartFor (EObject modelElement) {
275,275c342,342
<         View view = (View) myEObject2ViewMap.get (modelElement);
---
>         View view = (View) domain2NotationMap.get (domainModelElement);
282,372d348
<     private void storeLinks (EObject container, Diagram diagram) {
<         EClass containerMetaclass = container.eClass ();
<         storeFeatureModelFacetLinks (container, containerMetaclass, diagram);
<         storeTypeModelFacetLinks (container, containerMetaclass);
<     }
< 
<     private void storeTypeModelFacetLinks (EObject container, EClass containerMetaclass) {
<     }
< 
<     private void storeFeatureModelFacetLinks (EObject container, EClass containerMetaclass, Diagram diagram) {
<         if (GMFGraphPackage.eINSTANCE.getDiagramElement ().isSuperTypeOf (containerMetaclass)) {
<             EObject nextDestination = (EObject) ((DiagramElement) container).getFigure ();
<             myLinkDescriptors.add (new LinkDescriptor (container, nextDestination, GMFGraphElementTypes.DiagramElementFigure_4001, DiagramElementFigureEditPart.VISUAL_ID));
<         }
<     }
< 
<     private Diagram getDiagram () {
<         return ((View) getHost ().getModel ()).getDiagram ();
<     }
< 
<     private class LinkDescriptor {
<         private EObject mySource;
<         private EObject myDestination;
<         private EObject myLinkElement;
<         private int myVisualID;
<         private IAdaptable mySemanticAdapter;
< 
<         protected LinkDescriptor (EObject source, EObject destination, EObject linkElement, IElementType elementType, int linkVID) {
<             this (source, destination, linkVID);
<             myLinkElement = linkElement;
<             final IElementType elementTypeCopy = elementType;
<             mySemanticAdapter = new EObjectAdapter (linkElement) {
< 
<                 public Object getAdapter (Class adapter) {
<                     if (IElementType.class.equals (adapter)) {
<                         return elementTypeCopy;
<                     }
<                     return super.getAdapter (adapter);
<                 }
< 
<             }
< 
<             ;
<         }
< 
<         protected LinkDescriptor (EObject source, EObject destination, IElementType elementType, int linkVID) {
<             this (source, destination, linkVID);
<             myLinkElement = null;
<             final IElementType elementTypeCopy = elementType;
<             mySemanticAdapter = new IAdaptable () {
< 
<                 public Object getAdapter (Class adapter) {
<                     if (IElementType.class.equals (adapter)) {
<                         return elementTypeCopy;
<                     }
<                     return null;
<                 }
< 
<             }
< 
<             ;
<         }
< 
<         private LinkDescriptor (EObject source, EObject destination, int linkVID) {
<             mySource = source;
<             myDestination = destination;
<             myVisualID = linkVID;
<         }
< 
<         protected EObject getSource () {
<             return mySource;
<         }
< 
<         protected EObject getDestination () {
<             return myDestination;
<         }
< 
<         protected EObject getLinkElement () {
<             return myLinkElement;
<         }
< 
<         protected int getVisualID () {
<             return myVisualID;
<         }
< 
<         protected IAdaptable getSemanticAdapter () {
<             return mySemanticAdapter;
<         }
< 
<     }
< 
