12a13,14
> import org.eclipse.gmf.gmfgraph.Node;
> 
30a33,38
> import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelEditPart;
> 
> import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelNameEditPart;
> 
> import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelVisualFacetsEditPart;
> 
46a55,66
> import org.eclipse.gmf.graphdef.editor.edit.parts.Label2EditPart;
> 
> import org.eclipse.gmf.graphdef.editor.edit.parts.Label3EditPart;
> 
> import org.eclipse.gmf.graphdef.editor.edit.parts.LabelEditPart;
> 
> import org.eclipse.gmf.graphdef.editor.edit.parts.LabelText2EditPart;
> 
> import org.eclipse.gmf.graphdef.editor.edit.parts.LabelText3EditPart;
> 
> import org.eclipse.gmf.graphdef.editor.edit.parts.LabelTextEditPart;
> 
88a109,109
>     private static GMFGraphAbstractExpression Node_2006_Constraint;
175a197,199
>                 if (GMFGraphPackage.eINSTANCE.getLabel ().isSuperTypeOf (domainElement.eClass ())) {
>                     return Label2EditPart.VISUAL_ID;
>                 }
192a217,219
>                 if (GMFGraphPackage.eINSTANCE.getLabel ().isSuperTypeOf (domainElement.eClass ())) {
>                     return LabelEditPart.VISUAL_ID;
>                 }
209a237,239
>                 if (GMFGraphPackage.eINSTANCE.getLabel ().isSuperTypeOf (domainElement.eClass ())) {
>                     return LabelEditPart.VISUAL_ID;
>                 }
226a257,259
>                 if (GMFGraphPackage.eINSTANCE.getLabel ().isSuperTypeOf (domainElement.eClass ())) {
>                     return LabelEditPart.VISUAL_ID;
>                 }
243a277,279
>                 if (GMFGraphPackage.eINSTANCE.getLabel ().isSuperTypeOf (domainElement.eClass ())) {
>                     return LabelEditPart.VISUAL_ID;
>                 }
270a307,309
>                 if (GMFGraphPackage.eINSTANCE.getLabel ().isSuperTypeOf (domainElement.eClass ())) {
>                     return LabelEditPart.VISUAL_ID;
>                 }
287a327,329
>                 if (GMFGraphPackage.eINSTANCE.getLabel ().isSuperTypeOf (domainElement.eClass ())) {
>                     return LabelEditPart.VISUAL_ID;
>                 }
314a357,359
>                 if (GMFGraphPackage.eINSTANCE.getLabel ().isSuperTypeOf (domainElement.eClass ())) {
>                     return LabelEditPart.VISUAL_ID;
>                 }
331a377,379
>                 if (GMFGraphPackage.eINSTANCE.getLabel ().isSuperTypeOf (domainElement.eClass ())) {
>                     return LabelEditPart.VISUAL_ID;
>                 }
348a397,399
>                 if (GMFGraphPackage.eINSTANCE.getLabel ().isSuperTypeOf (domainElement.eClass ())) {
>                     return LabelEditPart.VISUAL_ID;
>                 }
378a430,432
>                 if (GMFGraphPackage.eINSTANCE.getLabel ().isSuperTypeOf (domainElement.eClass ())) {
>                     return Label3EditPart.VISUAL_ID;
>                 }
384,384c438,438
<                 if (GMFGraphPackage.eINSTANCE.getNode ().isSuperTypeOf (domainElement.eClass ())) {
---
>                 if (GMFGraphPackage.eINSTANCE.getNode ().isSuperTypeOf (domainElement.eClass ()) && isNode_2006 ((Node) domainElement)) {
392a447,449
>                 if (GMFGraphPackage.eINSTANCE.getDiagramLabel ().isSuperTypeOf (domainElement.eClass ())) {
>                     return DiagramLabelEditPart.VISUAL_ID;
>                 }
445a503,510
>             case DiagramLabelEditPart.VISUAL_ID :
>                 if (DiagramLabelNameEditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
>                 if (DiagramLabelVisualFacetsEditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
>                 break;
464a530,532
>                 if (Label2EditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
481a550,552
>                 if (LabelEditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
498a570,572
>                 if (LabelEditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
515a590,592
>                 if (LabelEditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
532a610,612
>                 if (LabelEditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
543a624,628
>             case LabelEditPart.VISUAL_ID :
>                 if (LabelTextEditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
>                 break;
559a645,647
>                 if (LabelEditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
576a665,667
>                 if (LabelEditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
587a679,683
>             case Label2EditPart.VISUAL_ID :
>                 if (LabelText2EditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
>                 break;
603a700,702
>                 if (LabelEditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
620a720,722
>                 if (LabelEditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
637a740,742
>                 if (LabelEditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
648a754,758
>             case Label3EditPart.VISUAL_ID :
>                 if (LabelText3EditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
>                 break;
667a778,780
>                 if (Label3EditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
681a795,797
>                 if (DiagramLabelEditPart.VISUAL_ID == nodeVisualID) {
>                     return true;
>                 }
700a817,824
>     private static boolean isNode_2006 (Node domainElement) {
>         if (Node_2006_Constraint == null) {
>             Node_2006_Constraint = GMFGraphOCLFactory.getExpression ("not self.oclIsKindOf(gmfgraph::DiagramLabel)", GMFGraphPackage.eINSTANCE.getNode ());
>         }
>         Object result = Node_2006_Constraint.evaluate (domainElement);
>         return result instanceof Boolean && ((Boolean) result).booleanValue ();
>     }
> 
