1,1c1,1
< package org.eclipse.gmf.runtime.lite.properties;
---
> package org.eclipse.gmf.runtime.diagram.ui.properties.sections;
3,3d2
< import java.util.ArrayList;
5,5d4
< import java.util.Iterator;
7,7c3,3
< import org.eclipse.emf.common.notify.AdapterFactory;
---
> import org.eclipse.emf.common.notify.Notification;
9,9c5,5
< import org.eclipse.emf.ecore.util.EcoreUtil;
---
> import org.eclipse.emf.ecore.EObject;
10a9,9
> import org.eclipse.swt.SWT;
10a11,11
> import org.eclipse.swt.custom.CLabel;
11,11d8
< import org.eclipse.emf.transaction.TransactionalEditingDomain;
12a13,13
> import org.eclipse.swt.layout.FormAttachment;
13,13d12
< import org.eclipse.emf.transaction.util.TransactionUtil;
14a15,15
> import org.eclipse.swt.layout.FormData;
15,15c19,19
< import org.eclipse.gef.commands.CommandStack;
---
> import org.eclipse.ui.IActionBars;
17a30,33
> 
> import org.eclipse.gmf.runtime.emf.core.edit.MFilter;
> 
> import org.eclipse.gmf.runtime.emf.core.exceptions.MSLActionAbandonedException;
17,17c29,29
< import org.eclipse.gmf.runtime.lite.parts.CommandStackAdapterManager;
---
> import org.eclipse.gmf.runtime.common.core.command.CommandManager;
19,19c7,7
< import org.eclipse.jface.viewers.ISelection;
---
> import org.eclipse.jface.viewers.ISelection;
21,21d20
< import org.eclipse.jface.viewers.StructuredSelection;
23,23c17,17
< import org.eclipse.swt.widgets.Composite;
---
> import org.eclipse.swt.widgets.Composite;
24a25,25
> import org.eclipse.ui.views.properties.PropertySheetPage;
25,25c21,21
< import org.eclipse.ui.IWorkbenchPart;
---
> import org.eclipse.ui.IWorkbenchPart;
28a23,23
> import org.eclipse.ui.views.properties.IPropertySourceProvider;
29,29d22
< public abstract class AdvancedPropertySection extends org.eclipse.ui.views.properties.tabbed.AdvancedPropertySection {
30a35,78
> import org.eclipse.gmf.runtime.emf.ui.properties.sections.UndoableModelPropertySheetEntry;
> 
> public class AdvancedPropertySection extends AbstractModelerPropertySection {
>     protected PropertySheetPage page;
> 
>     public void createControls (final Composite parent, TabbedPropertySheetPage aTabbedPropertySheetPage) {
>         super.createControls (parent, aTabbedPropertySheetPage);
>         Composite composite = getWidgetFactory ().createFlatFormComposite (parent);
>         FormData data = null;
>         String tableLabelStr = getTableLabel ();
>         CLabel tableLabel = null;
>         if (tableLabelStr != null && tableLabelStr.length () > 0) {
>             tableLabel = getWidgetFactory ().createCLabel (composite, tableLabelStr);
>             data = new FormData ();
>             data.left = new FormAttachment (0, 0);
>             data.top = new FormAttachment (0, 0);
>             tableLabel.setLayoutData (data);
>         }
>         page = new PropertySheetPage ();
>         UndoableModelPropertySheetEntry root = new UndoableModelPropertySheetEntry (CommandManager.getDefault ());
>         root.setPropertySourceProvider (getPropertySourceProvider ());
>         page.setRootEntry (root);
>         page.createControl (composite);
>         data = new FormData ();
>         data.left = new FormAttachment (0, 0);
>         data.right = new FormAttachment (100, 0);
>         if (tableLabel == null) {
>             data.top = new FormAttachment (0, 0);
>         } else {
>             data.top = new FormAttachment (tableLabel, 0, SWT.BOTTOM);
>         }
>         data.bottom = new FormAttachment (100, 0);
>         data.height = 100;
>         data.width = 100;
>         page.getControl ().setLayoutData (data);
>         setActionBars (aTabbedPropertySheetPage.getSite ().getActionBars ());
>     }
> 
>     public void setActionBars (IActionBars actionBars) {
>         actionBars.getMenuManager ().removeAll ();
>         actionBars.getToolBarManager ().removeAll ();
>         actionBars.getStatusLineManager ().removeAll ();
>         page.makeContributions (actionBars.getMenuManager (), actionBars.getToolBarManager (), actionBars.getStatusLineManager ());
>         actionBars.getToolBarManager ().update (true);
31,35d34
<     public void createControls (Composite parent, TabbedPropertySheetPage tabbedPropertySheetPage) {
<         super.createControls (parent, tabbedPropertySheetPage);
<         myPropertySheetEntry = new RootUndoablePropertySheetEntry (null, page);
<         myPropertySheetEntry.setPropertySourceProvider (getPropertySourceProvider ());
<         page.setRootEntry (myPropertySheetEntry);
37a81,82
>     protected IPropertySourceProvider getPropertySourceProvider () {
>         return propertiesProvider;
38,62d80
<     public void setInput (IWorkbenchPart part, ISelection selection) {
<         if (selection.isEmpty () || false == selection instanceof StructuredSelection) {
<             super.setInput (part, selection);
<             return;
<         }
<         final StructuredSelection structuredSelection = ((StructuredSelection) selection);
<         ArrayList < Object > transformedSelection = new ArrayList < Object > (structuredSelection.size ());
<         for (Iterator < ? > it = structuredSelection.iterator ();
<         it.hasNext ();) {
<             Object r = transformSelection (it.next ());
<             if (r != null) {
<                 transformedSelection.add (r);
<             }
<         }
<         CommandStack commandStack = getCommandStack (transformedSelection);
<         myPropertySheetEntry.setCommandStack (commandStack);
<         super.setInput (part, new StructuredSelection (transformedSelection));
<     }
< 
<     protected CommandStack getCommandStack (ArrayList < ? > selection) {
<         CommandStack result = null;
<         for (Object next : selection) {
<             TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain (next);
<             if (editingDomain == null) {
<                 return null;
63a84,85
> 
>     protected String getTableLabel () {
64,65d83
<             CommandStack nextStackCandidate = getCommandStack (editingDomain);
<             if (nextStackCandidate == null) {
67a88,90
> 
>     public void setInput (IWorkbenchPart part, ISelection selection) {
>         page.selectionChanged (part, selection);
68,71d87
<             if (result == null) {
<                 result = nextStackCandidate;
<             } else if (result != nextStackCandidate) {
<                 return null;
73a93,97
>     public void dispose () {
>         super.dispose ();
>         if (page != null) {
>             page.dispose ();
>             page = null;
75,75d98
<         return result;
78,80d100
<     static CommandStack getCommandStack (TransactionalEditingDomain editingDomain) {
<         if (editingDomain == null) {
<             return null;
81a104,115
> 
>     public boolean shouldUseExtraSpace () {
>         return true;
>     }
> 
>     public void update (final Notification notification, EObject element) {
>         if (! isDisposed ()) {
>             postUpdateRequest (new Runnable () {
> 
>                 public void run () {
>                     if (! isDisposed () && ! isNotifierDeleted (notification)) refresh ();
> 
82,84d103
<         CommandStackAdapterManager adapterManager = (CommandStackAdapterManager) EcoreUtil.getExistingAdapter (editingDomain.getResourceSet (), CommandStackAdapterManager.class);
<         if (adapterManager == null || adapterManager.isReleased ()) {
<             return null;
85a117,117
> 
86,86d116
<         return adapterManager.getCommandStack ();
88a120,120
>             );
89,91d119
<     protected PropertySourceProvider getPropertySourceProvider () {
<         if (myPropertySourceProvider == null) {
<             myPropertySourceProvider = new PropertySourceProvider (getItemProvidersAdapterFactory ());
93,93d121
<         return myPropertySourceProvider;
95a124,126
>     public void handleElementCreatedEvent (Notification notification, EObject owner, EObject newElement) {
>         update (notification, owner);
>     }
96,96d123
<     protected abstract AdapterFactory getItemProvidersAdapterFactory ();
97a128,129
>     public void handleElementDeletedEvent (Notification notification, EObject owner, EObject oldElement) {
>         update (notification, owner);
98,99d127
<     protected Object transformSelection (Object selected) {
<         return selected;
101a132,141
>     public MFilter getFilter () {
>         MFilter lifeCycleEventFilter = new MFilter.Or (MFilter.ELEMENT_CREATED_FILTER, MFilter.ELEMENT_DELETED_FILTER);
>         return new MFilter.Or (lifeCycleEventFilter, MFilter.ELEMENT_MODIFIED_FILTER);
>     }
> 
>     protected boolean addToEObjectList (Object object) {
>         return true;
>     }
> 
>     protected void handleException (MSLActionAbandonedException exception) {
102,102d100
<     @Override
103,103c101,101
<     public void refresh () {
---
>     public void refresh () {
104,104c102,102
<         page.refresh ();
---
>         page.refresh ();
107,109d143
<     private PropertySourceProvider myPropertySourceProvider;
<     private CommandStack myCommandStack;
<     private RootUndoablePropertySheetEntry myPropertySheetEntry;
