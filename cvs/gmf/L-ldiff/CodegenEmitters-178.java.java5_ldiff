8a9,10
> import java.util.ArrayList;
> 
31,40d32
< import org.eclipse.gmf.internal.codegen.dispatch.CachingEmitterFactory;
< 
< import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactory;
< 
< import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactoryImpl;
< 
< import org.eclipse.gmf.internal.codegen.dispatch.NoSuchTemplateException;
< 
< import org.eclipse.gmf.internal.codegen.dispatch.StaticTemplateRegistry;
< 
47,48d38
< import org.eclipse.gmf.internal.common.codegen.JETEmitterAdapter;
< 
64a55,56
>     private final ResourceManager myResourceManager;
>     private final URL [] myLocations;
65,68d54
<     private static final String TEMPLATES_PLUGIN_ID = "org.eclipse.gmf.codegen";
<     private final EmitterFactory myFactory;
<     private final String [] myTemplatePath;
<     private ResourceManager myResourceManager;
69a58,61
>     public CodegenEmitters (boolean useBaseTemplatesOnly, String templateDirectory, boolean includeDynamicModelTemplates) {
>         ArrayList < URL > urls = new ArrayList < URL > (5);
>         if (! useBaseTemplatesOnly) {
>             urls.add (getDynamicTemplatesURL (templateDirectory));
69,69c57,57
< 
---
> 
70,83d57
<     public CodegenEmitters (boolean usePrecompiled, String templateDirectory) {
<         this (usePrecompiled, templateDirectory, getDefaultVariables (), new StaticTemplateRegistry (CodegenEmitters.class.getClassLoader ()));
<     }
< 
<     public CodegenEmitters (boolean usePrecompiled, String templateDirectory, String [] variables, StaticTemplateRegistry registry) {
<         final URL baseURL = getTemplatesBundle ().getEntry ("/templates/");
<         final URL dynModelBase = getTemplatesBundle ().getEntry ("/templates-dynmodel/");
<         final URL dynamicURL = usePrecompiled ? null : getDynamicTemplatesURL (templateDirectory);
<         myTemplatePath = new String [] {dynamicURL != null ? dynamicURL.toString () : null, baseURL.toString ()};
<         myFactory = new CachingEmitterFactory (new EmitterFactoryImpl (getTemplatePath (), registry, usePrecompiled, variables));
<         if (dynamicURL == null) {
<             myResourceManager = new BundleResourceManager (baseURL, dynModelBase);
<         } else {
<             myResourceManager = new BundleResourceManager (dynamicURL, baseURL, dynModelBase);
84a63,68
>         if (includeDynamicModelTemplates) {
>             urls.add (getTemplatesBundle ().getEntry ("/templates-dynmodel/"));
>         }
>         urls.add (getTemplatesBundle ().getEntry ("/templates/"));
>         myLocations = urls.toArray (new URL [urls.size ()]);
>         myResourceManager = new BundleResourceManager (myLocations);
84,84c62,62
<         }
---
>         }
100,111d83
<     public TextEmitter retrieve (Class < ? > key) throws UnexpectedBehaviourException {
<         try {
<             return new JETEmitterAdapter (myFactory.acquireEmitter (key));
<         } catch (NoSuchTemplateException ex) {
<             throw new UnexpectedBehaviourException (ex.getMessage (), ex);
<         }
<     }
< 
<     private String [] getTemplatePath () {
<         return myTemplatePath;
<     }
< 
113,113d84
<         return Platform.getBundle (TEMPLATES_PLUGIN_ID);
122,122d93
<                 String pluginID = "org.eclipse.gmf.codegen";
123,123c94,94
<                 Platform.getLog (Platform.getBundle (pluginID)).log (new Status (IStatus.ERROR, pluginID, 0, "Incorrecct dynamic templates location", e));
---
>                 Platform.getLog (getTemplatesBundle ()).log (new Status (IStatus.ERROR, getTemplatesBundle ().getSymbolicName (), 0, "Incorrecct dynamic templates location", e));
735a707,712
>         String [] templatesPath = new String [myLocations.length];
>         for (int i = 0;
>         i < myLocations.length; i ++) {
>             templatesPath [i] = myLocations [i].toString ();
>         }
>         String templateLocation = JETCompiler.find (templatesPath, relativePath);
736,736d706
<         String templateLocation = JETCompiler.find (getTemplatePath (), relativePath);
746a85,85
>         return Platform.getBundle ("org.eclipse.gmf.codegen");
747,750d84
<     protected static String [] getDefaultVariables () {
<         return new String [] {"org.eclipse.emf.codegen", "org.eclipse.emf.codegen.ecore", "org.eclipse.emf.common", "org.eclipse.emf.ecore", "org.eclipse.gmf.common", "org.eclipse.gmf.codegen",};
<     }
< 
