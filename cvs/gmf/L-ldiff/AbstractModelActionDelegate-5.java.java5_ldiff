2a3,6
> import org.eclipse.core.commands.ExecutionException;
> 
> import org.eclipse.core.runtime.IAdaptable;
> 
10a9,9
> import org.eclipse.core.runtime.IStatus;
11,11d8
< import org.eclipse.gmf.runtime.emf.core.exceptions.MSLActionAbandonedException;
12a11,11
> import org.eclipse.core.runtime.NullProgressMonitor;
12,12c10,10
< 
---
> 
13,13d10
< import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;
14a13,20
> import org.eclipse.core.runtime.Status;
> 
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
> 
> import org.eclipse.emf.workspace.AbstractEMFOperation;
> 
> import org.eclipse.gmf.runtime.common.core.util.Log;
> 
14,14c12,12
< 
---
> 
18a31,32
> import org.eclipse.gmf.runtime.emf.ui.internal.MslUIStatusCodes;
> 
19a34,34
>     private IStatus status;
25a41,41
>         if (isReadOnly ()) {
27,27c43,43
<             OperationUtil.runAsRead (new Runnable () {
---
>                 getEditingDomain ().runExclusive (new Runnable () {
35a52,60
>             } catch (InterruptedException e) {
>                 Trace.catching (MslUIPlugin.getDefault (), MslUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "run", e);
>             }
>         } else {
>             AbstractEMFOperation operation = new AbstractEMFOperation (getEditingDomain (), getLabel ()) {
> 
>                 protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
>                     AbstractModelActionDelegate.super.run (progressMonitor);
>                     return getStatus ();
36,37d51
<         } catch (MSLActionAbandonedException e) {
<             Trace.trace (MslUIPlugin.getDefault (), MslUIDebugOptions.MODEL_OPERATIONS, "MSLActionAbandonedException");
38a62,90
> 
>                 ;
>             }
> 
>             ;
>             try {
>                 getActionManager ().getOperationHistory ().execute (operation, new NullProgressMonitor (), null);
>             } catch (ExecutionException e) {
>                 Trace.catching (MslUIPlugin.getDefault (), MslUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "run", e);
>                 Log.error (MslUIPlugin.getDefault (), MslUIStatusCodes.IGNORED_EXCEPTION_WARNING, e.getLocalizedMessage (), e);
>             }
>         }
>     }
> 
>     protected abstract TransactionalEditingDomain getEditingDomain ();
> 
>     protected boolean isReadOnly () {
>         return false;
>     }
> 
>     protected IStatus getStatus () {
>         if (status == null) {
>             return Status.OK_STATUS;
>         }
>         return status;
>     }
> 
>     protected void setStatus (IStatus status) {
>         this.status = status;
