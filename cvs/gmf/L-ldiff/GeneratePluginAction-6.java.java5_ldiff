52a53,54
> import org.eclipse.gmf.gmfgraph.util.FigureQualifiedNameSwitch;
> 
54a57,58
> import org.eclipse.gmf.gmfgraph.util.RuntimeLiteFQNSwitch;
> 
62a69,70
> import org.eclipse.jface.dialogs.IDialogConstants;
> 
63,63c71,71
< import org.eclipse.jface.dialogs.IInputValidator;
---
> import org.eclipse.jface.dialogs.IInputValidator;
65,65c67,67
< import org.eclipse.jface.dialogs.InputDialog;
---
> import org.eclipse.jface.dialogs.Dialog;
72a79,94
> import org.eclipse.swt.SWT;
> 
> import org.eclipse.swt.events.ModifyEvent;
> 
> import org.eclipse.swt.events.ModifyListener;
> 
> import org.eclipse.swt.layout.GridData;
> 
> import org.eclipse.swt.widgets.Button;
> 
> import org.eclipse.swt.widgets.Composite;
> 
> import org.eclipse.swt.widgets.Control;
> 
> import org.eclipse.swt.widgets.Label;
> 
74a97,98
> import org.eclipse.swt.widgets.Text;
> 
97a122,123
>         StandaloneGeneratorOptionsDialog dialog = new StandaloneGeneratorOptionsDialog (getShell (), null, true, this);
>         if (dialog.open () != IDialogConstants.OK_ID) {
98,99d121
<         InputDialog readInputDlg = new InputDialog (getShell (), "Specify plug-in id", "Please enter name of plug-in/main package", null, this);
<         if (readInputDlg.open () != InputDialog.OK) {
101a126,126
>         String pluginId = dialog.getPluginId ();
102a128,134
>         StandaloneGenerator.Config config = new StandaloneGenerator.ConfigImpl (pluginId, pluginId, false);
>         FigureQualifiedNameSwitch fqnSwitch;
>         if (dialog.isUseRuntimeFigures ()) {
>             fqnSwitch = new RuntimeFQNSwitch ();
>         } else {
>             fqnSwitch = new RuntimeLiteFQNSwitch ();
>         }
103,103d127
<         StandaloneGenerator.Config config = new StandaloneGenerator.ConfigImpl (readInputDlg.getValue (), readInputDlg.getValue (), false);
104,104c135,135
<         final StandaloneGenerator generator = new StandaloneGenerator (input, config, new RuntimeFQNSwitch ());
---
>         final StandaloneGenerator generator = new StandaloneGenerator (input, config, fqnSwitch);
217a249,332
>     private static class StandaloneGeneratorOptionsDialog extends Dialog {
>         private IInputValidator pluginIdValidator;
>         private Text pluginIdText;
>         private Text errorMessageText;
>         private Button useRuntimeFiguresButton;
>         private String pluginId;
>         private boolean useRuntimeFigures;
> 
>         public StandaloneGeneratorOptionsDialog (Shell parentShell, String initialPluginId, boolean initialUseRuntimeFigures, IInputValidator pluginIdValidator) {
>             super (parentShell);
>             pluginId = initialPluginId;
>             if (pluginId == null) {
>                 pluginId = "";
>             }
>             this.pluginIdValidator = pluginIdValidator;
>             useRuntimeFigures = initialUseRuntimeFigures;
>         }
> 
>         protected void configureShell (Shell newShell) {
>             super.configureShell (newShell);
>             newShell.setText ("Figure Gallery Generator");
>         }
> 
>         protected Control createDialogArea (Composite parent) {
>             Composite result = (Composite) super.createDialogArea (parent);
>             Label label = new Label (result, SWT.WRAP);
>             label.setText ("Please specify the name of plug-in/main package");
>             GridData data = new GridData (GridData.GRAB_HORIZONTAL | GridData.GRAB_VERTICAL | GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_CENTER);
>             data.widthHint = convertHorizontalDLUsToPixels (IDialogConstants.MINIMUM_MESSAGE_AREA_WIDTH);
>             label.setLayoutData (data);
>             label.setFont (parent.getFont ());
>             pluginIdText = new Text (result, SWT.SINGLE | SWT.BORDER);
>             pluginIdText.setLayoutData (new GridData (GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
>             pluginIdText.addModifyListener (new ModifyListener () {
> 
>                 public void modifyText (ModifyEvent e) {
>                     validateInput ();
>                 }
> 
>             }
> 
>             );
>             useRuntimeFiguresButton = new Button (result, SWT.CHECK);
>             useRuntimeFiguresButton.setText ("Utilize enhanced features of GMF runtime");
>             useRuntimeFiguresButton.setSelection (useRuntimeFigures);
>             errorMessageText = new Text (result, SWT.READ_ONLY);
>             errorMessageText.setLayoutData (new GridData (GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
>             errorMessageText.setBackground (errorMessageText.getDisplay ().getSystemColor (SWT.COLOR_WIDGET_BACKGROUND));
>             return result;
>         }
> 
>         protected void validateInput () {
>             String errorMessage = null;
>             if (pluginIdValidator != null) {
>                 errorMessage = pluginIdValidator.isValid (pluginIdText.getText ());
>             }
>             setErrorMessage (errorMessage);
>         }
> 
>         public void setErrorMessage (String errorMessage) {
>             errorMessageText.setText (errorMessage == null ? "" : errorMessage);
>             errorMessageText.getParent ().update ();
>             Control button = getButton (IDialogConstants.OK_ID);
>             if (button != null) {
>                 button.setEnabled (errorMessage == null);
>             }
>         }
> 
>         protected void okPressed () {
>             useRuntimeFigures = useRuntimeFiguresButton.getSelection ();
>             pluginId = pluginIdText.getText ();
>             super.okPressed ();
>         }
> 
>         public String getPluginId () {
>             return pluginId;
>         }
> 
>         public boolean isUseRuntimeFigures () {
>             return useRuntimeFigures;
>         }
> 
>     }
> 
