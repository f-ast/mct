295a296,299
>     public EReference getElementInitializer_MappingEntry () {
>         return (EReference) elementInitializerEClass.getEStructuralFeatures ().get (0);
>     }
> 
311a316,319
>     public EReference getFeatureValueSpec_FeatureSeqInitializer () {
>         return (EReference) featureValueSpecEClass.getEStructuralFeatures ().get (1);
>     }
> 
465a474,474
>         createEReference (elementInitializerEClass, ELEMENT_INITIALIZER__MAPPING_ENTRY);
469a479,479
>         createEReference (featureValueSpecEClass, FEATURE_VALUE_SPEC__FEATURE_SEQ_INITIALIZER);
529,529c539,539
<         initEReference (getMappingEntry_DomainInitializer (), this.getElementInitializer (), null, "domainInitializer", null, 0, 1, MappingEntry.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
---
>         initEReference (getMappingEntry_DomainInitializer (), this.getElementInitializer (), this.getElementInitializer_MappingEntry (), "domainInitializer", null, 0, 1, MappingEntry.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
568a579,579
>         initEReference (getElementInitializer_MappingEntry (), this.getMappingEntry (), this.getMappingEntry_DomainInitializer (), "mappingEntry", null, 1, 1, ElementInitializer.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
570,570c581,581
<         initEReference (getFeatureSeqInitializer_Initializers (), this.getFeatureValueSpec (), null, "initializers", null, 1, - 1, FeatureSeqInitializer.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
---
>         initEReference (getFeatureSeqInitializer_Initializers (), this.getFeatureValueSpec (), this.getFeatureValueSpec_FeatureSeqInitializer (), "initializers", null, 1, - 1, FeatureSeqInitializer.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
572a584,584
>         initEReference (getFeatureValueSpec_FeatureSeqInitializer (), this.getFeatureSeqInitializer (), this.getFeatureSeqInitializer_Initializers (), "featureSeqInitializer", null, 1, 1, FeatureValueSpec.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
602,602c615,615
<         createMetaAnnotations ();
---
>         createMetaAnnotations ();
616,616c628,628
<         addAnnotation (getLinkConstraints_SourceEnd (), source, new String [] {"def", "context", "ocl", "if linkMapping.domainMetaElement.oclIsUndefined() then linkMapping.linkMetaFeature.eContainingClass else linkMapping.containmentFeature.eContainingClass endif"});
---
>         addAnnotation (getLinkConstraints_SourceEnd (), source, new String [] {"def", "context", "ocl", "let lm:LinkMapping=linkMapping in if lm.sourceMetaFeature.oclIsUndefined() then (if lm.containmentFeature.oclIsUndefined() then lm.linkMetaFeature.eContainingClass else lm.containmentFeature.eContainingClass endif) else lm.sourceMetaFeature.oclAsType(ecore::EReference).eReferenceType endif"});
619,619c631,631
<         addAnnotation (getLinkConstraints_TargetEnd (), source, new String [] {"def", "variable", "name", "oppositeEnd", "type.ocl", "if linkMapping.domainMetaElement.oclIsUndefined() then linkMapping.linkMetaFeature.eContainingClass else linkMapping.containmentFeature.eContainingClass endif"});
---
>         addAnnotation (getLinkConstraints_TargetEnd (), source, new String [] {"def", "variable", "name", "oppositeEnd", "type.ocl", "let lm:LinkMapping=linkMapping in if lm.sourceMetaFeature.oclIsUndefined() then (if lm.containmentFeature.oclIsUndefined() then lm.linkMetaFeature.eContainingClass else lm.containmentFeature.eContainingClass endif) else lm.sourceMetaFeature.oclAsType(ecore::EReference).eReferenceType endif"});
629a642,656
>         addAnnotation (mappingEClass, source, new String [] {"ocl", "nodes->forAll(n|n.containmentFeature.oclIsUndefined() and not n.domainMetaElement.oclIsUndefined() implies links->exists(let r:ecore::EReference= linkMetaFeature.oclAsType(ecore::EReference) in r.containment and r.eReferenceType.isSuperTypeOf(n.domainMetaElement)))", "description", "Phantom nodes that are not targeted by a link mapping exist"});
>         addAnnotation (getMappingEntry_DomainInitializer (), source, new String [] {"ocl", "not domainInitializer.oclIsUndefined() implies not domainMetaElement.oclIsUndefined()", "description", "\'Domain Element\' must be set in mapping with \'Element Initializers\'"});
>         addAnnotation (getMappingEntry_ContainmentFeature (), source, new String [] {"ocl", "not containmentFeature.oclIsUndefined() implies containmentFeature.containment", "description", "Containment EReference expected"});
>         addAnnotation (abstractNodeMappingEClass, source, new String [] {"ocl", "not (domainMetaElement.oclIsUndefined()  and containmentFeature.oclIsUndefined())", "description", "Either domain meta element or containment feature must be set in node mapping"});
>         addAnnotation (abstractNodeMappingEClass, source, new String [] {"ocl", "not domainMetaElement.oclIsUndefined() implies containmentFeature.oclIsUndefined() or containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement)", "description", "\'Domain Element\' must be the same or extend the type referenced by \'Containment Feature\'"});
>         addAnnotation (getAbstractNodeMapping_EditFeature (), source, new String [] {"ocl", "not editFeature.oclIsUndefined() implies getDomainContext().oclIsUndefined() or editFeature.eContainingClass.isSuperTypeOf(getDomainContext())", "description", "The Edit Feature must be owned by the domain context EClass or its super type"});
>         addAnnotation (childNodeMappingEClass, source, new String [] {"ocl", "not containmentFeature.oclIsUndefined() ", "description", "The child node mapping containmentFeature must be set"});
>         addAnnotation (linkMappingEClass, source, new String [] {"ocl", "domainMetaElement.oclIsUndefined() implies containmentFeature.oclIsUndefined() and sourceMetaFeature.oclIsUndefined()", "description", "Link mapping without \'Domain Element\' class does not use \'Containment Feature\' and \'Source Feature\'"});
>         addAnnotation (linkMappingEClass, source, new String [] {"ocl", "not domainMetaElement.oclIsUndefined()  implies containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement)", "description", "\'Containment Feature\' must reference the same class or super type of \'Domain Element\' EClass"});
>         addAnnotation (getLinkMapping_LabelEditFeature (), source, new String [] {"ocl", "not labelEditFeature.oclIsUndefined() implies getDomainContext().oclIsUndefined() or labelEditFeature.eContainingClass.isSuperTypeOf(getDomainContext())", "description", "\'Label Edit Feature\' must be owned by the domain context EClass or its super type"});
>         addAnnotation (getLinkMapping_LabelDisplayFeature (), source, new String [] {"ocl", "not labelDisplayFeature.oclIsUndefined() implies getDomainContext().oclIsUndefined() or labelDisplayFeature.eContainingClass.isSuperTypeOf(getDomainContext())", "description", "\'Label Display Feature\' must be owned by the domain context EClass or its super type"});
>         addAnnotation (getLinkMapping_SourceMetaFeature (), source, new String [] {"ocl", "not domainMetaElement.oclIsUndefined() implies sourceMetaFeature.oclIsUndefined() or sourceMetaFeature.eContainingClass.isSuperTypeOf(domainMetaElement)", "description", "\'Source Feature\' must be owned by the link \'Domain Element\' or its super type"});
>         addAnnotation (getLinkMapping_LinkMetaFeature (), source, new String [] {"ocl", "not(domainMetaElement.oclIsUndefined() or linkMetaFeature.oclIsUndefined()) implies linkMetaFeature.eContainingClass.isSuperTypeOf(domainMetaElement)", "description", "\'Target Feature\' must be owned by the link \'Domain Element\' or its super type"});
>         addAnnotation (linkConstraintsEClass, source, new String [] {"ocl", "not (sourceEnd.oclIsUndefined() and targetEnd.oclIsUndefined())", "description", "Either \'sourceEnd\' or \'targetEnd\' constraint must be specified"});
>         addAnnotation (getFeatureValueSpec_Feature (), source, new String [] {"ocl", "feature.eContainingClass.isSuperTypeOf(featureSeqInitializer.mappingEntry.getDomainContext())", "description", "Initialized \'Feature\' must be owned by \'Domain Element\' or its super type"});
630,636d641
<         addAnnotation (getMappingEntry_DomainInitializer (), source, new String [] {"ocl", "let i : FeatureSeqInitializer = domainInitializer.oclAsType( FeatureSeqInitializer) in i.oclIsUndefined() or i.initializers.feature.eContainingClass->forAll(c|c.isSuperTypeOf(domainMetaElement))"});
<         addAnnotation (getMappingEntry_ContainmentFeature (), source, new String [] {"ocl", "containmentFeature.oclIsUndefined() or (containmentFeature.containment and containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement))"});
<         addAnnotation (getAbstractNodeMapping_EditFeature (), source, new String [] {"ocl", "editFeature.oclIsUndefined() or (not domainMetaElement.oclIsUndefined() and editFeature.eContainingClass.isSuperTypeOf(domainMetaElement)) or containmentFeature.eType.oclAsType(ecore::EClass).eAllAttributes->includes(editFeature)"});
<         addAnnotation (getLinkMapping_LabelEditFeature (), source, new String [] {"ocl", "labelEditFeature.oclIsUndefined() or labelEditFeature.eContainingClass.isSuperTypeOf(domainMetaElement)"});
<         addAnnotation (getLinkMapping_LabelDisplayFeature (), source, new String [] {"ocl", "labelDisplayFeature.oclIsUndefined() or labelDisplayFeature.eContainingClass.isSuperTypeOf(domainMetaElement)"});
<         addAnnotation (getLinkMapping_SourceMetaFeature (), source, new String [] {"ocl", "domainMetaElement.oclIsUndefined() or sourceMetaFeature.eContainingClass.isSuperTypeOf(domainMetaElement)"});
<         addAnnotation (getLinkMapping_LinkMetaFeature (), source, new String [] {"ocl", "domainMetaElement.oclIsUndefined() or linkMetaFeature.eContainingClass.isSuperTypeOf(domainMetaElement)"});
