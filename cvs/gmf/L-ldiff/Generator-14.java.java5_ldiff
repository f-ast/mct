5,6d4
< import java.util.ArrayList;
< 
9,10d6
< import java.util.List;
< 
15,18d10
< import org.eclipse.emf.ecore.EClass;
< 
< import org.eclipse.emf.ecore.EObject;
< 
179a172,177
>         c.registerFactor (GMFGenPackage.eINSTANCE.getGenNode (), 2);
>         c.registerFactor (GMFGenPackage.eINSTANCE.getGenCompartment (), 2);
>         c.registerFactor (GMFGenPackage.eINSTANCE.getGenLink (), 2);
>         c.registerFactor (GMFGenPackage.eINSTANCE.getGenNodeLabel (), 2);
>         c.registerFactor (GMFGenPackage.eINSTANCE.getGenLinkLabel (), 2);
>         int total = c.getTotal (myDiagram);
180,190d171
<         c.curiousAbout (GMFGenPackage.eINSTANCE.getGenNode ());
<         c.curiousAbout (GMFGenPackage.eINSTANCE.getGenCompartment ());
<         c.curiousAbout (GMFGenPackage.eINSTANCE.getGenLink ());
<         c.curiousAbout (GMFGenPackage.eINSTANCE.getGenNodeLabel ());
<         c.curiousAbout (GMFGenPackage.eINSTANCE.getGenLinkLabel ());
<         c.count (myDiagram);
<         int total = 2 * c.getCount (GMFGenPackage.eINSTANCE.getGenNode ());
<         total += 2 * c.getCount (GMFGenPackage.eINSTANCE.getGenCompartment ());
<         total += 2 * c.getCount (GMFGenPackage.eINSTANCE.getGenLink ());
<         total += 2 * c.getCount (GMFGenPackage.eINSTANCE.getGenNodeLabel ());
<         total += 2 * c.getCount (GMFGenPackage.eINSTANCE.getGenLinkLabel ());
193a181,181
>         setupProgressMonitor (null, total);
194,232d180
<         setupProgressMonitor ("Generation in progress...", total);
<     }
< 
<     private static final class Counter {
<         private final List myAttractions = new ArrayList ();
<         private int [] myHits;
< 
<         public void curiousAbout (EClass eClass) {
<             myAttractions.add (eClass);
<         }
< 
<         public void count (EObject start) {
<             myHits = new int [myAttractions.size ()];
<             final EClass [] attractions = (EClass []) myAttractions.toArray (new EClass [myAttractions.size ()]);
<             doCount (start.eClass (), attractions);
<             for (Iterator it = start.eAllContents ();
<             it.hasNext ();) {
<                 EObject next = (EObject) it.next ();
<                 doCount (next.eClass (), attractions);
<             }
<         }
< 
<         private void doCount (EClass eClass, EClass [] attractions) {
<             for (int i = 0;
<             i < attractions.length; i ++) {
<                 if (attractions [i].isSuperTypeOf (eClass)) {
<                     myHits [i] ++;
<                 }
<             }
<         }
< 
<         public int getCount (EClass eClass) {
<             int index = myAttractions.indexOf (eClass);
<             if (index == - 1) {
<                 throw new IllegalArgumentException ("No class " + eClass + " was previously registered with curiousAbout(EClass)");
<             }
<             return myHits [index];
<         }
< 
