5,6d4
< import java.util.Iterator;
< 
13,13c25,25
< import org.eclipse.emf.ecore.ETypedElement;
---
> import org.eclipse.emf.ecore.ETypedElement;
15,15c7,7
< import org.eclipse.emf.ocl.expressions.CollectionItem;
---
> import org.eclipse.emf.ecore.EClass;
15a8,8
> 
17,17c13,13
< import org.eclipse.emf.ocl.expressions.CollectionLiteralExp;
---
> import org.eclipse.emf.ecore.EEnumLiteral;
19,19c15,15
< import org.eclipse.emf.ocl.expressions.CollectionLiteralPart;
---
> import org.eclipse.emf.ecore.EObject;
21,21c67,67
< import org.eclipse.emf.ocl.expressions.ExpressionsFactory;
---
> import org.eclipse.ocl.expressions.ExpressionsFactory;
23,23c17,17
< import org.eclipse.emf.ocl.expressions.OCLExpression;
---
> import org.eclipse.emf.ecore.EOperation;
25,25c19,19
< import org.eclipse.emf.ocl.expressions.TypeExp;
---
> import org.eclipse.emf.ecore.EPackage;
27,27c69,69
< import org.eclipse.emf.ocl.expressions.Variable;
---
> import org.eclipse.ocl.expressions.Variable;
29,29c57,57
< import org.eclipse.emf.ocl.expressions.util.ExpressionsUtil;
---
> import org.eclipse.ocl.ecore.Constraint;
31,31c59,59
< import org.eclipse.emf.ocl.parser.EcoreEnvironment;
---
> import org.eclipse.ocl.ecore.EcoreEnvironment;
33,33c61,61
< import org.eclipse.emf.ocl.parser.EcoreEnvironmentFactory;
---
> import org.eclipse.ocl.ecore.EcoreEnvironmentFactory;
35,35c47,47
< import org.eclipse.emf.ocl.parser.Environment;
---
> import org.eclipse.ocl.Environment;
37,37c21,21
< import org.eclipse.emf.ocl.parser.EnvironmentFactory;
---
> import org.eclipse.emf.ecore.EParameter;
39,39c49,49
< import org.eclipse.emf.ocl.parser.ParserException;
---
> import org.eclipse.ocl.ParserException;
41,41c23,23
< import org.eclipse.emf.ocl.parser.SemanticException;
---
> import org.eclipse.emf.ecore.EStructuralFeature;
42a43,43
> import org.eclipse.gmf.internal.validate.expressions.IEvaluationEnvironment;
43,43c51,51
< import org.eclipse.emf.ocl.query.Query;
---
> import org.eclipse.ocl.Query;
44a45,45
> import org.eclipse.gmf.internal.validate.expressions.IParseEnvironment;
45,45c53,53
< import org.eclipse.emf.ocl.query.QueryFactory;
---
> import org.eclipse.ocl.ecore.CallOperationAction;
47,47c55,55
< import org.eclipse.emf.ocl.types.CollectionType;
---
> import org.eclipse.ocl.ecore.CollectionType;
49,49c65,65
< import org.eclipse.emf.ocl.types.TypeType;
---
> import org.eclipse.ocl.ecore.TypeType;
51,51c63,63
< import org.eclipse.emf.ocl.types.impl.TypeUtil;
---
> import org.eclipse.ocl.ecore.SendSignalAction;
53,53d52
< import org.eclipse.emf.ocl.types.util.Types;
55,55c27,27
< import org.eclipse.gmf.internal.validate.DebugOptions;
---
> import org.eclipse.gmf.internal.validate.DebugOptions;
57,57c29,29
< import org.eclipse.gmf.internal.validate.DefUtils;
---
> import org.eclipse.gmf.internal.validate.DefUtils;
59,59c31,31
< import org.eclipse.gmf.internal.validate.EDataTypeConversion;
---
> import org.eclipse.gmf.internal.validate.EDataTypeConversion;
61,61c33,33
< import org.eclipse.gmf.internal.validate.GMFValidationPlugin;
---
> import org.eclipse.gmf.internal.validate.GMFValidationPlugin;
63,63c35,35
< import org.eclipse.gmf.internal.validate.Messages;
---
> import org.eclipse.gmf.internal.validate.Messages;
65,65c37,37
< import org.eclipse.gmf.internal.validate.StatusCodes;
---
> import org.eclipse.gmf.internal.validate.StatusCodes;
67,67c39,39
< import org.eclipse.gmf.internal.validate.Trace;
---
> import org.eclipse.gmf.internal.validate.Trace;
69,69c41,41
< import org.eclipse.gmf.internal.validate.expressions.AbstractExpression;
---
> import org.eclipse.gmf.internal.validate.expressions.AbstractExpression;
70,73d41
< 
< import org.eclipse.gmf.internal.validate.expressions.IEvaluationEnvironment;
< 
< import org.eclipse.gmf.internal.validate.expressions.IParseEnvironment;
76a73,74
>     private Query < EClassifier, EClass, EObject > query;
>     private Environment < EPackage, EClassifier, EOperation, EStructuralFeature, EEnumLiteral, EParameter, EObject, CallOperationAction, SendSignalAction, Constraint, EClass, EObject > env;
77,77d72
<     private Query query;
81a79,80
>             EcoreEnvironmentFactory factory = EcoreEnvironmentFactory.INSTANCE;
>             org.eclipse.ocl.ecore.OCL ocl = null;
82a82,83
>                 if (extEnv.getImportRegistry () != null) {
>                     factory = new EcoreEnvironmentFactory (extEnv.getImportRegistry ());
82,82c81,81
<             if (extEnv == null) {
---
>             if (extEnv != null) {
83,83d81
<                 this.query = QueryFactory.eINSTANCE.createQuery (body, context);
84,84c84,84
<             } else {
---
>                 }
84a85,86
>                 ocl = org.eclipse.ocl.ecore.OCL.newInstance (factory);
>                 this.env = ocl.getEnvironment ();
85,86d84
<                 EnvironmentFactory factory = extEnv.getImportRegistry () == null ? EnvironmentFactory.ECORE_INSTANCE : new EcoreEnvironmentFactory (extEnv.getImportRegistry ());
<                 Environment env = factory.createClassifierContext (context);
87,87c87,87
<                 for (Iterator it = extEnv.getVariableNames ().iterator ();
---
>                 for (String varName : extEnv.getVariableNames ()) {
88,89d87
<                 it.hasNext ();) {
<                     String varName = (String) it.next ();
91,91c89,89
<                     Variable varDecl = ExpressionsFactory.eINSTANCE.createVariable ();
---
>                     Variable < EClassifier, EParameter > varDecl = ExpressionsFactory.eINSTANCE.createVariable ();
94,94c92,92
<                     env.addElement (varDecl.getName (), varDecl, false);
---
>                     env.addElement (varDecl.getName (), varDecl, true);
95a94,96
>             } else {
>                 ocl = org.eclipse.ocl.ecore.OCL.newInstance (EcoreEnvironmentFactory.INSTANCE);
>                 this.env = (EcoreEnvironment) ocl.getEnvironment ();
96,97d93
<                 OCLExpression oclExpression = ExpressionsUtil.createQuery (env, body, true);
<                 this.query = QueryFactory.eINSTANCE.createQuery (oclExpression);
98a98,100
>             org.eclipse.ocl.ecore.OCL.Helper helper = ocl.createOCLHelper ();
>             helper.setContext (context);
>             this.query = ocl.createQuery (helper.createQuery (body));
118a121,123
>         if (env == null) {
>             return false;
>         }
119,119c124,124
<         EClassifier oclType = EcoreEnvironment.getOCLType (ecoreType);
---
>         EClassifier oclType = env.getUMLReflection ().getOCLType (ecoreType);
126a132,134
>         if (env == null || typedElement.getEType () == null) {
>             return false;
>         }
127,127c135,135
<         EClassifier oclType = EcoreEnvironment.getOCLType (typedElement);
---
>         EClassifier oclType = env.getUMLReflection ().getOCLType (typedElement);
142a151,156
>         if (query != null) {
>             query.getEvaluationEnvironment ().clear ();
>             for (String varName : extEnvironment.getVariableNames ()) {
>                 query.getEvaluationEnvironment ().add (varName, extEnvironment.getValueOf (varName));
>             }
>         }
146,146c160,160
<     private static Object filterOCLInvalid (Object object) {
---
>     private Object filterOCLInvalid (Object object) {
147,147c161,161
<         return object == Types.OCL_INVALID ? null : object;
---
>         return (env != null && object == env.getOCLStandardLibrary ().getOclInvalid ()) ? null : object;
150,150c164,164
<     boolean isOclConformantTo (EClassifier anotherOclType) {
---
>     private boolean isOclConformantTo (EClassifier anotherOclType) {
169,169c183,183
<             EClassifier thisRefferedClassifier = getReferredType (query.getExpression ());
---
>             EClassifier thisRefferedClassifier = ((TypeType) thisOclType).getReferredType ();
185,213d198
<     static EClassifier getReferredType (OCLExpression oclExpression) {
<         EClassifier referredType = null;
<         if (oclExpression instanceof TypeExp) {
<             referredType = ((TypeExp) oclExpression).getReferredType ();
<         } else if (oclExpression instanceof CollectionLiteralExp) {
<             for (Iterator it = ((CollectionLiteralExp) oclExpression).getPart ().iterator ();
<             it.hasNext ();) {
<                 CollectionLiteralPart nextPart = (CollectionLiteralPart) it.next ();
<                 if (nextPart.getType () instanceof TypeType && nextPart instanceof CollectionItem) {
<                     EClassifier nextType = getReferredType (((CollectionItem) nextPart).getItem ());
<                     if (referredType == null) {
<                         referredType = nextType;
<                     } else {
<                         try {
<                             if (nextType != null) {
<                                 referredType = TypeUtil.commonSuperType (referredType, nextType);
<                             }
<                         } catch (SemanticException e) {
<                             assert false;
<                             return null;
<                         }
<                     }
<                 }
<             }
<         }
< 
<         return referredType;
<     }
< 
