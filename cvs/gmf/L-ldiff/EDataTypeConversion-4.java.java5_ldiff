18,18c18,18
<     private static final Class [] [] integralsToFloatsArray = new Class [] [] {new Class [] {Byte.class, Float.class}, new Class [] {Short.class, Float.class}, new Class [] {Integer.class, Float.class}, new Class [] {Long.class, Double.class}, new Class [] {BigInteger.class, BigDecimal.class}};
---
>     private final Class < ? > [] [] integralsToFloatsArray = new Class [] [] {new Class [] {Byte.class, Float.class}, new Class [] {Short.class, Float.class}, new Class [] {Integer.class, Float.class}, new Class [] {Long.class, Double.class}, new Class [] {BigInteger.class, BigDecimal.class}};
19a20,20
>     private final List < Class < ? > > floats = Arrays.asList (new Class < ? > [] {Float.class, Double.class, BigDecimal.class,});
19,19c19,19
<     private static final List < Class > integrals = new ArrayList < Class > ();
---
>     private final List < Class < ? > > integrals = new ArrayList < Class < ? > > ();
20a22,22
>     public EDataTypeConversion () {
21,21d21
<     static {
28,29d28
<     private static final List floats = Arrays.asList (new Class [] {Float.class, Double.class, BigDecimal.class,});
< 
30,30c29,29
<     public static boolean isConvertable (EDataType leftDataType, EDataType rightDataType) {
---
>     public boolean isConvertable (EDataType leftDataType, EDataType rightDataType) {
36a36,36
>         Class < ? > leftClass = EcoreUtil.wrapperClassFor (leftDataType.getInstanceClass ());
37,37d35
<         Class leftClass = EcoreUtil.wrapperClassFor (leftDataType.getInstanceClass ());
38,38c37,37
<         Class rightClass = EcoreUtil.wrapperClassFor (rightDataType.getInstanceClass ());
---
>         Class < ? > rightClass = EcoreUtil.wrapperClassFor (rightDataType.getInstanceClass ());
45,45c44,44
<     private static boolean isConvertable (Class < ? > left, Class < ? > right) {
---
>     private boolean isConvertable (Class < ? > left, Class < ? > right) {
