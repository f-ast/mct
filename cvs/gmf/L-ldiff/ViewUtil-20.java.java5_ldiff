16a17,18
> import java.util.Stack;
> 
438a441,482
>     static public Set < Edge > getAllInnerEdges (View view) {
>         Set < View > allViews = new HashSet < View > ();
>         Set < Edge > edges = new HashSet < Edge > ();
>         Set < Edge > edgesConnectingViews = new HashSet < Edge > ();
>         getAllNestedViews (view, allViews);
>         for (View v : allViews) {
>             getAllEdgesFromView (v, edges);
>         }
>         Stack < Edge > connectionsPath = new Stack < Edge > ();
>         while (! edges.isEmpty ()) {
>             Edge edge = edges.iterator ().next ();
>             edges.remove (edge);
>             connectionsPath.add (edge);
>             View target = edge.getTarget ();
>             while (edges.contains (target)) {
>                 Edge targetEdge = (Edge) target;
>                 edges.remove (targetEdge);
>                 connectionsPath.add (targetEdge);
>                 target = targetEdge.getTarget ();
>             }
>             if (allViews.contains (target) || edgesConnectingViews.contains (target)) {
>                 edgesConnectingViews.addAll (connectionsPath);
>             }
>             connectionsPath.clear ();
>         }
>         return edgesConnectingViews;
>     }
> 
>     static private void getAllNestedViews (View view, Set < View > allViews) {
>         for (View childView : (List < View >) view.getChildren ()) {
>             getAllNestedViews (childView, allViews);
>             allViews.add (childView);
>         }
>     }
> 
>     static private void getAllEdgesFromView (View view, Set < Edge > edges) {
>         for (Edge e : (List < Edge >) view.getSourceEdges ()) {
>             getAllEdgesFromView (e, edges);
>             edges.add (e);
>         }
>     }
> 
