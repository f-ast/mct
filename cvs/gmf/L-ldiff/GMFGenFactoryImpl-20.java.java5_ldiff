8a9,9
> import org.eclipse.emf.ecore.EPackage;
9,9c11,11
< import org.eclipse.emf.ecore.impl.EFactoryImpl;
---
> import org.eclipse.emf.ecore.impl.EFactoryImpl;
11,11c15,15
< import org.eclipse.gmf.codegen.gmfgen.*;
---
> import org.eclipse.gmf.codegen.gmfgen.*;
12a13,13
> import org.eclipse.emf.ecore.plugin.EcorePlugin;
13a26,26
> 
13,13c25,25
< import org.eclipse.gmf.codegen.gmfgen.BasicNodeViewmap;
---
> import org.eclipse.gmf.codegen.gmfgen.FigureViewmap;
15a44,44
> 
15,15c43,43
< import org.eclipse.gmf.codegen.gmfgen.ColorAttributes;
---
> import org.eclipse.gmf.codegen.gmfgen.GenLinkConstraints;
20a63,63
> import org.eclipse.gmf.codegen.gmfgen.SnippetViewmap;
21,21d62
< import org.eclipse.gmf.codegen.gmfgen.DecoratedConnectionViewmap;
22,22c64,64
< 
---
> 
49,50d50
< import org.eclipse.gmf.codegen.gmfgen.LinkDecoration;
< 
72a75,86
>     public static GMFGenFactory init () {
>         try {
>             GMFGenFactory theGMFGenFactory = (GMFGenFactory) EPackage.Registry.INSTANCE.getEFactory ("http://www.eclipse.org/gmf/2005/GenModel");
>             if (theGMFGenFactory != null) {
>                 return theGMFGenFactory;
>             }
>         } catch (Exception exception) {
>             EcorePlugin.INSTANCE.log (exception);
>         }
>         return new GMFGenFactoryImpl ();
>     }
> 
105,110d118
<             case GMFGenPackage.BASIC_NODE_VIEWMAP :
<                 return createBasicNodeViewmap ();
<             case GMFGenPackage.DECORATED_CONNECTION_VIEWMAP :
<                 return createDecoratedConnectionViewmap ();
<             case GMFGenPackage.LINK_DECORATION :
<                 return createLinkDecoration ();
111,111c119,119
<             case GMFGenPackage.DIAGRAM_VIEWMAP :
---
>             case GMFGenPackage.FIGURE_VIEWMAP :
112,112c120,120
<                 return createDiagramViewmap ();
---
>                 return createFigureViewmap ();
113,114d120
<             case GMFGenPackage.COMPARTMENT_VIEWMAP :
<                 return createCompartmentViewmap ();
115,115c121,121
<             case GMFGenPackage.LABEL_VIEWMAP :
---
>             case GMFGenPackage.SNIPPET_VIEWMAP :
116,116c122,122
<                 return createLabelViewmap ();
---
>                 return createSnippetViewmap ();
142a296,298
>     public CompartmentPlacementKind createCompartmentPlacementKindFromString (EDataType eDataType, String initialValue) {
>         CompartmentPlacementKind result = CompartmentPlacementKind.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
142a149,154
>                 return createCompartmentPlacementKindFromString (eDataType, initialValue);
>             case GMFGenPackage.COMPARTMENT_LAYOUT_KIND :
>                 return createCompartmentLayoutKindFromString (eDataType, initialValue);
>             case GMFGenPackage.LINK_LABEL_ALIGNMENT :
>                 return createLinkLabelAlignmentFromString (eDataType, initialValue);
>             case GMFGenPackage.STRING_ARRAY :
143,145d295
<                 {
<                     CompartmentPlacementKind result = CompartmentPlacementKind.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
146a300,301
>         return result;
>     }
146,146c299,299
< 
---
> 
147,151d299
<                     return result;
<                 } case GMFGenPackage.COMPARTMENT_LAYOUT_KIND :
<                 {
<                     CompartmentLayoutKind result = CompartmentLayoutKind.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
152a303,305
>     public String convertCompartmentPlacementKindToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
152,152c302,302
< 
---
> 
153,157d302
<                     return result;
<                 } case GMFGenPackage.LINK_LABEL_ALIGNMENT :
<                 {
<                     LinkLabelAlignment result = LinkLabelAlignment.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
158a307,310
>     public CompartmentLayoutKind createCompartmentLayoutKindFromString (EDataType eDataType, String initialValue) {
>         CompartmentLayoutKind result = CompartmentLayoutKind.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
158,158c306,306
< 
---
> 
159,159c311,311
<                     return result;
---
>         return result;
159a312,328
>     }
> 
>     public String convertCompartmentLayoutKindToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public LinkLabelAlignment createLinkLabelAlignmentFromString (EDataType eDataType, String initialValue) {
>         LinkLabelAlignment result = LinkLabelAlignment.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertLinkLabelAlignmentToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
160,160d311
<                 } case GMFGenPackage.STRING_ARRAY :
169a164,164
>                 return convertCompartmentPlacementKindToString (eDataType, instanceValue);
170,170d163
<                 return instanceValue == null ? null : instanceValue.toString ();
171a166,166
>                 return convertCompartmentLayoutKindToString (eDataType, instanceValue);
172,172d165
<                 return instanceValue == null ? null : instanceValue.toString ();
173a168,168
>                 return convertLinkLabelAlignmentToString (eDataType, instanceValue);
174,174d167
<                 return instanceValue == null ? null : instanceValue.toString ();
246a241,243
>     public FigureViewmap createFigureViewmap () {
>         FigureViewmapImpl figureViewmap = new FigureViewmapImpl ();
>         return figureViewmap;
247,254d240
<     public BasicNodeViewmap createBasicNodeViewmap () {
<         BasicNodeViewmapImpl basicNodeViewmap = new BasicNodeViewmapImpl ();
<         return basicNodeViewmap;
<     }
< 
<     public DecoratedConnectionViewmap createDecoratedConnectionViewmap () {
<         DecoratedConnectionViewmapImpl decoratedConnectionViewmap = new DecoratedConnectionViewmapImpl ();
<         return decoratedConnectionViewmap;
256a246,248
>     public SnippetViewmap createSnippetViewmap () {
>         SnippetViewmapImpl snippetViewmap = new SnippetViewmapImpl ();
>         return snippetViewmap;
257,274d245
<     public LinkDecoration createLinkDecoration () {
<         LinkDecorationImpl linkDecoration = new LinkDecorationImpl ();
<         return linkDecoration;
<     }
< 
<     public DiagramViewmap createDiagramViewmap () {
<         DiagramViewmapImpl diagramViewmap = new DiagramViewmapImpl ();
<         return diagramViewmap;
<     }
< 
<     public CompartmentViewmap createCompartmentViewmap () {
<         CompartmentViewmapImpl compartmentViewmap = new CompartmentViewmapImpl ();
<         return compartmentViewmap;
<     }
< 
<     public LabelViewmap createLabelViewmap () {
<         LabelViewmapImpl labelViewmap = new LabelViewmapImpl ();
<         return labelViewmap;
