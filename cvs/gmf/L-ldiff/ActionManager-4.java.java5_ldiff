17,17c29,29
< import org.eclipse.jface.dialogs.ProgressMonitorDialog;
---
> import org.eclipse.jface.dialogs.ProgressMonitorDialog;
18,18c30,30
< 
---
> 
19,19c31,31
< import org.eclipse.jface.operation.IRunnableWithProgress;
---
> import org.eclipse.jface.operation.IRunnableWithProgress;
20,20c32,32
< 
---
> 
21,21c33,33
< import org.eclipse.swt.custom.BusyIndicator;
---
> import org.eclipse.swt.custom.BusyIndicator;
22,22d33
< 
35,35d28
< import org.eclipse.gmf.runtime.common.ui.internal.l10n.ResourceManager;
39,39d36
<     public static final String REPEAT_LABEL_PREFIX = ResourceManager.getI18NString ("ActionManager.repeat.label.prefix");
43,43c40,40
<     private IRepeatableAction action = null;
---
>     private IActionWithProgress action = null;
63,63c60,60
<     protected final IRepeatableAction getAction () {
---
>     protected final IActionWithProgress getAction () {
67,67c64,64
<     protected final void setAction (IRepeatableAction action) {
---
>     protected final void setAction (IActionWithProgress action) {
75,78d71
<     public String getRepeatLabel () {
<         return REPEAT_LABEL_PREFIX + (canRepeat () ? SPACE + getAction ().getLabel () : EMPTY_STRING);
<     }
< 
101,104d93
<     public boolean canRepeat () {
<         return false;
<     }
< 
109a99,99
>     public void run (final IActionWithProgress theAction) {
110,138d98
<     public void repeat () {
<         if (! canRepeat ()) {
<             UnsupportedOperationException uoe = new UnsupportedOperationException ();
<             Trace.throwing (CommonUIPlugin.getDefault (), CommonUIDebugOptions.EXCEPTIONS_THROWING, getClass (), "repeat", uoe);
<             throw uoe;
<         }
<         IRepeatableAction.WorkIndicatorType type = getAction ().getWorkIndicatorType ();
<         if (type == IRepeatableAction.WorkIndicatorType.PROGRESS_MONITOR) {
<             repeatActionInProgressMonitorDialog (getAction (), false);
<         } else if (type == IRepeatableAction.WorkIndicatorType.CANCELABLE_PROGRESS_MONITOR) {
<             repeatActionInProgressMonitorDialog (getAction (), true);
<         } else if (type == IRepeatableAction.WorkIndicatorType.BUSY) {
<             BusyIndicator.showWhile (null, new Runnable () {
< 
<                 public void run () {
<                     getAction ().repeat (new NullProgressMonitor ());
<                 }
< 
<             }
< 
<             );
<         } else {
<             getAction ().run (new NullProgressMonitor ());
<         }
< 
<         Trace.trace (CommonUIPlugin.getDefault (), CommonUIDebugOptions.ACTIONS_REPEAT, "Action '" + String.valueOf (getAction ()) + "' repeated.");
<     }
< 
<     public void run (final IRepeatableAction theAction) {
148,148c109,109
<         IRepeatableAction.WorkIndicatorType type = theAction.getWorkIndicatorType ();
---
>         IActionWithProgress.WorkIndicatorType type = theAction.getWorkIndicatorType ();
149,149c110,110
<         if (type == IRepeatableAction.WorkIndicatorType.PROGRESS_MONITOR) {
---
>         if (type == IActionWithProgress.WorkIndicatorType.PROGRESS_MONITOR) {
151,151c112,112
<         } else if (type == IRepeatableAction.WorkIndicatorType.CANCELABLE_PROGRESS_MONITOR) {
---
>         } else if (type == IActionWithProgress.WorkIndicatorType.CANCELABLE_PROGRESS_MONITOR) {
153,153c114,114
<         } else if (type == IRepeatableAction.WorkIndicatorType.BUSY) {
---
>         } else if (type == IActionWithProgress.WorkIndicatorType.BUSY) {
186,186c147,147
<     private void runActionInProgressMonitorDialog (final IRepeatableAction act, boolean cancelable) {
---
>     private void runActionInProgressMonitorDialog (final IActionWithProgress act, boolean cancelable) {
199,211d159
<     private void repeatActionInProgressMonitorDialog (final IRepeatableAction act, boolean cancelable) {
<         IRunnableWithProgress runnable = new IRunnableWithProgress () {
< 
<             public void run (IProgressMonitor monitor) {
<                 act.repeat (monitor);
<             }
< 
<         }
< 
<         ;
<         runInProgressMonitorDialog (runnable, cancelable);
<     }
< 
