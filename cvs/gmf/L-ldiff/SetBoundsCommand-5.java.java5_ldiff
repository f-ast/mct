1,1c1,1
< package org.eclipse.gmf.runtime.lite.commands;
---
> package org.eclipse.gmf.runtime.diagram.ui.commands;
3,3c11,11
< import org.eclipse.draw2d.geometry.Rectangle;
---
> import org.eclipse.draw2d.geometry.Rectangle;
4a5,5
> import org.eclipse.core.runtime.IProgressMonitor;
5,5c15,15
< import org.eclipse.emf.common.command.AbstractCommand;
---
> import org.eclipse.gmf.runtime.common.core.command.CommandResult;
6a7,7
> import org.eclipse.draw2d.geometry.Dimension;
7,7c21,21
< import org.eclipse.emf.transaction.TransactionalEditingDomain;
---
> import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;
8a9,9
> import org.eclipse.draw2d.geometry.Point;
9,9c13,13
< import org.eclipse.emf.transaction.util.TransactionUtil;
---
> import org.eclipse.jface.util.Assert;
11,11c23,23
< import org.eclipse.gmf.runtime.notation.Bounds;
---
> import org.eclipse.gmf.runtime.notation.View;
13,13c19,19
< import org.eclipse.gmf.runtime.notation.Node;
---
> import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
15,15c3,3
< import org.eclipse.gmf.runtime.notation.NotationFactory;
---
> import org.eclipse.core.runtime.IAdaptable;
16a17,17
> import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
17,20d16
< public class SetBoundsCommand extends AbstractCommand {
<     private final Node myNode;
<     private final Rectangle myBounds;
<     private Rectangle myOldBounds;
22,26d18
<     public SetBoundsCommand (Node node, Rectangle bounds) {
<         super ("Set node position/size");
<         myNode = node;
<         myBounds = bounds;
<     }
28,30d20
<     public boolean canUndo () {
<         return true;
<     }
32,42d22
<     protected boolean prepare () {
<         TransactionalEditingDomain domain = TransactionUtil.getEditingDomain (myNode);
<         if (domain != null && domain.isReadOnly (myNode.eResource ())) {
<             return false;
<         }
<         if (myNode.getLayoutConstraint () == null) {
<             myOldBounds = null;
<             return true;
<         } else if (myNode.getLayoutConstraint () instanceof Bounds == false) {
<             return false;
<         }
43a25,28
> public class SetBoundsCommand extends AbstractModelCommand {
>     private IAdaptable adapter;
>     private Point location;
>     private Dimension size;
44,47d24
<         Bounds bounds = (Bounds) myNode.getLayoutConstraint ();
<         myOldBounds = new Rectangle (bounds.getX (), bounds.getY (), bounds.getWidth (), bounds.getHeight ());
<         return true;
<     }
48a30,36
>     public SetBoundsCommand (String label, IAdaptable adapter, Rectangle bounds) {
>         super (label, adapter);
>         Assert.isNotNull (adapter, "view cannot be null");
>         Assert.isNotNull (bounds, "bounds cannot be null");
>         this.adapter = adapter;
>         this.location = bounds.getLocation ();
>         this.size = bounds.getSize ();
49,50d29
<     public void redo () {
<         execute ();
52a39,44
>     public SetBoundsCommand (String label, IAdaptable adapter, Point location) {
>         super (label, adapter);
>         Assert.isNotNull (adapter, "view cannot be null");
>         Assert.isNotNull (location, "location cannot be null");
>         this.adapter = adapter;
>         this.location = location;
53,54d38
<     public void execute () {
<         execute (myBounds);
56a47,52
>     public SetBoundsCommand (String label, IAdaptable adapter, Dimension size) {
>         super (label, adapter);
>         Assert.isNotNull (adapter, "view cannot be null");
>         Assert.isNotNull (size, "size cannot be null");
>         this.adapter = adapter;
>         this.size = size;
57,59d46
<     @Override
<     public void undo () {
<         execute (myOldBounds);
61a55,61
>     protected CommandResult doExecute (IProgressMonitor progressMonitor) {
>         if (adapter == null) return newErrorCommandResult ("SetBoundsCommand: viewAdapter does not adapt to IView.class");
> 
>         View view = (View) adapter.getAdapter (View.class);
>         if (location != null) {
>             ViewUtil.setPropertyValue (view, Properties.ID_POSITIONX, new Integer (location.x));
>             ViewUtil.setPropertyValue (view, Properties.ID_POSITIONY, new Integer (location.y));
62,65d54
<     private void execute (Rectangle rect) {
<         if (rect == null) {
<             myNode.setLayoutConstraint (null);
<             return;
66a63,65
>         if (size != null) {
>             ViewUtil.setPropertyValue (view, Properties.ID_EXTENTX, new Integer (size.width));
>             ViewUtil.setPropertyValue (view, Properties.ID_EXTENTY, new Integer (size.height));
67,70d62
<         Bounds bounds = (Bounds) myNode.getLayoutConstraint ();
<         if (bounds == null) {
<             bounds = NotationFactory.eINSTANCE.createBounds ();
<             myNode.setLayoutConstraint (bounds);
71a67,67
>         return newOKCommandResult ();
72,75d66
<         bounds.setX (rect.x);
<         bounds.setY (rect.y);
<         bounds.setWidth (rect.width);
<         bounds.setHeight (rect.height);
