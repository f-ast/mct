1,1c1,1
< package org.eclipse.gmf.internal.codegen.lite;
---
> package org.eclipse.gmf.codegen.util;
2a3,3
> import java.io.ByteArrayInputStream;
3,3d2
< import java.lang.reflect.InvocationTargetException;
5,5c13,13
< import java.util.HashSet;
---
> import java.util.LinkedList;
5a14,14
> 
10a5,6
> import java.lang.ref.SoftReference;
> 
11,11c7,7
< import java.util.Set;
---
> import java.util.Collection;
11a8,9
> 
> import java.util.Collections;
16a39,39
> import org.eclipse.core.runtime.Status;
17,17c51,51
< import org.eclipse.emf.codegen.util.CodeGenUtil;
---
> import org.eclipse.emf.codegen.util.CodeGenUtil;
18a41,41
> import org.eclipse.core.runtime.SubProgressMonitor;
19,19c43,43
< import org.eclipse.emf.common.util.EList;
---
> import org.eclipse.emf.codegen.jet.JETEmitter;
21,21c65,65
< import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
---
> import org.eclipse.gmf.codegen.gmfgen.GenExternalNodeLabel;
23,23c75,75
< import org.eclipse.gmf.codegen.gmfgen.GenApplication;
---
> import org.eclipse.gmf.codegen.gmfgen.GenTopLevelNode;
25,25c45,45
< import org.eclipse.gmf.codegen.gmfgen.GenChildLabelNode;
---
> import org.eclipse.emf.codegen.jet.JETException;
27,27c47,47
< import org.eclipse.gmf.codegen.gmfgen.GenChildSideAffixedNode;
---
> import org.eclipse.emf.codegen.jmerge.JControlModel;
28a55,56
> import org.eclipse.gmf.codegen.gmfgen.GenChildNode;
> 
29,29c57,57
< import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;
---
> import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;
31,31c59,59
< import org.eclipse.gmf.codegen.gmfgen.GenCompartment;
---
> import org.eclipse.gmf.codegen.gmfgen.GenCompartment;
33,33c49,49
< import org.eclipse.gmf.codegen.gmfgen.GenContainerBase;
---
> import org.eclipse.emf.codegen.jmerge.JMerger;
34a17,18
> import org.eclipse.core.resources.IFile;
> 
35,35c19,19
< import org.eclipse.gmf.codegen.gmfgen.GenCustomPropertyTab;
---
> import org.eclipse.core.resources.IProject;
35a20,33
> 
> import org.eclipse.core.resources.IResource;
> 
> import org.eclipse.core.resources.ResourcesPlugin;
> 
> import org.eclipse.core.runtime.CoreException;
> 
> import org.eclipse.core.runtime.IPath;
> 
> import org.eclipse.core.runtime.IProgressMonitor;
> 
> import org.eclipse.core.runtime.IStatus;
> 
> import org.eclipse.core.runtime.MultiStatus;
41,46d52
< import org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
< 
47,47c53,53
< import org.eclipse.gmf.codegen.gmfgen.GenLanguage;
---
> import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;
53,54d70
< import org.eclipse.gmf.codegen.gmfgen.GenNavigatorChildReference;
< 
59,59d74
< import org.eclipse.gmf.codegen.gmfgen.GenPreferencePage;
61,61d76
< import org.eclipse.gmf.codegen.gmfgen.GenPropertyTab;
62a79,79
> import org.eclipse.jdt.core.ICompilationUnit;
63,63d78
< import org.eclipse.gmf.codegen.gmfgen.GenStandardPreferencePage;
64a81,81
> import org.eclipse.jdt.core.IPackageFragment;
65,65d80
< import org.eclipse.gmf.codegen.gmfgen.OpenDiagramBehaviour;
66a83,87
> import org.eclipse.jdt.core.IPackageFragmentRoot;
> 
> import org.eclipse.jdt.core.JavaCore;
> 
> import org.eclipse.jdt.core.JavaModelException;
67,67c77,77
< import org.eclipse.gmf.common.UnexpectedBehaviourException;
---
> import org.eclipse.gmf.common.UnexpectedBehaviourException;
68a89,89
> import org.eclipse.jdt.core.ToolFactory;
69,69d88
< import org.eclipse.gmf.common.codegen.ImportAssistant;
70a91,91
> import org.eclipse.jdt.core.formatter.CodeFormatter;
71,71d90
< import org.eclipse.gmf.internal.common.codegen.GeneratorBase;
72a93,93
> import org.eclipse.jface.text.Document;
73,73d92
< import org.eclipse.gmf.internal.common.codegen.TextEmitter;
74a95,95
> import org.eclipse.jface.text.IDocument;
75,75d94
< import org.eclipse.gmf.internal.common.codegen.TextMerger;
76a97,99
> import org.eclipse.text.edits.TextEdit;
> 
> public class Generator implements Runnable {
77,78d96
< public class Generator extends GeneratorBase implements Runnable {
<     private final GenEditorGenerator myEditorGen;
79a101,107
>     private IPackageFragmentRoot myDestRoot;
>     private IProject myDestProject;
>     private JControlModel myJControlModel;
>     private CodeFormatter myCodeFormatter;
>     private IProgressMonitor myProgress;
>     private IStatus myRunStatus = Status.CANCEL_STATUS;
>     private List myExceptions;
80a109,109
>     private static SoftReference myCachedEmitters;
80,80c108,108
<     private final CodegenEmitters myEmitters;
---
>     private CodegenEmitters myEmitters;
83,83c112,112
<         this (genModel, Activator.getInstance ().getEmitters (genModel));
---
>         this (genModel.getDiagram ());
85a115,120
>     public Generator (GenDiagram diagram) {
>         myDiagram = diagram;
>         CodegenEmitters old = myCachedEmitters == null ? null : (CodegenEmitters) myCachedEmitters.get ();
>         if (old == null) {
>             myEmitters = new CodegenEmitters (true);
>             myCachedEmitters = new SoftReference (myEmitters);
86,91d528
<     public Generator (GenEditorGenerator genModel, CodegenEmitters emitters) {
<         assert genModel != null && emitters != null;
<         myDiagram = genModel.getDiagram ();
<         myEditorGen = genModel;
<         myEmitters = emitters;
<     }
92a530,531
>     private void generatePluginXml () throws JETException, InterruptedException {
>         doGenerateFile (myEmitters.getPluginXmlEmitter (), new Path ("plugin.xml"), myDiagram.getEditorGen ().getPlugin ());
92,92c529,529
< 
---
> 
93,95d529
<     @Override
<     protected TextMerger createMergeService () {
<         return myEmitters.createMergeService ();
96,96c532,532
<     }
---
>     }
97,97c533,533
< 
---
> 
97a534,534
>     private void generatePluginProperties () throws JETException, InterruptedException {
98,105d533
<     @SuppressWarnings("unchecked")
<     protected void customRun () throws InterruptedException, UnexpectedBehaviourException {
<         final String pluginID = myEditorGen.getPlugin ().getID ();
<         final Path examplaryLocation = new Path (myEditorGen.getDomainGenModel ().getModelDirectory ());
<         initializeEditorProject (pluginID, guessNewProjectLocation (examplaryLocation, pluginID));
<         doGenerateFile (myEmitters.getManifestGenerator (), new Path ("META-INF/MANIFEST.MF"), new Object [] {myEditorGen.getPlugin ()});
<         doGenerateFile (myEmitters.getBuildPropertiesGenerator (), new Path ("build.properties"), new Object [] {myEditorGen.getPlugin ()});
<         doGenerateFile (myEmitters.getPluginXML (), new Path ("plugin.xml"), new Object [] {myEditorGen.getPlugin ()});
106,106c535,535
<         doGenerateFile (myEmitters.getPluginPropertiesGenerator (), new Path ("plugin.properties"), new Object [] {myEditorGen.getPlugin ()});
---
>         doGenerateFile (myEmitters.getPluginPropertiesEmitter (), new Path ("plugin.properties"), myDiagram.getEditorGen ().getPlugin ());
107,114d535
<         internalGenerateJavaClass (myEmitters.getCreationWizardGenerator (), myDiagram.getCreationWizardQualifiedClassName (), myDiagram);
<         internalGenerateJavaClass (myEmitters.getCreationWizardPageGenerator (), myDiagram.getCreationWizardPageQualifiedClassName (), myDiagram);
<         internalGenerateJavaClass (myEmitters.getPluginGenerator (), myEditorGen.getPlugin ().getActivatorQualifiedClassName (), myEditorGen.getPlugin ());
<         internalGenerateJavaClass (myEmitters.getInitDiagramFileActionGenerator (), myDiagram.getInitDiagramFileActionQualifiedClassName (), myDiagram);
<         internalGenerateJavaClass (myEmitters.getModelElementSelectionPageEmitter (), myEmitters.getModelElementSelectionPageQualifiedNameEmitter (), myDiagram);
<         internalGenerateJavaClass (myEmitters.getNewDiagramFileWizardGenerator (), myDiagram.getNewDiagramFileWizardQualifiedClassName (), myDiagram);
<         if (myEditorGen.getApplication () != null) {
<             internalGenerateJavaClass (myEmitters.getURISelectorPageGenerator (), myEmitters.getURISelectorPageQualifiedClassNameGenerator (), myDiagram);
115,115c536,536
<         }
---
>     }
115a537,539
> 
>     private void generateBundleManifest () throws JETException, InterruptedException {
>         doGenerateFile (myEmitters.getBundleManifestEmitter (), new Path ("META-INF/MANIFEST.MF"), myDiagram.getEditorGen ().getPlugin ());
116,119d536
<         if (myDiagram.generateCreateShortcutAction ()) {
<             internalGenerateJavaClass (myEmitters.getCreateShortcutActionEmitter (), myDiagram.getCreateShortcutActionQualifiedClassName (), myDiagram);
<             if (myEditorGen.getApplication () != null) {
<                 internalGenerateJavaClass (myEmitters.getShortcutCreationWizardEmitter (), myEmitters.getShortcutCreationWizardQualifiedClassNameEmitter (), myDiagram);
120a122,122
>             myEmitters = old;
121,121c496,496
<                 internalGenerateJavaClass (myEmitters.getElementChooserEmitter (), myDiagram.getElementChooserQualifiedClassName (), myDiagram);
---
>         doGenerateJavaClass (myEmitters.getCreateShortcutActionEmitter (), myDiagram.getEditorPackageName (), myDiagram.getCreateShortcutActionClassName (), myDiagram);
123a125,128
> 
>     public void run (IProgressMonitor progress) throws InterruptedException {
>         setProgressMonitor (progress);
>         doRun ();
124,130d124
<         if (myDiagram.generateShortcutIcon ()) {
<             internalGenerateJavaClass (myEmitters.getShortcutProviderEmitter (), myEmitters.getShortcutProviderQualifiedClassNameEmitter (), myDiagram);
<             internalGenerateJavaClass (myEmitters.getCreateShortcutNodeCommandEmitter (), myEmitters.getCreateShortcutNodeCommandQualifiedClassNameEmitter (), myDiagram);
<             internalGenerateJavaClass (myEmitters.getCreateShortcutEdgeCommandEmitter (), myEmitters.getCreateShortcutEdgeCommandQualifiedClassNameEmitter (), myDiagram);
<             generateShortcutIcon ();
<             if (myEditorGen.getApplication () == null) {
<                 internalGenerateJavaClass (myEmitters.getShortcutPropertyTesterEmitter (), myDiagram.getShortcutPropertyTesterQualifiedClassName (), myDiagram);
131a130,135
> 
>     public void run () {
>         try {
>             doRun ();
>         } catch (InterruptedException ex) {
>             myRunStatus = new Status (IStatus.CANCEL, "org.eclipse.gmf.codegen", 0, Messages.interrupted, ex);
133,155d136
<         internalGenerateJavaClass (myEmitters.getLoadResourceActionGenerator (), myDiagram.getLoadResourceActionQualifiedClassName (), myDiagram);
<         internalGenerateJavaClass (myEmitters.getElementTypesGenerator (), myDiagram.getElementTypesQualifiedClassName (), myDiagram);
<         internalGenerateJavaClass (myEmitters.getActionBarContributorGenerator (), myEditorGen.getEditor ().getActionBarContributorQualifiedClassName (), myEditorGen.getEditor ());
<         internalGenerateJavaClass (myEmitters.getDiagramEditorUtilGenerator (), myDiagram.getDiagramEditorUtilQualifiedClassName (), myDiagram);
<         internalGenerateJavaClass (myEmitters.getEditorGenerator (), myEditorGen.getEditor ().getQualifiedClassName (), myEditorGen.getEditor ());
<         if (myEditorGen.getEditor ().isEclipseEditor ()) {
<             internalGenerateJavaClass (myEmitters.getMatchingStrategyEmitter (), myDiagram.getMatchingStrategyQualifiedClassName (), myDiagram);
<         }
<         if (myEditorGen.getApplication () == null && ! myEditorGen.getEditor ().isEclipseEditor ()) {
<             internalGenerateJavaClass (myEmitters.getOpenDiagramInViewActionGenerator (), myEmitters.getOpenDiagramInViewActionQualifiedClassNameGenerator (), myEditorGen.getEditor ());
<         }
<         if (myDiagram.getPalette () != null) {
<             internalGenerateJavaClass (myEmitters.getPaletteFactoryGenerator (), myDiagram.getPalette ().getFactoryQualifiedClassName (), myDiagram.getPalette ());
<         }
<         internalGenerateJavaClass (myEmitters.getEditPartFactoryGenerator (), myDiagram.getEditPartFactoryQualifiedClassName (), myDiagram);
<         internalGenerateJavaClass (myEmitters.getDiagramEditPartGenerator (), myDiagram.getEditPartQualifiedClassName (), myDiagram);
<         HashSet < OpenDiagramBehaviour > openDiagramBehaviors = new HashSet < OpenDiagramBehaviour > ();
<         generateBehaviors (myDiagram, openDiagramBehaviors);
<         generateLayoutEditPolicy (myDiagram);
<         if (myDiagram.isValidationEnabled () || myEditorGen.hasAudits ()) {
<             generateValidationProvider ();
<             if (myDiagram.getEditorGen ().getApplication () == null) {
<                 generateMarkerNavigationProvider ();
156a138,165
> 
>     private void doRun () throws InterruptedException {
>         try {
>             setupProgressMonitor ();
>             myExceptions = new LinkedList ();
>             initializeEditorProject ();
>             generateReorientConnectionViewCommand ();
>             generateSemanticHints ();
>             generateAbstractParser ();
>             generateStructuralFeatureParser ();
>             generateStructuralFeaturesParser ();
>             generateBaseItemSemanticEditPolicy ();
>             generateBaseGraphicalNodeEditPolicy ();
>             generateReferenceConnectionEditPolicy ();
>             generateDiagramCanonicalEditPolicy ();
>             generateDiagramItemSemanticEditPolicy ();
>             for (Iterator nodes = myDiagram.getTopLevelNodes ().iterator ();
>             nodes.hasNext ();) {
>                 GenTopLevelNode node = (GenTopLevelNode) nodes.next ();
>                 generateNode (node);
>             }
>             for (Iterator nodes = myDiagram.getChildNodes ().iterator ();
>             nodes.hasNext ();) {
>                 GenChildNode node = (GenChildNode) nodes.next ();
>                 if (node.isListContainerEntry ()) {
>                     generateListContainerNode (node);
>                 } else {
>                     generateNode (node);
158,159d166
<         if (myDiagram.getEditorGen ().getMetrics () != null) {
<             generateMetricProvider ();
160a168,171
>             for (Iterator compartments = myDiagram.getCompartments ().iterator ();
>             compartments.hasNext ();) {
>                 GenCompartment compartment = (GenCompartment) compartments.next ();
>                 generateCompartment (compartment);
161,169d167
<         for (GenNode next : (List < ? extends GenNode >) myDiagram.getAllNodes ()) {
<             if (! (next instanceof GenChildLabelNode)) {
<                 internalGenerateJavaClass (myEmitters.getNodeEditPartGenerator (), next.getEditPartQualifiedClassName (), next);
<                 generateGraphicalEditPolicy (next);
<                 for (Iterator it2 = next.getLabels ().iterator ();
<                 it2.hasNext ();) {
<                     final GenNodeLabel label = (GenNodeLabel) it2.next ();
<                     internalGenerateJavaClass (myEmitters.getNodeLabelEditPartGenerator (), label.getEditPartQualifiedClassName (), label);
<                     internalGenerateJavaClass (myEmitters.getViewFactoryGenerator (), label.getNotationViewFactoryQualifiedClassName (), label);
170a173,226
>             for (Iterator it = myDiagram.getLinks ().iterator ();
>             it.hasNext ();) {
>                 final GenLink next = (GenLink) it.next ();
>                 generateViewFactory (next);
>                 generateLinkEditPart (next);
>                 generateLinkItemSemanticEditPolicy (next);
>                 for (Iterator labels = next.getLabels ().iterator ();
>                 labels.hasNext ();) {
>                     GenLinkLabel label = (GenLinkLabel) labels.next ();
>                     generateLinkLabelEditPart (label);
>                     generateLinkLabelTextEditPart (label);
>                     generateLinkLabelViewFactory (label);
>                     generateLinkLabelTextViewFactory (label);
>                 }
>             }
>             generateViewFactory (myDiagram);
>             generateDiagramEditPart ();
>             generateDiagramExternalNodeLabelEditPart ();
>             generateEditPartFactory ();
>             generateElementTypes ();
>             generateViewProvider ();
>             generateEditPartProvider ();
>             generateMetamodelSupportProvider ();
>             generateModelingAssistantProvider ();
>             generatePropertyProvider ();
>             generateIconProvider ();
>             generateParserProvider ();
>             if (myDiagram.isValidationEnabled ()) {
>                 generateValidationProvider ();
>                 generateMarkerNavigationProvider ();
>             }
>             generateInitDiagramFileAction ();
>             generatePalette ();
>             generateDiagramEditorUtil ();
>             generateDiagramFileCreator ();
>             generateVisualIDRegistry ();
>             generateCreationWizard ();
>             generateCreationWizardPage ();
>             generateEditor ();
>             generateCreateShortcutAction ();
>             generateLoadResourceAction ();
>             generateElementChooser ();
>             generateDocumentProvider ();
>             generateActionBarContributor ();
>             generateMatchingStrategy ();
>             generatePreferencesInitializer ();
>             generatePluginClass ();
>             generateBundleManifest ();
>             generatePluginProperties ();
>             generatePluginXml ();
>             generateBuildProperties ();
>             generateShortcutIcon ();
>             if (myExceptions.isEmpty ()) {
>                 myRunStatus = Status.OK_STATUS;
171a228,240
>                 IStatus [] s = (IStatus []) myExceptions.toArray (new IStatus [myExceptions.size ()]);
>                 myRunStatus = new MultiStatus ("org.eclipse.gmf.codegen", 0, s, Messages.problems, null);
>             }
>         } catch (NullPointerException ex) {
>             myRunStatus = new Status (IStatus.ERROR, "org.eclipse.gmf.codegen", 0, NullPointerException.class.getName (), ex);
>         } catch (JETException ex) {
>             myRunStatus = ex.getStatus ();
>         } catch (UnexpectedBehaviourException ex) {
>             myRunStatus = new Status (Status.ERROR, "org.eclipse.gmf.codegen", 0, Messages.unexpected, ex);
>         } finally {
>             myProgress.done ();
>             myExceptions = null;
>         }
172,172d227
<                 internalGenerateJavaClass (myEmitters.getChildNodeEditPartGenerator (), next.getEditPartQualifiedClassName (), next);
173a242,257
> 
>     public IStatus getRunStatus () {
>         return myRunStatus;
>     }
> 
>     private void generateNode (GenNode node) throws JETException, InterruptedException {
>         generateNodeEditPart (node);
>         for (Iterator labels = node.getLabels ().iterator ();
>         labels.hasNext ();) {
>             GenNodeLabel label = (GenNodeLabel) labels.next ();
>             if (label instanceof GenExternalNodeLabel) {
>                 GenExternalNodeLabel extLabel = (GenExternalNodeLabel) label;
>                 generateExternalNodeLabelEditPart (extLabel);
>                 generateExternalNodeLabelViewFactory (extLabel);
>                 generateExternalNodeLabelTextEditPart (extLabel);
>                 generateExternalNodeLabelTextViewFactory (extLabel);
174,182d241
<             internalGenerateJavaClass (myEmitters.getViewFactoryGenerator (), next.getNotationViewFactoryQualifiedClassName (), next);
<             generateBehaviors (next, openDiagramBehaviors);
<             generateCommands (next);
<             generateComponentEditPolicy (next);
<             boolean shouldGenerateLayoutEditPolicy = false;
<             boolean shouldGenerateSideAffixedLayoutEditPolicy = false;
<             for (GenNode nextChild : next.getChildNodes ()) {
<                 if (nextChild instanceof GenChildSideAffixedNode) {
<                     shouldGenerateSideAffixedLayoutEditPolicy = true;
183a259,260
>                 generateNodeLabelEditPart (label);
>                 generateNodeLabelTextViewFactory (label);
184,184d258
<                     shouldGenerateLayoutEditPolicy = true;
186a263,265
>         generateChildContainer (node);
>         generateNodeGraphicalNodeEditPolicy (node);
>         generateNodeItemSemanticEditPolicy (node);
187,188d262
<             if (shouldGenerateLayoutEditPolicy) {
<                 generateLayoutEditPolicy (next);
189a267,271
> 
>     private void generateListContainerNode (GenNode child) throws JETException, InterruptedException {
>         generateListContainerNodeEditPart (child);
>         generateNodeItemSemanticEditPolicy (child);
>         generateViewFactory (child);
190,191d266
<             if (shouldGenerateSideAffixedLayoutEditPolicy) {
<                 generateSideAffixedLayoutEditPolicy (next);
192a273,277
> 
>     private void generateCompartment (GenCompartment compartment) throws JETException, InterruptedException {
>         generateCompartmentEditPart (compartment);
>         generateCompartmentItemSemanticEditPolicy (compartment);
>         generateChildContainer (compartment);
193a279,282
> 
>     private void generateChildContainer (GenChildContainer childContainer) throws JETException, InterruptedException {
>         generateViewFactory (childContainer);
>         generateChildContainerCanonicalEditPolicy (childContainer);
194,198d278
<         for (GenLink next : (List < ? extends GenLink >) myDiagram.getLinks ()) {
<             internalGenerateJavaClass (myEmitters.getLinkEditPartGenerator (), next.getEditPartQualifiedClassName (), next);
<             generateGraphicalEditPolicy (next);
<             if (next.getLabels ().size () > 0) {
<                 generateConnectionEndpointEditPolicy (next);
199a284,286
> 
>     private void generateReorientConnectionViewCommand () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getReorientConnectionViewCommandEmitter (), myDiagram.getEditCommandsPackageName (), myDiagram.getReorientConnectionViewCommandClassName (), myDiagram);
200,202d283
<             for (GenLinkLabel label : (List < ? extends GenLinkLabel >) next.getLabels ()) {
<                 internalGenerateJavaClass (myEmitters.getLinkLabelEditPartGenerator (), label.getEditPartQualifiedClassName (), label);
<                 internalGenerateJavaClass (myEmitters.getViewFactoryGenerator (), label.getNotationViewFactoryQualifiedClassName (), label);
203a288,290
> 
>     private void generateDiagramEditPart () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getDiagramEditPartEmitter (), myDiagram.getEditPartsPackageName (), myDiagram.getEditPartClassName (), myDiagram);
204,207d287
<             internalGenerateJavaClass (myEmitters.getViewFactoryGenerator (), next.getNotationViewFactoryQualifiedClassName (), next);
<             generateBehaviors (next, openDiagramBehaviors);
<             generateCommands (next);
<             generateComponentEditPolicy (next);
208a292,294
> 
>     private void generateDiagramExternalNodeLabelEditPart () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getDiagramExternalNodeLabelEditPartEmitter (), myDiagram.getEditPartsPackageName (), myDiagram.getBaseExternalNodeLabelEditPartClassName (), myDiagram);
209,214d291
<         for (Iterator it = myDiagram.getCompartments ().iterator ();
<         it.hasNext ();) {
<             final GenCompartment next = (GenCompartment) it.next ();
<             internalGenerateJavaClass (myEmitters.getCompartmentEditPartGenerator (), next.getEditPartQualifiedClassName (), next);
<             internalGenerateJavaClass (myEmitters.getViewFactoryGenerator (), next.getNotationViewFactoryQualifiedClassName (), next);
<             generateLayoutEditPolicy (next);
216,216c465,465
<         internalGenerateJavaClass (myEmitters.getViewFactoryGenerator (), myDiagram.getNotationViewFactoryQualifiedClassName (), myDiagram);
---
>         doGenerateJavaClass (myEmitters.getPaletteEmitter (), myDiagram.getPalette ().getPackageName (), myDiagram.getPalette ().getFactoryClassName (), myDiagram);
217,220d465
<         internalGenerateJavaClass (myEmitters.getDomainElementInitializerGenerator (), myEmitters.getDomainElementInitializerQualifiedNameGenerator (), myDiagram);
<         internalGenerateJavaClass (myEmitters.getVisualIDRegistryGenerator (), myDiagram.getVisualIDRegistryQualifiedClassName (), myDiagram);
<         if (myDiagram.getEditorGen ().getExpressionProviders () != null) {
<             generateExpressionProviders ();
221a300,302
> 
>     private void generateNodeLabelEditPart (GenNodeLabel label) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getNodeLabelEditPartEmitter (), myDiagram.getEditPartsPackageName (), label.getEditPartClassName (), label);
222,223d299
<         if (isPathInsideGenerationTarget (myDiagram.getCreationWizardIconPathX ())) {
<             generateDiagramIcon (myDiagram.getCreationWizardIconPathX ());
224a304,306
> 
>     private void generateExternalNodeLabelEditPart (GenExternalNodeLabel label) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getExternalNodeLabelEditPartEmitter (), myDiagram.getEditPartsPackageName (), label.getEditPartClassName (), label);
225,226d303
<         if (isPathInsideGenerationTarget (myEditorGen.getEditor ().getIconPathX ())) {
<             generateDiagramIcon (myEditorGen.getEditor ().getIconPathX ());
227a308,310
> 
>     private void generateExternalNodeLabelTextEditPart (GenExternalNodeLabel label) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getExternalNodeLabelTextEditPartEmitter (), myDiagram.getEditPartsPackageName (), label.getTextEditPartClassName (), label);
228,244d307
<         generateWizardBanner ();
<         if (myEditorGen.getApplication () == null && myEditorGen.getNavigator () != null) {
<             generateNavigatorContentProvider ();
<             generateNavigatorLabelProvider ();
<             generateNavigatorLinkHelper ();
<             generateNavigatorSorter ();
<             generateNavigatorActionProvider ();
<             generateAbstractNavigatorItem ();
<             generateNavigatorGroup ();
<             generateNavigatorItem ();
<             generateNavigatorGroupIcons ();
<             if (myEditorGen.getDomainGenModel () != null && myEditorGen.getNavigator ().isGenerateDomainModelNavigator ()) {
<                 generateDomainNavigatorContentProvider ();
<                 generateDomainNavigatorLabelProvider ();
<                 generateDomainNavigatorItem ();
<                 generateDomainModelElementTester ();
<                 generateURIEditorInputTester ();
245a312,314
> 
>     private void generateListContainerNodeEditPart (GenNode genChildNode) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getChildNodeEditPartEmitter (), myDiagram.getEditPartsPackageName (), genChildNode.getEditPartClassName (), genChildNode);
246a316,318
> 
>     private void generateCompartmentEditPart (GenCompartment genCompartment) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getCompartmentEditPartEmitter (), myDiagram.getEditPartsPackageName (), genCompartment.getEditPartClassName (), genCompartment);
247,248d315
<         if (myEditorGen.getPropertySheet () != null) {
<             generatePropertySheetSections ();
250,252d319
<         generateApplication ();
<         generatePreferences ();
<         generateExternalizationSupport ();
254a325,326
>     private void generateLinkLabelEditPart (GenLinkLabel label) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getLinkLabelEditPartEmitter (), myDiagram.getEditPartsPackageName (), label.getEditPartClassName (), label);
255,258d324
<     private static boolean isPathInsideGenerationTarget (String path) {
<         assert path != null;
<         Path p = new Path (path);
<         return ! p.isAbsolute () && ! p.segment (0).equals ("..");
260a329,330
>     private void generateLinkLabelTextEditPart (GenLinkLabel label) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getLinkLabelTextEditPartEmitter (), myDiagram.getEditPartsPackageName (), label.getTextEditPartClassName (), label);
261,271d328
<     @SuppressWarnings("unchecked")
<     private void generateExpressionProviders () throws UnexpectedBehaviourException, InterruptedException {
<         GenExpressionProviderContainer providerContainer = myEditorGen.getExpressionProviders ();
<         internalGenerateJavaClass (myEmitters.getAbstractExpressionEmitter (), providerContainer.getExpressionsPackageName (), providerContainer.getAbstractExpressionClassName (), myDiagram);
<         for (GenExpressionProviderBase nextProvider : (List < ? extends GenExpressionProviderBase >) providerContainer.getProviders ()) {
<             if (nextProvider instanceof GenExpressionInterpreter) {
<                 TextEmitter providerEmitter = null;
<                 if (GenLanguage.OCL_LITERAL.equals (nextProvider.getLanguage ())) {
<                     providerEmitter = myEmitters.getOCLExpressionFactoryEmitter ();
<                 } else if (GenLanguage.REGEXP_LITERAL.equals (nextProvider.getLanguage ()) || GenLanguage.NREGEXP_LITERAL.equals (nextProvider.getLanguage ())) {
<                     providerEmitter = myEmitters.getRegexpExpressionFactoryEmitter ();
273a333,334
>     private void generateEditPartFactory () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getEditPartFactoryEmitter (), myDiagram.getEditPartsPackageName (), myDiagram.getEditPartFactoryClassName (), myDiagram);
274,276d332
<                 GenExpressionInterpreter interpreter = (GenExpressionInterpreter) nextProvider;
<                 if (providerEmitter != null) {
<                     internalGenerateJavaClass (providerEmitter, providerContainer.getExpressionsPackageName (), interpreter.getClassName (), interpreter);
277a336,338
> 
>     private void generateBaseItemSemanticEditPolicy () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getBaseItemSemanticEditPolicyEmitter (), myDiagram.getEditPoliciesPackageName (), myDiagram.getBaseItemSemanticEditPolicyClassName (), myDiagram);
278a340,342
> 
>     private void generateBaseGraphicalNodeEditPolicy () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getBaseGraphicalNodeEditPolicyEmitter (), myDiagram.getEditPoliciesPackageName (), myDiagram.getBaseGraphicalNodeEditPolicyClassName (), myDiagram);
279a344,346
> 
>     private void generateReferenceConnectionEditPolicy () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getReferenceConnectionEditPolicyEmitter (), myDiagram.getEditPoliciesPackageName (), myDiagram.getReferenceConnectionEditPolicyClassName (), myDiagram);
281a349,350
>     private void generateDiagramCanonicalEditPolicy () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getDiagramCanonicalEditPolicyEmitter (), myDiagram.getEditPoliciesPackageName (), myDiagram.getCanonicalEditPolicyClassName (), myDiagram);
282,283d348
<     private void generateShortcutIcon () throws UnexpectedBehaviourException, InterruptedException {
<         doGenerateBinaryFile (myEmitters.getShortcutImageEmitter (), new Path ("icons/shortcut.gif"), null);
285a353,354
>     private void generateChildContainerCanonicalEditPolicy (GenChildContainer genContainer) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getChildContainerCanonicalEditPolicyEmitter (), myDiagram.getEditPoliciesPackageName (), genContainer.getCanonicalEditPolicyClassName (), genContainer);
286,288d352
<     private void generateDiagramIcon (String path) throws UnexpectedBehaviourException, InterruptedException {
<         Object [] args = new Object [] {myDiagram.getDomainDiagramElement () == null ? myEditorGen.getDiagramFileExtension () : myDiagram.getDomainDiagramElement ().getGenPackage ().getPrefix ()};
<         doGenerateBinaryFile (myEmitters.getDiagramIconEmitter (), new Path (path), args);
290a357,358
>     private void generateDiagramItemSemanticEditPolicy () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getDiagramItemSemanticEditPolicyEmitter (), myDiagram.getEditPoliciesPackageName (), myDiagram.getItemSemanticEditPolicyClassName (), myDiagram);
291,297d356
<     private void generateWizardBanner () throws UnexpectedBehaviourException, InterruptedException {
<         try {
<             Object [] args = new Object [] {myEmitters.getWizardBannerStemEmitter ().generate (new NullProgressMonitor (), new Object [] {myDiagram})};
<             String path = myEmitters.getWizardBannerLocationEmitter ().generate (new NullProgressMonitor (), new Object [] {myDiagram});
<             doGenerateBinaryFile (myEmitters.getWizardBannerImageEmitter (), new Path (path), args);
<         } catch (InvocationTargetException e) {
<             handleException (e);
298a360,362
> 
>     private void generateCompartmentItemSemanticEditPolicy (GenCompartment genCompartment) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getCompartmentItemSemanticEditPolicyEmitter (), myDiagram.getEditPoliciesPackageName (), genCompartment.getItemSemanticEditPolicyClassName (), genCompartment);
301,305d364
<     private void generateBehaviors (GenCommonBase element, HashSet < OpenDiagramBehaviour > generatedBehaviors) throws UnexpectedBehaviourException, InterruptedException {
<         for (OpenDiagramBehaviour behaviour : element.getBehaviour (OpenDiagramBehaviour.class)) {
<             if (! generatedBehaviors.contains (behaviour)) {
<                 generatedBehaviors.add (behaviour);
<                 generateOpenDiagramEditPolicy (behaviour);
306a368,370
> 
>     private void generateNodeItemSemanticEditPolicy (GenNode genNode) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getNodeItemSemanticEditPolicyEmitter (), myDiagram.getEditPoliciesPackageName (), genNode.getItemSemanticEditPolicyClassName (), genNode);
309a425,425
>     private void generateValidationProvider () throws JETException, InterruptedException {
310,310d424
<     private void generateValidationProvider () throws UnexpectedBehaviourException, InterruptedException {
311,311c426,426
<         internalGenerateJavaClass (myEmitters.getValidationProviderGenerator (), myDiagram.getProvidersPackageName (), myDiagram.getValidationProviderClassName (), myDiagram);
---
>         doGenerateJavaClass (myEmitters.getValidationProviderEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getValidationProviderClassName (), myDiagram);
312,312d426
<         internalGenerateJavaClass (myEmitters.getValidateActionGenerator (), myEmitters.getValidateActionQualifiedNameGenerator (), myDiagram);
314a429,429
>     private void generateMarkerNavigationProvider () throws JETException, InterruptedException {
314a381,382
>     private void generateStructuralFeatureParser () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getStructuralFeatureParserEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getStructuralFeatureParserClassName (), myDiagram);
315,315d428
<     private void generateMarkerNavigationProvider () throws UnexpectedBehaviourException, InterruptedException {
316,316c430,430
<         internalGenerateJavaClass (myEmitters.getMarkerNavigationProviderEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getMarkerNavigationProviderClassName (), myDiagram);
---
>         doGenerateJavaClass (myEmitters.getMarkerNavigationProviderEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getMarkerNavigationProviderClassName (), myDiagram);
318a377,377
>     private void generateAbstractParser () throws JETException, InterruptedException {
318a385,386
>     private void generateStructuralFeaturesParser () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getStructuralFeaturesParserEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getStructuralFeaturesParserClassName (), myDiagram);
319,319d376
<     private void generateMetricProvider () throws UnexpectedBehaviourException, InterruptedException {
320,320c378,378
<         internalGenerateJavaClass (myEmitters.getMetricProviderEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getMetricProviderClassName (), myDiagram);
---
>         doGenerateJavaClass (myEmitters.getAbstractParserEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getAbstractParserClassName (), myDiagram);
321,321d378
<         internalGenerateJavaClass (myEmitters.getMetricsActionEmitter (), myEmitters.getMetricsActionQualifiedNameEmitter (), myDiagram);
323a389,390
>     private void generateSemanticHints () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getSemanticHintsEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getSemanticHintsClassName (), myDiagram);
324,325d388
<     private void generateOpenDiagramEditPolicy (OpenDiagramBehaviour behaviour) throws UnexpectedBehaviourException, InterruptedException {
<         internalGenerateJavaClass (myEmitters.getOpenDiagramEditPolicyEmitter (), behaviour.getEditPolicyQualifiedClassName (), behaviour);
327a393,394
>     private void generateElementTypes () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getElementTypesEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getElementTypesClassName (), myDiagram);
328,328c365,365
<     private void generateCommands (GenNode genNode) throws UnexpectedBehaviourException, InterruptedException {
---
>     private void generateNodeGraphicalNodeEditPolicy (GenNode genNode) throws JETException, InterruptedException {
329,329d365
<         if (! genNode.getDomainMetaClass ().isAbstract ()) {
330,330c366,366
<             internalGenerateJavaClass (myEmitters.getCreateNodeCommandEmitter (), myEmitters.getCreateNodeCommandQualifiedClassNameEmitter (), genNode);
---
>         doGenerateJavaClass (myEmitters.getNodeGraphicalNodeEditPolicyEmitter (), myDiagram.getEditPoliciesPackageName (), genNode.getGraphicalNodeEditPolicyClassName (), genNode);
331a396,398
> 
>     private void generateViewProvider () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getViewProviderEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getNotationViewProviderClassName (), myDiagram);
332,333d395
<         internalGenerateJavaClass (myEmitters.getAddNodeCommandEmitter (), myEmitters.getAddNodeCommandQualifiedClassNameEmitter (), genNode);
<         internalGenerateJavaClass (myEmitters.getCloneNodeCommandEmitter (), myEmitters.getCloneNodeCommandQualifiedClassNameEmitter (), genNode);
335a401,402
>     private void generateEditPartProvider () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getEditPartProviderEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getEditPartProviderClassName (), myDiagram);
335a546,547
>     private void generateShortcutIcon () throws InterruptedException {
>         if (! myDiagram.generateShortcutIcon ()) {
336,337d545
<     private void generateCommands (GenLink genLink) throws UnexpectedBehaviourException, InterruptedException {
<         if (! genLink.isViewDirectionAlignedWithModel ()) {
338,338c548,548
<             return;
---
>             return;
339a404,406
> 
>     private void generateMetamodelSupportProvider () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getMetamodelSupportProviderEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getMetamodelSupportProviderClassName (), myDiagram);
340,343d403
<         internalGenerateJavaClass (myEmitters.getCreateLinkStartCommandEmitter (), myEmitters.getCreateLinkStartCommandQualifiedClassNameEmitter (), genLink);
<         internalGenerateJavaClass (myEmitters.getCreateLinkCompleteCommandEmitter (), myEmitters.getCreateLinkCompleteCommandQualifiedClassNameEmitter (), genLink);
<         internalGenerateJavaClass (myEmitters.getReconnectLinkSourceCommandEmitter (), myEmitters.getReconnectLinkSourceCommandQualifiedClassNameEmitter (), genLink);
<         internalGenerateJavaClass (myEmitters.getReconnectLinkTargetCommandEmitter (), myEmitters.getReconnectLinkTargetCommandQualifiedClassNameEmitter (), genLink);
345a409,410
>     private void generateModelingAssistantProvider () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getModelingAssistantProviderEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getModelingAssistantProviderClassName (), myDiagram);
346,347d408
<     private void generateLayoutEditPolicy (GenContainerBase containerBase) throws InterruptedException, UnexpectedBehaviourException {
<         internalGenerateJavaClass (myEmitters.getLayoutEditPolicyEmitter (), myEmitters.getLayoutEditPolicyQualifiedClassNameEmitter (), containerBase);
349a413,414
>     private void generatePropertyProvider () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getPropertyProviderEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getPropertyProviderClassName (), myDiagram);
350,351d412
<     private void generateSideAffixedLayoutEditPolicy (GenNode node) throws InterruptedException, UnexpectedBehaviourException {
<         internalGenerateJavaClass (myEmitters.getSideAffixedLayoutEditPolicyEmitter (), myEmitters.getSideAffixedLayoutEditPolicyQualifiedClassNameEmitter (), node);
353a296,296
> 
353a417,418
>     private void generateIconProvider () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getIconProviderEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getIconProviderClassName (), myDiagram);
354,354c297,297
<     private void generateGraphicalEditPolicy (GenNode genNode) throws InterruptedException, UnexpectedBehaviourException {
---
>     private void generateNodeEditPart (GenNode genNode) throws JETException, InterruptedException {
355,355c298,298
<         internalGenerateJavaClass (myEmitters.getGraphicalEditPolicyEmitter (), genNode.getGraphicalNodeEditPolicyQualifiedClassName (), genNode);
---
>         doGenerateJavaClass (myEmitters.getNodeEditPartEmitter (), myDiagram.getEditPartsPackageName (), genNode.getEditPartClassName (), genNode);
357a320,320
> 
357a421,422
>     private void generateParserProvider () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getParserProviderEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getParserProviderClassName (), myDiagram);
358,358c321,321
<     private void generateGraphicalEditPolicy (GenLink genLink) throws InterruptedException, UnexpectedBehaviourException {
---
>     private void generateLinkEditPart (GenLink genLink) throws JETException, InterruptedException {
359,359c322,322
<         internalGenerateJavaClass (myEmitters.getGraphicalEditPolicyEmitter (), myEmitters.getGraphicalEditPolicyQualifiedClassNameEmitter (), genLink);
---
>         doGenerateJavaClass (myEmitters.getLinkEditPartEmitter (), myDiagram.getEditPartsPackageName (), genLink.getEditPartClassName (), genLink);
362,362c433,433
<     private void generateComponentEditPolicy (GenCommonBase genElement) throws InterruptedException, UnexpectedBehaviourException {
---
>     private void generateViewFactory (GenCommonBase genElement) throws JETException, InterruptedException {
363,363c434,434
<         internalGenerateJavaClass (myEmitters.getComponentEditPolicyEmitter (), myEmitters.getComponentEditPolicyQualifiedClassNameEmitter (), genElement);
---
>         doGenerateJavaClass (myEmitters.getViewFactoryEmitter (), myDiagram.getNotationViewFactoriesPackageName (), genElement.getNotationViewFactoryClassName (), genElement);
365a372,372
> 
366,366c373,373
<     private void generateConnectionEndpointEditPolicy (GenLink genLink) throws InterruptedException, UnexpectedBehaviourException {
---
>     private void generateLinkItemSemanticEditPolicy (GenLink genLink) throws JETException, InterruptedException {
367,367c374,374
<         internalGenerateJavaClass (myEmitters.getConnectionEndpointEditPolicyEmitter (), myEmitters.getConnectionEndpointEditPolicyQualifiedClassNameEmitter (), genLink);
---
>         doGenerateJavaClass (myEmitters.getLinkItemSemanticEditPolicyEmitter (), myDiagram.getEditPoliciesPackageName (), genLink.getItemSemanticEditPolicyClassName (), genLink);
370,371d432
<     private void generateNavigatorContentProvider () throws InterruptedException {
<         internalGenerateJavaClass (myEmitters.getNavigatorContentProviderEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getContentProviderClassName (), myEditorGen.getNavigator ());
373a437,438
>     private void generateLinkLabelViewFactory (GenLinkLabel label) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getLabelViewFactoryEmitter (), myDiagram.getNotationViewFactoriesPackageName (), label.getNotationViewFactoryClassName (), label);
374,375d436
<     private void generateDomainNavigatorContentProvider () throws InterruptedException {
<         doGenerateJavaClass (myEmitters.getDomainNavigatorContentProviderEmitter (), myEditorGen.getNavigator ().getDomainContentProviderQualifiedClassName (), myEditorGen.getNavigator ());
377a441,442
>     private void generateLinkLabelTextViewFactory (GenLinkLabel label) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getLabelTextViewFactoryEmitter (), myDiagram.getNotationViewFactoriesPackageName (), label.getTextNotationViewFactoryClassName (), label);
378,379d440
<     private void generateDomainNavigatorLabelProvider () throws InterruptedException {
<         doGenerateJavaClass (myEmitters.getDomainNavigatorLabelProviderEmitter (), myEditorGen.getNavigator ().getDomainLabelProviderQualifiedClassName (), myEditorGen.getNavigator ());
381a445,446
>     private void generateExternalNodeLabelViewFactory (GenExternalNodeLabel label) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getLabelViewFactoryEmitter (), myDiagram.getNotationViewFactoriesPackageName (), label.getNotationViewFactoryClassName (), label);
382,383d444
<     private void generateDomainNavigatorItem () throws InterruptedException {
<         doGenerateJavaClass (myEmitters.getDomainNavigatorItemEmitter (), myEditorGen.getNavigator ().getDomainNavigatorItemQualifiedClassName (), myEditorGen.getNavigator ());
385a449,450
>     private void generateExternalNodeLabelTextViewFactory (GenExternalNodeLabel label) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getLabelTextViewFactoryEmitter (), myDiagram.getNotationViewFactoriesPackageName (), label.getTextNotationViewFactoryClassName (), label);
386,387d448
<     private void generateDomainModelElementTester () throws InterruptedException {
<         doGenerateJavaClass (myEmitters.getDomainModelElementTesterEmitter (), myEditorGen.getNavigator ().getDomainModelElementTesterQualifiedClassName (), myEditorGen.getNavigator ());
389a453,454
>     private void generateNodeLabelTextViewFactory (GenNodeLabel label) throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getLabelTextViewFactoryEmitter (), myDiagram.getNotationViewFactoriesPackageName (), label.getNotationViewFactoryClassName (), label);
390,391d452
<     private void generateURIEditorInputTester () throws InterruptedException {
<         doGenerateJavaClass (myEmitters.getURIEditorInputTesterEmitter (), myEditorGen.getNavigator ().getUriInputTesterQualifiedClassName (), myEditorGen.getNavigator ());
393a457,458
>     private void generateInitDiagramFileAction () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getInitDiagramFileActionEmitter (), myDiagram.getEditorPackageName (), myDiagram.getInitDiagramFileActionClassName (), myDiagram);
394,395d456
<     private void generateNavigatorLabelProvider () throws InterruptedException, UnexpectedBehaviourException {
<         internalGenerateJavaClass (myEmitters.getNavigatorLabelProviderEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getLabelProviderClassName (), myEditorGen.getNavigator ());
398,398c461,461
<     private void generateNavigatorLinkHelper () throws InterruptedException {
---
>     private void generatePalette () throws JETException, InterruptedException {
399,399c462,462
<         if (! myEditorGen.getEditor ().isEclipseEditor ()) {
---
>         if (myDiagram.getPalette () == null) {
402,402d464
<         internalGenerateJavaClass (myEmitters.getNavigatorLinkHelperEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getLinkHelperClassName (), myEditorGen.getNavigator ());
404a468,469
>     private void generateDiagramEditorUtil () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getDiagramEditorUtilEmitter (), myDiagram.getEditorPackageName (), myDiagram.getDiagramEditorUtilClassName (), myDiagram);
405,406d467
<     private void generateNavigatorSorter () throws InterruptedException, UnexpectedBehaviourException {
<         internalGenerateJavaClass (myEmitters.getNavigatorSorterEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getSorterClassName (), myEditorGen.getNavigator ());
408a472,473
>     private void generateDiagramFileCreator () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getDiagramFileCreatorEmitter (), myDiagram.getEditorPackageName (), myDiagram.getDiagramFileCreatorClassName (), myDiagram);
409,410d471
<     private void generateNavigatorActionProvider () throws InterruptedException, UnexpectedBehaviourException {
<         internalGenerateJavaClass (myEmitters.getNavigatorActionProviderEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getActionProviderClassName (), myEditorGen.getNavigator ());
412a476,477
>     private void generateVisualIDRegistry () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getVisualIDRegistryEmitter (), myDiagram.getEditorPackageName (), myDiagram.getVisualIDRegistryClassName (), myDiagram);
413,414d475
<     private void generateAbstractNavigatorItem () throws InterruptedException, UnexpectedBehaviourException {
<         doGenerateJavaClass (myEmitters.getAbstractNavigatorItemEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getAbstractNavigatorItemClassName (), myEditorGen.getNavigator ());
416a480,481
>     private void generateCreationWizard () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getCreationWizardEmitter (), myDiagram.getEditorPackageName (), myDiagram.getCreationWizardClassName (), myDiagram);
417,418d479
<     private void generateNavigatorGroup () throws InterruptedException {
<         internalGenerateJavaClass (myEmitters.getNavigatorGroupEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getNavigatorGroupClassName (), myEditorGen.getNavigator ());
420a484,485
>     private void generateCreationWizardPage () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getCreationWizardPageEmitter (), myDiagram.getEditorPackageName (), myDiagram.getCreationWizardPageClassName (), myDiagram);
421,422d483
<     private void generateNavigatorItem () throws InterruptedException {
<         internalGenerateJavaClass (myEmitters.getNavigatorItemEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getNavigatorItemClassName (), myEditorGen.getNavigator ());
424a488,489
>     private void generateEditor () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getEditorEmitter (), myDiagram.getEditorPackageName (), myDiagram.getEditorClassName (), myDiagram);
425,430d487
<     @SuppressWarnings("unchecked")
<     private void generateNavigatorGroupIcons () throws InterruptedException, UnexpectedBehaviourException {
<         Set < String > groupIcons = new HashSet < String > ();
<         for (GenNavigatorChildReference nextReference : (List < ? extends GenNavigatorChildReference >) myEditorGen.getNavigator ().getChildReferences ()) {
<             if (nextReference.getGroupIcon () != null && nextReference.getGroupIcon ().length () > 0) {
<                 groupIcons.add (nextReference.getGroupIcon ());
431a491,494
> 
>     private void generateCreateShortcutAction () throws JETException, InterruptedException {
>         if (! myDiagram.generateCreateShortcutAction ()) {
>             return;
433,434d495
<         for (String iconPath : groupIcons) {
<             generateGroupIcon (new Path (iconPath));
435a498,500
> 
>     private void generateLoadResourceAction () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getLoadResourceActionEmitter (), myDiagram.getEditorPackageName (), myDiagram.getLoadResourceActionClassName (), myDiagram);
437a503,507
>     private void generateElementChooser () throws JETException, InterruptedException {
>         if (! myDiagram.generateCreateShortcutAction ()) {
>             return;
>         }
>         doGenerateJavaClass (myEmitters.getElementChooserEmitter (), myDiagram.getEditorPackageName (), myDiagram.getElementChooserClassName (), myDiagram);
438,439d502
<     private void generateGroupIcon (Path groupIconPath) throws InterruptedException, UnexpectedBehaviourException {
<         doGenerateBinaryFile (myEmitters.getGroupIconEmitter (), groupIconPath, null);
441a510,511
>     private void generateDocumentProvider () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getDocumentProviderEmitter (), myDiagram.getEditorPackageName (), myDiagram.getDocumentProviderClassName (), myDiagram);
442,445d509
<     @SuppressWarnings("unchecked")
<     protected void generatePropertySheetSections () throws UnexpectedBehaviourException, InterruptedException {
<         if (myEditorGen.getPropertySheet ().isNeedsCaption ()) {
<             doGenerateJavaClass (myEmitters.getPropertySheetLabelProviderEmitter (), myEditorGen.getPropertySheet ().getLabelProviderQualifiedClassName (), myEditorGen.getPropertySheet ());
446a513,515
> 
>     private void generateActionBarContributor () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getActionBarContributorEmitter (), myDiagram.getEditorPackageName (), myDiagram.getActionBarContributorClassName (), myDiagram);
447,449d512
<         for (GenPropertyTab tab : (List < ? extends GenPropertyTab >) myEditorGen.getPropertySheet ().getTabs ()) {
<             if (tab instanceof GenCustomPropertyTab) {
<                 doGenerateJavaClass (myEmitters.getPropertySectionEmitter (), ((GenCustomPropertyTab) tab).getQualifiedClassName (), tab);
450a517,519
> 
>     private void generateMatchingStrategy () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getMatchingStrategyEmitter (), myDiagram.getEditorPackageName (), myDiagram.getMatchingStrategyClassName (), myDiagram);
451a521,523
> 
>     private void generatePreferencesInitializer () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getPreferencesInitializerEmitter (), myDiagram.getEditorPackageName (), myDiagram.getPreferenceInitializerClassName (), myDiagram);
453a526,527
>     private void generatePluginClass () throws JETException, InterruptedException {
>         doGenerateJavaClass (myEmitters.getPluginClassEmitter (), myDiagram.getEditorPackageName (), myDiagram.getEditorGen ().getPlugin ().getActivatorClassName (), myDiagram.getEditorGen ().getPlugin ());
454,461d525
<     private void generateApplication () throws UnexpectedBehaviourException, InterruptedException {
<         GenApplication application = myEditorGen.getApplication ();
<         if (application != null) {
<             doGenerateJavaClass (myEmitters.getApplicationEmitter (), application.getQualifiedClassName (), application);
<             doGenerateJavaClass (myEmitters.getActionBarAdvisorEmitter (), application.getActionBarAdvisorQualifiedClassName (), application);
<             doGenerateJavaClass (myEmitters.getPerspectiveEmitter (), application.getPerspectiveQualifiedClassName (), application);
<             doGenerateJavaClass (myEmitters.getWorkbenchAdvisorEmitter (), application.getWorkbenchAdvisorQualifiedClassName (), application);
<             doGenerateJavaClass (myEmitters.getWorkbenchWindowAdvisorEmitter (), application.getWorkbenchWindowAdvisorQualifiedClassName (), application);
464a542,543
>     private void generateBuildProperties () throws JETException, InterruptedException {
>         doGenerateFile (myEmitters.getBuildPropertiesEmitter (), new Path ("build.properties"), myDiagram);
465,466d541
<     private void generatePreferences () throws UnexpectedBehaviourException, InterruptedException {
<         generatePreferences (myDiagram.getPreferencePages ());
469,472d545
<     private void generatePreferences (EList < GenPreferencePage > pages) throws UnexpectedBehaviourException, InterruptedException {
<         for (GenPreferencePage preferencePage : pages) {
<             if (preferencePage instanceof GenStandardPreferencePage) {
<                 generatePreferencePage ((GenStandardPreferencePage) preferencePage);
473a550,560
>         Path iconPath = new Path ("icons/shortcut.gif");
>         IProgressMonitor pm = getNextStepMonitor ();
>         try {
>             pm.beginTask (iconPath.lastSegment (), 3);
>             IPath containerPath = myDestProject.getFullPath ().append (iconPath.removeLastSegments (1));
>             CodeGenUtil.findOrCreateContainer (containerPath, false, (IPath) null, new SubProgressMonitor (pm, 1));
>             IFile f = myDestProject.getFile (iconPath);
>             if (f.exists ()) {
>                 f.setContents (new ByteArrayInputStream (myEmitters.getShortcutImageEmitter ().generateGif ()), true, true, new SubProgressMonitor (pm, 1));
>             } else {
>                 f.create (new ByteArrayInputStream (myEmitters.getShortcutImageEmitter ().generateGif ()), true, new SubProgressMonitor (pm, 1));
474,474d549
<             generatePreferences (preferencePage.getChildren ());
475a562,593
>             f.getParent ().refreshLocal (IResource.DEPTH_ONE, new SubProgressMonitor (pm, 1));
>         } catch (CoreException ex) {
>             myExceptions.add (ex.getStatus ());
>         } finally {
>             pm.done ();
>         }
>     }
> 
>     private void doGenerateFile (JETEmitter emitter, IPath filePath, Object param) throws JETException, InterruptedException {
>         assert ! myDestProject.getName ().equals (filePath.segment (0));
>         IProgressMonitor pm = getNextStepMonitor ();
>         try {
>             pm.beginTask (filePath.lastSegment (), 4);
>             IPath containerPath = myDestProject.getFullPath ().append (filePath.removeLastSegments (1));
>             CodeGenUtil.findOrCreateContainer (containerPath, false, (IPath) null, new SubProgressMonitor (pm, 1));
>             String genText = emitter.generate (new SubProgressMonitor (pm, 1), new Object [] {param});
>             IFile f = myDestProject.getFile (filePath);
>             if (f.exists ()) {
>                 f.setContents (new ByteArrayInputStream (genText.getBytes ()), true, true, new SubProgressMonitor (pm, 1));
>             } else {
>                 f.create (new ByteArrayInputStream (genText.getBytes ()), true, new SubProgressMonitor (pm, 1));
>             }
>             f.getParent ().refreshLocal (IResource.DEPTH_ONE, new SubProgressMonitor (pm, 1));
>         } catch (CoreException ex) {
>             myExceptions.add (ex.getStatus ());
>         } finally {
>             pm.done ();
>         }
>     }
> 
>     public void setProgressMonitor (IProgressMonitor progress) {
>         myProgress = progress;
477a596,631
>     private void setupProgressMonitor () {
>         if (myProgress == null) {
>             myProgress = new NullProgressMonitor ();
>             return;
>         }
>         Counter c = new Counter (myDiagram);
>         c.setAdditionalOperations (8);
>         c.setOperationsPerNode (2);
>         c.setOperationsPerListContainerNode (1);
>         c.setOperationsPerLink (2);
>         myProgress.beginTask (Messages.start, c.getTotal ());
>     }
> 
>     private IProgressMonitor getNextStepMonitor () throws InterruptedException {
>         if (myProgress.isCanceled ()) {
>             throw new InterruptedException ();
>         }
>         return new SubProgressMonitor (myProgress, 1);
>     }
> 
>     private void initializeEditorProject () throws UnexpectedBehaviourException, InterruptedException {
>         myDestProject = ResourcesPlugin.getWorkspace ().getRoot ().getProject (myDiagram.getEditorGen ().getPlugin ().getID ());
>         final Path srcPath = new Path ('/' + myDestProject.getName () + "/src");
>         final Path projectLocation = null;
>         final List referencedProjects = createReferencedProjectsList ();
>         final int style = org.eclipse.emf.codegen.ecore.Generator.EMF_PLUGIN_PROJECT_STYLE;
>         final List pluginVariables = null;
>         final IProgressMonitor pm = getNextStepMonitor ();
>         org.eclipse.emf.codegen.ecore.Generator.createEMFProject (srcPath, projectLocation, referencedProjects, pm, style, pluginVariables);
>         try {
>             myDestRoot = JavaCore.create (myDestProject).findPackageFragmentRoot (srcPath);
>         } catch (JavaModelException ex) {
>             throw new UnexpectedBehaviourException (ex.getMessage ());
>         }
>         if (myDestRoot == null) {
>             throw new UnexpectedBehaviourException ("no source root can be found");
478,485d595
<     private void generatePreferencePage (GenStandardPreferencePage preferencePage) throws UnexpectedBehaviourException, InterruptedException {
<         switch (preferencePage.getKind ()) {
<             case APPEARANCE_LITERAL :
<                 internalGenerateJavaClass (myEmitters.getAppearancePreferencePageEmitter (), myEmitters.getAppearancePreferencePageQualifiedClassNameEmitter (), myDiagram);
<                 break;
<             case GENERAL_LITERAL :
<                 internalGenerateJavaClass (myEmitters.getGeneralPreferencePageEmitter (), myEmitters.getGeneralPreferencePageQualifiedClassNameEmitter (), myDiagram);
<                 break;
488a635,636
>     private List createReferencedProjectsList () {
>         return Collections.EMPTY_LIST;
489,493d634
<     private void generateExternalizationSupport () throws UnexpectedBehaviourException, InterruptedException {
<         String packageName = myEditorGen.getEditor ().getPackageName ();
<         String messagesClassName = "Messages";
<         doGenerateJavaClass (myEmitters.getExternalizeEmitter (), packageName, messagesClassName, new Object [] {myEditorGen});
<         doGenerateFile (myEmitters.getMessagesEmitter (), new Path (messagesClassName.toLowerCase () + ".properties"), new Object [] {myEditorGen});
495a639,660
>     private void doGenerateJavaClass (JETEmitter emitter, String packageName, String className, Object input) throws InterruptedException {
>         IProgressMonitor pm = getNextStepMonitor ();
>         try {
>             pm.beginTask (className, 4);
>             String genText = emitter.generate (new SubProgressMonitor (pm, 1), new Object [] {input});
>             IPackageFragment pf = myDestRoot.createPackageFragment (packageName, true, new SubProgressMonitor (pm, 1));
>             ICompilationUnit cu = pf.getCompilationUnit (className + ".java");
>             if (cu.exists ()) {
>                 genText = merge (genText, cu.getSource (), new SubProgressMonitor (pm, 1));
>             } else {
>                 pm.worked (1);
>             }
>             pf.createCompilationUnit (cu.getElementName (), formatCode (genText), true, new SubProgressMonitor (pm, 1));
>         } catch (NullPointerException ex) {
>             myExceptions.add (new Status (IStatus.ERROR, "org.eclipse.gmf.codegen", 0, ex.getMessage (), ex));
>         } catch (JETException ex) {
>             myExceptions.add (ex.getStatus ());
>         } catch (CoreException ex) {
>             myExceptions.add (ex.getStatus ());
>         } finally {
>             pm.done ();
>         }
496,497d638
<     private void internalGenerateJavaClass (TextEmitter emitter, String qualifiedClassName, Object argument) throws InterruptedException {
<         internalGenerateJavaClass (emitter, CodeGenUtil.getPackageName (qualifiedClassName), CodeGenUtil.getSimpleClassName (qualifiedClassName), argument);
499a663,676
>     private String merge (String generatedText, String oldContents, IProgressMonitor pm) {
>         pm.beginTask (Messages.merge, 1);
>         JMerger jMerge = new JMerger ();
>         jMerge.setControlModel (getJControlModel ());
>         jMerge.setSourceCompilationUnit (jMerge.createCompilationUnitForContents (generatedText));
>         jMerge.setTargetCompilationUnit (jMerge.createCompilationUnitForContents (oldContents));
>         jMerge.merge ();
>         pm.done ();
>         return jMerge.getTargetCompilationUnitContents ();
>     }
> 
>     private String formatCode (String text) {
>         IDocument doc = new Document (text);
>         TextEdit edit = getCodeFormatter ().format (CodeFormatter.K_COMPILATION_UNIT, doc.get (), 0, doc.get ().length (), 0, null);
500,501d662
<     private void internalGenerateJavaClass (TextEmitter emitter, TextEmitter qualifiedClassNameEmitter, Object argument) throws InterruptedException {
<         String qualifiedClassName = null;
502a678,756
>             if (edit != null) {
>                 edit.apply (doc);
>                 text = doc.get ();
>             }
>         } catch (Exception ex) {
>             ex.printStackTrace ();
>         }
>         return text;
>     }
> 
>     private CodeFormatter getCodeFormatter () {
>         if (myCodeFormatter == null) {
>             myCodeFormatter = ToolFactory.createCodeFormatter (null);
>         }
>         return myCodeFormatter;
>     }
> 
>     private JControlModel getJControlModel () {
>         if (myJControlModel == null) {
>             myJControlModel = new JControlModel (myEmitters.getJMergeControlFile ().toString ());
>         }
>         return myJControlModel;
>     }
> 
>     private static final class Counter {
>         private final GenDiagram myDiagram;
>         private int myOpsPerNode = 1;
>         private int myOpsPerLink = 1;
>         private int myOpsPerListContainerNode = 1;
>         private int myAdditionalOps = 0;
>         private int myOpsPerCompartment = 1;
> 
>         Counter (GenDiagram diagram) {
>             myDiagram = diagram;
>         }
> 
>         public void setOperationsPerNode (int opsPerNode) {
>             myOpsPerNode = opsPerNode;
>         }
> 
>         public void setOperationsPerLink (int opsPerLink) {
>             myOpsPerLink = opsPerLink;
>         }
> 
>         public void setOperationsPerListContainerNode (int opsPerChild) {
>             myOpsPerListContainerNode = opsPerChild;
>         }
> 
>         public void setOperationsPerCompartment (int opsPerCompartment) {
>             myOpsPerCompartment = opsPerCompartment;
>         }
> 
>         public void setAdditionalOperations (int additionalOps) {
>             myAdditionalOps = additionalOps;
>         }
> 
>         public int getTotal () {
>             int rv = myAdditionalOps;
>             rv += myDiagram.getTopLevelNodes ().size () * myOpsPerNode;
>             rv += getChildNodesCount (myDiagram.getChildNodes ());
>             rv += myDiagram.getCompartments ().size () * myOpsPerCompartment;
>             rv += myDiagram.getLinks ().size () * myOpsPerLink;
>             return rv;
>         }
> 
>         private int getChildNodesCount (Collection nodes) {
>             int counter = 0;
>             for (Iterator it = nodes.iterator ();
>             it.hasNext ();) {
>                 GenChildNode nextNode = (GenChildNode) it.next ();
>                 if (nextNode.isListContainerEntry ()) {
>                     counter += myOpsPerNode;
>                 } else {
>                     counter += myOpsPerListContainerNode;
>                 }
>             }
>             return counter;
>         }
> 
503,528d677
<             qualifiedClassName = qualifiedClassNameEmitter.generate (new NullProgressMonitor (), new Object [] {argument});
<         } catch (InvocationTargetException e) {
<             handleException (e);
<         } catch (UnexpectedBehaviourException e) {
<             handleException (e);
<         }
<         internalGenerateJavaClass (emitter, qualifiedClassName, argument);
<     }
< 
<     private void internalGenerateJavaClass (TextEmitter emitter, String packageName, String className, Object argument) throws InterruptedException {
<         ImportAssistant importUtil = createImportAssistant (packageName, className);
<         doGenerateJavaClass (emitter, packageName, className, argument, importUtil);
<     }
< 
<     protected void setupProgressMonitor () {
<         Counter c = new Counter ();
<         c.registerFactor (GMFGenPackage.eINSTANCE.getGenNode (), 2);
<         c.registerFactor (GMFGenPackage.eINSTANCE.getGenCompartment (), 2);
<         c.registerFactor (GMFGenPackage.eINSTANCE.getGenLink (), 2);
<         c.registerFactor (GMFGenPackage.eINSTANCE.getGenNodeLabel (), 2);
<         c.registerFactor (GMFGenPackage.eINSTANCE.getGenLinkLabel (), 2);
<         int total = c.getTotal (myDiagram);
<         total ++;
<         total += 4;
<         total += 15;
<         setupProgressMonitor (null, total);
