4a5,6
> import org.eclipse.emf.ecore.EDataType;
> 
6a9,10
> import org.eclipse.emf.ecore.EPackage;
> 
8a13,17
> import org.eclipse.emf.ecore.plugin.EcorePlugin;
> 
> import org.eclipse.gmf.mappings.AuditContainer;
> 
> import org.eclipse.gmf.mappings.AuditRule;
9a24,24
> 
9,9c23,23
< import org.eclipse.gmf.mappings.*;
---
> import org.eclipse.gmf.mappings.CompartmentMapping;
36a47,48
> import org.eclipse.gmf.mappings.Severity;
> 
42a55,66
>     public static GMFMapFactory init () {
>         try {
>             GMFMapFactory theGMFMapFactory = (GMFMapFactory) EPackage.Registry.INSTANCE.getEFactory ("http://www.eclipse.org/gmf/2005/mappings");
>             if (theGMFMapFactory != null) {
>                 return theGMFMapFactory;
>             }
>         } catch (Exception exception) {
>             EcorePlugin.INSTANCE.log (exception);
>         }
>         return new GMFMapFactoryImpl ();
>     }
> 
76a101,104
>             case GMFMapPackage.AUDIT_CONTAINER :
>                 return createAuditContainer ();
>             case GMFMapPackage.AUDIT_RULE :
>                 return createAuditRule ();
81a110,127
>     public Object createFromString (EDataType eDataType, String initialValue) {
>         switch (eDataType.getClassifierID ()) {
>             case GMFMapPackage.SEVERITY :
>                 return createSeverityFromString (eDataType, initialValue);
>             default :
>                 throw new IllegalArgumentException ("The datatype '" + eDataType.getName () + "' is not a valid classifier");
>         }
>     }
> 
>     public String convertToString (EDataType eDataType, Object instanceValue) {
>         switch (eDataType.getClassifierID ()) {
>             case GMFMapPackage.SEVERITY :
>                 return convertSeverityToString (eDataType, instanceValue);
>             default :
>                 throw new IllegalArgumentException ("The datatype '" + eDataType.getName () + "' is not a valid classifier");
>         }
>     }
> 
151a198,218
>     public AuditContainer createAuditContainer () {
>         AuditContainerImpl auditContainer = new AuditContainerImpl ();
>         return auditContainer;
>     }
> 
>     public AuditRule createAuditRule () {
>         AuditRuleImpl auditRule = new AuditRuleImpl ();
>         return auditRule;
>     }
> 
>     public Severity createSeverityFromString (EDataType eDataType, String initialValue) {
>         Severity result = Severity.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertSeverityToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
