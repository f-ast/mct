5,6d4
< import org.eclipse.emf.common.notify.NotificationChain;
< 
11,12d8
< import org.eclipse.emf.ecore.InternalEObject;
< 
14a15,15
> import org.eclipse.ocl.ParserException;
15,15d14
< import org.eclipse.emf.ocl.query.Query;
16,16c16,16
< 
---
> 
16a17,22
> import org.eclipse.ocl.ecore.OCL;
> 
> import org.eclipse.ocl.ecore.OCL.Helper;
> 
> import org.eclipse.ocl.ecore.OCL.Query;
> 
45a48,49
>     public abstract EClass getQueryContext ();
> 
46,46c50,50
<     public Query getQuery () {
---
>     public Query getQuery () throws ParserException {
52a57,61
>     private Query createQuery () throws ParserException {
>         OCL ocl = OCL.newInstance ();
>         Helper oclHelper = ocl.createOCLHelper ();
>         oclHelper.setContext (getQueryContext ());
>         return ocl.createQuery (oclHelper.createQuery (getQueryText ()));
53,62d56
<     public NotificationChain basicSetQuery (Query newQuery, NotificationChain msgs) {
<         Query oldQuery = query;
<         query = newQuery;
<         if (eNotificationRequired ()) {
<             ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, TracePackage.MATCHING_TRACE__QUERY, oldQuery, newQuery);
<             if (msgs == null) msgs = notification;
<             else msgs.add (notification);
< 
<         }
<         return msgs;
65,66d63
<     public abstract Query createQuery ();
< 
95,103d91
<     public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
<         switch (featureID) {
<             case TracePackage.MATCHING_TRACE__QUERY :
<                 return basicSetQuery (null, msgs);
<         }
<         return super.eInverseRemove (otherEnd, featureID, msgs);
<     }
< 
<     @Override
108,109d95
<             case TracePackage.MATCHING_TRACE__QUERY :
<                 return getQuery ();
139,140d124
<             case TracePackage.MATCHING_TRACE__QUERY :
<                 return query != null;
