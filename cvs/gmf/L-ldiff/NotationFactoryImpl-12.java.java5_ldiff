230a231,234
>             case NotationPackage.LINE_TYPE_STYLE :
>                 return createLineTypeStyle ();
>             case NotationPackage.ARROW_STYLE :
>                 return createArrowStyle ();
257a262,265
>             case NotationPackage.LINE_TYPE :
>                 return createLineTypeFromString (eDataType, initialValue);
>             case NotationPackage.ARROW_TYPE :
>                 return createArrowTypeFromString (eDataType, initialValue);
290a299,302
>             case NotationPackage.LINE_TYPE :
>                 return convertLineTypeToString (eDataType, instanceValue);
>             case NotationPackage.ARROW_TYPE :
>                 return convertArrowTypeToString (eDataType, instanceValue);
556a569,578
>     public LineTypeStyle createLineTypeStyle () {
>         LineTypeStyleImpl lineTypeStyle = new LineTypeStyleImpl ();
>         return lineTypeStyle;
>     }
> 
>     public ArrowStyle createArrowStyle () {
>         ArrowStyleImpl arrowStyle = new ArrowStyleImpl ();
>         return arrowStyle;
>     }
> 
666a689,710
>     public LineType createLineTypeFromString (EDataType eDataType, String initialValue) {
>         LineType result = LineType.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertLineTypeToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public ArrowType createArrowTypeFromString (EDataType eDataType, String initialValue) {
>         ArrowType result = ArrowType.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertArrowTypeToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
