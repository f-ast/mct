29a30,30
>     @SuppressWarnings("unchecked")
31,31c32,32
<         List semanticChildren = getSemanticChildNodes ();
---
>         List < ElementDescriptor > semanticChildren = getSemanticChildNodes ();
32,32c33,33
<         List notationalChildren = getHost ().getChildren ();
---
>         List < View > notationalChildren = (List < View >) getHost ().getChildren ();
35a37,37
>         final Map < EObject, View > semanticToNotational = new HashMap < EObject, View > ();
36,36d36
<         final Map semanticToNotational = new HashMap ();
37,37c38,38
<         for (Iterator it = notationalChildren.iterator ();
---
>         for (Iterator < View > it = notationalChildren.iterator ();
39,39c40,40
<             View next = (View) it.next ();
---
>             View next = it.next ();
48,48c49,49
<         for (Iterator it = semanticChildren.iterator ();
---
>         for (Iterator < ElementDescriptor > it = semanticChildren.iterator ();
50,50c51,51
<             ElementDescriptor next = (ElementDescriptor) it.next ();
---
>             ElementDescriptor next = it.next ();
52,52c53,53
<             View currentView = (View) semanticToNotational.remove (node);
---
>             View currentView = semanticToNotational.remove (node);
68,68c69,69
<         for (Iterator it = semanticToNotational.values ().iterator ();
---
>         for (Iterator < View > it = semanticToNotational.values ().iterator ();
70,70c71,71
<             View obsoleteView = (View) it.next ();
---
>             View obsoleteView = it.next ();
70a72,72
>             if (shouldRemoveView (obsoleteView)) {
71a74,76
>             } else {
>                 command.appendIfCanExecute (getRefreshExternalElementCommand (obsoleteView));
>             }
75a81,84
>     protected Command getRefreshExternalElementCommand (View externalView) {
>         return null;
>     }
> 
76a86,89
> 
>     protected boolean shouldRemoveView (View view) {
>         return true;
>     }
76,76c85,85
<     protected abstract List getSemanticChildNodes ();
---
>     protected abstract List < ElementDescriptor > getSemanticChildNodes ();
