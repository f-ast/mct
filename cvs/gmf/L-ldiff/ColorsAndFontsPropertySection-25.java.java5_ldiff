55,56d54
< import org.eclipse.swt.accessibility.ACC;
< 
87,88d84
< import org.eclipse.swt.widgets.ToolBar;
< 
89,89c85,85
< import org.eclipse.swt.widgets.ToolItem;
---
> import org.eclipse.swt.widgets.Label;
99,99c95,95
<     protected ToolItem fillColorButton;
---
>     protected Button fillColorButton;
102a99,99
>     private Button fontBoldButton;
103,104d98
<     private ToolBar toolBar;
<     private ToolItem fontBoldButton;
105,105c100,100
<     private ToolItem fontItalicButton;
---
>     private Button fontItalicButton;
107,107c102,102
<     protected ToolItem fontColorButton;
---
>     protected Button fontColorButton;
108,108c103,103
<     protected ToolItem lineColorButton;
---
>     protected Button lineColorButton;
180,180c175,175
<         toolBar = new ToolBar (parent, SWT.FLAT);
---
>         Composite toolBar = new Composite (parent, SWT.SHADOW_NONE);
183,183c178,178
<         fontBoldButton = new ToolItem (toolBar, SWT.CHECK);
---
>         fontBoldButton = new Button (toolBar, SWT.TOGGLE);
193a180,189
>         fontBoldButton.getAccessible ().addAccessibleListener (new AccessibleAdapter () {
> 
>             public void getName (AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontStyle_Bold;
>             }
> 
>         }
> 
>         );
>         fontItalicButton = new Button (toolBar, SWT.TOGGLE);
194,195d179
<         fontBoldButton.setToolTipText (DiagramUIMessages.FontStyleAction_bold_tooltip);
<         fontItalicButton = new ToolItem (toolBar, SWT.CHECK);
196a191,193
>         fontItalicButton.getAccessible ().addAccessibleListener (new AccessibleAdapter () {
> 
>             public void getName (AccessibleEvent e) {
196,196c190,190
<         fontItalicButton.setImage (DiagramUIPropertiesImages.get (DiagramUIPropertiesImages.IMG_ITALIC));
---
>         fontItalicButton.setImage (DiagramUIPropertiesImages.get (DiagramUIPropertiesImages.IMG_ITALIC));
197a195,199
>             }
> 
>         }
> 
>         );
197,197c194,194
<         fontItalicButton.setToolTipText (DiagramUIMessages.PropertyDescriptorFactory_FontStyle_Italic);
---
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontStyle_Italic;
206a218,218
>         new Label (toolBar, SWT.LEFT);
207,207c219,219
<         fontColorButton = new ToolItem (toolBar, SWT.DROP_DOWN);
---
>         fontColorButton = new Button (toolBar, SWT.PUSH);
208a221,229
>         fontColorButton.getAccessible ().addAccessibleListener (new AccessibleAdapter () {
> 
>             public void getName (AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontColor;
>             }
> 
>         }
> 
>         );
209,209d220
<         fontColorButton.setToolTipText (DiagramUIMessages.PropertyDescriptorFactory_FontColor);
218a239,239
>         new Label (toolBar, SWT.LEFT);
219,219c240,240
<         lineColorButton = new ToolItem (toolBar, SWT.DROP_DOWN);
---
>         lineColorButton = new Button (toolBar, SWT.PUSH);
220a242,250
>         lineColorButton.getAccessible ().addAccessibleListener (new AccessibleAdapter () {
> 
>             public void getName (AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_LineColor;
>             }
> 
>         }
> 
>         );
221,221d241
<         lineColorButton.setToolTipText (DiagramUIMessages.PropertyDescriptorFactory_LineColor);
231,231c260,260
<         fillColorButton = new ToolItem (toolBar, SWT.DROP_DOWN);
---
>         fillColorButton = new Button (toolBar, SWT.PUSH);
233,234d261
<         fillColorButton.setToolTipText (DiagramUIMessages.PropertyDescriptorFactory_FillColor);
<         fillColorButton.setEnabled (false);
235,235c262,262
<         toolBar.getAccessible ().addAccessibleListener (new AccessibleAdapter () {
---
>         fillColorButton.getAccessible ().addAccessibleListener (new AccessibleAdapter () {
237a265,265
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FillColor;
238,246d264
<                 if (e.childID != ACC.CHILDID_SELF) {
<                     ToolItem item = toolBar.getItem (e.childID);
<                     if (item != null) {
<                         String toolTip = item.getToolTipText ();
<                         if (toolTip != null) {
<                             e.result = toolTip;
<                         }
<                     }
<                 }
251a271,271
>         fillColorButton.setEnabled (false);
277,280d296
<     protected RGB changeColor (SelectionEvent event, ToolItem toolItem, String preferenceId, final String propertyId, String commandName, ImageDescriptor imageDescriptor) {
<         return changeColor (event, toolItem, propertyId, commandName, imageDescriptor);
<     }
< 
332,382d347
<     protected RGB changeColor (SelectionEvent event, ToolItem toolItem, final String propertyId, String commandName, ImageDescriptor imageDescriptor) {
<         ColorPalettePopup popup = new ColorPalettePopup (toolItem.getParent ().getShell (), IDialogConstants.BUTTON_BAR_HEIGHT);
<         popup.setPreviousColor (previousColor);
<         Rectangle r = toolItem.getBounds ();
<         Point location = toolItem.getParent ().toDisplay (r.x, r.y);
<         popup.open (new Point (location.x, location.y + r.height));
<         if (popup.getSelectedColor () == null && ! popup.useDefaultColor ()) {
<             return null;
<         }
<         final RGB selectedColor = popup.getSelectedColor ();
<         final EStructuralFeature feature = (EStructuralFeature) PackageUtil.getElement (propertyId);
<         List commands = new ArrayList ();
<         Iterator it = getInputIterator ();
<         RGB colorToReturn = selectedColor;
<         RGB color = selectedColor;
<         while (it.hasNext ()) {
<             final IGraphicalEditPart ep = (IGraphicalEditPart) it.next ();
<             color = selectedColor;
<             if (popup.useDefaultColor ()) {
<                 Object preferredValue = ep.getPreferredValue (feature);
<                 if (preferredValue instanceof Integer) {
<                     color = FigureUtilities.integerToRGB ((Integer) preferredValue);
<                 }
<             }
<             if (colorToReturn == null) {
<                 colorToReturn = color;
<             }
<             if (color != null) {
<                 final RGB finalColor = color;
<                 commands.add (createCommand (commandName, ((View) ep.getModel ()).eResource (), new Runnable () {
< 
<                     public void run () {
<                         ENamedElement element = PackageUtil.getElement (propertyId);
<                         if (element instanceof EStructuralFeature) ep.setStructuralFeatureValue (feature, FigureUtilities.RGBToInteger (finalColor));
< 
<                     }
< 
<                 }
< 
<                 ));
<             }
<         }
<         if (! commands.isEmpty ()) {
<             executeAsCompositeCommand (commandName, commands);
<             Image overlyedImage = new ColorOverlayImageDescriptor (imageDescriptor.getImageData (), color).createImage ();
<             disposeImage (toolItem.getImage ());
<             toolItem.setImage (overlyedImage);
<         }
<         return colorToReturn;
<     }
< 
