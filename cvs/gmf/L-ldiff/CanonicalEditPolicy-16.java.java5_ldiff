24a25,26
> import org.eclipse.core.commands.ExecutionException;
> 
26a29,30
> import org.eclipse.core.runtime.IProgressMonitor;
> 
38a47,48
> import org.eclipse.emf.transaction.Transaction;
> 
40a51,52
> import org.eclipse.emf.workspace.AbstractEMFOperation;
> 
56a71,72
> import org.eclipse.gmf.runtime.common.core.util.Trace;
> 
57,57c73,73
< import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;
---
> import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;
59,59c69,69
< import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
---
> import org.eclipse.gmf.runtime.common.core.util.StringStatics;
76a91,92
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
> 
78a95,96
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
> 
82a33,33
> import org.eclipse.core.runtime.NullProgressMonitor;
83,83d32
< import org.eclipse.gmf.runtime.emf.core.edit.MObjectState;
84a35,35
> import org.eclipse.core.runtime.Status;
84,84c34,34
< 
---
> 
85,85d34
< import org.eclipse.gmf.runtime.emf.core.edit.MRunOption;
86,86c36,36
< 
---
> 
87,87d36
< import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
91,91c101,101
< import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
---
> import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
92,92d101
< 
298,298c310,310
<             views.addAll (EObjectUtil.getReferencers (element, features));
---
>             views.addAll (EMFCoreUtil.getReferencers (element, features));
331a344,345
>         Map options = Collections.singletonMap (Transaction.OPTION_UNPROTECTED, Boolean.TRUE);
>         AbstractEMFOperation operation = new AbstractEMFOperation (((IGraphicalEditPart) getHost ()).getEditingDomain (), StringStatics.BLANK, options) {
332,333d343
<         int options = MRunOption.UNCHECKED;
<         MEditingDomainGetter.getMEditingDomain ((View) getHost ().getModel ()).runWithOptions (new MRunnable () {
334a347,347
>             protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
335,335d346
<             public Object run () {
336a349,349
>                 return Status.OK_STATUS;
336a719,723
>     private DiagramEventBroker getDiagramEventBroker () {
>         TransactionalEditingDomain theEditingDomain = ((IGraphicalEditPart) getHost ()).getEditingDomain ();
>         if (theEditingDomain != null) {
>             return DiagramEventBroker.getInstance (theEditingDomain);
>         }
337a725,726
>     }
> 
337,337c724,724
<                 return null;
---
>         return null;
341a354,360
>         ;
>         try {
>             operation.execute (new NullProgressMonitor (), null);
>         } catch (ExecutionException e) {
>             Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "executeCommand", e);
>             Log.warning (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "executeCommand", e);
>         }
342,342d353
<         , options);
464,464c482,482
<                 DiagramEventBroker.getInstance ().addNotificationListener (element, listener);
---
>                 getDiagramEventBroker ().addNotificationListener (element, listener);
480,480c498,498
<                 DiagramEventBroker.getInstance ().addNotificationListener (element, feature, listener);
---
>                 getDiagramEventBroker ().addNotificationListener (element, feature, listener);
495,495c513,513
<             DiagramEventBroker.getInstance ().removeNotificationListener ((EObject) objects [0], (EStructuralFeature) objects [1], (NotificationListener) objects [2]);
---
>             getDiagramEventBroker ().removeNotificationListener ((EObject) objects [0], (EStructuralFeature) objects [1], (NotificationListener) objects [2]);
497,497c515,515
<             DiagramEventBroker.getInstance ().removeNotificationListener ((EObject) objects [0], (NotificationListener) objects [1]);
---
>             getDiagramEventBroker ().removeNotificationListener ((EObject) objects [0], (NotificationListener) objects [1]);
511a530,537
>         if (! host ().isActive ()) {
>             return false;
>         }
>         EObject eObject = (EObject) host ().getModel ();
>         if (eObject != null && eObject.eResource () == null && ! eObject.eIsProxy ()) {
>             return false;
>         }
>         return true;
512,512d529
<         return host ().isActive () && ! EObjectUtil.getState ((EObject) host ().getModel ()).equals (MObjectState.DETACHED);
