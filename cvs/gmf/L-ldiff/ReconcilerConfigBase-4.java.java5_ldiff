6a7,8
> import java.util.Iterator;
> 
21a24,24
>     private final HashMap myAbstractEClass2SubclassesRecord;
24a28,28
>         myAbstractEClass2SubclassesRecord = new HashMap ();
30a35,38
>     public Copier getCopier (EClass eClass) {
>         return getRecord (eClass, false).getCopier ();
>     }
> 
38a47,57
>     protected final void setCopier (EClass eClass, Copier copier) {
>         getRecord (eClass, true).setCopier (copier);
>     }
> 
>     protected final void setMatcherForAllSubclasses (EClass eClass, Matcher matcher) {
>         if (! eClass.isAbstract ()) {
>             throw new IllegalArgumentException ("This is not safe method that may lead to strange behaviour in case of multiple inheritance. " + "We tried to limit its usage as much as possible");
>         }
>         getTemplateRecord (eClass, true).setMatcher (matcher);
>     }
> 
64a84,91
>                 for (Iterator superClasses = eClass.getEAllSuperTypes ().iterator ();
>                 result == EMPTY_RECORD && superClasses.hasNext ();) {
>                     EClass nextSuper = (EClass) superClasses.next ();
>                     result = getTemplateRecord (nextSuper, false);
>                 }
>                 if (result != EMPTY_RECORD) {
>                     myEClass2Record.put (eClass, result);
>                 }
69a97,106
>     private EClassRecord getTemplateRecord (EClass abstractSuperClass, boolean force) {
>         assert abstractSuperClass.isAbstract ();
>         EClassRecord result = (EClassRecord) myAbstractEClass2SubclassesRecord.get (abstractSuperClass);
>         if (result == null && force) {
>             result = new EClassRecord ();
>             myAbstractEClass2SubclassesRecord.put (abstractSuperClass, result);
>         }
>         return result == null ? EMPTY_RECORD : result;
>     }
> 
86a124,124
>         private Copier myCopier = Copier.NEVER_COPY;
94a133,136
>         public void setCopier (Copier copier) {
>             myCopier = copier;
>         }
> 
109a152,155
>         public Copier getCopier () {
>             return myCopier;
>         }
> 
