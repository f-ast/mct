4a5,6
> import java.util.HashSet;
> 
6a9,10
> import java.util.Set;
> 
32,37d35
<         if (nodeMap == null || genNode == null) {
<             throw new NullPointerException ();
<         }
<         if (myTopNodeMap.containsKey (nodeMap)) {
<             throw new IllegalArgumentException (nodeMap.toString ());
<         }
42,42d39
<         assert nodeMap != null && genNode != null && ! myNodeMap.containsKey (nodeMap);
43a41,42
>         Set genNodes = (Set) myNodeMap.get (nodeMap);
>         if (genNodes == null) {
43,43c40,40
<         if (nodeMap == null || genNode == null) {
---
>         assert nodeMap != null && genNode != null;
44a44,44
>             myNodeMap.put (nodeMap, genNodes);
44,44c43,43
<             throw new NullPointerException ();
---
>             genNodes = new HashSet ();
45a46,46
>         genNodes.add (genNode);
46,49d45
<         if (myNodeMap.containsKey (nodeMap)) {
<             throw new IllegalArgumentException (nodeMap.toString ());
<         }
<         myNodeMap.put (nodeMap, genNode);
58,58d54
<         assert nodeMap != null;
59,59c55,55
<         return myTopNodeMap.containsKey (nodeMap) || myNodeMap.containsKey (nodeMap);
---
>         return isKnownTopNode (nodeMap) || isKnownChildNode (nodeMap);
77,77c73,73
<     public GenChildNode findChildNode (NodeMapping nodeMap) {
---
>     public GenChildNode [] findChildNodes (NodeMapping nodeMap) {
79,79c75,75
<         return (GenChildNode) myNodeMap.get (nodeMap);
---
>         Set genNodes = (Set) myNodeMap.get (nodeMap);
79a76,79
>         if (genNodes == null) {
>             return new GenChildNode [0];
>         }
>         return (GenChildNode []) genNodes.toArray (new GenChildNode [genNodes.size ()]);
87,87c87,87
<     public GenNode find (NodeMapping nodeMap) {
---
>     public GenNode [] find (NodeMapping nodeMap) {
90,90c90,90
<         return genNode != null ? genNode : findChildNode (nodeMap);
---
>         return genNode != null ? new GenNode [] {genNode} : findChildNodes (nodeMap);
