2a3,8
> import java.util.HashMap;
> 
> import java.util.List;
> 
> import java.util.Map;
> 
4a11,14
> import org.eclipse.core.runtime.IProgressMonitor;
> 
> import org.eclipse.emf.ecore.EClass;
> 
6a17,24
> import org.eclipse.emf.ecore.EPackage;
> 
> import org.eclipse.emf.ecore.resource.Resource;
> 
> import org.eclipse.emf.ecore.xmi.XMLResource;
> 
> import org.eclipse.gmf.gmfgraph.Canvas;
> 
8a27,30
> import org.eclipse.gmf.gmfgraph.provider.GMFGraphEditPlugin;
> 
> import org.eclipse.gmf.internal.bridge.resolver.DomainModelSourceImpl;
> 
18a41,42
> import org.eclipse.gmf.internal.common.ui.ModelSelectionPage;
> 
20a45,46
> import org.eclipse.ui.actions.WorkspaceModifyOperation;
> 
21a48,48
>     protected ModelSelectionPage graphicalModelSelectionPage;
23a51,70
>     protected boolean isInReconcileMode () {
>         return graphicalModelSelectionPage != null && graphicalModelSelectionPage.getResource () != null;
>     }
> 
>     public boolean performFinish () {
>         if (isInReconcileMode ()) {
>             reconcileModel ();
>             try {
>                 saveModel (graphicalModelSelectionPage.getResource ());
>             } catch (Exception exception) {
>                 GMFGraphEditPlugin.INSTANCE.log (exception);
>                 return false;
>             }
>             WizardUtil.openEditor (graphicalModelSelectionPage.getResource ().getURI ());
>             return true;
>         } else {
>             return super.performFinish ();
>         }
>     }
> 
25,25c72,72
<         GraphDefBuilder builder = new GraphDefBuilder ();
---
>         GraphDefBuilder builder = new GraphDefBuilder (null);
28a76,113
>     @SuppressWarnings("unchecked")
>     protected void reconcileModel () {
>         Canvas existingCanvas = null;
>         for (EObject element : (List < ? extends EObject >) graphicalModelSelectionPage.getResource ().getContents ()) {
>             if (element instanceof Canvas) {
>                 existingCanvas = (Canvas) element;
>                 break;
>             }
>         }
>         GraphDefBuilder builder = new GraphDefBuilder (existingCanvas);
>         Canvas canvas = builder.process (graphicalDefinitionPage.getModel ());
>         if (canvas != null && existingCanvas != canvas) {
>             graphicalModelSelectionPage.getResource ().getContents ().add (canvas);
>         }
>     }
> 
>     @SuppressWarnings("unchecked")
>     protected void saveModel (final Resource resource) throws Exception {
>         WorkspaceModifyOperation operation = new WorkspaceModifyOperation () {
> 
>             protected void execute (IProgressMonitor progressMonitor) {
>                 try {
>                     Map options = new HashMap ();
>                     options.put (XMLResource.OPTION_ENCODING, "UTF-8");
>                     resource.save (options);
>                 } catch (Exception exception) {
>                     GMFGraphEditPlugin.INSTANCE.log (exception);
>                 } finally {
>                     progressMonitor.done ();
>                 }
>             }
> 
>         }
> 
>         ;
>         getContainer ().run (false, false, operation);
>     }
> 
29a115,136
>         ResourceLocationProvider rloc = new ResourceLocationProvider (selection);
>         final boolean reconcileMode = ! rloc.getSelectedURIs ("gmfgraph", true).isEmpty ();
>         if (reconcileMode) {
>             graphicalModelSelectionPage = new ModelSelectionPage ("GraphicalModelSelectionPage", rloc) {
> 
>                 protected String getModelFileExtension () {
>                     return "gmfgraph";
>                 }
> 
>                 protected void setResource (Resource resource) {
>                     super.setResource (resource);
>                     setPageComplete (getResource () != null);
>                 }
> 
>             }
> 
>             ;
>             graphicalModelSelectionPage.setPageComplete (false);
>             graphicalModelSelectionPage.setTitle ("Graphical Definition Model");
>             graphicalModelSelectionPage.setDescription ("Select graphical definition model to update. New diagram elements will be added to this model.");
>             addPage (graphicalModelSelectionPage);
>         } else {
36a144,144
>         }
37,37d143
<         ResourceLocationProvider rloc = new ResourceLocationProvider (selection);
42,42c149,149
<         graphicalDefinitionPage = new DefinitionPage ("GraphicalDefinitionPage", new StructureBuilder (new StructureResolver (), true), domainModelSelectionPage);
---
>         graphicalDefinitionPage = new DefinitionPage ("GraphicalDefinitionPage", new StructureBuilder (new StructureResolver (), true), domainModelSelectionPage) {
42a150,168
> 
>             protected DomainModelSourceImpl createDomainModelSource (EPackage contents, EClass diagramElement) {
>                 if (isInReconcileMode ()) {
>                     return new DomainModelSourceImpl (contents, diagramElement) {
> 
>                         public boolean isDisabled (EObject domainElement) {
>                             return GraphDefBuilder.getDiagramElement (graphicalModelSelectionPage.getResource ().getAllContents (), domainElement) != null;
>                         }
> 
>                     }
> 
>                     ;
>                 }
>                 return super.createDomainModelSource (contents, diagramElement);
>             }
> 
>         }
> 
>         ;
