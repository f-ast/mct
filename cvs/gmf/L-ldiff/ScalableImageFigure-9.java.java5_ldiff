4a5,6
> import org.eclipse.draw2d.ColorConstants;
> 
40,40c42,42
<     private RenderingListenerImpl renderingListener = new RenderingListenerImpl (this);
---
>     private RenderingListenerImpl renderingListener = new RenderingListenerImpl ();
41,41c43,43
<     static private class RenderingListenerImpl implements RenderingListener {
---
>     private class RenderingListenerImpl implements RenderingListener {
42,42d43
<         private ScalableImageFigure fig;
44,44c45,45
<         public RenderingListenerImpl (ScalableImageFigure fig) {
---
>         public RenderingListenerImpl () {
46,46d46
<             this.fig = fig;
48a49,50
>         public void paintFigureWhileRendering (Graphics g) {
>             ScalableImageFigure.this.paintFigureWhileRendering (g);
49,49c60,60
<         public ScalableImageFigure getFigure () {
---
>         public ScalableImageFigure getFigure () {
50a62,63
>         }
> 
50,50c61,61
<             return fig;
---
>             return ScalableImageFigure.this;
53a54,54
>             if (ScalableImageFigure.this.getParent () != null) {
54,54d53
<             if (getFigure ().getParent () != null) {
55,55c55,55
<                 getFigure ().setRenderedImage (rndImg);
---
>                 ScalableImageFigure.this.setRenderedImage (rndImg);
56,56c56,56
<                 getFigure ().repaint ();
---
>                 ScalableImageFigure.this.repaint ();
68,68c72,72
<             return getFigure ().hashCode ();
---
>             return ScalableImageFigure.this.hashCode ();
175a180,192
>     protected void paintFigureWhileRendering (Graphics g) {
>         Rectangle area = getClientArea ().getCopy ();
>         g.pushState ();
>         g.setBackgroundColor (ColorConstants.white);
>         g.fillRectangle (area.x, area.y, area.width - 1, area.height - 1);
>         g.setForegroundColor (ColorConstants.red);
>         g.drawRectangle (area.x, area.y, area.width - 1, area.height - 1);
>         g.setLineStyle (SWT.LINE_DOT);
>         g.drawLine (area.x, area.y, area.x + area.width, area.y + area.height);
>         g.drawLine (area.x + area.width, area.y, area.x, area.y + area.height);
>         g.popState ();
>     }
> 
