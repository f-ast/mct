3,4d2
< import java.text.MessageFormat;
< 
12a11,11
> import org.eclipse.gmf.runtime.common.core.util.StringStatics;
13,13c17,17
< import org.eclipse.jface.preference.PreferenceManager;
---
> import org.eclipse.jface.preference.PreferenceManager;
14,27d17
< 
< import org.eclipse.jface.preference.PreferenceNode;
< 
< import org.eclipse.jface.viewers.DialogCellEditor;
< 
< import org.eclipse.jface.viewers.ISelectionProvider;
< 
< import org.eclipse.swt.SWT;
< 
< import org.eclipse.swt.events.KeyAdapter;
< 
< import org.eclipse.swt.events.KeyEvent;
< 
< import org.eclipse.swt.events.ModifyEvent;
29,29c21,21
< import org.eclipse.swt.events.ModifyListener;
---
> import org.eclipse.swt.SWT;
31,31c19,19
< import org.eclipse.swt.events.MouseAdapter;
---
> import org.eclipse.jface.preference.PreferenceNode;
33,33d16
< import org.eclipse.swt.events.MouseEvent;
35,35d18
< import org.eclipse.swt.events.TraverseEvent;
37,37d20
< import org.eclipse.swt.events.TraverseListener;
45,45c13,13
< import org.eclipse.ui.dialogs.PropertyDialogAction;
---
> import org.eclipse.gmf.runtime.common.ui.dialogs.PropertiesDialog;
46,46d13
< 
52a35,35
> public class PropertyPageCellEditor extends MultiButtonCellEditor {
53,56d14
< import org.eclipse.gmf.runtime.common.core.util.StringStatics;
< 
< import org.eclipse.gmf.runtime.common.ui.dialogs.PropertiesDialog;
< 
57,57c15,15
< import org.eclipse.gmf.runtime.common.ui.services.properties.PropertiesService;
---
> import org.eclipse.gmf.runtime.common.ui.services.properties.PropertiesService;
58,65d15
< 
< public class PropertyPageCellEditor extends DialogCellEditor {
<     private Text text;
<     private ModifyListener modifyListener;
<     private boolean isSelection = false;
<     private boolean isDeleteable = false;
<     private boolean isSelectable = false;
<     ISelectionProvider selectionProvider;
67,67d36
<     private Object value = null;
82,137d50
<     protected Control createContents (Composite cell) {
<         setText (new Text (cell, getStyle ()));
<         text.addKeyListener (new KeyAdapter () {
< 
<             public void keyPressed (KeyEvent e) {
<                 keyReleaseOccured (e);
<                 if ((getControl () == null) || getControl ().isDisposed ()) return;
< 
<                 checkSelection ();
<                 checkDeleteable ();
<                 checkSelectable ();
<             }
< 
<         }
< 
<         );
<         text.addTraverseListener (new TraverseListener () {
< 
<             public void keyTraversed (TraverseEvent e) {
<                 if (e.detail == SWT.TRAVERSE_ESCAPE || e.detail == SWT.TRAVERSE_RETURN) {
<                     e.doit = false;
<                 }
<             }
< 
<         }
< 
<         );
<         text.addMouseListener (new MouseAdapter () {
< 
<             public void mouseUp (MouseEvent e) {
<                 checkSelection ();
<                 checkDeleteable ();
<                 checkSelectable ();
<             }
< 
<         }
< 
<         );
<         text.setFont (cell.getFont ());
<         text.setBackground (cell.getBackground ());
<         text.setText (StringStatics.BLANK);
<         text.addModifyListener (getModifyListener ());
<         return getText ();
<     }
< 
<     protected void updateContents (Object aValue) {
<         if (getText () == null) {
<             return;
<         }
<         String aText = StringStatics.BLANK;
<         if (aValue != null) {
<             aText = aValue.toString ();
<         }
<         getText ().setText (aText);
<     }
< 
201,289d113
<         return text;
<     }
< 
<     private void setText (Text text) {
<         this.text = text;
<     }
< 
<     protected void doSetFocus () {
<         if (getText () != null) {
<             getText ().selectAll ();
<             getText ().setFocus ();
<             checkSelection ();
<             checkDeleteable ();
<             checkSelectable ();
<         }
<     }
< 
<     protected Object doGetValue () {
<         String aText = getText ().getText ();
<         if (value instanceof ElementValue) {
<             ((ElementValue) value).setValue (aText);
<             return value;
<         }
<         return aText;
<     }
< 
<     protected void doSetValue (Object aValue) {
<         this.value = aValue;
<         assert null != getText ();
<         getText ().removeModifyListener (getModifyListener ());
<         getText ().setText (aValue.toString ());
<         getText ().addModifyListener (getModifyListener ());
<     }
< 
<     private ModifyListener getModifyListener () {
<         if (modifyListener == null) {
<             modifyListener = new ModifyListener () {
< 
<                 public void modifyText (ModifyEvent e) {
<                     editOccured (e);
<                 }
< 
<             }
< 
<             ;
<         }
<         return modifyListener;
<     }
< 
<     protected void editOccured (ModifyEvent e) {
<         String aValue = text.getText ();
<         if (aValue == null) {
<             aValue = StringStatics.BLANK;
<         }
<         Object typedValue = aValue;
<         boolean oldValidState = isValueValid ();
<         boolean newValidState = isCorrect (typedValue);
<         if (typedValue == null && newValidState) {
<             assert (false) : "Validator isn't limiting the cell editor's type range";
<         }
<         if (! newValidState) {
<             setErrorMessage (MessageFormat.format (getErrorMessage (), new Object [] {aValue}));
<         }
<         valueChanged (oldValidState, newValidState);
<     }
< 
<     private void checkDeleteable () {
<         boolean oldIsDeleteable = isDeleteable;
<         isDeleteable = isDeleteEnabled ();
<         if (oldIsDeleteable != isDeleteable) {
<             fireEnablementChanged (DELETE);
<         }
<     }
< 
<     private void checkSelectable () {
<         boolean oldIsSelectable = isSelectable;
<         isSelectable = isSelectAllEnabled ();
<         if (oldIsSelectable != isSelectable) {
<             fireEnablementChanged (SELECT_ALL);
<         }
<     }
< 
<     private void checkSelection () {
<         boolean oldIsSelection = isSelection;
<         isSelection = text.getSelectionCount () > 0;
<         if (oldIsSelection != isSelection) {
<             fireEnablementChanged (COPY);
<             fireEnablementChanged (CUT);
<         }
292a126,126
>         return false;
293,295d125
<         if (text == null || text.isDisposed ()) return false;
< 
<         return text.getSelectionCount () > 0;
298a130,130
>         return false;
299,301d129
<         if (text == null || text.isDisposed ()) return false;
< 
<         return text.getSelectionCount () > 0;
305,307d125
<         if (text == null || text.isDisposed ()) return false;
< 
<         return text.getSelectionCount () > 0 || text.getCaretPosition () < text.getCharCount ();
311,312d113
<         if (text == null || text.isDisposed ()) return false;
< 
313,313c114,114
<         return true;
---
>         return null;
317,318d117
<         if (text == null || text.isDisposed ()) return false;
< 
319,319c118,118
<         return true;
---
>         return false;
322a138,138
>         return false;
323,324d121
<         if (text == null || text.isDisposed ()) return false;
< 
325,325c122,122
<         return text.getCharCount () > 0;
---
>         return false;
329,329d141
<         text.copy ();
333,336d144
<         text.cut ();
<         checkSelection ();
<         checkDeleteable ();
<         checkSelectable ();
340,350d147
<         if (text.getSelectionCount () > 0) text.insert (StringStatics.BLANK);
<         else {
<             int pos = text.getCaretPosition ();
<             if (pos < text.getCharCount ()) {
<                 text.setSelection (pos, pos + 1);
<                 text.insert (StringStatics.BLANK);
<             }
<         }
<         checkSelection ();
<         checkDeleteable ();
<         checkSelectable ();
354,357d150
<         text.paste ();
<         checkSelection ();
<         checkDeleteable ();
<         checkSelectable ();
361,363d153
<         text.selectAll ();
<         checkSelection ();
<         checkDeleteable ();
366a157,170
>         return super.doGetValue ();
>     }
> 
>     protected void initButtons () {
>         IPropertyAction setAction = new IPropertyAction () {
> 
>             public Object execute (Control owner) {
>                 return openDialogBox (owner);
>             }
> 
>         }
> 
>         ;
>         addButton ("...", setAction);
367,367c134,134
<         return value;
---
>         return false;
