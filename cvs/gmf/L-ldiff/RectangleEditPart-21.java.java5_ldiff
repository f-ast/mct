21,22d20
< import org.eclipse.draw2d.Figure;
< 
27,28d24
< import org.eclipse.draw2d.LayoutManager;
< 
33,34d28
< import org.eclipse.draw2d.geometry.Point;
< 
41,42d34
< import org.eclipse.emf.common.notify.impl.AdapterImpl;
< 
47,48d38
< import org.eclipse.gef.EditPart;
< 
53,53c53,53
< import org.eclipse.gmf.gmfgraph.AbstractFigure;
---
> import org.eclipse.gmf.gmfgraph.Shape;
54,54d53
< 
58a183,190
>     private org.eclipse.gmf.gmfgraph.Rectangle getModelFigureElement () {
>         Shape shape = getShape ();
>         if (shape instanceof org.eclipse.gmf.gmfgraph.Rectangle) {
>             org.eclipse.gmf.gmfgraph.Rectangle modelFigureElement = (org.eclipse.gmf.gmfgraph.Rectangle) shape;
>             return modelFigureElement;
>         }
>         return null;
>     }
59,59d182
< import org.eclipse.gmf.gmfgraph.Dimension;
60,60c191,191
< 
---
> 
64a59,59
> import org.eclipse.gmf.graphdef.editor.edit.polocies.DomainBasedXYLayoutEditPolicy;
65,65d58
< import org.eclipse.gmf.gmfgraph.Layoutable;
66,66c60,60
< 
---
> 
69,69d52
< import org.eclipse.gmf.gmfgraph.XYLayoutData;
85,86d70
< import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;
< 
93,96d76
< import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy;
< 
< import org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy;
< 
101,102d80
< import org.eclipse.gmf.runtime.notation.Bounds;
< 
107,108d84
< import org.eclipse.gmf.runtime.notation.Node;
< 
131a108,108
>         return new DomainBasedXYLayoutEditPolicy (getMapMode ());
132,158d107
<         XYLayoutEditPolicy lep = new XYLayoutEditPolicy () {
< 
<             protected EditPolicy createChildEditPolicy (EditPart child) {
<                 EditPolicy result = super.createChildEditPolicy (child);
<                 if (result == null) {
<                     return new ResizableShapeEditPolicy ();
<                 }
<                 return result;
<             }
< 
<             protected Point getLayoutOrigin () {
<                 return ((GraphicalEditPart) getHost ()).getContentPane ().getClientArea ().getLocation ();
<             }
< 
<             protected Rectangle getCurrentConstraintFor (org.eclipse.gef.GraphicalEditPart child) {
<                 Rectangle result = super.getCurrentConstraintFor (child);
<                 if (result == null) {
<                     IFigure fig = child.getFigure ();
<                     result = fig.getBounds ().getCopy ();
<                 }
<                 return result;
<             }
< 
<         }
< 
<         ;
<         return lep;
164a201,203
>     protected void setFigure (IFigure figure) {
>         super.setFigure (figure);
>         org.eclipse.gmf.gmfgraph.Rectangle modelElement = (org.eclipse.gmf.gmfgraph.Rectangle) getModelFigureElement ();
165,165d200
<         org.eclipse.gmf.gmfgraph.Rectangle modelElement = (org.eclipse.gmf.gmfgraph.Rectangle) ((View) getModel ()).getElement ();
166,166c204,204
<         if (modelElement != null) {
---
>         if (modelElement != null) {
166a205,207
>             myFigure.setOutline (modelElement.isOutline ());
>             myFigure.setFill (modelElement.isFill ());
>             myFigure.setLineWidth (modelElement.getLineWidth ());
167,177d204
<             {
<                 layoutDataChanged (modelElement.getLayoutData ());
<             } {
<                 layoutChanged (modelElement.getLayout ());
<             } {
<                 myFigure.setOutline (modelElement.isOutline ());
<             } {
<                 myFigure.setFill (modelElement.isFill ());
<             } {
<                 myFigure.setLineWidth (modelElement.getLineWidth ());
<             } {
178,178c208,208
<                 myFigure.setLineStyle (getLineStyle (modelElement.getLineKind ()));
---
>             myFigure.setLineStyle (getLineStyle (modelElement.getLineKind ()));
178a209,209
>             myFigure.setFillXOR (modelElement.isXorFill ());
179,181d208
<             } {
<                 myFigure.setFillXOR (modelElement.isXorFill ());
<             } {
182,182c210,210
<                 myFigure.setOutlineXOR (modelElement.isXorOutline ());
---
>             myFigure.setOutlineXOR (modelElement.isXorOutline ());
182a211,211
>             myFigure.setLayoutManager (getLayoutManager (modelElement.getLayout ()));
183,183d210
<             }}
193,193d123
<         myNodeFigure = result;
251,251d180
<     protected Figure myNodeFigure;
255,256d192
<         View view = (View) getModel ();
<         if (view.getElement () != null) {
257,257c193,193
<             org.eclipse.gmf.gmfgraph.Rectangle modelElement = (org.eclipse.gmf.gmfgraph.Rectangle) view.getElement ();
---
>         org.eclipse.gmf.gmfgraph.Rectangle modelElement = (org.eclipse.gmf.gmfgraph.Rectangle) getModelFigureElement ();
257a194,194
>         if (modelElement != null) {
264,264c215,215
<     public void activate () {
---
>     public void activate () {
265,265c216,216
<         if (isActive ()) {
---
>         if (isActive ()) {
266,266d216
<             return;
268,271d212
<         View view = (View) getModel ();
<         if (view.getElement () == null) {
<             super.activate ();
<             return;
273a220,221
>         if (modelElement == null) {
>             super.activate ();
273,273c219,219
<         final org.eclipse.gmf.gmfgraph.Rectangle modelElement = (org.eclipse.gmf.gmfgraph.Rectangle) view.getElement ();
---
>         final org.eclipse.gmf.gmfgraph.Rectangle modelElement = (org.eclipse.gmf.gmfgraph.Rectangle) getModelFigureElement ();
274,274d219
<         myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData (), new AdapterImpl () {
276,277d214
<             public void notifyChanged (Notification msg) {
<                 if (msg.isTouch ()) {
280,289d218
<                 layoutDataChanged (modelElement.getLayoutData ());
<             }
< 
<         }
< 
<         ));
<         myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getLayoutable_Layout (), new AdapterImpl () {
< 
<             public void notifyChanged (Notification msg) {
<                 if (msg.isTouch ()) {
291a224,224
>         ChangeTracker outlineTracker = new ChangeTracker () {
292,294d281
<                 layoutChanged (modelElement.getLayout ());
<             }
< 
295,295c282,282
<         }
---
>         ;
295a283,283
>         myDomainElementAdapters.add (new FeatureTracker (outlineXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorOutline ()));
296,297d282
< 
<         ));
298,298c284,284
<         myDomainElementAdapters.add (new FeatureTracker (new ChangeTracker () {
---
>         ChangeTracker layoutManagerTracker = new ChangeTracker () {
305a232,232
>         ;
306,306d231
<         , GMFGraphPackage.eINSTANCE.getShape_Outline ()));
307a234,234
>         ChangeTracker fillTracker = new ChangeTracker () {
307,307c233,233
<         myDomainElementAdapters.add (new FeatureTracker (new ChangeTracker () {
---
>         myDomainElementAdapters.add (new FeatureTracker (outlineTracker, GMFGraphPackage.eINSTANCE.getShape_Outline ()));
314a242,242
>         ;
315,315d241
<         , GMFGraphPackage.eINSTANCE.getShape_Fill ()));
316,316c243,243
<         myDomainElementAdapters.add (new FeatureTracker (new ChangeTracker () {
---
>         myDomainElementAdapters.add (new FeatureTracker (fillTracker, GMFGraphPackage.eINSTANCE.getShape_Fill ()));
316a244,244
>         ChangeTracker lineWidthTracker = new ChangeTracker () {
323a252,253
>         ;
>         myDomainElementAdapters.add (new FeatureTracker (lineWidthTracker, GMFGraphPackage.eINSTANCE.getShape_LineWidth ()));
324,324d251
<         , GMFGraphPackage.eINSTANCE.getShape_LineWidth ()));
325,325c254,254
<         myDomainElementAdapters.add (new FeatureTracker (new ChangeTracker () {
---
>         ChangeTracker lineStyleTracker = new ChangeTracker () {
332a262,262
>         ;
333,333d261
<         , GMFGraphPackage.eINSTANCE.getShape_LineKind ()));
334,334c263,263
<         myDomainElementAdapters.add (new FeatureTracker (new ChangeTracker () {
---
>         myDomainElementAdapters.add (new FeatureTracker (lineStyleTracker, GMFGraphPackage.eINSTANCE.getShape_LineKind ()));
334a264,264
>         ChangeTracker fillXORTracker = new ChangeTracker () {
341a272,273
>         ;
>         myDomainElementAdapters.add (new FeatureTracker (fillXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorFill ()));
342,342d271
<         , GMFGraphPackage.eINSTANCE.getShape_XorFill ()));
343,343c274,274
<         myDomainElementAdapters.add (new FeatureTracker (new ChangeTracker () {
---
>         ChangeTracker outlineXORTracker = new ChangeTracker () {
351,461d281
<         , GMFGraphPackage.eINSTANCE.getShape_XorOutline ()));
<         modelElement.eAdapters ().addAll (myDomainElementAdapters);
<         final Bounds bounds = (Bounds) ((Node) view).getLayoutConstraint ();
<         final int sizeX;
<         final int sizeY;
<         if (modelElement.getPreferredSize () != null) {
<             sizeX = getMapMode ().DPtoLP (modelElement.getPreferredSize ().getDx ());
<             sizeY = getMapMode ().DPtoLP (modelElement.getPreferredSize ().getDy ());
<         } else {
<             sizeX = getMapMode ().DPtoLP (20);
<             sizeY = getMapMode ().DPtoLP (20);
<         }
<         final int locationX;
<         final int locationY;
<         if (modelElement.getLocation () != null) {
<             locationX = getMapMode ().DPtoLP (modelElement.getLocation ().getX ());
<             locationY = getMapMode ().DPtoLP (modelElement.getLocation ().getY ());
<         } else {
<             locationX = bounds.getX ();
<             locationY = bounds.getY ();
<         }
<         if (sizeX != bounds.getWidth () || sizeY != bounds.getHeight () || locationX != bounds.getX () || locationY != bounds.getY ()) {
<             try {
<                 new AbstractEMFOperation (getEditingDomain (), "Synchronizing view size with the model", Collections.singletonMap (Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) {
< 
<                     protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
<                         bounds.setX (locationX);
<                         bounds.setY (locationY);
<                         bounds.setWidth (sizeX);
<                         bounds.setHeight (sizeY);
<                         return Status.OK_STATUS;
<                     }
< 
<                 }
< 
<                 .execute (new NullProgressMonitor (), null);
<             } catch (ExecutionException e) {
<                 GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize view size with the model", e);
<             }
<         }
<         addListenerFilter ("BoundsListener", new NotificationListener () {
< 
<             public void notifyChanged (final Notification notification) {
<                 try {
<                     new AbstractEMFOperation (getEditingDomain (), "Synchronizing model size with the view", Collections.singletonMap (Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) {
< 
<                         protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
<                             Bounds bounds = (Bounds) notification.getNotifier ();
<                             Dimension dim = modelElement.getPreferredSize ();
<                             if (dim == null) {
<                                 dim = GMFGraphFactory.eINSTANCE.createDimension ();
<                                 modelElement.setPreferredSize (dim);
<                             }
<                             org.eclipse.gmf.gmfgraph.Point location = modelElement.getLocation ();
<                             if (location == null) {
<                                 location = GMFGraphFactory.eINSTANCE.createPoint ();
<                                 modelElement.setLocation (location);
<                             }
<                             int x = getMapMode ().LPtoDP (bounds.getX ());
<                             int y = getMapMode ().LPtoDP (bounds.getY ());
<                             int width = getMapMode ().LPtoDP (bounds.getWidth ());
<                             int height = getMapMode ().LPtoDP (bounds.getHeight ());
<                             if (location.getX () != x || location.getY () != y) {
<                                 location.setX (x);
<                                 location.setY (y);
<                             }
<                             if (dim.getDx () != width || dim.getDy () != height) {
<                                 dim.setDx (width);
<                                 dim.setDy (height);
<                             }
<                             myNodeFigure.setPreferredSize (bounds.getWidth (), bounds.getHeight ());
<                             myNodeFigure.setLocation (new Point (bounds.getX (), bounds.getY ()));
<                             if (modelElement.getLayoutData () instanceof XYLayoutData || (modelElement.eContainer () instanceof Layoutable && ((Layoutable) modelElement.eContainer ()).getLayout () instanceof org.eclipse.gmf.gmfgraph.XYLayout)) {
<                                 XYLayoutData xyLayoutData = (XYLayoutData) modelElement.getLayoutData ();
<                                 if (xyLayoutData == null) {
<                                     xyLayoutData = GMFGraphFactory.eINSTANCE.createXYLayoutData ();
<                                     modelElement.setLayoutData (xyLayoutData);
<                                     xyLayoutData.setTopLeft (GMFGraphFactory.eINSTANCE.createPoint ());
<                                     xyLayoutData.getTopLeft ().setX (0);
<                                     xyLayoutData.getTopLeft ().setY (0);
<                                     xyLayoutData.setSize (GMFGraphFactory.eINSTANCE.createDimension ());
<                                     xyLayoutData.getSize ().setDx (40);
<                                     xyLayoutData.getSize ().setDy (40);
<                                 }
<                                 org.eclipse.gmf.gmfgraph.Point topLeft;
<                                 if (xyLayoutData.getTopLeft () != null) {
<                                     topLeft = xyLayoutData.getTopLeft ();
<                                 } else {
<                                     topLeft = GMFGraphFactory.eINSTANCE.createPoint ();
<                                     xyLayoutData.setTopLeft (topLeft);
<                                 }
<                                 if (topLeft.getX () != location.getX () || topLeft.getY () != location.getY ()) {
<                                     topLeft.setX (location.getX ());
<                                     topLeft.setY (location.getY ());
<                                 }
<                                 Dimension size;
<                                 if (xyLayoutData.getSize () != null) {
<                                     size = xyLayoutData.getSize ();
<                                 } else {
<                                     size = GMFGraphFactory.eINSTANCE.createDimension ();
<                                     xyLayoutData.setSize (size);
<                                 }
<                                 if (size.getDx () != dim.getDx () || size.getDy () != dim.getDy ()) {
<                                     size.setDx (dim.getDx ());
<                                     size.setDy (dim.getDy ());
<                                 }
<                             }
<                             return Status.OK_STATUS;
<                         }
< 
<                     }
462a286,287
>             public void modelChanged (Notification msg) {
>                 myFigure.setLayoutManager (getLayoutManager (modelElement.getLayout ()));
463,469d285
<                     .execute (new NullProgressMonitor (), null);
<                 } catch (ExecutionException e) {
<                     GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize model size with the view", e);
<                 }
<                 if (getRoot () != null) {
<                     handleMajorSemanticChange ();
<                 }
473a292,296
>         ;
>         myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getLayoutable_Layout (), layoutManagerTracker, new AttachAdapter (GMFGraphPackage.eINSTANCE.getBorderLayout_Spacing (), layoutManagerTracker, new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy ())), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_Vertical ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MatchMinorSize ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_ForceSingleLine ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorAlignment ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorAlignment ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorSpacing ()), new
>           FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorSpacing ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_NumColumns ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_EqualWidth ()), new AttachAdapter (GMFGraphPackage.eINSTANCE.getGridLayout_Margins (), layoutManagerTracker, new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy ())), new AttachAdapter (GMFGraphPackage.eINSTANCE.getGridLayout_Spacing (), layoutManagerTracker, new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy ()))));
>         modelElement.eAdapters ().addAll (myDomainElementAdapters);
>         View view = getNotationView ();
474,474d291
<         , bounds);
610,627d431
<     protected LayoutManager getFigureLayoutManager () {
<         return myFigure.getLayoutManager ();
<     }
< 
<     protected void setFigureLayoutManager (LayoutManager layoutManager) {
<         myFigure.setLayoutManager (layoutManager);
<     }
< 
<     protected void refreshBounds () {
<         if (((View) getParent ().getModel ()).getElement () instanceof AbstractFigure) {
<             int width = ((Integer) getStructuralFeatureValue (NotationPackage.eINSTANCE.getSize_Width ())).intValue ();
<             int height = ((Integer) getStructuralFeatureValue (NotationPackage.eINSTANCE.getSize_Height ())).intValue ();
<             myNodeFigure.setPreferredSize (new org.eclipse.draw2d.geometry.Dimension (width, height));
<         } else {
<             super.refreshBounds ();
<         }
<     }
< 
