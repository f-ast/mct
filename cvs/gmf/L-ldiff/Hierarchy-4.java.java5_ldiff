28,28c28,28
<     private final List myRefs;
---
>     private final List < EReference > myRefs;
29a30,30
>     private final Map < EClass, Set < EClass > > myResult;
30,30d29
<     private final Map myResult;
31a32,32
>     private Set < EClass > myAccessibleClasses = new HashSet < EClass > ();
31,31c31,31
<     private Set myAccessibleLeaves;
---
>     private Set < EClass > myAccessibleLeaves;
32,32d31
<     private Set myAccessibleClasses = new HashSet ();
33,33c33,33
<     private Set myAccessibleLinkClasses = new HashSet ();
---
>     private Set < EClass > myAccessibleLinkClasses = new HashSet < EClass > ();
34,34c34,34
<     private Set myLinkClassContainmentRefs = new HashSet ();
---
>     private Set < EReference > myLinkClassContainmentRefs = new HashSet < EReference > ();
37,37c37,37
<     public Hierarchy (List eRefs, EClass diagramContainer, EPackage domainModel) {
---
>     public Hierarchy (List < EReference > eRefs, EClass diagramContainer, EPackage domainModel) {
41,41c41,41
<         myResult = new HashMap ();
---
>         myResult = new HashMap < EClass, Set < EClass > > ();
45,45c45,45
<             myResult.put (element.getEReferenceType (), new HashSet ());
---
>             myResult.put (element.getEReferenceType (), new HashSet < EClass > ());
48a49,49
>     @SuppressWarnings("unchecked")
52a54,54
>     @SuppressWarnings("unchecked")
73,73c75,75
<         ArrayList compatible = new ArrayList ();
---
>         ArrayList < EReference > compatible = new ArrayList < EReference > ();
86,86c88,88
<             EReference r = (EReference) compatible.get (i);
---
>             EReference r = compatible.get (i);
91,91c93,93
<         return (EReference) compatible.get (0);
---
>         return compatible.get (0);
124a127,127
>         Set < EClass > nonLeaves = new HashSet < EClass > ();
125,125d126
<         Set nonLeaves = new HashSet ();
126,126c128,128
<         final HashSet leavesSet = new HashSet ();
---
>         final HashSet < EClass > leavesSet = new HashSet < EClass > ();
131a134,134
>                 for (Map.Entry < EClass, Set < EClass > > entry : myResult.entrySet ()) {
132,134d133
<                 for (Iterator it2 = myResult.entrySet ().iterator ();
<                 it2.hasNext ();) {
<                     Map.Entry entry = (Map.Entry) it2.next ();
135,135c135,135
<                     EClass element = (EClass) entry.getKey ();
---
>                     final EClass element = entry.getKey ();
137,137c137,137
<                         ((Set) entry.getValue ()).add (eClass);
---
>                         entry.getValue ().add (eClass);
160,160c160,160
<     public Set getAllClasses () {
---
>     public Set < EClass > getAllClasses () {
161,161c161,161
<         HashSet rv = new HashSet ();
---
>         HashSet < EClass > rv = new HashSet < EClass > ();
162,162c162,162
<         for (Iterator it = myResult.values ().iterator ();
---
>         for (Set < EClass > next : myResult.values ()) {
163,164d162
<         it.hasNext ();) {
<             Set next = (Set) it.next ();
170,170c168,168
<     public Set getAccessibleClasses () {
---
>     public Set < EClass > getAccessibleClasses () {
174,174c172,172
<     public Set getAccessibleLinkClasses () {
---
>     public Set < EClass > getAccessibleLinkClasses () {
178,178c176,176
<     public Set getAccessibleReferences () {
---
>     public Set < EReference > getAccessibleReferences () {
182,182c180,180
<     public Set getAccessibleReferences (Iterator iter) {
---
>     public Set < EReference > getAccessibleReferences (Iterator < EClass > iter) {
183,183c181,181
<         HashSet rv = new HashSet ();
---
>         HashSet < EReference > rv = new HashSet < EReference > ();
185,185c183,183
<             EClass element = (EClass) iter.next ();
---
>             EClass element = iter.next ();
