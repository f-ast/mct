3,4d2
< import java.lang.reflect.InvocationTargetException;
< 
7,16d4
< import org.eclipse.core.runtime.CoreException;
< 
< import org.eclipse.core.runtime.IProgressMonitor;
< 
< import org.eclipse.core.runtime.IStatus;
< 
< import org.eclipse.core.runtime.Status;
< 
< import org.eclipse.emf.common.util.BasicDiagnostic;
< 
19,34d6
< import org.eclipse.emf.ecore.resource.ResourceSet;
< 
< import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
< 
< import org.eclipse.emf.ecore.util.Diagnostician;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
< 
< import org.eclipse.gmf.codegen.util.Generator;
< 
< import org.eclipse.gmf.internal.codegen.CodeGenUIPlugin;
< 
< import org.eclipse.gmf.internal.common.migrate.ModelLoadHelper;
< 
37,48d8
< import org.eclipse.jface.dialogs.ErrorDialog;
< 
< import org.eclipse.jface.dialogs.IDialogConstants;
< 
< import org.eclipse.jface.dialogs.MessageDialogWithToggle;
< 
< import org.eclipse.jface.dialogs.ProgressMonitorDialog;
< 
< import org.eclipse.jface.operation.IRunnableWithProgress;
< 
< import org.eclipse.jface.preference.IPreferenceStore;
< 
59,59c19,19
< public class ExecuteTemplatesAction implements IObjectActionDelegate, IRunnableWithProgress {
---
> public class ExecuteTemplatesAction implements IObjectActionDelegate {
60,60d19
<     private static final String ASK_OK = "ask_ok";
61,61c20,20
<     private IFile mySelection;
---
>     private IFile gmFile;
63,64d21
<     protected IStatus myRunStatus;
<     private GenEditorGenerator myGenModel;
70,142d26
<     public void run (IAction action) {
<         try {
<             IStatus loadStatus = loadGenModel ();
<             if (! canProcessGMFGenModel (loadStatus, action)) {
<                 return;
<             }
<             assert getGenModel () != null;
<             IStatus isGenModelValid = validateGenModel ();
<             if (! isGenModelValid.isOK ()) {
<                 final String [] buttons = new String [] {IDialogConstants.PROCEED_LABEL, IDialogConstants.CANCEL_LABEL};
<                 final int [] buttonIDs = new int [] {IDialogConstants.PROCEED_ID, IDialogConstants.CANCEL_ID};
<                 final String msg = CodeGenUIPlugin.getBundleString ("generatecode.badsrc");
<                 ErrorDialogEx dlg = new ErrorDialogEx (getShell (), action.getText (), msg, isGenModelValid, buttons, buttonIDs, 0);
<                 if (dlg.open () == IDialogConstants.CANCEL_ID) {
<                     return;
<                 }
<             }
<             doRunWithStatus ();
<             if (getRunStatus ().isOK ()) {
<                 if (! MessageDialogWithToggle.ALWAYS.equals (getPreferences ().getString (ASK_OK))) {
<                     MessageDialogWithToggle.openInformation (getShell (), action.getText (), CodeGenUIPlugin.getBundleString ("generatecode.ok"), CodeGenUIPlugin.getBundleString ("generatecode.neveragain"), false, getPreferences (), ASK_OK);
<                 }
<             } else if (myRunStatus.matches (IStatus.ERROR)) {
<                 CodeGenUIPlugin.getDefault ().getLog ().log (getRunStatus ());
<                 ErrorDialog.openError (getShell (), action.getText (), CodeGenUIPlugin.getBundleString ("generatecode.err"), getRunStatus ());
<             } else if (myRunStatus.matches (IStatus.WARNING)) {
<                 ErrorDialog.openError (getShell (), action.getText (), CodeGenUIPlugin.getBundleString ("generatecode.warn"), getRunStatus ());
<             } else if (myRunStatus.matches (IStatus.INFO)) {
<                 ErrorDialog.openError (getShell (), action.getText (), CodeGenUIPlugin.getBundleString ("generatecode.info"), getRunStatus ());
<             }
< 
<         } catch (InterruptedException ex) {
<         } finally {
<             unloadGenModel ();
<         }
<     }
< 
<     private boolean canProcessGMFGenModel (IStatus loadStatus, IAction action) {
<         if (! loadStatus.isOK ()) {
<             String [] buttons = new String [] {IDialogConstants.PROCEED_LABEL, IDialogConstants.CANCEL_LABEL};
<             int [] buttonIDs = new int [] {IDialogConstants.PROCEED_ID, IDialogConstants.CANCEL_ID};
<             if (myGenModel == null) {
<                 buttons = new String [] {buttons [1]};
<                 buttonIDs = new int [] {buttonIDs [1]};
<             }
<             ErrorDialogEx dlg = new ErrorDialogEx (getShell (), action.getText (), CodeGenUIPlugin.getBundleString ("generatecode.badsrc"), loadStatus, buttons, buttonIDs, 0);
<             if (dlg.open () == IDialogConstants.CANCEL_ID) {
<                 return false;
<             }
<         }
<         return true;
<     }
< 
<     private void doRunWithStatus () throws InterruptedException {
<         myRunStatus = Status.CANCEL_STATUS;
<         try {
<             new ProgressMonitorDialog (getShell ()).run (true, true, this);
<         } catch (InvocationTargetException ex) {
<             Throwable targetException = ex.getTargetException ();
<             if (targetException instanceof CoreException) {
<                 myRunStatus = ((CoreException) targetException).getStatus ();
<             } else {
<                 myRunStatus = new Status (IStatus.ERROR, CodeGenUIPlugin.getPluginID (), 0, "Exception occurred while generating code", targetException);
<             }
<         }
<     }
< 
<     public void run (IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
<         Generator g = new Generator (getGenModel (), CodeGenUIPlugin.getDefault ().getEmitters (getGenModel ()));
<         g.run (monitor);
<         myRunStatus = g.getRunStatus ();
<     }
< 
143a28,28
>         gmFile = (IFile) ((IStructuredSelection) selection).getFirstElement ();
144,150d27
<         mySelection = null;
<         action.setEnabled (false);
<         if (selection instanceof IStructuredSelection == false) {
<             return;
<         }
<         mySelection = (IFile) ((IStructuredSelection) selection).getFirstElement ();
<         action.setEnabled (true);
152a31,36
>     public void run (IAction action) {
>         ExecuteTemplatesOperation op = createOperation ();
>         op.setName (action.getText ());
>         op.setShell (getShell ());
>         op.setGenModelURI (URI.createPlatformResourceURI (gmFile.getFullPath ().toString ()));
>         op.run ();
153,182d30
<     private IStatus getRunStatus () {
<         return myRunStatus;
<     }
< 
<     protected final GenEditorGenerator getGenModel () {
<         return myGenModel;
<     }
< 
<     private IStatus loadGenModel () {
<         URI selected = URI.createPlatformResourceURI (mySelection.getFullPath ().toString ());
<         ResourceSet srcResSet = new ResourceSetImpl ();
<         ModelLoadHelper loadHelper = new ModelLoadHelper (srcResSet, selected);
<         Object root = loadHelper.getContentsRoot ();
<         if (root instanceof GenDiagram) {
<             myGenModel = ((GenDiagram) root).getEditorGen ();
<         } else if (root instanceof GenEditorGenerator) {
<             myGenModel = (GenEditorGenerator) root;
<         }
< 
<         if (myGenModel != null && myGenModel.getDomainGenModel () != null) {
<             myGenModel.getDomainGenModel ().reconcile ();
<         }
<         return loadHelper.getStatus ();
<     }
< 
<     private void unloadGenModel () {
<         if (myGenModel != null && myGenModel.eResource () != null) {
<             myGenModel.eResource ().unload ();
<         }
<         myGenModel = null;
184a39,40
>     protected ExecuteTemplatesOperation createOperation () {
>         return new ExecuteTemplatesOperation ();
185,186d38
<     private IStatus validateGenModel () {
<         return BasicDiagnostic.toIStatus (Diagnostician.INSTANCE.validate (getGenModel ()));
193,196d46
<     private static IPreferenceStore getPreferences () {
<         return CodeGenUIPlugin.getDefault ().getPreferenceStore ();
<     }
< 
