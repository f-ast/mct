140a141,150
>             case GMFGenPackage.GEN_DIAGRAM_PREFERENCES :
>                 return createGenDiagramPreferences ();
>             case GMFGenPackage.GEN_STANDARD_FONT :
>                 return createGenStandardFont ();
>             case GMFGenPackage.GEN_CUSTOM_FONT :
>                 return createGenCustomFont ();
>             case GMFGenPackage.GEN_RGB_COLOR :
>                 return createGenRGBColor ();
>             case GMFGenPackage.GEN_CONSTANT_COLOR :
>                 return createGenConstantColor ();
281a292,301
>             case GMFGenPackage.RULER_UNITS :
>                 return createRulerUnitsFromString (eDataType, initialValue);
>             case GMFGenPackage.ROUTING :
>                 return createRoutingFromString (eDataType, initialValue);
>             case GMFGenPackage.JFACE_FONT :
>                 return createJFaceFontFromString (eDataType, initialValue);
>             case GMFGenPackage.FONT_STYLE :
>                 return createFontStyleFromString (eDataType, initialValue);
>             case GMFGenPackage.DIAGRAM_COLORS :
>                 return createDiagramColorsFromString (eDataType, initialValue);
304a325,334
>             case GMFGenPackage.RULER_UNITS :
>                 return convertRulerUnitsToString (eDataType, instanceValue);
>             case GMFGenPackage.ROUTING :
>                 return convertRoutingToString (eDataType, instanceValue);
>             case GMFGenPackage.JFACE_FONT :
>                 return convertJFaceFontToString (eDataType, instanceValue);
>             case GMFGenPackage.FONT_STYLE :
>                 return convertFontStyleToString (eDataType, instanceValue);
>             case GMFGenPackage.DIAGRAM_COLORS :
>                 return convertDiagramColorsToString (eDataType, instanceValue);
340a371,395
>     public GenDiagramPreferences createGenDiagramPreferences () {
>         GenDiagramPreferencesImpl genDiagramPreferences = new GenDiagramPreferencesImpl ();
>         return genDiagramPreferences;
>     }
> 
>     public GenStandardFont createGenStandardFont () {
>         GenStandardFontImpl genStandardFont = new GenStandardFontImpl ();
>         return genStandardFont;
>     }
> 
>     public GenCustomFont createGenCustomFont () {
>         GenCustomFontImpl genCustomFont = new GenCustomFontImpl ();
>         return genCustomFont;
>     }
> 
>     public GenRGBColor createGenRGBColor () {
>         GenRGBColorImpl genRGBColor = new GenRGBColorImpl ();
>         return genRGBColor;
>     }
> 
>     public GenConstantColor createGenConstantColor () {
>         GenConstantColorImpl genConstantColor = new GenConstantColorImpl ();
>         return genConstantColor;
>     }
> 
675a731,785
>     public RulerUnits createRulerUnitsFromString (EDataType eDataType, String initialValue) {
>         RulerUnits result = RulerUnits.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertRulerUnitsToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public Routing createRoutingFromString (EDataType eDataType, String initialValue) {
>         Routing result = Routing.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertRoutingToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public JFaceFont createJFaceFontFromString (EDataType eDataType, String initialValue) {
>         JFaceFont result = JFaceFont.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertJFaceFontToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public FontStyle createFontStyleFromString (EDataType eDataType, String initialValue) {
>         FontStyle result = FontStyle.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertFontStyleToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public DiagramColors createDiagramColorsFromString (EDataType eDataType, String initialValue) {
>         DiagramColors result = DiagramColors.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertDiagramColorsToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
