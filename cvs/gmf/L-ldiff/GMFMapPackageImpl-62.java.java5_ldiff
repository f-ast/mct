350a351,354
>     public EReference getFeatureLabelMapping_EditableFeatures () {
>         return (EReference) featureLabelMappingEClass.getEStructuralFeatures ().get (1);
>     }
> 
352,352c372,372
<         return (EAttribute) featureLabelMappingEClass.getEStructuralFeatures ().get (1);
---
>         return (EAttribute) featureLabelMappingEClass.getEStructuralFeatures ().get (6);
356,356c356,356
<         return (EAttribute) featureLabelMappingEClass.getEStructuralFeatures ().get (2);
---
>         return (EAttribute) featureLabelMappingEClass.getEStructuralFeatures ().get (2);
360,360c368,368
<         return (EAttribute) featureLabelMappingEClass.getEStructuralFeatures ().get (4);
---
>         return (EAttribute) featureLabelMappingEClass.getEStructuralFeatures ().get (4);
364,364c360,360
<         return (EAttribute) featureLabelMappingEClass.getEStructuralFeatures ().get (3);
---
>         return (EAttribute) featureLabelMappingEClass.getEStructuralFeatures ().get (3);
368,368c364,364
<         return (EAttribute) featureLabelMappingEClass.getEStructuralFeatures ().get (5);
---
>         return (EAttribute) featureLabelMappingEClass.getEStructuralFeatures ().get (5);
747a752,752
>         createEReference (featureLabelMappingEClass, FEATURE_LABEL_MAPPING__EDITABLE_FEATURES);
917a923,923
>         initEReference (getFeatureLabelMapping_EditableFeatures (), ecorePackage.getEAttribute (), null, "editableFeatures", null, 0, - 1, FeatureLabelMapping.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
1061a1068,1068
>         addAnnotation (getFeatureLabelMapping_EditableFeatures (), source, new String [] {"ocl", "editableFeatures->forAll(f | f.eContainingClass.isSuperTypeOf(mapEntry.domainMetaElement))", "description", "Label attributes must be available in \'Domain Element\' EClass of the labeled mapping entry"});
