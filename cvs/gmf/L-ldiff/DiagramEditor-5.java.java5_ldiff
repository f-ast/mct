22a23,30
> import org.eclipse.draw2d.LightweightSystem;
> 
> import org.eclipse.draw2d.Viewport;
> 
> import org.eclipse.draw2d.parts.ScrollableThumbnail;
> 
> import org.eclipse.draw2d.parts.Thumbnail;
> 
40a49,50
> import org.eclipse.gef.LayerConstants;
> 
46a57,58
> import org.eclipse.gef.editparts.FreeformGraphicalRootEditPart;
> 
56a69,70
> import org.eclipse.gef.ui.actions.ActionRegistry;
> 
84a99,100
> import org.eclipse.jface.action.Action;
> 
86a103,104
> import org.eclipse.jface.action.IToolBarManager;
> 
88a107,110
> import org.eclipse.jface.viewers.ISelectionChangedListener;
> 
> import org.eclipse.jface.viewers.StructuredSelection;
> 
90a113,118
> import org.eclipse.swt.events.DisposeEvent;
> 
> import org.eclipse.swt.events.DisposeListener;
> 
> import org.eclipse.swt.widgets.Canvas;
> 
92a121,124
> import org.eclipse.swt.widgets.Control;
> 
> import org.eclipse.ui.IActionBars;
> 
106a139,144
> import org.eclipse.ui.part.IPageSite;
> 
> import org.eclipse.ui.part.Page;
> 
> import org.eclipse.ui.part.PageBook;
> 
113a152,338
>     protected static final int ID_OVERVIEW = 0;
>     protected static final int ID_OUTLINE = 1;
>     protected class DiagramContentOutlinePage extends Page implements IContentOutlinePage {
>         private ContentOutlinePage myOutlinePage;
>         private Canvas myOverview;
>         private PageBook myPageBook;
>         private IAction myShowOutlineAction;
>         private IAction myShowOverviewAction;
>         private Thumbnail myThumbnail;
>         private TreeViewer myTreeViewer;
>         private DisposeListener myDisposeListener;
> 
>         @Override
>         public void init (IPageSite pageSite) {
>             super.init (pageSite);
>             ActionRegistry registry = getActionRegistry ();
>             IActionBars bars = pageSite.getActionBars ();
>             String id = ActionFactory.UNDO.getId ();
>             bars.setGlobalActionHandler (id, registry.getAction (id));
>             id = ActionFactory.REDO.getId ();
>             bars.setGlobalActionHandler (id, registry.getAction (id));
>             id = ActionFactory.DELETE.getId ();
>             bars.setGlobalActionHandler (id, registry.getAction (id));
>             bars.updateActionBars ();
>             bars.getToolBarManager ().markDirty ();
>         }
> 
>         public void addSelectionChangedListener (ISelectionChangedListener listener) {
>             if (myOutlinePage != null) {
>                 myOutlinePage.addSelectionChangedListener (listener);
>             }
>         }
> 
>         public void removeSelectionChangedListener (ISelectionChangedListener listener) {
>             if (myOutlinePage != null) {
>                 myOutlinePage.removeSelectionChangedListener (listener);
>             }
>         }
> 
>         public ISelection getSelection () {
>             if (myOutlinePage != null) {
>                 return myOutlinePage.getSelection ();
>             }
>             return StructuredSelection.EMPTY;
>         }
> 
>         public void setSelection (ISelection selection) {
>             if (myOutlinePage != null) {
>                 myOutlinePage.setSelection (selection);
>             }
>         }
> 
>         @Override
>         public void createControl (Composite parent) {
>             myPageBook = new PageBook (parent, SWT.NONE);
>             myTreeViewer = new TreeViewer ();
>             myTreeViewer.setRootEditPart (new RootTreeEditPart ());
>             myTreeViewer.setEditDomain (getEditDomain ());
>             myTreeViewer.setEditPartFactory (new DiagramTreeEditPartFactory (getGraphicalViewer ()));
>             configureTreeViewer (myTreeViewer);
>             myOutlinePage = new ContentOutlinePage (myTreeViewer);
>             myOutlinePage.createControl (myPageBook);
>             myTreeViewer.setContents (getGraphicalViewer ().getContents ().getModel ());
>             hookOutlineViewer (myTreeViewer);
>             configureOutlinePage ();
>             showPage (getDefaultOutlineViewMode ());
>         }
> 
>         protected void hookOutlineViewer (TreeViewer viewer) {
>             getSelectionSynchronizer ().addViewer (viewer);
>         }
> 
>         protected void unhookOutlineViewer (TreeViewer viewer) {
>             getSelectionSynchronizer ().removeViewer (viewer);
>         }
> 
>         protected void configureOutlinePage () {
>             IToolBarManager tbm = this.getSite ().getActionBars ().getToolBarManager ();
>             myShowOutlineAction = new Action () {
> 
>                 public void run () {
>                     showPage (ID_OUTLINE);
>                 }
> 
>             }
> 
>             ;
>             myShowOutlineAction.setImageDescriptor (Activator.getImageDescriptor ("icons/outline.gif"));
>             myShowOutlineAction.setToolTipText ("Show Outline");
>             tbm.add (myShowOutlineAction);
>             myShowOverviewAction = new Action () {
> 
>                 public void run () {
>                     showPage (ID_OVERVIEW);
>                 }
> 
>             }
> 
>             ;
>             myShowOverviewAction.setImageDescriptor (Activator.getImageDescriptor ("icons/overview.gif"));
>             myShowOverviewAction.setToolTipText ("Show Overview");
>             tbm.add (myShowOverviewAction);
>         }
> 
>         protected void configureTreeViewer (TreeViewer treeViewer) {
>             KeyHandler keyHandler = new KeyHandler ();
>             keyHandler.put (KeyStroke.getPressed (SWT.DEL, 127, 0), getActionRegistry ().getAction (ActionFactory.DELETE.getId ()));
>             keyHandler.put (KeyStroke.getPressed (SWT.F2, 0), getActionRegistry ().getAction (GEFActionConstants.DIRECT_EDIT));
>             treeViewer.setKeyHandler (keyHandler);
>         }
> 
>         protected void showPage (int pageId) {
>             switch (pageId) {
>                 case ID_OUTLINE :
>                     myShowOutlineAction.setChecked (true);
>                     myShowOverviewAction.setChecked (false);
>                     myPageBook.showPage (myOutlinePage.getControl ());
>                     if (myThumbnail != null) {
>                         myThumbnail.setVisible (false);
>                     }
>                     break;
>                 case ID_OVERVIEW :
>                     myShowOutlineAction.setChecked (false);
>                     myShowOverviewAction.setChecked (true);
>                     if (myOverview == null || myOverview.isDisposed ()) {
>                         initializeOverview ();
>                     }
>                     myPageBook.showPage (myOverview);
>                     if (myThumbnail != null) {
>                         myThumbnail.setVisible (true);
>                     }
>             }
>         }
> 
>         protected void initializeOverview () {
>             myOverview = new Canvas (myPageBook, SWT.NONE);
>             LightweightSystem lws = new LightweightSystem (myOverview);
>             FreeformGraphicalRootEditPart root = (FreeformGraphicalRootEditPart) getGraphicalViewer ().getRootEditPart ();
>             myThumbnail = new ScrollableThumbnail ((Viewport) root.getFigure ());
>             myThumbnail.setSource (root.getLayer (LayerConstants.SCALABLE_LAYERS));
>             lws.setContents (myThumbnail);
>             myDisposeListener = new DisposeListener () {
> 
>                 public void widgetDisposed (DisposeEvent e) {
>                     if (myThumbnail != null) {
>                         myThumbnail.deactivate ();
>                         myThumbnail = null;
>                     }
>                 }
> 
>             }
> 
>             ;
>             getGraphicalControl ().addDisposeListener (myDisposeListener);
>         }
> 
>         @Override
>         public Control getControl () {
>             return myPageBook;
>         }
> 
>         @Override
>         public void setFocus () {
>             if (myOutlinePage != null) {
>                 myOutlinePage.setFocus ();
>             }
>         }
> 
>         @Override
>         public void dispose () {
>             if (myOutlinePage != null) {
>                 myOutlinePage.dispose ();
>             }
>             unhookOutlineViewer (myTreeViewer);
>             if (myThumbnail != null) {
>                 myThumbnail.deactivate ();
>                 myThumbnail = null;
>             }
>             if (myDisposeListener != null) {
>                 getGraphicalControl ().removeDisposeListener (myDisposeListener);
>             }
>             myOverview = null;
>             super.dispose ();
>         }
> 
>     }
> 
278a504,504
>         return new DiagramContentOutlinePage ();
279,294d503
<         final TreeViewer treeViewer = new TreeViewer ();
<         treeViewer.setRootEditPart (new RootTreeEditPart ());
<         treeViewer.setEditDomain (getEditDomain ());
<         treeViewer.setEditPartFactory (new DiagramTreeEditPartFactory (getGraphicalViewer ()));
<         getSelectionSynchronizer ().addViewer (treeViewer);
<         configureTreeViewer (treeViewer);
<         return new ContentOutlinePage (treeViewer) {
< 
<             public void createControl (Composite parent) {
<                 super.createControl (parent);
<                 treeViewer.setContents (getGraphicalViewer ().getContents ().getModel ());
<             }
< 
<         }
< 
<         ;
296a507,508
>     protected int getDefaultOutlineViewMode () {
>         return ID_OVERVIEW;
297,301d506
<     protected void configureTreeViewer (TreeViewer treeViewer) {
<         KeyHandler keyHandler = new KeyHandler ();
<         keyHandler.put (KeyStroke.getPressed (SWT.DEL, 127, 0), getActionRegistry ().getAction (ActionFactory.DELETE.getId ()));
<         keyHandler.put (KeyStroke.getPressed (SWT.F2, 0), getActionRegistry ().getAction (GEFActionConstants.DIRECT_EDIT));
<         treeViewer.setKeyHandler (keyHandler);
