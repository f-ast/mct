2a3,6
> import java.util.HashSet;
> 
> import java.util.Set;
> 
4a9,12
> import org.eclipse.core.resources.IProject;
> 
> import org.eclipse.core.resources.ProjectScope;
> 
6a15,16
> import org.eclipse.core.runtime.Platform;
> 
15a26,27
>     private static final String PREF_KEY = "gmf_dashboard";
>     private static final String OPTION_PREFIX = "option_";
27a40,41
>     private Set < String > enabledOptions;
>     private IProject project;
28,28c243,243
<     private Preferences prefs;
---
>         savePreferences (prefs);
28a244,246
>     }
> 
>     private void savePreferences (Preferences prefs) {
30a44,44
>         enabledOptions = new HashSet < String > ();
33,33c47,47
<     public DashboardState (Preferences prefs) {
---
>     public DashboardState (IProject project) {
33a48,48
>         this ();
34a50,53
>         Preferences prefs = getPreferences ();
>         if (prefs != null) {
>             readOptions (prefs);
>             dm = read (prefs, DM_KEY);
34,34c49,49
<         this.prefs = prefs;
---
>         this.project = project;
35,35d49
<         dm = read (DM_KEY);
36,36c54,54
<         dgm = read (DGM_KEY);
---
>             dgm = read (prefs, DGM_KEY);
37,37c55,55
<         gdm = read (GDM_KEY);
---
>             gdm = read (prefs, GDM_KEY);
38,38c56,56
<         tdm = read (TDM_KEY);
---
>             tdm = read (prefs, TDM_KEY);
39,39c57,57
<         mm = read (MM_KEY);
---
>             mm = read (prefs, MM_KEY);
40,40c58,58
<         gm = read (GM_KEY);
---
>             gm = read (prefs, GM_KEY);
40a59,59
>         }
160a180,193
>     public boolean getOption (String name) {
>         return enabledOptions.contains (name);
>     }
> 
>     public void setOption (String name, boolean value) {
>         if (name == null) {
>             throw new IllegalArgumentException ();
>         }
>         if (value) {
>             enabledOptions.add (name);
>         } else {
>             enabledOptions.remove (name);
>         }
>         Preferences prefs = getPreferences ();
161,161d179
<     private URI read (String key) {
162a195,201
>             return;
>         }
>         String key = OPTION_PREFIX + name;
>         if (value) {
>             prefs.put (key, "*");
>         } else {
>             prefs.remove (key);
162a234,234
>         if (project == null) {
163,163c235,235
<             return null;
---
>             return;
163a236,236
>         }
164a203,219
>         savePreferences (prefs);
>     }
> 
>     private void readOptions (Preferences prefs) {
>         try {
>             for (String key : prefs.keys ()) {
>                 if (key.startsWith (OPTION_PREFIX)) {
>                     enabledOptions.add (key.substring (OPTION_PREFIX.length ()));
>                 }
>             }
>         } catch (BackingStoreException e) {
>             IStatus status = Plugin.createError ("Unable to read options", e);
>             Plugin.getDefault ().getLog ().log (status);
>         }
>     }
> 
>     private URI read (Preferences prefs, String key) {
182a241,241
>         Preferences prefs = getPreferences ();
191a255,290
>     private Preferences getPreferences () {
>         if (project == null) {
>             return null;
>         }
>         Preferences node = getExistingPreferences ();
>         if (node != null) {
>             return node;
>         }
>         return new ProjectScope (project).getNode (Plugin.getPluginID ()).node (PREF_KEY);
>     }
> 
>     private Preferences getExistingPreferences () {
>         if (project == null) {
>             return null;
>         }
>         Preferences node = Platform.getPreferencesService ().getRootNode ().node (ProjectScope.SCOPE);
>         try {
>             if (! node.nodeExists (project.getName ())) {
>                 return null;
>             }
>             node = node.node (project.getName ());
>             if (! node.nodeExists (Plugin.getPluginID ())) {
>                 return null;
>             }
>             node = node.node (Plugin.getPluginID ());
>             if (! node.nodeExists (PREF_KEY)) {
>                 return null;
>             }
>             return node.node (PREF_KEY);
>         } catch (BackingStoreException e) {
>             IStatus status = Plugin.createError ("Unable to read state", e);
>             Plugin.getDefault ().getLog ().log (status);
>         }
>         return null;
>     }
> 
