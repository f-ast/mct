3,10d2
< import java.text.ParseException;
< 
< import java.util.ArrayList;
< 
< import java.util.Collections;
< 
< import java.util.List;
< 
12a5,5
> import org.eclipse.gmf.runtime.diagram.ui.printing.internal.util.SWTDiagramPrinter;
13,51d4
< import org.eclipse.gmf.runtime.common.core.util.Log;
< 
< import org.eclipse.gmf.runtime.common.core.util.Trace;
< 
< import org.eclipse.gmf.runtime.common.ui.printing.IPrintHelper;
< 
< import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
< 
< import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupPageType;
< 
< import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;
< 
< import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;
< 
< import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;
< 
< import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;
< 
< import org.eclipse.gmf.runtime.diagram.ui.printing.actions.DefaultPrintActionHelper;
< 
< import org.eclipse.gmf.runtime.diagram.ui.printing.internal.DiagramPrintingDebugOptions;
< 
< import org.eclipse.gmf.runtime.diagram.ui.printing.internal.DiagramPrintingPlugin;
< 
< import org.eclipse.gmf.runtime.diagram.ui.printing.internal.DiagramPrintingStatusCodes;
< 
< import org.eclipse.gmf.runtime.diagram.ui.printing.internal.l10n.DiagramUIPrintingMessages;
< 
< import org.eclipse.gmf.runtime.diagram.ui.printing.internal.util.DiagramPrinter;
< 
< import org.eclipse.gmf.runtime.notation.Diagram;
< 
< import org.eclipse.jface.dialogs.MessageDialog;
< 
< import org.eclipse.jface.preference.IPreferenceStore;
< 
< import org.eclipse.jface.util.Assert;
< 
< import org.eclipse.swt.printing.Printer;
52a7,7
> import org.eclipse.gmf.runtime.diagram.ui.printing.internal.util.SWTDiagramPrinterHelper;
53,55d6
< import org.eclipse.swt.printing.PrinterData;
< 
< import org.eclipse.swt.widgets.Display;
59,60d10
< import com.ibm.icu.text.NumberFormat;
< 
62a13,14
>     public static void printWithSettings (IEditorPart editorPart, Map diagramMap, SWTDiagramPrinter diagramPrinter) {
>         SWTDiagramPrinterHelper.getDiagramPrinterHelper ().printWithSettings (editorPart, diagramMap, diagramPrinter);
63,165d12
<     private static void printDiagrams (DiagramPrinter diagramPrinter, IPrintHelper helper) {
<         if (helper.getDlgPrintRangePages ()) {
<             diagramPrinter.setPrintRangePageSelection (true);
<             diagramPrinter.setPrintRangePages (helper.getDlgPagesFrom (), helper.getDlgPagesTo ());
<             diagramPrinter.setFitToPage (false);
<         }
<         if (helper.getDlgScalePercent () == - 1) {
<             diagramPrinter.setColumns (helper.getDlgScaleFitToM ());
<             diagramPrinter.setRows (helper.getDlgScaleFitToN ());
<             diagramPrinter.setFitToPage (true);
<         } else {
<             diagramPrinter.setScaledPercent (helper.getDlgScalePercent ());
<             diagramPrinter.setFitToPage (false);
<         }
<         diagramPrinter.run ();
<     }
< 
<     public static void printWithSettings (IEditorPart editorPart, Map diagramMap, DiagramPrinter diagramPrinter) {
<         List diagramNames;
<         PrinterData printerData;
<         IPrintHelper helper;
<         IPreferenceStore pref = null;
<         try {
<             Class printhelperClass = Class.forName (IPrintHelper.PRINT_HELPER_CLASS_NAME);
<             helper = (IPrintHelper) printhelperClass.newInstance ();
<             diagramNames = new ArrayList (diagramMap.keySet ());
<             if (editorPart instanceof IDiagramWorkbenchPart) {
<                 IDiagramGraphicalViewer viewer = ((IDiagramWorkbenchPart) editorPart).getDiagramGraphicalViewer ();
<                 if (viewer instanceof DiagramGraphicalViewer) {
<                     pref = ((DiagramGraphicalViewer) viewer).getWorkspaceViewerPreferenceStore ();
<                     if (pref.getBoolean (WorkspaceViewerProperties.PREF_USE_WORKSPACE_SETTINGS)) {
<                         if (((IDiagramWorkbenchPart) editorPart).getDiagramEditPart ().getDiagramPreferencesHint ().getPreferenceStore () != null) pref = (IPreferenceStore) ((IDiagramWorkbenchPart) editorPart).getDiagramEditPart ().getDiagramPreferencesHint ().getPreferenceStore ();
< 
<                     }
<                 }
<             }
<             if (pref != null) {
<                 helper.setDlgOrientation (pref.getBoolean (WorkspaceViewerProperties.PREF_USE_LANDSCAPE));
<                 PageSetupPageType storedPageType = PageSetupPageType.LETTER;
<                 String strPageType = pref.getString (WorkspaceViewerProperties.PREF_PAGE_SIZE);
<                 for (int i = 0;
<                 i < PageSetupPageType.pages.length; i ++) {
<                     if (strPageType.startsWith (PageSetupPageType.pages [i].getName ())) {
<                         storedPageType = PageSetupPageType.pages [i];
<                         break;
<                     }
<                 }
<                 if (storedPageType.getIndex () == PageSetupPageType.USER_DEFINED.getIndex ()) {
<                     NumberFormat fNumberFormat = NumberFormat.getNumberInstance ();
<                     ;
<                     String strWidth = pref.getString (WorkspaceViewerProperties.PREF_PAGE_WIDTH);
<                     String strHeight = pref.getString (WorkspaceViewerProperties.PREF_PAGE_HEIGHT);
<                     double width = 0, height = 0;
<                     try {
<                         Number num = fNumberFormat.parse (strWidth);
<                         width = num.doubleValue () / 0.0394d;
<                         num = fNumberFormat.parse (strHeight);
<                         height = num.doubleValue () / 0.0394d;
<                         helper.setDlgPaperSize (PageSetupPageType.USER_DEFINED.getIndex (), width, height);
<                     } catch (ParseException e) {
<                         Log.warning (DiagramPrintingPlugin.getInstance (), DiagramPrintingStatusCodes.IGNORED_EXCEPTION_WARNING, e.getMessage (), e);
<                     }
<                 } else helper.setDlgPaperSize (storedPageType.getIndex (), 0, 0);
< 
<             }
<             printerData = helper.openPrintDlg (diagramNames);
<         } catch (Throwable e) {
<             Trace.catching (DiagramPrintingPlugin.getInstance (), DiagramPrintingDebugOptions.EXCEPTIONS_CATCHING, DiagramPrinterUtil.class, e.getMessage (), e);
<             Log.warning (DiagramPrintingPlugin.getInstance (), DiagramPrintingStatusCodes.RESOURCE_FAILURE, e.getMessage (), e);
<             if (MessageDialog.openQuestion (Display.getDefault ().getActiveShell (), DiagramUIPrintingMessages.DiagramPrinterUtil_DLLErrorTitle, DiagramUIPrintingMessages.DiagramPrinterUtil_DLLErrorMessage_part1 + "\n" + DiagramUIPrintingMessages.DiagramPrinterUtil_DLLErrorMessage_part2 + "\n" + DiagramUIPrintingMessages.DiagramPrinterUtil_DLLErrorMessage_part3 + "\n\n" + DiagramUIPrintingMessages.DiagramPrinterUtil_DLLErrorMessage_part4)) {
<                 DefaultPrintActionHelper.doRun (editorPart, diagramPrinter);
<             }
<             return;
<         }
<         Assert.isNotNull (diagramNames);
<         Assert.isNotNull (helper);
<         if (printerData != null) {
<             final Printer printer = new Printer (printerData);
<             diagramPrinter.setPrinter (printer);
<             diagramPrinter.setDisplayDPI (Display.getDefault ().getDPI ());
<             if (helper.getDlgDiagramPrintRangeCurrent ()) {
<                 DiagramEditPart dgrmEP = ((IDiagramWorkbenchPart) editorPart).getDiagramEditPart ();
<                 assert dgrmEP != null;
<                 diagramPrinter.setDiagrams (Collections.singletonList (dgrmEP.getDiagramView ().getDiagram ()));
<             } else if (helper.getDlgDiagramPrintRangeAll ()) {
<                 diagramPrinter.setDiagrams (diagramMap.values ());
<             } else if (helper.getDlgDiagramPrintRangeSelection ()) {
<                 Object obj;
<                 List list = new ArrayList ();
<                 for (int i = 0;
<                 i < diagramNames.size (); i ++) {
<                     if (helper.isDlgDiagramSelected (i)) {
<                         obj = diagramMap.get (diagramNames.get (i));
<                         Assert.isTrue (obj instanceof Diagram);
<                         list.add (obj);
<                     }
<                 }
<                 diagramPrinter.setDiagrams (list);
<             }
< 
<             printDiagrams (diagramPrinter, helper);
<             printer.dispose ();
<         }
