3,3c3,3
< import org.eclipse.emf.codegen.util.CodeGenUtil;
---
> import org.eclipse.emf.common.notify.Notification;
6a7,8
> import org.eclipse.emf.ecore.impl.ENotificationImpl;
> 
13,14d14
< import org.eclipse.gmf.codegen.gmfgen.ValueExpression;
< 
15a16,19
>     protected static final boolean THROW_EXCEPTION_EDEFAULT = true;
>     protected boolean throwException = THROW_EXCEPTION_EDEFAULT;
>     protected static final boolean INJECT_EXPRESSION_BODY_EDEFAULT = false;
>     protected boolean injectExpressionBody = INJECT_EXPRESSION_BODY_EDEFAULT;
25a30,42
>     public boolean isThrowException () {
>         return throwException;
>     }
> 
>     public void setThrowException (boolean newThrowException) {
>         boolean oldThrowException = throwException;
>         throwException = newThrowException;
>         if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__THROW_EXCEPTION, oldThrowException, throwException));
> 
>     }
> 
>     public boolean isInjectExpressionBody () {
>         return injectExpressionBody;
26,27d29
<     public GenLanguage getLanguage () {
<         return GenLanguage.JAVA_LITERAL;
29a45,71
>     public void setInjectExpressionBody (boolean newInjectExpressionBody) {
>         boolean oldInjectExpressionBody = injectExpressionBody;
>         injectExpressionBody = newInjectExpressionBody;
>         if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__INJECT_EXPRESSION_BODY, oldInjectExpressionBody, injectExpressionBody));
> 
>     }
> 
>     @Override
>     public Object eGet (int featureID, boolean resolve, boolean coreType) {
>         switch (featureID) {
>             case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__THROW_EXCEPTION :
>                 return isThrowException () ? Boolean.TRUE : Boolean.FALSE;
>             case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__INJECT_EXPRESSION_BODY :
>                 return isInjectExpressionBody () ? Boolean.TRUE : Boolean.FALSE;
>         }
>         return super.eGet (featureID, resolve, coreType);
>     }
> 
>     @Override
>     public void eSet (int featureID, Object newValue) {
>         switch (featureID) {
>             case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__THROW_EXCEPTION :
>                 setThrowException (((Boolean) newValue).booleanValue ());
>                 return;
>             case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__INJECT_EXPRESSION_BODY :
>                 setInjectExpressionBody (((Boolean) newValue).booleanValue ());
>                 return;
30,32d44
<     public String getOperationName (ValueExpression expression) {
<         if (expression.getBody () == null) {
<             return "Null";
33a73,114
>         super.eSet (featureID, newValue);
>     }
> 
>     @Override
>     public void eUnset (int featureID) {
>         switch (featureID) {
>             case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__THROW_EXCEPTION :
>                 setThrowException (THROW_EXCEPTION_EDEFAULT);
>                 return;
>             case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__INJECT_EXPRESSION_BODY :
>                 setInjectExpressionBody (INJECT_EXPRESSION_BODY_EDEFAULT);
>                 return;
>         }
>         super.eUnset (featureID);
>     }
> 
>     @Override
>     public boolean eIsSet (int featureID) {
>         switch (featureID) {
>             case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__THROW_EXCEPTION :
>                 return throwException != THROW_EXCEPTION_EDEFAULT;
>             case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__INJECT_EXPRESSION_BODY :
>                 return injectExpressionBody != INJECT_EXPRESSION_BODY_EDEFAULT;
>         }
>         return super.eIsSet (featureID);
>     }
> 
>     @Override
>     public String toString () {
>         if (eIsProxy ()) return super.toString ();
> 
>         StringBuffer result = new StringBuffer (super.toString ());
>         result.append (" (throwException: ");
>         result.append (throwException);
>         result.append (", injectExpressionBody: ");
>         result.append (injectExpressionBody);
>         result.append (')');
>         return result.toString ();
>     }
> 
>     public GenLanguage getLanguage () {
>         return GenLanguage.JAVA_LITERAL;
34,34d72
<         return CodeGenUtil.validJavaIdentifier (expression.getBody ());
