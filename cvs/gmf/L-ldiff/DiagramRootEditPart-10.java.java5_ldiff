26a27,28
> import org.eclipse.gef.editparts.GridLayer;
> 
42a45,46
> import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.GridLayerEx;
> 
60a65,66
> import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
> 
74a81,84
> import org.eclipse.swt.SWT;
> 
> import org.eclipse.swt.graphics.Color;
> 
112a123,124
>     private int printableLayerIndex;
>     private GridLayer gridLayer;
136a149,159
>     protected void moveGridLayer (boolean inFront) {
>         if (layers.getChildren ().indexOf (gridLayer) > printableLayerIndex && (! inFront)) {
>             layers.remove (gridLayer);
>             layers.add (gridLayer, GRID_LAYER, printableLayerIndex);
>         } else if (layers.getChildren ().indexOf (gridLayer) <= printableLayerIndex && inFront) {
>             layers.remove (gridLayer);
>             layers.add (gridLayer, GRID_LAYER, printableLayerIndex + 1);
>         }
> 
>     }
> 
138a165,165
>         gridLayer = createGridLayer ();
139,139c166,166
<         layers.add (createGridLayer (), GRID_LAYER);
---
>         layers.add (gridLayer, GRID_LAYER);
140a163,163
>         printableLayerIndex = layers.getChildren ().size ();
183a209,210
>         if (getViewer () == null) return null;
> 
187a215,216
>         double gridSpacing = getWorkspaceViewerPreferences ().getDouble (WorkspaceViewerProperties.GRIDSPACING);
>         if (gridSpacing == 0) {
188a218,231
>             gridSpacing = pluginStore.getDouble (IPreferenceConstants.PREF_GRID_SPACING);
>         }
>         return gridSpacing;
>     }
> 
>     public void setGridStyle (int style) {
>         if (gridLayer instanceof GridLayerEx) {
>             ((GridLayerEx) gridLayer).setLineStyle (style);
>         }
>         gridLayer.repaint ();
>     }
> 
>     public void setGridColor (Integer rgbValue) {
>         gridLayer.setForegroundColor (FigureUtilities.integerToColor (rgbValue));
189,189d217
<         return pluginStore.getDouble (IPreferenceConstants.PREF_GRID_SPACING);
192a235,235
>         int rulerUnits = getWorkspaceViewerPreferences ().getInt (WorkspaceViewerProperties.RULERUNIT);
193,194d234
<         IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
<         int rulerUnits = preferenceStore.getInt (IPreferenceConstants.PREF_RULER_UNITS);
245a287,291
>         } else if (WorkspaceViewerProperties.GRIDORDER.equals (event.getProperty ())) {
>             moveGridLayer (((Boolean) event.getNewValue ()).booleanValue ());
>         } else if (WorkspaceViewerProperties.GRIDSPACING.equals (event.getProperty ())) {
>             Double spacing = (Double) event.getNewValue ();
>             setGridSpacing (spacing.doubleValue ());
248,248c294,294
<         } else if (IPreferenceConstants.PREF_RULER_UNITS.equals (event.getProperty ())) {
---
>         } else if (WorkspaceViewerProperties.RULERUNIT.equals (event.getProperty ())) {
269a316,321
>         } else if (WorkspaceViewerProperties.GRIDLINECOLOR.equals (event.getProperty ())) {
>             Integer newValue = (Integer) event.getNewValue ();
>             setGridColor (newValue);
>         } else if (WorkspaceViewerProperties.GRIDLINESTYLE.equals (event.getProperty ())) {
>             Integer newValue = (Integer) event.getNewValue ();
>             setGridStyle (newValue.intValue ());
270,286d315
<         } else if (IPreferenceConstants.PREF_GRID_SPACING.equals (event.getProperty ())) {
<             Object newValue = event.getNewValue ();
<             double gridSpacing;
<             try {
<                 if (newValue.getClass () == Double.class) {
<                     gridSpacing = ((Double) newValue).doubleValue ();
<                     setGridSpacing (gridSpacing);
<                 } else if (newValue.getClass () == String.class) {
<                     gridSpacing = Double.parseDouble ((String) newValue);
<                     setGridSpacing (gridSpacing);
<                 } else {
<                     Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.RESOURCE_FAILURE, newValue.getClass ().getName ());
<                 }
< 
<             } catch (NumberFormatException ex) {
<                 Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.RESOURCE_FAILURE, ex.toString ());
<             }
325a361,361
>         setRulers (getWorkspaceViewerPreferences ().getInt (WorkspaceViewerProperties.RULERUNIT));
326,328d360
<         IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
<         int rulerUnits = preferenceStore.getInt (IPreferenceConstants.PREF_RULER_UNITS);
<         setRulers (rulerUnits);
343a377,377
>         initWorkspaceViewerProperties ();
349a384,407
>     private static final int LIGHT_GRAY_RGB = 12632256;
> 
>     private void initWorkspaceViewerProperties () {
>         IPreferenceStore wsPrefStore = getWorkspaceViewerPreferences ();
>         if (! wsPrefStore.contains (WorkspaceViewerProperties.GRIDORDER)) {
>             wsPrefStore.setValue (WorkspaceViewerProperties.GRIDORDER, true);
>         }
>         if (! wsPrefStore.contains (WorkspaceViewerProperties.GRIDLINECOLOR)) {
>             wsPrefStore.setValue (WorkspaceViewerProperties.GRIDLINECOLOR, LIGHT_GRAY_RGB);
>         } else {
>             setGridColor (new Integer (wsPrefStore.getInt (WorkspaceViewerProperties.GRIDLINECOLOR)));
>         }
>         if (! wsPrefStore.contains (WorkspaceViewerProperties.GRIDLINESTYLE)) {
>             wsPrefStore.setValue (WorkspaceViewerProperties.GRIDLINESTYLE, SWT.LINE_DOT);
>         } else {
>             setGridStyle (wsPrefStore.getInt (WorkspaceViewerProperties.GRIDLINESTYLE));
>         }
>         if ((! wsPrefStore.contains (WorkspaceViewerProperties.RULERUNIT)) || (! wsPrefStore.contains (WorkspaceViewerProperties.GRIDSPACING))) {
>             IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
>             wsPrefStore.setValue (WorkspaceViewerProperties.RULERUNIT, preferenceStore.getInt (IPreferenceConstants.PREF_RULER_UNITS));
>             wsPrefStore.setValue (WorkspaceViewerProperties.GRIDSPACING, preferenceStore.getDouble (IPreferenceConstants.PREF_GRID_SPACING));
>         }
>     }
> 
402a461,468
>     protected GridLayer createGridLayer () {
>         return new GridLayerEx ();
>     }
> 
>     protected GridLayer createGridLayer (int r, int g, int b) {
>         return new GridLayerEx (new Color (null, r, g, b));
>     }
> 
