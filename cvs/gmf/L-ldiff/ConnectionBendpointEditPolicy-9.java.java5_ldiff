12a15,16
> import org.eclipse.draw2d.AutomaticRouter;
> 
18a23,26
> import org.eclipse.draw2d.ConnectionAnchor;
> 
> import org.eclipse.draw2d.geometry.Dimension;
> 
22a31,32
> import org.eclipse.draw2d.geometry.PrecisionPoint;
> 
23,23c33,33
< import org.eclipse.draw2d.geometry.Rectangle;
---
> import org.eclipse.draw2d.geometry.PrecisionRectangle;
36a47,48
> import org.eclipse.gef.handles.BendpointCreationHandle;
> 
46a53,53
> import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
47,47d52
< import org.eclipse.gmf.runtime.draw2d.ui.internal.routers.OrthogonalRouterUtilities;
48,48c54,54
< 
---
> 
52a65,65
> import org.eclipse.gmf.runtime.gef.ui.internal.handles.BendpointMoveHandleEx;
53,53c67,67
< import org.eclipse.gmf.runtime.gef.ui.internal.handles.LineSegMoveInvisibleHandle;
---
> import org.eclipse.gmf.runtime.gef.ui.internal.handles.LineSegMoveInvisibleHandle;
55,55c11,11
< import org.eclipse.jface.util.Assert;
---
> import org.eclipse.core.runtime.Assert;
55a12,12
> 
125,125c137,137
<             list.add (new BendpointMoveHandle (connEP, i, new BendpointLocator (getConnection (), i)));
---
>             list.add (new BendpointMoveHandleEx (connEP, i, new BendpointLocator (getConnection (), i)));
214,214d225
<             OrthogonalRouterUtilities.resetEndPointsToCenter (getConnection (), pts);
354,354c365,365
<             if (REQ_CREATE_BENDPOINT.equals (request.getType ()) || REQ_MOVE_BENDPOINT.equals (request.getType ())) {
---
>             if (REQ_CREATE_BENDPOINT.equals (request.getType ())) {
355a367,368
>             } else if (REQ_MOVE_BENDPOINT.equals (request.getType ())) {
>                 showMoveOrthogonalBenspointFeedback ((BendpointRequest) request);
356a370,370
> 
397,397c411,411
<         Rectangle startRect = new Rectangle (getConnection ().getSourceAnchor ().getOwner ().getBounds ());
---
>         PrecisionRectangle startRect = new PrecisionRectangle (FigureUtilities.getAnchorableFigureBounds (getConnection ().getSourceAnchor ().getOwner ()));
399a421,421
>         if (! startRect.expand (0.000001, 0.000001).contains (new PrecisionPoint (line.getOrigin ()))) {
399a413,413
>         if (getLineSegMode ().equals (LineMode.ORTHOGONAL_CONSTRAINED)) {
400,401d412
<         if (getLineSegMode ().equals (LineMode.ORTHOGONAL_CONSTRAINED)) startRect.expand (MapModeUtil.getMapMode (getConnection ()).DPtoLP (- 2), MapModeUtil.getMapMode (getConnection ()).DPtoLP (- 2));
< 
402a415,419
>                 startRect.shrink (0, 2);
>             } else {
>                 startRect.shrink (2, 0);
>             }
>         }
402,402c414,414
<         if (! startRect.contains (line.getOrigin ())) {
---
>             if (line.isHorizontal ()) {
409,409c428,428
<         Rectangle endRect = new Rectangle (getConnection ().getTargetAnchor ().getOwner ().getBounds ());
---
>         PrecisionRectangle endRect = new PrecisionRectangle (FigureUtilities.getAnchorableFigureBounds (getConnection ().getTargetAnchor ().getOwner ()));
411a438,438
>         if (! endRect.expand (0.00001, 0.00001).contains (new PrecisionPoint (line.getTerminus ()))) {
411a430,430
>         if (getLineSegMode ().equals (LineMode.ORTHOGONAL_CONSTRAINED)) {
412,413d429
<         if (getLineSegMode ().equals (LineMode.ORTHOGONAL_CONSTRAINED)) endRect.expand (MapModeUtil.getMapMode (getConnection ()).DPtoLP (- 2), MapModeUtil.getMapMode (getConnection ()).DPtoLP (- 2));
< 
414,414c431,431
<         if (! endRect.contains (line.getTerminus ())) {
---
>             if (line.isHorizontal ()) {
414a432,436
>                 endRect.shrink (0, 2);
>             } else {
>                 endRect.shrink (2, 0);
>             }
>         }
427a452,454
>     private void showMoveOrthogonalBenspointFeedback (BendpointRequest request) {
>         if (getFeedbackState ().originalConstraint == null) {
>             saveOriginalConstraint ();
428,431d451
<     protected void showOutsideSourceFeedback (List constraint) {
<         Point ptAdd = ((Bendpoint) constraint.get (0)).getLocation ();
<         Bendpoint bp = new AbsoluteBendpoint (ptAdd);
<         constraint.add (0, bp);
432a456,480
>         Point ptLoc = new Point (request.getLocation ());
>         List constraint = (List) getConnection ().getRoutingConstraint ();
>         getConnection ().translateToRelative (ptLoc);
>         int index = getFeedbackState ().isOutsideSource ? request.getIndex () + 1 : request.getIndex ();
>         Point previous = ((Bendpoint) constraint.get (index - 1)).getLocation ();
>         Point moving = ((Bendpoint) constraint.get (index)).getLocation ();
>         Point next = ((Bendpoint) constraint.get (index + 1)).getLocation ();
>         LineSeg originalFirst = new LineSeg (previous.getCopy (), moving.getCopy ());
>         LineSeg originalSecond = new LineSeg (moving.getCopy (), next.getCopy ());
>         Dimension diff = ptLoc.getDifference (moving);
>         if (originalFirst.isHorizontal ()) {
>             previous.y += diff.height;
>             next.x += diff.width;
>         } else {
>             previous.x += diff.width;
>             next.y += diff.height;
>         }
>         LineSeg movedFirst = new LineSeg (previous, ptLoc.getCopy ());
>         LineSeg movedSecond = new LineSeg (ptLoc.getCopy (), next);
>         index = adjustOutsideBoundsLineFeedback (movedFirst, index - 1, constraint, originalFirst);
>         constraint.set (index, new AbsoluteBendpoint (movedFirst.getOrigin ()));
>         constraint.set (index + 1, new AbsoluteBendpoint (movedFirst.getTerminus ()));
>         index = adjustOutsideBoundsLineFeedback (movedSecond, index + 1, constraint, originalSecond);
>         constraint.set (index + 1, new AbsoluteBendpoint (movedSecond.getTerminus ()));
>         getConnection ().setRoutingConstraint (constraint);
433,437d455
< 
<     protected void showOutsideTargetFeedback (List constraint) {
<         Point ptAdd = ((Bendpoint) constraint.get (constraint.size () - 1)).getLocation ();
<         Bendpoint bp = new AbsoluteBendpoint (ptAdd);
<         constraint.add (constraint.size () - 1, bp);
450,457d492
<         if (! newLine.isHorizontal () && ! newLine.isVertical ()) {
<             if (Math.abs (newLine.getOrigin ().x - newLine.getTerminus ().x) < Math.abs (newLine.getOrigin ().y - newLine.getTerminus ().y)) {
<                 newLine.setTerminus (new Point (newLine.getOrigin ().x, newLine.getTerminus ().y));
<             } else {
<                 newLine.setTerminus (new Point (newLine.getTerminus ().x, newLine.getOrigin ().y));
<             }
<         }
<         index = adjustOutsideBoundsLineFeedback (request, constraint, index, newLine);
462,462c498,498
<     protected int adjustOutsideBoundsLineFeedback (BendpointRequest request, List constraint, int index, LineSeg newLine) {
---
>     private int adjustOutsideBoundsLineFeedback (LineSeg newLine, int index, List constraint, LineSeg moveLine) {
465,465c493,493
<                 LineSeg moveLine = getLineSeg (constraint, index + 1);
---
>         index = adjustOutsideBoundsLineFeedback (newLine, index, constraint, moveLine);
475,475c510,510
<         if (request.getIndex () == 0 && lineOutsideSource (newLine)) {
---
>         if (index == 0 && lineOutsideSource (newLine)) {
480,480c515,515
<         } else if (getFeedbackState ().isOutsideSource) {
---
>         } else if (index == 1 && getFeedbackState ().isOutsideSource && ! lineOutsideSource (newLine)) {
491,491c526,526
<         } else if (getFeedbackState ().isOutsideTarget) {
---
>         } else if (checkTargetIndex == constraint.size () - 2 && getFeedbackState ().isOutsideTarget && ! lineOutsideTarget (newLine)) {
498,498c533,533
<             index = request.getIndex ();
---
>             index --;
504,504c539,539
<             showOutsideSourceFeedback (constraint);
---
>             showOutsideSourceFeedback (newLine, moveLine, constraint);
505,505c540,540
<             index = request.getIndex () + 1;
---
>             index ++;
508,508c543,543
<             showOutsideTargetFeedback (constraint);
---
>             showOutsideTargetFeedback (newLine, moveLine, constraint);
512a548,585
>     private void showOutsideSourceFeedback (LineSeg newLine, LineSeg moveLine, List constraint) {
>         Connection conn = (Connection) getHostFigure ();
>         ConnectionAnchor anchor = conn.getSourceAnchor ();
>         PrecisionPoint startPoint = new PrecisionPoint (anchor.getOwner ().getBounds ().getCenter ());
>         anchor.getOwner ().translateToAbsolute (startPoint);
>         conn.translateToRelative (startPoint);
>         PrecisionRectangle bounds = new PrecisionRectangle (anchor.getOwner ().getBounds ());
>         anchor.getOwner ().translateToAbsolute (bounds);
>         conn.translateToRelative (bounds);
>         Point origin = new Point (newLine.getOrigin ());
>         if (moveLine.isHorizontal ()) {
>             origin.x = startPoint.x;
>         } else {
>             origin.y = startPoint.y;
>         }
>         newLine.setOrigin (origin);
>         constraint.add (0, new AbsoluteBendpoint (startPoint));
>     }
> 
>     private void showOutsideTargetFeedback (LineSeg newLine, LineSeg moveLine, List constraint) {
>         Connection conn = (Connection) getHostFigure ();
>         ConnectionAnchor anchor = conn.getTargetAnchor ();
>         PrecisionPoint endPoint = new PrecisionPoint (anchor.getOwner ().getBounds ().getCenter ());
>         anchor.getOwner ().translateToAbsolute (endPoint);
>         conn.translateToRelative (endPoint);
>         PrecisionRectangle bounds = new PrecisionRectangle (anchor.getOwner ().getBounds ());
>         anchor.getOwner ().translateToAbsolute (bounds);
>         conn.translateToRelative (bounds);
>         Point terminus = new Point (newLine.getTerminus ());
>         if (moveLine.isHorizontal ()) {
>             terminus.x = endPoint.x;
>         } else {
>             terminus.y = endPoint.y;
>         }
>         newLine.setTerminus (terminus);
>         constraint.add (new AbsoluteBendpoint (endPoint));
>     }
> 
