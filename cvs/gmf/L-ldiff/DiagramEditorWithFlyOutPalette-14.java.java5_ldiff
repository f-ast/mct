28a29,30
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
> 
44a47,48
> import org.eclipse.jface.preference.IPreferenceStore;
> 
202,202c206,206
<             FlyoutPaletteComposite.FlyoutPreferences flyoutPrefs = new FlyoutPreferencesImpl ();
---
>             FlyoutPaletteComposite.FlyoutPreferences flyoutPrefs = new FlyoutPreferencesImpl (getPreferenceStore ());
203,204d206
<             flyoutPrefs.setPaletteState (getInitialPaletteState ());
<             flyoutPrefs.setPaletteWidth (getInitialPaletteSize ());
216a219,222
>     protected IPreferenceStore getPreferenceStore () {
>         return DiagramUIPlugin.getInstance ().getPreferenceStore ();
>     }
> 
260a267,270
>     protected int getInitialDockLocation () {
>         return PositionConstants.EAST;
>     }
> 
307a318,326
>     private final class FlyoutPreferencesImpl implements FlyoutPaletteComposite.FlyoutPreferences {
>         private static final String PALETTE_DOCK_LOCATION = "org.eclipse.gmf.pdock";
>         private static final String PALETTE_SIZE = "org.eclipse.gmf.psize";
>         private static final String PALETTE_STATE = "org.eclipse.gmf.pstate";
>         private IPreferenceStore preferences;
> 
>         private FlyoutPreferencesImpl (IPreferenceStore preferenceStore) {
>             preferences = preferenceStore;
>         }
308,311d317
<     private static final class FlyoutPreferencesImpl implements FlyoutPaletteComposite.FlyoutPreferences {
<         private int dockLocation = PositionConstants.EAST;
<         private int paletteState = UNCOLLAPSED_PINNED;
<         private int paletteWidth = 125;
313a329,333
>             if (preferences.contains (PALETTE_DOCK_LOCATION)) {
>                 return preferences.getInt (PALETTE_DOCK_LOCATION);
>             } else {
>                 return getInitialDockLocation ();
>             }
314,314d328
<             return dockLocation;
317a337,341
>             if (preferences.contains (PALETTE_STATE)) {
>                 return preferences.getInt (PALETTE_STATE);
>             } else {
>                 return getInitialPaletteState ();
>             }
318,318d336
<             return paletteState;
321a345,349
>             if (preferences.contains (PALETTE_SIZE)) {
>                 return preferences.getInt (PALETTE_SIZE);
>             } else {
>                 return getInitialPaletteSize ();
>             }
322,322d344
<             return paletteWidth;
325a353,353
>             preferences.setValue (PALETTE_DOCK_LOCATION, location);
326,326d352
<             dockLocation = location;
329a357,357
>             preferences.setValue (PALETTE_STATE, state);
330,330d356
<             paletteState = state;
333a361,361
>             preferences.setValue (PALETTE_SIZE, width);
334,334d360
<             paletteWidth = width;
367,367c394,394
<         return new PaletteCustomizerEx ();
---
>         return new PaletteCustomizerEx (getPreferenceStore ());
