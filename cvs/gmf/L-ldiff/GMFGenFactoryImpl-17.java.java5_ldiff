140a303,305
>     public CompartmentPlacementKind createCompartmentPlacementKindFromString (EDataType eDataType, String initialValue) {
>         CompartmentPlacementKind result = CompartmentPlacementKind.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
140a141,146
>                 return createCompartmentPlacementKindFromString (eDataType, initialValue);
>             case GMFGenPackage.COMPARTMENT_LAYOUT_KIND :
>                 return createCompartmentLayoutKindFromString (eDataType, initialValue);
>             case GMFGenPackage.LINK_LABEL_ALIGNMENT :
>                 return createLinkLabelAlignmentFromString (eDataType, initialValue);
>             case GMFGenPackage.STRING_ARRAY :
141,143d302
<                 {
<                     CompartmentPlacementKind result = CompartmentPlacementKind.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
144a307,308
>         return result;
>     }
144,144c306,306
< 
---
> 
145,149d306
<                     return result;
<                 } case GMFGenPackage.COMPARTMENT_LAYOUT_KIND :
<                 {
<                     CompartmentLayoutKind result = CompartmentLayoutKind.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
150a310,312
>     public String convertCompartmentPlacementKindToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
150,150c309,309
< 
---
> 
151,155d309
<                     return result;
<                 } case GMFGenPackage.LINK_LABEL_ALIGNMENT :
<                 {
<                     LinkLabelAlignment result = LinkLabelAlignment.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
156a314,317
>     public CompartmentLayoutKind createCompartmentLayoutKindFromString (EDataType eDataType, String initialValue) {
>         CompartmentLayoutKind result = CompartmentLayoutKind.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
156,156c313,313
< 
---
> 
157a319,335
>     }
> 
>     public String convertCompartmentLayoutKindToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public LinkLabelAlignment createLinkLabelAlignmentFromString (EDataType eDataType, String initialValue) {
>         LinkLabelAlignment result = LinkLabelAlignment.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertLinkLabelAlignmentToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
157,157c318,318
<                     return result;
---
>         return result;
158,158d318
<                 } case GMFGenPackage.STRING_ARRAY :
167a156,156
>                 return convertCompartmentPlacementKindToString (eDataType, instanceValue);
168,168d155
<                 return instanceValue == null ? null : instanceValue.toString ();
169a158,158
>                 return convertCompartmentLayoutKindToString (eDataType, instanceValue);
170,170d157
<                 return instanceValue == null ? null : instanceValue.toString ();
171a160,160
>                 return convertLinkLabelAlignmentToString (eDataType, instanceValue);
172,172d159
<                 return instanceValue == null ? null : instanceValue.toString ();
