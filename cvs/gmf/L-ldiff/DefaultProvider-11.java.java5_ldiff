8a9,10
> import java.util.HashSet;
> 
10a13,14
> import java.util.Iterator;
> 
16a21,22
> import java.util.Set;
> 
40a47,48
> import org.eclipse.draw2d.graph.Subgraph;
> 
60a69,72
> import org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart;
> 
> import org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderedShapeEditPart;
> 
87a100,103
>     protected int layoutDefaultMargin = 0;
>     protected IMapMode mm;
>     protected static final int NODE_PADDING = 30;
>     protected static final int MIN_EDGE_PADDING = 5;
88,91d99
<     private int layoutDefaultMargin = 0;
<     private IMapMode mm;
<     private static final int NODE_PADDING = 30;
<     private static final int MIN_EDGE_PADDING = 5;
92,92c104,104
<     private static final int MAX_EDGE_PADDING = NODE_PADDING * 3;
---
>     protected static final int MAX_EDGE_PADDING = NODE_PADDING * 3;
109,109c126,126
<         mm = MapModeUtil.getMapMode (containerEditPart.getFigure ());
---
>         mm = MapModeUtil.getMapMode (containerEditPart.getFigure ());
109a127,127
>         DirectedGraph g = createGraph ();
115,115c142,142
<         DirectedGraph g = new DirectedGraph ();
---
>         DirectedGraph g = createGraph ();
117,117c129,129
<         new DirectedGraphLayout ().visit (g);
---
>         createGraphLayout ().visit (g);
129a509,509
>     protected DirectedGraph createGraph () {
130a511,516
>     }
> 
>     protected DirectedGraphLayout createGraphLayout () {
>         return new DirectedGraphLayout ();
>     }
> 
130,130c510,510
<         DirectedGraph g = new DirectedGraph ();
---
>         return new DirectedGraph ();
132,132c144,144
<         new DirectedGraphLayout ().visit (g);
---
>         createGraphLayout ().visit (g);
142,142c154,154
<     private NodeList build_nodes (List selectedObjects, Map editPartToNodeDict) {
---
>     protected NodeList build_nodes (List selectedObjects, Map editPartToNodeDict, Subgraph root) {
176a189,194
>         Rectangle rect = null;
>         Node parent = n.getParent ();
>         while (parent != null && ! (parent.data instanceof IGraphicalEditPart)) parent = parent.getParent ();
> 
>         if (parent != null) {
>             rect = new Rectangle (n.x - parent.x, n.y - parent.y, n.width, n.height);
176,176c188,188
<     final protected Rectangle getNodeMetrics (Node n) {
---
>     protected Rectangle getNodeMetrics (Node n) {
177a196,197
> 
>         return translateFromGraph (rect);
177,177c195,195
<         return translateFromGraph (new Rectangle (n.x, n.y, n.width, n.height));
---
>         } else rect = new Rectangle (n.x, n.y, n.width, n.height);
184,184c204,204
<     private EdgeList build_edges (List selectedObjects, Map editPartToNodeDict) {
---
>     protected EdgeList build_edges (List selectedObjects, Map editPartToNodeDict) {
188a209,209
>         ArrayList notTopDownEdges = new ArrayList ();
195a217,220
>                     if (from instanceof IBorderItemEditPart) from = from.getParent ();
> 
>                     if (to instanceof IBorderItemEditPart) to = to.getParent ();
> 
200a226,227
>                 } else {
>                     notTopDownEdges.add (poly);
204,204c231,231
<         li = objects.listIterator ();
---
>         li = notTopDownEdges.listIterator ();
206,207d232
<             EditPart gep = (EditPart) li.next ();
<             if (gep instanceof ConnectionEditPart) {
208,208c233,233
<                 ConnectionEditPart poly = (ConnectionEditPart) gep;
---
>             ConnectionEditPart poly = (ConnectionEditPart) li.next ();
209,209d233
<                 if (! layoutTopDown (poly)) {
211a236,239
>             if (from instanceof IBorderItemEditPart) from = from.getParent ();
> 
>             if (to instanceof IBorderItemEditPart) to = to.getParent ();
> 
218,219d245
<             }
<         }
270a297,309
>             GraphicalEditPart shapeEP = (GraphicalEditPart) e;
>             Set sourceConnections = new HashSet (shapeEP.getSourceConnections ());
>             if (shapeEP instanceof IBorderedShapeEditPart) {
>                 List borderItems = getBorderItemEditParts (shapeEP);
>                 for (Iterator iter = borderItems.iterator ();
>                 iter.hasNext ();) {
>                     GraphicalEditPart element = (GraphicalEditPart) iter.next ();
>                     sourceConnections.addAll (element.getSourceConnections ());
>                 }
>             }
>             for (Iterator iter = sourceConnections.iterator ();
>             iter.hasNext ();) {
>                 ConnectionEditPart connectionEP = (ConnectionEditPart) iter.next ();
271,275d296
<             ShapeEditPart shapeEP = (ShapeEditPart) e;
<             List sourceConnections = shapeEP.getSourceConnections ();
<             for (int i = 0;
<             i < sourceConnections.size (); i ++) {
<                 ConnectionEditPart connectionEP = (ConnectionEditPart) sourceConnections.get (i);
276a311,312
>                 if (target instanceof IBorderItemEditPart) target = target.getParent ();
> 
285a322,334
>     private List getBorderItemEditParts (EditPart parent) {
>         Iterator iter = parent.getChildren ().iterator ();
>         List list = new ArrayList ();
>         while (iter.hasNext ()) {
>             EditPart child = (EditPart) iter.next ();
>             if (child instanceof IBorderItemEditPart) {
>                 list.add (child);
>             }
>         }
>         return list;
>     }
> 
>     protected void build_graph (DirectedGraph g, List selectedObjects) {
286,286d321
<     private void build_graph (DirectedGraph g, List selectedObjects) {
290,290c338,338
<         NodeList nodes = build_nodes (selectedObjects, editPartToNodeDict);
---
>         NodeList nodes = build_nodes (selectedObjects, editPartToNodeDict, null);
296a345,348
>         postProcessGraph (g, editPartToNodeDict);
>     }
> 
>     protected void postProcessGraph (DirectedGraph g, Hashtable editPartToNodeDict) {
344,344c396,396
<     Command update_diagram (GraphicalEditPart diagramEP, DirectedGraph g, boolean isLayoutForSelected) {
---
>     protected Command update_diagram (GraphicalEditPart diagramEP, DirectedGraph g, boolean isLayoutForSelected) {
348,348c400,400
<         Command cmd = getShapesPositionCommand (g, diff);
---
>         Command cmd = createNodeChangeBoundCommands (g, diff);
351,351c403,403
<         cmd = getConnectionPositionCommand (g, diff);
---
>         cmd = createEdgesChangeBoundsCommands (g, diff);
357,357c409,409
<     private Command getConnectionPositionCommand (DirectedGraph g, Point diff) {
---
>     protected Command createEdgesChangeBoundsCommands (DirectedGraph g, Point diff) {
363,363c415,415
<             if (edge.data == null) continue;
---
>             if (edge.data == null || edge.getPoints () == null) continue;
384a437,437
>         PointList pointList = edge.getPoints ();
385,385d436
<         Point startpt = edge.getPoints ().getFirstPoint ();
386,386c438,438
<         Rectangle start = translateFromGraph (new Rectangle (startpt.x, startpt.y, 0, 0));
---
>         Rectangle start = translateFromGraph (new Rectangle (pointList.getFirstPoint ().x, pointList.getFirstPoint ().y, 0, 0));
399,399d450
<         Point endpt = edge.getPoints ().getLastPoint ();
400,400c451,451
<         Rectangle end = translateFromGraph (new Rectangle (endpt.x, endpt.y, 0, 0));
---
>         Rectangle end = translateFromGraph (new Rectangle (pointList.getLastPoint ().x, pointList.getLastPoint ().y, 0, 0));
404,404c455,455
<     private Command getShapesPositionCommand (DirectedGraph g, Point diff) {
---
>     protected Command createNodeChangeBoundCommands (DirectedGraph g, Point diff) {
422,422c480,480
<                 if (cmd != null) cc.add (cmd);
---
>                 if (cmd != null && cmd.canExecute ()) cc.add (cmd);
425a458,458
>         createSubCommands (diff, vi, cc);
426,426c459,459
<         if (cc.isEmpty ()) return null;
---
>         if (cc.isEmpty ()) return null;
427,427c460,460
< 
---
> 
428,428c461,461
<         return cc;
---
>         return cc;
428a462,464
>     }
> 
>     protected void createSubCommands (Point diff, ListIterator vi, CompoundCommand cc) {
