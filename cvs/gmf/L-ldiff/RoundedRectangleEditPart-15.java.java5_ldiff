44a45,46
> import org.eclipse.gmf.gmfgraph.ColorConstants;
> 
90a89,89
> import org.eclipse.gmf.runtime.notation.FillStyle;
91,91d88
< import org.eclipse.gmf.runtime.notation.ShapeStyle;
92,92c90,90
< 
---
> 
92a91,92
> import org.eclipse.gmf.runtime.notation.LineStyle;
> 
338a343,343
>                 myFigure.repaint ();
347a353,353
>                 myFigure.repaint ();
475,475c481,481
<         final ShapeStyle shapeStyle = (ShapeStyle) view.getStyle (NotationPackage.eINSTANCE.getShapeStyle ());
---
>         final FillStyle theFillStyle = (FillStyle) view.getStyle (NotationPackage.eINSTANCE.getFillStyle ());
482a489,489
>                 rgbColor = getRgbColor (modelColor);
483,486d488
<                 switch (modelColor.getValue ().getValue ()) {
<                     default :
<                         rgbColor = - 1;
<                 }
488,488c491,491
<             if (rgbColor != - 1 && shapeStyle.getFillColor () != rgbColor) {
---
>             if (rgbColor != - 1 && theFillStyle.getFillColor () != rgbColor) {
492,492c495,495
<                         shapeStyle.setFillColor (rgbColor);
---
>                         theFillStyle.setFillColor (rgbColor);
502,502c505,505
<                     GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize view Background background color with the model", e);
---
>                     GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize view Background color with the model", e);
505a509,509
>         final LineStyle theLineStyle = (LineStyle) view.getStyle (NotationPackage.eINSTANCE.getLineStyle ());
512a517,517
>                 rgbColor = getRgbColor (modelColor);
513,515d516
<                 switch (modelColor.getValue ().getValue ()) {
<                     default :
<                         rgbColor = - 1;
517,517d518
<             }
518,518c519,519
<             if (rgbColor != - 1 && shapeStyle.getLineColor () != rgbColor) {
---
>             if (rgbColor != - 1 && theLineStyle.getLineColor () != rgbColor) {
522,522c523,523
<                         shapeStyle.setLineColor (rgbColor);
---
>                         theLineStyle.setLineColor (rgbColor);
532,532c533,533
<                     GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize view Foreground background color with the model", e);
---
>                     GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize view Foreground color with the model", e);
535a537,538
>         final FillStyle theFillStyle1 = (FillStyle) view.getStyle (NotationPackage.eINSTANCE.getFillStyle ());
>         addListenerFilter ("FillStyleListener", new NotificationListener () {
536,536d536
<         addListenerFilter ("ShapeStyleListener", new NotificationListener () {
540,540c542,542
<                     new AbstractEMFOperation (getEditingDomain (), "Synchronizing model size with the view", Collections.singletonMap (Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) {
---
>                     new AbstractEMFOperation (getEditingDomain (), "Synchronizing model Background color with the view", Collections.singletonMap (Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) {
543,543c545,545
<                             ShapeStyle shapeStyle = (ShapeStyle) notification.getNotifier ();
---
>                             FillStyle theFillStyle = (FillStyle) notification.getNotifier ();
543a546,546
>                             if (notification.getFeatureID (FillStyle.class) == NotationPackage.FILL_STYLE__FILL_COLOR) {
544,546d545
<                             switch (notification.getFeatureID (ShapeStyle.class)) {
<                                 case NotationPackage.SHAPE_STYLE__FILL_COLOR :
<                                     {
547,547c547,547
<                                         int color = shapeStyle.getFillColor ();
---
>                                 int color = theFillStyle.getFillColor ();
559a560,585
>                             }
>                             return Status.OK_STATUS;
>                         }
> 
>                     }
> 
>                     .execute (new NullProgressMonitor (), null);
>                 } catch (ExecutionException e) {
>                     GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize model Background color with the view", e);
>                 }
>             }
> 
>         }
> 
>         , theFillStyle1);
>         final LineStyle theLineStyle1 = (LineStyle) view.getStyle (NotationPackage.eINSTANCE.getLineStyle ());
>         addListenerFilter ("LineStyleListener", new NotificationListener () {
> 
>             public void notifyChanged (final Notification notification) {
>                 try {
>                     new AbstractEMFOperation (getEditingDomain (), "Synchronizing model Foreground color with the view", Collections.singletonMap (Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) {
> 
>                         protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
>                             LineStyle theLineStyle = (LineStyle) notification.getNotifier ();
>                             if (notification.getFeatureID (LineStyle.class) == NotationPackage.LINE_STYLE__LINE_COLOR) {
>                                 int color = theLineStyle.getLineColor ();
560,563d559
<                                         break;
<                                     } case NotationPackage.SHAPE_STYLE__LINE_COLOR :
<                                     {
<                                         int color = shapeStyle.getLineColor ();
575a598,598
>                             }
576,577d597
<                                         break;
<                                     }}
585,585c606,606
<                     GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize model size with the view", e);
---
>                     GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize model Foreground color with the view", e);
590a612,612
>         , theLineStyle1);
591,591d611
<         , shapeStyle);
612a634,702
>     public static int getRgbColor (ConstantColor modelColor) {
>         final int rgbColor;
>         switch (modelColor.getValue ().getValue ()) {
>             case ColorConstants.WHITE :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.white.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.BLACK :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.black.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.LIGHT_GRAY :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.lightGray.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.GRAY :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.gray.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.DARK_GRAY :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.darkGray.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.RED :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.red.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.ORANGE :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.orange.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.YELLOW :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.yellow.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.GREEN :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.green.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.LIGHT_GREEN :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.lightGreen.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.DARK_GREEN :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.darkGreen.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.CYAN :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.cyan.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.LIGHT_BLUE :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.lightBlue.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.BLUE :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.blue.getRGB ().hashCode ();
>                     break;
>                 } case ColorConstants.DARK_BLUE :
>                 {
>                     rgbColor = org.eclipse.draw2d.ColorConstants.darkBlue.getRGB ().hashCode ();
>                     break;
>                 } default :
>                 rgbColor = - 1;
>         }
>         return rgbColor;
>     }
> 
