371a372,373
>         List < PartPositionInfo > result = new ArrayList < PartPositionInfo > ();
>         List < IGraphicalEditPart > editParts = new ArrayList < IGraphicalEditPart > ();
372,373d371
<         List result = new ArrayList ();
<         List editParts = new ArrayList ();
374,374c374,374
<         List children = diagramEditPart.getPrimaryEditParts ();
---
>         List < IGraphicalEditPart > children = (List < IGraphicalEditPart >) diagramEditPart.getPrimaryEditParts ();
376a377,377
>         for (IGraphicalEditPart part : children) {
377,379d376
<         Iterator li = children.iterator ();
<         while (li.hasNext ()) {
<             IGraphicalEditPart part = (IGraphicalEditPart) li.next ();
382a381,381
>         for (IGraphicalEditPart part : editParts) {
383,385d380
<         Iterator iter = editParts.iterator ();
<         while (iter.hasNext ()) {
<             IGraphicalEditPart part = (IGraphicalEditPart) iter.next ();
404a401,458
>                     List < Point > envelopingPts = calculateEnvelopingPolyline (mainPts, new Point (imageRect.x, imageRect.y));
>                     List < Point > transformedPts = convertPolylineUnits (envelopingPts);
>                     position.setPolyline (transformedPts);
>                     result.add (0, position);
>                 }
>             }
> 
>         }
>         return result;
>     }
> 
>     public List < PartPositionInfo > getConstrainedDiagramPartInfo (int maxWidth, int maxHeight, boolean useMargins) {
>         return getConstrainedDiagramPartInfo (_dgrmEP, maxWidth, maxHeight, useMargins);
>     }
> 
>     public List < PartPositionInfo > getConstrainedDiagramPartInfo (DiagramEditPart diagramEditPart, int maxWidth, int maxHeight, boolean useMargins) {
>         List < PartPositionInfo > result = new ArrayList < PartPositionInfo > ();
>         List < IGraphicalEditPart > editParts = new ArrayList < IGraphicalEditPart > ();
>         List < IGraphicalEditPart > children = (List < IGraphicalEditPart >) diagramEditPart.getPrimaryEditParts ();
>         IMapMode mm = getMapMode ();
>         ConstrainedImageRenderingData data = getConstrainedImageRenderingData (children, maxWidth, maxHeight, useMargins);
>         Rectangle imageRect = data.imageOriginalBounds.getCopy ();
>         mm.DPtoLP (imageRect);
>         if (useMargins) {
>             imageRect.shrink (getImageMargin (), getImageMargin ());
>         }
>         imageRect.performScale (data.scalingFactor);
>         if (useMargins) {
>             imageRect.expand (getImageMargin (), getImageMargin ());
>         }
>         for (IGraphicalEditPart part : children) {
>             editParts.add (part);
>             getNestedEditParts (part, editParts);
>         }
>         for (IGraphicalEditPart part : editParts) {
>             IFigure figure = part.getFigure ();
>             if (part instanceof ShapeEditPart || part instanceof ShapeCompartmentEditPart) {
>                 PartPositionInfo position = new PartPositionInfo ();
>                 position.setSemanticElement (ViewUtil.resolveSemanticElement ((View) part.getModel ()));
>                 Rectangle bounds = figure.getBounds ().getCopy ();
>                 translateToPrintableLayer (figure, bounds);
>                 bounds.performScale (data.scalingFactor);
>                 bounds.translate (- imageRect.x, - imageRect.y);
>                 position.setPartHeight (mm.LPtoDP (bounds.height));
>                 position.setPartWidth (mm.LPtoDP (bounds.width));
>                 position.setPartX (mm.LPtoDP (bounds.x));
>                 position.setPartY (mm.LPtoDP (bounds.y));
>                 result.add (0, position);
>             } else if (part instanceof ConnectionEditPart) {
>                 PartPositionInfo position = new PartPositionInfo ();
>                 position.setSemanticElement (ViewUtil.resolveSemanticElement ((View) part.getModel ()));
>                 if (figure instanceof PolylineConnection) {
>                     PolylineConnection mainPoly = (PolylineConnection) figure;
>                     PointList mainPts = mainPoly.getPoints ();
>                     mainPts.performScale (data.scalingFactor);
>                     translateToPrintableLayer (figure, mainPts);
>                     List < Point > envelopingPts = calculateEnvelopingPolyline (mainPts, new Point (imageRect.x, imageRect.y));
>                     List < Point > transformedPts = convertPolylineUnits (envelopingPts);
405,406d400
<                     List envelopingPts = calculateEnvelopingPolyline (mainPts, new Point (imageRect.x, imageRect.y));
<                     List transformedPts = convertPolylineUnits (envelopingPts);
425a478,478
>         List < Point > result = new ArrayList < Point > ();
425,425c477,477
<     private List calculateEnvelopingPolyline (PointList polyPts, Point origin) {
---
>     private List < Point > calculateEnvelopingPolyline (PointList polyPts, Point origin) {
426,426d477
<         ArrayList result = new ArrayList ();
427,427c479,479
<         List mainSegs = PointListUtilities.getLineSegments (polyPts);
---
>         List < LineSeg > mainSegs = (List < LineSeg >) PointListUtilities.getLineSegments (polyPts);
452,452d503
<         Object first = result.get (0);
453,453c504,504
<         result.add (first);
---
>         result.add (result.get (0));
457,457c508,508
<     private List convertPolylineUnits (List polyPts) {
---
>     private List < Point > convertPolylineUnits (List < Point > polyPts) {
458,458c509,509
<         ArrayList result = new ArrayList ();
---
>         List < Point > result = new ArrayList < Point > ();
459,459d509
<         Iterator iter = polyPts.iterator ();
460a511,511
>         for (Point point : polyPts) {
461,462d510
<         while (iter.hasNext ()) {
<             Point point = (Point) iter.next ();
513a563,564
>             ConstrainedImageRenderingData data = getConstrainedImageRenderingData (editParts, maxDeviceWidth, maxDeviceHeight, useMargins);
>             graphics = setUpGraphics (data.imageWidth, data.imageHeight);
513a580,594
>     class ConstrainedImageRenderingData {
>         double scalingFactor;
>         int imageWidth;
>         int imageHeight;
>         Rectangle imageOriginalBounds;
>         int margin;
>     }
> 
>     ConstrainedImageRenderingData getConstrainedImageRenderingData (List editParts, int maxDeviceWidth, int maxDeviceHeight, boolean useMargins) {
>         ConstrainedImageRenderingData data = new ConstrainedImageRenderingData ();
>         IMapMode mm = getMapMode ();
>         data.imageOriginalBounds = new PrecisionRectangle (new Rectangle (calculateImageRectangle (editParts)));
>         mm.LPtoDP (data.imageOriginalBounds);
>         int deviceMargins = mm.LPtoDP (getImageMargin ());
>         data.margin = useMargins ? deviceMargins : 0;
514,517d579
<             Rectangle originalBounds = new PrecisionRectangle (new Rectangle (calculateImageRectangle (editParts)));
<             getMapMode ().LPtoDP (originalBounds);
<             int deviceMargins = mm.LPtoDP (getImageMargin ());
<             int threshold = useMargins ? deviceMargins : 0;
518a596,602
>         data.imageOriginalBounds.shrink (deviceMargins, deviceMargins);
>         if (maxDeviceWidth > data.margin) {
>             xScalingFactor = (maxDeviceWidth - data.margin - data.margin) / (data.imageOriginalBounds.preciseWidth ());
>         }
>         if (maxDeviceHeight > data.margin) {
>             yScalingFactor = (maxDeviceHeight - data.margin - data.margin) / (data.imageOriginalBounds.preciseHeight ());
>         }
518,518c595,595
<             double xScalingFactor = 1.0, yScalingFactor = xScalingFactor;
---
>         double xScalingFactor = 1.0, yScalingFactor = xScalingFactor;
519,525d595
<             originalBounds.shrink (deviceMargins, deviceMargins);
<             if (maxDeviceWidth > threshold) {
<                 xScalingFactor = (maxDeviceWidth - threshold - threshold) / (originalBounds.preciseWidth ());
<             }
<             if (maxDeviceHeight > threshold) {
<                 yScalingFactor = (maxDeviceHeight - threshold - threshold) / (originalBounds.preciseHeight ());
<             }
526,526c603,603
<             double scalingFactor = Math.min (Math.min (xScalingFactor, yScalingFactor), 1);
---
>         data.scalingFactor = Math.min (Math.min (xScalingFactor, yScalingFactor), 1);
526a604,605
>         data.imageWidth = data.imageOriginalBounds.width + data.margin + data.margin;
>         data.imageHeight = data.imageOriginalBounds.height + data.margin + data.margin;
527,528d603
<             int imageWidth = originalBounds.width + threshold + threshold;
<             int imageHeight = originalBounds.height + threshold + threshold;
529a607,610
>             data.imageWidth = (int) Math.round (data.imageOriginalBounds.preciseWidth () * data.scalingFactor) + data.margin + data.margin;
>             data.imageHeight = (int) Math.round (data.imageOriginalBounds.preciseHeight () * data.scalingFactor) + data.margin + data.margin;
>         } else {
>             data.scalingFactor = 1;
529,529c606,606
<             if (scalingFactor < 1) {
---
>         if (data.scalingFactor < 1) {
530,531d606
<                 imageWidth = (int) Math.round (originalBounds.preciseWidth () * scalingFactor) + threshold + threshold;
<                 imageHeight = (int) Math.round (originalBounds.preciseHeight () * scalingFactor) + threshold + threshold;
532,532c611,611
<             }
---
>         }
532a612,614
>         return data;
>     }
> 
533,533d611
<             graphics = setUpGraphics (imageWidth, imageHeight);
535a567,567
>             graphics.translate (data.margin, data.margin);
536,536d566
<             graphics.translate (threshold, threshold);
537,537c568,568
<             mapModeGraphics.scale (scalingFactor);
---
>             mapModeGraphics.scale (data.scalingFactor);
538,538c569,569
<             Point location = new PrecisionPoint (originalBounds.preciseX (), originalBounds.preciseY ());
---
>             Point location = new PrecisionPoint (data.imageOriginalBounds.preciseX (), data.imageOriginalBounds.preciseY ());
