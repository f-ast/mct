38a39,42
> import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.PageBreakEditPart;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.figures.PageBreaksFigure;
> 
78a83,84
> import org.eclipse.jface.dialogs.Dialog;
> 
104a111,112
> import org.eclipse.swt.widgets.Button;
> 
106a115,116
> import org.eclipse.swt.widgets.Control;
> 
108a119,120
> import org.eclipse.swt.widgets.Group;
> 
116a129,130
> import org.eclipse.swt.widgets.Text;
> 
161a176,176
>     private boolean fitToPage = false;
183a199,199
>         setUserScale (PrintHelperUtil.getScale ());
261a278,278
>                 refreshComposite ();
261a633,633
>     private void refreshComposite () {
262,262d632
<                 updateLeftRightUpDownButtonsForToolbar ();
263a635,637
>         updateLeftRightUpDownButtonsForToolbar ();
>     }
> 
263,263c634,634
<                 updateCompositeForNumberOfColumns (numberOfRowsToDisplay, numberOfColumnsToDisplay);
---
>         updateCompositeForNumberOfColumns (numberOfRowsToDisplay, numberOfColumnsToDisplay);
333a349,349
>                     refreshComposite ();
334,335d348
<                     updateCompositeForNumberOfColumns (numberOfRowsToDisplay, numberOfColumnsToDisplay);
<                     updateLeftRightUpDownButtonsForToolbar ();
360a375,375
>                     refreshComposite ();
361,362d374
<                     updateCompositeForNumberOfColumns (numberOfRowsToDisplay, numberOfColumnsToDisplay);
<                     updateLeftRightUpDownButtonsForToolbar ();
381a395,395
>                     refreshComposite ();
382,383d394
<                     updateCompositeForNumberOfColumns (numberOfRowsToDisplay, numberOfColumnsToDisplay);
<                     updateLeftRightUpDownButtonsForToolbar ();
402a415,415
>                     refreshComposite ();
403,404d414
<                     updateCompositeForNumberOfColumns (numberOfRowsToDisplay, numberOfColumnsToDisplay);
<                     updateLeftRightUpDownButtonsForToolbar ();
415a427,484
>         ToolItem separator = new ToolItem (bar, SWT.SEPARATOR);
>         final Text textField = new Text (bar, SWT.SINGLE | SWT.BORDER);
>         textField.setText ("XXXXX");
>         textField.setEnabled (true);
>         textField.pack ();
>         textField.setText (getDisplayScale (PrintHelperUtil.getScale ()));
>         separator.setWidth (textField.getBounds ().width);
>         separator.setControl (textField);
>         textField.addSelectionListener (new SelectionListener () {
> 
>             public void widgetSelected (SelectionEvent e) {
>             }
> 
>             public void widgetDefaultSelected (SelectionEvent e) {
>                 String scaleFactor = ((Text) e.getSource ()).getText ();
>                 int percentageIndex = scaleFactor.indexOf ("%");
>                 if (percentageIndex > 0) {
>                     scaleFactor = scaleFactor.substring (0, percentageIndex);
>                 }
>                 int scalePercentage = Integer.parseInt (scaleFactor);
>                 setPercentScaling (scalePercentage);
>                 refreshComposite ();
>                 ((Text) e.getSource ()).setText (getDisplayScale (scalePercentage));
>             }
> 
>         }
> 
>         );
>         new ToolItem (bar, SWT.SEPARATOR);
>         ToolItem fitToPageSeparator = new ToolItem (bar, SWT.SEPARATOR);
>         Button buttonFitToPage = new Button (bar, SWT.PUSH);
>         buttonFitToPage.setText (DiagramUIPrintingMessages.PrintPreview_FitToPage_ButtonText);
>         buttonFitToPage.setEnabled (true);
>         buttonFitToPage.pack ();
>         fitToPageSeparator.setWidth (buttonFitToPage.getBounds ().width);
>         fitToPageSeparator.setControl (buttonFitToPage);
>         buttonFitToPage.addSelectionListener (new SelectionListener () {
> 
>             public void widgetSelected (SelectionEvent e) {
>                 FitToPagesDialog fitToPages = new FitToPagesDialog (shell);
>                 if (fitToPages.open () == Dialog.OK) {
>                     int pagesWide = fitToPages.getPagesWide ();
>                     int pagesTall = fitToPages.getPagesTall ();
>                     PrintHelperUtil.setScaleToWidth (pagesWide);
>                     PrintHelperUtil.setScaleToHeight (pagesTall);
>                     setFitToPage (pagesWide, pagesTall);
>                     refreshComposite ();
>                     textField.setText (getDisplayScale (PrintHelperUtil.getScale ()));
>                 }
>             }
> 
>             public void widgetDefaultSelected (SelectionEvent e) {
>             }
> 
>         }
> 
>         );
>         new ToolItem (bar, SWT.SEPARATOR);
441a511,511
>         refreshComposite ();
442,443d510
<         updateCompositeForNumberOfColumns (numberOfRowsToDisplay, numberOfColumnsToDisplay);
<         updateLeftRightUpDownButtonsForToolbar ();
448a517,517
>         dispose ();
588,588c658,658
<         if (! (imageHeight <= 4 || imageWidth <= 4)) {
---
>         if (! (imageHeight <= 4 || imageWidth <= 4)) {
589,589c659,659
<             float scale = (imageHeight / (float) pageSize.y) / (float) DiagramMapModeUtil.getScale (getMapMode ());
---
>             float scale = (imageHeight / (float) pageSize.y) / (float) DiagramMapModeUtil.getScale (getMapMode ());
590,590c660,660
<             scale *= userScale;
---
>             scale *= userScale;
648,648c750,750
<     private boolean doesPageExist (int x, int y) {
---
>     private boolean doesPageExist (int x, int y) {
649,649c751,751
<         return x > 0 && y > 0 && x <= getTotalNumberOfColumns () && y <= getTotalNumberOfRows ();
---
>         return x > 0 && y > 0 && x <= getTotalNumberOfColumns () && y <= getTotalNumberOfRows ();
650,650c752,752
<     }
---
>     }
651,651c753,753
< 
---
> 
655a726,728
>         if (PrintHelperUtil.getScaleToWidth () == 1 && PrintHelperUtil.getScaleToHeight () == 1 && fitToPage) {
>             bounds = getDiagramEditPart ().getChildrenBounds ();
>         }
720a798,975
>     private void setUserScale (int scale) {
>         userScale = scale / 100f;
>         PrintHelperUtil.setScale (scale);
>     }
> 
>     private String getDisplayScale (int scale) {
>         return String.valueOf (scale) + "%";
>     }
> 
>     protected org.eclipse.draw2d.geometry.Point getPageCount (DiagramEditPart dgrmEP, Rectangle figureBounds, org.eclipse.draw2d.geometry.Point pageSize, boolean applyUserScale) {
>         RootEditPart rootEditPart = dgrmEP.getRoot ();
>         if (rootEditPart instanceof DiagramRootEditPart) {
>             DiagramRootEditPart diagramRootEditPart = (DiagramRootEditPart) rootEditPart;
>             PageBreakEditPart pageBreakEditPart = diagramRootEditPart.getPageBreakEditPart ();
>             double fNumCols = ((PageBreaksFigure) pageBreakEditPart.getFigure ()).getPageCount ().y * (applyUserScale ? userScale : 1);
>             double fNumRows = ((PageBreaksFigure) pageBreakEditPart.getFigure ()).getPageCount ().x * (applyUserScale ? userScale : 1);
>             int numCols = (int) Math.ceil (fNumCols);
>             int numRows = (int) Math.ceil (fNumRows);
>             return new org.eclipse.draw2d.geometry.Point (numCols, numRows);
>         } else {
>             double fNumRows = (figureBounds.height * (applyUserScale ? userScale : 1)) / pageSize.y;
>             int numRows = (int) Math.ceil (fNumRows);
>             double fNumCols = (figureBounds.width * (applyUserScale ? userScale : 1)) / pageSize.x;
>             int numCols = (int) Math.ceil (fNumCols);
>             return new org.eclipse.draw2d.geometry.Point (numCols, numRows);
>         }
>     }
> 
>     public void setPercentScaling (int userScale) {
>         fitToPage = false;
>         setUserScale (userScale);
>     }
> 
>     public void setFitToPage (int width, int height) {
>         fitToPage = true;
>         initializeMapMode ();
>         Rectangle figureBounds = PrintHelperUtil.getPageBreakBounds (getDiagramEditPart (), true);
>         org.eclipse.draw2d.geometry.Point pageBounds = PageInfoHelper.getPageSize (getPreferenceStore (), getMapMode ());
>         org.eclipse.draw2d.geometry.Point pageCount = getPageCount (getDiagramEditPart (), figureBounds, pageBounds, false);
>         int numCols = pageCount.x;
>         int numRows = pageCount.y;
>         float actualWidth = 0;
>         float actualHeight = 0;
>         if (height == 1 && width == 1) {
>             figureBounds = getDiagramEditPart ().getChildrenBounds ();
>             actualWidth = figureBounds.width;
>             actualHeight = figureBounds.height;
>         } else {
>             actualWidth = numCols * pageBounds.x;
>             actualHeight = numRows * pageBounds.y;
>         }
>         int totalHeight = (height * pageBounds.y);
>         int totalWidth = (width * pageBounds.x);
>         int vScale = (int) ((totalHeight * 100) / actualHeight);
>         int hScale = (int) ((totalWidth * 100) / actualWidth);
>         setUserScale (Math.min (hScale, vScale));
>     }
> 
>     private class FitToPagesDialog extends Dialog {
>         private Text textWide;
>         private Text textTall;
>         private int pagesWide = 0;
>         private int pagesTall = 0;
> 
>         public FitToPagesDialog (Shell parent) {
>             super (parent);
>         }
> 
>         protected void configureShell (Shell newShell) {
>             super.configureShell (newShell);
>             newShell.setText (DiagramUIPrintingMessages.PrintPreview_FitToPage_DialogTitle);
>         }
> 
>         Label label (Composite parent, String text) {
>             Label result = new Label (parent, SWT.NONE);
>             result.setText (text);
>             return result;
>         }
> 
>         GridData getLayoutData (Control control) {
>             GridData result = (GridData) control.getLayoutData ();
>             if (result == null) {
>                 result = new GridData ();
>                 control.setLayoutData (result);
>             }
>             return result;
>         }
> 
>         Control layoutHorizontalIndent (Control control, int inset) {
>             GridData data = getLayoutData (control);
>             data.horizontalIndent = inset;
>             return control;
>         }
> 
>         Control layoutAlignRight (Control control) {
>             GridData data = getLayoutData (control);
>             data.horizontalAlignment = SWT.END;
>             data.grabExcessHorizontalSpace = false;
>             return control;
>         }
> 
>         Control layoutWidth (Control control, int dlus) {
>             if (dlus > 0) {
>                 GridData data = getLayoutData (control);
>                 data.widthHint = convertHorizontalDLUsToPixels (dlus);
>             }
>             return control;
>         }
> 
>         Control layoutFillHorizontal (Control control, boolean grab) {
>             GridData data = getLayoutData (control);
>             data.horizontalAlignment = SWT.FILL;
>             data.grabExcessHorizontalSpace = grab;
>             return control;
>         }
> 
>         Text text (Composite parent, int width) {
>             Text result = new Text (parent, SWT.SINGLE | SWT.BORDER);
>             layoutFillHorizontal (result, false);
>             layoutWidth (result, width);
>             return result;
>         }
> 
>         Control layoutFillBoth (Control control) {
>             GridData data = getLayoutData (control);
>             data.horizontalAlignment = SWT.FILL;
>             data.grabExcessHorizontalSpace = true;
>             data.verticalAlignment = SWT.FILL;
>             data.grabExcessVerticalSpace = true;
>             return control;
>         }
> 
>         Group group (Composite parent, String text) {
>             Group result = new Group (parent, SWT.NONE);
>             result.setText (text);
>             layoutFillBoth (result);
>             return result;
>         }
> 
>         Composite layout (Composite composite, int columns) {
>             GridLayout g = new GridLayout (columns, false);
>             g.marginLeft = 6;
>             g.marginRight = 6;
>             g.marginTop = 6;
>             g.marginBottom = 3;
>             composite.setLayout (g);
>             return composite;
>         }
> 
>         protected Control createDialogArea (Composite parent) {
>             Composite composite = new Composite (parent, SWT.NONE);
>             layout (composite, 1);
>             Composite scaleGroup = group (composite, DiagramUIPrintingMessages.JPSPrintDialog_Scaling);
>             layout (scaleGroup, 5);
>             layoutHorizontalIndent (layoutAlignRight (label (scaleGroup, DiagramUIPrintingMessages.JPSPrintDialog_PagesWide)), 15);
>             textWide = text (scaleGroup, 20);
>             textWide.setText (String.valueOf (PrintHelperUtil.getScaleToWidth ()));
>             layoutHorizontalIndent (layoutAlignRight (label (scaleGroup, DiagramUIPrintingMessages.JPSPrintDialog_PagesTall)), 15);
>             textTall = text (scaleGroup, 20);
>             textTall.setText (String.valueOf (PrintHelperUtil.getScaleToHeight ()));
>             return composite;
>         }
> 
>         public int getPagesWide () {
>             return pagesWide;
>         }
> 
>         public int getPagesTall () {
>             return pagesTall;
>         }
> 
>         @Override
>         protected void okPressed () {
>             pagesWide = Integer.parseInt (textWide.getText ());
>             pagesTall = Integer.parseInt (textTall.getText ());
>             super.okPressed ();
>         }
> 
721,722d797
<     public void setUserScale (double userScale) {
<         this.userScale = userScale;
