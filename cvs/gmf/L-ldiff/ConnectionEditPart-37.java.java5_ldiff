56a57,58
> import org.eclipse.gef.EditPartViewer;
> 
116a133,133
> import org.eclipse.gmf.runtime.diagram.ui.internal.type.NotationTypeUtil;
117,117d132
< import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.DefaultEditableEditPart;
118,118c134,134
< 
---
> 
128a139,139
> import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;
129,129d138
< import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramFontRegistry;
130,130c140,140
< 
---
> 
142a145,146
> import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
> 
146a151,152
> import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
> 
190a197,208
> import org.eclipse.jface.preference.IPreferenceStore;
> 
> import org.eclipse.jface.preference.PreferenceConverter;
> 
> import org.eclipse.jface.resource.DeviceResourceException;
> 
> import org.eclipse.jface.resource.FontDescriptor;
> 
> import org.eclipse.jface.resource.JFaceResources;
> 
> import org.eclipse.jface.resource.ResourceManager;
> 
201,201c221,221
< import org.eclipse.swt.graphics.FontData;
---
> import org.eclipse.swt.graphics.FontData;
203,203c219,219
< import org.eclipse.swt.widgets.Display;
---
> import org.eclipse.swt.graphics.Font;
209a228,228
>     private boolean isEditable = true;
211a231,232
>     private FontData cachedFontData;
>     private Boolean semanticConnection;
217,218d237
<     private final IEditableEditPart editableEditPart;
< 
296a316,323
>     public void removeNotify () {
>         super.removeNotify ();
>         if (cachedFontData != null) {
>             getResourceManager ().destroyFont (FontDescriptor.createFrom (cachedFontData));
>             cachedFontData = null;
>         }
>     }
> 
381,381c408,408
<         if (adapter == SnapToHelper.class) {
---
>         if (key == SnapToHelper.class) {
382a410,410
>             EditPartViewer viewer = getViewer ();
383,383c411,411
<             Boolean val = (Boolean) getViewer ().getProperty (RulerProvider.PROPERTY_RULER_VISIBILITY);
---
>             Boolean val = (Boolean) viewer.getProperty (RulerProvider.PROPERTY_RULER_VISIBILITY);
386,386c414,414
<             val = (Boolean) getViewer ().getProperty (SnapToGeometry.PROPERTY_SNAP_ENABLED);
---
>             val = (Boolean) viewer.getProperty (SnapToGeometry.PROPERTY_SNAP_ENABLED);
401,401c429,429
<             return getModel ();
---
>             return model;
474a503,509
>         EObject eObj = ((View) getModel ()).getElement ();
>         if (eObj == null) {
>             return null;
>         }
>         if (! eObj.eIsProxy ()) {
>             return eObj;
>         }
556,556c591,591
<         LineStyle style = (LineStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getLineStyle ());
---
>         LineStyle style = (LineStyle) getPrimaryView ().getStyle (NotationPackage.Literals.LINE_STYLE);
573,573c608,608
<             DiagramEventBroker.getInstance (getEditingDomain ()).removeNotificationListener ((EObject) objects [0], (EStructuralFeature) objects [1], (NotificationListener) objects [2]);
---
>             getDiagramEventBroker ().removeNotificationListener ((EObject) objects [0], (EStructuralFeature) objects [1], (NotificationListener) objects [2]);
622,622d656
<         this.editableEditPart = new DefaultEditableEditPart (this);
675,675c709,709
<         RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getRoutingStyle ());
---
>         RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.Literals.ROUTING_STYLE);
744,744c778,778
<         RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getRoutingStyle ());
---
>         RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.Literals.ROUTING_STYLE);
765,765c799,799
<         RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getRoutingStyle ());
---
>         RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.Literals.ROUTING_STYLE);
795,795c829,829
<         RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getRoutingStyle ());
---
>         RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.Literals.ROUTING_STYLE);
799a834,836
>             if (avoidObstruction) installEditPolicy (EditPolicy.CONNECTION_BENDPOINTS_ROLE, null);
>             else installBendpointEditPolicy ();
> 
815,815c852,852
<         FontStyle style = (FontStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getFontStyle ());
---
>         FontStyle style = (FontStyle) getPrimaryView ().getStyle (NotationPackage.Literals.FONT_STYLE);
821a859,864
>         if (cachedFontData != null && cachedFontData.equals (fontData)) {
>             return;
>         }
>         try {
>             Font newFont = getResourceManager ().createFont (FontDescriptor.createFrom (fontData));
>             getFigure ().setFont (newFont);
822,822d858
<         getFigure ().setFont (DiagramFontRegistry.getInstance ().getFont (Display.getDefault (), fontData));
823a866,873
>             if (cachedFontData != null) {
>                 getResourceManager ().destroyFont (FontDescriptor.createFrom (cachedFontData));
>             }
>             cachedFontData = fontData;
>         } catch (DeviceResourceException e) {
>             Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "setFont", e);
>             Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "setFont", e);
>         }
907a958,979
>         if (isEditable == false) {
>             return;
>         }
>         List l = getSourceConnections ();
>         int size = l.size ();
>         for (int i = 0;
>         i < size; i ++) {
>             Object obj = l.get (i);
>             if (obj instanceof IEditableEditPart) {
>                 ((IEditableEditPart) obj).disableEditMode ();
>             }
>         }
>         List c = getChildren ();
>         size = c.size ();
>         for (int i = 0;
>         i < size; i ++) {
>             Object obj = c.get (i);
>             if (obj instanceof IEditableEditPart) {
>                 ((IEditableEditPart) obj).disableEditMode ();
>             }
>         }
>         isEditable = false;
908,908d957
<         this.editableEditPart.disableEditMode ();
911a983,1004
>         if (isEditable) {
>             return;
>         }
>         isEditable = true;
>         List c = getChildren ();
>         int size = c.size ();
>         for (int i = 0;
>         i < size; i ++) {
>             Object obj = c.get (i);
>             if (obj instanceof IEditableEditPart) {
>                 ((IEditableEditPart) obj).enableEditMode ();
>             }
>         }
>         List l = getSourceConnections ();
>         size = l.size ();
>         for (int i = 0;
>         i < size; i ++) {
>             Object obj = l.get (i);
>             if (obj instanceof IEditableEditPart) {
>                 ((IEditableEditPart) obj).enableEditMode ();
>             }
>         }
912,912d982
<         this.editableEditPart.enableEditMode ();
917a1010,1010
>         return isEditable;
918,918d1009
<         return this.editableEditPart.isEditModeEnabled ();
955a1048,1049
>         RootEditPart root = getRoot ();
>         if (root instanceof IDiagramPreferenceSupport) {
956,956d1047
<         if (getRoot () instanceof IDiagramPreferenceSupport) {
957,957c1050,1050
<             return ((IDiagramPreferenceSupport) getRoot ()).getPreferencesHint ();
---
>             return ((IDiagramPreferenceSupport) root).getPreferencesHint ();
970,970c1063,1063
<         if (NotationPackage.eINSTANCE.getView_PersistedChildren ().equals (feature) || NotationPackage.eINSTANCE.getView_TransientChildren ().equals (feature)) {
---
>         if (NotationPackage.Literals.VIEW__PERSISTED_CHILDREN.equals (feature) || NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN.equals (feature)) {
972,972c1065,1065
<         } else if (NotationPackage.eINSTANCE.getView_Visible ().equals (feature)) {
---
>         } else if (NotationPackage.Literals.VIEW__VISIBLE.equals (feature)) {
976,976c1069,1069
<         } else if (NotationPackage.eINSTANCE.getRoutingStyle_Routing ().equals (feature)) {
---
>         } else if (NotationPackage.Literals.ROUTING_STYLE__ROUTING.equals (feature)) {
978,978c1071,1071
<         } else if (NotationPackage.eINSTANCE.getRoutingStyle_Smoothness ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_AvoidObstructions ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_ClosestDistance ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkStatus ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkType ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_JumpLinksReverse ().equals (feature)) {
---
>         } else if (NotationPackage.Literals.ROUTING_STYLE__SMOOTHNESS.equals (feature) || NotationPackage.Literals.ROUTING_STYLE__AVOID_OBSTRUCTIONS.equals (feature) || NotationPackage.Literals.ROUTING_STYLE__CLOSEST_DISTANCE.equals (feature) || NotationPackage.Literals.ROUTING_STYLE__JUMP_LINK_STATUS.equals (feature) || NotationPackage.Literals.ROUTING_STYLE__JUMP_LINK_TYPE.equals (feature) || NotationPackage.Literals.ROUTING_STYLE__JUMP_LINKS_REVERSE.equals (feature)) {
980,980c1073,1073
<         } else if (NotationPackage.eINSTANCE.getLineStyle_LineColor ().equals (feature)) {
---
>         } else if (NotationPackage.Literals.LINE_STYLE__LINE_COLOR.equals (feature)) {
983,983c1076,1076
<         } else if (NotationPackage.eINSTANCE.getRelativeBendpoints_Points ().equals (feature)) {
---
>         } else if (NotationPackage.Literals.RELATIVE_BENDPOINTS__POINTS.equals (feature)) {
985a1079,1080
>             handleMajorSemanticChange ();
>         } else if (event.getEventType () == EventType.UNRESOLVE && event.getNotifier () == ((View) getModel ()).getElement ()) handleMajorSemanticChange ();
985,985c1078,1078
<         } else if (event.getFeature () == NotationPackage.eINSTANCE.getView_Element () && ((EObject) event.getNotifier ()) == getNotationView ()) handleMajorSemanticChange ();
---
>         } else if (event.getFeature () == NotationPackage.Literals.VIEW__ELEMENT && ((EObject) event.getNotifier ()) == getNotationView ()) {
989,989c1084,1084
<     final protected IMapMode getMapMode () {
---
>     protected IMapMode getMapMode () {
1015a1111,1147
>     public Object getPreferredValue (EStructuralFeature feature) {
>         Object preferenceStore = getDiagramPreferencesHint ().getPreferenceStore ();
>         if (preferenceStore instanceof IPreferenceStore) {
>             if (feature == NotationPackage.eINSTANCE.getLineStyle_LineColor ()) {
>                 return FigureUtilities.RGBToInteger (PreferenceConverter.getColor ((IPreferenceStore) preferenceStore, IPreferenceConstants.PREF_LINE_COLOR));
>             } else if (feature == NotationPackage.eINSTANCE.getFontStyle_FontColor ()) {
>                 return FigureUtilities.RGBToInteger (PreferenceConverter.getColor ((IPreferenceStore) preferenceStore, IPreferenceConstants.PREF_FONT_COLOR));
>             }
> 
>         }
>         return getStructuralFeatureValue (feature);
>     }
> 
>     protected ResourceManager getResourceManager () {
>         EditPartViewer viewer = getViewer ();
>         if (viewer instanceof DiagramGraphicalViewer) {
>             return ((DiagramGraphicalViewer) viewer).getResourceManager ();
>         }
>         return JFaceResources.getResources ();
>     }
> 
>     public boolean isSemanticConnection () {
>         if (semanticConnection == null) {
>             if (getEdge () != null && (getEdge ().getElement () != null || ! NotationTypeUtil.hasNotationType (getEdge ()))) {
>                 semanticConnection = Boolean.TRUE;
>             } else {
>                 semanticConnection = Boolean.FALSE;
>             }
>         }
>         return semanticConnection.booleanValue ();
>     }
> 
>     public void setModel (Object model) {
>         super.setModel (model);
>         semanticConnection = null;
>     }
> 
