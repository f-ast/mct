3,6d2
< import java.io.IOException;
< 
< import java.util.ArrayList;
< 
9,10d4
< import java.util.Collections;
< 
19,26d14
< import org.eclipse.core.runtime.IStatus;
< 
< import org.eclipse.core.runtime.NullProgressMonitor;
< 
< import org.eclipse.core.runtime.Status;
< 
< import org.eclipse.draw2d.LightweightSystem;
< 
27,27c15,15
< import org.eclipse.draw2d.Viewport;
---
> import org.eclipse.draw2d.IFigure;
29,30d12
< import org.eclipse.draw2d.parts.ScrollableThumbnail;
< 
31,31c13,13
< import org.eclipse.draw2d.parts.Thumbnail;
---
> import org.eclipse.draw2d.ColorConstants;
53,53c43,43
< import org.eclipse.gef.GraphicalViewer;
---
> import org.eclipse.gef.GraphicalViewer;
54,55d43
< 
< import org.eclipse.gef.KeyHandler;
57,57c37,37
< import org.eclipse.gef.KeyStroke;
---
> import org.eclipse.gef.EditDomain;
59,59c39,39
< import org.eclipse.gef.LayerConstants;
---
> import org.eclipse.gef.EditPart;
61,61c41,41
< import org.eclipse.gef.RootEditPart;
---
> import org.eclipse.gef.GraphicalEditPart;
69,76d50
< import org.eclipse.gef.editparts.FreeformGraphicalRootEditPart;
< 
< import org.eclipse.gef.editparts.RootTreeEditPart;
< 
< import org.eclipse.gef.editparts.ScalableFreeformRootEditPart;
< 
< import org.eclipse.gef.editparts.ScalableRootEditPart;
< 
83,83c63,63
< import org.eclipse.gef.ui.actions.GEFActionConstants;
---
> import org.eclipse.gef.ui.views.palette.PalettePage;
84,84d63
< 
89,90d60
< import org.eclipse.gef.ui.actions.UpdateAction;
< 
93,105d62
< import org.eclipse.gef.ui.parts.ContentOutlinePage;
< 
< import org.eclipse.gef.ui.parts.GraphicalEditorWithFlyoutPalette;
< 
< import org.eclipse.gef.ui.parts.TreeViewer;
< 
< import org.eclipse.gmf.internal.runtime.lite.Activator;
< 
< import org.eclipse.gmf.runtime.lite.edit.parts.tree.DiagramTreeEditPartFactory;
< 
< import org.eclipse.gmf.runtime.lite.properties.PropertySourceProvider;
< 
< import org.eclipse.gmf.runtime.lite.properties.UndoablePropertySheetEntry;
111,112d68
< import org.eclipse.jface.action.Action;
< 
115,130d70
< import org.eclipse.jface.action.IToolBarManager;
< 
< import org.eclipse.jface.viewers.ISelection;
< 
< import org.eclipse.jface.viewers.ISelectionChangedListener;
< 
< import org.eclipse.jface.viewers.StructuredSelection;
< 
< import org.eclipse.swt.SWT;
< 
< import org.eclipse.swt.events.DisposeEvent;
< 
< import org.eclipse.swt.events.DisposeListener;
< 
< import org.eclipse.swt.widgets.Canvas;
< 
133,136d72
< import org.eclipse.swt.widgets.Control;
< 
< import org.eclipse.ui.IActionBars;
< 
139,140d74
< import org.eclipse.ui.IEditorPart;
< 
143,146d76
< import org.eclipse.ui.ISelectionListener;
< 
< import org.eclipse.ui.IWorkbenchPart;
< 
149,152d78
< import org.eclipse.ui.actions.ActionFactory;
< 
< import org.eclipse.ui.part.IPageSite;
< 
153,153c79,79
< import org.eclipse.ui.part.Page;
---
> import org.eclipse.ui.part.EditorPart;
154,155d79
< 
< import org.eclipse.ui.part.PageBook;
161,189d84
< import org.eclipse.ui.views.properties.PropertySheetPage;
< 
< public abstract class DiagramEditor extends GraphicalEditorWithFlyoutPalette {
<     protected static final int ID_OVERVIEW = 0;
<     protected static final int ID_OUTLINE = 1;
<     protected class DiagramContentOutlinePage extends Page implements IContentOutlinePage {
<         private ContentOutlinePage myOutlinePage;
<         private Canvas myOverview;
<         private PageBook myPageBook;
<         private IAction myShowOutlineAction;
<         private IAction myShowOverviewAction;
<         private Thumbnail myThumbnail;
<         private TreeViewer myTreeViewer;
<         private DisposeListener myDisposeListener;
< 
<         @Override
<         public void init (IPageSite pageSite) {
<             super.init (pageSite);
<             ActionRegistry registry = getActionRegistry ();
<             IActionBars bars = pageSite.getActionBars ();
<             String id = ActionFactory.UNDO.getId ();
<             bars.setGlobalActionHandler (id, registry.getAction (id));
<             id = ActionFactory.REDO.getId ();
<             bars.setGlobalActionHandler (id, registry.getAction (id));
<             id = ActionFactory.DELETE.getId ();
<             bars.setGlobalActionHandler (id, registry.getAction (id));
<             bars.updateActionBars ();
<             bars.getToolBarManager ().markDirty ();
<         }
190a90,91
>         public void commandStackChanged (EventObject event) {
>             setDirty (((CommandStack) event.getSource ()).isDirty ());
191,194d89
<         public void addSelectionChangedListener (ISelectionChangedListener listener) {
<             if (myOutlinePage != null) {
<                 myOutlinePage.addSelectionChangedListener (listener);
<             }
197,200d93
<         public void removeSelectionChangedListener (ISelectionChangedListener listener) {
<             if (myOutlinePage != null) {
<                 myOutlinePage.removeSelectionChangedListener (listener);
<             }
202a96,96
>     ;
203,208d95
<         public ISelection getSelection () {
<             if (myOutlinePage != null) {
<                 return myOutlinePage.getSelection ();
<             }
<             return StructuredSelection.EMPTY;
<         }
209a98,99
>     protected void save (IProgressMonitor monitor) throws CoreException {
>         myDiagramDisplayer.save (monitor);
210,213d97
<         public void setSelection (ISelection selection) {
<             if (myOutlinePage != null) {
<                 myOutlinePage.setSelection (selection);
<             }
215a102,103
>     protected final TransactionalEditingDomain getEditingDomain () {
>         return myDiagramDisplayer.getEditingDomain ();
216,229d101
<         @Override
<         public void createControl (Composite parent) {
<             myPageBook = new PageBook (parent, SWT.NONE);
<             myTreeViewer = new TreeViewer ();
<             myTreeViewer.setRootEditPart (new RootTreeEditPart ());
<             myTreeViewer.setEditDomain (getEditDomain ());
<             myTreeViewer.setEditPartFactory (new DiagramTreeEditPartFactory (getGraphicalViewer ()));
<             configureTreeViewer (myTreeViewer);
<             myOutlinePage = new ContentOutlinePage (myTreeViewer);
<             myOutlinePage.createControl (myPageBook);
<             myTreeViewer.setContents (getGraphicalViewer ().getContents ().getModel ());
<             hookOutlineViewer (myTreeViewer);
<             configureOutlinePage ();
<             showPage (getDefaultOutlineViewMode ());
231a106,107
>     protected final EditDomain getEditDomain () {
>         return myDiagramDisplayer.getEditDomain ();
232,233d105
<         protected void hookOutlineViewer (TreeViewer viewer) {
<             getSelectionSynchronizer ().addViewer (viewer);
235a110,111
>     protected final CommandStack getCommandStack () {
>         return getEditDomain ().getCommandStack ();
236,237d109
<         protected void unhookOutlineViewer (TreeViewer viewer) {
<             getSelectionSynchronizer ().removeViewer (viewer);
239a114,115
>     protected final ZoomManager getZoomManager () {
>         return myDiagramDisplayer.getZoomManager ();
240,245d113
<         protected void configureOutlinePage () {
<             IToolBarManager tbm = this.getSite ().getActionBars ().getToolBarManager ();
<             myShowOutlineAction = new Action () {
< 
<                 public void run () {
<                     showPage (ID_OUTLINE);
247a118,119
>     protected final ActionRegistry getActionRegistry () {
>         return myDiagramDisplayer.getActionRegistry ();
249a122,123
>     protected final GraphicalViewer getGraphicalViewer () {
>         return myDiagramDisplayer.getGraphicalViewer ();
250,257d121
<             ;
<             myShowOutlineAction.setImageDescriptor (Activator.getImageDescriptor ("icons/outline.gif"));
<             myShowOutlineAction.setToolTipText ("Show Outline");
<             tbm.add (myShowOutlineAction);
<             myShowOverviewAction = new Action () {
< 
<                 public void run () {
<                     showPage (ID_OVERVIEW);
259a126,127
>     protected IPropertySheetPage getPropertySheetPage () {
>         return myDiagramDisplayer.getPropertySheetPage ();
261a130,131
>     protected IContentOutlinePage getOutlinePage () {
>         return new DiagramContentOutlinePage (myDiagramDisplayer, getDefaultOutlineViewMode ());
262,295d129
<             ;
<             myShowOverviewAction.setImageDescriptor (Activator.getImageDescriptor ("icons/overview.gif"));
<             myShowOverviewAction.setToolTipText ("Show Overview");
<             tbm.add (myShowOverviewAction);
<         }
< 
<         protected void configureTreeViewer (TreeViewer treeViewer) {
<             KeyHandler keyHandler = new KeyHandler ();
<             keyHandler.put (KeyStroke.getPressed (SWT.DEL, 127, 0), getActionRegistry ().getAction (ActionFactory.DELETE.getId ()));
<             keyHandler.put (KeyStroke.getPressed (SWT.F2, 0), getActionRegistry ().getAction (GEFActionConstants.DIRECT_EDIT));
<             treeViewer.setKeyHandler (keyHandler);
<         }
< 
<         protected void showPage (int pageId) {
<             switch (pageId) {
<                 case ID_OUTLINE :
<                     myShowOutlineAction.setChecked (true);
<                     myShowOverviewAction.setChecked (false);
<                     myPageBook.showPage (myOutlinePage.getControl ());
<                     if (myThumbnail != null) {
<                         myThumbnail.setVisible (false);
<                     }
<                     break;
<                 case ID_OVERVIEW :
<                     myShowOutlineAction.setChecked (false);
<                     myShowOverviewAction.setChecked (true);
<                     if (myOverview == null || myOverview.isDisposed ()) {
<                         initializeOverview ();
<                     }
<                     myPageBook.showPage (myOverview);
<                     if (myThumbnail != null) {
<                         myThumbnail.setVisible (true);
<                     }
<             }
298,311d133
<         protected void initializeOverview () {
<             myOverview = new Canvas (myPageBook, SWT.NONE);
<             LightweightSystem lws = new LightweightSystem (myOverview);
<             FreeformGraphicalRootEditPart root = (FreeformGraphicalRootEditPart) getGraphicalViewer ().getRootEditPart ();
<             myThumbnail = new ScrollableThumbnail ((Viewport) root.getFigure ());
<             myThumbnail.setSource (root.getLayer (LayerConstants.SCALABLE_LAYERS));
<             lws.setContents (myThumbnail);
<             myDisposeListener = new DisposeListener () {
< 
<                 public void widgetDisposed (DisposeEvent e) {
<                     if (myThumbnail != null) {
<                         myThumbnail.deactivate ();
<                         myThumbnail = null;
<                     }
313a138,139
>     protected int getDefaultOutlineViewMode () {
>         return DiagramContentOutlinePage.ID_OVERVIEW;
315a142,144
>     @Override
>     public boolean isSaveAsAllowed () {
>         return false;
316,317d141
<             ;
<             getGraphicalControl ().addDisposeListener (myDisposeListener);
320a148,148
>     public void doSaveAs () {
321,322d147
<         public Control getControl () {
<             return myPageBook;
325a234,234
>     @Override
326,326c235,235
<         public void setFocus () {
---
>     public void setFocus () {
327,327d235
<             if (myOutlinePage != null) {
328,328c236,236
<                 myOutlinePage.setFocus ();
---
>         myDiagramDisplayer.setFocus ();
329a158,160
>         myDiagramDisplayer = new DiagramDisplayer (this, createEditDomain (), editingDomain);
>         getCommandStack ().addCommandStackListener (commandStackListener);
>         setInput (input);
333a165,168
>         if (myDiagramDisplayer != null) {
>             getCommandStack ().removeCommandStackListener (commandStackListener);
>             myDiagramDisplayer.dispose ();
>             myDiagramDisplayer = null;
334,335d164
<             if (myOutlinePage != null) {
<                 myOutlinePage.dispose ();
337,345d169
<             unhookOutlineViewer (myTreeViewer);
<             if (myThumbnail != null) {
<                 myThumbnail.deactivate ();
<                 myThumbnail = null;
<             }
<             if (myDisposeListener != null) {
<                 getGraphicalControl ().removeDisposeListener (myDisposeListener);
<             }
<             myOverview = null;
351,359d196
<     private static class UpdatableActionGroup {
< 
<         public void addAction (UpdateAction action) {
<             assert action != null;
<             myActions.add (action);
<         }
< 
<         public void removeAction (UpdateAction action) {
<             myActions.remove (action);
361a200,203
>     private void setDirty (boolean isDirty) {
>         if (isDirty != myIsDirty) {
>             myIsDirty = isDirty;
>             firePropertyChange (PROP_DIRTY);
362,366d199
<         public void update () {
<             for (Iterator it = myActions.iterator ();
<             it.hasNext ();) {
<                 UpdateAction next = (UpdateAction) it.next ();
<                 next.update ();
369a207,209
>     @Override
>     public boolean isDirty () {
>         return myIsDirty;
370,370d206
<         private ArrayList myActions = new ArrayList ();
372a85,87
> public abstract class DiagramEditor extends EditorPart implements IDiagramManager {
>     private DiagramDisplayer myDiagramDisplayer;
>     private boolean myIsDirty = false;
373,377d84
<     private TransactionalEditingDomain editingDomain;
<     private boolean isDirty = false;
<     private PaletteRoot paletteRoot;
<     private PropertySheetPage undoablePropertySheetPage;
<     private UpdatableActionGroup stackActions = new UpdatableActionGroup ();
378,378c88,88
<     private CommandStackListener commandStackListener = new CommandStackListener () {
---
>     private CommandStackListener commandStackListener = new CommandStackListener () {
379,382d88
< 
<         public void commandStackChanged (EventObject event) {
<             stackActions.update ();
<             setDirty (((CommandStack) event.getSource ()).isDirty ());
387,392d219
<     ;
<     private UpdatableActionGroup editPartActions = new UpdatableActionGroup ();
<     private ISelectionListener selectionListener = new ISelectionListener () {
< 
<         public void selectionChanged (IWorkbenchPart part, ISelection selection) {
<             editPartActions.update ();
396a228,231
>     @Override
>     public void createPartControl (Composite parent) {
>         myDiagramDisplayer.createViewer (parent);
>         createActions ();
397,402d227
<     ;
<     private UpdatableActionGroup editorActions = new UpdatableActionGroup ();
< 
<     protected void firePropertyChange (int propertyId) {
<         super.firePropertyChange (propertyId);
<         editorActions.update ();
405,405c212,212
<     protected void addAction (IAction action) {
---
>     protected void addAction (IAction action) {
406,406c213,213
<         getActionRegistry ().registerAction (action);
---
>         myDiagramDisplayer.addAction (action);
408a239,240
>     protected TransactionalEditingDomain getEditingDomain (IEditorInput editorInput) {
>         return null;
409,409c216,216
<     protected void addEditorAction (WorkbenchPartAction action) {
---
>     protected void addEditorAction (WorkbenchPartAction action) {
410,410d216
<         getActionRegistry ().registerAction (action);
411,411c217,217
<         editorActions.addAction (action);
---
>         myDiagramDisplayer.addEditorAction (action);
414,414c220,220
<     protected void addEditPartAction (SelectionAction action) {
---
>     protected void addEditPartAction (SelectionAction action) {
415,415d220
<         getActionRegistry ().registerAction (action);
416,416c221,221
<         editPartActions.addAction (action);
---
>         myDiagramDisplayer.addEditPartAction (action);
418a250,251
>     public void configureGraphicalViewer () {
>         getGraphicalViewer ().getControl ().setBackground (ColorConstants.listBackground);
419,419c224,224
<     protected void addStackAction (StackAction action) {
---
>     protected void addStackAction (StackAction action) {
420,420d224
<         getActionRegistry ().registerAction (action);
421,421c225,225
<         stackActions.addAction (action);
---
>         myDiagramDisplayer.addStackAction (action);
423a254,256
>     public abstract void configurePalette (PaletteRoot paletteRoot);
> 
>     protected EditDomain createEditDomain () {
424,424c152,152
<     public void init (IEditorSite site, IEditorInput input) throws PartInitException {
---
>     public void init (IEditorSite site, IEditorInput input) throws PartInitException {
425a154,156
>         TransactionalEditingDomain editingDomain = getEditingDomain (input);
>         if (editingDomain == null) {
>             editingDomain = createEditingDomain ();
425,425c153,153
<         setSite (site);
---
>         setSite (site);
469a173,173
>     @Override
469a301,301
>         return domain;
470,510d172
<         setEditDomain (domain);
<         getCommandStack ().addCommandStackListener (getStackActionsListener ());
<         getSite ().getWorkbenchWindow ().getSelectionService ().addSelectionListener (getSelectionListener ());
<         setInput (input);
<     }
< 
<     public void dispose () {
<         getCommandStack ().removeCommandStackListener (getStackActionsListener ());
<         getSite ().getWorkbenchWindow ().getSelectionService ().removeSelectionListener (getSelectionListener ());
<         getActionRegistry ().dispose ();
<     }
< 
<     protected void save (IProgressMonitor progressMonitor) throws CoreException {
<         if (progressMonitor == null) {
<             progressMonitor = new NullProgressMonitor ();
<         }
<         progressMonitor.beginTask ("Saving", getEditingDomain ().getResourceSet ().getResources ().size ());
<         try {
<             for (Iterator it = getEditingDomain ().getResourceSet ().getResources ().iterator ();
<             it.hasNext ();) {
<                 Resource next = (Resource) it.next ();
<                 if (next.isLoaded () && (next.isModified () || ! next.isTrackingModification ())) {
<                     next.save (Collections.EMPTY_MAP);
<                 }
<                 progressMonitor.worked (1);
<             }
<         } catch (IOException e) {
<             IStatus status = new Status (IStatus.ERROR, Activator.getDefault ().getBundle ().getSymbolicName (), 0, "Error writing file.", e);
<             throw new CoreException (status);
<         } finally {
<             progressMonitor.done ();
<         }
<     }
< 
<     public boolean isSaveAsAllowed () {
<         return false;
<     }
< 
<     public void doSaveAs () {
<     }
< 
511,511c174,174
<     public Object getAdapter (Class type) {
---
>     public Object getAdapter (Class type) {
512,512c175,175
<         if (type == IPropertySheetPage.class) {
---
>         if (type == IPropertySheetPage.class) {
513,513c176,176
<             return getPropertySheetPage ();
---
>             return getPropertySheetPage ();
514,514c177,177
<         } else if (type == IContentOutlinePage.class) {
---
>         } else if (type == IContentOutlinePage.class) {
515,515c178,178
<             return getOutlinePage ();
---
>             return getOutlinePage ();
516,516c179,179
<         } else if (type == ZoomManager.class) {
---
>         } else if (type == ZoomManager.class) {
517,517c180,180
<             return getZoomManager ();
---
>             return getZoomManager ();
518,518c181,181
<         } else if (type == IDiagramLayouter.class) {
---
>         } else if (type == IDiagramLayouter.class) {
519,519c182,182
<             return getDiagramLayouter ();
---
>             return getDiagramLayouter ();
519a183,194
>         } else if (type == PalettePage.class) {
>             return myDiagramDisplayer.getPalettePage ();
>         } else if (type == GraphicalViewer.class) {
>             return getGraphicalViewer ();
>         } else if (type == CommandStack.class) {
>             return getCommandStack ();
>         } else if (type == ActionRegistry.class) {
>             return getActionRegistry ();
>         } else if (type == EditPart.class && getGraphicalViewer () != null) {
>             return getGraphicalViewer ().getRootEditPart ();
>         } else if (type == IFigure.class && getGraphicalViewer () != null) {
>             return ((GraphicalEditPart) getGraphicalViewer ().getRootEditPart ()).getFigure ();
521a304,304
>     public abstract void initializeGraphicalViewer ();
522,522c197,197
<         return super.getAdapter (type);
---
>         return super.getAdapter (type);
523,523d197
<     }
524a306,306
>     public abstract AdapterFactory getDomainAdapterFactory ();
525,525c134,134
<     protected IDiagramLayouter getDiagramLayouter () {
---
>     protected IDiagramLayouter getDiagramLayouter () {
526,526c135,135
<         return new DefaultDiagramLayouter ();
---
>         return new DefaultDiagramLayouter ();
527,531d135
<     }
< 
<     protected ZoomManager getZoomManager () {
<         return getZoomManager (getGraphicalViewer ());
<     }
532a308,308
>     public abstract boolean isFlyoutPalette ();
533,565d307
<     private ZoomManager getZoomManager (GraphicalViewer viewer) {
<         RootEditPart rootEditPart = viewer.getRootEditPart ();
<         ZoomManager zoomManager = null;
<         if (rootEditPart instanceof ScalableFreeformRootEditPart) {
<             zoomManager = ((ScalableFreeformRootEditPart) rootEditPart).getZoomManager ();
<         } else if (rootEditPart instanceof ScalableRootEditPart) {
<             zoomManager = ((ScalableRootEditPart) rootEditPart).getZoomManager ();
<         }
< 
<         return zoomManager;
<     }
< 
<     protected PaletteRoot getPaletteRoot () {
<         if (paletteRoot == null) {
<             paletteRoot = new PaletteRoot ();
<             configurePalette (paletteRoot);
<         }
<         return paletteRoot;
<     }
< 
<     protected abstract void configurePalette (PaletteRoot paletteRoot);
< 
<     protected CommandStackListener getStackActionsListener () {
<         return commandStackListener;
<     }
< 
<     protected IContentOutlinePage getOutlinePage () {
<         return new DiagramContentOutlinePage ();
<     }
< 
<     protected int getDefaultOutlineViewMode () {
<         return ID_OVERVIEW;
<     }
566a243,246
>     protected TransactionalEditingDomain createEditingDomain () {
>         TransactionalEditingDomain editingDomain = WorkspaceEditingDomainFactory.INSTANCE.createEditingDomain ();
>         editingDomain.getResourceSet ().eAdapters ().add (new AdapterFactoryEditingDomain.EditingDomainProvider (editingDomain));
>         editingDomain.getResourceSet ().eAdapters ().add (new ForceTrackingModificationAdapter ());
566a310,310
>     protected abstract void createActions ();
567,597d242
<     protected PropertySheetPage getPropertySheetPage () {
<         if (undoablePropertySheetPage == null) {
<             undoablePropertySheetPage = new PropertySheetPage ();
<             UndoablePropertySheetEntry rootEntry = new UndoablePropertySheetEntry (getCommandStack ());
<             rootEntry.setPropertySourceProvider (new PropertySourceProvider (getDomainAdapterFactory ()));
<             undoablePropertySheetPage.setRootEntry (rootEntry);
<         }
<         return undoablePropertySheetPage;
<     }
< 
<     private ISelectionListener getSelectionListener () {
<         return selectionListener;
<     }
< 
<     public boolean isDirty () {
<         return isDirty;
<     }
< 
<     private void setDirty (boolean dirty) {
<         if (isDirty != dirty) {
<             isDirty = dirty;
<             firePropertyChange (IEditorPart.PROP_DIRTY);
<         }
<     }
< 
<     protected TransactionalEditingDomain getEditingDomain () {
<         if (editingDomain == null) {
<             editingDomain = WorkspaceEditingDomainFactory.INSTANCE.createEditingDomain ();
<             editingDomain.getResourceSet ().eAdapters ().add (new AdapterFactoryEditingDomain.EditingDomainProvider (editingDomain));
<             editingDomain.getResourceSet ().eAdapters ().add (new ForceTrackingModificationAdapter ());
<         }
598,598c247,247
<         return editingDomain;
---
>         return editingDomain;
599,610d247
<     }
< 
<     protected abstract AdapterFactory getDomainAdapterFactory ();
< 
<     public void setFocus () {
<         getGraphicalViewer ().getControl ().setFocus ();
<     }
< 
<     public final void createPartControl (Composite parent) {
<         super.createPartControl (parent);
<         createActions ();
<     }
