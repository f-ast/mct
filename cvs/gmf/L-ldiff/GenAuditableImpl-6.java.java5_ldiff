8a9,12
> import org.eclipse.emf.common.notify.Notification;
> 
> import org.eclipse.emf.common.notify.NotificationChain;
> 
12a17,20
> import org.eclipse.emf.ecore.InternalEObject;
> 
> import org.eclipse.emf.ecore.impl.ENotificationImpl;
> 
16a25,26
> import org.eclipse.gmf.codegen.gmfgen.GenAuditContext;
> 
19a30,30
>     protected GenAuditContext contextSelector;
29a41,82
>     public GenAuditContext getContextSelector () {
>         if (contextSelector != null && contextSelector.eIsProxy ()) {
>             InternalEObject oldContextSelector = (InternalEObject) contextSelector;
>             contextSelector = (GenAuditContext) eResolveProxy (oldContextSelector);
>             if (contextSelector != oldContextSelector) {
>                 if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR, oldContextSelector, contextSelector));
> 
>             }
>         }
>         return contextSelector;
>     }
> 
>     public GenAuditContext basicGetContextSelector () {
>         return contextSelector;
>     }
> 
>     public NotificationChain basicSetContextSelector (GenAuditContext newContextSelector, NotificationChain msgs) {
>         GenAuditContext oldContextSelector = contextSelector;
>         contextSelector = newContextSelector;
>         if (eNotificationRequired ()) {
>             ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR, oldContextSelector, newContextSelector);
>             if (msgs == null) msgs = notification;
>             else msgs.add (notification);
> 
>         }
>         return msgs;
>     }
> 
>     public void setContextSelector (GenAuditContext newContextSelector) {
>         if (newContextSelector != contextSelector) {
>             NotificationChain msgs = null;
>             if (contextSelector != null) msgs = ((InternalEObject) contextSelector).eInverseRemove (this, GMFGenPackage.GEN_AUDIT_CONTEXT__RULE_TARGETS, GenAuditContext.class, msgs);
> 
>             if (newContextSelector != null) msgs = ((InternalEObject) newContextSelector).eInverseAdd (this, GMFGenPackage.GEN_AUDIT_CONTEXT__RULE_TARGETS, GenAuditContext.class, msgs);
> 
>             msgs = basicSetContextSelector (newContextSelector, msgs);
>             if (msgs != null) msgs.dispatch ();
> 
>         } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR, newContextSelector, newContextSelector));
> 
>     }
> 
31a85,144
>     @Override
>     public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
>         switch (featureID) {
>             case GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR :
>                 if (contextSelector != null) msgs = ((InternalEObject) contextSelector).eInverseRemove (this, GMFGenPackage.GEN_AUDIT_CONTEXT__RULE_TARGETS, GenAuditContext.class, msgs);
> 
>                 return basicSetContextSelector ((GenAuditContext) otherEnd, msgs);
>         }
>         return super.eInverseAdd (otherEnd, featureID, msgs);
>     }
> 
>     @Override
>     public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
>         switch (featureID) {
>             case GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR :
>                 return basicSetContextSelector (null, msgs);
>         }
>         return super.eInverseRemove (otherEnd, featureID, msgs);
>     }
> 
>     @Override
>     public Object eGet (int featureID, boolean resolve, boolean coreType) {
>         switch (featureID) {
>             case GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR :
>                 if (resolve) return getContextSelector ();
> 
>                 return basicGetContextSelector ();
>         }
>         return super.eGet (featureID, resolve, coreType);
>     }
> 
>     @Override
>     public void eSet (int featureID, Object newValue) {
>         switch (featureID) {
>             case GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR :
>                 setContextSelector ((GenAuditContext) newValue);
>                 return;
>         }
>         super.eSet (featureID, newValue);
>     }
> 
>     @Override
>     public void eUnset (int featureID) {
>         switch (featureID) {
>             case GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR :
>                 setContextSelector ((GenAuditContext) null);
>                 return;
>         }
>         super.eUnset (featureID);
>     }
> 
>     @Override
>     public boolean eIsSet (int featureID) {
>         switch (featureID) {
>             case GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR :
>                 return contextSelector != null;
>         }
>         return super.eIsSet (featureID);
>     }
> 
39,42d151
<     public String getClientContextID () {
<         return "DefaultCtx";
<     }
< 
