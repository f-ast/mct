3,4d2
< import java.util.HashMap;
< 
7,8d4
< import java.util.Map;
< 
12a9,10
> import org.eclipse.core.resources.ProjectScope;
> 
16a15,18
> import org.eclipse.core.runtime.IStatus;
> 
> import org.eclipse.core.runtime.Platform;
> 
48a51,54
> import org.osgi.service.prefs.BackingStoreException;
> 
> import org.osgi.service.prefs.Preferences;
> 
51a58,58
>     private static final String PREF_KEY = "gmf_dashboard";
56,56d62
<     private Map < IProject, DashboardState > states;
62,62c68,68
<         if (memento == null) {
---
>         if (memento != null) {
63,65d68
<             states = new HashMap < IProject, DashboardState > ();
<         } else {
<             states = DashboardPersistence.read (memento);
117a121,121
>                 updateDashboardProject (dashboardProject);
118,118d120
<                 mediator.setProjectAndState (dashboardProject, states.get (dashboardProject));
127,127d129
<             states.put (mediator.getProject (), mediator.getState ());
133,133d134
<         DashboardPersistence.write (memento, states);
190a192,220
>         mediator.setProjectAndState (project, new DashboardState (getPreferences (project)));
>     }
> 
>     private Preferences getPreferences (IProject project) {
>         Preferences node = getExistingPreferences (project);
>         if (node != null) {
>             return node;
>         }
>         return new ProjectScope (project).getNode (Plugin.getPluginID ()).node (PREF_KEY);
>     }
> 
>     private Preferences getExistingPreferences (IProject project) {
>         Preferences node = Platform.getPreferencesService ().getRootNode ().node (ProjectScope.SCOPE);
>         try {
>             if (! node.nodeExists (project.getName ())) {
>                 return null;
>             }
>             node = node.node (project.getName ());
>             if (! node.nodeExists (Plugin.getPluginID ())) {
>                 return null;
>             }
>             node = node.node (Plugin.getPluginID ());
>             if (! node.nodeExists (PREF_KEY)) {
>                 return null;
>             }
>             return node.node (PREF_KEY);
>         } catch (BackingStoreException e) {
>             IStatus status = Plugin.createError ("Unable to read state", e);
>             Plugin.getDefault ().getLog ().log (status);
191,192d191
<         if (mediator.getProject () != null) {
<             states.put (mediator.getProject (), mediator.getState ());
193a222,222
>         return null;
194,194d221
<         mediator.setProjectAndState (project, states.get (project));
