32a33,34
> import org.eclipse.gmf.gmfgraph.BasicFont;
> 
36a39,42
> import org.eclipse.gmf.gmfgraph.Color;
> 
> import org.eclipse.gmf.gmfgraph.ConstantColor;
> 
40a47,48
> import org.eclipse.gmf.gmfgraph.Font;
> 
54a63,64
> import org.eclipse.gmf.gmfgraph.RGBColor;
> 
76a87,88
> import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;
> 
78a91,92
> import org.eclipse.jface.resource.FontDescriptor;
> 
80a95,98
> import org.eclipse.swt.graphics.FontData;
> 
> import org.eclipse.swt.graphics.RGB;
> 
83a102,193
>     private static Integer getGridDataAlignment (Alignment alignment) {
>         switch (alignment.getValue ()) {
>             case Alignment.BEGINNING :
>                 return GridData.BEGINNING;
>             case Alignment.END :
>                 return GridData.END;
>             case Alignment.CENTER :
>                 return GridData.CENTER;
>             case Alignment.FILL :
>                 return GridData.FILL;
>         }
>         return null;
>     }
> 
>     private static int getFlowLayoutAllignment (Alignment alignment, boolean isToolbar) {
>         switch (alignment.getValue ()) {
>             case Alignment.BEGINNING :
>                 return isToolbar ? ToolbarLayout.ALIGN_TOPLEFT : org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP;
>             case Alignment.END :
>                 return isToolbar ? ToolbarLayout.ALIGN_BOTTOMRIGHT : org.eclipse.draw2d.FlowLayout.ALIGN_RIGHTBOTTOM;
>         }
>         return isToolbar ? ToolbarLayout.ALIGN_CENTER : org.eclipse.draw2d.FlowLayout.ALIGN_CENTER;
>     }
> 
>     protected static int getLineStyle (LineKind lineKind) {
>         switch (lineKind.getValue ()) {
>             case LineKind.LINE_DASH :
>                 {
>                     return Graphics.LINE_DASH;
>                 } case LineKind.LINE_DOT :
>                 {
>                     return Graphics.LINE_DOT;
>                 } case LineKind.LINE_DASHDOT :
>                 {
>                     return Graphics.LINE_DASHDOT;
>                 } case LineKind.LINE_DASHDOTDOT :
>                 {
>                     return Graphics.LINE_DASHDOTDOT;
>                 } case LineKind.LINE_CUSTOM :
>                 {
>                     return Graphics.LINE_CUSTOM;
>                 } default :
>                 {
>                     return Graphics.LINE_SOLID;
>                 }}
>     }
> 
>     protected static org.eclipse.swt.graphics.Color getColor (Color modelColor) {
>         if (modelColor instanceof ConstantColor) {
>             ConstantColor constantColor = (ConstantColor) modelColor;
>             switch (constantColor.getValue ()) {
>                 case BLACK_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.black;
>                 case BLUE_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.blue;
>                 case CYAN_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.cyan;
>                 case DARK_BLUE_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.darkBlue;
>                 case DARK_GRAY_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.darkGray;
>                 case DARK_GREEN_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.darkGreen;
>                 case GRAY_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.gray;
>                 case GREEN_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.green;
>                 case LIGHT_BLUE_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.lightBlue;
>                 case LIGHT_GRAY_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.lightGray;
>                 case LIGHT_GREEN_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.lightGreen;
>                 case ORANGE_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.orange;
>                 case RED_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.red;
>                 case WHITE_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.white;
>                 case YELLOW_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.yellow;
>             }
>         } else if (modelColor instanceof RGBColor) {
>             RGBColor rgbColor = (RGBColor) modelColor;
>             return DiagramColorRegistry.getInstance ().getColor (new RGB (rgbColor.getRed (), rgbColor.getGreen (), rgbColor.getBlue ()));
>         }
> 
>         return null;
>     }
> 
>     private FontData myCachedFontData;
> 
178,201d287
<     private int getDraw2dAllignment (Alignment alignment, boolean isToolbar) {
<         switch (alignment.getValue ()) {
<             case Alignment.BEGINNING :
<                 return isToolbar ? ToolbarLayout.ALIGN_TOPLEFT : org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP;
<             case Alignment.END :
<                 return isToolbar ? ToolbarLayout.ALIGN_BOTTOMRIGHT : org.eclipse.draw2d.FlowLayout.ALIGN_RIGHTBOTTOM;
<         }
<         return isToolbar ? ToolbarLayout.ALIGN_CENTER : org.eclipse.draw2d.FlowLayout.ALIGN_CENTER;
<     }
< 
<     private Integer getGridDataAlignment (Alignment alignment) {
<         switch (alignment.getValue ()) {
<             case Alignment.BEGINNING :
<                 return GridData.BEGINNING;
<             case Alignment.END :
<                 return GridData.END;
<             case Alignment.CENTER :
<                 return GridData.CENTER;
<             case Alignment.FILL :
<                 return GridData.FILL;
<         }
<         return null;
<     }
< 
217,217c303,303
<                 layoutManager.setMinorAlignment (getDraw2dAllignment (flowLayout.getMinorAlignment (), flowLayout.isForceSingleLine ()));
---
>                 layoutManager.setMinorAlignment (getFlowLayoutAllignment (flowLayout.getMinorAlignment (), flowLayout.isForceSingleLine ()));
224,224c310,310
<                 layoutManager.setMinorAlignment (getDraw2dAllignment (flowLayout.getMinorAlignment (), flowLayout.isForceSingleLine ()));
---
>                 layoutManager.setMinorAlignment (getFlowLayoutAllignment (flowLayout.getMinorAlignment (), flowLayout.isForceSingleLine ()));
225,225c311,311
<                 layoutManager.setMajorAlignment (getDraw2dAllignment (flowLayout.getMajorAlignment (), flowLayout.isForceSingleLine ()));
---
>                 layoutManager.setMajorAlignment (getFlowLayoutAllignment (flowLayout.getMajorAlignment (), flowLayout.isForceSingleLine ()));
264,286d349
<     protected static int getLineStyle (LineKind lineKind) {
<         switch (lineKind.getValue ()) {
<             case LineKind.LINE_DASH :
<                 {
<                     return Graphics.LINE_DASH;
<                 } case LineKind.LINE_DOT :
<                 {
<                     return Graphics.LINE_DOT;
<                 } case LineKind.LINE_DASHDOT :
<                 {
<                     return Graphics.LINE_DASHDOT;
<                 } case LineKind.LINE_DASHDOTDOT :
<                 {
<                     return Graphics.LINE_DASHDOTDOT;
<                 } case LineKind.LINE_CUSTOM :
<                 {
<                     return Graphics.LINE_CUSTOM;
<                 } default :
<                 {
<                     return Graphics.LINE_SOLID;
<                 }}
<     }
< 
364,364c364,364
<     protected org.eclipse.draw2d.geometry.Dimension getDraw2dDimension (Dimension dimension) {
---
>     protected org.eclipse.draw2d.geometry.Dimension getDraw2dDimension (Dimension dimension) {
365,365c365,365
<         return new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (dimension.getDx ()), getMapMode ().DPtoLP (dimension.getDy ()));
---
>         return new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (dimension.getDx ()), getMapMode ().DPtoLP (dimension.getDy ()));
366,366c366,366
<     }
---
>     }
367,367c367,367
< 
---
> 
368,368c368,368
<     protected org.eclipse.draw2d.geometry.Point getDraw2DPoint (Point point) {
---
>     protected org.eclipse.draw2d.geometry.Point getDraw2DPoint (Point point) {
369,369c369,369
<         return new org.eclipse.draw2d.geometry.Point (getMapMode ().DPtoLP (point.getX ()), getMapMode ().DPtoLP (point.getY ()));
---
>         return new org.eclipse.draw2d.geometry.Point (getMapMode ().DPtoLP (point.getX ()), getMapMode ().DPtoLP (point.getY ()));
370,370c370,370
<     }
---
>     }
371,371c371,371
< 
---
> 
372,372c372,372
<     protected void refreshLayoutData () {
---
>     protected void refreshLayoutData () {
373,373c373,373
<         if (! hasParentFigure ()) {
---
>         if (! hasParentFigure ()) {
374,374c374,374
<             return;
---
>             return;
375,375c375,375
<         }
---
>         }
376,376c376,376
<         Object layoutConstraint = getLayoutConstraint ();
---
>         Object layoutConstraint = getLayoutConstraint ();
377,377c377,377
<         if (layoutConstraint != null) {
---
>         if (layoutConstraint != null) {
378,378c378,378
<             getFigure ().getParent ().setConstraint (getFigure (), layoutConstraint);
---
>             getFigure ().getParent ().setConstraint (getFigure (), layoutConstraint);
379,379c379,379
<         }
---
>         }
380,380c380,380
<     }
---
>     }
381,381c381,381
< 
---
> 
382,382c382,382
<     private boolean hasParentFigure () {
---
>     private boolean hasParentFigure () {
383,383c383,383
<         return getFigure ().getParent () != null;
---
>         return getFigure ().getParent () != null;
384,384c384,384
<     }
---
>     }
385,385c385,385
< 
---
> 
386,386c386,386
<     protected void refreshLayoutManager () {
---
>     protected void refreshLayoutManager () {
387,387c387,387
<         if (! hasParentFigure ()) {
---
>         if (! hasParentFigure ()) {
388,388c388,388
<             return;
---
>             return;
389,389c389,389
<         }
---
>         }
390,390c390,390
<         handleMajorSemanticChange ();
---
>         handleMajorSemanticChange ();
391,391c391,391
<     }
---
>     }
392,392c392,392
< 
---
> 
393,393c393,393
<     protected Shape getShape () {
---
>     protected Shape getShape () {
394,394c394,394
<         View view = getNotationView ();
---
>         View view = getNotationView ();
395,395c395,395
<         if (view != null && view.getElement () instanceof Shape) {
---
>         if (view != null && view.getElement () instanceof Shape) {
396,396c396,396
<             return (Shape) view.getElement ();
---
>             return (Shape) view.getElement ();
397,397c397,397
<         }
---
>         }
398,398c398,398
<         return null;
---
>         return null;
399,399c399,399
<     }
---
>     }
400,400c400,400
< 
---
> 
400a401,432
>     protected void refreshFont () {
>         Font modelFont = getShape ().getFont ();
>         if (modelFont instanceof BasicFont) {
>             BasicFont basicFont = (BasicFont) modelFont;
>             int fontStyle = SWT.NONE;
>             switch (basicFont.getStyle ()) {
>                 case BOLD_LITERAL :
>                     fontStyle = SWT.BOLD;
>                     break;
>                 case ITALIC_LITERAL :
>                     fontStyle = SWT.ITALIC;
>                     break;
>             }
>             if (basicFont.getFaceName () == null) {
>                 return;
>             }
>             FontData fontData = new FontData (basicFont.getFaceName (), basicFont.getHeight (), fontStyle);
>             if (myCachedFontData != null && myCachedFontData.equals (fontData)) {
>                 return;
>             }
>             org.eclipse.swt.graphics.Font font = getResourceManager ().createFont (FontDescriptor.createFrom (fontData));
>             getNodeFigure ().setFont (font);
>             getNodeFigure ().repaint ();
>             if (myCachedFontData != null) {
>                 getResourceManager ().destroyFont (FontDescriptor.createFrom (myCachedFontData));
>             }
>         } else {
>             getNodeFigure ().setFont (null);
>             getNodeFigure ().repaint ();
>         }
>     }
> 
