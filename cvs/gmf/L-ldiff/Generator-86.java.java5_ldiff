8a15,15
> import java.util.LinkedList;
9,9d14
< import java.util.Collection;
10,10c16,16
< 
---
> 
42a43,46
> import org.eclipse.emf.ecore.EClass;
> 
> import org.eclipse.emf.ecore.EObject;
> 
44a49,50
> import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
> 
116,116c122,122
<         initializeEditorProject (myDiagram.getEditorGen ().getPlugin ().getID (), createReferencedProjectsList ());
---
>         initializeEditorProject (myEditorGen.getPlugin ().getID (), createReferencedProjectsList ());
586a593,600
>         Counter c = new Counter ();
>         c.registerValue (GMFGenPackage.eINSTANCE.getGenNode (), 8);
>         c.registerValue (GMFGenPackage.eINSTANCE.getGenChildLabelNode (), 4);
>         c.registerValue (GMFGenPackage.eINSTANCE.getGenLink (), 6);
>         c.registerValue (GMFGenPackage.eINSTANCE.getGenCompartment (), 4);
>         c.registerValue (GMFGenPackage.eINSTANCE.getGenDiagram (), 50);
>         c.registerValue (GMFGenPackage.eINSTANCE.getGenPlugin (), 6);
>         setupProgressMonitor (Messages.start, c.getTotal (myEditorGen));
587,592d592
<         Counter c = new Counter (myDiagram);
<         c.setAdditionalOperations (8);
<         c.setOperationsPerNode (2);
<         c.setOperationsPerListContainerNode (1);
<         c.setOperationsPerLink (2);
<         setupProgressMonitor (Messages.start, c.getTotal ());
599a608,610
>         private final HashMap myCounters = new HashMap ();
>         private final HashMap myCache = new HashMap ();
>         private final Integer CACHE_MISS = new Integer (0);
600,605d607
<         private final GenDiagram myDiagram;
<         private int myOpsPerNode = 1;
<         private int myOpsPerLink = 1;
<         private int myOpsPerListContainerNode = 1;
<         private int myAdditionalOps = 0;
<         private int myOpsPerCompartment = 1;
606a612,612
>         public Counter () {
607,608d611
<         Counter (GenDiagram diagram) {
<             myDiagram = diagram;
610a615,616
>         public void registerValue (EClass eClass, int count) {
>             myCounters.put (eClass, new Integer (count));
611,612d614
<         public void setOperationsPerNode (int opsPerNode) {
<             myOpsPerNode = opsPerNode;
614a619,623
>         public int getTotal (EObject from) {
>             int total = process (from);
>             for (Iterator it = from.eAllContents ();
>             it.hasNext ();) {
>                 total += process ((EObject) it.next ());
615,616d618
<         public void setOperationsPerLink (int opsPerLink) {
<             myOpsPerLink = opsPerLink;
617a625,625
>             return total;
618,620d624
< 
<         public void setOperationsPerListContainerNode (int opsPerChild) {
<             myOpsPerListContainerNode = opsPerChild;
622a628,643
>         protected int process (EObject next) {
>             final EClass nextKey = next.eClass ();
>             Integer cachedValue = checkCached (nextKey);
>             if (cachedValue != null) {
>                 return cachedValue.intValue ();
>             }
>             LinkedList checkQueue = new LinkedList ();
>             checkQueue.add (nextKey);
>             do {
>                 Object key = checkQueue.removeFirst ();
>                 if (myCounters.containsKey (key)) {
>                     final Integer value = (Integer) myCounters.get (key);
>                     cache (nextKey, value);
>                     return value.intValue ();
>                 } else {
>                     checkQueue.addAll (((EClass) key).getESuperTypes ());
623,624d627
<         public void setOperationsPerCompartment (int opsPerCompartment) {
<             myOpsPerCompartment = opsPerCompartment;
625a645,647
>             } while (! checkQueue.isEmpty ());
>             cache (nextKey, CACHE_MISS);
>             return 0;
626,628d644
< 
<         public void setAdditionalOperations (int additionalOps) {
<             myAdditionalOps = additionalOps;
630a650,651
>         private Integer checkCached (EClass nextKey) {
>             return (Integer) myCache.get (nextKey);
631,637d649
<         public int getTotal () {
<             int rv = myAdditionalOps;
<             rv += myDiagram.getTopLevelNodes ().size () * myOpsPerNode;
<             rv += getChildNodesCount (myDiagram.getChildNodes ());
<             rv += myDiagram.getCompartments ().size () * myOpsPerCompartment;
<             rv += myDiagram.getLinks ().size () * myOpsPerLink;
<             return rv;
639a654,655
>         private void cache (EClass nextKey, Integer value) {
>             myCache.put (nextKey, value);
640,651d653
<         private int getChildNodesCount (Collection nodes) {
<             int counter = 0;
<             for (Iterator it = nodes.iterator ();
<             it.hasNext ();) {
<                 GenChildNode nextNode = (GenChildNode) it.next ();
<                 if (nextNode instanceof GenChildLabelNode) {
<                     counter += myOpsPerNode;
<                 } else {
<                     counter += myOpsPerListContainerNode;
<                 }
<             }
<             return counter;
