30a37,37
> import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;
31,31d36
< import org.eclipse.emf.common.util.WrappedException;
32,32c38,38
< 
---
> 
32a39,40
> import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
> 
46a49,50
> import org.eclipse.gmf.runtime.diagram.core.services.view.CreateDiagramViewOperation;
> 
49,49c53,53
< import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;
---
> import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
52a61,64
> import org.eclipse.jface.viewers.SelectionChangedEvent;
> 
> import org.eclipse.jface.viewers.StructuredSelection;
> 
52a57,57
> import org.eclipse.jface.viewers.ISelectionChangedListener;
53,53c65,65
< import org.eclipse.jface.dialogs.MessageDialog;
---
> import org.eclipse.jface.viewers.TreeViewer;
53a66,66
> 
58a69,76
> import org.eclipse.jface.wizard.WizardPage;
> 
> import org.eclipse.swt.SWT;
> 
> import org.eclipse.swt.layout.GridData;
> 
> import org.eclipse.swt.layout.GridLayout;
> 
60a79,80
> import org.eclipse.swt.widgets.Label;
> 
70,70c90,90
<     private TransactionalEditingDomain myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain ();
---
>     private TransactionalEditingDomain myEditingDomain;
74a95,95
>     private EObject myDiagramRoot;
76a98,102
>         assert selectedModelFile != null : "Null selectedModelFile in GMFGraphNewDiagramFileWizard constructor";
>         assert workbenchPage != null : "Null workbenchPage in GMFGraphNewDiagramFileWizard constructor";
>         assert selection != null : "Null selection in GMFGraphNewDiagramFileWizard constructor";
>         assert diagramRoot != null : "Null diagramRoot in GMFGraphNewDiagramFileWizard constructor";
>         assert editingDomain != null : "Null editingDomain in GMFGraphNewDiagramFileWizard constructor";
76,76c97,97
<     public GMFGraphNewDiagramFileWizard (IFile selectedModelFile, IWorkbenchPage workbenchPage, IStructuredSelection selection) {
---
>     public GMFGraphNewDiagramFileWizard (IFile selectedModelFile, IWorkbenchPage workbenchPage, IStructuredSelection selection, EObject diagramRoot, TransactionalEditingDomain editingDomain) {
79a106,107
>         myDiagramRoot = diagramRoot;
>         myEditingDomain = editingDomain;
102,102c130,130
<         myFileCreationPage.setDescription ("Create new diagram and initialize it using specified " + CanvasEditPart.MODEL_ID + " model content");
---
>         myFileCreationPage.setDescription ("Create new diagram based on " + CanvasEditPart.MODEL_ID + " model content");
103a132,132
>         addPage (new RootElementSelectorPage ());
107,111d135
<         final EObject diagramModelObject = load ();
<         if (diagramModelObject == null) {
<             MessageDialog.openError (getShell (), "Error", "Failed to load user model");
<             return false;
<         }
126,126c150,150
<                 int diagramVID = GMFGraphVisualIDRegistry.getDiagramVisualID (diagramModelObject);
---
>                 int diagramVID = GMFGraphVisualIDRegistry.getDiagramVisualID (myDiagramRoot);
130,130c154,154
<                 Diagram diagram = ViewService.createDiagram (diagramModelObject, CanvasEditPart.MODEL_ID, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
---
>                 Diagram diagram = ViewService.createDiagram (myDiagramRoot, CanvasEditPart.MODEL_ID, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
151a176,181
>     private class RootElementSelectorPage extends WizardPage implements ISelectionChangedListener {
> 
>         protected RootElementSelectorPage () {
>             super ("Select diagram root element");
>             setTitle ("Diagram root element");
>             setDescription ("Select semantic model element to be depicted on diagram");
152,158d175
<     private EObject load () {
<         ResourceSet resourceSet = myEditingDomain.getResourceSet ();
<         try {
<             Resource resource = resourceSet.getResource (URI.createPlatformResourceURI (mySelectedModelFile.getFullPath ().toString ()), true);
<             return (EObject) resource.getContents ().get (0);
<         } catch (WrappedException ex) {
<             GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to load resource: " + mySelectedModelFile.getFullPath ().toString (), ex);
159a183,236
> 
>         public void createControl (Composite parent) {
>             initializeDialogUnits (parent);
>             Composite topLevel = new Composite (parent, SWT.NONE);
>             topLevel.setLayout (new GridLayout ());
>             topLevel.setLayoutData (new GridData (GridData.VERTICAL_ALIGN_FILL | GridData.HORIZONTAL_ALIGN_FILL));
>             topLevel.setFont (parent.getFont ());
>             setControl (topLevel);
>             createModelBrowser (topLevel);
>             setPageComplete (validatePage ());
>         }
> 
>         private void createModelBrowser (Composite parent) {
>             Composite panel = new Composite (parent, SWT.NONE);
>             panel.setLayoutData (new GridData (GridData.FILL_BOTH));
>             GridLayout layout = new GridLayout ();
>             layout.marginWidth = 0;
>             panel.setLayout (layout);
>             Label label = new Label (panel, SWT.NONE);
>             label.setText ("Select diagram root element:");
>             label.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_BEGINNING));
>             TreeViewer treeViewer = new TreeViewer (panel, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
>             GridData layoutData = new GridData (GridData.FILL_BOTH);
>             layoutData.heightHint = 300;
>             layoutData.widthHint = 300;
>             treeViewer.getTree ().setLayoutData (layoutData);
>             treeViewer.setContentProvider (new AdapterFactoryContentProvider (GMFGraphDiagramEditorPlugin.getInstance ().getItemProvidersAdapterFactory ()));
>             treeViewer.setLabelProvider (new AdapterFactoryLabelProvider (GMFGraphDiagramEditorPlugin.getInstance ().getItemProvidersAdapterFactory ()));
>             treeViewer.setInput (myDiagramRoot.eResource ());
>             treeViewer.setSelection (new StructuredSelection (myDiagramRoot));
>             treeViewer.addSelectionChangedListener (this);
>         }
> 
>         public void selectionChanged (SelectionChangedEvent event) {
>             myDiagramRoot = null;
>             if (event.getSelection () instanceof IStructuredSelection) {
>                 IStructuredSelection selection = (IStructuredSelection) event.getSelection ();
>                 if (selection.size () == 1 && selection.getFirstElement () instanceof EObject) {
>                     myDiagramRoot = (EObject) selection.getFirstElement ();
>                 }
>             }
>             setPageComplete (validatePage ());
>         }
> 
>         private boolean validatePage () {
>             if (myDiagramRoot == null) {
>                 setErrorMessage ("No diagram root element selected");
>                 return false;
>             }
>             boolean result = ViewService.getInstance ().provides (new CreateDiagramViewOperation (new EObjectAdapter (myDiagramRoot), CanvasEditPart.MODEL_ID, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT));
>             setErrorMessage (result ? null : "Invalid diagram root element was selected");
>             return result;
>         }
> 
160,160d182
<         return null;
