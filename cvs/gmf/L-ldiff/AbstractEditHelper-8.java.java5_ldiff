60a61,62
> import org.eclipse.gmf.runtime.emf.type.core.internal.InternalRequestParameters;
> 
66a69,70
> import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyDependentsRequest;
> 
186a191,192
>         } else if (req instanceof DestroyDependentsRequest) {
>             return getDestroyDependentsCommand ((DestroyDependentsRequest) req);
289a296,324
>     protected ICommand getBasicDestroyElementCommand (DestroyElementRequest req) {
>         ICommand result = req.getBasicDestroyCommand ();
>         if (result == null) {
>             result = new DestroyElementCommand (req);
>         } else {
>             req.setBasicDestroyCommand (null);
>         }
>         return result;
>     }
> 
>     protected ICommand getDestroyElementWithDependentsCommand (DestroyElementRequest req) {
>         ICommand result = getBasicDestroyElementCommand (req);
>         DestroyDependentsRequest ddr = (DestroyDependentsRequest) req.getParameter (InternalRequestParameters.DESTROY_DEPENDENTS_REQUEST_PARAMETER);
>         if (ddr == null) {
>             ddr = new DestroyDependentsRequest (req.getEditingDomain (), req.getElementToDestroy (), req.isConfirmationRequired ());
>             req.setParameter (InternalRequestParameters.DESTROY_DEPENDENTS_REQUEST_PARAMETER, ddr);
>         } else {
>             ddr.setElementToDestroy (req.getElementToDestroy ());
>         }
>         IElementType typeToDestroy = ElementTypeRegistry.getInstance ().getElementType (req.getElementToDestroy ());
>         if (typeToDestroy != null) {
>             ICommand command = typeToDestroy.getEditCommand (ddr);
>             if (command != null) {
>                 result = result.compose (command);
>             }
>         }
>         return result;
>     }
> 
290a326,360
>         ICommand result = null;
>         ICommand destroyParent = getDestroyElementWithDependentsCommand (req);
>         EObject parent = req.getElementToDestroy ();
>         IElementType parentType = ElementTypeRegistry.getInstance ().getElementType (parent);
>         if (parentType != null) {
>             for (Iterator iter = parent.eContents ().iterator ();
>             iter.hasNext ();) {
>                 EObject next = (EObject) iter.next ();
>                 DestroyDependentsRequest ddr = (DestroyDependentsRequest) req.getParameter (InternalRequestParameters.DESTROY_DEPENDENTS_REQUEST_PARAMETER);
>                 if ((ddr == null) || ! ddr.getDependentElementsToDestroy ().contains (next)) {
>                     req.setElementToDestroy (next);
>                     ICommand command = parentType.getEditCommand (req);
>                     if (command != null) {
>                         if (result == null) {
>                             result = command;
>                         } else {
>                             result = result.compose (command);
>                         }
>                         if (! command.canExecute ()) {
>                             break;
>                         }
>                     }
>                 }
>             }
>         }
>         if (result == null) {
>             result = destroyParent;
>         } else {
>             result = result.compose (destroyParent);
>         }
>         return result;
>     }
> 
>     protected ICommand getDestroyDependentsCommand (DestroyDependentsRequest req) {
>         return null;
291,291d325
<         return new DestroyElementCommand (req);
