16a17,18
> import org.eclipse.gmf.internal.xpand.expression.SyntaxConstants;
> 
26,27d27
<         Reader r = null;
<         try {
30a44,54
>         }
>         return null;
>     }
> 
>     private XtendResource doLoadXtendResource (String fullyQualifiedName) throws IOException, ParserException {
>         Reader [] rs = resolveMultiple (fullyQualifiedName, XtendResource.FILE_EXTENSION);
>         assert rs != null && rs.length > 0;
>         XtendResource [] result = new XtendResource [rs.length];
>         for (int i = 0;
>         i < rs.length; i ++) {
>             Reader r = rs [i];
30a31,32
>         try {
>             final XtendResource loaded = doLoadXtendResource (fullyQualifiedName);
31,31d43
<             r = resolve (fullyQualifiedName, XtendResource.FILE_EXTENSION);
32,32c55,55
<             assert r != null;
---
>             assert r != null;
32a56,56
>             try {
33,33c57,57
<             final XtendResource loaded = loadXtendResource (r, fullyQualifiedName);
---
>                 result [i] = loadXtendResource (r, fullyQualifiedName);
33a58,58
>                 assert result [i] != null;
40,40d38
<             return delegateLoadXtendResource (fullyQualifiedName);
46,46d59
<             if (r != null) {
52a66,69
>         if (result.length == 1) {
>             return result [0];
>         }
>         return new CompositeXtendResource (this, result);
53,53c39,39
<         return null;
---
>             return null;
57,58d72
<         Reader r = null;
<         try {
61a124,130
>     private XpandResource [] internalLoadXpandResources (String fullyQualifiedName) throws IOException, ParserException {
>         Reader [] rs = resolveMultiple (fullyQualifiedName, XpandResource.TEMPLATE_EXTENSION);
>         assert rs != null && rs.length > 0;
>         XpandResource [] result = new XpandResource [rs.length];
>         for (int i = 0;
>         i < rs.length; i ++) {
>             Reader r = rs [i];
61a76,77
>         try {
>             final XpandResource loaded = doLoadXpandResource (fullyQualifiedName);
62,62d123
<             r = resolve (fullyQualifiedName, XpandResource.TEMPLATE_EXTENSION);
63,63c131,131
<             assert r != null;
---
>             assert r != null;
63a132,132
>             try {
64,64c133,133
<             final XpandResource loaded = loadXpandResource (r, fullyQualifiedName);
---
>                 result [i] = loadXpandResource (r, fullyQualifiedName);
65,65c134,134
<             assert loaded != null;
---
>                 assert result [i] != null;
65a135,138
>             } finally {
>                 try {
>                     r.close ();
>                 } catch (Exception ex) {
71,71d82
<             return delegateLoadXpandResource (fullyQualifiedName);
75a88,94
>         }
>         return null;
>     }
> 
>     private XpandResource doLoadXpandResource (String fullyQualifiedName) throws IOException, ParserException {
>         XpandResource [] unadvised = internalLoadXpandResources (fullyQualifiedName);
>         XpandResource [] advices = null;
76,77d87
<         } finally {
<             if (r != null) {
78a96,102
>             String aspectsTemplateName = getAspectsTemplateName (fullyQualifiedName);
>             advices = internalLoadXpandResources (aspectsTemplateName);
>         } catch (FileNotFoundException e) {
>         } catch (IOException ex) {
>             Activator.logWarn (ex.getMessage ());
>         } catch (ParserException ex) {
>             handleParserException (fullyQualifiedName, ex);
79,80d95
<                     r.close ();
<                 } catch (Exception ex) {
81a104,105
>         if (advices == null && unadvised.length == 1) {
>             return unadvised [0];
82a107,107
>         return new CompositeXpandResource (this, unadvised, advices);
83a109,111
> 
>     protected String getAspectsTemplateName (String fullyQualifiedName) {
>         return ASPECT_PREFIX + fullyQualifiedName;
84,84c83,83
<         return null;
---
>             return null;
87,91d113
<     protected XtendResource delegateLoadXtendResource (String fullyQualifiedName) {
<         for (ResourceManager next : getDependenies ()) {
<             XtendResource r = next.loadXtendResource (fullyQualifiedName);
<             if (r != null) {
<                 return r;
92a118,119
>         if (possiblyAspectedFullyQualifiedName.startsWith (ASPECT_PREFIX)) {
>             return possiblyAspectedFullyQualifiedName.substring (ASPECT_PREFIX.length ());
93a114,115
>     protected String getNonAspectsTemplateName (String possiblyAspectedFullyQualifiedName) {
>         if (possiblyAspectedFullyQualifiedName == null) {
94,94c116,116
<         return null;
---
>             return null;
97,101d123
<     protected XpandResource delegateLoadXpandResource (String fullyQualifiedName) {
<         for (ResourceManager next : getDependenies ()) {
<             XpandResource r = next.loadXpandResource (fullyQualifiedName);
<             if (r != null) {
<                 return r;
103a121,121
>         return possiblyAspectedFullyQualifiedName;
103a141,142
>         }
>         return result;
104,104d120
<         return null;
110a149,149
>     @Deprecated
112a152,153
>     protected Reader [] resolveMultiple (String fullyQualifiedName, String extension) throws IOException {
>         return new Reader [] {resolve (fullyQualifiedName, extension)};
113,114d151
<     protected ResourceManager [] getDependenies () {
<         return new ResourceManager [0];
147a187,187
>     private static final String ASPECT_PREFIX = "aspects" + SyntaxConstants.NS_DELIM;
