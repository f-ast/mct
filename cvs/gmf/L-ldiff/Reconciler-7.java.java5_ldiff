20,20d19
<     private static final int PAIRS_POOL_SIZE = 100;
26,26c25,25
<         myMatchingSession = new MatchingSession (new PairsPool (PAIRS_POOL_SIZE));
---
>         myMatchingSession = new MatchingSession ();
36a36,36
>     @SuppressWarnings("unchecked")
40a41,41
>     @SuppressWarnings("unchecked")
57,57c58,58
<     private void reconcileContents (EObject currentParent, Collection allCurrents, Collection allOlds) {
---
>     private void reconcileContents (EObject currentParent, Collection < EObject > allCurrents, Collection < EObject > allOlds) {
67,67d67
<             myMatchingSession.releasePair (next);
85,90d84
< 
<         public void reset () {
<             current = null;
<             old = null;
<         }
< 
93a98,98
>             final Collection < EObject > myOlds;
94,94c99,99
<         private final Collection myCurrents;
---
>             final Collection < EObject > myCurrents;
95,96d99
<         private final Collection myOlds;
<         private final PairsPool myPool;
98a90,90
>         public MatchingSession () {
99,102d89
<         public MatchingSession (PairsPool pool) {
<             myPool = pool;
<             myCurrents = new LinkedList ();
<             myOlds = new LinkedHashSet ();
105,105c93,93
<         public void match (Collection currents, Collection olds, Collection < Pair > output) {
---
>         public void match (Collection < EObject > currents, Collection < EObject > olds, Collection < Pair > output) {
107,108d94
<             assert myOlds.isEmpty ();
<             assert myCurrents.isEmpty ();
113a102,103
>                 myOlds = new LinkedHashSet < EObject > (olds);
>                 myCurrents = new LinkedList < EObject > (currents);
114,115d101
<                 myCurrents.addAll (currents);
<                 myOlds.addAll (olds);
116,116c104,104
<                 for (Iterator currentContents = myCurrents.iterator ();
---
>                 for (Iterator < EObject > currentContents = myCurrents.iterator ();
118,118c106,106
<                     EObject nextCurrent = (EObject) currentContents.next ();
---
>                     EObject nextCurrent = currentContents.next ();
125,125c113,113
<                 for (Iterator notMatchedOlds = myOlds.iterator ();
---
>                 for (Iterator < EObject > notMatchedOlds = myOlds.iterator ();
129,129c117,117
<                     nextPair.old = (EObject) notMatchedOlds.next ();
---
>                     nextPair.old = notMatchedOlds.next ();
134,135d121
<                 myCurrents.clear ();
<                 myOlds.clear ();
158,183d143
<             return myPool.acquire ();
<         }
< 
<         public void releasePair (Pair pair) {
<             myPool.release (pair);
<         }
< 
<     }
< 
<     private static class PairsPool extends AbstractPool {
< 
<         public PairsPool (int capacity) {
<             super (capacity);
<         }
< 
<         public Pair acquire () {
<             return (Pair) internalAcquire ();
<         }
< 
<         public void release (Pair pair) {
<             pair.current = null;
<             pair.old = null;
<             internalRelease (pair);
<         }
< 
<         protected Object createNew () {
