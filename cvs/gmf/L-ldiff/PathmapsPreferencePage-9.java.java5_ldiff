2a3,8
> import java.io.File;
> 
> import java.util.Arrays;
> 
> import java.util.HashMap;
> 
6a13,13
> import java.util.Map;
7,7c15,15
< import java.util.Set;
---
> import java.util.Set;
8a21,21
> import org.eclipse.core.runtime.CoreException;
9,9d20
< import org.eclipse.core.resources.IPathVariableChangeEvent;
10,10c22,22
< 
---
> 
11,11d22
< import org.eclipse.core.resources.IPathVariableChangeListener;
18a39,40
> import org.eclipse.jface.viewers.CheckStateChangedEvent;
> 
19a42,44
> 
> import org.eclipse.jface.viewers.ICheckStateListener;
> 
19,19c41,41
< import org.eclipse.emf.common.CommonPlugin;
---
> import org.eclipse.jface.viewers.CheckboxTableViewer;
34a49,50
> import org.eclipse.jface.viewers.ISelection;
> 
52a69,70
> import org.eclipse.osgi.util.NLS;
> 
57,57c75,75
< import org.eclipse.swt.events.ControlAdapter;
---
> import org.eclipse.swt.events.SelectionAdapter;
58,63d75
< 
< import org.eclipse.swt.events.ControlEvent;
< 
< import org.eclipse.swt.events.MouseEvent;
< 
< import org.eclipse.swt.events.MouseTrackAdapter;
67,67c25,25
< import org.eclipse.swt.events.SelectionListener;
---
> import org.eclipse.core.runtime.Path;
68,68d25
< 
72a35,35
> import org.eclipse.jface.dialogs.ErrorDialog;
73,73d34
< import org.eclipse.swt.graphics.Point;
74,74c36,36
< 
---
> 
87,88d94
< import org.eclipse.swt.widgets.TableColumn;
< 
89,89c95,95
< import org.eclipse.swt.widgets.TableItem;
---
> import org.eclipse.ui.ISharedImages;
99a106,107
>     private static final String NAME_ATTRIBUTE = "name";
>     private IPathVariableManager pathVariableManager = ResourcesPlugin.getWorkspace ().getPathVariableManager ();
100,102d105
<     private ScrolledComposite referencedPathVariablesScroll;
<     private TableViewer referencedPathVariables;
<     private StringsContentProvider referencedPathVariablesContent;
103a109,109
>     private CheckboxTableViewer pathVariables;
104,104d108
<     private TableViewer pathVariables;
105,105c110,110
<     private StringsContentProvider pathVariablesContent;
---
>     private PathVariableContentProvider pathVariablesContent;
105a111,112
>     private Button newVariable;
>     private Button editVariable;
106,106d110
<     private Button add;
107,107c113,113
<     private Button remove;
---
>     private Button removeVariable;
108,108c114,114
<     private IPathVariableChangeListener pathVariableChangeListener;
---
>     private Map variableChanges = new HashMap ();
109,109c115,115
<     private boolean disposed = true;
---
>     private Object addedToken = new Object ();
109a116,117
>     private Object changedToken = new Object ();
>     private Object removedToken = new Object ();
118,118c126,126
<         composite.setLayout (new GridLayout (3, false));
---
>         composite.setLayout (new GridLayout (2, false));
119,122d126
<         gridData = new GridData (GridData.FILL_HORIZONTAL);
<         gridData.grabExcessHorizontalSpace = true;
<         gridData.horizontalSpan = 2;
<         composite.setLayoutData (gridData);
127,127c131,131
<         gridData.horizontalSpan = 3;
---
>         gridData.horizontalSpan = 2;
128a133,133
>         Label pathVariablesLabel = new Label (composite, SWT.LEFT);
129,136d132
<         Composite pathVariablesComposite = new Composite (composite, SWT.NONE);
<         pathVariablesComposite.setLayout (new GridLayout (1, false));
<         gridData = new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
<         gridData.grabExcessHorizontalSpace = true;
<         gridData.grabExcessVerticalSpace = true;
<         gridData.horizontalSpan = 1;
<         pathVariablesComposite.setLayoutData (gridData);
<         Label pathVariablesLabel = new Label (pathVariablesComposite, SWT.LEFT);
144,144c141,141
<         pathVariablesScroll = new ScrolledComposite (pathVariablesComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
---
>         pathVariablesScroll = new ScrolledComposite (composite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
152,152c149,149
<         pathVariables = new TableViewer (pathVariablesScroll, SWT.MULTI);
---
>         pathVariables = CheckboxTableViewer.newCheckList (pathVariablesScroll, SWT.MULTI);
153a151,151
>         pathVariablesContent = new PathVariableContentProvider ();
154,166d150
<         TableColumn column = new TableColumn (pathVariables.getTable (), SWT.LEFT);
<         column.setMoveable (false);
<         column.setResizable (false);
<         pathVariables.getTable ().addControlListener (new ControlAdapter () {
< 
<             public void controlResized (ControlEvent e) {
<                 pathVariables.getTable ().getColumn (0).setWidth (pathVariables.getTable ().getClientArea ().width);
<             }
< 
<         }
< 
<         );
<         pathVariablesContent = new StringsContentProvider ();
168,168c153,153
<         pathVariables.setLabelProvider (new StringsLabelProvider ());
---
>         pathVariables.setLabelProvider (new PathVariableLabelProvider ());
169,169c154,154
<         pathVariables.setComparator (new StringsViewerComparator ());
---
>         pathVariables.setComparator (new PathVariableViewerComparator ());
172,199d156
<         add = new Button (buttonComposite, SWT.CENTER);
<         add.setText (EMFUIMessages.PathmapsPreferencePage_addChevron);
<         gridData = new GridData (GridData.FILL_HORIZONTAL);
<         gridData.grabExcessHorizontalSpace = true;
<         gridData.grabExcessVerticalSpace = false;
<         gridData.horizontalSpan = 1;
<         add.setLayoutData (gridData);
<         Button addAll = new Button (buttonComposite, SWT.CENTER);
<         addAll.setText (EMFUIMessages.PathmapsPreferencePage_addAllChevron);
<         gridData = new GridData (GridData.FILL_HORIZONTAL);
<         gridData.grabExcessHorizontalSpace = true;
<         gridData.grabExcessVerticalSpace = false;
<         addAll.setLayoutData (gridData);
<         remove = new Button (buttonComposite, SWT.CENTER);
<         remove.setText (EMFUIMessages.PathmapsPreferencePage_removeChevron);
<         gridData = new GridData (GridData.FILL_HORIZONTAL);
<         gridData.grabExcessHorizontalSpace = true;
<         gridData.grabExcessVerticalSpace = false;
<         gridData.horizontalSpan = 1;
<         gridData.verticalIndent = 10;
<         remove.setLayoutData (gridData);
<         Button removeAll = new Button (buttonComposite, SWT.CENTER);
<         removeAll.setText (EMFUIMessages.PathmapsPreferencePage_removeAllChevron);
<         gridData = new GridData (GridData.FILL_HORIZONTAL);
<         gridData.grabExcessHorizontalSpace = true;
<         gridData.grabExcessVerticalSpace = false;
<         gridData.horizontalSpan = 1;
<         removeAll.setLayoutData (gridData);
203a161,161
>         gridData.verticalAlignment = GridData.BEGINNING;
204a163,172
>         newVariable = new Button (buttonComposite, SWT.CENTER);
>         newVariable.setText (EMFUIMessages.PathmapsPreferencePage_newVariable);
>         setButtonLayoutData (newVariable);
>         editVariable = new Button (buttonComposite, SWT.CENTER);
>         editVariable.setText (EMFUIMessages.PathmapsPreferencePage_editVariable);
>         setButtonLayoutData (editVariable);
>         removeVariable = new Button (buttonComposite, SWT.CENTER);
>         removeVariable.setText (EMFUIMessages.PathmapsPreferencePage_removeVariable);
>         setButtonLayoutData (removeVariable);
>         pathVariables.addSelectionChangedListener (new ISelectionChangedListener () {
205,233d162
<         Composite referencedPathVariablesComposite = new Composite (composite, SWT.NONE);
<         referencedPathVariablesComposite.setLayout (new GridLayout (1, false));
<         gridData = new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
<         gridData.grabExcessHorizontalSpace = true;
<         gridData.grabExcessVerticalSpace = true;
<         gridData.horizontalSpan = 1;
<         referencedPathVariablesComposite.setLayoutData (gridData);
<         Label referencedPathVariablesLabel = new Label (referencedPathVariablesComposite, SWT.LEFT);
<         gridData = new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
<         gridData.grabExcessHorizontalSpace = true;
<         gridData.grabExcessVerticalSpace = false;
<         gridData.horizontalSpan = 1;
<         gridData.verticalIndent = 20;
<         referencedPathVariablesLabel.setLayoutData (gridData);
<         referencedPathVariablesLabel.setText (EMFUIMessages.PathmapsPreferencePage_pathVariablesUsedInModeling);
<         referencedPathVariablesScroll = new ScrolledComposite (referencedPathVariablesComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
<         referencedPathVariablesScroll.setExpandHorizontal (true);
<         referencedPathVariablesScroll.setExpandVertical (true);
<         gridData = new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
<         gridData.grabExcessHorizontalSpace = true;
<         gridData.grabExcessVerticalSpace = true;
<         gridData.horizontalSpan = 1;
<         referencedPathVariablesScroll.setLayoutData (gridData);
<         referencedPathVariables = new TableViewer (referencedPathVariablesScroll, SWT.MULTI);
<         referencedPathVariablesScroll.setContent (referencedPathVariables.getTable ());
<         column = new TableColumn (referencedPathVariables.getTable (), SWT.LEFT);
<         column.setMoveable (false);
<         column.setResizable (false);
<         referencedPathVariables.getTable ().addControlListener (new ControlAdapter () {
235,236d173
<             public void controlResized (ControlEvent e) {
<                 referencedPathVariables.getTable ().getColumn (0).setWidth (referencedPathVariables.getTable ().getClientArea ().width);
242,246d180
<         referencedPathVariablesContent = new StringsContentProvider ();
<         referencedPathVariables.setContentProvider (referencedPathVariablesContent);
<         referencedPathVariables.setLabelProvider (new StringsLabelProvider (true));
<         referencedPathVariables.setComparator (new StringsViewerComparator ());
<         composite.addControlListener (new ControlAdapter () {
247a183,184
>             public void checkStateChanged (CheckStateChangedEvent event) {
>                 pathVariableChecked (event, (PathVariableEntry) event.getElement ());
248,249d182
<             public void controlResized (ControlEvent e) {
<                 adjustScrollpanes ();
254a190,190
>         newVariable.addSelectionListener (new SelectionAdapter () {
255,255d189
<         pathVariables.getTable ().addMouseTrackListener (new MouseTrackAdapter () {
257,264d191
<             public void mouseHover (MouseEvent e) {
<                 TableItem item = pathVariables.getTable ().getItem (new Point (e.x, e.y));
<                 String tip = null;
<                 if (item != null) {
<                     String var = item.getText (0);
<                     tip = getValue (var, false);
<                 }
<                 pathVariables.getTable ().setToolTipText (tip);
269a199,199
>         editVariable.addSelectionListener (new SelectionAdapter () {
270,270c181,181
<         pathVariables.addSelectionChangedListener (new ISelectionChangedListener () {
---
>         pathVariables.addCheckStateListener (new ICheckStateListener () {
272,282d200
<             public void selectionChanged (SelectionChangedEvent event) {
<                 if (! event.getSelection ().isEmpty ()) {
<                     referencedPathVariables.setSelection (new StructuredSelection ());
<                     remove.setEnabled (true);
<                     if (! validateAdditions ((IStructuredSelection) event.getSelection (), true)) {
<                         add.setEnabled (false);
<                     } else {
<                         setMessage (null);
<                         add.setEnabled (true);
<                     }
<                 }
287a208,208
>         removeVariable.addSelectionListener (new SelectionAdapter () {
288,288d207
<         referencedPathVariables.getTable ().addMouseTrackListener (new MouseTrackAdapter () {
289a210,211
>             public void widgetSelected (SelectionEvent e) {
>                 removePathVariable (pathVariables.getSelection ());
290,297d209
<             public void mouseHover (MouseEvent e) {
<                 TableItem item = referencedPathVariables.getTable ().getItem (new Point (e.x, e.y));
<                 String tip = null;
<                 if (item != null) {
<                     String var = item.getText (0);
<                     tip = getValue (var, true);
<                 }
<                 referencedPathVariables.getTable ().setToolTipText (tip);
302a217,221
>         initializeContents ();
>         applyDialogFont (composite);
>         pathVariableSelected (pathVariables.getSelection ());
>         return composite;
>     }
303,303d216
<         referencedPathVariables.addSelectionChangedListener (new ISelectionChangedListener () {
304a223,226
>     private void pathVariableChecked (CheckStateChangedEvent event, PathVariableEntry entry) {
>         if (event.getChecked ()) {
>             if (validateSelection (entry, false)) {
>                 entry.setSelected (true);
305,305c174,174
<             public void selectionChanged (SelectionChangedEvent event) {
---
>             public void selectionChanged (SelectionChangedEvent event) {
306,307d174
<                 if (! event.getSelection ().isEmpty ()) {
<                     add.setEnabled (true);
308,308c175,175
<                     pathVariables.setSelection (new StructuredSelection ());
---
>                 pathVariableSelected (event.getSelection ());
309,310d175
<                     if (! validateRemovals ((IStructuredSelection) event.getSelection (), true)) {
<                         remove.setEnabled (false);
311a228,228
>                 event.getCheckable ().setChecked (entry, false);
312,313d227
<                         setMessage (null);
<                         remove.setEnabled (true);
314a230,234
>         } else {
>             if (validateDeselection (entry, false)) {
>                 entry.setSelected (false);
>             } else {
>                 event.getCheckable ().setChecked (entry, true);
317,317c487,487
< 
---
> 
319a239,242
>     private void pathVariableSelected (ISelection selection) {
>         IStructuredSelection ssel = (IStructuredSelection) selection;
>         editVariable.setEnabled (validateEdit (ssel, false));
>         removeVariable.setEnabled (validateRemove (ssel, false));
320,331d238
<         );
<         add.addSelectionListener (new SelectionListener () {
< 
<             public void widgetSelected (SelectionEvent e) {
<                 IStructuredSelection selection = (IStructuredSelection) pathVariables.getSelection ();
<                 for (Iterator iter = selection.iterator ();
<                 iter.hasNext ();) {
<                     String name = (String) iter.next ();
<                     pathVariablesContent.remove (name);
<                     referencedPathVariablesContent.add (name);
<                     adjustScrollpanes ();
<                 }
333a245,250
>     private void markAdded (String variableName) {
>         Object currentChange = variableChanges.get (variableName);
>         if (currentChange == removedToken) {
>             variableChanges.put (variableName, changedToken);
>         } else if (currentChange != changedToken) {
>             variableChanges.put (variableName, addedToken);
334,334c192,192
<             public void widgetDefaultSelected (SelectionEvent e) {
---
>             public void widgetSelected (SelectionEvent e) {
334a193,193
>                 addPathVariable ();
338a255,256
>     boolean isAdded (String variableName) {
>         return variableChanges.get (variableName) == addedToken;
339,342d254
<         );
<         addAll.addSelectionListener (new SelectionListener () {
< 
<             public void widgetDefaultSelected (SelectionEvent e) {
344a259,264
>     private void markRemoved (String variableName) {
>         Object currentChange = variableChanges.get (variableName);
>         if (currentChange == addedToken) {
>             variableChanges.remove (variableName);
>         } else {
>             variableChanges.put (variableName, removedToken);
345,355d258
<             public void widgetSelected (SelectionEvent e) {
<                 Object [] items = pathVariablesContent.getElements (null);
<                 for (int i = items.length - 1;
<                 i >= 0; i --) {
<                     if (validateAdditions (new StructuredSelection (items [i]), false)) {
<                         String name = (String) items [i];
<                         pathVariablesContent.remove (name);
<                         referencedPathVariablesContent.add (name);
<                         adjustScrollpanes ();
<                     }
<                 }
357,357c548,548
< 
---
> 
359a268,269
>     boolean isRemoved (String variableName) {
>         return variableChanges.get (variableName) == removedToken;
360,371d267
<         );
<         remove.addSelectionListener (new SelectionListener () {
< 
<             public void widgetSelected (SelectionEvent e) {
<                 IStructuredSelection selection = (IStructuredSelection) referencedPathVariables.getSelection ();
<                 for (Iterator iter = selection.iterator ();
<                 iter.hasNext ();) {
<                     String name = (String) iter.next ();
<                     referencedPathVariablesContent.remove (name);
<                     pathVariablesContent.add (name);
<                     adjustScrollpanes ();
<                 }
373a272,276
>     private void markChanged (String variableName) {
>         Object currentChange = variableChanges.get (variableName);
>         if (currentChange == addedToken) {
>         } else {
>             variableChanges.put (variableName, changedToken);
374a202,202
>                 editPathVariable (pathVariables.getSelection ());
374,374c201,201
<             public void widgetDefaultSelected (SelectionEvent e) {
---
>             public void widgetSelected (SelectionEvent e) {
376,376d277
< 
378a280,281
>     boolean isChanged (String variableName) {
>         return variableChanges.get (variableName) == changedToken;
379,382d279
<         );
<         removeAll.addSelectionListener (new SelectionListener () {
< 
<             public void widgetDefaultSelected (SelectionEvent e) {
384a284,288
>     boolean isLocationDefined (IPath location) {
>         for (Iterator iter = pathVariablesContent.entries.iterator ();
>         iter.hasNext ();) {
>             if (location.equals (((PathVariableEntry) iter.next ()).getLocationPath ())) {
>                 return true;
385,394d283
<             public void widgetSelected (SelectionEvent e) {
<                 Object [] items = referencedPathVariablesContent.getElements (null);
<                 for (int i = items.length - 1;
<                 i >= 0; i --) {
<                     if (validateRemovals (new StructuredSelection (items [i]), false)) {
<                         String name = (String) items [i];
<                         referencedPathVariablesContent.remove (name);
<                         pathVariablesContent.add (name);
<                         adjustScrollpanes ();
<                     }
396a291,291
>         return false;
397,397d290
< 
399a294,304
>     private void addPathVariable () {
>         NewPathVariableDialog dlg = NewPathVariableDialog.openNew (this);
>         if (dlg != null) {
>             String name = dlg.getVariableName ();
>             IPath location = dlg.getVariableLocation ();
>             markAdded (name);
>             PathVariableEntry entry = new PathVariableEntry (name, location);
>             entry.setSelected (true);
>             pathVariablesContent.add (entry);
>             pathVariables.setChecked (entry, true);
>             pathVariables.setSelection (new StructuredSelection (entry));
400,409d293
<         );
<         initializeContents ();
<         pathVariableChangeListener = new IPathVariableChangeListener () {
< 
<             public void pathVariableChanged (IPathVariableChangeEvent event) {
<                 referencedPathVariables.getTable ().getDisplay ().asyncExec (new Runnable () {
< 
<                     public void run () {
<                         if (! PathmapsPreferencePage.this.disposed) {
<                             performDefaults ();
412a308,327
>     private void editPathVariable (ISelection selection) {
>         PathVariableEntry entry = null;
>         if (selection instanceof IStructuredSelection) {
>             IStructuredSelection ssel = (IStructuredSelection) selection;
>             if (! ssel.isEmpty ()) {
>                 entry = (PathVariableEntry) ssel.getFirstElement ();
>             }
>         }
>         if (entry != null) {
>             String oldName = entry.getName ();
>             NewPathVariableDialog dlg = NewPathVariableDialog.openEdit (this, oldName, entry.getLocation ());
>             if (dlg != null) {
>                 String newName = dlg.getVariableName ();
>                 IPath newLocation = dlg.getVariableLocation ();
>                 boolean nameChanged = ! oldName.equals (newName);
>                 if (nameChanged) {
>                     markAdded (newName);
>                     markRemoved (oldName);
>                 } else {
>                     markChanged (oldName);
413a329,331
>                 entry.setName (newName);
>                 entry.setLocation (newLocation);
>                 pathVariables.update (entry, nameChanged ? new String [] {NAME_ATTRIBUTE} : null);
414,415d328
< 
<                 );
417,417d332
< 
419,424d333
< 
<         ;
<         ResourcesPlugin.getWorkspace ().getPathVariableManager ().addChangeListener (pathVariableChangeListener);
<         disposed = false;
<         applyDialogFont (composite);
<         return composite;
426a336,341
>     private void removePathVariable (ISelection selection) {
>         Iterator entries = null;
>         if (selection instanceof IStructuredSelection) {
>             IStructuredSelection ssel = (IStructuredSelection) selection;
>             if (! ssel.isEmpty ()) {
>                 entries = ssel.iterator ();
427,431d335
<     private void adjustScrollpanes () {
<         pathVariablesScroll.setMinSize (pathVariables.getTable ().computeSize (SWT.DEFAULT, SWT.DEFAULT));
<         pathVariablesScroll.layout ();
<         referencedPathVariablesScroll.setMinSize (referencedPathVariables.getTable ().computeSize (SWT.DEFAULT, SWT.DEFAULT));
<         referencedPathVariablesScroll.layout ();
433,444d342
< 
<     private String getValue (String pathVariable, boolean includeRegistered) {
<         String result = null;
<         if (includeRegistered && PathmapManager.isRegisteredPathVariable (pathVariable)) {
<             String path = PathmapManager.getRegisteredValue (pathVariable);
<             if (path != null) {
<                 URI uri = URI.createURI (path);
<                 uri = CommonPlugin.resolve (uri);
<                 if (uri.isFile ()) {
<                     path = uri.toFileString ();
<                 } else {
<                     path = uri.toString ();
445a344,349
>         if (entries != null) {
>             while (entries.hasNext ()) {
>                 PathVariableEntry entry = (PathVariableEntry) entries.next ();
>                 String name = entry.getName ();
>                 markRemoved (name);
>                 pathVariablesContent.remove (entry);
446,446d343
<                 result = path;
448,452d350
<         } else {
<             IPathVariableManager pathVarMgr = ResourcesPlugin.getWorkspace ().getPathVariableManager ();
<             IPath path = pathVarMgr.getValue (pathVariable);
<             if (path != null) {
<                 result = path.toOSString ();
454a381,392
>     private boolean validateEdit (IStructuredSelection selection, boolean showError) {
>         if (selection.isEmpty () || (selection.size () > 1)) {
>             return false;
>         }
>         String name = ((PathVariableEntry) selection.getFirstElement ()).getName ();
>         if (PathmapManager.isRegisteredPathVariable (name)) {
>             if (showError) {
>                 setMessage (EMFUIMessages.PathmapsPreferencePage_registeredPathVariableErrorMessage, ERROR);
>             }
>             return false;
>         }
>         return true;
455,455d380
<         return result;
456,456c393,393
<     }
---
>     }
457,459d393
< 
<     private boolean validateAdditions (IStructuredSelection selection, boolean showError) {
<         if (selection.isEmpty ()) return false;
460a354,355
>     private boolean validateSelection (PathVariableEntry entry, boolean showError) {
>         String name = entry.getName ();
460a460,463
>         Set currentVariables = PathmapManager.getPathVariableReferences ();
>         try {
>             for (Iterator iter = variableChanges.keySet ().iterator ();
>             iter.hasNext ();) {
461,462d459
<         for (Iterator iter = selection.iterator ();
<         iter.hasNext ();) {
463,463c464,464
<             String name = (String) iter.next ();
---
>                 String name = (String) iter.next ();
463a465,471
>                 if (isRemoved (name)) {
>                     if (pathVariableManager.isDefined (name)) {
>                         pathVariableManager.setValue (name, null);
>                     }
>                     PathmapManager.removePathVariableReference (name);
>                     iter.remove ();
>                 }
475a368,376
>         return true;
>     }
> 
>     private boolean validateDeselection (PathVariableEntry entry, boolean showError) {
>         if (entry.isRequired ()) {
>             if (showError) {
>                 setMessage (EMFUIMessages.PathmapsPreferencePage_registeredPathVariableErrorMessage, ERROR);
>             }
>             return false;
480,480c395,395
<     private boolean validateRemovals (IStructuredSelection selection, boolean showError) {
---
>     private boolean validateRemove (IStructuredSelection selection, boolean showError) {
481,481c396,396
<         if (selection.isEmpty ()) return false;
---
>         if (selection.isEmpty ()) {
481a397,398
>             return false;
>         }
485,485c401,401
<             String name = (String) iter.next ();
---
>             String name = ((PathVariableEntry) iter.next ()).getName ();
497a414,414
>         variableChanges.clear ();
498,500d413
<         add.setEnabled (true);
<         remove.setEnabled (true);
<         referencedPathVariables.setInput (new HashSet (PathmapManager.getAllPathVariables ()));
501a416,430
>         Set allVariables = new HashSet ();
>         Set checkedVariables = new HashSet ();
>         Set pathVariableNames = new HashSet ();
>         pathVariableNames.addAll (Arrays.asList (pathVariableManager.getPathVariableNames ()));
>         pathVariableNames.addAll (PathmapManager.getAllPathVariables ());
>         for (Iterator iter = pathVariableNames.iterator ();
>         iter.hasNext ();) {
>             String name = (String) iter.next ();
>             PathVariableEntry entry;
>             if (PathmapManager.isRegisteredPathVariable (name)) {
>                 String value = PathmapManager.getRegisteredValue (name);
>                 try {
>                     URI uri = URI.createURI (value);
>                     if (uri.isFile ()) {
>                         value = uri.toFileString ();
502,507d415
<         Set available = new HashSet ();
<         String [] pathVariableNames = ResourcesPlugin.getWorkspace ().getPathVariableManager ().getPathVariableNames ();
<         for (int i = 0;
<         i < pathVariableNames.length; i ++) {
<             if (! currentVariables.contains (pathVariableNames [i])) {
<                 available.add (pathVariableNames [i]);
508a432,432
>                 } catch (RuntimeException e) {
509a434,448
>                 entry = new PathVariableEntry (name, value);
>                 checkedVariables.add (entry);
>                 allVariables.add (entry);
>             } else if (PathmapManager.isCompatiblePathVariable (name)) {
>                 entry = new PathVariableEntry (name, pathVariableManager.getValue (name));
>                 if (currentVariables.contains (entry.getName ())) {
>                     checkedVariables.add (entry);
>                     entry.setSelected (true);
>                 }
>                 allVariables.add (entry);
>             }
> 
>         }
>         pathVariables.setInput (allVariables);
>         pathVariables.setCheckedElements (checkedVariables.toArray ());
510,510d433
<         pathVariables.setInput (available);
522,526d459
<         Object [] nonReferencedPathVariables = pathVariablesContent.getElements (null);
<         for (int i = 0;
<         i < nonReferencedPathVariables.length; i ++) {
<             String variableName = (String) nonReferencedPathVariables [i];
<             PathmapManager.removePathVariableReference (variableName);
527a473,473
>             Object [] variables = pathVariablesContent.getElements (null);
528,529d472
<         Set currentVariables = PathmapManager.getAllPathVariables ();
<         Object [] variablesToReference = referencedPathVariablesContent.getElements (null);
530a475,485
>             i < variables.length; i ++) {
>                 PathVariableEntry entry = (PathVariableEntry) variables [i];
>                 String name = entry.getName ();
>                 if (isChanged (name) || isAdded (name) && ! pathVariableManager.isDefined (name)) {
>                     pathVariableManager.setValue (name, new Path (entry.getLocation ()));
>                     variableChanges.remove (name);
>                 }
>                 if (entry.isSelected () && ! currentVariables.contains (name)) {
>                     PathmapManager.addPathVariableReference (name);
>                 } else if (! entry.isSelected () && currentVariables.contains (name)) {
>                     PathmapManager.removePathVariableReference (name);
531,534d474
<         i < variablesToReference.length; i ++) {
<             String variableName = (String) variablesToReference [i];
<             if (! currentVariables.contains (variableName)) {
<                 PathmapManager.addPathVariableReference (variableName);
538a491,493
>         } catch (CoreException e) {
>             ErrorDialog.openError (getShell (), EMFUIMessages.PathmapsPreferencePage_promptTitle, EMFUIMessages.PathmapsPreferencePage_updateFailed, e.getStatus ());
>             return false;
540,547d494
< 
<     public void dispose () {
<         disposed = true;
<         if (pathVariableChangeListener != null) {
<             ResourcesPlugin.getWorkspace ().getPathVariableManager ().removeChangeListener (pathVariableChangeListener);
<             pathVariableChangeListener = null;
<         }
<         super.dispose ();
550,550c497,497
<     private static class StringsContentProvider implements IStructuredContentProvider {
---
>     private static class PathVariableContentProvider implements IStructuredContentProvider {
551,551c498,498
<         private Set strings;
---
>         private Set entries;
553a501,501
>         PathVariableContentProvider () {
554,554d500
<         StringsContentProvider () {
555,555c502,502
<             strings = new HashSet ();
---
>             entries = new HashSet ();
557a505,508
>         void add (PathVariableEntry entry) {
>             if (! entries.contains (entry)) {
>                 entries.add (entry);
>                 table.add (entry);
558,561d504
<         void add (String string) {
<             if (! strings.contains (string)) {
<                 strings.add (string);
<                 table.add (string);
564a512,515
>         void remove (PathVariableEntry entry) {
>             if (entries.contains (entry)) {
>                 entries.remove (entry);
>                 table.remove (entry);
565,568d511
<         void remove (String string) {
<             if (strings.contains (string)) {
<                 strings.remove (string);
<                 table.remove (string);
573,573c520,520
<             return strings.toArray ();
---
>             return entries.toArray ();
577,577c524,524
<             strings = (Set) newInput;
---
>             entries = (Set) newInput;
586,586c533,533
<     private static class StringsLabelProvider implements ITableLabelProvider, IColorProvider {
---
>     private static class PathVariableLabelProvider implements ITableLabelProvider, IColorProvider {
587,587d533
<         private final boolean isReferencedPathVariables;
589a536,537
>         PathVariableLabelProvider () {
>             super ();
590,595d535
<         StringsLabelProvider () {
<             this (false);
<         }
< 
<         StringsLabelProvider (boolean isReferencedPathVariables) {
<             this.isReferencedPathVariables = isReferencedPathVariables;
598a541,542
>             PathVariableEntry entry = (PathVariableEntry) element;
>             String name = entry.getName ();
599,599c543,543
<             if (isReferencedPathVariables && PathmapManager.isRegisteredPathVariable ((String) element)) {
---
>             if (PathmapManager.isRegisteredPathVariable (name)) {
600a545,546
>             } else if (! isDirectory (entry.getLocation ())) {
>                 return MslUIPlugin.getDefault ().getWorkbench ().getSharedImages ().getImage (ISharedImages.IMG_OBJS_WARN_TSK);
604a552,556
>         private boolean isDirectory (String location) {
>             File file = new File (location);
>             return file.exists () && file.isDirectory ();
>         }
> 
612a565,569
>             if (columnIndex != 0) {
>                 return null;
>             }
>             PathVariableEntry entry = (PathVariableEntry) element;
>             return NLS.bind (EMFUIMessages.PathmapsPreferencePage_variablePattern, entry.getName (), entry.getLocation ());
613,613d564
<             return (columnIndex == 0) ? (String) element : null;
643,643c599,599
<     private static class StringsViewerComparator extends ViewerComparator {
---
>     private static class PathVariableViewerComparator extends ViewerComparator {
644a601,601
>         PathVariableViewerComparator () {
645,645d600
<         StringsViewerComparator () {
648a605,608
>         public boolean isSorterProperty (Object element, String property) {
>             return NAME_ATTRIBUTE.equals (property);
>         }
> 
649a610,678
>             return PathmapManager.isRegisteredPathVariable (((PathVariableEntry) element).getName ()) ? 1 : 0;
>         }
> 
>     }
> 
>     private static final class PathVariableEntry {
>         private String name;
>         private String location;
>         private IPath locationPath;
>         private final boolean required;
>         private boolean selected;
> 
>         PathVariableEntry (String name, IPath location) {
>             this (name, location.toPortableString (), false);
>             this.locationPath = location;
>         }
> 
>         PathVariableEntry (String name, String location) {
>             this (name, location, true);
>         }
> 
>         private PathVariableEntry (String name, String location, boolean required) {
>             this.name = name;
>             this.location = location;
>             this.required = required;
>             selected = required;
>         }
> 
>         boolean isRequired () {
>             return required;
>         }
> 
>         String getName () {
>             return name;
>         }
> 
>         void setName (String name) {
>             if (! isRequired ()) {
>                 this.name = name;
>             }
>         }
> 
>         String getLocation () {
>             return location;
>         }
> 
>         IPath getLocationPath () {
>             return locationPath;
>         }
> 
>         void setLocation (IPath location) {
>             if (! isRequired ()) {
>                 this.locationPath = location;
>                 this.location = location.toPortableString ();
>             }
>         }
> 
>         boolean isSelected () {
>             return selected;
>         }
> 
>         void setSelected (boolean selected) {
>             if (! isRequired ()) {
>                 this.selected = selected;
>             }
>         }
> 
>         public String toString () {
>             return getName () + " - " + getLocation ();
650,650d609
<             return PathmapManager.isRegisteredPathVariable ((String) element) ? 1 : 0;
