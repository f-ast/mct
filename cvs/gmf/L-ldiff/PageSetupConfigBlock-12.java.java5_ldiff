2a3,8
> import java.awt.print.PageFormat;
> 
> import java.awt.print.Paper;
> 
> import java.awt.print.PrinterJob;
> 
10a31,34
> import org.eclipse.swt.events.FocusEvent;
> 
> import org.eclipse.swt.events.FocusListener;
> 
40a13,14
> import org.eclipse.draw2d.geometry.PrecisionPoint;
> 
41,41c15,15
< import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.DefaultValues;
---
> import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.DefaultValues;
42,42c16,16
< 
---
> 
43,43c17,17
< import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.ILabels;
---
> import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.ILabels;
44,44c18,18
< 
---
> 
45,45c19,19
< import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupPageType;
---
> import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupPageType;
46,46c20,20
< 
---
> 
47,47c21,21
< import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupWidgetFactory;
---
> import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupWidgetFactory;
48,48c22,22
< 
---
> 
49,49c23,23
< import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;
---
> import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;
50,50c24,24
< 
---
> 
51,51c25,25
< import org.eclipse.gmf.runtime.diagram.ui.preferences.PrintingPreferencePage;
---
> import org.eclipse.gmf.runtime.diagram.ui.preferences.PrintingPreferencePage;
52,52c26,26
< 
---
> 
270a287,306
>         fTextMarginTop.addFocusListener (new FocusListener () {
> 
>             public void focusGained (FocusEvent e) {
>             }
> 
>             public void focusLost (FocusEvent e) {
>                 double marginTop = getDblFromString (fTextMarginTop.getText ());
>                 double minimumTop = DefaultValues.MINIMUM_MARGIN_TOP;
>                 if (! isUnitsInInch ()) {
>                     marginTop = fConvertor.convertMilimToInches (marginTop);
>                     minimumTop = fConvertor.convertInchesToMilim (minimumTop);
>                 }
>                 if (marginTop < DefaultValues.MINIMUM_MARGIN_TOP) {
>                     fTextMarginTop.setText (fNumberFormat.format (minimumTop));
>                 }
>             }
> 
>         }
> 
>         );
281a318,337
>         fTextMarginBottom.addFocusListener (new FocusListener () {
> 
>             public void focusGained (FocusEvent e) {
>             }
> 
>             public void focusLost (FocusEvent e) {
>                 double marginBottom = getDblFromString (fTextMarginBottom.getText ());
>                 double minimumBottom = DefaultValues.MINIMUM_MARGIN_BOTTOM;
>                 if (! isUnitsInInch ()) {
>                     marginBottom = fConvertor.convertMilimToInches (marginBottom);
>                     minimumBottom = fConvertor.convertInchesToMilim (minimumBottom);
>                 }
>                 if (marginBottom < DefaultValues.MINIMUM_MARGIN_BOTTOM) {
>                     fTextMarginBottom.setText (fNumberFormat.format (minimumBottom));
>                 }
>             }
> 
>         }
> 
>         );
292a349,368
>         fTextMarginLeft.addFocusListener (new FocusListener () {
> 
>             public void focusGained (FocusEvent e) {
>             }
> 
>             public void focusLost (FocusEvent e) {
>                 double marginLeft = getDblFromString (fTextMarginLeft.getText ());
>                 double minimumLeft = DefaultValues.MINIMUM_MARGIN_LEFT;
>                 if (! isUnitsInInch ()) {
>                     marginLeft = fConvertor.convertMilimToInches (marginLeft);
>                     minimumLeft = fConvertor.convertInchesToMilim (minimumLeft);
>                 }
>                 if (marginLeft < DefaultValues.MINIMUM_MARGIN_LEFT) {
>                     fTextMarginLeft.setText (fNumberFormat.format (minimumLeft));
>                 }
>             }
> 
>         }
> 
>         );
303a380,399
>         fTextMarginRight.addFocusListener (new FocusListener () {
> 
>             public void focusGained (FocusEvent e) {
>             }
> 
>             public void focusLost (FocusEvent e) {
>                 double marginRight = getDblFromString (fTextMarginRight.getText ());
>                 double minimumRight = DefaultValues.MINIMUM_MARGIN_RIGHT;
>                 if (! isUnitsInInch ()) {
>                     marginRight = fConvertor.convertMilimToInches (marginRight);
>                     minimumRight = fConvertor.convertInchesToMilim (minimumRight);
>                 }
>                 if (marginRight < DefaultValues.MINIMUM_MARGIN_RIGHT) {
>                     fTextMarginRight.setText (fNumberFormat.format (minimumRight));
>                 }
>             }
> 
>         }
> 
>         );
641a738,738
>                 if (isUnitsInInch ()) {
641a271,271
>     private boolean isUnitsInInch () {
642a273,274
>     }
> 
642,642c272,272
<                 if (fCurrentUnit.startsWith ("inc")) {
---
>         return (fCurrentUnit.startsWith ("inc"));
