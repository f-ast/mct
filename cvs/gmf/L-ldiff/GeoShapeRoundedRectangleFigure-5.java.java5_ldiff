4a5,12
> import org.eclipse.draw2d.geometry.Point;
> 
> import org.eclipse.draw2d.geometry.PointList;
> 
> import org.eclipse.draw2d.geometry.PrecisionPoint;
> 
> import org.eclipse.draw2d.geometry.PrecisionRectangle;
> 
6a15,21
> import org.eclipse.gmf.runtime.draw2d.ui.figures.IPolygonAnchorableFigure;
> 
> import org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx;
> 
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.PointListUtilities;
> 
> public class GeoShapeRoundedRectangleFigure extends GeoShapeFigure implements IPolygonAnchorableFigure {
7,7d14
< public class GeoShapeRoundedRectangleFigure extends GeoShapeFigure {
8a23,23
>     private PointList anchorBorderPointList;
20,20c35,35
<         Rectangle r = getBounds ();
---
>         Rectangle r = getBounds ().getCopy ();
21,21d35
<         Rectangle insideRect = new Rectangle (r.x, r.y, r.width - 1, r.height - 1);
23a38,99
>         g.drawRoundRectangle (r, cornerRadius, cornerRadius);
>     }
> 
>     public PointList getAnchorBorderPointList () {
>         int arcSize = getCornerRadius ();
>         PrecisionRectangle rBounds = new PrecisionRectangle (getBounds ());
>         Point keyPoint1 = new PrecisionPoint (rBounds.getTopLeft ().x + arcSize / 2, rBounds.getTopLeft ().y);
>         Point keyPoint2 = new PrecisionPoint (rBounds.getTopLeft ().x, rBounds.getTopLeft ().y + arcSize / 2);
>         Point keyPoint3 = new PrecisionPoint (rBounds.getBottomLeft ().x, rBounds.getBottomLeft ().y - arcSize / 2);
>         Point keyPoint4 = new PrecisionPoint (rBounds.getBottomLeft ().x + arcSize / 2, rBounds.getBottomLeft ().y);
>         Point keyPoint5 = new PrecisionPoint (rBounds.getBottomRight ().x - arcSize / 2, rBounds.getBottomRight ().y);
>         Point keyPoint6 = new PrecisionPoint (rBounds.getBottomRight ().x, rBounds.getBottomRight ().y - arcSize / 2);
>         Point keyPoint7 = new PrecisionPoint (rBounds.getTopRight ().x, rBounds.getTopRight ().y + arcSize / 2);
>         Point keyPoint8 = new PrecisionPoint (rBounds.getTopRight ().x - arcSize / 2, rBounds.getTopRight ().y);
>         PointList upperLeftPointList = new PointList ();
>         upperLeftPointList.addPoint (keyPoint1);
>         upperLeftPointList.addPoint (rBounds.getTopLeft ().x + arcSize / 4, rBounds.getTopLeft ().y + arcSize / 16);
>         upperLeftPointList.addPoint (rBounds.getTopLeft ().x + arcSize / 16, rBounds.getTopLeft ().y + arcSize / 4);
>         upperLeftPointList.addPoint (keyPoint2);
>         PointList lowerLeftPointList = new PointList ();
>         lowerLeftPointList.addPoint (keyPoint3);
>         lowerLeftPointList.addPoint (rBounds.getBottomLeft ().x + arcSize / 16, rBounds.getBottomLeft ().y - arcSize / 4);
>         lowerLeftPointList.addPoint (rBounds.getBottomLeft ().x + arcSize / 4, rBounds.getBottomLeft ().y - arcSize / 16);
>         lowerLeftPointList.addPoint (keyPoint4);
>         PointList lowerRightPointList = new PointList ();
>         lowerRightPointList.addPoint (keyPoint5);
>         lowerRightPointList.addPoint (rBounds.getBottomRight ().x - arcSize / 4, rBounds.getBottomRight ().y - arcSize / 16);
>         lowerRightPointList.addPoint (rBounds.getBottomRight ().x - arcSize / 16, rBounds.getBottomRight ().y - arcSize / 4);
>         lowerRightPointList.addPoint (keyPoint6);
>         PointList upperRightPointList = new PointList ();
>         upperRightPointList.addPoint (keyPoint7);
>         upperRightPointList.addPoint (rBounds.getTopRight ().x - arcSize / 16, rBounds.getTopRight ().y + arcSize / 4);
>         upperRightPointList.addPoint (rBounds.getTopRight ().x - arcSize / 4, rBounds.getTopRight ().y + arcSize / 16);
>         upperRightPointList.addPoint (keyPoint8);
>         PointList combinedPointList = new PointList ();
>         combinedPointList.addPoint (keyPoint1);
>         combinedPointList.addAll (PointListUtilities.calcSmoothPolyline (upperLeftPointList, PolylineConnectionEx.SMOOTH_MORE, PointListUtilities.DEFAULT_BEZIERLINES));
>         combinedPointList.addPoint (keyPoint2);
>         combinedPointList.addPoint (keyPoint3);
>         combinedPointList.addAll (PointListUtilities.calcSmoothPolyline (lowerLeftPointList, PolylineConnectionEx.SMOOTH_MORE, PointListUtilities.DEFAULT_BEZIERLINES));
>         combinedPointList.addPoint (keyPoint4);
>         combinedPointList.addPoint (keyPoint5);
>         combinedPointList.addAll (PointListUtilities.calcSmoothPolyline (lowerRightPointList, PolylineConnectionEx.SMOOTH_MORE, PointListUtilities.DEFAULT_BEZIERLINES));
>         combinedPointList.addPoint (keyPoint6);
>         combinedPointList.addPoint (keyPoint7);
>         combinedPointList.addAll (PointListUtilities.calcSmoothPolyline (upperRightPointList, PolylineConnectionEx.SMOOTH_MORE, PointListUtilities.DEFAULT_BEZIERLINES));
>         combinedPointList.addPoint (keyPoint8);
>         combinedPointList.addPoint (keyPoint1);
>         PointListUtilities.normalizeSegments (combinedPointList);
>         return combinedPointList;
>     }
> 
>     public void setBounds (Rectangle rect) {
>         super.setBounds (rect);
>         anchorBorderPointList = null;
>     }
> 
>     public PointList getPolygonPoints () {
>         if (anchorBorderPointList == null) {
>             anchorBorderPointList = getAnchorBorderPointList ();
>         }
>         return anchorBorderPointList.getCopy ();
24,24d37
<         g.drawRoundRectangle (insideRect, cornerRadius, cornerRadius);
