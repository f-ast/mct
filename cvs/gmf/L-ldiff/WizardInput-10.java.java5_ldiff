5,6d4
< import java.util.Iterator;
< 
11,18d8
< import org.eclipse.core.resources.IWorkspace;
< 
< import org.eclipse.core.runtime.IPath;
< 
< import org.eclipse.core.runtime.IStatus;
< 
< import org.eclipse.core.runtime.Status;
< 
25,26d14
< import org.eclipse.emf.common.util.UniqueEList;
< 
29,30d16
< import org.eclipse.emf.ecore.EObject;
< 
49,50d34
< import org.eclipse.gmf.internal.bridge.ui.Plugin;
< 
63,64d46
< import org.eclipse.gmf.tooldef.GMFToolFactory;
< 
68a51,51
> public abstract class WizardInput {
69,71d50
< import org.eclipse.jface.dialogs.IMessageProvider;
< 
< public class WizardInput {
75,77d54
<     private EPackage myDomainModel;
<     private Canvas myCanvas;
<     private ToolRegistry myRegistry;
81,81c58,58
<     private IFile myResultFile = null;
---
>     private IFile myResultFile;
83,89d59
<     private String initialECoreFile = null;
<     private String initialGraphFile = null;
<     private String initialToolFile = null;
<     private boolean myIsBlankToolDef = false;
< 
<     public WizardInput () {
<     }
114a85,85
>     public abstract EPackage getDomainModel ();
115,118d84
<     public void setDomainModel (EPackage aPackage) {
<         checkUnload (myDomainModel);
<         myDomainModel = aPackage;
<     }
120,124d86
<     public void setGraphDef (Canvas canvas) {
<         checkUnload (myCanvas);
<         myCanvas = canvas;
<     }
< 
125,125c87,87
<     public Canvas getCanvasDef () {
---
>     public abstract Canvas getCanvasDef ();
126,127d87
<         return myCanvas;
<     }
129,157d88
<     public boolean isNewBlankToolDef () {
<         return myIsBlankToolDef;
<     }
< 
<     @SuppressWarnings("unchecked")
<     public URI createBlankToolDef () {
<         checkUnload (myRegistry);
<         myRegistry = null;
<         IPath toolDefFile = getMappingFile ().getFullPath ().removeFileExtension ().addFileExtension (TOOLDEF_FILE_EXT);
<         String baseName = getMappingFile ().getFullPath ().removeFileExtension ().lastSegment ();
<         int i = 1;
<         final IWorkspace wr = getMappingFile ().getProject ().getWorkspace ();
<         while (wr.getRoot ().findMember (toolDefFile) != null) {
<             toolDefFile = toolDefFile.removeLastSegments (1).append (baseName + i).addFileExtension (TOOLDEF_FILE_EXT);
<             i ++;
<         }
<         URI toolDefURI = URI.createPlatformResourceURI (toolDefFile.toString ());
<         myRegistry = GMFToolFactory.eINSTANCE.createToolRegistry ();
<         myRegistry.setPalette (GMFToolFactory.eINSTANCE.createPalette ());
<         getResourceSet ().createResource (toolDefURI).getContents ().add (myRegistry);
<         myIsBlankToolDef = true;
<         return toolDefURI;
<     }
< 
<     public void setToolDef (ToolRegistry registry) {
<         checkUnload (myRegistry);
<         myRegistry = registry;
<         myIsBlankToolDef = false;
<     }
158a91,91
>     public abstract boolean isNewBlankToolDef ();
159,159c89,89
<     public ToolRegistry getToolDef () {
---
>     public abstract ToolRegistry getToolDef ();
160,161d89
<         return myRegistry;
<     }
181,218d112
<     public IStatus isReady2Go () {
<         if (myDomainModel != null && myCanvas != null && myRegistry != null) {
<             return Status.OK_STATUS;
<         }
<         if (myDomainModel == null) {
<             return new Status (Status.WARNING, Plugin.getPluginID (), IMessageProvider.WARNING, Messages.inputNeedDomain, null);
<         }
<         if (myCanvas == null) {
<             return new Status (Status.WARNING, Plugin.getPluginID (), IMessageProvider.WARNING, Messages.inputNeedCanvas, null);
<         } else {
<             return new Status (Status.WARNING, Plugin.getPluginID (), IMessageProvider.WARNING, Messages.inputNeedToolDef, null);
<         }
<     }
< 
<     private void checkUnload (EObject eobj) {
<         if (eobj == null) {
<             return;
<         }
<         if (eobj.eResource ().getResourceSet () == getResourceSet () && eobj.eResource ().isLoaded ()) {
<             eobj.eResource ().unload ();
<         }
<     }
< 
<     public List getCanvasElementCandidates () {
<         UniqueEList rv = new UniqueEList ();
<         for (Iterator it = myDomainModel.getEClassifiers ().iterator ();
<         it.hasNext ();) {
<             Object next = it.next ();
<             if (next instanceof EClass) {
<                 EClass eClass = (EClass) next;
<                 if (! eClass.isAbstract () && ! eClass.isInterface () && ! eClass.getEAllContainments ().isEmpty ()) {
<                     rv.add (eClass);
<                 }
<             }
<         }
<         return rv;
<     }
< 
220,220c114,114
<         assert eClass.getEPackage () == myDomainModel;
---
>         assert eClass.getEPackage () == getDomainModel ();
221,225d114
<         CanvasMapping cm;
<         if (getMapping ().getDiagram () == null) {
<             cm = GMFMapFactory.eINSTANCE.createCanvasMapping ();
<             cm.setDiagramCanvas (myCanvas);
<         } else {
226,226c115,115
<             cm = getMapping ().getDiagram ();
---
>         CanvasMapping cm = getMapping ().getDiagram ();
226a116,116
>         cm.setDiagramCanvas (getCanvasDef ());
227,227d115
<         }
229a107,107
>             CanvasMapping cm = GMFMapFactory.eINSTANCE.createCanvasMapping ();
230,230c108,108
<         getMapping ().setDiagram (cm);
---
>             mapInstance.setDiagram (cm);
254,277d141
<     public String getInitialECoreFile () {
<         return initialECoreFile;
<     }
< 
<     public void setInitialECoreFile (String initialECoreFile) {
<         this.initialECoreFile = initialECoreFile;
<     }
< 
<     public String getInitialGraphFile () {
<         return initialGraphFile;
<     }
< 
<     public void setInitialGraphFile (String initialGraphFile) {
<         this.initialGraphFile = initialGraphFile;
<     }
< 
<     public String getInitialToolFile () {
<         return initialToolFile;
<     }
< 
<     public void setInitialToolFile (String initialToolFile) {
<         this.initialToolFile = initialToolFile;
<     }
< 
