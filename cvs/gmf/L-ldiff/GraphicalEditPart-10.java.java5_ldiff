3,6d2
< import java.beans.PropertyChangeEvent;
< 
< import java.beans.PropertyChangeListener;
< 
36a33,34
> import org.eclipse.emf.common.notify.Notification;
> 
79,79c77,77
< import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;
---
> import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
83,84d80
< import org.eclipse.gmf.runtime.diagram.core.listener.PropertyChangeNotifier;
< 
112a101,101
> import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
113,113d100
< import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
114,114c102,102
< 
---
> 
153,153c149,149
< public abstract class GraphicalEditPart extends AbstractGraphicalEditPart implements IGraphicalEditPart, PropertyChangeListener, IAdaptableSelection {
---
> public abstract class GraphicalEditPart extends AbstractGraphicalEditPart implements IGraphicalEditPart, IAdaptableSelection, NotificationListener {
176,186d171
<     protected void addListenerFilter (String filterId, PropertyChangeListener listener, PropertyChangeNotifier notifier) {
<         if (notifier == null) return;
< 
<         Assert.isNotNull (filterId);
<         Assert.isNotNull (listener);
<         if (listenerFilters == null) listenerFilters = new HashMap ();
< 
<         notifier.addPropertyChangeListener (listener);
<         listenerFilters.put (filterId, new Object [] {notifier, listener});
<     }
< 
187,187c172,172
<     protected void addListenerFilter (String filterId, PropertyChangeListener listener, EObject element) {
---
>     protected void addListenerFilter (String filterId, NotificationListener listener, EObject element) {
194,194c179,179
<         PresentationListener.getInstance ().addPropertyChangeListener (element, listener);
---
>         PresentationListener.getInstance ().addNotificationListener (element, listener);
198,198c183,183
<     protected void addListenerFilter (String filterId, PropertyChangeListener listener, EObject element, EStructuralFeature feature) {
---
>     protected void addListenerFilter (String filterId, NotificationListener listener, EObject element, EStructuralFeature feature) {
205,205c190,190
<         PresentationListener.getInstance ().addPropertyChangeListener (element, listener);
---
>         PresentationListener.getInstance ().addNotificationListener (element, listener);
234,234c219,219
<                     PresentationListener.getInstance ().removePropertyChangeListener ((EObject) obj [0], (EStructuralFeature) obj [1], (PropertyChangeListener) obj [2]);
---
>                     PresentationListener.getInstance ().removeNotificationListener ((EObject) obj [0], (EStructuralFeature) obj [1], (NotificationListener) obj [2]);
236,236d220
<                     if (obj [0] instanceof PropertyChangeNotifier) ((PropertyChangeNotifier) obj [0]).removePropertyChangeListener ((PropertyChangeListener) obj [1]);
237,237c221,221
<                     else PresentationListener.getInstance ().removePropertyChangeListener ((EObject) obj [0], (PropertyChangeListener) obj [1]);
---
>                     PresentationListener.getInstance ().removeNotificationListener ((EObject) obj [0], (NotificationListener) obj [1]);
238,238d221
< 
441a768,772
>     public void notifyChanged (Notification notification) {
>         if (isActive ()) {
>             handleNotificationEvent (notification);
>         }
>     }
442,443d767
<     public final void propertyChange (PropertyChangeEvent event) {
<         if (isActive ()) handlePropertyChangeEvent (event);
444a774,775
>     protected void handleNotificationEvent (Notification event) {
>         if (NotationPackage.eINSTANCE.getView_PersistedChildren ().equals (event.getFeature ()) || NotationPackage.eINSTANCE.getView_TransientChildren ().equals (event.getFeature ())) {
444,444c773,773
< 
---
> 
445,448d773
<     }
< 
<     protected void handlePropertyChangeEvent (PropertyChangeEvent event) {
<         if (Properties.ID_PERSISTED_CHILDREN.equals (event.getPropertyName ()) || Properties.ID_TRANSIENT_CHILDREN.equals (event.getPropertyName ())) {
449a777,777
>         } else if (NotationPackage.eINSTANCE.getView_Visible ().equals (event.getFeature ())) {
449,449c776,776
<             refreshChildren ();
---
>             refreshChildren ();
450,450d776
<         } else if (Properties.ID_ISVISIBLE.equals (event.getPropertyName ())) {
451a779,779
>         } else if (NotationPackage.eINSTANCE.getView_Element ().equals (event.getFeature ())) {
451,451c778,778
<             refreshVisibility ();
---
>             refreshVisibility ();
452,452d778
<         } else if (Properties.ID_SEMANTICREF.equals (event.getPropertyName ())) {
453,453c780,780
<             handleMajorSemanticChange ();
---
>             handleMajorSemanticChange ();
454,455d780
<         } else if (event instanceof NotificationEvent) {
<             handleNotificationEvent ((NotificationEvent) event);
456,456c781,781
<         }
---
>         }
457,457c782,782
< 
---
> 
458,458c783,783
<     }
---
>     }
459,459c784,784
< 
---
> 
460,462d784
<     protected void handleNotificationEvent (NotificationEvent e) {
<     }
< 
561,561c523,523
<             PresentationListener.getInstance ().removePropertyChangeListener ((EObject) objects [0], (EStructuralFeature) objects [1], (PropertyChangeListener) objects [2]);
---
>             PresentationListener.getInstance ().removeNotificationListener ((EObject) objects [0], (EStructuralFeature) objects [1], (NotificationListener) objects [2]);
562,564d523
<         } else {
<             if (objects [0] instanceof PropertyChangeNotifier) {
<                 ((PropertyChangeNotifier) objects [0]).removePropertyChangeListener ((PropertyChangeListener) objects [1]);
566,566c525,525
<                 PresentationListener.getInstance ().removePropertyChangeListener ((EObject) objects [0], (PropertyChangeListener) objects [1]);
---
>             PresentationListener.getInstance ().removeNotificationListener ((EObject) objects [0], (NotificationListener) objects [1]);
567,567d525
<             }
