1,1c1,1
< package org.eclipse.gmf.runtime.lite.parts;
---
> package org.eclipse.gmf.runtime.diagram.ui.parts;
2a3,3
> import java.lang.ref.WeakReference;
3a10,11
> 
> import org.eclipse.emf.ecore.resource.Resource;
3,3c9,9
< import org.eclipse.core.runtime.PlatformObject;
---
> import org.eclipse.core.runtime.Path;
5,5c15,15
< import org.eclipse.emf.common.util.URI;
---
> import org.eclipse.jface.util.Assert;
6a7,7
> import org.eclipse.core.resources.ResourcesPlugin;
7,7d6
< import org.eclipse.emf.ecore.util.EcoreUtil;
8a19,32
> import org.eclipse.gmf.runtime.common.core.util.Trace;
> 
> import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
> 
> import org.eclipse.gmf.runtime.diagram.ui.DiagramUIDebugOptions;
> 
> import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;
> 
> import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;
> 
> import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
> 
> import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
> 
9a34,36
> 
> public class DiagramEditorInput implements IDiagramEditorInput {
>     private WeakReference diagram;
9,9c33,33
< import org.eclipse.gmf.runtime.notation.Diagram;
---
> import org.eclipse.gmf.runtime.notation.Diagram;
13,13c5,5
< import org.eclipse.ui.IEditorInput;
---
> import org.eclipse.core.resources.IFile;
17,18d18
< public class DiagramEditorInput extends PlatformObject implements IEditorInput {
<     private final Diagram myDiagram;
20a39,40
>         Assert.isNotNull (diagram);
>         setDiagram (diagram);
21,22d38
<         assert diagram != null;
<         myDiagram = diagram;
25a44,44
>         return (Diagram) diagram.get ();
26,26c100,100
<         return myDiagram;
---
>         return getQName ();
30,30d47
<         return myDiagram.eResource () != null;
33,37d50
<     @Override
<     public boolean equals (Object obj) {
<         if (obj instanceof DiagramEditorInput) {
<             DiagramEditorInput that = (DiagramEditorInput) obj;
<             return this.getDiagram ().equals (that.getDiagram ());
38a54,62
> 
>     public String getQName () {
>         final String [] name = new String [1];
>         try {
>             MEditingDomainGetter.getMEditingDomain (getDiagram ()).runAsRead (new MRunnable () {
> 
>                 public Object run () {
>                     name [0] = EObjectUtil.getQName (getDiagram (), false);
>                     return null;
39,39c48,48
<         return false;
---
>         return false;
42,44d64
<     @Override
<     public int hashCode () {
<         return getDiagram ().hashCode ();
46a67,72
>             );
>         } catch (Exception e) {
>             Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), e.getMessage (), e);
>             name [0] = null;
>         }
>         return name [0];
47,47c51,51
<     public ImageDescriptor getImageDescriptor () {
---
>     public ImageDescriptor getImageDescriptor () {
48,48c52,52
<         return null;
---
>         return null;
51a76,92
>         final String [] name = new String [1];
>         try {
>             MEditingDomainGetter.getMEditingDomain (getDiagram ()).runAsRead (new MRunnable () {
> 
>                 public Object run () {
>                     name [0] = EObjectUtil.getName (getDiagram ());
>                     return null;
>                 }
> 
>             }
> 
>             );
>         } catch (Exception e) {
>             Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), e.getMessage (), e);
>             name [0] = null;
>         }
>         return name [0];
52,52d75
<         return myDiagram.getName ();
60,60d99
<         return getName ();
63a104,150
>         if (adapter == Diagram.class) return getDiagram ();
> 
>         if (adapter == IFile.class) return getStorageUnitFile ();
> 
>         return null;
>     }
> 
>     public boolean equals (Object obj) {
>         if (this == obj) return true;
> 
>         if (! (obj instanceof DiagramEditorInput)) return false;
> 
>         DiagramEditorInput other = (DiagramEditorInput) obj;
>         if (getDiagram () != null) return getDiagram ().equals (other.getDiagram ());
>         else return getDiagram () == other.getDiagram ();
> 
>     }
> 
>     public int hashCode () {
>         if (getDiagram () != null) return getDiagram ().hashCode ();
>         else return super.hashCode ();
> 
>     }
> 
>     protected void setDiagram (Diagram diagram) {
>         this.diagram = new WeakReference (diagram);
>     }
> 
>     private IFile getStorageUnitFile () {
>         final IFile [] file = new IFile [1];
>         try {
>             final MEditingDomain editingDomain = MEditingDomainGetter.getMEditingDomain (getDiagram ());
>             editingDomain.runAsRead (new MRunnable () {
> 
>                 public Object run () {
>                     Resource model = getDiagram ().eResource ();
>                     String path = editingDomain.getResourceFileName (model);
>                     file [0] = model != null && path != null && path.length () != 0 ? ResourcesPlugin.getWorkspace ().getRoot ().getFileForLocation (new Path (path)) : null;
>                     return null;
>                 }
> 
>             }
> 
>             );
>         } catch (Exception e) {
>             Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), e.getMessage (), e);
>             file [0] = null;
64,65d103
<         if (adapter == URI.class) {
<             return EcoreUtil.getURI (myDiagram);
66a152,152
>         return file [0];
67,67d151
<         return super.getAdapter (adapter);
