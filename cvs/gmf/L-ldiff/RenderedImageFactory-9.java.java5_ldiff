2a13,13
> import java.util.ArrayList;
3,3d12
< import java.awt.Color;
4a15,15
> import java.util.List;
4,4c14,14
< 
---
> 
5,5d14
< import java.io.ByteArrayInputStream;
6,6c16,16
< 
---
> 
6a17,17
> import java.util.ListIterator;
7,7d16
< import java.io.ByteArrayOutputStream;
8,8c18,18
< 
---
> 
11,12d4
< import java.io.IOException;
< 
27,27d24
< import org.apache.batik.dom.svg.SAXSVGDocumentFactory;
29,29d26
< import org.apache.batik.util.XMLResourceDescriptor;
30a29,29
> import org.eclipse.core.runtime.IExtensionPoint;
31,31c25,25
< import org.eclipse.core.runtime.IStatus;
---
> import org.eclipse.core.runtime.CoreException;
32a31,31
> import org.eclipse.core.runtime.Platform;
33,33c27,27
< import org.eclipse.gmf.runtime.common.core.util.Log;
---
> import org.eclipse.core.runtime.IConfigurationElement;
51,56d48
< import org.eclipse.gmf.runtime.draw2d.ui.render.internal.svg.SVGImage;
< 
< import org.eclipse.gmf.runtime.draw2d.ui.render.internal.svg.metafile.EMFTranscoder;
< 
< import org.eclipse.gmf.runtime.draw2d.ui.render.internal.svg.metafile.WMFTranscoder;
< 
62,67d53
<     static public RenderInfo createInfo (int width, int height, Color fill, Color outline, boolean maintainAspectRatio, boolean antialias) {
<         RenderedImageKey svgInfo = new RenderedImageKey ();
<         svgInfo.setValues (width, height, fill, outline, maintainAspectRatio, antialias);
<         return svgInfo;
<     }
< 
141a128,141
>     private static final String E_MODIFIER_FACTORY = "factory";
>     private static final String A_CLASS = "class";
>     static private List imageTypes = null;
> 
>     static private RenderedImage autodetectImage (byte [] buffer, final RenderedImageKey key) {
>         if (imageTypes == null) {
>             imageTypes = new ArrayList ();
>             IExtensionPoint riExtensionPt = Platform.getExtensionRegistry ().getExtensionPoint ("org.eclipse.gmf.runtime.draw2d.ui.render", "renderedImageFactory");
>             IConfigurationElement [] configEls = riExtensionPt.getConfigurationElements ();
>             for (int i = 0;
>             i < configEls.length; i ++) {
>                 IConfigurationElement element = configEls [i];
>                 if (element.getName ().equals (E_MODIFIER_FACTORY)) {
>                     RenderedImageType imageType = null;
142,152d127
<     private static RenderedImage autodetectImage (byte [] buffer, final RenderedImageKey key) {
<         RenderedImage image = null;
<         if (isSVG (buffer)) image = new SVGImage (buffer, key);
<         else {
<             try {
<                 WMFTranscoder imageTransformer = new WMFTranscoder ();
<                 ByteArrayInputStream input = new ByteArrayInputStream (buffer);
<                 ByteArrayOutputStream output = new ByteArrayOutputStream ();
<                 imageTransformer.transcode (input, output);
<                 image = new SVGImage (output.toByteArray (), key);
<             } catch (Exception e2) {
153a143,147
>                         imageType = (RenderedImageType) element.createExecutableExtension (A_CLASS);
>                         if (imageType != null) imageTypes.add (imageType);
> 
>                     } catch (CoreException e) {
>                         continue;
154,161d142
<                     EMFTranscoder imageTransformer = new EMFTranscoder ();
<                     ByteArrayInputStream input = new ByteArrayInputStream (buffer);
<                     ByteArrayOutputStream output = new ByteArrayOutputStream ();
<                     imageTransformer.transcode (input, output);
<                     image = new SVGImage (output.toByteArray (), key);
<                 } catch (Exception e3) {
<                     image = new ImageRenderedImage (buffer, key);
<                 }
164,165d149
<         if (image != null) {
<             instanceMap.put (key, new WeakReference (image));
167,167d150
<         return image;
168a152,157
>         RenderedImage image = null;
>         ListIterator li = imageTypes.listIterator ();
>         while (li.hasNext ()) {
>             RenderedImageType imageType = (RenderedImageType) li.next ();
>             image = imageType.autoDetect (buffer, key);
>             if (image != null) return image;
170,178d158
<     private static boolean isSVG (byte [] buffer) {
<         ByteArrayInputStream bIS = new ByteArrayInputStream (buffer);
<         String parserName = XMLResourceDescriptor.getXMLParserClassName ();
<         SAXSVGDocumentFactory svgFactory = new SAXSVGDocumentFactory (parserName);
<         try {
<             svgFactory.createDocument (null, bIS);
<             return true;
<         } catch (IOException e) {
<             Log.error (Draw2dRenderPlugin.getInstance (), IStatus.ERROR, e.getMessage (), e);
179a160,160
>         return new ImageRenderedImage (buffer, key);
180,180d159
<         return false;
