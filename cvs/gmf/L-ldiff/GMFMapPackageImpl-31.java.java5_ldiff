843,843d842
<         createConstraintAnnotations ();
864a864,870
>         addAnnotation (getAuditRule_Rule (), source, new String [] {"def", "context", "ref", "target"});
>         addAnnotation (domainElementTargetEClass, source, new String [] {"def", "context", "ocl", "element"});
>         addAnnotation (diagramElementTargetEClass, source, new String [] {"def", "context", "ocl", "if element.oclIsKindOf(NodeMapping) then \'notation::Node\' else \'notation::Edge\' endif"});
>         addAnnotation (notationElementTargetEClass, source, new String [] {"def", "context", "ocl", "element"});
>         addAnnotation (getMetricRule_Rule (), source, new String [] {"def", "context", "ref", "target"});
>         addAnnotation (getMetricRule_Rule (), source, new String [] {"def", "type", "ocl", "\'ecore::EDoubleObject\'"});
>         addAnnotation (auditedMetricTargetEClass, source, new String [] {"def", "context", "ocl", "\'ecore::EDoubleObject\'"});
865,870d889
<         addAnnotation (getAuditRule_Rule (), source, new String [] {"def", "context", "ocl", "target"});
<         addAnnotation (getMetricRule_Rule (), source, new String [] {"def", "context", "ocl", "target.getContext()"});
<     }
< 
<     protected void createConstraintAnnotations () {
<         String source = "constraint";
871a891,891
>         addAnnotation (getLabelMapping_Features (), source, new String [] {"ocl", "features->forAll(f | f.eContainingClass.isSuperTypeOf(mapEntry.domainMetaElement))", "description", "Label attributes must be available in \'Domain Element\' EClass of the labeled mapping entry"});
871,871c890,890
<         addAnnotation (getCanvasMapping_DomainMetaElement (), source, new String [] {"ocl", "not domainMetaElement.oclIsUndefined implies not(domainMetaElement.isAbstract or domainMetaElement.isInterface)", "description", "Top-level diagram container must be concrete"});
---
>         addAnnotation (getCanvasMapping_DomainMetaElement (), source, new String [] {"ocl", "not domainMetaElement.oclIsUndefined() implies not(domainMetaElement.abstract or domainMetaElement.interface)", "description", "Top-level diagram container must be concrete"});
875a875,875
>         addAnnotation (this, source, new String [] {"import", "platform:/resource/org.eclipse.gmf.runtime.notation/model/notation.ecore"});
876,876c876,876
<         addAnnotation (mappingEClass, source, new String [] {"ocl", "nodes->forAll(n|n.containmentFeature.oclIsUndefined() and not n.domainMetaElement.oclIsUndefined() implies links->exists(let r:ecore::EReference= linkMetaFeature.oclAsType(ecore::EReference) in r.containment and r.eReferenceType.isSuperTypeOf(n.domainMetaElement)))", "description", "Phantom nodes that are not targeted by a link mapping exist"});
---
>         addAnnotation (mappingEClass, source, new String [] {"ocl", "nodes->forAll(n|n.containmentFeature.oclIsUndefined() and not n.child.domainMetaElement.oclIsUndefined() implies links->exists(let r:ecore::EReference= linkMetaFeature.oclAsType(ecore::EReference) in r.containment and r.eReferenceType.isSuperTypeOf(n.child.domainMetaElement)))", "description", "Phantom nodes that are not targeted by a link mapping exist"});
876a877,877
>         addAnnotation (getMappingEntry_DomainSpecialization (), source, new String [] {"ocl", "not domainSpecialization.oclIsUndefined() implies not domainMetaElement.oclIsUndefined()", "description", "Using \'Domain Specialization\' requires \'Domain Meta Element\' to be set"});
879,879c880,880
<         addAnnotation (nodeMappingEClass, source, new String [] {"ocl", "not (domainMetaElement.oclIsUndefined()  and containmentFeature.oclIsUndefined())", "description", "Either domain meta element or containment feature must be set in node mapping"});
---
>         addAnnotation (nodeReferenceEClass, source, new String [] {"ocl", "not (child.domainMetaElement.oclIsUndefined() and containmentFeature.oclIsUndefined())", "description", "Either \'domainMetaElement\' or \'containmentFeature\' must be specified"});
880,880c881,881
<         addAnnotation (nodeMappingEClass, source, new String [] {"ocl", "not domainMetaElement.oclIsUndefined() implies containmentFeature.oclIsUndefined() or containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement)", "description", "\'Domain Element\' must be the same or extend the type referenced by \'Containment Feature\'"});
---
>         addAnnotation (nodeReferenceEClass, source, new String [] {"ocl", "not containmentFeature.oclIsUndefined() implies containmentFeature.eReferenceType.isSuperTypeOf(child.domainMetaElement)", "description", "\'Containment Feature\' must reference the same class or super type of \'Domain Meta Element\' of the referenced node"});
880a882,885
>         addAnnotation (getNodeReference_ChildrenFeature (), source, new String [] {"ocl", "not childrenFeature.oclIsUndefined() implies childrenFeature.eReferenceType.isSuperTypeOf(child.domainMetaElement)", "description", "\'Children Feature\' must reference the same class or super type of \'Domain Meta Element\' of the referenced node"});
>         addAnnotation (childReferenceEClass, source, new String [] {"ocl", "not (ownedChild.oclIsUndefined() and referencedChild.oclIsUndefined())", "description", "Either \'ownedChild\' or \'referencedChild\' NodeMapping must be set"});
>         addAnnotation (childReferenceEClass, source, new String [] {"ocl", "not childrenFeature.oclIsUndefined() implies childrenFeature.eContainingClass.isSuperTypeOf(parentNode.domainMetaElement)", "description", "\'Children Feature\' must be owned by \'Domain Meta Element\' or its super type of this reference parent Node Mapping"});
>         addAnnotation (childReferenceEClass, source, new String [] {"ocl", "not containmentFeature.oclIsUndefined() implies containmentFeature.eContainingClass.isSuperTypeOf(parentNode.domainMetaElement)", "description", "\'Children Feature\' must be owned by \'Domain Meta Element\' or its super type of this reference parent Node Mapping"});
886a894,897
>         addAnnotation (getAuditContainer_Id (), source, new String [] {"ocl", "not parentContainer.oclIsUndefined() implies parentContainer.childContainers->one(i | i.id = self.id)", "description", "Audit container with the same ID already exists"});
>         addAnnotation (getAuditRule_Id (), source, new String [] {"ocl", "not id.oclIsUndefined() implies container.audits->one(i | i.id = self.id)", "description", "Audit rule with the same ID already exists"});
>         addAnnotation (getNotationElementTarget_Element (), source, new String [] {"ocl", "element.oclIsKindOf(notation::View)", "description", "Notation model element expected"});
>         addAnnotation (getMetricRule_Key (), source, new String [] {"ocl", "not key.oclIsUndefined() implies container.metrics->one(i | i.key = self.key)", "description", "Metric rule with the same \'key\' already exists"});
