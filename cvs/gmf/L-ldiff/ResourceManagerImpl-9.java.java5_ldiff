28,28d28
<         if (hasCachedXtend (fullyQualifiedName)) {
29,29c29,29
<             return cachedXtend.get (fullyQualifiedName);
---
>             return loadXtendThroughCache (fullyQualifiedName);
30,30d29
<         }
31a44,44
>         final XtendResource loaded = doLoadXtendResource (qualifiedName);
32,32d43
<             final XtendResource loaded = doLoadXtendResource (fullyQualifiedName);
33,33c45,45
<             assert loaded != null;
---
>         assert loaded != null;
34,34c46,46
<             if (shouldCache ()) {
---
>         if (shouldCache ()) {
35,35c47,47
<                 cachedXtend.put (fullyQualifiedName, loaded);
---
>             cachedXtend.put (qualifiedName, loaded);
36,37d47
<             }
<             return loaded;
43,43c35,35
<             handleParserException (fullyQualifiedName, ex);
---
>             handleParserException (ex);
47a40,42
>     protected XtendResource loadXtendThroughCache (String qualifiedName) throws IOException, ParserException {
>         if (hasCachedXtend (qualifiedName)) {
>             return cachedXtend.get (qualifiedName);
47a51,51
> 
48,48c52,52
<     private XtendResource doLoadXtendResource (String fullyQualifiedName) throws IOException, ParserException {
---
>     private XtendResource doLoadXtendResource (String fullyQualifiedName) throws IOException, ParserException {
49,49c53,53
<         Reader [] rs = resolveMultiple (fullyQualifiedName, XtendResource.FILE_EXTENSION);
---
>         Reader [] rs = resolveMultiple (fullyQualifiedName, XtendResource.FILE_EXTENSION);
50,50c54,54
<         assert rs != null && rs.length > 0;
---
>         assert rs != null && rs.length > 0;
51,56d54
<         XtendResource [] result = new XtendResource [rs.length];
<         for (int i = 0;
<         i < rs.length; i ++) {
<             Reader r = rs [i];
<             assert r != null;
<             try {
57,57c55,55
<                 result [i] = loadXtendResource (r, fullyQualifiedName);
---
>         XtendResource [] result = loadXtendResources (rs, fullyQualifiedName);
58,62d55
<                 assert result [i] != null;
<             } finally {
<                 try {
<                     r.close ();
<                 } catch (Exception ex) {
64a49,49
>         return loaded;
73,73d63
<         if (hasCachedXpand (fullyQualifiedName)) {
74,74c64,64
<             return cachedXpand.get (fullyQualifiedName);
---
>             return loadXpandThroughCache (fullyQualifiedName);
75,75d64
<         }
76a75,79
>     protected XpandResource loadXpandThroughCache (String qualifiedName) throws IOException, ParserException {
>         if (hasCachedXpand (qualifiedName)) {
>             return cachedXpand.get (qualifiedName);
>         }
>         final XpandResource loaded = doLoadXpandResource (qualifiedName);
77,77d74
<             final XpandResource loaded = doLoadXpandResource (fullyQualifiedName);
78a81,82
>             cachedXpand.put (qualifiedName, loaded);
>         }
78,78c80,80
<             if (shouldCache ()) {
---
>         if (shouldCache ()) {
79,80d80
<                 cachedXpand.put (fullyQualifiedName, loaded);
<             }
81a84,85
>     }
> 
81,81c83,83
<             return loaded;
---
>         return loaded;
87,87c70,70
<             handleParserException (fullyQualifiedName, ex);
---
>             handleParserException (ex);
93,93d86
<         XpandResource [] unadvised = internalLoadXpandResources (fullyQualifiedName);
96a93,94
>             Reader [] rs2 = resolveMultiple (aspectsTemplateName, XpandResource.TEMPLATE_EXTENSION);
>             advices = loadXpandResources (rs2, aspectsTemplateName);
97,97d92
<             advices = internalLoadXpandResources (aspectsTemplateName);
102,102c99,99
<             handleParserException (fullyQualifiedName, ex);
---
>             handleParserException (ex);
124,124d86
<     private XpandResource [] internalLoadXpandResources (String fullyQualifiedName) throws IOException, ParserException {
125,125c87,87
<         Reader [] rs = resolveMultiple (fullyQualifiedName, XpandResource.TEMPLATE_EXTENSION);
---
>         Reader [] rs1 = resolveMultiple (fullyQualifiedName, XpandResource.TEMPLATE_EXTENSION);
126,126c88,88
<         assert rs != null && rs.length > 0;
---
>         assert rs1 != null && rs1.length > 0;
127,127c89,89
<         XpandResource [] result = new XpandResource [rs.length];
---
>         XpandResource [] unadvised = loadXpandResources (rs1, fullyQualifiedName);
129,129c128,128
<         i < rs.length; i ++) {
---
>         i < readers.length; i ++) {
130,130d128
<             Reader r = rs [i];
131,131c129,129
<             assert r != null;
---
>             assert readers [i] != null;
133,133c131,131
<                 result [i] = loadXpandResource (r, fullyQualifiedName);
---
>                 result [i] = new XtendResourceParser ().parse (readers [i], fullyQualifiedName);
136a135,135
>                     readers [i].close ();
137,137d134
<                     r.close ();
144a143,154
>     protected XpandResource [] loadXpandResources (Reader [] readers, String fullyQualifiedName) throws IOException, ParserException {
>         XpandResource [] result = new XpandResource [readers.length];
>         for (int i = 0;
>         i < readers.length; i ++) {
>             assert readers [i] != null;
>             try {
>                 result [i] = new XpandResourceParser ().parse (readers [i], fullyQualifiedName);
>                 assert result [i] != null;
>             } finally {
>                 try {
>                     readers [i].close ();
>                 } catch (Exception ex) {
145,146d142
<     protected void handleParserException (String name, ParserException ex) {
<         Activator.logWarn (name + ":" + ex.getClass ().getName ());
147a121,121
>     protected abstract void handleParserException (ParserException ex);
148,148c122,122
< 
---
> 
148a123,123
>     protected abstract Reader [] resolveMultiple (String fullyQualifiedName, String extension) throws IOException;
149,150d122
<     @Deprecated
<     protected abstract Reader resolve (String fullyQualifiedName, String extension) throws IOException;
151,151c124,124
< 
---
> 
152,152c125,125
<     protected Reader [] resolveMultiple (String fullyQualifiedName, String extension) throws IOException {
---
>     protected XtendResource [] loadXtendResources (Reader [] readers, String fullyQualifiedName) throws IOException, ParserException {
152a126,126
>         XtendResource [] result = new XtendResource [readers.length];
153,153d125
<         return new Reader [] {resolve (fullyQualifiedName, extension)};
155,157d156
< 
<     protected XtendResource loadXtendResource (Reader reader, String fullyQualifiedName) throws IOException, ParserException {
<         return new XtendResourceParser ().parse (reader, fullyQualifiedName);
158a158,158
>         return result;
159,161d157
< 
<     protected XpandResource loadXpandResource (Reader reader, String fullyQualifiedName) throws IOException, ParserException {
<         return new XpandResourceParser ().parse (reader, fullyQualifiedName);
