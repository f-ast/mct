2a3,4
> import java.util.HashSet;
> 
4a7,8
> import java.util.Set;
> 
16a21,42
> import org.eclipse.jface.viewers.IColorProvider;
> 
> import org.eclipse.jface.viewers.ILabelProviderListener;
> 
> import org.eclipse.jface.viewers.ISelectionChangedListener;
> 
> import org.eclipse.jface.viewers.IStructuredContentProvider;
> 
> import org.eclipse.jface.viewers.IStructuredSelection;
> 
> import org.eclipse.jface.viewers.ITableLabelProvider;
> 
> import org.eclipse.jface.viewers.SelectionChangedEvent;
> 
> import org.eclipse.jface.viewers.StructuredSelection;
> 
> import org.eclipse.jface.viewers.TableViewer;
> 
> import org.eclipse.jface.viewers.Viewer;
> 
> import org.eclipse.jface.viewers.ViewerComparator;
> 
18a45,50
> import org.eclipse.swt.custom.ScrolledComposite;
> 
> import org.eclipse.swt.events.ControlAdapter;
> 
> import org.eclipse.swt.events.ControlEvent;
> 
22a55,58
> import org.eclipse.swt.graphics.Color;
> 
> import org.eclipse.swt.graphics.Image;
> 
34a73,73
> import org.eclipse.swt.widgets.TableColumn;
35,35c69,69
< import org.eclipse.swt.widgets.List;
---
> import org.eclipse.swt.widgets.Display;
35a70,70
> 
45a84,84
>     private ScrolledComposite referencedPathVariablesScroll;
46a86,87
>     private StringsContentProvider referencedPathVariablesContent;
>     private ScrolledComposite pathVariablesScroll;
46,46c85,85
<     private List referencedPathVariables;
---
>     private TableViewer referencedPathVariables;
47a89,89
>     private StringsContentProvider pathVariablesContent;
47,47c88,88
<     private List pathVariables;
---
>     private TableViewer pathVariables;
48a91,91
>     private Button remove;
84a128,130
>         pathVariablesScroll = new ScrolledComposite (pathVariablesComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
>         pathVariablesScroll.setExpandHorizontal (true);
>         pathVariablesScroll.setExpandVertical (true);
85,85d127
<         pathVariables = new List (pathVariablesComposite, SWT.MULTI | SWT.BORDER);
89a135,153
>         pathVariablesScroll.setLayoutData (gridData);
>         pathVariables = new TableViewer (pathVariablesScroll, SWT.MULTI);
>         pathVariablesScroll.setContent (pathVariables.getTable ());
>         TableColumn column = new TableColumn (pathVariables.getTable (), SWT.LEFT);
>         column.setMoveable (false);
>         column.setResizable (false);
>         pathVariables.getTable ().addControlListener (new ControlAdapter () {
> 
>             public void controlResized (ControlEvent e) {
>                 pathVariables.getTable ().getColumn (0).setWidth (pathVariables.getTable ().getClientArea ().width);
>             }
> 
>         }
> 
>         );
>         pathVariablesContent = new StringsContentProvider ();
>         pathVariables.setContentProvider (pathVariablesContent);
>         pathVariables.setLabelProvider (new StringsLabelProvider ());
>         pathVariables.setComparator (new StringsViewerComparator ());
90,90d134
<         pathVariables.setLayoutData (gridData);
106,106c169,169
<         Button remove = new Button (buttonComposite, SWT.CENTER);
---
>         remove = new Button (buttonComposite, SWT.CENTER);
140a204,206
>         referencedPathVariablesScroll = new ScrolledComposite (referencedPathVariablesComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
>         referencedPathVariablesScroll.setExpandHorizontal (true);
>         referencedPathVariablesScroll.setExpandVertical (true);
141,141d203
<         referencedPathVariables = new List (referencedPathVariablesComposite, SWT.MULTI | SWT.BORDER);
145a211,217
>         referencedPathVariablesScroll.setLayoutData (gridData);
>         referencedPathVariables = new TableViewer (referencedPathVariablesScroll, SWT.MULTI);
>         referencedPathVariablesScroll.setContent (referencedPathVariables.getTable ());
>         column = new TableColumn (referencedPathVariables.getTable (), SWT.LEFT);
>         column.setMoveable (false);
>         column.setResizable (false);
>         referencedPathVariables.getTable ().addControlListener (new ControlAdapter () {
146,147d210
<         referencedPathVariables.setLayoutData (gridData);
<         pathVariables.addSelectionListener (new SelectionListener () {
148a219,245
>             public void controlResized (ControlEvent e) {
>                 referencedPathVariables.getTable ().getColumn (0).setWidth (referencedPathVariables.getTable ().getClientArea ().width);
>             }
> 
>         }
> 
>         );
>         referencedPathVariablesContent = new StringsContentProvider ();
>         referencedPathVariables.setContentProvider (referencedPathVariablesContent);
>         referencedPathVariables.setLabelProvider (new StringsLabelProvider (true));
>         referencedPathVariables.setComparator (new StringsViewerComparator ());
>         composite.addControlListener (new ControlAdapter () {
> 
>             public void controlResized (ControlEvent e) {
>                 adjustScrollpanes ();
>             }
> 
>         }
> 
>         );
>         pathVariables.addSelectionChangedListener (new ISelectionChangedListener () {
> 
>             public void selectionChanged (SelectionChangedEvent event) {
>                 if (! event.getSelection ().isEmpty ()) {
>                     referencedPathVariables.setSelection (new StructuredSelection ());
>                     remove.setEnabled (true);
>                     if (! validateAdditions ((IStructuredSelection) event.getSelection (), true)) {
149,152d218
<             public void widgetSelected (SelectionEvent e) {
<                 referencedPathVariables.deselectAll ();
<                 if (! validateSelections (pathVariables.getSelection ())) {
<                     setMessage (EMFUIMessages.PathmapsPreferencePage_incompatiblePathVariableErrorMessage, ERROR);
159,160d251
< 
<             public void widgetDefaultSelected (SelectionEvent e) {
166,166c257,257
<         referencedPathVariables.addSelectionListener (new SelectionListener () {
---
>         referencedPathVariables.addSelectionChangedListener (new ISelectionChangedListener () {
167a259,260
>             public void selectionChanged (SelectionChangedEvent event) {
>                 if (! event.getSelection ().isEmpty ()) {
168,169d258
<             public void widgetSelected (SelectionEvent e) {
<                 setMessage (null);
170a262,268
>                     pathVariables.setSelection (new StructuredSelection ());
>                     if (! validateRemovals ((IStructuredSelection) event.getSelection (), true)) {
>                         remove.setEnabled (false);
>                     } else {
>                         setMessage (null);
>                         remove.setEnabled (true);
>                     }
171,171d261
<                 pathVariables.deselectAll ();
173,174d269
< 
<             public void widgetDefaultSelected (SelectionEvent e) {
182a278,284
>                 IStructuredSelection selection = (IStructuredSelection) pathVariables.getSelection ();
>                 for (Iterator iter = selection.iterator ();
>                 iter.hasNext ();) {
>                     String name = (String) iter.next ();
>                     pathVariablesContent.remove (name);
>                     referencedPathVariablesContent.add (name);
>                     adjustScrollpanes ();
183,187d277
<                 String [] selections = pathVariables.getSelection ();
<                 for (int i = 0;
<                 i < selections.length; i ++) {
<                     referencedPathVariables.add (selections [i]);
<                     pathVariables.remove (selections [i]);
202a300,305
>                 Object [] items = pathVariablesContent.getElements (null);
>                 for (int i = items.length - 1;
>                 i >= 0; i --) {
>                     if (validateAdditions (new StructuredSelection (items [i]), false)) {
>                         String name = (String) items [i];
>                         pathVariablesContent.remove (name);
203,206d299
<                 String [] items = pathVariables.getItems ();
<                 for (int i = 0;
<                 i < items.length; i ++) {
<                     if (validateSelections (new String [] {items [i]})) {
207,207c306,306
<                         referencedPathVariables.add (items [i]);
---
>                         referencedPathVariablesContent.add (name);
208,208c307,307
<                         pathVariables.remove (items [i]);
---
>                         adjustScrollpanes ();
218a318,324
>                 IStructuredSelection selection = (IStructuredSelection) referencedPathVariables.getSelection ();
>                 for (Iterator iter = selection.iterator ();
>                 iter.hasNext ();) {
>                     String name = (String) iter.next ();
>                     referencedPathVariablesContent.remove (name);
>                     pathVariablesContent.add (name);
>                     adjustScrollpanes ();
219,223d317
<                 String [] selections = referencedPathVariables.getSelection ();
<                 for (int i = 0;
<                 i < selections.length; i ++) {
<                     pathVariables.add (selections [i]);
<                     referencedPathVariables.remove (selections [i]);
239a341,344
>                 for (int i = items.length - 1;
>                 i >= 0; i --) {
>                     if (validateRemovals (new StructuredSelection (items [i]), false)) {
>                         String name = (String) items [i];
239,239c340,340
<                 String [] items = referencedPathVariables.getItems ();
---
>                 Object [] items = referencedPathVariablesContent.getElements (null);
240,242d340
<                 for (int i = 0;
<                 i < items.length; i ++) {
<                     pathVariables.add (items [i]);
243,243c345,345
<                     referencedPathVariables.remove (items [i]);
---
>                         referencedPathVariablesContent.remove (name);
243a346,348
>                         pathVariablesContent.add (name);
>                         adjustScrollpanes ();
>                     }
254,254c359,359
<                 referencedPathVariables.getShell ().getDisplay ().asyncExec (new Runnable () {
---
>                 referencedPathVariables.getTable ().getDisplay ().asyncExec (new Runnable () {
275a381,386
>     private void adjustScrollpanes () {
>         pathVariablesScroll.setMinSize (pathVariables.getTable ().computeSize (SWT.DEFAULT, SWT.DEFAULT));
>         pathVariablesScroll.layout ();
>         referencedPathVariablesScroll.setMinSize (referencedPathVariables.getTable ().computeSize (SWT.DEFAULT, SWT.DEFAULT));
>         referencedPathVariablesScroll.layout ();
>     }
276,277d380
<     private boolean validateSelections (String [] selections) {
<         if (selections.length == 0) return false;
278a388,419
>     private boolean validateAdditions (IStructuredSelection selection, boolean showError) {
>         if (selection.isEmpty ()) return false;
> 
>         for (Iterator iter = selection.iterator ();
>         iter.hasNext ();) {
>             String name = (String) iter.next ();
>             if (! PathmapManager.isCompatiblePathVariable (name)) {
>                 if (showError) {
>                     setMessage (EMFUIMessages.PathmapsPreferencePage_incompatiblePathVariableErrorMessage, ERROR);
>                 }
>                 return false;
>             }
>             if (PathmapManager.isRegisteredPathVariable (name)) {
>                 if (showError) {
>                     setMessage (EMFUIMessages.PathmapsPreferencePage_registeredPathVariableErrorMessage, ERROR);
>                 }
>                 return false;
>             }
>         }
>         return true;
>     }
> 
>     private boolean validateRemovals (IStructuredSelection selection, boolean showError) {
>         if (selection.isEmpty ()) return false;
> 
>         for (Iterator iter = selection.iterator ();
>         iter.hasNext ();) {
>             String name = (String) iter.next ();
>             if (PathmapManager.isRegisteredPathVariable (name)) {
>                 if (showError) {
>                     setMessage (EMFUIMessages.PathmapsPreferencePage_registeredPathVariableErrorMessage, ERROR);
>                 }
279,282d387
<         for (int i = 0;
<         i < selections.length; i ++) {
<             String selection = selections [i];
<             if (! PathmapManager.isCompatiblePathVariable (selection)) {
291a429,432
>         remove.setEnabled (true);
>         referencedPathVariables.setInput (new HashSet (PathmapManager.getAllPathVariables ()));
>         Set currentVariables = PathmapManager.getPathVariableReferences ();
>         Set available = new HashSet ();
292,293d428
<         referencedPathVariables.removeAll ();
<         pathVariables.removeAll ();
296a436,436
>             if (! currentVariables.contains (pathVariableNames [i])) {
297,297c437,437
<             pathVariables.add (pathVariableNames [i]);
---
>                 available.add (pathVariableNames [i]);
299,303d438
<         for (Iterator i = PathmapManager.getPathVariableReferences ().iterator ();
<         i.hasNext ();) {
<             String pathVariable = (String) i.next ();
<             referencedPathVariables.add (pathVariable);
<             pathVariables.remove (pathVariable);
304a440,440
>         pathVariables.setInput (available);
315a452,452
>         Object [] nonReferencedPathVariables = pathVariablesContent.getElements (null);
316,316d451
<         String [] nonReferencedPathVariables = pathVariables.getItems ();
318a455,455
>             String variableName = (String) nonReferencedPathVariables [i];
319,319c456,456
<             PathmapManager.removePathVariableReference (nonReferencedPathVariables [i]);
---
>             PathmapManager.removePathVariableReference (variableName);
320a458,459
>         Set currentVariables = PathmapManager.getAllPathVariables ();
>         Object [] variablesToReference = referencedPathVariablesContent.getElements (null);
321,321d457
<         String [] variablesToReference = referencedPathVariables.getItems ();
323a462,463
>             String variableName = (String) variablesToReference [i];
>             if (! currentVariables.contains (variableName)) {
324,324c464,464
<             PathmapManager.addPathVariableReference (variablesToReference [i]);
---
>                 PathmapManager.addPathVariableReference (variableName);
324a465,465
>             }
338a480,572
>     private static class StringsContentProvider implements IStructuredContentProvider {
>         private Set strings;
>         private TableViewer table;
> 
>         StringsContentProvider () {
>             strings = new HashSet ();
>         }
> 
>         void add (String string) {
>             if (! strings.contains (string)) {
>                 strings.add (string);
>                 table.add (string);
>             }
>         }
> 
>         void remove (String string) {
>             if (strings.contains (string)) {
>                 strings.remove (string);
>                 table.remove (string);
>             }
>         }
> 
>         public Object [] getElements (Object inputElement) {
>             return strings.toArray ();
>         }
> 
>         public void inputChanged (Viewer viewer, Object oldInput, Object newInput) {
>             strings = (Set) newInput;
>             table = (TableViewer) viewer;
>         }
> 
>         public void dispose () {
>         }
> 
>     }
> 
>     private static class StringsLabelProvider implements ITableLabelProvider, IColorProvider {
>         private final boolean isReferencedPathVariables;
> 
>         StringsLabelProvider () {
>             this (false);
>         }
> 
>         StringsLabelProvider (boolean isReferencedPathVariables) {
>             this.isReferencedPathVariables = isReferencedPathVariables;
>         }
> 
>         public Image getColumnImage (Object element, int columnIndex) {
>             return null;
>         }
> 
>         public String getColumnText (Object element, int columnIndex) {
>             return (columnIndex == 0) ? (String) element : null;
>         }
> 
>         public void dispose () {
>         }
> 
>         public boolean isLabelProperty (Object element, String property) {
>             return false;
>         }
> 
>         public void addListener (ILabelProviderListener listener) {
>         }
> 
>         public void removeListener (ILabelProviderListener listener) {
>         }
> 
>         public Color getBackground (Object element) {
>             if (isReferencedPathVariables && PathmapManager.isRegisteredPathVariable ((String) element)) {
>                 return Display.getDefault ().getSystemColor (SWT.COLOR_TITLE_INACTIVE_BACKGROUND);
>             }
>             return null;
>         }
> 
>         public Color getForeground (Object element) {
>             return null;
>         }
> 
>     }
> 
>     private static class StringsViewerComparator extends ViewerComparator {
> 
>         StringsViewerComparator () {
>             super ();
>         }
> 
>         public int category (Object element) {
>             return PathmapManager.isRegisteredPathVariable ((String) element) ? 1 : 0;
>         }
> 
>     }
> 
