3,4d2
< import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
< 
11,12d8
< import org.eclipse.emf.ecore.EStructuralFeature;
< 
19,20d14
< import org.eclipse.gmf.codegen.gmfgen.FeatureModelFacet;
< 
29,30d22
< import org.eclipse.gmf.codegen.gmfgen.Viewmap;
< 
44,44c36,36
<         return (GenNode) eContainer;
---
>         return (GenNode) eContainer ();
48,48c40,40
<         if (newNode != eContainer || (eContainerFeatureID != GMFGenPackage.GEN_NODE_LABEL__NODE && newNode != null)) {
---
>         if (newNode != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_NODE_LABEL__NODE && newNode != null)) {
52,52d43
<             if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);
63,63c55,55
<     public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
---
>     public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
64,64c56,56
<         if (featureID >= 0) {
---
>         switch (featureID) {
65,65d56
<             switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
67,67c44,44
<                     if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);
---
>             if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);
70,70d61
<                 default :
71,71c62,62
<                     return eDynamicInverseAdd (otherEnd, featureID, baseClass, msgs);
---
>         return super.eInverseAdd (otherEnd, featureID, msgs);
74,74c58,58
<         if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);
---
>                 if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);
76,78d64
<         return eBasicSetContainer (otherEnd, featureID, msgs);
<     }
< 
79,79c65,65
<     public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
---
>     public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
80,80c66,66
<         if (featureID >= 0) {
---
>         switch (featureID) {
81,85d66
<             switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
<                 case GMFGenPackage.GEN_NODE_LABEL__VIEWMAP :
<                     return basicSetViewmap (null, msgs);
<                 case GMFGenPackage.GEN_NODE_LABEL__MODEL_FACET :
<                     return basicSetModelFacet (null, msgs);
88,88d69
<                 default :
89,89c70,70
<                     return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
---
>         return super.eInverseRemove (otherEnd, featureID, msgs);
90,90d70
<             }
92,92d69
<         return eBasicSetContainer (null, featureID, msgs);
95,95c73,73
<     public NotificationChain eBasicRemoveFromContainer (NotificationChain msgs) {
---
>     public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
96,96d73
<         if (eContainerFeatureID >= 0) {
98a76,76
>                 return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_NODE__LABELS, GenNode.class, msgs);
99,102d75
<                     return eContainer.eInverseRemove (this, GMFGenPackage.GEN_NODE__LABELS, GenNode.class, msgs);
<                 default :
<                     return eDynamicBasicRemoveFromContainer (msgs);
<             }
103,103c77,77
<         }
---
>         }
103a78,78
>         return super.eBasicRemoveFromContainerFeature (msgs);
104,104d77
<         return eContainer.eInverseRemove (this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
105,105c79,79
<     }
---
>     }
106,106c80,80
< 
---
> 
107,107c81,81
<     public Object eGet (EStructuralFeature eFeature, boolean resolve) {
---
>     public Object eGet (int featureID, boolean resolve, boolean coreType) {
108,108c82,82
<         switch (eDerivedStructuralFeatureID (eFeature)) {
---
>         switch (featureID) {
109,126d82
<             case GMFGenPackage.GEN_NODE_LABEL__DIAGRAM_RUN_TIME_CLASS :
<                 if (resolve) return getDiagramRunTimeClass ();
< 
<                 return basicGetDiagramRunTimeClass ();
<             case GMFGenPackage.GEN_NODE_LABEL__VISUAL_ID :
<                 return new Integer (getVisualID ());
<             case GMFGenPackage.GEN_NODE_LABEL__EDIT_PART_CLASS_NAME :
<                 return getEditPartClassName ();
<             case GMFGenPackage.GEN_NODE_LABEL__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
<                 return getItemSemanticEditPolicyClassName ();
<             case GMFGenPackage.GEN_NODE_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME :
<                 return getNotationViewFactoryClassName ();
<             case GMFGenPackage.GEN_NODE_LABEL__VIEWMAP :
<                 return getViewmap ();
<             case GMFGenPackage.GEN_NODE_LABEL__READ_ONLY :
<                 return isReadOnly () ? Boolean.TRUE : Boolean.FALSE;
<             case GMFGenPackage.GEN_NODE_LABEL__MODEL_FACET :
<                 return getModelFacet ();
129a86,86
>         return super.eGet (featureID, resolve, coreType);
130,130d85
<         return eDynamicGet (eFeature, resolve);
132a89,90
>     public void eSet (int featureID, Object newValue) {
>         switch (featureID) {
133,158d88
<     public void eSet (EStructuralFeature eFeature, Object newValue) {
<         switch (eDerivedStructuralFeatureID (eFeature)) {
<             case GMFGenPackage.GEN_NODE_LABEL__DIAGRAM_RUN_TIME_CLASS :
<                 setDiagramRunTimeClass ((GenClass) newValue);
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__VISUAL_ID :
<                 setVisualID (((Integer) newValue).intValue ());
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__EDIT_PART_CLASS_NAME :
<                 setEditPartClassName ((String) newValue);
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
<                 setItemSemanticEditPolicyClassName ((String) newValue);
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME :
<                 setNotationViewFactoryClassName ((String) newValue);
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__VIEWMAP :
<                 setViewmap ((Viewmap) newValue);
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__READ_ONLY :
<                 setReadOnly (((Boolean) newValue).booleanValue ());
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__MODEL_FACET :
<                 setModelFacet ((FeatureModelFacet) newValue);
<                 return;
162a95,95
>         super.eSet (featureID, newValue);
163,163d94
<         eDynamicSet (eFeature, newValue);
165a98,99
>     public void eUnset (int featureID) {
>         switch (featureID) {
166,191d97
<     public void eUnset (EStructuralFeature eFeature) {
<         switch (eDerivedStructuralFeatureID (eFeature)) {
<             case GMFGenPackage.GEN_NODE_LABEL__DIAGRAM_RUN_TIME_CLASS :
<                 setDiagramRunTimeClass ((GenClass) null);
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__VISUAL_ID :
<                 setVisualID (VISUAL_ID_EDEFAULT);
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__EDIT_PART_CLASS_NAME :
<                 setEditPartClassName (EDIT_PART_CLASS_NAME_EDEFAULT);
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
<                 setItemSemanticEditPolicyClassName (ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME :
<                 setNotationViewFactoryClassName (NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__VIEWMAP :
<                 setViewmap ((Viewmap) null);
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__READ_ONLY :
<                 setReadOnly (READ_ONLY_EDEFAULT);
<                 return;
<             case GMFGenPackage.GEN_NODE_LABEL__MODEL_FACET :
<                 setModelFacet ((FeatureModelFacet) null);
<                 return;
195a104,104
>         super.eUnset (featureID);
196,196d103
<         eDynamicUnset (eFeature);
198a107,108
>     public boolean eIsSet (int featureID) {
>         switch (featureID) {
199,216d106
<     public boolean eIsSet (EStructuralFeature eFeature) {
<         switch (eDerivedStructuralFeatureID (eFeature)) {
<             case GMFGenPackage.GEN_NODE_LABEL__DIAGRAM_RUN_TIME_CLASS :
<                 return diagramRunTimeClass != null;
<             case GMFGenPackage.GEN_NODE_LABEL__VISUAL_ID :
<                 return visualID != VISUAL_ID_EDEFAULT;
<             case GMFGenPackage.GEN_NODE_LABEL__EDIT_PART_CLASS_NAME :
<                 return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : ! EDIT_PART_CLASS_NAME_EDEFAULT.equals (editPartClassName);
<             case GMFGenPackage.GEN_NODE_LABEL__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
<                 return ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? itemSemanticEditPolicyClassName != null : ! ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals (itemSemanticEditPolicyClassName);
<             case GMFGenPackage.GEN_NODE_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME :
<                 return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : ! NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals (notationViewFactoryClassName);
<             case GMFGenPackage.GEN_NODE_LABEL__VIEWMAP :
<                 return viewmap != null;
<             case GMFGenPackage.GEN_NODE_LABEL__READ_ONLY :
<                 return readOnly != READ_ONLY_EDEFAULT;
<             case GMFGenPackage.GEN_NODE_LABEL__MODEL_FACET :
<                 return modelFacet != null;
219a112,112
>         return super.eIsSet (featureID);
220,220d111
<         return eDynamicIsSet (eFeature);
