1,1d0
< package org.eclipse.gmf.graphdef.editor.edit.parts;
2a29,30
> import org.eclipse.draw2d.Connection;
> 
2a3,23
> import java.beans.PropertyChangeEvent;
> 
> import java.beans.PropertyChangeListener;
> 
> import java.util.ArrayList;
> 
> import java.util.Dictionary;
> 
> import java.util.HashMap;
> 
> import java.util.Hashtable;
> 
> import java.util.Iterator;
> 
> import java.util.List;
> 
> import java.util.ListIterator;
> 
> import java.util.Map;
> 
> import org.eclipse.core.runtime.IAdaptable;
3a32,35
> 
> import org.eclipse.draw2d.RelativeBendpoint;
> 
> import org.eclipse.draw2d.geometry.Dimension;
3,3c31,31
< import org.eclipse.draw2d.IFigure;
---
> import org.eclipse.draw2d.IFigure;
4a25,25
> import org.eclipse.core.runtime.IAdapterFactory;
5,5c59,59
< import org.eclipse.draw2d.RectangleFigure;
---
> import org.eclipse.gef.Request;
6a27,27
> import org.eclipse.core.runtime.Platform;
7,7c61,61
< import org.eclipse.draw2d.StackLayout;
---
> import org.eclipse.gef.RequestConstants;
9,9c63,63
< import org.eclipse.draw2d.ToolbarLayout;
---
> import org.eclipse.gef.SnapToGeometry;
12a39,40
> import org.eclipse.emf.ecore.ENamedElement;
> 
13a42,51
> 
> import org.eclipse.emf.ecore.EStructuralFeature;
> 
> import org.eclipse.gef.AccessibleEditPart;
> 
> import org.eclipse.gef.CompoundSnapToHelper;
> 
> import org.eclipse.gef.DragTracker;
> 
> import org.eclipse.gef.EditDomain;
13,13c41,41
< import org.eclipse.emf.ecore.EcorePackage;
---
> import org.eclipse.emf.ecore.EObject;
19,19c57,57
< import org.eclipse.gef.editpolicies.LayoutEditPolicy;
---
> import org.eclipse.gef.LayerConstants;
21,21d58
< import org.eclipse.gmf.graphdef.editor.edit.policies.ConnectionItemSemanticEditPolicy;
23,23d60
< import org.eclipse.gmf.graphdef.editor.edit.policies.GMFGraphTextSelectionEditPolicy;
25,25d62
< import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
27,27c1,1
< import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
---
> package org.eclipse.gmf.runtime.diagram.ui.editparts;
28a71,96
> import org.eclipse.gef.commands.Command;
> 
> import org.eclipse.gef.commands.UnexecutableCommand;
> 
> import org.eclipse.gef.editparts.AbstractConnectionEditPart;
> 
> import org.eclipse.gef.editpolicies.SnapFeedbackPolicy;
> 
> import org.eclipse.gef.rulers.RulerProvider;
> 
> import org.eclipse.gmf.runtime.common.ui.services.action.filter.ActionFilterService;
> 
> import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
> 
> import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;
> 
> import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
> 
> import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
> 
> import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
> 
> import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConnectionBendpointEditPolicy;
> 
> import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConnectionLabelsEditPolicy;
> 
29,29c97,97
< import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;
---
> import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DecorationEditPolicy;
30a69,69
> import org.eclipse.gef.SnapToHelper;
31,31c117,117
< import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
---
> import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramFontRegistry;
33a102,115
> 
> import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.DefaultEditableEditPart;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.IContainedEditPart;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.IEditableEditPart;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.ConnectionEditPolicy;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.ConnectionLineSegEditPolicy;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.TreeConnectionBendpointEditPolicy;
33,33c101,101
< import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy;
---
> import org.eclipse.gmf.runtime.diagram.ui.editpolicies.PropertyHandlerEditPolicy;
36a121,132
> import org.eclipse.gmf.runtime.diagram.ui.internal.services.editpolicy.EditPolicyService;
> 
> import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;
> 
> import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
> 
> import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditDomain;
> 
> import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;
> 
> import org.eclipse.gmf.runtime.diagram.ui.services.editpart.EditPartService;
> 
37a134,179
> 
> import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.ConnectionLayerEx;
> 
> import org.eclipse.gmf.runtime.draw2d.ui.internal.routers.ForestRouter;
> 
> import org.eclipse.gmf.runtime.draw2d.ui.internal.routers.OrthogonalRouter;
> 
> import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
> 
> import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;
> 
> import org.eclipse.gmf.runtime.emf.core.EventTypes;
> 
> import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
> 
> import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;
> 
> import org.eclipse.gmf.runtime.emf.core.util.ProxyUtil;
> 
> import org.eclipse.gmf.runtime.gef.ui.internal.editpolicies.GraphicalEditPolicyEx;
> 
> import org.eclipse.gmf.runtime.gef.ui.internal.l10n.Cursors;
> 
> import org.eclipse.gmf.runtime.gef.ui.internal.tools.SelectConnectionEditPartTracker;
> 
> import org.eclipse.gmf.runtime.notation.Diagram;
> 
> import org.eclipse.gmf.runtime.notation.Edge;
> 
> import org.eclipse.gmf.runtime.notation.FontStyle;
> 
> import org.eclipse.gmf.runtime.notation.JumpLinkStatus;
> 
> import org.eclipse.gmf.runtime.notation.JumpLinkType;
> 
> import org.eclipse.gmf.runtime.notation.LineStyle;
> 
> import org.eclipse.gmf.runtime.notation.NotationPackage;
> 
> import org.eclipse.gmf.runtime.notation.RelativeBendpoints;
> 
> import org.eclipse.gmf.runtime.notation.Routing;
> 
> import org.eclipse.gmf.runtime.notation.RoutingStyle;
> 
> import org.eclipse.gmf.runtime.notation.Smoothness;
37,37c133,133
< import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
---
> import org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx;
39,39c119,119
< import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
---
> import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
41,41c65,65
< import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
---
> import org.eclipse.gef.SnapToGrid;
43,43c67,67
< import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
---
> import org.eclipse.gef.SnapToGuides;
46a183,183
> import org.eclipse.jface.util.Assert;
47,50d182
< public class ConnectionEditPart extends ShapeNodeEditPart {
<     public static final int VISUAL_ID = 2007;
<     protected IFigure contentPane;
<     protected IFigure primaryShape;
51a185,256
> import org.eclipse.swt.SWT;
> 
> import org.eclipse.swt.accessibility.AccessibleEvent;
> 
> import org.eclipse.swt.graphics.Color;
> 
> import org.eclipse.swt.graphics.FontData;
> 
> import org.eclipse.swt.widgets.Display;
> 
> import org.eclipse.ui.IActionFilter;
> 
> abstract public class ConnectionEditPart extends AbstractConnectionEditPart implements IGraphicalEditPart, PropertyChangeListener, IContainedEditPart, IPrimaryEditPart, NotificationListener {
>     private Map listenerFilters;
>     private String elementGuid;
>     protected AccessibleEditPart accessibleEP;
> 
>     protected Command getPropertyChangeCommand (Object property, Object oldValue, Object newValue) {
>         return null;
>     }
> 
>     private final IEditableEditPart editableEditPart;
> 
>     static {
>         registerAdapters ();
>     }
> 
>     public void activate () {
>         addNotationalListeners ();
>         EObject semanticProxy = ((View) getModel ()).getElement ();
>         EObject semanticElement = ProxyUtil.resolve (MEditingDomainGetter.getMEditingDomain ((View) getModel ()), semanticProxy);
>         if (semanticElement != null) addSemanticListeners ();
>         else if (semanticProxy != null) {
>             addListenerFilter ("SemanticProxy", this, semanticProxy);
>         }
> 
>         super.activate ();
>     }
> 
>     protected void addListenerFilter (String filterId, NotificationListener listener, EObject element) {
>         if (element == null) return;
> 
>         Assert.isNotNull (filterId);
>         Assert.isNotNull (listener);
>         if (listenerFilters == null) listenerFilters = new HashMap ();
> 
>         DiagramEventBroker.getInstance ().addNotificationListener (element, listener);
>         listenerFilters.put (filterId, new Object [] {element, listener});
>     }
> 
>     protected void addListenerFilter (String filterId, NotificationListener listener, EObject element, EStructuralFeature feature) {
>         if (element == null) return;
> 
>         Assert.isNotNull (filterId);
>         Assert.isNotNull (listener);
>         if (listenerFilters == null) listenerFilters = new HashMap ();
> 
>         DiagramEventBroker.getInstance ().addNotificationListener (element, feature, listener);
>         listenerFilters.put (filterId, new Object [] {element, feature, listener});
>     }
> 
>     final protected EditPart createChild (Object model) {
>         return EditPartService.getInstance ().createGraphicEditPart ((View) model);
>     }
> 
>     final protected org.eclipse.gef.ConnectionEditPart createConnection (Object connectionView) {
>         return (org.eclipse.gef.ConnectionEditPart) createChild (connectionView);
>     }
> 
>     final protected void createEditPolicies () {
>         createDefaultEditPolicies ();
>         EditPolicyService.getInstance ().createEditPolicies (this);
52,53d184
<     public ConnectionEditPart (View view) {
<         super (view);
56a260,310
>         installEditPolicy (EditPolicyRoles.SEMANTIC_ROLE, new SemanticEditPolicy ());
>         installEditPolicy (EditPolicyRoles.PROPERTY_HANDLER_ROLE, new PropertyHandlerEditPolicy ());
>         installEditPolicy (EditPolicy.CONNECTION_ENDPOINTS_ROLE, new org.eclipse.gef.editpolicies.ConnectionEndpointEditPolicy ());
>         installEditPolicy (EditPolicy.CONNECTION_ROLE, new ConnectionEditPolicy ());
>         installBendpointEditPolicy ();
>         installEditPolicy (EditPolicyRoles.DECORATION_ROLE, new DecorationEditPolicy ());
>         installEditPolicy (EditPolicyRoles.CONNECTION_LABELS_ROLE, new ConnectionLabelsEditPolicy ());
>         installEditPolicy (EditPolicyRoles.SNAP_FEEDBACK_ROLE, new SnapFeedbackPolicy ());
>     }
> 
>     public void deactivate () {
>         boolean wasActive = isActive ();
>         super.deactivate ();
>         if (listenerFilters != null && wasActive != isActive ()) {
>             for (Iterator i = listenerFilters.keySet ().iterator ();
>             i.hasNext ();) {
>                 Object [] obj = (Object []) listenerFilters.get (i.next ());
>                 if (obj.length > 2) {
>                     DiagramEventBroker.getInstance ().removeNotificationListener ((EObject) obj [0], (EStructuralFeature) obj [1], (NotificationListener) obj [2]);
>                 } else {
>                     DiagramEventBroker.getInstance ().removeNotificationListener ((EObject) obj [0], (NotificationListener) obj [1]);
>                 }
>             }
>         }
>     }
> 
>     protected void executeCommand (Command command) {
>         getEditDomain ().getCommandStack ().execute (command);
>     }
> 
>     static private void registerAdapters () {
>         Platform.getAdapterManager ().registerAdapters (new IAdapterFactory () {
> 
>             public Object getAdapter (Object adaptableObject, Class adapterType) {
>                 IGraphicalEditPart gep = (IGraphicalEditPart) adaptableObject;
>                 if (adapterType == IActionFilter.class) {
>                     return ActionFilterService.getInstance ();
>                 } else if (adapterType == View.class) {
>                     return gep.getModel ();
>                 }
> 
>                 return null;
>             }
> 
>             public Class [] getAdapterList () {
>                 return new Class [] {IActionFilter.class, View.class};
>             }
> 
>         }
> 
>         , IGraphicalEditPart.class);
57,59d259
<         super.createDefaultEditPolicies ();
<         installEditPolicy (EditPolicyRoles.SEMANTIC_ROLE, new ConnectionItemSemanticEditPolicy ());
<         installEditPolicy (EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy ());
61a313,315
>     protected AccessibleEditPart getAccessibleEditPart () {
>         if (accessibleEP == null) {
>             accessibleEP = new AccessibleGraphicalEditPart () {
62,63d312
<     protected LayoutEditPolicy createLayoutEditPolicy () {
<         ConstrainedToolbarLayoutEditPolicy lep = new ConstrainedToolbarLayoutEditPolicy () {
64a317,323
>                 private String getSemanticName () {
>                     EObject semanticElement = resolveSemanticElement ();
>                     if (semanticElement != null) {
>                         String name = semanticElement.getClass ().getName ();
>                         int startIndex = name.lastIndexOf ('.') + 1;
>                         int endIndex = name.lastIndexOf ("Impl");
>                         return name.substring (startIndex, endIndex);
65,68d316
<             protected EditPolicy createChildEditPolicy (EditPart child) {
<                 if (child.getEditPolicy (EditPolicy.PRIMARY_DRAG_ROLE) == null) {
<                     if (child instanceof ITextAwareEditPart) {
<                         return new GMFGraphTextSelectionEditPolicy ();
69a325,325
>                     return DiagramUIMessages.Accessible_Connection_Label;
70a327,351
> 
>                 public void getName (AccessibleEvent e) {
>                     StringBuffer msg = new StringBuffer ();
>                     EditPart sourceEP = getSource ();
>                     EditPart targetEP = getTarget ();
>                     msg.append (getSemanticName ());
>                     if (sourceEP != null) {
>                         AccessibleEditPart aEP = (AccessibleEditPart) sourceEP.getAdapter (AccessibleEditPart.class);
>                         AccessibleEvent event = new AccessibleEvent (this);
>                         aEP.getName (event);
>                         msg.append (" ");
>                         msg.append (DiagramUIMessages.Accessible_Connection_From);
>                         msg.append (" ");
>                         msg.append (event.result);
>                     }
>                     if (targetEP != null) {
>                         AccessibleEditPart aEP = (AccessibleEditPart) targetEP.getAdapter (AccessibleEditPart.class);
>                         AccessibleEvent event = new AccessibleEvent (this);
>                         aEP.getName (event);
>                         msg.append (" ");
>                         msg.append (DiagramUIMessages.Accessible_Connection_To);
>                         msg.append (" ");
>                         msg.append (event.result);
>                     }
>                     e.result = msg.toString ();
71,71d326
<                 return super.createChildEditPolicy (child);
77,77c406,406
<         return lep;
---
>         return null;
78a358,380
>         return accessibleEP;
>     }
> 
>     public Object getAdapter (Class key) {
>         Object adapter = Platform.getAdapterManager ().getAdapter (this, key);
>         if (adapter != null) {
>             return adapter;
>         }
>         if (adapter == SnapToHelper.class) {
>             List snapStrategies = new ArrayList ();
>             Boolean val = (Boolean) getViewer ().getProperty (RulerProvider.PROPERTY_RULER_VISIBILITY);
>             if (val != null && val.booleanValue ()) snapStrategies.add (new SnapToGuides (this));
> 
>             val = (Boolean) getViewer ().getProperty (SnapToGeometry.PROPERTY_SNAP_ENABLED);
>             if (val != null && val.booleanValue ()) snapStrategies.add (new SnapToGrid (this));
> 
>             if (snapStrategies.size () == 0) return null;
> 
>             if (snapStrategies.size () == 1) return snapStrategies.get (0);
> 
>             SnapToHelper ss [] = new SnapToHelper [snapStrategies.size ()];
>             for (int i = 0;
>             i < snapStrategies.size (); i ++) ss [i] = (SnapToHelper) snapStrategies.get (i);
79a382,393
>             return new CompoundSnapToHelper (ss);
>         }
>         Object model = getModel ();
>         if (View.class.isAssignableFrom (key) && key.isInstance (model)) {
>             return getModel ();
>         }
>         if (model != null && model instanceof View) {
>             EObject semanticObject = ViewUtil.resolveSemanticElement ((View) model);
>             if (key.isInstance (semanticObject)) {
>                 return semanticObject;
>             } else if (key.isInstance (model)) {
>                 return model;
80,82d381
<     protected IFigure createNodeShape () {
<         DiagramElementFigure figure = new DiagramElementFigure ();
<         return primaryShape = figure;
85,86d395
<     public DiagramElementFigure getPrimaryShape () {
<         return (DiagramElementFigure) primaryShape;
88a400,404
>     public IGraphicalEditPart getChildBySemanticHint (String semanticHint) {
>         if (getModel () != null) {
>             View view = ViewUtil.getChildBySemanticHint ((View) getModel (), semanticHint);
>             if (view != null) return (IGraphicalEditPart) getViewer ().getEditPartRegistry ().get (view);
> 
89,92d399
<     protected boolean addFixedChild (EditPart childEditPart) {
<         if (childEditPart instanceof ConnectionNameEditPart) {
<             ((ConnectionNameEditPart) childEditPart).setLabel (getPrimaryShape ().getFigureDiagramElementFigure_NameLabel ());
<             return true;
94,94d405
<         return false;
96a409,411
>     public Command getCommand (Request _request) {
>         if (! isEditModeEnabled ()) {
>             return UnexecutableCommand.INSTANCE;
97,98d408
<     protected boolean removeFixedChild (EditPart childEditPart) {
<         return false;
99a413,414
>         final Request request = _request;
>         Command cmd = (Command) MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {
100a416,466
>             public Object run () {
>                 return ConnectionEditPart.super.getCommand (request);
>             }
> 
>         }
> 
>         );
>         return cmd;
>     }
> 
>     protected Diagram getDiagramView () {
>         return (Diagram) getRoot ().getContents ().getModel ();
>     }
> 
>     public View getPrimaryView () {
>         for (EditPart parent = this;
>         parent != null; parent = parent.getParent ()) if (parent instanceof IPrimaryEditPart) return (View) parent.getModel ();
> 
>         return null;
>     }
> 
>     protected EditDomain getEditDomain () {
>         return getRoot ().getViewer ().getEditDomain ();
>     }
> 
>     public IDiagramEditDomain getDiagramEditDomain () {
>         return (IDiagramEditDomain) getEditDomain ();
>     }
> 
>     protected List getModelChildren () {
>         return ((View) getModel ()).getChildren ();
>     }
> 
>     public Object getPropertyValue (Object id) {
>         return ViewUtil.getPropertyValue ((View) getModel (), id);
>     }
> 
>     public Object getStructuralFeatureValue (EStructuralFeature feature) {
>         return ViewUtil.getStructuralFeatureValue ((View) getModel (), feature);
>     }
> 
>     public EObject resolveSemanticElement () {
>         return (EObject) MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {
> 
>             public Object run () {
>                 return ViewUtil.resolveSemanticElement ((View) getModel ());
>             }
> 
>         }
> 
>         );
101,103d415
<     protected void addChildVisual (EditPart childEditPart, int index) {
<         if (addFixedChild (childEditPart)) {
<             return;
104a468,474
> 
>     public TopGraphicEditPart getTopGraphicEditPart () {
>         EditPart editPart = this;
>         while (editPart instanceof IGraphicalEditPart) {
>             if (editPart instanceof TopGraphicEditPart) return (TopGraphicEditPart) editPart;
> 
>             editPart = editPart.getParent ();
105,105d467
<         super.addChildVisual (childEditPart, - 1);
106a476,481
>         return null;
>     }
> 
>     public View getNotationView () {
>         Object model = getModel ();
>         if (model instanceof View) return (View) model;
107a483,546
>         return null;
>     }
> 
>     public final void propertyChange (PropertyChangeEvent event) {
>         if (isActive ()) handlePropertyChangeEvent (event);
> 
>     }
> 
>     protected void handlePropertyChangeEvent (PropertyChangeEvent event) {
>         if (event.getPropertyName ().equals (Connection.PROPERTY_CONNECTION_ROUTER)) {
>             installRouter ();
>         }
>     }
> 
>     public void reactivateSemanticModel () {
>         removeSemanticListeners ();
>         if (resolveSemanticElement () != null) addSemanticListeners ();
> 
>         refresh ();
>     }
> 
>     public EditPart findEditPart (EditPart epBegin, EObject theElement) {
>         if (theElement == null) {
>             return null;
>         }
>         EditPart epStart = null;
>         if (epBegin == null) {
>             epStart = this;
>         } else {
>             epStart = epBegin;
>         }
>         final View view = (View) ((IAdaptable) epStart).getAdapter (View.class);
>         if (view != null) {
>             EObject el = ViewUtil.resolveSemanticElement (view);
>             if ((el != null) && el.equals (theElement)) {
>                 return epStart;
>             }
>         }
>         ListIterator childLI = epStart.getChildren ().listIterator ();
>         while (childLI.hasNext ()) {
>             EditPart epChild = (EditPart) childLI.next ();
>             EditPart elementEP = findEditPart (epChild, theElement);
>             if (elementEP != null) {
>                 return elementEP;
>             }
>         }
>         return null;
>     }
> 
>     protected void refreshForegroundColor () {
>         LineStyle style = (LineStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getLineStyle ());
>         if (style != null) setForegroundColor (DiagramColorRegistry.getInstance ().getColor (new Integer (style.getLineColor ())));
> 
>     }
> 
>     protected void refreshVisibility () {
>         setVisibility (((View) getModel ()).isVisible ());
>     }
> 
>     protected void removeListenerFilter (String filterId) {
>         if (listenerFilters == null) return;
> 
>         Object [] objects = (Object []) listenerFilters.get (filterId);
>         if (objects == null) {
108,109d482
<     protected void removeChildVisual (EditPart childEditPart) {
<         if (removeFixedChild (childEditPart)) {
111a549,562
>         if (objects.length > 2) {
>             DiagramEventBroker.getInstance ().removeNotificationListener ((EObject) objects [0], (EStructuralFeature) objects [1], (NotificationListener) objects [2]);
>         } else {
>             DiagramEventBroker.getInstance ().removeNotificationListener ((EObject) objects [0], (NotificationListener) objects [1]);
>         }
>         listenerFilters.remove (filterId);
>     }
> 
>     protected void setForegroundColor (Color color) {
>         getFigure ().setForegroundColor (color);
>     }
> 
>     public void setPropertyValue (Object id, Object value) {
>         ViewUtil.setPropertyValue ((View) getModel (), id, value);
112,112d548
<         super.removeChildVisual (childEditPart);
114a565,566
>     public void setStructuralFeatureValue (EStructuralFeature feature, Object value) {
>         ViewUtil.setStructuralFeatureValue ((View) getModel (), feature, value);
115,116d564
<     protected IFigure getContentPaneFor (IGraphicalEditPart editPart) {
<         return super.getContentPaneFor (editPart);
118a569,573
>     protected void setVisibility (boolean vis) {
>         if (! vis && getSelected () != SELECTED_NONE) getViewer ().deselect (this);
> 
>         getFigure ().setVisible (vis);
>         getFigure ().revalidate ();
119,121d568
<     protected NodeFigure createNodePlate () {
<         DefaultSizeNodeFigure result = new DefaultSizeNodeFigure (getMapMode ().DPtoLP (40), getMapMode ().DPtoLP (40));
<         return result;
123a576,578
>     protected void addNotationalListeners () {
>         addListenerFilter ("View", this, (View) getModel ());
>         getFigure ().addPropertyChangeListener (Connection.PROPERTY_CONNECTION_ROUTER, this);
124,130d575
<     protected NodeFigure createNodeFigure () {
<         NodeFigure figure = createNodePlate ();
<         figure.setLayoutManager (new StackLayout ());
<         IFigure shape = createNodeShape ();
<         figure.add (shape);
<         contentPane = setupContentPane (shape);
<         return figure;
132a581,582
>     protected void addSemanticListeners () {
>         addListenerFilter ("SemanticModel", this, resolveSemanticElement ());
133,137d580
<     protected IFigure setupContentPane (IFigure nodeShape) {
<         if (nodeShape.getLayoutManager () == null) {
<             ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout ();
<             layout.setSpacing (getMapMode ().DPtoLP (5));
<             nodeShape.setLayoutManager (layout);
138a584,587
> 
>     protected void removeNotationalListeners () {
>         getFigure ().removePropertyChangeListener (Connection.PROPERTY_CONNECTION_ROUTER, this);
>         removeListenerFilter ("View");
139,139d583
<         return nodeShape;
141a590,591
>     protected void removeSemanticListeners () {
>         removeListenerFilter ("SemanticModel");
142,144d589
<     public IFigure getContentPane () {
<         if (contentPane != null) {
<             return contentPane;
145a396,396
>         }
145a593,596
> 
>     public void addNotify () {
>         super.addNotify ();
>         installRouter ();
146,146c397,397
<         return super.getContentPane ();
---
>         return super.getAdapter (key);
148a599,602
>     public Map getAppearancePropertiesMap () {
>         Map properties = new HashMap ();
>         fillAppearancePropertiesMap (properties);
>         return properties;
149,150d598
<     public EditPart getPrimaryChildEditPart () {
<         return getChildBySemanticHint (GMFGraphVisualIDRegistry.getType (ConnectionNameEditPart.VISUAL_ID));
152a605,813
>     protected static final String [] appearanceProperties = new String [] {Properties.ID_FONTNAME, Properties.ID_FONTSIZE, Properties.ID_FONTBOLD, Properties.ID_FONTITALIC, Properties.ID_FONTCOLOR, Properties.ID_LINECOLOR};
> 
>     public ConnectionEditPart (View view) {
>         setModel (view);
>         this.editableEditPart = new DefaultEditableEditPart (this);
>     }
> 
>     abstract protected Connection createConnectionFigure ();
> 
>     final protected IFigure createFigure () {
>         return createConnectionFigure ();
>     }
> 
>     public void refresh () {
>         if (getSource () != null && getTarget () != null) MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {
> 
>             public Object run () {
>                 ConnectionEditPart.super.refresh ();
>                 EditPolicyIterator i = getEditPolicyIterator ();
>                 while (i.hasNext ()) {
>                     EditPolicy policy = i.next ();
>                     if (policy instanceof GraphicalEditPolicyEx) {
>                         ((GraphicalEditPolicyEx) policy).refresh ();
>                     }
>                 }
>                 return null;
>             }
> 
>         }
> 
>         );
> 
>     }
> 
>     protected Edge getEdge () {
>         return (Edge) getModel ();
>     }
> 
>     public DragTracker getDragTracker (Request req) {
>         return new SelectConnectionEditPartTracker (this);
>     }
> 
>     protected Object getModelSource () {
>         return getEdge ().getSource ();
>     }
> 
>     protected Object getModelTarget () {
>         return getEdge ().getTarget ();
>     }
> 
>     protected void installRouter () {
>         ConnectionLayerEx cLayer = (ConnectionLayerEx) getLayer (LayerConstants.CONNECTION_LAYER);
>         RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getRoutingStyle ());
>         if (style != null) {
>             Routing routing = style.getRouting ();
>             if (Routing.MANUAL_LITERAL == routing) {
>                 getConnectionFigure ().setConnectionRouter (cLayer.getObliqueRouter ());
>             } else if (Routing.RECTILINEAR_LITERAL == routing) {
>                 getConnectionFigure ().setConnectionRouter (cLayer.getRectilinearRouter ());
>             } else if (Routing.TREE_LITERAL == routing) {
>                 getConnectionFigure ().setConnectionRouter (cLayer.getTreeRouter ());
>             }
> 
>         }
>         refreshRouterChange ();
>     }
> 
>     protected void refreshBendpoints () {
>         RelativeBendpoints bendpoints = (RelativeBendpoints) getEdge ().getBendpoints ();
>         List modelConstraint = bendpoints.getPoints ();
>         List figureConstraint = new ArrayList ();
>         for (int i = 0;
>         i < modelConstraint.size (); i ++) {
>             org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint wbp = (org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint) modelConstraint.get (i);
>             RelativeBendpoint rbp = new RelativeBendpoint (getConnectionFigure ());
>             rbp.setRelativeDimensions (new Dimension (wbp.getSourceX (), wbp.getSourceY ()), new Dimension (wbp.getTargetX (), wbp.getTargetY ()));
>             rbp.setWeight ((i + 1) / ((float) modelConstraint.size () + 1));
>             figureConstraint.add (rbp);
>         }
>         getConnectionFigure ().setRoutingConstraint (figureConstraint);
>     }
> 
>     private void installBendpointEditPolicy () {
>         if (getConnectionFigure ().getConnectionRouter () instanceof ForestRouter) {
>             installEditPolicy (EditPolicy.CONNECTION_BENDPOINTS_ROLE, new TreeConnectionBendpointEditPolicy ());
>             getConnectionFigure ().setCursor (Cursors.CURSOR_SEG_MOVE);
>         } else if (getConnectionFigure ().getConnectionRouter () instanceof OrthogonalRouter) {
>             installEditPolicy (EditPolicy.CONNECTION_BENDPOINTS_ROLE, new ConnectionLineSegEditPolicy ());
>             getConnectionFigure ().setCursor (Cursors.CURSOR_SEG_MOVE);
>         } else {
>             installEditPolicy (EditPolicy.CONNECTION_BENDPOINTS_ROLE, new ConnectionBendpointEditPolicy ());
>             getConnectionFigure ().setCursor (Cursors.CURSOR_SEG_ADD);
>         }
> 
>     }
> 
>     protected void refreshRouterChange () {
>         refreshBendpoints ();
>         installBendpointEditPolicy ();
>     }
> 
>     protected void refreshSmoothness () {
>         PolylineConnectionEx poly = ((PolylineConnectionEx) getConnectionFigure ());
>         RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getRoutingStyle ());
>         if (style != null) {
>             Smoothness smoothness = style.getSmoothness ();
>             if (Smoothness.LESS_LITERAL == smoothness) {
>                 poly.setSmoothness (PolylineConnectionEx.SMOOTH_LESS);
>             } else if (Smoothness.NORMAL_LITERAL == smoothness) {
>                 poly.setSmoothness (PolylineConnectionEx.SMOOTH_NORMAL);
>             } else if (Smoothness.MORE_LITERAL == smoothness) {
>                 poly.setSmoothness (PolylineConnectionEx.SMOOTH_MORE);
>             } else if (Smoothness.NONE_LITERAL == smoothness) {
>                 poly.setSmoothness (PolylineConnectionEx.SMOOTH_NONE);
>             }
> 
>         }
>     }
> 
>     protected void refreshJumplinks () {
>         PolylineConnectionEx poly = ((PolylineConnectionEx) getConnectionFigure ());
>         RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getRoutingStyle ());
>         JumpLinkStatus status = JumpLinkStatus.NONE_LITERAL;
>         JumpLinkType type = JumpLinkType.SEMICIRCLE_LITERAL;
>         boolean reverse = false;
>         if (style != null) {
>             status = style.getJumpLinkStatus ();
>             type = style.getJumpLinkType ();
>             reverse = style.isJumpLinksReverse ();
>         }
>         int jumpType = 0;
>         if (JumpLinkStatus.BELOW_LITERAL == status) {
>             jumpType = PolylineConnectionEx.JUMPLINK_FLAG_BELOW;
>         } else if (JumpLinkStatus.ABOVE_LITERAL == status) {
>             jumpType = PolylineConnectionEx.JUMPLINK_FLAG_ABOVE;
>         } else if (JumpLinkStatus.ALL_LITERAL == status) {
>             jumpType = PolylineConnectionEx.JUMPLINK_FLAG_ALL;
>         }
> 
>         boolean bCurved = type.equals (JumpLinkType.SEMICIRCLE_LITERAL);
>         boolean bAngleIn = ! type.equals (JumpLinkType.SQUARE_LITERAL);
>         boolean bOnBottom = reverse;
>         poly.setJumpLinks (jumpType != 0);
>         poly.setJumpLinksStyles (jumpType, bCurved, bAngleIn, bOnBottom);
>     }
> 
>     protected void refreshRoutingStyles () {
>         PolylineConnectionEx poly = ((PolylineConnectionEx) getConnectionFigure ());
>         RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getRoutingStyle ());
>         if (style != null) {
>             boolean closestDistance = style.isClosestDistance ();
>             boolean avoidObstruction = style.isAvoidObstructions ();
>             poly.setRoutingStyles (closestDistance, avoidObstruction);
>         }
>     }
> 
>     protected void refreshVisuals () {
>         super.refreshVisuals ();
>         refreshVisibility ();
>         refreshForegroundColor ();
>         refreshRoutingStyles ();
>         refreshSmoothness ();
>         refreshJumplinks ();
>         refreshBendpoints ();
>         refreshFont ();
>     }
> 
>     protected void refreshFont () {
>         FontStyle style = (FontStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getFontStyle ());
>         if (style != null) {
>             setFont (new FontData (style.getFontName (), style.getFontHeight (), (style.isBold () ? SWT.BOLD : SWT.NORMAL) | (style.isItalic () ? SWT.ITALIC : SWT.NORMAL)));
>         }
>     }
> 
>     protected void setFont (FontData fontData) {
>         getFigure ().setFont (DiagramFontRegistry.getInstance ().getFont (Display.getDefault (), fontData));
>         getFigure ().repaint ();
>     }
> 
>     public void fillAppearancePropertiesMap (Map properties) {
>         if (getAppearancePropertyIDs ().length > 0) {
>             final Dictionary local_properties = new Hashtable ();
>             for (int i = 0;
>             i < getAppearancePropertyIDs ().length; i ++) {
>                 String prob = getAppearancePropertyIDs () [i];
>                 ENamedElement element = MetaModelUtil.getElement (prob);
>                 if (element instanceof EStructuralFeature && ViewUtil.isPropertySupported ((View) getModel (), prob)) {
>                     local_properties.put (getAppearancePropertyIDs () [i], getStructuralFeatureValue ((EStructuralFeature) element));
>                 }
>             }
>             properties.put (((View) getModel ()).getType (), local_properties);
>         }
>         Iterator iterator = getChildren ().iterator ();
>         while (iterator.hasNext ()) {
>             IGraphicalEditPart child = (IGraphicalEditPart) iterator.next ();
>             child.fillAppearancePropertiesMap (properties);
>         }
>     }
> 
>     protected String [] getAppearancePropertyIDs () {
>         return appearanceProperties;
>     }
> 
>     public void performRequest (Request request) {
>         if (! isEditModeEnabled ()) {
>             return;
>         }
>         if (RequestConstants.REQ_DIRECT_EDIT == request.getType ()) {
>             performDirectEditRequest (request);
153,153c939,939
<     protected void handleNotificationEvent (Notification event) {
---
>     protected void handleNotificationEvent (Notification event) {
153a940,941
>         Object feature = event.getFeature ();
>         if (NotationPackage.eINSTANCE.getView_PersistedChildren ().equals (feature) || NotationPackage.eINSTANCE.getView_TransientChildren ().equals (feature)) {
154,154d939
<         if (event.getNotifier () == getModel () && EcorePackage.eINSTANCE.getEModelElement_EAnnotations ().equals (event.getFeature ())) {
155a943,956
>         } else if (NotationPackage.eINSTANCE.getView_Visible ().equals (feature)) {
>             setVisibility (((Boolean) event.getNewValue ()).booleanValue ());
>         } else if (NotationPackage.eINSTANCE.getRoutingStyle_Routing ().equals (feature)) {
>             installRouter ();
>         } else if (NotationPackage.eINSTANCE.getRoutingStyle_Smoothness ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_AvoidObstructions ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_ClosestDistance ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkStatus ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkType ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_JumpLinksReverse ().equals (feature)) {
>             refreshVisuals ();
>         } else if (NotationPackage.eINSTANCE.getLineStyle_LineColor ().equals (feature)) {
>             Integer c = (Integer) event.getNewValue ();
>             setForegroundColor (DiagramColorRegistry.getInstance ().getColor (c));
>         } else if (NotationPackage.eINSTANCE.getRelativeBendpoints_Points ().equals (feature)) {
>             refreshBendpoints ();
>         } else if (event.getFeature () == NotationPackage.eINSTANCE.getView_Element () && ((EObject) event.getNotifier ()) == getNotationView ()) handleMajorSemanticChange ();
>         else if (event.getEventType () == EventTypes.UNRESOLVE && event.getNotifier () == ((View) getModel ()).getElement ()) handleMajorSemanticChange ();
> 
155,155c942,942
<             handleMajorSemanticChange ();
---
>             refreshChildren ();
156a815,885
>             EditPart targetEditPart = getTargetEditPart (request);
>             if (targetEditPart != null) {
>                 Command command = targetEditPart.getCommand (request);
>                 if (command != null) {
>                     getDiagramEditDomain ().getDiagramCommandStack ().execute (command);
>                     return;
>                 }
>             }
>         }
>     }
> 
>     protected void performDirectEditRequest (Request request) {
>         EditPart primaryChildEditPart = (EditPart) MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {
> 
>             public Object run () {
>                 return getPrimaryChildEditPart ();
>             }
> 
>         }
> 
>         );
>         if (primaryChildEditPart != null) {
>             primaryChildEditPart.performRequest (request);
>         }
>     }
> 
>     public boolean understandsRequest (Request req) {
>         return RequestConstants.REQ_DIRECT_EDIT == req.getType () || super.understandsRequest (req);
>     }
> 
>     protected void registerModel () {
>         super.registerModel ();
>         EObject ref = ((View) getModel ()).getElement ();
>         if (ref == null) {
>             return;
>         }
>         elementGuid = ProxyUtil.getProxyID (ref);
>         ((IDiagramGraphicalViewer) getViewer ()).registerEditPartForElement (elementGuid, this);
>     }
> 
>     protected void unregisterModel () {
>         super.unregisterModel ();
>         ((IDiagramGraphicalViewer) getViewer ()).unregisterEditPartForElement (elementGuid, this);
>     }
> 
>     protected final void handleMajorSemanticChange () {
>         if (getSource () instanceof GraphicalEditPart && getTarget () instanceof GraphicalEditPart) {
>             ((GraphicalEditPart) getSource ()).refreshSourceConnection (this);
>             ((GraphicalEditPart) getTarget ()).refreshTargetConnection (this);
>         }
>     }
> 
>     final void refreshChild (GraphicalEditPart child) {
>         removeChild (child);
>         refreshChildren ();
>     }
> 
>     public final boolean isCanonical () {
>         return getEditPolicy (EditPolicyRoles.CANONICAL_ROLE) != null;
>     }
> 
>     public boolean isSelectable () {
>         return getFigure ().isVisible ();
>     }
> 
>     public void disableEditMode () {
>         this.editableEditPart.disableEditMode ();
>     }
> 
>     public void enableEditMode () {
>         this.editableEditPart.enableEditMode ();
157,157d814
<             super.handleNotificationEvent (event);
158a887,896
> 
>     public boolean isEditModeEnabled () {
>         return this.editableEditPart.isEditModeEnabled ();
>     }
> 
>     public void showSourceFeedback (Request request) {
>         if (! isEditModeEnabled ()) {
>             return;
>         }
>         super.showSourceFeedback (request);
160a899,904
>     public void showTargetFeedback (Request request) {
>         if (! isEditModeEnabled ()) {
>             return;
>         }
>         super.showTargetFeedback (request);
>     }
161,162d898
<     public class DiagramElementFigure extends RectangleFigure {
<         private WrappingLabel fFigureDiagramElementFigure_NameLabel;
163a906,910
>     public void eraseSourceFeedback (Request request) {
>         if (! isEditModeEnabled ()) {
>             return;
>         }
>         super.eraseSourceFeedback (request);
164,171d905
<         public DiagramElementFigure () {
<             ToolbarLayout layoutThis = new ToolbarLayout ();
<             layoutThis.setStretchMinorAxis (true);
<             layoutThis.setMinorAlignment (ToolbarLayout.ALIGN_CENTER);
<             layoutThis.setSpacing (0);
<             layoutThis.setVertical (true);
<             this.setLayoutManager (layoutThis);
<             createContents ();
173a913,917
>     public void eraseTargetFeedback (Request request) {
>         if (! isEditModeEnabled ()) {
>             return;
>         }
>         super.eraseTargetFeedback (request);
174,177d912
<         private void createContents () {
<             fFigureDiagramElementFigure_NameLabel = new WrappingLabel ();
<             fFigureDiagramElementFigure_NameLabel.setText ("");
<             this.add (fFigureDiagramElementFigure_NameLabel);
179a920,924
>     public EditPart getPrimaryChildEditPart () {
>         if (getChildren ().size () > 0) return (EditPart) getChildren ().get (0);
> 
>         return null;
>     }
180,180d919
<         private boolean myUseLocalCoordinates = false;
181a926,930
>     public PreferencesHint getDiagramPreferencesHint () {
>         if (getRoot () instanceof IDiagramPreferenceSupport) {
>             return ((IDiagramPreferenceSupport) getRoot ()).getPreferencesHint ();
>         }
>         return PreferencesHint.USE_DEFAULTS;
182,183d925
<         protected boolean useLocalCoordinates () {
<             return myUseLocalCoordinates;
185a933,936
>     public void notifyChanged (Notification notification) {
>         if (isActive ()) {
>             handleNotificationEvent (notification);
>         }
186,187d932
<         protected void setUseLocalCoordinates (boolean useLocalCoordinates) {
<             myUseLocalCoordinates = useLocalCoordinates;
190,191d938
<         public WrappingLabel getFigureDiagramElementFigure_NameLabel () {
<             return fFigureDiagramElementFigure_NameLabel;
193a959,964
>     final protected IMapMode getMapMode () {
>         EditPart parent = getParent ();
>         if (parent instanceof DiagramRootEditPart) return ((DiagramRootEditPart) parent).getMapMode ();
>         else if (parent instanceof org.eclipse.gef.GraphicalEditPart) return MapModeUtil.getMapMode (((org.eclipse.gef.GraphicalEditPart) parent).getFigure ());
> 
>         return MapModeUtil.getMapMode ();
