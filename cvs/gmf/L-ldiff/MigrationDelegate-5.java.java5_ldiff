3,3c5,5
< import java.util.ArrayList;
---
> import java.util.Map;
5,5c3,3
< import java.util.Arrays;
---
> import java.util.HashMap;
6,7d3
< 
< import java.util.Collection;
10a9,10
> import org.eclipse.emf.ecore.EAttribute;
> 
12a13,18
> import org.eclipse.emf.ecore.EReference;
> 
> import org.eclipse.emf.ecore.EStructuralFeature;
> 
> import org.eclipse.emf.ecore.util.EcoreUtil;
> 
13,13c19,19
< import org.eclipse.gmf.internal.common.migrate.MigrationHelperDelegateImpl;
---
> import org.eclipse.gmf.internal.common.migrate.MigrationDelegateImpl;
16a23,24
> import org.eclipse.gmf.mappings.GMFMapFactory;
> 
22a31,35
> class MigrationDelegate extends MigrationDelegateImpl {
>     private Map < LabelMapping, FeatureLabelMapping > myLabelMappingMigrations;
>     private EAttribute myLabelMapping_ViewPattern;
>     private EAttribute myLabelMapping_EditPattern;
>     private EReference myLabelMapping_Features;
23,25d30
< class MigrationDelegate extends MigrationHelperDelegateImpl {
<     private Collection < FeatureLabelMapping > myFeatureLabelMappings;
<     private Collection < String > myBackwardSupportedURIs;
30a41,51
>         registerNarrowedAbstractType ("FeatureInitializer", GMFMapPackage.eINSTANCE.getFeatureValueSpec ());
>         myLabelMapping_Features = (EReference) EcoreUtil.copy (GMFMapPackage.eINSTANCE.getFeatureLabelMapping_Features ());
>         myLabelMapping_ViewPattern = (EAttribute) EcoreUtil.copy (GMFMapPackage.eINSTANCE.getFeatureLabelMapping_ViewPattern ());
>         myLabelMapping_EditPattern = (EAttribute) EcoreUtil.copy (GMFMapPackage.eINSTANCE.getFeatureLabelMapping_EditPattern ());
>         {
>             Map < String, EStructuralFeature > renamings = new HashMap < String, EStructuralFeature > ();
>             renamings.put (myLabelMapping_ViewPattern.getName (), myLabelMapping_ViewPattern);
>             renamings.put (myLabelMapping_EditPattern.getName (), myLabelMapping_EditPattern);
>             renamings.put (myLabelMapping_Features.getName (), myLabelMapping_Features);
>             registerRenamedAttributes (GMFMapPackage.eINSTANCE.getLabelMapping (), renamings);
>         } myLabelMappingMigrations = null;
31,33d40
<         registerNarrowReferenceType (GMFMapPackage.eINSTANCE.getFeatureSeqInitializer_Initializers (), GMFMapPackage.eINSTANCE.getFeatureValueSpec ());
<         registerNarrowReferenceType (GMFMapPackage.eINSTANCE.getMappingEntry_LabelMappings (), GMFMapPackage.eINSTANCE.getFeatureLabelMapping ());
<         myFeatureLabelMappings = null;
36a55,94
>     public boolean setValue (EObject object, EStructuralFeature feature, Object value, int position) {
>         if (myLabelMapping_ViewPattern.equals (feature)) {
>             LabelMapping mapping = (LabelMapping) object;
>             String viewPattern = (String) value;
>             FeatureLabelMapping migratedMapping = saveFeatureLabelMappingFor (mapping);
>             migratedMapping.setViewPattern (viewPattern);
>             fireMigrationApplied (true);
>         } else if (myLabelMapping_EditPattern.equals (feature)) {
>             LabelMapping mapping = (LabelMapping) object;
>             String editPattern = (String) value;
>             FeatureLabelMapping migratedMapping = saveFeatureLabelMappingFor (mapping);
>             migratedMapping.setViewPattern (editPattern);
>             fireMigrationApplied (true);
>         } else if (myLabelMapping_Features.equals (feature)) {
>             LabelMapping mapping = (LabelMapping) object;
>             EAttribute attribute = (EAttribute) value;
>             FeatureLabelMapping migratedMapping = saveFeatureLabelMappingFor (mapping);
>             migratedMapping.getFeatures ().add (attribute);
>             fireMigrationApplied (true);
>         } else {
>             return super.setValue (object, feature, value, position);
>         }
> 
>         return true;
>     }
> 
>     private FeatureLabelMapping saveFeatureLabelMappingFor (LabelMapping labelMapping) {
>         if (myLabelMappingMigrations == null) {
>             myLabelMappingMigrations = new HashMap < LabelMapping, FeatureLabelMapping > ();
>         }
>         FeatureLabelMapping migrated = myLabelMappingMigrations.get (labelMapping);
>         if (migrated == null) {
>             migrated = GMFMapFactory.eINSTANCE.createFeatureLabelMapping ();
>             myLabelMappingMigrations.put (labelMapping, migrated);
>         }
>         return migrated;
>     }
> 
>     private Map < LabelMapping, FeatureLabelMapping > getSavedLabelMappingMigrations () {
>         return myLabelMappingMigrations;
37,38d54
<     public boolean isOldVersionDetected (String uriString) {
<         return ! getMetamodelNsURI ().equals (uriString) && getBackwardSupportedURIs ().contains (uriString);
43,43c99,99
<         if (myFeatureLabelMappings == null) {
---
>         if (getSavedLabelMappingMigrations () == null) {
45a102,103
>         for (LabelMapping mapping : getSavedLabelMappingMigrations ().keySet ()) {
>             FeatureLabelMapping migrated = getSavedLabelMappingMigrations ().get (mapping);
46,46d101
<         for (FeatureLabelMapping mapping : getSavedFeatureLabelMappings ()) {
47,47c104,104
<             if (mapping.getFeatures ().isEmpty ()) {
---
>             if (! migrated.getFeatures ().isEmpty ()) {
51a109,109
>                     migrated.setDiagramLabel (mapping.getDiagramLabel ());
52,53d108
<                     LabelMapping newMapping = GMFMapPackage.eINSTANCE.getGMFMapFactory ().createLabelMapping ();
<                     newMapping.setDiagramLabel (mapping.getDiagramLabel ());
55,55c111,111
<                         newMapping.setReadOnly (true);
---
>                         migrated.setReadOnly (true);
57,57c113,113
<                     labelMappings.set (originalIndex, newMapping);
---
>                     labelMappings.set (originalIndex, migrated);
63,87d118
<     @Override
<     public void processObject (EObject result) {
<         if (result instanceof FeatureLabelMapping) {
<             getSavedFeatureLabelMappings ().add ((FeatureLabelMapping) result);
<         }
<     }
< 
<     private Collection < FeatureLabelMapping > getSavedFeatureLabelMappings () {
<         if (myFeatureLabelMappings == null) {
<             myFeatureLabelMappings = new ArrayList < FeatureLabelMapping > ();
<         }
<         return myFeatureLabelMappings;
<     }
< 
<     protected Collection < String > getBackwardSupportedURIs () {
<         if (myBackwardSupportedURIs == null) {
<             myBackwardSupportedURIs = Arrays.asList (new String [] {"http://www.eclipse.org/gmf/2005/mappings", "http://www.eclipse.org/gmf/2005/mappings/2.0"});
<         }
<         return myBackwardSupportedURIs;
<     }
< 
<     protected String getMetamodelNsURI () {
<         return GMFMapPackage.eNS_URI;
<     }
< 
