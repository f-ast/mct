6a7,10
> import java.util.List;
> 
> import java.util.Set;
> 
40a45,46
> import org.eclipse.gmf.codegen.gmfgen.GenNavigatorChildReference;
> 
79a86,86
>     @SuppressWarnings("unchecked")
109,109c116,116
<         for (Iterator it = myDiagram.getAllNodes ().iterator ();
---
>         for (GenNode next : (List < ? extends GenNode >) myDiagram.getAllNodes ()) {
110,111d116
<         it.hasNext ();) {
<             final GenNode next = (GenNode) it.next ();
132,133d136
<         for (Iterator it = myDiagram.getLinks ().iterator ();
<         it.hasNext ();) {
134,134c137,137
<             final GenLink next = (GenLink) it.next ();
---
>         for (GenLink next : (List < ? extends GenLink >) myDiagram.getLinks ()) {
136,137d138
<             for (Iterator it2 = next.getLabels ().iterator ();
<             it2.hasNext ();) {
138,138c139,139
<                 final GenLinkLabel label = (GenLinkLabel) it2.next ();
---
>             for (GenLinkLabel label : (List < ? extends GenLinkLabel >) next.getLabels ()) {
164a166,176
>         if (! myEditorGen.getDomainGenModel ().isRichClientPlatform () && myEditorGen.getNavigator () != null) {
>             generateNavigatorContentProvider ();
>             generateNavigatorLabelProvider ();
>             generateNavigatorLinkHelper ();
>             generateNavigatorSorter ();
>             generateNavigatorActionProvider ();
>             generateAbstractNavigatorItem ();
>             generateNavigatorGroup ();
>             generateNavigatorItem ();
>             generateNavigatorGroupIcons ();
>         }
172a185,185
>     @SuppressWarnings("unchecked")
176,177d188
<         for (Iterator it = providerContainer.getProviders ().iterator ();
<         it.hasNext ();) {
178,178c189,189
<             GenExpressionProviderBase nextProvider = (GenExpressionProviderBase) it.next ();
---
>         for (GenExpressionProviderBase nextProvider : (List < ? extends GenExpressionProviderBase >) providerContainer.getProviders ()) {
245a257,308
>     private void generateNavigatorContentProvider () throws InterruptedException, UnexpectedBehaviourException {
>         internalGenerateJavaClass (myEmitters.getNavigatorContentProviderEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getContentProviderClassName (), myEditorGen.getNavigator ());
>     }
> 
>     private void generateNavigatorLabelProvider () throws InterruptedException, UnexpectedBehaviourException {
>         internalGenerateJavaClass (myEmitters.getNavigatorLabelProviderEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getLabelProviderClassName (), myEditorGen.getNavigator ());
>     }
> 
>     private void generateNavigatorLinkHelper () throws InterruptedException, UnexpectedBehaviourException {
>         if (! myEditorGen.getEditor ().isEclipseEditor ()) {
>             return;
>         }
>         internalGenerateJavaClass (myEmitters.getNavigatorLinkHelperEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getLinkHelperClassName (), myEditorGen.getNavigator ());
>     }
> 
>     private void generateNavigatorSorter () throws InterruptedException, UnexpectedBehaviourException {
>         internalGenerateJavaClass (myEmitters.getNavigatorSorterEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getSorterClassName (), myEditorGen.getNavigator ());
>     }
> 
>     private void generateNavigatorActionProvider () throws InterruptedException, UnexpectedBehaviourException {
>         internalGenerateJavaClass (myEmitters.getNavigatorActionProviderEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getActionProviderClassName (), myEditorGen.getNavigator ());
>     }
> 
>     private void generateAbstractNavigatorItem () throws InterruptedException, UnexpectedBehaviourException {
>         doGenerateJavaClass (myEmitters.getAbstractNavigatorItemEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getAbstractNavigatorItemClassName (), myEditorGen.getNavigator ());
>     }
> 
>     private void generateNavigatorGroup () throws InterruptedException, UnexpectedBehaviourException {
>         internalGenerateJavaClass (myEmitters.getNavigatorGroupEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getNavigatorGroupClassName (), myEditorGen.getNavigator ());
>     }
> 
>     private void generateNavigatorItem () throws InterruptedException, UnexpectedBehaviourException {
>         internalGenerateJavaClass (myEmitters.getNavigatorItemEmitter (), myEditorGen.getNavigator ().getPackageName (), myEditorGen.getNavigator ().getNavigatorItemClassName (), myEditorGen.getNavigator ());
>     }
> 
>     @SuppressWarnings("unchecked")
>     private void generateNavigatorGroupIcons () throws InterruptedException, UnexpectedBehaviourException {
>         Set < String > groupIcons = new HashSet < String > ();
>         for (GenNavigatorChildReference nextReference : (List < ? extends GenNavigatorChildReference >) myEditorGen.getNavigator ().getChildReferences ()) {
>             if (nextReference.getGroupIcon () != null && nextReference.getGroupIcon ().length () > 0) {
>                 groupIcons.add (nextReference.getGroupIcon ());
>             }
>         }
>         for (String iconPath : groupIcons) {
>             generateGroupIcon (new Path (iconPath));
>         }
>     }
> 
>     private void generateGroupIcon (Path groupIconPath) throws InterruptedException, UnexpectedBehaviourException {
>         doGenerateBinaryFile (myEmitters.getGroupIconEmitter (), groupIconPath, null);
>     }
> 
