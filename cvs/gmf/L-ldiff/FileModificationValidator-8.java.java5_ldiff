2a3,16
> import java.io.File;
> 
> import java.sql.Timestamp;
> 
> import java.util.HashMap;
> 
> import java.util.HashSet;
> 
> import java.util.Iterator;
> 
> import java.util.Map;
> 
> import java.util.Set;
> 
8a27,28
> import org.eclipse.core.runtime.IPath;
> 
20a21,21
> import org.eclipse.core.resources.IResource;
21,21d20
< import org.eclipse.swt.widgets.Display;
22,22c22,22
< 
---
> 
22a23,24
> import org.eclipse.core.resources.IWorkspace;
> 
44,44c62,62
<     public boolean okToEdit (final IFile [] files, final String modificationReason, Shell shell) {
---
>     public boolean okToEdit (final IFile [] files, final String modificationReason, final Shell shell) {
44a63,63
>         final IStatus fileStatus = validateEdit (files, shell);
45,48d62
<         if (PlatformUI.getWorkbench ().getActiveWorkbenchWindow () != null && Display.getCurrent () != null) {
<             shell = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell ();
<         }
<         final IStatus status = ResourcesPlugin.getWorkspace ().validateEdit (files, shell);
49,49c64,64
<         if (status.isOK ()) {
---
>         if (! fileStatus.isOK ()) {
50,50c65,65
<             return true;
---
>             if (shell != null) {
51,51d65
<         } else {
55,55c69,69
<                     MessageDialog.openError (PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell (), NLS.bind (CommonUIMessages.FileModificationValidator_EditProblemDialogTitle, modificationReason), NLS.bind (CommonUIMessages.FileModificationValidator_EditProblemDialogMessage, modificationReason, status.getMessage ()));
---
>                         MessageDialog.openError (shell, NLS.bind (CommonUIMessages.FileModificationValidator_EditProblemDialogTitle, modificationReason), NLS.bind (CommonUIMessages.FileModificationValidator_EditProblemDialogMessage, modificationReason, fileStatus.getMessage ()));
60a75,75
>             }
62a78,78
>         return true;
93a110,224
>     public IStatus validateEdit (IFile [] files, Object shell) {
>         IStatus status = Status.OK_STATUS;
>         if (files == null || files.length == 0) {
>             return status;
>         }
>         Set < IFile > unsynchedFiles = new HashSet < IFile > ();
>         Map < IFile, ModificationStamp > filesToModificationStamps = new HashMap < IFile, ModificationStamp > ();
>         for (int i = 0;
>         i < files.length; i ++) {
>             IFile file = files [i];
>             filesToModificationStamps.put (file, new ModificationStamp (file));
>             boolean inSync = file.isSynchronized (IResource.DEPTH_ZERO);
>             if (! inSync) {
>                 unsynchedFiles.add (file);
>             }
>         }
>         if (! unsynchedFiles.isEmpty ()) {
>             status = buildOutOfSyncStatus (unsynchedFiles);
>         }
>         if (status.isOK ()) {
>             status = ResourcesPlugin.getWorkspace ().validateEdit (files, shell);
>             for (Map.Entry < IFile, ModificationStamp > entry : filesToModificationStamps.entrySet ()) {
>                 IFile file = entry.getKey ();
>                 ModificationStamp stamp = entry.getValue ();
>                 if (stamp.hasFileChanged ()) {
>                     unsynchedFiles.add (file);
>                 }
>             }
>             if (! unsynchedFiles.isEmpty ()) {
>                 status = buildOutOfSyncStatus (unsynchedFiles);
>             }
>         }
>         return status;
>     }
> 
>     private IStatus buildOutOfSyncStatus (Set < IFile > unsynchedFiles) {
>         StringBuffer buf = new StringBuffer (CommonUIMessages.FileModificationValidator_OutOfSyncMessage);
>         buf.append ("\n");
>         for (Iterator < IFile > unsynched = unsynchedFiles.iterator ();
>         unsynched.hasNext ();) {
>             IFile file = unsynched.next ();
>             buf.append (file.getFullPath ().toString ());
>             buf.append ("\n");
>         }
>         return new Status (IStatus.ERROR, CommonUIPlugin.getPluginId (), 0, buf.toString (), null);
>     }
> 
>     private static class ModificationStamp {
>         private IFile file;
>         private Timestamp lastModified = null;
>         private long fileLength = 0L;
> 
>         public ModificationStamp (IFile file) {
>             assert file != null;
>             this.file = file;
>             IPath path = file.getLocation ();
>             if (path != null) {
>                 File ioFile = path.toFile ();
>                 if (ioFile != null) {
>                     lastModified = new Timestamp (ioFile.lastModified ());
>                     lastModified.setNanos (0);
>                     fileLength = ioFile.length ();
>                 } else {
>                     lastModified = new Timestamp (file.getModificationStamp ());
>                     lastModified.setNanos (0);
>                 }
>             } else {
>                 lastModified = new Timestamp (file.getModificationStamp ());
>                 lastModified.setNanos (0);
>             }
>         }
> 
>         public Timestamp getLastModified () {
>             return lastModified;
>         }
> 
>         public long getFileLength () {
>             return fileLength;
>         }
> 
>         public IFile getFile () {
>             return file;
>         }
> 
>         public boolean equals (Object obj) {
>             if (this == obj) {
>                 return true;
>             } else if (obj instanceof ModificationStamp) {
>                 ModificationStamp stamp = (ModificationStamp) obj;
>                 return file.equals (stamp.getFile ()) && fileLength == stamp.getFileLength () && lastModified.equals (stamp.getLastModified ());
>             }
> 
>             return false;
>         }
> 
>         public int hashCode () {
>             return file.hashCode () + lastModified.hashCode () + (int) (fileLength ^ (fileLength>>> 32));
>         }
> 
>         public boolean hasFileChanged () {
>             IPath path = file.getLocation ();
>             if (path == null) {
>                 return false;
>             }
>             File ioFile = path.toFile ();
>             if (ioFile == null) {
>                 return false;
>             }
>             Timestamp newTimestamp = new Timestamp (ioFile.lastModified ());
>             newTimestamp.setNanos (0);
>             return ! (lastModified.getTime () == newTimestamp.getTime () && fileLength == ioFile.length ());
>         }
> 
>     }
> 
