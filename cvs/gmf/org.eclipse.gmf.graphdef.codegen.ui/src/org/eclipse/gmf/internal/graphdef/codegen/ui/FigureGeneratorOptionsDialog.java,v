head	1.4;
access;
symbols
	v20080722-1827:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20080222-1200:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	v20070330-1300:1.3
	v20060316-0600:1.3
	v20070228-2000:1.3
	v20070208-1800:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.1
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1
	v20060526-1200:1.1
	I20060505-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.05.17.22.14.13;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	63d7464cd3b54567;

1.3
date	2006.11.02.21.58.32;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.02.17.38.41;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.01.17.26.41;	author atikhomirov;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.19;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.4
log
@moving towards not using fqnswitch and java to tell draw2d figure names; let toolsmith to control what draw2d classes are being used; fqnSwitch argument replaced with simple token indicator
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Boris Blajer (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.graphdef.codegen.ui;

import org.eclipse.gmf.graphdef.codegen.MapModeCodeGenStrategy;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.IMessageProvider;
import org.eclipse.jface.dialogs.TitleAreaDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Shell;

public class FigureGeneratorOptionsDialog extends TitleAreaDialog {
    private Button useMapModeButton;
    private Button useRuntimeFiguresButton;
	private boolean useMapMode;
	private boolean useRuntimeFigures;
	private String title;

	public FigureGeneratorOptionsDialog(Shell parentShell, String dialogTitle, boolean initialUseRuntimeFigures, boolean initialUseMapMode) {
		super(parentShell);
		title = dialogTitle;
		useMapMode = initialUseMapMode;
		useRuntimeFigures = initialUseRuntimeFigures;
	}

	protected void configureShell(Shell newShell) {
		super.configureShell(newShell);
		if (title != null) {
			newShell.setText(title);
		}
	}

	protected Control createDialogArea(Composite parent) {
		Composite result = (Composite) super.createDialogArea(parent);
		GridLayout layout = new GridLayout();
		layout.marginHeight = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
		layout.marginWidth = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
		layout.verticalSpacing = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
		layout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
		result.setLayout(layout);
		createControls(result);
		setTitle("Generator Model Options");
        warnLiteVerstionDoesNotSupportMapMode();
        Dialog.applyDialogFont(result);
		return result;
	}

	protected void createControls(Composite result) {
        useMapModeButton = new Button(result, SWT.CHECK);
        useMapModeButton.setText("Use &IMapMode");
        useMapModeButton.setSelection(useMapMode);
        useMapModeButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.VERTICAL_ALIGN_CENTER));
        useRuntimeFiguresButton = new Button(result, SWT.CHECK);
        useRuntimeFiguresButton.setText("&Utilize enhanced features of GMF runtime");
        useRuntimeFiguresButton.setSelection(useRuntimeFigures);
        useRuntimeFiguresButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.VERTICAL_ALIGN_CENTER));
        SelectionListener selectionListener = new SelectionListener() {
        	public void widgetDefaultSelected(SelectionEvent e) {
        		warnLiteVerstionDoesNotSupportMapMode();
        	}
        	public void widgetSelected(SelectionEvent e) {
        		warnLiteVerstionDoesNotSupportMapMode();
        	}
		};
        useMapModeButton.addSelectionListener(selectionListener);
        useRuntimeFiguresButton.addSelectionListener(selectionListener);
        useMapModeButton.setSelection(useMapMode);
        useRuntimeFiguresButton.setSelection(useRuntimeFigures);
	}

    protected void warnLiteVerstionDoesNotSupportMapMode() {
    	if (!useRuntimeFiguresButton.getSelection() && useMapModeButton.getSelection()) {
    		setMessage("It is not recommended to use IMapMode for pure-GEF diagram editors", IMessageProvider.INFORMATION);
    	} else {
    		setMessage(null);
    	}
    }

    protected void okPressed() {
    	useRuntimeFigures = useRuntimeFiguresButton.getSelection();
    	useMapMode = useMapModeButton.getSelection();
    	super.okPressed();
    }

    public String getRuntimeToken() {
    	return useRuntimeFigures ? null : "lite";
    }

    public MapModeCodeGenStrategy getMapModeCodeGenStrategy() {
    	return useMapMode ? MapModeCodeGenStrategy.DYNAMIC : MapModeCodeGenStrategy.STATIC;
    }

    public boolean isHelpAvailable() {
    	return false;
    }
}
@


1.3
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
a13 3
import org.eclipse.gmf.gmfgraph.util.FigureQualifiedNameSwitch;
import org.eclipse.gmf.gmfgraph.util.RuntimeFQNSwitch;
import org.eclipse.gmf.gmfgraph.util.RuntimeLiteFQNSwitch;
d102 2
a103 6
    public FigureQualifiedNameSwitch getFigureQualifiedNameSwitch() {
    	if (useRuntimeFigures) {
    		return new RuntimeFQNSwitch();
    	} else {
    		return new RuntimeLiteFQNSwitch();
    	}
d107 1
a107 9
    	if (useMapMode) {
    		return MapModeCodeGenStrategy.DYNAMIC;
    	} else {
    		return MapModeCodeGenStrategy.STATIC;
    	}
    }

    public boolean isUseMapMode() {
    	return useMapMode;
@


1.2
log
@moving towards jet-to-xpand switch
@
text
@d117 1
a117 1
    		return MapModeCodeGenStrategy.StaticIdentity;
@


1.1
log
@[bblajer] ##139022 Provide option to choose mapMode for figures
@
text
@d115 1
a115 1
    		return new MapModeCodeGenStrategy.RuntimeUnspecifiedMapMode();
d117 1
a117 1
    		return new MapModeCodeGenStrategy.StaticIdentityMapMode();
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@

