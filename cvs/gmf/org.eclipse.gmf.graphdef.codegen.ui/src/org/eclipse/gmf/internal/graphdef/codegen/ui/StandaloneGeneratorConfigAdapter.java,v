head	1.3;
access;
symbols
	v20080722-1827:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080425-1959:1.3
	v20080222-1200:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	v20070330-1300:1.2
	v20060316-0600:1.2
	v20070228-2000:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060526-1200:1.2
	I20060505-1400:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.05.17.22.14.13;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	63d7464cd3b54567;

1.2
date	2006.03.02.13.16.16;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.01.12.35.04;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@moving towards not using fqnswitch and java to tell draw2d figure names; let toolsmith to control what draw2d classes are being used; fqnSwitch argument replaced with simple token indicator
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.graphdef.codegen.ui;

import org.eclipse.gmf.graphdef.codegen.MapModeCodeGenStrategy;
import org.eclipse.gmf.graphdef.codegen.StandaloneGenerator;

class StandaloneGeneratorConfigAdapter implements StandaloneGenerator.Config {
	private final ConverterSection mySection;

	public StandaloneGeneratorConfigAdapter(ConverterSection section){
		mySection = section;
		getPluginActivatorClassName();
	}
	
	public String getMainPackageName() {
		return mySection.getStringOption(ConverterSection.OPTION_MAIN_PACKAGE_NAME);
	}
	
	public String getPluginActivatorClassName() {
		String activatorFQN = mySection.getPluginActivatorClassFQN();
		if (activatorFQN == null){
			activatorFQN = "";
		}
		return extractClassName(activatorFQN);
	}
	
	public String getPluginActivatorPackageName() {
		String activatorFQN = mySection.getPluginActivatorClassFQN();
		if (activatorFQN == null){
			activatorFQN = "";
		}
		return extractPackageName(activatorFQN);
	}
	
	public String getPluginFriendlyName() {
		return notNull(mySection.getPluginFriendlyName());
	}
	
	public String getPluginID() {
		return notNull(mySection.getPluginID());
	}
	
	public String getPluginProviderName() {
		return notNull(mySection.getPluginProviderName());
	}
	
	public MapModeCodeGenStrategy getMapMode() {
		return mySection.getBooleanOption(ConverterSection.OPTION_NEEDS_MAP_MODE) ? MapModeCodeGenStrategy.DYNAMIC : MapModeCodeGenStrategy.STATIC;
	}

	public String getRuntimeToken() {
		// TODO Auto-generated method stub
		return mySection.getBooleanOption(ConverterSection.OPTION_USE_RUNTIME_FIGURES) ? null : "lite";
	}
	
	/**
	 * FIXME: this does not work if fqn is inner class
	 * However, default PDE plugin generator treats any input string this way  
	 */
	private static String extractPackageName(String fqn){
		int lastDot = fqn.lastIndexOf('.');
		return lastDot < 0 ? "" : fqn.substring(0, lastDot);
	}
	
	/**
	 * @@see StandaloneGeneratorConfigAdapter#extractPackageName(String)
	 */
	private static String extractClassName(String fqn){
		int lastDot = fqn.lastIndexOf('.');
		return lastDot < 0 ? fqn : fqn.substring(lastDot + ".".length());
	}
	
	private static String notNull(String text){
		return text == null ? "" : text;
	}

}
@


1.2
log
@[mgolubev] #128779 generate figures as standalone plugin
#129362 - respect plug-in dependencies imposed by figure fqn switch
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
d14 1
d17 1
a17 1
public class StandaloneGeneratorConfigAdapter implements StandaloneGenerator.Config {
d57 7
a63 2
	public boolean needsMapMode() {
		return mySection.getBooleanOption(ConverterSection.OPTION_NEEDS_MAP_MODE);
@


1.1
log
@[mgolubev] #128779 Create standalone plugin with GEF figures
@
text
@a11 1

d14 1
a14 1
import org.eclipse.gmf.graphdef.codegen.standalone.StandaloneGeneratorConfig;
d16 1
a16 1
public class StandaloneGeneratorConfigAdapter implements StandaloneGeneratorConfig {
@

