head	1.8;
access;
symbols
	v20081020-0700:1.8
	v20080722-1827:1.8
	R2_1_maintenance:1.8.0.4
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080507-2230:1.8
	v20080425-1959:1.8
	v20080222-1200:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	RC3_20:1.8
	v20070601-1400:1.8
	v20070518-1300:1.8
	v20070504-1000:1.7
	v20070420-1000:1.7
	v20070330-1300:1.6
	v20070208-1800:1.6
	v20070119-1200:1.5.2.2
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	v20060925-1700:1.5.2.2
	v20060919-0800:1.5.2.2
	v20060907-1100:1.5.2.2
	M1_20:1.5
	v20060810-1700:1.5.2.1
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060531-1730:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.8
date	2007.05.16.16.50.44;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	444a464b36644567;

1.7
date	2007.04.18.18.05.30;	author aboyko;	state Exp;
branches;
next	1.6;
commitid	5b5246265de94567;

1.6
date	2006.10.03.15.01.51;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.27.21.12.49;	author ldamus;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.02.13.19.10.26;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.04.20.19.38;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.31.07;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.22;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.08.08.18.04.12;	author ldamus;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2006.08.31.19.54.05;	author mmostafa;	state Exp;
branches;
next	;


desc
@@


1.8
log
@gmf_head ahunter 070516 Update Copyright for files changed in 2007
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.services.action.filter;

import java.lang.ref.WeakReference;
import java.text.MessageFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.commands.operations.IOperationHistory;
import org.eclipse.core.commands.operations.IOperationHistoryListener;
import org.eclipse.core.commands.operations.OperationHistoryEvent;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.core.service.IProvider;
import org.eclipse.gmf.runtime.common.core.service.Service;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.action.ActionManager;
import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionDebugOptions;
import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionPlugin;
import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionStatusCodes;
import org.eclipse.gmf.runtime.common.ui.services.action.internal.filter.IActionFilterProvider;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;

/**
 * A service that provides action filters that can be used in evaluating action
 * expressions.
 * 
 * @@author khussey
 *  
 */
public class ActionFilterService
	extends Service
	implements IActionFilterProvider, IOperationHistoryListener {
	
	private static class CacheKey {

		public String name;

		public String value;

		public CacheKey() {
			this(null,null);
		}

		public CacheKey(String name, String value) {
			this.name = name;
			this.value = value;
		}

		public boolean equals(Object obj) {
			//This is our key, and it won't never be called except with another CacheKey,
			//therefore is no need to check for either null, or, instanceof CacheKey
			CacheKey other = (CacheKey) obj;
			return value.equals(other.value) && name.equals(other.name);
		}

		public int hashCode() {
			return name.hashCode() ^ value.hashCode();
		}
	}
	
	private static final CacheKey TEST_KEY = new CacheKey();

	/**
	 * A descriptor for action filter providers defined by a configuration
	 * element.
	 * 
	 * @@author khussey
	 *  
	 */
	protected static class ProviderDescriptor
		extends Service.ProviderDescriptor {

		/**
		 * The name of the 'name' XML attribute.
		 *  
		 */
		protected static final String A_NAME = "name"; //$NON-NLS-1$

		/**
		 * The name of the 'value' XML attribute.
		 *  
		 */
		protected static final String A_VALUE = "value"; //$NON-NLS-1$

		/**
		 * The name of the 'Attribute' XML element.
		 *  
		 */
		protected static final String E_ATTRIBUTE = "Attribute"; //$NON-NLS-1$

		/**
		 * Constructs a new action filter provider descriptor for the specified
		 * configuration element.
		 * 
		 * @@param element
		 *            The configuration element describing the provider.
		 *  
		 */
		protected ProviderDescriptor(IConfigurationElement element) {
			super(element);
		}

		/**
		 * Indicates whether this provider descriptor provides the specified
		 * operation.
		 * 
		 * @@return <code>true</code> if the name and value (optional) of the
		 *         specified operation matches the name and value (if provided)
		 *         of one of the attributes (if any) defined for this provider
		 *         descriptor or if this descriptor's policy or provider
		 *         provides the operation; <code>false</code> otherwise.
		 * @@param operation
		 *            The operation in question.
		 * 
		 * @@see IProvider#provides(IOperation)
		 *  
		 */
		public boolean provides(IOperation operation) {
			if (!getElement().isValid())
				return false;
			IConfigurationElement[] elements = getElement().getChildren(
				E_ATTRIBUTE);

			if (0 < elements.length) {
				TestAttributeOperation tao = (TestAttributeOperation) operation;

				for (int i = 0; i < elements.length; i++) {

					try {
						String name = elements[i].getAttribute(A_NAME);
						String value = elements[i].getAttribute(A_VALUE);

						if (name.equals(tao.getName())
							&& ((null == value) || value.equals(tao.getValue()))) {

							return true;
						} // if
					} catch (Exception e) {
						Trace.catching(CommonUIServicesActionPlugin.getDefault(),
							CommonUIServicesActionDebugOptions.EXCEPTIONS_CATCHING,
							getClass(), "provides", e); //$NON-NLS-1$
						Log.error(CommonUIServicesActionPlugin.getDefault(),
							CommonUIServicesActionStatusCodes.SERVICE_FAILURE, MessageFormat
								.format(INVALID_ELEMENT_MESSAGE_PATTERN,
									new Object[] {elements[i].getName()}), e);
					}
				} // for

				return false;
			} else {
				return super.provides(operation);
			} // else
		}
	}

	/**
	 * Prefix for action expressions that use the action filter service.
	 */
	protected final static String PREFIX = "@@"; //$NON-NLS-1$

	/**
	 * The singleton instance of the action filter service.
	 *  
	 */
	private final static ActionFilterService instance = new ActionFilterService();

	static {
		instance.configureProviders(CommonUIServicesActionPlugin.getPluginId(), "actionFilterProviders"); //$NON-NLS-1$
	}

	/**
	 * The cached results (for optimization).
	 *  
	 */
	private final Map cachedResults = new HashMap();

	/**
	 * The cached selection (for optimization). The selection is cached only for
	 * the purpose of validating the results cache when the service is asked to
	 * test an attribute.
	 *  
	 */
//	private ISelection cachedSelection = StructuredSelection.EMPTY;
	/*
	 * RATLC00527385 cachedSelection should be a weakreference, as it 
	 * has a reference to ISelection, and it is not a selection listener.
	 */
	private WeakReference cachedSelection = null;

	/**
	 * Constructs a new action filter service.
	 *  
	 */
	protected ActionFilterService() {
		super(true);

        getOperationHistory().addOperationHistoryListener(this);
	}

	/**
	 * Retrieves the singleton instance of the action filter service.
	 * 
	 * @@return The action filter service singleton.
	 *  
	 */
	public static ActionFilterService getInstance() {
		return instance;
	}

	/**
	 * Retrieves the value of the <code>cachedResults</code> instance
	 * variable.
	 * 
	 * @@return The value of the <code>cachedResults</code> instance variable.
	 *  
	 */
	private Map getCachedResults() {
		return cachedResults;
	}

	/**
	 * Retrieves the value of the <code>cachedSelection</code> instance
	 * variable.
	 * 
	 * @@return The value of the <code>cachedSelection</code> instance
	 *         variable.
	 *  
	 */
	private ISelection getCachedSelection() {
		if(cachedSelection != null) {
			Object sel = cachedSelection.get();
			if(sel != null)
				return (ISelection)sel;
		}
		return StructuredSelection.EMPTY;
	}

	/**
	 * Sets the <code>cachedSelection</code> instance variable to the
	 * specified value.
	 * 
	 * @@param selection
	 *            The new value for the <code>cachedSelection</code> instance
	 *            variable.
	 *  
	 */
	private void setCachedSelection(ISelection selection) {
		this.cachedSelection = new WeakReference(selection);
	}

	/**
	 * Retrieves the action manager for this action filter service.
	 * 
	 * @@return The action manager for this action filter service.
	 *  
	 */
	protected ActionManager getActionManager() {
		return ActionManager.getDefault();
	}
    
    /**
     * Returns the operation history from my action manager.
     * 
     * @@return the operation history
     */
    protected IOperationHistory getOperationHistory() {
        return getActionManager().getOperationHistory();
    }

	/**
	 * Creates a new action filter provider descriptor for the specified
	 * configuration element.
	 * 
	 * @@return A new action filter provider descriptor.
	 * @@param element
	 *            The configuration element from which to create the descriptor.
	 *  
	 */
	protected Service.ProviderDescriptor newProviderDescriptor(
			IConfigurationElement element) {

		return new ProviderDescriptor(element);
	}

	/**
	 * Clears this action filter service's cached results.
	 * <P>
	 * Clients are strongly discouraged from using this method. It will degrade
	 * performance.
	 *  
	 */
	public final void clearCachedResults() {
		getCachedResults().clear();
	}

	/**
	 * Updates the cached results and selection based on the current selection.
	 *  
	 */	
	protected void updateCachedData() {
		ISelection selection = null;
		IWorkbenchWindow window = PlatformUI.getWorkbench()
			.getActiveWorkbenchWindow();

		if (null != window) {
			selection = window.getSelectionService().getSelection();
		}

		selection = (null == selection ? StructuredSelection.EMPTY
			: selection);
        ISelection cachedSel = getCachedSelection();
        if (cachedSel != selection) {
			if (!cachedSel.equals(selection)) {
				clearCachedResults();
			}
			setCachedSelection(selection);
		}
	}

	/**
	 * Returns whether the specific attribute matches the state of the target
	 * object.
	 * 
	 * @@return <code>true</code> if the attribute matches; <code>false</code>
	 *         otherwise
	 * @@param target
	 *            The target object.
	 * @@param name
	 *            The attribute name.
	 * @@param value
	 *            The attriute value.
	 * 
	 * @@see org.eclipse.ui.IActionFilter#testAttribute(Object, String, String)
	 *  
	 */
	public boolean testAttribute(Object target, String name, String value) {

		updateCachedData();		
	
		TEST_KEY.name = name;
		TEST_KEY.value = value;	
		
		Boolean result = (Boolean) getCachedResults().get(TEST_KEY);

		if (null == result) {
			
			String normalizedname = name;
			if (name.startsWith(PREFIX)) {
				normalizedname = name.substring(1);
			}

			List results = execute(
				ExecutionStrategy.FIRST,
				new TestAttributeOperation(target, normalizedname, value));
			result = results.isEmpty() ? Boolean.FALSE
				: (Boolean) results.get(0);

			getCachedResults().put(new CacheKey(name, value), result);
		} // if

		return result.booleanValue();
	}
    
    /**
     * Clears my cache when my operation history changes.
     */
    public void historyNotification(OperationHistoryEvent event) {
        clearCachedResults();
        setCachedSelection(StructuredSelection.EMPTY);
    }   
}@


1.7
log
@[154748] gmf_head aboyko 070418 DiagramActionBarContributor.dispose should not access runtime registry
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d136 2
@


1.5
log
@[112826] gmf_head ldamus 060327 Adopt Eclipse 3.1 Operation History Framework - removing deprecated API
@
text
@a27 1
import org.eclipse.gmf.runtime.common.core.util.HashUtil;
d50 29
d314 1
a314 1
	 */
d326 5
a330 3

		if (!getCachedSelection().equals(selection)) {
			clearCachedResults();
a351 1
		Object[] parameters = new Object[] {String.valueOf(target), name, value};
d353 6
a358 11
		if (Trace.shouldTrace(CommonUIServicesActionPlugin.getDefault(),
			CommonUIServicesActionDebugOptions.METHODS_ENTERING)) {
			Trace.entering(CommonUIServicesActionPlugin.getDefault(),
				CommonUIServicesActionDebugOptions.METHODS_ENTERING, getClass(),
				"testAttribute", parameters); //$NON-NLS-1$
		}

		updateCachedData();

		Integer key = new Integer(HashUtil.hash(HashUtil.hash(name), value));
		Boolean result = (Boolean) getCachedResults().get(key);
d373 1
a373 1
			getCachedResults().put(key, result);
d385 1
a385 1
    }
@


1.5.2.1
log
@[140900] gmf_R1_0_maintenance ylulu 060808 ActionFilterService uses non-unique caching keys
@
text
@d28 1
a50 29
	
	private static class CacheKey {

		public String name;

		public String value;

		public CacheKey() {
			this(null,null);
		}

		public CacheKey(String name, String value) {
			this.name = name;
			this.value = value;
		}

		public boolean equals(Object obj) {
			//This is our key, and it won't never be called except with another CacheKey,
			//therefore is no need to check for either null, or, instanceof CacheKey
			CacheKey other = (CacheKey) obj;
			return value.equals(other.value) && name.equals(other.name);
		}

		public int hashCode() {
			return name.hashCode() ^ value.hashCode();
		}
	}
	
	private static final CacheKey TEST_KEY = new CacheKey();
d298 2
a299 2
        ISelection cachedSel = getCachedSelection();
		if ((cachedSel != selection) && !cachedSel.equals(selection)) {
d322 1
d324 11
a334 6
		updateCachedData();		
	
		TEST_KEY.name = name;
		TEST_KEY.value = value;	
		
		Boolean result = (Boolean) getCachedResults().get(TEST_KEY);
d349 1
a349 1
			getCachedResults().put(new CacheKey(name, value), result);
d361 1
a361 1
    }   
@


1.5.2.2
log
@[155886] gmf_R1_0_maintenance yLulu 060831 ActionFilterService should cut down on calls to ISelection::equals()
@
text
@d314 1
a314 1
	 */	
d327 2
a328 4
        if (cachedSel != selection) {
			if (!cachedSel.equals(selection)) {
				clearCachedResults();
			}
@


1.4
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@a23 1
import org.eclipse.gmf.runtime.common.core.command.CommandManager;
a246 10
	
	/**
	 * Retrieves the command manager for this action filter service.
	 * 
	 * @@return The command manager for this action filter service.
	 * @@deprecated Use {@@link #getOperationHistory()} instead.
	 */
	protected CommandManager getCommandManager() {
		return CommandManager.getDefault();
	}
@


1.3
log
@Bugzilla 110635 gmf_head keithc 051004 Delay configuration of services
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
d20 3
a24 2
import org.eclipse.gmf.runtime.common.core.command.CommandManagerChangeEvent;
import org.eclipse.gmf.runtime.common.core.command.ICommandManagerChangeListener;
a36 1
import org.eclipse.gmf.runtime.common.ui.services.action.internal.filter.TestAttributeOperation;
d51 1
a51 1
	implements IActionFilterProvider, ICommandManagerChangeListener {
d185 1
a185 1
		getCommandManager().addCommandManagerChangeListener(this);
d248 1
a248 1

d253 1
a253 1
	 *  
d256 1
a256 1
		return getActionManager().getCommandManager();
d258 9
d365 8
a372 14

	/**
	 * Handles an event indicating that a command manager has changed.
	 * 
	 * @@param event
	 *            The command manager change event to be handled.
	 * 
	 * @@see ICommandManagerChangeListener#commandManagerChanged(CommandManagerChangeEvent)
	 *  
	 */
	public void commandManagerChanged(CommandManagerChangeEvent event) {
		clearCachedResults();
		setCachedSelection(StructuredSelection.EMPTY);
	}
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a20 5
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;

d37 4
d155 4
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

