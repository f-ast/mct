head	1.2;
access;
symbols
	v20081020-0700:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080507-2230:1.2
	v20080425-1959:1.2
	v20080222-1200:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070504-1000:1.2
	v20070420-1000:1.2
	v20070330-1300:1.2
	v20070208-1800:1.2
	v20070119-1200:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	v20060907-1100:1.2
	M1_20:1.2
	v20060810-1700:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.2
date	2005.09.12.21.31.07;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.18;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.services.action.contributionitem;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.eclipse.jface.action.IAction;

import org.eclipse.gmf.runtime.common.ui.action.IDisposableAction;

/**
 * An action registry used for action life cycle management
 * 
 * @@author melaasar
 */
public class ActionRegistry {

	/**
	 * A hashmap that contains the actions.
	 */
	private Map map = new HashMap();

	/**
	 * Calls init on all actions which implement the {@@link IDisposableAction} interface so they
	 * can do their initialization.
	 */
	public void init() {
		Iterator actions = getActions();
		while (actions.hasNext()) {
			IAction action = (IAction) actions.next();
			if (action instanceof IDisposableAction)
				 ((IDisposableAction) action).init();
		}
	}

	/**
	 * Calls dispose on all actions which implement the {@@link IDisposableAction} interface so they
	 * can perform their own clean-up.
	 */
	public void dispose() {
		Iterator actions = getActions();
		while (actions.hasNext()) {
			IAction action = (IAction) actions.next();
			if (action instanceof IDisposableAction)
				 ((IDisposableAction) action).dispose();
		}
	}

	/**
	 * Returns the action with the given key. The key is the ID of the action
	 * (see {@@link #registerAction(IAction)}and
	 * {@@link #registerAction(String, IAction)}).
	 * 
	 * @@param key
	 *            the key
	 * @@return the action
	 */
	public IAction getAction(Object key) {
		return (IAction) map.get(key);
	}

	/**
	 * Returns an <code>Iterator</code> of all the actions.
	 * @@return the iterator
	 */
	protected Iterator getActions() {
		return map.values().iterator();
	}

	/**
	 * Register an action with this registry.  The action must have an id associated with it, which
	 * will be used as the key to later obtain the action using {@@link #getAction(Object)}. 
	 * @@param action the action to be registered
	 */
	public void registerAction(IAction action) {
		registerAction(action.getId(), action);
	}

	/**
	 * Register an action with this registry using the given id. The string
	 * <code>id</code> will be used as the key to later obtain the action
	 * using {@@link #getAction(Object)}.
	 * 
	 * @@param id
	 *            the action ID
	 * @@param action
	 *            the action
	 */
	public void registerAction(String id, IAction action) {
		map.put(id, action);
	}
}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

