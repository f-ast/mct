head	1.10;
access;
symbols
	v20081020-0700:1.10
	v20080722-1827:1.10
	R2_1_maintenance:1.10.0.4
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080507-2230:1.10
	v20080425-1959:1.10
	v20080222-1200:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.2
	R2_0:1.10
	R4_20:1.10
	RC3_20:1.10
	v20070601-1400:1.10
	v20070518-1300:1.10
	v20070504-1000:1.9
	v20070420-1000:1.9
	v20070330-1300:1.8
	v20070208-1800:1.8
	v20070119-1200:1.7.2.1
	M4_20:1.8
	v20061214-0000:1.8
	M3_20:1.8
	v20061013-1330:1.8
	v20060925-1700:1.7.2.1
	v20060919-0800:1.7.2.1
	v20060907-1100:1.7
	M1_20:1.7
	v20060810-1700:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1200:1.7
	v20060531-1730:1.7
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.7
	I20060407-1200:1.7
	I20060331-1000:1.7
	I20060324-0300:1.7
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051124-2000:1.6
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.5;
locks; strict;
comment	@# @;


1.10
date	2007.05.16.16.50.44;	author ahunter;	state Exp;
branches;
next	1.9;
commitid	444a464b36644567;

1.9
date	2007.04.18.18.05.30;	author aboyko;	state Exp;
branches;
next	1.8;
commitid	5b5246265de94567;

1.8
date	2006.10.03.15.01.53;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.20.20.58.03;	author ldamus;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2005.11.21.18.25.25;	author mmostafa;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.07.14.04.17;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.04.20.19.38;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.22.17.08.24;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.31.07;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.18;	author sshaw;	state Exp;
branches;
next	;

1.7.2.1
date	2006.09.13.16.41.28;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.10
log
@gmf_head ahunter 070516 Update Copyright for files changed in 2007
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.services.action.contributionitem;

import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.Platform;
import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.core.service.IProvider;
import org.eclipse.gmf.runtime.common.core.service.Service;
import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionPlugin;
import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.ContributeToActionBarsOperation;
import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.ContributeToPopupMenuOperation;
import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.DisposeContributionsOperation;
import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.IContributionDescriptorReader;
import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.IContributionItemProvider;
import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.ProviderContributionDescriptor;
import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.UpdateActionBarsOperation;
import org.eclipse.gmf.runtime.common.ui.services.util.ActivityFilterProviderDescriptor;
import org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor;
import org.eclipse.gmf.runtime.common.ui.util.WorkbenchPartDescriptor;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.IPluginContribution;
import org.eclipse.ui.IWorkbenchPart;
import org.osgi.framework.Bundle;

/**
 * A service for contributing items into different <code>IWorkbenchPart</code>'s 
 * contribution managers: ActionBars and ContextMenu(s).
 * 
 * @@see IContributionItemProvider
 * @@see AbstractContributionItemProvider
 * 
 * @@author melaasar, cmahoney
 */
public class ContributionItemService
	extends Service
	implements IContributionItemProvider {

	/**
	 * A descriptor for <code>IContributionItemProvider</code> defined
	 * by a configuration element.
	 */
	protected static class ProviderDescriptor
		extends ActivityFilterProviderDescriptor {

		private static final String CHECK_PLUGIN_LOADED = "checkPluginLoaded"; //$NON-NLS-1$

		/** the provider contribution descriptor parsed from XML */
		private ProviderContributionDescriptor contributionDescriptor;
		/** a flag to check if plugin is loaded */
		private boolean checkPluginLoaded = true;

		/**
		 * Constructs a <code>IContributionItemProvider</code> descriptor for
		 * the specified configuration element.
		 * 
		 * @@param element The configuration element describing the provider.
		 */
		public ProviderDescriptor(IConfigurationElement element) {
			super(element);

			String s = element.getAttribute(CHECK_PLUGIN_LOADED);
			if (s != null)
				this.checkPluginLoaded = Boolean.valueOf(s).booleanValue();

			this.contributionDescriptor =
				ProviderContributionDescriptor.parse(element);
			assert null != contributionDescriptor : "contributionDescriptor cannot be null"; //$NON-NLS-1$
		}

		/* (non-Javadoc)
		 * @@see org.eclipse.gmf.runtime.common.core.service.IProvider#provides(org.eclipse.gmf.runtime.common.core.service.IOperation)
		 */
		public boolean provides(IOperation operation) {

			// If contributions are to be disposed, dispose them regardless whether the plugin is loaded or not 
			if (operation instanceof DisposeContributionsOperation) {
				if (provider != null)
					return provider.provides(operation);
			}
			
			// filter providers based on disabled capabilities
			if (!super.provides(operation)) {
				return false;
			}
			
			// if asked to check that the plugin is loaded and it is not, ignore
			if (checkPluginLoaded && !isPluginLoaded()) {
				return false;
			}
			
			// if no XML contributions, forward to the provider 
			if (!contributionDescriptor.hasContributions()) {
				if (!policyInitialized){
					policyInitialized = true;
					policy = getPolicy();
				}
				if (policy!=null) {
					return getPolicy().provides(operation);
				}
				if (getProvider() != null) {
					return getProvider().provides(operation);
				}
			}

			if (operation instanceof ContributeToActionBarsOperation) {
				ContributeToActionBarsOperation op =
					(ContributeToActionBarsOperation) operation;
				return contributionDescriptor.hasContributionsFor(
					op.getWorkbenchPartDescriptor().getPartId(),
					op.getWorkbenchPartDescriptor().getPartClass());
			} else if (operation instanceof ContributeToPopupMenuOperation) {
				ContributeToPopupMenuOperation op =
					(ContributeToPopupMenuOperation) operation;
				ISelection selection =
					op
						.getWorkbenchPart()
						.getSite()
						.getSelectionProvider()
						.getSelection();
				return contributionDescriptor.hasContributionsFor(
					op.getPopupMenu(),
					selection);
			}
			return false;
		}

		/* (non-Javadoc)
		 * @@see org.eclipse.gmf.runtime.common.core.internal.service.Service.ProviderDescriptor#getProvider()
		 */
		public IProvider getProvider() {
			if (provider == null) {
				IProvider newProvider = super.getProvider();
				if (provider instanceof IContributionDescriptorReader) {
					IContributionDescriptorReader reader =
						(IContributionDescriptorReader) newProvider;
					reader.setContributionDescriptor(contributionDescriptor);
				}
				if (provider instanceof AbstractContributionItemProvider) {
					((AbstractContributionItemProvider) provider)
						.setPluginContribution(new IPluginContribution() {

							public String getLocalId() {
								return getElement().getDeclaringExtension()
									.getSimpleIdentifier();
							}

							public String getPluginId() {
								return getElement().getContributor().getName();
							}
						});
				}
				return newProvider;
			}
			return super.getProvider();
		}

		/**
		 * Verify if the declaring plugin of the provider is loaded; if it is not loaded, add a listener that.
		 * 
		 * @@return <code>true</code> if the declaring pluging of the propety
		 *         provider is loaded, <code>false</code> otherwise
		 */
		private boolean isPluginLoaded() {
			if (!getElement().isValid())
				return false;
			String pluginId = getElement().getDeclaringExtension().getContributor().getName();
			Bundle bundle = Platform.getBundle(pluginId);
			return null != bundle
				&& bundle.getState() == org.osgi.framework.Bundle.ACTIVE;

		}
	}

	/**
	 * The single instance of the contribution item service. 
	 */
	private static final ContributionItemService instance =
		new ContributionItemService();

	/**
	 * Returns the single instanceo of the <code>ContributionItemService</code>.
	 * 
	 * @@return The single instance of the <code>ContributionItemService</code>
	 */
	public static ContributionItemService getInstance() {
		return instance;
	}

	/**
	 * Creates a new <code>ContributionItemService</code> instance.
	 */
	private ContributionItemService() {
		 super();
		 configureProviders(CommonUIServicesActionPlugin.getPluginId(), "contributionItemProviders"); //$NON-NLS-1$
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.core.internal.service.Service#newProviderDescriptor(org.eclipse.core.runtime.IConfigurationElement)
	 */
	protected Service.ProviderDescriptor newProviderDescriptor(
		IConfigurationElement element) {
		return new ProviderDescriptor(element);
	}

	/**
	 * Makes contributions to the given <code>actionBars</code> that belong to the given part.
	 * @@param actionBars the action bars
	 * @@param workbenchPart the workbench part
	 * @@see #contributeToActionBars(IActionBars, IWorkbenchPartDescriptor)
	 */
	public void contributeToActionBars(
		IActionBars actionBars,
		IWorkbenchPart workbenchPart) {
		contributeToActionBars(
			actionBars,
			new WorkbenchPartDescriptor(
				workbenchPart.getSite().getId(),
				workbenchPart.getClass(),
				workbenchPart.getSite().getPage()));
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.IContributionItemProvider#contributeToActionBars(org.eclipse.ui.IActionBars, org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor)
	 */
	public void contributeToActionBars(
		IActionBars actionBars,
		IWorkbenchPartDescriptor workbenchPartDescriptor) {
		execute(new ContributeToActionBarsOperation(actionBars,
				workbenchPartDescriptor));
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.IContributionItemProvider#contributeToPopupMenu(org.eclipse.jface.action.IMenuManager,
	 *      org.eclipse.ui.IWorkbenchPart)
	 */
	public void contributeToPopupMenu(
		IMenuManager popupMenu,
		IWorkbenchPart workbenchPart) {
		execute(new ContributeToPopupMenuOperation(popupMenu, workbenchPart));
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.IContributionItemProvider#disposeContributions(org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor)
	 */
	public void disposeContributions(IWorkbenchPartDescriptor workbenchPartDescriptor) {
		execute(new DisposeContributionsOperation(workbenchPartDescriptor));
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.IContributionItemProvider#updateActionBars(org.eclipse.ui.IActionBars, org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor)
	 */
	public void updateActionBars(IActionBars actionBars,
			IWorkbenchPartDescriptor workbenchPartDescriptor) {
		execute(new UpdateActionBarsOperation(actionBars,
			workbenchPartDescriptor));
	}
	
	/**
	 * Disposes of the contributions that have been made to the <code>workbenchPart</code>.
	 * @@param workbenchPart the workbench part
	 */
	public void disposeContributions(IWorkbenchPart workbenchPart) {
		execute(
			new DisposeContributionsOperation(
				new WorkbenchPartDescriptor(
					workbenchPart.getSite().getId(),
					workbenchPart.getClass(),
					workbenchPart.getSite().getPage())));

	}

	/**
	 * Executes the operation with the REVERSE strategy.
	 * 
	 * @@param operation the operation to be executed.
	 */
	private void execute(IOperation operation) {
		execute(ExecutionStrategy.REVERSE, operation);
	}

		}
@


1.9
log
@[154748] gmf_head aboyko 070418 DiagramActionBarContributor.dispose should not access runtime registry
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d87 6
a135 3
			} else if (operation instanceof DisposeContributionsOperation) {
				if (provider != null)
					return provider.provides(operation);
d177 2
@


1.7
log
@[132588] gmf_head ldamus 060320 Fix deprecation warnings for IExtension#getNamespace
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
@


1.7.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.6
log
@bugzilla 117343 gmf-head  mmostafa 051121 getPolicy on the Service class get called more than 500,000 times
@
text
@d158 1
a158 1
								return getElement().getNamespace();
d174 1
a174 1
			String pluginId = getElement().getDeclaringExtension().getNamespace();
@


1.5
log
@Bugzilla 111651 gmf_head etworkow 051007 WorkbenchPartDescriptor is incorrectly spelled as WorkbenchPartDescirptor
@
text
@d100 5
a104 1
				if (getPolicy() != null) {
@


1.4
log
@Bugzilla 110635 gmf_head keithc 051004 Delay configuration of services
@
text
@d30 1
a30 1
import org.eclipse.gmf.runtime.common.ui.util.WorkbenchPartDescirptor;
d220 1
a220 1
			new WorkbenchPartDescirptor(
d271 1
a271 1
				new WorkbenchPartDescirptor(
@


1.3
log
@Bugzilla 109904 gmf_head sshaw 050922 Capability support for Contribution Item Service
Contribution by: Cherie Mahoney
@
text
@d20 1
d108 1
a108 1
			if (operation instanceof ContributeToActionBarsOperation) {			
a110 1

d129 1
a129 1
			} 
a175 1
		
d178 1
a178 1
	/** 
d181 1
a181 1
	private static ContributionItemService instance =
d197 2
a198 1
		 /* private constructor */
d233 1
a233 1
			workbenchPartDescriptor));
d287 1
a287 1
}
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a15 8
import org.eclipse.jface.action.IContributionItem;
import org.eclipse.jface.action.IContributionManager;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.IWorkbenchPart;
import org.osgi.framework.Bundle;

d26 2
d30 6
d44 1
a44 1
 * @@author melaasar
d55 1
a55 1
		extends Service.ProviderDescriptor {
d86 6
d93 1
a93 1
			if (checkPluginLoaded && !isPluginLoaded())
d95 1
d98 8
a105 2
			if (!contributionDescriptor.hasContributions())
				return super.provides(operation);
d107 1
a107 1
			if (operation instanceof ContributeToActionBarsOperation) {
d110 1
d129 1
a129 1
			}
d144 14
d164 1
a164 1
		 * Verify if the declaring pluging of the propety provider is loaded.
d176 1
d232 2
a233 4
		execute(
			new ContributeToActionBarsOperation(
				actionBars,
				workbenchPartDescriptor));
d236 5
a240 2
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.IContributionItemProvider#contributeToPopupMenu(org.eclipse.jface.action.IMenuManager, org.eclipse.ui.IWorkbenchPart)
d255 9
a286 15
	/**
	 * Removes the disabled contributions from a contribution manager.
	 * 
	 * @@param manager the contribution manager
	 */
	public void removeDisabledContributions(IContributionManager manager) {
		IContributionItem[] contributions = manager.getItems();
		for (int i = 0; i < contributions.length; i++) {
			if (contributions[i] instanceof IContributionManager)
				removeDisabledContributions(
					(IContributionManager) contributions[i]);
			if (!contributions[i].isEnabled())
				manager.remove(contributions[i]);
		}
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

