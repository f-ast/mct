package org.eclipse.gmf.runtime.diagram.ui.parts;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Collections;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CommandStack;

import org.eclipse.gef.commands.CommandStackListener;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gmf.runtime.common.core.command.CommandManager;

import org.eclipse.gmf.runtime.common.core.command.CommandManagerChangeEvent;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.common.core.command.ICommandManagerChangeListener;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;

import org.eclipse.gmf.runtime.diagram.ui.commands.XtoolsProxyCommand;

import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;

import org.eclipse.swt.widgets.Display;

public class DiagramCommandStack extends CommandStack {
    private Map stackToManager = new HashMap ();
    private IDiagramEditDomain editDomain;
    private Command cmdRecent = null;
    private CommandManager commandManager;

    public DiagramCommandStack (IDiagramEditDomain editDomain) {
        this.editDomain = editDomain;
    }

    public void addCommandStackListener (CommandStackListener listener) {
        final CommandStackListener csl = listener;
        removeCommandStackListener (csl);
        ICommandManagerChangeListener cmcl = new ICommandManagerChangeListener () {

            public void commandManagerChanged (CommandManagerChangeEvent event) {
                if (csl != null) csl.commandStackChanged (event);

            }

        }

        ;
        stackToManager.put (csl, cmcl);
        getCommandManager ().addCommandManagerChangeListener (cmcl);
    }

    public boolean canRedo () {
        return getCommandManager ().canRedo ();
    }

    public boolean canUndo () {
        return getCommandManager ().canUndo ();
    }

    public void execute (Command command) {
        execute (command, null);
    }

    public void execute (Command command, IProgressMonitor progressMonitor) {
        if (command == null || ! command.canExecute ()) return;

        execute (getICommand (command), progressMonitor);
    }

    protected void execute (ICommand command) {
        execute (command, null);
    }

    protected void execute (ICommand command, IProgressMonitor progressMonitor) {
        if (progressMonitor != null) {
            DiagramGraphicalViewer viewer = getDiagramGraphicalViewer ();
            if (viewer != null && Display.getCurrent () == null) viewer.enableUpdates (false);

            try {
                getCommandManager ().execute (command, progressMonitor);
            } finally {
                if (viewer != null) viewer.enableUpdates (true);

            }
        } else getCommandManager ().execute (command);

    }

    private DiagramGraphicalViewer getDiagramGraphicalViewer () {
        IDiagramEditDomain ded = getDiagramEditDomain ();
        DiagramGraphicalViewer viewer = null;
        if (ded instanceof DiagramEditDomain) {
            IDiagramWorkbenchPart dgrmWP = ((DiagramEditDomain) ded).getDiagramEditorPart ();
            if (dgrmWP != null) {
                IDiagramGraphicalViewer dgv = ((DiagramEditDomain) ded).getDiagramEditorPart ().getDiagramGraphicalViewer ();
                if (dgv instanceof DiagramGraphicalViewer) viewer = (DiagramGraphicalViewer) dgv;

            }
        }
        return viewer;
    }

    public static ICommand getICommand (Command command) {
        if (command instanceof CompoundCommand) {
            CompositeCommand cc = new CompositeCommand (command.getLabel ());
            Object [] subCommands = ((CompoundCommand) command).getChildren ();
            for (int i = 0;
            i < subCommands.length; i ++) {
                cc.compose (getICommand ((Command) subCommands [i]));
            }
            return cc.unwrap ();
        }
        if (command instanceof EtoolsProxyCommand) {
            return getICommand (((EtoolsProxyCommand) command).getICommand ());
        }
        return new CommandProxy (command);
    }

    public static ICommand getICommand (ICommand command) {
        if (command instanceof CompositeModelCommand) {
            CompositeModelCommand cc = new CompositeModelCommand (command.getLabel ());
            List subCommands = ((CompositeCommand) command).getCommands ();
            for (int i = 0;
            i < subCommands.size (); i ++) {
                cc.compose (getICommand ((ICommand) subCommands.get (i)));
            }
            return cc.unwrap ();
        }
        if (command instanceof CompositeCommand) {
            CompositeCommand cc = new CompositeCommand (command.getLabel ());
            List subCommands = ((CompositeCommand) command).getCommands ();
            for (int i = 0;
            i < subCommands.size (); i ++) {
                cc.compose (getICommand ((ICommand) subCommands.get (i)));
            }
            return cc.unwrap ();
        }
        if (command instanceof XtoolsProxyCommand) {
            return getICommand (((XtoolsProxyCommand) command).getCommand ());
        } else if (command instanceof CommandProxy) {
            return getICommand (((CommandProxy) command).getCommand ());
        }

        return command;
    }

    public void flush () {
        getCommandManager ().clear ();
    }

    public Command getMostRecentCommand () {
        return cmdRecent;
    }

    public Command getRedoCommand () {
        if (getCommandManager ().canRedo ()) {
            Command emptyCmd = new Command () {
            }

            ;
            emptyCmd.setLabel (getCommandManager ().getRedoLabel ());
            return emptyCmd;
        }
        return null;
    }

    public Command getUndoCommand () {
        if (getCommandManager ().canUndo ()) {
            Command emptyCmd = new Command () {
            }

            ;
            emptyCmd.setLabel (getCommandManager ().getUndoLabel ());
            return emptyCmd;
        }
        return null;
    }

    public void redo () {
        cmdRecent = getRedoCommand ();
        getCommandManager ().redo ();
    }

    public void removeCommandStackListener (CommandStackListener listener) {
        final CommandStackListener csl = listener;
        if (csl != null) {
            ICommandManagerChangeListener cmcl = (ICommandManagerChangeListener) stackToManager.get (csl);
            if (cmcl != null) getCommandManager ().removeCommandManagerChangeListener (cmcl);

            stackToManager.remove (csl);
        }
    }

    public void undo () {
        cmdRecent = getUndoCommand ();
        getCommandManager ().undo ();
    }

    protected IDiagramEditDomain getDiagramEditDomain () {
        return editDomain;
    }

    protected CommandManager getCommandManager () {
        if (commandManager == null) return CommandManager.getDefault ();

        return commandManager;
    }

    protected void setCommandManager (CommandManager commandManager) {
        this.commandManager = commandManager;
    }

    public static Collection getReturnValues (Command c) {
        if (c instanceof CompoundCommand) {
            CompoundCommand cc = (CompoundCommand) c;
            List l = new ArrayList (cc.size ());
            for (Iterator i = cc.getCommands ().iterator ();
            i.hasNext ();) l.addAll (getReturnValues ((Command) i.next ()));

            return l;
        } else if (c instanceof EtoolsProxyCommand) {
            return getReturnValues ((EtoolsProxyCommand) c);
        }

        return Collections.EMPTY_LIST;
    }

    public static Collection getReturnValues (EtoolsProxyCommand cmd) {
        return getReturnValues (cmd.getICommand ());
    }

    public static Collection getReturnValues (XtoolsProxyCommand cmd) {
        return getReturnValues (cmd.getCommand ());
    }

    public static Collection getReturnValues (CommandProxy cmd) {
        return getReturnValues (cmd.getCommand ());
    }

    public static Collection getReturnValues (ICommand cmd) {
        if (cmd instanceof CompositeCommand) {
            CompositeCommand cc = (CompositeCommand) cmd;
            List l = new ArrayList ();
            for (Iterator i = cc.getCommands ().iterator ();
            i.hasNext ();) l.addAll (getReturnValues ((ICommand) i.next ()));

            return l;
        } else if (cmd instanceof XtoolsProxyCommand) {
            return getReturnValues ((XtoolsProxyCommand) cmd);
        } else if (cmd instanceof CommandProxy) {
            return getReturnValues ((CommandProxy) cmd);
        } else {
            CommandResult r = cmd.getCommandResult ();
            Object o = r != null ? r.getReturnValue () : null;
            if (o instanceof Collection) {
                return (Collection) o;
            } else if (o != null) {
                return Collections.singletonList (o);
            }

        }

        return Collections.EMPTY_LIST;
    }

}

