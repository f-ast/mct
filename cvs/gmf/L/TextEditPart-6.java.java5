package org.eclipse.gmf.runtime.diagram.ui.internal.editparts;

import java.util.Dictionary;

import java.util.Hashtable;

import java.util.Map;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.StackLayout;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.emf.ecore.ENamedElement;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.gef.EditPart;

import org.eclipse.swt.graphics.Color;

import org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;

import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;

import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;

import org.eclipse.gmf.runtime.notation.View;

public class TextEditPart extends ShapeEditPart {
    private static final int TEXT_DEFAULT_WIDTH = 2645;
    private static final int TEXT_DEFAULT_HEIGHT = 344;
    private static final String [] appearanceProperties = new String [] {Properties.ID_ISVISIBLE, Properties.ID_FONTNAME, Properties.ID_FONTSIZE, Properties.ID_FONTBOLD, Properties.ID_FONTITALIC, Properties.ID_FONTCOLOR};

    public TextEditPart (View view) {
        super (view);
    }

    protected IFigure createFigure () {
        DefaultSizeNodeFigure nodeFigure = new DefaultSizeNodeFigure ();
        nodeFigure.setBorder (null);
        nodeFigure.setOpaque (false);
        nodeFigure.setLayoutManager (new StackLayout ());
        nodeFigure.setDefaultSize (new Dimension (TEXT_DEFAULT_WIDTH, TEXT_DEFAULT_HEIGHT));
        return nodeFigure;
    }

    protected void setBackgroundColor (Color color) {
        getFigure ().setBackgroundColor (null);
    }

    protected void refreshVisuals () {
        refreshVisibility ();
        refreshBounds ();
        refreshFont ();
    }

    private String [] getAppearancePropertyIDs () {
        return appearanceProperties;
    }

    public void fillAppearancePropertiesMap (Map properties) {
        if (getAppearancePropertyIDs ().length > 0) {
            final Dictionary local_properties = new Hashtable ();
            for (int i = 0;
            i < getAppearancePropertyIDs ().length; i ++) {
                ENamedElement element = MetaModelUtil.getElement (getAppearancePropertyIDs () [i]);
                if (element instanceof EStructuralFeature) {
                    local_properties.put (getAppearancePropertyIDs () [i], getStructuralFeatureValue ((EStructuralFeature) element));
                }
            }
            String semanticType = "";
            View view = getNotationView ();
            if (view != null) semanticType = view.getType ();

            properties.put (semanticType, local_properties);
        }
    }

    public EditPart getPrimaryChildEditPart () {
        return getChildBySemanticHint (CommonParserHint.DESCRIPTION);
    }

}

