package org.eclipse.gmf.runtime.diagram.ui.requests;

import java.util.ArrayList;

import java.util.Collections;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.requests.CreateConnectionRequest;

import org.eclipse.gef.requests.CreateRequest;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.CreateViewRequestFactory;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

public class CreateUnspecifiedTypeConnectionRequest extends CreateConnectionRequest {
    private List relationshipTypes;
    private Map requests = new HashMap ();
    private boolean useModelingAssistantService;
    private boolean directionReversed = false;
    private PreferencesHint preferencesHint;

    public CreateUnspecifiedTypeConnectionRequest (List relationshipTypes, boolean useModelingAssistantService, PreferencesHint preferencesHint) {
        super ();
        this.useModelingAssistantService = useModelingAssistantService;
        this.relationshipTypes = relationshipTypes;
        this.preferencesHint = preferencesHint;
        createRequests ();
    }

    private void createRequests () {
        for (Iterator iter = relationshipTypes.iterator ();
        iter.hasNext ();) {
            IElementType elementType = (IElementType) iter.next ();
            Request request = CreateViewRequestFactory.getCreateConnectionRequest (elementType, getPreferencesHint ());
            request.setType (getType ());
            requests.put (elementType, request);
        }
    }

    public CreateRequest getRequestForType (IElementType relationshipType) {
        if (requests != null) {
            return (CreateConnectionRequest) requests.get (relationshipType);
        }
        return null;
    }

    public List getAllRequests () {
        if (requests != null) {
            return new ArrayList (requests.values ());
        }
        return Collections.EMPTY_LIST;
    }

    public List getElementTypes () {
        return relationshipTypes;
    }

    public void setSourceEditPart (EditPart part) {
        if (requests != null) {
            for (Iterator iter = requests.values ().iterator ();
            iter.hasNext ();) {
                CreateConnectionRequest request = (CreateConnectionRequest) iter.next ();
                request.setSourceEditPart (part);
            }
        }
        super.setSourceEditPart (part);
    }

    public void setTargetEditPart (EditPart part) {
        if (requests != null) {
            for (Iterator iter = requests.values ().iterator ();
            iter.hasNext ();) {
                CreateConnectionRequest request = (CreateConnectionRequest) iter.next ();
                request.setTargetEditPart (part);
            }
        }
        super.setTargetEditPart (part);
    }

    public void setLocation (Point location) {
        if (requests != null) {
            for (Iterator iter = requests.values ().iterator ();
            iter.hasNext ();) {
                CreateConnectionRequest request = (CreateConnectionRequest) iter.next ();
                request.setLocation (location);
            }
        }
        super.setLocation (location);
    }

    public void setType (Object type) {
        if (requests != null) {
            for (Iterator iter = requests.values ().iterator ();
            iter.hasNext ();) {
                CreateConnectionRequest request = (CreateConnectionRequest) iter.next ();
                request.setType (type);
            }
        }
        super.setType (type);
    }

    public boolean isDirectionReversed () {
        return directionReversed;
    }

    public void setDirectionReversed (boolean directionReversed) {
        this.directionReversed = directionReversed;
    }

    public boolean useModelingAssistantService () {
        return useModelingAssistantService;
    }

    protected PreferencesHint getPreferencesHint () {
        return preferencesHint;
    }

}

