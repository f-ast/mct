package org.eclipse.gmf.graphdef.editor.edit.policies;

import java.util.Iterator;

import org.eclipse.emf.ecore.EAnnotation;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gmf.graphdef.editor.edit.commands.DiagramElementFigureCreateCommand;

import org.eclipse.gmf.graphdef.editor.edit.commands.DiagramElementFigureReorientCommand;

import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionVisualFacetsEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramElementFigureEditPart;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;

import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;

import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

public class ConnectionItemSemanticEditPolicy extends GMFGraphBaseItemSemanticEditPolicy {

    protected Command getDestroyElementCommand (DestroyElementRequest req) {
        CompoundCommand cc = getDestroyEdgesCommand ();
        addDestroyChildNodesCommand (cc);
        addDestroyShortcutsCommand (cc);
        View view = (View) getHost ().getModel ();
        if (view.getEAnnotation ("Shortcut") != null) {
            req.setElementToDestroy (view);
        }
        cc.add (getGEFWrapper (new DestroyElementCommand (req)));
        return cc.unwrap ();
    }

    protected void addDestroyChildNodesCommand (CompoundCommand cmd) {
        View view = (View) getHost ().getModel ();
        EAnnotation annotation = view.getEAnnotation ("Shortcut");
        if (annotation != null) {
            return;
        }
        for (Iterator it = view.getChildren ().iterator ();
        it.hasNext ();) {
            Node node = (Node) it.next ();
            switch (GMFGraphVisualIDRegistry.getVisualID (node)) {
                case ConnectionVisualFacetsEditPart.VISUAL_ID :
                    for (Iterator cit = node.getChildren ().iterator ();
                    cit.hasNext ();) {
                        Node cnode = (Node) cit.next ();
                        switch (GMFGraphVisualIDRegistry.getVisualID (cnode)) {
                        }
                    }
                    break;
            }
        }
    }

    protected Command getCreateRelationshipCommand (CreateRelationshipRequest req) {
        Command command = req.getTarget () == null ? getStartCreateRelationshipCommand (req) : getCompleteCreateRelationshipCommand (req);
        return command != null ? command : super.getCreateRelationshipCommand (req);
    }

    protected Command getStartCreateRelationshipCommand (CreateRelationshipRequest req) {
        if (GMFGraphElementTypes.DiagramElementFigure_4005 == req.getElementType ()) {
            return getGEFWrapper (new DiagramElementFigureCreateCommand (req, req.getSource (), req.getTarget ()));
        }
        return null;
    }

    protected Command getCompleteCreateRelationshipCommand (CreateRelationshipRequest req) {
        if (GMFGraphElementTypes.DiagramElementFigure_4005 == req.getElementType ()) {
            return null;
        }
        return null;
    }

    protected Command getReorientReferenceRelationshipCommand (ReorientReferenceRelationshipRequest req) {
        switch (getVisualID (req)) {
            case DiagramElementFigureEditPart.VISUAL_ID :
                return getGEFWrapper (new DiagramElementFigureReorientCommand (req));
        }
        return super.getReorientReferenceRelationshipCommand (req);
    }

}

