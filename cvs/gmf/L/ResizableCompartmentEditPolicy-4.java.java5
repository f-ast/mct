package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.beans.PropertyChangeEvent;

import java.beans.PropertyChangeListener;

import java.util.ArrayList;

import java.util.List;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPartListener;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.requests.ChangeBoundsRequest;

import org.eclipse.gmf.runtime.diagram.core.listener.PresentationListener;

import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.figures.GatedPaneFigure;

import org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure;

import org.eclipse.gmf.runtime.diagram.ui.handles.CompartmentCollapseHandle;

import org.eclipse.gmf.runtime.diagram.ui.internal.handles.CompartmentResizeHandle;

import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;

public class ResizableCompartmentEditPolicy extends ResizableEditPolicyEx {
    private boolean horizontal;

    public ResizableCompartmentEditPolicy () {
        this (false);
    }

    public ResizableCompartmentEditPolicy (boolean horizontal) {
        this.horizontal = horizontal;
    }

    protected boolean isHorizontal () {
        return horizontal;
    }

    protected List createCollapseHandles () {
        IGraphicalEditPart part = (IGraphicalEditPart) getHost ();
        List collapseHandles = new ArrayList ();
        collapseHandles.add (new CompartmentCollapseHandle (part));
        return collapseHandles;
    }

    protected List createSelectionHandles () {
        IGraphicalEditPart part = (IGraphicalEditPart) getHost ();
        int d1 = isHorizontal () ? PositionConstants.WEST : PositionConstants.NORTH;
        int d2 = isHorizontal () ? PositionConstants.EAST : PositionConstants.SOUTH;
        List selectionHandles = new ArrayList ();
        selectionHandles.addAll (createCollapseHandles ());
        selectionHandles.add (new CompartmentResizeHandle (part, d1));
        selectionHandles.add (new CompartmentResizeHandle (part, d2));
        return selectionHandles;
    }

    protected void showSelection () {
        super.showSelection ();
        if (getHost ().getSelected () != EditPart.SELECTED_NONE) {
            if (getGraphicalEditPart ().getFigure () instanceof ResizableCompartmentFigure) {
                ResizableCompartmentFigure f = (ResizableCompartmentFigure) getGraphicalEditPart ().getFigure ();
                f.setSelected (true);
            }
            if (getGraphicalEditPart ().getFigure () instanceof GatedPaneFigure) {
                GatedPaneFigure gpf = (GatedPaneFigure) getGraphicalEditPart ().getFigure ();
                IFigure f = gpf.getElementPane ();
                if (f instanceof ResizableCompartmentFigure) {
                    ((ResizableCompartmentFigure) f).setSelected (true);
                }
            }
        }
    }

    protected void hideSelection () {
        super.hideSelection ();
        if (getHost ().getSelected () == EditPart.SELECTED_NONE) {
            if (getGraphicalEditPart ().getFigure () instanceof ResizableCompartmentFigure) {
                ResizableCompartmentFigure f = (ResizableCompartmentFigure) getGraphicalEditPart ().getFigure ();
                f.setSelected (false);
            }
            if (getGraphicalEditPart ().getFigure () instanceof GatedPaneFigure) {
                GatedPaneFigure gpf = (GatedPaneFigure) getGraphicalEditPart ().getFigure ();
                IFigure f = gpf.getElementPane ();
                if (f instanceof ResizableCompartmentFigure) {
                    ((ResizableCompartmentFigure) f).setSelected (false);
                }
            }
        }
    }

    private EditPartListener hostListener;
    private EditPartListener parentListener;
    private PropertyChangeListener propertyListener;

    protected void addSelectionListener () {
        hostListener = new EditPartListener.Stub () {

            public void selectedStateChanged (EditPart part) {
                setSelectedState ();
                setFocus (part.hasFocus ());
            }

        }

        ;
        getHost ().addEditPartListener (hostListener);
        parentListener = new EditPartListener.Stub () {

            public void selectedStateChanged (EditPart part) {
                setSelectedState ();
            }

        }

        ;
        getParentGraphicEditPart ().addEditPartListener (parentListener);
        propertyListener = new PropertyChangeListener () {

            public void propertyChange (PropertyChangeEvent evt) {
                if (Properties.ID_ISVISIBLE.equals (evt.getPropertyName ())) setSelectedState ();

            }

        }

        ;
        PresentationListener.getInstance ().addPropertyChangeListener (getGraphicalEditPart ().getNotationView (), propertyListener);
    }

    protected void removeSelectionListener () {
        PresentationListener.getInstance ().removePropertyChangeListener (getGraphicalEditPart ().getNotationView (), propertyListener);
        getHost ().removeEditPartListener (hostListener);
        getParentGraphicEditPart ().removeEditPartListener (parentListener);
    }

    protected void setSelectedState () {
        int hostState = getHost ().getSelected ();
        int topState = EditPart.SELECTED_NONE;
        if (((GraphicalEditPart) getGraphicalEditPart ()).getTopGraphicEditPart () != null) {
            topState = ((GraphicalEditPart) getGraphicalEditPart ()).getTopGraphicEditPart ().getSelected ();
        }
        boolean vis = getGraphicalEditPart ().getNotationView ().isVisible ();
        if (vis && ((hostState != EditPart.SELECTED_NONE || topState != EditPart.SELECTED_NONE))) setSelectedState (EditPart.SELECTED);
        else setSelectedState (EditPart.SELECTED_NONE);

    }

    private GraphicalEditPart getParentGraphicEditPart () {
        return (GraphicalEditPart) getGraphicalEditPart ().getParent ();
    }

    private IGraphicalEditPart getGraphicalEditPart () {
        return (IGraphicalEditPart) getHost ();
    }

    protected void showChangeBoundsFeedback (ChangeBoundsRequest request) {
        super.showChangeBoundsFeedback (getResizeChildrenRequest (request));
    }

    protected Command getResizeCommand (ChangeBoundsRequest request) {
        return getHost ().getParent ().getCommand (getResizeChildrenRequest (request));
    }

    private ChangeBoundsRequest getResizeChildrenRequest (ChangeBoundsRequest r) {
        Dimension delta = r.getSizeDelta ();
        ResizableCompartmentFigure f = (ResizableCompartmentFigure) getHostFigure ();
        Dimension fd = f.getSize ().getExpanded (delta);
        fd.intersect (f.getMaximumSize ()).union (f.getMinimumSize ());
        delta = fd.shrink (f.getSize ().width, f.getSize ().height);
        boolean moved = (r.getResizeDirection () & PositionConstants.NORTH_WEST) != 0;
        IFigure a = f.getAdjacentSibling (moved);
        if (a != null) {
            Dimension ad = a.getSize ().getExpanded (delta.negate ());
            ad.intersect (a.getMaximumSize ()).union (a.getMinimumSize ());
            delta = ad.shrink (a.getSize ().width, a.getSize ().height).negate ();
        } else {
            delta.shrink (delta.width, delta.height);
        }
        ChangeBoundsRequest req = new ChangeBoundsRequest (REQ_RESIZE_CHILDREN);
        req.setEditParts (getHost ());
        req.setLocation (r.getLocation ());
        req.setResizeDirection (r.getResizeDirection ());
        req.setSizeDelta (delta);
        if (moved) req.setMoveDelta (new Point (- delta.width, - delta.height));

        return req;
    }

}

