package org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.View;

public class LabelSnapBackEditPolicy extends GraphicalNodeEditPolicy {

    public boolean understandsRequest (Request request) {
        return RequestConstants.REQ_SNAP_BACK.equals (request.getType ());
    }

    public Command getCommand (Request request) {
        if (RequestConstants.REQ_SNAP_BACK.equals (request.getType ())) {
            View view = (View) getHost ().getModel ();
            String hint = view.getType ();
            Point offset = LabelEditPart.getSnapBackPosition (hint);
            if (offset == null) return null;

            ICommand moveCommand = new SetBoundsCommand (PresentationResourceManager.getI18NString ("SetLocationCommand.Label.Resize"), new EObjectAdapter (view), offset);
            return new EtoolsProxyCommand (moveCommand);
        }
        return null;
    }

}

