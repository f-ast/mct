package org.eclipse.gmf.runtime.diagram.ui.menus;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.jface.util.Assert;

import org.eclipse.jface.viewers.ILabelProvider;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.events.SelectionListener;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Display;

import org.eclipse.swt.widgets.Menu;

import org.eclipse.swt.widgets.MenuItem;

public class PopupMenu {
    public static class CascadingMenu {
        private Object parentMenuItem;
        private PopupMenu subMenu;

        public CascadingMenu (Object aParentMenuItem, PopupMenu aSubMenu) {
            this.parentMenuItem = aParentMenuItem;
            this.subMenu = aSubMenu;
        }

        public Object getParentMenuItem () {
            return parentMenuItem;
        }

        public PopupMenu getSubMenu () {
            return subMenu;
        }

    }

    private List content;
    private ILabelProvider labelProvider;
    private List resultList = new ArrayList ();

    public PopupMenu (List aContent, ILabelProvider aLabelProvider) {
        setContent (aContent);
        setLabelProvider (aLabelProvider);
    }

    public boolean show (Control parent) {
        Menu menu = new Menu (parent);
        createMenuItems (menu, this, new ArrayList ());
        menu.setVisible (true);
        Display display = menu.getDisplay ();
        while (! menu.isDisposed () && menu.isVisible ()) {
            if (! display.readAndDispatch ()) display.sleep ();

        }
        if (! menu.isDisposed ()) {
            menu.dispose ();
            if (getResult () != null) {
                return true;
            }
        }
        return false;
    }

    protected void createMenuItems (Menu parentMenu, final PopupMenu rootMenu, final List resultThusFar) {
        Assert.isNotNull (getContent ());
        Assert.isNotNull (getLabelProvider ());
        for (Iterator iter = getContent ().iterator ();
        iter.hasNext ();) {
            Object contentObject = iter.next ();
            MenuItem menuItem;
            if (contentObject instanceof CascadingMenu) {
                PopupMenu subMenu = ((CascadingMenu) contentObject).getSubMenu ();
                contentObject = ((CascadingMenu) contentObject).getParentMenuItem ();
                List thisResult = new ArrayList (resultThusFar);
                thisResult.add (contentObject);
                menuItem = new MenuItem (parentMenu, SWT.CASCADE);
                menuItem.setMenu (new Menu (parentMenu));
                subMenu.createMenuItems (menuItem.getMenu (), rootMenu, thisResult);
            } else {
                menuItem = new MenuItem (parentMenu, SWT.NONE);
            }
            final Object fContentObject = contentObject;
            menuItem.setText (getLabelProvider ().getText (contentObject));
            menuItem.setImage (getLabelProvider ().getImage (contentObject));
            menuItem.addSelectionListener (new SelectionListener () {

                public void widgetSelected (SelectionEvent e) {
                    resultThusFar.add (fContentObject);
                    rootMenu.setResult (resultThusFar);
                }

                public void widgetDefaultSelected (SelectionEvent e) {
                    resultThusFar.add (fContentObject);
                    rootMenu.setResult (resultThusFar);
                }

            }

            );
        }
    }

    protected List getContent () {
        return content;
    }

    public void setContent (List aContent) {
        this.content = aContent;
    }

    protected ILabelProvider getLabelProvider () {
        return labelProvider;
    }

    public void setLabelProvider (ILabelProvider aLabelProvider) {
        this.labelProvider = aLabelProvider;
    }

    public Object getResult () {
        if (resultList == null || resultList.isEmpty ()) {
            return null;
        } else if (resultList.size () == 1) {
            return resultList.get (0);
        }

        return resultList;
    }

    protected void setResult (List aResultList) {
        this.resultList = aResultList;
    }

}

