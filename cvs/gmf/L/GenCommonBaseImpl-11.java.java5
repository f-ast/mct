package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.Viewmap;

public abstract class GenCommonBaseImpl extends EObjectImpl implements GenCommonBase {
    protected GenClass diagramRunTimeClass = null;
    protected static final int VISUAL_ID_EDEFAULT = 0;
    protected int visualID = VISUAL_ID_EDEFAULT;
    protected static final String EDIT_PART_CLASS_NAME_EDEFAULT = null;
    protected String editPartClassName = EDIT_PART_CLASS_NAME_EDEFAULT;
    protected static final String ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT = null;
    protected String itemSemanticEditPolicyClassName = ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT;
    protected static final String NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT = null;
    protected String notationViewFactoryClassName = NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT;
    protected Viewmap viewmap = null;

    protected GenCommonBaseImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenCommonBase ();
    }

    public GenClass getDiagramRunTimeClass () {
        if (diagramRunTimeClass != null && diagramRunTimeClass.eIsProxy ()) {
            GenClass oldDiagramRunTimeClass = diagramRunTimeClass;
            diagramRunTimeClass = (GenClass) eResolveProxy ((InternalEObject) diagramRunTimeClass);
            if (diagramRunTimeClass != oldDiagramRunTimeClass) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS, oldDiagramRunTimeClass, diagramRunTimeClass));

            }
        }
        return diagramRunTimeClass;
    }

    public GenClass basicGetDiagramRunTimeClass () {
        return diagramRunTimeClass;
    }

    public void setDiagramRunTimeClass (GenClass newDiagramRunTimeClass) {
        GenClass oldDiagramRunTimeClass = diagramRunTimeClass;
        diagramRunTimeClass = newDiagramRunTimeClass;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS, oldDiagramRunTimeClass, diagramRunTimeClass));

    }

    public int getVisualID () {
        return visualID;
    }

    public void setVisualID (int newVisualID) {
        int oldVisualID = visualID;
        visualID = newVisualID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID, oldVisualID, visualID));

    }

    public String getEditPartClassNameGen () {
        return editPartClassName;
    }

    public String getEditPartClassName () {
        String value = getEditPartClassNameGen ();
        if (isEmpty (value)) {
            value = getClassNamePart () + EDIT_PART_SUFFIX;
        }
        return value;
    }

    public void setEditPartClassName (String newEditPartClassName) {
        String oldEditPartClassName = editPartClassName;
        editPartClassName = newEditPartClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME, oldEditPartClassName, editPartClassName));

    }

    public String getItemSemanticEditPolicyClassNameGen () {
        return itemSemanticEditPolicyClassName;
    }

    public String getItemSemanticEditPolicyClassName () {
        String value = getItemSemanticEditPolicyClassNameGen ();
        if (isEmpty (value)) {
            value = getClassNamePart () + ITEM_SEMANTIC_EDIT_POLICY_SUFFIX;
        }
        return value;
    }

    public void setItemSemanticEditPolicyClassName (String newItemSemanticEditPolicyClassName) {
        String oldItemSemanticEditPolicyClassName = itemSemanticEditPolicyClassName;
        itemSemanticEditPolicyClassName = newItemSemanticEditPolicyClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME, oldItemSemanticEditPolicyClassName, itemSemanticEditPolicyClassName));

    }

    public String getNotationViewFactoryClassNameGen () {
        return notationViewFactoryClassName;
    }

    public String getNotationViewFactoryClassName () {
        String value = getNotationViewFactoryClassNameGen ();
        if (isEmpty (value)) {
            value = getClassNamePart () + NOTATION_VIEW_FACTORY_SUFFIX;
        }
        return value;
    }

    public void setNotationViewFactoryClassName (String newNotationViewFactoryClassName) {
        String oldNotationViewFactoryClassName = notationViewFactoryClassName;
        notationViewFactoryClassName = newNotationViewFactoryClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME, oldNotationViewFactoryClassName, notationViewFactoryClassName));

    }

    public Viewmap getViewmap () {
        return viewmap;
    }

    public NotificationChain basicSetViewmap (Viewmap newViewmap, NotificationChain msgs) {
        Viewmap oldViewmap = viewmap;
        viewmap = newViewmap;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__VIEWMAP, oldViewmap, newViewmap);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setViewmap (Viewmap newViewmap) {
        if (newViewmap != viewmap) {
            NotificationChain msgs = null;
            if (viewmap != null) msgs = ((InternalEObject) viewmap).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_COMMON_BASE__VIEWMAP, null, msgs);

            if (newViewmap != null) msgs = ((InternalEObject) newViewmap).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_COMMON_BASE__VIEWMAP, null, msgs);

            msgs = basicSetViewmap (newViewmap, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__VIEWMAP, newViewmap, newViewmap));

    }

    static boolean isEmpty (String s) {
        return s == null || s.length () == 0;
    }

    public abstract String getClassNamePrefix ();

    public abstract String getClassNameSuffux ();

    public String getClassNamePart () {
        return getClassNamePrefix () + getClassNameSuffux ();
    }

    public abstract String getUniqueIdentifier ();

    public String asJavaConstantName (String name) {
        name = name.toUpperCase ();
        StringBuffer b = new StringBuffer ();
        for (int i = 0;
        i < name.length (); i ++) {
            char c = name.charAt (i);
            if (i == 0) {
                if (! Character.isJavaIdentifierStart (c)) {
                    c = '_';
                }
            } else {
                if (! Character.isJavaIdentifierPart (c)) {
                    c = '_';
                }
            }
            b.append (c);
        }
        return b.toString ();
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP :
                    return basicSetViewmap (null, msgs);
                default :
                    return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
            }
        }
        return eBasicSetContainer (null, featureID, msgs);
    }

    public String getEditPartQualifiedClassName () {
        return getDiagram ().getEditPartsPackageName () + '.' + getEditPartClassName ();
    }

    public String getItemSemanticEditPolicyQualifiedClassName () {
        return getDiagram ().getEditPoliciesPackageName () + '.' + getItemSemanticEditPolicyClassName ();
    }

    public String getNotationViewFactoryQualifiedClassName () {
        return getDiagram ().getNotationViewFactoriesPackageName () + '.' + getNotationViewFactoryClassName ();
    }

    public abstract GenDiagram getDiagram ();

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS :
                if (resolve) return getDiagramRunTimeClass ();

                return basicGetDiagramRunTimeClass ();
            case GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID :
                return new Integer (getVisualID ());
            case GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME :
                return getEditPartClassName ();
            case GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                return getItemSemanticEditPolicyClassName ();
            case GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME :
                return getNotationViewFactoryClassName ();
            case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP :
                return getViewmap ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS :
                setDiagramRunTimeClass ((GenClass) newValue);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID :
                setVisualID (((Integer) newValue).intValue ());
                return;
            case GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME :
                setEditPartClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                setItemSemanticEditPolicyClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME :
                setNotationViewFactoryClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP :
                setViewmap ((Viewmap) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS :
                setDiagramRunTimeClass ((GenClass) null);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID :
                setVisualID (VISUAL_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME :
                setEditPartClassName (EDIT_PART_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                setItemSemanticEditPolicyClassName (ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME :
                setNotationViewFactoryClassName (NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP :
                setViewmap ((Viewmap) null);
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS :
                return diagramRunTimeClass != null;
            case GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID :
                return visualID != VISUAL_ID_EDEFAULT;
            case GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME :
                return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : ! EDIT_PART_CLASS_NAME_EDEFAULT.equals (editPartClassName);
            case GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                return ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? itemSemanticEditPolicyClassName != null : ! ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals (itemSemanticEditPolicyClassName);
            case GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME :
                return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : ! NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals (notationViewFactoryClassName);
            case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP :
                return viewmap != null;
        }
        return eDynamicIsSet (eFeature);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (visualID: ");
        result.append (visualID);
        result.append (", editPartClassName: ");
        result.append (editPartClassName);
        result.append (", itemSemanticEditPolicyClassName: ");
        result.append (itemSemanticEditPolicyClassName);
        result.append (", notationViewFactoryClassName: ");
        result.append (notationViewFactoryClassName);
        result.append (')');
        return result.toString ();
    }

}

