package org.eclipse.gmf.runtime.diagram.ui.commands;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.util.Assert;

public class SetBoundsCommand extends AbstractModelCommand {
    private IAdaptable adapter;
    private Point location;
    private Dimension size;

    public SetBoundsCommand (String label, IAdaptable adapter, Rectangle bounds) {
        super (label, adapter);
        Assert.isNotNull (adapter, "view cannot be null");
        Assert.isNotNull (bounds, "bounds cannot be null");
        this.adapter = adapter;
        this.location = bounds.getLocation ();
        this.size = bounds.getSize ();
    }

    public SetBoundsCommand (String label, IAdaptable adapter, Point location) {
        super (label, adapter);
        Assert.isNotNull (adapter, "view cannot be null");
        Assert.isNotNull (location, "location cannot be null");
        this.adapter = adapter;
        this.location = location;
    }

    public SetBoundsCommand (String label, IAdaptable adapter, Dimension size) {
        super (label, adapter);
        Assert.isNotNull (adapter, "view cannot be null");
        Assert.isNotNull (size, "size cannot be null");
        this.adapter = adapter;
        this.size = size;
    }

    protected CommandResult doExecute (IProgressMonitor progressMonitor) {
        if (adapter == null) return newErrorCommandResult ("SetBoundsCommand: viewAdapter does not adapt to IView.class");

        View view = (View) adapter.getAdapter (View.class);
        if (location != null) {
            ViewUtil.setStructuralFeatureValue (view, NotationPackage.eINSTANCE.getLocation_X (), new Integer (location.x));
            ViewUtil.setStructuralFeatureValue (view, NotationPackage.eINSTANCE.getLocation_Y (), new Integer (location.y));
        }
        if (size != null) {
            ViewUtil.setStructuralFeatureValue (view, NotationPackage.eINSTANCE.getSize_Width (), new Integer (size.width));
            ViewUtil.setStructuralFeatureValue (view, NotationPackage.eINSTANCE.getSize_Height (), new Integer (size.height));
        }
        return newOKCommandResult ();
    }

}

