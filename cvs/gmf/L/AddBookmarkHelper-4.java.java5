package org.eclipse.gmf.runtime.diagram.ui.internal.resources;

import java.util.HashMap;

import java.util.Iterator;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IMarker;

import org.eclipse.core.resources.IResource;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPart;

import org.eclipse.jface.dialogs.IInputValidator;

import org.eclipse.jface.dialogs.InputDialog;

import org.eclipse.jface.util.Assert;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.jface.window.Window;

import org.eclipse.ui.IEditorInput;

import org.eclipse.ui.IEditorPart;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.resources.IBookmark;

import org.eclipse.gmf.runtime.diagram.ui.DiagramUIDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IPrimaryEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.util.DiagramMEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;

import org.eclipse.gmf.runtime.notation.View;

public class AddBookmarkHelper {

    static public void addBookmark (final IDiagramWorkbenchPart editorPart) {
        final IStructuredSelection selection = (IStructuredSelection) editorPart.getSite ().getWorkbenchWindow ().getSelectionService ().getSelection ();
        try {
            DiagramMEditingDomainGetter.getMEditingDomain (editorPart).runAsRead (new MRunnable () {

                public Object run () {
                    for (Iterator i = selection.toList ().iterator ();
                    i.hasNext ();) {
                        Object selectedObject = i.next ();
                        Assert.isTrue (selectedObject instanceof EditPart);
                        View view = (View) ((EditPart) selectedObject).getAdapter (View.class);
                        Assert.isTrue (selectedObject instanceof IPrimaryEditPart);
                        Assert.isNotNull (view);
                        Assert.isTrue (view.eResource () != null);
                        String elementName = StringStatics.BLANK;
                        EObject semanticElement = ViewUtil.resolveSemanticElement (view);
                        if (semanticElement != null) {
                            elementName = EObjectUtil.getQName (semanticElement, true);
                        }
                        String description = getDescription (elementName, editorPart);
                        if (description != null) {
                            HashMap attribMap = new HashMap ();
                            attribMap.put (IMarker.MESSAGE, description);
                            attribMap.put (IMarker.LOCATION, elementName);
                            attribMap.put (IBookmark.ELEMENT_ID, EObjectUtil.getID (view));
                            IResource resource = getResource (editorPart);
                            Assert.isNotNull (resource);
                            try {
                                IMarker marker = resource.createMarker (IBookmark.TYPE);
                                marker.setAttributes (attribMap);
                            } catch (CoreException e) {
                                Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "addBookmark", e);
                                Log.error (DiagramUIPlugin.getInstance (), IStatus.ERROR, "addBookmark");
                            }
                        }
                    }
                    return null;
                }

            }

            );
        } catch (Exception e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, AddBookmarkHelper.class, "addBookmark()", e);
        }
    }

    static private IResource getResource (IWorkbenchPart part) {
        if (part instanceof IEditorPart) {
            IEditorInput input = ((IEditorPart) part).getEditorInput ();
            return (IFile) input.getAdapter (IFile.class);
        }
        return null;
    }

    static private String getDescription (String defaultDescription, IWorkbenchPart part) {
        String title = PresentationResourceManager.getI18NString ("AddBookmarkAction.dialog.title");
        String message = PresentationResourceManager.getI18NString ("AddBookmarkAction.dialog.message");
        IInputValidator inputValidator = new IInputValidator () {

            public String isValid (String newText) {
                return (newText == null || newText.length () == 0) ? StringStatics.SPACE : null;
            }

        }

        ;
        InputDialog dialog = new InputDialog (part.getSite ().getShell (), title, message, defaultDescription, inputValidator);
        if (dialog.open () != Window.CANCEL) {
            String name = dialog.getValue ();
            if (name == null) return null;

            name = name.trim ();
            return (name.length () == 0) ? null : name;
        } else {
            return null;
        }
    }

}

