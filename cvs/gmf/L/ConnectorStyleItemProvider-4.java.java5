package org.eclipse.gmf.runtime.notation.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.provider.EObjectItemProvider;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.runtime.notation.ConnectorStyle;

import org.eclipse.gmf.runtime.notation.NotationEditPlugin;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.Routing;

public class ConnectorStyleItemProvider extends EObjectItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public ConnectorStyleItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addRoutingPropertyDescriptor (object);
            addSmoothnessPropertyDescriptor (object);
            addAvoidObstructionsPropertyDescriptor (object);
            addClosestDistancePropertyDescriptor (object);
            addJumpLinkStatusPropertyDescriptor (object);
            addJumpLinkTypePropertyDescriptor (object);
            addJumpLinksReversePropertyDescriptor (object);
            addLineColorPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addRoutingPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_RoutingStyle_routing_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_RoutingStyle_routing_feature", "_UI_RoutingStyle_type"), NotationPackage.Literals.ROUTING_STYLE__ROUTING, true, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addSmoothnessPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_RoutingStyle_smoothness_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_RoutingStyle_smoothness_feature", "_UI_RoutingStyle_type"), NotationPackage.Literals.ROUTING_STYLE__SMOOTHNESS, true, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addAvoidObstructionsPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_RoutingStyle_avoidObstructions_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_RoutingStyle_avoidObstructions_feature", "_UI_RoutingStyle_type"), NotationPackage.Literals.ROUTING_STYLE__AVOID_OBSTRUCTIONS, true, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, null, null));
    }

    protected void addClosestDistancePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_RoutingStyle_closestDistance_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_RoutingStyle_closestDistance_feature", "_UI_RoutingStyle_type"), NotationPackage.Literals.ROUTING_STYLE__CLOSEST_DISTANCE, true, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, null, null));
    }

    protected void addJumpLinkStatusPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_RoutingStyle_jumpLinkStatus_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_RoutingStyle_jumpLinkStatus_feature", "_UI_RoutingStyle_type"), NotationPackage.Literals.ROUTING_STYLE__JUMP_LINK_STATUS, true, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addJumpLinkTypePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_RoutingStyle_jumpLinkType_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_RoutingStyle_jumpLinkType_feature", "_UI_RoutingStyle_type"), NotationPackage.Literals.ROUTING_STYLE__JUMP_LINK_TYPE, true, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addJumpLinksReversePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_RoutingStyle_jumpLinksReverse_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_RoutingStyle_jumpLinksReverse_feature", "_UI_RoutingStyle_type"), NotationPackage.Literals.ROUTING_STYLE__JUMP_LINKS_REVERSE, true, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, null, null));
    }

    protected void addLineColorPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LineStyle_lineColor_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LineStyle_lineColor_feature", "_UI_LineStyle_type"), NotationPackage.Literals.LINE_STYLE__LINE_COLOR, true, ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE, null, null));
    }

    public Object getImage (Object object) {
        return getResourceLocator ().getImage ("full/obj16/ConnectorStyle");
    }

    public String getText (Object object) {
        Routing labelValue = ((ConnectorStyle) object).getRouting ();
        String label = labelValue == null ? null : labelValue.toString ();
        return label == null || label.length () == 0 ? getString ("_UI_ConnectorStyle_type") : getString ("_UI_ConnectorStyle_type") + " " + label;
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (ConnectorStyle.class)) {
            case NotationPackage.CONNECTOR_STYLE__ROUTING :
            case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS :
            case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS :
            case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE :
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS :
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE :
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE :
            case NotationPackage.CONNECTOR_STYLE__LINE_COLOR :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
    }

    public ResourceLocator getResourceLocator () {
        return NotationEditPlugin.INSTANCE;
    }

}

