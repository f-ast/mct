package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenApplication;

import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

public class GenApplicationImpl extends EObjectImpl implements GenApplication {
    protected static final String ID_EDEFAULT = null;
    protected String iD = ID_EDEFAULT;
    protected static final String TITLE_EDEFAULT = null;
    protected String title = TITLE_EDEFAULT;
    protected static final String APPLICATION_PACKAGE_NAME_EDEFAULT = null;
    protected String applicationPackageName = APPLICATION_PACKAGE_NAME_EDEFAULT;
    protected static final String APPLICATION_CLASS_NAME_EDEFAULT = null;
    protected String applicationClassName = APPLICATION_CLASS_NAME_EDEFAULT;
    protected static final String WORKBENCH_ADVISOR_CLASS_NAME_EDEFAULT = null;
    protected String workbenchAdvisorClassName = WORKBENCH_ADVISOR_CLASS_NAME_EDEFAULT;
    protected static final String WORKBENCH_WINDOW_ADVISOR_CLASS_NAME_EDEFAULT = null;
    protected String workbenchWindowAdvisorClassName = WORKBENCH_WINDOW_ADVISOR_CLASS_NAME_EDEFAULT;
    protected static final String ACTION_BAR_ADVISOR_CLASS_NAME_EDEFAULT = null;
    protected String actionBarAdvisorClassName = ACTION_BAR_ADVISOR_CLASS_NAME_EDEFAULT;
    protected static final String PERSPECTIVE_CLASS_NAME_EDEFAULT = null;
    protected String perspectiveClassName = PERSPECTIVE_CLASS_NAME_EDEFAULT;
    protected static final String PERSPECTIVE_ID_EDEFAULT = null;
    protected String perspectiveId = PERSPECTIVE_ID_EDEFAULT;

    protected GenApplicationImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenApplication ();
    }

    public GenEditorGenerator getEditorGen () {
        if (eContainerFeatureID != GMFGenPackage.GEN_APPLICATION__EDITOR_GEN) return null;

        return (GenEditorGenerator) eContainer ();
    }

    public String getIDGen () {
        return iD;
    }

    public String getID () {
        String value = getIDGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getEditorGen ().getModelID ().replace (" ", "") + "Application";
        }
        return value;
    }

    public void setID (String newID) {
        String oldID = iD;
        iD = newID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_APPLICATION__ID, oldID, iD));

    }

    public String getTitleGen () {
        return title;
    }

    public String getTitle () {
        String value = getTitleGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getEditorGen ().getModelID () + " Application";
        }
        return value;
    }

    public void setTitle (String newTitle) {
        String oldTitle = title;
        title = newTitle;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_APPLICATION__TITLE, oldTitle, title));

    }

    public String getApplicationPackageNameGen () {
        return applicationPackageName;
    }

    public String getApplicationPackageName () {
        String value = getApplicationPackageNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getEditorGen ().getPackageNamePrefix () + ".application";
        }
        return value;
    }

    public void setApplicationPackageName (String newApplicationPackageName) {
        String oldApplicationPackageName = applicationPackageName;
        applicationPackageName = newApplicationPackageName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_APPLICATION__APPLICATION_PACKAGE_NAME, oldApplicationPackageName, applicationPackageName));

    }

    public String getApplicationClassNameGen () {
        return applicationClassName;
    }

    public String getApplicationClassName () {
        String value = getApplicationClassNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getDomainPackageCapName () + "Application";
        }
        return value;
    }

    public void setApplicationClassName (String newApplicationClassName) {
        String oldApplicationClassName = applicationClassName;
        applicationClassName = newApplicationClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_APPLICATION__APPLICATION_CLASS_NAME, oldApplicationClassName, applicationClassName));

    }

    public String getWorkbenchAdvisorClassNameGen () {
        return workbenchAdvisorClassName;
    }

    public String getWorkbenchAdvisorClassName () {
        String value = getWorkbenchAdvisorClassNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getDomainPackageCapName () + "WorkbenchAdvisor";
        }
        return value;
    }

    public void setWorkbenchAdvisorClassName (String newWorkbenchAdvisorClassName) {
        String oldWorkbenchAdvisorClassName = workbenchAdvisorClassName;
        workbenchAdvisorClassName = newWorkbenchAdvisorClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_APPLICATION__WORKBENCH_ADVISOR_CLASS_NAME, oldWorkbenchAdvisorClassName, workbenchAdvisorClassName));

    }

    public String getWorkbenchWindowAdvisorClassNameGen () {
        return workbenchWindowAdvisorClassName;
    }

    public String getWorkbenchWindowAdvisorClassName () {
        String value = getWorkbenchWindowAdvisorClassNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getDomainPackageCapName () + "WorkbenchWindowAdvisor";
        }
        return value;
    }

    public void setWorkbenchWindowAdvisorClassName (String newWorkbenchWindowAdvisorClassName) {
        String oldWorkbenchWindowAdvisorClassName = workbenchWindowAdvisorClassName;
        workbenchWindowAdvisorClassName = newWorkbenchWindowAdvisorClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_APPLICATION__WORKBENCH_WINDOW_ADVISOR_CLASS_NAME, oldWorkbenchWindowAdvisorClassName, workbenchWindowAdvisorClassName));

    }

    public String getActionBarAdvisorClassNameGen () {
        return actionBarAdvisorClassName;
    }

    public String getActionBarAdvisorClassName () {
        String value = getActionBarAdvisorClassNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getDomainPackageCapName () + "ActionBarAdvisor";
        }
        return value;
    }

    public void setActionBarAdvisorClassName (String newActionBarAdvisorClassName) {
        String oldActionBarAdvisorClassName = actionBarAdvisorClassName;
        actionBarAdvisorClassName = newActionBarAdvisorClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_APPLICATION__ACTION_BAR_ADVISOR_CLASS_NAME, oldActionBarAdvisorClassName, actionBarAdvisorClassName));

    }

    public String getPerspectiveClassNameGen () {
        return perspectiveClassName;
    }

    public String getPerspectiveClassName () {
        String value = getPerspectiveClassNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getDomainPackageCapName () + "Perspective";
        }
        return value;
    }

    public void setPerspectiveClassName (String newPerspectiveClassName) {
        String oldPerspectiveClassName = perspectiveClassName;
        perspectiveClassName = newPerspectiveClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_APPLICATION__PERSPECTIVE_CLASS_NAME, oldPerspectiveClassName, perspectiveClassName));

    }

    public String getPerspectiveIdGen () {
        return perspectiveId;
    }

    public String getPerspectiveId () {
        String value = getPerspectiveIdGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getEditorGen ().getPackageNamePrefix () + '.' + getEditorGen ().getModelID () + "Perspective";
        }
        return value;
    }

    public void setPerspectiveId (String newPerspectiveId) {
        String oldPerspectiveId = perspectiveId;
        perspectiveId = newPerspectiveId;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_APPLICATION__PERSPECTIVE_ID, oldPerspectiveId, perspectiveId));

    }

    protected String getQualifiedClassName (String className) {
        return getApplicationPackageName () + '.' + className;
    }

    public String getApplicationQualifiedClassName () {
        return getQualifiedClassName (getApplicationClassName ());
    }

    public String getWorkbenchAdvisorQualifiedClassName () {
        return getQualifiedClassName (getWorkbenchAdvisorClassName ());
    }

    public String getWorkbenchWindowAdvisorQualifiedClassName () {
        return getQualifiedClassName (getWorkbenchWindowAdvisorClassName ());
    }

    public String getActionBarAdvisorQualifiedClassName () {
        return getQualifiedClassName (getActionBarAdvisorClassName ());
    }

    public String getPerspectiveQualifiedClassName () {
        return getQualifiedClassName (getPerspectiveClassName ());
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_APPLICATION__EDITOR_GEN :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_APPLICATION__EDITOR_GEN, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_APPLICATION__EDITOR_GEN :
                return eBasicSetContainer (null, GMFGenPackage.GEN_APPLICATION__EDITOR_GEN, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_APPLICATION__EDITOR_GEN :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_EDITOR_GENERATOR__APPLICATION, GenEditorGenerator.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_APPLICATION__EDITOR_GEN :
                return getEditorGen ();
            case GMFGenPackage.GEN_APPLICATION__ID :
                return getID ();
            case GMFGenPackage.GEN_APPLICATION__TITLE :
                return getTitle ();
            case GMFGenPackage.GEN_APPLICATION__APPLICATION_PACKAGE_NAME :
                return getApplicationPackageName ();
            case GMFGenPackage.GEN_APPLICATION__APPLICATION_CLASS_NAME :
                return getApplicationClassName ();
            case GMFGenPackage.GEN_APPLICATION__WORKBENCH_ADVISOR_CLASS_NAME :
                return getWorkbenchAdvisorClassName ();
            case GMFGenPackage.GEN_APPLICATION__WORKBENCH_WINDOW_ADVISOR_CLASS_NAME :
                return getWorkbenchWindowAdvisorClassName ();
            case GMFGenPackage.GEN_APPLICATION__ACTION_BAR_ADVISOR_CLASS_NAME :
                return getActionBarAdvisorClassName ();
            case GMFGenPackage.GEN_APPLICATION__PERSPECTIVE_CLASS_NAME :
                return getPerspectiveClassName ();
            case GMFGenPackage.GEN_APPLICATION__PERSPECTIVE_ID :
                return getPerspectiveId ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_APPLICATION__ID :
                setID ((String) newValue);
                return;
            case GMFGenPackage.GEN_APPLICATION__TITLE :
                setTitle ((String) newValue);
                return;
            case GMFGenPackage.GEN_APPLICATION__APPLICATION_PACKAGE_NAME :
                setApplicationPackageName ((String) newValue);
                return;
            case GMFGenPackage.GEN_APPLICATION__APPLICATION_CLASS_NAME :
                setApplicationClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_APPLICATION__WORKBENCH_ADVISOR_CLASS_NAME :
                setWorkbenchAdvisorClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_APPLICATION__WORKBENCH_WINDOW_ADVISOR_CLASS_NAME :
                setWorkbenchWindowAdvisorClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_APPLICATION__ACTION_BAR_ADVISOR_CLASS_NAME :
                setActionBarAdvisorClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_APPLICATION__PERSPECTIVE_CLASS_NAME :
                setPerspectiveClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_APPLICATION__PERSPECTIVE_ID :
                setPerspectiveId ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_APPLICATION__ID :
                setID (ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_APPLICATION__TITLE :
                setTitle (TITLE_EDEFAULT);
                return;
            case GMFGenPackage.GEN_APPLICATION__APPLICATION_PACKAGE_NAME :
                setApplicationPackageName (APPLICATION_PACKAGE_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_APPLICATION__APPLICATION_CLASS_NAME :
                setApplicationClassName (APPLICATION_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_APPLICATION__WORKBENCH_ADVISOR_CLASS_NAME :
                setWorkbenchAdvisorClassName (WORKBENCH_ADVISOR_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_APPLICATION__WORKBENCH_WINDOW_ADVISOR_CLASS_NAME :
                setWorkbenchWindowAdvisorClassName (WORKBENCH_WINDOW_ADVISOR_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_APPLICATION__ACTION_BAR_ADVISOR_CLASS_NAME :
                setActionBarAdvisorClassName (ACTION_BAR_ADVISOR_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_APPLICATION__PERSPECTIVE_CLASS_NAME :
                setPerspectiveClassName (PERSPECTIVE_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_APPLICATION__PERSPECTIVE_ID :
                setPerspectiveId (PERSPECTIVE_ID_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_APPLICATION__EDITOR_GEN :
                return getEditorGen () != null;
            case GMFGenPackage.GEN_APPLICATION__ID :
                return ID_EDEFAULT == null ? iD != null : ! ID_EDEFAULT.equals (iD);
            case GMFGenPackage.GEN_APPLICATION__TITLE :
                return TITLE_EDEFAULT == null ? title != null : ! TITLE_EDEFAULT.equals (title);
            case GMFGenPackage.GEN_APPLICATION__APPLICATION_PACKAGE_NAME :
                return APPLICATION_PACKAGE_NAME_EDEFAULT == null ? applicationPackageName != null : ! APPLICATION_PACKAGE_NAME_EDEFAULT.equals (applicationPackageName);
            case GMFGenPackage.GEN_APPLICATION__APPLICATION_CLASS_NAME :
                return APPLICATION_CLASS_NAME_EDEFAULT == null ? applicationClassName != null : ! APPLICATION_CLASS_NAME_EDEFAULT.equals (applicationClassName);
            case GMFGenPackage.GEN_APPLICATION__WORKBENCH_ADVISOR_CLASS_NAME :
                return WORKBENCH_ADVISOR_CLASS_NAME_EDEFAULT == null ? workbenchAdvisorClassName != null : ! WORKBENCH_ADVISOR_CLASS_NAME_EDEFAULT.equals (workbenchAdvisorClassName);
            case GMFGenPackage.GEN_APPLICATION__WORKBENCH_WINDOW_ADVISOR_CLASS_NAME :
                return WORKBENCH_WINDOW_ADVISOR_CLASS_NAME_EDEFAULT == null ? workbenchWindowAdvisorClassName != null : ! WORKBENCH_WINDOW_ADVISOR_CLASS_NAME_EDEFAULT.equals (workbenchWindowAdvisorClassName);
            case GMFGenPackage.GEN_APPLICATION__ACTION_BAR_ADVISOR_CLASS_NAME :
                return ACTION_BAR_ADVISOR_CLASS_NAME_EDEFAULT == null ? actionBarAdvisorClassName != null : ! ACTION_BAR_ADVISOR_CLASS_NAME_EDEFAULT.equals (actionBarAdvisorClassName);
            case GMFGenPackage.GEN_APPLICATION__PERSPECTIVE_CLASS_NAME :
                return PERSPECTIVE_CLASS_NAME_EDEFAULT == null ? perspectiveClassName != null : ! PERSPECTIVE_CLASS_NAME_EDEFAULT.equals (perspectiveClassName);
            case GMFGenPackage.GEN_APPLICATION__PERSPECTIVE_ID :
                return PERSPECTIVE_ID_EDEFAULT == null ? perspectiveId != null : ! PERSPECTIVE_ID_EDEFAULT.equals (perspectiveId);
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (iD: ");
        result.append (iD);
        result.append (", title: ");
        result.append (title);
        result.append (", applicationPackageName: ");
        result.append (applicationPackageName);
        result.append (", applicationClassName: ");
        result.append (applicationClassName);
        result.append (", workbenchAdvisorClassName: ");
        result.append (workbenchAdvisorClassName);
        result.append (", workbenchWindowAdvisorClassName: ");
        result.append (workbenchWindowAdvisorClassName);
        result.append (", actionBarAdvisorClassName: ");
        result.append (actionBarAdvisorClassName);
        result.append (", perspectiveClassName: ");
        result.append (perspectiveClassName);
        result.append (", perspectiveId: ");
        result.append (perspectiveId);
        result.append (')');
        return result.toString ();
    }

    String getDomainPackageCapName () {
        return ((GenEditorGeneratorImpl) getEditorGen ()).getDomainModelCapName ();
    }

}

