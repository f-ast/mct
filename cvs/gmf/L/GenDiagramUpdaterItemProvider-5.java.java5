package org.eclipse.gmf.codegen.gmfgen.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IChildCreationExtender;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenDiagramUpdater;

public class GenDiagramUpdaterItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public GenDiagramUpdaterItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    @Override
    public List < IItemPropertyDescriptor > getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addDiagramUpdaterClassNamePropertyDescriptor (object);
            addNodeDescriptorClassNamePropertyDescriptor (object);
            addLinkDescriptorClassNamePropertyDescriptor (object);
            addUpdateCommandClassNamePropertyDescriptor (object);
            addUpdateCommandIDPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addDiagramUpdaterClassNamePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenDiagramUpdater_diagramUpdaterClassName_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenDiagramUpdater_diagramUpdaterClassName_feature", "_UI_GenDiagramUpdater_type"), GMFGenPackage.eINSTANCE.getGenDiagramUpdater_DiagramUpdaterClassName (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addNodeDescriptorClassNamePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenDiagramUpdater_nodeDescriptorClassName_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenDiagramUpdater_nodeDescriptorClassName_feature", "_UI_GenDiagramUpdater_type"), GMFGenPackage.eINSTANCE.getGenDiagramUpdater_NodeDescriptorClassName (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addLinkDescriptorClassNamePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenDiagramUpdater_linkDescriptorClassName_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenDiagramUpdater_linkDescriptorClassName_feature", "_UI_GenDiagramUpdater_type"), GMFGenPackage.eINSTANCE.getGenDiagramUpdater_LinkDescriptorClassName (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addUpdateCommandClassNamePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenDiagramUpdater_updateCommandClassName_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenDiagramUpdater_updateCommandClassName_feature", "_UI_GenDiagramUpdater_type"), GMFGenPackage.eINSTANCE.getGenDiagramUpdater_UpdateCommandClassName (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addUpdateCommandIDPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenDiagramUpdater_updateCommandID_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenDiagramUpdater_updateCommandID_feature", "_UI_GenDiagramUpdater_type"), GMFGenPackage.eINSTANCE.getGenDiagramUpdater_UpdateCommandID (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    @Override
    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/GenDiagramUpdater"));
    }

    @Override
    public String getText (Object object) {
        String label = ((GenDiagramUpdater) object).getDiagramUpdaterClassName ();
        return label == null || label.length () == 0 ? getString ("_UI_GenDiagramUpdater_type") : getString ("_UI_GenDiagramUpdater_type") + " " + label;
    }

    @Override
    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (GenDiagramUpdater.class)) {
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__DIAGRAM_UPDATER_CLASS_NAME :
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__NODE_DESCRIPTOR_CLASS_NAME :
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__LINK_DESCRIPTOR_CLASS_NAME :
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_CLASS_NAME :
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_ID :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
        }
        super.notifyChanged (notification);
    }

    @Override
    protected void collectNewChildDescriptors (Collection < Object > newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
    }

    @Override
    public ResourceLocator getResourceLocator () {
        return ((IChildCreationExtender) adapterFactory).getResourceLocator ();
    }

}

