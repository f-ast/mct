package org.eclipse.gmf.runtime.diagram.ui.internal.editparts;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.requests.GroupRequest;

import org.eclipse.gmf.runtime.common.ui.services.icon.IconOptions;

import org.eclipse.gmf.runtime.common.ui.services.icon.IconService;

import org.eclipse.gmf.runtime.diagram.core.internal.commands.CreateDiagramLinkCommand;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ComponentEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.swt.graphics.Image;

public class DiagramNameCompartmentEditPart extends TextCompartmentEditPart {
    private IconOptions iconOptions;
    protected static final int ICON_INDEX = 0;
    protected static final int NUM_ICONS = 1;

    public DiagramNameCompartmentEditPart (View view) {
        super (view);
        iconOptions = new IconOptions ();
        iconOptions.set (IconOptions.GET_STEREOTYPE_IMAGE_FOR_ELEMENT);
        iconOptions.set (IconOptions.NO_DEFAULT_STEREOTYPE_IMAGE);
        setNumIcons (NUM_ICONS);
    }

    protected IFigure createFigure () {
        WrapLabel label = new WrapLabel ();
        label.setLabelAlignment (PositionConstants.TOP);
        label.setIconAlignment (PositionConstants.TOP);
        label.setTextAlignment (PositionConstants.TOP);
        label.setTextWrap (true);
        label.setTextWrapAlignment (PositionConstants.CENTER);
        return label;
    }

    public EObject resolveSemanticElement () {
        return (EObject) MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {

            public Object run () {
                View primary = getPrimaryView ();
                if (primary != null) return ViewUtil.resolveSemanticElement (primary);

                return null;
            }

        }

        );
    }

    protected Image getLabelIcon (int i) {
        EObject element = resolveSemanticElement ();
        if (element != null) return IconService.getInstance ().getIcon (new EObjectAdapter (element));

        return null;
    }

    protected boolean isEditable () {
        return false;
    }

    public boolean isSelectable () {
        return false;
    }

    public void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicy.COMPONENT_ROLE, new DiagramLinkComponentEditPolicy ());
    }

    protected void setVisibility (boolean vis) {
        super.setVisibility (vis && resolveSemanticElement () != null);
    }

    private class DiagramLinkComponentEditPolicy extends ComponentEditPolicy {

        public Command createDeleteViewCommand (GroupRequest request) {
            CreateDiagramLinkCommand com = new CreateDiagramLinkCommand (DiagramUIMessages.Command_CreateDiagramLink, (View) getHost ().getParent ().getModel (), null);
            return new EtoolsProxyCommand (com);
        }

    }

}

