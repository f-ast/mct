package org.eclipse.gmf.graphdef.editor.edit.policies;

import java.util.Collection;

import java.util.Collections;

import java.util.HashMap;

import java.util.Iterator;

import java.util.LinkedList;

import java.util.List;

import java.util.Map;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.commands.Command;

import org.eclipse.gmf.gmfgraph.Canvas;

import org.eclipse.gmf.gmfgraph.DiagramElement;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramElementFigureEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse2EditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.EllipseEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.NodeEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline2EditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.PolylineEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle2EditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.RectangleEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle2EditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangleEditPart;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;

import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.View;

public class CanvasCanonicalEditPolicy extends CanonicalConnectionEditPolicy {

    protected List getSemanticChildrenList () {
        List result = new LinkedList ();
        EObject modelObject = ((View) getHost ().getModel ()).getElement ();
        View viewObject = (View) getHost ().getModel ();
        EObject nextValue;
        int nodeVID;
        for (Iterator values = ((Canvas) modelObject).getCompartments ().iterator ();
        values.hasNext ();) {
            nextValue = (EObject) values.next ();
            nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID (viewObject, nextValue);
            if (CompartmentEditPart.VISUAL_ID == nodeVID) {
                result.add (nextValue);
            }
        }
        for (Iterator values = ((Canvas) modelObject).getNodes ().iterator ();
        values.hasNext ();) {
            nextValue = (EObject) values.next ();
            nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID (viewObject, nextValue);
            if (NodeEditPart.VISUAL_ID == nodeVID) {
                result.add (nextValue);
            }
        }
        for (Iterator values = ((Canvas) modelObject).getConnections ().iterator ();
        values.hasNext ();) {
            nextValue = (EObject) values.next ();
            nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID (viewObject, nextValue);
            if (ConnectionEditPart.VISUAL_ID == nodeVID) {
                result.add (nextValue);
            }
        }
        for (Iterator values = ((Canvas) modelObject).getFigures ().iterator ();
        values.hasNext ();) {
            nextValue = (EObject) values.next ();
            nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID (viewObject, nextValue);
            if (FigureGalleryEditPart.VISUAL_ID == nodeVID) {
                result.add (nextValue);
            }
        }
        return result;
    }

    protected boolean shouldDeleteView (View view) {
        if (view.getEAnnotation ("Shortcut") != null) {
            return view.isSetElement () && (view.getElement () == null || view.getElement ().eIsProxy ());
        }
        int nodeVID = GMFGraphVisualIDRegistry.getVisualID (view);
        switch (nodeVID) {
            case CompartmentEditPart.VISUAL_ID :
            case NodeEditPart.VISUAL_ID :
            case ConnectionEditPart.VISUAL_ID :
            case FigureGalleryEditPart.VISUAL_ID :
                return true;
        }
        return false;
    }

    protected String getDefaultFactoryHint () {
        return null;
    }

    protected List getSemanticConnectionsList () {
        return Collections.EMPTY_LIST;
    }

    protected EObject getSourceElement (EObject relationship) {
        return null;
    }

    protected EObject getTargetElement (EObject relationship) {
        return null;
    }

    protected boolean shouldIncludeConnection (Edge connector, Collection children) {
        return false;
    }

    protected void refreshSemantic () {
        List createdViews = new LinkedList ();
        createdViews.addAll (refreshSemanticChildren ());
        List createdConnectionViews = new LinkedList ();
        createdConnectionViews.addAll (refreshSemanticConnections ());
        createdConnectionViews.addAll (refreshConnections ());
        if (createdViews.size () > 1) {
            DeferredLayoutCommand layoutCmd = new DeferredLayoutCommand (host ().getEditingDomain (), createdViews, host ());
            executeCommand (new ICommandProxy (layoutCmd));
        }
        createdViews.addAll (createdConnectionViews);
        makeViewsImmutable (createdViews);
    }

    private Collection myLinkDescriptors = new LinkedList ();
    private Map myEObject2ViewMap = new HashMap ();

    private Collection refreshConnections () {
        try {
            collectAllLinks (getDiagram ());
            Collection existingLinks = new LinkedList (getDiagram ().getEdges ());
            for (Iterator diagramLinks = existingLinks.iterator ();
            diagramLinks.hasNext ();) {
                Edge nextDiagramLink = (Edge) diagramLinks.next ();
                EObject diagramLinkObject = nextDiagramLink.getElement ();
                EObject diagramLinkSrc = nextDiagramLink.getSource ().getElement ();
                EObject diagramLinkDst = nextDiagramLink.getTarget ().getElement ();
                int diagramLinkVisualID = GMFGraphVisualIDRegistry.getVisualID (nextDiagramLink);
                for (Iterator modelLinkDescriptors = myLinkDescriptors.iterator ();
                modelLinkDescriptors.hasNext ();) {
                    LinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next ();
                    if (diagramLinkObject == nextLinkDescriptor.getLinkElement () && diagramLinkSrc == nextLinkDescriptor.getSource () && diagramLinkDst == nextLinkDescriptor.getDestination () && diagramLinkVisualID == nextLinkDescriptor.getVisualID ()) {
                        diagramLinks.remove ();
                        modelLinkDescriptors.remove ();
                    }
                }
            }
            deleteViews (existingLinks.iterator ());
            return createConnections (myLinkDescriptors);
        } finally {
            myLinkDescriptors.clear ();
            myEObject2ViewMap.clear ();
        }
    }

    private void collectAllLinks (View view) {
        EObject modelElement = view.getElement ();
        int diagramElementVisualID = GMFGraphVisualIDRegistry.getVisualID (view);
        switch (diagramElementVisualID) {
            case CompartmentEditPart.VISUAL_ID :
            case NodeEditPart.VISUAL_ID :
            case ConnectionEditPart.VISUAL_ID :
            case FigureGalleryEditPart.VISUAL_ID :
            case RectangleEditPart.VISUAL_ID :
            case Rectangle2EditPart.VISUAL_ID :
            case EllipseEditPart.VISUAL_ID :
            case RoundedRectangleEditPart.VISUAL_ID :
            case PolylineEditPart.VISUAL_ID :
            case Ellipse2EditPart.VISUAL_ID :
            case RoundedRectangle2EditPart.VISUAL_ID :
            case Polyline2EditPart.VISUAL_ID :
            case CanvasEditPart.VISUAL_ID :
                {
                    myEObject2ViewMap.put (modelElement, view);
                    storeLinks (modelElement, getDiagram ());
                } default :
                {
                } for (Iterator children = view.getChildren ().iterator ();
                children.hasNext ();) {
                    View childView = (View) children.next ();
                    collectAllLinks (childView);
                }
        }
    }

    private Collection createConnections (Collection linkDescriptors) {
        if (linkDescriptors.isEmpty ()) {
            return Collections.EMPTY_LIST;
        }
        List adapters = new LinkedList ();
        for (Iterator linkDescriptorsIterator = linkDescriptors.iterator ();
        linkDescriptorsIterator.hasNext ();) {
            final LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next ();
            EditPart sourceEditPart = getEditPartFor (nextLinkDescriptor.getSource ());
            EditPart targetEditPart = getEditPartFor (nextLinkDescriptor.getDestination ());
            if (sourceEditPart == null || targetEditPart == null) {
                continue;
            }
            CreateConnectionViewRequest.ConnectionViewDescriptor descriptor = new CreateConnectionViewRequest.ConnectionViewDescriptor (nextLinkDescriptor.getSemanticAdapter (), null, ViewUtil.APPEND, false, ((IGraphicalEditPart) getHost ()).getDiagramPreferencesHint ());
            CreateConnectionViewRequest ccr = new CreateConnectionViewRequest (descriptor);
            ccr.setType (RequestConstants.REQ_CONNECTION_START);
            ccr.setSourceEditPart (sourceEditPart);
            sourceEditPart.getCommand (ccr);
            ccr.setTargetEditPart (targetEditPart);
            ccr.setType (RequestConstants.REQ_CONNECTION_END);
            Command cmd = targetEditPart.getCommand (ccr);
            if (cmd != null && cmd.canExecute ()) {
                executeCommand (cmd);
                IAdaptable viewAdapter = (IAdaptable) ccr.getNewObject ();
                if (viewAdapter != null) {
                    adapters.add (viewAdapter);
                }
            }
        }
        return adapters;
    }

    private EditPart getEditPartFor (EObject modelElement) {
        View view = (View) myEObject2ViewMap.get (modelElement);
        if (view != null) {
            return (EditPart) getHost ().getViewer ().getEditPartRegistry ().get (view);
        }
        return null;
    }

    private void storeLinks (EObject container, Diagram diagram) {
        EClass containerMetaclass = container.eClass ();
        storeFeatureModelFacetLinks (container, containerMetaclass, diagram);
        storeTypeModelFacetLinks (container, containerMetaclass);
    }

    private void storeTypeModelFacetLinks (EObject container, EClass containerMetaclass) {
    }

    private void storeFeatureModelFacetLinks (EObject container, EClass containerMetaclass, Diagram diagram) {
        if (GMFGraphPackage.eINSTANCE.getDiagramElement ().isSuperTypeOf (containerMetaclass)) {
            EObject nextDestination = (EObject) ((DiagramElement) container).getFigure ();
            myLinkDescriptors.add (new LinkDescriptor (container, nextDestination, GMFGraphElementTypes.DiagramElementFigure_4001, DiagramElementFigureEditPart.VISUAL_ID));
        }
    }

    private Diagram getDiagram () {
        return ((View) getHost ().getModel ()).getDiagram ();
    }

    private class LinkDescriptor {
        private EObject mySource;
        private EObject myDestination;
        private EObject myLinkElement;
        private int myVisualID;
        private IAdaptable mySemanticAdapter;

        protected LinkDescriptor (EObject source, EObject destination, EObject linkElement, IElementType elementType, int linkVID) {
            this (source, destination, linkVID);
            myLinkElement = linkElement;
            final IElementType elementTypeCopy = elementType;
            mySemanticAdapter = new EObjectAdapter (linkElement) {

                public Object getAdapter (Class adapter) {
                    if (IElementType.class.equals (adapter)) {
                        return elementTypeCopy;
                    }
                    return super.getAdapter (adapter);
                }

            }

            ;
        }

        protected LinkDescriptor (EObject source, EObject destination, IElementType elementType, int linkVID) {
            this (source, destination, linkVID);
            myLinkElement = null;
            final IElementType elementTypeCopy = elementType;
            mySemanticAdapter = new IAdaptable () {

                public Object getAdapter (Class adapter) {
                    if (IElementType.class.equals (adapter)) {
                        return elementTypeCopy;
                    }
                    return null;
                }

            }

            ;
        }

        private LinkDescriptor (EObject source, EObject destination, int linkVID) {
            mySource = source;
            myDestination = destination;
            myVisualID = linkVID;
        }

        protected EObject getSource () {
            return mySource;
        }

        protected EObject getDestination () {
            return myDestination;
        }

        protected EObject getLinkElement () {
            return myLinkElement;
        }

        protected int getVisualID () {
            return myVisualID;
        }

        protected IAdaptable getSemanticAdapter () {
            return mySemanticAdapter;
        }

    }

}

