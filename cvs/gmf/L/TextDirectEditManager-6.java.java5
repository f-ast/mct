package org.eclipse.gmf.runtime.diagram.ui.tools;

import org.eclipse.draw2d.FigureUtilities;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.tools.CellEditorLocator;

import org.eclipse.gef.tools.DirectEditManager;

import org.eclipse.gmf.runtime.common.ui.contentassist.ContentAssistantHelper;

import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;

import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;

import org.eclipse.gmf.runtime.draw2d.ui.internal.l10n.Draw2dResourceManager;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;

import org.eclipse.gmf.runtime.gef.ui.internal.parts.TextCellEditorEx;

import org.eclipse.gmf.runtime.gef.ui.internal.parts.WrapTextCellEditor;

import org.eclipse.jface.text.contentassist.IContentAssistProcessor;

import org.eclipse.jface.util.Assert;

import org.eclipse.jface.viewers.CellEditor;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.Font;

import org.eclipse.swt.graphics.FontData;

import org.eclipse.swt.graphics.Point;

import org.eclipse.swt.graphics.RGB;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Display;

import org.eclipse.swt.widgets.Event;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.swt.widgets.Table;

import org.eclipse.swt.widgets.Text;

public class TextDirectEditManager extends DirectEditManager {
    private Color proposalPopupBackgroundColor = null;
    private Color proposalPopupForegroundColor = null;
    private boolean committed = false;
    private boolean listenersAttached = true;
    static private class TextCellEditorLocator implements CellEditorLocator {
        private WrapLabel wrapLabel;

        public TextCellEditorLocator (WrapLabel wrapLabel) {
            super ();
            this.wrapLabel = wrapLabel;
        }

        public WrapLabel getWrapLabel () {
            return wrapLabel;
        }

        public void relocate (CellEditor celleditor) {
            Text text = (Text) celleditor.getControl ();
            Rectangle rect = getWrapLabel ().getTextBounds ().getCopy ();
            getWrapLabel ().translateToAbsolute (rect);
            if (getWrapLabel ().isTextWrapped () && getWrapLabel ().getText ().length () > 0) rect.setSize (new Dimension (text.computeSize (rect.width, SWT.DEFAULT)));
            else {
                int avr = FigureUtilities.getFontMetrics (text.getFont ()).getAverageCharWidth ();
                rect.setSize (new Dimension (text.computeSize (SWT.DEFAULT, SWT.DEFAULT)).expand (avr * 2, 0));
            }
            if (! rect.equals (new Rectangle (text.getBounds ()))) text.setBounds (rect.x, rect.y, rect.width, rect.height);

        }

    }

    public TextDirectEditManager (TextCompartmentEditPart source) {
        super (source, getTextCellEditorClass (source), new TextCellEditorLocator (source.getLabel ()));
    }

    public TextDirectEditManager (GraphicalEditPart source, Class editorType, CellEditorLocator locator) {
        super (source, editorType, locator);
    }

    private static Class getTextCellEditorClass (TextCompartmentEditPart source) {
        WrapLabel wrapLabel = source.getLabel ();
        if (wrapLabel.isTextWrapped ()) return WrapTextCellEditor.class;

        return TextCellEditorEx.class;
    }

    protected Font getScaledFont (WrapLabel label) {
        Font scaledFont = label.getFont ();
        FontData data = scaledFont.getFontData () [0];
        Dimension fontSize = new Dimension (0, MapMode.DPtoLP (data.getHeight ()));
        label.translateToAbsolute (fontSize);
        if (Math.abs (data.getHeight () - fontSize.height) < 2) fontSize.height = data.getHeight ();

        data.setHeight (fontSize.height);
        Font newFont = Draw2dResourceManager.getInstance ().getFont (null, data);
        return newFont;
    }

    protected void initCellEditor () {
        committed = false;
        TextCompartmentEditPart textEP = (TextCompartmentEditPart) getEditPart ();
        setEditText (textEP.getEditText ());
        WrapLabel label = textEP.getLabel ();
        Assert.isNotNull (label);
        Text text = (Text) getCellEditor ().getControl ();
        text.setFont (getScaledFont (label));
        getCellEditor ().setValidator (textEP.getEditTextValidator ());
        if (textEP.getParser () != null) {
            IContentAssistProcessor processor = textEP.getCompletionProcessor ();
            if (processor != null) {
                proposalPopupBackgroundColor = new Color (getCellEditor ().getControl ().getShell ().getDisplay (), new RGB (254, 241, 233));
                proposalPopupForegroundColor = new Color (getCellEditor ().getControl ().getShell ().getDisplay (), new RGB (0, 0, 0));
                ContentAssistantHelper.createTextContentAssistant (text, proposalPopupForegroundColor, proposalPopupBackgroundColor, processor);
            }
        }
    }

    protected void commit () {
        Shell activeShell = Display.getCurrent ().getActiveShell ();
        if (activeShell != null && getCellEditor ().getControl ().getShell ().equals (activeShell.getParent ())) {
            Control [] children = activeShell.getChildren ();
            if (children.length == 1 && children [0] instanceof Table) {
                getCellEditor ().getControl ().setVisible (true);
                ((TextCellEditorEx) getCellEditor ()).setDeactivationLock (true);
                return;
            }
        }
        if (committed) {
            bringDown ();
            return;
        }
        committed = true;
        super.commit ();
    }

    protected void bringDown () {
        if (proposalPopupForegroundColor != null) {
            proposalPopupForegroundColor.dispose ();
            proposalPopupForegroundColor = null;
        }
        if (proposalPopupBackgroundColor != null) {
            proposalPopupBackgroundColor.dispose ();
            proposalPopupBackgroundColor = null;
        }
        eraseFeedback ();
        Display.getCurrent ().asyncExec (new Runnable () {

            public void run () {
                TextDirectEditManager.super.bringDown ();
            }

        }

        );
    }

    public void setEditText (String toEdit) {
        CellEditor cellEditor = getCellEditor ();
        if (cellEditor == null) {
            return;
        }
        TextCompartmentEditPart textEP = (TextCompartmentEditPart) getEditPart ();
        Text textControl = (Text) cellEditor.getControl ();
        WrapLabel label = textEP.getLabel ();
        Assert.isNotNull (label);
        label.setText (toEdit);
        if (cellEditor instanceof TextCellEditorEx) {
            ((TextCellEditorEx) cellEditor).setValueAndProcessEditOccured (toEdit);
        } else {
            cellEditor.setValue (toEdit);
        }
        textControl.selectAll ();
    }

    public void show (char initialChar) {
        show ();
        String initialString = String.valueOf (initialChar);
        setEditText (initialString);
    }

    public void show (Point location) {
        show ();
        sendMouseClick (location);
    }

    private void sendMouseClick (final Point location) {
        final Display currDisplay = Display.getCurrent ();
        new Thread () {
            Event event;

            public void run () {
                event = new Event ();
                event.type = SWT.MouseDown;
                event.button = 1;
                event.x = location.x;
                event.y = location.y;
                currDisplay.post (event);
                event.type = SWT.MouseUp;
                currDisplay.post (event);
            }

        }

        .start ();
    }

    protected void unhookListeners () {
        if (listenersAttached) {
            listenersAttached = false;
            super.unhookListeners ();
        }
    }

    protected void setCellEditor (CellEditor editor) {
        super.setCellEditor (editor);
        if (editor != null) {
            listenersAttached = true;
        }
    }

}

