package org.eclipse.gmf.runtime.draw2d.ui.render.factory;

import java.awt.Color;

import java.io.ByteArrayInputStream;

import java.io.ByteArrayOutputStream;

import java.io.FileInputStream;

import java.io.InputStream;

import java.lang.ref.WeakReference;

import java.net.URL;

import java.security.InvalidParameterException;

import java.util.Map;

import java.util.WeakHashMap;

import java.util.zip.Adler32;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.AbstractRenderedImage;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderDebugOptions;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderPlugin;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.factory.RenderInfoImpl;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.factory.RenderedImageKey;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.image.ImageRenderedImage;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.svg.SVGImage;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.svg.metafile.EMFTranscoder;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.svg.metafile.WMFTranscoder;

public class RenderedImageFactory {
    static private Map instanceMap = new WeakHashMap ();

    static public RenderInfo createInfo (int width, int height, Color fill, Color outline, boolean maintainAspectRatio, boolean antialias) {
        RenderInfoImpl svgInfo = new RenderInfoImpl ();
        svgInfo.setValues (width, height, fill, outline, maintainAspectRatio, antialias);
        return svgInfo;
    }

    static public RenderedImage getInstance (URL theURL) {
        return getInstance (theURL, new RenderInfoImpl ());
    }

    static public RenderedImage getInstance (URL theURL, RenderInfo info) {
        try {
            InputStream is = theURL.openStream ();
            int size = is.available ();
            byte [] buffer = new byte [size];
            is.read (buffer);
            is.close ();
            return getInstance (buffer, info);
        } catch (Exception e) {
            Trace.throwing (Draw2dRenderPlugin.getInstance (), Draw2dRenderDebugOptions.EXCEPTIONS_THROWING, RenderedImage.class, "RenderedImageFactory.getInstance()", e);
        }
        return null;
    }

    static public RenderedImage getInstance (String szFilePath) {
        return getInstance (szFilePath, new RenderInfoImpl ());
    }

    static public RenderedImage getInstance (String szFilePath, RenderInfo info) {
        try {
            FileInputStream fis = new FileInputStream (szFilePath);
            int size = fis.available ();
            byte [] buffer = new byte [size];
            fis.read (buffer);
            fis.close ();
            return getInstance (buffer, info);
        } catch (Exception e) {
            Trace.throwing (Draw2dRenderPlugin.getInstance (), Draw2dRenderDebugOptions.EXCEPTIONS_THROWING, RenderedImageFactory.class, "RenderedImageFactory.getInstance()", e);
        }
        return null;
    }

    static public RenderedImage getInstance (byte [] buffer) {
        return getInstance (buffer, new RenderInfoImpl ());
    }

    static public RenderedImage getRelatedInstance (RenderedImage image, RenderInfo info) {
        if (image instanceof AbstractRenderedImage) {
            RenderedImageKey oldKey = ((AbstractRenderedImage) image).getKey ();
            RenderedImageKey key = new RenderedImageKey (oldKey.getChecksum (), info, oldKey.getExtraData ());
            WeakReference ref = (WeakReference) instanceMap.get (key);
            if (ref != null) {
                return (RenderedImage) ref.get ();
            } else {
                return autodetectImage (((AbstractRenderedImage) image).getBuffer (), key);
            }
        }
        return null;
    }

    static public RenderedImage getInstance (byte [] buffer, RenderInfo info) {
        if (buffer == null) throw new InvalidParameterException ();

        Adler32 checksum = new Adler32 ();
        checksum.update (buffer);
        final RenderedImageKey key = new RenderedImageKey (checksum.getValue (), info, null);
        WeakReference ref = (WeakReference) instanceMap.get (key);
        RenderedImage image = null;
        if (ref != null) image = (RenderedImage) (((WeakReference) instanceMap.get (key)).get ());
        else image = autodetectImage (buffer, key);

        return image;
    }

    private static RenderedImage autodetectImage (byte [] buffer, final RenderedImageKey key) {
        RenderedImage image = null;
        if (isSVG (buffer)) image = new SVGImage (buffer, key);
        else {
            try {
                WMFTranscoder imageTransformer = new WMFTranscoder ();
                ByteArrayInputStream input = new ByteArrayInputStream (buffer);
                ByteArrayOutputStream output = new ByteArrayOutputStream ();
                imageTransformer.transcode (input, output);
                image = new SVGImage (output.toByteArray (), key);
            } catch (Exception e2) {
                try {
                    EMFTranscoder imageTransformer = new EMFTranscoder ();
                    ByteArrayInputStream input = new ByteArrayInputStream (buffer);
                    ByteArrayOutputStream output = new ByteArrayOutputStream ();
                    imageTransformer.transcode (input, output);
                    image = new SVGImage (output.toByteArray (), key);
                } catch (Exception e3) {
                    image = new ImageRenderedImage (buffer, key);
                }
            }
        }
        if (image != null) {
            instanceMap.put (key, new WeakReference (image));
        }
        return image;
    }

    private static String getTestString (byte [] buffer) {
        if (buffer == null) return null;

        StringBuffer szTestBuf = new StringBuffer (10 + 1);
        for (int i = 0;
        i < 10; i ++) szTestBuf.insert (i, (char) buffer [i]);

        String szTest = new String (szTestBuf);
        szTest = szTest.trim ();
        return szTest;
    }

    private static boolean isSVG (byte [] buffer) {
        String szTest = getTestString (buffer);
        return szTest.startsWith ("<?xml");
    }

}

