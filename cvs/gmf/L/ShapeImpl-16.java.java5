package org.eclipse.gmf.gmfgraph.impl;

import java.util.ArrayList;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EcoreEList;

import org.eclipse.gmf.gmfgraph.Figure;

import org.eclipse.gmf.gmfgraph.FigureRef;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.LineKind;

import org.eclipse.gmf.gmfgraph.Shape;

public abstract class ShapeImpl extends RealFigureImpl implements Shape {
    protected static final boolean OUTLINE_EDEFAULT = true;
    protected boolean outline = OUTLINE_EDEFAULT;
    protected static final boolean FILL_EDEFAULT = true;
    protected boolean fill = FILL_EDEFAULT;
    protected static final int LINE_WIDTH_EDEFAULT = 1;
    protected int lineWidth = LINE_WIDTH_EDEFAULT;
    protected static final LineKind LINE_KIND_EDEFAULT = LineKind.LINE_SOLID_LITERAL;
    protected LineKind lineKind = LINE_KIND_EDEFAULT;
    protected static final boolean XOR_FILL_EDEFAULT = false;
    protected boolean xorFill = XOR_FILL_EDEFAULT;
    protected static final boolean XOR_OUTLINE_EDEFAULT = false;
    protected boolean xorOutline = XOR_OUTLINE_EDEFAULT;

    protected ShapeImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getShape ();
    }

    public EList < Figure > getResolvedChildren () {
        ArrayList < Figure > r = new ArrayList < Figure > (getChildren ().size ());
        for (Figure next : getChildren ()) {
            if (next instanceof FigureRef) {
                r.add (((FigureRef) next).getFigure ());
            } else {
                r.add (next);
            }
        }
        return new EcoreEList.UnmodifiableEList < Figure > (this, GMFGraphPackage.eINSTANCE.getShape_ResolvedChildren (), r.size (), r.toArray ());
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.SHAPE__OUTLINE :
                return isOutline () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGraphPackage.SHAPE__FILL :
                return isFill () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGraphPackage.SHAPE__LINE_WIDTH :
                return new Integer (getLineWidth ());
            case GMFGraphPackage.SHAPE__LINE_KIND :
                return getLineKind ();
            case GMFGraphPackage.SHAPE__XOR_FILL :
                return isXorFill () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGraphPackage.SHAPE__XOR_OUTLINE :
                return isXorOutline () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGraphPackage.SHAPE__RESOLVED_CHILDREN :
                return getResolvedChildren ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.SHAPE__OUTLINE :
                setOutline (((Boolean) newValue).booleanValue ());
                return;
            case GMFGraphPackage.SHAPE__FILL :
                setFill (((Boolean) newValue).booleanValue ());
                return;
            case GMFGraphPackage.SHAPE__LINE_WIDTH :
                setLineWidth (((Integer) newValue).intValue ());
                return;
            case GMFGraphPackage.SHAPE__LINE_KIND :
                setLineKind ((LineKind) newValue);
                return;
            case GMFGraphPackage.SHAPE__XOR_FILL :
                setXorFill (((Boolean) newValue).booleanValue ());
                return;
            case GMFGraphPackage.SHAPE__XOR_OUTLINE :
                setXorOutline (((Boolean) newValue).booleanValue ());
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.SHAPE__OUTLINE :
                setOutline (OUTLINE_EDEFAULT);
                return;
            case GMFGraphPackage.SHAPE__FILL :
                setFill (FILL_EDEFAULT);
                return;
            case GMFGraphPackage.SHAPE__LINE_WIDTH :
                setLineWidth (LINE_WIDTH_EDEFAULT);
                return;
            case GMFGraphPackage.SHAPE__LINE_KIND :
                setLineKind (LINE_KIND_EDEFAULT);
                return;
            case GMFGraphPackage.SHAPE__XOR_FILL :
                setXorFill (XOR_FILL_EDEFAULT);
                return;
            case GMFGraphPackage.SHAPE__XOR_OUTLINE :
                setXorOutline (XOR_OUTLINE_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.SHAPE__OUTLINE :
                return outline != OUTLINE_EDEFAULT;
            case GMFGraphPackage.SHAPE__FILL :
                return fill != FILL_EDEFAULT;
            case GMFGraphPackage.SHAPE__LINE_WIDTH :
                return lineWidth != LINE_WIDTH_EDEFAULT;
            case GMFGraphPackage.SHAPE__LINE_KIND :
                return lineKind != LINE_KIND_EDEFAULT;
            case GMFGraphPackage.SHAPE__XOR_FILL :
                return xorFill != XOR_FILL_EDEFAULT;
            case GMFGraphPackage.SHAPE__XOR_OUTLINE :
                return xorOutline != XOR_OUTLINE_EDEFAULT;
            case GMFGraphPackage.SHAPE__RESOLVED_CHILDREN :
                return ! getResolvedChildren ().isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    public boolean isOutline () {
        return outline;
    }

    public void setOutline (boolean newOutline) {
        boolean oldOutline = outline;
        outline = newOutline;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__OUTLINE, oldOutline, outline));

    }

    public boolean isFill () {
        return fill;
    }

    public void setFill (boolean newFill) {
        boolean oldFill = fill;
        fill = newFill;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__FILL, oldFill, fill));

    }

    public int getLineWidth () {
        return lineWidth;
    }

    public void setLineWidth (int newLineWidth) {
        int oldLineWidth = lineWidth;
        lineWidth = newLineWidth;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__LINE_WIDTH, oldLineWidth, lineWidth));

    }

    public LineKind getLineKind () {
        return lineKind;
    }

    public void setLineKind (LineKind newLineKind) {
        LineKind oldLineKind = lineKind;
        lineKind = newLineKind == null ? LINE_KIND_EDEFAULT : newLineKind;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__LINE_KIND, oldLineKind, lineKind));

    }

    public boolean isXorFill () {
        return xorFill;
    }

    public void setXorFill (boolean newXorFill) {
        boolean oldXorFill = xorFill;
        xorFill = newXorFill;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__XOR_FILL, oldXorFill, xorFill));

    }

    public boolean isXorOutline () {
        return xorOutline;
    }

    public void setXorOutline (boolean newXorOutline) {
        boolean oldXorOutline = xorOutline;
        xorOutline = newXorOutline;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__XOR_OUTLINE, oldXorOutline, xorOutline));

    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (outline: ");
        result.append (outline);
        result.append (", fill: ");
        result.append (fill);
        result.append (", lineWidth: ");
        result.append (lineWidth);
        result.append (", lineKind: ");
        result.append (lineKind);
        result.append (", xorFill: ");
        result.append (xorFill);
        result.append (", xorOutline: ");
        result.append (xorOutline);
        result.append (')');
        return result.toString ();
    }

}

