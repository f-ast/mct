package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.draw2d.ColorConstants;

import org.eclipse.draw2d.FigureCanvas;

import org.eclipse.draw2d.FigureListener;

import org.eclipse.draw2d.Graphics;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.Label;

import org.eclipse.draw2d.MouseEvent;

import org.eclipse.draw2d.MouseListener;

import org.eclipse.draw2d.RoundedRectangle;

import org.eclipse.draw2d.Viewport;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.DragTracker;

import org.eclipse.gef.Handle;

import org.eclipse.gef.LayerConstants;

import org.eclipse.gef.Tool;

import org.eclipse.gef.requests.CreateRequest;

import org.eclipse.gef.tools.SelectionTool;

import org.eclipse.gmf.runtime.common.ui.services.icon.IconService;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ISurfaceEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramUIPluginImages;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;

import org.eclipse.gmf.runtime.diagram.ui.tools.AbstractPopupBarTool;

import org.eclipse.gmf.runtime.diagram.ui.tools.PopupBarTool;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantService;

import org.eclipse.osgi.util.NLS;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Display;

public class PopupBarEditPolicy extends DiagramAssistantEditPolicy {
    private class PopupBarDescriptor {
        private String _tooltip = new String ();
        private Image _icon = null;
        private IElementType _elementType;
        private DragTracker _dragTracker = null;

        public PopupBarDescriptor (String s, Image i, IElementType elementType, DragTracker theTracker) {
            _tooltip = s;
            _icon = i;
            _dragTracker = theTracker;
            _elementType = elementType;
        }

        public final IElementType getElementtype () {
            return _elementType;
        }

        public final Image getIcon () {
            return _icon;
        }

        public final DragTracker getDragTracker () {
            return _dragTracker;
        }

        public final String getToolTip () {
            return _tooltip;
        }

    }

    private class PopupBarLabelHandle extends Label implements Handle {
        private boolean myMouseOver = false;
        private Image myDisabledImage = null;
        private DragTracker myDragTracker = null;

        private Image getDisabledImage () {
            if (myDisabledImage != null) return myDisabledImage;

            Image theImage = this.getIcon ();
            if (theImage == null) return null;

            myDisabledImage = new Image (Display.getCurrent (), theImage, SWT.IMAGE_DISABLE);
            imagesToBeDisposed.add (myDisabledImage);
            return myDisabledImage;
        }

        public PopupBarLabelHandle (DragTracker tracker, Image theImage) {
            super (theImage);
            myDragTracker = tracker;
            this.setOpaque (true);
            this.setBackgroundColor (ColorConstants.buttonLightest);
            calculateEnabled ();
        }

        public Point getAccessibleLocation () {
            return null;
        }

        public DragTracker getDragTracker () {
            return myDragTracker;
        }

        protected void paintBorder (Graphics graphics) {
            super.paintBorder (graphics);
            if (myMouseOver) {
                Rectangle area = getClientArea ();
                graphics.setForegroundColor (ColorConstants.black);
                graphics.setBackgroundColor (ColorConstants.white);
                graphics.drawFocus (area.x, area.y, area.width - 1, area.height - 1);
            }
        }

        public void handleMouseEntered (MouseEvent event) {
            calculateEnabled ();
            super.handleMouseEntered (event);
            myMouseOver = true;
            repaint ();
        }

        public void handleMouseExited (MouseEvent event) {
            super.handleMouseExited (event);
            myMouseOver = false;
            repaint ();
        }

        public void handleMousePressed (MouseEvent event) {
            if (1 == event.button) {
                setFlag (POPUPBAR_MOVE_FIGURE, true);
            }
            super.handleMousePressed (event);
        }

        private void calculateEnabled () {
            if ((myDragTracker != null) && (myDragTracker instanceof AbstractPopupBarTool)) {
                AbstractPopupBarTool abarTool = (AbstractPopupBarTool) myDragTracker;
                setEnabled (abarTool.isCommandEnabled ());
            } else {
                setEnabled (true);
            }
        }

        protected void paintFigure (Graphics graphics) {
            if (! isEnabled ()) {
                Image theImage = getDisabledImage ();
                if (theImage != null) {
                    graphics.translate (bounds.x, bounds.y);
                    graphics.drawImage (theImage, getIconLocation ());
                    graphics.translate (- bounds.x, - bounds.y);
                    return;
                }
            }
            super.paintFigure (graphics);
        }

    }

    private static Image IMAGE_POPUPBAR_PLUS = DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_POPUPBAR_PLUS);
    private static Image IMAGE_POPUPBAR = DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_POPUPBAR);
    private class RoundedRectangleWithTail extends RoundedRectangle {
        private Image myTailImage = null;
        private boolean bIsInit = false;
        private int myCornerDimension = 6;

        public RoundedRectangleWithTail () {
            this.setFill (true);
            this.setBackgroundColor (ColorConstants.buttonLightest);
            this.setForegroundColor (ColorConstants.lightGray);
            this.setVisible (true);
            this.setEnabled (true);
            this.setOpaque (true);
        }

        public void paintFigure (Graphics graphics) {
            int shiftWidth = 3;
            Image theTail = getTail ();
            Rectangle theBounds = this.getBounds ().getCopy ();
            theBounds.height -= theTail.getBounds ().height;
            theBounds.height -= shiftWidth;
            theBounds.x += shiftWidth;
            theBounds.width -= (shiftWidth + 1);
            graphics.fillRoundRectangle (theBounds, myCornerDimension, myCornerDimension);
            graphics.drawRoundRectangle (theBounds, myCornerDimension, myCornerDimension);
            graphics.drawImage (theTail, theBounds.x + 6, theBounds.y + theBounds.height - 1);
        }

        private Image getTail () {
            if (! bIsInit) {
                if (getIsDisplayAtMouseHoverLocation () && ! isHostConnection ()) {
                    if (myTailImage == null) {
                        myTailImage = IMAGE_POPUPBAR_PLUS;
                        bIsInit = true;
                    }
                } else {
                    if (myTailImage == null) {
                        myTailImage = IMAGE_POPUPBAR;
                        bIsInit = true;
                    }
                }
            }
            return myTailImage;
        }

    }

    protected boolean isDiagramAssistant (Object object) {
        return object instanceof RoundedRectangleWithTail || object instanceof PopupBarLabelHandle;
    }

    public void mouseHover (MouseEvent me) {
        if (! isDiagramAssistant (me.getSource ())) setAvoidHidingDiagramAssistant (false);

        setMouseLocation (me.getLocation ());
        if (getIsDisplayAtMouseHoverLocation ()) showDiagramAssistantAfterDelay (getAppearanceDelayLocationSpecific ());
        else if (shouldShowDiagramAssistant ()) {
            showDiagramAssistant (getMouseLocation ());
        }

    }

    public void mouseMoved (MouseEvent me) {
        if (getIsDisplayAtMouseHoverLocation ()) {
            Object srcObj = me.getSource ();
            if ((srcObj != null) && srcObj.equals (getHostFigure ())) {
                hideDiagramAssistant ();
            }
        }
        setAvoidHidingDiagramAssistant (true);
        setMouseLocation (me.getLocation ());
        if (! getIsDisplayAtMouseHoverLocation ()) {
            if (! isDiagramAssistant (me.getSource ())) setAvoidHidingDiagramAssistant (false);

            showDiagramAssistantAfterDelay (getAppearanceDelay ());
        }
    }

    private class OwnerMovedListener implements FigureListener {
        private Point myPopupBarLastPosition = new Point (0, 0);

        boolean hasPositionChanged (Rectangle theBounds) {
            if (theBounds.x != myPopupBarLastPosition.x) return true;

            if (theBounds.y != myPopupBarLastPosition.y) return true;

            return false;
        }

        public void figureMoved (IFigure source) {
            if (getFlag (POPUPBAR_MOVE_FIGURE) && hasPositionChanged (source.getBounds ())) {
                hideDiagramAssistant ();
            } else {
                setFlag (POPUPBAR_MOVE_FIGURE, false);
                Rectangle theBounds = source.getBounds ();
                myPopupBarLastPosition.setLocation (theBounds.x, theBounds.y);
            }
        }

    }

    private class PopupBarMouseListener extends MouseListener.Stub {

        public void mousePressed (MouseEvent me) {
            if (3 == me.button) {
                hideDiagramAssistant ();
            }
            super.mousePressed (me);
            setPopupBarOnDiagramActivated (true);
        }

        public void mouseReleased (MouseEvent me) {
            super.mouseReleased (me);
        }

    }

    static private int BALLOON_Y_OFFSET = 10;
    static private double BALLOON_X_OFFSET_RHS = 0.65;
    static private double BALLOON_X_OFFSET_LHS = 0.25;
    static private int ACTION_WIDTH_HGT = 30;
    static private int ACTION_BUTTON_START_X = 5;
    static private int ACTION_BUTTON_START_Y = 5;
    static private int ACTION_MARGIN_RIGHT = 10;
    static private int POPUPBAR_ACTIVATEONHOVER = 0x01;
    static private int POPUPBAR_MOVE_FIGURE = 0x02;
    static private int POPUPBAR_DISPLAYATMOUSEHOVERLOCATION = 0x04;
    static private int POPUPBAR_ONDIAGRAMACTIVATED = 0x10;
    static private int POPUPBAR_HOST_IS_CONNECTION = 0x20;
    private int myPopupBarFlags = POPUPBAR_ACTIVATEONHOVER;
    private double myBallonOffsetPercent = BALLOON_X_OFFSET_RHS;
    private IFigure myBalloon = null;
    private List myPopupBarDescriptors = new ArrayList ();
    protected List imagesToBeDisposed = new ArrayList ();
    private PopupBarMouseListener myMouseKeyListener = new PopupBarMouseListener ();
    private OwnerMovedListener myOwnerMovedListener = new OwnerMovedListener ();

    private void setFlag (int bit, boolean b) {
        if (b) myPopupBarFlags |= bit;
        else if (getFlag (bit)) myPopupBarFlags ^= bit;

    }

    private boolean getFlag (int bit) {
        return ((myPopupBarFlags & bit) > 0);
    }

    private void setPopupBarOnDiagramActivated (boolean bVal) {
        setFlag (POPUPBAR_ONDIAGRAMACTIVATED, bVal);
    }

    private boolean getPopupBarOnDiagramActivated () {
        return getFlag (POPUPBAR_ONDIAGRAMACTIVATED);
    }

    protected void setHostConnection (boolean bVal) {
        setFlag (POPUPBAR_HOST_IS_CONNECTION, bVal);
    }

    protected boolean isHostConnection () {
        return getFlag (POPUPBAR_HOST_IS_CONNECTION);
    }

    protected void populatePopupBars () {
        fillPopupBarDescriptors ();
        List types = ModelingAssistantService.getInstance ().getTypesForPopupBar (getHost ());
        for (Iterator iter = types.iterator ();
        iter.hasNext ();) {
            Object type = iter.next ();
            if (type instanceof IElementType) {
                addPopupBarDescriptor ((IElementType) type, IconService.getInstance ().getIcon ((IElementType) type));
            }
        }
    }

    protected void fillPopupBarDescriptors () {
    }

    private boolean isSelectionToolActive () {
        if (getHost ().getParent () != null && getHost ().isActive ()) {
            Tool theTool = getHost ().getViewer ().getEditDomain ().getActiveTool ();
            if ((theTool != null) && theTool instanceof SelectionTool) {
                return true;
            }
        }
        return false;
    }

    protected boolean shouldShowDiagramAssistant () {
        if (! super.shouldShowDiagramAssistant ()) {
            return false;
        }
        if (this.getIsDisplayAtMouseHoverLocation ()) {
            if (isHostConnection ()) return isSelectionToolActive ();

            if (getPopupBarOnDiagramActivated ()) return isSelectionToolActive ();

            return false;
        } else return isSelectionToolActive ();

    }

    protected void addPopupBarDescriptor (IElementType elementType, Image theImage, DragTracker theTracker, String theTip) {
        PopupBarDescriptor desc = new PopupBarDescriptor (theTip, theImage, elementType, theTracker);
        myPopupBarDescriptors.add (desc);
    }

    protected void addPopupBarDescriptor (IElementType elementType, Image theImage, DragTracker theTracker) {
        String theInputStr = DiagramUIMessages.PopupBar_AddNew;
        String theTip = NLS.bind (theInputStr, elementType.getDisplayName ());
        addPopupBarDescriptor (elementType, theImage, theTracker, theTip);
    }

    protected void addPopupBarDescriptor (IElementType elementType, Image theImage) {
        this.addPopupBarDescriptor (elementType, theImage, new PopupBarTool (getHost (), elementType));
    }

    protected void addPopupBarDescriptor (IElementType elementType, Image theImage, String theTip) {
        PopupBarTool theTracker = new PopupBarTool (getHost (), elementType);
        PopupBarDescriptor desc = new PopupBarDescriptor (theTip, theImage, elementType, theTracker);
        myPopupBarDescriptors.add (desc);
    }

    protected void addPopupBarDescriptor (IElementType elementType, Image theImage, CreateRequest theRequest) {
        PopupBarTool theTracker = new PopupBarTool (getHost (), theRequest);
        this.addPopupBarDescriptor (elementType, theImage, theTracker);
    }

    protected List getPopupBarDescriptors () {
        return myPopupBarDescriptors;
    }

    private void initPopupBars () {
        List theList = getPopupBarDescriptors ();
        if (theList.isEmpty ()) {
            return;
        }
        myBalloon = createPopupBarFigure ();
        int iTotal = ACTION_WIDTH_HGT * theList.size () + ACTION_MARGIN_RIGHT;
        getBalloon ().setSize (iTotal, ACTION_WIDTH_HGT + 2 * ACTION_BUTTON_START_Y);
        int xLoc = ACTION_BUTTON_START_X;
        int yLoc = ACTION_BUTTON_START_Y;
        for (Iterator iter = theList.iterator ();
        iter.hasNext ();) {
            PopupBarDescriptor theDesc = (PopupBarDescriptor) iter.next ();
            PopupBarLabelHandle b = new PopupBarLabelHandle (theDesc.getDragTracker (), theDesc.getIcon ());
            Rectangle r1 = new Rectangle ();
            r1.setLocation (xLoc, yLoc);
            xLoc += ACTION_WIDTH_HGT;
            r1.setSize (ACTION_WIDTH_HGT, ACTION_WIDTH_HGT - ACTION_MARGIN_RIGHT);
            Label l = new Label ();
            l.setText (theDesc.getToolTip ());
            b.setToolTip (l);
            b.setPreferredSize (ACTION_WIDTH_HGT, ACTION_WIDTH_HGT);
            b.setBounds (r1);
            getBalloon ().add (b);
            b.addMouseMotionListener (this);
            b.addMouseListener (this.myMouseKeyListener);
        }
    }

    String getPreferenceName () {
        return IPreferenceConstants.PREF_SHOW_POPUP_BARS;
    }

    protected boolean isDiagramAssistantShowing () {
        return getBalloon () != null;
    }

    private IFigure getBalloon () {
        return myBalloon;
    }

    protected IFigure createPopupBarFigure () {
        return new RoundedRectangleWithTail ();
    }

    protected void showDiagramAssistant (Point referencePoint) {
        if (getBalloon () != null && getBalloon ().getParent () != null) {
            return;
        }
        if (this.myPopupBarDescriptors.isEmpty ()) {
            populatePopupBars ();
            initPopupBars ();
            if (myPopupBarDescriptors.isEmpty ()) {
                return;
            }
        }
        getBalloon ().addMouseMotionListener (this);
        getBalloon ().addMouseListener (myMouseKeyListener);
        IFigure layer = getLayer (LayerConstants.HANDLE_LAYER);
        layer.add (getBalloon ());
        if (referencePoint == null) {
            referencePoint = getHostFigure ().getBounds ().getCenter ();
        }
        Point thePoint = getBalloonPosition (referencePoint);
        getBalloon ().setLocation (thePoint);
        if (! shouldAvoidHidingDiagramAssistant ()) {
            hideDiagramAssistantAfterDelay (getDisappearanceDelay ());
        }
    }

    protected boolean getIsDisplayAtMouseHoverLocation () {
        return getFlag (POPUPBAR_DISPLAYATMOUSEHOVERLOCATION);
    }

    protected void setIsDisplayAtMouseHoverLocation (boolean bVal) {
        setFlag (POPUPBAR_DISPLAYATMOUSEHOVERLOCATION, bVal);
    }

    private Point getBalloonPosition (Point referencePoint) {
        Point thePoint = new Point ();
        boolean atMouse = getIsDisplayAtMouseHoverLocation ();
        if (atMouse) {
            thePoint.setLocation (referencePoint);
            getHostFigure ().translateToAbsolute (thePoint);
            getBalloon ().translateToRelative (thePoint);
            thePoint.y -= ACTION_WIDTH_HGT;
            if (willBalloonBeClipped (thePoint)) {
                Rectangle rcBounds = getHostFigure ().getBounds ().getCopy ();
                getHostFigure ().translateToAbsolute (rcBounds);
                getBalloon ().translateToRelative (rcBounds);
                Dimension dim = getBalloon ().getSize ();
                int offsetX = dim.width + ACTION_WIDTH_HGT;
                thePoint.x = rcBounds.right () - offsetX;
            }
        } else {
            Dimension theoffset = new Dimension ();
            Rectangle rcBounds = getHostFigure ().getBounds ().getCopy ();
            getHostFigure ().translateToAbsolute (rcBounds);
            getBalloon ().translateToRelative (rcBounds);
            theoffset.height = - (BALLOON_Y_OFFSET + ACTION_WIDTH_HGT);
            theoffset.width = (int) (rcBounds.width * myBallonOffsetPercent);
            thePoint.x = rcBounds.x + theoffset.width;
            thePoint.y = rcBounds.y + theoffset.height;
            if (isRightDisplay () && willBalloonBeClipped (thePoint)) {
                this.setLeftHandDisplay ();
                theoffset.width = (int) (rcBounds.width * myBallonOffsetPercent);
                thePoint.x = rcBounds.x + theoffset.width;
            }
        }
        return thePoint;
    }

    private boolean willBalloonBeClipped (Point pnt) {
        Control ctrl1 = getHost ().getViewer ().getControl ();
        if (ctrl1 instanceof FigureCanvas) {
            FigureCanvas figureCanvas = (FigureCanvas) ctrl1;
            Viewport vp = figureCanvas.getViewport ();
            Rectangle vpRect = vp.getClientArea ();
            Dimension dim = getBalloon ().getSize ();
            if ((pnt.x + dim.width) >= (vpRect.x + vpRect.width)) {
                return true;
            }
        }
        return false;
    }

    private void teardownPopupBar () {
        getBalloon ().removeMouseMotionListener (this);
        getBalloon ().removeMouseListener (myMouseKeyListener);
        IFigure layer = getLayer (LayerConstants.HANDLE_LAYER);
        if (myBalloon.getParent () != null) {
            layer.remove (myBalloon);
        }
        myBalloon = null;
        this.myPopupBarDescriptors.clear ();
        setRightHandDisplay ();
        for (Iterator iter = imagesToBeDisposed.iterator ();
        iter.hasNext ();) {
            ((Image) iter.next ()).dispose ();
        }
        imagesToBeDisposed.clear ();
    }

    protected void hideDiagramAssistant () {
        if (getBalloon () != null) {
            teardownPopupBar ();
        }
    }

    protected void showDiagramAssistantAfterDelay (int theDelay) {
        if (! isDiagramAssistantShowing ()) {
            super.showDiagramAssistantAfterDelay (theDelay);
        }
    }

    public void activate () {
        super.activate ();
        getHostFigure ().addMouseListener (this.myMouseKeyListener);
        getHostFigure ().addFigureListener (this.myOwnerMovedListener);
        if (getHost () instanceof ISurfaceEditPart) {
            setIsDisplayAtMouseHoverLocation (true);
        }
    }

    public void deactivate () {
        getHostFigure ().removeMouseListener (this.myMouseKeyListener);
        getHostFigure ().removeFigureListener (this.myOwnerMovedListener);
        super.deactivate ();
    }

    protected void setRightHandDisplay () {
        this.myBallonOffsetPercent = BALLOON_X_OFFSET_RHS;
    }

    protected void setLeftHandDisplay () {
        this.myBallonOffsetPercent = BALLOON_X_OFFSET_LHS;
    }

    protected boolean isRightDisplay () {
        return (BALLOON_X_OFFSET_RHS == myBallonOffsetPercent);
    }

    protected int getAppearanceDelayLocationSpecific () {
        return getAppearanceDelay ();
    }

}

