package org.eclipse.gmf.internal.common.codegen;

import java.util.Iterator;

import java.util.NoSuchElementException;

public class TaggedTextMerger {
    private String beginTag;
    private String endTag;

    public TaggedTextMerger (String beginTag, String endTag) {
        this.beginTag = beginTag;
        this.endTag = endTag;
    }

    public String getBeginTag () {
        return beginTag;
    }

    public String getEndTag () {
        return endTag;
    }

    public String process (String oldText, String newText) {
        int bpos = newText.indexOf (getBeginTag ());
        if (bpos < 0) {
            return newText;
        }
        int epos = newText.indexOf (getEndTag ());
        if (epos < 0 || epos <= bpos) {
            return newText;
        }
        StringBuffer sb = new StringBuffer ();
        try {
            Iterator regions = new RegionsIterator (oldText);
            if (regions.hasNext ()) {
                do {
                    sb.append (regions.next ());
                } while (regions.hasNext ());
            } else {
                sb.append (newText.substring (bpos + getBeginTag ().length (), epos));
            }
        } catch (NoSuchElementException nsee) {
            return newText;
        }
        return newText.substring (0, bpos + getBeginTag ().length ()) + sb.toString () + newText.substring (epos);
    }

    protected class RegionsIterator implements Iterator {
        private String text;
        private int offset;

        public RegionsIterator (String text) {
            assert text != null;
            this.text = text;
        }

        public boolean hasNext () {
            return text.indexOf (getBeginTag (), offset) > 0;
        }

        public Object next () {
            int bpos = text.indexOf (getBeginTag (), offset);
            if (bpos < 0) {
                throw new NoSuchElementException ();
            }
            int epos = text.indexOf (getEndTag (), bpos + getBeginTag ().length ());
            if (epos < 0) {
                throw new NoSuchElementException ();
            }
            offset = epos + getEndTag ().length ();
            return text.substring (bpos + getBeginTag ().length (), epos);
        }

        public void remove () {
            throw new UnsupportedOperationException ();
        }

    }

}

