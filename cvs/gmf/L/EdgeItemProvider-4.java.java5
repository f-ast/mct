package org.eclipse.gmf.runtime.notation.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.NotationEditPlugin;

import org.eclipse.gmf.runtime.notation.NotationFactory;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class EdgeItemProvider extends ViewItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public EdgeItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addSourcePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_Edge_source_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_Edge_source_feature", "_UI_Edge_type"), NotationPackage.Literals.EDGE__SOURCE, true, null, null, null));
    }

    protected void addTargetPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_Edge_target_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_Edge_target_feature", "_UI_Edge_type"), NotationPackage.Literals.EDGE__TARGET, true, null, null, null));
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (NotationPackage.Literals.EDGE__BENDPOINTS);
            childrenFeatures.add (NotationPackage.Literals.EDGE__SOURCE_ANCHOR);
            childrenFeatures.add (NotationPackage.Literals.EDGE__TARGET_ANCHOR);
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    protected void addSourceAnchorPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getString ("_UI_Edge_sourceAnchor_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_Edge_sourceAnchor_feature", "_UI_Edge_type"), NotationPackage.eINSTANCE.getEdge_SourceAnchor (), true));
    }

    protected void addTargetAnchorPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getString ("_UI_Edge_targetAnchor_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_Edge_targetAnchor_feature", "_UI_Edge_type"), NotationPackage.eINSTANCE.getEdge_TargetAnchor (), true));
    }

    protected void addBendpointsPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getString ("_UI_Edge_bendpoints_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_Edge_bendpoints_feature", "_UI_Edge_type"), NotationPackage.eINSTANCE.getEdge_Bendpoints (), false));
    }

    public Object getImage (Object object) {
        return getResourceLocator ().getImage ("full/obj16/Edge");
    }

    public String getText (Object object) {
        Edge edge = (Edge) object;
        return getString ("_UI_Edge_type") + " " + edge.isVisible ();
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (Edge.class)) {
            case NotationPackage.EDGE__BENDPOINTS :
            case NotationPackage.EDGE__SOURCE_ANCHOR :
            case NotationPackage.EDGE__TARGET_ANCHOR :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.EDGE__BENDPOINTS, NotationFactory.eINSTANCE.createRelativeBendpoints ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.EDGE__SOURCE_ANCHOR, NotationFactory.eINSTANCE.createIdentityAnchor ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.EDGE__TARGET_ANCHOR, NotationFactory.eINSTANCE.createIdentityAnchor ()));
    }

    public String getCreateChildText (Object owner, Object feature, Object child, Collection selection) {
        Object childFeature = feature;
        Object childObject = child;
        boolean qualify = childFeature == NotationPackage.Literals.VIEW__PERSISTED_CHILDREN || childFeature == NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN || childFeature == NotationPackage.Literals.EDGE__SOURCE_ANCHOR || childFeature == NotationPackage.Literals.EDGE__TARGET_ANCHOR;
        if (qualify) {
            return getString ("_UI_CreateChild_text2", new Object [] {getTypeText (childObject), getFeatureText (childFeature), getTypeText (owner)});
        }
        return super.getCreateChildText (owner, feature, child, selection);
    }

    public ResourceLocator getResourceLocator () {
        return NotationEditPlugin.INSTANCE;
    }

}

