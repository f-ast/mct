package org.eclipse.gmf.runtime.notation;

import java.util.Arrays;

import java.util.Collections;

import java.util.List;

import org.eclipse.emf.common.util.AbstractEnumerator;

public final class MeasurementUnit extends AbstractEnumerator {
    public static final int HIMETRIC = 0;
    public static final int PIXEL = 1;
    public static final MeasurementUnit HIMETRIC_LITERAL = new MeasurementUnit (HIMETRIC, "Himetric", "Himetric");
    public static final MeasurementUnit PIXEL_LITERAL = new MeasurementUnit (PIXEL, "Pixel", "Pixel");
    private static final MeasurementUnit [] VALUES_ARRAY = new MeasurementUnit [] {HIMETRIC_LITERAL, PIXEL_LITERAL,};
    public static final List VALUES = Collections.unmodifiableList (Arrays.asList (VALUES_ARRAY));

    public static MeasurementUnit get (String literal) {
        for (int i = 0;
        i < VALUES_ARRAY.length; ++ i) {
            MeasurementUnit result = VALUES_ARRAY [i];
            if (result.toString ().equals (literal)) {
                return result;
            }
        }
        return null;
    }

    public static MeasurementUnit getByName (String name) {
        for (int i = 0;
        i < VALUES_ARRAY.length; ++ i) {
            MeasurementUnit result = VALUES_ARRAY [i];
            if (result.getName ().equals (name)) {
                return result;
            }
        }
        return null;
    }

    public static MeasurementUnit get (int value) {
        switch (value) {
            case HIMETRIC :
                return HIMETRIC_LITERAL;
            case PIXEL :
                return PIXEL_LITERAL;
        }
        return null;
    }

    private MeasurementUnit (int value, String name, String literal) {
        super (value, name, literal);
    }

}

