package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.codegen.ecore.genmodel.GenClassifier;

import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenDomainAttributeTarget;

public class GenDomainAttributeTargetImpl extends GenAuditableImpl implements GenDomainAttributeTarget {
    protected GenFeature attribute = null;
    protected static final boolean NULL_AS_ERROR_EDEFAULT = false;
    protected boolean nullAsError = NULL_AS_ERROR_EDEFAULT;

    protected GenDomainAttributeTargetImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenDomainAttributeTarget ();
    }

    public GenFeature getAttribute () {
        if (attribute != null && attribute.eIsProxy ()) {
            InternalEObject oldAttribute = (InternalEObject) attribute;
            attribute = (GenFeature) eResolveProxy (oldAttribute);
            if (attribute != oldAttribute) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.GEN_DOMAIN_ATTRIBUTE_TARGET__ATTRIBUTE, oldAttribute, attribute));

            }
        }
        return attribute;
    }

    public GenFeature basicGetAttribute () {
        return attribute;
    }

    public void setAttribute (GenFeature newAttribute) {
        GenFeature oldAttribute = attribute;
        attribute = newAttribute;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DOMAIN_ATTRIBUTE_TARGET__ATTRIBUTE, oldAttribute, attribute));

    }

    public GenClassifier getContext () {
        if (getAttribute () == null) {
            return null;
        }
        return getAttribute ().getTypeGenClassifier ();
    }

    public GenClass getTargetClass () {
        if (getAttribute () == null) {
            return null;
        }
        return getAttribute ().getGenClass ();
    }

    public boolean isNullAsError () {
        return nullAsError;
    }

    public void setNullAsError (boolean newNullAsError) {
        boolean oldNullAsError = nullAsError;
        nullAsError = newNullAsError;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DOMAIN_ATTRIBUTE_TARGET__NULL_AS_ERROR, oldNullAsError, nullAsError));

    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_DOMAIN_ATTRIBUTE_TARGET__ATTRIBUTE :
                if (resolve) return getAttribute ();

                return basicGetAttribute ();
            case GMFGenPackage.GEN_DOMAIN_ATTRIBUTE_TARGET__NULL_AS_ERROR :
                return isNullAsError () ? Boolean.TRUE : Boolean.FALSE;
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_DOMAIN_ATTRIBUTE_TARGET__ATTRIBUTE :
                setAttribute ((GenFeature) newValue);
                return;
            case GMFGenPackage.GEN_DOMAIN_ATTRIBUTE_TARGET__NULL_AS_ERROR :
                setNullAsError (((Boolean) newValue).booleanValue ());
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_DOMAIN_ATTRIBUTE_TARGET__ATTRIBUTE :
                setAttribute ((GenFeature) null);
                return;
            case GMFGenPackage.GEN_DOMAIN_ATTRIBUTE_TARGET__NULL_AS_ERROR :
                setNullAsError (NULL_AS_ERROR_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_DOMAIN_ATTRIBUTE_TARGET__ATTRIBUTE :
                return attribute != null;
            case GMFGenPackage.GEN_DOMAIN_ATTRIBUTE_TARGET__NULL_AS_ERROR :
                return nullAsError != NULL_AS_ERROR_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (nullAsError: ");
        result.append (nullAsError);
        result.append (')');
        return result.toString ();
    }

}

