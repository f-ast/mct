package org.eclipse.gmf.runtime.common.ui.services.dnd.core;

import java.util.Hashtable;

import java.util.List;

import java.util.Vector;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.services.dnd.drag.ITransferDragSourceListener;

import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.ITransferDropTargetListener;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.CommonUIServicesDNDDebugOptions;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.CommonUIServicesDNDPlugin;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.core.GetTransferAdapterOperation;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.core.IListenerContext;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.core.ITransferAdapterProvider;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.core.ListenerOperation;

public class TransferAdapterService extends Service implements ITransferAdapterProvider {
    protected static class ProviderDescriptor extends Service.ProviderDescriptor {
        private Hashtable adapterInfo = null;

        protected ProviderDescriptor (IConfigurationElement element, Hashtable anAdapterInfo) {
            super (element);
            assert null != anAdapterInfo : "anAdapterInfo cannot be null";
            this.adapterInfo = anAdapterInfo;
        }

        public boolean provides (IOperation operation) {
            if (! (operation instanceof GetTransferAdapterOperation)) {
                return false;
            }
            String operationType = ((GetTransferAdapterOperation) operation).getContext ().getOperationType ();
            String transferId = ((GetTransferAdapterOperation) operation).getContext ().getTransferId ();
            if (Trace.shouldTrace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND)) {
                Trace.trace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND, "TAS:provides::Operation Type is " + operationType);
                Trace.trace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND, "TAS:provides::Transfer id is " + transferId);
            }
            List transferIdList = (List) getAdapterInfo ().get (new Integer (operationType.hashCode ()));
            if (transferIdList == null) {
                return false;
            }
            return transferIdList.contains (new Integer (transferId.hashCode ()));
        }

        private Hashtable getAdapterInfo () {
            return adapterInfo;
        }

    }

    private final static TransferAdapterService instance = new TransferAdapterService ();

    static {
        instance.configureProviders (CommonUIServicesDNDPlugin.getPluginId (), "transferAdapterProviders");
    }

    public static TransferAdapterService getInstance () {
        return instance;
    }

    protected TransferAdapterService () {
        super (false);
    }

    private Object execute (ListenerOperation operation) {
        List results = execute (ExecutionStrategy.FIRST, operation);
        return results.isEmpty () ? null : results.get (0);
    }

    protected Service.ProviderDescriptor newProviderDescriptor (IConfigurationElement element) {
        return new ProviderDescriptor (element, getTransferAdapterProviderInfo (element));
    }

    private Hashtable getTransferAdapterProviderInfo (IConfigurationElement element) {
        Hashtable providerInfo = new Hashtable ();
        IConfigurationElement [] adapterTypeChildren = element.getChildren ("AdapterType");
        for (int i = 0;
        i < adapterTypeChildren.length; i ++) {
            IConfigurationElement adapterTypeConfig = adapterTypeChildren [i];
            String operationType = adapterTypeConfig.getAttribute ("operation");
            Vector listOftransferIds = new Vector ();
            IConfigurationElement [] transferChildren = adapterTypeConfig.getChildren ();
            for (int j = 0;
            j < transferChildren.length; j ++) {
                IConfigurationElement transferConfig = transferChildren [j];
                String id = transferConfig.getAttribute ("id");
                listOftransferIds.addElement (new Integer (id.hashCode ()));
            }
            providerInfo.put (new Integer (operationType.hashCode ()), listOftransferIds);
        }
        return providerInfo;
    }

    public ITransferDragSourceListener getTransferDragSourceAdapter (String transferId) {
        assert null != transferId : "transferId cannot be null";
        final String id = transferId;
        return (ITransferDragSourceListener) execute (new GetTransferAdapterOperation (new IListenerContext () {

            public String getOperationType () {
                return IListenerContext.DRAG;
            }

            public String getTransferId () {
                return id;
            }

        }

        ));
    }

    public ITransferDropTargetListener getTransferDropTargetAdapter (String transferId) {
        assert null != transferId : "transferId cannot be null";
        final String id = transferId;
        return (ITransferDropTargetListener) execute (new GetTransferAdapterOperation (new IListenerContext () {

            public String getOperationType () {
                return IListenerContext.DROP;
            }

            public String getTransferId () {
                return id;
            }

        }

        ));
    }

}

