package org.eclipse.gmf.internal.bridge.ui;

import java.text.MessageFormat;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Platform;

import org.eclipse.core.runtime.Status;

import org.eclipse.gmf.internal.bridge.resolver.ContainmentClosure;

import org.eclipse.jface.resource.ImageDescriptor;

import org.eclipse.jface.resource.ImageRegistry;

import org.eclipse.ui.plugin.AbstractUIPlugin;

import org.osgi.framework.BundleContext;

public class Plugin extends AbstractUIPlugin {
    public static final String CHECKED_ICON = "/icons/cview16/checked.gif";
    public static final String UNCHECKED_ICON = "/icons/cview16/unchecked.gif";
    public static final String GRAYED_ICON = "/icons/cview16/grayed.gif";
    public static final String NODE_ICON = "/icons/cview16/node.gif";
    public static final String LINK_ICON = "/icons/cview16/link.gif";
    public static final String LABEL_ICON = "/icons/cview16/label.gif";
    private static Plugin plugin;
    private ContainmentClosure myContainmentClosure;

    public Plugin () {
        plugin = this;
    }

    public void stop (BundleContext context) throws Exception {
        if (myContainmentClosure != null) {
            myContainmentClosure = null;
        }
        super.stop (context);
        plugin = null;
    }

    public ContainmentClosure getContaintmentClosure () {
        if (myContainmentClosure == null) {
            myContainmentClosure = new ContainmentClosure ();
        }
        return myContainmentClosure;
    }

    public static IStatus createStatus (int statusCode, String message, Throwable ex) {
        return new Status (statusCode, getPluginID (), 0, message, ex);
    }

    public static IStatus createError (String message, Throwable ex) {
        return createStatus (IStatus.ERROR, message, ex);
    }

    public static IStatus createWarning (String message) {
        return createStatus (IStatus.WARNING, message, null);
    }

    public static IStatus createInfo (String message) {
        return createStatus (IStatus.INFO, message, null);
    }

    public static IStatus createCancel (String message) {
        return createStatus (IStatus.CANCEL, message, null);
    }

    public static Plugin getDefault () {
        return plugin;
    }

    public static String getBundleString (String key) {
        return Platform.getResourceBundle (getDefault ().getBundle ()).getString (key);
    }

    public static String getBundleString (String key, Object [] args) {
        String val = getBundleString (key);
        if (val == null) {
            return key;
        }
        return MessageFormat.format (val, args);
    }

    protected void initializeImageRegistry (ImageRegistry reg) {
        loadImage (reg, CHECKED_ICON);
        loadImage (reg, UNCHECKED_ICON);
        loadImage (reg, GRAYED_ICON);
        loadImage (reg, NODE_ICON);
        loadImage (reg, LINK_ICON);
        loadImage (reg, LABEL_ICON);
    }

    protected void loadImage (ImageRegistry registry, String id) {
        loadImage (registry, id, getBundle ().getSymbolicName ());
    }

    protected void loadImage (ImageRegistry registry, String id, String bundleId) {
        ImageDescriptor descriptor = imageDescriptorFromPlugin (bundleId, id);
        if (descriptor != null) {
            registry.put (id, descriptor);
        }
    }

    public static void log (CoreException ex) {
        log (ex.getStatus ());
    }

    public static void log (Exception ex) {
        if (ex instanceof CoreException) {
            log ((CoreException) ex);
        } else {
            log (createError (ex.getMessage (), ex));
        }
    }

    public static String getPluginID () {
        return getDefault ().getBundle ().getSymbolicName ();
    }

    public static void log (IStatus s) {
        getDefault ().getLog ().log (s);
    }

    public static boolean needsReconcile () {
        return ! Boolean.FALSE.toString ().equals (Platform.getDebugOption (getPluginID () + "/reconcile"));
    }

    public static ImageDescriptor getImageDescriptor (String path) {
        return AbstractUIPlugin.imageDescriptorFromPlugin (getPluginID (), path);
    }

}

