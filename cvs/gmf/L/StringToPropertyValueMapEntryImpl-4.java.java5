package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.BasicEMap;

import org.eclipse.emf.common.util.EMap;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.PropertyValue;

public class StringToPropertyValueMapEntryImpl extends NotationObjectImpl implements BasicEMap.Entry {
    protected static final String KEY_EDEFAULT = null;
    protected String key = KEY_EDEFAULT;
    protected PropertyValue value;

    protected StringToPropertyValueMapEntryImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.STRING_TO_PROPERTY_VALUE_MAP_ENTRY;
    }

    public String getTypedKey () {
        return key;
    }

    public void setTypedKey (String newKey) {
        String oldKey = key;
        key = newKey;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__KEY, oldKey, key));

    }

    public PropertyValue getTypedValue () {
        return value;
    }

    public NotificationChain basicSetTypedValue (PropertyValue newValue, NotificationChain msgs) {
        PropertyValue oldValue = value;
        value = newValue;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__VALUE, oldValue, newValue);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setTypedValue (PropertyValue newValue) {
        if (newValue != value) {
            NotificationChain msgs = null;
            if (value != null) msgs = ((InternalEObject) value).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__VALUE, null, msgs);

            if (newValue != null) msgs = ((InternalEObject) newValue).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__VALUE, null, msgs);

            msgs = basicSetTypedValue (newValue, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__VALUE, newValue, newValue));

    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__VALUE :
                return basicSetTypedValue (null, msgs);
        }
        return eDynamicInverseRemove (otherEnd, featureID, msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__UUID :
                return getUUID ();
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__KEY :
                return getTypedKey ();
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__VALUE :
                return getTypedValue ();
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__UUID :
                setUUID ((byte []) newValue);
                return;
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__KEY :
                setTypedKey ((String) newValue);
                return;
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__VALUE :
                setTypedValue ((PropertyValue) newValue);
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__UUID :
                setUUID (UUID_EDEFAULT);
                return;
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__KEY :
                setTypedKey (KEY_EDEFAULT);
                return;
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__VALUE :
                setTypedValue ((PropertyValue) null);
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__UUID :
                return UUID_EDEFAULT == null ? uUID != null : ! UUID_EDEFAULT.equals (uUID);
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__KEY :
                return KEY_EDEFAULT == null ? key != null : ! KEY_EDEFAULT.equals (key);
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__VALUE :
                return value != null;
        }
        return eDynamicIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (key: ");
        result.append (key);
        result.append (')');
        return result.toString ();
    }

    protected int hash = - 1;

    public int getHash () {
        if (hash == - 1) {
            Object theKey = getKey ();
            hash = (theKey == null ? 0 : theKey.hashCode ());
        }
        return hash;
    }

    public void setHash (int hash) {
        this.hash = hash;
    }

    public Object getKey () {
        return getTypedKey ();
    }

    public void setKey (Object key) {
        setTypedKey ((String) key);
    }

    public Object getValue () {
        return getTypedValue ();
    }

    public Object setValue (Object value) {
        Object oldValue = getValue ();
        setTypedValue ((PropertyValue) value);
        return oldValue;
    }

    public EMap getEMap () {
        EObject container = eContainer ();
        return container == null ? null : (EMap) container.eGet (eContainmentFeature ());
    }

}

