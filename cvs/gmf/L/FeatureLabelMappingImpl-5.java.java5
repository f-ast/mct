package org.eclipse.gmf.mappings.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EAttribute;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.eclipse.gmf.mappings.FeatureLabelMapping;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.LabelEditMethod;

import org.eclipse.gmf.mappings.LabelViewMethod;

public class FeatureLabelMappingImpl extends LabelMappingImpl implements FeatureLabelMapping {
    protected EList < EAttribute > features;
    protected static final String VIEW_PATTERN_EDEFAULT = null;
    protected String viewPattern = VIEW_PATTERN_EDEFAULT;
    protected static final LabelViewMethod VIEW_METHOD_EDEFAULT = LabelViewMethod.MESSAGE_FORMAT;
    protected LabelViewMethod viewMethod = VIEW_METHOD_EDEFAULT;
    protected static final String EDIT_PATTERN_EDEFAULT = null;
    protected String editPattern = EDIT_PATTERN_EDEFAULT;
    protected static final LabelEditMethod EDIT_METHOD_EDEFAULT = LabelEditMethod.MESSAGE_FORMAT;
    protected LabelEditMethod editMethod = EDIT_METHOD_EDEFAULT;

    protected FeatureLabelMappingImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getFeatureLabelMapping ();
    }

    public EList < EAttribute > getFeatures () {
        if (features == null) {
            features = new EObjectResolvingEList < EAttribute > (EAttribute.class, this, GMFMapPackage.FEATURE_LABEL_MAPPING__FEATURES);
        }
        return features;
    }

    public String getViewPattern () {
        return viewPattern;
    }

    public void setViewPattern (String newViewPattern) {
        String oldViewPattern = viewPattern;
        viewPattern = newViewPattern;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_PATTERN, oldViewPattern, viewPattern));

    }

    public LabelViewMethod getViewMethod () {
        return viewMethod;
    }

    public void setViewMethod (LabelViewMethod newViewMethod) {
        LabelViewMethod oldViewMethod = viewMethod;
        viewMethod = newViewMethod == null ? VIEW_METHOD_EDEFAULT : newViewMethod;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD, oldViewMethod, viewMethod));

    }

    public String getEditPattern () {
        return editPattern;
    }

    public void setEditPattern (String newEditPattern) {
        String oldEditPattern = editPattern;
        editPattern = newEditPattern;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN, oldEditPattern, editPattern));

    }

    public LabelEditMethod getEditMethod () {
        return editMethod;
    }

    public void setEditMethod (LabelEditMethod newEditMethod) {
        LabelEditMethod oldEditMethod = editMethod;
        editMethod = newEditMethod == null ? EDIT_METHOD_EDEFAULT : newEditMethod;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_METHOD, oldEditMethod, editMethod));

    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFMapPackage.FEATURE_LABEL_MAPPING__FEATURES :
                return getFeatures ();
            case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_PATTERN :
                return getViewPattern ();
            case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD :
                return getViewMethod ();
            case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN :
                return getEditPattern ();
            case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_METHOD :
                return getEditMethod ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFMapPackage.FEATURE_LABEL_MAPPING__FEATURES :
                getFeatures ().clear ();
                getFeatures ().addAll ((Collection < ? extends EAttribute >) newValue);
                return;
            case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_PATTERN :
                setViewPattern ((String) newValue);
                return;
            case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD :
                setViewMethod ((LabelViewMethod) newValue);
                return;
            case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN :
                setEditPattern ((String) newValue);
                return;
            case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_METHOD :
                setEditMethod ((LabelEditMethod) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFMapPackage.FEATURE_LABEL_MAPPING__FEATURES :
                getFeatures ().clear ();
                return;
            case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_PATTERN :
                setViewPattern (VIEW_PATTERN_EDEFAULT);
                return;
            case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD :
                setViewMethod (VIEW_METHOD_EDEFAULT);
                return;
            case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN :
                setEditPattern (EDIT_PATTERN_EDEFAULT);
                return;
            case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_METHOD :
                setEditMethod (EDIT_METHOD_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFMapPackage.FEATURE_LABEL_MAPPING__FEATURES :
                return features != null && ! features.isEmpty ();
            case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_PATTERN :
                return VIEW_PATTERN_EDEFAULT == null ? viewPattern != null : ! VIEW_PATTERN_EDEFAULT.equals (viewPattern);
            case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD :
                return viewMethod != VIEW_METHOD_EDEFAULT;
            case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN :
                return EDIT_PATTERN_EDEFAULT == null ? editPattern != null : ! EDIT_PATTERN_EDEFAULT.equals (editPattern);
            case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_METHOD :
                return editMethod != EDIT_METHOD_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (viewPattern: ");
        result.append (viewPattern);
        result.append (", viewMethod: ");
        result.append (viewMethod);
        result.append (", editPattern: ");
        result.append (editPattern);
        result.append (", editMethod: ");
        result.append (editMethod);
        result.append (')');
        return result.toString ();
    }

}

