package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.Iterator;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.PrecisionRectangle;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.requests.ChangeBoundsRequest;

import org.eclipse.gef.requests.CreateRequest;

import org.eclipse.gmf.runtime.diagram.core.commands.UpdateGroupLocationCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.figures.LayoutHelper;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.notation.View;

public class GroupXYLayoutEditPolicy extends XYLayoutEditPolicy {

    public boolean understandsRequest (Request req) {
        if (RequestConstants.REQ_AUTOSIZE.equals (req.getType ())) {
            return true;
        }
        return super.understandsRequest (req);
    }

    public Command getCommand (Request request) {
        if (RequestConstants.REQ_AUTOSIZE.equals (request.getType ())) return getCommandFromChildren (request);

        return super.getCommand (request);
    }

    protected Command getResizeChildrenCommand (ChangeBoundsRequest request) {
        CompoundCommand resize = new CompoundCommand ();
        resize.add (super.getResizeChildrenCommand (request));
        resize.add (new ICommandProxy (new UpdateGroupLocationCommand (((IGraphicalEditPart) getHost ()).getEditingDomain (), (View) getHost ().getModel ())));
        return resize;
    }

    public EditPart getTargetEditPart (Request request) {
        if (REQ_CREATE.equals (request.getType ())) {
            return null;
        } else if (RequestConstants.REQ_AUTOSIZE.equals (request.getType ())) {
            return getHost ();
        }

        return super.getTargetEditPart (request);
    }

    private Command getCommandFromChildren (Request request) {
        CompoundCommand cc = new CompoundCommand ();
        for (Iterator iter = getHost ().getChildren ().iterator ();
        iter.hasNext ();) {
            EditPart childEP = (EditPart) iter.next ();
            cc.add (childEP.getCommand (request));
        }
        cc.unwrap ();
        return cc;
    }

}

