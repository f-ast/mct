package org.eclipse.gmf.runtime.common.ui.resources;

import java.util.Hashtable;

import java.util.Iterator;

import java.util.Map;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IFolder;

import org.eclipse.core.runtime.content.IContentType;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIDebugOptions;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;

import org.eclipse.gmf.runtime.common.ui.internal.resources.FileChangeEvent;

import org.eclipse.gmf.runtime.common.ui.internal.resources.FileChangeEventType;

import org.eclipse.gmf.runtime.common.ui.internal.resources.FileObserverFilter;

import org.eclipse.gmf.runtime.common.ui.internal.resources.FileObserverFilterType;

import org.eclipse.gmf.runtime.common.ui.internal.resources.MarkerChangeEvent;

import org.eclipse.gmf.runtime.common.ui.internal.resources.MarkerChangeEventType;

public class FileObserverManager {
    private Hashtable fileObserverList = new Hashtable ();

    protected void add (IFileObserver fileObserver) {
        trace ("...FileObserverManager: addFileObserver " + fileObserver.toString () + " filter ALL");
        FileObserverFilter filter = new FileObserverFilter (FileObserverFilterType.ALL);
        fileObserverList.put (fileObserver, filter);
    }

    protected void add (IFileObserver fileObserver, IFile fileFilter) {
        trace ("...FileObserverManager: addFileObserver " + fileObserver.toString () + " filter " + fileFilter.getLocationURI ().toString ());
        FileObserverFilter filter = new FileObserverFilter (FileObserverFilterType.FILE, fileFilter);
        fileObserverList.put (fileObserver, filter);
    }

    protected void add (IFileObserver fileObserver, IContentType [] contentTypeFilter) {
        trace ("...FileObserverManager: addFileObserver " + fileObserver.toString () + " filter " + contentTypeFilter.toString ());
        FileObserverFilter filter = new FileObserverFilter (FileObserverFilterType.CONTENT_TYPE, contentTypeFilter);
        fileObserverList.put (fileObserver, filter);
    }

    protected void add (IFileObserver fileObserver, IFolder folderFilter) {
        trace ("...FileObserverManager: addFileObserver " + fileObserver.toString () + " filter folder" + folderFilter.getLocationURI ().toString ());
        FileObserverFilter filter = new FileObserverFilter (FileObserverFilterType.FOLDER, folderFilter);
        fileObserverList.put (fileObserver, filter);
    }

    protected void add (IFileObserver fileObserver, String [] extensionFilter) {
        trace ("...FileObserverManager: addFileObserver " + fileObserver.toString () + " filter " + extensionFilter [0]);
        FileObserverFilter filter = new FileObserverFilter (FileObserverFilterType.EXTENSION, extensionFilter);
        fileObserverList.put (fileObserver, filter);
    }

    protected void remove (IFileObserver fileObserver) {
        if (fileObserverList.containsKey (fileObserver)) {
            trace ("...FileObserverManager: removeFileObserver " + fileObserver.toString ());
            fileObserverList.remove (fileObserver);
        }
    }

    protected void notify (FileChangeEvent event) {
        Hashtable fileObserverListCopy = (Hashtable) fileObserverList.clone ();
        for (Iterator i = fileObserverListCopy.entrySet ().iterator ();
        i.hasNext ();) {
            Map.Entry entry = (Map.Entry) i.next ();
            IFileObserver fileObserver = (IFileObserver) entry.getKey ();
            FileObserverFilter filter = (FileObserverFilter) entry.getValue ();
            if (event.getEventType () == FileChangeEventType.MOVED) {
                if (filter.matches (event.getOldFile ())) {
                    trace ("...FileObserverManager: Notify " + fileObserver.toString () + " handleFileMoved");
                    fileObserver.handleFileMoved (event.getOldFile (), event.getFile ());
                }
            } else if (event.getEventType () == FileChangeEventType.RENAMED) {
                if (filter.matches (event.getOldFile ())) {
                    trace ("...FileObserverManager: Notify " + fileObserver.toString () + " handleFileRenamed");
                    fileObserver.handleFileRenamed (event.getOldFile (), event.getFile ());
                }
            } else if (event.getEventType () == FileChangeEventType.DELETED) {
                if (filter.matches (event.getFile ())) {
                    trace ("...FileObserverManager: Notify " + fileObserver.toString () + " handleFileDeleted");
                    fileObserver.handleFileDeleted (event.getFile ());
                }
            } else if (event.getEventType () == FileChangeEventType.CHANGED) {
                if (filter.matches (event.getFile ())) {
                    trace ("...FileObserverManager: Notify " + fileObserver.toString () + " handleFileChanged");
                    fileObserver.handleFileChanged (event.getFile ());
                }
            }

        }
    }

    protected void notify (MarkerChangeEvent event) {
        Hashtable fileObserverListCopy = (Hashtable) fileObserverList.clone ();
        for (Iterator i = fileObserverListCopy.entrySet ().iterator ();
        i.hasNext ();) {
            Map.Entry entry = (Map.Entry) i.next ();
            IFileObserver fileObserver = (IFileObserver) entry.getKey ();
            FileObserverFilter filter = (FileObserverFilter) entry.getValue ();
            if (filter.matches (event.getMarker ().getResource ())) {
                if (event.getEventType () == MarkerChangeEventType.ADDED) {
                    trace ("...FileObserverManager: Notify " + fileObserver.toString () + " handleMarkerAdded");
                    fileObserver.handleMarkerAdded (event.getMarker ());
                } else if (event.getEventType () == MarkerChangeEventType.CHANGED) {
                    trace ("...FileObserverManager: Notify " + fileObserver.toString () + " handleMarkerChanged");
                    fileObserver.handleMarkerChanged (event.getMarker ());
                } else if (event.getEventType () == MarkerChangeEventType.REMOVED) {
                    trace ("...FileObserverManager: Notify " + fileObserver.toString () + " handleMarkerDeleted");
                    fileObserver.handleMarkerDeleted (event.getMarker (), event.getAttributes ());
                }

            }
        }
    }

    private void trace (String message) {
        if (Trace.shouldTrace (CommonUIPlugin.getDefault (), CommonUIDebugOptions.RESOURCE)) {
            Trace.trace (CommonUIPlugin.getDefault (), message);
        }
    }

}

