package org.eclipse.gmf.runtime.common.ui.dialogs;

import java.util.ArrayList;

import java.util.Iterator;

import org.eclipse.jface.dialogs.IDialogSettings;

import org.eclipse.jface.dialogs.IInputValidator;

import org.eclipse.jface.dialogs.InputDialog;

import org.eclipse.jface.window.Window;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.events.SelectionListener;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.layout.GridLayout;

import org.eclipse.swt.widgets.Button;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Display;

import org.eclipse.swt.widgets.Label;

import org.eclipse.swt.widgets.List;

import org.eclipse.swt.widgets.Text;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIDebugOptions;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIStatusCodes;

import org.eclipse.gmf.runtime.common.ui.internal.l10n.ResourceManager;

import org.eclipse.gmf.runtime.common.ui.util.WindowUtil;

public class ShowRelatedElementsPredefinedComposite extends Composite {
    protected Button saveAs;
    protected Button delete;
    protected Button details;
    protected IShowRelatedElementsWithDetails showDetails;
    protected SelectableElement rootElement;
    protected boolean isDetails = false;
    protected List predefinedBox;
    protected java.util.List predefined = new ArrayList ();
    protected java.util.List queries;
    protected final IDialogSettings dialogSettings = CommonUIPlugin.getDefault ().getDialogSettings ();
    public static int VIEWER_HEIGHT = 225;
    protected int viewerWidth = 175;
    private static int PRESET_NAME_LENGTH = 256;

    static {
        try {
            VIEWER_HEIGHT = Integer.parseInt (ResourceManager.getI18NString ("ShowRelatedElementsDialog.VIEWER_HEIGHT"));
        } catch (NumberFormatException e) {
            Trace.catching (CommonUIPlugin.getDefault (), CommonUIDebugOptions.EXCEPTIONS_CATCHING, CommonUIPlugin.getDefault ().getClass (), "NumberFormatException", e);
            Log.error (CommonUIPlugin.getDefault (), CommonUIStatusCodes.RESOURCE_FAILURE, "Failed to parse Show Related Elements Composite's localized size", e);
        }
    }

    protected InputDialog saveAsDialog = new InputDialog (Display.getDefault ().getActiveShell (), ResourceManager.getI18NString ("ShowRelatedElementsPredefinedComposite.SaveAs"), ResourceManager.getI18NString ("ShowRelatedElementsPredefinedComposite.ChooseName"), StringStatics.BLANK, new IInputValidator () {

        public String isValid (String newText) {
            if (containsSpecialCharacter (newText) || newText.length () == 0) {
                return ResourceManager.getI18NString ("ShowRelatedElementsPredefinedComposite.SpecialCharacter");
            }
            return null;
        }

    }

    ) {

        protected Control createDialogArea (Composite parent) {
            Control control = super.createDialogArea (parent);
            Text text = getText ();
            assert null != text;
            text.setTextLimit (30);
            text.setTextLimit (PRESET_NAME_LENGTH);
            return control;
        }

    }

    ;
    protected static final String SPECIAL_OPENING = "[";
    protected static final String SPECIAL_CLOSING = "]";
    protected static final String DIALOG_SETTINGS_KEY = "ShowRelatedElementsPresets";
    protected static final String DEFAULT_STRING = SPECIAL_OPENING + ResourceManager.getI18NString ("ShowRelatedElementsPredefinedComposite.DefaultQuery") + SPECIAL_CLOSING;

    public ShowRelatedElementsPredefinedComposite (Composite parent, IShowRelatedElementsWithDetails sreWithDetails, SelectableElement root, java.util.List queriesList, int width, boolean detailsShown) {
        super (parent, SWT.NULL);
        showDetails = sreWithDetails;
        rootElement = root;
        this.queries = queriesList;
        this.viewerWidth = width;
        this.isDetails = detailsShown;
        createContents ();
    }

    private void setDetailsText () {
        assert null != details;
        if (! isDetails) {
            details.setText (ResourceManager.getI18NString ("ShowRelatedElementsPredefinedComposite.ShowDetails"));
        } else {
            details.setText (ResourceManager.getI18NString ("ShowRelatedElementsPredefinedComposite.HideDetails"));
        }
    }

    protected void createContents () {
        this.setLayoutData (new GridData (GridData.FILL_BOTH));
        this.setLayout (new GridLayout (1, false));
        new Label (this, SWT.NULL).setText (ResourceManager.getI18NString ("ShowRelatedElementsPredefinedComposite.CustomQuery"));
        predefinedBox = new List (this, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
        GridData gd = new GridData (GridData.FILL_BOTH);
        gd.horizontalSpan = 2;
        gd.heightHint = VIEWER_HEIGHT;
        gd.widthHint = viewerWidth;
        predefinedBox.setLayoutData (gd);
        Composite buttons;
        if (showDetails == null) {
            buttons = new Composite (this, SWT.NONE);
            buttons.setLayout (new GridLayout (2, true));
            gd = new GridData (GridData.HORIZONTAL_ALIGN_CENTER | GridData.VERTICAL_ALIGN_END);
            gd.horizontalSpan = 2;
            buttons.setLayoutData (gd);
            makePredefinedSettingsButtons (buttons);
        } else {
            Composite moreButtons = new Composite (this, SWT.NONE);
            GridLayout gridLayout = new GridLayout (2, false);
            gridLayout.marginWidth = 0;
            moreButtons.setLayout (gridLayout);
            moreButtons.setLayoutData (new GridData (GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_END));
            buttons = new Composite (moreButtons, SWT.NONE);
            gridLayout = new GridLayout (2, true);
            gridLayout.marginWidth = 0;
            buttons.setLayout (gridLayout);
            buttons.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_BEGINNING));
            makePredefinedSettingsButtons (buttons);
            details = new Button (moreButtons, SWT.PUSH);
            setDetailsText ();
            details.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_END | GridData.GRAB_HORIZONTAL));
            details.addSelectionListener (new SelectionListener () {

                public void widgetSelected (SelectionEvent e) {
                    isDetails = ! isDetails;
                    saveAs.setEnabled (isDetails);
                    showDetails.showOrHideDetails ();
                    handlePredefinedBoxSelection ();
                    setDetailsText ();
                }

                public void widgetDefaultSelected (SelectionEvent e) {
                    widgetSelected (e);
                }

            }

            );
            gd = WindowUtil.makeButtonData (details);
            gd.horizontalAlignment = GridData.END;
            gd.grabExcessHorizontalSpace = true;
            details.setLayoutData (gd);
        }
        assert null != delete;
        delete.setEnabled (false);
        contributeComposite (this);
        predefinedBox.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                handlePredefinedBoxSelection ();
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        contributeToList ();
        predefinedBox.select (predefinedBox.getItemCount () - 1);
    }

    protected void handlePredefinedBoxSelection () {
        if (predefinedBox.getSelectionIndex () == predefinedBox.getItemCount () - 1) {
            if (showDetails != null) showDetails.updateRelationships (null);

            delete.setEnabled (false);
        } else if (predefinedBox.getSelectionIndex () != predefinedBox.getItemCount () - 1) {
            String string = predefinedBox.getSelection () [0];
            ShowRelatedElementsPreset preset = ShowRelatedElementsPresetHelper.findPresetFromList (predefined, string);
            if (preset == null) {
                preset = ShowRelatedElementsPresetHelper.findPresetFromList (queries, string.substring (0, string.indexOf (StringStatics.SPACE + DEFAULT_STRING)));
            }
            assert null != preset;
            if (showDetails != null) showDetails.updateRelationships (preset);

            delete.setEnabled (! containsSpecialCharacter (string));
        }

    }

    protected void contributeToList () {
        predefined.clear ();
        predefinedBox.removeAll ();
        java.util.List readPresets = readPresets (null);
        predefined.addAll (readPresets);
        Iterator it;
        if (queries != null) {
            it = queries.iterator ();
            while (it.hasNext ()) {
                Object obj = it.next ();
                assert (obj instanceof ShowRelatedElementsPreset);
                predefinedBox.add (((ShowRelatedElementsPreset) obj).getName () + StringStatics.SPACE + DEFAULT_STRING);
            }
        }
        it = predefined.iterator ();
        while (it.hasNext ()) {
            Object obj = it.next ();
            assert (obj instanceof ShowRelatedElementsPreset);
            predefinedBox.add (((ShowRelatedElementsPreset) obj).getName ());
        }
        predefinedBox.add (ResourceManager.getI18NString ("ShowRelatedElementsPredefinedComposite.UserCustomQuery") + StringStatics.SPACE + SPECIAL_OPENING + ResourceManager.getI18NString ("ShowRelatedElementsPredefinedComposite.DefaultQuery") + SPECIAL_CLOSING);
    }

    protected boolean containsSpecialCharacter (String text) {
        return (text.indexOf (ShowRelatedElementsPresetHelper.KEY_SEPARATOR) != - 1 || text.indexOf (ShowRelatedElementsPresetHelper.VALUE_SEPARATOR) != - 1 || text.indexOf (SPECIAL_CLOSING) != - 1 || text.indexOf (SPECIAL_OPENING) != - 1);
    }

    protected java.util.List readPresets (String nameToIgnore) {
        return ShowRelatedElementsPresetHelper.readPresets (nameToIgnore, dialogSettings.getArray (DIALOG_SETTINGS_KEY), null);
    }

    protected String [] convertPresetsToString (java.util.List presets) {
        return ShowRelatedElementsPresetHelper.convertPresetsToString (presets, null);
    }

    protected void saveAs () {
        assert null != showDetails;
        if (saveAsDialog.open () == Window.OK) {
            java.util.List presets = readPresets (saveAsDialog.getValue ());
            ShowRelatedElementsPreset newPreset = showDetails.getCurrentSettings ();
            assert null != newPreset;
            newPreset.setName (saveAsDialog.getValue ());
            presets.add (newPreset);
            dialogSettings.put (DIALOG_SETTINGS_KEY, convertPresetsToString (presets));
            contributeToList ();
            predefinedBox.select (predefinedBox.getItemCount () - 2);
            delete.setEnabled (true);
        }
    }

    protected void makePredefinedSettingsButtons (Composite buttons) {
        saveAs = new Button (buttons, SWT.PUSH);
        saveAs.setText (ResourceManager.getI18NString ("ShowRelatedElementsPredefinedComposite.SaveAs"));
        saveAs.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                saveAs ();
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        saveAs.setLayoutData (WindowUtil.makeButtonData (saveAs));
        delete = new Button (buttons, SWT.PUSH);
        delete.setText (ResourceManager.getI18NString ("ShowRelatedElementsPredefinedComposite.Delete"));
        delete.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                delete ();
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        delete.setLayoutData (WindowUtil.makeButtonData (delete));
    }

    protected void delete () {
        assert (predefinedBox.getSelection ().length != 0);
        String selectedText = predefinedBox.getSelection () [0];
        ShowRelatedElementsPreset preset = ShowRelatedElementsPresetHelper.findPresetFromList (predefined, selectedText);
        assert (selectedText.indexOf (SPECIAL_OPENING) == - 1);
        assert null != preset;
        predefined.remove (preset);
        predefinedBox.remove (predefinedBox.getSelectionIndex ());
        dialogSettings.put (DIALOG_SETTINGS_KEY, convertPresetsToString (predefined));
        predefinedBox.setSelection (predefinedBox.getItemCount () - 1);
        delete.setEnabled (false);
        showDetails.updateRelationships (null);
    }

    protected void contributeComposite (Composite parent) {
    }

    protected void detailsChanged () {
        predefinedBox.select (predefinedBox.getItemCount () - 1);
    }

}

