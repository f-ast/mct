package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.gmfgraph.Alignment;

import org.eclipse.gmf.gmfgraph.BorderLayoutData;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.Layoutable;

public class BorderLayoutDataImpl extends EObjectImpl implements BorderLayoutData {
    protected static final Alignment ALIGNMENT_EDEFAULT = Alignment.CENTER_LITERAL;
    protected Alignment alignment = ALIGNMENT_EDEFAULT;
    protected static final boolean VERTICAL_EDEFAULT = false;
    protected boolean vertical = VERTICAL_EDEFAULT;

    protected BorderLayoutDataImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getBorderLayoutData ();
    }

    public Layoutable getOwner () {
        if (eContainerFeatureID != GMFGraphPackage.BORDER_LAYOUT_DATA__OWNER) return null;

        return (Layoutable) eContainer ();
    }

    public NotificationChain basicSetOwner (Layoutable newOwner, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newOwner, GMFGraphPackage.BORDER_LAYOUT_DATA__OWNER, msgs);
        return msgs;
    }

    public void setOwner (Layoutable newOwner) {
        if (newOwner != eInternalContainer () || (eContainerFeatureID != GMFGraphPackage.BORDER_LAYOUT_DATA__OWNER && newOwner != null)) {
            if (EcoreUtil.isAncestor (this, newOwner)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newOwner != null) msgs = ((InternalEObject) newOwner).eInverseAdd (this, GMFGraphPackage.LAYOUTABLE__LAYOUT_DATA, Layoutable.class, msgs);

            msgs = basicSetOwner (newOwner, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.BORDER_LAYOUT_DATA__OWNER, newOwner, newOwner));

    }

    public Alignment getAlignment () {
        return alignment;
    }

    public void setAlignment (Alignment newAlignment) {
        Alignment oldAlignment = alignment;
        alignment = newAlignment == null ? ALIGNMENT_EDEFAULT : newAlignment;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.BORDER_LAYOUT_DATA__ALIGNMENT, oldAlignment, alignment));

    }

    public boolean isVertical () {
        return vertical;
    }

    public void setVertical (boolean newVertical) {
        boolean oldVertical = vertical;
        vertical = newVertical;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.BORDER_LAYOUT_DATA__VERTICAL, oldVertical, vertical));

    }

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.BORDER_LAYOUT_DATA__OWNER :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetOwner ((Layoutable) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.BORDER_LAYOUT_DATA__OWNER :
                return basicSetOwner (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGraphPackage.BORDER_LAYOUT_DATA__OWNER :
                return eInternalContainer ().eInverseRemove (this, GMFGraphPackage.LAYOUTABLE__LAYOUT_DATA, Layoutable.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.BORDER_LAYOUT_DATA__OWNER :
                return getOwner ();
            case GMFGraphPackage.BORDER_LAYOUT_DATA__ALIGNMENT :
                return getAlignment ();
            case GMFGraphPackage.BORDER_LAYOUT_DATA__VERTICAL :
                return isVertical () ? Boolean.TRUE : Boolean.FALSE;
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.BORDER_LAYOUT_DATA__OWNER :
                setOwner ((Layoutable) newValue);
                return;
            case GMFGraphPackage.BORDER_LAYOUT_DATA__ALIGNMENT :
                setAlignment ((Alignment) newValue);
                return;
            case GMFGraphPackage.BORDER_LAYOUT_DATA__VERTICAL :
                setVertical (((Boolean) newValue).booleanValue ());
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.BORDER_LAYOUT_DATA__OWNER :
                setOwner ((Layoutable) null);
                return;
            case GMFGraphPackage.BORDER_LAYOUT_DATA__ALIGNMENT :
                setAlignment (ALIGNMENT_EDEFAULT);
                return;
            case GMFGraphPackage.BORDER_LAYOUT_DATA__VERTICAL :
                setVertical (VERTICAL_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.BORDER_LAYOUT_DATA__OWNER :
                return getOwner () != null;
            case GMFGraphPackage.BORDER_LAYOUT_DATA__ALIGNMENT :
                return alignment != ALIGNMENT_EDEFAULT;
            case GMFGraphPackage.BORDER_LAYOUT_DATA__VERTICAL :
                return vertical != VERTICAL_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (alignment: ");
        result.append (alignment);
        result.append (", vertical: ");
        result.append (vertical);
        result.append (')');
        return result.toString ();
    }

}

