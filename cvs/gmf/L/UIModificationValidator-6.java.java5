package org.eclipse.gmf.runtime.common.ui.util;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Platform;

import org.eclipse.core.runtime.Status;

import org.eclipse.gmf.runtime.common.core.command.IModificationValidator;

import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator.ISyncExecHelper;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.ui.internal.l10n.CommonUIMessages;

import org.eclipse.gmf.runtime.common.ui.resources.FileModificationValidator;

import org.eclipse.jface.operation.ModalContext;

import org.eclipse.swt.widgets.Display;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.ui.IWindowListener;

import org.eclipse.ui.IWorkbenchWindow;

import org.eclipse.ui.PlatformUI;

public class UIModificationValidator implements IModificationValidator {
    private WindowListener listener;
    private class WindowListener implements IWindowListener {
        protected Shell shell;

        public void windowActivated (IWorkbenchWindow window) {
            shell = window.getShell ();
        }

        public void windowClosed (IWorkbenchWindow window) {
        }

        public void windowDeactivated (IWorkbenchWindow window) {
        }

        public void windowOpened (IWorkbenchWindow window) {
        }

        public WindowListener (Shell theShell) {
            this.shell = theShell;
        }

        public Shell getShell () {
            return shell;
        }

    }

    private static final Status ERROR_STATUS = new Status (Status.ERROR, Platform.PI_RUNTIME, 1, StringStatics.BLANK, null);

    public UIModificationValidator () {
        Display.getDefault ().asyncExec (new Runnable () {

            public void run () {
                IWorkbenchWindow window = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ();
                Shell shell = window == null ? null : window.getShell ();
                listener = new WindowListener (shell);
                PlatformUI.getWorkbench ().addWindowListener (listener);
            }

        }

        );
    }

    class RunnableWithStatus implements Runnable {
        private final IFile [] files;
        private IStatus status;
        private Shell shell;

        RunnableWithStatus (IFile [] files, Shell shell) {
            this.files = files;
            this.shell = shell;
        }

        public void run () {
            status = doValidateEdit (files, shell);
        }

        public IStatus getResult () {
            return status;
        }

        public void setShell (Shell shell) {
            this.shell = shell;
        }

    }

    protected IStatus doValidateEdit (IFile [] files, Shell shell) {
        boolean ok = FileModificationValidator.getInstance ().okToEdit (files, CommonUIMessages.UIModificationValidator_ModificationMessage, shell);
        return ok ? Status.OK_STATUS : ERROR_STATUS;
    }

    public IStatus validateEdit (IFile [] files) {
        Shell shell = listener == null ? null : listener.getShell ();
        RunnableWithStatus r = new RunnableWithStatus (files, shell);
        ISyncExecHelper syncExecHelper = org.eclipse.gmf.runtime.common.core.command.FileModificationValidator.SyncExecHelper.getInstance ();
        if (ModalContext.isModalContextThread (Thread.currentThread ())) {
            Runnable safeRunnable = syncExecHelper.safeRunnable (r);
            if (safeRunnable != null) {
                Display.getDefault ().syncExec (safeRunnable);
            } else {
                r.run ();
            }
        } else {
            if (Display.getCurrent () == null) {
                r.setShell (null);
            }
            r.run ();
        }
        return r.getResult ();
    }

    public void dispose () {
        if (listener != null) {
            Display.getDefault ().asyncExec (new Runnable () {

                public void run () {
                    PlatformUI.getWorkbench ().removeWindowListener (listener);
                }

            }

            );
        }
    }

}

