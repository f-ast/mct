package org.eclipse.gmf.gmfgraph.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.gmfgraph.CompoundBorder;

import org.eclipse.gmf.gmfgraph.GMFGraphFactory;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

public class CompoundBorderItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public CompoundBorderItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    @Override
    public List < IItemPropertyDescriptor > getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
        }
        return itemPropertyDescriptors;
    }

    @Override
    public Collection < ? extends EStructuralFeature > getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getCompoundBorder_Outer ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getCompoundBorder_Inner ());
        }
        return childrenFeatures;
    }

    @Override
    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    @Override
    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/CompoundBorder"));
    }

    @Override
    public String getText (Object object) {
        return getString ("_UI_CompoundBorder_type");
    }

    @Override
    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (CompoundBorder.class)) {
            case GMFGraphPackage.COMPOUND_BORDER__OUTER :
            case GMFGraphPackage.COMPOUND_BORDER__INNER :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    @Override
    protected void collectNewChildDescriptors (Collection < Object > newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCompoundBorder_Outer (), GMFGraphFactory.eINSTANCE.createLineBorder ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCompoundBorder_Outer (), GMFGraphFactory.eINSTANCE.createMarginBorder ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCompoundBorder_Outer (), GMFGraphFactory.eINSTANCE.createCompoundBorder ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCompoundBorder_Outer (), GMFGraphFactory.eINSTANCE.createCustomBorder ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCompoundBorder_Inner (), GMFGraphFactory.eINSTANCE.createLineBorder ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCompoundBorder_Inner (), GMFGraphFactory.eINSTANCE.createMarginBorder ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCompoundBorder_Inner (), GMFGraphFactory.eINSTANCE.createCompoundBorder ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCompoundBorder_Inner (), GMFGraphFactory.eINSTANCE.createCustomBorder ()));
    }

    @Override
    public String getCreateChildText (Object owner, Object feature, Object child, Collection < ? > selection) {
        Object childFeature = feature;
        Object childObject = child;
        boolean qualify = childFeature == GMFGraphPackage.eINSTANCE.getCompoundBorder_Outer () || childFeature == GMFGraphPackage.eINSTANCE.getCompoundBorder_Inner ();
        if (qualify) {
            return getString ("_UI_CreateChild_text2", new Object [] {getTypeText (childObject), getFeatureText (childFeature), getTypeText (owner)});
        }
        return super.getCreateChildText (owner, feature, child, selection);
    }

    @Override
    public ResourceLocator getResourceLocator () {
        return GMFGraphEditPlugin.INSTANCE;
    }

}

