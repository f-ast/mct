package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.beans.PropertyChangeEvent;

import java.util.List;

import org.eclipse.draw2d.ConnectionAnchor;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.gef.ConnectionEditPart;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.Request;

import org.eclipse.gef.requests.DropRequest;

import org.eclipse.gef.requests.ReconnectRequest;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConnectorHandleEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SortFilterCompartmentItemsEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;

import org.eclipse.gmf.runtime.notation.Anchor;

import org.eclipse.gmf.runtime.notation.IdentityAnchor;

import org.eclipse.gmf.runtime.notation.View;

public abstract class ShapeNodeEditPart extends ShapeEditPart implements INodeEditPart {

    public ShapeNodeEditPart (View view) {
        super (view);
    }

    protected List getModelSourceConnections () {
        return ViewUtil.getSourceConnections ((View) getModel ());
    }

    protected List getModelTargetConnections () {
        return ViewUtil.getTargetConnections ((View) getModel ());
    }

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicy.GRAPHICAL_NODE_ROLE, new GraphicalNodeEditPolicy ());
        installEditPolicy (EditPolicyRoles.SORT_FILTER_ROLE, new SortFilterCompartmentItemsEditPolicy ());
        installEditPolicy (EditPolicyRoles.CONNECTOR_HANDLES_ROLE, new ConnectorHandleEditPolicy ());
    }

    protected final IFigure createFigure () {
        return createNodeFigure ();
    }

    abstract protected NodeFigure createNodeFigure ();

    protected NodeFigure getNodeFigure () {
        return (NodeFigure) getFigure ();
    }

    public ConnectionAnchor getSourceConnectionAnchor (ConnectionEditPart connEditPart) {
        final ConnectionNodeEditPart connector = (ConnectionNodeEditPart) connEditPart;
        String t = (String) MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {

            public Object run () {
                Anchor a = connector.getConnectorView ().getSourceAnchor ();
                if (a instanceof IdentityAnchor) return ((IdentityAnchor) a).getId ();

                return "";
            }

        }

        );
        return getNodeFigure ().getConnectionAnchor (t);
    }

    public ConnectionAnchor getSourceConnectionAnchor (Request request) {
        if (request instanceof ReconnectRequest) {
            Point pt = ((DropRequest) request).getLocation ().getCopy ();
            ((ReconnectRequest) request).getConnectionEditPart ().getFigure ().translateToAbsolute (pt);
            return getNodeFigure ().getSourceConnectionAnchorAt (pt);
        } else if (request instanceof DropRequest) {
            return getNodeFigure ().getSourceConnectionAnchorAt (((DropRequest) request).getLocation ());
        }

        return getNodeFigure ().getSourceConnectionAnchorAt (null);
    }

    public ConnectionAnchor getTargetConnectionAnchor (ConnectionEditPart connEditPart) {
        final ConnectionNodeEditPart connector = (ConnectionNodeEditPart) connEditPart;
        String t = (String) MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {

            public Object run () {
                Anchor a = connector.getConnectorView ().getTargetAnchor ();
                if (a instanceof IdentityAnchor) return ((IdentityAnchor) a).getId ();

                return "";
            }

        }

        );
        return getNodeFigure ().getConnectionAnchor (t);
    }

    public ConnectionAnchor getTargetConnectionAnchor (Request request) {
        if (request instanceof ReconnectRequest) {
            Point pt = ((DropRequest) request).getLocation ().getCopy ();
            ((ReconnectRequest) request).getConnectionEditPart ().getFigure ().translateToAbsolute (pt);
            return getNodeFigure ().getTargetConnectionAnchorAt (pt);
        } else if (request instanceof DropRequest) {
            return getNodeFigure ().getTargetConnectionAnchorAt (((DropRequest) request).getLocation ());
        }

        return getNodeFigure ().getTargetConnectionAnchorAt (null);
    }

    final public String mapConnectionAnchorToTerminal (ConnectionAnchor c) {
        return getNodeFigure ().getConnectionAnchorTerminal (c);
    }

    final public ConnectionAnchor mapTerminalToConnectionAnchor (String terminal) {
        return getNodeFigure ().getConnectionAnchor (terminal);
    }

    protected void handlePropertyChangeEvent (PropertyChangeEvent evt) {
        if (Properties.ID_SOURCECONNECTIONS.equals (evt.getPropertyName ())) refreshSourceConnections ();
        else if (Properties.ID_TARGETCONNECTIONS.equals (evt.getPropertyName ())) refreshTargetConnections ();
        else super.handlePropertyChangeEvent (evt);

    }

    public void activate () {
        super.activate ();
    }

    public boolean canAttachNote () {
        return true;
    }

}

