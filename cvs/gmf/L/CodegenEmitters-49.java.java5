package org.eclipse.gmf.internal.codegen.lite;

import java.net.MalformedURLException;

import java.net.URL;

import java.util.ArrayList;

import java.util.HashMap;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Platform;

import org.eclipse.core.runtime.Status;

import org.eclipse.emf.codegen.jet.JETCompiler;

import org.eclipse.emf.codegen.merge.java.JControlModel;

import org.eclipse.emf.codegen.merge.java.JMerger;

import org.eclipse.emf.codegen.util.CodeGenUtil;

import org.eclipse.emf.common.CommonPlugin;

import org.eclipse.emf.common.util.URI;

import org.eclipse.gmf.common.UnexpectedBehaviourException;

import org.eclipse.gmf.internal.common.codegen.BinaryEmitter;

import org.eclipse.gmf.internal.common.codegen.DefaultTextMerger;

import org.eclipse.gmf.internal.common.codegen.GIFEmitter;

import org.eclipse.gmf.internal.common.codegen.JETGIFEmitterAdapter;

import org.eclipse.gmf.internal.common.codegen.TextEmitter;

import org.eclipse.gmf.internal.common.codegen.TextMerger;

import org.eclipse.gmf.internal.common.codegen.XpandTextEmitter;

import org.eclipse.gmf.internal.xpand.ResourceManager;

import org.eclipse.gmf.internal.xpand.util.BundleResourceManager;

import org.osgi.framework.Bundle;

public class CodegenEmitters {
    private static final String CODEGEN_PLUGIN_ID = "org.eclipse.gmf.codegen";
    private final String [] myTemplatePath;
    private ResourceManager myResourceManager;

    public CodegenEmitters (boolean usePrecompiled, String templateDirectory) {
        ArrayList < URL > templatesURI = new ArrayList < URL > (3);
        templatesURI.add (getTemplatesBundle ().getEntry ("/templates/"));
        templatesURI.add (getCodegenTemplatesBundle ().getEntry ("/templates/"));
        URL dynamicTemplatesPath = getDynamicTemplatesURL (templateDirectory);
        if (dynamicTemplatesPath != null) {
            templatesURI.add (dynamicTemplatesPath);
        }
        myResourceManager = new BundleResourceManager (templatesURI.toArray (new URL [templatesURI.size ()]));
        myTemplatePath = new String [templatesURI.size ()];
        for (int i = 0;
        i < templatesURI.size (); i ++) {
            myTemplatePath [i] = templatesURI.get (i).toString ();
        }
    }

    private static URL getDynamicTemplatesURL (String templateDirectory) {
        if (templateDirectory != null) {
            URI templatesURI = templateDirectory.indexOf (":") == - 1 ? URI.createPlatformResourceURI (templateDirectory, true) : URI.createURI (templateDirectory);
            try {
                return new URL (CommonPlugin.resolve (templatesURI).toString ());
            } catch (MalformedURLException e) {
                Activator.getInstance ().getLog ().log (new Status (IStatus.ERROR, Activator.getPluginID (), 0, "Incorrect dynamic templates location", e));
            }
        }
        return null;
    }

    public TextMerger createMergeService () {
        URL controlFile = getJMergeControlFile ();
        if (controlFile != null) {
            JControlModel controlModel = new JControlModel ();
            controlModel.initialize (CodeGenUtil.instantiateFacadeHelper (JMerger.DEFAULT_FACADE_HELPER_CLASS), controlFile.toString ());
            if (! controlModel.canMerge ()) {
                throw new IllegalStateException ("Can not initialize JControlModel");
            }
            return new DefaultTextMerger (controlModel);
        }
        return null;
    }

    public TextEmitter getCreateNodeCommandEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::CreateNodeCommand::CreateNodeCommand");
    }

    public TextEmitter getCreateNodeCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::CreateNodeCommand::qualifiedClassName");
    }

    public TextEmitter getAddNodeCommandEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::AddNodeCommand::AddNodeCommand");
    }

    public TextEmitter getAddNodeCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::AddNodeCommand::qualifiedClassName");
    }

    public TextEmitter getCloneNodeCommandEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::CloneNodeCommand::CloneNodeCommand");
    }

    public TextEmitter getCloneNodeCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::CloneNodeCommand::qualifiedClassName");
    }

    public TextEmitter getCreateLinkStartCommandEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::CreateLinkStartCommand::CreateLinkStartCommand");
    }

    public TextEmitter getCreateLinkStartCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::CreateLinkStartCommand::qualifiedClassName");
    }

    public TextEmitter getCreateLinkCompleteCommandEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::CreateLinkCompleteCommand::CreateLinkCompleteCommand");
    }

    public TextEmitter getCreateLinkCompleteCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::CreateLinkCompleteCommand::qualifiedClassName");
    }

    public TextEmitter getReconnectLinkSourceCommandEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::ReconnectLinkSourceCommand::ReconnectLinkSourceCommand");
    }

    public TextEmitter getReconnectLinkSourceCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::ReconnectLinkSourceCommand::qualifiedClassName");
    }

    public TextEmitter getReconnectLinkTargetCommandEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::ReconnectLinkTargetCommand::ReconnectLinkTargetCommand");
    }

    public TextEmitter getReconnectLinkTargetCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::commands::ReconnectLinkTargetCommand::qualifiedClassName");
    }

    public TextEmitter getViewFactoryGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::viewfactories::ViewFactory::ViewFactory");
    }

    public TextEmitter getComponentEditPolicyEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::policies::ComponentEditPolicy::ComponentEditPolicy");
    }

    public TextEmitter getComponentEditPolicyQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::policies::ComponentEditPolicy::qualifiedClassName");
    }

    public TextEmitter getLayoutEditPolicyEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::policies::LayoutEditPolicy::LayoutEditPolicy");
    }

    public TextEmitter getLayoutEditPolicyQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::policies::LayoutEditPolicy::qualifiedClassName");
    }

    public TextEmitter getGraphicalEditPolicyEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::policies::GraphicalNodeEditPolicy::GraphicalNodeEditPolicy");
    }

    public TextEmitter getGraphicalEditPolicyQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::policies::GraphicalNodeEditPolicy::qualifiedClassName");
    }

    public TextEmitter getConnectionEndpointEditPolicyEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::policies::ConnectionEndpointEditPolicy::ConnectionEndpointEditPolicy");
    }

    public TextEmitter getConnectionEndpointEditPolicyQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::policies::ConnectionEndpointEditPolicy::qualifiedClassName");
    }

    public TextEmitter getValidationProviderGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::providers::ValidationProvider::ValidationProvider");
    }

    public TextEmitter getValidateActionGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::providers::ValidateAction::ValidateAction");
    }

    public TextEmitter getValidateActionQualifiedNameGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::providers::ValidateAction::qualifiedClassName");
    }

    public TextEmitter getMetricProviderEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::providers::MetricProvider::MetricProvider");
    }

    public TextEmitter getMetricsActionEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::providers::MetricsAction::MetricsAction");
    }

    public TextEmitter getMetricsActionQualifiedNameEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::providers::MetricsAction::qualifiedClassName");
    }

    public TextEmitter getDomainElementInitializerGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::providers::DomainElementInitializer::DomainElementInitializer");
    }

    public TextEmitter getDomainElementInitializerQualifiedNameGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::providers::DomainElementInitializer::qualifiedClassName");
    }

    public TextEmitter getCompartmentEditPartGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::parts::CompartmentEditPart::CompartmentEditPart");
    }

    public TextEmitter getDiagramEditPartGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::parts::DiagramEditPart::DiagramEditPart");
    }

    public TextEmitter getEditPartFactoryGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::parts::EditPartFactory::EditPartFactory");
    }

    public TextEmitter getLinkEditPartGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::parts::LinkEditPart::LinkEditPart");
    }

    public TextEmitter getLinkLabelEditPartGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::parts::LinkLabelEditPart::LinkLabelEditPart");
    }

    public TextEmitter getChildNodeEditPartGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::parts::ChildNodeEditPart::ChildNodeEditPart");
    }

    public TextEmitter getNodeEditPartGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::parts::NodeEditPart::NodeEditPart");
    }

    public TextEmitter getNodeLabelEditPartGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::parts::NodeLabelEditPart::NodeLabelEditPart");
    }

    public TextEmitter getPluginGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::Plugin::Plugin");
    }

    public TextEmitter getActionBarContributorGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::ActionBarContributor::ActionBarContributor");
    }

    public TextEmitter getOpenDiagramInViewActionGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::OpenDiagramInViewAction::OpenDiagramInViewAction");
    }

    public TextEmitter getOpenDiagramInViewActionQualifiedClassNameGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::OpenDiagramInViewAction::qualifiedClassName");
    }

    public TextEmitter getEditorGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::Editor::Editor");
    }

    public TextEmitter getMatchingStrategyEmitter () {
        return retrieveXpand ("xpt::editor::MatchingStrategy::MatchingStrategy");
    }

    public TextEmitter getCreationWizardGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::CreationWizard::CreationWizard");
    }

    public TextEmitter getCreationWizardPageGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::CreationWizardPage::CreationWizardPage");
    }

    public TextEmitter getDiagramEditorUtilGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::DiagramEditorUtil::DiagramEditorUtil");
    }

    public TextEmitter getPaletteFactoryGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::palette::PaletteFactory::Factory");
    }

    public TextEmitter getVisualIDRegistryGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::VisualIDRegistry::VisualIDRegistry");
    }

    public TextEmitter getManifestGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::manifest::manifest");
    }

    public TextEmitter getBuildPropertiesGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::buildProperties::buildProperties");
    }

    public TextEmitter getPluginXML () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::plugin::plugin");
    }

    public TextEmitter getInitDiagramFileActionGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::InitDiagramFileAction::InitDiagramFileAction");
    }

    public TextEmitter getNewDiagramFileWizardGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::NewDiagramFileWizard::NewDiagramFileWizard");
    }

    public TextEmitter getLoadResourceActionGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::LoadResourceAction::LoadResourceAction");
    }

    public TextEmitter getElementTypesGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::providers::ElementTypes::ElementTypes");
    }

    public TextEmitter getPluginPropertiesGenerator () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::properties::properties");
    }

    public TextEmitter getAbstractExpressionEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::expressions::AbstractExpression::AbstractExpression");
    }

    public TextEmitter getOCLExpressionFactoryEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::expressions::OCLExpressionFactory::OCLExpressionFactory");
    }

    public TextEmitter getRegexpExpressionFactoryEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::expressions::RegexpExpressionFactory::RegexpExpressionFactory");
    }

    public TextEmitter getOpenDiagramEditPolicyEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::diagram::policies::OpenDiagramEditPolicy::OpenDiagramEditPolicy");
    }

    public BinaryEmitter getDiagramIconEmitter () throws UnexpectedBehaviourException {
        return newGIFEmitterAdapter ("/xpt/editor/diagram.gif");
    }

    public BinaryEmitter getWizardBannerImageEmitter () throws UnexpectedBehaviourException {
        return newGIFEmitterAdapter ("/xpt/editor/wizban.gif");
    }

    public TextEmitter getWizardBannerStemEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::CreationWizard::wizardBannerStem");
    }

    public TextEmitter getWizardBannerLocationEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::editor::CreationWizard::wizardBannerLocation");
    }

    private BinaryEmitter newGIFEmitter (String relativePath) throws UnexpectedBehaviourException {
        return new GIFEmitter (checkTemplateLocation (relativePath));
    }

    private BinaryEmitter newGIFEmitterAdapter (String relativePath) throws UnexpectedBehaviourException {
        return new JETGIFEmitterAdapter (new org.eclipse.emf.codegen.util.GIFEmitter (checkTemplateLocation (relativePath)));
    }

    private String checkTemplateLocation (String relativePath) throws UnexpectedBehaviourException {
        String templateLocation = JETCompiler.find (getTemplatePath (), relativePath);
        if (templateLocation == null) {
            throw new UnexpectedBehaviourException ("Template " + relativePath + " not found");
        }
        return templateLocation;
    }

    private String [] getTemplatePath () {
        return myTemplatePath;
    }

    private static Bundle getTemplatesBundle () {
        return Activator.getDefault ();
    }

    private static Bundle getCodegenTemplatesBundle () {
        return Platform.getBundle (CODEGEN_PLUGIN_ID);
    }

    public URL getJMergeControlFile () {
        return getCodegenTemplatesBundle ().getEntry ("/templates/emf-merge.xml");
    }

    public BinaryEmitter getShortcutImageEmitter () throws UnexpectedBehaviourException {
        return newGIFEmitter ("/xpt/editor/shortcut.gif");
    }

    public TextEmitter getNavigatorContentProviderEmitter () {
        return retrieveXpand ("xpt::navigator::NavigatorContentProvider::NavigatorContentProvider");
    }

    public TextEmitter getDomainNavigatorContentProviderEmitter () {
        return retrieveXpand ("xpt::navigator::DomainNavigatorContentProvider::DomainNavigatorContentProvider");
    }

    public TextEmitter getDomainNavigatorLabelProviderEmitter () {
        return retrieveXpand ("xpt::navigator::DomainNavigatorLabelProvider::DomainNavigatorLabelProvider");
    }

    public TextEmitter getDomainNavigatorItemEmitter () {
        return retrieveXpand ("xpt::navigator::DomainNavigatorItem::DomainNavigatorItem");
    }

    public TextEmitter getDomainModelElementTesterEmitter () {
        return retrieveXpand ("xpt::editor::DomainModelElementTester::DomainModelElementTester");
    }

    public TextEmitter getURIEditorInputTesterEmitter () {
        return retrieveXpand ("xpt::editor::UriEditorInputTester::UriEditorInputTester");
    }

    public TextEmitter getNavigatorLabelProviderEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::navigator::NavigatorLabelProvider::NavigatorLabelProvider");
    }

    public TextEmitter getNavigatorLinkHelperEmitter () {
        return retrieveXpand ("xpt::navigator::NavigatorLinkHelper::NavigatorLinkHelper");
    }

    public TextEmitter getNavigatorSorterEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::navigator::NavigatorSorter::NavigatorSorter");
    }

    public TextEmitter getNavigatorActionProviderEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::navigator::NavigatorActionProvider::NavigatorActionProvider");
    }

    public TextEmitter getAbstractNavigatorItemEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::navigator::AbstractNavigatorItem::AbstractNavigatorItem");
    }

    public TextEmitter getNavigatorGroupEmitter () {
        return retrieveXpand ("xpt::navigator::NavigatorGroup::NavigatorGroup");
    }

    public TextEmitter getNavigatorItemEmitter () {
        return retrieveXpand ("xpt::navigator::NavigatorItem::NavigatorItem");
    }

    public BinaryEmitter getGroupIconEmitter () throws UnexpectedBehaviourException {
        return newGIFEmitter ("/xpt/navigator/navigatorGroup.gif");
    }

    public TextEmitter getPropertySheetLabelProviderEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::propsheet::SheetLabelProvider::SheetLabelProvider");
    }

    public TextEmitter getPropertySectionEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::propsheet::PropertySection::PropertySection");
    }

    public TextEmitter getApplicationEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::application::Application::Application");
    }

    public TextEmitter getActionBarAdvisorEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::application::ActionBarAdvisor::ActionBarAdvisor");
    }

    public TextEmitter getPerspectiveEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::application::Perspective::Perspective");
    }

    public TextEmitter getWorkbenchAdvisorEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::application::WorkbenchAdvisor::WorkbenchAdvisor");
    }

    public TextEmitter getWorkbenchWindowAdvisorEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::application::WorkbenchWindowAdvisor::WorkbenchWindowAdvisor");
    }

    public TextEmitter getMarkerNavigationProviderEmitter () throws UnexpectedBehaviourException {
        return retrieveXpand ("xpt::providers::MarkerNavigationProvider::MarkerNavigationProvider");
    }

    public TextEmitter getExternalizeEmitter () {
        return retrieveXpand ("xpt::Externalizer::Access");
    }

    public TextEmitter getMessagesEmitter () {
        return retrieveXpand ("xpt::Externalizer::Values");
    }

    private TextEmitter retrieveXpand (String templateFQN) {
        TextEmitter result = myCachedXpandEmitters.get (templateFQN);
        if (result == null) {
            result = new XpandTextEmitter (myResourceManager, templateFQN, getClass ().getClassLoader ());
            myCachedXpandEmitters.put (templateFQN, result);
        }
        return result;
    }

    private HashMap < String, TextEmitter > myCachedXpandEmitters = new HashMap < String, TextEmitter > ();
}

