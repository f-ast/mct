package org.eclipse.gmf.graphdef.editor.edit.policies;

import java.util.Iterator;

import org.eclipse.emf.ecore.EAnnotation;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.graphdef.editor.edit.commands.ChildAccessCreateCommand;

import org.eclipse.gmf.graphdef.editor.edit.commands.ChildAccessReorientCommand;

import org.eclipse.gmf.graphdef.editor.edit.commands.PointCreateCommand;

import org.eclipse.gmf.graphdef.editor.edit.parts.ChildAccessEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.PointEditPart;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;

import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;

import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

public class Polyline2ItemSemanticEditPolicy extends GMFGraphBaseItemSemanticEditPolicy {

    protected Command getCreateCommand (CreateElementRequest req) {
        if (GMFGraphElementTypes.Point_3022 == req.getElementType ()) {
            if (req.getContainmentFeature () == null) {
                req.setContainmentFeature (GMFGraphPackage.eINSTANCE.getPolyline_Template ());
            }
            return getGEFWrapper (new PointCreateCommand (req));
        }
        return super.getCreateCommand (req);
    }

    protected Command getDestroyElementCommand (DestroyElementRequest req) {
        CompoundCommand cc = getDestroyEdgesCommand ();
        addDestroyChildNodesCommand (cc);
        addDestroyShortcutsCommand (cc);
        cc.add (getGEFWrapper (new DestroyElementCommand (req)));
        return cc.unwrap ();
    }

    protected void addDestroyChildNodesCommand (CompoundCommand cmd) {
        View view = (View) getHost ().getModel ();
        EAnnotation annotation = view.getEAnnotation ("Shortcut");
        if (annotation != null) {
            return;
        }
        for (Iterator it = view.getChildren ().iterator ();
        it.hasNext ();) {
            Node node = (Node) it.next ();
            switch (GMFGraphVisualIDRegistry.getVisualID (node)) {
                case PointEditPart.VISUAL_ID :
                    cmd.add (getDestroyElementCommand (node));
                    break;
            }
        }
    }

    protected Command getCreateRelationshipCommand (CreateRelationshipRequest req) {
        Command command = req.getTarget () == null ? getStartCreateRelationshipCommand (req) : getCompleteCreateRelationshipCommand (req);
        return command != null ? command : super.getCreateRelationshipCommand (req);
    }

    protected Command getStartCreateRelationshipCommand (CreateRelationshipRequest req) {
        if (GMFGraphElementTypes.ChildAccess_4002 == req.getElementType ()) {
            return null;
        }
        return null;
    }

    protected Command getCompleteCreateRelationshipCommand (CreateRelationshipRequest req) {
        if (GMFGraphElementTypes.ChildAccess_4002 == req.getElementType ()) {
            return getGEFWrapper (new ChildAccessCreateCommand (req, req.getSource (), req.getTarget ()));
        }
        return null;
    }

    protected Command getReorientRelationshipCommand (ReorientRelationshipRequest req) {
        switch (getVisualID (req)) {
            case ChildAccessEditPart.VISUAL_ID :
                return getGEFWrapper (new ChildAccessReorientCommand (req));
        }
        return super.getReorientRelationshipCommand (req);
    }

}

