package org.eclipse.gmf.runtime.diagram.ui.tools;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.draw2d.FigureCanvas;

import org.eclipse.draw2d.Viewport;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPartViewer;

import org.eclipse.gef.Request;

import org.eclipse.gef.RootEditPart;

import org.eclipse.gef.SharedCursors;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.requests.CreateConnectionRequest;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IDiagramPreferenceSupport;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IPrimaryEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramUIPluginImages;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequestFactory;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.KeyEvent;

import org.eclipse.swt.graphics.Cursor;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Display;

public class ConnectionCreationTool extends org.eclipse.gef.tools.ConnectionCreationTool {
    private IElementType elementType = null;
    private boolean avoidDeactivation = false;
    private boolean isCtrlKeyDown;
    static private Cursor CURSOR_CONNECTION = new Cursor (Display.getDefault (), DiagramUIPluginImages.DESC_CONNECTION_CURSOR_SOURCE.getImageData (), DiagramUIPluginImages.DESC_CONNECTION_CURSOR_MASK.getImageData (), 0, 0);
    static private Cursor CURSOR_CONNECTION_NOT = new Cursor (Display.getDefault (), DiagramUIPluginImages.DESC_NO_CONNECTION_CURSOR_SOURCE.getImageData (), DiagramUIPluginImages.DESC_NO_CONNECTION_CURSOR_MASK.getImageData (), 0, 0);
    static private Cursor CURSOR_TARGET_MENU = new Cursor (Display.getDefault (), SWT.CURSOR_HAND);

    public ConnectionCreationTool () {
        setUnloadWhenFinished (true);
        setDefaultCursor (CURSOR_CONNECTION);
        setDisabledCursor (CURSOR_CONNECTION_NOT);
    }

    public ConnectionCreationTool (IElementType elementType) {
        this ();
        setSemanticRequestType (elementType);
    }

    protected IElementType getElementType () {
        return elementType;
    }

    protected void setSemanticRequestType (IElementType elementType) {
        this.elementType = elementType;
    }

    protected PreferencesHint getPreferencesHint () {
        EditPartViewer viewer = getCurrentViewer ();
        if (viewer != null) {
            RootEditPart rootEP = viewer.getRootEditPart ();
            if (rootEP instanceof IDiagramPreferenceSupport) {
                return ((IDiagramPreferenceSupport) rootEP).getPreferencesHint ();
            }
        }
        return PreferencesHint.USE_DEFAULTS;
    }

    protected Request createTargetRequest () {
        return CreateViewRequestFactory.getCreateConnectionRequest (getElementType (), getPreferencesHint ());
    }

    public void deactivate () {
        if (! avoidDeactivation ()) {
            super.deactivate ();
            setTargetRequest (null);
        }
    }

    protected void eraseSourceFeedback () {
        if (! avoidDeactivation ()) {
            super.eraseSourceFeedback ();
        }
    }

    protected boolean handleButtonUp (int button) {
        setCtrlKeyDown (getCurrentInput ().isControlKeyDown ());
        if (isInState (STATE_CONNECTION_STARTED)) handleCreateConnection ();

        setState (STATE_TERMINAL);
        if (isInState (STATE_TERMINAL | STATE_INVALID)) {
            handleFinished ();
        }
        return true;
    }

    protected void handleFinished () {
        if (! isCtrlKeyDown ()) {
            super.handleFinished ();
        } else {
            reactivate ();
        }
    }

    protected void selectAddedObject (EditPartViewer viewer, Collection objects) {
        final List editparts = new ArrayList ();
        final EditPart [] primaryEP = new EditPart [1];
        for (Iterator i = objects.iterator ();
        i.hasNext ();) {
            Object object = i.next ();
            if (object instanceof IAdaptable) {
                Object editPart = viewer.getEditPartRegistry ().get (((IAdaptable) object).getAdapter (View.class));
                if (editPart instanceof IPrimaryEditPart) {
                    editparts.add (editPart);
                }
                if (editPart instanceof ShapeEditPart) {
                    primaryEP [0] = (ShapeEditPart) editPart;
                }
            }
        }
        if (! editparts.isEmpty ()) {
            viewer.setSelection (new StructuredSelection (editparts));
            Display.getCurrent ().asyncExec (new Runnable () {

                public void run () {
                    if (primaryEP [0] == null) {
                        primaryEP [0] = (EditPart) editparts.get (0);
                    }
                    if (primaryEP [0].isActive ()) {
                        primaryEP [0].performRequest (new Request (RequestConstants.REQ_DIRECT_EDIT));
                    }
                }

            }

            );
        }
    }

    protected boolean handleDoubleClick (int button) {
        createConnection ();
        return true;
    }

    protected void createConnection () {
        List selectedEditParts = getCurrentViewer ().getSelectedEditParts ();
        if (! selectedEditParts.isEmpty ()) {
            IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) selectedEditParts.get (0);
            IGraphicalEditPart targetEditPart = selectedEditParts.size () == 2 ? (IGraphicalEditPart) selectedEditParts.get (1) : sourceEditPart;
            CreateConnectionRequest connectionRequest = (CreateConnectionRequest) createTargetRequest ();
            connectionRequest.setTargetEditPart (sourceEditPart);
            connectionRequest.setType (RequestConstants.REQ_CONNECTION_START);
            connectionRequest.setLocation (new Point (0, 0));
            if (sourceEditPart.getCommand (connectionRequest) != null) {
                connectionRequest.setSourceEditPart (sourceEditPart);
                connectionRequest.setTargetEditPart (targetEditPart);
                connectionRequest.setType (RequestConstants.REQ_CONNECTION_END);
                connectionRequest.setLocation (new Point (0, 0));
                Command command = targetEditPart.getCommand (connectionRequest);
                if (command != null) {
                    setCurrentCommand (command);
                    executeCurrentCommand ();
                    selectAddedObject (getCurrentViewer (), DiagramCommandStack.getReturnValues (command));
                }
            }
            deactivate ();
        }
    }

    protected boolean handleKeyUp (KeyEvent e) {
        if (e.keyCode == SWT.Selection) {
            setEditDomain (getCurrentViewer ().getEditDomain ());
            createConnection ();
            return true;
        }
        return false;
    }

    protected boolean handleCreateConnection () {
        setAvoidDeactivation (true);
        EditPartViewer viewer = getCurrentViewer ();
        Command endCommand = getCommand ();
        setCurrentCommand (endCommand);
        executeCurrentCommand ();
        selectAddedObject (viewer, DiagramCommandStack.getReturnValues (endCommand));
        setAvoidDeactivation (false);
        eraseSourceFeedback ();
        deactivate ();
        return true;
    }

    protected boolean avoidDeactivation () {
        return avoidDeactivation;
    }

    protected void setAvoidDeactivation (boolean avoidDeactivation) {
        this.avoidDeactivation = avoidDeactivation;
    }

    protected boolean isCtrlKeyDown () {
        return isCtrlKeyDown;
    }

    protected void setCtrlKeyDown (boolean isCtrlKeyDown) {
        this.isCtrlKeyDown = isCtrlKeyDown;
    }

    protected boolean handleMove () {
        boolean bool = super.handleMove ();
        if (isInState (STATE_CONNECTION_STARTED)) {
            updateAutoexposeHelper ();
        }
        return bool;
    }

    protected Cursor calculateCursor () {
        if (isInState (STATE_CONNECTION_STARTED)) {
            if (getAutoexposeHelper () != null) {
                return SharedCursors.HAND;
            } else {
                if (getCurrentViewer () != null) {
                    Control control = getCurrentViewer ().getControl ();
                    if (control instanceof FigureCanvas) {
                        Viewport viewport = ((FigureCanvas) control).getViewport ();
                        Rectangle rect = Rectangle.SINGLETON;
                        viewport.getClientArea (rect);
                        viewport.translateToParent (rect);
                        viewport.translateToAbsolute (rect);
                        if (! rect.contains (getLocation ())) {
                            return getDisabledCursor ();
                        }
                    }
                }
            }
        }
        Command command = getCurrentCommand ();
        if (command != null && command.canExecute ()) {
            EditPart ep = getTargetEditPart ();
            if (ep instanceof DiagramEditPart || ep instanceof CompartmentEditPart) return CURSOR_TARGET_MENU;

        }
        return super.calculateCursor ();
    }

}

