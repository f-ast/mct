package org.eclipse.gmf.runtime.emf.type.core.commands;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;

import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;

public abstract class EditElementCommand extends AbstractTransactionalCommand {
    private EObject elementToEdit;
    private final IEditCommandRequest request;
    private EClass eClass = null;

    protected EditElementCommand (String label, EObject elementToEdit, IEditCommandRequest request) {
        super (request.getEditingDomain (), label, getAffectedFiles (request));
        this.elementToEdit = elementToEdit;
        this.request = request;
    }

    protected static List getAffectedFiles (IEditCommandRequest request) {
        List result = new ArrayList ();
        List elements = request.getElementsToEdit ();
        if (elements != null) {
            for (Iterator i = elements.iterator ();
            i.hasNext ();) {
                Resource resource = ((EObject) i.next ()).eResource ();
                if (resource != null) {
                    IFile file = WorkspaceSynchronizer.getFile (resource);
                    if (file != null) {
                        result.add (file);
                    }
                }
            }
        }
        return result;
    }

    public boolean canExecute () {
        if (getEClass () != null) {
            return getEClass ().isSuperTypeOf (getEClassToEdit ());
        }
        return true;
    }

    protected EObject getElementToEdit () {
        return elementToEdit;
    }

    protected EClass getEClassToEdit () {
        return getElementToEdit ().eClass ();
    }

    protected void setElementToEdit (EObject element) {
        this.elementToEdit = element;
    }

    protected IEditCommandRequest getRequest () {
        return request;
    }

    protected EClass getEClass () {
        return eClass;
    }

    protected void setEClass (EClass eClass) {
        this.eClass = eClass;
    }

    protected boolean isOK (CommandResult commandResult) {
        return commandResult.getStatus ().getCode () == IStatus.OK;
    }

}

