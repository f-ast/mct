package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import java.util.Iterator;

import org.eclipse.emf.codegen.ecore.genmodel.GenClassifier;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;

import org.eclipse.gmf.codegen.gmfgen.GenDiagramElementTarget;

public class GenDiagramElementTargetImpl extends GenAuditableImpl implements GenDiagramElementTarget {
    protected EList element = null;

    protected GenDiagramElementTargetImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenDiagramElementTarget ();
    }

    public EList getElement () {
        if (element == null) {
            element = new EObjectResolvingEList (GenCommonBase.class, this, GMFGenPackage.GEN_DIAGRAM_ELEMENT_TARGET__ELEMENT);
        }
        return element;
    }

    public GenClassifier getContext () {
        if (getElement ().isEmpty ()) {
            return null;
        }
        return ((GenCommonBase) getElement ().get (0)).getDiagramRunTimeClass ();
    }

    public String getClientContextID () {
        StringBuffer buf = new StringBuffer ("Ctx");
        for (Iterator it = getElement ().iterator ();
        it.hasNext ();) {
            GenCommonBase nextElement = (GenCommonBase) it.next ();
            buf.append ('_');
            int id = nextElement.getVisualID ();
            if (id < 0) {
                buf.append ('n');
            }
            buf.append (id);
        }
        return buf.toString ();
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM_ELEMENT_TARGET__ELEMENT :
                return getElement ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM_ELEMENT_TARGET__ELEMENT :
                getElement ().clear ();
                getElement ().addAll ((Collection) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM_ELEMENT_TARGET__ELEMENT :
                getElement ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM_ELEMENT_TARGET__ELEMENT :
                return element != null && ! element.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

}

