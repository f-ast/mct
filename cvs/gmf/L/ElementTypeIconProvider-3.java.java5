package org.eclipse.gmf.runtime.emf.type.ui.internal.providers;

import java.net.URL;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.jface.resource.ImageDescriptor;

import org.eclipse.jface.resource.ImageRegistry;

import org.eclipse.swt.graphics.Image;

import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.ui.services.icon.GetIconOperation;

import org.eclipse.gmf.runtime.common.ui.services.icon.IIconProvider;

import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

public class ElementTypeIconProvider extends AbstractProvider implements IIconProvider {
    private ImageRegistry imageRegistry;

    public Image getIcon (IAdaptable hint, int flags) {
        IElementType type = getType (hint);
        if (type != null) {
            Image image = getImageRegistry ().get (type.getId ());
            if (image == null) {
                URL url = type.getIconURL ();
                if (url != null) {
                    ImageDescriptor descriptor = ImageDescriptor.createFromURL (url);
                    getImageRegistry ().put (type.getId (), descriptor);
                    image = getImageRegistry ().get (type.getId ());
                }
            }
            return image;
        }
        return null;
    }

    public boolean provides (IOperation operation) {
        if (operation instanceof GetIconOperation) {
            GetIconOperation getIconOperation = (GetIconOperation) operation;
            IAdaptable hint = getIconOperation.getHint ();
            return getType (hint) != null;
        }
        return false;
    }

    private ImageRegistry getImageRegistry () {
        if (imageRegistry == null) {
            imageRegistry = new ImageRegistry ();
        }
        return imageRegistry;
    }

    private IElementType getType (IAdaptable hint) {
        IElementType type = (IElementType) hint.getAdapter (IElementType.class);
        if (type == null) {
            EObject eObject = (EObject) hint.getAdapter (EObject.class);
            if (eObject != null) {
                IElementType [] types = ElementTypeRegistry.getInstance ().getAllTypesMatching (eObject);
                if (types.length > 0) {
                    type = types [0];
                }
            }
        } else if (ElementTypeRegistry.getInstance ().getType (type.getId ()) == null) {
            type = null;
        }

        return type;
    }

}

