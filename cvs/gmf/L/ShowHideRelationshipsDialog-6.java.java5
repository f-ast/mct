package org.eclipse.gmf.runtime.common.ui.dialogs;

import java.util.List;

import org.eclipse.jface.dialogs.Dialog;

import org.eclipse.jface.viewers.TreeViewer;

import org.eclipse.jface.window.Window;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.SelectionAdapter;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.graphics.GC;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.graphics.Point;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.layout.GridLayout;

import org.eclipse.swt.widgets.Button;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Label;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.swt.widgets.Tree;

import org.eclipse.swt.widgets.TreeItem;

import org.eclipse.ui.PlatformUI;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIDebugOptions;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIIconNames;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIStatusCodes;

import org.eclipse.gmf.runtime.common.ui.internal.dialogs.SelectableElementTreeSelectionChangedAndMouseAndKeyListener;

import org.eclipse.gmf.runtime.common.ui.internal.dialogs.SelectableElementsContentProvider;

import org.eclipse.gmf.runtime.common.ui.internal.dialogs.SelectableElementsTriStateLabelProvider;

import org.eclipse.gmf.runtime.common.ui.internal.l10n.CommonUIMessages;

import org.eclipse.gmf.runtime.common.ui.internal.l10n.ResourceManager;

import org.eclipse.gmf.runtime.common.ui.util.WindowUtil;

public class ShowHideRelationshipsDialog extends Dialog {
    private TreeViewer viewer;
    private Button ok;
    private Button cancel;
    private SelectableElement rootElement;
    private String helpContextId;
    private static int MAX_VIEWER_WIDTH = 400;
    private static int MAX_VIEWER_HEIGHT = 400;
    private static int TEXT_AREA_HEIGHT = 46;

    static {
        try {
            MAX_VIEWER_WIDTH = Integer.parseInt (CommonUIMessages.ShowHideRelationshipsDialog_MAX_VIEWER_WIDTH);
            MAX_VIEWER_HEIGHT = Integer.parseInt (CommonUIMessages.ShowHideRelationshipsDialog_MAX_VIEWER_HEIGHT);
            TEXT_AREA_HEIGHT = Integer.parseInt (CommonUIMessages.ShowHideRelationshipsDialog_TEXT_AREA_HEIGHT);
        } catch (NumberFormatException e) {
            Trace.catching (CommonUIPlugin.getDefault (), CommonUIDebugOptions.EXCEPTIONS_CATCHING, CommonUIPlugin.getDefault ().getClass (), "NumberFormatException", e);
            Log.error (CommonUIPlugin.getDefault (), CommonUIStatusCodes.RESOURCE_FAILURE, "Failed to parse Show Hide Relationships Dialog's localized size", e);
        }
    }

    private int viewerWidth = MAX_VIEWER_WIDTH;
    Image selectedIcon;
    Image unselectedIcon;
    Image clearedIcon;

    public ShowHideRelationshipsDialog (Shell parentShell, SelectableElement aRootElement) {
        super (parentShell);
        this.rootElement = aRootElement.makeCopy ();
        try {
            selectedIcon = ResourceManager.getInstance ().createImage (CommonUIIconNames.IMG_CHECKBOX_SELECTED);
            unselectedIcon = ResourceManager.getInstance ().createImage (CommonUIIconNames.IMG_CHECKBOX_UNSELECTED);
            clearedIcon = ResourceManager.getInstance ().createImage (CommonUIIconNames.IMG_CHECKBOX_CLEARED);
        } catch (Exception e) {
            Trace.catching (CommonUIPlugin.getDefault (), CommonUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "ShowHideRelationshipsDialog", e);
            Log.error (CommonUIPlugin.getDefault (), CommonUIStatusCodes.RESOURCE_FAILURE, "Failed to get legend icons for Show Hide Relationships Dialog", e);
            disposeImages ();
            selectedIcon = null;
        }
    }

    protected TreeViewer getTreeViewer () {
        return viewer;
    }

    protected void setTreeViewer (TreeViewer aViewer) {
        this.viewer = aViewer;
    }

    protected void createViewer (Composite parent) {
        setTreeViewer (new TreeViewer (parent, SWT.SINGLE | SWT.V_SCROLL | SWT.BORDER));
        GridData gridData = new GridData (GridData.FILL_BOTH);
        gridData.widthHint = viewerWidth;
        int viewerHeight = SelectableElement.calculateNumberOfChildren (rootElement);
        GC gc = new GC (getTreeViewer ().getTree ());
        Point size = gc.textExtent (StringStatics.BLANK);
        viewerHeight = (viewerHeight * size.y) + 64;
        gc.dispose ();
        if (viewerHeight > MAX_VIEWER_HEIGHT) viewerHeight = MAX_VIEWER_HEIGHT;

        gridData.heightHint = viewerHeight;
        Tree tree = getTreeViewer ().getTree ();
        tree.setLayoutData (gridData);
        tree.setLayout (new GridLayout (1, true));
        getTreeViewer ().setUseHashlookup (true);
        SelectableElementTreeSelectionChangedAndMouseAndKeyListener listener = new SelectableElementTreeSelectionChangedAndMouseAndKeyListener (getTreeViewer ()) {

            protected void switchCheckType (SelectableElement element) {
                if (element.getSelectedType () == SelectedType.LEAVE) {
                    element.setSelectedType (SelectedType.UNSELECTED);
                } else if (element.getSelectedType () == SelectedType.UNSELECTED) {
                    element.setSelectedType (SelectedType.SELECTED);
                } else if (element.getSelectedType () == SelectedType.SELECTED) {
                    element.setSelectedType (SelectedType.LEAVE);
                }

            }

        }

        ;
        getTreeViewer ().addSelectionChangedListener (listener);
        getTreeViewer ().getTree ().addMouseListener (listener);
        getTreeViewer ().getTree ().addKeyListener (listener);
    }

    protected void makeButtons (Composite parent) {
        Composite empty = new Composite (parent, SWT.NULL);
        GridData gridData = new GridData ();
        gridData.heightHint = 20;
        empty.setLayoutData (gridData);
        Composite right = new Composite (parent, SWT.NULL);
        right.setLayout (new GridLayout (3, false));
        right.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_END));
        ok = new Button (right, SWT.PUSH);
        ok.setText (CommonUIMessages.ShowHideRelationshipsDialog_Button_OK);
        ok.setLayoutData (WindowUtil.makeFixedButtonData (ok));
        ok.addSelectionListener (new SelectionAdapter () {

            public void widgetSelected (SelectionEvent e) {
                performOk ();
            }

        }

        );
        cancel = new Button (right, SWT.PUSH);
        cancel.setText (CommonUIMessages.ShowHideRelationshipsDialog_Button_Cancel);
        cancel.setLayoutData (WindowUtil.makeFixedButtonData (cancel));
        cancel.addSelectionListener (new SelectionAdapter () {

            public void widgetSelected (SelectionEvent e) {
                setReturnCode (Window.CANCEL);
                disposeImages ();
                close ();
            }

        }

        );
    }

    private void createLineOfTextAtTop (Composite parent) {
        Composite top = new Composite (parent, SWT.NULL);
        GridData gridData = new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
        viewerWidth = SelectableElement.calculateLongestStringLength (rootElement, top) + 96;
        if (viewerWidth > MAX_VIEWER_WIDTH) viewerWidth = MAX_VIEWER_WIDTH;

        gridData.widthHint = viewerWidth;
        gridData.heightHint = TEXT_AREA_HEIGHT;
        top.setLayoutData (gridData);
        top.setLayout (new GridLayout (1, false));
        Label label = new Label (top, SWT.WRAP);
        label.setText (CommonUIMessages.ShowHideRelationshipsDialog_Description);
        label.setLayoutData (new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL));
    }

    private void makeBlankBox (Composite parent) {
        Composite blankBox = new Composite (parent, SWT.NULL);
        GridData gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.heightHint = 10;
        blankBox.setLayoutData (gridData);
    }

    private void createLegend (Composite parent) {
        final int NUM_BOXES = 3;
        makeBlankBox (parent);
        Label label = new Label (parent, SWT.NULL);
        label.setText (CommonUIMessages.ShowHideRelationshipsDialog_Label_Legend);
        Composite legendBox = new Composite (parent, SWT.BORDER);
        GridData gridData = new GridData (GridData.FILL_HORIZONTAL);
        legendBox.setLayoutData (gridData);
        legendBox.setLayout (new GridLayout (3, true));
        Composite [] elements = new Composite [NUM_BOXES];
        for (int i = 0;
        i < NUM_BOXES; i ++) {
            elements [i] = new Composite (legendBox, SWT.NULL);
            gridData = new GridData (GridData.FILL_HORIZONTAL);
            elements [i].setLayoutData (gridData);
            elements [i].setLayout (new GridLayout (2, false));
        }
        label = new Label (elements [0], SWT.NULL);
        label.setImage (selectedIcon);
        label = new Label (elements [0], SWT.NULL);
        label.setText (CommonUIMessages.ShowHideRelationshipsDialog_Label_LegendShow);
        label.setLayoutData (new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL));
        label = new Label (elements [1], SWT.NULL);
        label.setImage (unselectedIcon);
        label = new Label (elements [1], SWT.NULL);
        label.setText (CommonUIMessages.ShowHideRelationshipsDialog_Label_LegendHide);
        label.setLayoutData (new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL));
        label = new Label (elements [2], SWT.NULL);
        label.setImage (clearedIcon);
        label = new Label (elements [2], SWT.NULL);
        label.setText (CommonUIMessages.ShowHideRelationshipsDialog_Label_LegendLeave);
        label.setLayoutData (new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL));
        makeBlankBox (parent);
    }

    protected Control createContents (Composite parent) {
        createLineOfTextAtTop (parent);
        Composite bottom = new Composite (parent, SWT.NULL);
        bottom.setLayoutData (new GridData (GridData.FILL_BOTH));
        bottom.setLayout (new GridLayout (1, false));
        createViewer (bottom);
        if (selectedIcon != null) createLegend (bottom);

        makeButtons (bottom);
        viewer.setLabelProvider (new SelectableElementsTriStateLabelProvider ());
        viewer.setContentProvider (new SelectableElementsContentProvider ());
        getTreeViewer ().setInput (rootElement);
        Tree tree = getTreeViewer ().getTree ();
        TreeItem [] treeItems = tree.getItems ();
        assert null != treeItems : "treeItems cannot be null";
        assert treeItems.length == 1 : "treeItems cannot be empty";
        tree.setSelection (treeItems);
        ok.setFocus ();
        resetDialog ();
        viewer.refresh ();
        getShell ().setText (CommonUIMessages.ShowHideRelationshipsDialog_Title);
        PlatformUI.getWorkbench ().getHelpSystem ().setHelp (parent, helpContextId);
        return parent;
    }

    protected void performOk () {
        disposeImages ();
        setReturnCode (Window.OK);
        close ();
    }

    void resetDialog () {
        viewer.expandAll ();
    }

    public SelectableElement getRootElement () {
        return rootElement;
    }

    public List getSelectedRelationshipTypes () {
        if (this.rootElement == null) {
            return null;
        }
        return this.rootElement.getSelectedElementTypes ();
    }

    public List getUnselectedRelationshipTypes () {
        if (this.rootElement == null) {
            return null;
        }
        return this.rootElement.getUnSelectedElementTypes ();
    }

    public void initHelpContextId (String helpId) {
        this.helpContextId = helpId;
    }

    public void disposeImages () {
        if (selectedIcon != null && ! selectedIcon.isDisposed ()) selectedIcon.dispose ();

        if (unselectedIcon != null && ! unselectedIcon.isDisposed ()) unselectedIcon.dispose ();

        if (clearedIcon != null && ! clearedIcon.isDisposed ()) clearedIcon.dispose ();

    }

}

