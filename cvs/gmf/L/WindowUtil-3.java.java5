package org.eclipse.gmf.runtime.common.ui.util;

import org.eclipse.jface.dialogs.Dialog;

import org.eclipse.jface.dialogs.IDialogConstants;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.GC;

import org.eclipse.swt.graphics.Point;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.widgets.Button;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.MessageBox;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIDebugOptions;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIStatusCodes;

public class WindowUtil {

    public static void centerDialog (Shell dialogShell, Shell parentShell) {
        try {
            Point dialogSize = dialogShell.getSize ();
            Point windowLocation = parentShell.getLocation ();
            Point windowSize = parentShell.getSize ();
            dialogShell.setLocation (((windowSize.x - dialogSize.x) / 2) + windowLocation.x, ((windowSize.y - dialogSize.y) / 2) + windowLocation.y);
        } catch (Exception e) {
            Trace.catching (CommonUIPlugin.getDefault (), CommonUIDebugOptions.EXCEPTIONS_CATCHING, WindowUtil.class, "Failed to center dialog", e);
            Log.error (CommonUIPlugin.getDefault (), CommonUIStatusCodes.GENERAL_UI_FAILURE, "Failed to center dialog", e);
        }
    }

    public static void disposeChildren (Composite parent) {
        Control [] children = parent.getChildren ();
        for (int i = 0;
        i < children.length; i ++) {
            children [i].dispose ();
        }
    }

    public static GridData makeButtonData (Button button) {
        GC gc = new GC (button);
        gc.setFont (button.getFont ());
        GridData data = new GridData ();
        data.heightHint = Dialog.convertVerticalDLUsToPixels (gc.getFontMetrics (), IDialogConstants.BUTTON_HEIGHT);
        data.widthHint = Math.max (Dialog.convertHorizontalDLUsToPixels (gc.getFontMetrics (), IDialogConstants.BUTTON_WIDTH), button.computeSize (SWT.DEFAULT, SWT.DEFAULT, true).x);
        gc.dispose ();
        return data;
    }

    public static GridData makeFixedButtonData (Button button) {
        GC gc = new GC (button);
        gc.setFont (button.getFont ());
        GridData gridData = new GridData ();
        gridData.widthHint = Dialog.convertHorizontalDLUsToPixels (gc.getFontMetrics (), IDialogConstants.BUTTON_WIDTH);
        gridData.heightHint = Dialog.convertVerticalDLUsToPixels (gc.getFontMetrics (), IDialogConstants.BUTTON_HEIGHT);
        gc.dispose ();
        return gridData;
    }

    public static void doMessageBox (String message, String title, int swtStyle, Shell shell) {
        MessageBox messageBox = new MessageBox (shell, swtStyle);
        messageBox.setMessage (message);
        messageBox.setText (title);
        messageBox.open ();
    }

}

