package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.gmfgraph.Compartment;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

public class CompartmentImpl extends DiagramElementImpl implements Compartment {
    protected static final boolean COLLAPSIBLE_EDEFAULT = false;
    protected boolean collapsible = COLLAPSIBLE_EDEFAULT;
    protected static final boolean NEEDS_TITLE_EDEFAULT = false;
    protected boolean needsTitle = NEEDS_TITLE_EDEFAULT;

    protected CompartmentImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getCompartment ();
    }

    public boolean isCollapsible () {
        return collapsible;
    }

    public void setCollapsible (boolean newCollapsible) {
        boolean oldCollapsible = collapsible;
        collapsible = newCollapsible;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.COMPARTMENT__COLLAPSIBLE, oldCollapsible, collapsible));

    }

    public boolean isNeedsTitle () {
        return needsTitle;
    }

    public void setNeedsTitle (boolean newNeedsTitle) {
        boolean oldNeedsTitle = needsTitle;
        needsTitle = newNeedsTitle;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.COMPARTMENT__NEEDS_TITLE, oldNeedsTitle, needsTitle));

    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.COMPARTMENT__COLLAPSIBLE :
                return isCollapsible () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGraphPackage.COMPARTMENT__NEEDS_TITLE :
                return isNeedsTitle () ? Boolean.TRUE : Boolean.FALSE;
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.COMPARTMENT__COLLAPSIBLE :
                setCollapsible (((Boolean) newValue).booleanValue ());
                return;
            case GMFGraphPackage.COMPARTMENT__NEEDS_TITLE :
                setNeedsTitle (((Boolean) newValue).booleanValue ());
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.COMPARTMENT__COLLAPSIBLE :
                setCollapsible (COLLAPSIBLE_EDEFAULT);
                return;
            case GMFGraphPackage.COMPARTMENT__NEEDS_TITLE :
                setNeedsTitle (NEEDS_TITLE_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.COMPARTMENT__COLLAPSIBLE :
                return collapsible != COLLAPSIBLE_EDEFAULT;
            case GMFGraphPackage.COMPARTMENT__NEEDS_TITLE :
                return needsTitle != NEEDS_TITLE_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (collapsible: ");
        result.append (collapsible);
        result.append (", needsTitle: ");
        result.append (needsTitle);
        result.append (')');
        return result.toString ();
    }

}

