package org.eclipse.gmf.runtime.notation.providers.internal.copypaste;

import java.util.List;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.runtime.emf.clipboard.core.ObjectInfo;

import org.eclipse.gmf.runtime.emf.clipboard.core.OverridePasteChildOperation;

import org.eclipse.gmf.runtime.emf.clipboard.core.PasteChildOperation;

import org.eclipse.gmf.runtime.emf.clipboard.core.PostPasteChildOperation;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public class PositionalGeneralViewPasteOperation extends OverridePasteChildOperation {
    private boolean shouldPasteAlwaysCopyObject;

    public PositionalGeneralViewPasteOperation (PasteChildOperation overriddenChildPasteOperation, boolean shouldPasteAlwaysCopyObject) {
        super (overriddenChildPasteOperation);
        this.shouldPasteAlwaysCopyObject = shouldPasteAlwaysCopyObject;
    }

    public void paste () throws Exception {
    }

    protected boolean shouldPasteAlwaysCopyObject (ObjectInfo alwaysCopyObjectInfo) {
        return shouldPasteAlwaysCopyObject;
    }

    public PasteChildOperation getPostPasteOperation () {
        return new PostPasteChildOperation (this, EMPTY_ARRAY) {

            public void paste () throws Exception {
                Node view = (Node) getEObject ();
                view.eUnset (NotationPackage.eINSTANCE.getView_SourceEdges ());
                view.eUnset (NotationPackage.eINSTANCE.getView_TargetEdges ());
                EObject pastedElement = doPasteInto (getParentEObject ());
                if (pastedElement != null) {
                    setPastedElement (pastedElement);
                    addPastedElement (pastedElement);
                } else {
                    addPasteFailuresObject (getEObject ());
                }
            }

            protected boolean shouldPasteAlwaysCopyObject (ObjectInfo alwaysCopyObjectInfo) {
                return PositionalGeneralViewPasteOperation.this.shouldPasteAlwaysCopyObject (alwaysCopyObjectInfo);
            }

            protected PasteChildOperation makeAuxiliaryChildPasteProcess (ObjectInfo auxiliaryChildEObjectInfo) {
                EObject semanticPasteTarget = NotationClipboardOperationHelper.getSemanticPasteTarget ((View) getPastedElement ());
                if (semanticPasteTarget == null) {
                    return null;
                }
                return new PasteChildOperation (getParentPasteProcess ().clone (semanticPasteTarget), auxiliaryChildEObjectInfo);
            }

            public PasteChildOperation getPostPasteOperation () {
                List operations = getAlwaysCopyObjectPasteOperations ();
                return new PostPasteChildOperation (this, operations);
            }

        }

        ;
    }

}

