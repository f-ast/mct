package org.eclipse.gmf.runtime.draw2d.ui.render.internal.image;

import java.io.ByteArrayInputStream;

import java.security.InvalidParameterException;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.AbstractRenderedImage;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderDebugOptions;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderPlugin;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.factory.RenderedImageKey;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.graphics.ImageData;

import org.eclipse.swt.graphics.ImageLoader;

import org.eclipse.swt.widgets.Display;

public final class ImageRenderedImage extends AbstractRenderedImage {

    public ImageRenderedImage (byte [] buff, RenderedImageKey key) {
        super (buff, key);
    }

    public Image getSWTImage () {
        if (img != null) return img;

        try {
            img = loadImageFromBuffer ();
        } catch (Exception e) {
            Trace.throwing (Draw2dRenderPlugin.getInstance (), Draw2dRenderDebugOptions.EXCEPTIONS_THROWING, ImageRenderedImage.class, "ImageRenderedImage.getSWTImage() : couldn't load image from buffer", e);
        }
        return img;
    }

    private Image loadImageFromBuffer () throws Exception {
        ImageLoader loader = new ImageLoader ();
        ByteArrayInputStream byteIS = new ByteArrayInputStream (getBuffer ());
        ImageData [] imgData = loader.load (byteIS);
        if (imgData == null) throw new InvalidParameterException ();

        int origWidth = imgData [0].width;
        int origHeight = imgData [0].height;
        int newWidth = getKey ().getWidth () == 0 ? origWidth : getKey ().getWidth ();
        int newHeight = getKey ().getHeight () == 0 ? origHeight : getKey ().getHeight ();
        if (getKey ().shouldMaintainAspectRatio ()) {
            if (origWidth < origHeight) newWidth = (int) Math.round (newHeight * origWidth / (double) origHeight);
            else newHeight = (int) Math.round (newWidth * origHeight / (double) origWidth);

        }
        ImageData scaledImgData = imgData [0].scaledTo (newWidth, newHeight);
        return new Image (Display.getDefault (), scaledImgData);
    }

}

