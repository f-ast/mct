package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.ArrayList;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import java.util.List;

import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenAuditContainer;

import org.eclipse.gmf.codegen.gmfgen.GenAuditRoot;

import org.eclipse.gmf.codegen.gmfgen.GenAuditRule;

import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

public class GenAuditRootImpl extends EObjectImpl implements GenAuditRoot {
    protected EList < GenAuditContainer > categories;
    protected EList < GenAuditRule > rules;

    protected GenAuditRootImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenAuditRoot ();
    }

    public GenEditorGenerator getEditorGen () {
        if (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_ROOT__EDITOR_GEN) return null;

        return (GenEditorGenerator) eContainer ();
    }

    public NotificationChain basicSetEditorGen (GenEditorGenerator newEditorGen, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newEditorGen, GMFGenPackage.GEN_AUDIT_ROOT__EDITOR_GEN, msgs);
        return msgs;
    }

    public void setEditorGen (GenEditorGenerator newEditorGen) {
        if (newEditorGen != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_ROOT__EDITOR_GEN && newEditorGen != null)) {
            if (EcoreUtil.isAncestor (this, newEditorGen)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newEditorGen != null) msgs = ((InternalEObject) newEditorGen).eInverseAdd (this, GMFGenPackage.GEN_EDITOR_GENERATOR__AUDITS, GenEditorGenerator.class, msgs);

            msgs = basicSetEditorGen (newEditorGen, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDIT_ROOT__EDITOR_GEN, newEditorGen, newEditorGen));

    }

    public EList < GenAuditContainer > getCategories () {
        if (categories == null) {
            categories = new EObjectContainmentWithInverseEList < GenAuditContainer > (GenAuditContainer.class, this, GMFGenPackage.GEN_AUDIT_ROOT__CATEGORIES, GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT);
        }
        return categories;
    }

    public EList < GenAuditRule > getRules () {
        if (rules == null) {
            rules = new EObjectContainmentWithInverseEList < GenAuditRule > (GenAuditRule.class, this, GMFGenPackage.GEN_AUDIT_ROOT__RULES, GMFGenPackage.GEN_AUDIT_RULE__ROOT);
        }
        return rules;
    }

    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_AUDIT_ROOT__EDITOR_GEN :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetEditorGen ((GenEditorGenerator) otherEnd, msgs);
            case GMFGenPackage.GEN_AUDIT_ROOT__CATEGORIES :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getCategories ()).basicAdd (otherEnd, msgs);
            case GMFGenPackage.GEN_AUDIT_ROOT__RULES :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getRules ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_AUDIT_ROOT__EDITOR_GEN :
                return basicSetEditorGen (null, msgs);
            case GMFGenPackage.GEN_AUDIT_ROOT__CATEGORIES :
                return ((InternalEList < ? >) getCategories ()).basicRemove (otherEnd, msgs);
            case GMFGenPackage.GEN_AUDIT_ROOT__RULES :
                return ((InternalEList < ? >) getRules ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_AUDIT_ROOT__EDITOR_GEN :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_EDITOR_GENERATOR__AUDITS, GenEditorGenerator.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_AUDIT_ROOT__EDITOR_GEN :
                return getEditorGen ();
            case GMFGenPackage.GEN_AUDIT_ROOT__CATEGORIES :
                return getCategories ();
            case GMFGenPackage.GEN_AUDIT_ROOT__RULES :
                return getRules ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_AUDIT_ROOT__EDITOR_GEN :
                setEditorGen ((GenEditorGenerator) newValue);
                return;
            case GMFGenPackage.GEN_AUDIT_ROOT__CATEGORIES :
                getCategories ().clear ();
                getCategories ().addAll ((Collection < ? extends GenAuditContainer >) newValue);
                return;
            case GMFGenPackage.GEN_AUDIT_ROOT__RULES :
                getRules ().clear ();
                getRules ().addAll ((Collection < ? extends GenAuditRule >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_AUDIT_ROOT__EDITOR_GEN :
                setEditorGen ((GenEditorGenerator) null);
                return;
            case GMFGenPackage.GEN_AUDIT_ROOT__CATEGORIES :
                getCategories ().clear ();
                return;
            case GMFGenPackage.GEN_AUDIT_ROOT__RULES :
                getRules ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_AUDIT_ROOT__EDITOR_GEN :
                return getEditorGen () != null;
            case GMFGenPackage.GEN_AUDIT_ROOT__CATEGORIES :
                return categories != null && ! categories.isEmpty ();
            case GMFGenPackage.GEN_AUDIT_ROOT__RULES :
                return rules != null && ! rules.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    public List < GenPackage > getTargetedModelPackages () {
        ArrayList < GenPackage > targetPackages = new ArrayList < GenPackage > ();
        for (GenAuditRule r : getRules ()) {
            if (r.getTarget () != null && r.getTarget ().getTargetClass () != null) {
                targetPackages.add (r.getTarget ().getTargetClass ().getGenPackage ());
            }
        }
        return targetPackages;
    }

}

