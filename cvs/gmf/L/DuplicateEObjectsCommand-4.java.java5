package org.eclipse.gmf.runtime.emf.commands.core.commands;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.emf.clipboard.core.ClipboardSupportUtil;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;

public abstract class DuplicateEObjectsCommand extends AbstractTransactionalCommand {
    private List objectsToBeDuplicated;
    private Map allDuplicatedObjects;

    public DuplicateEObjectsCommand (TransactionalEditingDomain editingDomain, String label, List eObjectsToBeDuplicated) {
        super (editingDomain, label, getWorkspaceFiles (eObjectsToBeDuplicated));
        this.objectsToBeDuplicated = eObjectsToBeDuplicated;
        allDuplicatedObjects = new HashMap ();
    }

    public DuplicateEObjectsCommand (TransactionalEditingDomain editingDomain, String label, List eObjectsToBeDuplicated, Map allDuplicatedObjectsMap) {
        super (editingDomain, label, getWorkspaceFiles (eObjectsToBeDuplicated));
        this.objectsToBeDuplicated = eObjectsToBeDuplicated;
        this.allDuplicatedObjects = allDuplicatedObjectsMap;
    }

    protected Map getAllDuplicatedObjectsMap () {
        return allDuplicatedObjects;
    }

    protected List getObjectsToBeDuplicated () {
        return objectsToBeDuplicated;
    }

    public boolean canExecute () {
        for (Iterator iter = objectsToBeDuplicated.iterator ();
        iter.hasNext ();) {
            EObject original = (EObject) iter.next ();
            EReference reference = original.eContainmentFeature ();
            if (reference == null || ! reference.isMany ()) {
                return false;
            }
        }
        return true;
    }

    protected CommandResult doExecuteWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException {
        ClipboardSupportUtil.getCopyElements (getObjectsToBeDuplicated ());
        EcoreUtil.Copier copier = new EcoreUtil.Copier ();
        copier.copyAll (objectsToBeDuplicated);
        copier.copyReferences ();
        getAllDuplicatedObjectsMap ().putAll (copier);
        for (Iterator i = objectsToBeDuplicated.iterator ();
        i.hasNext ();) {
            EObject original = (EObject) i.next ();
            EObject duplicate = (EObject) copier.get (original);
            EReference reference = original.eContainmentFeature ();
            if (reference != null && reference.isMany () && ClipboardSupportUtil.isOkToAppendEObjectAt (original.eContainer (), reference, duplicate)) {
                ClipboardSupportUtil.appendEObjectAt (original.eContainer (), reference, duplicate);
            }
        }
        return CommandResult.newOKCommandResult (getAllDuplicatedObjectsMap ());
    }

}

