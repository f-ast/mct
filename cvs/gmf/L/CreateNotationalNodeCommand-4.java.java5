package org.eclipse.gmf.runtime.lite.commands;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.emf.common.command.Command;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.runtime.lite.services.IViewDecorator;

import org.eclipse.gmf.runtime.notation.Bounds;

import org.eclipse.gmf.runtime.notation.DrawerStyle;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.NotationFactory;

import org.eclipse.gmf.runtime.notation.View;

public class CreateNotationalNodeCommand extends CreateNotationalElementCommand {
    public final Command myExposeCommand;

    public CreateNotationalNodeCommand (View parent, EObject domainElement, Rectangle constraint, IViewDecorator decorator) {
        this (parent, domainElement, constraint, decorator, true);
    }

    public CreateNotationalNodeCommand (View parent, EObject domainElement, Rectangle constraint, IViewDecorator decorator, boolean expose) {
        super (parent);
        Node createdNode = NotationFactory.eINSTANCE.createNode ();
        setCreatedView (createdNode);
        createdNode.setElement (domainElement);
        decorator.decorateView (createdNode);
        if (constraint != null) {
            Bounds bounds = NotationFactory.eINSTANCE.createBounds ();
            createdNode.setLayoutConstraint (bounds);
            bounds.setX (constraint.x);
            bounds.setY (constraint.y);
            bounds.setWidth (constraint.width);
            bounds.setHeight (constraint.height);
        }
        if (expose) {
            myExposeCommand = new ExpandDrawerCommand (parent);
        } else {
            myExposeCommand = null;
        }
    }

    public boolean canExecute () {
        if (getCreatedView () instanceof Node == false) {
            return false;
        }
        if (myExposeCommand != null && ! myExposeCommand.canExecute ()) {
            return false;
        }
        return true;
    }

    public boolean canUndo () {
        if (myExposeCommand != null && ! myExposeCommand.canUndo ()) {
            return false;
        }
        return true;
    }

    public void execute () {
        if (myExposeCommand != null) {
            myExposeCommand.execute ();
        }
        getParent ().insertChild (getCreatedView ());
    }

    public void undo () {
        getParent ().removeChild (getCreatedView ());
        if (myExposeCommand != null) {
            myExposeCommand.undo ();
        }
    }

    public void redo () {
        execute ();
    }

}

