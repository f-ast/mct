package org.eclipse.gmf.runtime.diagram.ui.internal.editparts;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.transaction.RunnableWithResult;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.requests.GroupRequest;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.services.icon.IconOptions;

import org.eclipse.gmf.runtime.common.ui.services.icon.IconService;

import org.eclipse.gmf.runtime.diagram.core.internal.commands.CreateDiagramLinkCommand;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ComponentEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.label.ILabelDelegate;

import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.swt.graphics.Image;

public class DiagramNameCompartmentEditPart extends TextCompartmentEditPart {
    private IconOptions iconOptions;
    protected static final int ICON_INDEX = 0;
    protected static final int NUM_ICONS = 1;

    public DiagramNameCompartmentEditPart (View view) {
        super (view);
        iconOptions = new IconOptions ();
        iconOptions.set (IconOptions.GET_STEREOTYPE_IMAGE_FOR_ELEMENT);
        iconOptions.set (IconOptions.NO_DEFAULT_STEREOTYPE_IMAGE);
        setNumIcons (NUM_ICONS);
    }

    protected ILabelDelegate createLabelDelegate () {
        ILabelDelegate labelDelegate = super.createLabelDelegate ();
        labelDelegate.setIconAlignment (PositionConstants.TOP);
        labelDelegate.setTextAlignment (PositionConstants.TOP);
        labelDelegate.setAlignment (PositionConstants.TOP);
        labelDelegate.setTextWrapOn (true);
        labelDelegate.setTextJustification (PositionConstants.CENTER);
        return labelDelegate;
    }

    public EObject resolveSemanticElement () {
        try {
            return (EObject) getEditingDomain ().runExclusive (new RunnableWithResult.Impl () {

                public void run () {
                    View primary = getPrimaryView ();
                    if (primary != null) setResult (ViewUtil.resolveSemanticElement (primary));

                }

            }

            );
        } catch (InterruptedException e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "resolveSemanticElement", e);
            Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "resolveSemanticElement", e);
            return null;
        }
    }

    private EObject getElement () {
        View primary = getPrimaryView ();
        if (primary != null) {
            return primary.getElement ();
        }
        return null;
    }

    protected Image getLabelIcon (int i) {
        EObject element = getElement ();
        if (element != null) return IconService.getInstance ().getIcon (new EObjectAdapter (element));

        return null;
    }

    protected boolean isEditable () {
        return false;
    }

    public boolean isSelectable () {
        return false;
    }

    public void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicy.COMPONENT_ROLE, new DiagramLinkComponentEditPolicy ());
    }

    protected void setVisibility (boolean vis) {
        super.setVisibility (vis && getElement () != null);
    }

    private class DiagramLinkComponentEditPolicy extends ComponentEditPolicy {

        public Command createDeleteViewCommand (GroupRequest request) {
            TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost ()).getEditingDomain ();
            CreateDiagramLinkCommand com = new CreateDiagramLinkCommand (editingDomain, DiagramUIMessages.Command_CreateDiagramLink, (View) getHost ().getParent ().getModel (), null);
            return new ICommandProxy (com);
        }

    }

    protected String getLabelText () {
        String label = super.getLabelText ();
        if (label == null) {
            EObject element = getElement ();
            if (element != null) {
                return EMFCoreUtil.getName (element);
            }
        }
        return label;
    }

}

