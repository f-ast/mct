package org.eclipse.gmf.codegen.gmfgen.provider;

import java.util.ArrayList;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.Adapter;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;

import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.ComposedAdapterFactory;

import org.eclipse.emf.edit.provider.IChangeNotifier;

import org.eclipse.emf.edit.provider.IChildCreationExtender;

import org.eclipse.emf.edit.provider.IDisposable;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.INotifyChangedListener;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.presentation.EditorPlugin;

import org.eclipse.gmf.codegen.gmfgen.util.GMFGenAdapterFactory;

public class GMFGenItemProviderAdapterFactory extends GMFGenAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
    protected ComposedAdapterFactory parentAdapterFactory;
    protected IChangeNotifier changeNotifier = new ChangeNotifier ();
    protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager (EditorPlugin.INSTANCE, GMFGenPackage.eNS_URI);
    protected Collection < Object > supportedTypes = new ArrayList < Object > ();

    public GMFGenItemProviderAdapterFactory () {
        supportedTypes.add (IEditingDomainItemProvider.class);
        supportedTypes.add (IStructuredItemContentProvider.class);
        supportedTypes.add (ITreeItemContentProvider.class);
        supportedTypes.add (IItemLabelProvider.class);
        supportedTypes.add (IItemPropertySource.class);
    }

    protected GenEditorGeneratorItemProvider genEditorGeneratorItemProvider;

    @Override
    public Adapter createGenEditorGeneratorAdapter () {
        if (genEditorGeneratorItemProvider == null) {
            genEditorGeneratorItemProvider = new GenEditorGeneratorItemProvider (this);
        }
        return genEditorGeneratorItemProvider;
    }

    protected GenDiagramItemProvider genDiagramItemProvider;

    @Override
    public Adapter createGenDiagramAdapter () {
        if (genDiagramItemProvider == null) {
            genDiagramItemProvider = new GenDiagramItemProvider (this);
        }
        return genDiagramItemProvider;
    }

    protected GenEditorViewItemProvider genEditorViewItemProvider;

    @Override
    public Adapter createGenEditorViewAdapter () {
        if (genEditorViewItemProvider == null) {
            genEditorViewItemProvider = new GenEditorViewItemProvider (this);
        }
        return genEditorViewItemProvider;
    }

    protected GenCustomPreferencePageItemProvider genCustomPreferencePageItemProvider;

    @Override
    public Adapter createGenCustomPreferencePageAdapter () {
        if (genCustomPreferencePageItemProvider == null) {
            genCustomPreferencePageItemProvider = new GenCustomPreferencePageItemProvider (this);
        }
        return genCustomPreferencePageItemProvider;
    }

    protected GenStandardPreferencePageItemProvider genStandardPreferencePageItemProvider;

    @Override
    public Adapter createGenStandardPreferencePageAdapter () {
        if (genStandardPreferencePageItemProvider == null) {
            genStandardPreferencePageItemProvider = new GenStandardPreferencePageItemProvider (this);
        }
        return genStandardPreferencePageItemProvider;
    }

    protected GenDiagramPreferencesItemProvider genDiagramPreferencesItemProvider;

    @Override
    public Adapter createGenDiagramPreferencesAdapter () {
        if (genDiagramPreferencesItemProvider == null) {
            genDiagramPreferencesItemProvider = new GenDiagramPreferencesItemProvider (this);
        }
        return genDiagramPreferencesItemProvider;
    }

    protected GenStandardFontItemProvider genStandardFontItemProvider;

    @Override
    public Adapter createGenStandardFontAdapter () {
        if (genStandardFontItemProvider == null) {
            genStandardFontItemProvider = new GenStandardFontItemProvider (this);
        }
        return genStandardFontItemProvider;
    }

    protected GenCustomFontItemProvider genCustomFontItemProvider;

    @Override
    public Adapter createGenCustomFontAdapter () {
        if (genCustomFontItemProvider == null) {
            genCustomFontItemProvider = new GenCustomFontItemProvider (this);
        }
        return genCustomFontItemProvider;
    }

    protected GenRGBColorItemProvider genRGBColorItemProvider;

    @Override
    public Adapter createGenRGBColorAdapter () {
        if (genRGBColorItemProvider == null) {
            genRGBColorItemProvider = new GenRGBColorItemProvider (this);
        }
        return genRGBColorItemProvider;
    }

    protected GenConstantColorItemProvider genConstantColorItemProvider;

    @Override
    public Adapter createGenConstantColorAdapter () {
        if (genConstantColorItemProvider == null) {
            genConstantColorItemProvider = new GenConstantColorItemProvider (this);
        }
        return genConstantColorItemProvider;
    }

    protected GenDiagramUpdaterItemProvider genDiagramUpdaterItemProvider;

    @Override
    public Adapter createGenDiagramUpdaterAdapter () {
        if (genDiagramUpdaterItemProvider == null) {
            genDiagramUpdaterItemProvider = new GenDiagramUpdaterItemProvider (this);
        }
        return genDiagramUpdaterItemProvider;
    }

    protected GenPluginItemProvider genPluginItemProvider;

    @Override
    public Adapter createGenPluginAdapter () {
        if (genPluginItemProvider == null) {
            genPluginItemProvider = new GenPluginItemProvider (this);
        }
        return genPluginItemProvider;
    }

    protected DynamicModelAccessItemProvider dynamicModelAccessItemProvider;

    @Override
    public Adapter createDynamicModelAccessAdapter () {
        if (dynamicModelAccessItemProvider == null) {
            dynamicModelAccessItemProvider = new DynamicModelAccessItemProvider (this);
        }
        return dynamicModelAccessItemProvider;
    }

    protected CustomBehaviourItemProvider customBehaviourItemProvider;

    @Override
    public Adapter createCustomBehaviourAdapter () {
        if (customBehaviourItemProvider == null) {
            customBehaviourItemProvider = new CustomBehaviourItemProvider (this);
        }
        return customBehaviourItemProvider;
    }

    protected SharedBehaviourItemProvider sharedBehaviourItemProvider;

    @Override
    public Adapter createSharedBehaviourAdapter () {
        if (sharedBehaviourItemProvider == null) {
            sharedBehaviourItemProvider = new SharedBehaviourItemProvider (this);
        }
        return sharedBehaviourItemProvider;
    }

    protected OpenDiagramBehaviourItemProvider openDiagramBehaviourItemProvider;

    @Override
    public Adapter createOpenDiagramBehaviourAdapter () {
        if (openDiagramBehaviourItemProvider == null) {
            openDiagramBehaviourItemProvider = new OpenDiagramBehaviourItemProvider (this);
        }
        return openDiagramBehaviourItemProvider;
    }

    protected GenTopLevelNodeItemProvider genTopLevelNodeItemProvider;

    @Override
    public Adapter createGenTopLevelNodeAdapter () {
        if (genTopLevelNodeItemProvider == null) {
            genTopLevelNodeItemProvider = new GenTopLevelNodeItemProvider (this);
        }
        return genTopLevelNodeItemProvider;
    }

    protected GenChildNodeItemProvider genChildNodeItemProvider;

    @Override
    public Adapter createGenChildNodeAdapter () {
        if (genChildNodeItemProvider == null) {
            genChildNodeItemProvider = new GenChildNodeItemProvider (this);
        }
        return genChildNodeItemProvider;
    }

    protected GenChildSideAffixedNodeItemProvider genChildSideAffixedNodeItemProvider;

    @Override
    public Adapter createGenChildSideAffixedNodeAdapter () {
        if (genChildSideAffixedNodeItemProvider == null) {
            genChildSideAffixedNodeItemProvider = new GenChildSideAffixedNodeItemProvider (this);
        }
        return genChildSideAffixedNodeItemProvider;
    }

    protected GenChildLabelNodeItemProvider genChildLabelNodeItemProvider;

    @Override
    public Adapter createGenChildLabelNodeAdapter () {
        if (genChildLabelNodeItemProvider == null) {
            genChildLabelNodeItemProvider = new GenChildLabelNodeItemProvider (this);
        }
        return genChildLabelNodeItemProvider;
    }

    protected GenCompartmentItemProvider genCompartmentItemProvider;

    @Override
    public Adapter createGenCompartmentAdapter () {
        if (genCompartmentItemProvider == null) {
            genCompartmentItemProvider = new GenCompartmentItemProvider (this);
        }
        return genCompartmentItemProvider;
    }

    protected GenLinkItemProvider genLinkItemProvider;

    @Override
    public Adapter createGenLinkAdapter () {
        if (genLinkItemProvider == null) {
            genLinkItemProvider = new GenLinkItemProvider (this);
        }
        return genLinkItemProvider;
    }

    protected GenNodeLabelItemProvider genNodeLabelItemProvider;

    @Override
    public Adapter createGenNodeLabelAdapter () {
        if (genNodeLabelItemProvider == null) {
            genNodeLabelItemProvider = new GenNodeLabelItemProvider (this);
        }
        return genNodeLabelItemProvider;
    }

    protected GenExternalNodeLabelItemProvider genExternalNodeLabelItemProvider;

    @Override
    public Adapter createGenExternalNodeLabelAdapter () {
        if (genExternalNodeLabelItemProvider == null) {
            genExternalNodeLabelItemProvider = new GenExternalNodeLabelItemProvider (this);
        }
        return genExternalNodeLabelItemProvider;
    }

    protected GenLinkLabelItemProvider genLinkLabelItemProvider;

    @Override
    public Adapter createGenLinkLabelAdapter () {
        if (genLinkLabelItemProvider == null) {
            genLinkLabelItemProvider = new GenLinkLabelItemProvider (this);
        }
        return genLinkLabelItemProvider;
    }

    protected MetamodelTypeItemProvider metamodelTypeItemProvider;

    @Override
    public Adapter createMetamodelTypeAdapter () {
        if (metamodelTypeItemProvider == null) {
            metamodelTypeItemProvider = new MetamodelTypeItemProvider (this);
        }
        return metamodelTypeItemProvider;
    }

    protected SpecializationTypeItemProvider specializationTypeItemProvider;

    @Override
    public Adapter createSpecializationTypeAdapter () {
        if (specializationTypeItemProvider == null) {
            specializationTypeItemProvider = new SpecializationTypeItemProvider (this);
        }
        return specializationTypeItemProvider;
    }

    protected NotationTypeItemProvider notationTypeItemProvider;

    @Override
    public Adapter createNotationTypeAdapter () {
        if (notationTypeItemProvider == null) {
            notationTypeItemProvider = new NotationTypeItemProvider (this);
        }
        return notationTypeItemProvider;
    }

    protected LabelModelFacetItemProvider labelModelFacetItemProvider;

    @Override
    public Adapter createLabelModelFacetAdapter () {
        if (labelModelFacetItemProvider == null) {
            labelModelFacetItemProvider = new LabelModelFacetItemProvider (this);
        }
        return labelModelFacetItemProvider;
    }

    protected TypeModelFacetItemProvider typeModelFacetItemProvider;

    @Override
    public Adapter createTypeModelFacetAdapter () {
        if (typeModelFacetItemProvider == null) {
            typeModelFacetItemProvider = new TypeModelFacetItemProvider (this);
        }
        return typeModelFacetItemProvider;
    }

    protected TypeLinkModelFacetItemProvider typeLinkModelFacetItemProvider;

    @Override
    public Adapter createTypeLinkModelFacetAdapter () {
        if (typeLinkModelFacetItemProvider == null) {
            typeLinkModelFacetItemProvider = new TypeLinkModelFacetItemProvider (this);
        }
        return typeLinkModelFacetItemProvider;
    }

    protected FeatureLinkModelFacetItemProvider featureLinkModelFacetItemProvider;

    @Override
    public Adapter createFeatureLinkModelFacetAdapter () {
        if (featureLinkModelFacetItemProvider == null) {
            featureLinkModelFacetItemProvider = new FeatureLinkModelFacetItemProvider (this);
        }
        return featureLinkModelFacetItemProvider;
    }

    protected FeatureLabelModelFacetItemProvider featureLabelModelFacetItemProvider;

    @Override
    public Adapter createFeatureLabelModelFacetAdapter () {
        if (featureLabelModelFacetItemProvider == null) {
            featureLabelModelFacetItemProvider = new FeatureLabelModelFacetItemProvider (this);
        }
        return featureLabelModelFacetItemProvider;
    }

    protected DesignLabelModelFacetItemProvider designLabelModelFacetItemProvider;

    @Override
    public Adapter createDesignLabelModelFacetAdapter () {
        if (designLabelModelFacetItemProvider == null) {
            designLabelModelFacetItemProvider = new DesignLabelModelFacetItemProvider (this);
        }
        return designLabelModelFacetItemProvider;
    }

    protected ColorAttributesItemProvider colorAttributesItemProvider;

    @Override
    public Adapter createColorAttributesAdapter () {
        if (colorAttributesItemProvider == null) {
            colorAttributesItemProvider = new ColorAttributesItemProvider (this);
        }
        return colorAttributesItemProvider;
    }

    protected StyleAttributesItemProvider styleAttributesItemProvider;

    @Override
    public Adapter createStyleAttributesAdapter () {
        if (styleAttributesItemProvider == null) {
            styleAttributesItemProvider = new StyleAttributesItemProvider (this);
        }
        return styleAttributesItemProvider;
    }

    protected ResizeConstraintsItemProvider resizeConstraintsItemProvider;

    @Override
    public Adapter createResizeConstraintsAdapter () {
        if (resizeConstraintsItemProvider == null) {
            resizeConstraintsItemProvider = new ResizeConstraintsItemProvider (this);
        }
        return resizeConstraintsItemProvider;
    }

    protected DefaultSizeAttributesItemProvider defaultSizeAttributesItemProvider;

    @Override
    public Adapter createDefaultSizeAttributesAdapter () {
        if (defaultSizeAttributesItemProvider == null) {
            defaultSizeAttributesItemProvider = new DefaultSizeAttributesItemProvider (this);
        }
        return defaultSizeAttributesItemProvider;
    }

    protected LabelOffsetAttributesItemProvider labelOffsetAttributesItemProvider;

    @Override
    public Adapter createLabelOffsetAttributesAdapter () {
        if (labelOffsetAttributesItemProvider == null) {
            labelOffsetAttributesItemProvider = new LabelOffsetAttributesItemProvider (this);
        }
        return labelOffsetAttributesItemProvider;
    }

    protected FigureViewmapItemProvider figureViewmapItemProvider;

    @Override
    public Adapter createFigureViewmapAdapter () {
        if (figureViewmapItemProvider == null) {
            figureViewmapItemProvider = new FigureViewmapItemProvider (this);
        }
        return figureViewmapItemProvider;
    }

    protected SnippetViewmapItemProvider snippetViewmapItemProvider;

    @Override
    public Adapter createSnippetViewmapAdapter () {
        if (snippetViewmapItemProvider == null) {
            snippetViewmapItemProvider = new SnippetViewmapItemProvider (this);
        }
        return snippetViewmapItemProvider;
    }

    protected InnerClassViewmapItemProvider innerClassViewmapItemProvider;

    @Override
    public Adapter createInnerClassViewmapAdapter () {
        if (innerClassViewmapItemProvider == null) {
            innerClassViewmapItemProvider = new InnerClassViewmapItemProvider (this);
        }
        return innerClassViewmapItemProvider;
    }

    protected ParentAssignedViewmapItemProvider parentAssignedViewmapItemProvider;

    @Override
    public Adapter createParentAssignedViewmapAdapter () {
        if (parentAssignedViewmapItemProvider == null) {
            parentAssignedViewmapItemProvider = new ParentAssignedViewmapItemProvider (this);
        }
        return parentAssignedViewmapItemProvider;
    }

    protected PaletteItemProvider paletteItemProvider;

    @Override
    public Adapter createPaletteAdapter () {
        if (paletteItemProvider == null) {
            paletteItemProvider = new PaletteItemProvider (this);
        }
        return paletteItemProvider;
    }

    protected ToolEntryItemProvider toolEntryItemProvider;

    @Override
    public Adapter createToolEntryAdapter () {
        if (toolEntryItemProvider == null) {
            toolEntryItemProvider = new ToolEntryItemProvider (this);
        }
        return toolEntryItemProvider;
    }

    protected StandardEntryItemProvider standardEntryItemProvider;

    @Override
    public Adapter createStandardEntryAdapter () {
        if (standardEntryItemProvider == null) {
            standardEntryItemProvider = new StandardEntryItemProvider (this);
        }
        return standardEntryItemProvider;
    }

    protected SeparatorItemProvider separatorItemProvider;

    @Override
    public Adapter createSeparatorAdapter () {
        if (separatorItemProvider == null) {
            separatorItemProvider = new SeparatorItemProvider (this);
        }
        return separatorItemProvider;
    }

    protected ToolGroupItemProvider toolGroupItemProvider;

    @Override
    public Adapter createToolGroupAdapter () {
        if (toolGroupItemProvider == null) {
            toolGroupItemProvider = new ToolGroupItemProvider (this);
        }
        return toolGroupItemProvider;
    }

    protected GenFeatureSeqInitializerItemProvider genFeatureSeqInitializerItemProvider;

    @Override
    public Adapter createGenFeatureSeqInitializerAdapter () {
        if (genFeatureSeqInitializerItemProvider == null) {
            genFeatureSeqInitializerItemProvider = new GenFeatureSeqInitializerItemProvider (this);
        }
        return genFeatureSeqInitializerItemProvider;
    }

    protected GenFeatureValueSpecItemProvider genFeatureValueSpecItemProvider;

    @Override
    public Adapter createGenFeatureValueSpecAdapter () {
        if (genFeatureValueSpecItemProvider == null) {
            genFeatureValueSpecItemProvider = new GenFeatureValueSpecItemProvider (this);
        }
        return genFeatureValueSpecItemProvider;
    }

    protected GenReferenceNewElementSpecItemProvider genReferenceNewElementSpecItemProvider;

    @Override
    public Adapter createGenReferenceNewElementSpecAdapter () {
        if (genReferenceNewElementSpecItemProvider == null) {
            genReferenceNewElementSpecItemProvider = new GenReferenceNewElementSpecItemProvider (this);
        }
        return genReferenceNewElementSpecItemProvider;
    }

    protected GenLinkConstraintsItemProvider genLinkConstraintsItemProvider;

    @Override
    public Adapter createGenLinkConstraintsAdapter () {
        if (genLinkConstraintsItemProvider == null) {
            genLinkConstraintsItemProvider = new GenLinkConstraintsItemProvider (this);
        }
        return genLinkConstraintsItemProvider;
    }

    protected GenAuditRootItemProvider genAuditRootItemProvider;

    @Override
    public Adapter createGenAuditRootAdapter () {
        if (genAuditRootItemProvider == null) {
            genAuditRootItemProvider = new GenAuditRootItemProvider (this);
        }
        return genAuditRootItemProvider;
    }

    protected GenAuditContainerItemProvider genAuditContainerItemProvider;

    @Override
    public Adapter createGenAuditContainerAdapter () {
        if (genAuditContainerItemProvider == null) {
            genAuditContainerItemProvider = new GenAuditContainerItemProvider (this);
        }
        return genAuditContainerItemProvider;
    }

    protected GenAuditRuleItemProvider genAuditRuleItemProvider;

    @Override
    public Adapter createGenAuditRuleAdapter () {
        if (genAuditRuleItemProvider == null) {
            genAuditRuleItemProvider = new GenAuditRuleItemProvider (this);
        }
        return genAuditRuleItemProvider;
    }

    protected GenDomainElementTargetItemProvider genDomainElementTargetItemProvider;

    @Override
    public Adapter createGenDomainElementTargetAdapter () {
        if (genDomainElementTargetItemProvider == null) {
            genDomainElementTargetItemProvider = new GenDomainElementTargetItemProvider (this);
        }
        return genDomainElementTargetItemProvider;
    }

    protected GenDiagramElementTargetItemProvider genDiagramElementTargetItemProvider;

    @Override
    public Adapter createGenDiagramElementTargetAdapter () {
        if (genDiagramElementTargetItemProvider == null) {
            genDiagramElementTargetItemProvider = new GenDiagramElementTargetItemProvider (this);
        }
        return genDiagramElementTargetItemProvider;
    }

    protected GenDomainAttributeTargetItemProvider genDomainAttributeTargetItemProvider;

    @Override
    public Adapter createGenDomainAttributeTargetAdapter () {
        if (genDomainAttributeTargetItemProvider == null) {
            genDomainAttributeTargetItemProvider = new GenDomainAttributeTargetItemProvider (this);
        }
        return genDomainAttributeTargetItemProvider;
    }

    protected GenNotationElementTargetItemProvider genNotationElementTargetItemProvider;

    @Override
    public Adapter createGenNotationElementTargetAdapter () {
        if (genNotationElementTargetItemProvider == null) {
            genNotationElementTargetItemProvider = new GenNotationElementTargetItemProvider (this);
        }
        return genNotationElementTargetItemProvider;
    }

    protected GenMetricContainerItemProvider genMetricContainerItemProvider;

    @Override
    public Adapter createGenMetricContainerAdapter () {
        if (genMetricContainerItemProvider == null) {
            genMetricContainerItemProvider = new GenMetricContainerItemProvider (this);
        }
        return genMetricContainerItemProvider;
    }

    protected GenMetricRuleItemProvider genMetricRuleItemProvider;

    @Override
    public Adapter createGenMetricRuleAdapter () {
        if (genMetricRuleItemProvider == null) {
            genMetricRuleItemProvider = new GenMetricRuleItemProvider (this);
        }
        return genMetricRuleItemProvider;
    }

    protected GenAuditedMetricTargetItemProvider genAuditedMetricTargetItemProvider;

    @Override
    public Adapter createGenAuditedMetricTargetAdapter () {
        if (genAuditedMetricTargetItemProvider == null) {
            genAuditedMetricTargetItemProvider = new GenAuditedMetricTargetItemProvider (this);
        }
        return genAuditedMetricTargetItemProvider;
    }

    protected GenAuditContextItemProvider genAuditContextItemProvider;

    @Override
    public Adapter createGenAuditContextAdapter () {
        if (genAuditContextItemProvider == null) {
            genAuditContextItemProvider = new GenAuditContextItemProvider (this);
        }
        return genAuditContextItemProvider;
    }

    protected GenExpressionProviderContainerItemProvider genExpressionProviderContainerItemProvider;

    @Override
    public Adapter createGenExpressionProviderContainerAdapter () {
        if (genExpressionProviderContainerItemProvider == null) {
            genExpressionProviderContainerItemProvider = new GenExpressionProviderContainerItemProvider (this);
        }
        return genExpressionProviderContainerItemProvider;
    }

    protected GenJavaExpressionProviderItemProvider genJavaExpressionProviderItemProvider;

    @Override
    public Adapter createGenJavaExpressionProviderAdapter () {
        if (genJavaExpressionProviderItemProvider == null) {
            genJavaExpressionProviderItemProvider = new GenJavaExpressionProviderItemProvider (this);
        }
        return genJavaExpressionProviderItemProvider;
    }

    protected GenExpressionInterpreterItemProvider genExpressionInterpreterItemProvider;

    @Override
    public Adapter createGenExpressionInterpreterAdapter () {
        if (genExpressionInterpreterItemProvider == null) {
            genExpressionInterpreterItemProvider = new GenExpressionInterpreterItemProvider (this);
        }
        return genExpressionInterpreterItemProvider;
    }

    protected GenLiteralExpressionProviderItemProvider genLiteralExpressionProviderItemProvider;

    @Override
    public Adapter createGenLiteralExpressionProviderAdapter () {
        if (genLiteralExpressionProviderItemProvider == null) {
            genLiteralExpressionProviderItemProvider = new GenLiteralExpressionProviderItemProvider (this);
        }
        return genLiteralExpressionProviderItemProvider;
    }

    protected GenNavigatorItemProvider genNavigatorItemProvider;

    @Override
    public Adapter createGenNavigatorAdapter () {
        if (genNavigatorItemProvider == null) {
            genNavigatorItemProvider = new GenNavigatorItemProvider (this);
        }
        return genNavigatorItemProvider;
    }

    protected GenNavigatorChildReferenceItemProvider genNavigatorChildReferenceItemProvider;

    @Override
    public Adapter createGenNavigatorChildReferenceAdapter () {
        if (genNavigatorChildReferenceItemProvider == null) {
            genNavigatorChildReferenceItemProvider = new GenNavigatorChildReferenceItemProvider (this);
        }
        return genNavigatorChildReferenceItemProvider;
    }

    protected GenNavigatorPathItemProvider genNavigatorPathItemProvider;

    @Override
    public Adapter createGenNavigatorPathAdapter () {
        if (genNavigatorPathItemProvider == null) {
            genNavigatorPathItemProvider = new GenNavigatorPathItemProvider (this);
        }
        return genNavigatorPathItemProvider;
    }

    protected GenNavigatorPathSegmentItemProvider genNavigatorPathSegmentItemProvider;

    @Override
    public Adapter createGenNavigatorPathSegmentAdapter () {
        if (genNavigatorPathSegmentItemProvider == null) {
            genNavigatorPathSegmentItemProvider = new GenNavigatorPathSegmentItemProvider (this);
        }
        return genNavigatorPathSegmentItemProvider;
    }

    protected GenPropertySheetItemProvider genPropertySheetItemProvider;

    @Override
    public Adapter createGenPropertySheetAdapter () {
        if (genPropertySheetItemProvider == null) {
            genPropertySheetItemProvider = new GenPropertySheetItemProvider (this);
        }
        return genPropertySheetItemProvider;
    }

    protected GenStandardPropertyTabItemProvider genStandardPropertyTabItemProvider;

    @Override
    public Adapter createGenStandardPropertyTabAdapter () {
        if (genStandardPropertyTabItemProvider == null) {
            genStandardPropertyTabItemProvider = new GenStandardPropertyTabItemProvider (this);
        }
        return genStandardPropertyTabItemProvider;
    }

    protected GenCustomPropertyTabItemProvider genCustomPropertyTabItemProvider;

    @Override
    public Adapter createGenCustomPropertyTabAdapter () {
        if (genCustomPropertyTabItemProvider == null) {
            genCustomPropertyTabItemProvider = new GenCustomPropertyTabItemProvider (this);
        }
        return genCustomPropertyTabItemProvider;
    }

    protected TypeTabFilterItemProvider typeTabFilterItemProvider;

    @Override
    public Adapter createTypeTabFilterAdapter () {
        if (typeTabFilterItemProvider == null) {
            typeTabFilterItemProvider = new TypeTabFilterItemProvider (this);
        }
        return typeTabFilterItemProvider;
    }

    protected CustomTabFilterItemProvider customTabFilterItemProvider;

    @Override
    public Adapter createCustomTabFilterAdapter () {
        if (customTabFilterItemProvider == null) {
            customTabFilterItemProvider = new CustomTabFilterItemProvider (this);
        }
        return customTabFilterItemProvider;
    }

    protected GenSharedContributionItemItemProvider genSharedContributionItemItemProvider;

    @Override
    public Adapter createGenSharedContributionItemAdapter () {
        if (genSharedContributionItemItemProvider == null) {
            genSharedContributionItemItemProvider = new GenSharedContributionItemItemProvider (this);
        }
        return genSharedContributionItemItemProvider;
    }

    protected GenGroupMarkerItemProvider genGroupMarkerItemProvider;

    @Override
    public Adapter createGenGroupMarkerAdapter () {
        if (genGroupMarkerItemProvider == null) {
            genGroupMarkerItemProvider = new GenGroupMarkerItemProvider (this);
        }
        return genGroupMarkerItemProvider;
    }

    protected GenSeparatorItemProvider genSeparatorItemProvider;

    @Override
    public Adapter createGenSeparatorAdapter () {
        if (genSeparatorItemProvider == null) {
            genSeparatorItemProvider = new GenSeparatorItemProvider (this);
        }
        return genSeparatorItemProvider;
    }

    protected GenCustomActionItemProvider genCustomActionItemProvider;

    @Override
    public Adapter createGenCustomActionAdapter () {
        if (genCustomActionItemProvider == null) {
            genCustomActionItemProvider = new GenCustomActionItemProvider (this);
        }
        return genCustomActionItemProvider;
    }

    protected GenCommandActionItemProvider genCommandActionItemProvider;

    @Override
    public Adapter createGenCommandActionAdapter () {
        if (genCommandActionItemProvider == null) {
            genCommandActionItemProvider = new GenCommandActionItemProvider (this);
        }
        return genCommandActionItemProvider;
    }

    protected LoadResourceActionItemProvider loadResourceActionItemProvider;

    @Override
    public Adapter createLoadResourceActionAdapter () {
        if (loadResourceActionItemProvider == null) {
            loadResourceActionItemProvider = new LoadResourceActionItemProvider (this);
        }
        return loadResourceActionItemProvider;
    }

    protected InitDiagramActionItemProvider initDiagramActionItemProvider;

    @Override
    public Adapter createInitDiagramActionAdapter () {
        if (initDiagramActionItemProvider == null) {
            initDiagramActionItemProvider = new InitDiagramActionItemProvider (this);
        }
        return initDiagramActionItemProvider;
    }

    protected CreateShortcutActionItemProvider createShortcutActionItemProvider;

    @Override
    public Adapter createCreateShortcutActionAdapter () {
        if (createShortcutActionItemProvider == null) {
            createShortcutActionItemProvider = new CreateShortcutActionItemProvider (this);
        }
        return createShortcutActionItemProvider;
    }

    protected GenActionFactoryContributionItemItemProvider genActionFactoryContributionItemItemProvider;

    @Override
    public Adapter createGenActionFactoryContributionItemAdapter () {
        if (genActionFactoryContributionItemItemProvider == null) {
            genActionFactoryContributionItemItemProvider = new GenActionFactoryContributionItemItemProvider (this);
        }
        return genActionFactoryContributionItemItemProvider;
    }

    protected GenMenuManagerItemProvider genMenuManagerItemProvider;

    @Override
    public Adapter createGenMenuManagerAdapter () {
        if (genMenuManagerItemProvider == null) {
            genMenuManagerItemProvider = new GenMenuManagerItemProvider (this);
        }
        return genMenuManagerItemProvider;
    }

    protected GenToolBarManagerItemProvider genToolBarManagerItemProvider;

    @Override
    public Adapter createGenToolBarManagerAdapter () {
        if (genToolBarManagerItemProvider == null) {
            genToolBarManagerItemProvider = new GenToolBarManagerItemProvider (this);
        }
        return genToolBarManagerItemProvider;
    }

    protected GenContextMenuItemProvider genContextMenuItemProvider;

    @Override
    public Adapter createGenContextMenuAdapter () {
        if (genContextMenuItemProvider == null) {
            genContextMenuItemProvider = new GenContextMenuItemProvider (this);
        }
        return genContextMenuItemProvider;
    }

    protected GenApplicationItemProvider genApplicationItemProvider;

    @Override
    public Adapter createGenApplicationAdapter () {
        if (genApplicationItemProvider == null) {
            genApplicationItemProvider = new GenApplicationItemProvider (this);
        }
        return genApplicationItemProvider;
    }

    protected GenParsersItemProvider genParsersItemProvider;

    @Override
    public Adapter createGenParsersAdapter () {
        if (genParsersItemProvider == null) {
            genParsersItemProvider = new GenParsersItemProvider (this);
        }
        return genParsersItemProvider;
    }

    protected PredefinedParserItemProvider predefinedParserItemProvider;

    @Override
    public Adapter createPredefinedParserAdapter () {
        if (predefinedParserItemProvider == null) {
            predefinedParserItemProvider = new PredefinedParserItemProvider (this);
        }
        return predefinedParserItemProvider;
    }

    protected CustomParserItemProvider customParserItemProvider;

    @Override
    public Adapter createCustomParserAdapter () {
        if (customParserItemProvider == null) {
            customParserItemProvider = new CustomParserItemProvider (this);
        }
        return customParserItemProvider;
    }

    protected ExternalParserItemProvider externalParserItemProvider;

    @Override
    public Adapter createExternalParserAdapter () {
        if (externalParserItemProvider == null) {
            externalParserItemProvider = new ExternalParserItemProvider (this);
        }
        return externalParserItemProvider;
    }

    protected ValueExpressionItemProvider valueExpressionItemProvider;

    @Override
    public Adapter createValueExpressionAdapter () {
        if (valueExpressionItemProvider == null) {
            valueExpressionItemProvider = new ValueExpressionItemProvider (this);
        }
        return valueExpressionItemProvider;
    }

    protected GenConstraintItemProvider genConstraintItemProvider;

    @Override
    public Adapter createGenConstraintAdapter () {
        if (genConstraintItemProvider == null) {
            genConstraintItemProvider = new GenConstraintItemProvider (this);
        }
        return genConstraintItemProvider;
    }

    public ComposeableAdapterFactory getRootAdapterFactory () {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory ();
    }

    public void setParentAdapterFactory (ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    @Override
    public boolean isFactoryForType (Object type) {
        return supportedTypes.contains (type) || super.isFactoryForType (type);
    }

    @Override
    public Adapter adapt (Notifier notifier, Object type) {
        return super.adapt (notifier, this);
    }

    @Override
    public Object adapt (Object object, Object type) {
        if (isFactoryForType (type)) {
            Object adapter = super.adapt (object, type);
            if (! (type instanceof Class) || (((Class < ? >) type).isInstance (adapter))) {
                return adapter;
            }
        }
        return null;
    }

    public List < IChildCreationExtender > getChildCreationExtenders () {
        return childCreationExtenderManager.getChildCreationExtenders ();
    }

    public Collection < ? > getNewChildDescriptors (Object object, EditingDomain editingDomain) {
        return childCreationExtenderManager.getNewChildDescriptors (object, editingDomain);
    }

    public ResourceLocator getResourceLocator () {
        return childCreationExtenderManager;
    }

    public void addListener (INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener (notifyChangedListener);
    }

    public void removeListener (INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener (notifyChangedListener);
    }

    public void fireNotifyChanged (Notification notification) {
        changeNotifier.fireNotifyChanged (notification);
        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged (notification);
        }
    }

    public void dispose () {
        if (genEditorGeneratorItemProvider != null) genEditorGeneratorItemProvider.dispose ();

        if (genDiagramItemProvider != null) genDiagramItemProvider.dispose ();

        if (genEditorViewItemProvider != null) genEditorViewItemProvider.dispose ();

        if (genCustomPreferencePageItemProvider != null) genCustomPreferencePageItemProvider.dispose ();

        if (genStandardPreferencePageItemProvider != null) genStandardPreferencePageItemProvider.dispose ();

        if (genDiagramPreferencesItemProvider != null) genDiagramPreferencesItemProvider.dispose ();

        if (genStandardFontItemProvider != null) genStandardFontItemProvider.dispose ();

        if (genCustomFontItemProvider != null) genCustomFontItemProvider.dispose ();

        if (genRGBColorItemProvider != null) genRGBColorItemProvider.dispose ();

        if (genConstantColorItemProvider != null) genConstantColorItemProvider.dispose ();

        if (genDiagramUpdaterItemProvider != null) genDiagramUpdaterItemProvider.dispose ();

        if (genPluginItemProvider != null) genPluginItemProvider.dispose ();

        if (dynamicModelAccessItemProvider != null) dynamicModelAccessItemProvider.dispose ();

        if (customBehaviourItemProvider != null) customBehaviourItemProvider.dispose ();

        if (sharedBehaviourItemProvider != null) sharedBehaviourItemProvider.dispose ();

        if (openDiagramBehaviourItemProvider != null) openDiagramBehaviourItemProvider.dispose ();

        if (genTopLevelNodeItemProvider != null) genTopLevelNodeItemProvider.dispose ();

        if (genChildNodeItemProvider != null) genChildNodeItemProvider.dispose ();

        if (genChildSideAffixedNodeItemProvider != null) genChildSideAffixedNodeItemProvider.dispose ();

        if (genChildLabelNodeItemProvider != null) genChildLabelNodeItemProvider.dispose ();

        if (genCompartmentItemProvider != null) genCompartmentItemProvider.dispose ();

        if (genLinkItemProvider != null) genLinkItemProvider.dispose ();

        if (genNodeLabelItemProvider != null) genNodeLabelItemProvider.dispose ();

        if (genExternalNodeLabelItemProvider != null) genExternalNodeLabelItemProvider.dispose ();

        if (genLinkLabelItemProvider != null) genLinkLabelItemProvider.dispose ();

        if (metamodelTypeItemProvider != null) metamodelTypeItemProvider.dispose ();

        if (specializationTypeItemProvider != null) specializationTypeItemProvider.dispose ();

        if (notationTypeItemProvider != null) notationTypeItemProvider.dispose ();

        if (labelModelFacetItemProvider != null) labelModelFacetItemProvider.dispose ();

        if (typeModelFacetItemProvider != null) typeModelFacetItemProvider.dispose ();

        if (typeLinkModelFacetItemProvider != null) typeLinkModelFacetItemProvider.dispose ();

        if (featureLinkModelFacetItemProvider != null) featureLinkModelFacetItemProvider.dispose ();

        if (featureLabelModelFacetItemProvider != null) featureLabelModelFacetItemProvider.dispose ();

        if (designLabelModelFacetItemProvider != null) designLabelModelFacetItemProvider.dispose ();

        if (colorAttributesItemProvider != null) colorAttributesItemProvider.dispose ();

        if (styleAttributesItemProvider != null) styleAttributesItemProvider.dispose ();

        if (resizeConstraintsItemProvider != null) resizeConstraintsItemProvider.dispose ();

        if (defaultSizeAttributesItemProvider != null) defaultSizeAttributesItemProvider.dispose ();

        if (labelOffsetAttributesItemProvider != null) labelOffsetAttributesItemProvider.dispose ();

        if (figureViewmapItemProvider != null) figureViewmapItemProvider.dispose ();

        if (snippetViewmapItemProvider != null) snippetViewmapItemProvider.dispose ();

        if (innerClassViewmapItemProvider != null) innerClassViewmapItemProvider.dispose ();

        if (parentAssignedViewmapItemProvider != null) parentAssignedViewmapItemProvider.dispose ();

        if (valueExpressionItemProvider != null) valueExpressionItemProvider.dispose ();

        if (genConstraintItemProvider != null) genConstraintItemProvider.dispose ();

        if (paletteItemProvider != null) paletteItemProvider.dispose ();

        if (toolEntryItemProvider != null) toolEntryItemProvider.dispose ();

        if (standardEntryItemProvider != null) standardEntryItemProvider.dispose ();

        if (separatorItemProvider != null) separatorItemProvider.dispose ();

        if (toolGroupItemProvider != null) toolGroupItemProvider.dispose ();

        if (genFeatureSeqInitializerItemProvider != null) genFeatureSeqInitializerItemProvider.dispose ();

        if (genFeatureValueSpecItemProvider != null) genFeatureValueSpecItemProvider.dispose ();

        if (genReferenceNewElementSpecItemProvider != null) genReferenceNewElementSpecItemProvider.dispose ();

        if (genLinkConstraintsItemProvider != null) genLinkConstraintsItemProvider.dispose ();

        if (genAuditRootItemProvider != null) genAuditRootItemProvider.dispose ();

        if (genAuditContainerItemProvider != null) genAuditContainerItemProvider.dispose ();

        if (genAuditRuleItemProvider != null) genAuditRuleItemProvider.dispose ();

        if (genDomainElementTargetItemProvider != null) genDomainElementTargetItemProvider.dispose ();

        if (genDiagramElementTargetItemProvider != null) genDiagramElementTargetItemProvider.dispose ();

        if (genDomainAttributeTargetItemProvider != null) genDomainAttributeTargetItemProvider.dispose ();

        if (genNotationElementTargetItemProvider != null) genNotationElementTargetItemProvider.dispose ();

        if (genMetricContainerItemProvider != null) genMetricContainerItemProvider.dispose ();

        if (genMetricRuleItemProvider != null) genMetricRuleItemProvider.dispose ();

        if (genAuditedMetricTargetItemProvider != null) genAuditedMetricTargetItemProvider.dispose ();

        if (genAuditContextItemProvider != null) genAuditContextItemProvider.dispose ();

        if (genExpressionProviderContainerItemProvider != null) genExpressionProviderContainerItemProvider.dispose ();

        if (genJavaExpressionProviderItemProvider != null) genJavaExpressionProviderItemProvider.dispose ();

        if (genExpressionInterpreterItemProvider != null) genExpressionInterpreterItemProvider.dispose ();

        if (genLiteralExpressionProviderItemProvider != null) genLiteralExpressionProviderItemProvider.dispose ();

        if (genNavigatorItemProvider != null) genNavigatorItemProvider.dispose ();

        if (genNavigatorChildReferenceItemProvider != null) genNavigatorChildReferenceItemProvider.dispose ();

        if (genNavigatorPathItemProvider != null) genNavigatorPathItemProvider.dispose ();

        if (genNavigatorPathSegmentItemProvider != null) genNavigatorPathSegmentItemProvider.dispose ();

        if (genPropertySheetItemProvider != null) genPropertySheetItemProvider.dispose ();

        if (genStandardPropertyTabItemProvider != null) genStandardPropertyTabItemProvider.dispose ();

        if (genCustomPropertyTabItemProvider != null) genCustomPropertyTabItemProvider.dispose ();

        if (typeTabFilterItemProvider != null) typeTabFilterItemProvider.dispose ();

        if (customTabFilterItemProvider != null) customTabFilterItemProvider.dispose ();

        if (genSharedContributionItemItemProvider != null) genSharedContributionItemItemProvider.dispose ();

        if (genGroupMarkerItemProvider != null) genGroupMarkerItemProvider.dispose ();

        if (genSeparatorItemProvider != null) genSeparatorItemProvider.dispose ();

        if (genCustomActionItemProvider != null) genCustomActionItemProvider.dispose ();

        if (genCommandActionItemProvider != null) genCommandActionItemProvider.dispose ();

        if (loadResourceActionItemProvider != null) loadResourceActionItemProvider.dispose ();

        if (initDiagramActionItemProvider != null) initDiagramActionItemProvider.dispose ();

        if (createShortcutActionItemProvider != null) createShortcutActionItemProvider.dispose ();

        if (genActionFactoryContributionItemItemProvider != null) genActionFactoryContributionItemItemProvider.dispose ();

        if (genMenuManagerItemProvider != null) genMenuManagerItemProvider.dispose ();

        if (genToolBarManagerItemProvider != null) genToolBarManagerItemProvider.dispose ();

        if (genContextMenuItemProvider != null) genContextMenuItemProvider.dispose ();

        if (genApplicationItemProvider != null) genApplicationItemProvider.dispose ();

        if (genParsersItemProvider != null) genParsersItemProvider.dispose ();

        if (predefinedParserItemProvider != null) predefinedParserItemProvider.dispose ();

        if (customParserItemProvider != null) customParserItemProvider.dispose ();

        if (externalParserItemProvider != null) externalParserItemProvider.dispose ();

    }

}

