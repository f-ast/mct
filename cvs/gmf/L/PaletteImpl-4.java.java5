package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.Palette;

import org.eclipse.gmf.codegen.gmfgen.ToolGroup;

public class PaletteImpl extends EObjectImpl implements Palette {
    protected EList groups = null;
    protected static final boolean FLYOUT_EDEFAULT = false;
    protected boolean flyout = FLYOUT_EDEFAULT;
    protected static final boolean NEED_ZOOM_TOOLS_EDEFAULT = false;
    protected boolean needZoomTools = NEED_ZOOM_TOOLS_EDEFAULT;
    protected static final String PACKAGE_NAME_EDEFAULT = null;
    protected String packageName = PACKAGE_NAME_EDEFAULT;
    protected static final String FACTORY_CLASS_NAME_EDEFAULT = null;
    protected String factoryClassName = FACTORY_CLASS_NAME_EDEFAULT;

    protected PaletteImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getPalette ();
    }

    public GenDiagram getDiagram () {
        if (eContainerFeatureID != GMFGenPackage.PALETTE__DIAGRAM) return null;

        return (GenDiagram) eContainer;
    }

    public EList getGroups () {
        if (groups == null) {
            groups = new EObjectContainmentWithInverseEList (ToolGroup.class, this, GMFGenPackage.PALETTE__GROUPS, GMFGenPackage.TOOL_GROUP__PALETTE);
        }
        return groups;
    }

    public boolean isFlyout () {
        return flyout;
    }

    public void setFlyout (boolean newFlyout) {
        boolean oldFlyout = flyout;
        flyout = newFlyout;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.PALETTE__FLYOUT, oldFlyout, flyout));

    }

    public boolean isNeedZoomTools () {
        return needZoomTools;
    }

    public void setNeedZoomTools (boolean newNeedZoomTools) {
        boolean oldNeedZoomTools = needZoomTools;
        needZoomTools = newNeedZoomTools;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.PALETTE__NEED_ZOOM_TOOLS, oldNeedZoomTools, needZoomTools));

    }

    public String getPackageNameGen () {
        return packageName;
    }

    public String getPackageName () {
        String value = getPackageNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getDiagram ().getEditorPackageName ();
        }
        return value;
    }

    public void setPackageName (String newPackageName) {
        String oldPackageName = packageName;
        packageName = newPackageName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.PALETTE__PACKAGE_NAME, oldPackageName, packageName));

    }

    public String getFactoryClassNameGen () {
        return factoryClassName;
    }

    public String getFactoryClassName () {
        String value = getFactoryClassNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = ((GenDiagramImpl) getDiagram ()).getDomainPackageCapName () + "PaletteFactory";
        }
        return value;
    }

    public void setFactoryClassName (String newFactoryClassName) {
        String oldFactoryClassName = factoryClassName;
        factoryClassName = newFactoryClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.PALETTE__FACTORY_CLASS_NAME, oldFactoryClassName, factoryClassName));

    }

    public String getFactoryQualifiedClassName () {
        return getPackageName () + '.' + getFactoryClassName ();
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFGenPackage.PALETTE__DIAGRAM :
                    if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);

                    return eBasicSetContainer (otherEnd, GMFGenPackage.PALETTE__DIAGRAM, msgs);
                case GMFGenPackage.PALETTE__GROUPS :
                    return ((InternalEList) getGroups ()).basicAdd (otherEnd, msgs);
                default :
                    return eDynamicInverseAdd (otherEnd, featureID, baseClass, msgs);
            }
        }
        if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);

        return eBasicSetContainer (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFGenPackage.PALETTE__DIAGRAM :
                    return eBasicSetContainer (null, GMFGenPackage.PALETTE__DIAGRAM, msgs);
                case GMFGenPackage.PALETTE__GROUPS :
                    return ((InternalEList) getGroups ()).basicRemove (otherEnd, msgs);
                default :
                    return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
            }
        }
        return eBasicSetContainer (null, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainer (NotificationChain msgs) {
        if (eContainerFeatureID >= 0) {
            switch (eContainerFeatureID) {
                case GMFGenPackage.PALETTE__DIAGRAM :
                    return eContainer.eInverseRemove (this, GMFGenPackage.GEN_DIAGRAM__PALETTE, GenDiagram.class, msgs);
                default :
                    return eDynamicBasicRemoveFromContainer (msgs);
            }
        }
        return eContainer.eInverseRemove (this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.PALETTE__DIAGRAM :
                return getDiagram ();
            case GMFGenPackage.PALETTE__GROUPS :
                return getGroups ();
            case GMFGenPackage.PALETTE__FLYOUT :
                return isFlyout () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.PALETTE__NEED_ZOOM_TOOLS :
                return isNeedZoomTools () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.PALETTE__PACKAGE_NAME :
                return getPackageName ();
            case GMFGenPackage.PALETTE__FACTORY_CLASS_NAME :
                return getFactoryClassName ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.PALETTE__GROUPS :
                getGroups ().clear ();
                getGroups ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.PALETTE__FLYOUT :
                setFlyout (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.PALETTE__NEED_ZOOM_TOOLS :
                setNeedZoomTools (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.PALETTE__PACKAGE_NAME :
                setPackageName ((String) newValue);
                return;
            case GMFGenPackage.PALETTE__FACTORY_CLASS_NAME :
                setFactoryClassName ((String) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.PALETTE__GROUPS :
                getGroups ().clear ();
                return;
            case GMFGenPackage.PALETTE__FLYOUT :
                setFlyout (FLYOUT_EDEFAULT);
                return;
            case GMFGenPackage.PALETTE__NEED_ZOOM_TOOLS :
                setNeedZoomTools (NEED_ZOOM_TOOLS_EDEFAULT);
                return;
            case GMFGenPackage.PALETTE__PACKAGE_NAME :
                setPackageName (PACKAGE_NAME_EDEFAULT);
                return;
            case GMFGenPackage.PALETTE__FACTORY_CLASS_NAME :
                setFactoryClassName (FACTORY_CLASS_NAME_EDEFAULT);
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.PALETTE__DIAGRAM :
                return getDiagram () != null;
            case GMFGenPackage.PALETTE__GROUPS :
                return groups != null && ! groups.isEmpty ();
            case GMFGenPackage.PALETTE__FLYOUT :
                return flyout != FLYOUT_EDEFAULT;
            case GMFGenPackage.PALETTE__NEED_ZOOM_TOOLS :
                return needZoomTools != NEED_ZOOM_TOOLS_EDEFAULT;
            case GMFGenPackage.PALETTE__PACKAGE_NAME :
                return PACKAGE_NAME_EDEFAULT == null ? packageName != null : ! PACKAGE_NAME_EDEFAULT.equals (packageName);
            case GMFGenPackage.PALETTE__FACTORY_CLASS_NAME :
                return FACTORY_CLASS_NAME_EDEFAULT == null ? factoryClassName != null : ! FACTORY_CLASS_NAME_EDEFAULT.equals (factoryClassName);
        }
        return eDynamicIsSet (eFeature);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (flyout: ");
        result.append (flyout);
        result.append (", needZoomTools: ");
        result.append (needZoomTools);
        result.append (", packageName: ");
        result.append (packageName);
        result.append (", factoryClassName: ");
        result.append (factoryClassName);
        result.append (')');
        return result.toString ();
    }

}

