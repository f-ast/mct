package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.beans.PropertyChangeEvent;

import java.beans.PropertyChangeListener;

import java.text.MessageFormat;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Collections;

import java.util.HashMap;

import java.util.HashSet;

import java.util.Iterator;

import java.util.List;

import java.util.ListIterator;

import java.util.Map;

import java.util.Set;

import java.util.WeakHashMap;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.editpolicies.AbstractEditPolicy;

import org.eclipse.gef.requests.CreateRequest;

import org.eclipse.jface.util.Assert;

import org.eclipse.swt.widgets.Display;

import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;

import org.eclipse.gmf.runtime.diagram.core.listener.PresentationListener;

import org.eclipse.gmf.runtime.diagram.core.listener.PropertyChangeNotifier;

import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.emf.core.edit.MObjectState;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public abstract class CanonicalEditPolicy extends AbstractEditPolicy implements PropertyChangeListener {
    public static class AsyncCommand extends Command {
        private final CompoundCommand _cc;

        public AsyncCommand (String label) {
            super (label);
            _cc = new CompoundCommand (label);
        }

        public AsyncCommand (Command cmd) {
            this (cmd.getLabel ());
            add (cmd);
        }

        public AsyncCommand (ICommand cmd) {
            this (cmd.getLabel ());
            add (cmd);
        }

        public final void execute () {
            Display.getCurrent ().asyncExec (new Runnable () {

                public void run () {
                    AsyncCommand.this.doExecute ();
                }

            }

            );
        }

        protected final CompoundCommand getCommand () {
            return _cc;
        }

        protected void doExecute () {
            getCommand ().execute ();
        }

        public void add (ICommand cmd) {
            _cc.add (new EtoolsProxyCommand (cmd));
        }

        public void add (Command cmd) {
            _cc.add (cmd);
        }

    }

    static Map _registry = new WeakHashMap ();
    private static final String SEMANTIC_FILTER_ID = "SemanticFilterID";
    private boolean _enabled = true;
    private boolean _deferredRefresh = false;
    private Map _listenerFilters;
    public static final class CanonicalElementAdapter extends EObjectAdapter {
        private String _hint;

        public CanonicalElementAdapter (EObject element, String hint) {
            super (element);
            _hint = hint;
        }

        public Object getAdapter (Class adapter) {
            if (adapter.equals (String.class)) {
                return _hint;
            }
            return super.getAdapter (adapter);
        }

    }

    private void RegisterEditPolicy () {
        EObject semanticHost = getSemanticHost ();
        Set set = (Set) _registry.get (semanticHost);
        if (set == null) {
            set = new HashSet ();
            _registry.put (semanticHost, set);
        }
        set.add (this);
    }

    private void UnregisterEditPolicy () {
        EObject semanticHost = null;
        Set set = (Set) _registry.get (null);
        if (set != null) {
            set.remove (this);
            if (set.isEmpty ()) {
                _registry.remove (semanticHost);
            }
        }
        Iterator keys = _registry.keySet ().iterator ();
        while (keys.hasNext ()) {
            EObject key = (EObject) keys.next ();
            if (((Set) _registry.get (key)).contains (this)) {
                semanticHost = key;
                break;
            }
        }
        set = (Set) _registry.get (semanticHost);
        if (set != null) {
            set.remove (this);
            if (set.isEmpty ()) {
                _registry.remove (semanticHost);
            }
        }
    }

    public static List getRegisteredEditPolicies (EObject element) {
        List policies = new ArrayList ();
        Collection policiesWithSemanticElements = (Collection) _registry.get (element);
        if (policiesWithSemanticElements != null) {
            policies.addAll (policiesWithSemanticElements);
        }
        Collection policiesWithNullSemanticElements = (Collection) _registry.get (null);
        if (policiesWithNullSemanticElements != null) {
            policies.addAll (policiesWithNullSemanticElements);
        }
        return Collections.unmodifiableList (policies);
    }

    public static List getRegisteredEditPolicies (EObject element, Class clazz) {
        List registeredPolicies = new ArrayList ();
        Iterator ceps = getRegisteredEditPolicies (element).iterator ();
        while (ceps.hasNext ()) {
            CanonicalEditPolicy cep = (CanonicalEditPolicy) ceps.next ();
            if (cep.isEnabled () && clazz.isInstance (cep)) {
                registeredPolicies.add (cep);
            }
        }
        return Collections.unmodifiableList (registeredPolicies);
    }

    public void setHost (EditPart host) {
        if (! (host instanceof IGraphicalEditPart)) {
            throw new IllegalArgumentException ();
        }
        super.setHost (host);
    }

    protected final IGraphicalEditPart host () {
        return (IGraphicalEditPart) getHost ();
    }

    abstract protected List getSemanticChildrenList ();

    protected String getDefaultFactoryHint () {
        return ((View) host ().getModel ()).getType ();
    }

    protected String getFactoryHint (IAdaptable elementAdapter, final String defaultHint) {
        String fh = getFactoryHint (elementAdapter);
        return fh == null ? defaultHint : fh;
    }

    protected String getFactoryHint (IAdaptable elementAdapter) {
        return null;
    }

    protected final boolean deleteViews (Iterator views) {
        if (! isEnabled ()) {
            return false;
        }
        final CompoundCommand cc = new CompoundCommand (PresentationResourceManager.getI18NString ("DeleteCommand.Label"));
        while (views.hasNext ()) {
            View view = (View) views.next ();
            if (shouldDeleteView (view)) {
                cc.add (getDeleteViewCommand (view));
            }
        }
        boolean doDelete = ! cc.isEmpty () && cc.canExecute ();
        if (doDelete) {
            executeCommand (cc);
        }
        return doDelete;
    }

    protected Command getDeleteViewCommand (View view) {
        return new EtoolsProxyCommand (new DeleteCommand (view));
    }

    protected boolean shouldDeleteView (View view) {
        return true;
    }

    protected List getViewReferers (EObject element) {
        List views = new ArrayList ();
        if (element != null) {
            EReference [] features = {NotationPackage.eINSTANCE.getView_Element ()};
            views.addAll (EObjectUtil.getReferencers (element, features));
        }
        return views;
    }

    protected int getViewIndexFor (EObject semanticChild) {
        return ViewUtil.APPEND;
    }

    protected final List createViews (List eObjects) {
        List descriptors = new ArrayList ();
        Iterator elements = eObjects.iterator ();
        while (elements.hasNext ()) {
            EObject element = (EObject) elements.next ();
            if (element != null) {
                CreateViewRequest.ViewDescriptor descriptor = getViewDescriptor (element);
                descriptors.add (descriptor);
            }
        }
        if (! descriptors.isEmpty ()) {
            CreateViewRequest request = getCreateViewRequest (descriptors);
            Command cmd = getCreateViewCommand (request);
            if (cmd != null && cmd.canExecute ()) {
                SetViewMutabilityCommand.makeMutable (new EObjectAdapter (host ().getNotationView ())).execute ();
                executeCommand (cmd);
                List adapters = (List) request.getNewObject ();
                makeViewsMutable (adapters);
                return adapters;
            }
        }
        return Collections.EMPTY_LIST;
    }

    protected void executeCommand (final Command cmd) {
        MEditingDomainGetter.getMEditingDomain ((View) getHost ().getModel ()).runAsUnchecked (new MRunnable () {

            public Object run () {
                cmd.execute ();
                return null;
            }

        }

        );
    }

    protected Command getCreateViewCommand (CreateRequest request) {
        Assert.isTrue (request instanceof CreateViewRequest);
        CompositeCommand cc = new CompositeCommand (PresentationResourceManager.getI18NString ("AddCommand.Label"));
        Iterator descriptors = ((CreateViewRequest) request).getViewDescriptors ().iterator ();
        while (descriptors.hasNext ()) {
            CreateViewRequest.ViewDescriptor descriptor = (CreateViewRequest.ViewDescriptor) descriptors.next ();
            ICommand createCommand = getCreateViewCommand (descriptor);
            cc.compose (createCommand);
        }
        return new EtoolsProxyCommand (cc.unwrap ());
    }

    protected ICommand getCreateViewCommand (CreateViewRequest.ViewDescriptor descriptor) {
        CreateCommand createCommand = new CreateCommand (descriptor, (View) getHost ().getModel ());
        return createCommand;
    }

    protected CreateViewRequest getCreateViewRequest (List descriptors) {
        return new CreateViewRequest (descriptors);
    }

    protected CreateViewRequest.ViewDescriptor getViewDescriptor (IAdaptable elementAdapter, Class viewKind, String hint, int index) {
        return new CreateViewRequest.ViewDescriptor (elementAdapter, viewKind, hint, index, false, host ().getDiagramPreferencesHint ());
    }

    protected CreateViewRequest.ViewDescriptor getViewDescriptor (EObject element) {
        String factoryHint = getDefaultFactoryHint ();
        IAdaptable elementAdapter = new CanonicalElementAdapter (element, factoryHint);
        int pos = getViewIndexFor (element);
        CreateViewRequest.ViewDescriptor descriptor = getViewDescriptor (elementAdapter, Node.class, getFactoryHint (elementAdapter, factoryHint), pos);
        return descriptor;
    }

    public void activate () {
        EObject semanticHost = getSemanticHost ();
        if (semanticHost != null && ! isActive ()) {
            addListenerFilter (SEMANTIC_FILTER_ID, this, PresentationListener.getNotifier (semanticHost));
            addListenerFilter ("NotationListener_Visibility", this, PresentationListener.getNotifier (((View) getHost ().getModel ()), NotationPackage.eINSTANCE.getView_Visible ()));
            refresh ();
        }
        RegisterEditPolicy ();
    }

    public boolean isEnabled () {
        return _enabled && ((View) host ().getModel ()).isVisible ();
    }

    public void enableRefresh (boolean enable) {
        _enabled = enable;
        if (_enabled && _deferredRefresh) {
            _deferredRefresh = false;
            refresh ();
        }
    }

    public void setEnable (boolean enable) {
        EObject sHost = getSemanticHost ();
        List registeredPolicies = getRegisteredEditPolicies (sHost);
        CanonicalEditPolicy [] policies = new CanonicalEditPolicy [registeredPolicies.size ()];
        registeredPolicies.toArray (policies);
        for (int i = 0;
        i < policies.length; i ++) {
            policies [i].enableRefresh (enable);
        }
    }

    public final boolean isActive () {
        return _listenerFilters == null ? false : _listenerFilters.containsKey (SEMANTIC_FILTER_ID);
    }

    public EObject getSemanticHost () {
        return ViewUtil.resolveSemanticElement ((View) host ().getModel ());
    }

    public void deactivate () {
        if (_listenerFilters != null) {
            Map listeners = new HashMap (_listenerFilters);
            Iterator keys = listeners.keySet ().iterator ();
            while (keys.hasNext ()) {
                String id = (String) keys.next ();
                removeListenerFilter (id);
            }
        }
        removeListenerFilter ("NotationListener_Visibility");
        UnregisterEditPolicy ();
    }

    protected boolean addListenerFilter (String filterId, PropertyChangeListener listener, PropertyChangeNotifier notifier) {
        if (filterId == null || listener == null) {
            throw new NullPointerException ();
        }
        if (notifier != null) {
            if (_listenerFilters == null) _listenerFilters = new HashMap ();

            if (! _listenerFilters.containsKey (filterId)) {
                notifier.addPropertyChangeListener (listener);
                _listenerFilters.put (filterId, new Object [] {notifier, listener});
                return true;
            }
        }
        return false;
    }

    protected void removeListenerFilter (String filterId) {
        if (_listenerFilters == null) return;

        Object [] objects = (Object []) _listenerFilters.remove (filterId);
        if (objects == null) return;

        ((PropertyChangeNotifier) objects [0]).removePropertyChangeListener ((PropertyChangeListener) objects [1]);
    }

    public final void propertyChange (PropertyChangeEvent event) {
        if (isHostStillValid () && event instanceof NotificationEvent) {
            NotificationEvent ne = (NotificationEvent) event;
            EObject element = ne.getElement ();
            if (element == null) {
                return;
            }
            handleNotificationEvent (ne);
        }
    }

    protected final boolean isHostStillValid () {
        return host ().isActive () && ! EObjectUtil.getState ((EObject) host ().getModel ()).equals (MObjectState.DETACHED);
    }

    protected void handleSemanticEvent (NotificationEvent event) {
        if (shouldHandleSemanticEvent (event)) {
            refresh ();
        }
    }

    protected boolean shouldHandleSemanticEvent (NotificationEvent event) {
        return event.isElementAddedToSlot () || event.isElementRemovedFromSlot ();
    }

    protected void handleNotificationEvent (NotificationEvent event) {
        boolean shouldRefresh = false;
        if (shouldHandleNotificationEvent (event)) {
            shouldRefresh = true;
        }
        if (shouldHandleSemanticEvent (event)) {
            handleSemanticEvent (event);
            return;
        }
        if (shouldRefresh) refresh ();

    }

    protected boolean shouldHandleNotificationEvent (NotificationEvent event) {
        if (NotationPackage.eINSTANCE.getView_Visible () == event.getFeature ()) {
            return true;
        }
        EObject element = event.getElement ();
        return (! (element instanceof View) && (event.isElementAddedToSlot () || event.isElementRemovedFromSlot ()));
    }

    protected List getViewChildren () {
        return new ArrayList (((View) host ().getModel ()).getChildren ());
    }

    public final void refresh () {
        try {
            if (isEnabled ()) {
                boolean defRefresh = _deferredRefresh;
                _deferredRefresh = false;
                refreshSemantic ();
                _deferredRefresh = defRefresh;
            } else {
                _deferredRefresh = true;
            }
        } catch (Throwable t) {
            String eMsg = PresentationResourceManager.getI18NString ("CanonicalEditPolicy.refresh.failed_ERROR_");
            Log.error (DiagramUIPlugin.getInstance (), IStatus.WARNING, eMsg, t);
        }
    }

    protected void refreshSemantic () {
        List createdViews = refreshSemanticChildren ();
        makeViewsImmutable (createdViews);
    }

    final protected void makeViewsMutable (List createdViews) {
        if (createdViews != null && ! createdViews.isEmpty ()) {
            List viewAdapters = prepareAdapterList (createdViews);
            executeCommand (SetViewMutabilityCommand.makeMutable (viewAdapters));
        }
    }

    final protected void makeViewsImmutable (List createdViews) {
        if (createdViews != null && ! createdViews.isEmpty ()) {
            List viewAdapters = prepareAdapterList (createdViews);
            Command immutable = SetViewMutabilityCommand.makeImmutable (viewAdapters);
            AsyncCommand ac = new AsyncCommand (immutable);
            ac.execute ();
        }
    }

    private List prepareAdapterList (List createdViews) {
        List viewAdapters = new ArrayList ();
        viewAdapters.add (host ());
        ListIterator li = createdViews.listIterator ();
        while (li.hasNext ()) {
            Object obj = li.next ();
            if (obj != null) {
                if (! (obj instanceof IAdaptable) && obj instanceof EObject) viewAdapters.add (new EObjectAdapter ((EObject) obj));
                else viewAdapters.add (obj);

            }
        }
        return viewAdapters;
    }

    protected final List refreshSemanticChildren () {
        if (resolveSemanticElement () == null) {
            return Collections.EMPTY_LIST;
        }
        List viewChildren = getViewChildren ();
        List semanticChildren = new ArrayList (getSemanticChildrenList ());
        List orphaned = cleanCanonicalSemanticChildren (viewChildren, semanticChildren);
        List createdViews = Collections.EMPTY_LIST;
        if (! semanticChildren.isEmpty ()) {
            createdViews = createViews (semanticChildren);
            for (int i = 0;
            i < createdViews.size (); i ++) {
                View createdView = (View) ((IAdaptable) createdViews.get (i)).getAdapter (View.class);
                if (createdView == null) {
                    String eMsg = MessageFormat.format (PresentationResourceManager.getI18NString ("CanonicalEditPolicy.create.view.failed_ERROR_"), new Object [] {semanticChildren.get (i)});
                    IllegalStateException ise = new IllegalStateException (eMsg);
                    Log.error (DiagramUIPlugin.getInstance (), IStatus.ERROR, eMsg, ise);
                    throw ise;
                }
            }
        }
        boolean changed = false;
        if (! orphaned.isEmpty ()) {
            changed = deleteViews (orphaned.iterator ());
        }
        if (changed || createdViews.size () > 0) postProcessRefreshSemantic (createdViews);

        return createdViews;
    }

    final protected List cleanCanonicalSemanticChildren (Collection viewChildren, Collection semanticChildren) {
        View viewChild;
        EObject semanticChild;
        Iterator viewChildrenIT = viewChildren.iterator ();
        List orphaned = new ArrayList ();
        while (viewChildrenIT.hasNext ()) {
            viewChild = (View) viewChildrenIT.next ();
            semanticChild = viewChild.getElement ();
            if (semanticChildren.contains (semanticChild)) {
                semanticChildren.remove (semanticChild);
            } else {
                orphaned.add (viewChild);
            }
        }
        return orphaned;
    }

    protected void postProcessRefreshSemantic (List viewDescriptors) {
        getHost ().refresh ();
    }

    protected final EObject resolveSemanticElement () {
        return ViewUtil.resolveSemanticElement ((View) host ().getModel ());
    }

}

