package org.eclipse.gmf.runtime.diagram.ui.actions;

import java.util.Collections;

import java.util.List;

import org.eclipse.gef.EditPart;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.Messages;

import org.eclipse.gmf.runtime.diagram.ui.editparts.TopGraphicEditPart;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.util.Assert;

import org.eclipse.ui.IWorkbenchPage;

public abstract class IndividualCompartmentAction extends BooleanPropertyAction {
    private final String compartmentSemanticHint;

    public IndividualCompartmentAction (IWorkbenchPage workbenchPage, String compartmentSemanticHint) {
        super (workbenchPage, MetaModelUtil.getID (NotationPackage.eINSTANCE.getView_Visible ()), Messages.getString ("ConstrainedFlowLayoutEditPolicy.changeVisibilityCommand.label"));
        Assert.isNotNull (compartmentSemanticHint);
        this.compartmentSemanticHint = compartmentSemanticHint;
    }

    protected List getTargetEdiParts (EditPart editpart) {
        EditPart targetEP = null;
        if (editpart instanceof TopGraphicEditPart) {
            final TopGraphicEditPart topEP = (TopGraphicEditPart) editpart;
            targetEP = (EditPart) MEditingDomainGetter.getMEditingDomain ((View) editpart.getModel ()).runAsRead (new MRunnable () {

                public Object run () {
                    return topEP.getChildBySemanticHint (getCompartmentSemanticHint ());
                }

            }

            );
        }
        return (targetEP == null) ? Collections.EMPTY_LIST : Collections.singletonList (targetEP);
    }

    protected String getCompartmentSemanticHint () {
        return compartmentSemanticHint;
    }

}

