package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.FeatureLinkModelFacet;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenLink;

import org.eclipse.gmf.codegen.gmfgen.LinkModelFacet;

import org.eclipse.gmf.codegen.gmfgen.MetamodelType;

import org.eclipse.gmf.codegen.gmfgen.SpecializationType;

public class SpecializationTypeImpl extends ElementTypeImpl implements SpecializationType {
    protected MetamodelType metamodelType = null;
    protected static final String EDIT_HELPER_ADVICE_CLASS_NAME_EDEFAULT = null;
    protected String editHelperAdviceClassName = EDIT_HELPER_ADVICE_CLASS_NAME_EDEFAULT;

    protected SpecializationTypeImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getSpecializationType ();
    }

    public MetamodelType getMetamodelType () {
        if (metamodelType != null && metamodelType.eIsProxy ()) {
            InternalEObject oldMetamodelType = (InternalEObject) metamodelType;
            metamodelType = (MetamodelType) eResolveProxy (oldMetamodelType);
            if (metamodelType != oldMetamodelType) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.SPECIALIZATION_TYPE__METAMODEL_TYPE, oldMetamodelType, metamodelType));

            }
        }
        return metamodelType;
    }

    public MetamodelType basicGetMetamodelType () {
        return metamodelType;
    }

    public void setMetamodelType (MetamodelType newMetamodelType) {
        MetamodelType oldMetamodelType = metamodelType;
        metamodelType = newMetamodelType;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.SPECIALIZATION_TYPE__METAMODEL_TYPE, oldMetamodelType, metamodelType));

    }

    public String getEditHelperAdviceClassNameGen () {
        return editHelperAdviceClassName;
    }

    public String getEditHelperAdviceClassName () {
        return GenCommonBaseImpl.getValidClassName (getEditHelperAdviceClassNameGen (), getDiagramElement (), EDIT_HELPER_ADVICE_SUFFIX);
    }

    public void setEditHelperAdviceClassName (String newEditHelperAdviceClassName) {
        String oldEditHelperAdviceClassName = editHelperAdviceClassName;
        editHelperAdviceClassName = newEditHelperAdviceClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.SPECIALIZATION_TYPE__EDIT_HELPER_ADVICE_CLASS_NAME, oldEditHelperAdviceClassName, editHelperAdviceClassName));

    }

    public GenClass getMetamodelClass () {
        GenClass metaClass = null;
        if (getMetamodelType () != null) {
            metaClass = getMetamodelType ().getMetaClass ();
        }
        if (getDiagramElement () instanceof GenLink) {
            LinkModelFacet modelFacet = ((GenLink) getDiagramElement ()).getModelFacet ();
            if (modelFacet instanceof FeatureLinkModelFacet) {
                GenFeature metaFeature = ((FeatureLinkModelFacet) modelFacet).getMetaFeature ();
                metaClass = metaFeature.getGenClass ();
            }
        }
        return metaClass;
    }

    public String getEditHelperAdviceQualifiedClassName () {
        return getDiagramElement ().getDiagram ().getEditHelpersPackageName () + '.' + getEditHelperAdviceClassName ();
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.SPECIALIZATION_TYPE__METAMODEL_TYPE :
                if (resolve) return getMetamodelType ();

                return basicGetMetamodelType ();
            case GMFGenPackage.SPECIALIZATION_TYPE__EDIT_HELPER_ADVICE_CLASS_NAME :
                return getEditHelperAdviceClassName ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.SPECIALIZATION_TYPE__METAMODEL_TYPE :
                setMetamodelType ((MetamodelType) newValue);
                return;
            case GMFGenPackage.SPECIALIZATION_TYPE__EDIT_HELPER_ADVICE_CLASS_NAME :
                setEditHelperAdviceClassName ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.SPECIALIZATION_TYPE__METAMODEL_TYPE :
                setMetamodelType ((MetamodelType) null);
                return;
            case GMFGenPackage.SPECIALIZATION_TYPE__EDIT_HELPER_ADVICE_CLASS_NAME :
                setEditHelperAdviceClassName (EDIT_HELPER_ADVICE_CLASS_NAME_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.SPECIALIZATION_TYPE__METAMODEL_TYPE :
                return metamodelType != null;
            case GMFGenPackage.SPECIALIZATION_TYPE__EDIT_HELPER_ADVICE_CLASS_NAME :
                return EDIT_HELPER_ADVICE_CLASS_NAME_EDEFAULT == null ? editHelperAdviceClassName != null : ! EDIT_HELPER_ADVICE_CLASS_NAME_EDEFAULT.equals (editHelperAdviceClassName);
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (editHelperAdviceClassName: ");
        result.append (editHelperAdviceClassName);
        result.append (')');
        return result.toString ();
    }

}

