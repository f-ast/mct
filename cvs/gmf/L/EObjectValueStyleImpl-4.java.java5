package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.runtime.notation.EObjectValueStyle;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class EObjectValueStyleImpl extends NamedStyleImpl implements EObjectValueStyle {
    protected EObject eObjectValue;

    protected EObjectValueStyleImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.EOBJECT_VALUE_STYLE;
    }

    public EObject getEObjectValue () {
        if (eObjectValue != null && eObjectValue.eIsProxy ()) {
            InternalEObject oldEObjectValue = (InternalEObject) eObjectValue;
            eObjectValue = eResolveProxy (oldEObjectValue);
            if (eObjectValue != oldEObjectValue) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, NotationPackage.EOBJECT_VALUE_STYLE__EOBJECT_VALUE, oldEObjectValue, eObjectValue));

            }
        }
        return eObjectValue;
    }

    public EObject basicGetEObjectValue () {
        return eObjectValue;
    }

    public void setEObjectValue (EObject newEObjectValue) {
        EObject oldEObjectValue = eObjectValue;
        eObjectValue = newEObjectValue;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.EOBJECT_VALUE_STYLE__EOBJECT_VALUE, oldEObjectValue, eObjectValue));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.EOBJECT_VALUE_STYLE__UUID :
                return getUUID ();
            case NotationPackage.EOBJECT_VALUE_STYLE__NAME :
                return getName ();
            case NotationPackage.EOBJECT_VALUE_STYLE__EOBJECT_VALUE :
                if (resolve) return getEObjectValue ();

                return basicGetEObjectValue ();
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.EOBJECT_VALUE_STYLE__UUID :
                setUUID ((byte []) newValue);
                return;
            case NotationPackage.EOBJECT_VALUE_STYLE__NAME :
                setName ((String) newValue);
                return;
            case NotationPackage.EOBJECT_VALUE_STYLE__EOBJECT_VALUE :
                setEObjectValue ((EObject) newValue);
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.EOBJECT_VALUE_STYLE__UUID :
                setUUID (UUID_EDEFAULT);
                return;
            case NotationPackage.EOBJECT_VALUE_STYLE__NAME :
                setName (NAME_EDEFAULT);
                return;
            case NotationPackage.EOBJECT_VALUE_STYLE__EOBJECT_VALUE :
                setEObjectValue ((EObject) null);
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.EOBJECT_VALUE_STYLE__UUID :
                return UUID_EDEFAULT == null ? uUID != null : ! UUID_EDEFAULT.equals (uUID);
            case NotationPackage.EOBJECT_VALUE_STYLE__NAME :
                return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT.equals (name);
            case NotationPackage.EOBJECT_VALUE_STYLE__EOBJECT_VALUE :
                return eObjectValue != null;
        }
        return eDynamicIsSet (featureID);
    }

}

