package org.eclipse.gmf.codegen.gmfgen.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCompartment;

import org.eclipse.gmf.codegen.gmfgen.presentation.EditorPlugin;

public class GenCompartmentItemProvider extends GenChildContainerItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public GenCompartmentItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    @Override
    public List < IItemPropertyDescriptor > getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addTitlePropertyDescriptor (object);
            addCanCollapsePropertyDescriptor (object);
            addHideIfEmptyPropertyDescriptor (object);
            addNeedsTitlePropertyDescriptor (object);
            addListLayoutPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addTitlePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenCompartment_title_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenCompartment_title_feature", "_UI_GenCompartment_type"), GMFGenPackage.eINSTANCE.getGenCompartment_Title (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, getString ("_UI_DiagramCompartmentPropertyCategory"), null));
    }

    protected void addCanCollapsePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenCompartment_canCollapse_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenCompartment_canCollapse_feature", "_UI_GenCompartment_type"), GMFGenPackage.eINSTANCE.getGenCompartment_CanCollapse (), true, false, false, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, getString ("_UI_DiagramCompartmentPropertyCategory"), null));
    }

    protected void addHideIfEmptyPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenCompartment_hideIfEmpty_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenCompartment_hideIfEmpty_feature", "_UI_GenCompartment_type"), GMFGenPackage.eINSTANCE.getGenCompartment_HideIfEmpty (), true, false, false, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, getString ("_UI_DiagramCompartmentPropertyCategory"), null));
    }

    protected void addNeedsTitlePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenCompartment_needsTitle_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenCompartment_needsTitle_feature", "_UI_GenCompartment_type"), GMFGenPackage.eINSTANCE.getGenCompartment_NeedsTitle (), true, false, false, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, getString ("_UI_DiagramCompartmentPropertyCategory"), null));
    }

    protected void addListLayoutPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenCompartment_listLayout_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenCompartment_listLayout_feature", "_UI_GenCompartment_type"), GMFGenPackage.eINSTANCE.getGenCompartment_ListLayout (), true, false, false, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, getString ("_UI_DiagramCompartmentPropertyCategory"), null));
    }

    @Override
    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/GenCompartment"));
    }

    @Override
    public String getText (Object object) {
        String label = ((GenCompartment) object).getEditPartClassName ();
        return label == null || label.length () == 0 ? getString ("_UI_GenCompartment_type") : getString ("_UI_GenCompartment_type") + " " + label;
    }

    @Override
    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (GenCompartment.class)) {
            case GMFGenPackage.GEN_COMPARTMENT__TITLE :
            case GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE :
            case GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY :
            case GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE :
            case GMFGenPackage.GEN_COMPARTMENT__LIST_LAYOUT :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
        }
        super.notifyChanged (notification);
    }

    @Override
    protected void collectNewChildDescriptors (Collection < Object > newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
    }

    @Override
    public ResourceLocator getResourceLocator () {
        return EditorPlugin.INSTANCE;
    }

}

