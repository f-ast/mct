package org.eclipse.gmf.graphdef.editor.part;

import java.util.ArrayList;

import java.util.List;

import org.eclipse.core.runtime.IPath;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Path;

import org.eclipse.core.runtime.Platform;

import org.eclipse.core.runtime.Status;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.edit.provider.ComposedAdapterFactory;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;

import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;

import org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.jface.resource.ImageDescriptor;

import org.eclipse.swt.graphics.Image;

import org.eclipse.ui.plugin.AbstractUIPlugin;

import org.osgi.framework.BundleContext;

import org.eclipse.gmf.gmfgraph.provider.GMFGraphItemProviderAdapterFactory;

public class GMFGraphDiagramEditorPlugin extends AbstractUIPlugin {
    public static final String ID = "org.eclipse.gmf.graphdef.editor";
    public static final PreferencesHint DIAGRAM_PREFERENCES_HINT = new PreferencesHint (ID);
    private static GMFGraphDiagramEditorPlugin instance;
    private ComposedAdapterFactory adapterFactory;
    private GMFGraphDocumentProvider myDocumentProvider;

    public GMFGraphDiagramEditorPlugin () {
    }

    public void start (BundleContext context) throws Exception {
        super.start (context);
        instance = this;
        PreferencesHint.registerPreferenceStore (DIAGRAM_PREFERENCES_HINT, getPreferenceStore ());
        adapterFactory = createAdapterFactory ();
    }

    public void stop (BundleContext context) throws Exception {
        adapterFactory.dispose ();
        adapterFactory = null;
        instance = null;
        super.stop (context);
    }

    public static GMFGraphDiagramEditorPlugin getInstance () {
        return instance;
    }

    protected ComposedAdapterFactory createAdapterFactory () {
        List factories = new ArrayList ();
        fillItemProviderFactories (factories);
        return new ComposedAdapterFactory (factories);
    }

    protected void fillItemProviderFactories (List factories) {
        factories.add (new GMFGraphItemProviderAdapterFactory ());
        factories.add (new ResourceItemProviderAdapterFactory ());
        factories.add (new ReflectiveItemProviderAdapterFactory ());
    }

    public AdapterFactory getItemProvidersAdapterFactory () {
        return adapterFactory;
    }

    public ImageDescriptor getItemImageDescriptor (Object item) {
        IItemLabelProvider labelProvider = (IItemLabelProvider) adapterFactory.adapt (item, IItemLabelProvider.class);
        if (labelProvider != null) {
            return ExtendedImageRegistry.getInstance ().getImageDescriptor (labelProvider.getImage (item));
        }
        return null;
    }

    public static ImageDescriptor getBundledImageDescriptor (String path) {
        return AbstractUIPlugin.imageDescriptorFromPlugin (ID, path);
    }

    public static ImageDescriptor findImageDescriptor (String path) {
        final IPath p = new Path (path);
        if (p.isAbsolute () && p.segmentCount () > 1) {
            return AbstractUIPlugin.imageDescriptorFromPlugin (p.segment (0), p.removeFirstSegments (1).makeAbsolute ().toString ());
        } else {
            return getBundledImageDescriptor (p.makeAbsolute ().toString ());
        }
    }

    public static String getString (String key) {
        return Platform.getResourceString (getInstance ().getBundle (), "%" + key);
    }

    public Image getBundledImage (String path) {
        Image image = getImageRegistry ().get (path);
        if (image == null) {
            getImageRegistry ().put (path, getBundledImageDescriptor (path));
            image = getImageRegistry ().get (path);
        }
        return image;
    }

    public GMFGraphDocumentProvider getDocumentProvider () {
        if (myDocumentProvider == null) {
            myDocumentProvider = new GMFGraphDocumentProvider ();
        }
        return myDocumentProvider;
    }

    public void logError (String error) {
        logError (error, null);
    }

    public void logError (String error, Throwable throwable) {
        if (error == null && throwable != null) {
            error = throwable.getMessage ();
        }
        getLog ().log (new Status (IStatus.ERROR, GMFGraphDiagramEditorPlugin.ID, IStatus.OK, error, throwable));
        debug (error, throwable);
    }

    public void logInfo (String message) {
        logInfo (message, null);
    }

    public void logInfo (String message, Throwable throwable) {
        if (message == null && throwable != null) {
            message = throwable.getMessage ();
        }
        getLog ().log (new Status (IStatus.INFO, GMFGraphDiagramEditorPlugin.ID, IStatus.OK, message, throwable));
        debug (message, throwable);
    }

    private void debug (String message, Throwable throwable) {
        if (! isDebugging ()) {
            return;
        }
        if (message != null) {
            System.err.println (message);
        }
        if (throwable != null) {
            throwable.printStackTrace ();
        }
    }

}

