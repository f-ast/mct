package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EDataType;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.eclipse.gmf.gmfgraph.*;

public class GMFGraphFactoryImpl extends EFactoryImpl implements GMFGraphFactory {

    public static GMFGraphFactory init () {
        try {
            GMFGraphFactory theGMFGraphFactory = (GMFGraphFactory) EPackage.Registry.INSTANCE.getEFactory ("http://www.eclipse.org/gmf/2006/GraphicalDefinition");
            if (theGMFGraphFactory != null) {
                return theGMFGraphFactory;
            }
        } catch (Exception exception) {
            EcorePlugin.INSTANCE.log (exception);
        }
        return new GMFGraphFactoryImpl ();
    }

    public GMFGraphFactoryImpl () {
        super ();
    }

    @Override
    public EObject create (EClass eClass) {
        switch (eClass.getClassifierID ()) {
            case GMFGraphPackage.CANVAS :
                return createCanvas ();
            case GMFGraphPackage.FIGURE_GALLERY :
                return createFigureGallery ();
            case GMFGraphPackage.NODE :
                return createNode ();
            case GMFGraphPackage.CONNECTION :
                return createConnection ();
            case GMFGraphPackage.COMPARTMENT :
                return createCompartment ();
            case GMFGraphPackage.DIAGRAM_LABEL :
                return createDiagramLabel ();
            case GMFGraphPackage.GENERAL_FACET :
                return createGeneralFacet ();
            case GMFGraphPackage.ALIGNMENT_FACET :
                return createAlignmentFacet ();
            case GMFGraphPackage.GRADIENT_FACET :
                return createGradientFacet ();
            case GMFGraphPackage.LABEL_OFFSET_FACET :
                return createLabelOffsetFacet ();
            case GMFGraphPackage.DEFAULT_SIZE_FACET :
                return createDefaultSizeFacet ();
            case GMFGraphPackage.FIGURE_DESCRIPTOR :
                return createFigureDescriptor ();
            case GMFGraphPackage.CHILD_ACCESS :
                return createChildAccess ();
            case GMFGraphPackage.FIGURE_REF :
                return createFigureRef ();
            case GMFGraphPackage.LABEL :
                return createLabel ();
            case GMFGraphPackage.LABELED_CONTAINER :
                return createLabeledContainer ();
            case GMFGraphPackage.RECTANGLE :
                return createRectangle ();
            case GMFGraphPackage.ROUNDED_RECTANGLE :
                return createRoundedRectangle ();
            case GMFGraphPackage.ELLIPSE :
                return createEllipse ();
            case GMFGraphPackage.POLYLINE :
                return createPolyline ();
            case GMFGraphPackage.POLYGON :
                return createPolygon ();
            case GMFGraphPackage.SCALABLE_POLYGON :
                return createScalablePolygon ();
            case GMFGraphPackage.POLYLINE_CONNECTION :
                return createPolylineConnection ();
            case GMFGraphPackage.POLYLINE_DECORATION :
                return createPolylineDecoration ();
            case GMFGraphPackage.POLYGON_DECORATION :
                return createPolygonDecoration ();
            case GMFGraphPackage.CUSTOM_ATTRIBUTE :
                return createCustomAttribute ();
            case GMFGraphPackage.FIGURE_ACCESSOR :
                return createFigureAccessor ();
            case GMFGraphPackage.CUSTOM_FIGURE :
                return createCustomFigure ();
            case GMFGraphPackage.CUSTOM_DECORATION :
                return createCustomDecoration ();
            case GMFGraphPackage.CUSTOM_CONNECTION :
                return createCustomConnection ();
            case GMFGraphPackage.RGB_COLOR :
                return createRGBColor ();
            case GMFGraphPackage.CONSTANT_COLOR :
                return createConstantColor ();
            case GMFGraphPackage.BASIC_FONT :
                return createBasicFont ();
            case GMFGraphPackage.POINT :
                return createPoint ();
            case GMFGraphPackage.DIMENSION :
                return createDimension ();
            case GMFGraphPackage.INSETS :
                return createInsets ();
            case GMFGraphPackage.BORDER_REF :
                return createBorderRef ();
            case GMFGraphPackage.LINE_BORDER :
                return createLineBorder ();
            case GMFGraphPackage.MARGIN_BORDER :
                return createMarginBorder ();
            case GMFGraphPackage.COMPOUND_BORDER :
                return createCompoundBorder ();
            case GMFGraphPackage.CUSTOM_BORDER :
                return createCustomBorder ();
            case GMFGraphPackage.CUSTOM_LAYOUT_DATA :
                return createCustomLayoutData ();
            case GMFGraphPackage.GRID_LAYOUT_DATA :
                return createGridLayoutData ();
            case GMFGraphPackage.BORDER_LAYOUT_DATA :
                return createBorderLayoutData ();
            case GMFGraphPackage.LAYOUT_REF :
                return createLayoutRef ();
            case GMFGraphPackage.CUSTOM_LAYOUT :
                return createCustomLayout ();
            case GMFGraphPackage.GRID_LAYOUT :
                return createGridLayout ();
            case GMFGraphPackage.BORDER_LAYOUT :
                return createBorderLayout ();
            case GMFGraphPackage.FLOW_LAYOUT :
                return createFlowLayout ();
            case GMFGraphPackage.XY_LAYOUT :
                return createXYLayout ();
            case GMFGraphPackage.XY_LAYOUT_DATA :
                return createXYLayoutData ();
            case GMFGraphPackage.STACK_LAYOUT :
                return createStackLayout ();
            case GMFGraphPackage.SVG_FIGURE :
                return createSVGFigure ();
            case GMFGraphPackage.SVG_PROPERTY :
                return createSVGProperty ();
            case GMFGraphPackage.RECTANGLE2_D :
                return createRectangle2D ();
            default :
                throw new IllegalArgumentException ("The class '" + eClass.getName () + "' is not a valid classifier");
        }
    }

    @Override
    public Object createFromString (EDataType eDataType, String initialValue) {
        switch (eDataType.getClassifierID ()) {
            case GMFGraphPackage.COLOR_CONSTANTS :
                return createColorConstantsFromString (eDataType, initialValue);
            case GMFGraphPackage.FONT_STYLE :
                return createFontStyleFromString (eDataType, initialValue);
            case GMFGraphPackage.DIRECTION :
                return createDirectionFromString (eDataType, initialValue);
            case GMFGraphPackage.LINE_KIND :
                return createLineKindFromString (eDataType, initialValue);
            case GMFGraphPackage.ALIGNMENT :
                return createAlignmentFromString (eDataType, initialValue);
            case GMFGraphPackage.SVG_PROPERTY_TYPE :
                return createSVGPropertyTypeFromString (eDataType, initialValue);
            default :
                throw new IllegalArgumentException ("The datatype '" + eDataType.getName () + "' is not a valid classifier");
        }
    }

    @Override
    public String convertToString (EDataType eDataType, Object instanceValue) {
        switch (eDataType.getClassifierID ()) {
            case GMFGraphPackage.COLOR_CONSTANTS :
                return convertColorConstantsToString (eDataType, instanceValue);
            case GMFGraphPackage.FONT_STYLE :
                return convertFontStyleToString (eDataType, instanceValue);
            case GMFGraphPackage.DIRECTION :
                return convertDirectionToString (eDataType, instanceValue);
            case GMFGraphPackage.LINE_KIND :
                return convertLineKindToString (eDataType, instanceValue);
            case GMFGraphPackage.ALIGNMENT :
                return convertAlignmentToString (eDataType, instanceValue);
            case GMFGraphPackage.SVG_PROPERTY_TYPE :
                return convertSVGPropertyTypeToString (eDataType, instanceValue);
            default :
                throw new IllegalArgumentException ("The datatype '" + eDataType.getName () + "' is not a valid classifier");
        }
    }

    public Canvas createCanvas () {
        CanvasImpl canvas = new CanvasImpl ();
        return canvas;
    }

    public FigureGallery createFigureGallery () {
        FigureGalleryImpl figureGallery = new FigureGalleryImpl ();
        return figureGallery;
    }

    public Node createNode () {
        NodeImpl node = new NodeImpl ();
        return node;
    }

    public ChildAccess createChildAccess () {
        ChildAccessImpl childAccess = new ChildAccessImpl ();
        return childAccess;
    }

    public Connection createConnection () {
        ConnectionImpl connection = new ConnectionImpl ();
        return connection;
    }

    public Compartment createCompartment () {
        CompartmentImpl compartment = new CompartmentImpl ();
        return compartment;
    }

    public DiagramLabel createDiagramLabel () {
        DiagramLabelImpl diagramLabel = new DiagramLabelImpl ();
        return diagramLabel;
    }

    public GeneralFacet createGeneralFacet () {
        GeneralFacetImpl generalFacet = new GeneralFacetImpl ();
        return generalFacet;
    }

    public AlignmentFacet createAlignmentFacet () {
        AlignmentFacetImpl alignmentFacet = new AlignmentFacetImpl ();
        return alignmentFacet;
    }

    public GradientFacet createGradientFacet () {
        GradientFacetImpl gradientFacet = new GradientFacetImpl ();
        return gradientFacet;
    }

    public LabelOffsetFacet createLabelOffsetFacet () {
        LabelOffsetFacetImpl labelOffsetFacet = new LabelOffsetFacetImpl ();
        return labelOffsetFacet;
    }

    public DefaultSizeFacet createDefaultSizeFacet () {
        DefaultSizeFacetImpl defaultSizeFacet = new DefaultSizeFacetImpl ();
        return defaultSizeFacet;
    }

    public FigureDescriptor createFigureDescriptor () {
        FigureDescriptorImpl figureDescriptor = new FigureDescriptorImpl ();
        return figureDescriptor;
    }

    public FigureRef createFigureRef () {
        FigureRefImpl figureRef = new FigureRefImpl ();
        return figureRef;
    }

    public Label createLabel () {
        LabelImpl label = new LabelImpl ();
        return label;
    }

    public LabeledContainer createLabeledContainer () {
        LabeledContainerImpl labeledContainer = new LabeledContainerImpl ();
        return labeledContainer;
    }

    public Rectangle createRectangle () {
        RectangleImpl rectangle = new RectangleImpl ();
        return rectangle;
    }

    public RoundedRectangle createRoundedRectangle () {
        RoundedRectangleImpl roundedRectangle = new RoundedRectangleImpl ();
        return roundedRectangle;
    }

    public Ellipse createEllipse () {
        EllipseImpl ellipse = new EllipseImpl ();
        return ellipse;
    }

    public Polyline createPolyline () {
        PolylineImpl polyline = new PolylineImpl ();
        return polyline;
    }

    public Polygon createPolygon () {
        PolygonImpl polygon = new PolygonImpl ();
        return polygon;
    }

    public ScalablePolygon createScalablePolygon () {
        ScalablePolygonImpl scalablePolygon = new ScalablePolygonImpl ();
        return scalablePolygon;
    }

    public PolylineConnection createPolylineConnection () {
        PolylineConnectionImpl polylineConnection = new PolylineConnectionImpl ();
        return polylineConnection;
    }

    public PolylineDecoration createPolylineDecoration () {
        PolylineDecorationImpl polylineDecoration = new PolylineDecorationImpl ();
        return polylineDecoration;
    }

    public PolygonDecoration createPolygonDecoration () {
        PolygonDecorationImpl polygonDecoration = new PolygonDecorationImpl ();
        return polygonDecoration;
    }

    public CustomFigure createCustomFigure () {
        CustomFigureImpl customFigure = new CustomFigureImpl ();
        return customFigure;
    }

    public CustomDecoration createCustomDecoration () {
        CustomDecorationImpl customDecoration = new CustomDecorationImpl ();
        return customDecoration;
    }

    public CustomConnection createCustomConnection () {
        CustomConnectionImpl customConnection = new CustomConnectionImpl ();
        return customConnection;
    }

    public RGBColor createRGBColor () {
        RGBColorImpl rgbColor = new RGBColorImpl ();
        return rgbColor;
    }

    public ConstantColor createConstantColor () {
        ConstantColorImpl constantColor = new ConstantColorImpl ();
        return constantColor;
    }

    public BasicFont createBasicFont () {
        BasicFontImpl basicFont = new BasicFontImpl ();
        return basicFont;
    }

    public Point createPoint () {
        PointImpl point = new PointImpl ();
        return point;
    }

    public Dimension createDimension () {
        DimensionImpl dimension = new DimensionImpl ();
        return dimension;
    }

    public Insets createInsets () {
        InsetsImpl insets = new InsetsImpl ();
        return insets;
    }

    public BorderRef createBorderRef () {
        BorderRefImpl borderRef = new BorderRefImpl ();
        return borderRef;
    }

    public LineBorder createLineBorder () {
        LineBorderImpl lineBorder = new LineBorderImpl ();
        return lineBorder;
    }

    public MarginBorder createMarginBorder () {
        MarginBorderImpl marginBorder = new MarginBorderImpl ();
        return marginBorder;
    }

    public CompoundBorder createCompoundBorder () {
        CompoundBorderImpl compoundBorder = new CompoundBorderImpl ();
        return compoundBorder;
    }

    public CustomBorder createCustomBorder () {
        CustomBorderImpl customBorder = new CustomBorderImpl ();
        return customBorder;
    }

    public CustomLayoutData createCustomLayoutData () {
        CustomLayoutDataImpl customLayoutData = new CustomLayoutDataImpl ();
        return customLayoutData;
    }

    public GridLayoutData createGridLayoutData () {
        GridLayoutDataImpl gridLayoutData = new GridLayoutDataImpl ();
        return gridLayoutData;
    }

    public BorderLayoutData createBorderLayoutData () {
        BorderLayoutDataImpl borderLayoutData = new BorderLayoutDataImpl ();
        return borderLayoutData;
    }

    public LayoutRef createLayoutRef () {
        LayoutRefImpl layoutRef = new LayoutRefImpl ();
        return layoutRef;
    }

    public CustomLayout createCustomLayout () {
        CustomLayoutImpl customLayout = new CustomLayoutImpl ();
        return customLayout;
    }

    public GridLayout createGridLayout () {
        GridLayoutImpl gridLayout = new GridLayoutImpl ();
        return gridLayout;
    }

    public BorderLayout createBorderLayout () {
        BorderLayoutImpl borderLayout = new BorderLayoutImpl ();
        return borderLayout;
    }

    public CustomAttribute createCustomAttribute () {
        CustomAttributeImpl customAttribute = new CustomAttributeImpl ();
        return customAttribute;
    }

    public FigureAccessor createFigureAccessor () {
        FigureAccessorImpl figureAccessor = new FigureAccessorImpl ();
        return figureAccessor;
    }

    public FlowLayout createFlowLayout () {
        FlowLayoutImpl flowLayout = new FlowLayoutImpl ();
        return flowLayout;
    }

    public XYLayout createXYLayout () {
        XYLayoutImpl xyLayout = new XYLayoutImpl ();
        return xyLayout;
    }

    public XYLayoutData createXYLayoutData () {
        XYLayoutDataImpl xyLayoutData = new XYLayoutDataImpl ();
        return xyLayoutData;
    }

    public StackLayout createStackLayout () {
        StackLayoutImpl stackLayout = new StackLayoutImpl ();
        return stackLayout;
    }

    public SVGFigure createSVGFigure () {
        SVGFigureImpl svgFigure = new SVGFigureImpl ();
        return svgFigure;
    }

    public SVGProperty createSVGProperty () {
        SVGPropertyImpl svgProperty = new SVGPropertyImpl ();
        return svgProperty;
    }

    public Rectangle2D createRectangle2D () {
        Rectangle2DImpl rectangle2D = new Rectangle2DImpl ();
        return rectangle2D;
    }

    public ColorConstants createColorConstantsFromString (EDataType eDataType, String initialValue) {
        ColorConstants result = ColorConstants.get (initialValue);
        if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");

        return result;
    }

    public String convertColorConstantsToString (EDataType eDataType, Object instanceValue) {
        return instanceValue == null ? null : instanceValue.toString ();
    }

    public FontStyle createFontStyleFromString (EDataType eDataType, String initialValue) {
        FontStyle result = FontStyle.get (initialValue);
        if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");

        return result;
    }

    public String convertFontStyleToString (EDataType eDataType, Object instanceValue) {
        return instanceValue == null ? null : instanceValue.toString ();
    }

    public Direction createDirectionFromString (EDataType eDataType, String initialValue) {
        Direction result = Direction.get (initialValue);
        if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");

        return result;
    }

    public String convertDirectionToString (EDataType eDataType, Object instanceValue) {
        return instanceValue == null ? null : instanceValue.toString ();
    }

    public LineKind createLineKindFromString (EDataType eDataType, String initialValue) {
        LineKind result = LineKind.get (initialValue);
        if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");

        return result;
    }

    public String convertLineKindToString (EDataType eDataType, Object instanceValue) {
        return instanceValue == null ? null : instanceValue.toString ();
    }

    public Alignment createAlignmentFromString (EDataType eDataType, String initialValue) {
        Alignment result = Alignment.get (initialValue);
        if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");

        return result;
    }

    public String convertAlignmentToString (EDataType eDataType, Object instanceValue) {
        return instanceValue == null ? null : instanceValue.toString ();
    }

    public SVGPropertyType createSVGPropertyTypeFromString (EDataType eDataType, String initialValue) {
        SVGPropertyType result = SVGPropertyType.get (initialValue);
        if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");

        return result;
    }

    public String convertSVGPropertyTypeToString (EDataType eDataType, Object instanceValue) {
        return instanceValue == null ? null : instanceValue.toString ();
    }

    public GMFGraphPackage getGMFGraphPackage () {
        return (GMFGraphPackage) getEPackage ();
    }

    @Deprecated
    public static GMFGraphPackage getPackage () {
        return GMFGraphPackage.eINSTANCE;
    }

}

