package org.eclipse.gmf.runtime.draw2d.ui.internal.routers;

import org.eclipse.draw2d.Connection;

import org.eclipse.draw2d.ConnectionAnchor;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.PointList;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.draw2d.ui.geometry.LineSeg;

public class OrthogonalRouterUtilities {

    public static Point getAdjustedCenterPoint (final Rectangle rect, final Point ref) {
        Point ptNewCenter = new Point (rect.getCenter ());
        if (ref.x < rect.getRight ().x && ref.x > rect.getLeft ().x) {
            ptNewCenter.x = ref.x;
        } else if (ref.y < rect.getBottom ().y && ref.y > rect.getTop ().y) {
            ptNewCenter.y = ref.y;
        }

        return ptNewCenter;
    }

    public static void resetEndPointsToCenter (Connection conn, PointList newLine) {
        Rectangle startRect = new Rectangle (conn.getSourceAnchor ().getOwner ().getBounds ());
        conn.getSourceAnchor ().getOwner ().translateToAbsolute (startRect);
        Point ptStart = newLine.getPoint (1);
        conn.translateToAbsolute (ptStart);
        ptStart = getAdjustedCenterPoint (startRect, ptStart);
        conn.translateToRelative (ptStart);
        newLine.setPoint (ptStart, 0);
        Rectangle endRect = new Rectangle (conn.getTargetAnchor ().getOwner ().getBounds ());
        conn.getTargetAnchor ().getOwner ().translateToAbsolute (endRect);
        Point ptEnd = newLine.getPoint (newLine.size () - 2);
        conn.translateToAbsolute (ptEnd);
        ptEnd = getAdjustedCenterPoint (endRect, ptEnd);
        conn.translateToRelative (ptEnd);
        newLine.setPoint (ptEnd, newLine.size () - 1);
    }

    private static Point getEdgePoint (Connection conn, ConnectionAnchor anchor, Point ptRef) {
        Rectangle rect = new Rectangle (anchor.getOwner ().getBounds ());
        anchor.getOwner ().translateToAbsolute (rect);
        conn.translateToRelative (rect);
        Point ptRef2 = new Point (ptRef);
        Point ptRef1 = getAdjustedCenterPoint (rect, ptRef2);
        Point ptAbsRef2 = new Point (ptRef2);
        conn.translateToAbsolute (ptAbsRef2);
        Point ptEdge = anchor.getLocation (ptAbsRef2);
        conn.translateToRelative (ptEdge);
        LineSeg lineSeg = new LineSeg (ptRef1, ptRef2);
        Point ptProj = lineSeg.perpIntersect (ptEdge.x, ptEdge.y);
        if (Math.abs (ptProj.x - ptRef2.x) < Math.abs (ptProj.y - ptRef2.y)) ptProj.x = ptRef2.x;
        else ptProj.y = ptRef2.y;

        return ptProj;
    }

    public static LineSeg getOrthogonalLineSegToAnchorLoc (Connection conn, ConnectionAnchor anchor, Point ref) {
        Point ptAbsRef = getEdgePoint (conn, anchor, ref);
        conn.translateToAbsolute (ptAbsRef);
        Point ptEdge = anchor.getLocation (ptAbsRef);
        conn.translateToRelative (ptEdge);
        LineSeg result = new LineSeg (ptEdge, ref);
        if (! result.isHorizontal () && ! result.isVertical ()) {
            if (Math.abs (result.getOrigin ().x - result.getTerminus ().x) < Math.abs (result.getOrigin ().y - result.getTerminus ().y)) {
                result.setTerminus (new Point (result.getOrigin ().x, result.getTerminus ().y));
            } else {
                result.setTerminus (new Point (result.getTerminus ().x, result.getOrigin ().y));
            }
        }
        return result;
    }

}

