package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.codegen.ecore.genmodel.GenClassifier;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenDomainElementTarget;

public class GenDomainElementTargetImpl extends GenAuditableImpl implements GenDomainElementTarget {
    protected GenClass element;

    protected GenDomainElementTargetImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenDomainElementTarget ();
    }

    public GenClass getElement () {
        if (element != null && element.eIsProxy ()) {
            InternalEObject oldElement = (InternalEObject) element;
            element = (GenClass) eResolveProxy (oldElement);
            if (element != oldElement) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.GEN_DOMAIN_ELEMENT_TARGET__ELEMENT, oldElement, element));

            }
        }
        return element;
    }

    public GenClassifier getContext () {
        return getElement ();
    }

    public GenClass basicGetElement () {
        return element;
    }

    public void setElement (GenClass newElement) {
        GenClass oldElement = element;
        element = newElement;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DOMAIN_ELEMENT_TARGET__ELEMENT, oldElement, element));

    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_DOMAIN_ELEMENT_TARGET__ELEMENT :
                if (resolve) return getElement ();

                return basicGetElement ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_DOMAIN_ELEMENT_TARGET__ELEMENT :
                setElement ((GenClass) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_DOMAIN_ELEMENT_TARGET__ELEMENT :
                setElement ((GenClass) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_DOMAIN_ELEMENT_TARGET__ELEMENT :
                return element != null;
        }
        return super.eIsSet (featureID);
    }

}

