package org.eclipse.gmf.runtime.common.ui.dialogs;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.jface.viewers.TreeViewer;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.KeyEvent;

import org.eclipse.swt.events.KeyListener;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.events.SelectionListener;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.layout.GridLayout;

import org.eclipse.swt.widgets.Button;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Event;

import org.eclipse.swt.widgets.Label;

import org.eclipse.swt.widgets.Listener;

import org.eclipse.swt.widgets.MessageBox;

import org.eclipse.swt.widgets.Text;

import org.eclipse.swt.widgets.Tree;

import org.eclipse.swt.widgets.TreeItem;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIDebugOptions;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;

import org.eclipse.gmf.runtime.common.ui.internal.dialogs.SelectableElementTreeSelectionChangedAndMouseAndKeyListener;

import org.eclipse.gmf.runtime.common.ui.internal.dialogs.SelectableElementsContentProvider;

import org.eclipse.gmf.runtime.common.ui.internal.dialogs.SelectableElementsTriStateLabelProvider;

import org.eclipse.gmf.runtime.common.ui.internal.l10n.ResourceManager;

public class ShowRelatedElementsComposite extends Composite {
    private TreeViewer viewer;
    private Composite expansionComposite;
    private Button consumerToSelection;
    private Button selectionToSupplier;
    private Button both;
    private Button allConnected;
    protected boolean showAllConnected = false;
    private Text levels;
    private Button expandIndefinitely;
    private SelectableElement rootElement;
    private boolean cachedExpandIndefinitely;
    private int cachedExpandLevels;
    private ExpansionType cachedExpansionType = ExpansionType.INCOMING;
    private Image showRelatedElementsImage1;
    private Image showRelatedElementsImage2;
    private Image showRelatedElementsImage3;
    private boolean needsExpansionControls;
    protected IShowRelatedElementsWithDetails detailsChangedListener;
    protected Composite contributedExpansionGroupComposite = null;
    private static final int DEFAULT_LEVELS = 1;
    protected int viewerWidth = - 1;

    public ShowRelatedElementsComposite (Composite parent, SelectableElement aRootElement, int preferredViewerWidth) {
        this (parent, aRootElement, true, preferredViewerWidth);
    }

    private List selectedSelectableElements;

    public ShowRelatedElementsComposite (Composite parent, SelectableElement aRootElement, boolean createExpansion, int preferredViewerWidth) {
        super (parent, SWT.NONE);
        this.needsExpansionControls = createExpansion;
        this.rootElement = aRootElement.makeCopy ();
        selectedSelectableElements = new ArrayList ();
        SelectableElement.getAllChildrenOfType (this.rootElement, SelectedType.LEAVE, selectedSelectableElements);
        this.viewerWidth = preferredViewerWidth;
        createContents ();
        addListener (SWT.Dispose, new Listener () {

            public void handleEvent (Event e) {
                onDispose ();
            }

        }

        );
    }

    protected void createContents () {
        this.setLayoutData (new GridData (GridData.FILL_BOTH));
        this.setLayout (new GridLayout (2, false));
        createViewer ();
        if (this.needsExpansionControls) {
            createExpansionControls ();
        }
        reset ();
        viewer.refresh ();
    }

    public int getViewerWidth () {
        return this.viewerWidth;
    }

    protected void reset () {
        if (this.needsExpansionControls) {
            setBoth ();
            setExpand (DEFAULT_LEVELS);
        }
        SelectableElement.setSelectedTypeForSelecteableElementAndChildren (rootElement, SelectedType.SELECTED);
        assert null != selectedSelectableElements;
        Iterator it = selectedSelectableElements.iterator ();
        while (it.hasNext ()) {
            Object obj = it.next ();
            assert (obj instanceof SelectableElement);
            SelectableElement.setSelectedTypeForSelecteableElementAndChildren ((SelectableElement) obj, SelectedType.LEAVE);
        }
        viewer.expandToLevel (2);
        viewer.refresh ();
    }

    public TreeViewer getTreeViewer () {
        return this.viewer;
    }

    public Text getLevels () {
        return this.levels;
    }

    public boolean getExpandIndefinitely () {
        return this.cachedExpandIndefinitely;
    }

    public int getExpandLevel () {
        return this.cachedExpandLevels;
    }

    public ExpansionType getExpansionType () {
        return cachedExpansionType;
    }

    public boolean getConsumerToSelection () {
        return cachedExpansionType.equals (ExpansionType.INCOMING) || cachedExpansionType.equals (ExpansionType.BOTH);
    }

    public boolean getSelectionToSupplier () {
        return cachedExpansionType.equals (ExpansionType.OUTGOING) || cachedExpansionType.equals (ExpansionType.BOTH);
    }

    public boolean getAllConnected () {
        return cachedExpansionType.equals (ExpansionType.ALL);
    }

    public List getSelectedRelationshipTypes () {
        if (this.rootElement == null) {
            return null;
        }
        return this.rootElement.getSelectedElementTypes ();
    }

    protected void setTreeViewer (TreeViewer aViewer) {
        this.viewer = aViewer;
    }

    protected void createViewer () {
        Label label = new Label (this, SWT.NULL);
        label.setText (ResourceManager.getI18NString ("ShowRelatedElementsDialog.RelationshipTypes"));
        GridData gridData = new GridData ();
        gridData.horizontalSpan = 2;
        label.setLayoutData (gridData);
        setTreeViewer (new TreeViewer (this, SWT.SINGLE | SWT.V_SCROLL | SWT.BORDER));
        gridData = new GridData (GridData.FILL_BOTH);
        gridData.widthHint = this.viewerWidth;
        gridData.horizontalSpan = 2;
        Tree tree = getTreeViewer ().getTree ();
        tree.setLayoutData (gridData);
        getTreeViewer ().setUseHashlookup (true);
        getTreeViewer ().setLabelProvider (new SelectableElementsTriStateLabelProvider ());
        getTreeViewer ().setContentProvider (new SelectableElementsContentProvider ());
        getTreeViewer ().setInput (this.rootElement);
        TreeItem [] treeItems = tree.getItems ();
        assert null != treeItems;
        assert (treeItems.length == 1);
        tree.setSelection (treeItems);
        SelectableElementTreeSelectionChangedAndMouseAndKeyListener listener = new SelectableElementTreeSelectionChangedAndMouseAndKeyListener (getTreeViewer ()) {

            protected void switchCheckType (SelectableElement element) {
                detailsChanged ();
                if (element.getSelectedType () == SelectedType.LEAVE) {
                    element.setSelectedType (SelectedType.SELECTED);
                } else if (element.getSelectedType () == SelectedType.SELECTED) {
                    element.setSelectedType (SelectedType.LEAVE);
                }

            }

        }

        ;
        getTreeViewer ().addSelectionChangedListener (listener);
        tree.addMouseListener (listener);
        tree.addKeyListener (listener);
    }

    protected void contributeToExpansionGroupComposite (Composite parent) {
    }

    protected void createExpansionControls () {
        this.expansionComposite = new Composite (this, SWT.NULL);
        GridData gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.horizontalSpan = 2;
        this.expansionComposite.setLayoutData (gridData);
        GridLayout gridLayout = new GridLayout (2, false);
        gridLayout.marginHeight = gridLayout.marginWidth = 0;
        this.expansionComposite.setLayout (gridLayout);
        new Label (this.expansionComposite, SWT.NULL).setText (ResourceManager.getI18NString ("ShowRelatedElementsDialog.ExpansionGroup.Text"));
        consumerToSelection = new Button (this.expansionComposite, SWT.RADIO);
        consumerToSelection.setText (ResourceManager.getI18NString ("ShowRelatedElementsDialog.Incoming"));
        consumerToSelection.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                detailsChanged ();
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        new Label (this.expansionComposite, SWT.NULL);
        selectionToSupplier = new Button (this.expansionComposite, SWT.RADIO);
        selectionToSupplier.setText (ResourceManager.getI18NString ("ShowRelatedElementsDialog.Outgoing"));
        selectionToSupplier.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                detailsChanged ();
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        if (showAllConnected) {
            new Label (this.expansionComposite, SWT.NULL);
        }
        allConnected = new Button (this.expansionComposite, SWT.RADIO);
        allConnected.setText (ResourceManager.getI18NString ("ShowRelatedElementsDialog.AllConnected"));
        allConnected.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                detailsChanged ();
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        if (! showAllConnected) {
            allConnected.setVisible (false);
        } else {
            new Label (this.expansionComposite, SWT.NULL);
        }
        both = new Button (this.expansionComposite, SWT.RADIO);
        both.setText (ResourceManager.getI18NString ("ShowRelatedElementsDialog.ExpansionGroup.RadioButton.Both"));
        both.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                detailsChanged ();
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        contributeToExpansionGroupComposite (this.expansionComposite);
        new Label (expansionComposite, SWT.NULL).setText (ResourceManager.getI18NString ("ShowRelatedElementsDialog.ExpansionGroup.Label.Levels"));
        levels = new Text (this.expansionComposite, SWT.BORDER);
        gridData = new GridData ();
        gridData.widthHint = 50;
        levels.setLayoutData (gridData);
        levels.addKeyListener (new KeyListener () {

            public void keyPressed (KeyEvent e) {
            }

            public void keyReleased (KeyEvent e) {
                detailsChanged ();
            }

        }

        );
        new Label (this.expansionComposite, SWT.NULL);
        expandIndefinitely = new Button (this.expansionComposite, SWT.CHECK);
        expandIndefinitely.setText (ResourceManager.getI18NString ("ShowRelatedElementsDialog.ExpansionGroup.CheckBox.Expand_Indefinitely"));
        expandIndefinitely.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                widgetDefaultSelected (e);
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                checkAndAskExpandIndefinitely ();
                detailsChanged ();
            }

        }

        );
    }

    public String validate (boolean alert) {
        if (! validateLevels ()) {
            if (alert) {
                performValidateFailed ();
            }
            return ResourceManager.getI18NString ("ShowRelatedElementsDialog.LevelsValidation.Message");
        }
        return null;
    }

    private boolean validateLevels () {
        if (levels.getText () == StringStatics.BLANK) {
            return false;
        } else {
            int result;
            try {
                result = Integer.parseInt (levels.getText ());
                if (result < 0) {
                    return false;
                }
                return true;
            } catch (NumberFormatException exception) {
                return false;
            }
        }
    }

    private void performValidateFailed () {
        MessageBox validate = new MessageBox (getShell (), SWT.ICON_ERROR);
        validate.setText (ResourceManager.getI18NString ("ShowRelatedElementsDialog.LevelsValidation.Title"));
        validate.setMessage (ResourceManager.getI18NString ("ShowRelatedElementsDialog.LevelsValidation.Message"));
        validate.open ();
        levels.setFocus ();
    }

    public void saveCachedValues () {
        if (! this.needsExpansionControls) {
            return;
        }
        cachedExpandIndefinitely = expandIndefinitely.getSelection ();
        try {
            cachedExpandLevels = Integer.parseInt (levels.getText ());
        } catch (NumberFormatException e) {
            Trace.catching (CommonUIPlugin.getDefault (), CommonUIDebugOptions.EXCEPTIONS_CATCHING, ShowRelatedElementsComposite.class, "saveCachedValues", e);
            cachedExpandLevels = DEFAULT_LEVELS;
        }
        if (consumerToSelection.getSelection ()) {
            cachedExpansionType = ExpansionType.INCOMING;
        } else if (selectionToSupplier.getSelection ()) {
            cachedExpansionType = ExpansionType.OUTGOING;
        } else if (both.getSelection ()) {
            cachedExpansionType = ExpansionType.BOTH;
        } else if (allConnected.getSelection ()) {
            cachedExpansionType = ExpansionType.ALL;
        }

    }

    public void checkAndAskExpandIndefinitely () {
        if (expandIndefinitely.getSelection ()) {
            MessageBox messageBox = new MessageBox (getShell (), SWT.YES | SWT.NO | SWT.ICON_QUESTION);
            messageBox.setText (ResourceManager.getI18NString ("ShowRelatedElementsDialog.ExpandIndefinitelyMessageBox.Title"));
            messageBox.setMessage (ResourceManager.getI18NString ("ShowRelatedElementsDialog.ExpandIndefinitelyMessageBox.Message.Sentence1") + "\n" + ResourceManager.getI18NString ("ShowRelatedElementsDialog.ExpandIndefinitelyMessageBox.Message.Sentence2"));
            if (messageBox.open () == SWT.NO) {
                expandIndefinitely.setSelection (false);
            }
        }
        levels.setEnabled (! expandIndefinitely.getSelection ());
    }

    private void onDispose () {
        disposeImages ();
    }

    private void disposeImages () {
        if (showRelatedElementsImage1 != null && ! showRelatedElementsImage1.isDisposed ()) showRelatedElementsImage1.dispose ();

        if (showRelatedElementsImage2 != null && ! showRelatedElementsImage2.isDisposed ()) showRelatedElementsImage2.dispose ();

        if (showRelatedElementsImage3 != null && ! showRelatedElementsImage3.isDisposed ()) showRelatedElementsImage3.dispose ();

    }

    public void resetRootElement (SelectableElement newRootElement) {
        this.rootElement = newRootElement;
        viewer.setInput (newRootElement);
        reset ();
    }

    public void setBoth () {
        both.setSelection (true);
        consumerToSelection.setSelection (false);
        selectionToSupplier.setSelection (false);
        allConnected.setSelection (false);
    }

    public void setConsumerToSelection () {
        consumerToSelection.setSelection (true);
        both.setSelection (false);
        selectionToSupplier.setSelection (false);
        allConnected.setSelection (false);
    }

    public void setSelectionToSupplier () {
        selectionToSupplier.setSelection (true);
        both.setSelection (false);
        consumerToSelection.setSelection (false);
        allConnected.setSelection (false);
    }

    public void setAllConnected () {
        allConnected.setSelection (true);
        selectionToSupplier.setSelection (false);
        both.setSelection (false);
        consumerToSelection.setSelection (false);
    }

    public void setExpand (int expandLevels) {
        if (expandLevels >= 0) {
            assert (expandLevels <= 99);
            expandIndefinitely.setSelection (false);
            levels.setEnabled (true);
            levels.setText (Integer.toString (expandLevels));
        } else {
            expandIndefinitely.setSelection (true);
            levels.setEnabled (false);
        }
    }

    public void ExpandIndefinitely (boolean enable) {
        expandIndefinitely.setSelection (enable);
        levels.setEnabled (! enable);
    }

    public SelectableElement getRootElement () {
        return rootElement;
    }

    public void enableDirectionControls (boolean enable) {
        consumerToSelection.setEnabled (enable);
        both.setEnabled (enable);
        selectionToSupplier.setEnabled (enable);
    }

    public void enableExpandLevels (boolean enable) {
        expandIndefinitely.setEnabled (enable);
        levels.setEnabled (enable);
    }

    private boolean select (List list, SelectableElement selectableElement) {
        if (selectableElement.getNumberOfChildren () == 0) {
            if (list.contains (selectableElement.getHint ())) {
                selectableElement.setSelectedType (SelectedType.SELECTED);
                return true;
            } else {
                selectableElement.setSelectedType (SelectedType.LEAVE);
                return false;
            }
        } else {
            boolean childrenSelected = true;
            for (int i = 0;
            i < selectableElement.getNumberOfChildren (); i ++) {
                if (! select (list, selectableElement.getChild (i))) {
                    childrenSelected = false;
                }
            }
            if (childrenSelected) {
                selectableElement.setSelectedType (SelectedType.SELECTED);
                return true;
            } else {
                selectableElement.setSelectedType (SelectedType.LEAVE);
                return false;
            }
        }
    }

    public void initializeSettings (boolean cts, boolean sts, int expandLevel, List selectedHints) {
        if (cts && sts) {
            setBoth ();
        } else if (cts) {
            setConsumerToSelection ();
        } else if (sts) {
            setSelectionToSupplier ();
        } else {
            assert (false);
        }

        setExpand (expandLevel);
        select (selectedHints, rootElement);
        viewer.refresh ();
        expandIndefinitely.setFocus ();
    }

    public void updateRelationships (ShowRelatedElementsPreset preset) {
        assert null != rootElement;
        if (preset == null) {
            reset ();
            return;
        }
        SelectableElement.setSelectedTypeForSelecteableElementAndChildren (rootElement, SelectedType.LEAVE);
        SelectableElement.setSelectedTypeForMatchingSelecteableElementAndChildren (rootElement, SelectedType.SELECTED, preset.getIds ());
        if (preset.getExpansionType () == ExpansionType.INCOMING.getOrdinal ()) {
            setConsumerToSelection ();
        } else if (preset.getExpansionType () == ExpansionType.OUTGOING.getOrdinal ()) {
            setSelectionToSupplier ();
        } else if (preset.getExpansionType () == ExpansionType.BOTH.getOrdinal ()) {
            setBoth ();
        } else if (preset.getExpansionType () == ExpansionType.ALL.getOrdinal ()) {
            setAllConnected ();
        } else {
            assert (false);
        }

        if (preset.getLevels () == - 1) {
            levels.setText ("1");
            expandIndefinitely.setSelection (true);
            levels.setEnabled (false);
        } else {
            expandIndefinitely.setSelection (false);
            levels.setText (Integer.toString (preset.getLevels ()));
            levels.setEnabled (true);
        }
        getTreeViewer ().refresh ();
    }

    public List getImmediateIds () {
        return getRootElement ().getSelectedElementIds ();
    }

    protected Object getImmediateCustomData () {
        return null;
    }

    protected int getImmediateExpansionLevels () {
        int numLevels = 0;
        if (expandIndefinitely.getSelection ()) {
            numLevels = - 1;
        } else {
            try {
                numLevels = Integer.parseInt (levels.getText ().trim ());
            } catch (NumberFormatException e) {
            }
        }
        return numLevels;
    }

    protected int getImmediateExpansionType () {
        if (consumerToSelection.getSelection ()) return ExpansionType.INCOMING.getOrdinal ();

        if (selectionToSupplier.getSelection ()) return ExpansionType.OUTGOING.getOrdinal ();

        if (both.getSelection ()) return ExpansionType.BOTH.getOrdinal ();

        if (allConnected.getSelection ()) return ExpansionType.ALL.getOrdinal ();

        return - 1;
    }

    public ShowRelatedElementsPreset getCurrentSettings () {
        return new ShowRelatedElementsPreset (null, false, getImmediateExpansionType (), getImmediateExpansionLevels (), getImmediateIds (), getImmediateCustomData ());
    }

    public void detailsChanged () {
        if (detailsChangedListener != null) {
            detailsChangedListener.detailsChanged ();
        }
    }

    public void setDetailsChangedListener (IShowRelatedElementsWithDetails newDetailsChangedListener) {
        detailsChangedListener = newDetailsChangedListener;
    }

}

