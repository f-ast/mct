package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenStandardPreferencePage;

import org.eclipse.gmf.codegen.gmfgen.StandardPreferencePages;

public class GenStandardPreferencePageImpl extends GenPreferencePageImpl implements GenStandardPreferencePage {
    protected static final StandardPreferencePages KIND_EDEFAULT = StandardPreferencePages.GENERAL_LITERAL;
    protected StandardPreferencePages kind = KIND_EDEFAULT;
    protected static final String CLASS_NAME_EDEFAULT = null;
    protected String className = CLASS_NAME_EDEFAULT;

    protected GenStandardPreferencePageImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenStandardPreferencePage ();
    }

    public StandardPreferencePages getKind () {
        return kind;
    }

    public void setKind (StandardPreferencePages newKind) {
        StandardPreferencePages oldKind = kind;
        kind = newKind == null ? KIND_EDEFAULT : newKind;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__KIND, oldKind, kind));

    }

    @Override
    public String getQualifiedClassName () {
        if (getDiagram () == null || GenCommonBaseImpl.isEmpty (getDiagram ().getPreferencesPackageName ())) {
            return getClassName ();
        }
        if (getKind () == StandardPreferencePages.PATHMAPS_LITERAL) {
            return "org.eclipse.gmf.runtime.emf.ui.preferences.PathmapsPreferencePage";
        }
        return getDiagram ().getPreferencesPackageName () + '.' + getClassName ();
    }

    public String getClassNameGen () {
        return className;
    }

    public String getClassName () {
        if (! GenCommonBaseImpl.isEmpty (getClassNameGen ())) {
            return getClassNameGen ();
        }
        switch (getKind ()) {
            case GENERAL_LITERAL :
                return "DiagramGeneralPreferencePage";
            case APPEARANCE_LITERAL :
                return "DiagramAppearancePreferencePage";
            case CONNECTIONS_LITERAL :
                return "DiagramConnectionsPreferencePage";
            case PRINTING_LITERAL :
                return "DiagramPrintingPreferencePage";
            case RULERS_AND_GRID_LITERAL :
                return "DiagramRulersAndGridPreferencePage";
            case PATHMAPS_LITERAL :
                return "PathmapsPreferencePage";
        }
        throw new IllegalStateException ();
    }

    public void setClassName (String newClassName) {
        String oldClassName = className;
        className = newClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME, oldClassName, className));

    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__KIND :
                return getKind ();
            case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME :
                return getClassName ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__KIND :
                setKind ((StandardPreferencePages) newValue);
                return;
            case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME :
                setClassName ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__KIND :
                setKind (KIND_EDEFAULT);
                return;
            case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME :
                setClassName (CLASS_NAME_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__KIND :
                return kind != KIND_EDEFAULT;
            case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME :
                return CLASS_NAME_EDEFAULT == null ? className != null : ! CLASS_NAME_EDEFAULT.equals (className);
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (kind: ");
        result.append (kind);
        result.append (", className: ");
        result.append (className);
        result.append (')');
        return result.toString ();
    }

}

