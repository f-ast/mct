package org.eclipse.gmf.graphdef.editor.edit.parts;

import org.eclipse.draw2d.FigureUtilities;

import org.eclipse.draw2d.Label;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPartFactory;

import org.eclipse.gef.tools.CellEditorLocator;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;

import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.viewers.CellEditor;

import org.eclipse.swt.widgets.Text;

public class GMFGraphEditPartFactory implements EditPartFactory {

    public EditPart createEditPart (EditPart context, Object model) {
        if (model instanceof View) {
            View view = (View) model;
            switch (GMFGraphVisualIDRegistry.getVisualID (view)) {
                case CanvasEditPart.VISUAL_ID :
                    return new CanvasEditPart (view);
                case CompartmentEditPart.VISUAL_ID :
                    return new CompartmentEditPart (view);
                case CompartmentNameEditPart.VISUAL_ID :
                    return new CompartmentNameEditPart (view);
                case NodeEditPart.VISUAL_ID :
                    return new NodeEditPart (view);
                case NodeNameEditPart.VISUAL_ID :
                    return new NodeNameEditPart (view);
                case ConnectionEditPart.VISUAL_ID :
                    return new ConnectionEditPart (view);
                case ConnectionNameEditPart.VISUAL_ID :
                    return new ConnectionNameEditPart (view);
                case FigureGalleryEditPart.VISUAL_ID :
                    return new FigureGalleryEditPart (view);
                case FigureGalleryNameEditPart.VISUAL_ID :
                    return new FigureGalleryNameEditPart (view);
                case RectangleEditPart.VISUAL_ID :
                    return new RectangleEditPart (view);
                case Rectangle2EditPart.VISUAL_ID :
                    return new Rectangle2EditPart (view);
                case EllipseEditPart.VISUAL_ID :
                    return new EllipseEditPart (view);
                case RoundedRectangleEditPart.VISUAL_ID :
                    return new RoundedRectangleEditPart (view);
                case PolylineEditPart.VISUAL_ID :
                    return new PolylineEditPart (view);
                case Ellipse2EditPart.VISUAL_ID :
                    return new Ellipse2EditPart (view);
                case RoundedRectangle2EditPart.VISUAL_ID :
                    return new RoundedRectangle2EditPart (view);
                case Polyline2EditPart.VISUAL_ID :
                    return new Polyline2EditPart (view);
                case CompartmentVisualFacetsEditPart.VISUAL_ID :
                    return new CompartmentVisualFacetsEditPart (view);
                case NodeVisualFacetsEditPart.VISUAL_ID :
                    return new NodeVisualFacetsEditPart (view);
                case ConnectionVisualFacetsEditPart.VISUAL_ID :
                    return new ConnectionVisualFacetsEditPart (view);
                case FigureGalleryFiguresEditPart.VISUAL_ID :
                    return new FigureGalleryFiguresEditPart (view);
                case DiagramElementFigureEditPart.VISUAL_ID :
                    return new DiagramElementFigureEditPart (view);
            }
        }
        return createUnrecognizedEditPart (context, model);
    }

    private EditPart createUnrecognizedEditPart (EditPart context, Object model) {
        return null;
    }

    public static CellEditorLocator getTextCellEditorLocator (ITextAwareEditPart source) {
        if (source.getFigure () instanceof WrapLabel) return new TextCellEditorLocator ((WrapLabel) source.getFigure ());
        else {
            return new LabelCellEditorLocator ((Label) source.getFigure ());
        }
    }

    static private class TextCellEditorLocator implements CellEditorLocator {
        private WrapLabel wrapLabel;

        public TextCellEditorLocator (WrapLabel wrapLabel) {
            this.wrapLabel = wrapLabel;
        }

        public WrapLabel getWrapLabel () {
            return wrapLabel;
        }

        public void relocate (CellEditor celleditor) {
            Text text = (Text) celleditor.getControl ();
            Rectangle rect = getWrapLabel ().getTextBounds ().getCopy ();
            getWrapLabel ().translateToAbsolute (rect);
            if (getWrapLabel ().isTextWrapped () && getWrapLabel ().getText ().length () > 0) {
                rect.setSize (new Dimension (text.computeSize (rect.width, org.eclipse.swt.SWT.DEFAULT)));
            } else {
                int avr = FigureUtilities.getFontMetrics (text.getFont ()).getAverageCharWidth ();
                rect.setSize (new Dimension (text.computeSize (org.eclipse.swt.SWT.DEFAULT, org.eclipse.swt.SWT.DEFAULT)).expand (avr * 2, 0));
            }
            if (! rect.equals (new Rectangle (text.getBounds ()))) {
                text.setBounds (rect.x, rect.y, rect.width, rect.height);
            }
        }

    }

    private static class LabelCellEditorLocator implements CellEditorLocator {
        private Label label;

        public LabelCellEditorLocator (Label label) {
            this.label = label;
        }

        public Label getLabel () {
            return label;
        }

        public void relocate (CellEditor celleditor) {
            Text text = (Text) celleditor.getControl ();
            Rectangle rect = getLabel ().getTextBounds ().getCopy ();
            getLabel ().translateToAbsolute (rect);
            int avr = FigureUtilities.getFontMetrics (text.getFont ()).getAverageCharWidth ();
            rect.setSize (new Dimension (text.computeSize (org.eclipse.swt.SWT.DEFAULT, org.eclipse.swt.SWT.DEFAULT)).expand (avr * 2, 0));
            if (! rect.equals (new Rectangle (text.getBounds ()))) {
                text.setBounds (rect.x, rect.y, rect.width, rect.height);
            }
        }

    }

}

