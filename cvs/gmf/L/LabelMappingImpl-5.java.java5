package org.eclipse.gmf.mappings.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EAttribute;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.eclipse.gmf.gmfgraph.DiagramLabel;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.LabelMapping;

import org.eclipse.gmf.mappings.MappingEntry;

public class LabelMappingImpl extends EObjectImpl implements LabelMapping {
    protected DiagramLabel diagramLabel = null;
    protected EList features = null;
    protected static final boolean READ_ONLY_EDEFAULT = false;
    protected boolean readOnly = READ_ONLY_EDEFAULT;
    protected static final String VIEW_PATTERN_EDEFAULT = null;
    protected String viewPattern = VIEW_PATTERN_EDEFAULT;
    protected static final String EDIT_PATTERN_EDEFAULT = null;
    protected String editPattern = EDIT_PATTERN_EDEFAULT;

    protected LabelMappingImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getLabelMapping ();
    }

    public DiagramLabel getDiagramLabel () {
        if (diagramLabel != null && diagramLabel.eIsProxy ()) {
            InternalEObject oldDiagramLabel = (InternalEObject) diagramLabel;
            diagramLabel = (DiagramLabel) eResolveProxy (oldDiagramLabel);
            if (diagramLabel != oldDiagramLabel) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.LABEL_MAPPING__DIAGRAM_LABEL, oldDiagramLabel, diagramLabel));

            }
        }
        return diagramLabel;
    }

    public DiagramLabel basicGetDiagramLabel () {
        return diagramLabel;
    }

    public void setDiagramLabel (DiagramLabel newDiagramLabel) {
        DiagramLabel oldDiagramLabel = diagramLabel;
        diagramLabel = newDiagramLabel;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.LABEL_MAPPING__DIAGRAM_LABEL, oldDiagramLabel, diagramLabel));

    }

    public EList getFeatures () {
        if (features == null) {
            features = new EObjectResolvingEList (EAttribute.class, this, GMFMapPackage.LABEL_MAPPING__FEATURES);
        }
        return features;
    }

    public boolean isReadOnly () {
        return readOnly;
    }

    public void setReadOnly (boolean newReadOnly) {
        boolean oldReadOnly = readOnly;
        readOnly = newReadOnly;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.LABEL_MAPPING__READ_ONLY, oldReadOnly, readOnly));

    }

    public String getViewPattern () {
        return viewPattern;
    }

    public void setViewPattern (String newViewPattern) {
        String oldViewPattern = viewPattern;
        viewPattern = newViewPattern;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.LABEL_MAPPING__VIEW_PATTERN, oldViewPattern, viewPattern));

    }

    public String getEditPattern () {
        return editPattern;
    }

    public void setEditPattern (String newEditPattern) {
        String oldEditPattern = editPattern;
        editPattern = newEditPattern;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.LABEL_MAPPING__EDIT_PATTERN, oldEditPattern, editPattern));

    }

    public MappingEntry getMapEntry () {
        if (eContainerFeatureID != GMFMapPackage.LABEL_MAPPING__MAP_ENTRY) return null;

        return (MappingEntry) eContainer ();
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFMapPackage.LABEL_MAPPING__MAP_ENTRY :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFMapPackage.LABEL_MAPPING__MAP_ENTRY, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFMapPackage.LABEL_MAPPING__MAP_ENTRY :
                return eBasicSetContainer (null, GMFMapPackage.LABEL_MAPPING__MAP_ENTRY, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFMapPackage.LABEL_MAPPING__MAP_ENTRY :
                return eInternalContainer ().eInverseRemove (this, GMFMapPackage.MAPPING_ENTRY__LABEL_MAPPINGS, MappingEntry.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFMapPackage.LABEL_MAPPING__DIAGRAM_LABEL :
                if (resolve) return getDiagramLabel ();

                return basicGetDiagramLabel ();
            case GMFMapPackage.LABEL_MAPPING__FEATURES :
                return getFeatures ();
            case GMFMapPackage.LABEL_MAPPING__READ_ONLY :
                return isReadOnly () ? Boolean.TRUE : Boolean.FALSE;
            case GMFMapPackage.LABEL_MAPPING__VIEW_PATTERN :
                return getViewPattern ();
            case GMFMapPackage.LABEL_MAPPING__EDIT_PATTERN :
                return getEditPattern ();
            case GMFMapPackage.LABEL_MAPPING__MAP_ENTRY :
                return getMapEntry ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFMapPackage.LABEL_MAPPING__DIAGRAM_LABEL :
                setDiagramLabel ((DiagramLabel) newValue);
                return;
            case GMFMapPackage.LABEL_MAPPING__FEATURES :
                getFeatures ().clear ();
                getFeatures ().addAll ((Collection) newValue);
                return;
            case GMFMapPackage.LABEL_MAPPING__READ_ONLY :
                setReadOnly (((Boolean) newValue).booleanValue ());
                return;
            case GMFMapPackage.LABEL_MAPPING__VIEW_PATTERN :
                setViewPattern ((String) newValue);
                return;
            case GMFMapPackage.LABEL_MAPPING__EDIT_PATTERN :
                setEditPattern ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFMapPackage.LABEL_MAPPING__DIAGRAM_LABEL :
                setDiagramLabel ((DiagramLabel) null);
                return;
            case GMFMapPackage.LABEL_MAPPING__FEATURES :
                getFeatures ().clear ();
                return;
            case GMFMapPackage.LABEL_MAPPING__READ_ONLY :
                setReadOnly (READ_ONLY_EDEFAULT);
                return;
            case GMFMapPackage.LABEL_MAPPING__VIEW_PATTERN :
                setViewPattern (VIEW_PATTERN_EDEFAULT);
                return;
            case GMFMapPackage.LABEL_MAPPING__EDIT_PATTERN :
                setEditPattern (EDIT_PATTERN_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFMapPackage.LABEL_MAPPING__DIAGRAM_LABEL :
                return diagramLabel != null;
            case GMFMapPackage.LABEL_MAPPING__FEATURES :
                return features != null && ! features.isEmpty ();
            case GMFMapPackage.LABEL_MAPPING__READ_ONLY :
                return readOnly != READ_ONLY_EDEFAULT;
            case GMFMapPackage.LABEL_MAPPING__VIEW_PATTERN :
                return VIEW_PATTERN_EDEFAULT == null ? viewPattern != null : ! VIEW_PATTERN_EDEFAULT.equals (viewPattern);
            case GMFMapPackage.LABEL_MAPPING__EDIT_PATTERN :
                return EDIT_PATTERN_EDEFAULT == null ? editPattern != null : ! EDIT_PATTERN_EDEFAULT.equals (editPattern);
            case GMFMapPackage.LABEL_MAPPING__MAP_ENTRY :
                return getMapEntry () != null;
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (readOnly: ");
        result.append (readOnly);
        result.append (", viewPattern: ");
        result.append (viewPattern);
        result.append (", editPattern: ");
        result.append (editPattern);
        result.append (')');
        return result.toString ();
    }

}

