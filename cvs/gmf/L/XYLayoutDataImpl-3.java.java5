package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.gmfgraph.Dimension;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.Layoutable;

import org.eclipse.gmf.gmfgraph.Point;

import org.eclipse.gmf.gmfgraph.XYLayoutData;

public class XYLayoutDataImpl extends EObjectImpl implements XYLayoutData {
    protected Point topLeft = null;
    protected Dimension size = null;

    protected XYLayoutDataImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getXYLayoutData ();
    }

    public Layoutable getOwner () {
        if (eContainerFeatureID != GMFGraphPackage.XY_LAYOUT_DATA__OWNER) return null;

        return (Layoutable) eContainer ();
    }

    public NotificationChain basicSetOwner (Layoutable newOwner, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newOwner, GMFGraphPackage.XY_LAYOUT_DATA__OWNER, msgs);
        return msgs;
    }

    public void setOwner (Layoutable newOwner) {
        if (newOwner != eInternalContainer () || (eContainerFeatureID != GMFGraphPackage.XY_LAYOUT_DATA__OWNER && newOwner != null)) {
            if (EcoreUtil.isAncestor (this, newOwner)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newOwner != null) msgs = ((InternalEObject) newOwner).eInverseAdd (this, GMFGraphPackage.LAYOUTABLE__LAYOUT_DATA, Layoutable.class, msgs);

            msgs = basicSetOwner (newOwner, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.XY_LAYOUT_DATA__OWNER, newOwner, newOwner));

    }

    public Point getTopLeft () {
        return topLeft;
    }

    public NotificationChain basicSetTopLeft (Point newTopLeft, NotificationChain msgs) {
        Point oldTopLeft = topLeft;
        topLeft = newTopLeft;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.XY_LAYOUT_DATA__TOP_LEFT, oldTopLeft, newTopLeft);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setTopLeft (Point newTopLeft) {
        if (newTopLeft != topLeft) {
            NotificationChain msgs = null;
            if (topLeft != null) msgs = ((InternalEObject) topLeft).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.XY_LAYOUT_DATA__TOP_LEFT, null, msgs);

            if (newTopLeft != null) msgs = ((InternalEObject) newTopLeft).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.XY_LAYOUT_DATA__TOP_LEFT, null, msgs);

            msgs = basicSetTopLeft (newTopLeft, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.XY_LAYOUT_DATA__TOP_LEFT, newTopLeft, newTopLeft));

    }

    public Dimension getSize () {
        return size;
    }

    public NotificationChain basicSetSize (Dimension newSize, NotificationChain msgs) {
        Dimension oldSize = size;
        size = newSize;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.XY_LAYOUT_DATA__SIZE, oldSize, newSize);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setSize (Dimension newSize) {
        if (newSize != size) {
            NotificationChain msgs = null;
            if (size != null) msgs = ((InternalEObject) size).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.XY_LAYOUT_DATA__SIZE, null, msgs);

            if (newSize != null) msgs = ((InternalEObject) newSize).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.XY_LAYOUT_DATA__SIZE, null, msgs);

            msgs = basicSetSize (newSize, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.XY_LAYOUT_DATA__SIZE, newSize, newSize));

    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.XY_LAYOUT_DATA__OWNER :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetOwner ((Layoutable) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.XY_LAYOUT_DATA__OWNER :
                return basicSetOwner (null, msgs);
            case GMFGraphPackage.XY_LAYOUT_DATA__TOP_LEFT :
                return basicSetTopLeft (null, msgs);
            case GMFGraphPackage.XY_LAYOUT_DATA__SIZE :
                return basicSetSize (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGraphPackage.XY_LAYOUT_DATA__OWNER :
                return eInternalContainer ().eInverseRemove (this, GMFGraphPackage.LAYOUTABLE__LAYOUT_DATA, Layoutable.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.XY_LAYOUT_DATA__OWNER :
                return getOwner ();
            case GMFGraphPackage.XY_LAYOUT_DATA__TOP_LEFT :
                return getTopLeft ();
            case GMFGraphPackage.XY_LAYOUT_DATA__SIZE :
                return getSize ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.XY_LAYOUT_DATA__OWNER :
                setOwner ((Layoutable) newValue);
                return;
            case GMFGraphPackage.XY_LAYOUT_DATA__TOP_LEFT :
                setTopLeft ((Point) newValue);
                return;
            case GMFGraphPackage.XY_LAYOUT_DATA__SIZE :
                setSize ((Dimension) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.XY_LAYOUT_DATA__OWNER :
                setOwner ((Layoutable) null);
                return;
            case GMFGraphPackage.XY_LAYOUT_DATA__TOP_LEFT :
                setTopLeft ((Point) null);
                return;
            case GMFGraphPackage.XY_LAYOUT_DATA__SIZE :
                setSize ((Dimension) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.XY_LAYOUT_DATA__OWNER :
                return getOwner () != null;
            case GMFGraphPackage.XY_LAYOUT_DATA__TOP_LEFT :
                return topLeft != null;
            case GMFGraphPackage.XY_LAYOUT_DATA__SIZE :
                return size != null;
        }
        return super.eIsSet (featureID);
    }

}

