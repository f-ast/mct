package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.codegen.gmfgen.ColorAttributes;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

public class ColorAttributesImpl extends EObjectImpl implements ColorAttributes {
    protected static final String FOREGROUND_COLOR_EDEFAULT = null;
    protected String foregroundColor = FOREGROUND_COLOR_EDEFAULT;
    protected static final String BACKGROUND_COLOR_EDEFAULT = null;
    protected String backgroundColor = BACKGROUND_COLOR_EDEFAULT;

    protected ColorAttributesImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getColorAttributes ();
    }

    public String getForegroundColor () {
        return foregroundColor;
    }

    public void setForegroundColor (String newForegroundColor) {
        String oldForegroundColor = foregroundColor;
        foregroundColor = newForegroundColor;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.COLOR_ATTRIBUTES__FOREGROUND_COLOR, oldForegroundColor, foregroundColor));

    }

    public String getBackgroundColor () {
        return backgroundColor;
    }

    public void setBackgroundColor (String newBackgroundColor) {
        String oldBackgroundColor = backgroundColor;
        backgroundColor = newBackgroundColor;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.COLOR_ATTRIBUTES__BACKGROUND_COLOR, oldBackgroundColor, backgroundColor));

    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.COLOR_ATTRIBUTES__FOREGROUND_COLOR :
                return getForegroundColor ();
            case GMFGenPackage.COLOR_ATTRIBUTES__BACKGROUND_COLOR :
                return getBackgroundColor ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.COLOR_ATTRIBUTES__FOREGROUND_COLOR :
                setForegroundColor ((String) newValue);
                return;
            case GMFGenPackage.COLOR_ATTRIBUTES__BACKGROUND_COLOR :
                setBackgroundColor ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.COLOR_ATTRIBUTES__FOREGROUND_COLOR :
                setForegroundColor (FOREGROUND_COLOR_EDEFAULT);
                return;
            case GMFGenPackage.COLOR_ATTRIBUTES__BACKGROUND_COLOR :
                setBackgroundColor (BACKGROUND_COLOR_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.COLOR_ATTRIBUTES__FOREGROUND_COLOR :
                return FOREGROUND_COLOR_EDEFAULT == null ? foregroundColor != null : ! FOREGROUND_COLOR_EDEFAULT.equals (foregroundColor);
            case GMFGenPackage.COLOR_ATTRIBUTES__BACKGROUND_COLOR :
                return BACKGROUND_COLOR_EDEFAULT == null ? backgroundColor != null : ! BACKGROUND_COLOR_EDEFAULT.equals (backgroundColor);
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (foregroundColor: ");
        result.append (foregroundColor);
        result.append (", backgroundColor: ");
        result.append (backgroundColor);
        result.append (')');
        return result.toString ();
    }

}

