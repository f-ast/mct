package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import java.util.Iterator;

import java.util.LinkedHashMap;

import java.util.LinkedList;

import java.util.List;

import java.util.Map;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.BasicEList;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeUniqueEList;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.BatchValidation;

import org.eclipse.gmf.codegen.gmfgen.EditPartCandies;

import org.eclipse.gmf.codegen.gmfgen.EditorCandies;

import org.eclipse.gmf.codegen.gmfgen.FeatureLinkModelFacet;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenChildNode;

import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;

import org.eclipse.gmf.codegen.gmfgen.GenCompartment;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.GenDiagramPreferences;

import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

import org.eclipse.gmf.codegen.gmfgen.GenLink;

import org.eclipse.gmf.codegen.gmfgen.GenNode;

import org.eclipse.gmf.codegen.gmfgen.GenTopLevelNode;

import org.eclipse.gmf.codegen.gmfgen.LinkConstraints;

import org.eclipse.gmf.codegen.gmfgen.MeasurementUnit;

import org.eclipse.gmf.codegen.gmfgen.PackageNames;

import org.eclipse.gmf.codegen.gmfgen.Palette;

import org.eclipse.gmf.codegen.gmfgen.ProviderClassNames;

import org.eclipse.gmf.codegen.gmfgen.ProviderPriority;

import org.eclipse.gmf.codegen.gmfgen.Shortcuts;

import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;

import org.eclipse.gmf.codegen.gmfgen.TypeModelFacet;

import org.eclipse.gmf.common.codegen.ImportAssistant;

public class GenDiagramImpl extends GenCommonBaseImpl implements GenDiagram {
    protected static final String CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT = null;
    protected String canonicalEditPolicyClassName = CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT;
    protected static final String EDIT_COMMANDS_PACKAGE_NAME_EDEFAULT = null;
    protected String editCommandsPackageName = EDIT_COMMANDS_PACKAGE_NAME_EDEFAULT;
    protected static final String EDIT_HELPERS_PACKAGE_NAME_EDEFAULT = null;
    protected String editHelpersPackageName = EDIT_HELPERS_PACKAGE_NAME_EDEFAULT;
    protected static final String EDIT_PARTS_PACKAGE_NAME_EDEFAULT = null;
    protected String editPartsPackageName = EDIT_PARTS_PACKAGE_NAME_EDEFAULT;
    protected static final String EDIT_POLICIES_PACKAGE_NAME_EDEFAULT = null;
    protected String editPoliciesPackageName = EDIT_POLICIES_PACKAGE_NAME_EDEFAULT;
    protected static final String PREFERENCES_PACKAGE_NAME_EDEFAULT = null;
    protected String preferencesPackageName = PREFERENCES_PACKAGE_NAME_EDEFAULT;
    protected static final String PROVIDERS_PACKAGE_NAME_EDEFAULT = null;
    protected String providersPackageName = PROVIDERS_PACKAGE_NAME_EDEFAULT;
    protected static final String NOTATION_VIEW_FACTORIES_PACKAGE_NAME_EDEFAULT = null;
    protected String notationViewFactoriesPackageName = NOTATION_VIEW_FACTORIES_PACKAGE_NAME_EDEFAULT;
    protected static final String ELEMENT_TYPES_CLASS_NAME_EDEFAULT = null;
    protected String elementTypesClassName = ELEMENT_TYPES_CLASS_NAME_EDEFAULT;
    protected static final String NOTATION_VIEW_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String notationViewProviderClassName = NOTATION_VIEW_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final ProviderPriority NOTATION_VIEW_PROVIDER_PRIORITY_EDEFAULT = ProviderPriority.LOWEST_LITERAL;
    protected ProviderPriority notationViewProviderPriority = NOTATION_VIEW_PROVIDER_PRIORITY_EDEFAULT;
    protected static final String EDIT_PART_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String editPartProviderClassName = EDIT_PART_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final ProviderPriority EDIT_PART_PROVIDER_PRIORITY_EDEFAULT = ProviderPriority.LOWEST_LITERAL;
    protected ProviderPriority editPartProviderPriority = EDIT_PART_PROVIDER_PRIORITY_EDEFAULT;
    protected static final String MODELING_ASSISTANT_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String modelingAssistantProviderClassName = MODELING_ASSISTANT_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final ProviderPriority MODELING_ASSISTANT_PROVIDER_PRIORITY_EDEFAULT = ProviderPriority.LOWEST_LITERAL;
    protected ProviderPriority modelingAssistantProviderPriority = MODELING_ASSISTANT_PROVIDER_PRIORITY_EDEFAULT;
    protected static final String ICON_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String iconProviderClassName = ICON_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final ProviderPriority ICON_PROVIDER_PRIORITY_EDEFAULT = ProviderPriority.LOWEST_LITERAL;
    protected ProviderPriority iconProviderPriority = ICON_PROVIDER_PRIORITY_EDEFAULT;
    protected static final String PARSER_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String parserProviderClassName = PARSER_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final ProviderPriority PARSER_PROVIDER_PRIORITY_EDEFAULT = ProviderPriority.LOWEST_LITERAL;
    protected ProviderPriority parserProviderPriority = PARSER_PROVIDER_PRIORITY_EDEFAULT;
    protected static final String ABSTRACT_PARSER_CLASS_NAME_EDEFAULT = null;
    protected String abstractParserClassName = ABSTRACT_PARSER_CLASS_NAME_EDEFAULT;
    protected static final String STRUCTURAL_FEATURE_PARSER_CLASS_NAME_EDEFAULT = null;
    protected String structuralFeatureParserClassName = STRUCTURAL_FEATURE_PARSER_CLASS_NAME_EDEFAULT;
    protected static final String STRUCTURAL_FEATURES_PARSER_CLASS_NAME_EDEFAULT = null;
    protected String structuralFeaturesParserClassName = STRUCTURAL_FEATURES_PARSER_CLASS_NAME_EDEFAULT;
    protected static final String CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String contributionItemProviderClassName = CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final String REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME_EDEFAULT = null;
    protected String reorientConnectionViewCommandClassName = REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME_EDEFAULT;
    protected static final String BASE_EDIT_HELPER_CLASS_NAME_EDEFAULT = null;
    protected String baseEditHelperClassName = BASE_EDIT_HELPER_CLASS_NAME_EDEFAULT;
    protected static final String EDIT_PART_FACTORY_CLASS_NAME_EDEFAULT = null;
    protected String editPartFactoryClassName = EDIT_PART_FACTORY_CLASS_NAME_EDEFAULT;
    protected static final String BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME_EDEFAULT = null;
    protected String baseExternalNodeLabelEditPartClassName = BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME_EDEFAULT;
    protected static final String BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT = null;
    protected String baseItemSemanticEditPolicyClassName = BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT;
    protected static final String BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT = null;
    protected String baseGraphicalNodeEditPolicyClassName = BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT;
    protected static final String TEXT_SELECTION_EDIT_POLICY_CLASS_NAME_EDEFAULT = null;
    protected String textSelectionEditPolicyClassName = TEXT_SELECTION_EDIT_POLICY_CLASS_NAME_EDEFAULT;
    protected static final String TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME_EDEFAULT = null;
    protected String textNonResizableEditPolicyClassName = TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME_EDEFAULT;
    protected static final String CREATION_WIZARD_CLASS_NAME_EDEFAULT = null;
    protected String creationWizardClassName = CREATION_WIZARD_CLASS_NAME_EDEFAULT;
    protected static final String CREATION_WIZARD_PAGE_CLASS_NAME_EDEFAULT = null;
    protected String creationWizardPageClassName = CREATION_WIZARD_PAGE_CLASS_NAME_EDEFAULT;
    protected static final String CREATION_WIZARD_ICON_PATH_EDEFAULT = null;
    protected String creationWizardIconPath = CREATION_WIZARD_ICON_PATH_EDEFAULT;
    protected static final String CREATION_WIZARD_CATEGORY_ID_EDEFAULT = null;
    protected String creationWizardCategoryID = CREATION_WIZARD_CATEGORY_ID_EDEFAULT;
    protected static final String DIAGRAM_EDITOR_UTIL_CLASS_NAME_EDEFAULT = null;
    protected String diagramEditorUtilClassName = DIAGRAM_EDITOR_UTIL_CLASS_NAME_EDEFAULT;
    protected static final String DOCUMENT_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String documentProviderClassName = DOCUMENT_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final String INIT_DIAGRAM_FILE_ACTION_CLASS_NAME_EDEFAULT = null;
    protected String initDiagramFileActionClassName = INIT_DIAGRAM_FILE_ACTION_CLASS_NAME_EDEFAULT;
    protected static final String NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME_EDEFAULT = null;
    protected String newDiagramFileWizardClassName = NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME_EDEFAULT;
    protected static final String MATCHING_STRATEGY_CLASS_NAME_EDEFAULT = null;
    protected String matchingStrategyClassName = MATCHING_STRATEGY_CLASS_NAME_EDEFAULT;
    protected static final String VISUAL_ID_REGISTRY_CLASS_NAME_EDEFAULT = null;
    protected String visualIDRegistryClassName = VISUAL_ID_REGISTRY_CLASS_NAME_EDEFAULT;
    protected static final String ELEMENT_CHOOSER_CLASS_NAME_EDEFAULT = null;
    protected String elementChooserClassName = ELEMENT_CHOOSER_CLASS_NAME_EDEFAULT;
    protected static final String LOAD_RESOURCE_ACTION_CLASS_NAME_EDEFAULT = null;
    protected String loadResourceActionClassName = LOAD_RESOURCE_ACTION_CLASS_NAME_EDEFAULT;
    protected static final String EDITING_DOMAIN_ID_EDEFAULT = null;
    protected String editingDomainID = EDITING_DOMAIN_ID_EDEFAULT;
    protected static final String SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String shortcutsDecoratorProviderClassName = SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final ProviderPriority SHORTCUTS_DECORATOR_PROVIDER_PRIORITY_EDEFAULT = ProviderPriority.LOWEST_LITERAL;
    protected ProviderPriority shortcutsDecoratorProviderPriority = SHORTCUTS_DECORATOR_PROVIDER_PRIORITY_EDEFAULT;
    protected static final String CREATE_SHORTCUT_ACTION_CLASS_NAME_EDEFAULT = null;
    protected String createShortcutActionClassName = CREATE_SHORTCUT_ACTION_CLASS_NAME_EDEFAULT;
    protected static final String CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME_EDEFAULT = null;
    protected String createShortcutDecorationsCommandClassName = CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME_EDEFAULT;
    protected static final String SHORTCUT_PROPERTY_TESTER_CLASS_NAME_EDEFAULT = null;
    protected String shortcutPropertyTesterClassName = SHORTCUT_PROPERTY_TESTER_CLASS_NAME_EDEFAULT;
    protected EList containsShortcutsTo = null;
    protected EList shortcutsProvidedFor = null;
    protected static final String VALIDATION_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String validationProviderClassName = VALIDATION_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final ProviderPriority VALIDATION_PROVIDER_PRIORITY_EDEFAULT = ProviderPriority.LOWEST_LITERAL;
    protected ProviderPriority validationProviderPriority = VALIDATION_PROVIDER_PRIORITY_EDEFAULT;
    protected static final String MARKER_NAVIGATION_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String markerNavigationProviderClassName = MARKER_NAVIGATION_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final ProviderPriority MARKER_NAVIGATION_PROVIDER_PRIORITY_EDEFAULT = ProviderPriority.LOWEST_LITERAL;
    protected ProviderPriority markerNavigationProviderPriority = MARKER_NAVIGATION_PROVIDER_PRIORITY_EDEFAULT;
    protected static final boolean VALIDATION_ENABLED_EDEFAULT = false;
    protected boolean validationEnabled = VALIDATION_ENABLED_EDEFAULT;
    protected static final String METRIC_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String metricProviderClassName = METRIC_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final ProviderPriority METRIC_PROVIDER_PRIORITY_EDEFAULT = ProviderPriority.LOWEST_LITERAL;
    protected ProviderPriority metricProviderPriority = METRIC_PROVIDER_PRIORITY_EDEFAULT;
    protected static final String VALIDATION_DECORATOR_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String validationDecoratorProviderClassName = VALIDATION_DECORATOR_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final boolean VALIDATION_DECORATORS_EDEFAULT = false;
    protected boolean validationDecorators = VALIDATION_DECORATORS_EDEFAULT;
    protected static final ProviderPriority VALIDATION_DECORATOR_PROVIDER_PRIORITY_EDEFAULT = ProviderPriority.LOWEST_LITERAL;
    protected ProviderPriority validationDecoratorProviderPriority = VALIDATION_DECORATOR_PROVIDER_PRIORITY_EDEFAULT;
    protected static final boolean LIVE_VALIDATION_UI_FEEDBACK_EDEFAULT = false;
    protected boolean liveValidationUIFeedback = LIVE_VALIDATION_UI_FEEDBACK_EDEFAULT;
    protected static final String UNITS_EDEFAULT = "Pixel";
    protected String units = UNITS_EDEFAULT;
    protected GenClass domainDiagramElement = null;
    protected EList childNodes = null;
    protected EList topLevelNodes = null;
    protected EList links = null;
    protected EList compartments = null;
    protected Palette palette = null;
    protected static final boolean SYNCHRONIZED_EDEFAULT = true;
    protected boolean synchronized_ = SYNCHRONIZED_EDEFAULT;
    protected GenDiagramPreferences preferences = null;

    protected GenDiagramImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenDiagram ();
    }

    public EList getContainedNodes () {
        List topLevelNodes = getTopLevelNodes ();
        return new BasicEList.UnmodifiableEList (topLevelNodes.size (), topLevelNodes.toArray ());
    }

    public GenClass getDomainDiagramElement () {
        if (domainDiagramElement != null && domainDiagramElement.eIsProxy ()) {
            InternalEObject oldDomainDiagramElement = (InternalEObject) domainDiagramElement;
            domainDiagramElement = (GenClass) eResolveProxy (oldDomainDiagramElement);
            if (domainDiagramElement != oldDomainDiagramElement) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.GEN_DIAGRAM__DOMAIN_DIAGRAM_ELEMENT, oldDomainDiagramElement, domainDiagramElement));

            }
        }
        return domainDiagramElement;
    }

    public GenClass basicGetDomainDiagramElement () {
        return domainDiagramElement;
    }

    public void setDomainDiagramElement (GenClass newDomainDiagramElement) {
        GenClass oldDomainDiagramElement = domainDiagramElement;
        domainDiagramElement = newDomainDiagramElement;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__DOMAIN_DIAGRAM_ELEMENT, oldDomainDiagramElement, domainDiagramElement));

    }

    public EList getChildNodes () {
        if (childNodes == null) {
            childNodes = new EObjectContainmentWithInverseEList (GenChildNode.class, this, GMFGenPackage.GEN_DIAGRAM__CHILD_NODES, GMFGenPackage.GEN_CHILD_NODE__DIAGRAM);
        }
        return childNodes;
    }

    public EList getTopLevelNodes () {
        if (topLevelNodes == null) {
            topLevelNodes = new EObjectContainmentWithInverseEList (GenTopLevelNode.class, this, GMFGenPackage.GEN_DIAGRAM__TOP_LEVEL_NODES, GMFGenPackage.GEN_TOP_LEVEL_NODE__DIAGRAM);
        }
        return topLevelNodes;
    }

    public EList getLinks () {
        if (links == null) {
            links = new EObjectContainmentWithInverseEList (GenLink.class, this, GMFGenPackage.GEN_DIAGRAM__LINKS, GMFGenPackage.GEN_LINK__DIAGRAM);
        }
        return links;
    }

    public EList getCompartments () {
        if (compartments == null) {
            compartments = new EObjectContainmentWithInverseEList (GenCompartment.class, this, GMFGenPackage.GEN_DIAGRAM__COMPARTMENTS, GMFGenPackage.GEN_COMPARTMENT__DIAGRAM);
        }
        return compartments;
    }

    public Palette getPalette () {
        return palette;
    }

    public NotificationChain basicSetPalette (Palette newPalette, NotificationChain msgs) {
        Palette oldPalette = palette;
        palette = newPalette;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__PALETTE, oldPalette, newPalette);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setPalette (Palette newPalette) {
        if (newPalette != palette) {
            NotificationChain msgs = null;
            if (palette != null) msgs = ((InternalEObject) palette).eInverseRemove (this, GMFGenPackage.PALETTE__DIAGRAM, Palette.class, msgs);

            if (newPalette != null) msgs = ((InternalEObject) newPalette).eInverseAdd (this, GMFGenPackage.PALETTE__DIAGRAM, Palette.class, msgs);

            msgs = basicSetPalette (newPalette, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__PALETTE, newPalette, newPalette));

    }

    public boolean isSynchronized () {
        return synchronized_;
    }

    public void setSynchronized (boolean newSynchronized) {
        boolean oldSynchronized = synchronized_;
        synchronized_ = newSynchronized;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__SYNCHRONIZED, oldSynchronized, synchronized_));

    }

    public GenDiagramPreferences getPreferences () {
        return preferences;
    }

    public NotificationChain basicSetPreferences (GenDiagramPreferences newPreferences, NotificationChain msgs) {
        GenDiagramPreferences oldPreferences = preferences;
        preferences = newPreferences;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__PREFERENCES, oldPreferences, newPreferences);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setPreferences (GenDiagramPreferences newPreferences) {
        if (newPreferences != preferences) {
            NotificationChain msgs = null;
            if (preferences != null) msgs = ((InternalEObject) preferences).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_DIAGRAM__PREFERENCES, null, msgs);

            if (newPreferences != null) msgs = ((InternalEObject) newPreferences).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_DIAGRAM__PREFERENCES, null, msgs);

            msgs = basicSetPreferences (newPreferences, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__PREFERENCES, newPreferences, newPreferences));

    }

    public String getEditCommandsPackageNameGen () {
        return editCommandsPackageName;
    }

    public String getEditCommandsPackageName () {
        String value = getEditCommandsPackageNameGen ();
        if (isEmpty (value)) {
            value = getEditorGen ().getPackageNamePrefix () + ".edit.commands";
        }
        return value;
    }

    public void setEditCommandsPackageName (String newEditCommandsPackageName) {
        String oldEditCommandsPackageName = editCommandsPackageName;
        editCommandsPackageName = newEditCommandsPackageName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__EDIT_COMMANDS_PACKAGE_NAME, oldEditCommandsPackageName, editCommandsPackageName));

    }

    public String getEditHelpersPackageNameGen () {
        return editHelpersPackageName;
    }

    public String getEditHelpersPackageName () {
        String value = getEditHelpersPackageNameGen ();
        if (isEmpty (value)) {
            value = getEditorGen ().getPackageNamePrefix () + ".edit.helpers";
        }
        return value;
    }

    public void setEditHelpersPackageName (String newEditHelpersPackageName) {
        String oldEditHelpersPackageName = editHelpersPackageName;
        editHelpersPackageName = newEditHelpersPackageName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__EDIT_HELPERS_PACKAGE_NAME, oldEditHelpersPackageName, editHelpersPackageName));

    }

    public String getEditPartsPackageNameGen () {
        return editPartsPackageName;
    }

    public String getEditPartsPackageName () {
        String value = getEditPartsPackageNameGen ();
        if (isEmpty (value)) {
            value = getEditorGen ().getPackageNamePrefix () + ".edit.parts";
        }
        return value;
    }

    public void setEditPartsPackageName (String newEditPartsPackageName) {
        String oldEditPartsPackageName = editPartsPackageName;
        editPartsPackageName = newEditPartsPackageName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__EDIT_PARTS_PACKAGE_NAME, oldEditPartsPackageName, editPartsPackageName));

    }

    public String getEditPoliciesPackageNameGen () {
        return editPoliciesPackageName;
    }

    public String getEditPoliciesPackageName () {
        String value = getEditPoliciesPackageNameGen ();
        if (isEmpty (value)) {
            value = getEditorGen ().getPackageNamePrefix () + ".edit.policies";
        }
        return value;
    }

    public void setEditPoliciesPackageName (String newEditPoliciesPackageName) {
        String oldEditPoliciesPackageName = editPoliciesPackageName;
        editPoliciesPackageName = newEditPoliciesPackageName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__EDIT_POLICIES_PACKAGE_NAME, oldEditPoliciesPackageName, editPoliciesPackageName));

    }

    public String getPreferencesPackageNameGen () {
        return preferencesPackageName;
    }

    public String getPreferencesPackageName () {
        String value = getPreferencesPackageNameGen ();
        if (isEmpty (value)) {
            value = getEditorGen ().getPackageNamePrefix () + ".preferences";
        }
        return value;
    }

    public void setPreferencesPackageName (String newPreferencesPackageName) {
        String oldPreferencesPackageName = preferencesPackageName;
        preferencesPackageName = newPreferencesPackageName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__PREFERENCES_PACKAGE_NAME, oldPreferencesPackageName, preferencesPackageName));

    }

    public String getClassNamePrefix () {
        if (getDomainDiagramElement () != null) {
            String name = getDomainDiagramElement ().getName ();
            if (! isEmpty (name)) {
                return getValidClassName (name);
            }
        }
        return CLASS_NAME_PREFIX;
    }

    public GenDiagram getDiagram () {
        return this;
    }

    public String getVisualIDRegistryClassNameGen () {
        return visualIDRegistryClassName;
    }

    public String getVisualIDRegistryClassName () {
        String value = getVisualIDRegistryClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "VisualIDRegistry";
        }
        return value;
    }

    public void setVisualIDRegistryClassName (String newVisualIDRegistryClassName) {
        String oldVisualIDRegistryClassName = visualIDRegistryClassName;
        visualIDRegistryClassName = newVisualIDRegistryClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__VISUAL_ID_REGISTRY_CLASS_NAME, oldVisualIDRegistryClassName, visualIDRegistryClassName));

    }

    public String getCreateShortcutActionClassNameGen () {
        return createShortcutActionClassName;
    }

    public String getCreateShortcutActionClassName () {
        String value = getCreateShortcutActionClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "CreateShortcutAction";
        }
        return value;
    }

    public void setCreateShortcutActionClassName (String newCreateShortcutActionClassName) {
        String oldCreateShortcutActionClassName = createShortcutActionClassName;
        createShortcutActionClassName = newCreateShortcutActionClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_ACTION_CLASS_NAME, oldCreateShortcutActionClassName, createShortcutActionClassName));

    }

    public String getCreateShortcutDecorationsCommandClassNameGen () {
        return createShortcutDecorationsCommandClassName;
    }

    public String getCreateShortcutDecorationsCommandClassName () {
        String value = getCreateShortcutDecorationsCommandClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "CreateShortcutDecorationsCommand";
        }
        return value;
    }

    public void setCreateShortcutDecorationsCommandClassName (String newCreateShortcutDecorationsCommandClassName) {
        String oldCreateShortcutDecorationsCommandClassName = createShortcutDecorationsCommandClassName;
        createShortcutDecorationsCommandClassName = newCreateShortcutDecorationsCommandClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME, oldCreateShortcutDecorationsCommandClassName, createShortcutDecorationsCommandClassName));

    }

    public String getShortcutPropertyTesterClassNameGen () {
        return shortcutPropertyTesterClassName;
    }

    public String getShortcutPropertyTesterClassName () {
        String value = getShortcutPropertyTesterClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "ShortcutPropertyTester";
        }
        return value;
    }

    public void setShortcutPropertyTesterClassName (String newShortcutPropertyTesterClassName) {
        String oldShortcutPropertyTesterClassName = shortcutPropertyTesterClassName;
        shortcutPropertyTesterClassName = newShortcutPropertyTesterClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__SHORTCUT_PROPERTY_TESTER_CLASS_NAME, oldShortcutPropertyTesterClassName, shortcutPropertyTesterClassName));

    }

    public String getElementChooserClassNameGen () {
        return elementChooserClassName;
    }

    public String getElementChooserClassName () {
        String value = getElementChooserClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "ElementChooserDialog";
        }
        return value;
    }

    public void setElementChooserClassName (String newElementChooserClassName) {
        String oldElementChooserClassName = elementChooserClassName;
        elementChooserClassName = newElementChooserClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__ELEMENT_CHOOSER_CLASS_NAME, oldElementChooserClassName, elementChooserClassName));

    }

    public String getLoadResourceActionClassNameGen () {
        return loadResourceActionClassName;
    }

    public String getLoadResourceActionClassName () {
        String value = getLoadResourceActionClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "LoadResourceAction";
        }
        return value;
    }

    public void setLoadResourceActionClassName (String newLoadResourceActionClassName) {
        String oldLoadResourceActionClassName = loadResourceActionClassName;
        loadResourceActionClassName = newLoadResourceActionClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__LOAD_RESOURCE_ACTION_CLASS_NAME, oldLoadResourceActionClassName, loadResourceActionClassName));

    }

    public String getEditingDomainIDGen () {
        return editingDomainID;
    }

    public String getEditingDomainID () {
        String value = getEditingDomainIDGen ();
        if (isEmpty (value)) {
            value = getEditorGen ().getPlugin ().getID () + ".EditingDomain";
        }
        return value;
    }

    public void setEditingDomainID (String newEditingDomainID) {
        String oldEditingDomainID = editingDomainID;
        editingDomainID = newEditingDomainID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__EDITING_DOMAIN_ID, oldEditingDomainID, editingDomainID));

    }

    public String getShortcutsDecoratorProviderClassNameGen () {
        return shortcutsDecoratorProviderClassName;
    }

    public String getShortcutsDecoratorProviderClassName () {
        String value = getShortcutsDecoratorProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "ShortcutsDecoratorProvider";
        }
        return value;
    }

    public void setShortcutsDecoratorProviderClassName (String newShortcutsDecoratorProviderClassName) {
        String oldShortcutsDecoratorProviderClassName = shortcutsDecoratorProviderClassName;
        shortcutsDecoratorProviderClassName = newShortcutsDecoratorProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME, oldShortcutsDecoratorProviderClassName, shortcutsDecoratorProviderClassName));

    }

    public ProviderPriority getShortcutsDecoratorProviderPriority () {
        return shortcutsDecoratorProviderPriority;
    }

    public void setShortcutsDecoratorProviderPriority (ProviderPriority newShortcutsDecoratorProviderPriority) {
        ProviderPriority oldShortcutsDecoratorProviderPriority = shortcutsDecoratorProviderPriority;
        shortcutsDecoratorProviderPriority = newShortcutsDecoratorProviderPriority == null ? SHORTCUTS_DECORATOR_PROVIDER_PRIORITY_EDEFAULT : newShortcutsDecoratorProviderPriority;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_PRIORITY, oldShortcutsDecoratorProviderPriority, shortcutsDecoratorProviderPriority));

    }

    public String getValidationProviderClassNameGen () {
        return validationProviderClassName;
    }

    public String getValidationProviderClassName () {
        String value = getValidationProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "ValidationProvider";
        }
        return value;
    }

    public void setValidationProviderClassName (String newValidationProviderClassName) {
        String oldValidationProviderClassName = validationProviderClassName;
        validationProviderClassName = newValidationProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_CLASS_NAME, oldValidationProviderClassName, validationProviderClassName));

    }

    public ProviderPriority getValidationProviderPriority () {
        return validationProviderPriority;
    }

    public void setValidationProviderPriority (ProviderPriority newValidationProviderPriority) {
        ProviderPriority oldValidationProviderPriority = validationProviderPriority;
        validationProviderPriority = newValidationProviderPriority == null ? VALIDATION_PROVIDER_PRIORITY_EDEFAULT : newValidationProviderPriority;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_PRIORITY, oldValidationProviderPriority, validationProviderPriority));

    }

    public String getMarkerNavigationProviderClassNameGen () {
        return markerNavigationProviderClassName;
    }

    public String getMarkerNavigationProviderClassName () {
        String value = getMarkerNavigationProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "MarkerNavigationProvider";
        }
        return value;
    }

    public String getMarkerNavigationProviderQualifiedClassName () {
        return getProvidersPackageName () + "." + getMarkerNavigationProviderClassName ();
    }

    public String getMetricProviderQualifiedClassName () {
        return getProvidersPackageName () + "." + getMetricProviderClassName ();
    }

    public String getMetricViewID () {
        return getEditorGen ().getPackageNamePrefix () + ".metricView";
    }

    public String getValidationDecoratorProviderQualifedClassName () {
        return getProvidersPackageName () + "." + getValidationDecoratorProviderClassName ();
    }

    public EList getContainsShortcutsTo () {
        if (containsShortcutsTo == null) {
            containsShortcutsTo = new EDataTypeUniqueEList (String.class, this, GMFGenPackage.GEN_DIAGRAM__CONTAINS_SHORTCUTS_TO);
        }
        return containsShortcutsTo;
    }

    public EList getShortcutsProvidedFor () {
        if (shortcutsProvidedFor == null) {
            shortcutsProvidedFor = new EDataTypeUniqueEList (String.class, this, GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_PROVIDED_FOR);
        }
        return shortcutsProvidedFor;
    }

    public boolean isValidationEnabled () {
        return validationEnabled;
    }

    public void setValidationEnabled (boolean newValidationEnabled) {
        boolean oldValidationEnabled = validationEnabled;
        validationEnabled = newValidationEnabled;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__VALIDATION_ENABLED, oldValidationEnabled, validationEnabled));

    }

    public String getMetricProviderClassNameGen () {
        return metricProviderClassName;
    }

    public String getMetricProviderClassName () {
        String value = getMetricProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "MetricProvider";
        }
        return value;
    }

    public void setMetricProviderClassName (String newMetricProviderClassName) {
        String oldMetricProviderClassName = metricProviderClassName;
        metricProviderClassName = newMetricProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_CLASS_NAME, oldMetricProviderClassName, metricProviderClassName));

    }

    public ProviderPriority getMetricProviderPriority () {
        return metricProviderPriority;
    }

    public void setMetricProviderPriority (ProviderPriority newMetricProviderPriority) {
        ProviderPriority oldMetricProviderPriority = metricProviderPriority;
        metricProviderPriority = newMetricProviderPriority == null ? METRIC_PROVIDER_PRIORITY_EDEFAULT : newMetricProviderPriority;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_PRIORITY, oldMetricProviderPriority, metricProviderPriority));

    }

    public String getValidationDecoratorProviderClassNameGen () {
        return validationDecoratorProviderClassName;
    }

    public String getValidationDecoratorProviderClassName () {
        String value = getValidationDecoratorProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "ValidationDecoratorProvider";
        }
        return value;
    }

    public void setValidationDecoratorProviderClassName (String newValidationDecoratorProviderClassName) {
        String oldValidationDecoratorProviderClassName = validationDecoratorProviderClassName;
        validationDecoratorProviderClassName = newValidationDecoratorProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_CLASS_NAME, oldValidationDecoratorProviderClassName, validationDecoratorProviderClassName));

    }

    public boolean isValidationDecorators () {
        return validationDecorators;
    }

    public void setValidationDecorators (boolean newValidationDecorators) {
        boolean oldValidationDecorators = validationDecorators;
        validationDecorators = newValidationDecorators;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATORS, oldValidationDecorators, validationDecorators));

    }

    public ProviderPriority getValidationDecoratorProviderPriority () {
        return validationDecoratorProviderPriority;
    }

    public void setValidationDecoratorProviderPriority (ProviderPriority newValidationDecoratorProviderPriority) {
        ProviderPriority oldValidationDecoratorProviderPriority = validationDecoratorProviderPriority;
        validationDecoratorProviderPriority = newValidationDecoratorProviderPriority == null ? VALIDATION_DECORATOR_PROVIDER_PRIORITY_EDEFAULT : newValidationDecoratorProviderPriority;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_PRIORITY, oldValidationDecoratorProviderPriority, validationDecoratorProviderPriority));

    }

    public boolean isLiveValidationUIFeedback () {
        return liveValidationUIFeedback;
    }

    public void setLiveValidationUIFeedback (boolean newLiveValidationUIFeedback) {
        boolean oldLiveValidationUIFeedback = liveValidationUIFeedback;
        liveValidationUIFeedback = newLiveValidationUIFeedback;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__LIVE_VALIDATION_UI_FEEDBACK, oldLiveValidationUIFeedback, liveValidationUIFeedback));

    }

    public String getUnits () {
        return units;
    }

    public void setUnits (String newUnits) {
        String oldUnits = units;
        units = newUnits;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__UNITS, oldUnits, units));

    }

    public GenEditorGenerator getEditorGen () {
        if (eContainerFeatureID != GMFGenPackage.GEN_DIAGRAM__EDITOR_GEN) return null;

        return (GenEditorGenerator) eContainer ();
    }

    public String getProvidersPackageNameGen () {
        return providersPackageName;
    }

    public String getProvidersPackageName () {
        String value = getProvidersPackageNameGen ();
        if (isEmpty (value)) {
            value = getEditorGen ().getPackageNamePrefix () + ".providers";
        }
        return value;
    }

    public void setProvidersPackageName (String newProvidersPackageName) {
        String oldProvidersPackageName = providersPackageName;
        providersPackageName = newProvidersPackageName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__PROVIDERS_PACKAGE_NAME, oldProvidersPackageName, providersPackageName));

    }

    public String getNotationViewFactoriesPackageNameGen () {
        return notationViewFactoriesPackageName;
    }

    public String getNotationViewFactoriesPackageName () {
        String value = getNotationViewFactoriesPackageNameGen ();
        if (isEmpty (value)) {
            value = getEditorGen ().getPackageNamePrefix () + ".view.factories";
        }
        return value;
    }

    public void setNotationViewFactoriesPackageName (String newNotationViewFactoriesPackageName) {
        String oldNotationViewFactoriesPackageName = notationViewFactoriesPackageName;
        notationViewFactoriesPackageName = newNotationViewFactoriesPackageName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORIES_PACKAGE_NAME, oldNotationViewFactoriesPackageName, notationViewFactoriesPackageName));

    }

    public String getDocumentProviderClassNameGen () {
        return documentProviderClassName;
    }

    public String getDocumentProviderClassName () {
        String value = getDocumentProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "DocumentProvider";
        }
        return value;
    }

    public void setDocumentProviderClassName (String newDocumentProviderClassName) {
        String oldDocumentProviderClassName = documentProviderClassName;
        documentProviderClassName = newDocumentProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__DOCUMENT_PROVIDER_CLASS_NAME, oldDocumentProviderClassName, documentProviderClassName));

    }

    public String getEditPartFactoryClassNameGen () {
        return editPartFactoryClassName;
    }

    public String getEditPartFactoryClassName () {
        String value = getEditPartFactoryClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "EditPartFactory";
        }
        return value;
    }

    public void setEditPartFactoryClassName (String newEditPartFactoryClassName) {
        String oldEditPartFactoryClassName = editPartFactoryClassName;
        editPartFactoryClassName = newEditPartFactoryClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__EDIT_PART_FACTORY_CLASS_NAME, oldEditPartFactoryClassName, editPartFactoryClassName));

    }

    public String getBaseExternalNodeLabelEditPartClassNameGen () {
        return baseExternalNodeLabelEditPartClassName;
    }

    public String getBaseExternalNodeLabelEditPartClassName () {
        String value = getBaseExternalNodeLabelEditPartClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "ExtNodeLabelEditPart";
        }
        return value;
    }

    public void setBaseExternalNodeLabelEditPartClassName (String newBaseExternalNodeLabelEditPartClassName) {
        String oldBaseExternalNodeLabelEditPartClassName = baseExternalNodeLabelEditPartClassName;
        baseExternalNodeLabelEditPartClassName = newBaseExternalNodeLabelEditPartClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME, oldBaseExternalNodeLabelEditPartClassName, baseExternalNodeLabelEditPartClassName));

    }

    public String getBaseItemSemanticEditPolicyClassNameGen () {
        return baseItemSemanticEditPolicyClassName;
    }

    public String getBaseItemSemanticEditPolicyClassName () {
        String value = getBaseItemSemanticEditPolicyClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "BaseItemSemanticEditPolicy";
        }
        return value;
    }

    public void setBaseItemSemanticEditPolicyClassName (String newBaseItemSemanticEditPolicyClassName) {
        String oldBaseItemSemanticEditPolicyClassName = baseItemSemanticEditPolicyClassName;
        baseItemSemanticEditPolicyClassName = newBaseItemSemanticEditPolicyClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME, oldBaseItemSemanticEditPolicyClassName, baseItemSemanticEditPolicyClassName));

    }

    public String getBaseGraphicalNodeEditPolicyClassNameGen () {
        return baseGraphicalNodeEditPolicyClassName;
    }

    public String getBaseGraphicalNodeEditPolicyClassName () {
        String value = getBaseGraphicalNodeEditPolicyClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "GraphicalNodeEditPolicy";
        }
        return value;
    }

    public void setBaseGraphicalNodeEditPolicyClassName (String newBaseGraphicalNodeEditPolicyClassName) {
        String oldBaseGraphicalNodeEditPolicyClassName = baseGraphicalNodeEditPolicyClassName;
        baseGraphicalNodeEditPolicyClassName = newBaseGraphicalNodeEditPolicyClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME, oldBaseGraphicalNodeEditPolicyClassName, baseGraphicalNodeEditPolicyClassName));

    }

    public String getCanonicalEditPolicyClassNameGen () {
        return canonicalEditPolicyClassName;
    }

    public String getCanonicalEditPolicyClassName () {
        return getValidClassName (getCanonicalEditPolicyClassNameGen (), this, CANONICAL_EDIT_POLICY_SUFFIX);
    }

    public void setCanonicalEditPolicyClassName (String newCanonicalEditPolicyClassName) {
        String oldCanonicalEditPolicyClassName = canonicalEditPolicyClassName;
        canonicalEditPolicyClassName = newCanonicalEditPolicyClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__CANONICAL_EDIT_POLICY_CLASS_NAME, oldCanonicalEditPolicyClassName, canonicalEditPolicyClassName));

    }

    public String getTextSelectionEditPolicyClassNameGen () {
        return textSelectionEditPolicyClassName;
    }

    public String getTextSelectionEditPolicyClassName () {
        String value = getTextSelectionEditPolicyClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "TextSelectionEditPolicy";
        }
        return value;
    }

    public void setTextSelectionEditPolicyClassName (String newTextSelectionEditPolicyClassName) {
        String oldTextSelectionEditPolicyClassName = textSelectionEditPolicyClassName;
        textSelectionEditPolicyClassName = newTextSelectionEditPolicyClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__TEXT_SELECTION_EDIT_POLICY_CLASS_NAME, oldTextSelectionEditPolicyClassName, textSelectionEditPolicyClassName));

    }

    public String getTextNonResizableEditPolicyClassNameGen () {
        return textNonResizableEditPolicyClassName;
    }

    public String getTextNonResizableEditPolicyClassName () {
        String value = getTextNonResizableEditPolicyClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "TextNonResizableEditPolicy";
        }
        return value;
    }

    public void setTextNonResizableEditPolicyClassName (String newTextNonResizableEditPolicyClassName) {
        String oldTextNonResizableEditPolicyClassName = textNonResizableEditPolicyClassName;
        textNonResizableEditPolicyClassName = newTextNonResizableEditPolicyClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME, oldTextNonResizableEditPolicyClassName, textNonResizableEditPolicyClassName));

    }

    public String getElementTypesClassNameGen () {
        return elementTypesClassName;
    }

    public String getElementTypesClassName () {
        String value = getElementTypesClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "ElementTypes";
        }
        return value;
    }

    public void setElementTypesClassName (String newElementTypesClassName) {
        String oldElementTypesClassName = elementTypesClassName;
        elementTypesClassName = newElementTypesClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__ELEMENT_TYPES_CLASS_NAME, oldElementTypesClassName, elementTypesClassName));

    }

    public String getNotationViewProviderClassNameGen () {
        return notationViewProviderClassName;
    }

    public String getNotationViewProviderClassName () {
        String value = getNotationViewProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "ViewProvider";
        }
        return value;
    }

    public void setNotationViewProviderClassName (String newNotationViewProviderClassName) {
        String oldNotationViewProviderClassName = notationViewProviderClassName;
        notationViewProviderClassName = newNotationViewProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_CLASS_NAME, oldNotationViewProviderClassName, notationViewProviderClassName));

    }

    public ProviderPriority getNotationViewProviderPriority () {
        return notationViewProviderPriority;
    }

    public void setNotationViewProviderPriority (ProviderPriority newNotationViewProviderPriority) {
        ProviderPriority oldNotationViewProviderPriority = notationViewProviderPriority;
        notationViewProviderPriority = newNotationViewProviderPriority == null ? NOTATION_VIEW_PROVIDER_PRIORITY_EDEFAULT : newNotationViewProviderPriority;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_PRIORITY, oldNotationViewProviderPriority, notationViewProviderPriority));

    }

    public String getReorientConnectionViewCommandClassNameGen () {
        return reorientConnectionViewCommandClassName;
    }

    public String getReorientConnectionViewCommandClassName () {
        String value = getReorientConnectionViewCommandClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "ReorientConnectionViewCommand";
        }
        return value;
    }

    public void setReorientConnectionViewCommandClassName (String newReorientConnectionViewCommandClassName) {
        String oldReorientConnectionViewCommandClassName = reorientConnectionViewCommandClassName;
        reorientConnectionViewCommandClassName = newReorientConnectionViewCommandClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME, oldReorientConnectionViewCommandClassName, reorientConnectionViewCommandClassName));

    }

    public String getBaseEditHelperClassNameGen () {
        return baseEditHelperClassName;
    }

    public String getBaseEditHelperClassName () {
        String value = getBaseEditHelperClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "BaseEditHelper";
        }
        return value;
    }

    public void setBaseEditHelperClassName (String newBaseEditHelperClassName) {
        String oldBaseEditHelperClassName = baseEditHelperClassName;
        baseEditHelperClassName = newBaseEditHelperClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__BASE_EDIT_HELPER_CLASS_NAME, oldBaseEditHelperClassName, baseEditHelperClassName));

    }

    public String getInitDiagramFileActionClassNameGen () {
        return initDiagramFileActionClassName;
    }

    public String getInitDiagramFileActionClassName () {
        String value = getInitDiagramFileActionClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "InitDiagramFileAction";
        }
        return value;
    }

    public void setInitDiagramFileActionClassName (String newInitDiagramFileActionClassName) {
        String oldInitDiagramFileActionClassName = initDiagramFileActionClassName;
        initDiagramFileActionClassName = newInitDiagramFileActionClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__INIT_DIAGRAM_FILE_ACTION_CLASS_NAME, oldInitDiagramFileActionClassName, initDiagramFileActionClassName));

    }

    public String getNewDiagramFileWizardClassNameGen () {
        return newDiagramFileWizardClassName;
    }

    public String getNewDiagramFileWizardClassName () {
        String value = getNewDiagramFileWizardClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "NewDiagramFileWizard";
        }
        return value;
    }

    public void setNewDiagramFileWizardClassName (String newNewDiagramFileWizardClassName) {
        String oldNewDiagramFileWizardClassName = newDiagramFileWizardClassName;
        newDiagramFileWizardClassName = newNewDiagramFileWizardClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME, oldNewDiagramFileWizardClassName, newDiagramFileWizardClassName));

    }

    public String getCreationWizardClassNameGen () {
        return creationWizardClassName;
    }

    public String getCreationWizardClassName () {
        String value = getCreationWizardClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "CreationWizard";
        }
        return value;
    }

    public void setCreationWizardClassName (String newCreationWizardClassName) {
        String oldCreationWizardClassName = creationWizardClassName;
        creationWizardClassName = newCreationWizardClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CLASS_NAME, oldCreationWizardClassName, creationWizardClassName));

    }

    public String getCreationWizardPageClassNameGen () {
        return creationWizardPageClassName;
    }

    public String getCreationWizardPageClassName () {
        String value = getCreationWizardPageClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "CreationWizardPage";
        }
        return value;
    }

    public void setCreationWizardPageClassName (String newCreationWizardPageClassName) {
        String oldCreationWizardPageClassName = creationWizardPageClassName;
        creationWizardPageClassName = newCreationWizardPageClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_PAGE_CLASS_NAME, oldCreationWizardPageClassName, creationWizardPageClassName));

    }

    public String getCreationWizardIconPathGen () {
        return creationWizardIconPath;
    }

    public String getCreationWizardIconPath () {
        String value = getCreationWizardIconPathGen ();
        if (isEmpty (value)) {
            return createDefaultIconPath ();
        }
        return value;
    }

    static final String REUSE_ICON_VALUE = "{reuseEMFIcon}";

    public String getCreationWizardIconPathX () {
        String value = getCreationWizardIconPath ();
        if (! REUSE_ICON_VALUE.equalsIgnoreCase (value)) {
            return value;
        }
        if (getDomainDiagramElement () != null) {
            GenPackage domainMetaModel = getDomainDiagramElement ().getGenPackage ();
            return "../" + getEditorGen ().getDomainGenModel ().getEditorPluginID () + "/icons/full/obj16/" + domainMetaModel.getPrefix () + "ModelFile.gif";
        } else {
            return createDefaultIconPath ();
        }
    }

    private String createDefaultIconPath () {
        final String stem = getDomainDiagramElement () == null ? "" : getDomainDiagramElement ().getGenPackage ().getPrefix ();
        return "icons/obj16/" + stem + "DiagramFile.gif";
    }

    public void setCreationWizardIconPath (String newCreationWizardIconPath) {
        String oldCreationWizardIconPath = creationWizardIconPath;
        creationWizardIconPath = newCreationWizardIconPath;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_ICON_PATH, oldCreationWizardIconPath, creationWizardIconPath));

    }

    public String getCreationWizardCategoryIDGen () {
        return creationWizardCategoryID;
    }

    public String getCreationWizardCategoryID () {
        String value = getCreationWizardCategoryIDGen ();
        if (isEmpty (value)) {
            value = "org.eclipse.ui.Examples";
        }
        return value;
    }

    public void setCreationWizardCategoryID (String newCreationWizardCategoryID) {
        String oldCreationWizardCategoryID = creationWizardCategoryID;
        creationWizardCategoryID = newCreationWizardCategoryID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CATEGORY_ID, oldCreationWizardCategoryID, creationWizardCategoryID));

    }

    public String getDiagramEditorUtilClassNameGen () {
        return diagramEditorUtilClassName;
    }

    public String getDiagramEditorUtilClassName () {
        String value = getDiagramEditorUtilClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "DiagramEditorUtil";
        }
        return value;
    }

    public void setDiagramEditorUtilClassName (String newDiagramEditorUtilClassName) {
        String oldDiagramEditorUtilClassName = diagramEditorUtilClassName;
        diagramEditorUtilClassName = newDiagramEditorUtilClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__DIAGRAM_EDITOR_UTIL_CLASS_NAME, oldDiagramEditorUtilClassName, diagramEditorUtilClassName));

    }

    public String getMatchingStrategyClassNameGen () {
        return matchingStrategyClassName;
    }

    public String getMatchingStrategyClassName () {
        String value = getMatchingStrategyClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "MatchingStrategy";
        }
        return value;
    }

    public void setMatchingStrategyClassName (String newMatchingStrategyClassName) {
        String oldMatchingStrategyClassName = matchingStrategyClassName;
        matchingStrategyClassName = newMatchingStrategyClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__MATCHING_STRATEGY_CLASS_NAME, oldMatchingStrategyClassName, matchingStrategyClassName));

    }

    public String getEditPartProviderClassNameGen () {
        return editPartProviderClassName;
    }

    public String getEditPartProviderClassName () {
        String value = getEditPartProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "EditPartProvider";
        }
        return value;
    }

    public void setEditPartProviderClassName (String newEditPartProviderClassName) {
        String oldEditPartProviderClassName = editPartProviderClassName;
        editPartProviderClassName = newEditPartProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_CLASS_NAME, oldEditPartProviderClassName, editPartProviderClassName));

    }

    public ProviderPriority getEditPartProviderPriority () {
        return editPartProviderPriority;
    }

    public void setEditPartProviderPriority (ProviderPriority newEditPartProviderPriority) {
        ProviderPriority oldEditPartProviderPriority = editPartProviderPriority;
        editPartProviderPriority = newEditPartProviderPriority == null ? EDIT_PART_PROVIDER_PRIORITY_EDEFAULT : newEditPartProviderPriority;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_PRIORITY, oldEditPartProviderPriority, editPartProviderPriority));

    }

    public String getModelingAssistantProviderClassNameGen () {
        return modelingAssistantProviderClassName;
    }

    public String getModelingAssistantProviderClassName () {
        String value = getModelingAssistantProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "ModelingAssistantProvider";
        }
        return value;
    }

    public void setModelingAssistantProviderClassName (String newModelingAssistantProviderClassName) {
        String oldModelingAssistantProviderClassName = modelingAssistantProviderClassName;
        modelingAssistantProviderClassName = newModelingAssistantProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_CLASS_NAME, oldModelingAssistantProviderClassName, modelingAssistantProviderClassName));

    }

    public ProviderPriority getModelingAssistantProviderPriority () {
        return modelingAssistantProviderPriority;
    }

    public void setModelingAssistantProviderPriority (ProviderPriority newModelingAssistantProviderPriority) {
        ProviderPriority oldModelingAssistantProviderPriority = modelingAssistantProviderPriority;
        modelingAssistantProviderPriority = newModelingAssistantProviderPriority == null ? MODELING_ASSISTANT_PROVIDER_PRIORITY_EDEFAULT : newModelingAssistantProviderPriority;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_PRIORITY, oldModelingAssistantProviderPriority, modelingAssistantProviderPriority));

    }

    public String getIconProviderClassNameGen () {
        return iconProviderClassName;
    }

    public String getIconProviderClassName () {
        String value = getIconProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "IconProvider";
        }
        return value;
    }

    public void setIconProviderClassName (String newIconProviderClassName) {
        String oldIconProviderClassName = iconProviderClassName;
        iconProviderClassName = newIconProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_CLASS_NAME, oldIconProviderClassName, iconProviderClassName));

    }

    public ProviderPriority getIconProviderPriority () {
        return iconProviderPriority;
    }

    public void setIconProviderPriority (ProviderPriority newIconProviderPriority) {
        ProviderPriority oldIconProviderPriority = iconProviderPriority;
        iconProviderPriority = newIconProviderPriority == null ? ICON_PROVIDER_PRIORITY_EDEFAULT : newIconProviderPriority;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_PRIORITY, oldIconProviderPriority, iconProviderPriority));

    }

    public String getParserProviderClassNameGen () {
        return parserProviderClassName;
    }

    public String getParserProviderClassName () {
        String value = getParserProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "ParserProvider";
        }
        return value;
    }

    public void setParserProviderClassName (String newParserProviderClassName) {
        String oldParserProviderClassName = parserProviderClassName;
        parserProviderClassName = newParserProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_CLASS_NAME, oldParserProviderClassName, parserProviderClassName));

    }

    public ProviderPriority getParserProviderPriority () {
        return parserProviderPriority;
    }

    public void setParserProviderPriority (ProviderPriority newParserProviderPriority) {
        ProviderPriority oldParserProviderPriority = parserProviderPriority;
        parserProviderPriority = newParserProviderPriority == null ? PARSER_PROVIDER_PRIORITY_EDEFAULT : newParserProviderPriority;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_PRIORITY, oldParserProviderPriority, parserProviderPriority));

    }

    public String getAbstractParserClassNameGen () {
        return abstractParserClassName;
    }

    public String getAbstractParserClassName () {
        String value = getAbstractParserClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "AbstractParser";
        }
        return value;
    }

    public void setAbstractParserClassName (String newAbstractParserClassName) {
        String oldAbstractParserClassName = abstractParserClassName;
        abstractParserClassName = newAbstractParserClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__ABSTRACT_PARSER_CLASS_NAME, oldAbstractParserClassName, abstractParserClassName));

    }

    public String getStructuralFeatureParserClassNameGen () {
        return structuralFeatureParserClassName;
    }

    public String getStructuralFeatureParserClassName () {
        String value = getStructuralFeatureParserClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "StructuralFeatureParser";
        }
        return value;
    }

    public void setStructuralFeatureParserClassName (String newStructuralFeatureParserClassName) {
        String oldStructuralFeatureParserClassName = structuralFeatureParserClassName;
        structuralFeatureParserClassName = newStructuralFeatureParserClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURE_PARSER_CLASS_NAME, oldStructuralFeatureParserClassName, structuralFeatureParserClassName));

    }

    public String getStructuralFeaturesParserClassNameGen () {
        return structuralFeaturesParserClassName;
    }

    public String getStructuralFeaturesParserClassName () {
        String value = getStructuralFeaturesParserClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "StructuralFeaturesParser";
        }
        return value;
    }

    public void setStructuralFeaturesParserClassName (String newStructuralFeaturesParserClassName) {
        String oldStructuralFeaturesParserClassName = structuralFeaturesParserClassName;
        structuralFeaturesParserClassName = newStructuralFeaturesParserClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURES_PARSER_CLASS_NAME, oldStructuralFeaturesParserClassName, structuralFeaturesParserClassName));

    }

    public String getContributionItemProviderClassNameGen () {
        return contributionItemProviderClassName;
    }

    public String getContributionItemProviderClassName () {
        String value = getContributionItemProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "ContributionItemProvider";
        }
        return value;
    }

    public void setContributionItemProviderClassName (String newContributionItemProviderClassName) {
        String oldContributionItemProviderClassName = contributionItemProviderClassName;
        contributionItemProviderClassName = newContributionItemProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME, oldContributionItemProviderClassName, contributionItemProviderClassName));

    }

    public String getContributionItemProviderQualifiedClassName () {
        return getProvidersPackageName () + '.' + getContributionItemProviderClassName ();
    }

    public boolean needsCanonicalEditPolicy () {
        return isSynchronized ();
    }

    public EList getAllNodes () {
        EList result = new BasicEList ();
        result.addAll (getTopLevelNodes ());
        result.addAll (getChildNodes ());
        return new BasicEList.UnmodifiableEList (result.size (), result.toArray ());
    }

    public EList getAllChildContainers () {
        EList result = new BasicEList ();
        result.addAll (getAllNodes ());
        result.addAll (getCompartments ());
        return new BasicEList.UnmodifiableEList (result.size (), result.toArray ());
    }

    public EList getAllContainers () {
        EList result = new BasicEList ();
        result.addAll (getAllChildContainers ());
        result.add (this);
        return new BasicEList.UnmodifiableEList (result.size (), result.toArray ());
    }

    public String getVisualIDRegistryQualifiedClassName () {
        return getEditorPackageName () + '.' + getVisualIDRegistryClassName ();
    }

    public String getCreateShortcutActionQualifiedClassName () {
        return getEditorPackageName () + '.' + getCreateShortcutActionClassName ();
    }

    public String getCreateShortcutDecorationsCommandQualifiedClassName () {
        return getEditCommandsPackageName () + '.' + getCreateShortcutDecorationsCommandClassName ();
    }

    public String getShortcutPropertyTesterQualifiedClassName () {
        return getEditorPackageName () + '.' + getShortcutPropertyTesterClassName ();
    }

    public String getElementChooserQualifiedClassName () {
        return getEditorPackageName () + '.' + getElementChooserClassName ();
    }

    public String getLoadResourceActionQualifiedClassName () {
        return getEditorPackageName () + '.' + getLoadResourceActionClassName ();
    }

    public boolean generateInitDiagramAction () {
        return getDomainDiagramElement () != null;
    }

    public String getShortcutsDecoratorProviderQualifiedClassName () {
        return getProvidersPackageName () + '.' + getShortcutsDecoratorProviderClassName ();
    }

    public String getValidationProviderQualifiedClassName () {
        return getProvidersPackageName () + '.' + getValidationProviderClassName ();
    }

    public String getValidationDiagnosticMarkerType () {
        return "diagnostic";
    }

    public void setMarkerNavigationProviderClassName (String newMarkerNavigationProviderClassName) {
        String oldMarkerNavigationProviderClassName = markerNavigationProviderClassName;
        markerNavigationProviderClassName = newMarkerNavigationProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_CLASS_NAME, oldMarkerNavigationProviderClassName, markerNavigationProviderClassName));

    }

    public ProviderPriority getMarkerNavigationProviderPriority () {
        return markerNavigationProviderPriority;
    }

    public void setMarkerNavigationProviderPriority (ProviderPriority newMarkerNavigationProviderPriority) {
        ProviderPriority oldMarkerNavigationProviderPriority = markerNavigationProviderPriority;
        markerNavigationProviderPriority = newMarkerNavigationProviderPriority == null ? MARKER_NAVIGATION_PROVIDER_PRIORITY_EDEFAULT : newMarkerNavigationProviderPriority;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_PRIORITY, oldMarkerNavigationProviderPriority, markerNavigationProviderPriority));

    }

    public boolean generateCreateShortcutAction () {
        return getContainsShortcutsTo ().size () > 0;
    }

    public boolean generateShortcutIcon () {
        return getShortcutsProvidedFor ().size () > 0;
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM__EDITOR_GEN :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_DIAGRAM__EDITOR_GEN, msgs);
            case GMFGenPackage.GEN_DIAGRAM__CHILD_NODES :
                return ((InternalEList) getChildNodes ()).basicAdd (otherEnd, msgs);
            case GMFGenPackage.GEN_DIAGRAM__TOP_LEVEL_NODES :
                return ((InternalEList) getTopLevelNodes ()).basicAdd (otherEnd, msgs);
            case GMFGenPackage.GEN_DIAGRAM__LINKS :
                return ((InternalEList) getLinks ()).basicAdd (otherEnd, msgs);
            case GMFGenPackage.GEN_DIAGRAM__COMPARTMENTS :
                return ((InternalEList) getCompartments ()).basicAdd (otherEnd, msgs);
            case GMFGenPackage.GEN_DIAGRAM__PALETTE :
                if (palette != null) msgs = ((InternalEObject) palette).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_DIAGRAM__PALETTE, null, msgs);

                return basicSetPalette ((Palette) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM__EDITOR_GEN :
                return eBasicSetContainer (null, GMFGenPackage.GEN_DIAGRAM__EDITOR_GEN, msgs);
            case GMFGenPackage.GEN_DIAGRAM__CHILD_NODES :
                return ((InternalEList) getChildNodes ()).basicRemove (otherEnd, msgs);
            case GMFGenPackage.GEN_DIAGRAM__TOP_LEVEL_NODES :
                return ((InternalEList) getTopLevelNodes ()).basicRemove (otherEnd, msgs);
            case GMFGenPackage.GEN_DIAGRAM__LINKS :
                return ((InternalEList) getLinks ()).basicRemove (otherEnd, msgs);
            case GMFGenPackage.GEN_DIAGRAM__COMPARTMENTS :
                return ((InternalEList) getCompartments ()).basicRemove (otherEnd, msgs);
            case GMFGenPackage.GEN_DIAGRAM__PALETTE :
                return basicSetPalette (null, msgs);
            case GMFGenPackage.GEN_DIAGRAM__PREFERENCES :
                return basicSetPreferences (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_DIAGRAM__EDITOR_GEN :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_EDITOR_GENERATOR__DIAGRAM, GenEditorGenerator.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM__CONTAINED_NODES :
                return getContainedNodes ();
            case GMFGenPackage.GEN_DIAGRAM__CANONICAL_EDIT_POLICY_CLASS_NAME :
                return getCanonicalEditPolicyClassName ();
            case GMFGenPackage.GEN_DIAGRAM__EDIT_COMMANDS_PACKAGE_NAME :
                return getEditCommandsPackageName ();
            case GMFGenPackage.GEN_DIAGRAM__EDIT_HELPERS_PACKAGE_NAME :
                return getEditHelpersPackageName ();
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PARTS_PACKAGE_NAME :
                return getEditPartsPackageName ();
            case GMFGenPackage.GEN_DIAGRAM__EDIT_POLICIES_PACKAGE_NAME :
                return getEditPoliciesPackageName ();
            case GMFGenPackage.GEN_DIAGRAM__PREFERENCES_PACKAGE_NAME :
                return getPreferencesPackageName ();
            case GMFGenPackage.GEN_DIAGRAM__PROVIDERS_PACKAGE_NAME :
                return getProvidersPackageName ();
            case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORIES_PACKAGE_NAME :
                return getNotationViewFactoriesPackageName ();
            case GMFGenPackage.GEN_DIAGRAM__ELEMENT_TYPES_CLASS_NAME :
                return getElementTypesClassName ();
            case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_CLASS_NAME :
                return getNotationViewProviderClassName ();
            case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_PRIORITY :
                return getNotationViewProviderPriority ();
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_CLASS_NAME :
                return getEditPartProviderClassName ();
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_PRIORITY :
                return getEditPartProviderPriority ();
            case GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_CLASS_NAME :
                return getModelingAssistantProviderClassName ();
            case GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_PRIORITY :
                return getModelingAssistantProviderPriority ();
            case GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_CLASS_NAME :
                return getIconProviderClassName ();
            case GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_PRIORITY :
                return getIconProviderPriority ();
            case GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_CLASS_NAME :
                return getParserProviderClassName ();
            case GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_PRIORITY :
                return getParserProviderPriority ();
            case GMFGenPackage.GEN_DIAGRAM__ABSTRACT_PARSER_CLASS_NAME :
                return getAbstractParserClassName ();
            case GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURE_PARSER_CLASS_NAME :
                return getStructuralFeatureParserClassName ();
            case GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURES_PARSER_CLASS_NAME :
                return getStructuralFeaturesParserClassName ();
            case GMFGenPackage.GEN_DIAGRAM__CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME :
                return getContributionItemProviderClassName ();
            case GMFGenPackage.GEN_DIAGRAM__REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME :
                return getReorientConnectionViewCommandClassName ();
            case GMFGenPackage.GEN_DIAGRAM__BASE_EDIT_HELPER_CLASS_NAME :
                return getBaseEditHelperClassName ();
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_FACTORY_CLASS_NAME :
                return getEditPartFactoryClassName ();
            case GMFGenPackage.GEN_DIAGRAM__BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME :
                return getBaseExternalNodeLabelEditPartClassName ();
            case GMFGenPackage.GEN_DIAGRAM__BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                return getBaseItemSemanticEditPolicyClassName ();
            case GMFGenPackage.GEN_DIAGRAM__BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME :
                return getBaseGraphicalNodeEditPolicyClassName ();
            case GMFGenPackage.GEN_DIAGRAM__TEXT_SELECTION_EDIT_POLICY_CLASS_NAME :
                return getTextSelectionEditPolicyClassName ();
            case GMFGenPackage.GEN_DIAGRAM__TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME :
                return getTextNonResizableEditPolicyClassName ();
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CLASS_NAME :
                return getCreationWizardClassName ();
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_PAGE_CLASS_NAME :
                return getCreationWizardPageClassName ();
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_ICON_PATH :
                return getCreationWizardIconPath ();
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CATEGORY_ID :
                return getCreationWizardCategoryID ();
            case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_EDITOR_UTIL_CLASS_NAME :
                return getDiagramEditorUtilClassName ();
            case GMFGenPackage.GEN_DIAGRAM__DOCUMENT_PROVIDER_CLASS_NAME :
                return getDocumentProviderClassName ();
            case GMFGenPackage.GEN_DIAGRAM__INIT_DIAGRAM_FILE_ACTION_CLASS_NAME :
                return getInitDiagramFileActionClassName ();
            case GMFGenPackage.GEN_DIAGRAM__NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME :
                return getNewDiagramFileWizardClassName ();
            case GMFGenPackage.GEN_DIAGRAM__MATCHING_STRATEGY_CLASS_NAME :
                return getMatchingStrategyClassName ();
            case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID_REGISTRY_CLASS_NAME :
                return getVisualIDRegistryClassName ();
            case GMFGenPackage.GEN_DIAGRAM__ELEMENT_CHOOSER_CLASS_NAME :
                return getElementChooserClassName ();
            case GMFGenPackage.GEN_DIAGRAM__LOAD_RESOURCE_ACTION_CLASS_NAME :
                return getLoadResourceActionClassName ();
            case GMFGenPackage.GEN_DIAGRAM__EDITING_DOMAIN_ID :
                return getEditingDomainID ();
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME :
                return getShortcutsDecoratorProviderClassName ();
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_PRIORITY :
                return getShortcutsDecoratorProviderPriority ();
            case GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_ACTION_CLASS_NAME :
                return getCreateShortcutActionClassName ();
            case GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME :
                return getCreateShortcutDecorationsCommandClassName ();
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUT_PROPERTY_TESTER_CLASS_NAME :
                return getShortcutPropertyTesterClassName ();
            case GMFGenPackage.GEN_DIAGRAM__CONTAINS_SHORTCUTS_TO :
                return getContainsShortcutsTo ();
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_PROVIDED_FOR :
                return getShortcutsProvidedFor ();
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_CLASS_NAME :
                return getValidationProviderClassName ();
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_PRIORITY :
                return getValidationProviderPriority ();
            case GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_CLASS_NAME :
                return getMarkerNavigationProviderClassName ();
            case GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_PRIORITY :
                return getMarkerNavigationProviderPriority ();
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_ENABLED :
                return isValidationEnabled () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_CLASS_NAME :
                return getMetricProviderClassName ();
            case GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_PRIORITY :
                return getMetricProviderPriority ();
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_CLASS_NAME :
                return getValidationDecoratorProviderClassName ();
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATORS :
                return isValidationDecorators () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_PRIORITY :
                return getValidationDecoratorProviderPriority ();
            case GMFGenPackage.GEN_DIAGRAM__LIVE_VALIDATION_UI_FEEDBACK :
                return isLiveValidationUIFeedback () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_DIAGRAM__UNITS :
                return getUnits ();
            case GMFGenPackage.GEN_DIAGRAM__EDITOR_GEN :
                return getEditorGen ();
            case GMFGenPackage.GEN_DIAGRAM__DOMAIN_DIAGRAM_ELEMENT :
                if (resolve) return getDomainDiagramElement ();

                return basicGetDomainDiagramElement ();
            case GMFGenPackage.GEN_DIAGRAM__CHILD_NODES :
                return getChildNodes ();
            case GMFGenPackage.GEN_DIAGRAM__TOP_LEVEL_NODES :
                return getTopLevelNodes ();
            case GMFGenPackage.GEN_DIAGRAM__LINKS :
                return getLinks ();
            case GMFGenPackage.GEN_DIAGRAM__COMPARTMENTS :
                return getCompartments ();
            case GMFGenPackage.GEN_DIAGRAM__PALETTE :
                return getPalette ();
            case GMFGenPackage.GEN_DIAGRAM__SYNCHRONIZED :
                return isSynchronized () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_DIAGRAM__PREFERENCES :
                return getPreferences ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM__CANONICAL_EDIT_POLICY_CLASS_NAME :
                setCanonicalEditPolicyClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_COMMANDS_PACKAGE_NAME :
                setEditCommandsPackageName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_HELPERS_PACKAGE_NAME :
                setEditHelpersPackageName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PARTS_PACKAGE_NAME :
                setEditPartsPackageName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_POLICIES_PACKAGE_NAME :
                setEditPoliciesPackageName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__PREFERENCES_PACKAGE_NAME :
                setPreferencesPackageName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__PROVIDERS_PACKAGE_NAME :
                setProvidersPackageName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORIES_PACKAGE_NAME :
                setNotationViewFactoriesPackageName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__ELEMENT_TYPES_CLASS_NAME :
                setElementTypesClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_CLASS_NAME :
                setNotationViewProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_PRIORITY :
                setNotationViewProviderPriority ((ProviderPriority) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_CLASS_NAME :
                setEditPartProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_PRIORITY :
                setEditPartProviderPriority ((ProviderPriority) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_CLASS_NAME :
                setModelingAssistantProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_PRIORITY :
                setModelingAssistantProviderPriority ((ProviderPriority) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_CLASS_NAME :
                setIconProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_PRIORITY :
                setIconProviderPriority ((ProviderPriority) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_CLASS_NAME :
                setParserProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_PRIORITY :
                setParserProviderPriority ((ProviderPriority) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__ABSTRACT_PARSER_CLASS_NAME :
                setAbstractParserClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURE_PARSER_CLASS_NAME :
                setStructuralFeatureParserClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURES_PARSER_CLASS_NAME :
                setStructuralFeaturesParserClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME :
                setContributionItemProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME :
                setReorientConnectionViewCommandClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__BASE_EDIT_HELPER_CLASS_NAME :
                setBaseEditHelperClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_FACTORY_CLASS_NAME :
                setEditPartFactoryClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME :
                setBaseExternalNodeLabelEditPartClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                setBaseItemSemanticEditPolicyClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME :
                setBaseGraphicalNodeEditPolicyClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__TEXT_SELECTION_EDIT_POLICY_CLASS_NAME :
                setTextSelectionEditPolicyClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME :
                setTextNonResizableEditPolicyClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CLASS_NAME :
                setCreationWizardClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_PAGE_CLASS_NAME :
                setCreationWizardPageClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_ICON_PATH :
                setCreationWizardIconPath ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CATEGORY_ID :
                setCreationWizardCategoryID ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_EDITOR_UTIL_CLASS_NAME :
                setDiagramEditorUtilClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__DOCUMENT_PROVIDER_CLASS_NAME :
                setDocumentProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__INIT_DIAGRAM_FILE_ACTION_CLASS_NAME :
                setInitDiagramFileActionClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME :
                setNewDiagramFileWizardClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__MATCHING_STRATEGY_CLASS_NAME :
                setMatchingStrategyClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID_REGISTRY_CLASS_NAME :
                setVisualIDRegistryClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__ELEMENT_CHOOSER_CLASS_NAME :
                setElementChooserClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__LOAD_RESOURCE_ACTION_CLASS_NAME :
                setLoadResourceActionClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDITING_DOMAIN_ID :
                setEditingDomainID ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME :
                setShortcutsDecoratorProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_PRIORITY :
                setShortcutsDecoratorProviderPriority ((ProviderPriority) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_ACTION_CLASS_NAME :
                setCreateShortcutActionClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME :
                setCreateShortcutDecorationsCommandClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUT_PROPERTY_TESTER_CLASS_NAME :
                setShortcutPropertyTesterClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CONTAINS_SHORTCUTS_TO :
                getContainsShortcutsTo ().clear ();
                getContainsShortcutsTo ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_PROVIDED_FOR :
                getShortcutsProvidedFor ().clear ();
                getShortcutsProvidedFor ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_CLASS_NAME :
                setValidationProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_PRIORITY :
                setValidationProviderPriority ((ProviderPriority) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_CLASS_NAME :
                setMarkerNavigationProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_PRIORITY :
                setMarkerNavigationProviderPriority ((ProviderPriority) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_ENABLED :
                setValidationEnabled (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_CLASS_NAME :
                setMetricProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_PRIORITY :
                setMetricProviderPriority ((ProviderPriority) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_CLASS_NAME :
                setValidationDecoratorProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATORS :
                setValidationDecorators (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_PRIORITY :
                setValidationDecoratorProviderPriority ((ProviderPriority) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__LIVE_VALIDATION_UI_FEEDBACK :
                setLiveValidationUIFeedback (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_DIAGRAM__UNITS :
                setUnits ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__DOMAIN_DIAGRAM_ELEMENT :
                setDomainDiagramElement ((GenClass) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CHILD_NODES :
                getChildNodes ().clear ();
                getChildNodes ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__TOP_LEVEL_NODES :
                getTopLevelNodes ().clear ();
                getTopLevelNodes ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__LINKS :
                getLinks ().clear ();
                getLinks ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__COMPARTMENTS :
                getCompartments ().clear ();
                getCompartments ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__PALETTE :
                setPalette ((Palette) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM__SYNCHRONIZED :
                setSynchronized (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_DIAGRAM__PREFERENCES :
                setPreferences ((GenDiagramPreferences) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM__CANONICAL_EDIT_POLICY_CLASS_NAME :
                setCanonicalEditPolicyClassName (CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_COMMANDS_PACKAGE_NAME :
                setEditCommandsPackageName (EDIT_COMMANDS_PACKAGE_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_HELPERS_PACKAGE_NAME :
                setEditHelpersPackageName (EDIT_HELPERS_PACKAGE_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PARTS_PACKAGE_NAME :
                setEditPartsPackageName (EDIT_PARTS_PACKAGE_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_POLICIES_PACKAGE_NAME :
                setEditPoliciesPackageName (EDIT_POLICIES_PACKAGE_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__PREFERENCES_PACKAGE_NAME :
                setPreferencesPackageName (PREFERENCES_PACKAGE_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__PROVIDERS_PACKAGE_NAME :
                setProvidersPackageName (PROVIDERS_PACKAGE_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORIES_PACKAGE_NAME :
                setNotationViewFactoriesPackageName (NOTATION_VIEW_FACTORIES_PACKAGE_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__ELEMENT_TYPES_CLASS_NAME :
                setElementTypesClassName (ELEMENT_TYPES_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_CLASS_NAME :
                setNotationViewProviderClassName (NOTATION_VIEW_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_PRIORITY :
                setNotationViewProviderPriority (NOTATION_VIEW_PROVIDER_PRIORITY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_CLASS_NAME :
                setEditPartProviderClassName (EDIT_PART_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_PRIORITY :
                setEditPartProviderPriority (EDIT_PART_PROVIDER_PRIORITY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_CLASS_NAME :
                setModelingAssistantProviderClassName (MODELING_ASSISTANT_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_PRIORITY :
                setModelingAssistantProviderPriority (MODELING_ASSISTANT_PROVIDER_PRIORITY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_CLASS_NAME :
                setIconProviderClassName (ICON_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_PRIORITY :
                setIconProviderPriority (ICON_PROVIDER_PRIORITY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_CLASS_NAME :
                setParserProviderClassName (PARSER_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_PRIORITY :
                setParserProviderPriority (PARSER_PROVIDER_PRIORITY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__ABSTRACT_PARSER_CLASS_NAME :
                setAbstractParserClassName (ABSTRACT_PARSER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURE_PARSER_CLASS_NAME :
                setStructuralFeatureParserClassName (STRUCTURAL_FEATURE_PARSER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURES_PARSER_CLASS_NAME :
                setStructuralFeaturesParserClassName (STRUCTURAL_FEATURES_PARSER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME :
                setContributionItemProviderClassName (CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME :
                setReorientConnectionViewCommandClassName (REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__BASE_EDIT_HELPER_CLASS_NAME :
                setBaseEditHelperClassName (BASE_EDIT_HELPER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_FACTORY_CLASS_NAME :
                setEditPartFactoryClassName (EDIT_PART_FACTORY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME :
                setBaseExternalNodeLabelEditPartClassName (BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                setBaseItemSemanticEditPolicyClassName (BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME :
                setBaseGraphicalNodeEditPolicyClassName (BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__TEXT_SELECTION_EDIT_POLICY_CLASS_NAME :
                setTextSelectionEditPolicyClassName (TEXT_SELECTION_EDIT_POLICY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME :
                setTextNonResizableEditPolicyClassName (TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CLASS_NAME :
                setCreationWizardClassName (CREATION_WIZARD_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_PAGE_CLASS_NAME :
                setCreationWizardPageClassName (CREATION_WIZARD_PAGE_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_ICON_PATH :
                setCreationWizardIconPath (CREATION_WIZARD_ICON_PATH_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CATEGORY_ID :
                setCreationWizardCategoryID (CREATION_WIZARD_CATEGORY_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_EDITOR_UTIL_CLASS_NAME :
                setDiagramEditorUtilClassName (DIAGRAM_EDITOR_UTIL_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__DOCUMENT_PROVIDER_CLASS_NAME :
                setDocumentProviderClassName (DOCUMENT_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__INIT_DIAGRAM_FILE_ACTION_CLASS_NAME :
                setInitDiagramFileActionClassName (INIT_DIAGRAM_FILE_ACTION_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME :
                setNewDiagramFileWizardClassName (NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__MATCHING_STRATEGY_CLASS_NAME :
                setMatchingStrategyClassName (MATCHING_STRATEGY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID_REGISTRY_CLASS_NAME :
                setVisualIDRegistryClassName (VISUAL_ID_REGISTRY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__ELEMENT_CHOOSER_CLASS_NAME :
                setElementChooserClassName (ELEMENT_CHOOSER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__LOAD_RESOURCE_ACTION_CLASS_NAME :
                setLoadResourceActionClassName (LOAD_RESOURCE_ACTION_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__EDITING_DOMAIN_ID :
                setEditingDomainID (EDITING_DOMAIN_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME :
                setShortcutsDecoratorProviderClassName (SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_PRIORITY :
                setShortcutsDecoratorProviderPriority (SHORTCUTS_DECORATOR_PROVIDER_PRIORITY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_ACTION_CLASS_NAME :
                setCreateShortcutActionClassName (CREATE_SHORTCUT_ACTION_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME :
                setCreateShortcutDecorationsCommandClassName (CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUT_PROPERTY_TESTER_CLASS_NAME :
                setShortcutPropertyTesterClassName (SHORTCUT_PROPERTY_TESTER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CONTAINS_SHORTCUTS_TO :
                getContainsShortcutsTo ().clear ();
                return;
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_PROVIDED_FOR :
                getShortcutsProvidedFor ().clear ();
                return;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_CLASS_NAME :
                setValidationProviderClassName (VALIDATION_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_PRIORITY :
                setValidationProviderPriority (VALIDATION_PROVIDER_PRIORITY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_CLASS_NAME :
                setMarkerNavigationProviderClassName (MARKER_NAVIGATION_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_PRIORITY :
                setMarkerNavigationProviderPriority (MARKER_NAVIGATION_PROVIDER_PRIORITY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_ENABLED :
                setValidationEnabled (VALIDATION_ENABLED_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_CLASS_NAME :
                setMetricProviderClassName (METRIC_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_PRIORITY :
                setMetricProviderPriority (METRIC_PROVIDER_PRIORITY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_CLASS_NAME :
                setValidationDecoratorProviderClassName (VALIDATION_DECORATOR_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATORS :
                setValidationDecorators (VALIDATION_DECORATORS_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_PRIORITY :
                setValidationDecoratorProviderPriority (VALIDATION_DECORATOR_PROVIDER_PRIORITY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__LIVE_VALIDATION_UI_FEEDBACK :
                setLiveValidationUIFeedback (LIVE_VALIDATION_UI_FEEDBACK_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__UNITS :
                setUnits (UNITS_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__DOMAIN_DIAGRAM_ELEMENT :
                setDomainDiagramElement ((GenClass) null);
                return;
            case GMFGenPackage.GEN_DIAGRAM__CHILD_NODES :
                getChildNodes ().clear ();
                return;
            case GMFGenPackage.GEN_DIAGRAM__TOP_LEVEL_NODES :
                getTopLevelNodes ().clear ();
                return;
            case GMFGenPackage.GEN_DIAGRAM__LINKS :
                getLinks ().clear ();
                return;
            case GMFGenPackage.GEN_DIAGRAM__COMPARTMENTS :
                getCompartments ().clear ();
                return;
            case GMFGenPackage.GEN_DIAGRAM__PALETTE :
                setPalette ((Palette) null);
                return;
            case GMFGenPackage.GEN_DIAGRAM__SYNCHRONIZED :
                setSynchronized (SYNCHRONIZED_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM__PREFERENCES :
                setPreferences ((GenDiagramPreferences) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM__CONTAINED_NODES :
                return ! getContainedNodes ().isEmpty ();
            case GMFGenPackage.GEN_DIAGRAM__CANONICAL_EDIT_POLICY_CLASS_NAME :
                return CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? canonicalEditPolicyClassName != null : ! CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals (canonicalEditPolicyClassName);
            case GMFGenPackage.GEN_DIAGRAM__EDIT_COMMANDS_PACKAGE_NAME :
                return EDIT_COMMANDS_PACKAGE_NAME_EDEFAULT == null ? editCommandsPackageName != null : ! EDIT_COMMANDS_PACKAGE_NAME_EDEFAULT.equals (editCommandsPackageName);
            case GMFGenPackage.GEN_DIAGRAM__EDIT_HELPERS_PACKAGE_NAME :
                return EDIT_HELPERS_PACKAGE_NAME_EDEFAULT == null ? editHelpersPackageName != null : ! EDIT_HELPERS_PACKAGE_NAME_EDEFAULT.equals (editHelpersPackageName);
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PARTS_PACKAGE_NAME :
                return EDIT_PARTS_PACKAGE_NAME_EDEFAULT == null ? editPartsPackageName != null : ! EDIT_PARTS_PACKAGE_NAME_EDEFAULT.equals (editPartsPackageName);
            case GMFGenPackage.GEN_DIAGRAM__EDIT_POLICIES_PACKAGE_NAME :
                return EDIT_POLICIES_PACKAGE_NAME_EDEFAULT == null ? editPoliciesPackageName != null : ! EDIT_POLICIES_PACKAGE_NAME_EDEFAULT.equals (editPoliciesPackageName);
            case GMFGenPackage.GEN_DIAGRAM__PREFERENCES_PACKAGE_NAME :
                return PREFERENCES_PACKAGE_NAME_EDEFAULT == null ? preferencesPackageName != null : ! PREFERENCES_PACKAGE_NAME_EDEFAULT.equals (preferencesPackageName);
            case GMFGenPackage.GEN_DIAGRAM__PROVIDERS_PACKAGE_NAME :
                return PROVIDERS_PACKAGE_NAME_EDEFAULT == null ? providersPackageName != null : ! PROVIDERS_PACKAGE_NAME_EDEFAULT.equals (providersPackageName);
            case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORIES_PACKAGE_NAME :
                return NOTATION_VIEW_FACTORIES_PACKAGE_NAME_EDEFAULT == null ? notationViewFactoriesPackageName != null : ! NOTATION_VIEW_FACTORIES_PACKAGE_NAME_EDEFAULT.equals (notationViewFactoriesPackageName);
            case GMFGenPackage.GEN_DIAGRAM__ELEMENT_TYPES_CLASS_NAME :
                return ELEMENT_TYPES_CLASS_NAME_EDEFAULT == null ? elementTypesClassName != null : ! ELEMENT_TYPES_CLASS_NAME_EDEFAULT.equals (elementTypesClassName);
            case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_CLASS_NAME :
                return NOTATION_VIEW_PROVIDER_CLASS_NAME_EDEFAULT == null ? notationViewProviderClassName != null : ! NOTATION_VIEW_PROVIDER_CLASS_NAME_EDEFAULT.equals (notationViewProviderClassName);
            case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_PRIORITY :
                return notationViewProviderPriority != NOTATION_VIEW_PROVIDER_PRIORITY_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_CLASS_NAME :
                return EDIT_PART_PROVIDER_CLASS_NAME_EDEFAULT == null ? editPartProviderClassName != null : ! EDIT_PART_PROVIDER_CLASS_NAME_EDEFAULT.equals (editPartProviderClassName);
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_PRIORITY :
                return editPartProviderPriority != EDIT_PART_PROVIDER_PRIORITY_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_CLASS_NAME :
                return MODELING_ASSISTANT_PROVIDER_CLASS_NAME_EDEFAULT == null ? modelingAssistantProviderClassName != null : ! MODELING_ASSISTANT_PROVIDER_CLASS_NAME_EDEFAULT.equals (modelingAssistantProviderClassName);
            case GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_PRIORITY :
                return modelingAssistantProviderPriority != MODELING_ASSISTANT_PROVIDER_PRIORITY_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_CLASS_NAME :
                return ICON_PROVIDER_CLASS_NAME_EDEFAULT == null ? iconProviderClassName != null : ! ICON_PROVIDER_CLASS_NAME_EDEFAULT.equals (iconProviderClassName);
            case GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_PRIORITY :
                return iconProviderPriority != ICON_PROVIDER_PRIORITY_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_CLASS_NAME :
                return PARSER_PROVIDER_CLASS_NAME_EDEFAULT == null ? parserProviderClassName != null : ! PARSER_PROVIDER_CLASS_NAME_EDEFAULT.equals (parserProviderClassName);
            case GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_PRIORITY :
                return parserProviderPriority != PARSER_PROVIDER_PRIORITY_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__ABSTRACT_PARSER_CLASS_NAME :
                return ABSTRACT_PARSER_CLASS_NAME_EDEFAULT == null ? abstractParserClassName != null : ! ABSTRACT_PARSER_CLASS_NAME_EDEFAULT.equals (abstractParserClassName);
            case GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURE_PARSER_CLASS_NAME :
                return STRUCTURAL_FEATURE_PARSER_CLASS_NAME_EDEFAULT == null ? structuralFeatureParserClassName != null : ! STRUCTURAL_FEATURE_PARSER_CLASS_NAME_EDEFAULT.equals (structuralFeatureParserClassName);
            case GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURES_PARSER_CLASS_NAME :
                return STRUCTURAL_FEATURES_PARSER_CLASS_NAME_EDEFAULT == null ? structuralFeaturesParserClassName != null : ! STRUCTURAL_FEATURES_PARSER_CLASS_NAME_EDEFAULT.equals (structuralFeaturesParserClassName);
            case GMFGenPackage.GEN_DIAGRAM__CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME :
                return CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME_EDEFAULT == null ? contributionItemProviderClassName != null : ! CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME_EDEFAULT.equals (contributionItemProviderClassName);
            case GMFGenPackage.GEN_DIAGRAM__REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME :
                return REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME_EDEFAULT == null ? reorientConnectionViewCommandClassName != null : ! REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME_EDEFAULT.equals (reorientConnectionViewCommandClassName);
            case GMFGenPackage.GEN_DIAGRAM__BASE_EDIT_HELPER_CLASS_NAME :
                return BASE_EDIT_HELPER_CLASS_NAME_EDEFAULT == null ? baseEditHelperClassName != null : ! BASE_EDIT_HELPER_CLASS_NAME_EDEFAULT.equals (baseEditHelperClassName);
            case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_FACTORY_CLASS_NAME :
                return EDIT_PART_FACTORY_CLASS_NAME_EDEFAULT == null ? editPartFactoryClassName != null : ! EDIT_PART_FACTORY_CLASS_NAME_EDEFAULT.equals (editPartFactoryClassName);
            case GMFGenPackage.GEN_DIAGRAM__BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME :
                return BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME_EDEFAULT == null ? baseExternalNodeLabelEditPartClassName != null : ! BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME_EDEFAULT.equals (baseExternalNodeLabelEditPartClassName);
            case GMFGenPackage.GEN_DIAGRAM__BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                return BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? baseItemSemanticEditPolicyClassName != null : ! BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals (baseItemSemanticEditPolicyClassName);
            case GMFGenPackage.GEN_DIAGRAM__BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME :
                return BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? baseGraphicalNodeEditPolicyClassName != null : ! BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals (baseGraphicalNodeEditPolicyClassName);
            case GMFGenPackage.GEN_DIAGRAM__TEXT_SELECTION_EDIT_POLICY_CLASS_NAME :
                return TEXT_SELECTION_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? textSelectionEditPolicyClassName != null : ! TEXT_SELECTION_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals (textSelectionEditPolicyClassName);
            case GMFGenPackage.GEN_DIAGRAM__TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME :
                return TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? textNonResizableEditPolicyClassName != null : ! TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals (textNonResizableEditPolicyClassName);
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CLASS_NAME :
                return CREATION_WIZARD_CLASS_NAME_EDEFAULT == null ? creationWizardClassName != null : ! CREATION_WIZARD_CLASS_NAME_EDEFAULT.equals (creationWizardClassName);
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_PAGE_CLASS_NAME :
                return CREATION_WIZARD_PAGE_CLASS_NAME_EDEFAULT == null ? creationWizardPageClassName != null : ! CREATION_WIZARD_PAGE_CLASS_NAME_EDEFAULT.equals (creationWizardPageClassName);
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_ICON_PATH :
                return CREATION_WIZARD_ICON_PATH_EDEFAULT == null ? creationWizardIconPath != null : ! CREATION_WIZARD_ICON_PATH_EDEFAULT.equals (creationWizardIconPath);
            case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CATEGORY_ID :
                return CREATION_WIZARD_CATEGORY_ID_EDEFAULT == null ? creationWizardCategoryID != null : ! CREATION_WIZARD_CATEGORY_ID_EDEFAULT.equals (creationWizardCategoryID);
            case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_EDITOR_UTIL_CLASS_NAME :
                return DIAGRAM_EDITOR_UTIL_CLASS_NAME_EDEFAULT == null ? diagramEditorUtilClassName != null : ! DIAGRAM_EDITOR_UTIL_CLASS_NAME_EDEFAULT.equals (diagramEditorUtilClassName);
            case GMFGenPackage.GEN_DIAGRAM__DOCUMENT_PROVIDER_CLASS_NAME :
                return DOCUMENT_PROVIDER_CLASS_NAME_EDEFAULT == null ? documentProviderClassName != null : ! DOCUMENT_PROVIDER_CLASS_NAME_EDEFAULT.equals (documentProviderClassName);
            case GMFGenPackage.GEN_DIAGRAM__INIT_DIAGRAM_FILE_ACTION_CLASS_NAME :
                return INIT_DIAGRAM_FILE_ACTION_CLASS_NAME_EDEFAULT == null ? initDiagramFileActionClassName != null : ! INIT_DIAGRAM_FILE_ACTION_CLASS_NAME_EDEFAULT.equals (initDiagramFileActionClassName);
            case GMFGenPackage.GEN_DIAGRAM__NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME :
                return NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME_EDEFAULT == null ? newDiagramFileWizardClassName != null : ! NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME_EDEFAULT.equals (newDiagramFileWizardClassName);
            case GMFGenPackage.GEN_DIAGRAM__MATCHING_STRATEGY_CLASS_NAME :
                return MATCHING_STRATEGY_CLASS_NAME_EDEFAULT == null ? matchingStrategyClassName != null : ! MATCHING_STRATEGY_CLASS_NAME_EDEFAULT.equals (matchingStrategyClassName);
            case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID_REGISTRY_CLASS_NAME :
                return VISUAL_ID_REGISTRY_CLASS_NAME_EDEFAULT == null ? visualIDRegistryClassName != null : ! VISUAL_ID_REGISTRY_CLASS_NAME_EDEFAULT.equals (visualIDRegistryClassName);
            case GMFGenPackage.GEN_DIAGRAM__ELEMENT_CHOOSER_CLASS_NAME :
                return ELEMENT_CHOOSER_CLASS_NAME_EDEFAULT == null ? elementChooserClassName != null : ! ELEMENT_CHOOSER_CLASS_NAME_EDEFAULT.equals (elementChooserClassName);
            case GMFGenPackage.GEN_DIAGRAM__LOAD_RESOURCE_ACTION_CLASS_NAME :
                return LOAD_RESOURCE_ACTION_CLASS_NAME_EDEFAULT == null ? loadResourceActionClassName != null : ! LOAD_RESOURCE_ACTION_CLASS_NAME_EDEFAULT.equals (loadResourceActionClassName);
            case GMFGenPackage.GEN_DIAGRAM__EDITING_DOMAIN_ID :
                return EDITING_DOMAIN_ID_EDEFAULT == null ? editingDomainID != null : ! EDITING_DOMAIN_ID_EDEFAULT.equals (editingDomainID);
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME :
                return SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME_EDEFAULT == null ? shortcutsDecoratorProviderClassName != null : ! SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME_EDEFAULT.equals (shortcutsDecoratorProviderClassName);
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_PRIORITY :
                return shortcutsDecoratorProviderPriority != SHORTCUTS_DECORATOR_PROVIDER_PRIORITY_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_ACTION_CLASS_NAME :
                return CREATE_SHORTCUT_ACTION_CLASS_NAME_EDEFAULT == null ? createShortcutActionClassName != null : ! CREATE_SHORTCUT_ACTION_CLASS_NAME_EDEFAULT.equals (createShortcutActionClassName);
            case GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME :
                return CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME_EDEFAULT == null ? createShortcutDecorationsCommandClassName != null : ! CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME_EDEFAULT.equals (createShortcutDecorationsCommandClassName);
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUT_PROPERTY_TESTER_CLASS_NAME :
                return SHORTCUT_PROPERTY_TESTER_CLASS_NAME_EDEFAULT == null ? shortcutPropertyTesterClassName != null : ! SHORTCUT_PROPERTY_TESTER_CLASS_NAME_EDEFAULT.equals (shortcutPropertyTesterClassName);
            case GMFGenPackage.GEN_DIAGRAM__CONTAINS_SHORTCUTS_TO :
                return containsShortcutsTo != null && ! containsShortcutsTo.isEmpty ();
            case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_PROVIDED_FOR :
                return shortcutsProvidedFor != null && ! shortcutsProvidedFor.isEmpty ();
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_CLASS_NAME :
                return VALIDATION_PROVIDER_CLASS_NAME_EDEFAULT == null ? validationProviderClassName != null : ! VALIDATION_PROVIDER_CLASS_NAME_EDEFAULT.equals (validationProviderClassName);
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_PRIORITY :
                return validationProviderPriority != VALIDATION_PROVIDER_PRIORITY_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_CLASS_NAME :
                return MARKER_NAVIGATION_PROVIDER_CLASS_NAME_EDEFAULT == null ? markerNavigationProviderClassName != null : ! MARKER_NAVIGATION_PROVIDER_CLASS_NAME_EDEFAULT.equals (markerNavigationProviderClassName);
            case GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_PRIORITY :
                return markerNavigationProviderPriority != MARKER_NAVIGATION_PROVIDER_PRIORITY_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_ENABLED :
                return validationEnabled != VALIDATION_ENABLED_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_CLASS_NAME :
                return METRIC_PROVIDER_CLASS_NAME_EDEFAULT == null ? metricProviderClassName != null : ! METRIC_PROVIDER_CLASS_NAME_EDEFAULT.equals (metricProviderClassName);
            case GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_PRIORITY :
                return metricProviderPriority != METRIC_PROVIDER_PRIORITY_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_CLASS_NAME :
                return VALIDATION_DECORATOR_PROVIDER_CLASS_NAME_EDEFAULT == null ? validationDecoratorProviderClassName != null : ! VALIDATION_DECORATOR_PROVIDER_CLASS_NAME_EDEFAULT.equals (validationDecoratorProviderClassName);
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATORS :
                return validationDecorators != VALIDATION_DECORATORS_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_PRIORITY :
                return validationDecoratorProviderPriority != VALIDATION_DECORATOR_PROVIDER_PRIORITY_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__LIVE_VALIDATION_UI_FEEDBACK :
                return liveValidationUIFeedback != LIVE_VALIDATION_UI_FEEDBACK_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__UNITS :
                return UNITS_EDEFAULT == null ? units != null : ! UNITS_EDEFAULT.equals (units);
            case GMFGenPackage.GEN_DIAGRAM__EDITOR_GEN :
                return getEditorGen () != null;
            case GMFGenPackage.GEN_DIAGRAM__DOMAIN_DIAGRAM_ELEMENT :
                return domainDiagramElement != null;
            case GMFGenPackage.GEN_DIAGRAM__CHILD_NODES :
                return childNodes != null && ! childNodes.isEmpty ();
            case GMFGenPackage.GEN_DIAGRAM__TOP_LEVEL_NODES :
                return topLevelNodes != null && ! topLevelNodes.isEmpty ();
            case GMFGenPackage.GEN_DIAGRAM__LINKS :
                return links != null && ! links.isEmpty ();
            case GMFGenPackage.GEN_DIAGRAM__COMPARTMENTS :
                return compartments != null && ! compartments.isEmpty ();
            case GMFGenPackage.GEN_DIAGRAM__PALETTE :
                return palette != null;
            case GMFGenPackage.GEN_DIAGRAM__SYNCHRONIZED :
                return synchronized_ != SYNCHRONIZED_EDEFAULT;
            case GMFGenPackage.GEN_DIAGRAM__PREFERENCES :
                return preferences != null;
        }
        return super.eIsSet (featureID);
    }

    public int eBaseStructuralFeatureID (int derivedFeatureID, Class baseClass) {
        if (baseClass == PackageNames.class) {
            switch (derivedFeatureID) {
                case GMFGenPackage.GEN_DIAGRAM__EDIT_COMMANDS_PACKAGE_NAME :
                    return GMFGenPackage.PACKAGE_NAMES__EDIT_COMMANDS_PACKAGE_NAME;
                case GMFGenPackage.GEN_DIAGRAM__EDIT_HELPERS_PACKAGE_NAME :
                    return GMFGenPackage.PACKAGE_NAMES__EDIT_HELPERS_PACKAGE_NAME;
                case GMFGenPackage.GEN_DIAGRAM__EDIT_PARTS_PACKAGE_NAME :
                    return GMFGenPackage.PACKAGE_NAMES__EDIT_PARTS_PACKAGE_NAME;
                case GMFGenPackage.GEN_DIAGRAM__EDIT_POLICIES_PACKAGE_NAME :
                    return GMFGenPackage.PACKAGE_NAMES__EDIT_POLICIES_PACKAGE_NAME;
                case GMFGenPackage.GEN_DIAGRAM__PREFERENCES_PACKAGE_NAME :
                    return GMFGenPackage.PACKAGE_NAMES__PREFERENCES_PACKAGE_NAME;
                case GMFGenPackage.GEN_DIAGRAM__PROVIDERS_PACKAGE_NAME :
                    return GMFGenPackage.PACKAGE_NAMES__PROVIDERS_PACKAGE_NAME;
                case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORIES_PACKAGE_NAME :
                    return GMFGenPackage.PACKAGE_NAMES__NOTATION_VIEW_FACTORIES_PACKAGE_NAME;
                default :
                    return - 1;
            }
        }
        if (baseClass == ProviderClassNames.class) {
            switch (derivedFeatureID) {
                case GMFGenPackage.GEN_DIAGRAM__ELEMENT_TYPES_CLASS_NAME :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__ELEMENT_TYPES_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__NOTATION_VIEW_PROVIDER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_PRIORITY :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__NOTATION_VIEW_PROVIDER_PRIORITY;
                case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__EDIT_PART_PROVIDER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_PRIORITY :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__EDIT_PART_PROVIDER_PRIORITY;
                case GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__MODELING_ASSISTANT_PROVIDER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_PRIORITY :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__MODELING_ASSISTANT_PROVIDER_PRIORITY;
                case GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__ICON_PROVIDER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_PRIORITY :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__ICON_PROVIDER_PRIORITY;
                case GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__PARSER_PROVIDER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_PRIORITY :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__PARSER_PROVIDER_PRIORITY;
                case GMFGenPackage.GEN_DIAGRAM__ABSTRACT_PARSER_CLASS_NAME :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__ABSTRACT_PARSER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURE_PARSER_CLASS_NAME :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__STRUCTURAL_FEATURE_PARSER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURES_PARSER_CLASS_NAME :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__STRUCTURAL_FEATURES_PARSER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.PROVIDER_CLASS_NAMES__CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME;
                default :
                    return - 1;
            }
        }
        if (baseClass == LinkConstraints.class) {
            switch (derivedFeatureID) {
                default :
                    return - 1;
            }
        }
        if (baseClass == EditPartCandies.class) {
            switch (derivedFeatureID) {
                case GMFGenPackage.GEN_DIAGRAM__REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME :
                    return GMFGenPackage.EDIT_PART_CANDIES__REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__BASE_EDIT_HELPER_CLASS_NAME :
                    return GMFGenPackage.EDIT_PART_CANDIES__BASE_EDIT_HELPER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_FACTORY_CLASS_NAME :
                    return GMFGenPackage.EDIT_PART_CANDIES__EDIT_PART_FACTORY_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME :
                    return GMFGenPackage.EDIT_PART_CANDIES__BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                    return GMFGenPackage.EDIT_PART_CANDIES__BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME :
                    return GMFGenPackage.EDIT_PART_CANDIES__BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__TEXT_SELECTION_EDIT_POLICY_CLASS_NAME :
                    return GMFGenPackage.EDIT_PART_CANDIES__TEXT_SELECTION_EDIT_POLICY_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME :
                    return GMFGenPackage.EDIT_PART_CANDIES__TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME;
                default :
                    return - 1;
            }
        }
        if (baseClass == EditorCandies.class) {
            switch (derivedFeatureID) {
                case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CLASS_NAME :
                    return GMFGenPackage.EDITOR_CANDIES__CREATION_WIZARD_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_PAGE_CLASS_NAME :
                    return GMFGenPackage.EDITOR_CANDIES__CREATION_WIZARD_PAGE_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_ICON_PATH :
                    return GMFGenPackage.EDITOR_CANDIES__CREATION_WIZARD_ICON_PATH;
                case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CATEGORY_ID :
                    return GMFGenPackage.EDITOR_CANDIES__CREATION_WIZARD_CATEGORY_ID;
                case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_EDITOR_UTIL_CLASS_NAME :
                    return GMFGenPackage.EDITOR_CANDIES__DIAGRAM_EDITOR_UTIL_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__DOCUMENT_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.EDITOR_CANDIES__DOCUMENT_PROVIDER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__INIT_DIAGRAM_FILE_ACTION_CLASS_NAME :
                    return GMFGenPackage.EDITOR_CANDIES__INIT_DIAGRAM_FILE_ACTION_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME :
                    return GMFGenPackage.EDITOR_CANDIES__NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__MATCHING_STRATEGY_CLASS_NAME :
                    return GMFGenPackage.EDITOR_CANDIES__MATCHING_STRATEGY_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID_REGISTRY_CLASS_NAME :
                    return GMFGenPackage.EDITOR_CANDIES__VISUAL_ID_REGISTRY_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__ELEMENT_CHOOSER_CLASS_NAME :
                    return GMFGenPackage.EDITOR_CANDIES__ELEMENT_CHOOSER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__LOAD_RESOURCE_ACTION_CLASS_NAME :
                    return GMFGenPackage.EDITOR_CANDIES__LOAD_RESOURCE_ACTION_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__EDITING_DOMAIN_ID :
                    return GMFGenPackage.EDITOR_CANDIES__EDITING_DOMAIN_ID;
                default :
                    return - 1;
            }
        }
        if (baseClass == Shortcuts.class) {
            switch (derivedFeatureID) {
                case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.SHORTCUTS__SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_PRIORITY :
                    return GMFGenPackage.SHORTCUTS__SHORTCUTS_DECORATOR_PROVIDER_PRIORITY;
                case GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_ACTION_CLASS_NAME :
                    return GMFGenPackage.SHORTCUTS__CREATE_SHORTCUT_ACTION_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME :
                    return GMFGenPackage.SHORTCUTS__CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__SHORTCUT_PROPERTY_TESTER_CLASS_NAME :
                    return GMFGenPackage.SHORTCUTS__SHORTCUT_PROPERTY_TESTER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__CONTAINS_SHORTCUTS_TO :
                    return GMFGenPackage.SHORTCUTS__CONTAINS_SHORTCUTS_TO;
                case GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_PROVIDED_FOR :
                    return GMFGenPackage.SHORTCUTS__SHORTCUTS_PROVIDED_FOR;
                default :
                    return - 1;
            }
        }
        if (baseClass == BatchValidation.class) {
            switch (derivedFeatureID) {
                case GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.BATCH_VALIDATION__VALIDATION_PROVIDER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_PRIORITY :
                    return GMFGenPackage.BATCH_VALIDATION__VALIDATION_PROVIDER_PRIORITY;
                case GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.BATCH_VALIDATION__MARKER_NAVIGATION_PROVIDER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_PRIORITY :
                    return GMFGenPackage.BATCH_VALIDATION__MARKER_NAVIGATION_PROVIDER_PRIORITY;
                case GMFGenPackage.GEN_DIAGRAM__VALIDATION_ENABLED :
                    return GMFGenPackage.BATCH_VALIDATION__VALIDATION_ENABLED;
                case GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.BATCH_VALIDATION__METRIC_PROVIDER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_PRIORITY :
                    return GMFGenPackage.BATCH_VALIDATION__METRIC_PROVIDER_PRIORITY;
                case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.BATCH_VALIDATION__VALIDATION_DECORATOR_PROVIDER_CLASS_NAME;
                case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATORS :
                    return GMFGenPackage.BATCH_VALIDATION__VALIDATION_DECORATORS;
                case GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_PRIORITY :
                    return GMFGenPackage.BATCH_VALIDATION__VALIDATION_DECORATOR_PROVIDER_PRIORITY;
                case GMFGenPackage.GEN_DIAGRAM__LIVE_VALIDATION_UI_FEEDBACK :
                    return GMFGenPackage.BATCH_VALIDATION__LIVE_VALIDATION_UI_FEEDBACK;
                default :
                    return - 1;
            }
        }
        if (baseClass == MeasurementUnit.class) {
            switch (derivedFeatureID) {
                case GMFGenPackage.GEN_DIAGRAM__UNITS :
                    return GMFGenPackage.MEASUREMENT_UNIT__UNITS;
                default :
                    return - 1;
            }
        }
        return super.eBaseStructuralFeatureID (derivedFeatureID, baseClass);
    }

    public int eDerivedStructuralFeatureID (int baseFeatureID, Class baseClass) {
        if (baseClass == PackageNames.class) {
            switch (baseFeatureID) {
                case GMFGenPackage.PACKAGE_NAMES__EDIT_COMMANDS_PACKAGE_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__EDIT_COMMANDS_PACKAGE_NAME;
                case GMFGenPackage.PACKAGE_NAMES__EDIT_HELPERS_PACKAGE_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__EDIT_HELPERS_PACKAGE_NAME;
                case GMFGenPackage.PACKAGE_NAMES__EDIT_PARTS_PACKAGE_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__EDIT_PARTS_PACKAGE_NAME;
                case GMFGenPackage.PACKAGE_NAMES__EDIT_POLICIES_PACKAGE_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__EDIT_POLICIES_PACKAGE_NAME;
                case GMFGenPackage.PACKAGE_NAMES__PREFERENCES_PACKAGE_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__PREFERENCES_PACKAGE_NAME;
                case GMFGenPackage.PACKAGE_NAMES__PROVIDERS_PACKAGE_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__PROVIDERS_PACKAGE_NAME;
                case GMFGenPackage.PACKAGE_NAMES__NOTATION_VIEW_FACTORIES_PACKAGE_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORIES_PACKAGE_NAME;
                default :
                    return - 1;
            }
        }
        if (baseClass == ProviderClassNames.class) {
            switch (baseFeatureID) {
                case GMFGenPackage.PROVIDER_CLASS_NAMES__ELEMENT_TYPES_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__ELEMENT_TYPES_CLASS_NAME;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__NOTATION_VIEW_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_CLASS_NAME;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__NOTATION_VIEW_PROVIDER_PRIORITY :
                    return GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_PRIORITY;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__EDIT_PART_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_CLASS_NAME;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__EDIT_PART_PROVIDER_PRIORITY :
                    return GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_PRIORITY;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__MODELING_ASSISTANT_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_CLASS_NAME;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__MODELING_ASSISTANT_PROVIDER_PRIORITY :
                    return GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_PRIORITY;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__ICON_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_CLASS_NAME;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__ICON_PROVIDER_PRIORITY :
                    return GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_PRIORITY;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__PARSER_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_CLASS_NAME;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__PARSER_PROVIDER_PRIORITY :
                    return GMFGenPackage.GEN_DIAGRAM__PARSER_PROVIDER_PRIORITY;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__ABSTRACT_PARSER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__ABSTRACT_PARSER_CLASS_NAME;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__STRUCTURAL_FEATURE_PARSER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURE_PARSER_CLASS_NAME;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__STRUCTURAL_FEATURES_PARSER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURES_PARSER_CLASS_NAME;
                case GMFGenPackage.PROVIDER_CLASS_NAMES__CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__CONTRIBUTION_ITEM_PROVIDER_CLASS_NAME;
                default :
                    return - 1;
            }
        }
        if (baseClass == LinkConstraints.class) {
            switch (baseFeatureID) {
                default :
                    return - 1;
            }
        }
        if (baseClass == EditPartCandies.class) {
            switch (baseFeatureID) {
                case GMFGenPackage.EDIT_PART_CANDIES__REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME;
                case GMFGenPackage.EDIT_PART_CANDIES__BASE_EDIT_HELPER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__BASE_EDIT_HELPER_CLASS_NAME;
                case GMFGenPackage.EDIT_PART_CANDIES__EDIT_PART_FACTORY_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__EDIT_PART_FACTORY_CLASS_NAME;
                case GMFGenPackage.EDIT_PART_CANDIES__BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__BASE_EXTERNAL_NODE_LABEL_EDIT_PART_CLASS_NAME;
                case GMFGenPackage.EDIT_PART_CANDIES__BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME;
                case GMFGenPackage.EDIT_PART_CANDIES__BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME;
                case GMFGenPackage.EDIT_PART_CANDIES__TEXT_SELECTION_EDIT_POLICY_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__TEXT_SELECTION_EDIT_POLICY_CLASS_NAME;
                case GMFGenPackage.EDIT_PART_CANDIES__TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__TEXT_NON_RESIZABLE_EDIT_POLICY_CLASS_NAME;
                default :
                    return - 1;
            }
        }
        if (baseClass == EditorCandies.class) {
            switch (baseFeatureID) {
                case GMFGenPackage.EDITOR_CANDIES__CREATION_WIZARD_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CLASS_NAME;
                case GMFGenPackage.EDITOR_CANDIES__CREATION_WIZARD_PAGE_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_PAGE_CLASS_NAME;
                case GMFGenPackage.EDITOR_CANDIES__CREATION_WIZARD_ICON_PATH :
                    return GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_ICON_PATH;
                case GMFGenPackage.EDITOR_CANDIES__CREATION_WIZARD_CATEGORY_ID :
                    return GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CATEGORY_ID;
                case GMFGenPackage.EDITOR_CANDIES__DIAGRAM_EDITOR_UTIL_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__DIAGRAM_EDITOR_UTIL_CLASS_NAME;
                case GMFGenPackage.EDITOR_CANDIES__DOCUMENT_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__DOCUMENT_PROVIDER_CLASS_NAME;
                case GMFGenPackage.EDITOR_CANDIES__INIT_DIAGRAM_FILE_ACTION_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__INIT_DIAGRAM_FILE_ACTION_CLASS_NAME;
                case GMFGenPackage.EDITOR_CANDIES__NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__NEW_DIAGRAM_FILE_WIZARD_CLASS_NAME;
                case GMFGenPackage.EDITOR_CANDIES__MATCHING_STRATEGY_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__MATCHING_STRATEGY_CLASS_NAME;
                case GMFGenPackage.EDITOR_CANDIES__VISUAL_ID_REGISTRY_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__VISUAL_ID_REGISTRY_CLASS_NAME;
                case GMFGenPackage.EDITOR_CANDIES__ELEMENT_CHOOSER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__ELEMENT_CHOOSER_CLASS_NAME;
                case GMFGenPackage.EDITOR_CANDIES__LOAD_RESOURCE_ACTION_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__LOAD_RESOURCE_ACTION_CLASS_NAME;
                case GMFGenPackage.EDITOR_CANDIES__EDITING_DOMAIN_ID :
                    return GMFGenPackage.GEN_DIAGRAM__EDITING_DOMAIN_ID;
                default :
                    return - 1;
            }
        }
        if (baseClass == Shortcuts.class) {
            switch (baseFeatureID) {
                case GMFGenPackage.SHORTCUTS__SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_CLASS_NAME;
                case GMFGenPackage.SHORTCUTS__SHORTCUTS_DECORATOR_PROVIDER_PRIORITY :
                    return GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_DECORATOR_PROVIDER_PRIORITY;
                case GMFGenPackage.SHORTCUTS__CREATE_SHORTCUT_ACTION_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_ACTION_CLASS_NAME;
                case GMFGenPackage.SHORTCUTS__CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__CREATE_SHORTCUT_DECORATIONS_COMMAND_CLASS_NAME;
                case GMFGenPackage.SHORTCUTS__SHORTCUT_PROPERTY_TESTER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__SHORTCUT_PROPERTY_TESTER_CLASS_NAME;
                case GMFGenPackage.SHORTCUTS__CONTAINS_SHORTCUTS_TO :
                    return GMFGenPackage.GEN_DIAGRAM__CONTAINS_SHORTCUTS_TO;
                case GMFGenPackage.SHORTCUTS__SHORTCUTS_PROVIDED_FOR :
                    return GMFGenPackage.GEN_DIAGRAM__SHORTCUTS_PROVIDED_FOR;
                default :
                    return - 1;
            }
        }
        if (baseClass == BatchValidation.class) {
            switch (baseFeatureID) {
                case GMFGenPackage.BATCH_VALIDATION__VALIDATION_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_CLASS_NAME;
                case GMFGenPackage.BATCH_VALIDATION__VALIDATION_PROVIDER_PRIORITY :
                    return GMFGenPackage.GEN_DIAGRAM__VALIDATION_PROVIDER_PRIORITY;
                case GMFGenPackage.BATCH_VALIDATION__MARKER_NAVIGATION_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_CLASS_NAME;
                case GMFGenPackage.BATCH_VALIDATION__MARKER_NAVIGATION_PROVIDER_PRIORITY :
                    return GMFGenPackage.GEN_DIAGRAM__MARKER_NAVIGATION_PROVIDER_PRIORITY;
                case GMFGenPackage.BATCH_VALIDATION__VALIDATION_ENABLED :
                    return GMFGenPackage.GEN_DIAGRAM__VALIDATION_ENABLED;
                case GMFGenPackage.BATCH_VALIDATION__METRIC_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_CLASS_NAME;
                case GMFGenPackage.BATCH_VALIDATION__METRIC_PROVIDER_PRIORITY :
                    return GMFGenPackage.GEN_DIAGRAM__METRIC_PROVIDER_PRIORITY;
                case GMFGenPackage.BATCH_VALIDATION__VALIDATION_DECORATOR_PROVIDER_CLASS_NAME :
                    return GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_CLASS_NAME;
                case GMFGenPackage.BATCH_VALIDATION__VALIDATION_DECORATORS :
                    return GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATORS;
                case GMFGenPackage.BATCH_VALIDATION__VALIDATION_DECORATOR_PROVIDER_PRIORITY :
                    return GMFGenPackage.GEN_DIAGRAM__VALIDATION_DECORATOR_PROVIDER_PRIORITY;
                case GMFGenPackage.BATCH_VALIDATION__LIVE_VALIDATION_UI_FEEDBACK :
                    return GMFGenPackage.GEN_DIAGRAM__LIVE_VALIDATION_UI_FEEDBACK;
                default :
                    return - 1;
            }
        }
        if (baseClass == MeasurementUnit.class) {
            switch (baseFeatureID) {
                case GMFGenPackage.MEASUREMENT_UNIT__UNITS :
                    return GMFGenPackage.GEN_DIAGRAM__UNITS;
                default :
                    return - 1;
            }
        }
        return super.eDerivedStructuralFeatureID (baseFeatureID, baseClass);
    }

    public boolean hasLinkCreationConstraints () {
        for (Iterator it = getLinks ().iterator ();
        it.hasNext ();) {
            GenLink nextLink = (GenLink) it.next ();
            if (nextLink.getCreationConstraints () != null) {
                return true;
            }
        }
        return false;
    }

    public String getLinkCreationConstraintsClassName () {
        return "LinkConstraints";
    }

    public String getLinkCreationConstraintsQualifiedClassName () {
        String owningClass = getBaseItemSemanticEditPolicyQualifiedClassName ();
        if (owningClass != null) {
            return owningClass + "." + getLinkCreationConstraintsClassName ();
        }
        return getLinkCreationConstraintsClassName ();
    }

    public String getReorientConnectionViewCommandQualifiedClassName () {
        return getEditCommandsPackageName () + '.' + getReorientConnectionViewCommandClassName ();
    }

    public String getBaseEditHelperQualifiedClassName () {
        return getEditHelpersPackageName () + '.' + getBaseEditHelperClassName ();
    }

    public String getEditPartFactoryQualifiedClassName () {
        return getEditPartsPackageName () + '.' + getEditPartFactoryClassName ();
    }

    public String getBaseExternalNodeLabelEditPartQualifiedClassName () {
        return getEditPartsPackageName () + '.' + getBaseExternalNodeLabelEditPartClassName ();
    }

    public String getBaseItemSemanticEditPolicyQualifiedClassName () {
        return getEditPoliciesPackageName () + '.' + getBaseItemSemanticEditPolicyClassName ();
    }

    public String getBaseGraphicalNodeEditPolicyQualifiedClassName () {
        return getEditPoliciesPackageName () + '.' + getBaseGraphicalNodeEditPolicyClassName ();
    }

    public String getCanonicalEditPolicyQualifiedClassName () {
        return getEditPoliciesPackageName () + '.' + getCanonicalEditPolicyClassName ();
    }

    public String getTextSelectionEditPolicyQualifiedClassName () {
        return getEditPoliciesPackageName () + '.' + getTextSelectionEditPolicyClassName ();
    }

    public String getTextNonResizableEditPolicyQualifiedClassName () {
        return getEditPoliciesPackageName () + '.' + getTextNonResizableEditPolicyClassName ();
    }

    public String getElementTypesQualifiedClassName () {
        return getProvidersPackageName () + '.' + getElementTypesClassName ();
    }

    public String getNotationViewProviderQualifiedClassName () {
        return getProvidersPackageName () + '.' + getNotationViewProviderClassName ();
    }

    public String getInitDiagramFileActionQualifiedClassName () {
        return getEditorPackageName () + '.' + getInitDiagramFileActionClassName ();
    }

    public String getNewDiagramFileWizardQualifiedClassName () {
        return getEditorPackageName () + '.' + getNewDiagramFileWizardClassName ();
    }

    public String getEditPartProviderQualifiedClassName () {
        return getProvidersPackageName () + '.' + getEditPartProviderClassName ();
    }

    public String getModelingAssistantProviderQualifiedClassName () {
        return getProvidersPackageName () + '.' + getModelingAssistantProviderClassName ();
    }

    public String getIconProviderQualifiedClassName () {
        return getProvidersPackageName () + '.' + getIconProviderClassName ();
    }

    public String getParserProviderQualifiedClassName () {
        return getProvidersPackageName () + '.' + getParserProviderClassName ();
    }

    public String getAbstractParserQualifiedClassName () {
        return getProvidersPackageName () + '.' + getAbstractParserClassName ();
    }

    public String getStructuralFeatureParserQualifiedClassName () {
        return getProvidersPackageName () + '.' + getStructuralFeatureParserClassName ();
    }

    public String getStructuralFeaturesParserQualifiedClassName () {
        return getProvidersPackageName () + '.' + getStructuralFeaturesParserClassName ();
    }

    public String getCreationWizardQualifiedClassName () {
        return getEditorPackageName () + '.' + getCreationWizardClassName ();
    }

    public String getCreationWizardPageQualifiedClassName () {
        return getEditorPackageName () + '.' + getCreationWizardPageClassName ();
    }

    public String getDiagramEditorUtilQualifiedClassName () {
        return getEditorPackageName () + '.' + getDiagramEditorUtilClassName ();
    }

    public String getDocumentProviderQualifiedClassName () {
        return getEditorPackageName () + '.' + getDocumentProviderClassName ();
    }

    public String getMatchingStrategyQualifiedClassName () {
        return getEditorPackageName () + '.' + getMatchingStrategyClassName ();
    }

    public String getElementInitializersClassName () {
        return "ElementInitializers";
    }

    public String getElementInitializersPackageName () {
        return getProvidersPackageName ();
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (canonicalEditPolicyClassName: ");
        result.append (canonicalEditPolicyClassName);
        result.append (", editCommandsPackageName: ");
        result.append (editCommandsPackageName);
        result.append (", editHelpersPackageName: ");
        result.append (editHelpersPackageName);
        result.append (", editPartsPackageName: ");
        result.append (editPartsPackageName);
        result.append (", editPoliciesPackageName: ");
        result.append (editPoliciesPackageName);
        result.append (", preferencesPackageName: ");
        result.append (preferencesPackageName);
        result.append (", providersPackageName: ");
        result.append (providersPackageName);
        result.append (", notationViewFactoriesPackageName: ");
        result.append (notationViewFactoriesPackageName);
        result.append (", elementTypesClassName: ");
        result.append (elementTypesClassName);
        result.append (", notationViewProviderClassName: ");
        result.append (notationViewProviderClassName);
        result.append (", notationViewProviderPriority: ");
        result.append (notationViewProviderPriority);
        result.append (", editPartProviderClassName: ");
        result.append (editPartProviderClassName);
        result.append (", editPartProviderPriority: ");
        result.append (editPartProviderPriority);
        result.append (", modelingAssistantProviderClassName: ");
        result.append (modelingAssistantProviderClassName);
        result.append (", modelingAssistantProviderPriority: ");
        result.append (modelingAssistantProviderPriority);
        result.append (", iconProviderClassName: ");
        result.append (iconProviderClassName);
        result.append (", iconProviderPriority: ");
        result.append (iconProviderPriority);
        result.append (", parserProviderClassName: ");
        result.append (parserProviderClassName);
        result.append (", parserProviderPriority: ");
        result.append (parserProviderPriority);
        result.append (", abstractParserClassName: ");
        result.append (abstractParserClassName);
        result.append (", structuralFeatureParserClassName: ");
        result.append (structuralFeatureParserClassName);
        result.append (", structuralFeaturesParserClassName: ");
        result.append (structuralFeaturesParserClassName);
        result.append (", contributionItemProviderClassName: ");
        result.append (contributionItemProviderClassName);
        result.append (", reorientConnectionViewCommandClassName: ");
        result.append (reorientConnectionViewCommandClassName);
        result.append (", baseEditHelperClassName: ");
        result.append (baseEditHelperClassName);
        result.append (", editPartFactoryClassName: ");
        result.append (editPartFactoryClassName);
        result.append (", baseExternalNodeLabelEditPartClassName: ");
        result.append (baseExternalNodeLabelEditPartClassName);
        result.append (", baseItemSemanticEditPolicyClassName: ");
        result.append (baseItemSemanticEditPolicyClassName);
        result.append (", baseGraphicalNodeEditPolicyClassName: ");
        result.append (baseGraphicalNodeEditPolicyClassName);
        result.append (", textSelectionEditPolicyClassName: ");
        result.append (textSelectionEditPolicyClassName);
        result.append (", textNonResizableEditPolicyClassName: ");
        result.append (textNonResizableEditPolicyClassName);
        result.append (", creationWizardClassName: ");
        result.append (creationWizardClassName);
        result.append (", creationWizardPageClassName: ");
        result.append (creationWizardPageClassName);
        result.append (", creationWizardIconPath: ");
        result.append (creationWizardIconPath);
        result.append (", creationWizardCategoryID: ");
        result.append (creationWizardCategoryID);
        result.append (", diagramEditorUtilClassName: ");
        result.append (diagramEditorUtilClassName);
        result.append (", documentProviderClassName: ");
        result.append (documentProviderClassName);
        result.append (", initDiagramFileActionClassName: ");
        result.append (initDiagramFileActionClassName);
        result.append (", newDiagramFileWizardClassName: ");
        result.append (newDiagramFileWizardClassName);
        result.append (", matchingStrategyClassName: ");
        result.append (matchingStrategyClassName);
        result.append (", visualIDRegistryClassName: ");
        result.append (visualIDRegistryClassName);
        result.append (", elementChooserClassName: ");
        result.append (elementChooserClassName);
        result.append (", loadResourceActionClassName: ");
        result.append (loadResourceActionClassName);
        result.append (", editingDomainID: ");
        result.append (editingDomainID);
        result.append (", shortcutsDecoratorProviderClassName: ");
        result.append (shortcutsDecoratorProviderClassName);
        result.append (", shortcutsDecoratorProviderPriority: ");
        result.append (shortcutsDecoratorProviderPriority);
        result.append (", createShortcutActionClassName: ");
        result.append (createShortcutActionClassName);
        result.append (", createShortcutDecorationsCommandClassName: ");
        result.append (createShortcutDecorationsCommandClassName);
        result.append (", shortcutPropertyTesterClassName: ");
        result.append (shortcutPropertyTesterClassName);
        result.append (", containsShortcutsTo: ");
        result.append (containsShortcutsTo);
        result.append (", shortcutsProvidedFor: ");
        result.append (shortcutsProvidedFor);
        result.append (", validationProviderClassName: ");
        result.append (validationProviderClassName);
        result.append (", validationProviderPriority: ");
        result.append (validationProviderPriority);
        result.append (", markerNavigationProviderClassName: ");
        result.append (markerNavigationProviderClassName);
        result.append (", markerNavigationProviderPriority: ");
        result.append (markerNavigationProviderPriority);
        result.append (", validationEnabled: ");
        result.append (validationEnabled);
        result.append (", metricProviderClassName: ");
        result.append (metricProviderClassName);
        result.append (", metricProviderPriority: ");
        result.append (metricProviderPriority);
        result.append (", validationDecoratorProviderClassName: ");
        result.append (validationDecoratorProviderClassName);
        result.append (", validationDecorators: ");
        result.append (validationDecorators);
        result.append (", validationDecoratorProviderPriority: ");
        result.append (validationDecoratorProviderPriority);
        result.append (", liveValidationUIFeedback: ");
        result.append (liveValidationUIFeedback);
        result.append (", units: ");
        result.append (units);
        result.append (", synchronized: ");
        result.append (synchronized_);
        result.append (')');
        return result.toString ();
    }

    String getDomainPackageCapName () {
        return ((GenEditorGeneratorImpl) getEditorGen ()).getDomainModelCapName ();
    }

    private String getEditorPackageName () {
        return getEditorGen ().getEditor ().getPackageName ();
    }

    public String getMetaPackageName (ImportAssistant importManager) {
        return importManager.getImportedName (getDomainDiagramElement ().getGenPackage ().getQualifiedPackageInterfaceName ());
    }

    public Map < TypeModelFacet, GenCommonBase > getTypeModelFacet2GenBaseMap () {
        Map < TypeModelFacet, GenCommonBase > resultMap = new LinkedHashMap < TypeModelFacet, GenCommonBase > ();
        for (Iterator it = getAllNodes ().iterator ();
        it.hasNext ();) {
            GenNode next = (GenNode) it.next ();
            TypeModelFacet modelFacet = null;
            modelFacet = next.getModelFacet ();
            if (modelFacet != null) {
                resultMap.put (modelFacet, next);
            }
        }
        for (Iterator it = getLinks ().iterator ();
        it.hasNext ();) {
            GenLink next = (GenLink) it.next ();
            if (next.getModelFacet () instanceof TypeLinkModelFacet) {
                TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) next.getModelFacet ();
                if (modelFacet != null) {
                    resultMap.put (modelFacet, next);
                }
            }
        }
        return resultMap;
    }

    public Map < GenClass, GenTopLevelNode > getGenClass2PhantomMap () {
        LinkedHashMap < GenClass, GenTopLevelNode > genClass2Phantom = new LinkedHashMap < GenClass, GenTopLevelNode > ();
        for (Iterator topLevelNodes = getTopLevelNodes ().iterator ();
        topLevelNodes.hasNext ();) {
            GenTopLevelNode nextTopLevelNode = (GenTopLevelNode) topLevelNodes.next ();
            TypeModelFacet nextModelFacet = nextTopLevelNode.getModelFacet ();
            if (nextModelFacet == null || ! nextModelFacet.isPhantomElement ()) {
                continue;
            }
            genClass2Phantom.put (nextModelFacet.getMetaClass (), nextTopLevelNode);
        }
        return genClass2Phantom;
    }

    public List < GenLink > getPhantomLinks () {
        LinkedList < GenLink > phantomLinks = new LinkedList < GenLink > ();
        for (Iterator it = getLinks ().iterator ();
        it.hasNext ();) {
            GenLink nextLink = (GenLink) it.next ();
            if (nextLink.getModelFacet () instanceof FeatureLinkModelFacet) {
                FeatureLinkModelFacet nextModelFacet = (FeatureLinkModelFacet) nextLink.getModelFacet ();
                if (nextModelFacet.getMetaFeature ().isContains ()) {
                    phantomLinks.add (nextLink);
                }
            }
        }
        return phantomLinks;
    }

}

