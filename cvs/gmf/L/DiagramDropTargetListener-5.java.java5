package org.eclipse.gmf.runtime.diagram.ui.parts;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.draw2d.Cursors;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPartViewer;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.dnd.AbstractTransferDropTargetListener;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.swt.dnd.DND;

import org.eclipse.swt.dnd.DropTargetEvent;

import org.eclipse.swt.dnd.Transfer;

import org.eclipse.gmf.runtime.diagram.ui.requests.DropObjectsRequest;

import org.eclipse.gmf.runtime.notation.View;

public abstract class DiagramDropTargetListener extends AbstractTransferDropTargetListener {

    public DiagramDropTargetListener (EditPartViewer viewer) {
        super (viewer);
        setEnablementDeterminedByCommand (true);
    }

    public DiagramDropTargetListener (EditPartViewer viewer, Transfer xfer) {
        super (viewer, xfer);
        setEnablementDeterminedByCommand (true);
    }

    protected Request createTargetRequest () {
        return new DropObjectsRequest ();
    }

    protected final DropObjectsRequest getDropObjectsRequest () {
        return ((DropObjectsRequest) getTargetRequest ());
    }

    protected abstract List getObjectsBeingDropped ();

    public void dragEnter (DropTargetEvent event) {
        super.dragEnter (event);
        handleDragEnter ();
    }

    protected void handleDragEnter () {
        handleDragOver ();
    }

    protected void handleDragOperationChanged () {
        super.handleDragOperationChanged ();
        if (getDropObjectsRequest ().getRequiredDetail () != DND.DROP_NONE) {
            getCurrentEvent ().detail = getDropObjectsRequest ().getRequiredDetail ();
        }
    }

    protected void handleDragOver () {
        super.handleDragOver ();
        if (getDropObjectsRequest ().getRequiredDetail () != DND.DROP_NONE) {
            getCurrentEvent ().detail = getDropObjectsRequest ().getRequiredDetail ();
        }
        getCurrentEvent ().feedback = DND.FEEDBACK_SCROLL | DND.FEEDBACK_EXPAND;
    }

    protected void handleDrop () {
        getViewer ().setCursor (Cursors.WAIT);
        super.handleDrop ();
        getViewer ().setCursor (null);
        selectAddedViews ();
    }

    private void selectAddedViews () {
        Object result = getDropObjectsRequest ().getResult ();
        if (result == null || ! (result instanceof Collection)) return;

        EditPartViewer viewer = getViewer ();
        List editParts = new ArrayList ();
        Iterator views = ((Collection) result).iterator ();
        while (views.hasNext ()) {
            Object view = views.next ();
            if (view instanceof IAdaptable) {
                EditPart editPart = (EditPart) viewer.getEditPartRegistry ().get (((IAdaptable) view).getAdapter (View.class));
                if (editPart != null) editParts.add (editPart);

            }
        }
        if (! editParts.isEmpty ()) {
            viewer.getControl ().forceFocus ();
            getViewer ().flush ();
            viewer.setSelection (new StructuredSelection (editParts));
        }
    }

    protected void updateTargetRequest () {
        DropObjectsRequest request = getDropObjectsRequest ();
        request.setLocation (getDropLocation ());
        request.setObjects (getObjectsBeingDropped ());
        request.setAllowedDetail (getCurrentEvent ().operations);
    }

    public boolean isEnabled (DropTargetEvent event) {
        setCurrentEvent (event);
        updateTargetRequest ();
        updateTargetEditPart ();
        if (getTargetEditPart () == null) {
            return false;
        } else if (isEnablementDeterminedByCommand () && isDataTransfered ()) {
            Command command = getCommand ();
            return command != null && command.canExecute ();
        } else {
            return true;
        }

    }

    protected boolean isDataTransfered () {
        return true;
    }

}

