package org.eclipse.gmf.runtime.diagram.ui.resources.editor.util;

import java.io.ByteArrayInputStream;

import java.io.InputStream;

import java.lang.reflect.InvocationTargetException;

import java.util.List;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IResource;

import org.eclipse.core.runtime.IPath;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.core.services.ViewService;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorPlugin;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.ui.parts.FileResourceEditorInput;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.operation.IRunnableContext;

import org.eclipse.jface.operation.IRunnableWithProgress;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.ui.IEditorPart;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchWindow;

import org.eclipse.ui.PlatformUI;

public class EditorUtil {

    public static final IFile createAndOpenDiagram (DiagramFileCreator diagramFileCreator, IPath containerPath, String fileName, String diagramId, InputStream initialContents, String kind, IWorkbenchWindow dWindow, IProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram, PreferencesHint preferencesHint) {
        IFile newFile = EditorUtil.createNewDiagramFile (diagramFileCreator, containerPath, fileName, initialContents, kind, dWindow.getShell (), progressMonitor, preferencesHint);
        if (newFile != null && openEditor) {
            EditorUtil.openDiagram (newFile, dWindow, saveDiagram, progressMonitor, diagramId);
        }
        return newFile;
    }

    public static final DiagramEditPart openDiagram (IFile file, IWorkbenchWindow dWindow, boolean saveDiagram, IProgressMonitor progressMonitor, String diagramId) {
        IEditorPart editorPart = null;
        try {
            IWorkbenchPage page = dWindow.getActivePage ();
            if (page != null) {
                editorPart = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getActivePage ().openEditor (new FileResourceEditorInput (file), diagramId);
                if (saveDiagram) editorPart.doSave (progressMonitor);

            }
            file.refreshLocal (IResource.DEPTH_ZERO, null);
            return ((IDiagramWorkbenchPart) editorPart).getDiagramEditPart ();
        } catch (Exception e) {
            Trace.catching (EditorPlugin.getInstance (), EditorDebugOptions.EXCEPTIONS_CATCHING, EditorUtil.class, "openDiagram", e);
        }
        return null;
    }

    public static IFile createNewDiagramFile (DiagramFileCreator diagramFileCreator, IPath containerFullPath, String fileName, InputStream initialContents, final String kind, Shell shell, final IProgressMonitor progressMonitor, final PreferencesHint preferencesHint) {
        final IFile newDiagramFile = diagramFileCreator.createNewFile (containerFullPath, fileName, initialContents, shell, new IRunnableContext () {

            public void run (boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {
                runnable.run (progressMonitor);
            }

        }

        );
        Resource notationModel = null;
        try {
            newDiagramFile.refreshLocal (IResource.DEPTH_ZERO, null);
            InputStream stream = newDiagramFile.getContents ();
            String completeFileName = newDiagramFile.getLocation ().toOSString ();
            try {
                notationModel = ResourceUtil.create (completeFileName, null);
            } finally {
                stream.close ();
            }
        } catch (Exception e) {
            Trace.catching (EditorPlugin.getInstance (), EditorDebugOptions.EXCEPTIONS_CATCHING, EditorUtil.class, "createNewDiagramFile", e);
        }
        if (notationModel != null) {
            final Resource notationModel_ = notationModel;
            MEditingDomainGetter.getMEditingDomain (notationModel_).runAsUnchecked (new MRunnable () {

                public Object run () {
                    View view = ViewService.createDiagram (kind, preferencesHint);
                    if (view != null) {
                        notationModel_.getContents ().add (view.getDiagram ());
                        view.getDiagram ().setName (newDiagramFile.getName ());
                    }
                    return null;
                }

            }

            );
        }
        return newDiagramFile;
    }

    public static IPath getDefaultDiagramPath (List elements, String diagramKind) {
        IPath path = null;
        return path;
    }

    public static InputStream getInitialContents () {
        return new ByteArrayInputStream (new byte [0]);
    }

}

