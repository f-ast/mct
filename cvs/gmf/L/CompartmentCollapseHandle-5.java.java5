package org.eclipse.gmf.runtime.diagram.ui.handles;

import java.beans.PropertyChangeEvent;

import java.beans.PropertyChangeListener;

import org.eclipse.draw2d.Cursors;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.Locator;

import org.eclipse.draw2d.StackLayout;

import org.eclipse.draw2d.TreeSearch;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.DragTracker;

import org.eclipse.gef.handles.AbstractHandle;

import org.eclipse.gmf.runtime.diagram.core.listener.PresentationListener;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IResizableCompartmentEditPart;

import org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure;

import org.eclipse.gmf.runtime.diagram.ui.internal.figures.CollapseFigure;

import org.eclipse.gmf.runtime.diagram.ui.internal.tools.CompartmentCollapseTracker;

import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;

import org.eclipse.gmf.runtime.notation.DrawerStyle;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public class CompartmentCollapseHandle extends AbstractHandle implements PropertyChangeListener {
    private class CollapseHandleLocator implements Locator {

        public void relocate (IFigure target) {
            Rectangle theBounds = getOwnerFigure ().getClientArea ().getCopy ();
            getOwnerFigure ().translateToAbsolute (theBounds);
            target.translateToRelative (theBounds);
            target.setLocation (theBounds.getLocation ());
        }

    }

    public static Dimension SIZE = new Dimension (MapMode.LPtoDP (ResizableCompartmentFigure.MIN_CLIENT_SIZE), MapMode.LPtoDP (ResizableCompartmentFigure.MIN_CLIENT_SIZE));
    protected CollapseFigure collapseFigure = null;

    public CompartmentCollapseHandle (IGraphicalEditPart owner) {
        setOwner (owner);
        setLocator (new CollapseHandleLocator ());
        setCursor (Cursors.ARROW);
        setSize (SIZE);
        setLayoutManager (new StackLayout ());
        add (collapseFigure = new CollapseFigure ());
        View view = owner.getNotationView ();
        if (view != null) {
            DrawerStyle style = (DrawerStyle) view.getStyle (NotationPackage.eINSTANCE.getDrawerStyle ());
            if (style != null) {
                collapseFigure.setCollapsed (style.isCollapsed ());
                return;
            }
        }
        collapseFigure.setCollapsed (false);
    }

    public IFigure findFigureAt (int x, int y, TreeSearch search) {
        IFigure found = super.findFigureAt (x, y, search);
        return (collapseFigure.equals (found)) ? this : found;
    }

    protected DragTracker createDragTracker () {
        return new CompartmentCollapseTracker ((IResizableCompartmentEditPart) getOwner ());
    }

    public void propertyChange (PropertyChangeEvent evt) {
        if (evt.getPropertyName ().equals (Properties.ID_COLLAPSED)) collapseFigure.setCollapsed (((Boolean) evt.getNewValue ()).booleanValue ());

    }

    public void addNotify () {
        super.addNotify ();
        IGraphicalEditPart owner = (IGraphicalEditPart) getOwner ();
        View view = owner.getNotationView ();
        if (view != null) {
            PresentationListener.getInstance ().addPropertyChangeListener (owner.getNotationView (), CompartmentCollapseHandle.this);
        }
    }

    public void removeNotify () {
        IGraphicalEditPart owner = (IGraphicalEditPart) getOwner ();
        PresentationListener.getInstance ().removePropertyChangeListener (owner.getNotationView (), this);
        super.removeNotify ();
    }

}

