package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.FlatEObjectImpl;

import org.eclipse.gmf.runtime.notation.ArrowStyle;

import org.eclipse.gmf.runtime.notation.ArrowType;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class ArrowStyleImpl extends NotationEObjectImpl implements ArrowStyle {
    protected static final ArrowType ARROW_SOURCE_EDEFAULT = ArrowType.NONE_LITERAL;
    protected static final int ARROW_SOURCE_EFLAG_OFFSET = 8;
    protected static final int ARROW_SOURCE_EFLAG_DEFAULT = ArrowType.VALUES.indexOf (ARROW_SOURCE_EDEFAULT) << ARROW_SOURCE_EFLAG_OFFSET;
    private static final ArrowType [] ARROW_SOURCE_EFLAG_VALUES = (ArrowType []) ArrowType.VALUES.toArray (new ArrowType [ArrowType.VALUES.size ()]);
    protected static final int ARROW_SOURCE_EFLAG = 0x3 << ARROW_SOURCE_EFLAG_OFFSET;
    protected static final ArrowType ARROW_TARGET_EDEFAULT = ArrowType.NONE_LITERAL;
    protected static final int ARROW_TARGET_EFLAG_OFFSET = 10;
    protected static final int ARROW_TARGET_EFLAG_DEFAULT = ArrowType.VALUES.indexOf (ARROW_TARGET_EDEFAULT) << ARROW_TARGET_EFLAG_OFFSET;
    private static final ArrowType [] ARROW_TARGET_EFLAG_VALUES = (ArrowType []) ArrowType.VALUES.toArray (new ArrowType [ArrowType.VALUES.size ()]);
    protected static final int ARROW_TARGET_EFLAG = 0x3 << ARROW_TARGET_EFLAG_OFFSET;

    protected ArrowStyleImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.ARROW_STYLE;
    }

    public ArrowType getArrowSource () {
        return ARROW_SOURCE_EFLAG_VALUES [(eFlags & ARROW_SOURCE_EFLAG)>>> ARROW_SOURCE_EFLAG_OFFSET];
    }

    public void setArrowSource (ArrowType newArrowSource) {
        ArrowType oldArrowSource = ARROW_SOURCE_EFLAG_VALUES [(eFlags & ARROW_SOURCE_EFLAG)>>> ARROW_SOURCE_EFLAG_OFFSET];
        if (newArrowSource == null) newArrowSource = ARROW_SOURCE_EDEFAULT;

        eFlags = eFlags & ~ ARROW_SOURCE_EFLAG | ArrowType.VALUES.indexOf (newArrowSource) << ARROW_SOURCE_EFLAG_OFFSET;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.ARROW_STYLE__ARROW_SOURCE, oldArrowSource, newArrowSource));

    }

    public ArrowType getArrowTarget () {
        return ARROW_TARGET_EFLAG_VALUES [(eFlags & ARROW_TARGET_EFLAG)>>> ARROW_TARGET_EFLAG_OFFSET];
    }

    public void setArrowTarget (ArrowType newArrowTarget) {
        ArrowType oldArrowTarget = ARROW_TARGET_EFLAG_VALUES [(eFlags & ARROW_TARGET_EFLAG)>>> ARROW_TARGET_EFLAG_OFFSET];
        if (newArrowTarget == null) newArrowTarget = ARROW_TARGET_EDEFAULT;

        eFlags = eFlags & ~ ARROW_TARGET_EFLAG | ArrowType.VALUES.indexOf (newArrowTarget) << ARROW_TARGET_EFLAG_OFFSET;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.ARROW_STYLE__ARROW_TARGET, oldArrowTarget, newArrowTarget));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.ARROW_STYLE__ARROW_SOURCE :
                return getArrowSource ();
            case NotationPackage.ARROW_STYLE__ARROW_TARGET :
                return getArrowTarget ();
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.ARROW_STYLE__ARROW_SOURCE :
                setArrowSource ((ArrowType) newValue);
                return;
            case NotationPackage.ARROW_STYLE__ARROW_TARGET :
                setArrowTarget ((ArrowType) newValue);
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.ARROW_STYLE__ARROW_SOURCE :
                setArrowSource (ARROW_SOURCE_EDEFAULT);
                return;
            case NotationPackage.ARROW_STYLE__ARROW_TARGET :
                setArrowTarget (ARROW_TARGET_EDEFAULT);
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.ARROW_STYLE__ARROW_SOURCE :
                return (eFlags & ARROW_SOURCE_EFLAG) != ARROW_SOURCE_EFLAG_DEFAULT;
            case NotationPackage.ARROW_STYLE__ARROW_TARGET :
                return (eFlags & ARROW_TARGET_EFLAG) != ARROW_TARGET_EFLAG_DEFAULT;
        }
        return eDynamicIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (arrowSource: ");
        result.append (ARROW_SOURCE_EFLAG_VALUES [(eFlags & ARROW_SOURCE_EFLAG)>>> ARROW_SOURCE_EFLAG_OFFSET]);
        result.append (", arrowTarget: ");
        result.append (ARROW_TARGET_EFLAG_VALUES [(eFlags & ARROW_TARGET_EFLAG)>>> ARROW_TARGET_EFLAG_OFFSET]);
        result.append (')');
        return result.toString ();
    }

}

