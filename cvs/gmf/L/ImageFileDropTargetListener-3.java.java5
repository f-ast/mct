package org.eclipse.gmf.runtime.diagram.ui.internal.parts;

import java.util.ArrayList;

import java.util.List;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPartViewer;

import org.eclipse.swt.SWTException;

import org.eclipse.swt.dnd.DropTargetEvent;

import org.eclipse.swt.dnd.FileTransfer;

import org.eclipse.swt.dnd.TransferData;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener;

public class ImageFileDropTargetListener extends DiagramDropTargetListener {

    public ImageFileDropTargetListener (EditPartViewer viewer) {
        super (viewer, FileTransfer.getInstance ());
    }

    protected List getObjectsBeingDropped () {
        TransferData [] data = getCurrentEvent ().dataTypes;
        List fileList = new ArrayList ();
        for (int i = 0;
        i < data.length; i ++) {
            if (FileTransfer.getInstance ().isSupportedType (data [i])) {
                try {
                    Object files = FileTransfer.getInstance ().nativeToJava (data [i]);
                    if (files instanceof String []) {
                        String [] fileStrings = (String []) files;
                        for (int j = 0;
                        j < fileStrings.length; j ++) fileList.add (fileStrings [j]);

                    }
                } catch (SWTException e) {
                    return null;
                }
            }
        }
        if (fileList.size () > 0) return fileList;

        return null;
    }

    public boolean isEnabled (DropTargetEvent event) {
        if (super.isEnabled (event)) {
            Object modelObj = getViewer ().getContents ().getModel ();
            if (modelObj instanceof EObject) {
                return getDropObjectsRequest ().getObjects () != null;
            } else if (modelObj instanceof IAdaptable) {
                final EObject target = (EObject) ((IAdaptable) modelObj).getAdapter (EObject.class);
                List elements = getDropObjectsRequest ().getObjects ();
                if (elements == null || target == null) {
                    return false;
                }
            }

            return true;
        }
        return false;
    }

}

