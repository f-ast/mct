package org.eclipse.gmf.runtime.emf.ui.services.modelingassistant;

import java.util.Collections;

import java.util.List;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

public abstract class ModelingAssistantProvider extends AbstractProvider implements IModelingAssistantProvider {

    public boolean provides (IOperation operation) {
        if (operation instanceof GetRelTypesOnSourceOperation) {
            return ! getRelTypesOnSource (((GetRelTypesOnSourceOperation) operation).getSource ()).isEmpty ();
        } else if (operation instanceof GetRelTypesOnTargetOperation) {
            return ! getRelTypesOnTarget (((GetRelTypesOnTargetOperation) operation).getTarget ()).isEmpty ();
        } else if (operation instanceof GetRelTypesOnSourceAndTargetOperation) {
            return ! getRelTypesOnSourceAndTarget (((GetRelTypesOnSourceAndTargetOperation) operation).getSource (), ((GetRelTypesOnSourceAndTargetOperation) operation).getTarget ()).isEmpty ();
        } else if (operation instanceof GetTypesForSourceOperation) {
            return ! getTypesForSource (((GetTypesForSourceOperation) operation).getTarget (), ((GetTypesForSourceOperation) operation).getRelationshipType ()).isEmpty ();
        } else if (operation instanceof GetTypesForTargetOperation) {
            return ! getTypesForTarget (((GetTypesForTargetOperation) operation).getSource (), ((GetTypesForTargetOperation) operation).getRelationshipType ()).isEmpty ();
        } else if (operation instanceof GetRelTypesForSREOnSourceOperation) {
            return ! getRelTypesForSREOnSource (((GetRelTypesForSREOnSourceOperation) operation).getSource ()).isEmpty ();
        } else if (operation instanceof GetRelTypesForSREOnTargetOperation) {
            return ! getRelTypesForSREOnTarget (((GetRelTypesForSREOnTargetOperation) operation).getTarget ()).isEmpty ();
        } else if (operation instanceof SelectExistingElementForSourceOperation) {
            return ! getTypesForSource (((SelectExistingElementForSourceOperation) operation).getTarget (), ((SelectExistingElementForSourceOperation) operation).getRelationshipType ()).isEmpty ();
        } else if (operation instanceof SelectExistingElementForTargetOperation) {
            return ! getTypesForTarget (((SelectExistingElementForTargetOperation) operation).getSource (), ((SelectExistingElementForTargetOperation) operation).getRelationshipType ()).isEmpty ();
        } else if (operation instanceof GetTypesOperation) {
            return ! getTypes (((GetTypesOperation) operation).getHint (), ((GetTypesOperation) operation).getData ()).isEmpty ();
        } else if (operation instanceof GetTypesForPopupBarOperation) {
            return ! getTypesForPopupBar (((GetTypesForPopupBarOperation) operation).getHost ()).isEmpty ();
        }

        return false;
    }

    public List getTypes (String hint, IAdaptable data) {
        return Collections.EMPTY_LIST;
    }

    public List getRelTypesForSREOnSource (IAdaptable source) {
        return getRelTypesOnSource (source);
    }

    public List getRelTypesForSREOnTarget (IAdaptable target) {
        return getRelTypesOnTarget (target);
    }

    public List getRelTypesOnSource (IAdaptable source) {
        return Collections.EMPTY_LIST;
    }

    public List getRelTypesOnTarget (IAdaptable target) {
        return Collections.EMPTY_LIST;
    }

    public List getRelTypesOnSourceAndTarget (IAdaptable source, IAdaptable target) {
        return Collections.EMPTY_LIST;
    }

    public List getTypesForSource (IAdaptable target, IElementType relationshipType) {
        return Collections.EMPTY_LIST;
    }

    public List getTypesForTarget (IAdaptable source, IElementType relationshipType) {
        return Collections.EMPTY_LIST;
    }

    public EObject selectExistingElementForSource (IAdaptable target, IElementType relationshipType) {
        return null;
    }

    public EObject selectExistingElementForTarget (IAdaptable source, IElementType relationshipType) {
        return null;
    }

    public List getTypesForPopupBar (IAdaptable host) {
        return Collections.EMPTY_LIST;
    }

    public List getTypesForActionBar (IAdaptable host) {
        return Collections.EMPTY_LIST;
    }

}

