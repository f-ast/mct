package org.eclipse.gmf.runtime.notation;

import java.util.Arrays;

import java.util.Collections;

import java.util.List;

import org.eclipse.emf.common.util.AbstractEnumerator;

public final class JumpLinkType extends AbstractEnumerator {
    public static final int SEMICIRCLE = 0;
    public static final int SQUARE = 1;
    public static final int CHAMFERED = 2;
    public static final JumpLinkType SEMICIRCLE_LITERAL = new JumpLinkType (SEMICIRCLE, "Semicircle", "Semicircle");
    public static final JumpLinkType SQUARE_LITERAL = new JumpLinkType (SQUARE, "Square", "Square");
    public static final JumpLinkType CHAMFERED_LITERAL = new JumpLinkType (CHAMFERED, "Chamfered", "Chamfered");
    private static final JumpLinkType [] VALUES_ARRAY = new JumpLinkType [] {SEMICIRCLE_LITERAL, SQUARE_LITERAL, CHAMFERED_LITERAL,};
    public static final List VALUES = Collections.unmodifiableList (Arrays.asList (VALUES_ARRAY));

    public static JumpLinkType get (String literal) {
        for (int i = 0;
        i < VALUES_ARRAY.length; ++ i) {
            JumpLinkType result = VALUES_ARRAY [i];
            if (result.toString ().equals (literal)) {
                return result;
            }
        }
        return null;
    }

    public static JumpLinkType getByName (String name) {
        for (int i = 0;
        i < VALUES_ARRAY.length; ++ i) {
            JumpLinkType result = VALUES_ARRAY [i];
            if (result.getName ().equals (name)) {
                return result;
            }
        }
        return null;
    }

    public static JumpLinkType get (int value) {
        switch (value) {
            case SEMICIRCLE :
                return SEMICIRCLE_LITERAL;
            case SQUARE :
                return SQUARE_LITERAL;
            case CHAMFERED :
                return CHAMFERED_LITERAL;
        }
        return null;
    }

    private JumpLinkType (int value, String name, String literal) {
        super (value, name, literal);
    }

}

