package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.gmfgraph.Color;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.LineBorder;

public class LineBorderImpl extends EObjectImpl implements LineBorder {
    protected Color color = null;
    protected static final int WIDTH_EDEFAULT = 1;
    protected int width = WIDTH_EDEFAULT;

    protected LineBorderImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getLineBorder ();
    }

    public Color getColor () {
        return color;
    }

    public NotificationChain basicSetColor (Color newColor, NotificationChain msgs) {
        Color oldColor = color;
        color = newColor;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.LINE_BORDER__COLOR, oldColor, newColor);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setColor (Color newColor) {
        if (newColor != color) {
            NotificationChain msgs = null;
            if (color != null) msgs = ((InternalEObject) color).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.LINE_BORDER__COLOR, null, msgs);

            if (newColor != null) msgs = ((InternalEObject) newColor).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.LINE_BORDER__COLOR, null, msgs);

            msgs = basicSetColor (newColor, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.LINE_BORDER__COLOR, newColor, newColor));

    }

    public int getWidth () {
        return width;
    }

    public void setWidth (int newWidth) {
        int oldWidth = width;
        width = newWidth;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.LINE_BORDER__WIDTH, oldWidth, width));

    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.LINE_BORDER__COLOR :
                return basicSetColor (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.LINE_BORDER__COLOR :
                return getColor ();
            case GMFGraphPackage.LINE_BORDER__WIDTH :
                return new Integer (getWidth ());
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.LINE_BORDER__COLOR :
                setColor ((Color) newValue);
                return;
            case GMFGraphPackage.LINE_BORDER__WIDTH :
                setWidth (((Integer) newValue).intValue ());
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.LINE_BORDER__COLOR :
                setColor ((Color) null);
                return;
            case GMFGraphPackage.LINE_BORDER__WIDTH :
                setWidth (WIDTH_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.LINE_BORDER__COLOR :
                return color != null;
            case GMFGraphPackage.LINE_BORDER__WIDTH :
                return width != WIDTH_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (width: ");
        result.append (width);
        result.append (')');
        return result.toString ();
    }

}

