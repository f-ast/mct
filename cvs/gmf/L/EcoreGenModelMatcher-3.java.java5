package org.eclipse.gmf.internal.bridge.genmodel;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.codegen.ecore.genmodel.GenClassifier;

import org.eclipse.emf.codegen.ecore.genmodel.GenModel;

import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;

import org.eclipse.emf.codegen.ecore.genmodel.impl.GenBaseImpl;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.EcorePackage;

public class EcoreGenModelMatcher extends GenModelMatcher {

    public EcoreGenModelMatcher () {
        super (getEcoreModel ());
    }

    public GenPackage findGenPackage (EPackage domainPackage) {
        if (domainPackage == EcorePackage.eINSTANCE) {
            for (GenPackage genPackage : getGenModel ().getGenPackages ()) {
                if (genPackage.getEcorePackage () != null && safeEquals (domainPackage.getNsURI (), genPackage.getEcorePackage ().getNsURI ())) {
                    return genPackage;
                }
            }
        }
        return domainPackage == null ? null : getGenModel ().findGenPackage (domainPackage);
    }

    public GenClass findGenClass (EClass domainMetaClass) {
        GenClassifier genClassifier = findGenClassifier (domainMetaClass);
        if (genClassifier instanceof GenClass) {
            return (GenClass) genClassifier;
        }
        throw new IllegalStateException ("Can't find genClass for class '" + domainMetaClass.getName ());
    }

    public GenClassifier findGenClassifier (EClassifier domainMetaClassifier) {
        if (domainMetaClassifier == null) {
            return null;
        }
        GenPackage gp = findGenPackage (domainMetaClassifier.getEPackage ());
        if (gp == null) {
            throw new IllegalStateException ("Can't find genPackage for " + domainMetaClassifier.getEPackage ());
        }
        for (GenClassifier genClassifier : gp.getGenClassifiers ()) {
            if (genClassifier.getEcoreClassifier () != null && safeEquals (genClassifier.getEcoreClassifier ().getName (), domainMetaClassifier.getName ())) {
                return genClassifier;
            }
        }
        throw new IllegalStateException ("Can't find genClassifier for classifier '" + domainMetaClassifier.getName () + "' in package " + gp.getPackageName ());
    }

    private static GenModel getEcoreModel () {
        URI genModelUri = URI.createURI ("platform:/plugin/org.eclipse.emf.ecore/model/Ecore.genmodel");
        FileGenModelAccess access = new FileGenModelAccess (genModelUri);
        access.load ();
        return access.model ();
    }

    private static boolean safeEquals (String s1, String s2) {
        return (s1 != null) ? s1.equals (s2) : (s2 == s1 || s2.equals (s1));
    }

}

