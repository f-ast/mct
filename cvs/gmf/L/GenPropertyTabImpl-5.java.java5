package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.util.CodeGenUtil;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenPropertySheet;

import org.eclipse.gmf.codegen.gmfgen.GenPropertyTab;

public abstract class GenPropertyTabImpl extends EObjectImpl implements GenPropertyTab {
    protected static final String ID_EDEFAULT = null;
    protected String iD = ID_EDEFAULT;
    protected static final String LABEL_EDEFAULT = null;
    protected String label = LABEL_EDEFAULT;

    protected GenPropertyTabImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenPropertyTab ();
    }

    public GenPropertySheet getSheet () {
        if (eContainerFeatureID != GMFGenPackage.GEN_PROPERTY_TAB__SHEET) return null;

        return (GenPropertySheet) eContainer ();
    }

    public NotificationChain basicSetSheet (GenPropertySheet newSheet, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newSheet, GMFGenPackage.GEN_PROPERTY_TAB__SHEET, msgs);
        return msgs;
    }

    public void setSheet (GenPropertySheet newSheet) {
        if (newSheet != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_PROPERTY_TAB__SHEET && newSheet != null)) {
            if (EcoreUtil.isAncestor (this, newSheet)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newSheet != null) msgs = ((InternalEObject) newSheet).eInverseAdd (this, GMFGenPackage.GEN_PROPERTY_SHEET__TABS, GenPropertySheet.class, msgs);

            msgs = basicSetSheet (newSheet, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PROPERTY_TAB__SHEET, newSheet, newSheet));

    }

    public String getID () {
        return iD;
    }

    public void setID (String newID) {
        String oldID = iD;
        iD = newID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PROPERTY_TAB__ID, oldID, iD));

    }

    public String getLabelGen () {
        return label;
    }

    public String getLabel () {
        String rv = getLabelGen ();
        if (rv == null || rv.trim ().length () == 0) {
            return getID () == null ? null : CodeGenUtil.capName (getID ());
        }
        return rv;
    }

    public void setLabel (String newLabel) {
        String oldLabel = label;
        label = newLabel;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PROPERTY_TAB__LABEL, oldLabel, label));

    }

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_PROPERTY_TAB__SHEET :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetSheet ((GenPropertySheet) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_PROPERTY_TAB__SHEET :
                return basicSetSheet (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_PROPERTY_TAB__SHEET :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_PROPERTY_SHEET__TABS, GenPropertySheet.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_PROPERTY_TAB__SHEET :
                return getSheet ();
            case GMFGenPackage.GEN_PROPERTY_TAB__ID :
                return getID ();
            case GMFGenPackage.GEN_PROPERTY_TAB__LABEL :
                return getLabel ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_PROPERTY_TAB__SHEET :
                setSheet ((GenPropertySheet) newValue);
                return;
            case GMFGenPackage.GEN_PROPERTY_TAB__ID :
                setID ((String) newValue);
                return;
            case GMFGenPackage.GEN_PROPERTY_TAB__LABEL :
                setLabel ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_PROPERTY_TAB__SHEET :
                setSheet ((GenPropertySheet) null);
                return;
            case GMFGenPackage.GEN_PROPERTY_TAB__ID :
                setID (ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_PROPERTY_TAB__LABEL :
                setLabel (LABEL_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_PROPERTY_TAB__SHEET :
                return getSheet () != null;
            case GMFGenPackage.GEN_PROPERTY_TAB__ID :
                return ID_EDEFAULT == null ? iD != null : ! ID_EDEFAULT.equals (iD);
            case GMFGenPackage.GEN_PROPERTY_TAB__LABEL :
                return LABEL_EDEFAULT == null ? label != null : ! LABEL_EDEFAULT.equals (label);
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (iD: ");
        result.append (iD);
        result.append (", label: ");
        result.append (label);
        result.append (')');
        return result.toString ();
    }

}

