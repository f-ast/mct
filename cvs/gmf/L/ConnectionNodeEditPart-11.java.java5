package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.HashSet;

import java.util.Iterator;

import java.util.List;

import org.eclipse.draw2d.Connection;

import org.eclipse.draw2d.ConnectionAnchor;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.transaction.RunnableWithResult;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.NodeEditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.requests.CreateRequest;

import org.eclipse.gef.requests.DropRequest;

import org.eclipse.gef.requests.ReconnectRequest;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.NoteAttachmentReorientEditPolicy;

import org.eclipse.gmf.runtime.draw2d.ui.figures.IAnchorableFigure;

import org.eclipse.gmf.runtime.notation.Anchor;

import org.eclipse.gmf.runtime.notation.IdentityAnchor;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

abstract public class ConnectionNodeEditPart extends ConnectionEditPart implements INodeEditPart {

    public ConnectionNodeEditPart (View view) {
        super (view);
    }

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicy.GRAPHICAL_NODE_ROLE, new GraphicalNodeEditPolicy ());
        installEditPolicy ("NoteAttachmentReorient", new NoteAttachmentReorientEditPolicy ());
    }

    protected List getModelSourceConnections () {
        return ViewUtil.getSourceConnections (getEdge ());
    }

    protected List getModelTargetConnections () {
        return ViewUtil.getTargetConnections (getEdge ());
    }

    protected ConnectionAnchor getSourceConnectionAnchor () {
        if (getSource () != null && getSource () instanceof NodeEditPart) {
            NodeEditPart editPart = (NodeEditPart) getSource ();
            return editPart.getSourceConnectionAnchor (this);
        }
        return super.getSourceConnectionAnchor ();
    }

    public ConnectionAnchor getSourceConnectionAnchor (org.eclipse.gef.ConnectionEditPart connEditPart) {
        final ConnectionNodeEditPart connection = (ConnectionNodeEditPart) connEditPart;
        String t = "";
        try {
            t = (String) getEditingDomain ().runExclusive (new RunnableWithResult.Impl () {

                public void run () {
                    Anchor a = connection.getEdge ().getSourceAnchor ();
                    if (a instanceof IdentityAnchor) setResult (((IdentityAnchor) a).getId ());
                    else setResult ("");

                }

            }

            );
        } catch (InterruptedException e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getSourceConnectionAnchor", e);
            Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "getSourceConnectionAnchor", e);
        }
        return ((IAnchorableFigure) getFigure ()).getConnectionAnchor (t);
    }

    public ConnectionAnchor getSourceConnectionAnchor (Request request) {
        Point center = getFigure ().getBounds ().getCenter ();
        getFigure ().translateToAbsolute (center);
        Point pt = ((DropRequest) request).getLocation () == null ? center : new Point (((DropRequest) request).getLocation ());
        if (request instanceof CreateRequest) {
            getFigure ().translateToRelative (pt);
        }
        return ((IAnchorableFigure) getFigure ()).getSourceConnectionAnchorAt (pt);
    }

    protected ConnectionAnchor getTargetConnectionAnchor () {
        if (getTarget () instanceof NodeEditPart) {
            NodeEditPart editPart = (NodeEditPart) getTarget ();
            return editPart.getTargetConnectionAnchor (this);
        }
        return super.getTargetConnectionAnchor ();
    }

    public ConnectionAnchor getTargetConnectionAnchor (org.eclipse.gef.ConnectionEditPart connEditPart) {
        final ConnectionNodeEditPart connection = (ConnectionNodeEditPart) connEditPart;
        String t = "";
        try {
            t = (String) getEditingDomain ().runExclusive (new RunnableWithResult.Impl () {

                public void run () {
                    Anchor a = connection.getEdge ().getTargetAnchor ();
                    if (a instanceof IdentityAnchor) setResult (((IdentityAnchor) a).getId ());
                    else setResult ("");

                }

            }

            );
        } catch (InterruptedException e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getTargetConnectionAnchor", e);
            Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "getTargetConnectionAnchor", e);
        }
        return ((IAnchorableFigure) getFigure ()).getConnectionAnchor (t);
    }

    public ConnectionAnchor getTargetConnectionAnchor (Request request) {
        Point center = getFigure ().getBounds ().getCenter ();
        getFigure ().translateToAbsolute (center);
        Point pt = ((DropRequest) request).getLocation () == null ? center : new Point (((DropRequest) request).getLocation ());
        if (request instanceof CreateRequest) {
            getFigure ().translateToRelative (pt);
        }
        return ((IAnchorableFigure) getFigure ()).getTargetConnectionAnchorAt (pt);
    }

    final public String mapConnectionAnchorToTerminal (ConnectionAnchor c) {
        return ((IAnchorableFigure) getFigure ()).getConnectionAnchorTerminal (c);
    }

    final public ConnectionAnchor mapTerminalToConnectionAnchor (String terminal) {
        return ((IAnchorableFigure) getFigure ()).getConnectionAnchor (terminal);
    }

    public boolean canAttachNote () {
        return true;
    }

    protected void handleNotificationEvent (Notification notification) {
        Object feature = notification.getFeature ();
        if (NotationPackage.eINSTANCE.getView_SourceEdges ().equals (feature)) refreshSourceConnections ();
        else if (NotationPackage.eINSTANCE.getView_TargetEdges ().equals (feature)) refreshTargetConnections ();
        else super.handleNotificationEvent (notification);

        if (NotationPackage.eINSTANCE.getIdentityAnchor_Id ().equals (feature) || notification.getNewValue () instanceof IdentityAnchor || notification.getOldValue () instanceof IdentityAnchor) {
            anchorChange ();
        }
    }

    public void anchorChange () {
        refreshSourceAnchor ();
        refreshTargetAnchor ();
    }

    private void getSourceAndTargetConnections (HashSet set, org.eclipse.gef.ConnectionEditPart connectionEditPart) {
        if (connectionEditPart == null || set == null) return;

        for (Iterator i = connectionEditPart.getSourceConnections ().iterator ();
        i.hasNext ();) {
            org.eclipse.gef.ConnectionEditPart next = (org.eclipse.gef.ConnectionEditPart) i.next ();
            Connection sourceConnection = (Connection) next.getFigure ();
            set.add (sourceConnection);
            getSourceAndTargetConnections (set, next);
        }
        for (Iterator i = connectionEditPart.getTargetConnections ().iterator ();
        i.hasNext ();) {
            org.eclipse.gef.ConnectionEditPart next = (org.eclipse.gef.ConnectionEditPart) i.next ();
            Connection targetConnection = (Connection) next.getFigure ();
            set.add (targetConnection);
            getSourceAndTargetConnections (set, next);
        }
    }

    private boolean isCyclicConnectionRequest (org.eclipse.gef.ConnectionEditPart targetCEP, org.eclipse.gef.ConnectionEditPart sourceCEP, boolean checkSourceAndTargetEditParts, boolean doNotCheckSourceEditPart) {
        if (targetCEP == null || sourceCEP == null) return false;

        if (sourceCEP == targetCEP) return true;

        HashSet set = new HashSet ();
        getSourceAndTargetConnections (set, sourceCEP);
        if (set.contains (targetCEP.getFigure ())) return true;

        EditPart sourceEP = sourceCEP.getSource (), targetEP = sourceCEP.getTarget ();
        if ((sourceEP == targetCEP) || (targetEP == targetCEP)) {
            return true;
        } else {
            if (! checkSourceAndTargetEditParts && doNotCheckSourceEditPart) {
            } else if (sourceEP instanceof org.eclipse.gef.ConnectionEditPart && isCyclicConnectionRequest (targetCEP, (org.eclipse.gef.ConnectionEditPart) sourceEP, true, doNotCheckSourceEditPart)) return true;

            if (! checkSourceAndTargetEditParts && ! doNotCheckSourceEditPart) {
            } else if (targetEP instanceof org.eclipse.gef.ConnectionEditPart && isCyclicConnectionRequest (targetCEP, (org.eclipse.gef.ConnectionEditPart) targetEP, true, doNotCheckSourceEditPart)) return true;

        }
        return false;
    }

    public EditPart getTargetEditPart (Request request) {
        EditPart ep = super.getTargetEditPart (request);
        if (ep != null && ep instanceof org.eclipse.gef.ConnectionEditPart) {
            if (request instanceof ReconnectRequest) {
                ReconnectRequest rRequest = (ReconnectRequest) request;
                if (rRequest.isMovingStartAnchor ()) {
                    if (rRequest.getConnectionEditPart ().getSource () == ep) {
                        return ep;
                    }
                } else if (rRequest.getConnectionEditPart ().getTarget () == ep) {
                    return ep;
                }

                if (isCyclicConnectionRequest ((org.eclipse.gef.ConnectionEditPart) ep, rRequest.getConnectionEditPart (), false, rRequest.isMovingStartAnchor ())) return null;

            }
        }
        return ep;
    }

}

