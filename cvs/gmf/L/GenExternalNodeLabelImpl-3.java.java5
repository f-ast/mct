package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.ExternalLabel;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenExternalNodeLabel;

public class GenExternalNodeLabelImpl extends GenNodeLabelImpl implements GenExternalNodeLabel {
    protected static final String TEXT_EDIT_PART_CLASS_NAME_EDEFAULT = null;
    protected String textEditPartClassName = TEXT_EDIT_PART_CLASS_NAME_EDEFAULT;
    protected static final String TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT = null;
    protected String textNotationViewFactoryClassName = TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT;

    protected GenExternalNodeLabelImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenExternalNodeLabel ();
    }

    public String getTextEditPartClassNameGen () {
        return textEditPartClassName;
    }

    public String getTextEditPartClassName () {
        String value = getTextEditPartClassNameGen ();
        if (isEmpty (value)) {
            value = getClassNamePart () + TEXT_EDIT_PART_SUFFIX;
        }
        return value;
    }

    public void setTextEditPartClassName (String newTextEditPartClassName) {
        String oldTextEditPartClassName = textEditPartClassName;
        textEditPartClassName = newTextEditPartClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_EDIT_PART_CLASS_NAME, oldTextEditPartClassName, textEditPartClassName));

    }

    public String getTextNotationViewFactoryClassNameGen () {
        return textNotationViewFactoryClassName;
    }

    public String getTextNotationViewFactoryClassName () {
        String value = getTextNotationViewFactoryClassNameGen ();
        if (isEmpty (value)) {
            value = getClassNamePart () + TEXT_NOTATION_VIEW_FACTORY_SUFFIX;
        }
        return value;
    }

    public void setTextNotationViewFactoryClassName (String newTextNotationViewFactoryClassName) {
        String oldTextNotationViewFactoryClassName = textNotationViewFactoryClassName;
        textNotationViewFactoryClassName = newTextNotationViewFactoryClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME, oldTextNotationViewFactoryClassName, textNotationViewFactoryClassName));

    }

    public String getTextEditPartQualifiedClassName () {
        return getDiagram ().getEditPartsPackageName () + '.' + getTextEditPartClassName ();
    }

    public String getTextNotationViewFactoryQualifiedClassName () {
        return getDiagram ().getNotationViewFactoriesPackageName () + '.' + getTextNotationViewFactoryClassName ();
    }

    public String getSemanticHintLabelFieldName () {
        return GenCommonBaseImpl.asJavaConstantName (getUniqueIdentifier ()) + "_LABEL";
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_EDIT_PART_CLASS_NAME :
                return getTextEditPartClassName ();
            case GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME :
                return getTextNotationViewFactoryClassName ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_EDIT_PART_CLASS_NAME :
                setTextEditPartClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME :
                setTextNotationViewFactoryClassName ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_EDIT_PART_CLASS_NAME :
                setTextEditPartClassName (TEXT_EDIT_PART_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME :
                setTextNotationViewFactoryClassName (TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_EDIT_PART_CLASS_NAME :
                return TEXT_EDIT_PART_CLASS_NAME_EDEFAULT == null ? textEditPartClassName != null : ! TEXT_EDIT_PART_CLASS_NAME_EDEFAULT.equals (textEditPartClassName);
            case GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME :
                return TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? textNotationViewFactoryClassName != null : ! TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals (textNotationViewFactoryClassName);
        }
        return super.eIsSet (featureID);
    }

    public int eBaseStructuralFeatureID (int derivedFeatureID, Class baseClass) {
        if (baseClass == ExternalLabel.class) {
            switch (derivedFeatureID) {
                case GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_EDIT_PART_CLASS_NAME :
                    return GMFGenPackage.EXTERNAL_LABEL__TEXT_EDIT_PART_CLASS_NAME;
                case GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME :
                    return GMFGenPackage.EXTERNAL_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME;
                default :
                    return - 1;
            }
        }
        return super.eBaseStructuralFeatureID (derivedFeatureID, baseClass);
    }

    public int eDerivedStructuralFeatureID (int baseFeatureID, Class baseClass) {
        if (baseClass == ExternalLabel.class) {
            switch (baseFeatureID) {
                case GMFGenPackage.EXTERNAL_LABEL__TEXT_EDIT_PART_CLASS_NAME :
                    return GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_EDIT_PART_CLASS_NAME;
                case GMFGenPackage.EXTERNAL_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME :
                    return GMFGenPackage.GEN_EXTERNAL_NODE_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME;
                default :
                    return - 1;
            }
        }
        return super.eDerivedStructuralFeatureID (baseFeatureID, baseClass);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (textEditPartClassName: ");
        result.append (textEditPartClassName);
        result.append (", textNotationViewFactoryClassName: ");
        result.append (textNotationViewFactoryClassName);
        result.append (')');
        return result.toString ();
    }

    public String getClassNameSuffux () {
        return "ExternalNodeLabel";
    }

}

