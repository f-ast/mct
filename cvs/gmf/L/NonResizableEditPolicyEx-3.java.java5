package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.Iterator;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Handle;

import org.eclipse.gef.Request;

import org.eclipse.gef.editpolicies.NonResizableEditPolicy;

import org.eclipse.gef.handles.AbstractHandle;

import org.eclipse.gef.requests.ChangeBoundsRequest;

import org.eclipse.gef.tools.DragEditPartsTracker;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;

public class NonResizableEditPolicyEx extends NonResizableEditPolicy {

    public void eraseSourceFeedback (Request request) {
        if (RequestConstants.REQ_DROP.equals (request.getType ())) eraseChangeBoundsFeedback ((ChangeBoundsRequest) request);
        else super.eraseSourceFeedback (request);

    }

    public void showSourceFeedback (Request request) {
        if (RequestConstants.REQ_DROP.equals (request.getType ())) showChangeBoundsFeedback ((ChangeBoundsRequest) request);
        else super.showSourceFeedback (request);

    }

    protected void addSelectionHandles () {
        super.addSelectionHandles ();
        Iterator iter = handles.iterator ();
        while (iter.hasNext ()) {
            Handle handle = (Handle) iter.next ();
            if (handle.getDragTracker ().getClass () == DragEditPartsTracker.class) replaceHandleDragEditPartsTracker (handle);

        }
    }

    protected void replaceHandleDragEditPartsTracker (Handle handle) {
        if (handle instanceof AbstractHandle) {
            AbstractHandle h = (AbstractHandle) handle;
            h.setDragTracker (new DragEditPartsTrackerEx (getHost ()));
        }
    }

    public EditPart getTargetEditPart (Request request) {
        if (understandsRequest (request)) return getHost ();

        return super.getTargetEditPart (request);
    }

}

