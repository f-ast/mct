package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenChildLabelNode;

import org.eclipse.gmf.codegen.gmfgen.LabelModelFacet;

public class GenChildLabelNodeImpl extends GenChildNodeImpl implements GenChildLabelNode {
    protected static final boolean LABEL_ELEMENT_ICON_EDEFAULT = false;
    protected boolean labelElementIcon = LABEL_ELEMENT_ICON_EDEFAULT;
    protected LabelModelFacet labelModelFacet = null;

    protected GenChildLabelNodeImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenChildLabelNode ();
    }

    public boolean isLabelElementIcon () {
        return labelElementIcon;
    }

    public void setLabelElementIcon (boolean newLabelElementIcon) {
        boolean oldLabelElementIcon = labelElementIcon;
        labelElementIcon = newLabelElementIcon;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_ELEMENT_ICON, oldLabelElementIcon, labelElementIcon));

    }

    public LabelModelFacet getLabelModelFacet () {
        return labelModelFacet;
    }

    public NotificationChain basicSetLabelModelFacet (LabelModelFacet newLabelModelFacet, NotificationChain msgs) {
        LabelModelFacet oldLabelModelFacet = labelModelFacet;
        labelModelFacet = newLabelModelFacet;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET, oldLabelModelFacet, newLabelModelFacet);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setLabelModelFacet (LabelModelFacet newLabelModelFacet) {
        if (newLabelModelFacet != labelModelFacet) {
            NotificationChain msgs = null;
            if (labelModelFacet != null) msgs = ((InternalEObject) labelModelFacet).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET, null, msgs);

            if (newLabelModelFacet != null) msgs = ((InternalEObject) newLabelModelFacet).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET, null, msgs);

            msgs = basicSetLabelModelFacet (newLabelModelFacet, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET, newLabelModelFacet, newLabelModelFacet));

    }

    public EList getLabelMetaFeatures () {
        return GenLabelImpl.getMetaFeatures (getLabelModelFacet ());
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET :
                return basicSetLabelModelFacet (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_ELEMENT_ICON :
                return isLabelElementIcon () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET :
                return getLabelModelFacet ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_ELEMENT_ICON :
                setLabelElementIcon (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET :
                setLabelModelFacet ((LabelModelFacet) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_ELEMENT_ICON :
                setLabelElementIcon (LABEL_ELEMENT_ICON_EDEFAULT);
                return;
            case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET :
                setLabelModelFacet ((LabelModelFacet) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_ELEMENT_ICON :
                return labelElementIcon != LABEL_ELEMENT_ICON_EDEFAULT;
            case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET :
                return labelModelFacet != null;
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (labelElementIcon: ");
        result.append (labelElementIcon);
        result.append (')');
        return result.toString ();
    }

}

