package org.eclipse.gmf.codegen.gmfgen.util;

import java.util.List;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.codegen.gmfgen.*;

import org.eclipse.gmf.codegen.gmfgen.Attributes;

import org.eclipse.gmf.codegen.gmfgen.BatchValidation;

import org.eclipse.gmf.codegen.gmfgen.ColorAttributes;

import org.eclipse.gmf.codegen.gmfgen.DefaultSizeAttributes;

import org.eclipse.gmf.codegen.gmfgen.EditPartCandies;

import org.eclipse.gmf.codegen.gmfgen.EditorCandies;

import org.eclipse.gmf.codegen.gmfgen.ElementType;

import org.eclipse.gmf.codegen.gmfgen.EntryBase;

import org.eclipse.gmf.codegen.gmfgen.FeatureLabelModelFacet;

import org.eclipse.gmf.codegen.gmfgen.FeatureLinkModelFacet;

import org.eclipse.gmf.codegen.gmfgen.FigureViewmap;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenAuditContainer;

import org.eclipse.gmf.codegen.gmfgen.GenAuditRule;

import org.eclipse.gmf.codegen.gmfgen.GenAuditable;

import org.eclipse.gmf.codegen.gmfgen.GenAuditedMetricTarget;

import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;

import org.eclipse.gmf.codegen.gmfgen.GenChildNode;

import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;

import org.eclipse.gmf.codegen.gmfgen.GenCompartment;

import org.eclipse.gmf.codegen.gmfgen.GenConstraint;

import org.eclipse.gmf.codegen.gmfgen.GenContainerBase;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.GenDiagramElementTarget;

import org.eclipse.gmf.codegen.gmfgen.GenDomainElementTarget;

import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

import org.eclipse.gmf.codegen.gmfgen.GenEditorView;

import org.eclipse.gmf.codegen.gmfgen.GenElementInitializer;

import org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter;

import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;

import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;

import org.eclipse.gmf.codegen.gmfgen.GenExternalNodeLabel;

import org.eclipse.gmf.codegen.gmfgen.GenFeatureSeqInitializer;

import org.eclipse.gmf.codegen.gmfgen.GenFeatureValueSpec;

import org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider;

import org.eclipse.gmf.codegen.gmfgen.GenLabel;

import org.eclipse.gmf.codegen.gmfgen.GenLink;

import org.eclipse.gmf.codegen.gmfgen.GenLinkConstraints;

import org.eclipse.gmf.codegen.gmfgen.GenLinkLabel;

import org.eclipse.gmf.codegen.gmfgen.GenMeasurable;

import org.eclipse.gmf.codegen.gmfgen.GenMetricContainer;

import org.eclipse.gmf.codegen.gmfgen.GenMetricRule;

import org.eclipse.gmf.codegen.gmfgen.GenNode;

import org.eclipse.gmf.codegen.gmfgen.GenNodeLabel;

import org.eclipse.gmf.codegen.gmfgen.GenNotationElementTarget;

import org.eclipse.gmf.codegen.gmfgen.GenPlugin;

import org.eclipse.gmf.codegen.gmfgen.GenRuleBase;

import org.eclipse.gmf.codegen.gmfgen.GenRuleContainerBase;

import org.eclipse.gmf.codegen.gmfgen.GenRuleTarget;

import org.eclipse.gmf.codegen.gmfgen.GenTopLevelNode;

import org.eclipse.gmf.codegen.gmfgen.InnerClassViewmap;

import org.eclipse.gmf.codegen.gmfgen.LabelModelFacet;

import org.eclipse.gmf.codegen.gmfgen.LabelOffsetAttributes;

import org.eclipse.gmf.codegen.gmfgen.LinkConstraints;

import org.eclipse.gmf.codegen.gmfgen.LinkModelFacet;

import org.eclipse.gmf.codegen.gmfgen.MeasurementUnit;

import org.eclipse.gmf.codegen.gmfgen.MetamodelType;

import org.eclipse.gmf.codegen.gmfgen.ModelFacet;

import org.eclipse.gmf.codegen.gmfgen.NotationType;

import org.eclipse.gmf.codegen.gmfgen.PackageNames;

import org.eclipse.gmf.codegen.gmfgen.Palette;

import org.eclipse.gmf.codegen.gmfgen.ProviderClassNames;

import org.eclipse.gmf.codegen.gmfgen.ResizeConstraints;

import org.eclipse.gmf.codegen.gmfgen.Separator;

import org.eclipse.gmf.codegen.gmfgen.Shortcuts;

import org.eclipse.gmf.codegen.gmfgen.SnippetViewmap;

import org.eclipse.gmf.codegen.gmfgen.SpecializationType;

import org.eclipse.gmf.codegen.gmfgen.ToolEntry;

import org.eclipse.gmf.codegen.gmfgen.ToolGroup;

import org.eclipse.gmf.codegen.gmfgen.ToolGroupItem;

import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;

import org.eclipse.gmf.codegen.gmfgen.TypeModelFacet;

import org.eclipse.gmf.codegen.gmfgen.ValueExpression;

import org.eclipse.gmf.codegen.gmfgen.Viewmap;

public class GMFGenSwitch {
    protected static GMFGenPackage modelPackage;

    public GMFGenSwitch () {
        if (modelPackage == null) {
            modelPackage = GMFGenPackage.eINSTANCE;
        }
    }

    public Object doSwitch (EObject theEObject) {
        return doSwitch (theEObject.eClass (), theEObject);
    }

    protected Object doSwitch (EClass theEClass, EObject theEObject) {
        if (theEClass.eContainer () == modelPackage) {
            return doSwitch (theEClass.getClassifierID (), theEObject);
        } else {
            List eSuperTypes = theEClass.getESuperTypes ();
            return eSuperTypes.isEmpty () ? defaultCase (theEObject) : doSwitch ((EClass) eSuperTypes.get (0), theEObject);
        }
    }

    protected Object doSwitch (int classifierID, EObject theEObject) {
        switch (classifierID) {
            case GMFGenPackage.GEN_EDITOR_GENERATOR :
                {
                    GenEditorGenerator genEditorGenerator = (GenEditorGenerator) theEObject;
                    Object result = caseGenEditorGenerator (genEditorGenerator);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_DIAGRAM :
                {
                    GenDiagram genDiagram = (GenDiagram) theEObject;
                    Object result = caseGenDiagram (genDiagram);
                    if (result == null) result = caseGenContainerBase (genDiagram);

                    if (result == null) result = casePackageNames (genDiagram);

                    if (result == null) result = caseProviderClassNames (genDiagram);

                    if (result == null) result = caseLinkConstraints (genDiagram);

                    if (result == null) result = caseEditPartCandies (genDiagram);

                    if (result == null) result = caseEditorCandies (genDiagram);

                    if (result == null) result = caseShortcuts (genDiagram);

                    if (result == null) result = caseBatchValidation (genDiagram);

                    if (result == null) result = caseMeasurementUnit (genDiagram);

                    if (result == null) result = caseGenCommonBase (genDiagram);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_EDITOR_VIEW :
                {
                    GenEditorView genEditorView = (GenEditorView) theEObject;
                    Object result = caseGenEditorView (genEditorView);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_PREFERENCE_PAGE :
                {
                    GenPreferencePage genPreferencePage = (GenPreferencePage) theEObject;
                    Object result = caseGenPreferencePage (genPreferencePage);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_CUSTOM_PREFERENCE_PAGE :
                {
                    GenCustomPreferencePage genCustomPreferencePage = (GenCustomPreferencePage) theEObject;
                    Object result = caseGenCustomPreferencePage (genCustomPreferencePage);
                    if (result == null) result = caseGenPreferencePage (genCustomPreferencePage);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE :
                {
                    GenStandardPreferencePage genStandardPreferencePage = (GenStandardPreferencePage) theEObject;
                    Object result = caseGenStandardPreferencePage (genStandardPreferencePage);
                    if (result == null) result = caseGenPreferencePage (genStandardPreferencePage);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_DIAGRAM_PREFERENCES :
                {
                    GenDiagramPreferences genDiagramPreferences = (GenDiagramPreferences) theEObject;
                    Object result = caseGenDiagramPreferences (genDiagramPreferences);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_FONT :
                {
                    GenFont genFont = (GenFont) theEObject;
                    Object result = caseGenFont (genFont);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_STANDARD_FONT :
                {
                    GenStandardFont genStandardFont = (GenStandardFont) theEObject;
                    Object result = caseGenStandardFont (genStandardFont);
                    if (result == null) result = caseGenFont (genStandardFont);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_CUSTOM_FONT :
                {
                    GenCustomFont genCustomFont = (GenCustomFont) theEObject;
                    Object result = caseGenCustomFont (genCustomFont);
                    if (result == null) result = caseGenFont (genCustomFont);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_COLOR :
                {
                    GenColor genColor = (GenColor) theEObject;
                    Object result = caseGenColor (genColor);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_RGB_COLOR :
                {
                    GenRGBColor genRGBColor = (GenRGBColor) theEObject;
                    Object result = caseGenRGBColor (genRGBColor);
                    if (result == null) result = caseGenColor (genRGBColor);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_CONSTANT_COLOR :
                {
                    GenConstantColor genConstantColor = (GenConstantColor) theEObject;
                    Object result = caseGenConstantColor (genConstantColor);
                    if (result == null) result = caseGenColor (genConstantColor);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.BATCH_VALIDATION :
                {
                    BatchValidation batchValidation = (BatchValidation) theEObject;
                    Object result = caseBatchValidation (batchValidation);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.PROVIDER_CLASS_NAMES :
                {
                    ProviderClassNames providerClassNames = (ProviderClassNames) theEObject;
                    Object result = caseProviderClassNames (providerClassNames);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.SHORTCUTS :
                {
                    Shortcuts shortcuts = (Shortcuts) theEObject;
                    Object result = caseShortcuts (shortcuts);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.PACKAGE_NAMES :
                {
                    PackageNames packageNames = (PackageNames) theEObject;
                    Object result = casePackageNames (packageNames);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.LINK_CONSTRAINTS :
                {
                    LinkConstraints linkConstraints = (LinkConstraints) theEObject;
                    Object result = caseLinkConstraints (linkConstraints);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.EDITOR_CANDIES :
                {
                    EditorCandies editorCandies = (EditorCandies) theEObject;
                    Object result = caseEditorCandies (editorCandies);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.EDIT_PART_CANDIES :
                {
                    EditPartCandies editPartCandies = (EditPartCandies) theEObject;
                    Object result = caseEditPartCandies (editPartCandies);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.MEASUREMENT_UNIT :
                {
                    MeasurementUnit measurementUnit = (MeasurementUnit) theEObject;
                    Object result = caseMeasurementUnit (measurementUnit);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_PLUGIN :
                {
                    GenPlugin genPlugin = (GenPlugin) theEObject;
                    Object result = caseGenPlugin (genPlugin);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_COMMON_BASE :
                {
                    GenCommonBase genCommonBase = (GenCommonBase) theEObject;
                    Object result = caseGenCommonBase (genCommonBase);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.BEHAVIOUR :
                {
                    Behaviour behaviour = (Behaviour) theEObject;
                    Object result = caseBehaviour (behaviour);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.CUSTOM_BEHAVIOUR :
                {
                    CustomBehaviour customBehaviour = (CustomBehaviour) theEObject;
                    Object result = caseCustomBehaviour (customBehaviour);
                    if (result == null) result = caseBehaviour (customBehaviour);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.SHARED_BEHAVIOUR :
                {
                    SharedBehaviour sharedBehaviour = (SharedBehaviour) theEObject;
                    Object result = caseSharedBehaviour (sharedBehaviour);
                    if (result == null) result = caseBehaviour (sharedBehaviour);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR :
                {
                    OpenDiagramBehaviour openDiagramBehaviour = (OpenDiagramBehaviour) theEObject;
                    Object result = caseOpenDiagramBehaviour (openDiagramBehaviour);
                    if (result == null) result = caseBehaviour (openDiagramBehaviour);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_CONTAINER_BASE :
                {
                    GenContainerBase genContainerBase = (GenContainerBase) theEObject;
                    Object result = caseGenContainerBase (genContainerBase);
                    if (result == null) result = caseGenCommonBase (genContainerBase);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_CHILD_CONTAINER :
                {
                    GenChildContainer genChildContainer = (GenChildContainer) theEObject;
                    Object result = caseGenChildContainer (genChildContainer);
                    if (result == null) result = caseGenContainerBase (genChildContainer);

                    if (result == null) result = caseGenCommonBase (genChildContainer);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_NODE :
                {
                    GenNode genNode = (GenNode) theEObject;
                    Object result = caseGenNode (genNode);
                    if (result == null) result = caseGenChildContainer (genNode);

                    if (result == null) result = caseGenContainerBase (genNode);

                    if (result == null) result = caseGenCommonBase (genNode);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_TOP_LEVEL_NODE :
                {
                    GenTopLevelNode genTopLevelNode = (GenTopLevelNode) theEObject;
                    Object result = caseGenTopLevelNode (genTopLevelNode);
                    if (result == null) result = caseGenNode (genTopLevelNode);

                    if (result == null) result = caseGenChildContainer (genTopLevelNode);

                    if (result == null) result = caseGenContainerBase (genTopLevelNode);

                    if (result == null) result = caseGenCommonBase (genTopLevelNode);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_CHILD_NODE :
                {
                    GenChildNode genChildNode = (GenChildNode) theEObject;
                    Object result = caseGenChildNode (genChildNode);
                    if (result == null) result = caseGenNode (genChildNode);

                    if (result == null) result = caseGenChildContainer (genChildNode);

                    if (result == null) result = caseGenContainerBase (genChildNode);

                    if (result == null) result = caseGenCommonBase (genChildNode);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_CHILD_SIDE_AFFIXED_NODE :
                {
                    GenChildSideAffixedNode genChildSideAffixedNode = (GenChildSideAffixedNode) theEObject;
                    Object result = caseGenChildSideAffixedNode (genChildSideAffixedNode);
                    if (result == null) result = caseGenChildNode (genChildSideAffixedNode);

                    if (result == null) result = caseGenNode (genChildSideAffixedNode);

                    if (result == null) result = caseGenChildContainer (genChildSideAffixedNode);

                    if (result == null) result = caseGenContainerBase (genChildSideAffixedNode);

                    if (result == null) result = caseGenCommonBase (genChildSideAffixedNode);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_CHILD_LABEL_NODE :
                {
                    GenChildLabelNode genChildLabelNode = (GenChildLabelNode) theEObject;
                    Object result = caseGenChildLabelNode (genChildLabelNode);
                    if (result == null) result = caseGenChildNode (genChildLabelNode);

                    if (result == null) result = caseGenNode (genChildLabelNode);

                    if (result == null) result = caseGenChildContainer (genChildLabelNode);

                    if (result == null) result = caseGenContainerBase (genChildLabelNode);

                    if (result == null) result = caseGenCommonBase (genChildLabelNode);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_COMPARTMENT :
                {
                    GenCompartment genCompartment = (GenCompartment) theEObject;
                    Object result = caseGenCompartment (genCompartment);
                    if (result == null) result = caseGenChildContainer (genCompartment);

                    if (result == null) result = caseGenContainerBase (genCompartment);

                    if (result == null) result = caseGenCommonBase (genCompartment);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_LINK :
                {
                    GenLink genLink = (GenLink) theEObject;
                    Object result = caseGenLink (genLink);
                    if (result == null) result = caseGenCommonBase (genLink);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_LABEL :
                {
                    GenLabel genLabel = (GenLabel) theEObject;
                    Object result = caseGenLabel (genLabel);
                    if (result == null) result = caseGenCommonBase (genLabel);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_NODE_LABEL :
                {
                    GenNodeLabel genNodeLabel = (GenNodeLabel) theEObject;
                    Object result = caseGenNodeLabel (genNodeLabel);
                    if (result == null) result = caseGenLabel (genNodeLabel);

                    if (result == null) result = caseGenCommonBase (genNodeLabel);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_EXTERNAL_NODE_LABEL :
                {
                    GenExternalNodeLabel genExternalNodeLabel = (GenExternalNodeLabel) theEObject;
                    Object result = caseGenExternalNodeLabel (genExternalNodeLabel);
                    if (result == null) result = caseGenNodeLabel (genExternalNodeLabel);

                    if (result == null) result = caseGenLabel (genExternalNodeLabel);

                    if (result == null) result = caseGenCommonBase (genExternalNodeLabel);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_LINK_LABEL :
                {
                    GenLinkLabel genLinkLabel = (GenLinkLabel) theEObject;
                    Object result = caseGenLinkLabel (genLinkLabel);
                    if (result == null) result = caseGenLabel (genLinkLabel);

                    if (result == null) result = caseGenCommonBase (genLinkLabel);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.ELEMENT_TYPE :
                {
                    ElementType elementType = (ElementType) theEObject;
                    Object result = caseElementType (elementType);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.METAMODEL_TYPE :
                {
                    MetamodelType metamodelType = (MetamodelType) theEObject;
                    Object result = caseMetamodelType (metamodelType);
                    if (result == null) result = caseElementType (metamodelType);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.SPECIALIZATION_TYPE :
                {
                    SpecializationType specializationType = (SpecializationType) theEObject;
                    Object result = caseSpecializationType (specializationType);
                    if (result == null) result = caseElementType (specializationType);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.NOTATION_TYPE :
                {
                    NotationType notationType = (NotationType) theEObject;
                    Object result = caseNotationType (notationType);
                    if (result == null) result = caseElementType (notationType);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.MODEL_FACET :
                {
                    ModelFacet modelFacet = (ModelFacet) theEObject;
                    Object result = caseModelFacet (modelFacet);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.LINK_MODEL_FACET :
                {
                    LinkModelFacet linkModelFacet = (LinkModelFacet) theEObject;
                    Object result = caseLinkModelFacet (linkModelFacet);
                    if (result == null) result = caseModelFacet (linkModelFacet);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.LABEL_MODEL_FACET :
                {
                    LabelModelFacet labelModelFacet = (LabelModelFacet) theEObject;
                    Object result = caseLabelModelFacet (labelModelFacet);
                    if (result == null) result = caseModelFacet (labelModelFacet);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.TYPE_MODEL_FACET :
                {
                    TypeModelFacet typeModelFacet = (TypeModelFacet) theEObject;
                    Object result = caseTypeModelFacet (typeModelFacet);
                    if (result == null) result = caseModelFacet (typeModelFacet);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.TYPE_LINK_MODEL_FACET :
                {
                    TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) theEObject;
                    Object result = caseTypeLinkModelFacet (typeLinkModelFacet);
                    if (result == null) result = caseTypeModelFacet (typeLinkModelFacet);

                    if (result == null) result = caseLinkModelFacet (typeLinkModelFacet);

                    if (result == null) result = caseModelFacet (typeLinkModelFacet);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.FEATURE_LINK_MODEL_FACET :
                {
                    FeatureLinkModelFacet featureLinkModelFacet = (FeatureLinkModelFacet) theEObject;
                    Object result = caseFeatureLinkModelFacet (featureLinkModelFacet);
                    if (result == null) result = caseLinkModelFacet (featureLinkModelFacet);

                    if (result == null) result = caseModelFacet (featureLinkModelFacet);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.FEATURE_LABEL_MODEL_FACET :
                {
                    FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) theEObject;
                    Object result = caseFeatureLabelModelFacet (featureLabelModelFacet);
                    if (result == null) result = caseLabelModelFacet (featureLabelModelFacet);

                    if (result == null) result = caseModelFacet (featureLabelModelFacet);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.DESIGN_LABEL_MODEL_FACET :
                {
                    DesignLabelModelFacet designLabelModelFacet = (DesignLabelModelFacet) theEObject;
                    Object result = caseDesignLabelModelFacet (designLabelModelFacet);
                    if (result == null) result = caseLabelModelFacet (designLabelModelFacet);

                    if (result == null) result = caseModelFacet (designLabelModelFacet);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.ATTRIBUTES :
                {
                    Attributes attributes = (Attributes) theEObject;
                    Object result = caseAttributes (attributes);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.COLOR_ATTRIBUTES :
                {
                    ColorAttributes colorAttributes = (ColorAttributes) theEObject;
                    Object result = caseColorAttributes (colorAttributes);
                    if (result == null) result = caseAttributes (colorAttributes);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.STYLE_ATTRIBUTES :
                {
                    StyleAttributes styleAttributes = (StyleAttributes) theEObject;
                    Object result = caseStyleAttributes (styleAttributes);
                    if (result == null) result = caseAttributes (styleAttributes);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.RESIZE_CONSTRAINTS :
                {
                    ResizeConstraints resizeConstraints = (ResizeConstraints) theEObject;
                    Object result = caseResizeConstraints (resizeConstraints);
                    if (result == null) result = caseAttributes (resizeConstraints);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.DEFAULT_SIZE_ATTRIBUTES :
                {
                    DefaultSizeAttributes defaultSizeAttributes = (DefaultSizeAttributes) theEObject;
                    Object result = caseDefaultSizeAttributes (defaultSizeAttributes);
                    if (result == null) result = caseAttributes (defaultSizeAttributes);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.LABEL_OFFSET_ATTRIBUTES :
                {
                    LabelOffsetAttributes labelOffsetAttributes = (LabelOffsetAttributes) theEObject;
                    Object result = caseLabelOffsetAttributes (labelOffsetAttributes);
                    if (result == null) result = caseAttributes (labelOffsetAttributes);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.VIEWMAP :
                {
                    Viewmap viewmap = (Viewmap) theEObject;
                    Object result = caseViewmap (viewmap);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.FIGURE_VIEWMAP :
                {
                    FigureViewmap figureViewmap = (FigureViewmap) theEObject;
                    Object result = caseFigureViewmap (figureViewmap);
                    if (result == null) result = caseViewmap (figureViewmap);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.SNIPPET_VIEWMAP :
                {
                    SnippetViewmap snippetViewmap = (SnippetViewmap) theEObject;
                    Object result = caseSnippetViewmap (snippetViewmap);
                    if (result == null) result = caseViewmap (snippetViewmap);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.INNER_CLASS_VIEWMAP :
                {
                    InnerClassViewmap innerClassViewmap = (InnerClassViewmap) theEObject;
                    Object result = caseInnerClassViewmap (innerClassViewmap);
                    if (result == null) result = caseViewmap (innerClassViewmap);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.PARENT_ASSIGNED_VIEWMAP :
                {
                    ParentAssignedViewmap parentAssignedViewmap = (ParentAssignedViewmap) theEObject;
                    Object result = caseParentAssignedViewmap (parentAssignedViewmap);
                    if (result == null) result = caseViewmap (parentAssignedViewmap);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.VALUE_EXPRESSION :
                {
                    ValueExpression valueExpression = (ValueExpression) theEObject;
                    Object result = caseValueExpression (valueExpression);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_CONSTRAINT :
                {
                    GenConstraint genConstraint = (GenConstraint) theEObject;
                    Object result = caseGenConstraint (genConstraint);
                    if (result == null) result = caseValueExpression (genConstraint);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.PALETTE :
                {
                    Palette palette = (Palette) theEObject;
                    Object result = casePalette (palette);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.ENTRY_BASE :
                {
                    EntryBase entryBase = (EntryBase) theEObject;
                    Object result = caseEntryBase (entryBase);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.ABSTRACT_TOOL_ENTRY :
                {
                    AbstractToolEntry abstractToolEntry = (AbstractToolEntry) theEObject;
                    Object result = caseAbstractToolEntry (abstractToolEntry);
                    if (result == null) result = caseEntryBase (abstractToolEntry);

                    if (result == null) result = caseToolGroupItem (abstractToolEntry);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.TOOL_ENTRY :
                {
                    ToolEntry toolEntry = (ToolEntry) theEObject;
                    Object result = caseToolEntry (toolEntry);
                    if (result == null) result = caseAbstractToolEntry (toolEntry);

                    if (result == null) result = caseEntryBase (toolEntry);

                    if (result == null) result = caseToolGroupItem (toolEntry);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.STANDARD_ENTRY :
                {
                    StandardEntry standardEntry = (StandardEntry) theEObject;
                    Object result = caseStandardEntry (standardEntry);
                    if (result == null) result = caseAbstractToolEntry (standardEntry);

                    if (result == null) result = caseEntryBase (standardEntry);

                    if (result == null) result = caseToolGroupItem (standardEntry);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.TOOL_GROUP_ITEM :
                {
                    ToolGroupItem toolGroupItem = (ToolGroupItem) theEObject;
                    Object result = caseToolGroupItem (toolGroupItem);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.SEPARATOR :
                {
                    Separator separator = (Separator) theEObject;
                    Object result = caseSeparator (separator);
                    if (result == null) result = caseToolGroupItem (separator);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.TOOL_GROUP :
                {
                    ToolGroup toolGroup = (ToolGroup) theEObject;
                    Object result = caseToolGroup (toolGroup);
                    if (result == null) result = caseEntryBase (toolGroup);

                    if (result == null) result = caseToolGroupItem (toolGroup);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_ELEMENT_INITIALIZER :
                {
                    GenElementInitializer genElementInitializer = (GenElementInitializer) theEObject;
                    Object result = caseGenElementInitializer (genElementInitializer);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER :
                {
                    GenFeatureSeqInitializer genFeatureSeqInitializer = (GenFeatureSeqInitializer) theEObject;
                    Object result = caseGenFeatureSeqInitializer (genFeatureSeqInitializer);
                    if (result == null) result = caseGenElementInitializer (genFeatureSeqInitializer);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_FEATURE_VALUE_SPEC :
                {
                    GenFeatureValueSpec genFeatureValueSpec = (GenFeatureValueSpec) theEObject;
                    Object result = caseGenFeatureValueSpec (genFeatureValueSpec);
                    if (result == null) result = caseValueExpression (genFeatureValueSpec);

                    if (result == null) result = caseGenFeatureInitializer (genFeatureValueSpec);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_REFERENCE_NEW_ELEMENT_SPEC :
                {
                    GenReferenceNewElementSpec genReferenceNewElementSpec = (GenReferenceNewElementSpec) theEObject;
                    Object result = caseGenReferenceNewElementSpec (genReferenceNewElementSpec);
                    if (result == null) result = caseGenFeatureInitializer (genReferenceNewElementSpec);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_FEATURE_INITIALIZER :
                {
                    GenFeatureInitializer genFeatureInitializer = (GenFeatureInitializer) theEObject;
                    Object result = caseGenFeatureInitializer (genFeatureInitializer);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_LINK_CONSTRAINTS :
                {
                    GenLinkConstraints genLinkConstraints = (GenLinkConstraints) theEObject;
                    Object result = caseGenLinkConstraints (genLinkConstraints);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_RULE_CONTAINER_BASE :
                {
                    GenRuleContainerBase genRuleContainerBase = (GenRuleContainerBase) theEObject;
                    Object result = caseGenRuleContainerBase (genRuleContainerBase);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_AUDIT_CONTAINER :
                {
                    GenAuditContainer genAuditContainer = (GenAuditContainer) theEObject;
                    Object result = caseGenAuditContainer (genAuditContainer);
                    if (result == null) result = caseGenRuleContainerBase (genAuditContainer);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_RULE_BASE :
                {
                    GenRuleBase genRuleBase = (GenRuleBase) theEObject;
                    Object result = caseGenRuleBase (genRuleBase);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_AUDIT_RULE :
                {
                    GenAuditRule genAuditRule = (GenAuditRule) theEObject;
                    Object result = caseGenAuditRule (genAuditRule);
                    if (result == null) result = caseGenRuleBase (genAuditRule);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_RULE_TARGET :
                {
                    GenRuleTarget genRuleTarget = (GenRuleTarget) theEObject;
                    Object result = caseGenRuleTarget (genRuleTarget);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_DOMAIN_ELEMENT_TARGET :
                {
                    GenDomainElementTarget genDomainElementTarget = (GenDomainElementTarget) theEObject;
                    Object result = caseGenDomainElementTarget (genDomainElementTarget);
                    if (result == null) result = caseGenAuditable (genDomainElementTarget);

                    if (result == null) result = caseGenMeasurable (genDomainElementTarget);

                    if (result == null) result = caseGenRuleTarget (genDomainElementTarget);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_DIAGRAM_ELEMENT_TARGET :
                {
                    GenDiagramElementTarget genDiagramElementTarget = (GenDiagramElementTarget) theEObject;
                    Object result = caseGenDiagramElementTarget (genDiagramElementTarget);
                    if (result == null) result = caseGenAuditable (genDiagramElementTarget);

                    if (result == null) result = caseGenMeasurable (genDiagramElementTarget);

                    if (result == null) result = caseGenRuleTarget (genDiagramElementTarget);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_DOMAIN_ATTRIBUTE_TARGET :
                {
                    GenDomainAttributeTarget genDomainAttributeTarget = (GenDomainAttributeTarget) theEObject;
                    Object result = caseGenDomainAttributeTarget (genDomainAttributeTarget);
                    if (result == null) result = caseGenAuditable (genDomainAttributeTarget);

                    if (result == null) result = caseGenRuleTarget (genDomainAttributeTarget);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_NOTATION_ELEMENT_TARGET :
                {
                    GenNotationElementTarget genNotationElementTarget = (GenNotationElementTarget) theEObject;
                    Object result = caseGenNotationElementTarget (genNotationElementTarget);
                    if (result == null) result = caseGenAuditable (genNotationElementTarget);

                    if (result == null) result = caseGenMeasurable (genNotationElementTarget);

                    if (result == null) result = caseGenRuleTarget (genNotationElementTarget);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_METRIC_CONTAINER :
                {
                    GenMetricContainer genMetricContainer = (GenMetricContainer) theEObject;
                    Object result = caseGenMetricContainer (genMetricContainer);
                    if (result == null) result = caseGenRuleContainerBase (genMetricContainer);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_METRIC_RULE :
                {
                    GenMetricRule genMetricRule = (GenMetricRule) theEObject;
                    Object result = caseGenMetricRule (genMetricRule);
                    if (result == null) result = caseGenRuleBase (genMetricRule);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_AUDITED_METRIC_TARGET :
                {
                    GenAuditedMetricTarget genAuditedMetricTarget = (GenAuditedMetricTarget) theEObject;
                    Object result = caseGenAuditedMetricTarget (genAuditedMetricTarget);
                    if (result == null) result = caseGenAuditable (genAuditedMetricTarget);

                    if (result == null) result = caseGenRuleTarget (genAuditedMetricTarget);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_AUDITABLE :
                {
                    GenAuditable genAuditable = (GenAuditable) theEObject;
                    Object result = caseGenAuditable (genAuditable);
                    if (result == null) result = caseGenRuleTarget (genAuditable);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_MEASURABLE :
                {
                    GenMeasurable genMeasurable = (GenMeasurable) theEObject;
                    Object result = caseGenMeasurable (genMeasurable);
                    if (result == null) result = caseGenRuleTarget (genMeasurable);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER :
                {
                    GenExpressionProviderContainer genExpressionProviderContainer = (GenExpressionProviderContainer) theEObject;
                    Object result = caseGenExpressionProviderContainer (genExpressionProviderContainer);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE :
                {
                    GenExpressionProviderBase genExpressionProviderBase = (GenExpressionProviderBase) theEObject;
                    Object result = caseGenExpressionProviderBase (genExpressionProviderBase);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER :
                {
                    GenJavaExpressionProvider genJavaExpressionProvider = (GenJavaExpressionProvider) theEObject;
                    Object result = caseGenJavaExpressionProvider (genJavaExpressionProvider);
                    if (result == null) result = caseGenExpressionProviderBase (genJavaExpressionProvider);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_EXPRESSION_INTERPRETER :
                {
                    GenExpressionInterpreter genExpressionInterpreter = (GenExpressionInterpreter) theEObject;
                    Object result = caseGenExpressionInterpreter (genExpressionInterpreter);
                    if (result == null) result = caseGenExpressionProviderBase (genExpressionInterpreter);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_NAVIGATOR :
                {
                    GenNavigator genNavigator = (GenNavigator) theEObject;
                    Object result = caseGenNavigator (genNavigator);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE :
                {
                    GenNavigatorChildReference genNavigatorChildReference = (GenNavigatorChildReference) theEObject;
                    Object result = caseGenNavigatorChildReference (genNavigatorChildReference);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_NAVIGATOR_PATH :
                {
                    GenNavigatorPath genNavigatorPath = (GenNavigatorPath) theEObject;
                    Object result = caseGenNavigatorPath (genNavigatorPath);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT :
                {
                    GenNavigatorPathSegment genNavigatorPathSegment = (GenNavigatorPathSegment) theEObject;
                    Object result = caseGenNavigatorPathSegment (genNavigatorPathSegment);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_PROPERTY_SHEET :
                {
                    GenPropertySheet genPropertySheet = (GenPropertySheet) theEObject;
                    Object result = caseGenPropertySheet (genPropertySheet);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_PROPERTY_TAB :
                {
                    GenPropertyTab genPropertyTab = (GenPropertyTab) theEObject;
                    Object result = caseGenPropertyTab (genPropertyTab);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_STANDARD_PROPERTY_TAB :
                {
                    GenStandardPropertyTab genStandardPropertyTab = (GenStandardPropertyTab) theEObject;
                    Object result = caseGenStandardPropertyTab (genStandardPropertyTab);
                    if (result == null) result = caseGenPropertyTab (genStandardPropertyTab);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB :
                {
                    GenCustomPropertyTab genCustomPropertyTab = (GenCustomPropertyTab) theEObject;
                    Object result = caseGenCustomPropertyTab (genCustomPropertyTab);
                    if (result == null) result = caseGenPropertyTab (genCustomPropertyTab);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_PROPERTY_TAB_FILTER :
                {
                    GenPropertyTabFilter genPropertyTabFilter = (GenPropertyTabFilter) theEObject;
                    Object result = caseGenPropertyTabFilter (genPropertyTabFilter);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.TYPE_TAB_FILTER :
                {
                    TypeTabFilter typeTabFilter = (TypeTabFilter) theEObject;
                    Object result = caseTypeTabFilter (typeTabFilter);
                    if (result == null) result = caseGenPropertyTabFilter (typeTabFilter);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.CUSTOM_TAB_FILTER :
                {
                    CustomTabFilter customTabFilter = (CustomTabFilter) theEObject;
                    Object result = caseCustomTabFilter (customTabFilter);
                    if (result == null) result = caseGenPropertyTabFilter (customTabFilter);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_CONTRIBUTION_ITEM :
                {
                    GenContributionItem genContributionItem = (GenContributionItem) theEObject;
                    Object result = caseGenContributionItem (genContributionItem);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_SHARED_CONTRIBUTION_ITEM :
                {
                    GenSharedContributionItem genSharedContributionItem = (GenSharedContributionItem) theEObject;
                    Object result = caseGenSharedContributionItem (genSharedContributionItem);
                    if (result == null) result = caseGenContributionItem (genSharedContributionItem);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_GROUP_MARKER :
                {
                    GenGroupMarker genGroupMarker = (GenGroupMarker) theEObject;
                    Object result = caseGenGroupMarker (genGroupMarker);
                    if (result == null) result = caseGenContributionItem (genGroupMarker);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_SEPARATOR :
                {
                    GenSeparator genSeparator = (GenSeparator) theEObject;
                    Object result = caseGenSeparator (genSeparator);
                    if (result == null) result = caseGenContributionItem (genSeparator);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_ACTION_FACTORY_CONTRIBUTION_ITEM :
                {
                    GenActionFactoryContributionItem genActionFactoryContributionItem = (GenActionFactoryContributionItem) theEObject;
                    Object result = caseGenActionFactoryContributionItem (genActionFactoryContributionItem);
                    if (result == null) result = caseGenContributionItem (genActionFactoryContributionItem);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_CONTRIBUTION_MANAGER :
                {
                    GenContributionManager genContributionManager = (GenContributionManager) theEObject;
                    Object result = caseGenContributionManager (genContributionManager);
                    if (result == null) result = caseGenContributionItem (genContributionManager);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_MENU_MANAGER :
                {
                    GenMenuManager genMenuManager = (GenMenuManager) theEObject;
                    Object result = caseGenMenuManager (genMenuManager);
                    if (result == null) result = caseGenContributionManager (genMenuManager);

                    if (result == null) result = caseGenContributionItem (genMenuManager);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_TOOL_BAR_MANAGER :
                {
                    GenToolBarManager genToolBarManager = (GenToolBarManager) theEObject;
                    Object result = caseGenToolBarManager (genToolBarManager);
                    if (result == null) result = caseGenContributionManager (genToolBarManager);

                    if (result == null) result = caseGenContributionItem (genToolBarManager);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFGenPackage.GEN_APPLICATION :
                {
                    GenApplication genApplication = (GenApplication) theEObject;
                    Object result = caseGenApplication (genApplication);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } default :
                return defaultCase (theEObject);
        }
    }

    public Object caseGenEditorGenerator (GenEditorGenerator object) {
        return null;
    }

    public Object caseGenDiagram (GenDiagram object) {
        return null;
    }

    public Object caseGenEditorView (GenEditorView object) {
        return null;
    }

    public Object caseGenPreferencePage (GenPreferencePage object) {
        return null;
    }

    public Object caseGenCustomPreferencePage (GenCustomPreferencePage object) {
        return null;
    }

    public Object caseGenStandardPreferencePage (GenStandardPreferencePage object) {
        return null;
    }

    public Object caseGenDiagramPreferences (GenDiagramPreferences object) {
        return null;
    }

    public Object caseGenFont (GenFont object) {
        return null;
    }

    public Object caseGenStandardFont (GenStandardFont object) {
        return null;
    }

    public Object caseGenCustomFont (GenCustomFont object) {
        return null;
    }

    public Object caseGenColor (GenColor object) {
        return null;
    }

    public Object caseGenRGBColor (GenRGBColor object) {
        return null;
    }

    public Object caseGenConstantColor (GenConstantColor object) {
        return null;
    }

    public Object caseBatchValidation (BatchValidation object) {
        return null;
    }

    public Object caseProviderClassNames (ProviderClassNames object) {
        return null;
    }

    public Object caseShortcuts (Shortcuts object) {
        return null;
    }

    public Object casePackageNames (PackageNames object) {
        return null;
    }

    public Object caseLinkConstraints (LinkConstraints object) {
        return null;
    }

    public Object caseEditorCandies (EditorCandies object) {
        return null;
    }

    public Object caseEditPartCandies (EditPartCandies object) {
        return null;
    }

    public Object caseMeasurementUnit (MeasurementUnit object) {
        return null;
    }

    public Object caseGenPlugin (GenPlugin object) {
        return null;
    }

    public Object caseElementType (ElementType object) {
        return null;
    }

    public Object caseMetamodelType (MetamodelType object) {
        return null;
    }

    public Object caseSpecializationType (SpecializationType object) {
        return null;
    }

    public Object caseNotationType (NotationType object) {
        return null;
    }

    public Object caseGenCommonBase (GenCommonBase object) {
        return null;
    }

    public Object caseBehaviour (Behaviour object) {
        return null;
    }

    public Object caseCustomBehaviour (CustomBehaviour object) {
        return null;
    }

    public Object caseSharedBehaviour (SharedBehaviour object) {
        return null;
    }

    public Object caseOpenDiagramBehaviour (OpenDiagramBehaviour object) {
        return null;
    }

    public Object caseGenContainerBase (GenContainerBase object) {
        return null;
    }

    public Object caseGenNode (GenNode object) {
        return null;
    }

    public Object caseGenTopLevelNode (GenTopLevelNode object) {
        return null;
    }

    public Object caseGenChildNode (GenChildNode object) {
        return null;
    }

    public Object caseGenChildSideAffixedNode (GenChildSideAffixedNode object) {
        return null;
    }

    public Object caseGenChildLabelNode (GenChildLabelNode object) {
        return null;
    }

    public Object caseGenCompartment (GenCompartment object) {
        return null;
    }

    public Object caseGenChildContainer (GenChildContainer object) {
        return null;
    }

    public Object caseGenLink (GenLink object) {
        return null;
    }

    public Object caseGenLabel (GenLabel object) {
        return null;
    }

    public Object caseGenNodeLabel (GenNodeLabel object) {
        return null;
    }

    public Object caseGenExternalNodeLabel (GenExternalNodeLabel object) {
        return null;
    }

    public Object caseGenLinkLabel (GenLinkLabel object) {
        return null;
    }

    public Object caseModelFacet (ModelFacet object) {
        return null;
    }

    public Object caseLinkModelFacet (LinkModelFacet object) {
        return null;
    }

    public Object caseLabelModelFacet (LabelModelFacet object) {
        return null;
    }

    public Object caseTypeModelFacet (TypeModelFacet object) {
        return null;
    }

    public Object caseFeatureLabelModelFacet (FeatureLabelModelFacet object) {
        return null;
    }

    public Object caseDesignLabelModelFacet (DesignLabelModelFacet object) {
        return null;
    }

    public Object caseTypeLinkModelFacet (TypeLinkModelFacet object) {
        return null;
    }

    public Object caseFeatureLinkModelFacet (FeatureLinkModelFacet object) {
        return null;
    }

    public Object caseViewmap (Viewmap object) {
        return null;
    }

    public Object caseAttributes (Attributes object) {
        return null;
    }

    public Object caseColorAttributes (ColorAttributes object) {
        return null;
    }

    public Object caseStyleAttributes (StyleAttributes object) {
        return null;
    }

    public Object caseResizeConstraints (ResizeConstraints object) {
        return null;
    }

    public Object caseDefaultSizeAttributes (DefaultSizeAttributes object) {
        return null;
    }

    public Object caseLabelOffsetAttributes (LabelOffsetAttributes object) {
        return null;
    }

    public Object caseFigureViewmap (FigureViewmap object) {
        return null;
    }

    public Object caseSnippetViewmap (SnippetViewmap object) {
        return null;
    }

    public Object caseInnerClassViewmap (InnerClassViewmap object) {
        return null;
    }

    public Object caseParentAssignedViewmap (ParentAssignedViewmap object) {
        return null;
    }

    public Object casePalette (Palette object) {
        return null;
    }

    public Object caseEntryBase (EntryBase object) {
        return null;
    }

    public Object caseAbstractToolEntry (AbstractToolEntry object) {
        return null;
    }

    public Object caseToolEntry (ToolEntry object) {
        return null;
    }

    public Object caseStandardEntry (StandardEntry object) {
        return null;
    }

    public Object caseToolGroupItem (ToolGroupItem object) {
        return null;
    }

    public Object caseSeparator (Separator object) {
        return null;
    }

    public Object caseToolGroup (ToolGroup object) {
        return null;
    }

    public Object caseGenElementInitializer (GenElementInitializer object) {
        return null;
    }

    public Object caseGenFeatureSeqInitializer (GenFeatureSeqInitializer object) {
        return null;
    }

    public Object caseGenFeatureValueSpec (GenFeatureValueSpec object) {
        return null;
    }

    public Object caseGenReferenceNewElementSpec (GenReferenceNewElementSpec object) {
        return null;
    }

    public Object caseGenFeatureInitializer (GenFeatureInitializer object) {
        return null;
    }

    public Object caseGenLinkConstraints (GenLinkConstraints object) {
        return null;
    }

    public Object caseGenRuleContainerBase (GenRuleContainerBase object) {
        return null;
    }

    public Object caseGenAuditContainer (GenAuditContainer object) {
        return null;
    }

    public Object caseGenAuditRule (GenAuditRule object) {
        return null;
    }

    public Object caseGenRuleTarget (GenRuleTarget object) {
        return null;
    }

    public Object caseGenDomainElementTarget (GenDomainElementTarget object) {
        return null;
    }

    public Object caseGenDiagramElementTarget (GenDiagramElementTarget object) {
        return null;
    }

    public Object caseGenDomainAttributeTarget (GenDomainAttributeTarget object) {
        return null;
    }

    public Object caseGenNotationElementTarget (GenNotationElementTarget object) {
        return null;
    }

    public Object caseGenMetricContainer (GenMetricContainer object) {
        return null;
    }

    public Object caseGenMetricRule (GenMetricRule object) {
        return null;
    }

    public Object caseGenAuditedMetricTarget (GenAuditedMetricTarget object) {
        return null;
    }

    public Object caseGenAuditable (GenAuditable object) {
        return null;
    }

    public Object caseGenMeasurable (GenMeasurable object) {
        return null;
    }

    public Object caseGenExpressionProviderContainer (GenExpressionProviderContainer object) {
        return null;
    }

    public Object caseGenExpressionProviderBase (GenExpressionProviderBase object) {
        return null;
    }

    public Object caseGenJavaExpressionProvider (GenJavaExpressionProvider object) {
        return null;
    }

    public Object caseGenExpressionInterpreter (GenExpressionInterpreter object) {
        return null;
    }

    public Object caseGenNavigator (GenNavigator object) {
        return null;
    }

    public Object caseGenNavigatorChildReference (GenNavigatorChildReference object) {
        return null;
    }

    public Object caseGenNavigatorPath (GenNavigatorPath object) {
        return null;
    }

    public Object caseGenNavigatorPathSegment (GenNavigatorPathSegment object) {
        return null;
    }

    public Object caseGenPropertySheet (GenPropertySheet object) {
        return null;
    }

    public Object caseGenPropertyTab (GenPropertyTab object) {
        return null;
    }

    public Object caseGenStandardPropertyTab (GenStandardPropertyTab object) {
        return null;
    }

    public Object caseGenCustomPropertyTab (GenCustomPropertyTab object) {
        return null;
    }

    public Object caseGenPropertyTabFilter (GenPropertyTabFilter object) {
        return null;
    }

    public Object caseTypeTabFilter (TypeTabFilter object) {
        return null;
    }

    public Object caseCustomTabFilter (CustomTabFilter object) {
        return null;
    }

    public Object caseGenContributionItem (GenContributionItem object) {
        return null;
    }

    public Object caseGenSharedContributionItem (GenSharedContributionItem object) {
        return null;
    }

    public Object caseGenGroupMarker (GenGroupMarker object) {
        return null;
    }

    public Object caseGenSeparator (GenSeparator object) {
        return null;
    }

    public Object caseGenActionFactoryContributionItem (GenActionFactoryContributionItem object) {
        return null;
    }

    public Object caseGenContributionManager (GenContributionManager object) {
        return null;
    }

    public Object caseGenMenuManager (GenMenuManager object) {
        return null;
    }

    public Object caseGenToolBarManager (GenToolBarManager object) {
        return null;
    }

    public Object caseGenApplication (GenApplication object) {
        return null;
    }

    public Object caseGenRuleBase (GenRuleBase object) {
        return null;
    }

    public Object caseValueExpression (ValueExpression object) {
        return null;
    }

    public Object caseGenConstraint (GenConstraint object) {
        return null;
    }

    public Object defaultCase (EObject object) {
        return null;
    }

}

