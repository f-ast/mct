package org.eclipse.gmf.graphdef.editor.part;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.commands.operations.OperationHistoryFactory;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.common.util.WrappedException;

import org.eclipse.emf.ecore.EAnnotation;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EcoreFactory;

import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.action.IAction;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.jface.window.Window;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.ui.IObjectActionDelegate;

import org.eclipse.ui.IWorkbenchPart;

public class GMFGraphCreateShortcutAction implements IObjectActionDelegate {
    private CanvasEditPart mySelectedElement;
    private Shell myShell;

    public void setActivePart (IAction action, IWorkbenchPart targetPart) {
        myShell = targetPart.getSite ().getShell ();
    }

    public void run (IAction action) {
        final View view = (View) mySelectedElement.getModel ();
        GMFGraphElementChooserDialog elementChooser = new GMFGraphElementChooserDialog (myShell, view);
        int result = elementChooser.open ();
        if (result != Window.OK) {
            return;
        }
        URI selectedModelElementURI = elementChooser.getSelectedModelElementURI ();
        final EObject selectedElement;
        try {
            selectedElement = mySelectedElement.getEditingDomain ().getResourceSet ().getEObject (selectedModelElementURI, true);
        } catch (WrappedException e) {
            GMFGraphDiagramEditorPlugin.getInstance ().logError ("Exception while loading object: " + selectedModelElementURI.toString (), e);
            return;
        }
        if (selectedElement == null) {
            return;
        }
        CreateViewRequest.ViewDescriptor viewDescriptor = new CreateViewRequest.ViewDescriptor (new EObjectAdapter (selectedElement), Node.class, null, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
        CreateCommand command = new CreateCommand (mySelectedElement.getEditingDomain (), viewDescriptor, view) {

            protected CommandResult doExecuteWithResult (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
                CommandResult result = super.doExecuteWithResult (monitor, info);
                View view = (View) ((IAdaptable) result.getReturnValue ()).getAdapter (View.class);
                if (view != null && view.getEAnnotation ("Shortcut") == null) {
                    EAnnotation shortcutAnnotation = EcoreFactory.eINSTANCE.createEAnnotation ();
                    shortcutAnnotation.setSource ("Shortcut");
                    shortcutAnnotation.getDetails ().put ("modelID", CanvasEditPart.MODEL_ID);
                    view.getEAnnotations ().add (shortcutAnnotation);
                }
                return result;
            }

        }

        ;
        try {
            OperationHistoryFactory.getOperationHistory ().execute (command, new NullProgressMonitor (), null);
        } catch (ExecutionException e) {
            GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to create shortcut", e);
        }
    }

    public void selectionChanged (IAction action, ISelection selection) {
        mySelectedElement = null;
        if (selection instanceof IStructuredSelection) {
            IStructuredSelection structuredSelection = (IStructuredSelection) selection;
            if (structuredSelection.size () == 1 && structuredSelection.getFirstElement () instanceof CanvasEditPart) {
                mySelectedElement = (CanvasEditPart) structuredSelection.getFirstElement ();
            }
        }
        action.setEnabled (isEnabled ());
    }

    private boolean isEnabled () {
        return mySelectedElement != null;
    }

}

