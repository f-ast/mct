package org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg;

import java.awt.Color;

import org.apache.batik.dom.svg.SVGOMDocument;

import org.apache.batik.svggen.SVGColor;

import org.apache.batik.svggen.SVGGeneratorContext;

import org.apache.batik.svggen.SVGPaintDescriptor;

import org.apache.batik.util.SVGConstants;

import org.w3c.dom.Element;

import org.w3c.dom.Node;

import org.w3c.dom.svg.SVGSVGElement;

import org.w3c.dom.traversal.NodeFilter;

import org.w3c.dom.traversal.NodeIterator;

public class SVGColorConverter {
    static private SVGColorConverter INSTANCE = new SVGColorConverter ();

    static public SVGColorConverter getInstance () {
        return INSTANCE;
    }

    private SVGColorConverter () {
        super ();
    }

    public void replaceDocumentColors (SVGOMDocument svgDoc, Color fillColor, Color outlineColor) {
        SVGSVGElement svgRoot = svgDoc.getRootElement ();
        NodeIterator ni = svgDoc.createNodeIterator (svgRoot, NodeFilter.SHOW_ALL, null, true);
        Node node = ni.nextNode ();
        while (node != null) {
            if (node.getNodeType () == Node.ELEMENT_NODE) {
                Element element = (Element) node;
                if (fillColor != null) {
                    setColorAttribute (svgDoc, element, SVGConstants.SVG_FILL_ATTRIBUTE, false, fillColor);
                    setColorAttribute (svgDoc, element, SVGConstants.SVG_STOP_COLOR_ATTRIBUTE, false, fillColor);
                }
                if (outlineColor != null) {
                    setColorAttribute (svgDoc, element, SVGConstants.SVG_STROKE_ATTRIBUTE, true, outlineColor);
                    setColorAttribute (svgDoc, element, SVGConstants.SVG_STOP_COLOR_ATTRIBUTE, true, outlineColor);
                }
            }
            node = ni.nextNode ();
        }
    }

    public static final String SEMICOLON = ";";
    public static final String COLON = ":";

    private boolean isBlack (String color) {
        return color.equals ("#000000") || color.toUpperCase ().equals ("BLACK");
    }

    private boolean isWhite (String color) {
        return color.equals ("#FFFFFF") || color.toUpperCase ().equals ("WHITE");
    }

    protected void setColorAttribute (SVGOMDocument svgDoc, Element element, String attributeName, boolean black, Color color) {
        SVGPaintDescriptor svgPD = SVGColor.toSVG (color, SVGGeneratorContext.createDefault (svgDoc));
        if (element.hasAttribute (attributeName)) {
            String value = element.getAttribute (attributeName);
            if (attributeName.equals (SVGConstants.SVG_STROKE_ATTRIBUTE) || attributeName.equals (SVGConstants.SVG_FILL_ATTRIBUTE)) {
                if ((black && isBlack (value)) || (! black && isWhite (value))) {
                    element.setAttribute (attributeName, svgPD.getPaintValue ());
                }
            }
        } else if (element.hasAttribute (SVGConstants.SVG_STYLE_TAG)) {
            String style = element.getAttribute (SVGConstants.SVG_STYLE_TAG);
            String preColor = "";
            int nStart = style.indexOf (attributeName + COLON);
            if (nStart != - 1) {
                if (nStart > 0) preColor = style.substring (0, nStart - 1);

                String postColor = "";
                int nEnd = style.indexOf (SEMICOLON, nStart);
                if (nEnd == - 1) nEnd = style.length ();

                if (nEnd < style.length () - 1) postColor = style.substring (nEnd + 1, style.length ());

                String currentColor = style.substring (nStart + attributeName.length () + 1, nEnd);
                if ((black && isBlack (currentColor)) || (! black && isWhite (currentColor))) {
                    if (! currentColor.equals (SVGConstants.SVG_NONE_VALUE)) {
                        StringBuffer styleBuffer = new StringBuffer (style.length () + 5);
                        styleBuffer.append (preColor);
                        styleBuffer.append (" ");
                        styleBuffer.append (attributeName);
                        styleBuffer.append (COLON);
                        styleBuffer.append (svgPD.getPaintValue ());
                        if (! postColor.equals ("")) {
                            styleBuffer.append (SEMICOLON);
                            styleBuffer.append (postColor);
                        }
                        String styleNew = styleBuffer.toString ();
                        element.setAttribute (SVGConstants.SVG_STYLE_TAG, styleNew);
                    }
                }
            }
        }

    }

}

