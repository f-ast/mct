package org.eclipse.gmf.runtime.diagram.ui;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.runtime.common.ui.services.editor.EditorService;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditorInput;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;

import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.ui.IEditorPart;

import org.eclipse.ui.IWorkbenchWindow;

import org.eclipse.ui.PlatformUI;

public class DiagramUtil {

    public static void destroyView (View view) {
        DestroyElementCommand.destroy (view);
    }

    public static void openDiagramEditor (Diagram diagram) {
        EditorService.getInstance ().openEditor (new DiagramEditorInput (diagram));
    }

    public static IDiagramWorkbenchPart getOpenedDiagramEditor (Diagram diagram, IWorkbenchWindow window) {
        if (null == diagram) throw new NullPointerException ("Argument 'diagram' is null");

        if (window == null) window = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ();

        List editors = EditorService.getInstance ().getRegisteredEditorParts ();
        for (Iterator j = editors.iterator ();
        j.hasNext ();) {
            IEditorPart editor = (IEditorPart) j.next ();
            if (editor.getEditorSite ().getWorkbenchWindow () == window) {
                IDiagramWorkbenchPart de = (IDiagramWorkbenchPart) editor;
                if (de.getDiagram () == diagram) return de;

            }
        }
        return null;
    }

}

