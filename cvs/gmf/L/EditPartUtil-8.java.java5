package org.eclipse.gmf.runtime.diagram.ui.util;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.transaction.Transaction;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.impl.InternalTransaction;

import org.eclipse.emf.transaction.impl.InternalTransactionalEditingDomain;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;

import org.eclipse.gmf.runtime.emf.core.util.PackageUtil;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.swt.widgets.Display;

import org.eclipse.ui.PlatformUI;

public class EditPartUtil {

    public static String getSemanticEClassName (IGraphicalEditPart editPart) {
        if (editPart.getModel () instanceof View) {
            View view = (View) editPart.getModel ();
            EObject element = view.getElement ();
            return element == null ? null : PackageUtil.getID (EMFCoreUtil.getProxyClass (element));
        }
        return null;
    }

    public static void synchronizeRunnableToMainThread (IGraphicalEditPart editPart, Runnable runThreadSafe) {
        InternalTransactionalEditingDomain editingDomain = (InternalTransactionalEditingDomain) editPart.getEditingDomain ();
        if (Display.getCurrent () == null && editingDomain != null && editingDomain.getActiveTransaction () != null) {
            if (editingDomain != null) {
                PlatformUI.getWorkbench ().getDisplay ().syncExec (editingDomain.createPrivilegedRunnable (runThreadSafe));
                return;
            } else {
                PlatformUI.getWorkbench ().getDisplay ().asyncExec (runThreadSafe);
            }
        } else {
            runThreadSafe.run ();
        }
    }

    public static boolean isWriteTransactionInProgress (IGraphicalEditPart editPart, boolean includeUnprotected, boolean otherThread) {
        TransactionalEditingDomain theEditingDomain = editPart.getEditingDomain ();
        if (theEditingDomain instanceof InternalTransactionalEditingDomain) {
            InternalTransactionalEditingDomain internalEditingDomain = (InternalTransactionalEditingDomain) theEditingDomain;
            InternalTransaction transaction = internalEditingDomain.getActiveTransaction ();
            if (transaction != null && ! transaction.isReadOnly ()) {
                if (! includeUnprotected) {
                    Object unprotectedMode = transaction.getOptions ().get (Transaction.OPTION_UNPROTECTED);
                    if (unprotectedMode != null && unprotectedMode == Boolean.TRUE) {
                        return false;
                    }
                }
                if (otherThread && Thread.currentThread () != transaction.getOwner ()) return true;
                else if (! otherThread) return true;

            }
        }
        return false;
    }

}

