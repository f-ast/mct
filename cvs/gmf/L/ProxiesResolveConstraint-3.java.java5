package org.eclipse.gmf.runtime.emf.core.internal.validation;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.ecore.util.EContentsEList;

import org.eclipse.gmf.runtime.emf.core.internal.plugin.MSLPlugin;

import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;

import org.eclipse.emf.validation.AbstractModelConstraint;

import org.eclipse.emf.validation.IValidationContext;

public class ProxiesResolveConstraint extends AbstractModelConstraint {
    public static final String RESOURCE_RULE_ID = "org.eclipse.gmf.runtime.emf.core.ResourceFixup";
    public static final String ELEMENT_RULE_ID = "org.eclipse.gmf.runtime.emf.core.IdFixup";
    public static final String DIAGNOSTIC_SOURCE = MSLPlugin.getPluginId ();

    public ProxiesResolveConstraint () {
        super ();
    }

    private String getObjectLabel (EObject eObject) {
        return EObjectUtil.getQName (eObject, true);
    }

    private String getFeatureLabel (EStructuralFeature eStructuralFeature) {
        return eStructuralFeature.getName ();
    }

    public IStatus validate (IValidationContext ctx) {
        EObject target = ctx.getTarget ();
        EStructuralFeature feature = null;
        EObject proxyObject = null;
        for (EContentsEList.FeatureIterator i = (EContentsEList.FeatureIterator) target.eCrossReferences ().iterator ();
        i.hasNext ();) {
            EObject eCrossReferenceObject = (EObject) i.next ();
            if (! i.feature ().isDerived () && eCrossReferenceObject.eIsProxy ()) {
                feature = i.feature ();
                proxyObject = eCrossReferenceObject;
                ctx.addResult (proxyObject);
                break;
            }
        }
        if (feature != null) {
            ResourceSet rSet = target.eResource ().getResourceSet ();
            URI proxyURI = ((InternalEObject) proxyObject).eProxyURI ().trimFragment ();
            Resource resource = rSet.getResource (proxyURI, false);
            if (resource != null && resource.isLoaded ()) {
                if (ctx.getCurrentConstraintId ().equals (ELEMENT_RULE_ID)) {
                    return ctx.createFailureStatus (new Object [] {getFeatureLabel (feature), getObjectLabel (target), getObjectLabel (proxyObject)});
                }
                return ctx.createSuccessStatus ();
            } else if (ctx.getCurrentConstraintId ().equals (RESOURCE_RULE_ID)) {
                return ctx.createFailureStatus (new Object [] {getFeatureLabel (feature), getObjectLabel (target), getObjectLabel (proxyObject)});
            }

        }
        return ctx.createSuccessStatus ();
    }

}

