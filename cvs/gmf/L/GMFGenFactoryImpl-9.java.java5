package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EDataType;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.gmf.codegen.gmfgen.*;

import org.eclipse.gmf.codegen.gmfgen.BasicNodeViewmap;

import org.eclipse.gmf.codegen.gmfgen.CompartmentLayoutKind;

import org.eclipse.gmf.codegen.gmfgen.CompartmentPlacementKind;

import org.eclipse.gmf.codegen.gmfgen.DecoratedConnectionViewmap;

import org.eclipse.gmf.codegen.gmfgen.DefaultSizeAttributes;

import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;

import org.eclipse.gmf.codegen.gmfgen.GenChildNode;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.GenLinkReferenceOnly;

import org.eclipse.gmf.codegen.gmfgen.GenLinkWithClass;

import org.eclipse.gmf.codegen.gmfgen.GenNode;

import org.eclipse.gmf.codegen.gmfgen.LinkDecoration;

import org.eclipse.gmf.codegen.gmfgen.LinkEntry;

import org.eclipse.gmf.codegen.gmfgen.NodeEntry;

import org.eclipse.gmf.codegen.gmfgen.Palette;

import org.eclipse.gmf.codegen.gmfgen.ShapeAttributes;

import org.eclipse.gmf.codegen.gmfgen.ToolGroup;

public class GMFGenFactoryImpl extends EFactoryImpl implements GMFGenFactory {

    public GMFGenFactoryImpl () {
        super ();
    }

    public EObject create (EClass eClass) {
        switch (eClass.getClassifierID ()) {
            case GMFGenPackage.GEN_DIAGRAM :
                return createGenDiagram ();
            case GMFGenPackage.GEN_NODE :
                return createGenNode ();
            case GMFGenPackage.GEN_CHILD_CONTAINER :
                return createGenChildContainer ();
            case GMFGenPackage.GEN_CHILD_NODE :
                return createGenChildNode ();
            case GMFGenPackage.GEN_LINK_WITH_CLASS :
                return createGenLinkWithClass ();
            case GMFGenPackage.GEN_LINK_REFERENCE_ONLY :
                return createGenLinkReferenceOnly ();
            case GMFGenPackage.LINK_LABEL :
                return createLinkLabel ();
            case GMFGenPackage.COLOR_ATTRIBUTES :
                return createColorAttributes ();
            case GMFGenPackage.SHAPE_ATTRIBUTES :
                return createShapeAttributes ();
            case GMFGenPackage.DEFAULT_SIZE_ATTRIBUTES :
                return createDefaultSizeAttributes ();
            case GMFGenPackage.BASIC_NODE_VIEWMAP :
                return createBasicNodeViewmap ();
            case GMFGenPackage.DECORATED_CONNECTION_VIEWMAP :
                return createDecoratedConnectionViewmap ();
            case GMFGenPackage.LINK_DECORATION :
                return createLinkDecoration ();
            case GMFGenPackage.PALETTE :
                return createPalette ();
            case GMFGenPackage.NODE_ENTRY :
                return createNodeEntry ();
            case GMFGenPackage.LINK_ENTRY :
                return createLinkEntry ();
            case GMFGenPackage.TOOL_GROUP :
                return createToolGroup ();
            default :
                throw new IllegalArgumentException ("The class '" + eClass.getName () + "' is not a valid classifier");
        }
    }

    public Object createFromString (EDataType eDataType, String initialValue) {
        switch (eDataType.getClassifierID ()) {
            case GMFGenPackage.COMPARTMENT_PLACEMENT_KIND :
                {
                    CompartmentPlacementKind result = CompartmentPlacementKind.get (initialValue);
                    if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");

                    return result;
                } case GMFGenPackage.COMPARTMENT_LAYOUT_KIND :
                {
                    CompartmentLayoutKind result = CompartmentLayoutKind.get (initialValue);
                    if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");

                    return result;
                } case GMFGenPackage.STRING_ARRAY :
                return createStringArrayFromString (eDataType, initialValue);
            default :
                throw new IllegalArgumentException ("The datatype '" + eDataType.getName () + "' is not a valid classifier");
        }
    }

    public String convertToString (EDataType eDataType, Object instanceValue) {
        switch (eDataType.getClassifierID ()) {
            case GMFGenPackage.COMPARTMENT_PLACEMENT_KIND :
                return instanceValue == null ? null : instanceValue.toString ();
            case GMFGenPackage.COMPARTMENT_LAYOUT_KIND :
                return instanceValue == null ? null : instanceValue.toString ();
            case GMFGenPackage.STRING_ARRAY :
                return convertStringArrayToString (eDataType, instanceValue);
            default :
                throw new IllegalArgumentException ("The datatype '" + eDataType.getName () + "' is not a valid classifier");
        }
    }

    public GenDiagram createGenDiagram () {
        GenDiagramImpl genDiagram = new GenDiagramImpl ();
        return genDiagram;
    }

    public GenNode createGenNode () {
        GenNodeImpl genNode = new GenNodeImpl ();
        return genNode;
    }

    public GenChildNode createGenChildNode () {
        GenChildNodeImpl genChildNode = new GenChildNodeImpl ();
        return genChildNode;
    }

    public GenChildContainer createGenChildContainer () {
        GenChildContainerImpl genChildContainer = new GenChildContainerImpl ();
        return genChildContainer;
    }

    public GenLinkWithClass createGenLinkWithClass () {
        GenLinkWithClassImpl genLinkWithClass = new GenLinkWithClassImpl ();
        return genLinkWithClass;
    }

    public GenLinkReferenceOnly createGenLinkReferenceOnly () {
        GenLinkReferenceOnlyImpl genLinkReferenceOnly = new GenLinkReferenceOnlyImpl ();
        return genLinkReferenceOnly;
    }

    public LinkLabel createLinkLabel () {
        LinkLabelImpl linkLabel = new LinkLabelImpl ();
        return linkLabel;
    }

    public ColorAttributes createColorAttributes () {
        ColorAttributesImpl colorAttributes = new ColorAttributesImpl ();
        return colorAttributes;
    }

    public ShapeAttributes createShapeAttributes () {
        ShapeAttributesImpl shapeAttributes = new ShapeAttributesImpl ();
        return shapeAttributes;
    }

    public DefaultSizeAttributes createDefaultSizeAttributes () {
        DefaultSizeAttributesImpl defaultSizeAttributes = new DefaultSizeAttributesImpl ();
        return defaultSizeAttributes;
    }

    public BasicNodeViewmap createBasicNodeViewmap () {
        BasicNodeViewmapImpl basicNodeViewmap = new BasicNodeViewmapImpl ();
        return basicNodeViewmap;
    }

    public DecoratedConnectionViewmap createDecoratedConnectionViewmap () {
        DecoratedConnectionViewmapImpl decoratedConnectionViewmap = new DecoratedConnectionViewmapImpl ();
        return decoratedConnectionViewmap;
    }

    public LinkDecoration createLinkDecoration () {
        LinkDecorationImpl linkDecoration = new LinkDecorationImpl ();
        return linkDecoration;
    }

    public Palette createPalette () {
        PaletteImpl palette = new PaletteImpl ();
        return palette;
    }

    public NodeEntry createNodeEntry () {
        NodeEntryImpl nodeEntry = new NodeEntryImpl ();
        return nodeEntry;
    }

    public LinkEntry createLinkEntry () {
        LinkEntryImpl linkEntry = new LinkEntryImpl ();
        return linkEntry;
    }

    public ToolGroup createToolGroup () {
        ToolGroupImpl toolGroup = new ToolGroupImpl ();
        return toolGroup;
    }

    public String [] createStringArrayFromString (EDataType eDataType, String initialValue) {
        throw new UnsupportedOperationException ();
    }

    public String convertStringArrayToString (EDataType eDataType, Object instanceValue) {
        throw new UnsupportedOperationException ();
    }

    public GMFGenPackage getGMFGenPackage () {
        return (GMFGenPackage) getEPackage ();
    }

    public static GMFGenPackage getPackage () {
        return GMFGenPackage.eINSTANCE;
    }

}

