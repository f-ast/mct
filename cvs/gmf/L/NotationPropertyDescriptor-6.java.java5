package org.eclipse.gmf.runtime.diagram.ui.properties.descriptors;

import java.util.Arrays;

import java.util.List;

import org.eclipse.emf.common.ui.celleditor.ExtendedComboBoxCellEditor;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;

import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;

import org.eclipse.jface.viewers.CellEditor;

import org.eclipse.jface.viewers.ColorCellEditor;

import org.eclipse.jface.viewers.ICellEditorValidator;

import org.eclipse.jface.viewers.ILabelProvider;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.RGB;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Display;

import org.eclipse.gmf.runtime.diagram.ui.internal.util.FontHelper;

import org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n.DiagramUIPropertiesMessages;

import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;

import org.eclipse.gmf.runtime.emf.ui.properties.descriptors.EMFCompositeSourcePropertyDescriptor;

import org.eclipse.gmf.runtime.emf.ui.properties.descriptors.EObjectContainmentListPropertyValue;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class NotationPropertyDescriptor extends EMFCompositeSourcePropertyDescriptor {

    public NotationPropertyDescriptor (Object object, IItemPropertyDescriptor itemPropertyDescriptor, String category) {
        super (object, itemPropertyDescriptor, category);
    }

    protected CellEditor createDataTypeCellEditor (Composite composite) {
        if (isColor ()) return new ColorCellEditor (composite);

        CellEditor cellEditor = super.createDataTypeCellEditor (composite);
        if (isFontHeight ()) {
            cellEditor.setValidator (getPositiveIntegerValidator ());
        }
        return cellEditor;
    }

    private ICellEditorValidator getPositiveIntegerValidator () {
        ICellEditorValidator cellValidator = new ICellEditorValidator () {

            public String isValid (Object value) {
                String error = null;
                if (value instanceof String) {
                    String strValue = (String) value;
                    try {
                        if (Integer.parseInt (strValue) <= 0) {
                            throw new NumberFormatException ();
                        }
                    } catch (NumberFormatException e) {
                        error = DiagramUIPropertiesMessages.Positive_Number_Error;
                    }
                }
                return error;
            }

        }

        ;
        return cellValidator;
    }

    private boolean isFontHeight () {
        return getFeature () == NotationPackage.eINSTANCE.getFontStyle_FontHeight ();
    }

    protected CellEditor createComboBoxCellEditor (Composite composite) {
        propertyEditor = new ExtendedComboBoxCellEditor (composite, getChoiceOfValues (), getLabelProvider (), false, SWT.NONE);
        propertyEditor.setValidator (getValidator ());
        return propertyEditor;
    }

    public Object getPropertyValue () {
        if (getFeature () == NotationPackage.eINSTANCE.getView_Styles ()) {
            EObjectContainmentEList list = (EObjectContainmentEList) getEditableValue ();
            EObjectContainmentListPropertyValue value = new FlattenedContainmentListPropertyValue (list);
            return value;
        }
        if (isColor ()) {
            Integer color = (Integer) getEditableValue ();
            return FigureUtilities.integerToRGB (color);
        }
        return getEditableValue ();
    }

    public ILabelProvider getLabelProvider () {
        return new NotationItemLabelProvider (super.getLabelProvider (), (EStructuralFeature) getFeature ());
    }

    public void setPropertyValue (Object value) {
        if (value instanceof EObjectContainmentListPropertyValue) {
            super.setPropertyValue (((EObjectContainmentListPropertyValue) value).getTarget ());
            return;
        }
        if (isColor ()) {
            RGB rgb = (RGB) value;
            super.setPropertyValue (FigureUtilities.colorToInteger (new Color (Display.getCurrent (), rgb)));
            return;
        }
        super.setPropertyValue (value);
    }

    private boolean isColor () {
        return (getFeature () == NotationPackage.eINSTANCE.getFillStyle_FillColor () || getFeature () == NotationPackage.eINSTANCE.getLineStyle_LineColor () || getFeature () == NotationPackage.eINSTANCE.getFontStyle_FontColor ());
    }

    public List getChoiceOfValues () {
        if (getFeature () == NotationPackage.eINSTANCE.getFontStyle_FontName ()) {
            return Arrays.asList (FontHelper.getFontNames ());
        }
        return super.getChoiceOfValues ();
    }

}

