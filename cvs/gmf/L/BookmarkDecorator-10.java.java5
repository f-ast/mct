package org.eclipse.gmf.runtime.diagram.ui.providers.internal;

import java.util.ArrayList;

import java.util.Arrays;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IMarker;

import org.eclipse.core.resources.IResource;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.xmi.XMLResource;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;

import org.eclipse.gef.EditPart;

import org.eclipse.gmf.runtime.common.core.resources.IBookmark;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.resources.FileChangeManager;

import org.eclipse.gmf.runtime.common.ui.resources.IFileObserver;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IPrimaryEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeEditPart;

import org.eclipse.gmf.runtime.diagram.ui.providers.internal.l10n.DiagramUIProvidersPluginImages;

import org.eclipse.gmf.runtime.diagram.ui.services.decorator.AbstractDecorator;

import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecorator;

import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.util.Assert;

import org.eclipse.ui.PlatformUI;

public class BookmarkDecorator extends AbstractDecorator {
    public class BookmarkObserver implements IFileObserver {
        private HashMap mapOfIdsToDecorators = null;
        private boolean isRegistered = false;

        private void registerDecorator (BookmarkDecorator decorator) {
            if (decorator == null) {
                return;
            }
            if (mapOfIdsToDecorators == null) {
                mapOfIdsToDecorators = new HashMap ();
            }
            String decoratorViewId = decorator.getViewId ();
            if (decoratorViewId == null) {
                return;
            }
            List list = (List) mapOfIdsToDecorators.get (decoratorViewId);
            if (list == null) {
                list = new ArrayList (2);
                list.add (decorator);
                mapOfIdsToDecorators.put (decoratorViewId, list);
            } else if (! list.contains (decorator)) {
                list.add (decorator);
            }

            if (! isRegistered ()) {
                FileChangeManager.getInstance ().addFileObserver (this);
                isRegistered = true;
            }
        }

        private void unregisterDecorator (BookmarkDecorator decorator) {
            if (decorator == null) {
                return;
            }
            String decoratorViewId = decorator.getViewId ();
            if (decoratorViewId == null) {
                return;
            }
            if (mapOfIdsToDecorators != null) {
                List list = (List) mapOfIdsToDecorators.get (decoratorViewId);
                if (list != null) {
                    list.remove (decorator);
                    if (list.isEmpty ()) {
                        mapOfIdsToDecorators.remove (decoratorViewId);
                    }
                }
                if (mapOfIdsToDecorators.isEmpty ()) {
                    mapOfIdsToDecorators = null;
                }
            }
            if (mapOfIdsToDecorators == null) {
                if (isRegistered ()) {
                    FileChangeManager.getInstance ().removeFileObserver (this);
                    isRegistered = false;
                }
            }
        }

        public void handleFileRenamed (IFile oldFile, IFile file) {
        }

        public void handleFileMoved (IFile oldFile, IFile file) {
        }

        public void handleFileDeleted (IFile file) {
        }

        public void handleFileChanged (IFile file) {
        }

        public void handleMarkerAdded (IMarker marker) {
        }

        public void handleMarkerDeleted (IMarker marker, final Map attributes) {
            if (mapOfIdsToDecorators == null) {
                return;
            }
            Assert.isTrue (! marker.exists ());
            String elementId = (String) attributes.get (IBookmark.ELEMENT_ID);
            List list = elementId != null ? (List) mapOfIdsToDecorators.get (elementId) : null;
            if (list != null && ! list.isEmpty ()) {
                refreshDecorators (list);
            }
        }

        public void handleMarkerChanged (final IMarker marker) {
            if (mapOfIdsToDecorators == null) {
                return;
            }
            Assert.isTrue (marker.exists ());
            String elementId = marker.getAttribute (IBookmark.ELEMENT_ID, StringStatics.BLANK);
            List list = elementId != null ? (List) mapOfIdsToDecorators.get (elementId) : null;
            if (list != null && ! list.isEmpty ()) {
                refreshDecorators (list);
            }
        }

        private void refreshDecorators (final List decorators) {
            PlatformUI.getWorkbench ().getDisplay ().asyncExec (new Runnable () {

                public void run () {
                    try {
                        TransactionUtil.getEditingDomain (getDecoratorTarget ().getAdapter (View.class)).runExclusive (new Runnable () {

                            public void run () {
                                Iterator iter = decorators.iterator ();
                                while (iter.hasNext ()) {
                                    IDecorator decorator = (IDecorator) iter.next ();
                                    if (decorator != null) {
                                        decorator.refresh ();
                                    }
                                }
                            }

                        }

                        );
                    } catch (Exception e) {
                        Trace.catching (DiagramProvidersPlugin.getInstance (), DiagramProvidersDebugOptions.EXCEPTIONS_CATCHING, getClass (), "refreshDecorators()", e);
                    }
                }

            }

            );
        }

        private boolean isRegistered () {
            return isRegistered;
        }

    }

    private static BookmarkObserver fileObserver = null;
    private String viewId = null;

    public BookmarkDecorator (IDecoratorTarget decoratorTarget) {
        super (decoratorTarget);
        try {
            final View view = (View) getDecoratorTarget ().getAdapter (View.class);
            TransactionUtil.getEditingDomain (view).runExclusive (new Runnable () {

                public void run () {
                    BookmarkDecorator.this.viewId = view != null ? ViewUtil.getIdStr (view) : null;
                }

            }

            );
        } catch (Exception e) {
            Trace.catching (DiagramProvidersPlugin.getInstance (), DiagramProvidersDebugOptions.EXCEPTIONS_CATCHING, getClass (), "BookmarkDecorator::Constructor", e);
        }
    }

    public void refresh () {
        removeDecoration ();
        View view = (View) getDecoratorTarget ().getAdapter (View.class);
        EditPart editPart = (EditPart) getDecoratorTarget ().getAdapter (EditPart.class);
        if (! (editPart instanceof IPrimaryEditPart) || view == null || view.eResource () == null) {
            return;
        }
        IResource resource = getResource (view);
        if (resource == null || ! resource.exists ()) {
            return;
        }
        IMarker [] bookmarks = null;
        try {
            bookmarks = resource.findMarkers (IBookmark.TYPE, true, IResource.DEPTH_INFINITE);
        } catch (CoreException e) {
            Trace.catching (DiagramProvidersPlugin.getInstance (), DiagramProvidersDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getDecorations", e);
            Log.error (DiagramProvidersPlugin.getInstance (), IStatus.ERROR, e.getMessage ());
        }
        if (bookmarks == null) {
            return;
        }
        IMarker foundMarker = null;
        String elementId = ((XMLResource) view.eResource ()).getID (view);
        if (elementId == null) {
            return;
        }
        for (Iterator i = Arrays.asList (bookmarks).iterator ();
        i.hasNext ();) {
            IMarker marker = (IMarker) i.next ();
            String attribute = marker.getAttribute (IBookmark.ELEMENT_ID, StringStatics.BLANK);
            if (attribute.equals (elementId)) {
                foundMarker = marker;
                break;
            }
        }
        if (foundMarker == null) {
            return;
        }
        if (editPart instanceof ShapeEditPart) {
            IMapMode mm = MapModeUtil.getMapMode (((ShapeEditPart) editPart).getFigure ());
            setDecoration (getDecoratorTarget ().addShapeDecoration (DiagramUIProvidersPluginImages.get (DiagramUIProvidersPluginImages.IMG_BOOKMARK), IDecoratorTarget.Direction.NORTH_EAST, mm.DPtoLP (- 4), true));
        } else if (view instanceof Edge) {
            setDecoration (getDecoratorTarget ().addConnectionDecoration (DiagramUIProvidersPluginImages.get (DiagramUIProvidersPluginImages.IMG_BOOKMARK), 50, true));
        }

    }

    private static IResource getResource (View view) {
        Resource model = view.eResource ();
        if (model != null) {
            return WorkspaceSynchronizer.getFile (model);
        }
        return null;
    }

    public void activate () {
        View view = (View) getDecoratorTarget ().getAdapter (View.class);
        if (view == null) return;

        Diagram diagramView = view.getDiagram ();
        if (diagramView == null) return;

        IFile file = WorkspaceSynchronizer.getFile (diagramView.eResource ());
        if (file != null) {
            if (fileObserver == null) {
                fileObserver = new BookmarkObserver ();
            }
            fileObserver.registerDecorator (this);
        }
    }

    public void deactivate () {
        if (fileObserver != null) {
            fileObserver.unregisterDecorator (this);
            if (! fileObserver.isRegistered ()) {
                fileObserver = null;
            }
        }
        super.deactivate ();
    }

    private String getViewId () {
        return viewId;
    }

}

