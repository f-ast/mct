package org.eclipse.gmf.runtime.notation;

import java.util.Arrays;

import java.util.Collections;

import java.util.List;

import org.eclipse.emf.common.util.AbstractEnumerator;

public final class Smoothness extends AbstractEnumerator {
    public static final int NONE = 0;
    public static final int NORMAL = 1;
    public static final int LESS = 2;
    public static final int MORE = 3;
    public static final Smoothness NONE_LITERAL = new Smoothness (NONE, "None");
    public static final Smoothness NORMAL_LITERAL = new Smoothness (NORMAL, "Normal");
    public static final Smoothness LESS_LITERAL = new Smoothness (LESS, "Less");
    public static final Smoothness MORE_LITERAL = new Smoothness (MORE, "More");
    private static final Smoothness [] VALUES_ARRAY = new Smoothness [] {NONE_LITERAL, NORMAL_LITERAL, LESS_LITERAL, MORE_LITERAL,};
    public static final List VALUES = Collections.unmodifiableList (Arrays.asList (VALUES_ARRAY));

    public static Smoothness get (String name) {
        for (int i = 0;
        i < VALUES_ARRAY.length; ++ i) {
            Smoothness result = VALUES_ARRAY [i];
            if (result.toString ().equals (name)) {
                return result;
            }
        }
        return null;
    }

    public static Smoothness get (int value) {
        switch (value) {
            case NONE :
                return NONE_LITERAL;
            case NORMAL :
                return NORMAL_LITERAL;
            case LESS :
                return LESS_LITERAL;
            case MORE :
                return MORE_LITERAL;
        }
        return null;
    }

    private Smoothness (int value, String name) {
        super (value, name);
    }

}

