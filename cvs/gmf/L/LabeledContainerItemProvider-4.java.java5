package org.eclipse.gmf.gmfgraph.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.gmfgraph.GMFGraphFactory;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.LabeledContainer;

public class LabeledContainerItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public LabeledContainerItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addLayoutPropertyDescriptor (object);
            addNamePropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addLayoutPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_Layoutable_layout_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_Layoutable_layout_feature", "_UI_Layoutable_type"), GMFGraphPackage.eINSTANCE.getLayoutable_Layout (), true, null, null, null));
    }

    protected void addNamePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_Identity_name_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_Identity_name_feature", "_UI_Identity_type"), GMFGraphPackage.eINSTANCE.getIdentity_Name (), true, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getLayoutable_Layout ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getFigure_Children ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getFigure_MaximumSize ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getFigure_MinimumSize ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getFigure_PreferredSize ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getFigure_Font ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getFigure_Insets ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getFigure_Border ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getFigure_Location ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getFigure_Size ());
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    public Object getImage (Object object) {
        return getResourceLocator ().getImage ("full/obj16/LabeledContainer");
    }

    public String getText (Object object) {
        String label = ((LabeledContainer) object).getName ();
        return label == null || label.length () == 0 ? getString ("_UI_LabeledContainer_type") : getString ("_UI_LabeledContainer_type") + " " + label;
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (LabeledContainer.class)) {
            case GMFGraphPackage.LABELED_CONTAINER__NAME :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
            case GMFGraphPackage.LABELED_CONTAINER__LAYOUT_DATA :
            case GMFGraphPackage.LABELED_CONTAINER__CHILDREN :
            case GMFGraphPackage.LABELED_CONTAINER__FOREGROUND_COLOR :
            case GMFGraphPackage.LABELED_CONTAINER__BACKGROUND_COLOR :
            case GMFGraphPackage.LABELED_CONTAINER__MAXIMUM_SIZE :
            case GMFGraphPackage.LABELED_CONTAINER__MINIMUM_SIZE :
            case GMFGraphPackage.LABELED_CONTAINER__PREFERRED_SIZE :
            case GMFGraphPackage.LABELED_CONTAINER__FONT :
            case GMFGraphPackage.LABELED_CONTAINER__INSETS :
            case GMFGraphPackage.LABELED_CONTAINER__BORDER :
            case GMFGraphPackage.LABELED_CONTAINER__LOCATION :
            case GMFGraphPackage.LABELED_CONTAINER__SIZE :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData (), GMFGraphFactory.eINSTANCE.createCustomLayoutData ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData (), GMFGraphFactory.eINSTANCE.createGridLayoutData ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData (), GMFGraphFactory.eINSTANCE.createBorderLayoutData ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getLayoutable_Layout (), GMFGraphFactory.eINSTANCE.createCustomLayout ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getLayoutable_Layout (), GMFGraphFactory.eINSTANCE.createGridLayout ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getLayoutable_Layout (), GMFGraphFactory.eINSTANCE.createBorderLayout ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createFigureRef ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createLabel ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createLabeledContainer ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createRectangle ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createRoundedRectangle ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createEllipse ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createPolyline ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createPolygon ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createPolylineConnection ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createPolylineDecoration ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createPolygonDecoration ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createCustomFigure ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createCustomDecoration ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Children (), GMFGraphFactory.eINSTANCE.createCustomConnection ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor (), GMFGraphFactory.eINSTANCE.createRGBColor ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor (), GMFGraphFactory.eINSTANCE.createConstantColor ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor (), GMFGraphFactory.eINSTANCE.createRGBColor ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor (), GMFGraphFactory.eINSTANCE.createConstantColor ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_MaximumSize (), GMFGraphFactory.eINSTANCE.createDimension ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_MinimumSize (), GMFGraphFactory.eINSTANCE.createDimension ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_PreferredSize (), GMFGraphFactory.eINSTANCE.createDimension ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Insets (), GMFGraphFactory.eINSTANCE.createInsets ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Border (), GMFGraphFactory.eINSTANCE.createLineBorder ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Border (), GMFGraphFactory.eINSTANCE.createMarginBorder ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Border (), GMFGraphFactory.eINSTANCE.createCompoundBorder ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Border (), GMFGraphFactory.eINSTANCE.createCustomBorder ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Location (), GMFGraphFactory.eINSTANCE.createPoint ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getFigure_Size (), GMFGraphFactory.eINSTANCE.createPoint ()));
    }

    public String getCreateChildText (Object owner, Object feature, Object child, Collection selection) {
        Object childFeature = feature;
        Object childObject = child;
        boolean qualify = childFeature == GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_MaximumSize () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_MinimumSize () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_PreferredSize () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_Location () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_Size ();
        if (qualify) {
            return getString ("_UI_CreateChild_text2", new Object [] {getTypeText (childObject), getFeatureText (childFeature), getTypeText (owner)});
        }
        return super.getCreateChildText (owner, feature, child, selection);
    }

    public ResourceLocator getResourceLocator () {
        return GMFGraphEditPlugin.INSTANCE;
    }

}

