package org.eclipse.gmf.runtime.draw2d.ui.internal.figures;

import java.util.List;

import java.util.ListIterator;

import org.eclipse.draw2d.AutomaticRouter;

import org.eclipse.draw2d.ConnectionLayer;

import org.eclipse.draw2d.ConnectionRouter;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx;

import org.eclipse.gmf.runtime.draw2d.ui.internal.routers.FanRouter;

import org.eclipse.gmf.runtime.draw2d.ui.internal.routers.ForestRouter;

import org.eclipse.gmf.runtime.draw2d.ui.internal.routers.ObliqueRouter;

import org.eclipse.gmf.runtime.draw2d.ui.internal.routers.RectilinearRouter;

public class ConnectionLayerEx extends ConnectionLayer {
    private boolean dirtied = false;
    static private boolean allowJumpLinks = true;

    public void add (IFigure figure, Object constraint, int index) {
        super.add (figure, constraint, index);
        dirtyJumpLinks (figure.getBounds ());
    }

    public void remove (IFigure figure) {
        super.remove (figure);
        dirtyJumpLinks (figure.getBounds ());
    }

    static public boolean shouldJumpLinks () {
        return allowJumpLinks;
    }

    static public void setJumpLinks (boolean set) {
        allowJumpLinks = set;
    }

    public void cleanJumpLinks () {
        dirtied = false;
    }

    public void dirtyJumpLinks (Rectangle region) {
        if (! dirtied && shouldJumpLinks ()) {
            List children = getChildren ();
            ListIterator childIter = children.listIterator ();
            while (childIter.hasNext ()) {
                IFigure poly = (IFigure) childIter.next ();
                if (poly instanceof PolylineConnectionEx) if (poly.getBounds ().intersects (region)) ((PolylineConnectionEx) poly).refreshLine ();

            }
            dirtied = true;
        }
    }

    public ConnectionRouter getConnectionRouter () {
        return getObliqueRouter ();
    }

    private ConnectionRouter obliqueRouter = null;
    private ConnectionRouter rectilinearRouter = null;
    private ConnectionRouter treeRouter = null;

    public ConnectionRouter getObliqueRouter () {
        if (obliqueRouter == null) {
            AutomaticRouter router = new FanRouter ();
            router.setNextRouter (new ObliqueRouter ());
            obliqueRouter = router;
        }
        return obliqueRouter;
    }

    public ConnectionRouter getRectilinearRouter () {
        if (rectilinearRouter == null) rectilinearRouter = new RectilinearRouter ();

        return rectilinearRouter;
    }

    public ConnectionRouter getTreeRouter () {
        if (treeRouter == null) treeRouter = new ForestRouter ();

        return treeRouter;
    }

}

