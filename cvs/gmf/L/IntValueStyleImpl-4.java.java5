package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.runtime.notation.IntValueStyle;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class IntValueStyleImpl extends NamedStyleImpl implements IntValueStyle {
    protected static final int INT_VALUE_EDEFAULT = 0;
    protected int intValue = INT_VALUE_EDEFAULT;

    protected IntValueStyleImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.INT_VALUE_STYLE;
    }

    public int getIntValue () {
        return intValue;
    }

    public void setIntValue (int newIntValue) {
        int oldIntValue = intValue;
        intValue = newIntValue;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.INT_VALUE_STYLE__INT_VALUE, oldIntValue, intValue));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.INT_VALUE_STYLE__UUID :
                return getUUID ();
            case NotationPackage.INT_VALUE_STYLE__NAME :
                return getName ();
            case NotationPackage.INT_VALUE_STYLE__INT_VALUE :
                return new Integer (getIntValue ());
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.INT_VALUE_STYLE__UUID :
                setUUID ((byte []) newValue);
                return;
            case NotationPackage.INT_VALUE_STYLE__NAME :
                setName ((String) newValue);
                return;
            case NotationPackage.INT_VALUE_STYLE__INT_VALUE :
                setIntValue (((Integer) newValue).intValue ());
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.INT_VALUE_STYLE__UUID :
                setUUID (UUID_EDEFAULT);
                return;
            case NotationPackage.INT_VALUE_STYLE__NAME :
                setName (NAME_EDEFAULT);
                return;
            case NotationPackage.INT_VALUE_STYLE__INT_VALUE :
                setIntValue (INT_VALUE_EDEFAULT);
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.INT_VALUE_STYLE__UUID :
                return UUID_EDEFAULT == null ? uUID != null : ! UUID_EDEFAULT.equals (uUID);
            case NotationPackage.INT_VALUE_STYLE__NAME :
                return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT.equals (name);
            case NotationPackage.INT_VALUE_STYLE__INT_VALUE :
                return intValue != INT_VALUE_EDEFAULT;
        }
        return eDynamicIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (intValue: ");
        result.append (intValue);
        result.append (')');
        return result.toString ();
    }

}

