package org.eclipse.gmf.graphdef.editor.edit.parts;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.commands.Command;

import org.eclipse.gmf.graphdef.editor.edit.commands.GMFGraphCreateShortcutDecorationsCommand;

import org.eclipse.gmf.graphdef.editor.edit.policies.CanvasCanonicalEditPolicy;

import org.eclipse.gmf.graphdef.editor.edit.policies.CanvasItemSemanticEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DiagramDragDropEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.DropObjectsRequest;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

public class CanvasEditPart extends DiagramEditPart {
    public final static String MODEL_ID = "GMFGraph";
    public static final int VISUAL_ID = 1000;

    public CanvasEditPart (View view) {
        super (view);
    }

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicyRoles.SEMANTIC_ROLE, new CanvasItemSemanticEditPolicy ());
        installEditPolicy (EditPolicyRoles.CANONICAL_ROLE, new CanvasCanonicalEditPolicy ());
        installEditPolicy (EditPolicyRoles.DRAG_DROP_ROLE, new DiagramDragDropEditPolicy () {

            public Command getDropObjectsCommand (DropObjectsRequest dropRequest) {
                List viewDescriptors = new ArrayList ();
                for (Iterator it = dropRequest.getObjects ().iterator ();
                it.hasNext ();) {
                    viewDescriptors.add (new CreateViewRequest.ViewDescriptor (new EObjectAdapter ((EObject) it.next ()), Node.class, null, getDiagramPreferencesHint ()));
                }
                return createShortcutsCommand (dropRequest, viewDescriptors);
            }

            private Command createShortcutsCommand (DropObjectsRequest dropRequest, List viewDescriptors) {
                Command command = createViewsAndArrangeCommand (dropRequest, viewDescriptors);
                if (command != null) {
                    return command.chain (new ICommandProxy (new GMFGraphCreateShortcutDecorationsCommand (getEditingDomain (), (View) getModel (), viewDescriptors)));
                }
                return null;
            }

        }

        );
    }

}

