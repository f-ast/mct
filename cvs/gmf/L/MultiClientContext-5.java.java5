package org.eclipse.gmf.runtime.emf.type.core;

import java.util.Collection;

import java.util.HashSet;

import java.util.Iterator;

import java.util.Set;

import java.util.regex.Pattern;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.emf.type.core.internal.descriptors.IEditHelperAdviceDescriptor;

public class MultiClientContext implements IClientContext {
    public static final String MULTI_CLIENT_CONTEXT_ID = "multi_client_context_ID";
    private final Set children;
    private IElementMatcher matcher;

    public MultiClientContext (Collection childContexts) {
        children = new HashSet (childContexts.size ());
        for (Iterator i = childContexts.iterator ();
        i.hasNext ();) {
            IClientContext next = (IClientContext) i.next ();
            if (next.isMultiClientContext ()) {
                Collection nested = ((MultiClientContext) next).getChildren ();
                children.addAll (nested);
            } else {
                children.add (next);
            }
        }
    }

    public boolean isMultiClientContext () {
        return true;
    }

    public void add (IClientContext context) {
        if (context.isMultiClientContext ()) {
            children.addAll (context.getChildren ());
        } else {
            children.add (context);
        }
    }

    public final String getId () {
        return MULTI_CLIENT_CONTEXT_ID;
    }

    public Collection getChildren () {
        return children;
    }

    public final IElementMatcher getMatcher () {
        if (matcher == null) {
            matcher = new IElementMatcher () {

                public boolean matches (EObject eObject) {
                    boolean result = ! getChildren ().isEmpty ();
                    for (Iterator i = getChildren ().iterator ();
                    result && i.hasNext ();) {
                        IClientContext next = (IClientContext) i.next ();
                        if (! next.getMatcher ().matches (eObject)) {
                            result = false;
                        }
                    }
                    return result;
                }

            }

            ;
        }
        return matcher;
    }

    public void bindId (String typeId) {
        for (Iterator i = getChildren ().iterator ();
        i.hasNext ();) {
            IClientContext next = (IClientContext) i.next ();
            next.bindId (typeId);
        }
    }

    public void bindPattern (Pattern pattern) {
        for (Iterator i = getChildren ().iterator ();
        i.hasNext ();) {
            IClientContext next = (IClientContext) i.next ();
            next.bindPattern (pattern);
        }
    }

    public boolean includes (IElementTypeDescriptor elementTypeDescriptor) {
        boolean result = ! getChildren ().isEmpty ();
        for (Iterator i = getChildren ().iterator ();
        result && i.hasNext ();) {
            IClientContext next = (IClientContext) i.next ();
            if (! next.includes (elementTypeDescriptor)) {
                result = false;
            }
        }
        return result;
    }

    public boolean includes (IElementType elementType) {
        boolean result = ! getChildren ().isEmpty ();
        for (Iterator i = getChildren ().iterator ();
        result && i.hasNext ();) {
            IClientContext next = (IClientContext) i.next ();
            if (! next.includes (elementType)) {
                result = false;
            }
        }
        return result;
    }

    public boolean includes (IEditHelperAdviceDescriptor advice) {
        boolean result = ! getChildren ().isEmpty ();
        for (Iterator i = getChildren ().iterator ();
        result && i.hasNext ();) {
            IClientContext next = (IClientContext) i.next ();
            if (! next.includes (advice)) {
                result = false;
            }
        }
        return result;
    }

    public boolean equals (Object obj) {
        if (obj instanceof MultiClientContext) {
            return getChildren ().equals (((MultiClientContext) obj).getChildren ());
        }
        return false;
    }

    public int hashCode () {
        return getChildren ().hashCode ();
    }

    public String toString () {
        StringBuffer b = new StringBuffer ();
        for (Iterator i = getChildren ().iterator ();
        i.hasNext ();) {
            b.append (((IClientContext) i.next ()).getId ());
            if (i.hasNext ()) {
                b.append (StringStatics.COMMA);
            }
        }
        return "ClientMultiContext[" + b + ']';
    }

}

