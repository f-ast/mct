package org.eclipse.gmf.runtime.notation;

import java.util.Arrays;

import java.util.Collections;

import java.util.List;

import org.eclipse.emf.common.util.AbstractEnumerator;

public final class Sorting extends AbstractEnumerator {
    public static final int NONE = 0;
    public static final int MANUAL = 1;
    public static final int AUTOMATIC = 2;
    public static final Sorting NONE_LITERAL = new Sorting (NONE, "None", "None");
    public static final Sorting MANUAL_LITERAL = new Sorting (MANUAL, "Manual", "Manual");
    public static final Sorting AUTOMATIC_LITERAL = new Sorting (AUTOMATIC, "Automatic", "Automatic");
    private static final Sorting [] VALUES_ARRAY = new Sorting [] {NONE_LITERAL, MANUAL_LITERAL, AUTOMATIC_LITERAL,};
    public static final List VALUES = Collections.unmodifiableList (Arrays.asList (VALUES_ARRAY));

    public static Sorting get (String literal) {
        for (int i = 0;
        i < VALUES_ARRAY.length; ++ i) {
            Sorting result = VALUES_ARRAY [i];
            if (result.toString ().equals (literal)) {
                return result;
            }
        }
        return null;
    }

    public static Sorting getByName (String name) {
        for (int i = 0;
        i < VALUES_ARRAY.length; ++ i) {
            Sorting result = VALUES_ARRAY [i];
            if (result.getName ().equals (name)) {
                return result;
            }
        }
        return null;
    }

    public static Sorting get (int value) {
        switch (value) {
            case NONE :
                return NONE_LITERAL;
            case MANUAL :
                return MANUAL_LITERAL;
            case AUTOMATIC :
                return AUTOMATIC_LITERAL;
        }
        return null;
    }

    private Sorting (int value, String name, String literal) {
        super (value, name, literal);
    }

}

