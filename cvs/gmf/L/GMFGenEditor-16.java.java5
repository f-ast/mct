package org.eclipse.gmf.codegen.gmfgen.presentation;

import java.io.IOException;

import java.io.InputStream;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Collections;

import java.util.EventObject;

import java.util.HashMap;

import java.util.Iterator;

import java.util.LinkedHashMap;

import java.util.List;

import java.util.Map;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IMarker;

import org.eclipse.core.resources.IResource;

import org.eclipse.core.resources.IResourceChangeEvent;

import org.eclipse.core.resources.IResourceChangeListener;

import org.eclipse.core.resources.IResourceDelta;

import org.eclipse.core.resources.IResourceDeltaVisitor;

import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IPath;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.emf.codegen.ecore.genmodel.GenModel;

import org.eclipse.emf.codegen.ecore.genmodel.provider.GenModelItemProviderAdapterFactory;

import org.eclipse.emf.common.command.BasicCommandStack;

import org.eclipse.emf.common.command.Command;

import org.eclipse.emf.common.command.CommandStack;

import org.eclipse.emf.common.command.CommandStackListener;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.ui.MarkerHelper;

import org.eclipse.emf.common.ui.ViewerPane;

import org.eclipse.emf.common.ui.editor.ProblemEditorPart;

import org.eclipse.emf.common.ui.viewer.IViewerProvider;

import org.eclipse.emf.common.util.BasicDiagnostic;

import org.eclipse.emf.common.util.Diagnostic;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EValidator;

import org.eclipse.emf.ecore.provider.EcoreItemProviderAdapterFactory;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.ecore.util.EContentAdapter;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.emf.ecore.xmi.XMLResource;

import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.domain.IEditingDomainProvider;

import org.eclipse.emf.edit.provider.AdapterFactoryItemDelegator;

import org.eclipse.emf.edit.provider.ComposedAdapterFactory;

import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;

import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;

import org.eclipse.emf.edit.ui.action.EditingDomainActionBarContributor;

import org.eclipse.emf.edit.ui.celleditor.AdapterFactoryTreeEditor;

import org.eclipse.emf.edit.ui.dnd.EditingDomainViewerDropAdapter;

import org.eclipse.emf.edit.ui.dnd.LocalTransfer;

import org.eclipse.emf.edit.ui.dnd.ViewerDragAdapter;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;

import org.eclipse.emf.edit.ui.util.EditUIMarkerHelper;

import org.eclipse.emf.edit.ui.view.ExtendedPropertySheetPage;

import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

import org.eclipse.gmf.codegen.gmfgen.provider.GMFGenItemProviderAdapterFactory;

import org.eclipse.jface.action.IMenuListener;

import org.eclipse.jface.action.IMenuManager;

import org.eclipse.jface.action.IStatusLineManager;

import org.eclipse.jface.action.IToolBarManager;

import org.eclipse.jface.action.MenuManager;

import org.eclipse.jface.action.Separator;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.jface.dialogs.ProgressMonitorDialog;

import org.eclipse.jface.viewers.ColumnWeightData;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.jface.viewers.ISelectionChangedListener;

import org.eclipse.jface.viewers.ISelectionProvider;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.jface.viewers.ListViewer;

import org.eclipse.jface.viewers.SelectionChangedEvent;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.jface.viewers.StructuredViewer;

import org.eclipse.jface.viewers.TableLayout;

import org.eclipse.jface.viewers.TableViewer;

import org.eclipse.jface.viewers.TreeViewer;

import org.eclipse.jface.viewers.Viewer;

import org.eclipse.swt.SWT;

import org.eclipse.swt.custom.CTabFolder;

import org.eclipse.swt.dnd.DND;

import org.eclipse.swt.dnd.Transfer;

import org.eclipse.swt.events.ControlAdapter;

import org.eclipse.swt.events.ControlEvent;

import org.eclipse.swt.graphics.Point;

import org.eclipse.swt.layout.FillLayout;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Menu;

import org.eclipse.swt.widgets.Table;

import org.eclipse.swt.widgets.TableColumn;

import org.eclipse.swt.widgets.Tree;

import org.eclipse.swt.widgets.TreeColumn;

import org.eclipse.ui.IActionBars;

import org.eclipse.ui.IEditorInput;

import org.eclipse.ui.IEditorPart;

import org.eclipse.ui.IEditorSite;

import org.eclipse.ui.IFileEditorInput;

import org.eclipse.ui.IPartListener;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.ui.PartInitException;

import org.eclipse.ui.actions.WorkspaceModifyOperation;

import org.eclipse.ui.dialogs.SaveAsDialog;

import org.eclipse.ui.ide.IGotoMarker;

import org.eclipse.ui.part.FileEditorInput;

import org.eclipse.ui.part.MultiPageEditorPart;

import org.eclipse.ui.views.contentoutline.ContentOutline;

import org.eclipse.ui.views.contentoutline.ContentOutlinePage;

import org.eclipse.ui.views.contentoutline.IContentOutlinePage;

import org.eclipse.ui.views.properties.IPropertySheetPage;

import org.eclipse.ui.views.properties.PropertySheet;

import org.eclipse.ui.views.properties.PropertySheetPage;

public class GMFGenEditor extends MultiPageEditorPart implements IEditingDomainProvider, ISelectionProvider, IMenuListener, IViewerProvider, IGotoMarker {
    protected AdapterFactoryEditingDomain editingDomain;
    protected ComposedAdapterFactory adapterFactory;
    protected IContentOutlinePage contentOutlinePage;
    protected IStatusLineManager contentOutlineStatusLineManager;
    protected TreeViewer contentOutlineViewer;
    protected PropertySheetPage propertySheetPage;
    protected TreeViewer selectionViewer;
    protected TreeViewer parentViewer;
    protected TreeViewer treeViewer;
    protected ListViewer listViewer;
    protected TableViewer tableViewer;
    protected TreeViewer treeViewerWithColumns;
    protected ViewerPane currentViewerPane;
    protected Viewer currentViewer;
    protected ISelectionChangedListener selectionChangedListener;
    protected Collection selectionChangedListeners = new ArrayList ();
    protected ISelection editorSelection = StructuredSelection.EMPTY;
    protected MarkerHelper markerHelper = new EditUIMarkerHelper ();
    protected IPartListener partListener = new IPartListener () {

        public void partActivated (IWorkbenchPart p) {
            if (p instanceof ContentOutline) {
                if (((ContentOutline) p).getCurrentPage () == contentOutlinePage) {
                    getActionBarContributor ().setActiveEditor (GMFGenEditor.this);
                    setCurrentViewer (contentOutlineViewer);
                }
            } else if (p instanceof PropertySheet) {
                if (((PropertySheet) p).getCurrentPage () == propertySheetPage) {
                    getActionBarContributor ().setActiveEditor (GMFGenEditor.this);
                    handleActivate ();
                }
            } else if (p == GMFGenEditor.this) {
                handleActivate ();
            }

        }

        public void partBroughtToTop (IWorkbenchPart p) {
        }

        public void partClosed (IWorkbenchPart p) {
        }

        public void partDeactivated (IWorkbenchPart p) {
        }

        public void partOpened (IWorkbenchPart p) {
        }

    }

    ;
    protected Collection removedResources = new ArrayList ();
    protected Collection changedResources = new ArrayList ();
    protected Collection savedResources = new ArrayList ();
    protected Map resourceToDiagnosticMap = new LinkedHashMap ();
    protected boolean updateProblemIndication = true;
    protected EContentAdapter problemIndicationAdapter = new EContentAdapter () {

        public void notifyChanged (Notification notification) {
            if (notification.getNotifier () instanceof Resource) {
                switch (notification.getFeatureID (Resource.class)) {
                    case Resource.RESOURCE__IS_LOADED :
                    case Resource.RESOURCE__ERRORS :
                    case Resource.RESOURCE__WARNINGS :
                        {
                            Resource resource = (Resource) notification.getNotifier ();
                            Diagnostic diagnostic = analyzeResourceProblems ((Resource) notification.getNotifier (), null);
                            if (diagnostic.getSeverity () != Diagnostic.OK) {
                                resourceToDiagnosticMap.put (resource, diagnostic);
                            } else {
                                resourceToDiagnosticMap.remove (resource);
                            }
                            if (updateProblemIndication) {
                                getSite ().getShell ().getDisplay ().asyncExec (new Runnable () {

                                    public void run () {
                                        updateProblemIndication ();
                                    }

                                }

                                );
                            }
                        }}
            } else {
                super.notifyChanged (notification);
            }
        }

        protected void setTarget (Resource target) {
            basicSetTarget (target);
        }

        protected void unsetTarget (Resource target) {
            basicUnsetTarget (target);
        }

    }

    ;
    protected IResourceChangeListener resourceChangeListener = new IResourceChangeListener () {

        public void resourceChanged (IResourceChangeEvent event) {
            {
                IResourceDelta delta = event.getDelta ();
                try {
                    class ResourceDeltaVisitor implements IResourceDeltaVisitor {
                        protected ResourceSet resourceSet = editingDomain.getResourceSet ();
                        protected Collection changedResources = new ArrayList ();
                        protected Collection removedResources = new ArrayList ();

                        public boolean visit (IResourceDelta delta) {
                            if (delta.getFlags () != IResourceDelta.MARKERS && delta.getResource ().getType () == IResource.FILE) {
                                if ((delta.getKind () & (IResourceDelta.CHANGED | IResourceDelta.REMOVED)) != 0) {
                                    Resource resource = resourceSet.getResource (URI.createURI (delta.getFullPath ().toString ()), false);
                                    if (resource != null) {
                                        if ((delta.getKind () & IResourceDelta.REMOVED) != 0) {
                                            removedResources.add (resource);
                                        } else if (! savedResources.remove (resource)) {
                                            changedResources.add (resource);
                                        }

                                    }
                                }
                            }
                            return true;
                        }

                        public Collection getChangedResources () {
                            return changedResources;
                        }

                        public Collection getRemovedResources () {
                            return removedResources;
                        }

                    }

                    ResourceDeltaVisitor visitor = new ResourceDeltaVisitor ();
                    delta.accept (visitor);
                    if (! visitor.getRemovedResources ().isEmpty ()) {
                        removedResources.addAll (visitor.getRemovedResources ());
                        if (! isDirty ()) {
                            getSite ().getShell ().getDisplay ().asyncExec (new Runnable () {

                                public void run () {
                                    getSite ().getPage ().closeEditor (GMFGenEditor.this, false);
                                    GMFGenEditor.this.dispose ();
                                }

                            }

                            );
                        }
                    }
                    if (! visitor.getChangedResources ().isEmpty ()) {
                        changedResources.addAll (visitor.getChangedResources ());
                        if (getSite ().getPage ().getActiveEditor () == GMFGenEditor.this) {
                            getSite ().getShell ().getDisplay ().asyncExec (new Runnable () {

                                public void run () {
                                    handleActivate ();
                                }

                            }

                            );
                        }
                    }
                } catch (CoreException exception) {
                    EditorPlugin.INSTANCE.log (exception);
                }
            }}

    }

    ;

    protected void handleActivate () {
        if (editingDomain.getResourceToReadOnlyMap () != null) {
            editingDomain.getResourceToReadOnlyMap ().clear ();
            setSelection (getSelection ());
        }
        if (! removedResources.isEmpty ()) {
            if (handleDirtyConflict ()) {
                getSite ().getPage ().closeEditor (GMFGenEditor.this, false);
                GMFGenEditor.this.dispose ();
            } else {
                removedResources.clear ();
                changedResources.clear ();
                savedResources.clear ();
            }
        } else if (! changedResources.isEmpty ()) {
            changedResources.removeAll (savedResources);
            handleChangedResources ();
            changedResources.clear ();
            savedResources.clear ();
        }

    }

    protected void handleChangedResources () {
        if (! changedResources.isEmpty () && (! isDirty () || handleDirtyConflict ())) {
            editingDomain.getCommandStack ().flush ();
            updateProblemIndication = false;
            for (Iterator i = changedResources.iterator ();
            i.hasNext ();) {
                Resource resource = (Resource) i.next ();
                if (resource.isLoaded ()) {
                    resource.unload ();
                    try {
                        resource.load (Collections.EMPTY_MAP);
                    } catch (IOException exception) {
                        if (! resourceToDiagnosticMap.containsKey (resource)) {
                            resourceToDiagnosticMap.put (resource, analyzeResourceProblems (resource, exception));
                        }
                    }
                }
            }
            updateProblemIndication = true;
            updateProblemIndication ();
        }
    }

    protected void updateProblemIndication () {
        if (updateProblemIndication) {
            BasicDiagnostic diagnostic = new BasicDiagnostic (Diagnostic.OK, "org.eclipse.gmf.codegen.edit", 0, null, new Object [] {editingDomain.getResourceSet ()});
            for (Iterator i = resourceToDiagnosticMap.values ().iterator ();
            i.hasNext ();) {
                Diagnostic childDiagnostic = (Diagnostic) i.next ();
                if (childDiagnostic.getSeverity () != Diagnostic.OK) {
                    diagnostic.add (childDiagnostic);
                }
            }
            int lastEditorPage = getPageCount () - 1;
            if (lastEditorPage >= 0 && getEditor (lastEditorPage) instanceof ProblemEditorPart) {
                ((ProblemEditorPart) getEditor (lastEditorPage)).setDiagnostic (diagnostic);
                if (diagnostic.getSeverity () != Diagnostic.OK) {
                    setActivePage (lastEditorPage);
                }
            } else if (diagnostic.getSeverity () != Diagnostic.OK) {
                ProblemEditorPart problemEditorPart = new ProblemEditorPart ();
                problemEditorPart.setDiagnostic (diagnostic);
                problemEditorPart.setMarkerHelper (markerHelper);
                try {
                    showTabs ();
                    addPage (getPageCount (), problemEditorPart, getEditorInput ());
                    lastEditorPage ++;
                    setPageText (lastEditorPage, problemEditorPart.getPartName ());
                    setActivePage (lastEditorPage);
                } catch (PartInitException exception) {
                    EditorPlugin.INSTANCE.log (exception);
                }
            }

            if (markerHelper.hasMarkers (editingDomain.getResourceSet ())) {
                markerHelper.deleteMarkers (editingDomain.getResourceSet ());
                if (diagnostic.getSeverity () != Diagnostic.OK) {
                    try {
                        markerHelper.createMarkers (diagnostic);
                    } catch (CoreException exception) {
                        EditorPlugin.INSTANCE.log (exception);
                    }
                }
            }
        }
    }

    protected boolean handleDirtyConflict () {
        return MessageDialog.openQuestion (getSite ().getShell (), getString ("_UI_FileConflict_label"), getString ("_WARN_FileConflict"));
    }

    public GMFGenEditor () {
        super ();
        List factories = new ArrayList ();
        factories.add (new ResourceItemProviderAdapterFactory ());
        factories.add (new GMFGenItemProviderAdapterFactory ());
        factories.add (new EcoreItemProviderAdapterFactory ());
        factories.add (new GenModelItemProviderAdapterFactory ());
        factories.add (new ReflectiveItemProviderAdapterFactory ());
        adapterFactory = new ComposedAdapterFactory (factories);
        BasicCommandStack commandStack = new BasicCommandStack ();
        commandStack.addCommandStackListener (new CommandStackListener () {

            public void commandStackChanged (final EventObject event) {
                getContainer ().getDisplay ().asyncExec (new Runnable () {

                    public void run () {
                        firePropertyChange (IEditorPart.PROP_DIRTY);
                        Command mostRecentCommand = ((CommandStack) event.getSource ()).getMostRecentCommand ();
                        if (mostRecentCommand != null) {
                            setSelectionToViewer (mostRecentCommand.getAffectedObjects ());
                        }
                        if (propertySheetPage != null) {
                            propertySheetPage.refresh ();
                        }
                    }

                }

                );
            }

        }

        );
        editingDomain = new AdapterFactoryEditingDomain (adapterFactory, commandStack, new HashMap ());
        editingDomain.getResourceSet ().getLoadOptions ().put (XMLResource.OPTION_DEFER_IDREF_RESOLUTION, Boolean.TRUE);
    }

    protected void firePropertyChange (int action) {
        super.firePropertyChange (action);
    }

    public void setSelectionToViewer (Collection collection) {
        final Collection theSelection = collection;
        if (theSelection != null && ! theSelection.isEmpty ()) {
            Runnable runnable = new Runnable () {

                public void run () {
                    if (currentViewer != null) {
                        currentViewer.setSelection (new StructuredSelection (theSelection.toArray ()), true);
                    }
                }

            }

            ;
            runnable.run ();
        }
    }

    public EditingDomain getEditingDomain () {
        return editingDomain;
    }

    public class ReverseAdapterFactoryContentProvider extends AdapterFactoryContentProvider {

        public ReverseAdapterFactoryContentProvider (AdapterFactory adapterFactory) {
            super (adapterFactory);
        }

        public Object [] getElements (Object object) {
            Object parent = super.getParent (object);
            return (parent == null ? Collections.EMPTY_SET : Collections.singleton (parent)).toArray ();
        }

        public Object [] getChildren (Object object) {
            Object parent = super.getParent (object);
            return (parent == null ? Collections.EMPTY_SET : Collections.singleton (parent)).toArray ();
        }

        public boolean hasChildren (Object object) {
            Object parent = super.getParent (object);
            return parent != null;
        }

        public Object getParent (Object object) {
            return null;
        }

    }

    public void setCurrentViewerPane (ViewerPane viewerPane) {
        if (currentViewerPane != viewerPane) {
            if (currentViewerPane != null) {
                currentViewerPane.showFocus (false);
            }
            currentViewerPane = viewerPane;
        }
        setCurrentViewer (currentViewerPane.getViewer ());
    }

    public void setCurrentViewer (Viewer viewer) {
        if (currentViewer != viewer) {
            if (selectionChangedListener == null) {
                selectionChangedListener = new ISelectionChangedListener () {

                    public void selectionChanged (SelectionChangedEvent selectionChangedEvent) {
                        setSelection (selectionChangedEvent.getSelection ());
                    }

                }

                ;
            }
            if (currentViewer != null) {
                currentViewer.removeSelectionChangedListener (selectionChangedListener);
            }
            if (viewer != null) {
                viewer.addSelectionChangedListener (selectionChangedListener);
            }
            currentViewer = viewer;
            setSelection (currentViewer == null ? StructuredSelection.EMPTY : currentViewer.getSelection ());
        }
    }

    public Viewer getViewer () {
        return currentViewer;
    }

    protected void createContextMenuFor (StructuredViewer viewer) {
        MenuManager contextMenu = new MenuManager ("#PopUp");
        contextMenu.add (new Separator ("additions"));
        contextMenu.setRemoveAllWhenShown (true);
        contextMenu.addMenuListener (this);
        Menu menu = contextMenu.createContextMenu (viewer.getControl ());
        viewer.getControl ().setMenu (menu);
        getSite ().registerContextMenu (contextMenu, viewer);
        int dndOperations = DND.DROP_COPY | DND.DROP_MOVE | DND.DROP_LINK;
        Transfer [] transfers = new Transfer [] {LocalTransfer.getInstance ()};
        viewer.addDragSupport (dndOperations, transfers, new ViewerDragAdapter (viewer));
        viewer.addDropSupport (dndOperations, transfers, new EditingDomainViewerDropAdapter (editingDomain, viewer));
    }

    public void createModel () {
        IFileEditorInput modelFile = (IFileEditorInput) getEditorInput ();
        URI resourceURI = URI.createPlatformResourceURI (modelFile.getFile ().getFullPath ().toString ());
        ;
        Exception exception = null;
        Resource resource = null;
        try {
            resource = editingDomain.getResourceSet ().getResource (resourceURI, true);
            Object o = resource.getContents ().get (0);
            GenModel toReload = null;
            if (o instanceof GenEditorGenerator) {
                toReload = ((GenEditorGenerator) o).getDomainGenModel ();
            }
            if (toReload != null) {
                toReload.reconcile ();
            }
        } catch (Exception e) {
            exception = e;
            resource = editingDomain.getResourceSet ().getResource (resourceURI, false);
        }
        Diagnostic diagnostic = analyzeResourceProblems (resource, exception);
        if (diagnostic.getSeverity () != Diagnostic.OK) {
            resourceToDiagnosticMap.put (resource, analyzeResourceProblems (resource, exception));
        }
        editingDomain.getResourceSet ().eAdapters ().add (problemIndicationAdapter);
    }

    public Diagnostic analyzeResourceProblems (Resource resource, Exception exception) {
        if (! resource.getErrors ().isEmpty () || ! resource.getWarnings ().isEmpty ()) {
            BasicDiagnostic basicDiagnostic = new BasicDiagnostic (Diagnostic.ERROR, "org.eclipse.gmf.codegen.edit", 0, getString ("_UI_CreateModelError_message", resource.getURI ()), new Object [] {exception == null ? (Object) resource : exception});
            basicDiagnostic.merge (EcoreUtil.computeDiagnostic (resource, true));
            return basicDiagnostic;
        } else if (exception != null) {
            return new BasicDiagnostic (Diagnostic.ERROR, "org.eclipse.gmf.codegen.edit", 0, getString ("_UI_CreateModelError_message", resource.getURI ()), new Object [] {exception});
        } else {
            return Diagnostic.OK_INSTANCE;
        }

    }

    public void createPages () {
        createModel ();
        if (! getEditingDomain ().getResourceSet ().getResources ().isEmpty () && ! ((Resource) getEditingDomain ().getResourceSet ().getResources ().get (0)).getContents ().isEmpty ()) {
            {
                ViewerPane viewerPane = new ViewerPane (getSite ().getPage (), GMFGenEditor.this) {

                    public Viewer createViewer (Composite composite) {
                        Tree tree = new Tree (composite, SWT.MULTI);
                        TreeViewer newTreeViewer = new TreeViewer (tree);
                        return newTreeViewer;
                    }

                    public void requestActivation () {
                        super.requestActivation ();
                        setCurrentViewerPane (this);
                    }

                }

                ;
                viewerPane.createControl (getContainer ());
                selectionViewer = (TreeViewer) viewerPane.getViewer ();
                selectionViewer.setContentProvider (new AdapterFactoryContentProvider (adapterFactory));
                selectionViewer.setLabelProvider (new AdapterFactoryLabelProvider (adapterFactory));
                selectionViewer.setInput (editingDomain.getResourceSet ());
                viewerPane.setTitle (editingDomain.getResourceSet ());
                new AdapterFactoryTreeEditor (selectionViewer.getTree (), adapterFactory);
                createContextMenuFor (selectionViewer);
                int pageIndex = addPage (viewerPane.getControl ());
                setPageText (pageIndex, getString ("_UI_SelectionPage_label"));
            } {
                ViewerPane viewerPane = new ViewerPane (getSite ().getPage (), GMFGenEditor.this) {

                    public Viewer createViewer (Composite composite) {
                        Tree tree = new Tree (composite, SWT.MULTI);
                        TreeViewer newTreeViewer = new TreeViewer (tree);
                        return newTreeViewer;
                    }

                    public void requestActivation () {
                        super.requestActivation ();
                        setCurrentViewerPane (this);
                    }

                }

                ;
                viewerPane.createControl (getContainer ());
                parentViewer = (TreeViewer) viewerPane.getViewer ();
                parentViewer.setAutoExpandLevel (30);
                parentViewer.setContentProvider (new ReverseAdapterFactoryContentProvider (adapterFactory));
                parentViewer.setLabelProvider (new AdapterFactoryLabelProvider (adapterFactory));
                createContextMenuFor (parentViewer);
                int pageIndex = addPage (viewerPane.getControl ());
                setPageText (pageIndex, getString ("_UI_ParentPage_label"));
            } {
                ViewerPane viewerPane = new ViewerPane (getSite ().getPage (), GMFGenEditor.this) {

                    public Viewer createViewer (Composite composite) {
                        return new ListViewer (composite);
                    }

                    public void requestActivation () {
                        super.requestActivation ();
                        setCurrentViewerPane (this);
                    }

                }

                ;
                viewerPane.createControl (getContainer ());
                listViewer = (ListViewer) viewerPane.getViewer ();
                listViewer.setContentProvider (new AdapterFactoryContentProvider (adapterFactory));
                listViewer.setLabelProvider (new AdapterFactoryLabelProvider (adapterFactory));
                createContextMenuFor (listViewer);
                int pageIndex = addPage (viewerPane.getControl ());
                setPageText (pageIndex, getString ("_UI_ListPage_label"));
            } {
                ViewerPane viewerPane = new ViewerPane (getSite ().getPage (), GMFGenEditor.this) {

                    public Viewer createViewer (Composite composite) {
                        return new TreeViewer (composite);
                    }

                    public void requestActivation () {
                        super.requestActivation ();
                        setCurrentViewerPane (this);
                    }

                }

                ;
                viewerPane.createControl (getContainer ());
                treeViewer = (TreeViewer) viewerPane.getViewer ();
                treeViewer.setContentProvider (new AdapterFactoryContentProvider (adapterFactory));
                treeViewer.setLabelProvider (new AdapterFactoryLabelProvider (adapterFactory));
                new AdapterFactoryTreeEditor (treeViewer.getTree (), adapterFactory);
                createContextMenuFor (treeViewer);
                int pageIndex = addPage (viewerPane.getControl ());
                setPageText (pageIndex, getString ("_UI_TreePage_label"));
            } {
                ViewerPane viewerPane = new ViewerPane (getSite ().getPage (), GMFGenEditor.this) {

                    public Viewer createViewer (Composite composite) {
                        return new TableViewer (composite);
                    }

                    public void requestActivation () {
                        super.requestActivation ();
                        setCurrentViewerPane (this);
                    }

                }

                ;
                viewerPane.createControl (getContainer ());
                tableViewer = (TableViewer) viewerPane.getViewer ();
                Table table = tableViewer.getTable ();
                TableLayout layout = new TableLayout ();
                table.setLayout (layout);
                table.setHeaderVisible (true);
                table.setLinesVisible (true);
                TableColumn objectColumn = new TableColumn (table, SWT.NONE);
                layout.addColumnData (new ColumnWeightData (3, 100, true));
                objectColumn.setText (getString ("_UI_ObjectColumn_label"));
                objectColumn.setResizable (true);
                TableColumn selfColumn = new TableColumn (table, SWT.NONE);
                layout.addColumnData (new ColumnWeightData (2, 100, true));
                selfColumn.setText (getString ("_UI_SelfColumn_label"));
                selfColumn.setResizable (true);
                tableViewer.setColumnProperties (new String [] {"a", "b"});
                tableViewer.setContentProvider (new AdapterFactoryContentProvider (adapterFactory));
                tableViewer.setLabelProvider (new AdapterFactoryLabelProvider (adapterFactory));
                createContextMenuFor (tableViewer);
                int pageIndex = addPage (viewerPane.getControl ());
                setPageText (pageIndex, getString ("_UI_TablePage_label"));
            } {
                ViewerPane viewerPane = new ViewerPane (getSite ().getPage (), GMFGenEditor.this) {

                    public Viewer createViewer (Composite composite) {
                        return new TreeViewer (composite);
                    }

                    public void requestActivation () {
                        super.requestActivation ();
                        setCurrentViewerPane (this);
                    }

                }

                ;
                viewerPane.createControl (getContainer ());
                treeViewerWithColumns = (TreeViewer) viewerPane.getViewer ();
                Tree tree = treeViewerWithColumns.getTree ();
                tree.setLayoutData (new FillLayout ());
                tree.setHeaderVisible (true);
                tree.setLinesVisible (true);
                TreeColumn objectColumn = new TreeColumn (tree, SWT.NONE);
                objectColumn.setText (getString ("_UI_ObjectColumn_label"));
                objectColumn.setResizable (true);
                objectColumn.setWidth (250);
                TreeColumn selfColumn = new TreeColumn (tree, SWT.NONE);
                selfColumn.setText (getString ("_UI_SelfColumn_label"));
                selfColumn.setResizable (true);
                selfColumn.setWidth (200);
                treeViewerWithColumns.setColumnProperties (new String [] {"a", "b"});
                treeViewerWithColumns.setContentProvider (new AdapterFactoryContentProvider (adapterFactory));
                treeViewerWithColumns.setLabelProvider (new AdapterFactoryLabelProvider (adapterFactory));
                createContextMenuFor (treeViewerWithColumns);
                int pageIndex = addPage (viewerPane.getControl ());
                setPageText (pageIndex, getString ("_UI_TreeWithColumnsPage_label"));
            } setActivePage (0);
        }
        getContainer ().addControlListener (new ControlAdapter () {
            boolean guard = false;

            public void controlResized (ControlEvent event) {
                if (! guard) {
                    guard = true;
                    hideTabs ();
                    guard = false;
                }
            }

        }

        );
        updateProblemIndication ();
    }

    protected void hideTabs () {
        if (getPageCount () <= 1) {
            setPageText (0, "");
            if (getContainer () instanceof CTabFolder) {
                ((CTabFolder) getContainer ()).setTabHeight (1);
                Point point = getContainer ().getSize ();
                getContainer ().setSize (point.x, point.y + 6);
            }
        }
    }

    protected void showTabs () {
        if (getPageCount () == 1) {
            setPageText (0, getString ("_UI_SelectionPage_label"));
            if (getContainer () instanceof CTabFolder) {
                ((CTabFolder) getContainer ()).setTabHeight (SWT.DEFAULT);
                Point point = getContainer ().getSize ();
                getContainer ().setSize (point.x, point.y - 6);
            }
        }
    }

    protected void pageChange (int pageIndex) {
        super.pageChange (pageIndex);
        if (contentOutlinePage != null) {
            handleContentOutlineSelection (contentOutlinePage.getSelection ());
        }
    }

    public Object getAdapter (Class key) {
        if (key.equals (IContentOutlinePage.class)) {
            return showOutlineView () ? getContentOutlinePage () : null;
        } else if (key.equals (IPropertySheetPage.class)) {
            return getPropertySheetPage ();
        } else if (key.equals (IGotoMarker.class)) {
            return this;
        } else {
            return super.getAdapter (key);
        }

    }

    public IContentOutlinePage getContentOutlinePage () {
        if (contentOutlinePage == null) {
            class MyContentOutlinePage extends ContentOutlinePage {

                public void createControl (Composite parent) {
                    super.createControl (parent);
                    contentOutlineViewer = getTreeViewer ();
                    contentOutlineViewer.addSelectionChangedListener (this);
                    contentOutlineViewer.setContentProvider (new AdapterFactoryContentProvider (adapterFactory));
                    contentOutlineViewer.setLabelProvider (new AdapterFactoryLabelProvider (adapterFactory));
                    contentOutlineViewer.setInput (editingDomain.getResourceSet ());
                    createContextMenuFor (contentOutlineViewer);
                    if (! editingDomain.getResourceSet ().getResources ().isEmpty ()) {
                        ArrayList selection = new ArrayList ();
                        selection.add (editingDomain.getResourceSet ().getResources ().get (0));
                        contentOutlineViewer.setSelection (new StructuredSelection (selection), true);
                    }
                }

                public void makeContributions (IMenuManager menuManager, IToolBarManager toolBarManager, IStatusLineManager statusLineManager) {
                    super.makeContributions (menuManager, toolBarManager, statusLineManager);
                    contentOutlineStatusLineManager = statusLineManager;
                }

                public void setActionBars (IActionBars actionBars) {
                    super.setActionBars (actionBars);
                    getActionBarContributor ().shareGlobalActions (this, actionBars);
                }

            }

            contentOutlinePage = new MyContentOutlinePage ();
            contentOutlinePage.addSelectionChangedListener (new ISelectionChangedListener () {

                public void selectionChanged (SelectionChangedEvent event) {
                    handleContentOutlineSelection (event.getSelection ());
                }

            }

            );
        }
        return contentOutlinePage;
    }

    public IPropertySheetPage getPropertySheetPage () {
        if (propertySheetPage == null) {
            propertySheetPage = new ExtendedPropertySheetPage (editingDomain) {

                public void setSelectionToViewer (List selection) {
                    GMFGenEditor.this.setSelectionToViewer (selection);
                    GMFGenEditor.this.setFocus ();
                }

                public void setActionBars (IActionBars actionBars) {
                    super.setActionBars (actionBars);
                    getActionBarContributor ().shareGlobalActions (this, actionBars);
                }

            }

            ;
            propertySheetPage.setPropertySourceProvider (new AdapterFactoryContentProvider (adapterFactory));
        }
        return propertySheetPage;
    }

    public void handleContentOutlineSelection (ISelection selection) {
        if (currentViewerPane != null && ! selection.isEmpty () && selection instanceof IStructuredSelection) {
            Iterator selectedElements = ((IStructuredSelection) selection).iterator ();
            if (selectedElements.hasNext ()) {
                Object selectedElement = selectedElements.next ();
                if (currentViewerPane.getViewer () == selectionViewer) {
                    ArrayList selectionList = new ArrayList ();
                    selectionList.add (selectedElement);
                    while (selectedElements.hasNext ()) {
                        selectionList.add (selectedElements.next ());
                    }
                    selectionViewer.setSelection (new StructuredSelection (selectionList));
                } else {
                    if (currentViewerPane.getViewer ().getInput () != selectedElement) {
                        currentViewerPane.getViewer ().setInput (selectedElement);
                        currentViewerPane.setTitle (selectedElement);
                    }
                }
            }
        }
    }

    public boolean isDirty () {
        return ((BasicCommandStack) editingDomain.getCommandStack ()).isSaveNeeded ();
    }

    public void doSave (IProgressMonitor progressMonitor) {
        WorkspaceModifyOperation operation = new WorkspaceModifyOperation () {

            public void execute (IProgressMonitor monitor) {
                boolean first = true;
                for (Iterator i = editingDomain.getResourceSet ().getResources ().iterator ();
                i.hasNext ();) {
                    Resource resource = (Resource) i.next ();
                    if ((first || ! resource.getContents ().isEmpty () || isPersisted (resource)) && ! editingDomain.isReadOnly (resource)) {
                        try {
                            savedResources.add (resource);
                            resource.save (Collections.EMPTY_MAP);
                        } catch (Exception exception) {
                            resourceToDiagnosticMap.put (resource, analyzeResourceProblems (resource, exception));
                        }
                        first = false;
                    }
                }
            }

        }

        ;
        updateProblemIndication = false;
        try {
            new ProgressMonitorDialog (getSite ().getShell ()).run (true, false, operation);
            ((BasicCommandStack) editingDomain.getCommandStack ()).saveIsDone ();
            firePropertyChange (IEditorPart.PROP_DIRTY);
        } catch (Exception exception) {
            EditorPlugin.INSTANCE.log (exception);
        }
        updateProblemIndication = true;
        updateProblemIndication ();
    }

    protected boolean isPersisted (Resource resource) {
        boolean result = false;
        try {
            InputStream stream = editingDomain.getResourceSet ().getURIConverter ().createInputStream (resource.getURI ());
            if (stream != null) {
                result = true;
                stream.close ();
            }
        } catch (IOException e) {
        }
        return result;
    }

    public boolean isSaveAsAllowed () {
        return true;
    }

    public void doSaveAs () {
        SaveAsDialog saveAsDialog = new SaveAsDialog (getSite ().getShell ());
        saveAsDialog.open ();
        IPath path = saveAsDialog.getResult ();
        if (path != null) {
            IFile file = ResourcesPlugin.getWorkspace ().getRoot ().getFile (path);
            if (file != null) {
                doSaveAs (URI.createPlatformResourceURI (file.getFullPath ().toString ()), new FileEditorInput (file));
            }
        }
    }

    protected void doSaveAs (URI uri, IEditorInput editorInput) {
        ((Resource) editingDomain.getResourceSet ().getResources ().get (0)).setURI (uri);
        setInputWithNotify (editorInput);
        setPartName (editorInput.getName ());
        IProgressMonitor progressMonitor = getActionBars ().getStatusLineManager () != null ? getActionBars ().getStatusLineManager ().getProgressMonitor () : new NullProgressMonitor ();
        doSave (progressMonitor);
    }

    public void gotoMarker (IMarker marker) {
        try {
            if (marker.getType ().equals (EValidator.MARKER)) {
                String uriAttribute = marker.getAttribute (EValidator.URI_ATTRIBUTE, null);
                if (uriAttribute != null) {
                    URI uri = URI.createURI (uriAttribute);
                    EObject eObject = editingDomain.getResourceSet ().getEObject (uri, true);
                    if (eObject != null) {
                        setSelectionToViewer (Collections.singleton (editingDomain.getWrapper (eObject)));
                    }
                }
            }
        } catch (CoreException exception) {
            EditorPlugin.INSTANCE.log (exception);
        }
    }

    public void init (IEditorSite site, IEditorInput editorInput) {
        setSite (site);
        setInputWithNotify (editorInput);
        setPartName (editorInput.getName ());
        site.setSelectionProvider (this);
        site.getPage ().addPartListener (partListener);
        ResourcesPlugin.getWorkspace ().addResourceChangeListener (resourceChangeListener, IResourceChangeEvent.POST_CHANGE);
    }

    public void setFocus () {
        if (currentViewerPane != null) {
            currentViewerPane.setFocus ();
        } else {
            getControl (getActivePage ()).setFocus ();
        }
    }

    public void addSelectionChangedListener (ISelectionChangedListener listener) {
        selectionChangedListeners.add (listener);
    }

    public void removeSelectionChangedListener (ISelectionChangedListener listener) {
        selectionChangedListeners.remove (listener);
    }

    public ISelection getSelection () {
        return editorSelection;
    }

    public void setSelection (ISelection selection) {
        editorSelection = selection;
        for (Iterator listeners = selectionChangedListeners.iterator ();
        listeners.hasNext ();) {
            ISelectionChangedListener listener = (ISelectionChangedListener) listeners.next ();
            listener.selectionChanged (new SelectionChangedEvent (this, selection));
        }
        setStatusLineManager (selection);
    }

    public void setStatusLineManager (ISelection selection) {
        IStatusLineManager statusLineManager = currentViewer != null && currentViewer == contentOutlineViewer ? contentOutlineStatusLineManager : getActionBars ().getStatusLineManager ();
        if (statusLineManager != null) {
            if (selection instanceof IStructuredSelection) {
                Collection collection = ((IStructuredSelection) selection).toList ();
                switch (collection.size ()) {
                    case 0 :
                        {
                            statusLineManager.setMessage (getString ("_UI_NoObjectSelected"));
                            break;
                        } case 1 :
                        {
                            String text = new AdapterFactoryItemDelegator (adapterFactory).getText (collection.iterator ().next ());
                            statusLineManager.setMessage (getString ("_UI_SingleObjectSelected", text));
                            break;
                        } default :
                        {
                            statusLineManager.setMessage (getString ("_UI_MultiObjectSelected", Integer.toString (collection.size ())));
                            break;
                        }}
            } else {
                statusLineManager.setMessage ("");
            }
        }
    }

    private static String getString (String key) {
        return EditorPlugin.INSTANCE.getString (key);
    }

    private static String getString (String key, Object s1) {
        return EditorPlugin.INSTANCE.getString (key, new Object [] {s1});
    }

    public void menuAboutToShow (IMenuManager menuManager) {
        ((IMenuListener) getEditorSite ().getActionBarContributor ()).menuAboutToShow (menuManager);
    }

    public EditingDomainActionBarContributor getActionBarContributor () {
        return (EditingDomainActionBarContributor) getEditorSite ().getActionBarContributor ();
    }

    public IActionBars getActionBars () {
        return getActionBarContributor ().getActionBars ();
    }

    public AdapterFactory getAdapterFactory () {
        return adapterFactory;
    }

    public void dispose () {
        ResourcesPlugin.getWorkspace ().removeResourceChangeListener (resourceChangeListener);
        getSite ().getPage ().removePartListener (partListener);
        adapterFactory.dispose ();
        if (getActionBarContributor ().getActiveEditor () == this) {
            getActionBarContributor ().setActiveEditor (null);
        }
        if (propertySheetPage != null) {
            propertySheetPage.dispose ();
        }
        if (contentOutlinePage != null) {
            contentOutlinePage.dispose ();
        }
        super.dispose ();
    }

    protected boolean showOutlineView () {
        return true;
    }

}

