package org.eclipse.gmf.runtime.notation.impl;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EContentsEList;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.MeasurementUnit;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public class DiagramImpl extends ViewImpl implements Diagram {
    protected static final String NAME_EDEFAULT = "";
    protected String name = NAME_EDEFAULT;
    protected static final MeasurementUnit MEASUREMENT_UNIT_EDEFAULT = MeasurementUnit.HIMETRIC_LITERAL;
    protected MeasurementUnit measurementUnit = MEASUREMENT_UNIT_EDEFAULT;
    protected static final int MEASUREMENT_UNIT_ESETFLAG = 1 << 11;
    protected EList persistedEdges = null;
    protected EList transientEdges = null;
    private EContentsEList allEdges = null;

    protected DiagramImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.DIAGRAM;
    }

    public String getName () {
        return name;
    }

    public void setName (String newName) {
        String oldName = name;
        name = newName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.DIAGRAM__NAME, oldName, name));

    }

    public MeasurementUnit getMeasurementUnit () {
        return measurementUnit;
    }

    public void setMeasurementUnit (MeasurementUnit newMeasurementUnit) {
        if (! isSetMeasurementUnit ()) {
            MeasurementUnit oldMeasurementUnit = measurementUnit;
            measurementUnit = newMeasurementUnit == null ? MEASUREMENT_UNIT_EDEFAULT : newMeasurementUnit;
            boolean oldMeasurementUnitESet = (eFlags & MEASUREMENT_UNIT_ESETFLAG) != 0;
            eFlags |= MEASUREMENT_UNIT_ESETFLAG;
            if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.DIAGRAM__MEASUREMENT_UNIT, oldMeasurementUnit, measurementUnit, ! oldMeasurementUnitESet));

        } else throw new UnsupportedOperationException ();

    }

    public void unsetMeasurementUnit () {
        throw new UnsupportedOperationException ();
    }

    public boolean isSetMeasurementUnit () {
        return (eFlags & MEASUREMENT_UNIT_ESETFLAG) != 0;
    }

    public EList getEdges () {
        if (allEdges == null) {
            allEdges = new EContentsEList (this, new EStructuralFeature [] {NotationPackage.eINSTANCE.getDiagram_PersistedEdges (), NotationPackage.eINSTANCE.getDiagram_TransientEdges ()});
        }
        return allEdges;
    }

    public EList getPersistedEdges () {
        if (persistedEdges == null) {
            persistedEdges = new EObjectContainmentEList (Edge.class, this, NotationPackage.DIAGRAM__PERSISTED_EDGES);
        }
        return persistedEdges;
    }

    public EList getTransientEdges () {
        if (transientEdges == null) {
            transientEdges = new EObjectContainmentEList (Edge.class, this, NotationPackage.DIAGRAM__TRANSIENT_EDGES);
        }
        return transientEdges;
    }

    public Edge createEdge (EClass eClass) {
        Edge newEdge = (Edge) eClass.getEPackage ().getEFactoryInstance ().create (eClass);
        getPersistedEdges ().add (newEdge);
        return newEdge;
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case NotationPackage.DIAGRAM__PERSISTED_EDGES :
                return ((InternalEList) getPersistedEdges ()).basicRemove (otherEnd, msgs);
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES :
                return ((InternalEList) getTransientEdges ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.DIAGRAM__NAME :
                return getName ();
            case NotationPackage.DIAGRAM__MEASUREMENT_UNIT :
                return getMeasurementUnit ();
            case NotationPackage.DIAGRAM__PERSISTED_EDGES :
                return getPersistedEdges ();
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES :
                return getTransientEdges ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.DIAGRAM__NAME :
                setName ((String) newValue);
                return;
            case NotationPackage.DIAGRAM__MEASUREMENT_UNIT :
                setMeasurementUnit ((MeasurementUnit) newValue);
                return;
            case NotationPackage.DIAGRAM__PERSISTED_EDGES :
                getPersistedEdges ().clear ();
                getPersistedEdges ().addAll ((Collection) newValue);
                return;
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES :
                getTransientEdges ().clear ();
                getTransientEdges ().addAll ((Collection) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.DIAGRAM__NAME :
                setName (NAME_EDEFAULT);
                return;
            case NotationPackage.DIAGRAM__MEASUREMENT_UNIT :
                unsetMeasurementUnit ();
                return;
            case NotationPackage.DIAGRAM__PERSISTED_EDGES :
                getPersistedEdges ().clear ();
                return;
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES :
                getTransientEdges ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.DIAGRAM__NAME :
                return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT.equals (name);
            case NotationPackage.DIAGRAM__MEASUREMENT_UNIT :
                return isSetMeasurementUnit ();
            case NotationPackage.DIAGRAM__PERSISTED_EDGES :
                return persistedEdges != null && ! persistedEdges.isEmpty ();
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES :
                return transientEdges != null && ! transientEdges.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (name: ");
        result.append (name);
        result.append (", measurementUnit: ");
        if ((eFlags & MEASUREMENT_UNIT_ESETFLAG) != 0) result.append (measurementUnit);
        else result.append ("<unset>");

        result.append (')');
        return result.toString ();
    }

    public void insertEdge (Edge edge) {
        persistEdges ();
        getPersistedEdges ().add (edge);
    }

    public void insertEdgeAt (Edge edge, int index) {
        persistEdges ();
        if (getPersistedEdges ().size () >= index) {
            getPersistedEdges ().add (index, edge);
        }
    }

    public void insertEdge (Edge edge, boolean persisted) {
        List edges = null;
        if (persisted) edges = getPersistedEdges ();
        else edges = getTransientEdges ();

        edges.add (edge);
    }

    public void persistEdges () {
        if (transientEdges != null && transientEdges.size () > 0) {
            List edges = new ArrayList (transientEdges);
            getPersistedEdges ().addAll (transientEdges);
            for (Iterator iterator = edges.iterator ();
            iterator.hasNext ();) {
                Edge edge = (Edge) iterator.next ();
                View sourceView = edge.getSource ();
                View targetView = edge.getTarget ();
                if (sourceView != null) sourceView.persist ();

                if (targetView != null) targetView.persist ();

            }
        }
    }

    public void removeEdge (Edge edge) {
        if (edge.eContainingFeature () == NotationPackage.eINSTANCE.getDiagram_TransientEdges ()) {
            if (transientEdges != null && transientEdges.size () > 0) {
                transientEdges.remove (edge);
            }
        } else if (edge.eContainingFeature () == NotationPackage.eINSTANCE.getDiagram_PersistedEdges ()) {
            if (persistedEdges != null && persistedEdges.size () > 0) {
                persistedEdges.remove (edge);
            }
        }

    }

}

