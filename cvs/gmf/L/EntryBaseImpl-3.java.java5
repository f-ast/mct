package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.codegen.gmfgen.EntryBase;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

public abstract class EntryBaseImpl extends EObjectImpl implements EntryBase {
    protected static final int ORDER_EDEFAULT = 0;
    protected int order = ORDER_EDEFAULT;
    protected static final String TITLE_KEY_EDEFAULT = null;
    protected String titleKey = TITLE_KEY_EDEFAULT;
    protected static final String DESCRIPTION_KEY_EDEFAULT = null;
    protected String descriptionKey = DESCRIPTION_KEY_EDEFAULT;
    protected static final String LARGE_ICON_PATH_EDEFAULT = null;
    protected String largeIconPath = LARGE_ICON_PATH_EDEFAULT;
    protected static final String SMALL_ICON_PATH_EDEFAULT = null;
    protected String smallIconPath = SMALL_ICON_PATH_EDEFAULT;
    protected static final String CREATE_METHOD_NAME_EDEFAULT = null;
    protected String createMethodName = CREATE_METHOD_NAME_EDEFAULT;

    protected EntryBaseImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getEntryBase ();
    }

    public int getOrder () {
        return order;
    }

    public void setOrder (int newOrder) {
        int oldOrder = order;
        order = newOrder;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.ENTRY_BASE__ORDER, oldOrder, order));

    }

    public String getTitleKey () {
        return titleKey;
    }

    public void setTitleKey (String newTitleKey) {
        String oldTitleKey = titleKey;
        titleKey = newTitleKey;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.ENTRY_BASE__TITLE_KEY, oldTitleKey, titleKey));

    }

    public String getDescriptionKey () {
        return descriptionKey;
    }

    public void setDescriptionKey (String newDescriptionKey) {
        String oldDescriptionKey = descriptionKey;
        descriptionKey = newDescriptionKey;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.ENTRY_BASE__DESCRIPTION_KEY, oldDescriptionKey, descriptionKey));

    }

    public String getLargeIconPath () {
        return largeIconPath;
    }

    public void setLargeIconPath (String newLargeIconPath) {
        String oldLargeIconPath = largeIconPath;
        largeIconPath = newLargeIconPath;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.ENTRY_BASE__LARGE_ICON_PATH, oldLargeIconPath, largeIconPath));

    }

    public String getSmallIconPath () {
        return smallIconPath;
    }

    public void setSmallIconPath (String newSmallIconPath) {
        String oldSmallIconPath = smallIconPath;
        smallIconPath = newSmallIconPath;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.ENTRY_BASE__SMALL_ICON_PATH, oldSmallIconPath, smallIconPath));

    }

    public String getCreateMethodName () {
        return createMethodName;
    }

    public void setCreateMethodName (String newCreateMethodName) {
        String oldCreateMethodName = createMethodName;
        createMethodName = newCreateMethodName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.ENTRY_BASE__CREATE_METHOD_NAME, oldCreateMethodName, createMethodName));

    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.ENTRY_BASE__ORDER :
                return new Integer (getOrder ());
            case GMFGenPackage.ENTRY_BASE__TITLE_KEY :
                return getTitleKey ();
            case GMFGenPackage.ENTRY_BASE__DESCRIPTION_KEY :
                return getDescriptionKey ();
            case GMFGenPackage.ENTRY_BASE__LARGE_ICON_PATH :
                return getLargeIconPath ();
            case GMFGenPackage.ENTRY_BASE__SMALL_ICON_PATH :
                return getSmallIconPath ();
            case GMFGenPackage.ENTRY_BASE__CREATE_METHOD_NAME :
                return getCreateMethodName ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.ENTRY_BASE__ORDER :
                setOrder (((Integer) newValue).intValue ());
                return;
            case GMFGenPackage.ENTRY_BASE__TITLE_KEY :
                setTitleKey ((String) newValue);
                return;
            case GMFGenPackage.ENTRY_BASE__DESCRIPTION_KEY :
                setDescriptionKey ((String) newValue);
                return;
            case GMFGenPackage.ENTRY_BASE__LARGE_ICON_PATH :
                setLargeIconPath ((String) newValue);
                return;
            case GMFGenPackage.ENTRY_BASE__SMALL_ICON_PATH :
                setSmallIconPath ((String) newValue);
                return;
            case GMFGenPackage.ENTRY_BASE__CREATE_METHOD_NAME :
                setCreateMethodName ((String) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.ENTRY_BASE__ORDER :
                setOrder (ORDER_EDEFAULT);
                return;
            case GMFGenPackage.ENTRY_BASE__TITLE_KEY :
                setTitleKey (TITLE_KEY_EDEFAULT);
                return;
            case GMFGenPackage.ENTRY_BASE__DESCRIPTION_KEY :
                setDescriptionKey (DESCRIPTION_KEY_EDEFAULT);
                return;
            case GMFGenPackage.ENTRY_BASE__LARGE_ICON_PATH :
                setLargeIconPath (LARGE_ICON_PATH_EDEFAULT);
                return;
            case GMFGenPackage.ENTRY_BASE__SMALL_ICON_PATH :
                setSmallIconPath (SMALL_ICON_PATH_EDEFAULT);
                return;
            case GMFGenPackage.ENTRY_BASE__CREATE_METHOD_NAME :
                setCreateMethodName (CREATE_METHOD_NAME_EDEFAULT);
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.ENTRY_BASE__ORDER :
                return order != ORDER_EDEFAULT;
            case GMFGenPackage.ENTRY_BASE__TITLE_KEY :
                return TITLE_KEY_EDEFAULT == null ? titleKey != null : ! TITLE_KEY_EDEFAULT.equals (titleKey);
            case GMFGenPackage.ENTRY_BASE__DESCRIPTION_KEY :
                return DESCRIPTION_KEY_EDEFAULT == null ? descriptionKey != null : ! DESCRIPTION_KEY_EDEFAULT.equals (descriptionKey);
            case GMFGenPackage.ENTRY_BASE__LARGE_ICON_PATH :
                return LARGE_ICON_PATH_EDEFAULT == null ? largeIconPath != null : ! LARGE_ICON_PATH_EDEFAULT.equals (largeIconPath);
            case GMFGenPackage.ENTRY_BASE__SMALL_ICON_PATH :
                return SMALL_ICON_PATH_EDEFAULT == null ? smallIconPath != null : ! SMALL_ICON_PATH_EDEFAULT.equals (smallIconPath);
            case GMFGenPackage.ENTRY_BASE__CREATE_METHOD_NAME :
                return CREATE_METHOD_NAME_EDEFAULT == null ? createMethodName != null : ! CREATE_METHOD_NAME_EDEFAULT.equals (createMethodName);
        }
        return eDynamicIsSet (eFeature);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (order: ");
        result.append (order);
        result.append (", titleKey: ");
        result.append (titleKey);
        result.append (", descriptionKey: ");
        result.append (descriptionKey);
        result.append (", largeIconPath: ");
        result.append (largeIconPath);
        result.append (", smallIconPath: ");
        result.append (smallIconPath);
        result.append (", createMethodName: ");
        result.append (createMethodName);
        result.append (')');
        return result.toString ();
    }

}

