package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;

import org.eclipse.gmf.codegen.gmfgen.GenNavigatorPath;

import org.eclipse.gmf.codegen.gmfgen.GenNavigatorPathSegment;

public class GenNavigatorPathSegmentImpl extends EObjectImpl implements GenNavigatorPathSegment {
    protected GenCommonBase from;
    protected GenCommonBase to;

    protected GenNavigatorPathSegmentImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenNavigatorPathSegment ();
    }

    public GenNavigatorPath getPath () {
        if (eContainerFeatureID != GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH) return null;

        return (GenNavigatorPath) eContainer ();
    }

    public NotificationChain basicSetPath (GenNavigatorPath newPath, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newPath, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH, msgs);
        return msgs;
    }

    public void setPath (GenNavigatorPath newPath) {
        if (newPath != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH && newPath != null)) {
            if (EcoreUtil.isAncestor (this, newPath)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newPath != null) msgs = ((InternalEObject) newPath).eInverseAdd (this, GMFGenPackage.GEN_NAVIGATOR_PATH__SEGMENTS, GenNavigatorPath.class, msgs);

            msgs = basicSetPath (newPath, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH, newPath, newPath));

    }

    public GenCommonBase getFrom () {
        if (from != null && from.eIsProxy ()) {
            InternalEObject oldFrom = (InternalEObject) from;
            from = (GenCommonBase) eResolveProxy (oldFrom);
            if (from != oldFrom) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__FROM, oldFrom, from));

            }
        }
        return from;
    }

    public GenCommonBase basicGetFrom () {
        return from;
    }

    public void setFrom (GenCommonBase newFrom) {
        GenCommonBase oldFrom = from;
        from = newFrom;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__FROM, oldFrom, from));

    }

    public GenCommonBase getTo () {
        if (to != null && to.eIsProxy ()) {
            InternalEObject oldTo = (InternalEObject) to;
            to = (GenCommonBase) eResolveProxy (oldTo);
            if (to != oldTo) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__TO, oldTo, to));

            }
        }
        return to;
    }

    public GenCommonBase basicGetTo () {
        return to;
    }

    public void setTo (GenCommonBase newTo) {
        GenCommonBase oldTo = to;
        to = newTo;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__TO, oldTo, to));

    }

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetPath ((GenNavigatorPath) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH :
                return basicSetPath (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_NAVIGATOR_PATH__SEGMENTS, GenNavigatorPath.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH :
                return getPath ();
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__FROM :
                if (resolve) return getFrom ();

                return basicGetFrom ();
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__TO :
                if (resolve) return getTo ();

                return basicGetTo ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH :
                setPath ((GenNavigatorPath) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__FROM :
                setFrom ((GenCommonBase) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__TO :
                setTo ((GenCommonBase) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH :
                setPath ((GenNavigatorPath) null);
                return;
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__FROM :
                setFrom ((GenCommonBase) null);
                return;
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__TO :
                setTo ((GenCommonBase) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH :
                return getPath () != null;
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__FROM :
                return from != null;
            case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__TO :
                return to != null;
        }
        return super.eIsSet (featureID);
    }

}

