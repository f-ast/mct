package org.eclipse.gmf.runtime.common.core.service;

import java.util.ArrayList;

import java.util.Arrays;

import java.util.Collections;

import java.util.List;

import org.eclipse.gmf.runtime.common.core.service.Service.ProviderDescriptor;

import org.eclipse.gmf.runtime.common.core.util.EnumeratedType;

public abstract class ExecutionStrategy extends EnumeratedType {
    public static final ProviderPriority [] PRIORITIES = {ProviderPriority.HIGHEST, ProviderPriority.HIGH, ProviderPriority.MEDIUM, ProviderPriority.LOW, ProviderPriority.LOWEST};
    private static int nextOrdinal = 0;
    public static final ExecutionStrategy FIRST = new ExecutionStrategy ("First") {
        private static final long serialVersionUID = 1L;

        public List execute (Service service, IOperation operation) {
            for (int i = 0;
            i < PRIORITIES.length; ++ i) {
                List providers = service.getProviders (this, PRIORITIES [i], operation);
                if (providers.size () != 0) {
                    return Collections.singletonList (operation.execute ((IProvider) providers.get (0)));
                }
            }
            return Collections.EMPTY_LIST;
        }

        public List getUncachedProviders (Service service, ProviderPriority priority, IOperation operation) {
            List descriptors = service.getProviders (priority);
            int size = descriptors.size ();
            for (int i = 0;
            i < size; ++ i) {
                ProviderDescriptor descriptor = (ProviderDescriptor) descriptors.get (i);
                if (Service.safeProvides (descriptor, operation)) {
                    return Collections.singletonList (descriptor.getProvider ());
                }
            }
            return Collections.EMPTY_LIST;
        }

    }

    ;
    public static final ExecutionStrategy LAST = new ExecutionStrategy ("Last") {
        private static final long serialVersionUID = 1L;

        public List execute (Service service, IOperation operation) {
            for (int i = PRIORITIES.length;
            -- i >= 0;) {
                List providers = service.getProviders (this, PRIORITIES [i], operation);
                int size = providers.size ();
                if (size != 0) {
                    return Collections.singletonList (operation.execute ((IProvider) providers.get (size - 1)));
                }
            }
            return Collections.EMPTY_LIST;
        }

        public List getUncachedProviders (Service service, ProviderPriority priority, IOperation operation) {
            List descriptors = service.getProviders (priority);
            for (int i = descriptors.size ();
            -- i >= 0;) {
                ProviderDescriptor descriptor = (ProviderDescriptor) descriptors.get (i);
                if (Service.safeProvides (descriptor, operation)) {
                    return Collections.singletonList (descriptor.getProvider ());
                }
            }
            return Collections.EMPTY_LIST;
        }

    }

    ;
    public static final ExecutionStrategy FORWARD = new ExecutionStrategy ("Forward") {
        private static final long serialVersionUID = 1L;

        public List execute (Service service, IOperation operation) {
            List results = new ArrayList ();
            for (int i = 0;
            i < PRIORITIES.length; ++ i) {
                List providers = service.getProviders (this, PRIORITIES [i], operation);
                int size = providers.size ();
                for (int j = 0;
                j < size; ++ j) {
                    results.add (operation.execute ((IProvider) providers.get (j)));
                }
            }
            return results;
        }

    }

    ;
    public static final ExecutionStrategy REVERSE = new ExecutionStrategy ("Reverse") {
        private static final long serialVersionUID = 1L;

        public List execute (Service service, IOperation operation) {
            List results = new ArrayList ();
            for (int i = PRIORITIES.length;
            -- i >= 0;) {
                List providers = service.getProviders (this, PRIORITIES [i], operation);
                for (int j = providers.size ();
                -- j >= 0;) {
                    results.add (operation.execute ((IProvider) providers.get (j)));
                }
            }
            return results;
        }

    }

    ;
    private static final ExecutionStrategy [] VALUES = {FIRST, LAST, FORWARD, REVERSE};

    protected ExecutionStrategy (String name) {
        super (name, nextOrdinal ++);
    }

    protected ExecutionStrategy (String name, int ordinal) {
        super (name, ordinal);
    }

    protected List getValues () {
        return Collections.unmodifiableList (Arrays.asList (VALUES));
    }

    public abstract List execute (Service service, IOperation operation);

    public List getUncachedProviders (Service service, ProviderPriority priority, IOperation operation) {
        List descriptors = service.getProviders (priority);
        int size = descriptors.size ();
        List providers = new ArrayList (size);
        for (int i = 0;
        i < size; ++ i) {
            ProviderDescriptor descriptor = (ProviderDescriptor) descriptors.get (i);
            if (Service.safeProvides (descriptor, operation)) {
                providers.add (descriptor.getProvider ());
            }
        }
        return providers;
    }

    protected final List getProviders (Service service, ProviderPriority priority) {
        return service.getProviders (priority);
    }

    protected final List getProviders (Service service, ExecutionStrategy strategy, ProviderPriority priority, IOperation operation) {
        return service.getProviders (strategy, priority, operation);
    }

}

