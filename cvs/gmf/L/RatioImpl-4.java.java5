package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.Ratio;

public class RatioImpl extends EObjectImpl implements Ratio {
    protected static final double VALUE_EDEFAULT = - 1.0;
    protected double value = VALUE_EDEFAULT;

    protected RatioImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.RATIO;
    }

    public double getValue () {
        return value;
    }

    public void setValue (double newValue) {
        double oldValue = value;
        value = newValue;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.RATIO__VALUE, oldValue, value));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.RATIO__VALUE :
                return new Double (getValue ());
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.RATIO__VALUE :
                setValue (((Double) newValue).doubleValue ());
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.RATIO__VALUE :
                setValue (VALUE_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.RATIO__VALUE :
                return value != VALUE_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (value: ");
        result.append (value);
        result.append (')');
        return result.toString ();
    }

}

