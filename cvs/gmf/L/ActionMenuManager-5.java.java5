package org.eclipse.gmf.runtime.common.ui.action;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIStatusCodes;

import org.eclipse.jface.action.AbstractGroupMarker;

import org.eclipse.jface.action.Action;

import org.eclipse.jface.action.ActionContributionItem;

import org.eclipse.jface.action.IAction;

import org.eclipse.jface.action.IContributionItem;

import org.eclipse.jface.action.IContributionManager;

import org.eclipse.jface.action.IMenuCreator;

import org.eclipse.jface.action.IMenuManager;

import org.eclipse.jface.action.MenuManager;

import org.eclipse.jface.action.SubContributionItem;

import org.eclipse.jface.util.PropertyChangeEvent;

import org.eclipse.swt.SWT;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Event;

import org.eclipse.swt.widgets.Listener;

import org.eclipse.swt.widgets.Menu;

import org.eclipse.swt.widgets.MenuItem;

import org.eclipse.swt.widgets.ToolBar;

import org.eclipse.ui.actions.LabelRetargetAction;

public class ActionMenuManager extends MenuManager {
    public class MenuCreatorAction extends LabelRetargetAction implements IMenuCreator {
        private Menu menu;
        private Listener menuItemListener = new Listener () {

            public void handleEvent (Event event) {
                if (SWT.Selection == event.type && ! event.widget.isDisposed ()) {
                    ActionContributionItem item = (ActionContributionItem) event.widget.getData ();
                    if (retargetLastAction) {
                        setActionHandler (item.getAction ());
                        setDefaultAction (item.getAction ());
                    }
                    subActionSelected (item.getAction ());
                }
            }

        }

        ;

        public MenuCreatorAction (IAction actionHandler) {
            super (actionHandler.getId (), actionHandler.getText ());
            setEnabled (false);
            setActionHandler (actionHandler);
            setMenuCreator (this);
        }

        public Menu getMenu (Control parent) {
            if (menu != null) menu.dispose ();

            menu = new Menu (parent);
            return createMenu (menu);
        }

        public Menu getMenu (Menu parent) {
            if (menu != null) menu.dispose ();

            menu = new Menu (parent);
            return createMenu (menu);
        }

        public void dispose () {
            if (menu != null) {
                menu.dispose ();
                menu = null;
            }
            super.dispose ();
            ActionMenuManager.this.dispose ();
        }

        protected Menu createMenu (Menu mnu) {
            IContributionItem [] items = getRealItems ();
            for (int i = 0;
            i < items.length; i ++) {
                IContributionItem item = items [i];
                if (item instanceof AbstractGroupMarker) {
                    if (i == 0 || i == items.length - 1 || items [i + 1] instanceof AbstractGroupMarker || mnu.getItemCount () < 1) continue;

                }
                if (! item.isVisible ()) {
                    continue;
                }
                try {
                    item.fill (menu, - 1);
                } catch (Exception e) {
                    Log.info (CommonUIPlugin.getDefault (), CommonUIStatusCodes.GENERAL_UI_FAILURE, "The contribution item (" + item.getId () + ") failed to fill within the menu");
                }
            }
            MenuItem menuItems [] = mnu.getItems ();
            for (int i = 0;
            i < menuItems.length; i ++) {
                if (menuItems [i].getStyle () == SWT.SEPARATOR) continue;

                menuItems [i].addListener (SWT.Selection, menuItemListener);
            }
            return mnu;
        }

        protected void propagateChange (PropertyChangeEvent event) {
            if (! event.getProperty ().equals (Action.ENABLED)) super.propagateChange (event);

        }

        protected void setActionHandler (IAction handler) {
            boolean enabled = MenuCreatorAction.this.isEnabled ();
            super.setActionHandler (handler);
            MenuCreatorAction.this.setEnabled (enabled);
        }

        public void run () {
            if (getActionHandler () != null && getActionHandler ().isEnabled ()) super.run ();
            else if (getDefaultAction ().isEnabled ()) {
                setActionHandler (getDefaultAction ());
                super.run ();
            }

        }

        public void runWithEvent (Event event) {
            if (getActionHandler () != null && getActionHandler ().isEnabled ()) super.runWithEvent (event);
            else if (getDefaultAction ().isEnabled ()) {
                setActionHandler (getDefaultAction ());
                super.runWithEvent (event);
            }

        }

    }

    protected final MenuCreatorAction action;
    protected IAction defaultAction = null;
    private final ActionContributionItem actionContributionItem;
    private boolean retargetLastAction;

    public ActionMenuManager (String id, IAction actionHandler) {
        this (id, actionHandler, false);
    }

    public ActionMenuManager (String id, IAction actionHandler, boolean retargetLastAction) {
        super (actionHandler.getText (), id);
        assert null != actionHandler;
        action = new MenuCreatorAction (actionHandler);
        defaultAction = actionHandler;
        actionContributionItem = new ActionContributionItem (action);
        this.retargetLastAction = retargetLastAction;
    }

    protected boolean isRetargetLastAction () {
        return retargetLastAction;
    }

    protected void subActionSelected (IAction subActionHandler) {
    }

    public void fill (Composite parent) {
        retargetLastAction = false;
        actionContributionItem.fill (parent);
    }

    public void fill (Menu parent, int index) {
        retargetLastAction = false;
        actionContributionItem.fill (parent, index);
    }

    public void fill (ToolBar parent, int index) {
        actionContributionItem.fill (parent, index);
    }

    public void dispose () {
        actionContributionItem.dispose ();
        super.dispose ();
    }

    public boolean isEnabled () {
        return actionContributionItem.isEnabled ();
    }

    public boolean isDirty () {
        return actionContributionItem.isDirty ();
    }

    public boolean isDynamic () {
        return actionContributionItem.isDynamic ();
    }

    public boolean isGroupMarker () {
        return actionContributionItem.isGroupMarker ();
    }

    public boolean isSeparator () {
        return actionContributionItem.isSeparator ();
    }

    public boolean isVisible () {
        IContributionItem [] items = getRealItems ();
        for (int i = 0;
        i < items.length; i ++) {
            IContributionItem item = items [i];
            if (! (item instanceof AbstractGroupMarker) && item.isVisible ()) {
                return actionContributionItem.isVisible ();
            }
        }
        return false;
    }

    public void setParent (IContributionManager parent) {
        actionContributionItem.setParent (parent);
    }

    public void setVisible (boolean visible) {
        actionContributionItem.setVisible (visible);
    }

    public void update () {
        actionContributionItem.update ();
    }

    public void update (String id) {
        actionContributionItem.update (id);
    }

    public void updateAll (boolean force) {
        update (force);
        IContributionItem [] items = getRealItems ();
        for (int i = 0;
        i < items.length; ++ i) {
            IContributionItem ci = items [i];
            if (ci instanceof IMenuManager) {
                IMenuManager mm = (IMenuManager) ci;
                if (mm.isVisible ()) {
                    mm.updateAll (force);
                }
            }
        }
    }

    public void update (boolean force) {
        update ();
    }

    protected void itemAdded (IContributionItem item) {
        super.itemAdded (item);
        if (item instanceof SubContributionItem) item = ((SubContributionItem) item).getInnerItem ();

        if (! item.isGroupMarker ()) action.setEnabled (true);

    }

    protected void itemRemoved (IContributionItem item) {
        super.itemRemoved (item);
        if (item instanceof SubContributionItem) item = ((SubContributionItem) item).getInnerItem ();

        if (! item.isGroupMarker ()) {
            action.setEnabled (false);
            IContributionItem [] items = getItems ();
            for (int i = 0;
            i < items.length; i ++) if (! items [i].isGroupMarker ()) {
                action.setEnabled (true);
                break;
            }

        }
    }

    protected IContributionItem [] getRealItems () {
        IContributionItem [] items = getItems ();
        IContributionItem [] realItems = new IContributionItem [items.length];
        for (int i = 0;
        i < items.length; i ++) {
            if (items [i] instanceof SubContributionItem) {
                realItems [i] = ((SubContributionItem) items [i]).getInnerItem ();
            } else {
                realItems [i] = items [i];
            }
        }
        return realItems;
    }

    public IAction getDefaultAction () {
        return defaultAction;
    }

    protected void setDefaultAction (IAction defaultAction) {
        this.defaultAction = defaultAction;
    }

}

