package org.eclipse.gmf.runtime.notation.providers.internal.copypaste;

import java.util.Collections;

import java.util.List;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.runtime.emf.clipboard.core.ClipboardSupportUtil;

import org.eclipse.gmf.runtime.emf.clipboard.core.ObjectInfo;

import org.eclipse.gmf.runtime.emf.clipboard.core.OverridePasteChildOperation;

import org.eclipse.gmf.runtime.emf.clipboard.core.PasteChildOperation;

import org.eclipse.gmf.runtime.emf.clipboard.core.PostPasteChildOperation;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.View;

public class ConnectorViewPasteOperation extends OverridePasteChildOperation {
    private boolean pasteSemanticElement;
    private Edge connectorView;
    private View sourceView;
    private View targetView;

    public ConnectorViewPasteOperation (PasteChildOperation overriddenChildPasteOperation) {
        super (overriddenChildPasteOperation);
    }

    public void paste () throws Exception {
        connectorView = (Edge) getEObject ();
        sourceView = connectorView.getSource ();
        targetView = connectorView.getTarget ();
        EObject element = connectorView.getElement ();
        if (element != null) {
            if (element.eIsProxy ()) {
                element = ClipboardSupportUtil.resolve (element, getParentPasteProcess ().getLoadedIDToEObjectMapCopy ());
            }
            if (element.eIsProxy () == false) {
                pasteSemanticElement = true;
            }
        }
    }

    protected boolean shouldPasteAlwaysCopyObject (ObjectInfo alwaysCopyObjectInfo) {
        return false;
    }

    protected PasteChildOperation makeAuxiliaryChildPasteProcess (ObjectInfo auxiliaryChildEObjectInfo) {
        return null;
    }

    public PasteChildOperation getPostPasteOperation () {
        return new PostPasteChildOperation (this, EMPTY_ARRAY) {

            public void paste () throws Exception {
            }

            public PasteChildOperation getPostPasteOperation () {
                return new PostPasteChildOperation (this, EMPTY_ARRAY) {

                    public void paste () throws Exception {
                    }

                    public PasteChildOperation getPostPasteOperation () {
                        return new ConnectorViewPostPasteChildOperation (ConnectorViewPasteOperation.this, ConnectorViewPasteOperation.this.pasteSemanticElement);
                    }

                }

                ;
            }

        }

        ;
    }

    protected ObjectInfo getChildObjectInfo () {
        return super.getChildObjectInfo ();
    }

    protected List getAlwaysCopyObjectPasteOperations () {
        return Collections.EMPTY_LIST;
    }

    protected View getSourceView () {
        return sourceView;
    }

    protected View getTargetView () {
        return targetView;
    }

    protected Edge getConnectorView () {
        return connectorView;
    }

}

