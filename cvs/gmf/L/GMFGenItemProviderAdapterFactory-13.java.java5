package org.eclipse.gmf.codegen.gmfgen.provider;

import java.util.ArrayList;

import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.ComposedAdapterFactory;

import org.eclipse.emf.edit.provider.IChangeNotifier;

import org.eclipse.emf.edit.provider.IDisposable;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.INotifyChangedListener;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.gmf.codegen.gmfgen.util.GMFGenAdapterFactory;

public class GMFGenItemProviderAdapterFactory extends GMFGenAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    protected ComposedAdapterFactory parentAdapterFactory;
    protected IChangeNotifier changeNotifier = new ChangeNotifier ();
    protected Collection supportedTypes = new ArrayList ();

    public GMFGenItemProviderAdapterFactory () {
        supportedTypes.add (IEditingDomainItemProvider.class);
        supportedTypes.add (IStructuredItemContentProvider.class);
        supportedTypes.add (ITreeItemContentProvider.class);
        supportedTypes.add (IItemLabelProvider.class);
        supportedTypes.add (IItemPropertySource.class);
    }

    protected GenDiagramItemProvider genDiagramItemProvider;

    public Adapter createGenDiagramAdapter () {
        if (genDiagramItemProvider == null) {
            genDiagramItemProvider = new GenDiagramItemProvider (this);
        }
        return genDiagramItemProvider;
    }

    protected GenNodeItemProvider genNodeItemProvider;

    public Adapter createGenNodeAdapter () {
        if (genNodeItemProvider == null) {
            genNodeItemProvider = new GenNodeItemProvider (this);
        }
        return genNodeItemProvider;
    }

    protected GenCompartmentItemProvider genCompartmentItemProvider;

    public Adapter createGenCompartmentAdapter () {
        if (genCompartmentItemProvider == null) {
            genCompartmentItemProvider = new GenCompartmentItemProvider (this);
        }
        return genCompartmentItemProvider;
    }

    protected GenChildNodeItemProvider genChildNodeItemProvider;

    public Adapter createGenChildNodeAdapter () {
        if (genChildNodeItemProvider == null) {
            genChildNodeItemProvider = new GenChildNodeItemProvider (this);
        }
        return genChildNodeItemProvider;
    }

    protected GenLinkItemProvider genLinkItemProvider;

    public Adapter createGenLinkAdapter () {
        if (genLinkItemProvider == null) {
            genLinkItemProvider = new GenLinkItemProvider (this);
        }
        return genLinkItemProvider;
    }

    protected GenNodeLabelItemProvider genNodeLabelItemProvider;

    public Adapter createGenNodeLabelAdapter () {
        if (genNodeLabelItemProvider == null) {
            genNodeLabelItemProvider = new GenNodeLabelItemProvider (this);
        }
        return genNodeLabelItemProvider;
    }

    protected GenLinkLabelItemProvider genLinkLabelItemProvider;

    public Adapter createGenLinkLabelAdapter () {
        if (genLinkLabelItemProvider == null) {
            genLinkLabelItemProvider = new GenLinkLabelItemProvider (this);
        }
        return genLinkLabelItemProvider;
    }

    protected TypeModelFacetItemProvider typeModelFacetItemProvider;

    public Adapter createTypeModelFacetAdapter () {
        if (typeModelFacetItemProvider == null) {
            typeModelFacetItemProvider = new TypeModelFacetItemProvider (this);
        }
        return typeModelFacetItemProvider;
    }

    protected FeatureModelFacetItemProvider featureModelFacetItemProvider;

    public Adapter createFeatureModelFacetAdapter () {
        if (featureModelFacetItemProvider == null) {
            featureModelFacetItemProvider = new FeatureModelFacetItemProvider (this);
        }
        return featureModelFacetItemProvider;
    }

    protected TypeLinkModelFacetItemProvider typeLinkModelFacetItemProvider;

    public Adapter createTypeLinkModelFacetAdapter () {
        if (typeLinkModelFacetItemProvider == null) {
            typeLinkModelFacetItemProvider = new TypeLinkModelFacetItemProvider (this);
        }
        return typeLinkModelFacetItemProvider;
    }

    protected ColorAttributesItemProvider colorAttributesItemProvider;

    public Adapter createColorAttributesAdapter () {
        if (colorAttributesItemProvider == null) {
            colorAttributesItemProvider = new ColorAttributesItemProvider (this);
        }
        return colorAttributesItemProvider;
    }

    protected ShapeAttributesItemProvider shapeAttributesItemProvider;

    public Adapter createShapeAttributesAdapter () {
        if (shapeAttributesItemProvider == null) {
            shapeAttributesItemProvider = new ShapeAttributesItemProvider (this);
        }
        return shapeAttributesItemProvider;
    }

    protected DefaultSizeAttributesItemProvider defaultSizeAttributesItemProvider;

    public Adapter createDefaultSizeAttributesAdapter () {
        if (defaultSizeAttributesItemProvider == null) {
            defaultSizeAttributesItemProvider = new DefaultSizeAttributesItemProvider (this);
        }
        return defaultSizeAttributesItemProvider;
    }

    protected BasicNodeViewmapItemProvider basicNodeViewmapItemProvider;

    public Adapter createBasicNodeViewmapAdapter () {
        if (basicNodeViewmapItemProvider == null) {
            basicNodeViewmapItemProvider = new BasicNodeViewmapItemProvider (this);
        }
        return basicNodeViewmapItemProvider;
    }

    protected DecoratedConnectionViewmapItemProvider decoratedConnectionViewmapItemProvider;

    public Adapter createDecoratedConnectionViewmapAdapter () {
        if (decoratedConnectionViewmapItemProvider == null) {
            decoratedConnectionViewmapItemProvider = new DecoratedConnectionViewmapItemProvider (this);
        }
        return decoratedConnectionViewmapItemProvider;
    }

    protected LinkDecorationItemProvider linkDecorationItemProvider;

    public Adapter createLinkDecorationAdapter () {
        if (linkDecorationItemProvider == null) {
            linkDecorationItemProvider = new LinkDecorationItemProvider (this);
        }
        return linkDecorationItemProvider;
    }

    protected DiagramViewmapItemProvider diagramViewmapItemProvider;

    public Adapter createDiagramViewmapAdapter () {
        if (diagramViewmapItemProvider == null) {
            diagramViewmapItemProvider = new DiagramViewmapItemProvider (this);
        }
        return diagramViewmapItemProvider;
    }

    protected CompartmentViewmapItemProvider compartmentViewmapItemProvider;

    public Adapter createCompartmentViewmapAdapter () {
        if (compartmentViewmapItemProvider == null) {
            compartmentViewmapItemProvider = new CompartmentViewmapItemProvider (this);
        }
        return compartmentViewmapItemProvider;
    }

    protected LabelViewmapItemProvider labelViewmapItemProvider;

    public Adapter createLabelViewmapAdapter () {
        if (labelViewmapItemProvider == null) {
            labelViewmapItemProvider = new LabelViewmapItemProvider (this);
        }
        return labelViewmapItemProvider;
    }

    protected PaletteItemProvider paletteItemProvider;

    public Adapter createPaletteAdapter () {
        if (paletteItemProvider == null) {
            paletteItemProvider = new PaletteItemProvider (this);
        }
        return paletteItemProvider;
    }

    protected NodeEntryItemProvider nodeEntryItemProvider;

    public Adapter createNodeEntryAdapter () {
        if (nodeEntryItemProvider == null) {
            nodeEntryItemProvider = new NodeEntryItemProvider (this);
        }
        return nodeEntryItemProvider;
    }

    protected LinkEntryItemProvider linkEntryItemProvider;

    public Adapter createLinkEntryAdapter () {
        if (linkEntryItemProvider == null) {
            linkEntryItemProvider = new LinkEntryItemProvider (this);
        }
        return linkEntryItemProvider;
    }

    protected ToolGroupItemProvider toolGroupItemProvider;

    public Adapter createToolGroupAdapter () {
        if (toolGroupItemProvider == null) {
            toolGroupItemProvider = new ToolGroupItemProvider (this);
        }
        return toolGroupItemProvider;
    }

    protected GenFeatureSeqInitializerItemProvider genFeatureSeqInitializerItemProvider;

    public Adapter createGenFeatureSeqInitializerAdapter () {
        if (genFeatureSeqInitializerItemProvider == null) {
            genFeatureSeqInitializerItemProvider = new GenFeatureSeqInitializerItemProvider (this);
        }
        return genFeatureSeqInitializerItemProvider;
    }

    protected GenFeatureValueSpecItemProvider genFeatureValueSpecItemProvider;

    public Adapter createGenFeatureValueSpecAdapter () {
        if (genFeatureValueSpecItemProvider == null) {
            genFeatureValueSpecItemProvider = new GenFeatureValueSpecItemProvider (this);
        }
        return genFeatureValueSpecItemProvider;
    }

    protected GenLinkConstraintsItemProvider genLinkConstraintsItemProvider;

    public Adapter createGenLinkConstraintsAdapter () {
        if (genLinkConstraintsItemProvider == null) {
            genLinkConstraintsItemProvider = new GenLinkConstraintsItemProvider (this);
        }
        return genLinkConstraintsItemProvider;
    }

    protected ValueExpressionItemProvider valueExpressionItemProvider;

    public Adapter createValueExpressionAdapter () {
        if (valueExpressionItemProvider == null) {
            valueExpressionItemProvider = new ValueExpressionItemProvider (this);
        }
        return valueExpressionItemProvider;
    }

    protected ModelElementSelectorItemProvider modelElementSelectorItemProvider;

    public Adapter createModelElementSelectorAdapter () {
        if (modelElementSelectorItemProvider == null) {
            modelElementSelectorItemProvider = new ModelElementSelectorItemProvider (this);
        }
        return modelElementSelectorItemProvider;
    }

    public ComposeableAdapterFactory getRootAdapterFactory () {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory ();
    }

    public void setParentAdapterFactory (ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    public boolean isFactoryForType (Object type) {
        return supportedTypes.contains (type) || super.isFactoryForType (type);
    }

    public Adapter adapt (Notifier notifier, Object type) {
        return super.adapt (notifier, this);
    }

    public Object adapt (Object object, Object type) {
        if (isFactoryForType (type)) {
            Object adapter = super.adapt (object, type);
            if (! (type instanceof Class) || (((Class) type).isInstance (adapter))) {
                return adapter;
            }
        }
        return null;
    }

    public void addListener (INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener (notifyChangedListener);
    }

    public void removeListener (INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener (notifyChangedListener);
    }

    public void fireNotifyChanged (Notification notification) {
        changeNotifier.fireNotifyChanged (notification);
        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged (notification);
        }
    }

    public void dispose () {
        if (genDiagramItemProvider != null) genDiagramItemProvider.dispose ();

        if (genNodeItemProvider != null) genNodeItemProvider.dispose ();

        if (genCompartmentItemProvider != null) genCompartmentItemProvider.dispose ();

        if (genChildNodeItemProvider != null) genChildNodeItemProvider.dispose ();

        if (genLinkItemProvider != null) genLinkItemProvider.dispose ();

        if (genNodeLabelItemProvider != null) genNodeLabelItemProvider.dispose ();

        if (genLinkLabelItemProvider != null) genLinkLabelItemProvider.dispose ();

        if (typeModelFacetItemProvider != null) typeModelFacetItemProvider.dispose ();

        if (featureModelFacetItemProvider != null) featureModelFacetItemProvider.dispose ();

        if (typeLinkModelFacetItemProvider != null) typeLinkModelFacetItemProvider.dispose ();

        if (colorAttributesItemProvider != null) colorAttributesItemProvider.dispose ();

        if (shapeAttributesItemProvider != null) shapeAttributesItemProvider.dispose ();

        if (defaultSizeAttributesItemProvider != null) defaultSizeAttributesItemProvider.dispose ();

        if (basicNodeViewmapItemProvider != null) basicNodeViewmapItemProvider.dispose ();

        if (decoratedConnectionViewmapItemProvider != null) decoratedConnectionViewmapItemProvider.dispose ();

        if (linkDecorationItemProvider != null) linkDecorationItemProvider.dispose ();

        if (diagramViewmapItemProvider != null) diagramViewmapItemProvider.dispose ();

        if (compartmentViewmapItemProvider != null) compartmentViewmapItemProvider.dispose ();

        if (labelViewmapItemProvider != null) labelViewmapItemProvider.dispose ();

        if (valueExpressionItemProvider != null) valueExpressionItemProvider.dispose ();

        if (modelElementSelectorItemProvider != null) modelElementSelectorItemProvider.dispose ();

        if (paletteItemProvider != null) paletteItemProvider.dispose ();

        if (nodeEntryItemProvider != null) nodeEntryItemProvider.dispose ();

        if (linkEntryItemProvider != null) linkEntryItemProvider.dispose ();

        if (toolGroupItemProvider != null) toolGroupItemProvider.dispose ();

        if (genFeatureSeqInitializerItemProvider != null) genFeatureSeqInitializerItemProvider.dispose ();

        if (genFeatureValueSpecItemProvider != null) genFeatureValueSpecItemProvider.dispose ();

        if (genLinkConstraintsItemProvider != null) genLinkConstraintsItemProvider.dispose ();

    }

}

