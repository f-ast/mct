package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.runtime.notation.ConnectorStyle;

import org.eclipse.gmf.runtime.notation.JumpLinkStatus;

import org.eclipse.gmf.runtime.notation.JumpLinkType;

import org.eclipse.gmf.runtime.notation.LineStyle;

import org.eclipse.gmf.runtime.notation.NotationObject;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.Routing;

import org.eclipse.gmf.runtime.notation.RoutingStyle;

import org.eclipse.gmf.runtime.notation.Smoothness;

import org.eclipse.gmf.runtime.notation.Style;

public class ConnectorStyleImpl extends EObjectImpl implements ConnectorStyle {
    protected static final Routing ROUTING_EDEFAULT = Routing.MANUAL_LITERAL;
    protected static final int ROUTING_EFLAG_OFFSET = 8;
    protected static final int ROUTING_EFLAG_DEFAULT = Routing.VALUES.indexOf (ROUTING_EDEFAULT) << ROUTING_EFLAG_OFFSET;
    private static final Routing [] ROUTING_EFLAG_VALUES = (Routing []) Routing.VALUES.toArray (new Routing [Routing.VALUES.size ()]);
    protected static final int ROUTING_EFLAG = 0x3 << ROUTING_EFLAG_OFFSET;
    protected static final Smoothness SMOOTHNESS_EDEFAULT = Smoothness.NONE_LITERAL;
    protected static final int SMOOTHNESS_EFLAG_OFFSET = 10;
    protected static final int SMOOTHNESS_EFLAG_DEFAULT = Smoothness.VALUES.indexOf (SMOOTHNESS_EDEFAULT) << SMOOTHNESS_EFLAG_OFFSET;
    private static final Smoothness [] SMOOTHNESS_EFLAG_VALUES = (Smoothness []) Smoothness.VALUES.toArray (new Smoothness [Smoothness.VALUES.size ()]);
    protected static final int SMOOTHNESS_EFLAG = 0x3 << SMOOTHNESS_EFLAG_OFFSET;
    protected static final boolean AVOID_OBSTRUCTIONS_EDEFAULT = false;
    protected static final int AVOID_OBSTRUCTIONS_EFLAG = 1 << 12;
    protected static final boolean CLOSEST_DISTANCE_EDEFAULT = false;
    protected static final int CLOSEST_DISTANCE_EFLAG = 1 << 13;
    protected static final JumpLinkStatus JUMP_LINK_STATUS_EDEFAULT = JumpLinkStatus.NONE_LITERAL;
    protected static final int JUMP_LINK_STATUS_EFLAG_OFFSET = 14;
    protected static final int JUMP_LINK_STATUS_EFLAG_DEFAULT = JumpLinkStatus.VALUES.indexOf (JUMP_LINK_STATUS_EDEFAULT) << JUMP_LINK_STATUS_EFLAG_OFFSET;
    private static final JumpLinkStatus [] JUMP_LINK_STATUS_EFLAG_VALUES = (JumpLinkStatus []) JumpLinkStatus.VALUES.toArray (new JumpLinkStatus [JumpLinkStatus.VALUES.size ()]);
    protected static final int JUMP_LINK_STATUS_EFLAG = 0x3 << JUMP_LINK_STATUS_EFLAG_OFFSET;
    protected static final JumpLinkType JUMP_LINK_TYPE_EDEFAULT = JumpLinkType.SEMICIRCLE_LITERAL;
    protected static final int JUMP_LINK_TYPE_EFLAG_OFFSET = 16;
    protected static final int JUMP_LINK_TYPE_EFLAG_DEFAULT = JumpLinkType.VALUES.indexOf (JUMP_LINK_TYPE_EDEFAULT) << JUMP_LINK_TYPE_EFLAG_OFFSET;
    private static final JumpLinkType [] JUMP_LINK_TYPE_EFLAG_VALUES = (JumpLinkType []) JumpLinkType.VALUES.toArray (new JumpLinkType [JumpLinkType.VALUES.size ()]);
    protected static final int JUMP_LINK_TYPE_EFLAG = 0x3 << JUMP_LINK_TYPE_EFLAG_OFFSET;
    protected static final boolean JUMP_LINKS_REVERSE_EDEFAULT = false;
    protected static final int JUMP_LINKS_REVERSE_EFLAG = 1 << 18;
    protected static final int LINE_COLOR_EDEFAULT = 11579568;
    protected int lineColor = LINE_COLOR_EDEFAULT;
    protected static final int LINE_WIDTH_EDEFAULT = - 1;
    protected int lineWidth = LINE_WIDTH_EDEFAULT;

    protected ConnectorStyleImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.CONNECTOR_STYLE;
    }

    public Routing getRouting () {
        return ROUTING_EFLAG_VALUES [(eFlags & ROUTING_EFLAG)>>> ROUTING_EFLAG_OFFSET];
    }

    public void setRouting (Routing newRouting) {
        Routing oldRouting = ROUTING_EFLAG_VALUES [(eFlags & ROUTING_EFLAG)>>> ROUTING_EFLAG_OFFSET];
        if (newRouting == null) newRouting = ROUTING_EDEFAULT;

        eFlags = eFlags & ~ ROUTING_EFLAG | Routing.VALUES.indexOf (newRouting) << ROUTING_EFLAG_OFFSET;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.CONNECTOR_STYLE__ROUTING, oldRouting, newRouting));

    }

    public Smoothness getSmoothness () {
        return SMOOTHNESS_EFLAG_VALUES [(eFlags & SMOOTHNESS_EFLAG)>>> SMOOTHNESS_EFLAG_OFFSET];
    }

    public void setSmoothness (Smoothness newSmoothness) {
        Smoothness oldSmoothness = SMOOTHNESS_EFLAG_VALUES [(eFlags & SMOOTHNESS_EFLAG)>>> SMOOTHNESS_EFLAG_OFFSET];
        if (newSmoothness == null) newSmoothness = SMOOTHNESS_EDEFAULT;

        eFlags = eFlags & ~ SMOOTHNESS_EFLAG | Smoothness.VALUES.indexOf (newSmoothness) << SMOOTHNESS_EFLAG_OFFSET;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.CONNECTOR_STYLE__SMOOTHNESS, oldSmoothness, newSmoothness));

    }

    public boolean isAvoidObstructions () {
        return (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
    }

    public void setAvoidObstructions (boolean newAvoidObstructions) {
        boolean oldAvoidObstructions = (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
        if (newAvoidObstructions) eFlags |= AVOID_OBSTRUCTIONS_EFLAG;
        else eFlags &= ~ AVOID_OBSTRUCTIONS_EFLAG;

        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS, oldAvoidObstructions, newAvoidObstructions));

    }

    public boolean isClosestDistance () {
        return (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
    }

    public void setClosestDistance (boolean newClosestDistance) {
        boolean oldClosestDistance = (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
        if (newClosestDistance) eFlags |= CLOSEST_DISTANCE_EFLAG;
        else eFlags &= ~ CLOSEST_DISTANCE_EFLAG;

        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE, oldClosestDistance, newClosestDistance));

    }

    public JumpLinkStatus getJumpLinkStatus () {
        return JUMP_LINK_STATUS_EFLAG_VALUES [(eFlags & JUMP_LINK_STATUS_EFLAG)>>> JUMP_LINK_STATUS_EFLAG_OFFSET];
    }

    public void setJumpLinkStatus (JumpLinkStatus newJumpLinkStatus) {
        JumpLinkStatus oldJumpLinkStatus = JUMP_LINK_STATUS_EFLAG_VALUES [(eFlags & JUMP_LINK_STATUS_EFLAG)>>> JUMP_LINK_STATUS_EFLAG_OFFSET];
        if (newJumpLinkStatus == null) newJumpLinkStatus = JUMP_LINK_STATUS_EDEFAULT;

        eFlags = eFlags & ~ JUMP_LINK_STATUS_EFLAG | JumpLinkStatus.VALUES.indexOf (newJumpLinkStatus) << JUMP_LINK_STATUS_EFLAG_OFFSET;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS, oldJumpLinkStatus, newJumpLinkStatus));

    }

    public JumpLinkType getJumpLinkType () {
        return JUMP_LINK_TYPE_EFLAG_VALUES [(eFlags & JUMP_LINK_TYPE_EFLAG)>>> JUMP_LINK_TYPE_EFLAG_OFFSET];
    }

    public void setJumpLinkType (JumpLinkType newJumpLinkType) {
        JumpLinkType oldJumpLinkType = JUMP_LINK_TYPE_EFLAG_VALUES [(eFlags & JUMP_LINK_TYPE_EFLAG)>>> JUMP_LINK_TYPE_EFLAG_OFFSET];
        if (newJumpLinkType == null) newJumpLinkType = JUMP_LINK_TYPE_EDEFAULT;

        eFlags = eFlags & ~ JUMP_LINK_TYPE_EFLAG | JumpLinkType.VALUES.indexOf (newJumpLinkType) << JUMP_LINK_TYPE_EFLAG_OFFSET;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE, oldJumpLinkType, newJumpLinkType));

    }

    public boolean isJumpLinksReverse () {
        return (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
    }

    public void setJumpLinksReverse (boolean newJumpLinksReverse) {
        boolean oldJumpLinksReverse = (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
        if (newJumpLinksReverse) eFlags |= JUMP_LINKS_REVERSE_EFLAG;
        else eFlags &= ~ JUMP_LINKS_REVERSE_EFLAG;

        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE, oldJumpLinksReverse, newJumpLinksReverse));

    }

    public int getLineColor () {
        return lineColor;
    }

    public void setLineColor (int newLineColor) {
        int oldLineColor = lineColor;
        lineColor = newLineColor;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.CONNECTOR_STYLE__LINE_COLOR, oldLineColor, lineColor));

    }

    public int getLineWidth () {
        return lineWidth;
    }

    public void setLineWidth (int newLineWidth) {
        int oldLineWidth = lineWidth;
        lineWidth = newLineWidth;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.CONNECTOR_STYLE__LINE_WIDTH, oldLineWidth, lineWidth));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.CONNECTOR_STYLE__ROUTING :
                return getRouting ();
            case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS :
                return getSmoothness ();
            case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS :
                return isAvoidObstructions () ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE :
                return isClosestDistance () ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS :
                return getJumpLinkStatus ();
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE :
                return getJumpLinkType ();
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE :
                return isJumpLinksReverse () ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.CONNECTOR_STYLE__LINE_COLOR :
                return new Integer (getLineColor ());
            case NotationPackage.CONNECTOR_STYLE__LINE_WIDTH :
                return new Integer (getLineWidth ());
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.CONNECTOR_STYLE__ROUTING :
                setRouting ((Routing) newValue);
                return;
            case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS :
                setSmoothness ((Smoothness) newValue);
                return;
            case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS :
                setAvoidObstructions (((Boolean) newValue).booleanValue ());
                return;
            case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE :
                setClosestDistance (((Boolean) newValue).booleanValue ());
                return;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS :
                setJumpLinkStatus ((JumpLinkStatus) newValue);
                return;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE :
                setJumpLinkType ((JumpLinkType) newValue);
                return;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE :
                setJumpLinksReverse (((Boolean) newValue).booleanValue ());
                return;
            case NotationPackage.CONNECTOR_STYLE__LINE_COLOR :
                setLineColor (((Integer) newValue).intValue ());
                return;
            case NotationPackage.CONNECTOR_STYLE__LINE_WIDTH :
                setLineWidth (((Integer) newValue).intValue ());
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.CONNECTOR_STYLE__ROUTING :
                setRouting (ROUTING_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS :
                setSmoothness (SMOOTHNESS_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS :
                setAvoidObstructions (AVOID_OBSTRUCTIONS_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE :
                setClosestDistance (CLOSEST_DISTANCE_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS :
                setJumpLinkStatus (JUMP_LINK_STATUS_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE :
                setJumpLinkType (JUMP_LINK_TYPE_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE :
                setJumpLinksReverse (JUMP_LINKS_REVERSE_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__LINE_COLOR :
                setLineColor (LINE_COLOR_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__LINE_WIDTH :
                setLineWidth (LINE_WIDTH_EDEFAULT);
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.CONNECTOR_STYLE__ROUTING :
                return (eFlags & ROUTING_EFLAG) != ROUTING_EFLAG_DEFAULT;
            case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS :
                return (eFlags & SMOOTHNESS_EFLAG) != SMOOTHNESS_EFLAG_DEFAULT;
            case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS :
                return ((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0) != AVOID_OBSTRUCTIONS_EDEFAULT;
            case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE :
                return ((eFlags & CLOSEST_DISTANCE_EFLAG) != 0) != CLOSEST_DISTANCE_EDEFAULT;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS :
                return (eFlags & JUMP_LINK_STATUS_EFLAG) != JUMP_LINK_STATUS_EFLAG_DEFAULT;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE :
                return (eFlags & JUMP_LINK_TYPE_EFLAG) != JUMP_LINK_TYPE_EFLAG_DEFAULT;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE :
                return ((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0) != JUMP_LINKS_REVERSE_EDEFAULT;
            case NotationPackage.CONNECTOR_STYLE__LINE_COLOR :
                return lineColor != LINE_COLOR_EDEFAULT;
            case NotationPackage.CONNECTOR_STYLE__LINE_WIDTH :
                return lineWidth != LINE_WIDTH_EDEFAULT;
        }
        return eDynamicIsSet (featureID);
    }

    public int eBaseStructuralFeatureID (int derivedFeatureID, Class baseClass) {
        if (baseClass == Style.class) {
            switch (derivedFeatureID) {
                default :
                    return - 1;
            }
        }
        if (baseClass == RoutingStyle.class) {
            switch (derivedFeatureID) {
                case NotationPackage.CONNECTOR_STYLE__ROUTING :
                    return NotationPackage.ROUTING_STYLE__ROUTING;
                case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS :
                    return NotationPackage.ROUTING_STYLE__SMOOTHNESS;
                case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS :
                    return NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS;
                case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE :
                    return NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE;
                case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS :
                    return NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS;
                case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE :
                    return NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE;
                case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE :
                    return NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE;
                default :
                    return - 1;
            }
        }
        if (baseClass == LineStyle.class) {
            switch (derivedFeatureID) {
                case NotationPackage.CONNECTOR_STYLE__LINE_COLOR :
                    return NotationPackage.LINE_STYLE__LINE_COLOR;
                case NotationPackage.CONNECTOR_STYLE__LINE_WIDTH :
                    return NotationPackage.LINE_STYLE__LINE_WIDTH;
                default :
                    return - 1;
            }
        }
        return super.eBaseStructuralFeatureID (derivedFeatureID, baseClass);
    }

    public int eDerivedStructuralFeatureID (int baseFeatureID, Class baseClass) {
        if (baseClass == Style.class) {
            switch (baseFeatureID) {
                default :
                    return - 1;
            }
        }
        if (baseClass == RoutingStyle.class) {
            switch (baseFeatureID) {
                case NotationPackage.ROUTING_STYLE__ROUTING :
                    return NotationPackage.CONNECTOR_STYLE__ROUTING;
                case NotationPackage.ROUTING_STYLE__SMOOTHNESS :
                    return NotationPackage.CONNECTOR_STYLE__SMOOTHNESS;
                case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS :
                    return NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS;
                case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE :
                    return NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE;
                case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS :
                    return NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS;
                case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE :
                    return NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE;
                case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE :
                    return NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE;
                default :
                    return - 1;
            }
        }
        if (baseClass == LineStyle.class) {
            switch (baseFeatureID) {
                case NotationPackage.LINE_STYLE__LINE_COLOR :
                    return NotationPackage.CONNECTOR_STYLE__LINE_COLOR;
                case NotationPackage.LINE_STYLE__LINE_WIDTH :
                    return NotationPackage.CONNECTOR_STYLE__LINE_WIDTH;
                default :
                    return - 1;
            }
        }
        return super.eDerivedStructuralFeatureID (baseFeatureID, baseClass);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (routing: ");
        result.append (ROUTING_EFLAG_VALUES [(eFlags & ROUTING_EFLAG)>>> ROUTING_EFLAG_OFFSET]);
        result.append (", smoothness: ");
        result.append (SMOOTHNESS_EFLAG_VALUES [(eFlags & SMOOTHNESS_EFLAG)>>> SMOOTHNESS_EFLAG_OFFSET]);
        result.append (", avoidObstructions: ");
        result.append ((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0);
        result.append (", closestDistance: ");
        result.append ((eFlags & CLOSEST_DISTANCE_EFLAG) != 0);
        result.append (", jumpLinkStatus: ");
        result.append (JUMP_LINK_STATUS_EFLAG_VALUES [(eFlags & JUMP_LINK_STATUS_EFLAG)>>> JUMP_LINK_STATUS_EFLAG_OFFSET]);
        result.append (", jumpLinkType: ");
        result.append (JUMP_LINK_TYPE_EFLAG_VALUES [(eFlags & JUMP_LINK_TYPE_EFLAG)>>> JUMP_LINK_TYPE_EFLAG_OFFSET]);
        result.append (", jumpLinksReverse: ");
        result.append ((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0);
        result.append (", lineColor: ");
        result.append (lineColor);
        result.append (", lineWidth: ");
        result.append (lineWidth);
        result.append (')');
        return result.toString ();
    }

}

