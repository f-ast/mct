package org.eclipse.gmf.runtime.diagram.ui.view.factories;

import java.util.HashMap;

import java.util.Map;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.core.runtime.Status;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.transaction.Transaction;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.emf.workspace.AbstractEMFOperation;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;

import org.eclipse.gmf.runtime.notation.LayoutConstraint;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.NotationFactory;

import org.eclipse.gmf.runtime.notation.View;

public class BasicNodeViewFactory extends AbstractViewFactory {

    public View createView (final IAdaptable semanticAdapter, final View containerView, final String semanticHint, final int index, boolean persisted, final PreferencesHint preferencesHint) {
        setPreferencesHint (preferencesHint);
        final Node node = createNode ();
        node.getStyles ().addAll (createStyles (node));
        node.setLayoutConstraint (createLayoutConstraint ());
        EObject semanticEl = semanticAdapter == null ? null : (EObject) semanticAdapter.getAdapter (EObject.class);
        if (semanticEl == null) node.setElement (null);
        else if (requiresElement (semanticAdapter, containerView)) {
            node.setElement (semanticEl);
        }

        node.setType (semanticHint);
        ViewUtil.insertChildView (containerView, node, index, persisted);
        Map options = new HashMap ();
        options.put (Transaction.OPTION_UNPROTECTED, Boolean.TRUE);
        options.put (Transaction.OPTION_NO_NOTIFICATIONS, Boolean.TRUE);
        options.put (Transaction.OPTION_NO_TRIGGERS, Boolean.TRUE);
        TransactionalEditingDomain domain = getEditingDomain (semanticEl, containerView);
        if (domain != null) {
            AbstractEMFOperation operation = new AbstractEMFOperation (domain, StringStatics.BLANK, options) {

                protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
                    decorateView (containerView, node, semanticAdapter, semanticHint, index, true);
                    return Status.OK_STATUS;
                }

            }

            ;
            try {
                operation.execute (new NullProgressMonitor (), null);
            } catch (ExecutionException e) {
                Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "createView", e);
                Log.warning (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "createView", e);
            }
        }
        return node;
    }

    protected TransactionalEditingDomain getEditingDomain (EObject semanticElement, View containerView) {
        TransactionalEditingDomain result = null;
        if (semanticElement != null) {
            result = TransactionUtil.getEditingDomain (semanticElement);
        }
        if (result == null) {
            result = TransactionUtil.getEditingDomain (containerView);
        }
        return result;
    }

    protected void decorateView (View containerView, View view, IAdaptable semanticAdapter, String semanticHint, int index, boolean persisted) {
        initializeFromPreferences (view);
    }

    protected LayoutConstraint createLayoutConstraint () {
        return null;
    }

    protected Node createNode () {
        return NotationFactory.eINSTANCE.createNode ();
    }

}

