package org.eclipse.gmf.runtime.emf.core;

import java.util.Collection;

import java.util.HashMap;

import java.util.Map;

import org.eclipse.core.commands.operations.IOperationHistory;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Status;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.transaction.Transaction;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.impl.InternalTransactionalEditingDomain;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.emf.workspace.WorkspaceEditingDomainFactory;

import org.eclipse.emf.workspace.util.WorkspaceValidateEditSupport;

import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator;

import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator.ISyncExecHelper;

import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator.SyncExecHelper;

import org.eclipse.gmf.runtime.emf.core.internal.resources.PathmapManager;

import org.eclipse.gmf.runtime.emf.core.util.CrossReferenceAdapter;

public class GMFEditingDomainFactory extends WorkspaceEditingDomainFactory {
    static public TransactionalSyncExecHelper transactionalSyncExecHelper = new TransactionalSyncExecHelper ();

    static {
        SyncExecHelper.setInstance (transactionalSyncExecHelper);
    }

    private static GMFEditingDomainFactory instance = new GMFEditingDomainFactory ();

    public static WorkspaceEditingDomainFactory getInstance () {
        return instance;
    }

    public TransactionalEditingDomain createEditingDomain () {
        TransactionalEditingDomain result = super.createEditingDomain ();
        configure (result);
        return result;
    }

    public TransactionalEditingDomain createEditingDomain (IOperationHistory history) {
        TransactionalEditingDomain result = super.createEditingDomain (history);
        configure (result);
        return result;
    }

    public TransactionalEditingDomain createEditingDomain (ResourceSet rset, IOperationHistory history) {
        TransactionalEditingDomain result = super.createEditingDomain (rset, history);
        configure (result);
        return result;
    }

    public TransactionalEditingDomain createEditingDomain (ResourceSet rset) {
        TransactionalEditingDomain result = super.createEditingDomain (rset);
        configure (result);
        return result;
    }

    protected void configure (final TransactionalEditingDomain domain) {
        ResourceSet rset = domain.getResourceSet ();
        if (CrossReferenceAdapter.getExistingCrossReferenceAdapter (rset) == null) {
            rset.eAdapters ().add (new CrossReferenceAdapter ());
        }
        if (PathmapManager.getExistingPathmapManager (rset) == null) {
            rset.eAdapters ().add (new PathmapManager ());
        }
        TransactionalEditingDomain.DefaultOptions options = (TransactionalEditingDomain.DefaultOptions) (TransactionUtil.getAdapter (domain, TransactionalEditingDomain.DefaultOptions.class));
        Map < Object, Object > aMap = new HashMap < Object, Object > ();
        aMap.put (Transaction.OPTION_VALIDATE_EDIT, new WorkspaceValidateEditSupport () {

            @SuppressWarnings("unchecked")
            protected IStatus doValidateEdit (Transaction transaction, Collection resources, Object context) {
                return GMFEditingDomainFactory.transactionalSyncExecHelper.approveFileModification (getFiles (resources), domain);
            }

        }

        );
        options.setDefaultTransactionOptions (aMap);
    }

    public static class TransactionalSyncExecHelper implements ISyncExecHelper {
        private final ThreadLocal < TransactionalEditingDomain > domain = new ThreadLocal < TransactionalEditingDomain > ();

        private void setDomain (TransactionalEditingDomain domain) {
            this.domain.set (domain);
        }

        public IStatus approveFileModification (IFile [] files, TransactionalEditingDomain transactionalDomain) {
            setDomain (transactionalDomain);
            IStatus status = Status.OK_STATUS;
            try {
                status = FileModificationValidator.approveFileModification (files);
            } finally {
                setDomain (null);
            }
            return status;
        }

        public Runnable safeRunnable (Runnable runnable) {
            if (isTransactionOnCurrentThread ()) {
                return domain.get ().createPrivilegedRunnable (runnable);
            }
            return null;
        }

        private boolean isTransactionOnCurrentThread () {
            if (domain.get () != null) {
                Transaction tx = ((InternalTransactionalEditingDomain) domain.get ()).getActiveTransaction ();
                return ((tx != null) && (tx.getOwner () == Thread.currentThread ()));
            }
            return false;
        }

    }

}

