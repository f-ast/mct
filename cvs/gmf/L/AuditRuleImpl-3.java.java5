package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.mappings.AuditContainer;

import org.eclipse.gmf.mappings.AuditRule;

import org.eclipse.gmf.mappings.Constraint;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.RuleTarget;

import org.eclipse.gmf.mappings.Severity;

public class AuditRuleImpl extends EObjectImpl implements AuditRule {
    protected RuleTarget target = null;
    protected static final String ID_EDEFAULT = null;
    protected String id = ID_EDEFAULT;
    protected Constraint rule = null;
    protected static final String NAME_EDEFAULT = null;
    protected String name = NAME_EDEFAULT;
    protected static final Severity SEVERITY_EDEFAULT = Severity.ERROR_LITERAL;
    protected Severity severity = SEVERITY_EDEFAULT;
    protected static final boolean USE_IN_LIVE_MODE_EDEFAULT = false;
    protected boolean useInLiveMode = USE_IN_LIVE_MODE_EDEFAULT;
    protected static final String MESSAGE_EDEFAULT = null;
    protected String message = MESSAGE_EDEFAULT;
    protected static final String DESCRIPTION_EDEFAULT = null;
    protected String description = DESCRIPTION_EDEFAULT;

    protected AuditRuleImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getAuditRule ();
    }

    public String getId () {
        return id;
    }

    public void setId (String newId) {
        String oldId = id;
        id = newId;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_RULE__ID, oldId, id));

    }

    public Constraint getRule () {
        return rule;
    }

    public NotificationChain basicSetRule (Constraint newRule, NotificationChain msgs) {
        Constraint oldRule = rule;
        rule = newRule;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_RULE__RULE, oldRule, newRule);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setRule (Constraint newRule) {
        if (newRule != rule) {
            NotificationChain msgs = null;
            if (rule != null) msgs = ((InternalEObject) rule).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.AUDIT_RULE__RULE, null, msgs);

            if (newRule != null) msgs = ((InternalEObject) newRule).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.AUDIT_RULE__RULE, null, msgs);

            msgs = basicSetRule (newRule, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_RULE__RULE, newRule, newRule));

    }

    public RuleTarget getTarget () {
        return target;
    }

    public NotificationChain basicSetTarget (RuleTarget newTarget, NotificationChain msgs) {
        RuleTarget oldTarget = target;
        target = newTarget;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_RULE__TARGET, oldTarget, newTarget);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setTarget (RuleTarget newTarget) {
        if (newTarget != target) {
            NotificationChain msgs = null;
            if (target != null) msgs = ((InternalEObject) target).eInverseRemove (this, GMFMapPackage.RULE_TARGET__RULE, RuleTarget.class, msgs);

            if (newTarget != null) msgs = ((InternalEObject) newTarget).eInverseAdd (this, GMFMapPackage.RULE_TARGET__RULE, RuleTarget.class, msgs);

            msgs = basicSetTarget (newTarget, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_RULE__TARGET, newTarget, newTarget));

    }

    public String getName () {
        return name;
    }

    public void setName (String newName) {
        String oldName = name;
        name = newName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_RULE__NAME, oldName, name));

    }

    public Severity getSeverity () {
        return severity;
    }

    public void setSeverity (Severity newSeverity) {
        Severity oldSeverity = severity;
        severity = newSeverity == null ? SEVERITY_EDEFAULT : newSeverity;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_RULE__SEVERITY, oldSeverity, severity));

    }

    public boolean isUseInLiveMode () {
        return useInLiveMode;
    }

    public void setUseInLiveMode (boolean newUseInLiveMode) {
        boolean oldUseInLiveMode = useInLiveMode;
        useInLiveMode = newUseInLiveMode;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_RULE__USE_IN_LIVE_MODE, oldUseInLiveMode, useInLiveMode));

    }

    public String getMessage () {
        return message;
    }

    public void setMessage (String newMessage) {
        String oldMessage = message;
        message = newMessage;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_RULE__MESSAGE, oldMessage, message));

    }

    public String getDescription () {
        return description;
    }

    public void setDescription (String newDescription) {
        String oldDescription = description;
        description = newDescription;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_RULE__DESCRIPTION, oldDescription, description));

    }

    public AuditContainer getContainer () {
        if (eContainerFeatureID != GMFMapPackage.AUDIT_RULE__CONTAINER) return null;

        return (AuditContainer) eContainer ();
    }

    public void setContainer (AuditContainer newContainer) {
        if (newContainer != eInternalContainer () || (eContainerFeatureID != GMFMapPackage.AUDIT_RULE__CONTAINER && newContainer != null)) {
            if (EcoreUtil.isAncestor (this, newContainer)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newContainer != null) msgs = ((InternalEObject) newContainer).eInverseAdd (this, GMFMapPackage.AUDIT_CONTAINER__AUDITS, AuditContainer.class, msgs);

            msgs = eBasicSetContainer ((InternalEObject) newContainer, GMFMapPackage.AUDIT_RULE__CONTAINER, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_RULE__CONTAINER, newContainer, newContainer));

    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFMapPackage.AUDIT_RULE__TARGET :
                if (target != null) msgs = ((InternalEObject) target).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.AUDIT_RULE__TARGET, null, msgs);

                return basicSetTarget ((RuleTarget) otherEnd, msgs);
            case GMFMapPackage.AUDIT_RULE__CONTAINER :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFMapPackage.AUDIT_RULE__CONTAINER, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFMapPackage.AUDIT_RULE__TARGET :
                return basicSetTarget (null, msgs);
            case GMFMapPackage.AUDIT_RULE__RULE :
                return basicSetRule (null, msgs);
            case GMFMapPackage.AUDIT_RULE__CONTAINER :
                return eBasicSetContainer (null, GMFMapPackage.AUDIT_RULE__CONTAINER, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFMapPackage.AUDIT_RULE__CONTAINER :
                return eInternalContainer ().eInverseRemove (this, GMFMapPackage.AUDIT_CONTAINER__AUDITS, AuditContainer.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFMapPackage.AUDIT_RULE__TARGET :
                return getTarget ();
            case GMFMapPackage.AUDIT_RULE__ID :
                return getId ();
            case GMFMapPackage.AUDIT_RULE__RULE :
                return getRule ();
            case GMFMapPackage.AUDIT_RULE__NAME :
                return getName ();
            case GMFMapPackage.AUDIT_RULE__SEVERITY :
                return getSeverity ();
            case GMFMapPackage.AUDIT_RULE__USE_IN_LIVE_MODE :
                return isUseInLiveMode () ? Boolean.TRUE : Boolean.FALSE;
            case GMFMapPackage.AUDIT_RULE__MESSAGE :
                return getMessage ();
            case GMFMapPackage.AUDIT_RULE__DESCRIPTION :
                return getDescription ();
            case GMFMapPackage.AUDIT_RULE__CONTAINER :
                return getContainer ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFMapPackage.AUDIT_RULE__TARGET :
                setTarget ((RuleTarget) newValue);
                return;
            case GMFMapPackage.AUDIT_RULE__ID :
                setId ((String) newValue);
                return;
            case GMFMapPackage.AUDIT_RULE__RULE :
                setRule ((Constraint) newValue);
                return;
            case GMFMapPackage.AUDIT_RULE__NAME :
                setName ((String) newValue);
                return;
            case GMFMapPackage.AUDIT_RULE__SEVERITY :
                setSeverity ((Severity) newValue);
                return;
            case GMFMapPackage.AUDIT_RULE__USE_IN_LIVE_MODE :
                setUseInLiveMode (((Boolean) newValue).booleanValue ());
                return;
            case GMFMapPackage.AUDIT_RULE__MESSAGE :
                setMessage ((String) newValue);
                return;
            case GMFMapPackage.AUDIT_RULE__DESCRIPTION :
                setDescription ((String) newValue);
                return;
            case GMFMapPackage.AUDIT_RULE__CONTAINER :
                setContainer ((AuditContainer) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFMapPackage.AUDIT_RULE__TARGET :
                setTarget ((RuleTarget) null);
                return;
            case GMFMapPackage.AUDIT_RULE__ID :
                setId (ID_EDEFAULT);
                return;
            case GMFMapPackage.AUDIT_RULE__RULE :
                setRule ((Constraint) null);
                return;
            case GMFMapPackage.AUDIT_RULE__NAME :
                setName (NAME_EDEFAULT);
                return;
            case GMFMapPackage.AUDIT_RULE__SEVERITY :
                setSeverity (SEVERITY_EDEFAULT);
                return;
            case GMFMapPackage.AUDIT_RULE__USE_IN_LIVE_MODE :
                setUseInLiveMode (USE_IN_LIVE_MODE_EDEFAULT);
                return;
            case GMFMapPackage.AUDIT_RULE__MESSAGE :
                setMessage (MESSAGE_EDEFAULT);
                return;
            case GMFMapPackage.AUDIT_RULE__DESCRIPTION :
                setDescription (DESCRIPTION_EDEFAULT);
                return;
            case GMFMapPackage.AUDIT_RULE__CONTAINER :
                setContainer ((AuditContainer) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFMapPackage.AUDIT_RULE__TARGET :
                return target != null;
            case GMFMapPackage.AUDIT_RULE__ID :
                return ID_EDEFAULT == null ? id != null : ! ID_EDEFAULT.equals (id);
            case GMFMapPackage.AUDIT_RULE__RULE :
                return rule != null;
            case GMFMapPackage.AUDIT_RULE__NAME :
                return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT.equals (name);
            case GMFMapPackage.AUDIT_RULE__SEVERITY :
                return severity != SEVERITY_EDEFAULT;
            case GMFMapPackage.AUDIT_RULE__USE_IN_LIVE_MODE :
                return useInLiveMode != USE_IN_LIVE_MODE_EDEFAULT;
            case GMFMapPackage.AUDIT_RULE__MESSAGE :
                return MESSAGE_EDEFAULT == null ? message != null : ! MESSAGE_EDEFAULT.equals (message);
            case GMFMapPackage.AUDIT_RULE__DESCRIPTION :
                return DESCRIPTION_EDEFAULT == null ? description != null : ! DESCRIPTION_EDEFAULT.equals (description);
            case GMFMapPackage.AUDIT_RULE__CONTAINER :
                return getContainer () != null;
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (id: ");
        result.append (id);
        result.append (", name: ");
        result.append (name);
        result.append (", severity: ");
        result.append (severity);
        result.append (", useInLiveMode: ");
        result.append (useInLiveMode);
        result.append (", message: ");
        result.append (message);
        result.append (", description: ");
        result.append (description);
        result.append (')');
        return result.toString ();
    }

}

