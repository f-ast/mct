package org.eclipse.gmf.graphdef.editor.edit.parts;

import java.util.ArrayList;

import java.util.Collection;

import org.eclipse.draw2d.FreeformLayout;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.RoundedRectangle;

import org.eclipse.draw2d.StackLayout;

import org.eclipse.draw2d.XYLayout;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.emf.common.notify.Adapter;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.editpolicies.LayoutEditPolicy;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.Shape;

import org.eclipse.gmf.graphdef.editor.edit.policies.RoundedRectangle2CanonicalEditPolicy;

import org.eclipse.gmf.graphdef.editor.edit.policies.RoundedRectangle2ItemSemanticEditPolicy;

import org.eclipse.gmf.graphdef.editor.edit.polocies.DomainBasedXYLayoutEditPolicy;

import org.eclipse.gmf.graphdef.editor.sheet.AttachAdapter;

import org.eclipse.gmf.graphdef.editor.sheet.ChangeTracker;

import org.eclipse.gmf.graphdef.editor.sheet.FeatureTracker;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;

import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public class RoundedRectangle2EditPart extends AbstractFigureEditPart {
    public static final int VISUAL_ID = 3016;
    protected IFigure contentPane;
    protected IFigure primaryShape;

    public RoundedRectangle2EditPart (View view) {
        super (view);
    }

    protected void createDefaultEditPolicies () {
        installEditPolicy (EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy ());
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicyRoles.SEMANTIC_ROLE, new RoundedRectangle2ItemSemanticEditPolicy ());
        installEditPolicy (EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy ());
        installEditPolicy (EditPolicyRoles.CANONICAL_ROLE, new RoundedRectangle2CanonicalEditPolicy ());
        installEditPolicy (EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy ());
    }

    protected LayoutEditPolicy createLayoutEditPolicy () {
        return new DomainBasedXYLayoutEditPolicy (getMapMode ());
    }

    protected IFigure createNodeShape () {
        RoundedRectangleFigure figure = new RoundedRectangleFigure ();
        figure.setUseLocalCoordinates (true);
        return primaryShape = figure;
    }

    public RoundedRectangleFigure getPrimaryShape () {
        return (RoundedRectangleFigure) primaryShape;
    }

    protected NodeFigure createNodePlate () {
        DefaultSizeNodeFigure result = new DefaultSizeNodeFigure (getMapMode ().DPtoLP (0), getMapMode ().DPtoLP (0));
        result.setMinimumSize (new Dimension (0, 0));
        return result;
    }

    protected NodeFigure createNodeFigure () {
        NodeFigure figure = createNodePlate ();
        figure.setLayoutManager (new StackLayout ());
        IFigure shape = createNodeShape ();
        figure.add (shape);
        contentPane = setupContentPane (shape);
        return figure;
    }

    protected IFigure setupContentPane (IFigure nodeShape) {
        if (nodeShape.getLayoutManager () == null) {
            nodeShape.setLayoutManager (new FreeformLayout () {

                public Object getConstraint (IFigure figure) {
                    Object result = constraints.get (figure);
                    if (result == null) {
                        result = new Rectangle (0, 0, - 1, - 1);
                    }
                    return result;
                }

            }

            );
        }
        return nodeShape;
    }

    public IFigure getContentPane () {
        if (contentPane != null) {
            return contentPane;
        }
        return super.getContentPane ();
    }

    protected void handleNotificationEvent (Notification notification) {
        Object feature = notification.getFeature ();
        if (NotationPackage.eINSTANCE.getFillStyle_FillColor ().equals (feature)) {
            return;
        } else if (NotationPackage.eINSTANCE.getLineStyle_LineColor ().equals (feature)) {
            return;
        }

        super.handleNotificationEvent (notification);
    }

    public class RoundedRectangleFigure extends RoundedRectangle {

        public RoundedRectangleFigure () {
            this.setLayoutManager (new XYLayout ());
            this.setCornerDimensions (new Dimension (getMapMode ().DPtoLP (8), getMapMode ().DPtoLP (8)));
        }

        private boolean myUseLocalCoordinates = false;

        protected boolean useLocalCoordinates () {
            return myUseLocalCoordinates;
        }

        protected void setUseLocalCoordinates (boolean useLocalCoordinates) {
            myUseLocalCoordinates = useLocalCoordinates;
        }

    }

    private Collection < Adapter > myDomainElementAdapters = new ArrayList < Adapter > ();

    private org.eclipse.gmf.gmfgraph.RoundedRectangle getModelFigureElement () {
        Shape shape = getShape ();
        if (shape instanceof org.eclipse.gmf.gmfgraph.RoundedRectangle) {
            org.eclipse.gmf.gmfgraph.RoundedRectangle modelFigureElement = (org.eclipse.gmf.gmfgraph.RoundedRectangle) shape;
            return modelFigureElement;
        }
        return null;
    }

    protected void removeSemanticListeners () {
        org.eclipse.gmf.gmfgraph.RoundedRectangle modelElement = (org.eclipse.gmf.gmfgraph.RoundedRectangle) getModelFigureElement ();
        if (modelElement != null) {
            modelElement.eAdapters ().removeAll (myDomainElementAdapters);
            myDomainElementAdapters.clear ();
        }
        super.removeSemanticListeners ();
    }

    protected void setFigure (IFigure figure) {
        super.setFigure (figure);
        org.eclipse.gmf.gmfgraph.RoundedRectangle modelElement = (org.eclipse.gmf.gmfgraph.RoundedRectangle) getModelFigureElement ();
        if (modelElement != null) {
            getPrimaryShape ().setOutline (modelElement.isOutline ());
            getPrimaryShape ().setFill (modelElement.isFill ());
            getPrimaryShape ().setLineWidth (modelElement.getLineWidth ());
            getPrimaryShape ().setLineStyle (getLineStyle (modelElement.getLineKind ()));
            getPrimaryShape ().setFillXOR (modelElement.isXorFill ());
            getPrimaryShape ().setOutlineXOR (modelElement.isXorOutline ());
            getPrimaryShape ().setCornerDimensions (getCornerDimensions (modelElement.getCornerWidth (), modelElement.getCornerHeight ()));
            getPrimaryShape ().setLayoutManager (getLayoutManager (modelElement.getLayout ()));
            refreshLayoutManager ();
            getPrimaryShape ().setBackgroundColor (getColor (modelElement.getBackgroundColor ()));
            getPrimaryShape ().setForegroundColor (getColor (modelElement.getForegroundColor ()));
            refreshFont ();
        }
    }

    public void activate () {
        if (isActive ()) {
            return;
        }
        final org.eclipse.gmf.gmfgraph.RoundedRectangle modelElement = (org.eclipse.gmf.gmfgraph.RoundedRectangle) getModelFigureElement ();
        if (modelElement == null) {
            super.activate ();
            return;
        }
        ChangeTracker outlineTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                getPrimaryShape ().setOutline (modelElement.isOutline ());
            }

        }

        ;
        myDomainElementAdapters.add (new FeatureTracker (outlineTracker, GMFGraphPackage.eINSTANCE.getShape_Outline ()));
        ChangeTracker fillTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                getPrimaryShape ().setFill (modelElement.isFill ());
            }

        }

        ;
        myDomainElementAdapters.add (new FeatureTracker (fillTracker, GMFGraphPackage.eINSTANCE.getShape_Fill ()));
        ChangeTracker lineWidthTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                getPrimaryShape ().setLineWidth (modelElement.getLineWidth ());
            }

        }

        ;
        myDomainElementAdapters.add (new FeatureTracker (lineWidthTracker, GMFGraphPackage.eINSTANCE.getShape_LineWidth ()));
        ChangeTracker lineStyleTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                getPrimaryShape ().setLineStyle (getLineStyle (modelElement.getLineKind ()));
            }

        }

        ;
        myDomainElementAdapters.add (new FeatureTracker (lineStyleTracker, GMFGraphPackage.eINSTANCE.getShape_LineKind ()));
        ChangeTracker fillXORTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                getPrimaryShape ().setFillXOR (modelElement.isXorFill ());
            }

        }

        ;
        myDomainElementAdapters.add (new FeatureTracker (fillXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorFill ()));
        ChangeTracker outlineXORTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                getPrimaryShape ().setOutlineXOR (modelElement.isXorOutline ());
            }

        }

        ;
        myDomainElementAdapters.add (new FeatureTracker (outlineXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorOutline ()));
        ChangeTracker cornerDimensionsTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                getPrimaryShape ().setCornerDimensions (getCornerDimensions (modelElement.getCornerWidth (), modelElement.getCornerHeight ()));
            }

        }

        ;
        myDomainElementAdapters.add (new FeatureTracker (cornerDimensionsTracker, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerWidth ()));
        myDomainElementAdapters.add (new FeatureTracker (cornerDimensionsTracker, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerHeight ()));
        ChangeTracker layoutManagerTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                getPrimaryShape ().setLayoutManager (getLayoutManager (modelElement.getLayout ()));
                refreshLayoutManager ();
            }

        }

        ;
        myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getLayoutable_Layout (), layoutManagerTracker, new AttachAdapter (GMFGraphPackage.eINSTANCE.getBorderLayout_Spacing (), layoutManagerTracker, new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy ())), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_Vertical ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MatchMinorSize ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_ForceSingleLine ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorAlignment ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorAlignment ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorSpacing ()), new
          FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorSpacing ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_NumColumns ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_EqualWidth ()), new AttachAdapter (GMFGraphPackage.eINSTANCE.getGridLayout_Margins (), layoutManagerTracker, new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy ())), new AttachAdapter (GMFGraphPackage.eINSTANCE.getGridLayout_Spacing (), layoutManagerTracker, new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy ()))));
        ChangeTracker backgroundColorTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                getPrimaryShape ().setBackgroundColor (getColor (modelElement.getBackgroundColor ()));
            }

        }

        ;
        myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor (), backgroundColorTracker, new FeatureTracker (backgroundColorTracker, GMFGraphPackage.eINSTANCE.getConstantColor_Value ()), new FeatureTracker (backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red ()), new FeatureTracker (backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green ()), new FeatureTracker (backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue ())));
        ChangeTracker foregroundColorTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                getPrimaryShape ().setForegroundColor (getColor (modelElement.getForegroundColor ()));
            }

        }

        ;
        myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor (), foregroundColorTracker, new FeatureTracker (foregroundColorTracker, GMFGraphPackage.eINSTANCE.getConstantColor_Value ()), new FeatureTracker (foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red ()), new FeatureTracker (foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green ()), new FeatureTracker (foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue ())));
        ChangeTracker refreshFontTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                refreshFont ();
            }

        }

        ;
        myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getFigure_Font (), refreshFontTracker, new FeatureTracker (refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_FaceName ()), new FeatureTracker (refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Height ()), new FeatureTracker (refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Style ())));
        modelElement.eAdapters ().addAll (myDomainElementAdapters);
        super.activate ();
    }

}

