package org.eclipse.gmf.mappings.provider;

import java.util.Collection;

import java.util.Collections;

import java.util.HashSet;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.mappings.ChildNodeMapping;

import org.eclipse.gmf.mappings.CompartmentMapping;

import org.eclipse.gmf.mappings.GMFMapPackage;

public class CompartmentMappingItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public CompartmentMappingItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addCompartmentPropertyDescriptor (object);
            addChildNodesPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addCompartmentPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_CompartmentMapping_compartment_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_CompartmentMapping_compartment_feature", "_UI_CompartmentMapping_type"), GMFMapPackage.eINSTANCE.getCompartmentMapping_Compartment (), true, null, getString ("_UI_VisualrepresentationPropertyCategory"), null));
    }

    protected void addChildNodesPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_CompartmentMapping_childNodes_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_CompartmentMapping_childNodes_feature", "_UI_CompartmentMapping_type"), GMFMapPackage.eINSTANCE.getCompartmentMapping_ChildNodes (), true, null, null, null) {

            protected Collection getComboBoxObjects (Object object) {
                if (object instanceof CompartmentMapping) {
                    CompartmentMapping mapping = (CompartmentMapping) object;
                    return new HashSet (mapping.getParentNodeMapping ().getChildMappings ());
                }
                return Collections.EMPTY_LIST;
            }

        }

        );
    }

    public Object getImage (Object object) {
        return getResourceLocator ().getImage ("full/obj16/CompartmentMapping");
    }

    public String getText (Object object) {
        if (object instanceof CompartmentMapping) {
            CompartmentMapping mapping = (CompartmentMapping) object;
            String result = " <";
            if (mapping.getCompartment () != null) {
                result += mapping.getCompartment ().getName ();
            }
            result += ">";
            return getString ("_UI_CompartmentMapping_type") + result;
        }
        return getString ("_UI_CompartmentMapping_type");
    }

    public void notifyChangedGen (Notification notification) {
        updateChildren (notification);
        super.notifyChanged (notification);
    }

    public void notifyChanged (Notification notification) {
        if (notification.getFeatureID (ChildNodeMapping.class) == GMFMapPackage.COMPARTMENT_MAPPING__COMPARTMENT) {
            fireNotifyChanged (new ViewerNotification (notification, null));
        }
        notifyChangedGen (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
    }

    public ResourceLocator getResourceLocator () {
        return GMFMapEditPlugin.INSTANCE;
    }

}

