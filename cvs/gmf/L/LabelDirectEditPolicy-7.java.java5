package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.editpolicies.DirectEditPolicy;

import org.eclipse.gef.requests.DirectEditRequest;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.gef.ui.internal.parts.TextCellEditorEx;

import org.eclipse.gmf.runtime.notation.View;

public class LabelDirectEditPolicy extends DirectEditPolicy {
    class EObjectAdapterEx extends EObjectAdapter {
        private View view = null;

        public EObjectAdapterEx (EObject element, View view) {
            super (element);
            this.view = view;
        }

        public Object getAdapter (Class adapter) {
            Object o = super.getAdapter (adapter);
            if (o != null) return o;

            if (adapter.equals (View.class)) {
                return view;
            }
            return null;
        }

    }

    protected Command getDirectEditCommand (DirectEditRequest edit) {
        if (edit.getCellEditor () instanceof TextCellEditorEx) if (! ((TextCellEditorEx) edit.getCellEditor ()).hasValueChanged ()) return null;

        String labelText = (String) edit.getCellEditor ().getValue ();
        if (labelText == null) {
            return null;
        }
        ITextAwareEditPart compartment = (ITextAwareEditPart) getHost ();
        EObject model = (EObject) compartment.getModel ();
        EObjectAdapter elementAdapter = null;
        if (model instanceof View) {
            View view = (View) model;
            elementAdapter = new EObjectAdapterEx (ViewUtil.resolveSemanticElement (view), view);
        } else elementAdapter = new EObjectAdapterEx (model, null);

        String prevText = compartment.getParser ().getEditString (elementAdapter, compartment.getParserOptions ().intValue ());
        if (! prevText.equals (labelText)) {
            ICommand iCommand = compartment.getParser ().getParseCommand (elementAdapter, labelText, 0);
            return new ICommandProxy (iCommand);
        }
        return null;
    }

    protected void showCurrentEditValue (DirectEditRequest request) {
        String value = (String) request.getCellEditor ().getValue ();
        ((ITextAwareEditPart) getHost ()).setLabelText (value);
    }

}

