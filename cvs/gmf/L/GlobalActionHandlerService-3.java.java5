package org.eclipse.gmf.runtime.common.ui.services.action.global;

import java.text.MessageFormat;

import java.util.Enumeration;

import java.util.Hashtable;

import java.util.List;

import java.util.Vector;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionDebugOptions;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionPlugin;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionStatusCodes;

public class GlobalActionHandlerService extends Service implements IGlobalActionHandlerProvider {
    protected static class ProviderDescriptor extends Service.ProviderDescriptor {
        private Hashtable partHandlerList = null;

        protected ProviderDescriptor (IConfigurationElement element, Hashtable partHandlerList) {
            super (element);
            assert null != partHandlerList : "partHandlerList cannot be null";
            this.partHandlerList = partHandlerList;
        }

        public boolean provides (IOperation operation) {
            if (! (operation instanceof GlobalActionHandlerOperation)) {
                return false;
            }
            IGlobalActionHandlerContext context = ((GlobalActionHandlerOperation) operation).getContext ();
            String partId = context.getActivePart ().getSite ().getId ();
            String actionId = context.getActionId ();
            Class elementType = context.getElementType ();
            boolean isCompatible = context.isCompatible ();
            Hashtable elementTypeTable = (Hashtable) getPartHandlerList ().get (partId);
            if (elementTypeTable == null) {
                return false;
            }
            List actionIdList = (List) elementTypeTable.get (isCompatible ? getCompatibleType (elementTypeTable, elementType, actionId).getName () : elementType.getName ());
            if (actionIdList == null) {
                actionIdList = (List) elementTypeTable.get (NullElementType.class.getName ());
                if (actionIdList == null) {
                    return false;
                }
            }
            if (actionIdList.contains (actionId)) {
                if (getPolicy () != null) {
                    return getPolicy ().provides (operation);
                }
                return true;
            }
            return false;
        }

        private Hashtable getPartHandlerList () {
            return partHandlerList;
        }

        private Class getCompatibleType (Hashtable elementTypeTable, Class elementType, String actionId) {
            Class newClass = null;
            String className = null;
            Enumeration enumeration = elementTypeTable.keys ();
            while (enumeration.hasMoreElements ()) {
                className = (String) enumeration.nextElement ();
                List actionIdList = (List) elementTypeTable.get (className);
                if (actionIdList == null || ! actionIdList.contains (actionId)) {
                    continue;
                }
                try {
                    newClass = Class.forName (className, false, elementType.getClassLoader ());
                } catch (ClassNotFoundException e) {
                    Trace.catching (CommonUIServicesActionPlugin.getDefault (), CommonUIServicesActionDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getCompatibleType", e);
                }
                if (newClass != null && newClass.isAssignableFrom (elementType)) {
                    return newClass;
                }
            }
            return elementType;
        }

    }

    private final static GlobalActionHandlerService instance = new GlobalActionHandlerService ();

    protected GlobalActionHandlerService () {
        super (false);
    }

    public static GlobalActionHandlerService getInstance () {
        return instance;
    }

    private Object execute (GlobalActionHandlerOperation operation) {
        List results = execute (ExecutionStrategy.FIRST, operation);
        return results.isEmpty () ? null : results.get (0);
    }

    public IGlobalActionHandler getGlobalActionHandler (IGlobalActionHandlerContext context) {
        assert null != context;
        return (IGlobalActionHandler) execute (new GetGlobalActionHandlerOperation (context));
    }

    protected Service.ProviderDescriptor newProviderDescriptor (IConfigurationElement element) {
        return new ProviderDescriptor (element, getGlobalActionHandlerProviderInfo (element));
    }

    private Hashtable getGlobalActionHandlerProviderInfo (IConfigurationElement element) {
        Hashtable providerInfo = new Hashtable ();
        try {
            IConfigurationElement [] viewChildren = element.getChildren ("ViewId");
            for (int i = 0;
            i < viewChildren.length; i ++) {
                IConfigurationElement viewConfig = viewChildren [i];
                String id = viewConfig.getAttribute ("id");
                if (id == null) {
                    handleInvalidElement (viewConfig);
                    continue;
                }
                providerInfo.put (id, new Hashtable ());
                IConfigurationElement [] elementTypeChildren = viewConfig.getChildren ();
                for (int j = 0;
                j < elementTypeChildren.length; j ++) {
                    IConfigurationElement elementTypeConfig = elementTypeChildren [j];
                    String elementTypeClass = elementTypeConfig.getAttribute ("class");
                    if (elementTypeClass == null) {
                        elementTypeClass = NullElementType.class.getName ();
                    }
                    Hashtable table = (Hashtable) providerInfo.get (id);
                    table.put (elementTypeClass, new Vector ());
                    Vector listOfActionId = new Vector ();
                    IConfigurationElement [] actionIdChildren = elementTypeConfig.getChildren ();
                    for (int k = 0;
                    k < actionIdChildren.length; k ++) {
                        IConfigurationElement actionIdConfig = actionIdChildren [k];
                        String actionId = actionIdConfig.getAttribute ("actionId");
                        if (actionId == null) {
                            handleInvalidElement (actionIdConfig);
                            continue;
                        }
                        listOfActionId.addElement (actionId);
                    }
                    Vector list = (Vector) ((Hashtable) providerInfo.get (id)).get (elementTypeClass);
                    list.addAll (listOfActionId);
                }
            }
        } catch (Exception e) {
            Trace.catching (CommonUIServicesActionPlugin.getDefault (), CommonUIServicesActionDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getGlobalActionHandlerProviderInfo", e);
            Log.error (CommonUIServicesActionPlugin.getDefault (), CommonUIServicesActionStatusCodes.SERVICE_FAILURE, MessageFormat.format (INVALID_ELEMENT_MESSAGE_PATTERN, new Object [] {element.getName ()}), e);
        }
        return providerInfo;
    }

    private void handleInvalidElement (IConfigurationElement element) {
        String message = MessageFormat.format (INVALID_ELEMENT_MESSAGE_PATTERN, new Object [] {element.getDeclaringExtension ().toString () + StringStatics.COLON + element.getName ()});
        Trace.trace (CommonUIServicesActionPlugin.getDefault (), CommonUIServicesActionDebugOptions.SERVICES_CONFIG, message);
        Log.error (CommonUIServicesActionPlugin.getDefault (), CommonUIServicesActionStatusCodes.SERVICE_FAILURE, message);
    }

}

