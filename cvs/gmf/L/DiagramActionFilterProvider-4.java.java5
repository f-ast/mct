package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.Iterator;

import org.eclipse.ui.PlatformUI;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.emf.ui.services.action.AbstractModelActionFilterProvider;

import org.eclipse.jface.viewers.IStructuredSelection;

public class DiagramActionFilterProvider extends AbstractModelActionFilterProvider {
    private static final String CAN_DUPLICATE = "canDuplicate";

    protected boolean doTestAttribute (Object target, String name, String value) {
        if (CAN_DUPLICATE.equals (name)) {
            return DuplicateActionDelegate.canDuplicate (getStructuredSelection (), PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getPartService ().getActivePart ());
        }
        return false;
    }

    protected boolean doProvides (IOperation operation) {
        return true;
    }

    protected TransactionalEditingDomain getEditingDomain (Object target) {
        TransactionalEditingDomain result = null;
        IStructuredSelection selection = getStructuredSelection ();
        if (selection != null && ! selection.isEmpty ()) {
            for (Iterator i = selection.iterator ();
            i.hasNext () && result == null;) {
                Object next = i.next ();
                if (next instanceof IAdaptable) {
                    EObject element = (EObject) ((IAdaptable) next).getAdapter (EObject.class);
                    if (element != null) {
                        result = TransactionUtil.getEditingDomain (element);
                    }
                }
            }
        }
        return result;
    }

}

