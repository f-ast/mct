package org.eclipse.gmf.runtime.diagram.ui.internal.actions;

import java.util.Collection;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.requests.GroupRequest;

import org.eclipse.gef.ui.actions.SelectionAction;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.swt.widgets.Display;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

public class InsertAction extends SelectionAction {
    public static final String ID = ActionIds.ACTION_INSERT_SEMANTIC;

    public InsertAction (IWorkbenchPart part) {
        super (part);
        setId (ID);
    }

    protected void init () {
        super.init ();
        setEnabled (false);
    }

    public Command createInsertCommand (List objects) {
        if (objects.isEmpty ()) return null;

        if (objects.size () > 1) return null;

        if (! (objects.get (0) instanceof EditPart)) return null;

        GroupRequest insertReq = new GroupRequest (RequestConstants.REQ_INSERT_SEMANTIC);
        return ((EditPart) (objects.get (0))).getCommand (insertReq);
    }

    protected boolean calculateEnabled () {
        Command cmd = createInsertCommand (getSelectedObjects ());
        if (cmd == null) return false;

        return cmd.canExecute ();
    }

    public void run () {
        Command cmd = createInsertCommand (getSelectedObjects ());
        execute (cmd);
        Collection newObjects = DiagramCommandStack.getReturnValues (cmd);
        Iterator i = newObjects.iterator ();
        if (i.hasNext ()) {
            Object obj = i.next ();
            IGraphicalEditPart host = (IGraphicalEditPart) getSelectedObjects ().get (0);
            EditPart elementEP = host.findEditPart (host, (EObject) obj);
            if (elementEP == null) {
                IGraphicalEditPart parent = (IGraphicalEditPart) host.getParent ();
                elementEP = parent.findEditPart (parent, (EObject) obj);
            }
            if (elementEP != null && getWorkbenchPart () instanceof IDiagramWorkbenchPart) {
                final EditPart newEP = elementEP;
                final IDiagramGraphicalViewer viewer = ((IDiagramWorkbenchPart) getWorkbenchPart ()).getDiagramGraphicalViewer ();
                Display.getCurrent ().asyncExec (new Runnable () {

                    public void run () {
                        viewer.setSelection (new StructuredSelection (newEP));
                        Request der = new Request (RequestConstants.REQ_DIRECT_EDIT);
                        newEP.performRequest (der);
                    }

                }

                );
            }
        }
    }

}

