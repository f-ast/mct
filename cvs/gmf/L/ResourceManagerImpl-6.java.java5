package org.eclipse.gmf.internal.xpand.util;

import java.io.FileNotFoundException;

import java.io.IOException;

import java.io.Reader;

import org.eclipse.gmf.internal.xpand.Activator;

import org.eclipse.gmf.internal.xpand.ResourceManager;

import org.eclipse.gmf.internal.xpand.model.XpandResource;

import org.eclipse.gmf.internal.xpand.xtend.ast.XtendResource;

public abstract class ResourceManagerImpl implements ResourceManager {

    public XtendResource loadXtendResource (String fullyQualifiedName) {
        Reader r = null;
        try {
            r = resolve (fullyQualifiedName, XtendResource.FILE_EXTENSION);
            assert r != null;
            return loadXtendResource (r, fullyQualifiedName);
        } catch (FileNotFoundException ex) {
            return delegateLoadXtendResource (fullyQualifiedName);
        } catch (IOException ex) {
            Activator.logError (ex);
        } catch (ParserException ex) {
            handleParserException (fullyQualifiedName, ex);
        } finally {
            if (r != null) {
                try {
                    r.close ();
                } catch (Exception ex) {
                }
            }
        }
        return null;
    }

    public XpandResource loadXpandResource (String fullyQualifiedName) {
        Reader r = null;
        try {
            r = resolve (fullyQualifiedName, XpandResource.TEMPLATE_EXTENSION);
            assert r != null;
            return loadXpandResource (r, fullyQualifiedName);
        } catch (FileNotFoundException ex) {
            return delegateLoadXpandResource (fullyQualifiedName);
        } catch (IOException ex) {
            Activator.logWarn (ex.getMessage ());
        } catch (ParserException ex) {
            handleParserException (fullyQualifiedName, ex);
        } finally {
            if (r != null) {
                try {
                    r.close ();
                } catch (Exception ex) {
                }
            }
        }
        return null;
    }

    protected XtendResource delegateLoadXtendResource (String fullyQualifiedName) {
        for (ResourceManager next : getDependenies ()) {
            XtendResource r = next.loadXtendResource (fullyQualifiedName);
            if (r != null) {
                return r;
            }
        }
        return null;
    }

    protected XpandResource delegateLoadXpandResource (String fullyQualifiedName) {
        for (ResourceManager next : getDependenies ()) {
            XpandResource r = next.loadXpandResource (fullyQualifiedName);
            if (r != null) {
                return r;
            }
        }
        return null;
    }

    protected void handleParserException (String name, ParserException ex) {
        Activator.logWarn (name + ":" + ex.getClass ().getName ());
    }

    protected abstract Reader resolve (String fullyQualifiedName, String extension) throws IOException;

    protected ResourceManager [] getDependenies () {
        return new ResourceManager [0];
    }

    protected XtendResource loadXtendResource (Reader reader, String fullyQualifiedName) throws IOException, ParserException {
        return new XtendResourceParser ().parse (reader, fullyQualifiedName);
    }

    protected XpandResource loadXpandResource (Reader reader, String fullyQualifiedName) throws IOException, ParserException {
        return new XpandResourceParser ().parse (reader, fullyQualifiedName);
    }

}

