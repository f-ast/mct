package org.eclipse.gmf.internal.xpand.parser;

import lpg.lpgjavaruntime.*;

import java.util.LinkedList;

import java.util.List;

import java.util.regex.Matcher;

import java.util.regex.Pattern;

import org.eclipse.gmf.internal.xpand.util.ParserException.ErrorLocationInfo;

import org.eclipse.gmf.internal.xpand.expression.parser.ExpressionFactory;

import org.eclipse.gmf.internal.xpand.ast.*;

import org.eclipse.gmf.internal.xpand.expression.ast.*;

import java.util.Collections;

public class XpandParser extends PrsStream implements RuleAction {
    private static ParseTable prs = new XpandParserprs ();
    private DeterministicParser dtParser;

    public DeterministicParser getParser () {
        return dtParser;
    }

    private void setResult (Object object) {
        dtParser.setSym1 (object);
    }

    public Object getRhsSym (int i) {
        return dtParser.getSym (i);
    }

    public int getRhsTokenIndex (int i) {
        return dtParser.getToken (i);
    }

    public IToken getRhsIToken (int i) {
        return super.getIToken (getRhsTokenIndex (i));
    }

    public int getRhsFirstTokenIndex (int i) {
        return dtParser.getFirstToken (i);
    }

    public IToken getRhsFirstIToken (int i) {
        return super.getIToken (getRhsFirstTokenIndex (i));
    }

    public int getRhsLastTokenIndex (int i) {
        return dtParser.getLastToken (i);
    }

    public IToken getRhsLastIToken (int i) {
        return super.getIToken (getRhsLastTokenIndex (i));
    }

    public int getLeftSpan () {
        return dtParser.getFirstToken ();
    }

    public IToken getLeftIToken () {
        return super.getIToken (getLeftSpan ());
    }

    public int getRightSpan () {
        return dtParser.getLastToken ();
    }

    public IToken getRightIToken () {
        return super.getIToken (getRightSpan ());
    }

    public int getRhsErrorTokenIndex (int i) {
        int index = dtParser.getToken (i);
        IToken err = super.getIToken (index);
        return (err instanceof ErrorToken ? index : 0);
    }

    public ErrorToken getRhsErrorIToken (int i) {
        int index = dtParser.getToken (i);
        IToken err = super.getIToken (index);
        return (ErrorToken) (err instanceof ErrorToken ? err : null);
    }

    public XpandParser (LexStream lexStream) {
        super (lexStream);
        xpandFactory = new XpandFactory (lexStream.getFileName ());
        factory = new ExpressionFactory (lexStream.getFileName ());
        try {
            super.remapTerminalSymbols (orderedTerminalSymbols (), XpandParserprs.EOFT_SYMBOL);
        } catch (NullExportedSymbolsException e) {
        } catch (NullTerminalSymbolsException e) {
        } catch (UnimplementedTerminalsException e) {
            java.util.ArrayList unimplemented_symbols = e.getSymbols ();
            System.out.println ("The Lexer will not scan the following token(s):");
            for (int i = 0;
            i < unimplemented_symbols.size (); i ++) {
                Integer id = (Integer) unimplemented_symbols.get (i);
                System.out.println ("    " + XpandParsersym.orderedTerminalSymbols [id.intValue ()]);
            }
            System.out.println ();
        } catch (UndefinedEofSymbolException e) {
            throw new Error (new UndefinedEofSymbolException ("The Lexer does not implement the Eof symbol " + XpandParsersym.orderedTerminalSymbols [XpandParserprs.EOFT_SYMBOL]));
        }
    }

    public String [] orderedTerminalSymbols () {
        return XpandParsersym.orderedTerminalSymbols;
    }

    public String getTokenKindName (int kind) {
        return XpandParsersym.orderedTerminalSymbols [kind];
    }

    public int getEOFTokenKind () {
        return XpandParserprs.EOFT_SYMBOL;
    }

    public PrsStream getParseStream () {
        return (PrsStream) this;
    }

    public Template parser () {
        return parser (null, 0);
    }

    public Template parser (Monitor monitor) {
        return parser (monitor, 0);
    }

    public Template parser (int error_repair_count) {
        return parser (null, error_repair_count);
    }

    public Template parser (Monitor monitor, int error_repair_count) {
        try {
            resetErrors ();
            dtParser = new DeterministicParser (monitor, (TokenStream) this, prs, (RuleAction) this);
        } catch (NotDeterministicParseTableException e) {
            throw new Error (new NotDeterministicParseTableException ("Regenerate XpandParserprs.java with -NOBACKTRACK option"));
        } catch (BadParseSymFileException e) {
            throw new Error (new BadParseSymFileException ("Bad Parser Symbol File -- XpandParsersym.java. Regenerate XpandParserprs.java"));
        }
        try {
            return (Template) dtParser.parse ();
        } catch (BadParseException e) {
            reset (e.error_token);
            DiagnoseParser diagnoseParser = new DiagnoseParser (this, prs);
            diagnoseParser.diagnose (e.error_token);
        }
        return null;
    }

    public ErrorLocationInfo [] getErrors () {
        return errors.toArray (new ErrorLocationInfo [errors.size ()]);
    }

    private void resetErrors () {
        errors.clear ();
    }

    private final List < ErrorLocationInfo > errors = new LinkedList < ErrorLocationInfo > ();

    @Override
    public void reportError (int errorCode, String locationInfo, int leftToken, int rightToken, String tokenText) {
        final int leftTokenLine = getLine (leftToken);
        final int leftTokenColumn = getColumn (leftToken);
        final int rightTokenLine = getEndLine (rightToken);
        final int rightTokenColumn = getEndColumn (rightToken);
        final String msg = tokenText + errorMsgText [errorCode];
        errors.add (new ErrorLocationInfo (msg, leftTokenLine, leftTokenColumn, rightTokenLine, rightTokenColumn));
    }

    @Override
    public void reportError (int errorCode, String locationInfo, String tokenText) {
        try {
            Matcher m = Pattern.compile ("[^:]+:(\\d+):(\\d+):(\\d+):(\\d+):.*").matcher (locationInfo);
            boolean t = m.matches ();
            assert t;
            final int leftTokenLine = getLine (Integer.parseInt (m.group (1)));
            final int leftTokenColumn = getColumn (Integer.parseInt (m.group (2)));
            final int rightTokenLine = getEndLine (Integer.parseInt (m.group (3)));
            final int rightTokenColumn = getEndColumn (Integer.parseInt (m.group (4)));
            final String msg = tokenText + errorMsgText [errorCode];
            errors.add (new ErrorLocationInfo (msg, leftTokenLine, leftTokenColumn, rightTokenLine, rightTokenColumn));
        } catch (Exception ex) {
            errors.add (new ErrorLocationInfo (tokenText + errorMsgText [errorCode]));
        }
    }

    private final XpandFactory xpandFactory;
    private final ExpressionFactory factory;

    public void ruleAction (int ruleNumber) {
        switch (ruleNumber) {
            case 2 :
                {
                    setResult (factory.createLetExpression (getLeftIToken (), getRhsIToken (2), (Expression) getRhsSym (4), (Expression) getRhsSym (6)));
                    break;
                } case 4 :
                {
                    setResult (factory.createCast (getLeftIToken (), (Identifier) getRhsSym (2), (Expression) getRhsSym (4)));
                    break;
                } case 7 :
                {
                    Expression e = (Expression) getRhsSym (1);
                    Expression right = (Expression) getRhsSym (3);
                    if (right instanceof ChainExpression) {
                        ChainExpression rchain = (ChainExpression) right;
                        Expression newFirst = factory.createChainExpression (e, rchain.getFirst ());
                        setResult (factory.createChainExpression (newFirst, rchain.getNext ()));
                    } else {
                        setResult (factory.createChainExpression (e, right));
                    }
                    break;
                } case 9 :
                {
                    setResult (factory.createIf ((Expression) getRhsSym (1), (Expression) getRhsSym (3), (Expression) getRhsSym (5)));
                    break;
                } case 10 :
                {
                    setResult (factory.createSwitchExpression (getLeftIToken (), getRightIToken (), (Expression) getRhsSym (3), (List) getRhsSym (6), (Expression) getRhsSym (9)));
                    break;
                } case 12 :
                {
                    setResult (Collections.emptyList ());
                    break;
                } case 13 :
                {
                    LinkedList r = new LinkedList ();
                    r.add (factory.createCase (getLeftIToken (), (Expression) getRhsSym (2), (Expression) getRhsSym (4)));
                    r.addAll ((List) getRhsSym (5));
                    setResult (r);
                    break;
                } case 15 :
                {
                    Expression e = (Expression) getRhsSym (1);
                    Expression r = (Expression) getRhsSym (3);
                    setResult (factory.createBooleanOperation (e.getStart (), r.getEnd (), e.getLine (), getRhsIToken (2), e, r));
                    break;
                } case 17 :
                {
                    Expression e = (Expression) getRhsSym (1);
                    Expression r = (Expression) getRhsSym (3);
                    setResult (factory.createBooleanOperation (e.getStart (), r.getEnd (), e.getLine (), getRhsIToken (2), e, r));
                    break;
                } case 19 :
                {
                    Expression e = (Expression) getRhsSym (1);
                    Expression r = (Expression) getRhsSym (3);
                    setResult (factory.createBooleanOperation (e.getStart (), r.getEnd (), e.getLine (), getRhsIToken (2), e, r));
                    break;
                } case 21 :
                {
                    Expression e = (Expression) getRhsSym (1);
                    IToken t = (IToken) getRhsSym (2);
                    Expression r = (Expression) getRhsSym (3);
                    setResult (factory.createOperationCall (e.getStart (), r.getEnd (), e.getLine (), t, e, Collections.singletonList (r)));
                    break;
                } case 22 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 23 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 24 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 25 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 26 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 27 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 29 :
                {
                    Expression e = (Expression) getRhsSym (1);
                    IToken t = (IToken) getRhsSym (2);
                    Expression r = (Expression) getRhsSym (3);
                    setResult (factory.createOperationCall (e.getStart (), r.getEnd (), e.getLine (), t, e, Collections.singletonList (r)));
                    break;
                } case 30 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 31 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 33 :
                {
                    Expression e = (Expression) getRhsSym (1);
                    IToken t = (IToken) getRhsSym (2);
                    Expression r = (Expression) getRhsSym (3);
                    setResult (factory.createOperationCall (e.getStart (), r.getEnd (), e.getLine (), t, e, Collections.singletonList (r)));
                    break;
                } case 34 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 35 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 37 :
                {
                    Expression e = (Expression) getRhsSym (2);
                    setResult (factory.createOperationCall (getLeftIToken ().getColumn (), e.getEnd (), getLeftIToken ().getLine (), getLeftIToken (), e, Collections.EMPTY_LIST));
                    break;
                } case 38 :
                {
                    Expression e = (Expression) getRhsSym (2);
                    setResult (factory.createOperationCall (getLeftIToken ().getColumn (), e.getEnd (), getLeftIToken ().getLine (), getLeftIToken (), e, Collections.EMPTY_LIST));
                    break;
                } case 39 :
                {
                    setResult (getRhsSym (2));
                    break;
                } case 40 :
                {
                    final FeatureCall op = (FeatureCall) getRhsSym (3);
                    FeatureCall fc = op;
                    while (fc.getTarget () != null) {
                        fc = (FeatureCall) fc.getTarget ();
                    }
                    fc.setTarget ((FeatureCall) getRhsSym (2));
                    setResult (op);
                    break;
                } case 42 :
                {
                    final FeatureCall op = (FeatureCall) getRhsSym (2);
                    FeatureCall fc = op;
                    while (fc.getTarget () != null) {
                        fc = (FeatureCall) fc.getTarget ();
                    }
                    fc.setTarget ((Expression) getRhsSym (1));
                    setResult (op);
                    break;
                } case 43 :
                {
                    setResult (factory.createStringLiteral (getLeftIToken ()));
                    break;
                } case 51 :
                {
                    setResult (getRhsSym (2));
                    break;
                } case 52 :
                {
                    setResult (factory.createOperationCall (getRightIToken (), getLeftIToken (), null, (List < Expression >) getRhsSym (3)));
                    break;
                } case 53 :
                {
                    setResult (factory.createOperationCall (getRightIToken (), getLeftIToken (), null, Collections.EMPTY_LIST));
                    break;
                } case 54 :
                {
                    setResult (factory.createFeatureCall ((Identifier) getRhsSym (1), null));
                    break;
                } case 56 :
                {
                    setResult (factory.createListLiteral (getLeftIToken (), getRightIToken (), (List < Expression >) getRhsSym (2)));
                    break;
                } case 57 :
                {
                    setResult (factory.createListLiteral (getLeftIToken (), getRightIToken (), Collections.EMPTY_LIST));
                    break;
                } case 58 :
                {
                    setResult (factory.createConstructorCall (getLeftIToken (), (Identifier) getRhsSym (2)));
                    break;
                } case 59 :
                {
                    setResult (factory.createBooleanLiteral (getRhsIToken (1)));
                    break;
                } case 60 :
                {
                    setResult (factory.createBooleanLiteral (getRhsIToken (1)));
                    break;
                } case 61 :
                {
                    setResult (factory.createNullLiteral (getRhsIToken (1)));
                    break;
                } case 62 :
                {
                    setResult (factory.createIntegerLiteral (getRhsIToken (1)));
                    break;
                } case 63 :
                {
                    setResult (factory.createRealLiteral (getRhsIToken (1)));
                    break;
                } case 64 :
                {
                    setResult (factory.createTypeSelectExpression (getRhsIToken (1), getRightIToken (), (Identifier) getRhsSym (3), null));
                    break;
                } case 65 :
                {
                    setResult (factory.createCollectionExpression ((IToken) getRhsSym (1), getRightIToken (), getRhsIToken (3), (Expression) getRhsSym (5), null));
                    break;
                } case 66 :
                {
                    setResult (factory.createCollectionExpression ((IToken) getRhsSym (1), getRightIToken (), null, (Expression) getRhsSym (3), null));
                    break;
                } case 67 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 68 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 69 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 70 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 71 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 72 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 73 :
                {
                    setResult (Collections.EMPTY_LIST);
                    break;
                } case 75 :
                {
                    Identifier id = factory.createIdentifier (getRightIToken ());
                    DeclaredParameter p = factory.createDeclaredParameter ((Identifier) getRhsSym (1), id);
                    setResult (Collections.singletonList (p));
                    break;
                } case 76 :
                {
                    LinkedList r = new LinkedList ();
                    Identifier id = factory.createIdentifier (getRhsIToken (2));
                    DeclaredParameter p = factory.createDeclaredParameter ((Identifier) getRhsSym (1), id);
                    r.add (p);
                    r.addAll ((List) getRhsSym (4));
                    setResult (r);
                    break;
                } case 77 :
                {
                    setResult (Collections.singletonList ((Expression) getRhsSym (1)));
                    break;
                } case 78 :
                {
                    LinkedList r = new LinkedList ();
                    r.add (getRhsSym (1));
                    r.addAll ((List) getRhsSym (3));
                    setResult (r);
                    break;
                } case 81 :
                {
                    Identifier id = (Identifier) getRhsSym (1);
                    id = id.append (factory.createIdentifier (getRhsIToken (2)));
                    id = id.append ((Identifier) getRhsSym (3));
                    id = id.append (factory.createIdentifier (getRhsIToken (4)));
                    setResult (id);
                    break;
                } case 82 :
                {
                    setResult (factory.createIdentifier (getRhsIToken (1)));
                    break;
                } case 83 :
                {
                    setResult (factory.createIdentifier (getRhsIToken (1)));
                    break;
                } case 84 :
                {
                    setResult (factory.createIdentifier (getRhsIToken (1)));
                    break;
                } case 85 :
                {
                    Identifier id = factory.createIdentifier (getLeftIToken ());
                    id = id.append (factory.createIdentifier (getRhsIToken (2)));
                    id = id.append ((Identifier) getRhsSym (3));
                    setResult (id);
                    break;
                } case 87 :
                {
                    setResult (factory.createIdentifier (getLeftIToken ()));
                    break;
                } case 88 :
                {
                    Identifier id = factory.createIdentifier (getLeftIToken ());
                    id = id.append (factory.createIdentifier (getRhsIToken (2)));
                    id = id.append ((Identifier) getRhsSym (3));
                    setResult (id);
                    break;
                } case 89 :
                {
                    setResult (xpandFactory.createTemplate (Collections.EMPTY_LIST, Collections.EMPTY_LIST, Collections.EMPTY_LIST, Collections.EMPTY_LIST, getRightIToken ()));
                    break;
                } case 92 :
                {
                    List imports = (List) getRhsSym (3);
                    List extensionImports = (List) getRhsSym (4);
                    List defineOrAround = (List) getRhsSym (5);
                    List < Advice > advices = new LinkedList < Advice > ();
                    List < Definition > defines = new LinkedList < Definition > ();
                    for (Object o : defineOrAround) {
                        if (o instanceof Definition) {
                            defines.add ((Definition) o);
                        } else if (o instanceof Advice) {
                            advices.add ((Advice) o);
                        } else {
                            throw new IllegalStateException ();
                        }

                    }
                    setResult (xpandFactory.createTemplate (imports, extensionImports, defines, advices, getRightIToken ()));
                    break;
                } case 93 :
                {
                    List result = new LinkedList ();
                    result.add (getRhsSym (1));
                    result.addAll ((List) getRhsSym (4));
                    setResult (result);
                    break;
                } case 94 :
                {
                    List result = new LinkedList ();
                    result.add (getRhsSym (1));
                    result.addAll ((List) getRhsSym (4));
                    setResult (result);
                    break;
                } case 95 :
                {
                    setResult (Collections.EMPTY_LIST);
                    break;
                } case 101 :
                {
                    setResult (Collections.EMPTY_LIST);
                    break;
                } case 102 :
                {
                    List res = new LinkedList ();
                    res.add (getRhsSym (1));
                    res.addAll ((List) getRhsSym (2));
                    setResult (res);
                    break;
                } case 103 :
                {
                    setResult (xpandFactory.createNamespaceImport (getLeftIToken (), xpandFactory.createStringLiteral (getRhsIToken (2))));
                    break;
                } case 104 :
                {
                    setResult (Collections.EMPTY_LIST);
                    break;
                } case 105 :
                {
                    List res = new LinkedList ();
                    res.add (getRhsSym (1));
                    res.addAll ((List) getRhsSym (2));
                    setResult (res);
                    break;
                } case 106 :
                {
                    setResult (xpandFactory.createImportDeclaration (getLeftIToken (), (Identifier) getRhsSym (2)));
                    break;
                } case 107 :
                {
                    setResult (xpandFactory.createAround (getLeftIToken (), getRightIToken (), (Identifier) getRhsSym (2), Collections.EMPTY_LIST, false, (Identifier) getRhsSym (4), (List) getRhsSym (5)));
                    break;
                } case 108 :
                {
                    setResult (xpandFactory.createAround (getLeftIToken (), getRightIToken (), (Identifier) getRhsSym (2), (List) getRhsSym (4), false, (Identifier) getRhsSym (7), (List) getRhsSym (8)));
                    break;
                } case 109 :
                {
                    setResult (xpandFactory.createAround (getLeftIToken (), getRightIToken (), (Identifier) getRhsSym (2), (List) getRhsSym (4), true, (Identifier) getRhsSym (9), (List) getRhsSym (10)));
                    break;
                } case 110 :
                {
                    setResult (xpandFactory.createAround (getLeftIToken (), getRightIToken (), (Identifier) getRhsSym (2), Collections.EMPTY_LIST, true, (Identifier) getRhsSym (7), (List) getRhsSym (8)));
                    break;
                } case 111 :
                {
                    Identifier res = xpandFactory.createIdentifier (getLeftIToken ());
                    if (getRhsSym (2) != null) {
                        res = res.append ((Identifier) getRhsSym (2));
                    }
                    setResult (res);
                    break;
                } case 112 :
                {
                    Identifier res = xpandFactory.createIdentifier (getLeftIToken ());
                    if (getRhsSym (2) != null) {
                        res = res.append ((Identifier) getRhsSym (2));
                    }
                    setResult (res);
                    break;
                } case 113 :
                {
                    setResult (null);
                    break;
                } case 115 :
                {
                    Identifier res = xpandFactory.createIdentifier (getLeftIToken ());
                    if (getRhsSym (2) != null) {
                        res = res.append ((Identifier) getRhsSym (2));
                    }
                    setResult (res);
                    break;
                } case 116 :
                {
                    setResult (xpandFactory.createDefinition (getLeftIToken (), getRightIToken (), getRhsIToken (2), Collections.EMPTY_LIST, (Identifier) getRhsSym (4), (List) getRhsSym (5)));
                    break;
                } case 117 :
                {
                    setResult (xpandFactory.createDefinition (getLeftIToken (), getRightIToken (), getRhsIToken (2), (List) getRhsSym (4), (Identifier) getRhsSym (7), (List) getRhsSym (8)));
                    break;
                } case 118 :
                {
                    List res = new LinkedList ();
                    res.addAll ((List) getRhsSym (1));
                    res.addAll ((List) getRhsSym (2));
                    setResult (res);
                    break;
                } case 119 :
                {
                    setResult (Collections.EMPTY_LIST);
                    break;
                } case 120 :
                {
                    List res = new LinkedList ();
                    res.add (getRhsSym (1));
                    res.addAll ((List) getRhsSym (2));
                    res.addAll ((List) getRhsSym (3));
                    setResult (res);
                    break;
                } case 127 :
                {
                    List res = new LinkedList ();
                    res.add (xpandFactory.createTextStatement (getRhsIToken (2), (IToken) getRhsSym (1)));
                    res.addAll ((List) getRhsSym (3));
                    setResult (res);
                    break;
                } case 128 :
                {
                    setResult (Collections.EMPTY_LIST);
                    break;
                } case 129 :
                {
                    List res = new LinkedList ();
                    res.add (xpandFactory.createTextStatement (getRhsIToken (2), (IToken) getRhsSym (1)));
                    res.addAll ((List) getRhsSym (3));
                    setResult (res);
                    break;
                } case 130 :
                {
                    setResult (null);
                    break;
                } case 131 :
                {
                    setResult (getLeftIToken ());
                    break;
                } case 135 :
                {
                    setResult (xpandFactory.createErrorStatement (getLeftIToken (), (Expression) getRhsSym (2)));
                    break;
                } case 136 :
                {
                    setResult (xpandFactory.createExpandStatement (getLeftIToken (), (Identifier) getRhsSym (2), (List) getRhsSym (3), null, false, null));
                    break;
                } case 137 :
                {
                    setResult (xpandFactory.createExpandStatement (getLeftIToken (), (Identifier) getRhsSym (2), (List) getRhsSym (3), (Expression) getRhsSym (5), false, null));
                    break;
                } case 138 :
                {
                    setResult (xpandFactory.createExpandStatement (getLeftIToken (), (Identifier) getRhsSym (2), (List) getRhsSym (3), (Expression) getRhsSym (5), true, (Expression) getRhsSym (6)));
                    break;
                } case 139 :
                {
                    setResult (Collections.EMPTY_LIST);
                    break;
                } case 140 :
                {
                    setResult (getRhsSym (2));
                    break;
                } case 142 :
                {
                    setResult (xpandFactory.createExpressionStatement ((Expression) getRhsSym (1)));
                    break;
                } case 143 :
                {
                    setResult (xpandFactory.createFileStatement (getLeftIToken (), getRightIToken (), (Expression) getRhsSym (2), (Identifier) getRhsSym (3), (List) getRhsSym (4)));
                    break;
                } case 144 :
                {
                    setResult (null);
                    break;
                } case 145 :
                {
                    setResult (xpandFactory.createIdentifier (getLeftIToken ()));
                    break;
                } case 146 :
                {
                    setResult (xpandFactory.createForEachStatement (getLeftIToken (), getRightIToken (), (Expression) getRhsSym (2), getRhsIToken (4), (Expression) getRhsSym (6), (IToken) getRhsSym (5), (List) getRhsSym (7)));
                    break;
                } case 147 :
                {
                    setResult (null);
                    break;
                } case 148 :
                {
                    setResult (getRightIToken ());
                    break;
                } case 149 :
                {
                    setResult (null);
                    break;
                } case 150 :
                {
                    setResult (getRhsSym (2));
                    break;
                } case 151 :
                {
                    IfStatement i = xpandFactory.createIfStatement (getLeftIToken (), (Expression) getRhsSym (2), (List) getRhsSym (3), null);
                    IfStatement elseIf = (IfStatement) getRhsSym (4);
                    IfStatement elseStmt = (IfStatement) getRhsSym (5);
                    if (elseIf != null) {
                        i.setElseIf (elseIf);
                        IfStatement curElseIf = elseIf;
                        while (curElseIf.getElseIf () != null) {
                            curElseIf = curElseIf.getElseIf ();
                        }
                        curElseIf.setElseIf (elseStmt);
                    } else {
                        i.setElseIf (elseStmt);
                    }
                    setResult (i);
                    break;
                } case 152 :
                {
                    setResult (null);
                    break;
                } case 153 :
                {
                    IfStatement elseIf = xpandFactory.createIfStatement (getLeftIToken (), (Expression) getRhsSym (2), (List) getRhsSym (3), null);
                    IfStatement restElseIf = (IfStatement) getRhsSym (4);
                    elseIf.setElseIf (restElseIf);
                    setResult (elseIf);
                    break;
                } case 154 :
                {
                    setResult (null);
                    break;
                } case 155 :
                {
                    setResult (xpandFactory.createIfStatement (getLeftIToken (), null, (List) getRhsSym (2), null));
                    break;
                } case 156 :
                {
                    setResult (xpandFactory.createLetStatement (getLeftIToken (), getRightIToken (), (Expression) getRhsSym (2), getRhsIToken (4), (List) getRhsSym (5)));
                    break;
                } case 157 :
                {
                    setResult (xpandFactory.createProtectStatement (getLeftIToken (), getRightIToken (), (Expression) getRhsSym (3), (Expression) getRhsSym (5), (Expression) getRhsSym (7), (IToken) getRhsSym (8), (List) getRhsSym (9)));
                    break;
                } case 158 :
                {
                    setResult (null);
                    break;
                } case 159 :
                {
                    setResult (getLeftIToken ());
                    break;
                } default :
                break;
        }
        return;
    }

}

