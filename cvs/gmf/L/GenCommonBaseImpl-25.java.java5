package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.codegen.util.CodeGenUtil;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.Behaviour;

import org.eclipse.gmf.codegen.gmfgen.ElementType;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.SharedBehaviour;

import org.eclipse.gmf.codegen.gmfgen.Viewmap;

import org.eclipse.gmf.codegen.gmfgen.ViewmapLayoutType;

public abstract class GenCommonBaseImpl extends EObjectImpl implements GenCommonBase {
    protected GenClass diagramRunTimeClass = null;
    protected static final int VISUAL_ID_EDEFAULT = 0;
    protected int visualID = VISUAL_ID_EDEFAULT;
    protected ElementType elementType = null;
    protected static final String EDIT_PART_CLASS_NAME_EDEFAULT = null;
    protected String editPartClassName = EDIT_PART_CLASS_NAME_EDEFAULT;
    protected static final String ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT = null;
    protected String itemSemanticEditPolicyClassName = ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT;
    protected static final String NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT = null;
    protected String notationViewFactoryClassName = NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT;
    protected Viewmap viewmap = null;
    protected EList < Behaviour > behaviour = null;
    protected static final boolean SANS_DOMAIN_EDEFAULT = false;

    protected GenCommonBaseImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenCommonBase ();
    }

    public GenClass getDiagramRunTimeClass () {
        if (diagramRunTimeClass != null && diagramRunTimeClass.eIsProxy ()) {
            InternalEObject oldDiagramRunTimeClass = (InternalEObject) diagramRunTimeClass;
            diagramRunTimeClass = (GenClass) eResolveProxy (oldDiagramRunTimeClass);
            if (diagramRunTimeClass != oldDiagramRunTimeClass) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS, oldDiagramRunTimeClass, diagramRunTimeClass));

            }
        }
        return diagramRunTimeClass;
    }

    public GenClass basicGetDiagramRunTimeClass () {
        return diagramRunTimeClass;
    }

    public void setDiagramRunTimeClass (GenClass newDiagramRunTimeClass) {
        GenClass oldDiagramRunTimeClass = diagramRunTimeClass;
        diagramRunTimeClass = newDiagramRunTimeClass;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS, oldDiagramRunTimeClass, diagramRunTimeClass));

    }

    public int getVisualID () {
        return visualID;
    }

    public void setVisualID (int newVisualID) {
        int oldVisualID = visualID;
        visualID = newVisualID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID, oldVisualID, visualID));

    }

    public ElementType getElementType () {
        return elementType;
    }

    public NotificationChain basicSetElementType (ElementType newElementType, NotificationChain msgs) {
        ElementType oldElementType = elementType;
        elementType = newElementType;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE, oldElementType, newElementType);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setElementType (ElementType newElementType) {
        if (newElementType != elementType) {
            NotificationChain msgs = null;
            if (elementType != null) msgs = ((InternalEObject) elementType).eInverseRemove (this, GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT, ElementType.class, msgs);

            if (newElementType != null) msgs = ((InternalEObject) newElementType).eInverseAdd (this, GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT, ElementType.class, msgs);

            msgs = basicSetElementType (newElementType, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE, newElementType, newElementType));

    }

    public String getEditPartClassNameGen () {
        return editPartClassName;
    }

    public String getEditPartClassName () {
        return getValidClassName (getEditPartClassNameGen (), this, EDIT_PART_SUFFIX);
    }

    public void setEditPartClassName (String newEditPartClassName) {
        String oldEditPartClassName = editPartClassName;
        editPartClassName = newEditPartClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME, oldEditPartClassName, editPartClassName));

    }

    public String getItemSemanticEditPolicyClassNameGen () {
        return itemSemanticEditPolicyClassName;
    }

    public String getItemSemanticEditPolicyClassName () {
        return getValidClassName (getItemSemanticEditPolicyClassNameGen (), this, ITEM_SEMANTIC_EDIT_POLICY_SUFFIX);
    }

    public void setItemSemanticEditPolicyClassName (String newItemSemanticEditPolicyClassName) {
        String oldItemSemanticEditPolicyClassName = itemSemanticEditPolicyClassName;
        itemSemanticEditPolicyClassName = newItemSemanticEditPolicyClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME, oldItemSemanticEditPolicyClassName, itemSemanticEditPolicyClassName));

    }

    public String getNotationViewFactoryClassNameGen () {
        return notationViewFactoryClassName;
    }

    public String getNotationViewFactoryClassName () {
        return getValidClassName (getNotationViewFactoryClassNameGen (), this, NOTATION_VIEW_FACTORY_SUFFIX);
    }

    public void setNotationViewFactoryClassName (String newNotationViewFactoryClassName) {
        String oldNotationViewFactoryClassName = notationViewFactoryClassName;
        notationViewFactoryClassName = newNotationViewFactoryClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME, oldNotationViewFactoryClassName, notationViewFactoryClassName));

    }

    public Viewmap getViewmap () {
        return viewmap;
    }

    public NotificationChain basicSetViewmap (Viewmap newViewmap, NotificationChain msgs) {
        Viewmap oldViewmap = viewmap;
        viewmap = newViewmap;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__VIEWMAP, oldViewmap, newViewmap);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setViewmap (Viewmap newViewmap) {
        if (newViewmap != viewmap) {
            NotificationChain msgs = null;
            if (viewmap != null) msgs = ((InternalEObject) viewmap).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_COMMON_BASE__VIEWMAP, null, msgs);

            if (newViewmap != null) msgs = ((InternalEObject) newViewmap).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_COMMON_BASE__VIEWMAP, null, msgs);

            msgs = basicSetViewmap (newViewmap, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__VIEWMAP, newViewmap, newViewmap));

    }

    public EList < Behaviour > getBehaviour () {
        if (behaviour == null) {
            behaviour = new EObjectContainmentWithInverseEList < Behaviour > (Behaviour.class, this, GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR, GMFGenPackage.BEHAVIOUR__SUBJECT);
        }
        return behaviour;
    }

    public abstract boolean isSansDomain ();

    static boolean isEmpty (String s) {
        return s == null || s.trim ().length () == 0;
    }

    static String getValidClassName (String s) {
        assert ! isEmpty (s);
        s = CodeGenUtil.validJavaIdentifier (s);
        return Character.toUpperCase (s.charAt (0)) + s.substring (1);
    }

    static String getValidClassName (String s, GenCommonBase genElement, String suffixPart) {
        assert genElement != null;
        assert suffixPart != null;
        if (isEmpty (s)) {
            String prefixPart = genElement.getClassNamePrefix ();
            if (isEmpty (prefixPart)) {
                prefixPart = DEFAULT_CLASS_NAME_PREFIX;
            }
            s = prefixPart + suffixPart;
        }
        return s;
    }

    public abstract String getClassNamePrefix ();

    public final String getClassNameSuffux () {
        return "";
    }

    public final String getUniqueIdentifier () {
        String prefixPart = isEmpty (getClassNamePrefix ()) ? DEFAULT_CLASS_NAME_PREFIX : getClassNamePrefix ();
        return prefixPart + '_' + getVisualID ();
    }

    public ViewmapLayoutType getLayoutType () {
        Viewmap viewmap = getViewmap ();
        return viewmap == null ? ViewmapLayoutType.UNKNOWN_LITERAL : viewmap.getLayoutType ();
    }

    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE :
                if (elementType != null) msgs = ((InternalEObject) elementType).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE, null, msgs);

                return basicSetElementType ((ElementType) otherEnd, msgs);
            case GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getBehaviour ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE :
                return basicSetElementType (null, msgs);
            case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP :
                return basicSetViewmap (null, msgs);
            case GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR :
                return ((InternalEList < ? >) getBehaviour ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS :
                if (resolve) return getDiagramRunTimeClass ();

                return basicGetDiagramRunTimeClass ();
            case GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID :
                return new Integer (getVisualID ());
            case GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE :
                return getElementType ();
            case GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME :
                return getEditPartClassName ();
            case GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                return getItemSemanticEditPolicyClassName ();
            case GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME :
                return getNotationViewFactoryClassName ();
            case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP :
                return getViewmap ();
            case GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR :
                return getBehaviour ();
            case GMFGenPackage.GEN_COMMON_BASE__SANS_DOMAIN :
                return isSansDomain () ? Boolean.TRUE : Boolean.FALSE;
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS :
                setDiagramRunTimeClass ((GenClass) newValue);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID :
                setVisualID (((Integer) newValue).intValue ());
                return;
            case GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE :
                setElementType ((ElementType) newValue);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME :
                setEditPartClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                setItemSemanticEditPolicyClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME :
                setNotationViewFactoryClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP :
                setViewmap ((Viewmap) newValue);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR :
                getBehaviour ().clear ();
                getBehaviour ().addAll ((Collection < ? extends Behaviour >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS :
                setDiagramRunTimeClass ((GenClass) null);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID :
                setVisualID (VISUAL_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE :
                setElementType ((ElementType) null);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME :
                setEditPartClassName (EDIT_PART_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                setItemSemanticEditPolicyClassName (ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME :
                setNotationViewFactoryClassName (NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP :
                setViewmap ((Viewmap) null);
                return;
            case GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR :
                getBehaviour ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS :
                return diagramRunTimeClass != null;
            case GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID :
                return visualID != VISUAL_ID_EDEFAULT;
            case GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE :
                return elementType != null;
            case GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME :
                return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : ! EDIT_PART_CLASS_NAME_EDEFAULT.equals (editPartClassName);
            case GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
                return ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? itemSemanticEditPolicyClassName != null : ! ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals (itemSemanticEditPolicyClassName);
            case GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME :
                return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : ! NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals (notationViewFactoryClassName);
            case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP :
                return viewmap != null;
            case GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR :
                return behaviour != null && ! behaviour.isEmpty ();
            case GMFGenPackage.GEN_COMMON_BASE__SANS_DOMAIN :
                return isSansDomain () != SANS_DOMAIN_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    public String getEditPartQualifiedClassName () {
        return getDiagram ().getEditPartsPackageName () + '.' + getEditPartClassName ();
    }

    public String getItemSemanticEditPolicyQualifiedClassName () {
        return getDiagram ().getEditPoliciesPackageName () + '.' + getItemSemanticEditPolicyClassName ();
    }

    public String getNotationViewFactoryQualifiedClassName () {
        return getDiagram ().getNotationViewFactoriesPackageName () + '.' + getNotationViewFactoryClassName ();
    }

    public abstract GenDiagram getDiagram ();

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (visualID: ");
        result.append (visualID);
        result.append (", editPartClassName: ");
        result.append (editPartClassName);
        result.append (", itemSemanticEditPolicyClassName: ");
        result.append (itemSemanticEditPolicyClassName);
        result.append (", notationViewFactoryClassName: ");
        result.append (notationViewFactoryClassName);
        result.append (')');
        return result.toString ();
    }

    protected static String asJavaConstantName (String name) {
        name = name.toUpperCase ();
        return CodeGenUtil.capName (CodeGenUtil.validJavaIdentifier (name));
    }

    @SuppressWarnings("unchecked")
    public < T extends Behaviour > List < T > getBehaviour (Class < T > behaviourClass) {
        ArrayList < T > rv = new ArrayList < T > (getBehaviour ().size ());
        for (Iterator it = getBehaviour ().iterator ();
        it.hasNext ();) {
            Object next = it.next ();
            if (next instanceof SharedBehaviour) {
                next = ((SharedBehaviour) next).getDelegate ();
            }
            if (behaviourClass.isInstance (next)) {
                rv.add ((T) next);
            }
        }
        return rv;
    }

}

