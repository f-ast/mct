package org.eclipse.gmf.runtime.common.ui.action.actions.global;

import java.util.Enumeration;

import java.util.Hashtable;

import java.util.Vector;

import org.eclipse.jface.action.IAction;

import org.eclipse.ui.IActionBars;

import org.eclipse.ui.IPartListener;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.gmf.runtime.common.ui.action.global.GlobalAction;

import org.eclipse.gmf.runtime.common.ui.action.global.GlobalActionId;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalCloseAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalCopyAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalCutAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalDeleteAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalFindAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalMoveAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalOpenAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalPasteAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalPropertiesAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalRedoAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalRefreshAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalRenameAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalRevertAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalSaveAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalSelectAllAction;

import org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalUndoAction;

public class GlobalActionManager {
    private Hashtable listOfActions = new Hashtable ();
    private Vector listOfActionIds = new Vector ();
    private static GlobalActionManager instance = new GlobalActionManager ();

    public static GlobalActionManager getInstance () {
        return instance;
    }

    protected GlobalActionManager () {
        super ();
        addActionId (GlobalActionId.CUT);
        addActionId (GlobalActionId.COPY);
        addActionId (GlobalActionId.PASTE);
        addActionId (GlobalActionId.DELETE);
        addActionId (GlobalActionId.SELECT_ALL);
        addActionId (GlobalActionId.UNDO);
        addActionId (GlobalActionId.REDO);
        addActionId (GlobalActionId.PRINT);
        addActionId (GlobalActionId.OPEN);
        addActionId (GlobalActionId.CLOSE);
        addActionId (GlobalActionId.MOVE);
        addActionId (GlobalActionId.RENAME);
        addActionId (GlobalActionId.FIND);
        addActionId (GlobalActionId.PROPERTIES);
        addActionId (GlobalActionId.SAVE);
        addActionId (GlobalActionId.REFRESH);
        addActionId (GlobalActionId.REVERT);
    }

    public GlobalAction getGlobalActionHandler (final IWorkbenchPart part, String globalActionId) {
        assert null != part;
        assert null != globalActionId;
        GlobalAction action = null;
        Hashtable actionList = (Hashtable) getListOfActions ().get (part);
        if (actionList != null) {
            action = (GlobalAction) actionList.get (globalActionId);
            if (action == null) {
                action = createActionHandler (part, globalActionId);
                if (action == null) {
                    return action;
                }
                actionList.put (globalActionId, action);
                getListOfActions ().put (part, actionList);
            }
        } else {
            actionList = new Hashtable ();
            action = createActionHandler (part, globalActionId);
            if (action == null) {
                return action;
            }
            actionList.put (globalActionId, action);
            getListOfActions ().put (part, actionList);
            part.getSite ().getPage ().addPartListener (new IPartListener () {
                private IWorkbenchPart localPart = part;

                public void partActivated (IWorkbenchPart workbenchPart) {
                }

                public void partBroughtToTop (IWorkbenchPart workbenchPart) {
                }

                public void partClosed (IWorkbenchPart workbenchPart) {
                    if (workbenchPart != null && localPart == workbenchPart && getListOfActions ().containsKey (workbenchPart)) {
                        getListOfActions ().remove (workbenchPart);
                        workbenchPart.getSite ().getPage ().removePartListener (this);
                        localPart = null;
                    }
                }

                public void partDeactivated (IWorkbenchPart workbenchPart) {
                }

                public void partOpened (IWorkbenchPart workbenchPart) {
                }

            }

            );
        }
        return action;
    }

    public GlobalAction createActionHandler (IWorkbenchPage page, String id) {
        GlobalAction action = null;
        if (id.equals (GlobalActionId.CUT)) action = new GlobalCutAction (page);
        else if (id.equals (GlobalActionId.COPY)) action = new GlobalCopyAction (page);
        else if (id.equals (GlobalActionId.PASTE)) action = new GlobalPasteAction (page);
        else if (id.equals (GlobalActionId.UNDO)) action = new GlobalUndoAction (page);
        else if (id.equals (GlobalActionId.REDO)) action = new GlobalRedoAction (page);
        else if (id.equals (GlobalActionId.DELETE)) action = new GlobalDeleteAction (page);
        else if (id.equals (GlobalActionId.SELECT_ALL)) action = new GlobalSelectAllAction (page);
        else if (id.equals (GlobalActionId.PRINT)) action = new GlobalPrintAction (page);
        else if (id.equals (GlobalActionId.MOVE)) action = new GlobalMoveAction (page);
        else if (id.equals (GlobalActionId.OPEN)) action = new GlobalOpenAction (page);
        else if (id.equals (GlobalActionId.CLOSE)) action = new GlobalCloseAction (page);
        else if (id.equals (GlobalActionId.RENAME)) action = new GlobalRenameAction (page);
        else if (id.equals (GlobalActionId.REFRESH)) action = new GlobalRefreshAction (page);
        else if (id.equals (GlobalActionId.REVERT)) action = new GlobalRevertAction (page);
        else if (id.equals (GlobalActionId.FIND)) action = new GlobalFindAction (page);
        else if (id.equals (GlobalActionId.PROPERTIES)) action = new GlobalPropertiesAction (page);
        else if (id.equals (GlobalActionId.SAVE)) action = new GlobalSaveAction (page);

        if (action != null) action.init ();

        return action;
    }

    public GlobalAction createActionHandler (IWorkbenchPart part, String id) {
        GlobalAction action = null;
        if (id.equals (GlobalActionId.CUT)) action = new GlobalCutAction (part);
        else if (id.equals (GlobalActionId.COPY)) action = new GlobalCopyAction (part);
        else if (id.equals (GlobalActionId.PASTE)) action = new GlobalPasteAction (part);
        else if (id.equals (GlobalActionId.UNDO)) action = new GlobalUndoAction (part);
        else if (id.equals (GlobalActionId.REDO)) action = new GlobalRedoAction (part);
        else if (id.equals (GlobalActionId.DELETE)) action = new GlobalDeleteAction (part);
        else if (id.equals (GlobalActionId.SELECT_ALL)) action = new GlobalSelectAllAction (part);
        else if (id.equals (GlobalActionId.PRINT)) action = new GlobalPrintAction (part);
        else if (id.equals (GlobalActionId.MOVE)) action = new GlobalMoveAction (part);
        else if (id.equals (GlobalActionId.OPEN)) action = new GlobalOpenAction (part);
        else if (id.equals (GlobalActionId.CLOSE)) action = new GlobalCloseAction (part);
        else if (id.equals (GlobalActionId.RENAME)) action = new GlobalRenameAction (part);
        else if (id.equals (GlobalActionId.REFRESH)) action = new GlobalRefreshAction (part);
        else if (id.equals (GlobalActionId.REVERT)) action = new GlobalRevertAction (part);
        else if (id.equals (GlobalActionId.FIND)) action = new GlobalFindAction (part);
        else if (id.equals (GlobalActionId.PROPERTIES)) action = new GlobalPropertiesAction (part);
        else if (id.equals (GlobalActionId.SAVE)) action = new GlobalSaveAction (part);

        if (action != null) action.init ();

        return action;
    }

    private Hashtable getListOfActions () {
        return listOfActions;
    }

    public GlobalAction [] createGlobalActions (IWorkbenchPart part) {
        assert null != part;
        Vector list = new Vector ();
        for (int i = 0;
        i < getListOfActionIds ().size (); i ++) {
            GlobalAction action = getGlobalActionHandler (part, (String) getListOfActionIds ().elementAt (i));
            if (action != null) {
                list.addElement (action);
            }
        }
        GlobalAction [] array = new GlobalAction [list.size ()];
        list.copyInto (array);
        return array;
    }

    public GlobalAction [] createGlobalActions (IWorkbenchPart part, String [] actionIds) {
        assert null != part;
        assert null != actionIds;
        assert (actionIds.length > 0);
        Vector list = new Vector ();
        GlobalAction action = null;
        for (int i = 0;
        i < actionIds.length; i ++) {
            action = getGlobalActionHandler (part, actionIds [i]);
            if (action != null) {
                list.addElement (action);
            }
        }
        GlobalAction [] array = new GlobalAction [list.size ()];
        list.copyInto (array);
        return array;
    }

    public GlobalAction getGlobalAction (IWorkbenchPart part, String actionId) {
        assert null != part;
        assert null != actionId;
        GlobalAction action = null;
        Hashtable actionList = (Hashtable) getListOfActions ().get (part);
        if (actionList != null) {
            action = (GlobalAction) actionList.get (actionId);
        }
        return action;
    }

    public void setGlobalActionHandlers (IActionBars bar, IWorkbenchPart part) {
        assert null != bar;
        assert null != part;
        if (! getListOfActions ().containsKey (part)) {
            createGlobalActions (part);
        }
        Hashtable actionList = (Hashtable) getListOfActions ().get (part);
        if (actionList == null) {
            return;
        }
        Enumeration enumeration = actionList.elements ();
        while (enumeration.hasMoreElements ()) {
            IAction action = (IAction) enumeration.nextElement ();
            if (action.getId () != null) {
                bar.setGlobalActionHandler (action.getId (), action);
            }
        }
        bar.updateActionBars ();
    }

    public void unSetGlobalActionHandlers (IActionBars bar, IWorkbenchPart part) {
        assert null != bar;
        assert null != part;
        if (! getListOfActions ().containsKey (part)) {
            createGlobalActions (part);
        }
        Hashtable actionList = (Hashtable) getListOfActions ().get (part);
        if (actionList == null) {
            return;
        }
        Enumeration enumeration = actionList.elements ();
        while (enumeration.hasMoreElements ()) {
            IAction action = (IAction) enumeration.nextElement ();
            if (action.getId () != null) {
                bar.setGlobalActionHandler (action.getId (), null);
            }
        }
        bar.updateActionBars ();
    }

    public void refreshGlobalActions (IWorkbenchPart part) {
        assert null != part;
        if (! getListOfActions ().containsKey (part)) {
            return;
        }
        Hashtable actionList = (Hashtable) getListOfActions ().get (part);
        if (actionList == null) {
            return;
        }
        Enumeration enumeration = actionList.elements ();
        while (enumeration.hasMoreElements ()) {
            ((GlobalAction) enumeration.nextElement ()).refresh ();
        }
    }

    private Vector getListOfActionIds () {
        return listOfActionIds;
    }

    protected void addActionId (String actionId) {
        getListOfActionIds ().addElement (actionId);
    }

}

