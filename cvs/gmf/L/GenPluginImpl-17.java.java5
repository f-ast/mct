package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import java.util.Collections;

import java.util.HashSet;

import java.util.Iterator;

import java.util.LinkedHashSet;

import java.util.Set;

import org.eclipse.emf.codegen.ecore.genmodel.GenModel;

import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.BasicEList;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.common.util.TreeIterator;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;

import org.eclipse.gmf.codegen.gmfgen.GenPlugin;

import org.eclipse.gmf.codegen.gmfgen.Viewmap;

public class GenPluginImpl extends EObjectImpl implements GenPlugin {
    protected static final String ID_EDEFAULT = null;
    protected String iD = ID_EDEFAULT;
    protected static final String NAME_EDEFAULT = null;
    protected String name = NAME_EDEFAULT;
    protected static final String PROVIDER_EDEFAULT = "Sample Plugin Provider, Inc";
    protected String provider = PROVIDER_EDEFAULT;
    protected static final String VERSION_EDEFAULT = "1.0.0.qualifier";
    protected String version = VERSION_EDEFAULT;
    protected static final boolean PRINTING_ENABLED_EDEFAULT = false;
    protected boolean printingEnabled = PRINTING_ENABLED_EDEFAULT;
    protected static final String ACTIVATOR_CLASS_NAME_EDEFAULT = null;
    protected String activatorClassName = ACTIVATOR_CLASS_NAME_EDEFAULT;

    protected GenPluginImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenPlugin ();
    }

    public GenEditorGenerator getEditorGen () {
        if (eContainerFeatureID != GMFGenPackage.GEN_PLUGIN__EDITOR_GEN) return null;

        return (GenEditorGenerator) eContainer ();
    }

    public String getID () {
        String value = getIDGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            String prefix = "design";
            if (getEditorGen ().getDomainGenModel () != null) {
                prefix = getEditorGen ().getDomainGenModel ().getModelPluginID ();
            }
            return prefix + ".diagram";
        }
        return value;
    }

    public String getIDGen () {
        return iD;
    }

    public void setID (String newID) {
        String oldID = iD;
        iD = newID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PLUGIN__ID, oldID, iD));

    }

    public String getNameGen () {
        return name;
    }

    public String getName () {
        String result = getNameGen ();
        if (GenCommonBaseImpl.isEmpty (result)) {
            GenEditorGenerator generator = getEditorGen ();
            if (generator != null) {
                String prefix = "Diagram Editor";
                GenModel genModel = generator.getDomainGenModel ();
                if (genModel != null) {
                    prefix = genModel.getModelName ();
                }
                result = prefix + " Plugin";
            }
        }
        return result;
    }

    public void setName (String newName) {
        String oldName = name;
        name = newName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PLUGIN__NAME, oldName, name));

    }

    public String getProvider () {
        return provider;
    }

    public void setProvider (String newProvider) {
        String oldProvider = provider;
        provider = newProvider;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PLUGIN__PROVIDER, oldProvider, provider));

    }

    public String getVersion () {
        return version;
    }

    public void setVersion (String newVersion) {
        String oldVersion = version;
        version = newVersion;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PLUGIN__VERSION, oldVersion, version));

    }

    public boolean isPrintingEnabled () {
        return printingEnabled;
    }

    public void setPrintingEnabled (boolean newPrintingEnabled) {
        boolean oldPrintingEnabled = printingEnabled;
        printingEnabled = newPrintingEnabled;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PLUGIN__PRINTING_ENABLED, oldPrintingEnabled, printingEnabled));

    }

    public String getActivatorClassName () {
        String value = getActivatorClassNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = ((GenDiagramImpl) getDiagram ()).getDomainPackageCapName () + "DiagramEditorPlugin";
        }
        return value;
    }

    public String getActivatorClassNameGen () {
        return activatorClassName;
    }

    public void setActivatorClassName (String newActivatorClassName) {
        String oldActivatorClassName = activatorClassName;
        activatorClassName = newActivatorClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PLUGIN__ACTIVATOR_CLASS_NAME, oldActivatorClassName, activatorClassName));

    }

    public EList < String > getRequiredPluginIDs () {
        Collection < String > requiredPlugins = new LinkedHashSet < String > ();
        if (getEditorGen () != null) {
            final GenModel genModel = getEditorGen ().getDomainGenModel ();
            if (genModel != null) {
                requiredPlugins.add (genModel.getModelPluginID ());
                requiredPlugins.add (genModel.getEditPluginID ());
                for (Iterator < GenPackage > it = genModel.getAllUsedGenPackagesWithClassifiers ().iterator ();
                it.hasNext ();) {
                    GenModel nextGenModel = it.next ().getGenModel ();
                    if (nextGenModel.hasEditSupport ()) {
                        requiredPlugins.add (nextGenModel.getModelPluginID ());
                        requiredPlugins.add (nextGenModel.getEditPluginID ());
                    }
                }
            }
        }
        requiredPlugins.addAll (getExpressionsRequiredPluginIDs ());
        requiredPlugins.addAll (getValidationRequiredPluginIDs ());
        requiredPlugins.addAll (getMetricsRequiredPluginIDs ());
        requiredPlugins.addAll (getViewmapRequiredPluginIDs ());
        for (Iterator < String > it = requiredPlugins.iterator ();
        it.hasNext ();) {
            if (GenCommonBaseImpl.isEmpty (it.next ())) {
                it.remove ();
            }
        }
        return new BasicEList < String > (requiredPlugins);
    }

    public String getActivatorQualifiedClassName () {
        return getEditorGen ().getEditor ().getPackageName () + '.' + getActivatorClassName ();
    }

    private Set < String > getExpressionsRequiredPluginIDs () {
        Set < String > requiredIDs = new HashSet < String > ();
        if (getEditorGen ().getExpressionProviders () != null) {
            for (GenExpressionProviderBase nextProvider : getEditorGen ().getExpressionProviders ().getProviders ()) {
                requiredIDs.addAll (nextProvider.getRequiredPluginIDs ());
            }
        }
        return requiredIDs;
    }

    private Collection < String > getViewmapRequiredPluginIDs () {
        Collection < String > result = null;
        for (TreeIterator < EObject > contents = EcoreUtil.getAllContents (getDiagram ().getAllNodes ());
        contents.hasNext ();) {
            EObject next = contents.next ();
            if (next instanceof Viewmap && next.eIsSet (GMFGenPackage.eINSTANCE.getViewmap_RequiredPluginIDs ())) {
                if (result == null) {
                    result = new HashSet < String > ();
                }
                result.addAll (((Viewmap) next).getRequiredPluginIDs ());
                contents.prune ();
            }
        }
        if (result == null) {
            return Collections.emptyList ();
        }
        return result;
    }

    private Set < String > getValidationRequiredPluginIDs () {
        if (getDiagram ().isValidationEnabled () || getEditorGen ().hasAudits ()) {
            HashSet < String > pluginIDs = new HashSet < String > ();
            pluginIDs.add ("org.eclipse.emf.validation");
            if (getEditorGen ().getAudits () != null) {
                collectGenPackagesRequiredPluginIDs (getEditorGen ().getAudits ().getTargetedModelPackages (), pluginIDs);
            }
            return pluginIDs;
        }
        return Collections.emptySet ();
    }

    private Set < String > getMetricsRequiredPluginIDs () {
        if (getEditorGen ().getMetrics () != null) {
            HashSet < String > pluginIDs = new HashSet < String > ();
            collectGenPackagesRequiredPluginIDs (getEditorGen ().getMetrics ().getAllTargetedModelPackages (), pluginIDs);
            return pluginIDs;
        }
        return Collections.emptySet ();
    }

    private void collectGenPackagesRequiredPluginIDs (Collection < GenPackage > genPackages, Set < String > pluginIDs) {
        for (GenPackage nextPackage : genPackages) {
            pluginIDs.add (nextPackage.getGenModel ().getModelPluginID ());
        }
    }

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_PLUGIN__EDITOR_GEN :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_PLUGIN__EDITOR_GEN, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_PLUGIN__EDITOR_GEN :
                return eBasicSetContainer (null, GMFGenPackage.GEN_PLUGIN__EDITOR_GEN, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_PLUGIN__EDITOR_GEN :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_EDITOR_GENERATOR__PLUGIN, GenEditorGenerator.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_PLUGIN__EDITOR_GEN :
                return getEditorGen ();
            case GMFGenPackage.GEN_PLUGIN__ID :
                return getID ();
            case GMFGenPackage.GEN_PLUGIN__NAME :
                return getName ();
            case GMFGenPackage.GEN_PLUGIN__PROVIDER :
                return getProvider ();
            case GMFGenPackage.GEN_PLUGIN__VERSION :
                return getVersion ();
            case GMFGenPackage.GEN_PLUGIN__PRINTING_ENABLED :
                return isPrintingEnabled () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_PLUGIN__ACTIVATOR_CLASS_NAME :
                return getActivatorClassName ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_PLUGIN__ID :
                setID ((String) newValue);
                return;
            case GMFGenPackage.GEN_PLUGIN__NAME :
                setName ((String) newValue);
                return;
            case GMFGenPackage.GEN_PLUGIN__PROVIDER :
                setProvider ((String) newValue);
                return;
            case GMFGenPackage.GEN_PLUGIN__VERSION :
                setVersion ((String) newValue);
                return;
            case GMFGenPackage.GEN_PLUGIN__PRINTING_ENABLED :
                setPrintingEnabled (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_PLUGIN__ACTIVATOR_CLASS_NAME :
                setActivatorClassName ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_PLUGIN__ID :
                setID (ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_PLUGIN__NAME :
                setName (NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_PLUGIN__PROVIDER :
                setProvider (PROVIDER_EDEFAULT);
                return;
            case GMFGenPackage.GEN_PLUGIN__VERSION :
                setVersion (VERSION_EDEFAULT);
                return;
            case GMFGenPackage.GEN_PLUGIN__PRINTING_ENABLED :
                setPrintingEnabled (PRINTING_ENABLED_EDEFAULT);
                return;
            case GMFGenPackage.GEN_PLUGIN__ACTIVATOR_CLASS_NAME :
                setActivatorClassName (ACTIVATOR_CLASS_NAME_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_PLUGIN__EDITOR_GEN :
                return getEditorGen () != null;
            case GMFGenPackage.GEN_PLUGIN__ID :
                return ID_EDEFAULT == null ? iD != null : ! ID_EDEFAULT.equals (iD);
            case GMFGenPackage.GEN_PLUGIN__NAME :
                return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT.equals (name);
            case GMFGenPackage.GEN_PLUGIN__PROVIDER :
                return PROVIDER_EDEFAULT == null ? provider != null : ! PROVIDER_EDEFAULT.equals (provider);
            case GMFGenPackage.GEN_PLUGIN__VERSION :
                return VERSION_EDEFAULT == null ? version != null : ! VERSION_EDEFAULT.equals (version);
            case GMFGenPackage.GEN_PLUGIN__PRINTING_ENABLED :
                return printingEnabled != PRINTING_ENABLED_EDEFAULT;
            case GMFGenPackage.GEN_PLUGIN__ACTIVATOR_CLASS_NAME :
                return ACTIVATOR_CLASS_NAME_EDEFAULT == null ? activatorClassName != null : ! ACTIVATOR_CLASS_NAME_EDEFAULT.equals (activatorClassName);
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (iD: ");
        result.append (iD);
        result.append (", name: ");
        result.append (name);
        result.append (", provider: ");
        result.append (provider);
        result.append (", version: ");
        result.append (version);
        result.append (", printingEnabled: ");
        result.append (printingEnabled);
        result.append (", activatorClassName: ");
        result.append (activatorClassName);
        result.append (')');
        return result.toString ();
    }

    private GenDiagram getDiagram () {
        return getEditorGen ().getDiagram ();
    }

}

