package org.eclipse.gmf.runtime.diagram.core.util;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Collections;

import java.util.HashSet;

import java.util.Iterator;

import java.util.List;

import java.util.Set;

import java.util.Stack;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.xmi.XMLResource;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.diagram.core.internal.DiagramDebugOptions;

import org.eclipse.gmf.runtime.diagram.core.internal.DiagramPlugin;

import org.eclipse.gmf.runtime.diagram.core.internal.DiagramStatusCodes;

import org.eclipse.gmf.runtime.diagram.core.internal.commands.PersistElementCommand;

import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.emf.core.util.PackageUtil;

import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.LayoutConstraint;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.Style;

import org.eclipse.gmf.runtime.notation.View;

public class ViewUtil {
    public static final int APPEND = - 1;

    public static List makeViewsAdaptable (Collection views) {
        List list = new ArrayList ();
        Iterator it = views.iterator ();
        while (it.hasNext ()) {
            list.add (new EObjectAdapter ((View) it.next ()));
        }
        return list;
    }

    public static void persistElement (View view) {
        assert null != view : "null view in ViewUtil.persistElement";
        TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain (view);
        if (! view.isMutable ()) {
            View viewToPersist = getTopViewToPersist (view);
            if (viewToPersist != null) {
                PersistElementCommand pvc = new PersistElementCommand (editingDomain, viewToPersist);
                try {
                    pvc.execute (new NullProgressMonitor (), null);
                } catch (ExecutionException e) {
                    Trace.catching (DiagramPlugin.getInstance (), DiagramDebugOptions.EXCEPTIONS_CATCHING, ViewUtil.class, "persistElement", e);
                    Log.error (DiagramPlugin.getInstance (), DiagramStatusCodes.IGNORED_EXCEPTION_WARNING, e.getLocalizedMessage (), e);
                }
                CommandResult result = pvc.getCommandResult ();
                view = (View) result.getReturnValue ();
            }
        }
    }

    static public View getTopViewToPersist (View view) {
        EObject container = view.eContainer ();
        if (container == null) return null;

        if (view instanceof Edge) {
            Diagram dContainer = (Diagram) container;
            if (dContainer.eIsSet (NotationPackage.Literals.DIAGRAM__TRANSIENT_EDGES)) return view;
            else return (getTopViewToPersist (dContainer));

        } else if (container instanceof View) {
            View vContainer = (View) container;
            if (vContainer.eIsSet (NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN)) return view;
            else return (getTopViewToPersist (vContainer));

        }

        return null;
    }

    public static void destroy (View view) {
        if (view == null) return;

        Iterator it = new ArrayList (view.getChildren ()).iterator ();
        while (it.hasNext ()) {
            View child = (View) it.next ();
            destroy (child);
        }
        DestroyElementCommand.destroy (view);
    }

    static public View getContainerView (View eObject) {
        EObject container = eObject.eContainer ();
        if (container instanceof View) {
            return (View) container;
        }
        return null;
    }

    public static void insertChildView (View containerView, View childView, int index, boolean persisted) {
        if (persisted) {
            insertPersistedElement (containerView, childView, index);
        } else {
            insertTransientElement (containerView, childView);
        }
    }

    static private void insertTransientElement (final View container, final View child) {
        if (child instanceof Edge) {
            Diagram diagram = (Diagram) container;
            diagram.insertEdge ((Edge) child, false);
        } else {
            container.insertChild (child, false);
        }
        return;
    }

    static private void insertPersistedElement (View container, View child, int index) {
        if (child instanceof Edge) {
            Diagram diagram = (Diagram) container;
            if (index == - 1) diagram.insertEdge ((Edge) child);
            else diagram.insertEdgeAt ((Edge) child, index);

        } else {
            if (index == - 1) container.insertChild (child);
            else container.insertChildAt (child, index);

        }
    }

    static public boolean isTransient (EObject view) {
        EStructuralFeature sFeature = view.eContainingFeature ();
        if (sFeature == null) return false;

        if (sFeature.isTransient ()) {
            return true;
        }
        EObject container = view.eContainer ();
        if (container != null) {
            return isTransient (container);
        }
        return false;
    }

    public static View getChildBySemanticHint (View view, String semanticHint) {
        for (Iterator children = view.getChildren ().iterator ();
        children.hasNext ();) {
            View child = (View) children.next ();
            if (semanticHint.equals (child.getType ())) {
                return child;
            }
        }
        return null;
    }

    public static boolean isPropertySupported (View view, Object id) {
        if (id instanceof String) {
            EStructuralFeature feature = (EStructuralFeature) PackageUtil.getElement ((String) id);
            if (feature != null) {
                return isPropertySupported (view, feature, feature.getEContainingClass ());
            }
        }
        return false;
    }

    public static boolean isFeatureSupported (View view, EStructuralFeature feature) {
        if (feature != null) {
            return isPropertySupported (view, feature, feature.getEContainingClass ());
        }
        return false;
    }

    public static boolean isPropertySupported (View view, EStructuralFeature feature, EClass featureClass) {
        if (view.getStyle (featureClass) != null) return true;

        if (view instanceof Node) {
            LayoutConstraint constraint = ((Node) view).getLayoutConstraint ();
            if (constraint != null && featureClass.isInstance (constraint)) return true;

        }
        return featureClass.isInstance (view);
    }

    static public final Object getStructuralFeatureValue (View view, EStructuralFeature feature) {
        if (feature != null) {
            return ViewUtil.getPropertyValue (view, feature, feature.getEContainingClass ());
        }
        return null;
    }

    public static Object getPropertyValue (View view, EStructuralFeature feature, EClass featureClass) {
        Style style = view.getStyle (featureClass);
        if (style != null) return style.eGet (feature);

        if (view instanceof Node) {
            LayoutConstraint constraint = ((Node) view).getLayoutConstraint ();
            if (constraint != null && featureClass.isInstance (constraint)) return constraint.eGet (feature);

        }
        if (featureClass.isInstance (view)) return view.eGet (feature);

        return feature.getDefaultValue ();
    }

    public static void setStructuralFeatureValue (View view, EStructuralFeature feature, Object value) {
        if (feature != null) {
            ViewUtil.setPropertyValue (view, feature, feature.getEContainingClass (), value);
            return;
        }
    }

    public static void setPropertyValue (View view, EStructuralFeature feature, EClass featureClass, Object value) {
        if (view == null) return;

        Style style = view.getStyle (featureClass);
        if (style != null) {
            style.eSet (feature, value);
            return;
        }
        if (view instanceof Node) {
            Node node = (Node) view;
            LayoutConstraint constraint = node.getLayoutConstraint ();
            if (constraint != null & featureClass.isInstance (constraint)) {
                constraint.eSet (feature, value);
                return;
            }
        }
        if (featureClass.isInstance (view)) {
            view.eSet (feature, value);
            return;
        }
    }

    public static EObject resolveSemanticElement (View view) {
        EObject element = view.getElement ();
        if (element != null && element.eIsProxy ()) {
            TransactionalEditingDomain domain = TransactionUtil.getEditingDomain (view);
            if (domain != null) {
                return EMFCoreUtil.resolve (domain, element);
            }
        }
        return element;
    }

    public static EObject resolve (EObject object) {
        if (object != null && object.eIsProxy ()) {
            TransactionalEditingDomain domain = TransactionUtil.getEditingDomain (object);
            if (domain != null) return EMFCoreUtil.resolve (domain, object);

        }
        return object;
    }

    public static String getSemanticElementClassId (View view) {
        EObject element = view.getElement ();
        return element == null ? null : PackageUtil.getID (EMFCoreUtil.getProxyClass (element));
    }

    public static List getSourceConnections (View view) {
        if (! view.eIsSet (NotationPackage.Literals.VIEW__SOURCE_EDGES)) return Collections.EMPTY_LIST;

        return view.getSourceEdges ();
    }

    public static List getTargetConnections (View view) {
        if (! view.eIsSet (NotationPackage.Literals.VIEW__TARGET_EDGES)) return Collections.EMPTY_LIST;

        return view.getTargetEdges ();
    }

    public static List getSourceConnectionsConnectingVisibleViews (View view) {
        if (! view.eIsSet (NotationPackage.Literals.VIEW__SOURCE_EDGES)) return Collections.EMPTY_LIST;

        List sourceConnections = new ArrayList ();
        Iterator iter = view.getSourceEdges ().iterator ();
        while (iter.hasNext ()) {
            Edge edge = (Edge) iter.next ();
            View target = edge.getTarget ();
            if (edge.isVisible () && isVisible (target)) {
                sourceConnections.add (edge);
            }
        }
        return sourceConnections;
    }

    private static boolean isVisible (View target) {
        if (target.isVisible ()) {
            EObject parent = target.eContainer ();
            if (parent instanceof View) {
                return isVisible ((View) parent);
            }
            return true;
        }
        return false;
    }

    public static List getTargetConnectionsConnectingVisibleViews (View view) {
        if (! view.eIsSet (NotationPackage.Literals.VIEW__TARGET_EDGES)) return Collections.EMPTY_LIST;

        List targteConnections = new ArrayList ();
        Iterator iter = view.getTargetEdges ().iterator ();
        while (iter.hasNext ()) {
            Edge edge = (Edge) iter.next ();
            View source = edge.getSource ();
            if (edge.isVisible () && isVisible (source)) {
                targteConnections.add (edge);
            }
        }
        return targteConnections;
    }

    public static String getSemanticEClassName (View view) {
        EObject eObject = view.getElement ();
        if (eObject != null) return PackageUtil.getID (EMFCoreUtil.getProxyClass (eObject));

        return "";
    }

    public static String getIdStr (View view) {
        String id = ((XMLResource) view.eResource ()).getID (view);
        if (id != null) {
            return id;
        }
        return StringStatics.BLANK;
    }

    static public void repositionChildAt (View container, View child, int newIndex) {
        ViewUtil.persistElement (child);
        if (child.eContainer () != container) throw new IllegalArgumentException ("child is not an existing child of the view");

        if (newIndex == APPEND) throw new IllegalArgumentException ("append position is not allowed for reposition");

        container.removeChild (child);
        container.insertChildAt (child, newIndex);
    }

    static public View getChildByIdStr (View view, String idStr) {
        for (Iterator children = view.getChildren ().iterator ();
        children.hasNext ();) {
            View child = (View) children.next ();
            if (idStr.equals (((XMLResource) child.eResource ()).getID (child))) {
                return child;
            }
        }
        return null;
    }

    public static void setPropertyValue (View view, Object id, Object value) {
        if (id instanceof String) {
            EStructuralFeature feature = (EStructuralFeature) PackageUtil.getElement ((String) id);
            if (feature != null) {
                ViewUtil.setPropertyValue (view, feature, feature.getEContainingClass (), value);
                return;
            }
        }
    }

    static public final Object getPropertyValue (View view, Object id) {
        if (id instanceof String) {
            EStructuralFeature feature = (EStructuralFeature) PackageUtil.getElement ((String) id);
            if (feature != null) {
                return ViewUtil.getPropertyValue (view, feature, feature.getEContainingClass ());
            }
        }
        return null;
    }

    static public View getViewContainer (EObject obj) {
        while (obj != null) {
            if (obj.eContainer () instanceof View) return (View) obj.eContainer ();

            obj = obj.eContainer ();
        }
        return null;
    }

    static public void getAllRelatedEdgesForView (View view, Set < Edge > allEdges) {
        allEdges.addAll (ViewUtil.getSourceConnections (view));
        allEdges.addAll (ViewUtil.getTargetConnections (view));
        for (Iterator itr = view.getChildren ().iterator ();
        itr.hasNext ();) {
            Object obj = itr.next ();
            if (obj instanceof View) {
                getAllRelatedEdgesForView ((View) obj, allEdges);
            }
        }
    }

    static public void getAllRelatedEdgesFromViews (List views, HashSet < Edge > allEdges) {
        for (Iterator itr = views.iterator ();
        itr.hasNext ();) {
            Object obj = itr.next ();
            if (obj instanceof View) {
                getAllRelatedEdgesForView ((View) obj, allEdges);
            }
        }
    }

    static public Set < Edge > getAllInnerEdges (View view) {
        Set < View > allViews = new HashSet < View > ();
        Set < Edge > edges = new HashSet < Edge > ();
        Set < Edge > edgesConnectingViews = new HashSet < Edge > ();
        getAllNestedViews (view, allViews);
        for (View v : allViews) {
            getAllEdgesFromView (v, edges);
        }
        Stack < Edge > connectionsPath = new Stack < Edge > ();
        while (! edges.isEmpty ()) {
            Edge edge = edges.iterator ().next ();
            edges.remove (edge);
            connectionsPath.add (edge);
            View target = edge.getTarget ();
            while (edges.contains (target)) {
                Edge targetEdge = (Edge) target;
                edges.remove (targetEdge);
                connectionsPath.add (targetEdge);
                target = targetEdge.getTarget ();
            }
            if (allViews.contains (target) || edgesConnectingViews.contains (target)) {
                edgesConnectingViews.addAll (connectionsPath);
            }
            connectionsPath.clear ();
        }
        return edgesConnectingViews;
    }

    static private void getAllNestedViews (View view, Set < View > allViews) {
        for (View childView : (List < View >) view.getChildren ()) {
            getAllNestedViews (childView, allViews);
            allViews.add (childView);
        }
    }

    static private void getAllEdgesFromView (View view, Set < Edge > edges) {
        for (Edge e : (List < Edge >) view.getSourceEdges ()) {
            getAllEdgesFromView (e, edges);
            edges.add (e);
        }
    }

}

