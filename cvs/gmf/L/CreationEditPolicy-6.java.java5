package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.ArrayList;

import java.util.Collection;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.editpolicies.AbstractEditPolicy;

import org.eclipse.gef.requests.ChangeBoundsRequest;

import org.eclipse.gef.requests.CreateRequest;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.diagram.core.commands.AddCommand;

import org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.CreateOrSelectElementCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.SemanticCreateCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.XtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateUnspecifiedTypeRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;

import org.eclipse.gmf.runtime.diagram.ui.requests.RefreshConnectionsRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.util.Assert;

import org.eclipse.swt.widgets.Display;

public class CreationEditPolicy extends AbstractEditPolicy {

    public Command getCommand (Request request) {
        if (understandsRequest (request)) {
            if (request instanceof CreateUnspecifiedTypeRequest) {
                return getUnspecifiedTypeCreateCommand ((CreateUnspecifiedTypeRequest) request);
            } else if (request instanceof CreateViewAndElementRequest) {
                return getCreateElementAndViewCommand ((CreateViewAndElementRequest) request);
            } else if (request instanceof CreateViewRequest) {
                return getCreateCommand ((CreateViewRequest) request);
            } else if (request instanceof ChangeBoundsRequest) {
                return getReparentCommand ((ChangeBoundsRequest) request);
            }

            return super.getCommand (request);
        }
        return null;
    }

    public boolean understandsRequest (Request request) {
        return RequestConstants.REQ_CREATE.equals (request.getType ()) || RequestConstants.REQ_ADD.equals (request.getType ()) || super.understandsRequest (request);
    }

    protected boolean shouldReparent (EObject element, EObject newContext) {
        return ! (element == null || element == newContext || element.eContainer () == newContext || isContainedIn (element, newContext));
    }

    private boolean isContainedIn (EObject element, EObject newContext) {
        EObject container = newContext.eContainer ();
        while (container != null) {
            if (container.equals (element)) return true;

            container = container.eContainer ();
        }
        return false;
    }

    protected Command getReparentCommand (ChangeBoundsRequest request) {
        Iterator editParts = request.getEditParts ().iterator ();
        View container = (View) getHost ().getAdapter (View.class);
        EObject context = container == null ? null : ViewUtil.resolveSemanticElement (container);
        CompositeCommand cc = new CompositeCommand (DiagramUIMessages.AddCommand_Label);
        while (editParts.hasNext ()) {
            EditPart ep = (EditPart) editParts.next ();
            if (ep instanceof LabelEditPart) {
                continue;
            }
            View view = (View) ep.getAdapter (View.class);
            if (view == null) {
                continue;
            }
            EObject semantic = ViewUtil.resolveSemanticElement (view);
            if (semantic == null) {
                cc.compose (getReparentViewCommand ((IGraphicalEditPart) ep));
            } else if (context != null && shouldReparent (semantic, context)) {
                cc.compose (getReparentCommand ((IGraphicalEditPart) ep));
            }

        }
        return cc.isEmpty () ? null : new EtoolsProxyCommand (cc.unwrap ());
    }

    protected ICommand getReparentCommand (IGraphicalEditPart gep) {
        CompositeCommand cc = new CompositeCommand (DiagramUIMessages.AddCommand_Label);
        View container = (View) getHost ().getModel ();
        EObject context = ViewUtil.resolveSemanticElement (container);
        View view = (View) gep.getModel ();
        EObject element = ViewUtil.resolveSemanticElement (view);
        if (element != null) {
            Command moveSemanticCmd = getHost ().getCommand (new EditCommandRequestWrapper (new MoveRequest (context, element)));
            cc.compose (new XtoolsProxyCommand (moveSemanticCmd));
        }
        cc.compose (getReparentViewCommand (gep));
        return cc;
    }

    protected ICommand getReparentViewCommand (IGraphicalEditPart gep) {
        View container = (View) getHost ().getModel ();
        View view = (View) gep.getModel ();
        return new AddCommand (new EObjectAdapter (container), new EObjectAdapter (view));
    }

    protected Command getCreateCommand (CreateViewRequest request) {
        CompositeModelCommand cc = new CompositeModelCommand (DiagramUIMessages.AddCommand_Label);
        Iterator descriptors = request.getViewDescriptors ().iterator ();
        while (descriptors.hasNext ()) {
            CreateViewRequest.ViewDescriptor descriptor = (CreateViewRequest.ViewDescriptor) descriptors.next ();
            CreateCommand createCommand = new CreateCommand (descriptor, (View) (getHost ().getModel ()));
            cc.compose (createCommand);
        }
        return new EtoolsProxyCommand (cc.unwrap ());
    }

    protected Command getCreateElementAndViewCommand (CreateViewAndElementRequest request) {
        CreateElementRequestAdapter requestAdapter = request.getViewAndElementDescriptor ().getCreateElementRequestAdapter ();
        CreateElementRequest createElementRequest = (CreateElementRequest) requestAdapter.getAdapter (CreateElementRequest.class);
        if (createElementRequest.getContainer () == null) {
            View view = (View) getHost ().getModel ();
            EObject hostElement;
            if (view instanceof Diagram) {
                hostElement = view.getDiagram ();
            } else {
                hostElement = ViewUtil.resolveSemanticElement (view);
            }
            if (hostElement == null) {
                return null;
            }
            createElementRequest.setContainer (hostElement);
        }
        Command createElementCommand = getHost ().getCommand (new EditCommandRequestWrapper ((CreateElementRequest) requestAdapter.getAdapter (CreateElementRequest.class), request.getExtendedData ()));
        SemanticCreateCommand semanticCommand = new SemanticCreateCommand (requestAdapter, createElementCommand);
        Command viewCommand = getCreateCommand (request);
        Command refreshConnectionCommand = getHost ().getCommand (new RefreshConnectionsRequest (((List) request.getNewObject ())));
        CompositeCommand cc = new CompositeCommand (semanticCommand.getLabel ());
        cc.compose (semanticCommand);
        cc.compose (new XtoolsProxyCommand (viewCommand));
        if (refreshConnectionCommand != null) {
            cc.compose (new XtoolsProxyCommand (refreshConnectionCommand));
        }
        return new EtoolsProxyCommand (cc);
    }

    private Command getUnspecifiedTypeCreateCommand (final CreateUnspecifiedTypeRequest request) {
        final Map createCmds = new HashMap ();
        List validTypes = new ArrayList ();
        for (Iterator iter = request.getElementTypes ().iterator ();
        iter.hasNext ();) {
            IElementType elementType = (IElementType) iter.next ();
            Request createRequest = request.getRequestForType (elementType);
            if (createRequest != null) {
                EditPart target = getHost ().getTargetEditPart (createRequest);
                if (target == null) {
                    continue;
                }
                Command individualCmd = target.getCommand (createRequest);
                if (individualCmd != null && individualCmd.canExecute ()) {
                    createCmds.put (elementType, individualCmd);
                    validTypes.add (elementType);
                }
            }
        }
        if (createCmds.isEmpty ()) {
            return null;
        } else if (createCmds.size () == 1) {
            return (Command) createCmds.values ().toArray () [0];
        } else {
            CreateOrSelectElementCommand selectAndCreateConnectionCmd = new CreateOrSelectElementCommand (Display.getCurrent ().getActiveShell (), validTypes) {
                private Command _createCmd;

                protected CommandResult doExecute (IProgressMonitor progressMonitor) {
                    CommandResult cmdResult = super.doExecute (progressMonitor);
                    if (! cmdResult.getStatus ().isOK ()) {
                        return cmdResult;
                    }
                    IElementType type = (IElementType) cmdResult.getReturnValue ();
                    _createCmd = (Command) createCmds.get (type);
                    Assert.isTrue (_createCmd != null && _createCmd.canExecute ());
                    _createCmd.execute ();
                    CreateRequest createRequest = request.getRequestForType (type);
                    request.setNewObject (((Collection) createRequest.getNewObject ()));
                    return newOKCommandResult ();
                }

                protected CommandResult doUndo () {
                    if (_createCmd != null && _createCmd.canUndo ()) {
                        _createCmd.undo ();
                    }
                    return super.doUndo ();
                }

                protected CommandResult doRedo () {
                    if (_createCmd != null && _createCmd.canExecute ()) {
                        _createCmd.redo ();
                    }
                    return super.doRedo ();
                }

            }

            ;
            return new EtoolsProxyCommand (selectAndCreateConnectionCmd);
        }

    }

    public EditPart getTargetEditPart (Request request) {
        return understandsRequest (request) ? getHost () : null;
    }

}

