package org.eclipse.gmf.runtime.diagram.ui.internal.ruler.commands;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.common.util.EMap;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;

import org.eclipse.gmf.runtime.notation.Guide;

import org.eclipse.gmf.runtime.notation.GuideStyle;

public class DeleteGuideCommand extends AbstractTransactionalCommand {
    private Guide theGuide;

    public DeleteGuideCommand (TransactionalEditingDomain editingDomain, Guide guide) {
        super (editingDomain, DiagramUIMessages.Command_deleteGuide, getWorkspaceFiles (guide));
        theGuide = guide;
    }

    protected CommandResult doExecuteWithResult (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
        EMap guideMap = theGuide.getNodeMap ();
        guideMap.clear ();
        GuideStyle container = (GuideStyle) theGuide.eContainer ();
        container.getHorizontalGuides ().remove (theGuide);
        container.getVerticalGuides ().remove (theGuide);
        theGuide = null;
        return CommandResult.newOKCommandResult ();
    }

}

