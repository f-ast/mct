package org.eclipse.gmf.runtime.diagram.ui.actions;

import org.eclipse.emf.ecore.ENamedElement;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.gef.Request;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramUIActionsMessages;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.requests.ChangeChildPropertyValueRequest;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.util.Assert;

import org.eclipse.ui.IWorkbenchPage;

public abstract class IndividualCompartmentAction extends BooleanPropertyAction {
    private final String compartmentSemanticHint;

    public IndividualCompartmentAction (IWorkbenchPage workbenchPage, String compartmentSemanticHint) {
        super (workbenchPage, MetaModelUtil.getID (NotationPackage.eINSTANCE.getView_Visible ()), DiagramUIActionsMessages.ConstrainedFlowLayoutEditPolicy_changeVisibilityCommand_label);
        Assert.isNotNull (compartmentSemanticHint);
        this.compartmentSemanticHint = compartmentSemanticHint;
    }

    protected Request createTargetRequest () {
        return new ChangeChildPropertyValueRequest (getPropertyName (), getPropertyId (), getCompartmentSemanticHint ());
    }

    protected String getCompartmentSemanticHint () {
        return compartmentSemanticHint;
    }

    protected Object getPropertyValue (final IGraphicalEditPart editPart, final String thePropertyId) {
        return MEditingDomainGetter.getMEditingDomain ((View) editPart.getModel ()).runAsRead (new MRunnable () {

            public Object run () {
                ENamedElement element = MetaModelUtil.getElement (thePropertyId);
                if (element instanceof EStructuralFeature) {
                    View view = editPart.getNotationView ();
                    if (view != null) {
                        View childView = ViewUtil.getChildBySemanticHint (view, getCompartmentSemanticHint ());
                        if (childView != null) {
                            return ViewUtil.getStructuralFeatureValue (childView, (EStructuralFeature) element);
                        }
                    }
                }
                return null;
            }

        }

        );
    }

}

