package org.eclipse.gmf.runtime.common.ui.services.dnd.core;

import java.text.MessageFormat;

import java.util.ArrayList;

import java.util.Arrays;

import java.util.Enumeration;

import java.util.Hashtable;

import java.util.Iterator;

import java.util.List;

import java.util.Vector;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.services.dnd.drag.IDragSourceListener;

import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetListener;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.CommonUIServicesDNDDebugOptions;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.CommonUIServicesDNDPlugin;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.CommonUIServicesDNDStatusCodes;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.core.GetDragListenerOperation;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.core.GetDropListenerOperation;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.core.ListenerOperation;

public class DragDropListenerService extends Service implements IDragDropListenerProvider {
    protected static class ProviderDescriptor extends Service.ProviderDescriptor {
        private Hashtable partInfo = null;

        protected ProviderDescriptor (IConfigurationElement element, Hashtable aPartInfo) {
            super (element);
            assert null != aPartInfo : "aPartInfo cannot be null";
            this.partInfo = aPartInfo;
        }

        public boolean provides (IOperation operation) {
            if (! (operation instanceof GetDragListenerOperation) && ! (operation instanceof GetDropListenerOperation)) {
                return false;
            }
            Class elementType = null;
            String partId = null;
            String operationType = null;
            String transferId = null;
            boolean isCompatible = false;
            if (operation instanceof GetDragListenerOperation) {
                elementType = ((IDragListenerContext) ((GetDragListenerOperation) operation).getContext ()).getSelectedElementType ();
                partId = ((IDragListenerContext) ((GetDragListenerOperation) operation).getContext ()).getActivePart ().getSite ().getId ();
                operationType = ((GetDragListenerOperation) operation).getContext ().getOperationType ();
                transferId = ((IDragListenerContext) ((GetDragListenerOperation) operation).getContext ()).getTransferId ();
                isCompatible = ((IDragListenerContext) ((GetDragListenerOperation) operation).getContext ()).isCompatible ();
            }
            if (operation instanceof GetDropListenerOperation) {
                elementType = ((IDropListenerContext) ((GetDropListenerOperation) operation).getContext ()).getTargetElementType ();
                partId = ((IDropListenerContext) ((GetDropListenerOperation) operation).getContext ()).getActivePart ().getSite ().getId ();
                operationType = ((GetDropListenerOperation) operation).getContext ().getOperationType ();
                transferId = ((IDropListenerContext) ((GetDropListenerOperation) operation).getContext ()).getTransferId ();
                isCompatible = ((IDropListenerContext) ((GetDropListenerOperation) operation).getContext ()).isCompatible ();
            }
            if (Trace.shouldTrace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND)) {
                Trace.trace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND, "DNDS:provides::Element Type is " + elementType.getName ());
                Trace.trace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND, "DNDS:provides::Part Id is " + partId);
                Trace.trace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND, "DNDS:provides::Operation Type is " + operationType);
                Trace.trace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND, "DNDS:provides::Transfer id is " + transferId);
                Trace.trace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND, "DNDS:provides::Compatible is " + isCompatible);
            }
            Hashtable elementTypeTable = (Hashtable) getPartInfo ().get (partId);
            if (elementTypeTable == null) {
                return false;
            }
            Hashtable operationTypeTable = (Hashtable) elementTypeTable.get (isCompatible ? getCompatibleType (elementTypeTable, elementType).getName () : elementType.getName ());
            if (operationTypeTable == null) {
                return false;
            }
            List transferIdList = (List) operationTypeTable.get (operationType);
            if (transferIdList == null) {
                return false;
            }
            return (transferId.equals (IListenerContext.ALL_TRANSFERS)) ? true : transferIdList.contains (transferId);
        }

        private Hashtable getPartInfo () {
            return partInfo;
        }

        private Class getCompatibleType (Hashtable elementTypeTable, Class elementType) {
            Class newClass = null;
            String className = null;
            Enumeration enumeration = elementTypeTable.keys ();
            while (enumeration.hasMoreElements ()) {
                className = (String) enumeration.nextElement ();
                try {
                    newClass = Class.forName (className, false, elementType.getClassLoader ());
                } catch (ClassNotFoundException e) {
                    Trace.catching (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getCompatibleType", e);
                }
                if (newClass != null && newClass.isAssignableFrom (elementType)) {
                    return newClass;
                }
            }
            return elementType;
        }

    }

    private final static DragDropListenerService instance = new DragDropListenerService ();

    static {
        instance.configureProviders (CommonUIServicesDNDPlugin.getPluginId (), "dragDropListenerProviders");
    }

    protected DragDropListenerService () {
        super (false);
    }

    public static DragDropListenerService getInstance () {
        return instance;
    }

    private Object execute (ListenerOperation operation) {
        List results = execute (ExecutionStrategy.FORWARD, operation);
        if (operation instanceof GetDragListenerOperation) {
            return results.isEmpty () ? null : combineArraysInList (results, new IDragSourceListener [0]);
        } else if (operation instanceof GetDropListenerOperation) {
            return results.isEmpty () ? null : combineArraysInList (results, new IDropTargetListener [0]);
        }

        return null;
    }

    protected Service.ProviderDescriptor newProviderDescriptor (IConfigurationElement element) {
        return new ProviderDescriptor (element, getDragDropListenerProviderInfo (element));
    }

    private Hashtable getDragDropListenerProviderInfo (IConfigurationElement element) {
        Hashtable providerInfo = new Hashtable ();
        try {
            IConfigurationElement [] viewChildren = element.getChildren ("ViewId");
            for (int i = 0;
            i < viewChildren.length; i ++) {
                IConfigurationElement viewConfig = viewChildren [i];
                String id = viewConfig.getAttribute ("id");
                if (id == null) {
                    handleInvalidElement (viewConfig);
                    continue;
                }
                providerInfo.put (id, new Hashtable ());
                IConfigurationElement [] elementTypeChildren = viewConfig.getChildren ();
                for (int j = 0;
                j < elementTypeChildren.length; j ++) {
                    IConfigurationElement elementTypeConfig = elementTypeChildren [j];
                    String elementTypeClass = elementTypeConfig.getAttribute ("class");
                    if (elementTypeClass == null) {
                        handleInvalidElement (elementTypeConfig);
                        continue;
                    }
                    Hashtable table = (Hashtable) providerInfo.get (id);
                    table.put (elementTypeClass, new Hashtable ());
                    IConfigurationElement [] operationTypeChildren = elementTypeConfig.getChildren ();
                    for (int k = 0;
                    k < operationTypeChildren.length; k ++) {
                        IConfigurationElement operationTypeConfig = operationTypeChildren [k];
                        String operationType = operationTypeConfig.getAttribute ("operation");
                        if (operationType == null) {
                            handleInvalidElement (operationTypeConfig);
                            continue;
                        }
                        Vector listOftransferId = new Vector ();
                        IConfigurationElement [] transferTypeChildren = operationTypeConfig.getChildren ();
                        for (int l = 0;
                        l < transferTypeChildren.length; l ++) {
                            IConfigurationElement transferIdConfig = transferTypeChildren [l];
                            String transferId = transferIdConfig.getAttribute ("transferId");
                            if (transferId == null) {
                                handleInvalidElement (transferIdConfig);
                                continue;
                            }
                            listOftransferId.addElement (transferId);
                        }
                        table = (Hashtable) ((Hashtable) providerInfo.get (id)).get (elementTypeClass);
                        table.put (operationType, listOftransferId);
                    }
                }
            }
        } catch (Exception e) {
            Trace.catching (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getDragDropListenerProviderInfo", e);
            Log.error (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDStatusCodes.SERVICE_FAILURE, MessageFormat.format (INVALID_ELEMENT_MESSAGE_PATTERN, new Object [] {element.getName ()}), e);
        }
        return providerInfo;
    }

    private void handleInvalidElement (IConfigurationElement element) {
        String message = MessageFormat.format (INVALID_ELEMENT_MESSAGE_PATTERN, new Object [] {element.getDeclaringExtension ().toString () + StringStatics.COLON + element.getName ()});
        Trace.trace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.SERVICES_CONFIG, message);
        Log.error (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDStatusCodes.SERVICE_FAILURE, message);
    }

    public String [] getAllTransferIds (String partId, String operationType) {
        assert null != partId : "partId cannot be null";
        assert null != operationType : "operationType cannot be null";
        List list = getAllProviders ();
        ArrayList transferIds = new ArrayList ();
        Iterator it = list.iterator ();
        while (it.hasNext ()) {
            ProviderDescriptor descriptor = (ProviderDescriptor) it.next ();
            Hashtable elementTypeTable = (Hashtable) descriptor.getPartInfo ().get (partId);
            if (elementTypeTable == null) {
                continue;
            }
            Enumeration e = elementTypeTable.elements ();
            while (e.hasMoreElements ()) {
                Hashtable operationTypeTable = (Hashtable) e.nextElement ();
                if (operationTypeTable.containsKey (operationType)) {
                    List transferIdList = (List) operationTypeTable.get (operationType);
                    Iterator transfer = transferIdList.iterator ();
                    while (transfer.hasNext ()) {
                        String transferId = (String) transfer.next ();
                        if (! transferIds.contains (transferId)) {
                            transferIds.add (transferId);
                        }
                    }
                }
            }
        }
        return ! transferIds.isEmpty () ? (String []) transferIds.toArray (new String [transferIds.size ()]) : null;
    }

    public IDragSourceListener [] getDragSourceListeners (IDragListenerContext context) {
        assert null != context : "context cannot be null";
        return (IDragSourceListener []) execute (new GetDragListenerOperation (context));
    }

    public IDropTargetListener [] getDropTargetListeners (IDropListenerContext context) {
        assert null != context : "context cannot be null";
        return (IDropTargetListener []) execute (new GetDropListenerOperation (context));
    }

    private final Object [] combineArraysInList (List list, Object [] resultingArrayType) {
        List listEntry = null;
        Iterator it = list.iterator ();
        ArrayList results = new ArrayList ();
        while (it.hasNext ()) {
            Object [] array = (Object []) it.next ();
            if (array != null && array.length > 0) {
                listEntry = Arrays.asList (array);
                results.addAll (listEntry);
            }
        }
        return results.toArray (resultingArrayType);
    }

}

