package org.eclipse.gmf.codegen.gmfgen.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

import org.eclipse.gmf.codegen.gmfgen.presentation.EditorPlugin;

public class GenEditorGeneratorItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public GenEditorGeneratorItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addDomainGenModelPropertyDescriptor (object);
            addPackageNamePrefixPropertyDescriptor (object);
            addModelIDPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addDomainGenModelPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenEditorGenerator_domainGenModel_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenEditorGenerator_domainGenModel_feature", "_UI_GenEditorGenerator_type"), GMFGenPackage.eINSTANCE.getGenEditorGenerator_DomainGenModel (), true, null, null, null));
    }

    protected void addPackageNamePrefixPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenEditorGenerator_packageNamePrefix_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenEditorGenerator_packageNamePrefix_feature", "_UI_GenEditorGenerator_type"), GMFGenPackage.eINSTANCE.getGenEditorGenerator_PackageNamePrefix (), true, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addModelIDPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenEditorGenerator_modelID_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenEditorGenerator_modelID_feature", "_UI_GenEditorGenerator_type"), GMFGenPackage.eINSTANCE.getGenEditorGenerator_ModelID (), true, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFGenPackage.eINSTANCE.getGenEditorGenerator_Audits ());
            childrenFeatures.add (GMFGenPackage.eINSTANCE.getGenEditorGenerator_Diagram ());
            childrenFeatures.add (GMFGenPackage.eINSTANCE.getGenEditorGenerator_Plugin ());
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    public Object getImage (Object object) {
        return getResourceLocator ().getImage ("full/obj16/GenEditorGenerator");
    }

    public String getText (Object object) {
        String label = ((GenEditorGenerator) object).getPackageNamePrefix ();
        return label == null || label.length () == 0 ? getString ("_UI_GenEditorGenerator_type") : getString ("_UI_GenEditorGenerator_type") + " " + label;
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (GenEditorGenerator.class)) {
            case GMFGenPackage.GEN_EDITOR_GENERATOR__PACKAGE_NAME_PREFIX :
            case GMFGenPackage.GEN_EDITOR_GENERATOR__MODEL_ID :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
            case GMFGenPackage.GEN_EDITOR_GENERATOR__AUDITS :
            case GMFGenPackage.GEN_EDITOR_GENERATOR__DIAGRAM :
            case GMFGenPackage.GEN_EDITOR_GENERATOR__PLUGIN :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenEditorGenerator_Audits (), GMFGenFactory.eINSTANCE.createGenAuditContainer ()));
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenEditorGenerator_Diagram (), GMFGenFactory.eINSTANCE.createGenDiagram ()));
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenEditorGenerator_Plugin (), GMFGenFactory.eINSTANCE.createGenPlugin ()));
    }

    public ResourceLocator getResourceLocator () {
        return EditorPlugin.INSTANCE;
    }

}

