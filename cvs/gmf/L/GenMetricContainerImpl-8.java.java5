package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import java.util.HashSet;

import java.util.Set;

import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

import org.eclipse.gmf.codegen.gmfgen.GenMetricContainer;

import org.eclipse.gmf.codegen.gmfgen.GenMetricRule;

public class GenMetricContainerImpl extends EObjectImpl implements GenMetricContainer {
    protected EList < GenMetricRule > metrics;

    protected GenMetricContainerImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenMetricContainer ();
    }

    public GenEditorGenerator getEditorGen () {
        if (eContainerFeatureID != GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN) return null;

        return (GenEditorGenerator) eContainer ();
    }

    public NotificationChain basicSetEditorGen (GenEditorGenerator newEditorGen, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newEditorGen, GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN, msgs);
        return msgs;
    }

    public void setEditorGen (GenEditorGenerator newEditorGen) {
        if (newEditorGen != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN && newEditorGen != null)) {
            if (EcoreUtil.isAncestor (this, newEditorGen)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newEditorGen != null) msgs = ((InternalEObject) newEditorGen).eInverseAdd (this, GMFGenPackage.GEN_EDITOR_GENERATOR__METRICS, GenEditorGenerator.class, msgs);

            msgs = basicSetEditorGen (newEditorGen, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN, newEditorGen, newEditorGen));

    }

    public EList < GenMetricRule > getMetrics () {
        if (metrics == null) {
            metrics = new EObjectContainmentWithInverseEList < GenMetricRule > (GenMetricRule.class, this, GMFGenPackage.GEN_METRIC_CONTAINER__METRICS, GMFGenPackage.GEN_METRIC_RULE__CONTAINER);
        }
        return metrics;
    }

    public Set < GenPackage > getAllTargetedModelPackages () {
        HashSet < GenPackage > packages = new HashSet < GenPackage > ();
        for (GenMetricRule nextRule : getMetrics ()) {
            if (nextRule.getTarget () != null && nextRule.getTarget ().getContext () != null) {
                packages.add (nextRule.getTarget ().getContext ().getGenPackage ());
            }
        }
        return packages;
    }

    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetEditorGen ((GenEditorGenerator) otherEnd, msgs);
            case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getMetrics ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN :
                return basicSetEditorGen (null, msgs);
            case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS :
                return ((InternalEList < ? >) getMetrics ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_EDITOR_GENERATOR__METRICS, GenEditorGenerator.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN :
                return getEditorGen ();
            case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS :
                return getMetrics ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN :
                setEditorGen ((GenEditorGenerator) newValue);
                return;
            case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS :
                getMetrics ().clear ();
                getMetrics ().addAll ((Collection < ? extends GenMetricRule >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN :
                setEditorGen ((GenEditorGenerator) null);
                return;
            case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS :
                getMetrics ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN :
                return getEditorGen () != null;
            case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS :
                return metrics != null && ! metrics.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

}

