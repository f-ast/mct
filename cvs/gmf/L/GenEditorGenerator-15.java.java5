package org.eclipse.gmf.codegen.gmfgen;

import org.eclipse.emf.codegen.ecore.genmodel.GenModel;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

public interface GenEditorGenerator extends EObject {

    GenAuditContainer getAudits ();

    void setAudits (GenAuditContainer value);

    GenMetricContainer getMetrics ();

    void setMetrics (GenMetricContainer value);

    GenDiagram getDiagram ();

    void setDiagram (GenDiagram value);

    GenPlugin getPlugin ();

    void setPlugin (GenPlugin value);

    GenEditorView getEditor ();

    void setEditor (GenEditorView value);

    GenNavigator getNavigator ();

    void setNavigator (GenNavigator value);

    GenPropertySheet getPropertySheet ();

    void setPropertySheet (GenPropertySheet value);

    GenModel getDomainGenModel ();

    void setDomainGenModel (GenModel value);

    String getPackageNamePrefix ();

    void setPackageNamePrefix (String value);

    String getModelID ();

    void setModelID (String value);

    boolean isSameFileForDiagramAndModel ();

    void setSameFileForDiagramAndModel (boolean value);

    String getDiagramFileExtension ();

    void setDiagramFileExtension (String value);

    String getDomainFileExtension ();

    void setDomainFileExtension (String value);

    boolean isDynamicTemplates ();

    void setDynamicTemplates (boolean value);

    String getTemplateDirectory ();

    void setTemplateDirectory (String value);

    String getCopyrightText ();

    void setCopyrightText (String value);

    GenExpressionProviderContainer getExpressionProviders ();

    void setExpressionProviders (GenExpressionProviderContainer value);

    EList getAllDomainGenPackages (boolean withUsed);

    boolean hasAudits ();

}

