package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.NodeMapping;

import org.eclipse.gmf.mappings.TopNodeReference;

public class TopNodeReferenceImpl extends NodeReferenceImpl implements TopNodeReference {
    protected NodeMapping ownedChild = null;

    protected TopNodeReferenceImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getTopNodeReference ();
    }

    public NodeMapping getOwnedChild () {
        return ownedChild;
    }

    public NotificationChain basicSetOwnedChild (NodeMapping newOwnedChild, NotificationChain msgs) {
        NodeMapping oldOwnedChild = ownedChild;
        ownedChild = newOwnedChild;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFMapPackage.TOP_NODE_REFERENCE__OWNED_CHILD, oldOwnedChild, newOwnedChild);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setOwnedChild (NodeMapping newOwnedChild) {
        if (newOwnedChild != ownedChild) {
            NotificationChain msgs = null;
            if (ownedChild != null) msgs = ((InternalEObject) ownedChild).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.TOP_NODE_REFERENCE__OWNED_CHILD, null, msgs);

            if (newOwnedChild != null) msgs = ((InternalEObject) newOwnedChild).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.TOP_NODE_REFERENCE__OWNED_CHILD, null, msgs);

            msgs = basicSetOwnedChild (newOwnedChild, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.TOP_NODE_REFERENCE__OWNED_CHILD, newOwnedChild, newOwnedChild));

    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFMapPackage.TOP_NODE_REFERENCE__OWNED_CHILD :
                return basicSetOwnedChild (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFMapPackage.TOP_NODE_REFERENCE__OWNED_CHILD :
                return getOwnedChild ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFMapPackage.TOP_NODE_REFERENCE__OWNED_CHILD :
                setOwnedChild ((NodeMapping) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFMapPackage.TOP_NODE_REFERENCE__OWNED_CHILD :
                setOwnedChild ((NodeMapping) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFMapPackage.TOP_NODE_REFERENCE__OWNED_CHILD :
                return ownedChild != null;
        }
        return super.eIsSet (featureID);
    }

    public NodeMapping getChild () {
        assert getOwnedChild () != null;
        return getOwnedChild ();
    }

    public boolean isSetChild () {
        return getOwnedChild () != null;
    }

}

