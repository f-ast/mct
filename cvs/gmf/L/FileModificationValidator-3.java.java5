package org.eclipse.gmf.runtime.common.ui.resources;

import java.text.MessageFormat;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IFileModificationValidator;

import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Status;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.swt.widgets.Display;

import org.eclipse.team.core.RepositoryProvider;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;

import org.eclipse.gmf.runtime.common.ui.internal.l10n.ResourceManager;

public class FileModificationValidator {
    private static String FILE_IS_READ_ONLY = ResourceManager.getInstance ().getString ("FileModificationValidator.FileIsReadOnlyErrorMessage");
    private static String OK = ResourceManager.getInstance ().getString ("FileModificationValidator.OK");
    private String editProblemDialogTitle = ResourceManager.getInstance ().getString ("FileModificationValidator.EditProblemDialogTitle");
    private String editProblemDialogMessage_part1 = ResourceManager.getInstance ().getString ("FileModificationValidator.EditProblemDialogMessage.part1");
    private String editProblemDialogMessage_part2 = ResourceManager.getInstance ().getString ("FileModificationValidator.EditProblemDialogMessage.part2");
    private String editProblemDialogMessage_part3 = ResourceManager.getInstance ().getString ("FileModificationValidator.EditProblemDialogMessage.part3");
    private String saveProblemDialogTitle = ResourceManager.getInstance ().getString ("FileModificationValidator.SaveProblemDialogTitle");
    private String saveProblemDialogMessage_part1 = ResourceManager.getInstance ().getString ("FileModificationValidator.SaveProblemDialogMessage.part1");
    private String saveProblemDialogMessage_part2 = ResourceManager.getInstance ().getString ("FileModificationValidator.SaveProblemDialogMessage.part2");
    private String saveProblemDialogMessage_part3 = ResourceManager.getInstance ().getString ("FileModificationValidator.SaveProblemDialogMessage.part3");
    private static FileModificationValidator INSTANCE = new FileModificationValidator ();

    public static FileModificationValidator getInstance () {
        return INSTANCE;
    }

    private FileModificationValidator () {
        super ();
    }

    public boolean okToEdit (IFile [] files, String modificationReason) {
        IStatus status = ResourcesPlugin.getWorkspace ().validateEdit (files, Display.getCurrent ().getActiveShell ());
        if (status.isOK ()) {
            return true;
        } else {
            MessageDialog.openError (Display.getCurrent ().getActiveShell (), MessageFormat.format (editProblemDialogTitle, new Object [] {modificationReason}), MessageFormat.format (editProblemDialogMessage_part1, new Object [] {modificationReason}) + "\n\n" + editProblemDialogMessage_part2 + "\n" + MessageFormat.format (editProblemDialogMessage_part3, new Object [] {status.getMessage ()}));
            return false;
        }
    }

    public boolean okToSave (IFile file) {
        IStatus status = null;
        RepositoryProvider provider = RepositoryProvider.getProvider (file.getProject ());
        IFileModificationValidator validator = null;
        if (provider != null) {
            validator = provider.getFileModificationValidator ();
        }
        if (validator == null) {
            status = getDefaultStatus (file);
        } else {
            status = validator.validateSave (file);
        }
        if (status.isOK ()) {
            return true;
        } else {
            MessageDialog.openError (Display.getCurrent ().getActiveShell (), saveProblemDialogTitle, saveProblemDialogMessage_part1 + "\n\n" + saveProblemDialogMessage_part2 + "\n" + MessageFormat.format (saveProblemDialogMessage_part3, new Object [] {status.getMessage ()}));
            return false;
        }
    }

    private IStatus getDefaultStatus (IFile file) {
        if (file.isReadOnly ()) {
            String message = MessageFormat.format (FILE_IS_READ_ONLY, new Object [] {file.getFullPath ().toString ()});
            return new Status (Status.ERROR, CommonUIPlugin.getPluginId (), Status.ERROR, message, null);
        } else {
            return new Status (Status.OK, CommonUIPlugin.getPluginId (), Status.OK, OK, null);
        }
    }

}

