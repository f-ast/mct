package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.BasicEMap;

import org.eclipse.emf.common.util.EMap;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.FlatEObjectImpl;

import org.eclipse.gmf.runtime.notation.Alignment;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class NodeEntryImpl extends FlatEObjectImpl implements BasicEMap.Entry {
    protected static final Alignment VALUE_EDEFAULT = Alignment.CENTER_LITERAL;
    protected Alignment value = VALUE_EDEFAULT;
    protected Node key = null;

    protected NodeEntryImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.NODE_ENTRY;
    }

    public Node getTypedKey () {
        if (key != null && key.eIsProxy ()) {
            EObject oldKey = key;
            key = (Node) eResolveProxy ((InternalEObject) key);
            if (key != oldKey) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, NotationPackage.NODE_ENTRY__KEY, oldKey, key));

            }
        }
        return key;
    }

    public Node basicGetTypedKey () {
        return key;
    }

    public void setTypedKey (Node newKey) {
        Node oldKey = key;
        key = newKey;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.NODE_ENTRY__KEY, oldKey, key));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.NODE_ENTRY__VALUE :
                return getTypedValue ();
            case NotationPackage.NODE_ENTRY__KEY :
                if (resolve) return getTypedKey ();

                return basicGetTypedKey ();
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.NODE_ENTRY__VALUE :
                setTypedValue ((Alignment) newValue);
                return;
            case NotationPackage.NODE_ENTRY__KEY :
                setTypedKey ((Node) newValue);
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.NODE_ENTRY__VALUE :
                setTypedValue (VALUE_EDEFAULT);
                return;
            case NotationPackage.NODE_ENTRY__KEY :
                setTypedKey ((Node) null);
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.NODE_ENTRY__VALUE :
                return value != VALUE_EDEFAULT;
            case NotationPackage.NODE_ENTRY__KEY :
                return key != null;
        }
        return eDynamicIsSet (featureID);
    }

    public Alignment getTypedValue () {
        return value;
    }

    public void setTypedValue (Alignment newValue) {
        Alignment oldValue = value;
        value = newValue == null ? VALUE_EDEFAULT : newValue;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.NODE_ENTRY__VALUE, oldValue, value));

    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (value: ");
        result.append (value);
        result.append (')');
        return result.toString ();
    }

    protected int hash = - 1;

    public int getHash () {
        if (hash == - 1) {
            Object theKey = getKey ();
            hash = (theKey == null ? 0 : theKey.hashCode ());
        }
        return hash;
    }

    public void setHash (int hash) {
        this.hash = hash;
    }

    public Object getKey () {
        return getTypedKey ();
    }

    public void setKey (Object key) {
        setTypedKey ((Node) key);
    }

    public Object getValue () {
        return getTypedValue ();
    }

    public Object setValue (Object value) {
        Object oldValue = getValue ();
        setTypedValue ((Alignment) value);
        return oldValue;
    }

    public EMap getEMap () {
        EObject container = eContainer ();
        return container == null ? null : (EMap) container.eGet (eContainmentFeature ());
    }

}

