package org.eclipse.gmf.runtime.emf.type.core.commands;

import java.util.Collection;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.runtime.common.core.command.AbstractCommand;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;

public abstract class EditElementCommand extends AbstractCommand {
    private EObject elementToEdit;
    private final IEditCommandRequest request;
    private EClass eClass = null;

    protected EditElementCommand (String label, EObject elementToEdit, IEditCommandRequest request) {
        super (label);
        this.elementToEdit = elementToEdit;
        this.request = request;
    }

    public boolean isExecutable () {
        if (getEClass () != null) {
            return getEClass ().isSuperTypeOf (getEClassToEdit ());
        }
        return true;
    }

    public boolean isUndoable () {
        return true;
    }

    public boolean isRedoable () {
        return true;
    }

    protected EObject getElementToEdit () {
        return elementToEdit;
    }

    protected EClass getEClassToEdit () {
        return getElementToEdit ().eClass ();
    }

    protected void setElementToEdit (EObject element) {
        this.elementToEdit = element;
    }

    protected IEditCommandRequest getRequest () {
        return request;
    }

    protected EClass getEClass () {
        return eClass;
    }

    protected void setEClass (EClass eClass) {
        this.eClass = eClass;
    }

    protected boolean isOK (CommandResult commandResult) {
        return commandResult.getStatus ().getCode () == IStatus.OK;
    }

    public Collection getAffectedObjects () {
        return request.getElementsToEdit ();
    }

}

