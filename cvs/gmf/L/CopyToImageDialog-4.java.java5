package org.eclipse.gmf.runtime.diagram.ui.render.internal.dialogs;

import java.io.File;

import org.eclipse.core.resources.IResource;

import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.IPath;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Path;

import org.eclipse.gmf.runtime.common.ui.util.WindowUtil;

import org.eclipse.gmf.runtime.diagram.ui.image.ImageFileFormat;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.render.internal.DiagramUIRenderPlugin;

import org.eclipse.jface.dialogs.Dialog;

import org.eclipse.jface.dialogs.IDialogConstants;

import org.eclipse.jface.dialogs.IDialogSettings;

import org.eclipse.jface.resource.JFaceResources;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.ModifyEvent;

import org.eclipse.swt.events.ModifyListener;

import org.eclipse.swt.events.SelectionAdapter;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.layout.GridLayout;

import org.eclipse.swt.widgets.Button;

import org.eclipse.swt.widgets.Combo;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.DirectoryDialog;

import org.eclipse.swt.widgets.Display;

import org.eclipse.swt.widgets.Label;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.swt.widgets.Text;

import org.eclipse.ui.PlatformUI;

public class CopyToImageDialog extends Dialog {
    private String folder = null;
    private String fileName = null;
    private ImageFileFormat imageFormat = null;
    private boolean overwriteExisting = false;
    private Text folderText = null;
    private Text fileNameText = null;
    private Combo imageFormatCombo = null;
    private Button overwriteExistingCheckbox = null;
    private Label messageImageLabel = null;
    private Label messageLabel = null;
    private boolean fileNameValid = true;
    private boolean folderValid = true;
    private static final String DIALOG_TITLE = DiagramUIMessages.CopyToImageDialog_title;
    ;
    private static final String FOLDER_LABEL = DiagramUIMessages.CopyToImageDialog_folder_label;
    private static final String FILE_NAME_LABEL = DiagramUIMessages.CopyToImageDialog_filename_label;
    private static final String IMAGE_FORMAT_LABEL = DiagramUIMessages.CopyToImageDialog_imageformat_label;
    private static final String BROWSE_LABEL = DiagramUIMessages.CopyToImageDialog_browse_label;
    private static final String OVERWRITE_EXISTING_LABEL = DiagramUIMessages.CopyToImageDialog_overwriteExisting_label;
    private static final String DIRECTORY_DIALOG_TEXT = DiagramUIMessages.CopyToImageDialog_DirectoryDialog_text;
    private static final String DIRECTORY_DIALOG_MESSAGE = DiagramUIMessages.CopyToImageDialog_DirectoryDialog_message;
    private static final String FOLDER_BLANK_MESSAGE = DiagramUIMessages.CopyToImageDialog_validateFolderText_folderBlank;
    private static final String FOLDER_INVALID_MESSAGE = DiagramUIMessages.CopyToImageDialog_validateFolderText_folderInvalid;
    private static final String FOLDER_NOT_EXIST_MESSAGE = DiagramUIMessages.CopyToImageDialog_validateFolderText_folderNotExist;
    private static final String DEFAULT_IMAGE_FILENAME = DiagramUIMessages.CopyToImageDialog_filename_default;
    private static final String EMPTY_STRING = "";
    private static final String DOT_STRING = ".";
    private static final String DIALOG_SETTINGS_ID = "CopyToImageDialog";
    private static final String DIALOG_SETTINGS_FOLDER = "CopyToImageDialog.folder";
    private static final String DIALOG_SETTINGS_IMAGE_FORMAT = "CopyToImageDialog.imageFormat";
    private static final String DIALOG_SETTINGS_OVERWRITE = "CopyToImageDialog.overwriteExisting";

    public CopyToImageDialog (Shell shell, IPath path, String fileName) {
        super (shell);
        initDialogSettings (path);
        if (fileName != null) {
            this.fileName = fileName;
        } else {
            this.fileName = DEFAULT_IMAGE_FILENAME;
        }
    }

    protected Control createDialogArea (Composite parent) {
        Composite composite = (Composite) super.createDialogArea (parent);
        createFolderGroup (composite);
        createFileNameGroup (composite);
        createImageFormatGroup (composite);
        createOverwriteExistingGroup (composite);
        createMessageGroup (composite);
        PlatformUI.getWorkbench ().getHelpSystem ().setHelp (parent, "org.eclipse.gmf.runtime.diagram.ui.render.egmf0400");
        return composite;
    }

    protected void configureShell (Shell shell) {
        super.configureShell (shell);
        shell.setText (DIALOG_TITLE);
    }

    private void createFolderGroup (Composite parent) {
        Composite composite = createComposite (parent, 4);
        createLabel (composite, FOLDER_LABEL);
        folderText = new Text (composite, SWT.BORDER);
        folderText.setText (folder);
        folderText.addModifyListener (new ModifyListener () {

            public void modifyText (ModifyEvent e) {
                validateFolderText ();
            }

        }

        );
        GridData gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.widthHint = 250;
        folderText.setLayoutData (gridData);
        Button button = new Button (composite, SWT.PUSH);
        button.setText (BROWSE_LABEL);
        button.setLayoutData (WindowUtil.makeButtonData (button));
        button.addSelectionListener (new SelectionAdapter () {

            public void widgetSelected (SelectionEvent event) {
                handleBrowseButtonPressed ();
            }

        }

        );
    }

    private void createFileNameGroup (Composite parent) {
        Composite composite = createComposite (parent, 2);
        createLabel (composite, FILE_NAME_LABEL);
        fileNameText = new Text (composite, SWT.BORDER);
        fileNameText.setText (fileName + DOT_STRING + imageFormat.getName ().toLowerCase ());
        fileNameText.addModifyListener (new ModifyListener () {

            public void modifyText (ModifyEvent e) {
                validateFileNameText ();
            }

        }

        );
        GridData gridData = new GridData (GridData.HORIZONTAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL);
        gridData.widthHint = 250;
        fileNameText.setLayoutData (gridData);
    }

    private void createImageFormatGroup (Composite parent) {
        Composite composite = createComposite (parent, 2);
        createLabel (composite, IMAGE_FORMAT_LABEL);
        imageFormatCombo = new Combo (composite, SWT.DROP_DOWN | SWT.READ_ONLY);
        imageFormatCombo.setItems (getImageFormatItems ());
        imageFormatCombo.setText (imageFormat.getName ());
        imageFormatCombo.addSelectionListener (new SelectionAdapter () {

            public void widgetSelected (SelectionEvent e) {
                imageFormat = ImageFileFormat.resolveImageFormat (imageFormatCombo.getSelectionIndex ());
                fileNameText.setText (fileName + DOT_STRING + imageFormat.getName ().toLowerCase ());
                validateFileNameText ();
            }

        }

        );
        GridData gridData = new GridData (GridData.HORIZONTAL_ALIGN_FILL | GridData.FILL_HORIZONTAL);
        gridData.widthHint = 250;
        imageFormatCombo.setLayoutData (gridData);
    }

    private void createOverwriteExistingGroup (Composite parent) {
        Composite composite = createComposite (parent, 1);
        overwriteExistingCheckbox = new Button (composite, SWT.CHECK | SWT.LEFT);
        overwriteExistingCheckbox.setText (OVERWRITE_EXISTING_LABEL);
        GridData data = new GridData (GridData.FILL_HORIZONTAL);
        overwriteExistingCheckbox.setLayoutData (data);
        overwriteExistingCheckbox.setSelection (overwriteExisting);
        overwriteExistingCheckbox.addSelectionListener (new SelectionAdapter () {

            public void widgetSelected (SelectionEvent event) {
                overwriteExisting = overwriteExistingCheckbox.getSelection ();
            }

        }

        );
    }

    private void createMessageGroup (Composite parent) {
        Composite composite = createComposite (parent, 2);
        messageImageLabel = new Label (composite, SWT.NONE);
        messageImageLabel.setImage (JFaceResources.getImage (DLG_IMG_MESSAGE_ERROR));
        messageImageLabel.setVisible (false);
        messageLabel = new Label (composite, SWT.NONE);
        GridData gridData = new GridData (GridData.HORIZONTAL_ALIGN_FILL | GridData.FILL_HORIZONTAL);
        gridData.widthHint = 250;
        messageLabel.setLayoutData (gridData);
        messageLabel.setVisible (false);
    }

    private Composite createComposite (Composite parent, int columns) {
        Composite composite = new Composite (parent, SWT.NONE);
        GridLayout gridLayout = new GridLayout ();
        gridLayout.numColumns = columns;
        gridLayout.marginHeight = 0;
        gridLayout.marginWidth = 0;
        gridLayout.makeColumnsEqualWidth = false;
        GridData data = new GridData (GridData.HORIZONTAL_ALIGN_FILL | GridData.FILL_HORIZONTAL);
        composite.setLayoutData (data);
        composite.setLayout (gridLayout);
        return composite;
    }

    private Label createLabel (Composite parent, String text) {
        Label label = new Label (parent, SWT.NONE);
        label.setText (text);
        return label;
    }

    private String [] getImageFormatItems () {
        String [] items = new String [ImageFileFormat.VALUES.length];
        for (int i = 0;
        i < ImageFileFormat.VALUES.length; i ++) {
            items [i] = ImageFileFormat.VALUES [i].getName ();
        }
        return items;
    }

    public IPath getDestination () {
        StringBuffer extension = new StringBuffer (DOT_STRING);
        extension.append (imageFormat.getName ().toLowerCase ());
        StringBuffer f = new StringBuffer (fileName);
        if (! f.toString ().endsWith (extension.toString ())) {
            f.append (extension);
        }
        return new Path (folder).append (f.toString ());
    }

    public ImageFileFormat getImageFormat () {
        return imageFormat;
    }

    public boolean overwriteExisting () {
        return overwriteExisting;
    }

    private void handleBrowseButtonPressed () {
        DirectoryDialog dialog = new DirectoryDialog (Display.getCurrent ().getActiveShell ());
        dialog.setMessage (DIRECTORY_DIALOG_MESSAGE);
        dialog.setText (DIRECTORY_DIALOG_TEXT);
        String dirName = folderText.getText ();
        if (! dirName.equals (EMPTY_STRING)) {
            File path = new File (dirName);
            if (path.exists ()) dialog.setFilterPath (new Path (dirName).toOSString ());

        }
        String selectedDirectory = dialog.open ();
        if (selectedDirectory != null) {
            folderText.setText (selectedDirectory);
        }
    }

    private void validateFolderText () {
        if (folderText.getText ().equals (EMPTY_STRING)) {
            setDialogErrorState (FOLDER_BLANK_MESSAGE);
            folderValid = false;
            return;
        }
        IPath path = new Path (EMPTY_STRING);
        if (! path.isValidPath (folderText.getText ())) {
            setDialogErrorState (FOLDER_INVALID_MESSAGE);
            folderValid = false;
            return;
        }
        File file = new File (folderText.getText ());
        if (! file.exists ()) {
            setDialogErrorState (FOLDER_NOT_EXIST_MESSAGE);
            folderValid = false;
            return;
        }
        folderValid = true;
        folder = folderText.getText ();
        if (fileNameValid) {
            setDialogOKState ();
        } else {
            validateFileNameText ();
        }
    }

    private void validateFileNameText () {
        IStatus nameStatus = ResourcesPlugin.getWorkspace ().validateName (fileNameText.getText (), IResource.FILE);
        if (! nameStatus.isOK ()) {
            setDialogErrorState (nameStatus.getMessage ());
            fileNameValid = false;
            return;
        }
        fileNameValid = true;
        IPath filePath = (new Path (fileNameText.getText ())).removeFileExtension ();
        fileName = filePath.toString ();
        if (folderValid) {
            setDialogOKState ();
        } else {
            validateFolderText ();
        }
    }

    private void setDialogErrorState (String message) {
        messageLabel.setText (message);
        messageImageLabel.setVisible (true);
        messageLabel.setVisible (true);
        getButton (IDialogConstants.OK_ID).setEnabled (false);
        getButton (IDialogConstants.CANCEL_ID).getShell ().setDefaultButton (getButton (IDialogConstants.CANCEL_ID));
    }

    private void setDialogOKState () {
        messageImageLabel.setVisible (false);
        messageLabel.setVisible (false);
        getButton (IDialogConstants.OK_ID).setEnabled (true);
        getButton (IDialogConstants.OK_ID).getShell ().setDefaultButton (getButton (IDialogConstants.OK_ID));
    }

    private IDialogSettings getDialogSettings () {
        IDialogSettings settings = DiagramUIRenderPlugin.getInstance ().getDialogSettings ();
        settings = settings.getSection (DIALOG_SETTINGS_ID);
        if (settings == null) settings = DiagramUIRenderPlugin.getInstance ().getDialogSettings ().addNewSection (DIALOG_SETTINGS_ID);

        return settings;
    }

    private void initDialogSettings (IPath path) {
        IDialogSettings dialogSettings = getDialogSettings ();
        folder = "/";
        if (path == null) {
            String persistentFolder = dialogSettings.get (DIALOG_SETTINGS_FOLDER);
            if (persistentFolder != null) {
                folder = persistentFolder;
            }
        } else {
            folder = path.toOSString ();
        }
        String persistentImageFormat = dialogSettings.get (DIALOG_SETTINGS_IMAGE_FORMAT);
        if (persistentImageFormat == null) {
            imageFormat = ImageFileFormat.getDefaultImageFormat ();
        } else {
            imageFormat = ImageFileFormat.resolveImageFormat (persistentImageFormat);
        }
        overwriteExisting = dialogSettings.getBoolean (DIALOG_SETTINGS_OVERWRITE);
    }

    private void saveDialogSettings () {
        IDialogSettings dialogSettings = getDialogSettings ();
        dialogSettings.put (DIALOG_SETTINGS_FOLDER, folder);
        dialogSettings.put (DIALOG_SETTINGS_IMAGE_FORMAT, imageFormat.getName ().toLowerCase ());
        dialogSettings.put (DIALOG_SETTINGS_OVERWRITE, overwriteExisting);
    }

    protected void okPressed () {
        super.okPressed ();
        saveDialogSettings ();
    }

}

