package org.eclipse.gmf.runtime.notation.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EMap;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EcoreEMap;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.runtime.notation.Guide;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class GuideImpl extends EObjectImpl implements Guide {
    protected static final int POSITION_EDEFAULT = 0;
    protected int position = POSITION_EDEFAULT;
    protected EMap nodeMap = null;

    protected GuideImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.eINSTANCE.getGuide ();
    }

    public int getPosition () {
        return position;
    }

    public void setPosition (int newPosition) {
        int oldPosition = position;
        position = newPosition;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.GUIDE__POSITION, oldPosition, position));

    }

    public EMap getNodeMap () {
        if (nodeMap == null) {
            nodeMap = new EcoreEMap (NotationPackage.eINSTANCE.getNodeEntry (), NodeEntryImpl.class, this, NotationPackage.GUIDE__NODE_MAP);
        }
        return nodeMap;
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case NotationPackage.GUIDE__NODE_MAP :
                    return ((InternalEList) getNodeMap ()).basicRemove (otherEnd, msgs);
                default :
                    return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
            }
        }
        return eBasicSetContainer (null, featureID, msgs);
    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.GUIDE__POSITION :
                return new Integer (getPosition ());
            case NotationPackage.GUIDE__NODE_MAP :
                return getNodeMap ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.GUIDE__POSITION :
                setPosition (((Integer) newValue).intValue ());
                return;
            case NotationPackage.GUIDE__NODE_MAP :
                getNodeMap ().clear ();
                getNodeMap ().addAll ((Collection) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.GUIDE__POSITION :
                setPosition (POSITION_EDEFAULT);
                return;
            case NotationPackage.GUIDE__NODE_MAP :
                getNodeMap ().clear ();
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.GUIDE__POSITION :
                return position != POSITION_EDEFAULT;
            case NotationPackage.GUIDE__NODE_MAP :
                return nodeMap != null && ! nodeMap.isEmpty ();
        }
        return eDynamicIsSet (eFeature);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (position: ");
        result.append (position);
        result.append (')');
        return result.toString ();
    }

}

