package org.eclipse.gmf.mappings.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.mappings.GMFMapFactory;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.LinkMapping;

import org.eclipse.gmf.mappings.presentation.EStructuralFeaturesComparator;

import org.eclipse.gmf.mappings.presentation.ScopeUtil;

public class LinkMappingItemProvider extends MappingEntryItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public LinkMappingItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addContainmentFeaturePropertyDescriptor (object);
            addContextMenuPropertyDescriptor (object);
            addToolPropertyDescriptor (object);
            addAppearanceStylePropertyDescriptor (object);
            addDiagramLinkPropertyDescriptor (object);
            addSourceMetaFeaturePropertyDescriptor (object);
            addLinkMetaFeaturePropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addContextMenuPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_MenuOwner_contextMenu_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_MenuOwner_contextMenu_feature", "_UI_MenuOwner_type"), GMFMapPackage.eINSTANCE.getMenuOwner_ContextMenu (), true, null, getString ("_UI_VisualrepresentationPropertyCategory"), null));
    }

    protected void addToolPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_ToolOwner_tool_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_ToolOwner_tool_feature", "_UI_ToolOwner_type"), GMFMapPackage.eINSTANCE.getToolOwner_Tool (), true, null, getString ("_UI_VisualrepresentationPropertyCategory"), null));
    }

    protected void addAppearanceStylePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_AppearanceSteward_appearanceStyle_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_AppearanceSteward_appearanceStyle_feature", "_UI_AppearanceSteward_type"), GMFMapPackage.eINSTANCE.getAppearanceSteward_AppearanceStyle (), true, null, getString ("_UI_VisualrepresentationPropertyCategory"), null));
    }

    protected void addDiagramLinkPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LinkMapping_diagramLink_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LinkMapping_diagramLink_feature", "_UI_LinkMapping_type"), GMFMapPackage.eINSTANCE.getLinkMapping_DiagramLink (), true, null, getString ("_UI_VisualrepresentationPropertyCategory"), null));
    }

    protected void addContainmentFeaturePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_MappingEntry_containmentFeature_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_MappingEntry_containmentFeature_feature", "_UI_MappingEntry_type"), GMFMapPackage.eINSTANCE.getNeedsContainment_ContainmentFeature (), true, null, getString ("_UI_DomainmetainformationPropertyCategory"), null) {

            protected Collection getComboBoxObjects (Object object) {
                ScopeUtil scopeUtil = new ScopeUtil ((LinkMapping) object);
                if (scopeUtil.isDevisable ()) {
                    return scopeUtil.getPossibleContainments ();
                } else {
                    return super.getComboBoxObjects (object);
                }
            }

        }

        );
    }

    protected void addSourceMetaFeaturePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LinkMapping_sourceMetaFeature_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LinkMapping_sourceMetaFeature_feature", "_UI_LinkMapping_type"), GMFMapPackage.eINSTANCE.getLinkMapping_SourceMetaFeature (), true, null, getString ("_UI_DomainmetainformationPropertyCategory"), null) {

            protected Collection getComboBoxObjects (Object object) {
                return EStructuralFeaturesComparator.getSortedList (super.getComboBoxObjects (object), (LinkMapping) object);
            }

        }

        );
    }

    protected void addLinkMetaFeaturePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LinkMapping_linkMetaFeature_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LinkMapping_linkMetaFeature_feature", "_UI_LinkMapping_type"), GMFMapPackage.eINSTANCE.getLinkMapping_LinkMetaFeature (), true, null, getString ("_UI_DomainmetainformationPropertyCategory"), null) {

            protected Collection getComboBoxObjects (Object object) {
                return EStructuralFeaturesComparator.getSortedList (super.getComboBoxObjects (object), (LinkMapping) object);
            }

        }

        );
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFMapPackage.eINSTANCE.getLinkMapping_CreationConstraints ());
        }
        return childrenFeatures;
    }

    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/LinkMapping"));
    }

    public String getText (Object object) {
        return getString ("_UI_LinkMapping_type");
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (LinkMapping.class)) {
            case GMFMapPackage.LINK_MAPPING__CREATION_CONSTRAINTS :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFMapPackage.eINSTANCE.getLinkMapping_CreationConstraints (), GMFMapFactory.eINSTANCE.createLinkConstraints ()));
    }

    public ResourceLocator getResourceLocator () {
        return GMFMapEditPlugin.INSTANCE;
    }

}

