package org.eclipse.gmf.internal.bridge.transform;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.emf.common.util.Diagnostic;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.gmf.internal.common.ui.ResourceLocationProvider;

import org.eclipse.gmf.mappings.Mapping;

class MapModelConfigurationPage extends ModelConfigurationPage {
    private static final String FILE_EXT_GMFMAP = "gmfmap";

    MapModelConfigurationPage (String pageId, ResourceLocationProvider rlp, ResourceSet resourceSet) {
        super (pageId, rlp, resourceSet);
        setTitle (Messages.TransformToGenModelWizard_title_mapmodel);
        setDescription (Messages.TransformToGenModelWizard_descr_mapmodel);
    }

    protected String getModelFileExtension () {
        return FILE_EXT_GMFMAP;
    }

    @Override
    protected Resource doLoadResource (IProgressMonitor monitor) throws CoreException {
        TransformToGenModelOperation o = getOperation ();
        Mapping mapping = o.loadMappingModel (getResourceSet (), getURI (), monitor);
        return mapping.eResource ();
    }

    TransformToGenModelOperation getOperation () {
        TransformToGenModelWizard wizard = (TransformToGenModelWizard) getWizard ();
        return wizard.getTransformOperation ();
    }

    @Override
    protected void resourceChanged () {
        super.resourceChanged ();
        Diagnostic load = getOperation ().getMapmodelValidationResult ();
        if (load != null) {
            if ((load.getSeverity () == IStatus.WARNING) || (load.getSeverity () == IStatus.INFO)) {
                setStatusMessage (TransformToGenModelOperation.getFirst (load));
            }
        }
    }

}

