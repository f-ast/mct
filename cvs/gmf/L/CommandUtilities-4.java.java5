package org.eclipse.gmf.runtime.diagram.ui.commands;

import java.util.Collection;

import java.util.Collections;

import java.util.Iterator;

import java.util.LinkedHashSet;

import org.eclipse.core.commands.operations.IUndoableOperation;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

public class CommandUtilities {

    public static boolean canRedo (Command command) {
        if (command == null) return false;

        if (command instanceof IUndoableOperation) {
            return ((IUndoableOperation) command).canRedo ();
        } else if (command instanceof CompoundCommand) {
            for (Iterator iter = ((CompoundCommand) command).getCommands ().iterator ();
            iter.hasNext ();) {
                try {
                    if (! canRedo ((Command) iter.next ())) return false;

                } catch (ClassCastException e) {
                    return false;
                }
            }
            return true;
        } else if (command instanceof ICommandProxy) {
            return ((ICommandProxy) command).getICommand ().canRedo ();
        }

        return command.canUndo ();
    }

    public static Collection getAffectedFiles (Command command) {
        if (command == null) return Collections.EMPTY_LIST;

        if (command instanceof ICommand) {
            return ((ICommand) command).getAffectedFiles ();
        } else if (command instanceof ICommandProxy) {
            return ((ICommandProxy) command).getICommand ().getAffectedFiles ();
        } else if (command instanceof CompoundCommand) {
            LinkedHashSet result = new LinkedHashSet ();
            for (Iterator iter = ((CompoundCommand) command).getCommands ().iterator ();
            iter.hasNext ();) {
                result.addAll (getAffectedFiles ((Command) iter.next ()));
            }
            return result;
        }

        return Collections.EMPTY_LIST;
    }

}

