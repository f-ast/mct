package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.codegen.gmfgen.CustomTabFilter;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCustomPropertyTab;

public class CustomTabFilterImpl extends EObjectImpl implements CustomTabFilter {
    protected static final String CLASS_NAME_EDEFAULT = null;
    protected String className = CLASS_NAME_EDEFAULT;

    protected CustomTabFilterImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getCustomTabFilter ();
    }

    public GenCustomPropertyTab getTab () {
        if (eContainerFeatureID != GMFGenPackage.CUSTOM_TAB_FILTER__TAB) return null;

        return (GenCustomPropertyTab) eContainer ();
    }

    public String getClassName () {
        return className;
    }

    public void setClassName (String newClassName) {
        String oldClassName = className;
        className = newClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.CUSTOM_TAB_FILTER__CLASS_NAME, oldClassName, className));

    }

    public String getQualifiedClassName () {
        return getTab ().getSheet ().getEditorGen ().getEditor ().getPackageName () + '.' + getClassName ();
    }

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.CUSTOM_TAB_FILTER__TAB :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.CUSTOM_TAB_FILTER__TAB, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.CUSTOM_TAB_FILTER__TAB :
                return eBasicSetContainer (null, GMFGenPackage.CUSTOM_TAB_FILTER__TAB, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.CUSTOM_TAB_FILTER__TAB :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER, GenCustomPropertyTab.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.CUSTOM_TAB_FILTER__TAB :
                return getTab ();
            case GMFGenPackage.CUSTOM_TAB_FILTER__CLASS_NAME :
                return getClassName ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.CUSTOM_TAB_FILTER__CLASS_NAME :
                setClassName ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.CUSTOM_TAB_FILTER__CLASS_NAME :
                setClassName (CLASS_NAME_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.CUSTOM_TAB_FILTER__TAB :
                return getTab () != null;
            case GMFGenPackage.CUSTOM_TAB_FILTER__CLASS_NAME :
                return CLASS_NAME_EDEFAULT == null ? className != null : ! CLASS_NAME_EDEFAULT.equals (className);
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (className: ");
        result.append (className);
        result.append (')');
        return result.toString ();
    }

}

