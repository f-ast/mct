package org.eclipse.gmf.runtime.diagram.ui.providers.internal;

import java.util.HashMap;

import java.util.Map;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint;

import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;

import org.eclipse.gmf.runtime.diagram.core.util.ViewType;

import org.eclipse.gmf.runtime.diagram.ui.view.factories.BasicNodeViewFactory;

import org.eclipse.gmf.runtime.diagram.ui.view.factories.NoteAttachmentViewFactory;

import org.eclipse.gmf.runtime.diagram.ui.view.factories.NoteViewFactory;

import org.eclipse.gmf.runtime.diagram.ui.view.factories.TextShapeViewFactory;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public class DiagramViewProvider extends AbstractViewProvider {
    static private final Map nodeMap = new HashMap ();

    static {
        nodeMap.put (CommonParserHint.DESCRIPTION, BasicNodeViewFactory.class);
        nodeMap.put (ViewType.DIAGRAM_NAME, BasicNodeViewFactory.class);
        nodeMap.put (ViewType.NOTE, NoteViewFactory.class);
        nodeMap.put (ViewType.TEXT, TextShapeViewFactory.class);
        nodeMap.put (NotationPackage.eINSTANCE.getDiagram (), NoteViewFactory.class);
    }

    static private final Map connectionMap = new HashMap ();

    static {
        connectionMap.put (ViewType.NOTEATTACHMENT, NoteAttachmentViewFactory.class);
    }

    protected Class getNodeViewClass (IAdaptable semanticAdapter, View containerView, String semanticHint) {
        if (semanticHint != null && semanticHint.length () > 0) return (Class) nodeMap.get (semanticHint);

        return (Class) nodeMap.get (getSemanticEClass (semanticAdapter));
    }

    protected Class getEdgeViewClass (IAdaptable semanticAdapter, View containerView, String semanticHint) {
        return (Class) connectionMap.get (semanticHint);
    }

    public static boolean isNoteView (View view) {
        if ((view != null)) {
            return (NoteViewFactory.class.equals (nodeMap.get (view.getType ())));
        }
        return false;
    }

    public static boolean isTextView (View view) {
        if ((view != null)) {
            return (TextShapeViewFactory.class.equals (nodeMap.get (view.getType ())));
        }
        return false;
    }

}

