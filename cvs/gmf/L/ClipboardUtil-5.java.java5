package org.eclipse.gmf.runtime.emf.clipboard.core;

import java.util.Collection;

import java.util.Collections;

import java.util.Map;

import java.util.Set;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.core.runtime.OperationCanceledException;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.gmf.runtime.emf.clipboard.core.internal.ClipboardPlugin;

import org.eclipse.gmf.runtime.emf.clipboard.core.internal.ClipboardSupportManager;

import org.eclipse.gmf.runtime.emf.clipboard.core.internal.DefaultClipboardSupport;

import org.eclipse.gmf.runtime.emf.clipboard.core.internal.PasteOperation;

import org.eclipse.gmf.runtime.emf.clipboard.core.internal.SerializationEMFResource;

public class ClipboardUtil {
    public final static String MERGE_HINT_WEAK = "*merge=weak";
    public final static String MERGE_HINT_STRONG = "*merge=strong";
    public final static String RECYCLE_HINT_ID = "*recycle=id";
    public final static String IGNORE_RECYCLE_HINT_ID = "*ignore_recycle=id";
    public final static String PASTE_TO_TARGET_PARENT = "*paste=parent";
    public final static String HARVESTED_ELEMENT = "*paste=harvest";
    private static final String PASTE_SELECTION_FROM_STRING = "pasteElementsFromString";
    private static final String COPY_SELECTION_TO_STRING = "copyElementsToString";

    private ClipboardUtil () {
        super ();
    }

    public static String copyElementsToString (Collection eObjects, Map hints, IProgressMonitor monitor) {
        try {
            if (monitor == null) {
                monitor = new NullProgressMonitor ();
            }
            monitor.beginTask (CopyOperation.COPY, CopyOperation.TOTAL_WORK);
            eObjects = ClipboardSupportUtil.getCopyElements (eObjects);
            if (eObjects.isEmpty () == false) {
                if (hints == null) {
                    hints = Collections.EMPTY_MAP;
                }
                CopyOperation copyOperation = new CopyOperation (monitor, createClipboardSupport (((EObject) eObjects.toArray () [0]).eClass ()), eObjects, hints);
                return copyOperation.copy ();
            }
        } catch (Exception ex) {
            handleException (ex, COPY_SELECTION_TO_STRING);
        } finally {
            monitor.done ();
        }
        return null;
    }

    public static Collection pasteElementsFromString (String string, EObject targetElement, final Map hints, IProgressMonitor monitor) {
        return pasteElementsFromStringDelagate (string, new PasteTarget (targetElement), hints, monitor);
    }

    public static Collection pasteElementsFromString (String string, Resource targetElement, final Map hints, IProgressMonitor monitor) {
        return pasteElementsFromStringDelagate (string, new PasteTarget (targetElement), hints, monitor);
    }

    private static Collection pasteElementsFromStringDelagate (String string, PasteTarget targetElement, final Map hints, IProgressMonitor monitor) {
        Set result = null;
        try {
            if (monitor == null) {
                monitor = new NullProgressMonitor ();
            }
            monitor.beginTask (BasePasteOperation.PASTE, PasteOperation.TOTAL_WORK);
            IClipboardSupport helper = targetElement.isResource () ? DefaultClipboardSupport.getInstance () : createClipboardSupport (((EObject) targetElement.getObject ()).eClass ());
            if (string.length () == 0) {
                return Collections.EMPTY_SET;
            }
            PasteOperation pasteProcess = new PasteOperation (monitor, helper, string, targetElement, SerializationEMFResource.LOAD_OPTIONS, hints);
            pasteProcess.paste ();
            result = pasteProcess.getPastedElementSet ();
            helper.performPostPasteProcessing (result);
        } catch (Exception ex) {
            handleException (ex, PASTE_SELECTION_FROM_STRING);
        } finally {
            monitor.done ();
        }
        return result;
    }

    private static void handleException (Exception ex, String methodname) {
        if (ex instanceof OperationCanceledException) {
            ClipboardPlugin.catching (ClipboardUtil.class, methodname, ex);
        } else {
            ClipboardPlugin.throwing (ClipboardUtil.class, methodname, ex);
            throw (ex instanceof RuntimeException) ? (RuntimeException) ex : new RuntimeException ("Copy-Paste General Error", ex);
        }
    }

    public static IClipboardSupport createClipboardSupport (EClass eClass) {
        IClipboardSupport result = DefaultClipboardSupport.getInstance ();
        EPackage ePackage = eClass.getEPackage ();
        IClipboardSupportFactory factory = ClipboardSupportManager.lookup (ePackage);
        if (factory != null) {
            result = factory.newClipboardSupport (ePackage);
        }
        return result;
    }

}

