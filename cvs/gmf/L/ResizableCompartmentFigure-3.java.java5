package org.eclipse.gmf.runtime.diagram.ui.figures;

import java.util.List;

import org.eclipse.draw2d.Figure;

import org.eclipse.draw2d.Graphics;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.Label;

import org.eclipse.draw2d.MarginBorder;

import org.eclipse.draw2d.Orientable;

import org.eclipse.draw2d.ScrollPane;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.Font;

import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;

import org.eclipse.gmf.runtime.draw2d.ui.figures.ListScrollBar;

import org.eclipse.gmf.runtime.draw2d.ui.figures.OneLineBorder;

import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;

import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.AnimatableScrollPane;

import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.OverlayScrollPaneLayout;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;

import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;

public class ResizableCompartmentFigure extends NodeFigure {
    public static final int MIN_CLIENT_SIZE = MapMode.DPtoLP (11);
    private static Dimension minClientDim = new Dimension (MIN_CLIENT_SIZE, MIN_CLIENT_SIZE);
    private boolean _horizontal = false;
    private Figure textPane = null;
    private WrapLabel titleLabel;
    protected AnimatableScrollPane scrollPane;
    private boolean selected;
    private boolean isScrollPaneInitialized = false;

    public ResizableCompartmentFigure (String compartmentTitle) {
        setTextPane (new Figure () {

            public Dimension getMaximumSize () {
                return getPreferredSize ();
            }

        }

        );
        getTextPane ().setLayoutManager (new ConstrainedToolbarLayout ());
        add (getTextPane ());
        add (scrollPane = createScrollpane ());
        setLayoutManager (new ConstrainedToolbarLayout ());
        setTitle (compartmentTitle);
        setToolTip (compartmentTitle);
        setBorder (new OneLineBorder ());
    }

    protected AnimatableScrollPane createScrollpane () {
        scrollPane = new AnimatableScrollPane ();
        scrollPane.getViewport ().setContentsTracksWidth (true);
        scrollPane.getViewport ().setContentsTracksHeight (false);
        scrollPane.setLayoutManager (new OverlayScrollPaneLayout ());
        scrollPane.setVerticalScrollBar (new ListScrollBar (Orientable.VERTICAL));
        scrollPane.setVerticalScrollBarVisibility (ScrollPane.AUTOMATIC);
        scrollPane.setHorizontalScrollBarVisibility (ScrollPane.NEVER);
        scrollPane.setContents (new Figure ());
        scrollPane.getContents ().setBorder (new MarginBorder (1, MIN_CLIENT_SIZE / 2, 1, MIN_CLIENT_SIZE / 2));
        return scrollPane;
    }

    public void setTitleVisibility (boolean visibility) {
        getTextPane ().setVisible (visibility);
    }

    public void expand () {
        scrollPane.expand ();
        scrollPane.setVerticalScrollBarVisibility (ScrollPane.AUTOMATIC);
    }

    public void collapse () {
        scrollPane.setVerticalScrollBarVisibility (ScrollPane.NEVER);
        scrollPane.collapse ();
    }

    public void setExpanded () {
        scrollPane.setExpanded (true);
        scrollPane.setVerticalScrollBarVisibility (ScrollPane.AUTOMATIC);
    }

    public void setCollapsed () {
        scrollPane.setVerticalScrollBarVisibility (ScrollPane.NEVER);
        scrollPane.setExpanded (false);
    }

    public IFigure getContentPane () {
        return scrollPane.getContents ();
    }

    public void setFont (Font f) {
        textPane.setFont (f);
    }

    public void setFontColor (Color c) {
        textPane.setForegroundColor (c);
    }

    public void setTitle (String title) {
        if (title == null) {
            if (titleLabel != null) getTextPane ().remove (titleLabel);

        } else if (titleLabel == null) {
            getTextPane ().add (titleLabel = new WrapLabel (title));
        } else titleLabel.setText (title);

    }

    public void setToolTip (String tooltip) {
        if (tooltip == null) setToolTip ((IFigure) null);
        else if (getToolTip () instanceof Label) ((Label) getToolTip ()).setText (tooltip);
        else setToolTip (new Label (tooltip));

    }

    public final AnimatableScrollPane getScrollPane () {
        return scrollPane;
    }

    public final boolean isExpanded () {
        return getScrollPane ().isExpanded ();
    }

    public final String getCompartmentTitle () {
        return titleLabel == null ? null : titleLabel.getText ();
    }

    public final IFigure getAdjacentSibling (boolean before) {
        List siblings = getParent ().getChildren ();
        int index = siblings.indexOf (this);
        if (before) {
            for (int i = index - 1;
            i >= 0; i --) {
                IFigure sibling = (IFigure) siblings.get (i);
                if (sibling instanceof ResizableCompartmentFigure && sibling.isVisible ()) return sibling;

            }
        } else {
            for (int i = index + 1;
            i < siblings.size (); i ++) {
                IFigure sibling = (IFigure) siblings.get (i);
                if (sibling instanceof ResizableCompartmentFigure && sibling.isVisible ()) return sibling;

            }
        }
        return null;
    }

    public void setSelected (boolean b) {
        if (this.selected == b) return;

        selected = b;
        repaint ();
    }

    protected void paintFigure (Graphics graphics) {
        super.paintFigure (graphics);
        if (selected) {
            graphics.setLineWidth (2);
            graphics.drawRectangle (getClientArea ().shrink (MapMode.DPtoLP (1), MapMode.DPtoLP (1)));
        }
    }

    public Dimension getPreferredSize (int wHint, int hHint) {
        Dimension p = super.getPreferredSize (wHint, hHint);
        return p.getUnioned (getMinimumSize (wHint, hHint));
    }

    public Dimension getMinimumSize (int w, int h) {
        if (minSize != null) return minSize;

        minSize = new Dimension ();
        if (getLayoutManager () != null) {
            minSize = getLayoutManager ().getMinimumSize (this, w, h);
        }
        int minHeight = getMinClientDimension ().height + getInsets ().getHeight ();
        minSize.height = Math.max (minHeight, minSize.height);
        if (h >= 0) minSize.height = Math.min (minSize.height, h);

        int minWidth = getMinClientDimension ().width + getInsets ().getWidth ();
        minSize.width = Math.max (minWidth, minSize.width);
        if (w >= 0) minSize.width = Math.min (minSize.width, w);

        return minSize;
    }

    public final boolean isHorizontal () {
        return _horizontal;
    }

    public final void setHorizontal (boolean horizontal) {
        _horizontal = horizontal;
    }

    public Dimension getMaximumSize () {
        Dimension d = super.getMaximumSize ().getCopy ();
        if (! isExpanded ()) if (isHorizontal ()) {
            d.width = getPreferredSize ().width;
        } else {
            d.height = getPreferredSize ().height;
        }

        return d;
    }

    public void invalidate () {
        prefSize = null;
        minSize = null;
        super.invalidate ();
    }

    public Figure getTextPane () {
        return textPane;
    }

    private void setTextPane (Figure textPane) {
        this.textPane = textPane;
    }

    public Dimension getMinClientDimension () {
        return minClientDim;
    }

    public void validate () {
        super.validate ();
        initializeScrollPane ();
    }

    private void initializeScrollPane () {
        if (! isScrollPaneInitialized) {
            if (getScrollPane () != null) {
                Point topLeft = getScrollPane ().getContents ().getBounds ().getTopLeft ();
                if (topLeft.x < 0) {
                    getScrollPane ().getViewport ().getHorizontalRangeModel ().setValue (topLeft.x);
                }
                if (topLeft.y < 0) {
                    getScrollPane ().getViewport ().getVerticalRangeModel ().setValue (topLeft.y);
                }
            }
            isScrollPaneInitialized = true;
        }
    }

}

