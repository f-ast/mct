package org.eclipse.gmf.gmfgraph.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.gmfgraph.GMFGraphFactory;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.PolylineConnection;

public class PolylineConnectionItemProvider extends PolylineItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public PolylineConnectionItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
        }
        return itemPropertyDescriptors;
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getPolylineConnection_SourceDecoration ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getPolylineConnection_TargetDecoration ());
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    public Object getImage (Object object) {
        return getResourceLocator ().getImage ("full/obj16/PolylineConnection");
    }

    public String getText (Object object) {
        String label = ((PolylineConnection) object).getName ();
        return label == null || label.length () == 0 ? getString ("_UI_PolylineConnection_type") : getString ("_UI_PolylineConnection_type") + " " + label;
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (PolylineConnection.class)) {
            case GMFGraphPackage.POLYLINE_CONNECTION__SOURCE_DECORATION :
            case GMFGraphPackage.POLYLINE_CONNECTION__TARGET_DECORATION :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getPolylineConnection_SourceDecoration (), GMFGraphFactory.eINSTANCE.createPolylineDecoration ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getPolylineConnection_SourceDecoration (), GMFGraphFactory.eINSTANCE.createPolygonDecoration ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getPolylineConnection_SourceDecoration (), GMFGraphFactory.eINSTANCE.createCustomDecoration ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getPolylineConnection_TargetDecoration (), GMFGraphFactory.eINSTANCE.createPolylineDecoration ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getPolylineConnection_TargetDecoration (), GMFGraphFactory.eINSTANCE.createPolygonDecoration ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getPolylineConnection_TargetDecoration (), GMFGraphFactory.eINSTANCE.createCustomDecoration ()));
    }

    public String getCreateChildText (Object owner, Object feature, Object child, Collection selection) {
        Object childFeature = feature;
        Object childObject = child;
        boolean qualify = childFeature == GMFGraphPackage.eINSTANCE.getFigure_Children () || childFeature == GMFGraphPackage.eINSTANCE.getPolylineConnection_SourceDecoration () || childFeature == GMFGraphPackage.eINSTANCE.getPolylineConnection_TargetDecoration () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_MaximumSize () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_MinimumSize () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_PreferredSize () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_Location () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_Size () || childFeature == GMFGraphPackage.eINSTANCE.getPolyline_Template ();
        if (qualify) {
            return getString ("_UI_CreateChild_text2", new Object [] {getTypeText (childObject), getFeatureText (childFeature), getTypeText (owner)});
        }
        return super.getCreateChildText (owner, feature, child, selection);
    }

    public ResourceLocator getResourceLocator () {
        return GMFGraphEditPlugin.INSTANCE;
    }

}

