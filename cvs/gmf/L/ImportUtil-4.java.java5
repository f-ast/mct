package org.eclipse.gmf.internal.common.codegen;

import java.util.Iterator;

import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;

import org.eclipse.emf.codegen.util.CodeGenUtil;

import org.eclipse.emf.codegen.util.ImportManager;

import org.eclipse.gmf.common.codegen.ImportAssistant;

import org.eclipse.jdt.core.ICompilationUnit;

import org.eclipse.jdt.core.IPackageFragmentRoot;

import org.eclipse.jdt.core.JavaModelException;

public class ImportUtil implements ImportAssistant {
    private final ImportManager myImportManager;
    private final String myPackageName;
    private final String myUnitName;
    private StringBuffer importStringBuffer;
    private int importInsertionPoint;

    public ImportUtil (String compilationUnitPackage, String compilationUnitName, IPackageFragmentRoot sourceRoot) {
        this (compilationUnitPackage, compilationUnitName);
        if (sourceRoot != null) {
            ICompilationUnit existingCU = sourceRoot.getPackageFragment (compilationUnitPackage).getCompilationUnit (compilationUnitName + ".java");
            if (existingCU.exists ()) {
                try {
                    myImportManager.addCompilationUnitImports (existingCU.getSource ());
                } catch (JavaModelException e) {
                }
            }
        }
    }

    public ImportUtil (String compilationUnitPackage, String compilationUnitName) {
        assert compilationUnitName != null && compilationUnitName.trim ().length () > 0;
        myImportManager = new ImportManager (compilationUnitPackage);
        myImportManager.addMasterImport (compilationUnitPackage == null ? "" : compilationUnitPackage, compilationUnitName);
        myPackageName = compilationUnitPackage;
        myUnitName = compilationUnitName;
    }

    public void emitPackageStatement (StringBuffer stringBuffer) {
        if (myPackageName == null || myPackageName.trim ().length () == 0) {
            return;
        }
        stringBuffer.append ("\npackage ");
        stringBuffer.append (myPackageName);
        stringBuffer.append (';');
    }

    public String getCompilationUnitName () {
        return myUnitName;
    }

    public void markImportLocation (StringBuffer stringBuffer, GenPackage genPackage) {
        markImportLocation (stringBuffer);
        myImportManager.addJavaLangImports (genPackage.getJavaLangConflicts ());
    }

    public void markImportLocation (StringBuffer stringBuffer) {
        importStringBuffer = stringBuffer;
        importInsertionPoint = stringBuffer.length ();
        myImportManager.addCompilationUnitImports (stringBuffer.toString ());
    }

    public void emitSortedImports () {
        String NL = System.getProperties ().getProperty ("line.separator");
        StringBuffer importsBuf = new StringBuffer ();
        String previousPackageName = null;
        for (Iterator iter = myImportManager.getImports ().iterator ();
        iter.hasNext ();) {
            String importName = (String) iter.next ();
            int index = importName.lastIndexOf (".");
            if (index != - 1) {
                String packageName = importName.substring (0, index);
                if (previousPackageName != null && ! previousPackageName.equals (packageName)) {
                    importsBuf.append (NL);
                }
                previousPackageName = packageName;
            }
            importsBuf.append (NL + "import " + importName + ";");
        }
        importStringBuffer.insert (importInsertionPoint, importsBuf.toString ());
    }

    public String getImportedName (String qualifiedName) {
        if (qualifiedName.equals (CodeGenUtil.getSimpleClassName (qualifiedName))) {
            return qualifiedName;
        }
        int index = qualifiedName.indexOf ("$");
        myImportManager.addImport (index == - 1 ? qualifiedName : qualifiedName.substring (0, index));
        return myImportManager.getImportedName (qualifiedName);
    }

    public void addImport (String qualifiedName) {
        myImportManager.addImport (qualifiedName);
    }

    public void registerInnerClass (String innerClassName) {
        myImportManager.addPseudoImport (innerClassName);
    }

    public void addImport (String packageName, String shortName) {
        myImportManager.addImport (packageName, shortName);
    }

}

