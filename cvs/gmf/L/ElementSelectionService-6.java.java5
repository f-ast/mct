package org.eclipse.gmf.runtime.common.ui.services.elementselection;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.Platform;

import org.eclipse.core.runtime.jobs.IJobManager;

import org.eclipse.core.runtime.jobs.Job;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.ui.services.internal.CommonUIServicesPlugin;

import org.eclipse.gmf.runtime.common.ui.services.internal.elementselection.ElementSelectionList;

import org.eclipse.gmf.runtime.common.ui.services.internal.elementselection.MatchingObjectsOperation;

import org.eclipse.gmf.runtime.common.ui.services.internal.l10n.CommonUIServicesMessages;

import org.eclipse.gmf.runtime.common.ui.services.util.ActivityFilterProviderDescriptor;

import org.eclipse.osgi.util.NLS;

import org.eclipse.ui.PlatformUI;

public class ElementSelectionService extends Service implements IElementSelectionProvider, IElementSelectionListener {
    private static class ProviderDescriptor extends Service.ProviderDescriptor {
        private ActivityFilterProviderDescriptor activityFilter;

        public ProviderDescriptor (IConfigurationElement element) {
            super (element);
            activityFilter = new ActivityFilterProviderDescriptor (element);
        }

        public boolean provides (IOperation operation) {
            return activityFilter.provides (operation) && super.provides (operation);
        }

    }

    protected class JobData {
        public IElementSelectionInput elementSelectionInput;
        public IElementSelectionListener elementSelectionListener;
        public HashMap jobs = new HashMap ();
    }

    private Map jobs2Data = new HashMap ();

    public JobData getJobData () {
        Job currentJob = jobManager.currentJob ();
        assert currentJob != null;
        if (currentJob == null) {
            return null;
        }
        JobData data = null;
        synchronized (jobs2Data) {
            data = (JobData) jobs2Data.get (currentJob);
        }
        return data;
    }

    private final static ElementSelectionService instance = new ElementSelectionService ();

    static {
        instance.configureProviders ();
    }

    protected ElementSelectionService () {
        super (true);
    }

    public static ElementSelectionService getInstance () {
        return instance;
    }

    public List getMatchingObjects (IElementSelectionInput input) {
        return new ElementSelectionList ().getMatchingObjects (input);
    }

    public ElementSelectionServiceJob getMatchingObjects (IElementSelectionInput input, IElementSelectionListener listener) {
        ElementSelectionServiceJob job = createSelectionJob ();
        JobData data = new JobData ();
        data.elementSelectionInput = input;
        data.elementSelectionListener = listener;
        job.setName (getJobName (data));
        synchronized (jobs2Data) {
            jobs2Data.put (job, data);
        }
        job.schedule ();
        return job;
    }

    protected String getJobName () {
        return StringStatics.BLANK;
    }

    protected ElementSelectionServiceJob createSelectionJob () {
        ElementSelectionServiceJob job = new ElementSelectionServiceJob (getJobName (), this);
        job.setPriority (Job.SHORT);
        return job;
    }

    public static final IJobManager jobManager = Platform.getJobManager ();

    public void run (IProgressMonitor monitor) {
        JobData data = getJobData ();
        if (data == null) return;

        List results = new ArrayList ();
        IOperation operation = new MatchingObjectsOperation (data.elementSelectionInput);
        for (int i = 0;
        i < ExecutionStrategy.PRIORITIES.length; ++ i) {
            List providers = ExecutionStrategy.FORWARD.getUncachedProviders (this, ExecutionStrategy.PRIORITIES [i], operation);
            results.addAll (providers);
        }
        for (Iterator i = results.iterator ();
        i.hasNext ();) {
            IElementSelectionProvider provider = (IElementSelectionProvider) i.next ();
            addJob (data, provider);
        }
        HashMap jobsClone;
        synchronized (data) {
            jobsClone = (HashMap) data.jobs.clone ();
        }
        for (Iterator i = jobsClone.entrySet ().iterator ();
        i.hasNext ();) {
            Map.Entry entry = (Map.Entry) i.next ();
            IElementSelectionProvider provider = (IElementSelectionProvider) entry.getKey ();
            ElementSelectionServiceJob job = (ElementSelectionServiceJob) entry.getValue ();
            schedule (provider, job);
        }
        monitor.beginTask (getJobName (data), 1000);
        while (true) {
            synchronized (data) {
                if (data.jobs.size () == 0) {
                    break;
                }
            }
            monitor.worked (1);
            if (monitor.isCanceled ()) {
                synchronized (data) {
                    data.elementSelectionListener = null;
                    cancelAllJobs ();
                    break;
                }
            }
        }
        monitor.done ();
    }

    protected void schedule (IElementSelectionProvider provider, ElementSelectionServiceJob job) {
        job.schedule ();
    }

    public Object resolve (IMatchingObject object) {
        return null;
    }

    protected String getJobName (JobData data) {
        if ((getJobName () != null && getJobName ().equals (StringStatics.BLANK)) && data != null) {
            String providerName = getClass ().getName ().substring (getClass ().getName ().lastIndexOf ('.') + 1);
            String filter = data.elementSelectionInput.getInput ();
            return NLS.bind (CommonUIServicesMessages.ElementSelectionService_JobName, new String [] {providerName, filter});
        }
        return getJobName ();
    }

    private void addJob (JobData data, IElementSelectionProvider provider) {
        ElementSelectionServiceJob job = provider.getMatchingObjects (data.elementSelectionInput, this);
        synchronized (data) {
            data.jobs.put (provider, job);
        }
        synchronized (jobs2Data) {
            jobs2Data.put (job, data);
        }
    }

    private void removeJob (JobData data, IElementSelectionProvider provider) {
        boolean end_of_matches = false;
        Object job = null;
        synchronized (data) {
            job = data.jobs.remove (provider);
            if (data.jobs.size () == 0) {
                end_of_matches = true;
            }
        }
        if (end_of_matches) {
            fireEndOfMatchesEvent ();
        }
        synchronized (jobs2Data) {
            jobs2Data.remove (job);
        }
    }

    protected void fireMatchingObjectEvent (final IMatchingObjectEvent matchingObjectEvent) {
        final Job currentJob = jobManager.currentJob ();
        if (currentJob == null) return;

        JobData data = null;
        synchronized (jobs2Data) {
            data = (JobData) jobs2Data.get (currentJob);
        }
        if (data == null) return;

        final JobData finalData = data;
        PlatformUI.getWorkbench ().getDisplay ().asyncExec (new Runnable () {

            public void run () {
                synchronized (finalData) {
                    if (finalData.elementSelectionListener != null) {
                        finalData.elementSelectionListener.matchingObjectEvent (matchingObjectEvent);
                    }
                }
            }

        }

        );
    }

    protected void fireEndOfMatchesEvent () {
        IMatchingObject matchingObject = new AbstractMatchingObject (null, null, null, this);
        MatchingObjectEvent matchingObjectEvent = new MatchingObjectEvent (MatchingObjectEventType.END_OF_MATCHES, matchingObject);
        fireMatchingObjectEvent (matchingObjectEvent);
    }

    public void matchingObjectEvent (IMatchingObjectEvent matchingObjectEvent) {
        JobData data = getJobData ();
        if (data == null) return;

        if (matchingObjectEvent.getEventType () == MatchingObjectEventType.END_OF_MATCHES) {
            removeJob (data, matchingObjectEvent.getMatchingObject ().getProvider ());
        } else {
            fireMatchingObjectEvent (matchingObjectEvent);
        }
    }

    protected void cancelAllJobs () {
        JobData data = getJobData ();
        HashMap jobsClone;
        synchronized (data) {
            jobsClone = (HashMap) data.jobs.clone ();
        }
        for (Iterator i = jobsClone.entrySet ().iterator ();
        i.hasNext ();) {
            Map.Entry entry = (Map.Entry) i.next ();
            IElementSelectionProvider provider = (IElementSelectionProvider) entry.getKey ();
            ElementSelectionServiceJob job = (ElementSelectionServiceJob) entry.getValue ();
            job.cancel ();
            removeJob (data, provider);
        }
    }

    protected Service.ProviderDescriptor newProviderDescriptor (IConfigurationElement element) {
        return new ProviderDescriptor (element);
    }

    protected void configureProviders () {
        configureProviders (CommonUIServicesPlugin.getPluginId (), "elementSelectionProviders");
    }

    public void cancelJob (ElementSelectionServiceJob job) {
        JobData data = null;
        synchronized (jobs2Data) {
            data = (JobData) jobs2Data.get (job);
        }
        synchronized (data) {
            data.elementSelectionListener = null;
        }
        job.cancel ();
    }

}

