package org.eclipse.gmf.codegen.util;

import java.lang.reflect.InvocationTargetException;

import java.net.MalformedURLException;

import java.net.URL;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.core.runtime.Platform;

import org.eclipse.core.runtime.Status;

import org.eclipse.emf.codegen.jet.JETCompiler;

import org.eclipse.emf.codegen.merge.java.JControlModel;

import org.eclipse.emf.codegen.merge.java.JMerger;

import org.eclipse.emf.codegen.util.CodeGenUtil;

import org.eclipse.emf.common.CommonPlugin;

import org.eclipse.emf.common.util.URI;

import org.eclipse.gmf.codegen.templates.commands.CreateTypeNodeCommandGenerator;

import org.eclipse.gmf.codegen.templates.editor.ActionBarContributorGenerator;

import org.eclipse.gmf.codegen.templates.editor.BuildPropertiesGenerator;

import org.eclipse.gmf.codegen.templates.editor.CreateShortcutActionGenerator;

import org.eclipse.gmf.codegen.templates.editor.CreationWizardGenerator;

import org.eclipse.gmf.codegen.templates.editor.CreationWizardPageGenerator;

import org.eclipse.gmf.codegen.templates.editor.EditorGenerator;

import org.eclipse.gmf.codegen.templates.editor.ElementChooserGenerator;

import org.eclipse.gmf.codegen.templates.editor.LoadResourceActionGenerator;

import org.eclipse.gmf.codegen.templates.editor.OptionsFileGenerator;

import org.eclipse.gmf.codegen.templates.editor.PluginGenerator;

import org.eclipse.gmf.codegen.templates.expressions.AbstractExpressionGenerator;

import org.eclipse.gmf.codegen.templates.expressions.OCLExpressionFactoryGenerator;

import org.eclipse.gmf.codegen.templates.expressions.RegexpExpressionFactoryGenerator;

import org.eclipse.gmf.codegen.templates.helpers.BaseEditHelperGenerator;

import org.eclipse.gmf.codegen.templates.helpers.EditHelperAdviceGenerator;

import org.eclipse.gmf.codegen.templates.helpers.EditHelperGenerator;

import org.eclipse.gmf.codegen.templates.navigator.NavigatorActionProviderGenerator;

import org.eclipse.gmf.codegen.templates.navigator.NavigatorLabelProviderGenerator;

import org.eclipse.gmf.codegen.templates.navigator.NavigatorSorterGenerator;

import org.eclipse.gmf.codegen.templates.policies.CompartmentItemSemanticEditPolicyGenerator;

import org.eclipse.gmf.codegen.templates.policies.DiagramItemSemanticEditPolicyGenerator;

import org.eclipse.gmf.codegen.templates.policies.GraphicalNodeEditPolicyGenerator;

import org.eclipse.gmf.codegen.templates.providers.ContributionItemProviderGenerator;

import org.eclipse.gmf.codegen.templates.providers.EditPartProviderGenerator;

import org.eclipse.gmf.codegen.templates.providers.ElementInitializersGenerator;

import org.eclipse.gmf.codegen.templates.providers.IconProviderGenerator;

import org.eclipse.gmf.codegen.templates.providers.MetricProviderGenerator;

import org.eclipse.gmf.codegen.templates.providers.ModelingAssistantProviderGenerator;

import org.eclipse.gmf.codegen.templates.providers.ShortcutsDecoratorProviderGenerator;

import org.eclipse.gmf.codegen.templates.providers.ShortcutsPropertyTester;

import org.eclipse.gmf.codegen.templates.providers.ValidationProviderGenerator;

import org.eclipse.gmf.common.UnexpectedBehaviourException;

import org.eclipse.gmf.internal.codegen.dispatch.CachingEmitterFactory;

import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactory;

import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactoryImpl;

import org.eclipse.gmf.internal.codegen.dispatch.NoSuchTemplateException;

import org.eclipse.gmf.internal.codegen.dispatch.StaticTemplateRegistry;

import org.eclipse.gmf.internal.common.codegen.BinaryEmitter;

import org.eclipse.gmf.internal.common.codegen.DefaultTextMerger;

import org.eclipse.gmf.internal.common.codegen.GIFEmitter;

import org.eclipse.gmf.internal.common.codegen.JETEmitterAdapter;

import org.eclipse.gmf.internal.common.codegen.JETGIFEmitterAdapter;

import org.eclipse.gmf.internal.common.codegen.TextEmitter;

import org.eclipse.gmf.internal.common.codegen.TextMerger;

import org.eclipse.gmf.internal.common.codegen.XpandTextEmitter;

import org.eclipse.gmf.internal.xpand.ResourceManager;

import org.eclipse.gmf.internal.xpand.util.BundleResourceManager;

import org.osgi.framework.Bundle;

public class CodegenEmitters {
    private static final String PATH_SEPARATOR = "::";
    private static final String TEMPLATES_PLUGIN_ID = "org.eclipse.gmf.codegen";
    private final EmitterFactory myFactory;
    private final String [] myTemplatePath;
    private ResourceManager myResourceManager;

    public CodegenEmitters (boolean usePrecompiled, String templateDirectory) {
        this (usePrecompiled, templateDirectory, getDefaultVariables (), new StaticTemplateRegistry (CodegenEmitters.class.getClassLoader ()));
    }

    public CodegenEmitters (boolean usePrecompiled, String templateDirectory, String [] variables, StaticTemplateRegistry registry) {
        initRegistry (registry);
        final URL baseURL = getTemplatesBundle ().getEntry ("/templates/");
        final URL dynamicURL = usePrecompiled ? null : getDynamicTemplatesURL (templateDirectory);
        myTemplatePath = new String [] {dynamicURL != null ? dynamicURL.toString () : null, baseURL.toString ()};
        myFactory = new CachingEmitterFactory (new EmitterFactoryImpl (getTemplatePath (), registry, usePrecompiled, variables));
        if (dynamicURL == null) {
            myResourceManager = new BundleResourceManager (baseURL);
        } else {
            myResourceManager = new BundleResourceManager (dynamicURL, baseURL);
        }
    }

    public TextMerger createMergeService () {
        URL controlFile = getJMergeControlFile ();
        if (controlFile != null) {
            JControlModel controlModel = new JControlModel ();
            controlModel.initialize (CodeGenUtil.instantiateFacadeHelper (JMerger.DEFAULT_FACADE_HELPER_CLASS), controlFile.toString ());
            if (! controlModel.canMerge ()) {
                throw new IllegalStateException ("Can not initialize JControlModel");
            }
            return new DefaultTextMerger (controlModel);
        }
        return null;
    }

    private static void initRegistry (StaticTemplateRegistry tr) {
        put (tr, "/helpers/BaseEditHelper.javajet", BaseEditHelperGenerator.class);
        put (tr, "/helpers/EditHelper.javajet", EditHelperGenerator.class);
        put (tr, "/helpers/EditHelperAdvice.javajet", EditHelperAdviceGenerator.class);
        put (tr, "/policies/GraphicalNodeEditPolicy.javajet", GraphicalNodeEditPolicyGenerator.class);
        put (tr, "/policies/DiagramItemSemanticEditPolicy.javajet", DiagramItemSemanticEditPolicyGenerator.class);
        put (tr, "/policies/CompartmentItemSemanticEditPolicy.javajet", CompartmentItemSemanticEditPolicyGenerator.class);
        put (tr, "/commands/CreateTypeNodeCommand.javajet", CreateTypeNodeCommandGenerator.class);
        put (tr, "/providers/EditPartProvider.javajet", EditPartProviderGenerator.class);
        put (tr, "/providers/ContributionItemProvider.javajet", ContributionItemProviderGenerator.class);
        put (tr, "/providers/ModelingAssistantProvider.javajet", ModelingAssistantProviderGenerator.class);
        put (tr, "/providers/IconProvider.javajet", IconProviderGenerator.class);
        put (tr, "/providers/ElementInitializers.javajet", ElementInitializersGenerator.class);
        put (tr, "/providers/ValidationProvider.javajet", ValidationProviderGenerator.class);
        put (tr, "/providers/ShortcutsDecoratorProvider.javajet", ShortcutsDecoratorProviderGenerator.class);
        put (tr, "/editor/ShortcutPropertyTester.javajet", ShortcutsPropertyTester.class);
        put (tr, "/providers/MetricProvider.javajet", MetricProviderGenerator.class);
        put (tr, "/editor/CreationWizard.javajet", CreationWizardGenerator.class);
        put (tr, "/editor/CreationWizardPage.javajet", CreationWizardPageGenerator.class);
        put (tr, "/editor/Editor.javajet", EditorGenerator.class);
        put (tr, "/editor/CreateShortcutAction.javajet", CreateShortcutActionGenerator.class);
        put (tr, "/editor/LoadResourceAction.javajet", LoadResourceActionGenerator.class);
        put (tr, "/editor/ElementChooser.javajet", ElementChooserGenerator.class);
        put (tr, "/editor/ActionBarContributor.javajet", ActionBarContributorGenerator.class);
        put (tr, "/navigator/NavigatorLabelProvider.javajet", NavigatorLabelProviderGenerator.class);
        put (tr, "/navigator/NavigatorSorter.javajet", NavigatorSorterGenerator.class);
        put (tr, "/navigator/NavigatorActionProvider.javajet", NavigatorActionProviderGenerator.class);
        put (tr, "/editor/Plugin.javajet", PluginGenerator.class);
        put (tr, "/editor/.optionsjet", OptionsFileGenerator.class);
        put (tr, "/editor/build.propertiesjet", BuildPropertiesGenerator.class);
        put (tr, "/expressions/AbstractExpression.javajet", AbstractExpressionGenerator.class);
        put (tr, "/expressions/OCLExpressionFactory.javajet", OCLExpressionFactoryGenerator.class);
        put (tr, "/expressions/RegexpExpressionFactory.javajet", RegexpExpressionFactoryGenerator.class);
    }

    protected static void put (StaticTemplateRegistry tr, String path, Class < ? > precompiledTemplate) {
        tr.put (precompiledTemplate, path, precompiledTemplate);
    }

    public TextEmitter retrieve (Class < ? > key) throws UnexpectedBehaviourException {
        try {
            return new JETEmitterAdapter (myFactory.acquireEmitter (key));
        } catch (NoSuchTemplateException ex) {
            throw new UnexpectedBehaviourException (ex.getMessage (), ex);
        }
    }

    private String [] getTemplatePath () {
        return myTemplatePath;
    }

    private static Bundle getTemplatesBundle () {
        return Platform.getBundle (TEMPLATES_PLUGIN_ID);
    }

    private static URL getDynamicTemplatesURL (String templateDirectory) {
        if (templateDirectory != null) {
            URI templatesURI = templateDirectory.indexOf (":") == - 1 ? URI.createPlatformResourceURI (templateDirectory, true) : URI.createURI (templateDirectory);
            try {
                return new URL (CommonPlugin.resolve (templatesURI).toString ());
            } catch (MalformedURLException e) {
                String pluginID = "org.eclipse.gmf.codegen";
                Platform.getLog (Platform.getBundle (pluginID)).log (new Status (IStatus.ERROR, pluginID, 0, "Incorrecct dynamic templates location", e));
            }
        }
        return null;
    }

    public URL getJMergeControlFile () {
        return getTemplatesBundle ().getEntry ("/templates/emf-merge.xml");
    }

    public TextEmitter getCreateLinkCommandEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::commands::CreateLinkCommand");
    }

    public TextEmitter getCreateRefLinkCommandEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::commands::CreateRefLinkCommand");
    }

    public TextEmitter getReorientLinkCommandEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::commands::ReorientLinkCommand");
    }

    public TextEmitter getReorientRefLinkCommandEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::commands::ReorientRefLinkCommand");
    }

    public TextEmitter getReorientLinkViewCommandEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::commands::ReorientLinkViewCommand");
    }

    public TextEmitter getCreateShortcutDecorationsCommandEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::commands::CreateShortcutDecorationsCommand");
    }

    public TextEmitter getBaseEditHelperEmitter () throws UnexpectedBehaviourException {
        return retrieve (BaseEditHelperGenerator.class);
    }

    public TextEmitter getEditHelperEmitter () throws UnexpectedBehaviourException {
        return retrieve (EditHelperGenerator.class);
    }

    public TextEmitter getEditHelperAdviceEmitter () throws UnexpectedBehaviourException {
        return retrieve (EditHelperAdviceGenerator.class);
    }

    public TextEmitter getDiagramEditPartEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editparts::DiagramEditPart::DiagramEditPart");
    }

    public TextEmitter getNodeEditPartEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editparts::NodeEditPart::NodeEditPart");
    }

    public TextEmitter getNodeLabelEditPartEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editparts::NodeLabelEditPart::NodeLabelEditPart");
    }

    public TextEmitter getExternalNodeLabelEditPartEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editparts::ExternalNodeLabelEditPart::ExternalNodeLabelEditPart");
    }

    public TextEmitter getChildNodeLabelEditPartEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editparts::ChildNodeLabelEditPart::ChildNodeLabelEditPart");
    }

    public TextEmitter getCompartmentEditPartEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editparts::CompartmentEditPart::CompartmentEditPart");
    }

    public TextEmitter getLinkEditPartEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editparts::LinkEditPart::LinkEditPart");
    }

    public TextEmitter getLinkLabelEditPartEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editparts::LinkLabelEditPart::LinkLabelEditPart");
    }

    public TextEmitter getEditPartFactoryEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editparts::EditPartFactory::EditPartFactory");
    }

    public TextEmitter getBaseItemSemanticEditPolicyEmitter () {
        return newXpandEmitter ("xpt::diagram::editpolicies::BaseItemSemanticEditPolicy::BaseItemSemanticEditPolicy");
    }

    public TextEmitter getOpenDiagramEditPolicyEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editpolicies::OpenDiagram::OpenDiagram");
    }

    public TextEmitter getDiagramCanonicalEditPolicyEmitter () {
        return newXpandEmitter ("xpt::diagram::editpolicies::DiagramCanonicalEditPolicy::DiagramCanonicalEditPolicy");
    }

    public TextEmitter getChildContainerCanonicalEditPolicyEmitter () {
        return newXpandEmitter ("xpt::diagram::editpolicies::ChildContainerCanonicalEditPolicy::ChildContainerCanonicalEditPolicy");
    }

    public TextEmitter getDiagramItemSemanticEditPolicyEmitter () throws UnexpectedBehaviourException {
        return retrieve (DiagramItemSemanticEditPolicyGenerator.class);
    }

    public TextEmitter getCompartmentItemSemanticEditPolicyEmitter () throws UnexpectedBehaviourException {
        return retrieve (CompartmentItemSemanticEditPolicyGenerator.class);
    }

    public TextEmitter getGraphicalNodeEditPolicyEmitter () throws UnexpectedBehaviourException {
        return retrieve (GraphicalNodeEditPolicyGenerator.class);
    }

    public TextEmitter getNodeItemSemanticEditPolicyEmitter () {
        return newXpandEmitter ("xpt::diagram::editpolicies::NodeItemSemanticEditPolicy::NodeItemSemanticEditPolicy");
    }

    public TextEmitter getNodeCreateCommandEmitter () throws UnexpectedBehaviourException {
        return retrieve (CreateTypeNodeCommandGenerator.class);
    }

    public TextEmitter getLinkItemSemanticEditPolicyEmitter () {
        return newXpandEmitter ("xpt::diagram::editpolicies::LinkItemSemanticEditPolicy::LinkItemSemanticEditPolicy");
    }

    public TextEmitter getTextSelectionEditPolicyEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editpolicies::TextFeedback::TextSelectionEditPolicy");
    }

    public TextEmitter getTextNonResizableEditPolicyEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editpolicies::TextFeedback::TextNonResizableEditPolicy");
    }

    public TextEmitter getAbstractParserEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::parsers::AbstractParser");
    }

    public String getAbstractParserName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::parsers::AbstractParser", input);
    }

    public TextEmitter getCompositeParserEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::parsers::CompositeParser");
    }

    public String getCompositeParserName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::parsers::CompositeParser", input);
    }

    public TextEmitter getMessageFormatParserEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::parsers::MessageFormatParser");
    }

    public String getMessageFormatParserName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::parsers::MessageFormatParser", input);
    }

    public TextEmitter getNativeParserEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::parsers::NativeParser");
    }

    public String getNativeParserName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::parsers::NativeParser", input);
    }

    public TextEmitter getPrintfParserEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::parsers::PrintfParser");
    }

    public String getPrintfParserName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::parsers::PrintfParser", input);
    }

    public TextEmitter getRegexpParserEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::parsers::RegexpParser");
    }

    public String getRegexpParserName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::parsers::RegexpParser", input);
    }

    public TextEmitter getDiagramViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::DiagramViewFactory");
    }

    public TextEmitter getNodeViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::NodeViewFactory");
    }

    public TextEmitter getLabelNodeViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::LabelNodeViewFactory");
    }

    public TextEmitter getCompartmentViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::CompartmentViewFactory");
    }

    public TextEmitter getLinkViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::LinkViewFactory");
    }

    public TextEmitter getFloatingLabelViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::FloatingLabelViewFactory");
    }

    public TextEmitter getLabelViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::LabelViewFactory");
    }

    public TextEmitter getParserProviderEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::providers::ParserProvider::ParserProvider");
    }

    public TextEmitter getElementInitializersEmitter () throws UnexpectedBehaviourException {
        return retrieve (ElementInitializersGenerator.class);
    }

    public TextEmitter getElementTypesEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::providers::ElementTypes::ElementTypes");
    }

    public TextEmitter getViewProviderEmitter () {
        return newXpandEmitter ("xpt::diagram::providers::ViewProvider::ViewProvider");
    }

    public TextEmitter getEditPartProviderEmitter () throws UnexpectedBehaviourException {
        return retrieve (EditPartProviderGenerator.class);
    }

    public TextEmitter getContributionItemProviderEmitter () throws UnexpectedBehaviourException {
        return retrieve (ContributionItemProviderGenerator.class);
    }

    public TextEmitter getModelingAssistantProviderEmitter () throws UnexpectedBehaviourException {
        return retrieve (ModelingAssistantProviderGenerator.class);
    }

    public TextEmitter getPropertySheetLabelProviderEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::propsheet::LabelProvider::Class");
    }

    public TextEmitter getPropertySectionEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::propsheet::PropertySection::Class");
    }

    public TextEmitter getIconProviderEmitter () throws UnexpectedBehaviourException {
        return retrieve (IconProviderGenerator.class);
    }

    public TextEmitter getMarkerNavigationProviderEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::providers::MarkerNavigationProvider");
    }

    public TextEmitter getValidationProviderEmitter () throws UnexpectedBehaviourException {
        return retrieve (ValidationProviderGenerator.class);
    }

    public TextEmitter getValidationDecoratorProviderEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::providers::ValidationDecoratorProvider");
    }

    public TextEmitter getShortcutsDecoratorProviderEmitter () throws UnexpectedBehaviourException {
        return retrieve (ShortcutsDecoratorProviderGenerator.class);
    }

    public TextEmitter getShortcutPropertyTesterEmitter () throws UnexpectedBehaviourException {
        return retrieve (ShortcutsPropertyTester.class);
    }

    public TextEmitter getMetricProviderEmitter () throws UnexpectedBehaviourException {
        return retrieve (MetricProviderGenerator.class);
    }

    public TextEmitter getAbstractExpressionEmitter () throws UnexpectedBehaviourException {
        return retrieve (AbstractExpressionGenerator.class);
    }

    public TextEmitter getOCLExpressionFactoryEmitter () throws UnexpectedBehaviourException {
        return retrieve (OCLExpressionFactoryGenerator.class);
    }

    public TextEmitter getRegexpExpressionFactoryEmitter () throws UnexpectedBehaviourException {
        return retrieve (RegexpExpressionFactoryGenerator.class);
    }

    public TextEmitter getValidateActionEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::ValidateAction");
    }

    public String getValidateActionName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::ValidateAction", input);
    }

    public TextEmitter getValidationMarkerEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::ValidationMarker");
    }

    public String getValidationMarkerName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::ValidationMarker", input);
    }

    public TextEmitter getDiagramContentInitializerEmitter () {
        return getPrimaryEmitter ("xpt::editor::DiagramContentInitializer");
    }

    public String getShortcutCreationWizardName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::ShortcutCreationWizard", input);
    }

    public TextEmitter getShortcutCreationWizardEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::ShortcutCreationWizard");
    }

    public String getModelElementSelectionPageName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::ModelElementSelectionPage", input);
    }

    public TextEmitter getModelElementSelectionPageEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::ModelElementSelectionPage");
    }

    public String getInitDiagramFileActionName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::InitDiagramFileAction", input);
    }

    public TextEmitter getInitDiagramFileActionEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::InitDiagramFileAction");
    }

    public String getNewDiagramFileWizardName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::NewDiagramFileWizard", input);
    }

    public TextEmitter getNewDiagramFileWizardEmitter () {
        return getPrimaryEmitter ("xpt::editor::NewDiagramFileWizard");
    }

    public TextEmitter getPaletteEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::editor::palette::PaletteFactory::Factory");
    }

    public TextEmitter getDiagramEditorUtilEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::editor::DiagramEditorUtil::DiagramEditorUtil");
    }

    public TextEmitter getVisualIDRegistryEmitter () {
        return newXpandEmitter ("xpt::editor::VisualIDRegistry::VisualIDRegistry");
    }

    public TextEmitter getCreationWizardEmitter () throws UnexpectedBehaviourException {
        return retrieve (CreationWizardGenerator.class);
    }

    public TextEmitter getCreationWizardPageEmitter () throws UnexpectedBehaviourException {
        return retrieve (CreationWizardPageGenerator.class);
    }

    public TextEmitter getEditorEmitter () throws UnexpectedBehaviourException {
        return retrieve (EditorGenerator.class);
    }

    public TextEmitter getCreateShortcutActionEmitter () throws UnexpectedBehaviourException {
        return retrieve (CreateShortcutActionGenerator.class);
    }

    public TextEmitter getLoadResourceActionEmitter () throws UnexpectedBehaviourException {
        return retrieve (LoadResourceActionGenerator.class);
    }

    public TextEmitter getElementChooserEmitter () throws UnexpectedBehaviourException {
        return retrieve (ElementChooserGenerator.class);
    }

    public TextEmitter getDocumentProviderEmitter () {
        return newXpandEmitter ("xpt::editor::DocumentProvider::DocumentProvider");
    }

    public TextEmitter getDiagramUpdaterEmitter () {
        return newXpandEmitter ("xpt::diagram::updater::DiagramUpdater::DiagramUpdater");
    }

    public TextEmitter getUpdateCommandEmitter () {
        return newXpandEmitter ("xpt::diagram::updater::UpdateCommand::UpdateCommand");
    }

    public TextEmitter getNodeDescriptorEmitter () {
        return newXpandEmitter ("xpt::diagram::updater::NodeDescriptor::NodeDescriptor");
    }

    public TextEmitter getLinkDescriptorEmitter () {
        return newXpandEmitter ("xpt::diagram::updater::LinkDescriptor::LinkDescriptor");
    }

    public TextEmitter getActionBarContributorEmitter () throws UnexpectedBehaviourException {
        return retrieve (ActionBarContributorGenerator.class);
    }

    public TextEmitter getMatchingStrategyEmitter () {
        return newXpandEmitter ("xpt::editor::MatchingStrategy::MatchingStrategy");
    }

    public TextEmitter getNavigatorContentProviderEmitter () {
        return newXpandEmitter ("xpt::navigator::NavigatorContentProvider::NavigatorContentProvider");
    }

    public TextEmitter getDomainNavigatorContentProviderEmitter () {
        return newXpandEmitter ("xpt::navigator::DomainNavigatorContentProvider::DomainNavigatorContentProvider");
    }

    public TextEmitter getDomainNavigatorLabelProviderEmitter () {
        return newXpandEmitter ("xpt::navigator::DomainNavigatorLabelProvider::DomainNavigatorLabelProvider");
    }

    public TextEmitter getDomainNavigatorItemEmitter () {
        return newXpandEmitter ("xpt::navigator::DomainNavigatorItem::DomainNavigatorItem");
    }

    public TextEmitter getDomainModelElementTesterEmitter () {
        return newXpandEmitter ("xpt::editor::DomainModelElementTester::DomainModelElementTester");
    }

    public TextEmitter getURIEditorInputTesterEmitter () {
        return newXpandEmitter ("xpt::editor::UriEditorInputTester::UriEditorInputTester");
    }

    public TextEmitter getNavigatorLabelProviderEmitter () throws UnexpectedBehaviourException {
        return retrieve (NavigatorLabelProviderGenerator.class);
    }

    public TextEmitter getNavigatorLinkHelperEmitter () {
        return newXpandEmitter ("xpt::navigator::NavigatorLinkHelper::NavigatorLinkHelper");
    }

    public TextEmitter getNavigatorSorterEmitter () throws UnexpectedBehaviourException {
        return retrieve (NavigatorSorterGenerator.class);
    }

    public TextEmitter getNavigatorActionProviderEmitter () throws UnexpectedBehaviourException {
        return retrieve (NavigatorActionProviderGenerator.class);
    }

    public TextEmitter getAbstractNavigatorItemEmitter () {
        return newXpandEmitter ("xpt::navigator::AbstractNavigatorItem::AbstractNavigatorItem");
    }

    public TextEmitter getNavigatorGroupEmitter () {
        return newXpandEmitter ("xpt::navigator::NavigatorGroup::NavigatorGroup");
    }

    public TextEmitter getNavigatorItemEmitter () {
        return newXpandEmitter ("xpt::navigator::NavigatorItem::NavigatorItem");
    }

    public TextEmitter getPluginClassEmitter () throws UnexpectedBehaviourException {
        return retrieve (PluginGenerator.class);
    }

    public TextEmitter getPluginXmlEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::plugin");
    }

    public TextEmitter getPluginPropertiesEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::properties");
    }

    public TextEmitter getOptionsFileEmitter () throws UnexpectedBehaviourException {
        return retrieve (OptionsFileGenerator.class);
    }

    public TextEmitter getBundleManifestEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::manifest");
    }

    public TextEmitter getBuildPropertiesEmitter () throws UnexpectedBehaviourException {
        return retrieve (BuildPropertiesGenerator.class);
    }

    public BinaryEmitter getShortcutImageEmitter () throws UnexpectedBehaviourException {
        return newGIFEmitter ("/editor/shortcut.gif");
    }

    public BinaryEmitter getGroupIconEmitter () throws UnexpectedBehaviourException {
        return newGIFEmitter ("/navigator/navigatorGroup.gif");
    }

    public BinaryEmitter getDiagramIconEmitter () throws UnexpectedBehaviourException {
        return newGIFEmitterAdapter ("/editor/diagram.gif");
    }

    public BinaryEmitter getWizardBannerImageEmitter () throws UnexpectedBehaviourException {
        return newGIFEmitterAdapter ("/editor/wizban.gif");
    }

    public TextEmitter getExternalizeEmitter () {
        return newXpandEmitter ("xpt::Externalizer::Access");
    }

    public TextEmitter getMessagesEmitter () {
        return newXpandEmitter ("xpt::Externalizer::Values");
    }

    public String getURIDiagramDocumentProviderName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::URIDiagramDocumentProvider", input);
    }

    public TextEmitter getPreferenceInitializerEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::preferences::PreferenceInitializer");
    }

    public String getPreferenceInitializerName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::diagram::preferences::PreferenceInitializer", input);
    }

    public TextEmitter getAppearancePreferencePageEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::preferences::AppearancePreferencePage");
    }

    public String getAppearancePreferencePageName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::diagram::preferences::AppearancePreferencePage", input);
    }

    public TextEmitter getConnectionsPreferencePageEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::preferences::ConnectionsPreferencePage");
    }

    public String getConnectionsPreferencePageName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::diagram::preferences::ConnectionsPreferencePage", input);
    }

    public TextEmitter getGeneralPreferencePageEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::preferences::GeneralPreferencePage");
    }

    public String getGeneralPreferencePageName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::diagram::preferences::GeneralPreferencePage", input);
    }

    public TextEmitter getPrintingPreferencePageEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::preferences::PrintingPreferencePage");
    }

    public String getPrintingPreferencePageName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::diagram::preferences::PrintingPreferencePage", input);
    }

    public TextEmitter getRulersAndGridPreferencePageEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::preferences::RulersAndGridPreferencePage");
    }

    public String getRulersAndGridPreferencePageName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::diagram::preferences::RulersAndGridPreferencePage", input);
    }

    public TextEmitter getApplicationEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::application::Application");
    }

    public TextEmitter getActionBarAdvisorEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::application::ActionBarAdvisor");
    }

    public TextEmitter getPerspectiveEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::application::Perspective");
    }

    public TextEmitter getWorkbenchAdvisorEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::application::WorkbenchAdvisor");
    }

    public TextEmitter getWorkbenchWindowAdvisorEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::application::WorkbenchWindowAdvisor");
    }

    public TextEmitter getWizardNewFileCreationPageEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::application::WizardNewFileCreationPage");
    }

    private TextEmitter getPrimaryEmitter (String templateName) {
        String [] parts = templateName.split (PATH_SEPARATOR);
        String definition = templateName + PATH_SEPARATOR + parts [parts.length - 1];
        return newXpandEmitter (definition);
    }

    private TextEmitter getQualifiedClassNameEmitter (String templateName) throws UnexpectedBehaviourException {
        String definition = templateName + PATH_SEPARATOR + "qualifiedClassName";
        return newXpandEmitter (definition);
    }

    private String getText (TextEmitter emitter, Object...input) throws UnexpectedBehaviourException {
        try {
            return emitter.generate (new NullProgressMonitor (), input).trim ();
        } catch (InterruptedException ie) {
            return null;
        } catch (InvocationTargetException ite) {
            throw new UnexpectedBehaviourException (ite.getCause ());
        }
    }

    private String getQualifiedClassName (String templateName, Object...input) throws UnexpectedBehaviourException {
        TextEmitter emitter = getQualifiedClassNameEmitter (templateName);
        return getText (emitter, input);
    }

    private BinaryEmitter newGIFEmitter (String relativePath) throws UnexpectedBehaviourException {
        return new GIFEmitter (checkTemplateLocation (relativePath));
    }

    private BinaryEmitter newGIFEmitterAdapter (String relativePath) throws UnexpectedBehaviourException {
        return new JETGIFEmitterAdapter (new org.eclipse.emf.codegen.util.GIFEmitter (checkTemplateLocation (relativePath)));
    }

    private String checkTemplateLocation (String relativePath) throws UnexpectedBehaviourException {
        String templateLocation = JETCompiler.find (getTemplatePath (), relativePath);
        if (templateLocation == null) {
            throw new UnexpectedBehaviourException ("Template " + relativePath + " not found");
        }
        return templateLocation;
    }

    protected TextEmitter newXpandEmitter (String definition) {
        return new XpandTextEmitter (myResourceManager, definition, getClass ().getClassLoader ());
    }

    protected static String [] getDefaultVariables () {
        return new String [] {"org.eclipse.emf.codegen", "org.eclipse.emf.codegen.ecore", "org.eclipse.emf.common", "org.eclipse.emf.ecore", "org.eclipse.gmf.common", "org.eclipse.gmf.codegen",};
    }

}

