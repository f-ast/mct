package org.eclipse.gmf.graphdef.editor.edit.parts;

import java.util.ArrayList;

import java.util.Collection;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.Polyline;

import org.eclipse.draw2d.StackLayout;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.emf.common.notify.Adapter;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.editpolicies.LayoutEditPolicy;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.Shape;

import org.eclipse.gmf.graphdef.editor.edit.policies.Polyline3ItemSemanticEditPolicy;

import org.eclipse.gmf.graphdef.editor.edit.polocies.DomainBasedXYLayoutEditPolicy;

import org.eclipse.gmf.graphdef.editor.sheet.AttachAdapter;

import org.eclipse.gmf.graphdef.editor.sheet.ChangeTracker;

import org.eclipse.gmf.graphdef.editor.sheet.FeatureTracker;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;

import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public class Polyline3EditPart extends AbstractFigureEditPart {
    public static final int VISUAL_ID = 3021;
    protected IFigure contentPane;
    protected IFigure primaryShape;

    public Polyline3EditPart (View view) {
        super (view);
    }

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicyRoles.SEMANTIC_ROLE, new Polyline3ItemSemanticEditPolicy ());
        installEditPolicy (EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy ());
    }

    protected LayoutEditPolicy createLayoutEditPolicy () {
        return new DomainBasedXYLayoutEditPolicy (getMapMode ());
    }

    protected IFigure createNodeShape () {
        return primaryShape = new Polyline ();
    }

    public Polyline getPrimaryShape () {
        return (Polyline) primaryShape;
    }

    protected NodeFigure createNodePlate () {
        DefaultSizeNodeFigure result = new DefaultSizeNodeFigure (getMapMode ().DPtoLP (0), getMapMode ().DPtoLP (0));
        result.setMinimumSize (new Dimension (0, 0));
        return result;
    }

    protected NodeFigure createNodeFigure () {
        NodeFigure figure = createNodePlate ();
        figure.setLayoutManager (new StackLayout ());
        IFigure shape = createNodeShape ();
        figure.add (shape);
        contentPane = setupContentPane (shape);
        return figure;
    }

    protected IFigure setupContentPane (IFigure nodeShape) {
        return nodeShape;
    }

    public IFigure getContentPane () {
        if (contentPane != null) {
            return contentPane;
        }
        return super.getContentPane ();
    }

    protected void handleNotificationEvent (Notification notification) {
        Object feature = notification.getFeature ();
        if (NotationPackage.eINSTANCE.getSize_Width ().equals (feature) || NotationPackage.eINSTANCE.getSize_Height ().equals (feature) || NotationPackage.eINSTANCE.getLocation_X ().equals (feature) || NotationPackage.eINSTANCE.getLocation_Y ().equals (feature)) {
            return;
        } else if (NotationPackage.eINSTANCE.getFillStyle_FillColor ().equals (feature)) {
            return;
        } else if (NotationPackage.eINSTANCE.getLineStyle_LineColor ().equals (feature)) {
            return;
        }

        super.handleNotificationEvent (notification);
    }

    private Collection < Adapter > myDomainElementAdapters = new ArrayList < Adapter > ();

    private org.eclipse.gmf.gmfgraph.Polyline getModelFigureElement () {
        Shape shape = getShape ();
        if (shape instanceof org.eclipse.gmf.gmfgraph.Polyline) {
            org.eclipse.gmf.gmfgraph.Polyline modelFigureElement = (org.eclipse.gmf.gmfgraph.Polyline) shape;
            return modelFigureElement;
        }
        return null;
    }

    protected void removeSemanticListeners () {
        org.eclipse.gmf.gmfgraph.Polyline modelElement = (org.eclipse.gmf.gmfgraph.Polyline) getModelFigureElement ();
        if (modelElement != null) {
            modelElement.eAdapters ().removeAll (myDomainElementAdapters);
            myDomainElementAdapters.clear ();
        }
        super.removeSemanticListeners ();
    }

    protected void setFigure (IFigure figure) {
        super.setFigure (figure);
        org.eclipse.gmf.gmfgraph.Polyline modelElement = (org.eclipse.gmf.gmfgraph.Polyline) getModelFigureElement ();
        if (modelElement != null) {
            getPrimaryShape ().setLayoutManager (getLayoutManager (modelElement.getLayout ()));
            refreshLayoutManager ();
            getPrimaryShape ().setBackgroundColor (getColor (modelElement.getBackgroundColor ()));
            getPrimaryShape ().setForegroundColor (getColor (modelElement.getForegroundColor ()));
            refreshFont ();
        }
    }

    public void activate () {
        if (isActive ()) {
            return;
        }
        final org.eclipse.gmf.gmfgraph.Polyline modelElement = (org.eclipse.gmf.gmfgraph.Polyline) getModelFigureElement ();
        if (modelElement == null) {
            super.activate ();
            return;
        }
        ChangeTracker layoutManagerTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                getPrimaryShape ().setLayoutManager (getLayoutManager (modelElement.getLayout ()));
                refreshLayoutManager ();
            }

        }

        ;
        myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getLayoutable_Layout (), layoutManagerTracker, new AttachAdapter (GMFGraphPackage.eINSTANCE.getBorderLayout_Spacing (), layoutManagerTracker, new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy ())), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_Vertical ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MatchMinorSize ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_ForceSingleLine ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorAlignment ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorAlignment ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorSpacing ()), new
          FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorSpacing ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_NumColumns ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_EqualWidth ()), new AttachAdapter (GMFGraphPackage.eINSTANCE.getGridLayout_Margins (), layoutManagerTracker, new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy ())), new AttachAdapter (GMFGraphPackage.eINSTANCE.getGridLayout_Spacing (), layoutManagerTracker, new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx ()), new FeatureTracker (layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy ()))));
        ChangeTracker backgroundColorTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                getPrimaryShape ().setBackgroundColor (getColor (modelElement.getBackgroundColor ()));
            }

        }

        ;
        myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor (), backgroundColorTracker, new FeatureTracker (backgroundColorTracker, GMFGraphPackage.eINSTANCE.getConstantColor_Value ()), new FeatureTracker (backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red ()), new FeatureTracker (backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green ()), new FeatureTracker (backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue ())));
        ChangeTracker foregroundColorTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                getPrimaryShape ().setForegroundColor (getColor (modelElement.getForegroundColor ()));
            }

        }

        ;
        myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor (), foregroundColorTracker, new FeatureTracker (foregroundColorTracker, GMFGraphPackage.eINSTANCE.getConstantColor_Value ()), new FeatureTracker (foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red ()), new FeatureTracker (foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green ()), new FeatureTracker (foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue ())));
        ChangeTracker refreshFontTracker = new ChangeTracker () {

            public void modelChanged (Notification msg) {
                refreshFont ();
            }

        }

        ;
        myDomainElementAdapters.add (new AttachAdapter (GMFGraphPackage.eINSTANCE.getFigure_Font (), refreshFontTracker, new FeatureTracker (refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_FaceName ()), new FeatureTracker (refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Height ()), new FeatureTracker (refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Style ())));
        modelElement.eAdapters ().addAll (myDomainElementAdapters);
        super.activate ();
    }

    protected void refreshBounds () {
        org.eclipse.gmf.gmfgraph.Polyline modelElement = (org.eclipse.gmf.gmfgraph.Polyline) getModelFigureElement ();
        if (modelElement == null) {
            return;
        }
        if (modelElement.getPreferredSize () != null) {
            getFigure ().setPreferredSize (getDraw2dDimension (modelElement.getPreferredSize ()));
        }
        if (modelElement.getLocation () != null) {
            getFigure ().setLocation (getDraw2DPoint (modelElement.getLocation ()));
        }
    }

}

