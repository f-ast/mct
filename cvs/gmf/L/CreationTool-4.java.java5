package org.eclipse.gmf.runtime.diagram.ui.tools;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPartViewer;

import org.eclipse.gef.Request;

import org.eclipse.gef.RequestConstants;

import org.eclipse.gef.RootEditPart;

import org.eclipse.gef.commands.Command;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.KeyEvent;

import org.eclipse.swt.graphics.Cursor;

import org.eclipse.swt.widgets.Display;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IDiagramPreferenceSupport;

import org.eclipse.gmf.runtime.diagram.ui.figures.LayoutHelper;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.CreateViewRequestFactory;

import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.notation.View;

public class CreationTool extends org.eclipse.gef.tools.CreationTool {
    protected boolean antiScroll = false;
    private static final Point UNDEFINED_POINT = LayoutHelper.UNDEFINED.getLocation ();
    private IElementType elementType = null;
    static private String SHAPECURSOR_MASK = "elcl16/shapecursor_mask.bmp";
    static private String SHAPECURSOR_SOURCE = "elcl16/shapecursor_source.bmp";
    static private String NOSHAPECURSOR_MASK = "dlcl16/noshapecursor_mask.bmp";
    static private String NOSHAPECURSOR_SOURCE = "dlcl16/noshapecursor_source.bmp";
    static private Cursor CURSOR_SHAPE = new Cursor (Display.getDefault (), PresentationResourceManager.getInstance ().getImageDescriptor (SHAPECURSOR_SOURCE).getImageData (), PresentationResourceManager.getInstance ().getImageDescriptor (SHAPECURSOR_MASK).getImageData (), 7, 7);
    static private Cursor CURSOR_SHAPE_NOT = new Cursor (Display.getDefault (), PresentationResourceManager.getInstance ().getImageDescriptor (NOSHAPECURSOR_SOURCE).getImageData (), PresentationResourceManager.getInstance ().getImageDescriptor (NOSHAPECURSOR_MASK).getImageData (), 0, 0);

    public CreationTool (IElementType elementType) {
        setElementType (elementType);
        setDefaultCursor (CURSOR_SHAPE);
        setDisabledCursor (CURSOR_SHAPE_NOT);
    }

    protected CreationTool () {
    }

    protected PreferencesHint getPreferencesHint () {
        EditPartViewer viewer = getCurrentViewer ();
        if (viewer != null) {
            RootEditPart rootEP = viewer.getRootEditPart ();
            if (rootEP instanceof IDiagramPreferenceSupport) {
                return ((IDiagramPreferenceSupport) rootEP).getPreferencesHint ();
            }
        }
        return PreferencesHint.USE_DEFAULTS;
    }

    protected Request createTargetRequest () {
        return CreateViewRequestFactory.getCreateShapeRequest (getElementType (), getPreferencesHint ());
    }

    public void deactivate () {
        super.deactivate ();
        setTargetRequest (null);
    }

    protected void performCreation (int button) {
        antiScroll = true;
        EditPartViewer viewer = getCurrentViewer ();
        Command c = getCurrentCommand ();
        executeCurrentCommand ();
        selectAddedObject (viewer, DiagramCommandStack.getReturnValues (c));
        antiScroll = false;
    }

    protected void selectAddedObject (EditPartViewer viewer, Collection objects) {
        final List editparts = new ArrayList ();
        for (Iterator i = objects.iterator ();
        i.hasNext ();) {
            Object object = i.next ();
            if (object instanceof IAdaptable) {
                Object editPart = viewer.getEditPartRegistry ().get (((IAdaptable) object).getAdapter (View.class));
                if (editPart != null) editparts.add (editPart);

            }
        }
        if (! editparts.isEmpty ()) {
            viewer.setSelection (new StructuredSelection (editparts));
            Display.getCurrent ().asyncExec (new Runnable () {

                public void run () {
                    EditPart editPart = (EditPart) editparts.get (0);
                    if (editPart.isActive ()) {
                        editPart.performRequest (new Request (RequestConstants.REQ_DIRECT_EDIT));
                        revealEditPart ((EditPart) editparts.get (0));
                    }
                }

            }

            );
        }
    }

    protected boolean handleDoubleClick (int button) {
        createShapeAt (UNDEFINED_POINT);
        setState (STATE_TERMINAL);
        handleFinished ();
        return true;
    }

    protected void createShapeAt (Point point) {
        setTargetEditPart (getCurrentViewer ().getRootEditPart ().getContents ());
        getCreateRequest ().setLocation (point);
        setCurrentCommand (getCommand ());
        performCreation (0);
    }

    protected boolean handleKeyUp (KeyEvent e) {
        if (e.keyCode == SWT.Selection) {
            setEditDomain (getCurrentViewer ().getEditDomain ());
            createShapeAt (UNDEFINED_POINT);
            return true;
        }
        return false;
    }

    protected void setTargetEditPart (EditPart editpart) {
        if (editpart != getTargetEditPart ()) {
            setTargetRequest (null);
        }
        super.setTargetEditPart (editpart);
    }

    public IElementType getElementType () {
        return elementType;
    }

    private void setElementType (IElementType elementType) {
        this.elementType = elementType;
    }

    protected void handleFinished () {
        if (! getCurrentInput ().isControlKeyDown ()) {
            super.handleFinished ();
        } else {
            reactivate ();
        }
    }

    protected boolean handleMove () {
        if (! antiScroll) return super.handleMove ();

        return false;
    }

    protected void doAutoexpose () {
        if (! antiScroll) super.doAutoexpose ();

        return;
    }

    protected Command getCommand () {
        if (! antiScroll) return super.getCommand ();

        return null;
    }

    protected void revealEditPart (EditPart editPart) {
        if ((editPart != null) && (editPart.getViewer () != null)) editPart.getViewer ().reveal (editPart);

    }

}

