package org.eclipse.gmf.runtime.diagram.core.util;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Collections;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.diagram.core.internal.commands.PersistElementCommand;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;

import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;

import org.eclipse.gmf.runtime.emf.core.util.ProxyUtil;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.LayoutConstraint;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.Style;

import org.eclipse.gmf.runtime.notation.View;

public class ViewUtil {
    public static final int APPEND = - 1;

    public static List makeViewsAdaptable (Collection views) {
        List list = new ArrayList ();
        Iterator it = views.iterator ();
        while (it.hasNext ()) {
            list.add (new EObjectAdapter ((View) it.next ()));
        }
        return list;
    }

    public static void persistElement (View view) {
        assert null != view : "null view in ViewUtil.persistElement";
        MEditingDomain editingDomain = MEditingDomainGetter.getMEditingDomain (view);
        if (editingDomain.isUndoIntervalOpen () && ! view.isMutable ()) {
            View viewToPersist = getViewToPersist (view);
            if (viewToPersist != null) {
                PersistElementCommand pvc = new PersistElementCommand (viewToPersist);
                pvc.execute (new NullProgressMonitor ());
                editingDomain.setCanRedoCurrentInterval (false);
                CommandResult result = pvc.getCommandResult ();
                view = (View) result.getReturnValue ();
            }
        }
    }

    static private View getViewToPersist (View view) {
        EObject container = view.eContainer ();
        if (container == null) return null;

        if (view instanceof Edge) {
            Diagram dContainer = (Diagram) container;
            if (dContainer.eIsSet (NotationPackage.eINSTANCE.getDiagram_TransientEdges ()) && dContainer.getTransientEdges ().size () > 0) return view;
            else return (getViewToPersist (dContainer));

        } else if (container instanceof View) {
            View vContainer = (View) container;
            if (vContainer.eIsSet (NotationPackage.eINSTANCE.getView_TransientChildren ()) && vContainer.getTransientChildren ().size () > 0) return view;
            else return (getViewToPersist (vContainer));

        }

        return null;
    }

    public static void destroy (View view) {
        if (view == null) return;

        List children = view.getChildren ();
        for (int i = 0;
        i < children.size (); i ++) {
            View child = (View) children.get (i);
            destroy (child);
        }
        EObjectUtil.destroy (view);
    }

    static public View getContainerView (View eObject) {
        EObject container = eObject.eContainer ();
        if (container instanceof View) {
            return (View) container;
        }
        return null;
    }

    public static void insertChildView (View containerView, View childView, int index, boolean persisted) {
        if (persisted) {
            insertPersistedElement (containerView, childView, index);
        } else {
            insertTransientElement (containerView, childView);
        }
    }

    static private void insertTransientElement (final View container, final View child) {
        if (child instanceof Edge) {
            Diagram diagram = (Diagram) container;
            diagram.insertEdge ((Edge) child, false);
        } else {
            container.insertChild (child, false);
        }
        return;
    }

    static private void insertPersistedElement (View container, View child, int index) {
        if (child instanceof Edge) {
            Diagram diagram = (Diagram) container;
            if (index == - 1) diagram.insertEdge ((Edge) child);
            else diagram.insertEdgeAt ((Edge) child, index);

        } else {
            if (index == - 1) container.insertChild (child);
            else container.insertChildAt (child, index);

        }
    }

    static public boolean isTransient (EObject view) {
        EStructuralFeature sFeature = view.eContainingFeature ();
        if (sFeature == null) return false;

        if (sFeature.isTransient ()) {
            return true;
        }
        EObject container = view.eContainer ();
        if (container != null) {
            return isTransient (container);
        }
        return false;
    }

    public static View getChildBySemanticHint (View view, String semanticHint) {
        for (Iterator children = view.getChildren ().iterator ();
        children.hasNext ();) {
            View child = (View) children.next ();
            if (semanticHint.equals (child.getType ())) {
                return child;
            }
        }
        return null;
    }

    public static boolean isPropertySupported (View view, Object id) {
        if (id instanceof String) {
            EStructuralFeature feature = (EStructuralFeature) MetaModelUtil.getElement ((String) id);
            if (feature != null) {
                return isPropertySupported (view, feature, feature.getEContainingClass ());
            }
        }
        return false;
    }

    public static boolean isFeatureSupported (View view, EStructuralFeature feature) {
        if (feature != null) {
            return isPropertySupported (view, feature, feature.getEContainingClass ());
        }
        return false;
    }

    public static boolean isPropertySupported (View view, EStructuralFeature feature, EClass featureClass) {
        if (view.getStyle (featureClass) != null) return true;

        if (view instanceof Node) {
            LayoutConstraint constraint = ((Node) view).getLayoutConstraint ();
            if (constraint != null && featureClass.isInstance (constraint)) return true;

        }
        return featureClass.isInstance (view);
    }

    static public final Object getPropertyValue (View view, Object id) {
        if (id instanceof String) {
            EStructuralFeature feature = (EStructuralFeature) MetaModelUtil.getElement ((String) id);
            if (feature != null) {
                return ViewUtil.getPropertyValue (view, feature, feature.getEContainingClass ());
            }
        }
        return null;
    }

    static public final Object getStructuralFeatureValue (View view, EStructuralFeature feature) {
        if (feature != null) {
            return ViewUtil.getPropertyValue (view, feature, feature.getEContainingClass ());
        }
        return null;
    }

    public static Object getPropertyValue (View view, EStructuralFeature feature, EClass featureClass) {
        Style style = view.getStyle (featureClass);
        if (style != null) return style.eGet (feature);

        if (view instanceof Node) {
            LayoutConstraint constraint = ((Node) view).getLayoutConstraint ();
            if (constraint != null && featureClass.isInstance (constraint)) return constraint.eGet (feature);

        }
        if (featureClass.isInstance (view)) return view.eGet (feature);

        return feature.getDefaultValue ();
    }

    public static void setPropertyValue (View view, Object id, Object value) {
        if (id instanceof String) {
            EStructuralFeature feature = (EStructuralFeature) MetaModelUtil.getElement ((String) id);
            if (feature != null) {
                ViewUtil.setPropertyValue (view, feature, feature.getEContainingClass (), value);
                return;
            }
        }
    }

    public static void setStructuralFeatureValue (View view, EStructuralFeature feature, Object value) {
        if (feature != null) {
            ViewUtil.setPropertyValue (view, feature, feature.getEContainingClass (), value);
            return;
        }
    }

    public static void setPropertyValue (View view, EStructuralFeature feature, EClass featureClass, Object value) {
        if (view == null) return;

        Style style = view.getStyle (featureClass);
        if (style != null) {
            style.eSet (feature, value);
            return;
        }
        if (view instanceof Node) {
            Node node = (Node) view;
            LayoutConstraint constraint = node.getLayoutConstraint ();
            if (constraint != null & featureClass.isInstance (constraint)) {
                constraint.eSet (feature, value);
                return;
            }
        }
        if (featureClass.isInstance (view)) {
            view.eSet (feature, value);
            return;
        }
    }

    public static EObject resolveSemanticElement (View view) {
        EObject element = view.getElement ();
        if (element != null && element.eIsProxy ()) return ProxyUtil.resolve (MEditingDomainGetter.getMEditingDomain (view), element);

        return element;
    }

    public static String getSemanticElementClassId (View view) {
        EObject element = view.getElement ();
        return element == null ? null : ProxyUtil.getProxyClassID (element);
    }

    public static List getSourceConnections (View view) {
        if (! view.eIsSet (NotationPackage.eINSTANCE.getView_SourceEdges ())) return Collections.EMPTY_LIST;

        return view.getSourceEdges ();
    }

    public static List getTargetConnections (View view) {
        if (! view.eIsSet (NotationPackage.eINSTANCE.getView_TargetEdges ())) return Collections.EMPTY_LIST;

        return view.getTargetEdges ();
    }

    public static String getSemanticEClassName (View view) {
        EObject eObject = view.getElement ();
        if (eObject != null) return ProxyUtil.getProxyClassID (eObject);

        return "";
    }

    public static String getIdStr (View view) {
        return EObjectUtil.getID (view);
    }

    static public void repositionChildAt (View container, View child, int newIndex) {
        ViewUtil.persistElement (child);
        if (child.eContainer () != container) throw new IllegalArgumentException ("child is not an existing child of the view");

        if (newIndex == APPEND) throw new IllegalArgumentException ("append position is not allowed for reposition");

        container.removeChild (child);
        container.insertChildAt (child, newIndex);
    }

    static public View getChildByIdStr (View view, String idStr) {
        for (Iterator children = view.getChildren ().iterator ();
        children.hasNext ();) {
            View child = (View) children.next ();
            if (idStr.equals (EObjectUtil.getID (child))) {
                return child;
            }
        }
        return null;
    }

}

