package org.eclipse.gmf.runtime.diagram.ui.figures;

import org.eclipse.draw2d.ConnectionAnchor;

import org.eclipse.draw2d.DelegatingLayout;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.LayoutAnimator;

import org.eclipse.draw2d.TreeSearch;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.diagram.ui.internal.figures.BorderItemContainerFigure;

import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;

public class BorderedNodeFigure extends NodeFigure {
    private BorderItemContainerFigure borderItemContainer;
    private IFigure mainFigure;

    public BorderedNodeFigure (IFigure mainFigure) {
        super ();
        setOpaque (false);
        setBorder (null);
        setLayoutManager (null);
        this.mainFigure = mainFigure;
        add (getMainFigure ());
        add (getBorderItemContainer ());
        setBounds (getMainFigure ().getBounds ().getCopy ());
        getBorderItemContainer ().setBounds (new Rectangle (0, 0, 1, 1));
    }

    public IFigure getBorderItemContainer () {
        if (borderItemContainer == null) {
            borderItemContainer = new BorderItemContainerFigure ();
            borderItemContainer.setLayoutManager (new DelegatingLayout ());
            borderItemContainer.addLayoutListener (LayoutAnimator.getDefault ());
            borderItemContainer.setVisible (true);
        }
        return borderItemContainer;
    }

    public IFigure getMainFigure () {
        return mainFigure;
    }

    public Rectangle getClientArea (Rectangle rect) {
        if (getMainFigure () != null) {
            return getMainFigure ().getClientArea (rect);
        }
        return super.getClientArea (rect);
    }

    public Rectangle getHandleBounds () {
        if (getMainFigure () instanceof NodeFigure) {
            return ((NodeFigure) getMainFigure ()).getHandleBounds ().getCopy ();
        } else {
            return getMainFigure ().getBounds ().getCopy ();
        }
    }

    protected void layout () {
        if (! this.getBounds ().equals (getMainFigure ().getBounds ())) {
            getMainFigure ().setBounds (this.getBounds ().getCopy ());
        }
        getBorderItemContainer ().invalidateTree ();
        erase ();
    }

    public boolean containsPoint (int x, int y) {
        if (borderItemContainer.containsPoint (x, y)) {
            return true;
        }
        return super.containsPoint (x, y);
    }

    protected void primTranslate (int dx, int dy) {
        super.primTranslate (dx, dy);
        erase ();
    }

    public void erase () {
        super.erase ();
        if (borderItemContainer != null) borderItemContainer.erase ();

    }

    public void repaint () {
        super.repaint ();
        if (borderItemContainer != null) borderItemContainer.repaint ();

    }

    public IFigure findFigureAt (int x, int y, TreeSearch search) {
        IFigure result = borderItemContainer.findFigureAt (x, y, search);
        if (result != null) {
            return result;
        }
        return getMainFigure ().findFigureAt (x, y, search);
    }

    public IFigure findMouseEventTargetAt (int x, int y) {
        IFigure borderItemFigure = borderItemContainer.findMouseEventTargetAt (x, y);
        if (borderItemFigure != null) return borderItemFigure;

        return super.findMouseEventTargetAt (x, y);
    }

    public boolean intersects (Rectangle rect) {
        if (borderItemContainer.intersects (rect)) {
            return true;
        }
        return super.intersects (rect);
    }

    public Dimension getMinimumSize (int wHint, int hHint) {
        return getMainFigure ().getMinimumSize (wHint, hHint);
    }

    public Dimension getPreferredSize (int wHint, int hHint) {
        return getMainFigure ().getPreferredSize (wHint, hHint);
    }

    public IFigure getToolTip () {
        return getMainFigure ().getToolTip ();
    }

    public void setToolTip (IFigure f) {
        getMainFigure ().setToolTip (f);
    }

    public ConnectionAnchor getSourceConnectionAnchorAt (Point p) {
        if (getMainFigure () instanceof NodeFigure) return ((NodeFigure) getMainFigure ()).getSourceConnectionAnchorAt (p);

        return super.getSourceConnectionAnchorAt (p);
    }

    public ConnectionAnchor getTargetConnectionAnchorAt (Point p) {
        if (getMainFigure () instanceof NodeFigure) return ((NodeFigure) getMainFigure ()).getTargetConnectionAnchorAt (p);

        return super.getTargetConnectionAnchorAt (p);
    }

    public ConnectionAnchor getConnectionAnchor (String terminal) {
        if (getMainFigure () instanceof NodeFigure) return ((NodeFigure) getMainFigure ()).getConnectionAnchor (terminal);

        return super.getConnectionAnchor (terminal);
    }

    public String getConnectionAnchorTerminal (ConnectionAnchor c) {
        if (getMainFigure () instanceof NodeFigure) return ((NodeFigure) getMainFigure ()).getConnectionAnchorTerminal (c);

        return super.getConnectionAnchorTerminal (c);
    }

    public static IFigure getParentFigure (IFigure target) {
        IFigure parent = target.getParent ();
        if (parent instanceof BorderItemContainerFigure) {
            return ((BorderedNodeFigure) parent.getParent ()).getMainFigure ();
        }
        return parent;
    }

}

