package org.eclipse.gmf.graphdef.editor.edit.policies;

import java.util.Collection;

import java.util.Collections;

import java.util.HashMap;

import java.util.HashSet;

import java.util.Iterator;

import java.util.LinkedList;

import java.util.List;

import java.util.Map;

import java.util.Set;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.commands.Command;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.ChildAccessEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse2EditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse3EditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.EllipseEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.NodeEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline2EditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline3EditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.PolylineEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle2EditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle3EditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.RectangleEditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle2EditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle3EditPart;

import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangleEditPart;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramUpdater;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphLinkDescriptor;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphNodeDescriptor;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.View;

public class CanvasCanonicalEditPolicy extends CanonicalConnectionEditPolicy {
    Set myFeaturesToSynchronize;

    protected List getSemanticChildrenList () {
        View viewObject = (View) getHost ().getModel ();
        List result = new LinkedList ();
        for (Iterator it = GMFGraphDiagramUpdater.getCanvas_1000SemanticChildren (viewObject).iterator ();
        it.hasNext ();) {
            result.add (((GMFGraphNodeDescriptor) it.next ()).getModelElement ());
        }
        return result;
    }

    protected boolean shouldDeleteView (View view) {
        return true;
    }

    protected boolean isOrphaned (Collection semanticChildren, final View view) {
        if (view.getEAnnotation ("Shortcut") != null) {
            return GMFGraphDiagramUpdater.isShortcutOrphaned (view);
        }
        int visualID = GMFGraphVisualIDRegistry.getVisualID (view);
        switch (visualID) {
            case CompartmentEditPart.VISUAL_ID :
            case NodeEditPart.VISUAL_ID :
            case ConnectionEditPart.VISUAL_ID :
            case FigureGalleryEditPart.VISUAL_ID :
                return ! semanticChildren.contains (view.getElement ()) || visualID != GMFGraphVisualIDRegistry.getNodeVisualID ((View) getHost ().getModel (), view.getElement ());
        }
        return false;
    }

    protected String getDefaultFactoryHint () {
        return null;
    }

    protected Set getFeaturesToSynchronize () {
        if (myFeaturesToSynchronize == null) {
            myFeaturesToSynchronize = new HashSet ();
            myFeaturesToSynchronize.add (GMFGraphPackage.eINSTANCE.getCanvas_Compartments ());
            myFeaturesToSynchronize.add (GMFGraphPackage.eINSTANCE.getCanvas_Nodes ());
            myFeaturesToSynchronize.add (GMFGraphPackage.eINSTANCE.getCanvas_Connections ());
            myFeaturesToSynchronize.add (GMFGraphPackage.eINSTANCE.getCanvas_Figures ());
        }
        return myFeaturesToSynchronize;
    }

    protected List getSemanticConnectionsList () {
        return Collections.EMPTY_LIST;
    }

    protected EObject getSourceElement (EObject relationship) {
        return null;
    }

    protected EObject getTargetElement (EObject relationship) {
        return null;
    }

    protected boolean shouldIncludeConnection (Edge connector, Collection children) {
        return false;
    }

    protected void refreshSemantic () {
        List createdViews = new LinkedList ();
        createdViews.addAll (refreshSemanticChildren ());
        List createdConnectionViews = new LinkedList ();
        createdConnectionViews.addAll (refreshSemanticConnections ());
        createdConnectionViews.addAll (refreshConnections ());
        if (createdViews.size () > 1) {
            DeferredLayoutCommand layoutCmd = new DeferredLayoutCommand (host ().getEditingDomain (), createdViews, host ());
            executeCommand (new ICommandProxy (layoutCmd));
        }
        createdViews.addAll (createdConnectionViews);
        makeViewsImmutable (createdViews);
    }

    private Diagram getDiagram () {
        return ((View) getHost ().getModel ()).getDiagram ();
    }

    private Collection refreshConnections () {
        Map domain2NotationMap = new HashMap ();
        Collection linkDescriptors = collectAllLinks (getDiagram (), domain2NotationMap);
        Collection existingLinks = new LinkedList (getDiagram ().getEdges ());
        for (Iterator linksIterator = existingLinks.iterator ();
        linksIterator.hasNext ();) {
            Edge nextDiagramLink = (Edge) linksIterator.next ();
            int diagramLinkVisualID = GMFGraphVisualIDRegistry.getVisualID (nextDiagramLink);
            if (diagramLinkVisualID == - 1) {
                if (nextDiagramLink.getSource () != null && nextDiagramLink.getTarget () != null) {
                    linksIterator.remove ();
                }
                continue;
            }
            EObject diagramLinkObject = nextDiagramLink.getElement ();
            EObject diagramLinkSrc = nextDiagramLink.getSource ().getElement ();
            EObject diagramLinkDst = nextDiagramLink.getTarget ().getElement ();
            for (Iterator LinkDescriptorsIterator = linkDescriptors.iterator ();
            LinkDescriptorsIterator.hasNext ();) {
                GMFGraphLinkDescriptor nextLinkDescriptor = (GMFGraphLinkDescriptor) LinkDescriptorsIterator.next ();
                if (diagramLinkObject == nextLinkDescriptor.getModelElement () && diagramLinkSrc == nextLinkDescriptor.getSource () && diagramLinkDst == nextLinkDescriptor.getDestination () && diagramLinkVisualID == nextLinkDescriptor.getVisualID ()) {
                    linksIterator.remove ();
                    LinkDescriptorsIterator.remove ();
                }
            }
        }
        deleteViews (existingLinks.iterator ());
        return createConnections (linkDescriptors, domain2NotationMap);
    }

    private Collection collectAllLinks (View view, Map domain2NotationMap) {
        if (! CanvasEditPart.MODEL_ID.equals (GMFGraphVisualIDRegistry.getModelID (view))) {
            return Collections.EMPTY_LIST;
        }
        Collection result = new LinkedList ();
        switch (GMFGraphVisualIDRegistry.getVisualID (view)) {
            case CanvasEditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getCanvas_1000ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case CompartmentEditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getCompartment_2005ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case NodeEditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getNode_2006ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case ConnectionEditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getConnection_2007ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case FigureGalleryEditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getFigureGallery_2008ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case FigureDescriptorEditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getFigureDescriptor_3009ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case RectangleEditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getRectangle_3010ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case Rectangle2EditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getRectangle_3011ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case EllipseEditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getEllipse_3012ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case RoundedRectangleEditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getRoundedRectangle_3013ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case PolylineEditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getPolyline_3014ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case Ellipse2EditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getEllipse_3015ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case RoundedRectangle2EditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getRoundedRectangle_3016ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case Polyline2EditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getPolyline_3017ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case Rectangle3EditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getRectangle_3018ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case Ellipse3EditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getEllipse_3019ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case RoundedRectangle3EditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getRoundedRectangle_3020ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case Polyline3EditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getPolyline_3021ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                } case ChildAccessEditPart.VISUAL_ID :
                {
                    if (! domain2NotationMap.containsKey (view.getElement ())) {
                        result.addAll (GMFGraphDiagramUpdater.getChildAccess_4002ContainedLinks (view));
                    }
                    if (! domain2NotationMap.containsKey (view.getElement ()) || view.getEAnnotation ("Shortcut") == null) {
                        domain2NotationMap.put (view.getElement (), view);
                    }
                    break;
                }}
        for (Iterator children = view.getChildren ().iterator ();
        children.hasNext ();) {
            result.addAll (collectAllLinks ((View) children.next (), domain2NotationMap));
        }
        for (Iterator edges = view.getSourceEdges ().iterator ();
        edges.hasNext ();) {
            result.addAll (collectAllLinks ((View) edges.next (), domain2NotationMap));
        }
        return result;
    }

    private Collection createConnections (Collection linkDescriptors, Map domain2NotationMap) {
        List adapters = new LinkedList ();
        for (Iterator linkDescriptorsIterator = linkDescriptors.iterator ();
        linkDescriptorsIterator.hasNext ();) {
            final GMFGraphLinkDescriptor nextLinkDescriptor = (GMFGraphLinkDescriptor) linkDescriptorsIterator.next ();
            EditPart sourceEditPart = getEditPart (nextLinkDescriptor.getSource (), domain2NotationMap);
            EditPart targetEditPart = getEditPart (nextLinkDescriptor.getDestination (), domain2NotationMap);
            if (sourceEditPart == null || targetEditPart == null) {
                continue;
            }
            CreateConnectionViewRequest.ConnectionViewDescriptor descriptor = new CreateConnectionViewRequest.ConnectionViewDescriptor (nextLinkDescriptor.getSemanticAdapter (), null, ViewUtil.APPEND, false, ((IGraphicalEditPart) getHost ()).getDiagramPreferencesHint ());
            CreateConnectionViewRequest ccr = new CreateConnectionViewRequest (descriptor);
            ccr.setType (RequestConstants.REQ_CONNECTION_START);
            ccr.setSourceEditPart (sourceEditPart);
            sourceEditPart.getCommand (ccr);
            ccr.setTargetEditPart (targetEditPart);
            ccr.setType (RequestConstants.REQ_CONNECTION_END);
            Command cmd = targetEditPart.getCommand (ccr);
            if (cmd != null && cmd.canExecute ()) {
                executeCommand (cmd);
                IAdaptable viewAdapter = (IAdaptable) ccr.getNewObject ();
                if (viewAdapter != null) {
                    adapters.add (viewAdapter);
                }
            }
        }
        return adapters;
    }

    private EditPart getEditPart (EObject domainModelElement, Map domain2NotationMap) {
        View view = (View) domain2NotationMap.get (domainModelElement);
        if (view != null) {
            return (EditPart) getHost ().getViewer ().getEditPartRegistry ().get (view);
        }
        return null;
    }

}

