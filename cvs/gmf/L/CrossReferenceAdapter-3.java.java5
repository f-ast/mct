package org.eclipse.gmf.runtime.emf.core.util;

import java.util.Collection;

import java.util.Collections;

import java.util.HashMap;

import java.util.HashSet;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import java.util.Set;

import org.eclipse.emf.common.notify.Adapter;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.EStructuralFeature.Setting;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.ecore.util.EContentsEList;

import org.eclipse.emf.ecore.util.ECrossReferenceAdapter;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.emf.ecore.util.InternalEList;

public class CrossReferenceAdapter extends ECrossReferenceAdapter {
    private Map imports = new HashMap ();
    private Map exports = new HashMap ();
    private boolean resolve = true;

    public CrossReferenceAdapter () {
        this (true);
    }

    public CrossReferenceAdapter (boolean resolve) {
        super ();
        this.resolve = resolve;
    }

    public void selfAdapt (Notification notification) {
        super.selfAdapt (notification);
        Object notifier = notification.getNotifier ();
        Object feature = notification.getFeature ();
        if (notifier instanceof Resource) {
            if (notification.getFeatureID (Resource.class) == Resource.RESOURCE__IS_LOADED) {
                if (notification.getNewBooleanValue ()) {
                    updateImportsAndExports ((Resource) notifier);
                } else {
                    deregisterReferences ((Resource) notifier);
                }
            }
            return;
        }
        if (! (notifier instanceof EObject) || ! (feature instanceof EReference)) {
            return;
        }
        EReference reference = (EReference) feature;
        switch (notification.getEventType ()) {
            case Notification.RESOLVE :
            case Notification.SET :
            case Notification.UNSET :
                {
                    if (reference.isContainment ()) {
                        break;
                    }
                    EObject oldValue = (EObject) notification.getOldValue ();
                    if (oldValue != null) {
                        deregisterReference (((EObject) notification.getNotifier ()).eResource (), oldValue.eResource ());
                    }
                    EObject newValue = (EObject) notification.getNewValue ();
                    if (newValue != null) {
                        registerReference (((EObject) notification.getNotifier ()).eResource (), newValue.eResource ());
                    }
                    break;
                } case Notification.ADD :
                {
                    EObject newValue = (EObject) notification.getNewValue ();
                    if (newValue != null) {
                        if (! reference.isContainment ()) {
                            registerReference (((EObject) notification.getNotifier ()).eResource (), newValue.eResource ());
                        } else {
                            updateImportsAndExports (newValue, true);
                        }
                    }
                    break;
                } case Notification.ADD_MANY :
                {
                    Collection newValues = (Collection) notification.getNewValue ();
                    for (Iterator i = newValues.iterator ();
                    i.hasNext ();) {
                        EObject newValue = (EObject) i.next ();
                        if (! reference.isContainment ()) {
                            registerReference (((EObject) notification.getNotifier ()).eResource (), newValue.eResource ());
                        } else {
                            updateImportsAndExports (newValue, true);
                        }
                    }
                    break;
                } case Notification.REMOVE :
                {
                    EObject oldValue = (EObject) notification.getOldValue ();
                    if (oldValue != null) {
                        if (! reference.isContainment ()) {
                            deregisterReference (((EObject) notification.getNotifier ()).eResource (), oldValue.eResource ());
                        } else {
                            updateImportsAndExports (oldValue, false);
                        }
                    }
                    break;
                } case Notification.REMOVE_MANY :
                {
                    Collection oldValues = (Collection) notification.getOldValue ();
                    for (Iterator i = oldValues.iterator ();
                    i.hasNext ();) {
                        EObject oldValue = (EObject) i.next ();
                        if (! reference.isContainment ()) {
                            deregisterReference (((EObject) notification.getNotifier ()).eResource (), oldValue.eResource ());
                        } else {
                            updateImportsAndExports (oldValue, false);
                        }
                    }
                    break;
                }}
    }

    protected void handleContainment (Notification notification) {
        super.handleContainment (notification);
        Object notifier = notification.getNotifier ();
        if (notifier instanceof ResourceSet) {
            return;
        }
        switch (notification.getEventType ()) {
            case Notification.SET :
            case Notification.UNSET :
            case Notification.REMOVE :
                {
                    EObject oldValue = (EObject) notification.getOldValue ();
                    if (oldValue != null) {
                        Resource resource;
                        if (notifier instanceof Resource) {
                            resource = (Resource) notifier;
                        } else {
                            resource = ((EObject) notification.getNotifier ()).eResource ();
                        }
                        remove (resource, oldValue);
                    }
                    break;
                } case Notification.REMOVE_MANY :
                {
                    Resource resource;
                    if (notifier instanceof Resource) {
                        resource = (Resource) notifier;
                    } else {
                        resource = ((EObject) notification.getNotifier ()).eResource ();
                    }
                    Collection oldValues = (Collection) notification.getOldValue ();
                    for (Iterator iter = oldValues.iterator ();
                    iter.hasNext ();) {
                        EObject next = (EObject) iter.next ();
                        if (next != null) {
                            remove (resource, next);
                        }
                    }
                    break;
                }}
    }

    private void remove (Resource resource, EObject eObject) {
        for (Iterator allContents = EcoreUtil.getAllContents (Collections.singleton (eObject));
        allContents.hasNext ();) {
            EObject next = (EObject) allContents.next ();
            EContentsEList.FeatureIterator crossReferences = (EContentsEList.FeatureIterator) next.eCrossReferences ().iterator ();
            while (crossReferences.hasNext ()) {
                EObject referent = (EObject) crossReferences.next ();
                if (referent != null) {
                    EReference eReference = (EReference) crossReferences.feature ();
                    if (eReference.isChangeable ()) {
                        Resource referencedResource = referent.eResource ();
                        deregisterReference (resource, referencedResource);
                        if (eReference.getEOpposite () != null) {
                            deregisterReference (referencedResource, resource);
                        }
                    }
                }
            }
            for (Iterator iter = getNonNavigableInverseReferencers (next, null, null).iterator ();
            iter.hasNext ();) {
                deregisterReference (((EObject) iter.next ()).eResource (), resource);
            }
        }
    }

    public void setTarget (Notifier target) {
        super.setTarget (target);
        if (target instanceof EObject) {
            EObject eObject = (EObject) target;
            Resource resource = eObject.eResource ();
            EContentsEList.FeatureIterator crossReferences = (EContentsEList.FeatureIterator) (resolve () ? eObject.eCrossReferences ().iterator () : ((InternalEList) eObject.eCrossReferences ()).basicIterator ());
            while (crossReferences.hasNext ()) {
                EObject referent = (EObject) crossReferences.next ();
                if (referent != null) {
                    EReference eReference = (EReference) crossReferences.feature ();
                    if (eReference.isChangeable ()) {
                        Resource referencedResource = referent.eResource ();
                        registerReference (resource, referencedResource);
                    }
                }
            }
        }
    }

    public void unsetTarget (Notifier notifier) {
        super.unsetTarget (notifier);
        if (notifier instanceof Resource) {
            deregisterReferences ((Resource) notifier);
        }
    }

    public Set getImports (Resource referencer) {
        Map importsMap = getImportsMap (referencer);
        if (importsMap != null) {
            return Collections.unmodifiableSet (importsMap.keySet ());
        } else {
            return Collections.EMPTY_SET;
        }
    }

    public Set getExports (Resource referenced) {
        Map exportsMap = getExportsMap (referenced);
        if (exportsMap != null) {
            return Collections.unmodifiableSet (exportsMap.keySet ());
        } else {
            return Collections.EMPTY_SET;
        }
    }

    private Map getImportsMap (Resource resource) {
        return (Map) imports.get (resource);
    }

    private Map getExportsMap (Resource resource) {
        return (Map) exports.get (resource);
    }

    private void registerReference (final Resource referencer, final Resource referenced) {
        if ((referencer != null) && (referenced != null) && (referencer != referenced)) {
            Map importsMap = getImportsMap (referencer);
            if (importsMap == null) {
                importsMap = new HashMap ();
                imports.put (referencer, importsMap);
            }
            Counter importsCount = (Counter) importsMap.get (referenced);
            if (importsCount == null) {
                importsCount = new Counter ();
                importsMap.put (referenced, importsCount);
                importAdded (referencer, referenced);
            } else {
                importsCount.inc ();
            }
            Map exportsMap = getExportsMap (referenced);
            if (exportsMap == null) {
                exportsMap = new HashMap ();
                exports.put (referenced, exportsMap);
            }
            Counter exportsCount = (Counter) exportsMap.get (referencer);
            if (exportsCount == null) {
                exportsCount = new Counter ();
                exportsMap.put (referencer, exportsCount);
                exportAdded (referenced, referencer);
            } else {
                exportsCount.inc ();
            }
        }
    }

    protected void importAdded (Resource referencer, Resource referenced) {
    }

    protected void importRemoved (Resource referencer, Resource referenced) {
    }

    protected void exportAdded (Resource referenced, Resource referencer) {
    }

    protected void exportRemoved (Resource referenced, Resource referencer) {
    }

    private void deregisterReference (final Resource referencer, final Resource referenced) {
        if ((referencer != null) && (referenced != null) && (referencer != referenced)) {
            Map importsMap = getImportsMap (referencer);
            if (importsMap != null) {
                Counter importsCount = (Counter) importsMap.get (referenced);
                if ((importsCount != null) && importsCount.dec ()) {
                    importsMap.remove (referenced);
                    importRemoved (referencer, referenced);
                    if (importsMap.isEmpty ()) {
                        imports.remove (referencer);
                    }
                }
            }
            Map exportsMap = getExportsMap (referenced);
            if (exportsMap != null) {
                Counter exportsCount = (Counter) exportsMap.get (referencer);
                if ((exportsCount != null) && exportsCount.dec ()) {
                    exportsMap.remove (referencer);
                    exportRemoved (referenced, referencer);
                    if (exportsMap.isEmpty ()) {
                        exports.remove (referenced);
                    }
                }
            }
        }
    }

    private void updateImportsAndExports (Resource resource) {
        for (Iterator i = EcoreUtil.getAllContents (resource, resolve ());
        i.hasNext ();) {
            EObject next = (EObject) i.next ();
            for (Iterator iter = getInverseReferencers (next, null, null).iterator ();
            iter.hasNext ();) {
                registerReference (((EObject) iter.next ()).eResource (), resource);
            }
        }
    }

    private void updateImportsAndExports (EObject eObject, boolean register) {
        Resource resource = eObject.eResource ();
        for (Iterator iter = getInverseReferencers (eObject, null, null).iterator ();
        iter.hasNext ();) {
            if (register) {
                registerReference (((EObject) iter.next ()).eResource (), resource);
            } else {
                deregisterReference (((EObject) iter.next ()).eResource (), resource);
            }
        }
        for (Iterator i = EcoreUtil.getAllContents (eObject, resolve ());
        i.hasNext ();) {
            EObject next = (EObject) i.next ();
            for (Iterator iter = getInverseReferencers (next, null, null).iterator ();
            iter.hasNext ();) {
                if (register) {
                    registerReference (((EObject) iter.next ()).eResource (), resource);
                } else {
                    deregisterReference (((EObject) iter.next ()).eResource (), resource);
                }
            }
        }
    }

    private void deregisterReferences (final Resource referencer) {
        Object [] resImports = getImports (referencer).toArray ();
        for (int i = 0;
        i < resImports.length; i ++) {
            final Resource referenced = (Resource) resImports [i];
            Map importsMap = getImportsMap (referencer);
            if (importsMap != null) {
                importsMap.remove (referenced);
                importRemoved (referencer, referenced);
                if (importsMap.isEmpty ()) {
                    imports.remove (referencer);
                }
            }
            Map exportsMap = getExportsMap (referenced);
            if (exportsMap != null) {
                exportsMap.remove (referencer);
                exportRemoved (referenced, referencer);
                if (exportsMap.isEmpty ()) {
                    exports.remove (referenced);
                }
            }
        }
    }

    public Set getInverseReferencers (EObject referenced, EReference reference, EClass type) {
        return getReferencers (getInverseReferences (referenced), reference, type);
    }

    public Set getNonNavigableInverseReferencers (EObject referenced, EReference reference, EClass type) {
        return getReferencers (getNonNavigableInverseReferences (referenced), reference, type);
    }

    private Set getReferencers (Collection references, EReference reference, EClass type) {
        Set set = new HashSet ();
        if (! references.isEmpty ()) {
            for (Iterator iter = references.iterator ();
            iter.hasNext ();) {
                Setting setting = (Setting) iter.next ();
                if (reference == null || reference == setting.getEStructuralFeature ()) {
                    EObject referencer = setting.getEObject ();
                    if (referencer != null && (type == null || type.isInstance (referencer))) {
                        set.add (referencer);
                    }
                }
            }
        }
        return set;
    }

    public static CrossReferenceAdapter getExistingCrossReferenceAdapter (Notifier notifier) {
        if (notifier == null) {
            return null;
        }
        List adapters = notifier.eAdapters ();
        for (int i = 0, size = adapters.size ();
        i < size; ++ i) {
            Adapter adapter = (Adapter) adapters.get (i);
            if (adapter instanceof CrossReferenceAdapter) {
                return (CrossReferenceAdapter) adapter;
            }
        }
        return null;
    }

    public static CrossReferenceAdapter getCrossReferenceAdapter (ResourceSet resourceSet) {
        if (resourceSet == null) {
            return null;
        }
        CrossReferenceAdapter result = getExistingCrossReferenceAdapter (resourceSet);
        if (result == null) {
            result = new CrossReferenceAdapter ();
            resourceSet.eAdapters ().add (result);
        }
        return result;
    }

    private static final class Counter {
        private int value = 1;

        Counter () {
            super ();
        }

        int getValue () {
            return value;
        }

        void inc () {
            value ++;
        }

        boolean dec () {
            return -- value <= 0;
        }

    }

    protected boolean resolve () {
        return this.resolve;
    }

}

