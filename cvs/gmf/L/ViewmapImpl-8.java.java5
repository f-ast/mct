package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeUniqueEList;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.Attributes;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.Viewmap;

import org.eclipse.gmf.codegen.gmfgen.ViewmapLayoutType;

public abstract class ViewmapImpl extends EObjectImpl implements Viewmap {
    protected EList < Attributes > attributes = null;
    protected EList < String > requiredPluginIDs = null;
    protected static final ViewmapLayoutType LAYOUT_TYPE_EDEFAULT = ViewmapLayoutType.UNKNOWN_LITERAL;
    protected ViewmapLayoutType layoutType = LAYOUT_TYPE_EDEFAULT;

    protected ViewmapImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getViewmap ();
    }

    public EList < String > getRequiredPluginIDs () {
        if (requiredPluginIDs == null) {
            requiredPluginIDs = new EDataTypeUniqueEList < String > (String.class, this, GMFGenPackage.VIEWMAP__REQUIRED_PLUGIN_IDS);
        }
        return requiredPluginIDs;
    }

    public ViewmapLayoutType getLayoutType () {
        return layoutType;
    }

    public void setLayoutType (ViewmapLayoutType newLayoutType) {
        ViewmapLayoutType oldLayoutType = layoutType;
        layoutType = newLayoutType == null ? LAYOUT_TYPE_EDEFAULT : newLayoutType;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.VIEWMAP__LAYOUT_TYPE, oldLayoutType, layoutType));

    }

    public EList < Attributes > getAttributes () {
        if (attributes == null) {
            attributes = new EObjectContainmentEList < Attributes > (Attributes.class, this, GMFGenPackage.VIEWMAP__ATTRIBUTES);
        }
        return attributes;
    }

    public Attributes find (Class attributesClass) {
        for (Attributes next : getAttributes ()) {
            if (attributesClass.isInstance (next)) {
                return next;
            }
        }
        return null;
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.VIEWMAP__ATTRIBUTES :
                return ((InternalEList < ? >) getAttributes ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.VIEWMAP__ATTRIBUTES :
                return getAttributes ();
            case GMFGenPackage.VIEWMAP__REQUIRED_PLUGIN_IDS :
                return getRequiredPluginIDs ();
            case GMFGenPackage.VIEWMAP__LAYOUT_TYPE :
                return getLayoutType ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.VIEWMAP__ATTRIBUTES :
                getAttributes ().clear ();
                getAttributes ().addAll ((Collection < ? extends Attributes >) newValue);
                return;
            case GMFGenPackage.VIEWMAP__REQUIRED_PLUGIN_IDS :
                getRequiredPluginIDs ().clear ();
                getRequiredPluginIDs ().addAll ((Collection < ? extends String >) newValue);
                return;
            case GMFGenPackage.VIEWMAP__LAYOUT_TYPE :
                setLayoutType ((ViewmapLayoutType) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.VIEWMAP__ATTRIBUTES :
                getAttributes ().clear ();
                return;
            case GMFGenPackage.VIEWMAP__REQUIRED_PLUGIN_IDS :
                getRequiredPluginIDs ().clear ();
                return;
            case GMFGenPackage.VIEWMAP__LAYOUT_TYPE :
                setLayoutType (LAYOUT_TYPE_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.VIEWMAP__ATTRIBUTES :
                return attributes != null && ! attributes.isEmpty ();
            case GMFGenPackage.VIEWMAP__REQUIRED_PLUGIN_IDS :
                return requiredPluginIDs != null && ! requiredPluginIDs.isEmpty ();
            case GMFGenPackage.VIEWMAP__LAYOUT_TYPE :
                return layoutType != LAYOUT_TYPE_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (requiredPluginIDs: ");
        result.append (requiredPluginIDs);
        result.append (", layoutType: ");
        result.append (layoutType);
        result.append (')');
        return result.toString ();
    }

}

