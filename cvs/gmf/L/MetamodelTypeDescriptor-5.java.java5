package org.eclipse.gmf.runtime.emf.type.core.internal.descriptors;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.ENamedElement;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.emf.type.core.IElementTypeFactory;

import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;

import org.eclipse.gmf.runtime.emf.type.core.IMetamodelTypeDescriptor;

import org.eclipse.gmf.runtime.emf.type.core.edithelper.IEditHelper;

import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePlugin;

import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePluginStatusCodes;

import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.EMFTypeCoreMessages;

public class MetamodelTypeDescriptor extends ElementTypeDescriptor implements IMetamodelTypeDescriptor {
    private EClass eClass;
    private IEditHelper editHelper;
    private IMetamodelType metamodelType;
    private String editHelperName;

    public MetamodelTypeDescriptor (IMetamodelType metamodelType) {
        super (metamodelType);
        this.eClass = metamodelType.getEClass ();
        this.editHelper = metamodelType.getEditHelper ();
        this.metamodelType = metamodelType;
    }

    public MetamodelTypeDescriptor (IConfigurationElement configElement, MetamodelDescriptor metamodelDescriptor) throws CoreException {
        super (configElement);
        String eClassName = configElement.getAttribute (ElementTypeXmlConfig.A_ECLASS);
        if (eClassName == null) {
            throw EMFTypePluginStatusCodes.getTypeInitException (getId (), EMFTypeCoreMessages.type_reason_no_eclass_WARN_, null);
        }
        EPackage ePackage = metamodelDescriptor.getEPackage ();
        ENamedElement namedElement = ePackage.getEClassifier (eClassName);
        if (namedElement instanceof EClass) {
            eClass = (EClass) namedElement;
        }
        if (eClass == null) {
            throw EMFTypePluginStatusCodes.getTypeInitException (getId (), EMFTypeCoreMessages.type_reason_eclass_not_found_WARN_, null);
        }
        if (getName () == null || getName ().length () < 1) {
            setName (eClass.getName ());
        }
        editHelperName = getConfigElement ().getAttribute (ElementTypeXmlConfig.A_EDIT_HELPER);
    }

    public IElementType getElementType () {
        if (metamodelType == null) {
            if (getKindName () != null && getKindName ().length () > 0) {
                IElementTypeFactory factory = ElementTypeRegistry.getInstance ().getElementTypeFactory (getKindName ());
                if (factory != null) {
                    metamodelType = factory.createMetamodelType (this);
                }
            }
        }
        return metamodelType;
    }

    public EClass getEClass () {
        return eClass;
    }

    public IEditHelper getEditHelper () {
        if (editHelper == null) {
            if (editHelperName != null) {
                try {
                    editHelper = (IEditHelper) getConfigElement ().createExecutableExtension (ElementTypeXmlConfig.A_EDIT_HELPER);
                } catch (CoreException e) {
                    Log.error (EMFTypePlugin.getPlugin (), EMFTypePluginStatusCodes.EDIT_HELPER_CLASS_NOT_FOUND, EMFTypeCoreMessages.bind (EMFTypeCoreMessages.editHelper_class_not_found_ERROR_, editHelperName), e);
                    editHelperName = null;
                }
            }
        }
        return editHelper;
    }

    public String toString () {
        return "MetamodelTypeDescriptor[" + getId () + "]";
    }

}

