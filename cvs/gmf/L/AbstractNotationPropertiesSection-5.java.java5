package org.eclipse.gmf.runtime.diagram.ui.properties.sections;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.jface.dialogs.IDialogConstants;

import org.eclipse.jface.viewers.ILabelProvider;

import org.eclipse.swt.events.PaintEvent;

import org.eclipse.swt.events.PaintListener;

import org.eclipse.swt.graphics.GC;

import org.eclipse.swt.graphics.Rectangle;

import org.eclipse.swt.layout.FormLayout;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.ui.forms.FormColors;

import org.eclipse.ui.views.properties.IPropertyDescriptor;

import org.eclipse.ui.views.properties.IPropertySource;

import org.eclipse.wst.common.ui.properties.internal.provisional.ITabbedPropertyConstants;

import org.eclipse.wst.common.ui.properties.internal.provisional.TabbedPropertySheetPage;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.properties.descriptors.NotationPropertyDescriptor;

import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public abstract class AbstractNotationPropertiesSection extends AbstractModelerPropertySection {
    protected static int vertical_offset = ITabbedPropertyConstants.VSPACE;
    protected static int button_margin = IDialogConstants.BUTTON_MARGIN / 2;
    protected int standardLabelWidth = - 1;
    protected Composite composite;
    protected PaintListener painter;

    protected ILabelProvider getLabelProvider (Object propertyId) {
        IPropertySource propertySource = propertiesProvider.getPropertySource (getSingleInput ());
        ILabelProvider labelProvider = null;
        NotationPropertyDescriptor pdNotation = null;
        IPropertyDescriptor [] descriptors = null;
        if (null != propertySource) {
            descriptors = propertySource.getPropertyDescriptors ();
            for (int i = 0;
            i < descriptors.length; i ++) {
                if (descriptors [i].getId () == NotationPackage.eINSTANCE.getView_Styles ()) {
                    pdNotation = (NotationPropertyDescriptor) descriptors [i];
                    break;
                }
            }
        }
        if (null != pdNotation) {
            propertySource = (IPropertySource) pdNotation.getPropertyValue ();
            descriptors = propertySource.getPropertyDescriptors ();
            for (int j = 0;
            j < descriptors.length; j ++) {
                if (descriptors [j].getId () == MetaModelUtil.getElement (propertyId.toString ())) {
                    labelProvider = descriptors [j].getLabelProvider ();
                    break;
                }
            }
        }
        return labelProvider;
    }

    public void createControls (Composite parent, TabbedPropertySheetPage aTabbedPropertySheetPage) {
        super.createControls (parent, aTabbedPropertySheetPage);
        initializeControls (parent);
    }

    protected void initializeControls (Composite parent) {
        createPaintedSectionComposite (parent);
    }

    protected Composite createPaintedSectionComposite (Composite parent) {
        composite = getWidgetFactory ().createFlatFormComposite (parent);
        FormLayout layout = (FormLayout) composite.getLayout ();
        layout.spacing = 3;
        painter = createPainter ();
        composite.addPaintListener (painter);
        return composite;
    }

    public void dispose () {
        if (composite != null && ! composite.isDisposed () && painter != null) composite.removePaintListener (painter);

        super.dispose ();
    }

    protected PaintListener createPainter () {
        return new PaintListener () {

            public void paintControl (PaintEvent e) {
                Rectangle bounds = composite.getClientArea ();
                GC gc = e.gc;
                gc.setForeground (gc.getBackground ());
                gc.setBackground (getWidgetFactory ().getColors ().getColor (FormColors.TB_BG));
                gc.fillGradientRectangle (4 + bounds.width / 2, 0, bounds.width / 2 - 9, bounds.height, false);
                gc.setForeground (getWidgetFactory ().getColors ().getColor (FormColors.TB_BORDER));
                gc.drawLine (bounds.width - 5, 0, bounds.width - 5, bounds.height);
            }

        }

        ;
    }

    protected boolean isCurrentSelection (Notification notification, EObject element) {
        return true;
    }

    public IGraphicalEditPart getSingleInput () {
        return (IGraphicalEditPart) getPrimarySelection ();
    }

    protected EObject unwrap (Object object) {
        EObject o = super.unwrap (object);
        if (o != null && object instanceof IGraphicalEditPart) return o;

        return null;
    }

    protected EObject adapt (Object object) {
        if (object instanceof IAdaptable) {
            if (object instanceof IGraphicalEditPart) return (EObject) ((IAdaptable) object).getAdapter (View.class);

            return (EObject) ((IAdaptable) object).getAdapter (EObject.class);
        }
        return null;
    }

    protected int getStandardLabelWidth (Composite parent) {
        if (standardLabelWidth == - 1) {
            standardLabelWidth = getStandardLabelWidth (parent, getAllNameLabels ());
        }
        return standardLabelWidth;
    }

    protected String [] getAllNameLabels () {
        return new String [] {};
    }

}

