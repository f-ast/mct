package org.eclipse.gmf.runtime.emf.type.core.internal.descriptors;

import java.net.URL;

import java.util.ArrayList;

import java.util.List;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.emf.type.core.ElementType;

import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;

import org.eclipse.gmf.runtime.emf.type.core.IContainerDescriptor;

import org.eclipse.gmf.runtime.emf.type.core.IElementMatcher;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.emf.type.core.IElementTypeFactory;

import org.eclipse.gmf.runtime.emf.type.core.ISpecializationType;

import org.eclipse.gmf.runtime.emf.type.core.ISpecializationTypeDescriptor;

import org.eclipse.gmf.runtime.emf.type.core.edithelper.IEditHelperAdvice;

import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePlugin;

import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePluginStatusCodes;

import org.eclipse.gmf.runtime.emf.type.core.internal.impl.XMLExpressionMatcher;

import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.ResourceManager;

public class SpecializationTypeDescriptor extends ElementTypeDescriptor implements ISpecializationTypeDescriptor {
    private String matcherClassName;
    private IElementMatcher matcher;
    private IConfigurationElement matcherConfig;
    private String [] specializedTypeIds;
    private IElementType [] specializedTypes;
    private IContainerDescriptor containerDescriptor;
    private IEditHelperAdviceDescriptor editHelperAdviceDescriptor;
    private IEditHelperAdvice editHelperAdvice;
    private ISpecializationType specializationType;
    private String editHelperAdviceName;

    public SpecializationTypeDescriptor (ISpecializationType specializationType) {
        super (specializationType);
        this.containerDescriptor = specializationType.getEContainerDescriptor ();
        this.editHelperAdvice = specializationType.getEditHelperAdvice ();
        this.editHelperAdviceDescriptor = new EditHelperAdviceDescriptor (editHelperAdvice, this);
        this.matcher = specializationType.getMatcher ();
        this.specializationType = specializationType;
        this.specializedTypeIds = specializationType.getSpecializedTypeIds ();
        this.specializedTypes = specializationType.getSpecializedTypes ();
    }

    public SpecializationTypeDescriptor (IConfigurationElement configElement, MetamodelDescriptor metamodelDescriptor) throws CoreException {
        super (configElement);
        editHelperAdviceName = configElement.getAttribute (ElementTypeXmlConfig.A_EDIT_HELPER_ADVICE);
        editHelperAdviceDescriptor = new EditHelperAdviceDescriptor (editHelperAdviceName, this);
        List specializes = new ArrayList ();
        IConfigurationElement [] specializesConfigs = configElement.getChildren (ElementTypeXmlConfig.E_SPECIALIZES);
        for (int i = 0;
        i < specializesConfigs.length; i ++) {
            IConfigurationElement nextSpecializesConfig = specializesConfigs [i];
            String specializedId = nextSpecializesConfig.getAttribute (ElementTypeXmlConfig.A_ID);
            if (specializedId == null) {
                throw EMFTypePluginStatusCodes.getTypeInitException (getId (), EMFTypePluginStatusCodes.TYPE_NO_SPECIALIZED_ID_KEY, null);
            }
            specializes.add (specializedId);
        }
        specializedTypeIds = (String []) specializes.toArray (new String [] {});
        if (specializedTypeIds.length < 1) {
            throw EMFTypePluginStatusCodes.getTypeInitException (getId (), EMFTypePluginStatusCodes.TYPE_NO_SPECIALIZED_KEY, null);
        }
        IConfigurationElement [] containerConfigs = configElement.getChildren (ElementTypeXmlConfig.E_ECONTAINER);
        if (containerConfigs.length > 0) {
            containerDescriptor = new ContainerDescriptor (containerConfigs [0], metamodelDescriptor, getId ());
        }
        IConfigurationElement [] enablementConfigs = configElement.getChildren (ElementTypeXmlConfig.E_ENABLEMENT);
        if (enablementConfigs.length > 0) {
            matcher = new XMLExpressionMatcher (enablementConfigs [0], getId ());
        }
        if (matcher == null) {
            IConfigurationElement [] matcherConfigs = configElement.getChildren (ElementTypeXmlConfig.E_MATCHER);
            if (matcherConfigs.length > 0) {
                matcherClassName = matcherConfigs [0].getAttribute (ElementTypeXmlConfig.A_CLASS);
                if (matcherClassName == null) {
                    throw EMFTypePluginStatusCodes.getInitException (getId (), EMFTypePluginStatusCodes.MATCHER_NO_CLASS_KEY, null);
                }
                matcherConfig = matcherConfigs [0];
            }
        }
    }

    public IElementType getElementType () {
        if (specializationType == null) {
            if (getKindName () != null && getKindName ().length () > 0) {
                IElementTypeFactory factory = ElementTypeRegistry.getInstance ().getElementTypeFactory (getKindName ());
                if (factory != null) {
                    specializationType = factory.createSpecializationType (this);
                }
            }
        }
        return specializationType;
    }

    public String [] getSpecializationTypeIds () {
        return specializedTypeIds;
    }

    public IConfigurationElement getMatcherConfiguration () {
        return matcherConfig;
    }

    public IContainerDescriptor getContainerDescriptor () {
        return containerDescriptor;
    }

    public IEditHelperAdviceDescriptor getEditHelperAdviceDescriptor () {
        return editHelperAdviceDescriptor;
    }

    public IElementType [] getSpecializedTypes () {
        if (specializedTypes == null) {
            specializedTypes = new ElementType [specializedTypeIds.length];
            for (int i = 0;
            i < specializedTypeIds.length; i ++) {
                specializedTypes [i] = ElementTypeRegistry.getInstance ().getType (specializedTypeIds [i]);
            }
        }
        return specializedTypes;
    }

    public IElementMatcher getMatcher () {
        if (matcher == null && matcherClassName != null && matcherConfig != null) {
            try {
                matcher = (IElementMatcher) matcherConfig.createExecutableExtension (ElementTypeXmlConfig.A_CLASS);
            } catch (CoreException e) {
                Log.error (EMFTypePlugin.getPlugin (), EMFTypePluginStatusCodes.MATCHER_CLASS_NOT_FOUND, ResourceManager.getMessage (EMFTypePluginStatusCodes.MATCHER_CLASS_NOT_FOUND_KEY, new Object [] {matcherClassName}), e);
                matcherClassName = null;
            }
        }
        return matcher;
    }

    public IEditHelperAdvice getEditHelperAdvice () {
        if (editHelperAdvice == null && getEditHelperAdviceDescriptor () != null) {
            editHelperAdvice = getEditHelperAdviceDescriptor ().getEditHelperAdvice ();
        }
        return editHelperAdvice;
    }

    public URL getIconURL () {
        if ((super.getIconURL () == null) && (getSpecializedTypes ().length > 0)) {
            return getSpecializedTypes () [0].getIconURL ();
        }
        return super.getIconURL ();
    }

}

