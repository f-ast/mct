package org.eclipse.gmf.runtime.notation.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.NotationEditPlugin;

import org.eclipse.gmf.runtime.notation.NotationFactory;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class NodeItemProvider extends ViewItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public NodeItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addLayoutConstraintPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (NotationPackage.Literals.NODE__LAYOUT_CONSTRAINT);
        }
        return childrenFeatures;
    }

    protected void addLayoutConstraintPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getString ("_UI_Node_layoutConstraint_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_Node_layoutConstraint_feature", "_UI_Node_type"), NotationPackage.eINSTANCE.getNode_LayoutConstraint (), false, null));
    }

    public Object getImage (Object object) {
        return getResourceLocator ().getImage ("full/obj16/Node");
    }

    public String getText (Object object) {
        Node node = (Node) object;
        return getString ("_UI_Node_type") + " " + node.isVisible ();
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (Node.class)) {
            case NotationPackage.NODE__LAYOUT_CONSTRAINT :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.NODE__LAYOUT_CONSTRAINT, NotationFactory.eINSTANCE.createSize ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.NODE__LAYOUT_CONSTRAINT, NotationFactory.eINSTANCE.createLocation ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.NODE__LAYOUT_CONSTRAINT, NotationFactory.eINSTANCE.createBounds ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.NODE__LAYOUT_CONSTRAINT, NotationFactory.eINSTANCE.createRatio ()));
    }

    public String getCreateChildText (Object owner, Object feature, Object child, Collection selection) {
        Object childFeature = feature;
        Object childObject = child;
        boolean qualify = childFeature == NotationPackage.Literals.VIEW__PERSISTED_CHILDREN || childFeature == NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN;
        if (qualify) {
            return getString ("_UI_CreateChild_text2", new Object [] {getTypeText (childObject), getFeatureText (childFeature), getTypeText (owner)});
        }
        return super.getCreateChildText (owner, feature, child, selection);
    }

    public ResourceLocator getResourceLocator () {
        return NotationEditPlugin.INSTANCE;
    }

}

