package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.ecore.EAttribute;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EEnum;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.eclipse.gmf.gmfgraph.AbstractFigure;

import org.eclipse.gmf.gmfgraph.AbstractNode;

import org.eclipse.gmf.gmfgraph.Alignment;

import org.eclipse.gmf.gmfgraph.AlignmentFacet;

import org.eclipse.gmf.gmfgraph.BasicFont;

import org.eclipse.gmf.gmfgraph.Border;

import org.eclipse.gmf.gmfgraph.BorderLayout;

import org.eclipse.gmf.gmfgraph.BorderLayoutData;

import org.eclipse.gmf.gmfgraph.BorderRef;

import org.eclipse.gmf.gmfgraph.Canvas;

import org.eclipse.gmf.gmfgraph.ChildAccess;

import org.eclipse.gmf.gmfgraph.Color;

import org.eclipse.gmf.gmfgraph.ColorConstants;

import org.eclipse.gmf.gmfgraph.Compartment;

import org.eclipse.gmf.gmfgraph.CompoundBorder;

import org.eclipse.gmf.gmfgraph.Connection;

import org.eclipse.gmf.gmfgraph.ConnectionFigure;

import org.eclipse.gmf.gmfgraph.ConstantColor;

import org.eclipse.gmf.gmfgraph.CustomAttribute;

import org.eclipse.gmf.gmfgraph.CustomBorder;

import org.eclipse.gmf.gmfgraph.CustomClass;

import org.eclipse.gmf.gmfgraph.CustomConnection;

import org.eclipse.gmf.gmfgraph.CustomDecoration;

import org.eclipse.gmf.gmfgraph.CustomFigure;

import org.eclipse.gmf.gmfgraph.CustomLayout;

import org.eclipse.gmf.gmfgraph.CustomLayoutData;

import org.eclipse.gmf.gmfgraph.DecorationFigure;

import org.eclipse.gmf.gmfgraph.DefaultSizeFacet;

import org.eclipse.gmf.gmfgraph.DiagramElement;

import org.eclipse.gmf.gmfgraph.DiagramLabel;

import org.eclipse.gmf.gmfgraph.Dimension;

import org.eclipse.gmf.gmfgraph.Direction;

import org.eclipse.gmf.gmfgraph.Ellipse;

import org.eclipse.gmf.gmfgraph.Figure;

import org.eclipse.gmf.gmfgraph.FigureAccessor;

import org.eclipse.gmf.gmfgraph.FigureDescriptor;

import org.eclipse.gmf.gmfgraph.FigureGallery;

import org.eclipse.gmf.gmfgraph.FigureRef;

import org.eclipse.gmf.gmfgraph.FlowLayout;

import org.eclipse.gmf.gmfgraph.Font;

import org.eclipse.gmf.gmfgraph.FontStyle;

import org.eclipse.gmf.gmfgraph.GMFGraphFactory;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.GeneralFacet;

import org.eclipse.gmf.gmfgraph.GradientFacet;

import org.eclipse.gmf.gmfgraph.GridLayout;

import org.eclipse.gmf.gmfgraph.GridLayoutData;

import org.eclipse.gmf.gmfgraph.Identity;

import org.eclipse.gmf.gmfgraph.Insets;

import org.eclipse.gmf.gmfgraph.Label;

import org.eclipse.gmf.gmfgraph.LabelOffsetFacet;

import org.eclipse.gmf.gmfgraph.LabeledContainer;

import org.eclipse.gmf.gmfgraph.Layout;

import org.eclipse.gmf.gmfgraph.LayoutData;

import org.eclipse.gmf.gmfgraph.LayoutRef;

import org.eclipse.gmf.gmfgraph.Layoutable;

import org.eclipse.gmf.gmfgraph.LineBorder;

import org.eclipse.gmf.gmfgraph.LineKind;

import org.eclipse.gmf.gmfgraph.MarginBorder;

import org.eclipse.gmf.gmfgraph.Node;

import org.eclipse.gmf.gmfgraph.Point;

import org.eclipse.gmf.gmfgraph.Polygon;

import org.eclipse.gmf.gmfgraph.PolygonDecoration;

import org.eclipse.gmf.gmfgraph.Polyline;

import org.eclipse.gmf.gmfgraph.PolylineConnection;

import org.eclipse.gmf.gmfgraph.PolylineDecoration;

import org.eclipse.gmf.gmfgraph.RGBColor;

import org.eclipse.gmf.gmfgraph.RealFigure;

import org.eclipse.gmf.gmfgraph.Rectangle;

import org.eclipse.gmf.gmfgraph.Rectangle2D;

import org.eclipse.gmf.gmfgraph.RoundedRectangle;

import org.eclipse.gmf.gmfgraph.SVGFigure;

import org.eclipse.gmf.gmfgraph.SVGProperty;

import org.eclipse.gmf.gmfgraph.SVGPropertyType;

import org.eclipse.gmf.gmfgraph.ScalablePolygon;

import org.eclipse.gmf.gmfgraph.Shape;

import org.eclipse.gmf.gmfgraph.StackLayout;

import org.eclipse.gmf.gmfgraph.VisualFacet;

import org.eclipse.gmf.gmfgraph.XYLayout;

import org.eclipse.gmf.gmfgraph.XYLayoutData;

import org.eclipse.gmf.gmfgraph.*;

public class GMFGraphPackageImpl extends EPackageImpl implements GMFGraphPackage {
    private EClass canvasEClass = null;
    private EClass figureGalleryEClass = null;
    private EClass identityEClass = null;
    private EClass diagramElementEClass = null;
    private EClass abstractNodeEClass = null;
    private EClass nodeEClass = null;
    private EClass childAccessEClass = null;
    private EClass realFigureEClass = null;
    private EClass connectionEClass = null;
    private EClass compartmentEClass = null;
    private EClass diagramLabelEClass = null;
    private EClass visualFacetEClass = null;
    private EClass generalFacetEClass = null;
    private EClass alignmentFacetEClass = null;
    private EClass gradientFacetEClass = null;
    private EClass labelOffsetFacetEClass = null;
    private EClass defaultSizeFacetEClass = null;
    private EClass figureEClass = null;
    private EClass figureDescriptorEClass = null;
    private EClass abstractFigureEClass = null;
    private EClass figureRefEClass = null;
    private EClass connectionFigureEClass = null;
    private EClass decorationFigureEClass = null;
    private EClass shapeEClass = null;
    private EClass labelEClass = null;
    private EClass labeledContainerEClass = null;
    private EClass rectangleEClass = null;
    private EClass roundedRectangleEClass = null;
    private EClass ellipseEClass = null;
    private EClass polylineEClass = null;
    private EClass polygonEClass = null;
    private EClass scalablePolygonEClass = null;
    private EClass polylineConnectionEClass = null;
    private EClass polylineDecorationEClass = null;
    private EClass polygonDecorationEClass = null;
    private EClass customClassEClass = null;
    private EClass customFigureEClass = null;
    private EClass customDecorationEClass = null;
    private EClass customConnectionEClass = null;
    private EClass colorEClass = null;
    private EClass rgbColorEClass = null;
    private EClass constantColorEClass = null;
    private EClass fontEClass = null;
    private EClass basicFontEClass = null;
    private EClass pointEClass = null;
    private EClass dimensionEClass = null;
    private EClass insetsEClass = null;
    private EClass borderEClass = null;
    private EClass borderRefEClass = null;
    private EClass lineBorderEClass = null;
    private EClass marginBorderEClass = null;
    private EClass compoundBorderEClass = null;
    private EClass customBorderEClass = null;
    private EClass layoutDataEClass = null;
    private EClass customLayoutDataEClass = null;
    private EClass gridLayoutDataEClass = null;
    private EClass borderLayoutDataEClass = null;
    private EClass layoutableEClass = null;
    private EClass layoutEClass = null;
    private EClass layoutRefEClass = null;
    private EClass customLayoutEClass = null;
    private EClass gridLayoutEClass = null;
    private EClass borderLayoutEClass = null;
    private EClass customAttributeEClass = null;
    private EClass figureAccessorEClass = null;
    private EClass flowLayoutEClass = null;
    private EClass xyLayoutEClass = null;
    private EClass xyLayoutDataEClass = null;
    private EClass stackLayoutEClass = null;
    private EClass svgFigureEClass = null;
    private EClass svgPropertyEClass = null;
    private EClass rectangle2DEClass = null;
    private EEnum colorConstantsEEnum = null;
    private EEnum fontStyleEEnum = null;
    private EEnum directionEEnum = null;
    private EEnum lineKindEEnum = null;
    private EEnum alignmentEEnum = null;
    private EEnum svgPropertyTypeEEnum = null;

    private GMFGraphPackageImpl () {
        super (eNS_URI, GMFGraphFactory.eINSTANCE);
    }

    private static boolean isInited = false;

    public static GMFGraphPackage init () {
        if (isInited) return (GMFGraphPackage) EPackage.Registry.INSTANCE.getEPackage (GMFGraphPackage.eNS_URI);

        GMFGraphPackageImpl theGMFGraphPackage = (GMFGraphPackageImpl) (EPackage.Registry.INSTANCE.getEPackage (eNS_URI) instanceof GMFGraphPackageImpl ? EPackage.Registry.INSTANCE.getEPackage (eNS_URI) : new GMFGraphPackageImpl ());
        isInited = true;
        theGMFGraphPackage.createPackageContents ();
        theGMFGraphPackage.initializePackageContents ();
        theGMFGraphPackage.freeze ();
        return theGMFGraphPackage;
    }

    public EClass getCanvas () {
        return canvasEClass;
    }

    public EReference getCanvas_Figures () {
        return (EReference) canvasEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getCanvas_Nodes () {
        return (EReference) canvasEClass.getEStructuralFeatures ().get (1);
    }

    public EReference getCanvas_Connections () {
        return (EReference) canvasEClass.getEStructuralFeatures ().get (2);
    }

    public EReference getCanvas_Compartments () {
        return (EReference) canvasEClass.getEStructuralFeatures ().get (3);
    }

    public EReference getCanvas_Labels () {
        return (EReference) canvasEClass.getEStructuralFeatures ().get (4);
    }

    public EClass getFigureGallery () {
        return figureGalleryEClass;
    }

    public EReference getFigureGallery_Figures () {
        return (EReference) figureGalleryEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getFigureGallery_Descriptors () {
        return (EReference) figureGalleryEClass.getEStructuralFeatures ().get (1);
    }

    public EReference getFigureGallery_Borders () {
        return (EReference) figureGalleryEClass.getEStructuralFeatures ().get (2);
    }

    public EReference getFigureGallery_Layouts () {
        return (EReference) figureGalleryEClass.getEStructuralFeatures ().get (3);
    }

    public EAttribute getFigureGallery_ImplementationBundle () {
        return (EAttribute) figureGalleryEClass.getEStructuralFeatures ().get (4);
    }

    public EClass getIdentity () {
        return identityEClass;
    }

    public EAttribute getIdentity_Name () {
        return (EAttribute) identityEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getDiagramElement () {
        return diagramElementEClass;
    }

    public EReference getDiagramElement_Figure () {
        return (EReference) diagramElementEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getDiagramElement_Facets () {
        return (EReference) diagramElementEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getAbstractNode () {
        return abstractNodeEClass;
    }

    public EClass getNode () {
        return nodeEClass;
    }

    public EAttribute getNode_ResizeConstraint () {
        return (EAttribute) nodeEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getNode_AffixedParentSide () {
        return (EAttribute) nodeEClass.getEStructuralFeatures ().get (1);
    }

    public EReference getNode_ContentPane () {
        return (EReference) nodeEClass.getEStructuralFeatures ().get (2);
    }

    public EClass getChildAccess () {
        return childAccessEClass;
    }

    public EReference getChildAccess_Owner () {
        return (EReference) childAccessEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getChildAccess_Accessor () {
        return (EAttribute) childAccessEClass.getEStructuralFeatures ().get (1);
    }

    public EReference getChildAccess_Figure () {
        return (EReference) childAccessEClass.getEStructuralFeatures ().get (2);
    }

    public EClass getRealFigure () {
        return realFigureEClass;
    }

    public EAttribute getRealFigure_Name () {
        return (EAttribute) realFigureEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getRealFigure_Children () {
        return (EReference) realFigureEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getConnection () {
        return connectionEClass;
    }

    public EClass getCompartment () {
        return compartmentEClass;
    }

    public EAttribute getCompartment_Collapsible () {
        return (EAttribute) compartmentEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getCompartment_NeedsTitle () {
        return (EAttribute) compartmentEClass.getEStructuralFeatures ().get (1);
    }

    public EReference getCompartment_Accessor () {
        return (EReference) compartmentEClass.getEStructuralFeatures ().get (2);
    }

    public EClass getDiagramLabel () {
        return diagramLabelEClass;
    }

    public EAttribute getDiagramLabel_ElementIcon () {
        return (EAttribute) diagramLabelEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getDiagramLabel_Accessor () {
        return (EReference) diagramLabelEClass.getEStructuralFeatures ().get (1);
    }

    public EReference getDiagramLabel_Container () {
        return (EReference) diagramLabelEClass.getEStructuralFeatures ().get (2);
    }

    public EAttribute getDiagramLabel_External () {
        return (EAttribute) diagramLabelEClass.getEStructuralFeatures ().get (3);
    }

    public EClass getVisualFacet () {
        return visualFacetEClass;
    }

    public EClass getGeneralFacet () {
        return generalFacetEClass;
    }

    public EAttribute getGeneralFacet_Identifier () {
        return (EAttribute) generalFacetEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getGeneralFacet_Data () {
        return (EAttribute) generalFacetEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getAlignmentFacet () {
        return alignmentFacetEClass;
    }

    public EAttribute getAlignmentFacet_Alignment () {
        return (EAttribute) alignmentFacetEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getGradientFacet () {
        return gradientFacetEClass;
    }

    public EAttribute getGradientFacet_Direction () {
        return (EAttribute) gradientFacetEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getLabelOffsetFacet () {
        return labelOffsetFacetEClass;
    }

    public EAttribute getLabelOffsetFacet_X () {
        return (EAttribute) labelOffsetFacetEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getLabelOffsetFacet_Y () {
        return (EAttribute) labelOffsetFacetEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getDefaultSizeFacet () {
        return defaultSizeFacetEClass;
    }

    public EReference getDefaultSizeFacet_DefaultSize () {
        return (EReference) defaultSizeFacetEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getFigure () {
        return figureEClass;
    }

    public EReference getFigure_Descriptor () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getFigure_ForegroundColor () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (1);
    }

    public EReference getFigure_BackgroundColor () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (2);
    }

    public EReference getFigure_MaximumSize () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (3);
    }

    public EReference getFigure_MinimumSize () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (4);
    }

    public EReference getFigure_PreferredSize () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (5);
    }

    public EReference getFigure_Font () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (6);
    }

    public EReference getFigure_Insets () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (7);
    }

    public EReference getFigure_Border () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (8);
    }

    public EReference getFigure_Location () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (9);
    }

    public EReference getFigure_Size () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (10);
    }

    public EClass getFigureDescriptor () {
        return figureDescriptorEClass;
    }

    public EReference getFigureDescriptor_ActualFigure () {
        return (EReference) figureDescriptorEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getFigureDescriptor_Accessors () {
        return (EReference) figureDescriptorEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getAbstractFigure () {
        return abstractFigureEClass;
    }

    public EClass getFigureRef () {
        return figureRefEClass;
    }

    public EReference getFigureRef_Figure () {
        return (EReference) figureRefEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getConnectionFigure () {
        return connectionFigureEClass;
    }

    public EClass getDecorationFigure () {
        return decorationFigureEClass;
    }

    public EClass getShape () {
        return shapeEClass;
    }

    public EAttribute getShape_Outline () {
        return (EAttribute) shapeEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getShape_Fill () {
        return (EAttribute) shapeEClass.getEStructuralFeatures ().get (1);
    }

    public EAttribute getShape_LineWidth () {
        return (EAttribute) shapeEClass.getEStructuralFeatures ().get (2);
    }

    public EAttribute getShape_LineKind () {
        return (EAttribute) shapeEClass.getEStructuralFeatures ().get (3);
    }

    public EAttribute getShape_XorFill () {
        return (EAttribute) shapeEClass.getEStructuralFeatures ().get (4);
    }

    public EAttribute getShape_XorOutline () {
        return (EAttribute) shapeEClass.getEStructuralFeatures ().get (5);
    }

    public EReference getShape_ResolvedChildren () {
        return (EReference) shapeEClass.getEStructuralFeatures ().get (6);
    }

    public EClass getLabel () {
        return labelEClass;
    }

    public EAttribute getLabel_Text () {
        return (EAttribute) labelEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getLabeledContainer () {
        return labeledContainerEClass;
    }

    public EClass getRectangle () {
        return rectangleEClass;
    }

    public EClass getRoundedRectangle () {
        return roundedRectangleEClass;
    }

    public EAttribute getRoundedRectangle_CornerWidth () {
        return (EAttribute) roundedRectangleEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getRoundedRectangle_CornerHeight () {
        return (EAttribute) roundedRectangleEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getEllipse () {
        return ellipseEClass;
    }

    public EClass getPolyline () {
        return polylineEClass;
    }

    public EReference getPolyline_Template () {
        return (EReference) polylineEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getPolygon () {
        return polygonEClass;
    }

    public EClass getScalablePolygon () {
        return scalablePolygonEClass;
    }

    public EClass getPolylineConnection () {
        return polylineConnectionEClass;
    }

    public EReference getPolylineConnection_SourceDecoration () {
        return (EReference) polylineConnectionEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getPolylineConnection_TargetDecoration () {
        return (EReference) polylineConnectionEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getPolylineDecoration () {
        return polylineDecorationEClass;
    }

    public EClass getPolygonDecoration () {
        return polygonDecorationEClass;
    }

    public EClass getCustomClass () {
        return customClassEClass;
    }

    public EAttribute getCustomClass_QualifiedClassName () {
        return (EAttribute) customClassEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getCustomClass_Attributes () {
        return (EReference) customClassEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getCustomFigure () {
        return customFigureEClass;
    }

    public EReference getCustomFigure_CustomChildren () {
        return (EReference) customFigureEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getCustomDecoration () {
        return customDecorationEClass;
    }

    public EClass getCustomConnection () {
        return customConnectionEClass;
    }

    public EClass getColor () {
        return colorEClass;
    }

    public EClass getRGBColor () {
        return rgbColorEClass;
    }

    public EAttribute getRGBColor_Red () {
        return (EAttribute) rgbColorEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getRGBColor_Green () {
        return (EAttribute) rgbColorEClass.getEStructuralFeatures ().get (1);
    }

    public EAttribute getRGBColor_Blue () {
        return (EAttribute) rgbColorEClass.getEStructuralFeatures ().get (2);
    }

    public EClass getConstantColor () {
        return constantColorEClass;
    }

    public EAttribute getConstantColor_Value () {
        return (EAttribute) constantColorEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getFont () {
        return fontEClass;
    }

    public EClass getBasicFont () {
        return basicFontEClass;
    }

    public EAttribute getBasicFont_FaceName () {
        return (EAttribute) basicFontEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getBasicFont_Height () {
        return (EAttribute) basicFontEClass.getEStructuralFeatures ().get (1);
    }

    public EAttribute getBasicFont_Style () {
        return (EAttribute) basicFontEClass.getEStructuralFeatures ().get (2);
    }

    public EEnum getFontStyle () {
        return fontStyleEEnum;
    }

    public EClass getPoint () {
        return pointEClass;
    }

    public EAttribute getPoint_X () {
        return (EAttribute) pointEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getPoint_Y () {
        return (EAttribute) pointEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getDimension () {
        return dimensionEClass;
    }

    public EAttribute getDimension_Dx () {
        return (EAttribute) dimensionEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getDimension_Dy () {
        return (EAttribute) dimensionEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getInsets () {
        return insetsEClass;
    }

    public EAttribute getInsets_Top () {
        return (EAttribute) insetsEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getInsets_Left () {
        return (EAttribute) insetsEClass.getEStructuralFeatures ().get (1);
    }

    public EAttribute getInsets_Bottom () {
        return (EAttribute) insetsEClass.getEStructuralFeatures ().get (2);
    }

    public EAttribute getInsets_Right () {
        return (EAttribute) insetsEClass.getEStructuralFeatures ().get (3);
    }

    public EClass getBorder () {
        return borderEClass;
    }

    public EClass getBorderRef () {
        return borderRefEClass;
    }

    public EReference getBorderRef_Actual () {
        return (EReference) borderRefEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getLineBorder () {
        return lineBorderEClass;
    }

    public EReference getLineBorder_Color () {
        return (EReference) lineBorderEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getLineBorder_Width () {
        return (EAttribute) lineBorderEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getMarginBorder () {
        return marginBorderEClass;
    }

    public EReference getMarginBorder_Insets () {
        return (EReference) marginBorderEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getCompoundBorder () {
        return compoundBorderEClass;
    }

    public EReference getCompoundBorder_Outer () {
        return (EReference) compoundBorderEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getCompoundBorder_Inner () {
        return (EReference) compoundBorderEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getCustomBorder () {
        return customBorderEClass;
    }

    public EClass getLayoutData () {
        return layoutDataEClass;
    }

    public EReference getLayoutData_Owner () {
        return (EReference) layoutDataEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getCustomLayoutData () {
        return customLayoutDataEClass;
    }

    public EClass getGridLayoutData () {
        return gridLayoutDataEClass;
    }

    public EAttribute getGridLayoutData_GrabExcessHorizontalSpace () {
        return (EAttribute) gridLayoutDataEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getGridLayoutData_GrabExcessVerticalSpace () {
        return (EAttribute) gridLayoutDataEClass.getEStructuralFeatures ().get (1);
    }

    public EAttribute getGridLayoutData_VerticalAlignment () {
        return (EAttribute) gridLayoutDataEClass.getEStructuralFeatures ().get (2);
    }

    public EAttribute getGridLayoutData_HorizontalAlignment () {
        return (EAttribute) gridLayoutDataEClass.getEStructuralFeatures ().get (3);
    }

    public EAttribute getGridLayoutData_VerticalSpan () {
        return (EAttribute) gridLayoutDataEClass.getEStructuralFeatures ().get (4);
    }

    public EAttribute getGridLayoutData_HorizontalSpan () {
        return (EAttribute) gridLayoutDataEClass.getEStructuralFeatures ().get (5);
    }

    public EAttribute getGridLayoutData_HorizontalIndent () {
        return (EAttribute) gridLayoutDataEClass.getEStructuralFeatures ().get (6);
    }

    public EReference getGridLayoutData_SizeHint () {
        return (EReference) gridLayoutDataEClass.getEStructuralFeatures ().get (7);
    }

    public EClass getBorderLayoutData () {
        return borderLayoutDataEClass;
    }

    public EAttribute getBorderLayoutData_Alignment () {
        return (EAttribute) borderLayoutDataEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getBorderLayoutData_Vertical () {
        return (EAttribute) borderLayoutDataEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getLayoutable () {
        return layoutableEClass;
    }

    public EReference getLayoutable_LayoutData () {
        return (EReference) layoutableEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getLayoutable_Layout () {
        return (EReference) layoutableEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getLayout () {
        return layoutEClass;
    }

    public EClass getLayoutRef () {
        return layoutRefEClass;
    }

    public EReference getLayoutRef_Actual () {
        return (EReference) layoutRefEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getCustomLayout () {
        return customLayoutEClass;
    }

    public EClass getGridLayout () {
        return gridLayoutEClass;
    }

    public EAttribute getGridLayout_NumColumns () {
        return (EAttribute) gridLayoutEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getGridLayout_EqualWidth () {
        return (EAttribute) gridLayoutEClass.getEStructuralFeatures ().get (1);
    }

    public EReference getGridLayout_Margins () {
        return (EReference) gridLayoutEClass.getEStructuralFeatures ().get (2);
    }

    public EReference getGridLayout_Spacing () {
        return (EReference) gridLayoutEClass.getEStructuralFeatures ().get (3);
    }

    public EClass getBorderLayout () {
        return borderLayoutEClass;
    }

    public EReference getBorderLayout_Spacing () {
        return (EReference) borderLayoutEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getCustomAttribute () {
        return customAttributeEClass;
    }

    public EAttribute getCustomAttribute_Name () {
        return (EAttribute) customAttributeEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getCustomAttribute_Value () {
        return (EAttribute) customAttributeEClass.getEStructuralFeatures ().get (1);
    }

    public EAttribute getCustomAttribute_DirectAccess () {
        return (EAttribute) customAttributeEClass.getEStructuralFeatures ().get (2);
    }

    public EAttribute getCustomAttribute_MultiStatementValue () {
        return (EAttribute) customAttributeEClass.getEStructuralFeatures ().get (3);
    }

    public EClass getFigureAccessor () {
        return figureAccessorEClass;
    }

    public EAttribute getFigureAccessor_Accessor () {
        return (EAttribute) figureAccessorEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getFigureAccessor_TypedFigure () {
        return (EReference) figureAccessorEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getFlowLayout () {
        return flowLayoutEClass;
    }

    public EAttribute getFlowLayout_Vertical () {
        return (EAttribute) flowLayoutEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getFlowLayout_MatchMinorSize () {
        return (EAttribute) flowLayoutEClass.getEStructuralFeatures ().get (1);
    }

    public EAttribute getFlowLayout_ForceSingleLine () {
        return (EAttribute) flowLayoutEClass.getEStructuralFeatures ().get (2);
    }

    public EAttribute getFlowLayout_MajorAlignment () {
        return (EAttribute) flowLayoutEClass.getEStructuralFeatures ().get (3);
    }

    public EAttribute getFlowLayout_MinorAlignment () {
        return (EAttribute) flowLayoutEClass.getEStructuralFeatures ().get (4);
    }

    public EAttribute getFlowLayout_MajorSpacing () {
        return (EAttribute) flowLayoutEClass.getEStructuralFeatures ().get (5);
    }

    public EAttribute getFlowLayout_MinorSpacing () {
        return (EAttribute) flowLayoutEClass.getEStructuralFeatures ().get (6);
    }

    public EClass getXYLayout () {
        return xyLayoutEClass;
    }

    public EClass getXYLayoutData () {
        return xyLayoutDataEClass;
    }

    public EReference getXYLayoutData_TopLeft () {
        return (EReference) xyLayoutDataEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getXYLayoutData_Size () {
        return (EReference) xyLayoutDataEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getStackLayout () {
        return stackLayoutEClass;
    }

    public EClass getSVGFigure () {
        return svgFigureEClass;
    }

    public EAttribute getSVGFigure_DocumentURI () {
        return (EAttribute) svgFigureEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getSVGFigure_Properties () {
        return (EReference) svgFigureEClass.getEStructuralFeatures ().get (1);
    }

    public EReference getSVGFigure_AreaOfInterest () {
        return (EReference) svgFigureEClass.getEStructuralFeatures ().get (2);
    }

    public EClass getSVGProperty () {
        return svgPropertyEClass;
    }

    public EAttribute getSVGProperty_Query () {
        return (EAttribute) svgPropertyEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getSVGProperty_Attribute () {
        return (EAttribute) svgPropertyEClass.getEStructuralFeatures ().get (1);
    }

    public EAttribute getSVGProperty_Type () {
        return (EAttribute) svgPropertyEClass.getEStructuralFeatures ().get (2);
    }

    public EAttribute getSVGProperty_Getter () {
        return (EAttribute) svgPropertyEClass.getEStructuralFeatures ().get (3);
    }

    public EAttribute getSVGProperty_Setter () {
        return (EAttribute) svgPropertyEClass.getEStructuralFeatures ().get (4);
    }

    public EAttribute getSVGProperty_CallSuper () {
        return (EAttribute) svgPropertyEClass.getEStructuralFeatures ().get (5);
    }

    public EClass getRectangle2D () {
        return rectangle2DEClass;
    }

    public EAttribute getRectangle2D_X () {
        return (EAttribute) rectangle2DEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getRectangle2D_Y () {
        return (EAttribute) rectangle2DEClass.getEStructuralFeatures ().get (1);
    }

    public EAttribute getRectangle2D_Width () {
        return (EAttribute) rectangle2DEClass.getEStructuralFeatures ().get (2);
    }

    public EAttribute getRectangle2D_Height () {
        return (EAttribute) rectangle2DEClass.getEStructuralFeatures ().get (3);
    }

    public EEnum getColorConstants () {
        return colorConstantsEEnum;
    }

    public EEnum getDirection () {
        return directionEEnum;
    }

    public EEnum getLineKind () {
        return lineKindEEnum;
    }

    public EEnum getAlignment () {
        return alignmentEEnum;
    }

    public EEnum getSVGPropertyType () {
        return svgPropertyTypeEEnum;
    }

    public GMFGraphFactory getGMFGraphFactory () {
        return (GMFGraphFactory) getEFactoryInstance ();
    }

    private boolean isCreated = false;

    public void createPackageContents () {
        if (isCreated) return;

        isCreated = true;
        canvasEClass = createEClass (CANVAS);
        createEReference (canvasEClass, CANVAS__FIGURES);
        createEReference (canvasEClass, CANVAS__NODES);
        createEReference (canvasEClass, CANVAS__CONNECTIONS);
        createEReference (canvasEClass, CANVAS__COMPARTMENTS);
        createEReference (canvasEClass, CANVAS__LABELS);
        figureGalleryEClass = createEClass (FIGURE_GALLERY);
        createEReference (figureGalleryEClass, FIGURE_GALLERY__FIGURES);
        createEReference (figureGalleryEClass, FIGURE_GALLERY__DESCRIPTORS);
        createEReference (figureGalleryEClass, FIGURE_GALLERY__BORDERS);
        createEReference (figureGalleryEClass, FIGURE_GALLERY__LAYOUTS);
        createEAttribute (figureGalleryEClass, FIGURE_GALLERY__IMPLEMENTATION_BUNDLE);
        identityEClass = createEClass (IDENTITY);
        createEAttribute (identityEClass, IDENTITY__NAME);
        diagramElementEClass = createEClass (DIAGRAM_ELEMENT);
        createEReference (diagramElementEClass, DIAGRAM_ELEMENT__FIGURE);
        createEReference (diagramElementEClass, DIAGRAM_ELEMENT__FACETS);
        abstractNodeEClass = createEClass (ABSTRACT_NODE);
        nodeEClass = createEClass (NODE);
        createEAttribute (nodeEClass, NODE__RESIZE_CONSTRAINT);
        createEAttribute (nodeEClass, NODE__AFFIXED_PARENT_SIDE);
        createEReference (nodeEClass, NODE__CONTENT_PANE);
        connectionEClass = createEClass (CONNECTION);
        compartmentEClass = createEClass (COMPARTMENT);
        createEAttribute (compartmentEClass, COMPARTMENT__COLLAPSIBLE);
        createEAttribute (compartmentEClass, COMPARTMENT__NEEDS_TITLE);
        createEReference (compartmentEClass, COMPARTMENT__ACCESSOR);
        diagramLabelEClass = createEClass (DIAGRAM_LABEL);
        createEAttribute (diagramLabelEClass, DIAGRAM_LABEL__ELEMENT_ICON);
        createEReference (diagramLabelEClass, DIAGRAM_LABEL__ACCESSOR);
        createEReference (diagramLabelEClass, DIAGRAM_LABEL__CONTAINER);
        createEAttribute (diagramLabelEClass, DIAGRAM_LABEL__EXTERNAL);
        visualFacetEClass = createEClass (VISUAL_FACET);
        generalFacetEClass = createEClass (GENERAL_FACET);
        createEAttribute (generalFacetEClass, GENERAL_FACET__IDENTIFIER);
        createEAttribute (generalFacetEClass, GENERAL_FACET__DATA);
        alignmentFacetEClass = createEClass (ALIGNMENT_FACET);
        createEAttribute (alignmentFacetEClass, ALIGNMENT_FACET__ALIGNMENT);
        gradientFacetEClass = createEClass (GRADIENT_FACET);
        createEAttribute (gradientFacetEClass, GRADIENT_FACET__DIRECTION);
        labelOffsetFacetEClass = createEClass (LABEL_OFFSET_FACET);
        createEAttribute (labelOffsetFacetEClass, LABEL_OFFSET_FACET__X);
        createEAttribute (labelOffsetFacetEClass, LABEL_OFFSET_FACET__Y);
        defaultSizeFacetEClass = createEClass (DEFAULT_SIZE_FACET);
        createEReference (defaultSizeFacetEClass, DEFAULT_SIZE_FACET__DEFAULT_SIZE);
        figureEClass = createEClass (FIGURE);
        createEReference (figureEClass, FIGURE__DESCRIPTOR);
        createEReference (figureEClass, FIGURE__FOREGROUND_COLOR);
        createEReference (figureEClass, FIGURE__BACKGROUND_COLOR);
        createEReference (figureEClass, FIGURE__MAXIMUM_SIZE);
        createEReference (figureEClass, FIGURE__MINIMUM_SIZE);
        createEReference (figureEClass, FIGURE__PREFERRED_SIZE);
        createEReference (figureEClass, FIGURE__FONT);
        createEReference (figureEClass, FIGURE__INSETS);
        createEReference (figureEClass, FIGURE__BORDER);
        createEReference (figureEClass, FIGURE__LOCATION);
        createEReference (figureEClass, FIGURE__SIZE);
        abstractFigureEClass = createEClass (ABSTRACT_FIGURE);
        figureDescriptorEClass = createEClass (FIGURE_DESCRIPTOR);
        createEReference (figureDescriptorEClass, FIGURE_DESCRIPTOR__ACTUAL_FIGURE);
        createEReference (figureDescriptorEClass, FIGURE_DESCRIPTOR__ACCESSORS);
        childAccessEClass = createEClass (CHILD_ACCESS);
        createEReference (childAccessEClass, CHILD_ACCESS__OWNER);
        createEAttribute (childAccessEClass, CHILD_ACCESS__ACCESSOR);
        createEReference (childAccessEClass, CHILD_ACCESS__FIGURE);
        realFigureEClass = createEClass (REAL_FIGURE);
        createEAttribute (realFigureEClass, REAL_FIGURE__NAME);
        createEReference (realFigureEClass, REAL_FIGURE__CHILDREN);
        figureRefEClass = createEClass (FIGURE_REF);
        createEReference (figureRefEClass, FIGURE_REF__FIGURE);
        connectionFigureEClass = createEClass (CONNECTION_FIGURE);
        decorationFigureEClass = createEClass (DECORATION_FIGURE);
        shapeEClass = createEClass (SHAPE);
        createEAttribute (shapeEClass, SHAPE__OUTLINE);
        createEAttribute (shapeEClass, SHAPE__FILL);
        createEAttribute (shapeEClass, SHAPE__LINE_WIDTH);
        createEAttribute (shapeEClass, SHAPE__LINE_KIND);
        createEAttribute (shapeEClass, SHAPE__XOR_FILL);
        createEAttribute (shapeEClass, SHAPE__XOR_OUTLINE);
        createEReference (shapeEClass, SHAPE__RESOLVED_CHILDREN);
        labelEClass = createEClass (LABEL);
        createEAttribute (labelEClass, LABEL__TEXT);
        labeledContainerEClass = createEClass (LABELED_CONTAINER);
        rectangleEClass = createEClass (RECTANGLE);
        roundedRectangleEClass = createEClass (ROUNDED_RECTANGLE);
        createEAttribute (roundedRectangleEClass, ROUNDED_RECTANGLE__CORNER_WIDTH);
        createEAttribute (roundedRectangleEClass, ROUNDED_RECTANGLE__CORNER_HEIGHT);
        ellipseEClass = createEClass (ELLIPSE);
        polylineEClass = createEClass (POLYLINE);
        createEReference (polylineEClass, POLYLINE__TEMPLATE);
        polygonEClass = createEClass (POLYGON);
        scalablePolygonEClass = createEClass (SCALABLE_POLYGON);
        polylineConnectionEClass = createEClass (POLYLINE_CONNECTION);
        createEReference (polylineConnectionEClass, POLYLINE_CONNECTION__SOURCE_DECORATION);
        createEReference (polylineConnectionEClass, POLYLINE_CONNECTION__TARGET_DECORATION);
        polylineDecorationEClass = createEClass (POLYLINE_DECORATION);
        polygonDecorationEClass = createEClass (POLYGON_DECORATION);
        customClassEClass = createEClass (CUSTOM_CLASS);
        createEAttribute (customClassEClass, CUSTOM_CLASS__QUALIFIED_CLASS_NAME);
        createEReference (customClassEClass, CUSTOM_CLASS__ATTRIBUTES);
        customAttributeEClass = createEClass (CUSTOM_ATTRIBUTE);
        createEAttribute (customAttributeEClass, CUSTOM_ATTRIBUTE__NAME);
        createEAttribute (customAttributeEClass, CUSTOM_ATTRIBUTE__VALUE);
        createEAttribute (customAttributeEClass, CUSTOM_ATTRIBUTE__DIRECT_ACCESS);
        createEAttribute (customAttributeEClass, CUSTOM_ATTRIBUTE__MULTI_STATEMENT_VALUE);
        figureAccessorEClass = createEClass (FIGURE_ACCESSOR);
        createEAttribute (figureAccessorEClass, FIGURE_ACCESSOR__ACCESSOR);
        createEReference (figureAccessorEClass, FIGURE_ACCESSOR__TYPED_FIGURE);
        customFigureEClass = createEClass (CUSTOM_FIGURE);
        createEReference (customFigureEClass, CUSTOM_FIGURE__CUSTOM_CHILDREN);
        customDecorationEClass = createEClass (CUSTOM_DECORATION);
        customConnectionEClass = createEClass (CUSTOM_CONNECTION);
        colorEClass = createEClass (COLOR);
        rgbColorEClass = createEClass (RGB_COLOR);
        createEAttribute (rgbColorEClass, RGB_COLOR__RED);
        createEAttribute (rgbColorEClass, RGB_COLOR__GREEN);
        createEAttribute (rgbColorEClass, RGB_COLOR__BLUE);
        constantColorEClass = createEClass (CONSTANT_COLOR);
        createEAttribute (constantColorEClass, CONSTANT_COLOR__VALUE);
        fontEClass = createEClass (FONT);
        basicFontEClass = createEClass (BASIC_FONT);
        createEAttribute (basicFontEClass, BASIC_FONT__FACE_NAME);
        createEAttribute (basicFontEClass, BASIC_FONT__HEIGHT);
        createEAttribute (basicFontEClass, BASIC_FONT__STYLE);
        pointEClass = createEClass (POINT);
        createEAttribute (pointEClass, POINT__X);
        createEAttribute (pointEClass, POINT__Y);
        dimensionEClass = createEClass (DIMENSION);
        createEAttribute (dimensionEClass, DIMENSION__DX);
        createEAttribute (dimensionEClass, DIMENSION__DY);
        insetsEClass = createEClass (INSETS);
        createEAttribute (insetsEClass, INSETS__TOP);
        createEAttribute (insetsEClass, INSETS__LEFT);
        createEAttribute (insetsEClass, INSETS__BOTTOM);
        createEAttribute (insetsEClass, INSETS__RIGHT);
        borderEClass = createEClass (BORDER);
        borderRefEClass = createEClass (BORDER_REF);
        createEReference (borderRefEClass, BORDER_REF__ACTUAL);
        lineBorderEClass = createEClass (LINE_BORDER);
        createEReference (lineBorderEClass, LINE_BORDER__COLOR);
        createEAttribute (lineBorderEClass, LINE_BORDER__WIDTH);
        marginBorderEClass = createEClass (MARGIN_BORDER);
        createEReference (marginBorderEClass, MARGIN_BORDER__INSETS);
        compoundBorderEClass = createEClass (COMPOUND_BORDER);
        createEReference (compoundBorderEClass, COMPOUND_BORDER__OUTER);
        createEReference (compoundBorderEClass, COMPOUND_BORDER__INNER);
        customBorderEClass = createEClass (CUSTOM_BORDER);
        layoutDataEClass = createEClass (LAYOUT_DATA);
        createEReference (layoutDataEClass, LAYOUT_DATA__OWNER);
        customLayoutDataEClass = createEClass (CUSTOM_LAYOUT_DATA);
        gridLayoutDataEClass = createEClass (GRID_LAYOUT_DATA);
        createEAttribute (gridLayoutDataEClass, GRID_LAYOUT_DATA__GRAB_EXCESS_HORIZONTAL_SPACE);
        createEAttribute (gridLayoutDataEClass, GRID_LAYOUT_DATA__GRAB_EXCESS_VERTICAL_SPACE);
        createEAttribute (gridLayoutDataEClass, GRID_LAYOUT_DATA__VERTICAL_ALIGNMENT);
        createEAttribute (gridLayoutDataEClass, GRID_LAYOUT_DATA__HORIZONTAL_ALIGNMENT);
        createEAttribute (gridLayoutDataEClass, GRID_LAYOUT_DATA__VERTICAL_SPAN);
        createEAttribute (gridLayoutDataEClass, GRID_LAYOUT_DATA__HORIZONTAL_SPAN);
        createEAttribute (gridLayoutDataEClass, GRID_LAYOUT_DATA__HORIZONTAL_INDENT);
        createEReference (gridLayoutDataEClass, GRID_LAYOUT_DATA__SIZE_HINT);
        borderLayoutDataEClass = createEClass (BORDER_LAYOUT_DATA);
        createEAttribute (borderLayoutDataEClass, BORDER_LAYOUT_DATA__ALIGNMENT);
        createEAttribute (borderLayoutDataEClass, BORDER_LAYOUT_DATA__VERTICAL);
        layoutableEClass = createEClass (LAYOUTABLE);
        createEReference (layoutableEClass, LAYOUTABLE__LAYOUT_DATA);
        createEReference (layoutableEClass, LAYOUTABLE__LAYOUT);
        layoutEClass = createEClass (LAYOUT);
        layoutRefEClass = createEClass (LAYOUT_REF);
        createEReference (layoutRefEClass, LAYOUT_REF__ACTUAL);
        customLayoutEClass = createEClass (CUSTOM_LAYOUT);
        gridLayoutEClass = createEClass (GRID_LAYOUT);
        createEAttribute (gridLayoutEClass, GRID_LAYOUT__NUM_COLUMNS);
        createEAttribute (gridLayoutEClass, GRID_LAYOUT__EQUAL_WIDTH);
        createEReference (gridLayoutEClass, GRID_LAYOUT__MARGINS);
        createEReference (gridLayoutEClass, GRID_LAYOUT__SPACING);
        borderLayoutEClass = createEClass (BORDER_LAYOUT);
        createEReference (borderLayoutEClass, BORDER_LAYOUT__SPACING);
        flowLayoutEClass = createEClass (FLOW_LAYOUT);
        createEAttribute (flowLayoutEClass, FLOW_LAYOUT__VERTICAL);
        createEAttribute (flowLayoutEClass, FLOW_LAYOUT__MATCH_MINOR_SIZE);
        createEAttribute (flowLayoutEClass, FLOW_LAYOUT__FORCE_SINGLE_LINE);
        createEAttribute (flowLayoutEClass, FLOW_LAYOUT__MAJOR_ALIGNMENT);
        createEAttribute (flowLayoutEClass, FLOW_LAYOUT__MINOR_ALIGNMENT);
        createEAttribute (flowLayoutEClass, FLOW_LAYOUT__MAJOR_SPACING);
        createEAttribute (flowLayoutEClass, FLOW_LAYOUT__MINOR_SPACING);
        xyLayoutEClass = createEClass (XY_LAYOUT);
        xyLayoutDataEClass = createEClass (XY_LAYOUT_DATA);
        createEReference (xyLayoutDataEClass, XY_LAYOUT_DATA__TOP_LEFT);
        createEReference (xyLayoutDataEClass, XY_LAYOUT_DATA__SIZE);
        stackLayoutEClass = createEClass (STACK_LAYOUT);
        svgFigureEClass = createEClass (SVG_FIGURE);
        createEAttribute (svgFigureEClass, SVG_FIGURE__DOCUMENT_URI);
        createEReference (svgFigureEClass, SVG_FIGURE__PROPERTIES);
        createEReference (svgFigureEClass, SVG_FIGURE__AREA_OF_INTEREST);
        svgPropertyEClass = createEClass (SVG_PROPERTY);
        createEAttribute (svgPropertyEClass, SVG_PROPERTY__QUERY);
        createEAttribute (svgPropertyEClass, SVG_PROPERTY__ATTRIBUTE);
        createEAttribute (svgPropertyEClass, SVG_PROPERTY__TYPE);
        createEAttribute (svgPropertyEClass, SVG_PROPERTY__GETTER);
        createEAttribute (svgPropertyEClass, SVG_PROPERTY__SETTER);
        createEAttribute (svgPropertyEClass, SVG_PROPERTY__CALL_SUPER);
        rectangle2DEClass = createEClass (RECTANGLE2_D);
        createEAttribute (rectangle2DEClass, RECTANGLE2_D__X);
        createEAttribute (rectangle2DEClass, RECTANGLE2_D__Y);
        createEAttribute (rectangle2DEClass, RECTANGLE2_D__WIDTH);
        createEAttribute (rectangle2DEClass, RECTANGLE2_D__HEIGHT);
        colorConstantsEEnum = createEEnum (COLOR_CONSTANTS);
        fontStyleEEnum = createEEnum (FONT_STYLE);
        directionEEnum = createEEnum (DIRECTION);
        lineKindEEnum = createEEnum (LINE_KIND);
        alignmentEEnum = createEEnum (ALIGNMENT);
        svgPropertyTypeEEnum = createEEnum (SVG_PROPERTY_TYPE);
    }

    private boolean isInitialized = false;

    public void initializePackageContents () {
        if (isInitialized) return;

        isInitialized = true;
        setName (eNAME);
        setNsPrefix (eNS_PREFIX);
        setNsURI (eNS_URI);
        canvasEClass.getESuperTypes ().add (this.getIdentity ());
        figureGalleryEClass.getESuperTypes ().add (this.getIdentity ());
        diagramElementEClass.getESuperTypes ().add (this.getIdentity ());
        abstractNodeEClass.getESuperTypes ().add (this.getDiagramElement ());
        nodeEClass.getESuperTypes ().add (this.getAbstractNode ());
        connectionEClass.getESuperTypes ().add (this.getDiagramElement ());
        compartmentEClass.getESuperTypes ().add (this.getDiagramElement ());
        diagramLabelEClass.getESuperTypes ().add (this.getNode ());
        generalFacetEClass.getESuperTypes ().add (this.getVisualFacet ());
        alignmentFacetEClass.getESuperTypes ().add (this.getVisualFacet ());
        gradientFacetEClass.getESuperTypes ().add (this.getVisualFacet ());
        labelOffsetFacetEClass.getESuperTypes ().add (this.getVisualFacet ());
        defaultSizeFacetEClass.getESuperTypes ().add (this.getVisualFacet ());
        figureEClass.getESuperTypes ().add (this.getLayoutable ());
        abstractFigureEClass.getESuperTypes ().add (this.getFigure ());
        figureDescriptorEClass.getESuperTypes ().add (this.getIdentity ());
        realFigureEClass.getESuperTypes ().add (this.getAbstractFigure ());
        figureRefEClass.getESuperTypes ().add (this.getAbstractFigure ());
        connectionFigureEClass.getESuperTypes ().add (this.getRealFigure ());
        decorationFigureEClass.getESuperTypes ().add (this.getRealFigure ());
        shapeEClass.getESuperTypes ().add (this.getRealFigure ());
        labelEClass.getESuperTypes ().add (this.getRealFigure ());
        labeledContainerEClass.getESuperTypes ().add (this.getRealFigure ());
        rectangleEClass.getESuperTypes ().add (this.getShape ());
        roundedRectangleEClass.getESuperTypes ().add (this.getShape ());
        ellipseEClass.getESuperTypes ().add (this.getShape ());
        polylineEClass.getESuperTypes ().add (this.getShape ());
        polygonEClass.getESuperTypes ().add (this.getPolyline ());
        scalablePolygonEClass.getESuperTypes ().add (this.getPolygon ());
        polylineConnectionEClass.getESuperTypes ().add (this.getPolyline ());
        polylineConnectionEClass.getESuperTypes ().add (this.getConnectionFigure ());
        polylineDecorationEClass.getESuperTypes ().add (this.getPolyline ());
        polylineDecorationEClass.getESuperTypes ().add (this.getDecorationFigure ());
        polygonDecorationEClass.getESuperTypes ().add (this.getPolygon ());
        polygonDecorationEClass.getESuperTypes ().add (this.getDecorationFigure ());
        customFigureEClass.getESuperTypes ().add (this.getRealFigure ());
        customFigureEClass.getESuperTypes ().add (this.getCustomClass ());
        customDecorationEClass.getESuperTypes ().add (this.getCustomFigure ());
        customDecorationEClass.getESuperTypes ().add (this.getDecorationFigure ());
        customConnectionEClass.getESuperTypes ().add (this.getCustomFigure ());
        customConnectionEClass.getESuperTypes ().add (this.getConnectionFigure ());
        rgbColorEClass.getESuperTypes ().add (this.getColor ());
        constantColorEClass.getESuperTypes ().add (this.getColor ());
        basicFontEClass.getESuperTypes ().add (this.getFont ());
        borderRefEClass.getESuperTypes ().add (this.getBorder ());
        lineBorderEClass.getESuperTypes ().add (this.getBorder ());
        marginBorderEClass.getESuperTypes ().add (this.getBorder ());
        compoundBorderEClass.getESuperTypes ().add (this.getBorder ());
        customBorderEClass.getESuperTypes ().add (this.getBorder ());
        customBorderEClass.getESuperTypes ().add (this.getCustomClass ());
        customLayoutDataEClass.getESuperTypes ().add (this.getLayoutData ());
        customLayoutDataEClass.getESuperTypes ().add (this.getCustomClass ());
        gridLayoutDataEClass.getESuperTypes ().add (this.getLayoutData ());
        borderLayoutDataEClass.getESuperTypes ().add (this.getLayoutData ());
        layoutRefEClass.getESuperTypes ().add (this.getLayout ());
        customLayoutEClass.getESuperTypes ().add (this.getLayout ());
        customLayoutEClass.getESuperTypes ().add (this.getCustomClass ());
        gridLayoutEClass.getESuperTypes ().add (this.getLayout ());
        borderLayoutEClass.getESuperTypes ().add (this.getLayout ());
        flowLayoutEClass.getESuperTypes ().add (this.getLayout ());
        xyLayoutEClass.getESuperTypes ().add (this.getLayout ());
        xyLayoutDataEClass.getESuperTypes ().add (this.getLayoutData ());
        stackLayoutEClass.getESuperTypes ().add (this.getLayout ());
        svgFigureEClass.getESuperTypes ().add (this.getRealFigure ());
        initEClass (canvasEClass, Canvas.class, "Canvas", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getCanvas_Figures (), this.getFigureGallery (), null, "figures", null, 0, - 1, Canvas.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getCanvas_Nodes (), this.getNode (), null, "nodes", null, 0, - 1, Canvas.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getCanvas_Connections (), this.getConnection (), null, "connections", null, 0, - 1, Canvas.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getCanvas_Compartments (), this.getCompartment (), null, "compartments", null, 0, - 1, Canvas.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getCanvas_Labels (), this.getDiagramLabel (), null, "labels", null, 0, - 1, Canvas.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (figureGalleryEClass, FigureGallery.class, "FigureGallery", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getFigureGallery_Figures (), this.getRealFigure (), null, "figures", null, 0, - 1, FigureGallery.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigureGallery_Descriptors (), this.getFigureDescriptor (), null, "descriptors", null, 0, - 1, FigureGallery.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigureGallery_Borders (), this.getBorder (), null, "borders", null, 0, - 1, FigureGallery.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigureGallery_Layouts (), this.getLayout (), null, "layouts", null, 0, - 1, FigureGallery.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getFigureGallery_ImplementationBundle (), ecorePackage.getEString (), "implementationBundle", null, 0, 1, FigureGallery.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (identityEClass, Identity.class, "Identity", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getIdentity_Name (), ecorePackage.getEString (), "name", null, 1, 1, Identity.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (diagramElementEClass, DiagramElement.class, "DiagramElement", IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getDiagramElement_Figure (), this.getFigureDescriptor (), null, "figure", null, 1, 1, DiagramElement.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getDiagramElement_Facets (), this.getVisualFacet (), null, "facets", null, 0, - 1, DiagramElement.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (abstractNodeEClass, AbstractNode.class, "AbstractNode", IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (nodeEClass, Node.class, "Node", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getNode_ResizeConstraint (), this.getDirection (), "resizeConstraint", "NSEW", 0, 1, Node.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getNode_AffixedParentSide (), this.getDirection (), "affixedParentSide", "NONE", 0, 1, Node.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getNode_ContentPane (), this.getChildAccess (), null, "contentPane", null, 0, 1, Node.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (connectionEClass, Connection.class, "Connection", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (compartmentEClass, Compartment.class, "Compartment", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getCompartment_Collapsible (), ecorePackage.getEBoolean (), "collapsible", null, 0, 1, Compartment.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getCompartment_NeedsTitle (), ecorePackage.getEBoolean (), "needsTitle", null, 0, 1, Compartment.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getCompartment_Accessor (), this.getChildAccess (), null, "accessor", null, 0, 1, Compartment.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (diagramLabelEClass, DiagramLabel.class, "DiagramLabel", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getDiagramLabel_ElementIcon (), ecorePackage.getEBoolean (), "elementIcon", "true", 0, 1, DiagramLabel.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getDiagramLabel_Accessor (), this.getChildAccess (), null, "accessor", null, 0, 1, DiagramLabel.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getDiagramLabel_Container (), this.getChildAccess (), null, "container", null, 0, 1, DiagramLabel.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getDiagramLabel_External (), ecorePackage.getEBoolean (), "external", null, 0, 1, DiagramLabel.class, IS_TRANSIENT, IS_VOLATILE, ! IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, IS_DERIVED, IS_ORDERED);
        initEClass (visualFacetEClass, VisualFacet.class, "VisualFacet", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (generalFacetEClass, GeneralFacet.class, "GeneralFacet", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getGeneralFacet_Identifier (), ecorePackage.getEString (), "identifier", null, 0, 1, GeneralFacet.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getGeneralFacet_Data (), ecorePackage.getEString (), "data", null, 0, 1, GeneralFacet.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (alignmentFacetEClass, AlignmentFacet.class, "AlignmentFacet", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getAlignmentFacet_Alignment (), this.getAlignment (), "alignment", null, 0, 1, AlignmentFacet.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (gradientFacetEClass, GradientFacet.class, "GradientFacet", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getGradientFacet_Direction (), this.getDirection (), "direction", null, 0, 1, GradientFacet.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (labelOffsetFacetEClass, LabelOffsetFacet.class, "LabelOffsetFacet", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getLabelOffsetFacet_X (), ecorePackage.getEInt (), "x", null, 0, 1, LabelOffsetFacet.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getLabelOffsetFacet_Y (), ecorePackage.getEInt (), "y", null, 0, 1, LabelOffsetFacet.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (defaultSizeFacetEClass, DefaultSizeFacet.class, "DefaultSizeFacet", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getDefaultSizeFacet_DefaultSize (), this.getDimension (), null, "defaultSize", null, 0, 1, DefaultSizeFacet.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (figureEClass, Figure.class, "Figure", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getFigure_Descriptor (), this.getFigureDescriptor (), null, "descriptor", null, 0, 1, Figure.class, IS_TRANSIENT, IS_VOLATILE, ! IS_CHANGEABLE, ! IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_ForegroundColor (), this.getColor (), null, "foregroundColor", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_BackgroundColor (), this.getColor (), null, "backgroundColor", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_MaximumSize (), this.getDimension (), null, "maximumSize", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_MinimumSize (), this.getDimension (), null, "minimumSize", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_PreferredSize (), this.getDimension (), null, "preferredSize", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_Font (), this.getFont (), null, "font", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_Insets (), this.getInsets (), null, "insets", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_Border (), this.getBorder (), null, "border", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_Location (), this.getPoint (), null, "location", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_Size (), this.getPoint (), null, "size", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (abstractFigureEClass, AbstractFigure.class, "AbstractFigure", IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (figureDescriptorEClass, FigureDescriptor.class, "FigureDescriptor", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getFigureDescriptor_ActualFigure (), this.getFigure (), null, "actualFigure", null, 1, 1, FigureDescriptor.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigureDescriptor_Accessors (), this.getChildAccess (), this.getChildAccess_Owner (), "accessors", null, 0, - 1, FigureDescriptor.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (childAccessEClass, ChildAccess.class, "ChildAccess", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getChildAccess_Owner (), this.getFigureDescriptor (), this.getFigureDescriptor_Accessors (), "owner", null, 1, 1, ChildAccess.class, ! IS_TRANSIENT, ! IS_VOLATILE, ! IS_CHANGEABLE, ! IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getChildAccess_Accessor (), ecorePackage.getEString (), "accessor", null, 0, 1, ChildAccess.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getChildAccess_Figure (), this.getFigure (), null, "figure", null, 1, 1, ChildAccess.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (realFigureEClass, RealFigure.class, "RealFigure", IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getRealFigure_Name (), ecorePackage.getEString (), "name", null, 0, 1, RealFigure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getRealFigure_Children (), this.getFigure (), null, "children", null, 0, - 1, RealFigure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (figureRefEClass, FigureRef.class, "FigureRef", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getFigureRef_Figure (), this.getRealFigure (), null, "figure", null, 1, 1, FigureRef.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (connectionFigureEClass, ConnectionFigure.class, "ConnectionFigure", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (decorationFigureEClass, DecorationFigure.class, "DecorationFigure", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (shapeEClass, Shape.class, "Shape", IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getShape_Outline (), ecorePackage.getEBoolean (), "outline", "true", 0, 1, Shape.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getShape_Fill (), ecorePackage.getEBoolean (), "fill", "true", 0, 1, Shape.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getShape_LineWidth (), ecorePackage.getEInt (), "lineWidth", "1", 0, 1, Shape.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getShape_LineKind (), this.getLineKind (), "lineKind", null, 0, 1, Shape.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getShape_XorFill (), ecorePackage.getEBoolean (), "xorFill", null, 0, 1, Shape.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getShape_XorOutline (), ecorePackage.getEBoolean (), "xorOutline", null, 0, 1, Shape.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getShape_ResolvedChildren (), this.getFigure (), null, "resolvedChildren", null, 0, - 1, Shape.class, IS_TRANSIENT, IS_VOLATILE, ! IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, IS_DERIVED, IS_ORDERED);
        initEClass (labelEClass, Label.class, "Label", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getLabel_Text (), ecorePackage.getEString (), "text", null, 0, 1, Label.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (labeledContainerEClass, LabeledContainer.class, "LabeledContainer", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (rectangleEClass, Rectangle.class, "Rectangle", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (roundedRectangleEClass, RoundedRectangle.class, "RoundedRectangle", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getRoundedRectangle_CornerWidth (), ecorePackage.getEInt (), "cornerWidth", "8", 0, 1, RoundedRectangle.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getRoundedRectangle_CornerHeight (), ecorePackage.getEInt (), "cornerHeight", "8", 0, 1, RoundedRectangle.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (ellipseEClass, Ellipse.class, "Ellipse", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (polylineEClass, Polyline.class, "Polyline", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getPolyline_Template (), this.getPoint (), null, "template", null, 0, - 1, Polyline.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (polygonEClass, Polygon.class, "Polygon", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (scalablePolygonEClass, ScalablePolygon.class, "ScalablePolygon", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (polylineConnectionEClass, PolylineConnection.class, "PolylineConnection", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getPolylineConnection_SourceDecoration (), this.getDecorationFigure (), null, "sourceDecoration", null, 0, 1, PolylineConnection.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getPolylineConnection_TargetDecoration (), this.getDecorationFigure (), null, "targetDecoration", null, 0, 1, PolylineConnection.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (polylineDecorationEClass, PolylineDecoration.class, "PolylineDecoration", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (polygonDecorationEClass, PolygonDecoration.class, "PolygonDecoration", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (customClassEClass, CustomClass.class, "CustomClass", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getCustomClass_QualifiedClassName (), ecorePackage.getEString (), "qualifiedClassName", null, 0, 1, CustomClass.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getCustomClass_Attributes (), this.getCustomAttribute (), null, "attributes", null, 0, - 1, CustomClass.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (customAttributeEClass, CustomAttribute.class, "CustomAttribute", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getCustomAttribute_Name (), ecorePackage.getEString (), "name", null, 1, 1, CustomAttribute.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getCustomAttribute_Value (), ecorePackage.getEString (), "value", "null", 1, 1, CustomAttribute.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getCustomAttribute_DirectAccess (), ecorePackage.getEBoolean (), "directAccess", "false", 1, 1, CustomAttribute.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getCustomAttribute_MultiStatementValue (), ecorePackage.getEBoolean (), "multiStatementValue", "false", 1, 1, CustomAttribute.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (figureAccessorEClass, FigureAccessor.class, "FigureAccessor", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getFigureAccessor_Accessor (), ecorePackage.getEString (), "accessor", null, 1, 1, FigureAccessor.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigureAccessor_TypedFigure (), this.getRealFigure (), null, "typedFigure", null, 1, 1, FigureAccessor.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (customFigureEClass, CustomFigure.class, "CustomFigure", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getCustomFigure_CustomChildren (), this.getFigureAccessor (), null, "customChildren", null, 0, - 1, CustomFigure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (customDecorationEClass, CustomDecoration.class, "CustomDecoration", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (customConnectionEClass, CustomConnection.class, "CustomConnection", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (colorEClass, Color.class, "Color", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (rgbColorEClass, RGBColor.class, "RGBColor", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getRGBColor_Red (), ecorePackage.getEInt (), "red", null, 1, 1, RGBColor.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getRGBColor_Green (), ecorePackage.getEInt (), "green", null, 1, 1, RGBColor.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getRGBColor_Blue (), ecorePackage.getEInt (), "blue", null, 1, 1, RGBColor.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (constantColorEClass, ConstantColor.class, "ConstantColor", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getConstantColor_Value (), this.getColorConstants (), "value", null, 1, 1, ConstantColor.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (fontEClass, Font.class, "Font", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (basicFontEClass, BasicFont.class, "BasicFont", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getBasicFont_FaceName (), ecorePackage.getEString (), "faceName", null, 0, 1, BasicFont.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getBasicFont_Height (), ecorePackage.getEInt (), "height", "9", 0, 1, BasicFont.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getBasicFont_Style (), this.getFontStyle (), "style", "NORMAL", 0, 1, BasicFont.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (pointEClass, Point.class, "Point", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getPoint_X (), ecorePackage.getEInt (), "x", null, 0, 1, Point.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getPoint_Y (), ecorePackage.getEInt (), "y", null, 0, 1, Point.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (dimensionEClass, Dimension.class, "Dimension", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getDimension_Dx (), ecorePackage.getEInt (), "dx", null, 0, 1, Dimension.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getDimension_Dy (), ecorePackage.getEInt (), "dy", null, 0, 1, Dimension.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (insetsEClass, Insets.class, "Insets", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getInsets_Top (), ecorePackage.getEInt (), "top", null, 0, 1, Insets.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getInsets_Left (), ecorePackage.getEInt (), "left", null, 0, 1, Insets.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getInsets_Bottom (), ecorePackage.getEInt (), "bottom", null, 0, 1, Insets.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getInsets_Right (), ecorePackage.getEInt (), "right", null, 0, 1, Insets.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (borderEClass, Border.class, "Border", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (borderRefEClass, BorderRef.class, "BorderRef", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getBorderRef_Actual (), this.getBorder (), null, "actual", null, 1, 1, BorderRef.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (lineBorderEClass, LineBorder.class, "LineBorder", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getLineBorder_Color (), this.getColor (), null, "color", null, 0, 1, LineBorder.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getLineBorder_Width (), ecorePackage.getEInt (), "width", "1", 0, 1, LineBorder.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (marginBorderEClass, MarginBorder.class, "MarginBorder", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getMarginBorder_Insets (), this.getInsets (), null, "insets", null, 0, 1, MarginBorder.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (compoundBorderEClass, CompoundBorder.class, "CompoundBorder", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getCompoundBorder_Outer (), this.getBorder (), null, "outer", null, 0, 1, CompoundBorder.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getCompoundBorder_Inner (), this.getBorder (), null, "inner", null, 0, 1, CompoundBorder.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (customBorderEClass, CustomBorder.class, "CustomBorder", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (layoutDataEClass, LayoutData.class, "LayoutData", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getLayoutData_Owner (), this.getLayoutable (), this.getLayoutable_LayoutData (), "owner", null, 1, 1, LayoutData.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (customLayoutDataEClass, CustomLayoutData.class, "CustomLayoutData", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (gridLayoutDataEClass, GridLayoutData.class, "GridLayoutData", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getGridLayoutData_GrabExcessHorizontalSpace (), ecorePackage.getEBoolean (), "grabExcessHorizontalSpace", "false", 1, 1, GridLayoutData.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getGridLayoutData_GrabExcessVerticalSpace (), ecorePackage.getEBoolean (), "grabExcessVerticalSpace", "false", 1, 1, GridLayoutData.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getGridLayoutData_VerticalAlignment (), this.getAlignment (), "verticalAlignment", "CENTER", 1, 1, GridLayoutData.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getGridLayoutData_HorizontalAlignment (), this.getAlignment (), "horizontalAlignment", "CENTER", 1, 1, GridLayoutData.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getGridLayoutData_VerticalSpan (), ecorePackage.getEInt (), "verticalSpan", "1", 1, 1, GridLayoutData.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getGridLayoutData_HorizontalSpan (), ecorePackage.getEInt (), "horizontalSpan", "1", 1, 1, GridLayoutData.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getGridLayoutData_HorizontalIndent (), ecorePackage.getEInt (), "horizontalIndent", null, 1, 1, GridLayoutData.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getGridLayoutData_SizeHint (), this.getDimension (), null, "sizeHint", null, 0, 1, GridLayoutData.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (borderLayoutDataEClass, BorderLayoutData.class, "BorderLayoutData", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getBorderLayoutData_Alignment (), this.getAlignment (), "alignment", "CENTER", 1, 1, BorderLayoutData.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getBorderLayoutData_Vertical (), ecorePackage.getEBoolean (), "vertical", "false", 0, 1, BorderLayoutData.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (layoutableEClass, Layoutable.class, "Layoutable", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getLayoutable_LayoutData (), this.getLayoutData (), this.getLayoutData_Owner (), "layoutData", null, 0, 1, Layoutable.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getLayoutable_Layout (), this.getLayout (), null, "layout", null, 0, 1, Layoutable.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (layoutEClass, Layout.class, "Layout", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (layoutRefEClass, LayoutRef.class, "LayoutRef", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getLayoutRef_Actual (), this.getLayout (), null, "actual", null, 1, 1, LayoutRef.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (customLayoutEClass, CustomLayout.class, "CustomLayout", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (gridLayoutEClass, GridLayout.class, "GridLayout", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getGridLayout_NumColumns (), ecorePackage.getEInt (), "numColumns", "1", 1, 1, GridLayout.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getGridLayout_EqualWidth (), ecorePackage.getEBoolean (), "equalWidth", "true", 1, 1, GridLayout.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getGridLayout_Margins (), this.getDimension (), null, "margins", null, 0, 1, GridLayout.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getGridLayout_Spacing (), this.getDimension (), null, "spacing", null, 0, 1, GridLayout.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (borderLayoutEClass, BorderLayout.class, "BorderLayout", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getBorderLayout_Spacing (), this.getDimension (), null, "spacing", null, 0, 1, BorderLayout.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (flowLayoutEClass, FlowLayout.class, "FlowLayout", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getFlowLayout_Vertical (), ecorePackage.getEBoolean (), "vertical", "false", 0, 1, FlowLayout.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getFlowLayout_MatchMinorSize (), ecorePackage.getEBoolean (), "matchMinorSize", "false", 0, 1, FlowLayout.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getFlowLayout_ForceSingleLine (), ecorePackage.getEBoolean (), "forceSingleLine", "false", 0, 1, FlowLayout.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getFlowLayout_MajorAlignment (), this.getAlignment (), "majorAlignment", "BEGINNING", 0, 1, FlowLayout.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getFlowLayout_MinorAlignment (), this.getAlignment (), "minorAlignment", "BEGINNING", 0, 1, FlowLayout.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getFlowLayout_MajorSpacing (), ecorePackage.getEInt (), "majorSpacing", "5", 0, 1, FlowLayout.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getFlowLayout_MinorSpacing (), ecorePackage.getEInt (), "minorSpacing", "5", 0, 1, FlowLayout.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (xyLayoutEClass, XYLayout.class, "XYLayout", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (xyLayoutDataEClass, XYLayoutData.class, "XYLayoutData", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getXYLayoutData_TopLeft (), this.getPoint (), null, "topLeft", null, 1, 1, XYLayoutData.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getXYLayoutData_Size (), this.getDimension (), null, "size", null, 1, 1, XYLayoutData.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (stackLayoutEClass, StackLayout.class, "StackLayout", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (svgFigureEClass, SVGFigure.class, "SVGFigure", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getSVGFigure_DocumentURI (), ecorePackage.getEString (), "documentURI", null, 0, 1, SVGFigure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getSVGFigure_Properties (), this.getSVGProperty (), null, "properties", null, 0, - 1, SVGFigure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getSVGFigure_AreaOfInterest (), this.getRectangle2D (), null, "areaOfInterest", null, 0, 1, SVGFigure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (svgPropertyEClass, SVGProperty.class, "SVGProperty", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getSVGProperty_Query (), ecorePackage.getEString (), "query", null, 0, 1, SVGProperty.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getSVGProperty_Attribute (), ecorePackage.getEString (), "attribute", null, 0, 1, SVGProperty.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getSVGProperty_Type (), this.getSVGPropertyType (), "type", null, 0, 1, SVGProperty.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getSVGProperty_Getter (), ecorePackage.getEString (), "getter", null, 0, 1, SVGProperty.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getSVGProperty_Setter (), ecorePackage.getEString (), "setter", null, 0, 1, SVGProperty.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getSVGProperty_CallSuper (), ecorePackage.getEBoolean (), "callSuper", null, 0, 1, SVGProperty.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (rectangle2DEClass, Rectangle2D.class, "Rectangle2D", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getRectangle2D_X (), ecorePackage.getEFloat (), "x", null, 0, 1, Rectangle2D.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getRectangle2D_Y (), ecorePackage.getEFloat (), "y", null, 0, 1, Rectangle2D.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getRectangle2D_Width (), ecorePackage.getEFloat (), "width", null, 0, 1, Rectangle2D.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getRectangle2D_Height (), ecorePackage.getEFloat (), "height", null, 0, 1, Rectangle2D.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEEnum (colorConstantsEEnum, ColorConstants.class, "ColorConstants");
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.WHITE_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.BLACK_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.LIGHT_GRAY_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.GRAY_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.DARK_GRAY_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.RED_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.ORANGE_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.YELLOW_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.GREEN_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.LIGHT_GREEN_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.DARK_GREEN_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.CYAN_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.LIGHT_BLUE_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.BLUE_LITERAL);
        addEEnumLiteral (colorConstantsEEnum, ColorConstants.DARK_BLUE_LITERAL);
        initEEnum (fontStyleEEnum, FontStyle.class, "FontStyle");
        addEEnumLiteral (fontStyleEEnum, FontStyle.NORMAL_LITERAL);
        addEEnumLiteral (fontStyleEEnum, FontStyle.BOLD_LITERAL);
        addEEnumLiteral (fontStyleEEnum, FontStyle.ITALIC_LITERAL);
        initEEnum (directionEEnum, Direction.class, "Direction");
        addEEnumLiteral (directionEEnum, Direction.NONE_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.NORTH_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.SOUTH_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.WEST_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.EAST_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.NORTH_EAST_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.NORTH_WEST_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.SOUTH_EAST_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.SOUTH_WEST_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.NORTH_SOUTH_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.EAST_WEST_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.NSEW_LITERAL);
        initEEnum (lineKindEEnum, LineKind.class, "LineKind");
        addEEnumLiteral (lineKindEEnum, LineKind.LINE_SOLID_LITERAL);
        addEEnumLiteral (lineKindEEnum, LineKind.LINE_DASH_LITERAL);
        addEEnumLiteral (lineKindEEnum, LineKind.LINE_DOT_LITERAL);
        addEEnumLiteral (lineKindEEnum, LineKind.LINE_DASHDOT_LITERAL);
        addEEnumLiteral (lineKindEEnum, LineKind.LINE_DASHDOTDOT_LITERAL);
        addEEnumLiteral (lineKindEEnum, LineKind.LINE_CUSTOM_LITERAL);
        initEEnum (alignmentEEnum, Alignment.class, "Alignment");
        addEEnumLiteral (alignmentEEnum, Alignment.BEGINNING_LITERAL);
        addEEnumLiteral (alignmentEEnum, Alignment.CENTER_LITERAL);
        addEEnumLiteral (alignmentEEnum, Alignment.END_LITERAL);
        addEEnumLiteral (alignmentEEnum, Alignment.FILL_LITERAL);
        initEEnum (svgPropertyTypeEEnum, SVGPropertyType.class, "SVGPropertyType");
        addEEnumLiteral (svgPropertyTypeEEnum, SVGPropertyType.STRING);
        addEEnumLiteral (svgPropertyTypeEEnum, SVGPropertyType.COLOR);
        addEEnumLiteral (svgPropertyTypeEEnum, SVGPropertyType.FLOAT);
        createResource (eNS_URI);
    }

}

