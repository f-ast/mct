package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Iterator;

import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.BasicEList;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.FeatureLabelModelFacet;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenLabel;

import org.eclipse.gmf.codegen.gmfgen.LabelModelFacet;

public abstract class GenLabelImpl extends GenCommonBaseImpl implements GenLabel {
    protected static final boolean READ_ONLY_EDEFAULT = false;
    protected boolean readOnly = READ_ONLY_EDEFAULT;
    protected static final boolean ELEMENT_ICON_EDEFAULT = false;
    protected boolean elementIcon = ELEMENT_ICON_EDEFAULT;
    protected LabelModelFacet modelFacet = null;

    protected GenLabelImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenLabel ();
    }

    public boolean isReadOnly () {
        return readOnly;
    }

    public void setReadOnly (boolean newReadOnly) {
        boolean oldReadOnly = readOnly;
        readOnly = newReadOnly;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LABEL__READ_ONLY, oldReadOnly, readOnly));

    }

    public boolean isElementIcon () {
        return elementIcon;
    }

    public void setElementIcon (boolean newElementIcon) {
        boolean oldElementIcon = elementIcon;
        elementIcon = newElementIcon;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LABEL__ELEMENT_ICON, oldElementIcon, elementIcon));

    }

    public LabelModelFacet getModelFacet () {
        return modelFacet;
    }

    public NotificationChain basicSetModelFacet (LabelModelFacet newModelFacet, NotificationChain msgs) {
        LabelModelFacet oldModelFacet = modelFacet;
        modelFacet = newModelFacet;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LABEL__MODEL_FACET, oldModelFacet, newModelFacet);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setModelFacet (LabelModelFacet newModelFacet) {
        if (newModelFacet != modelFacet) {
            NotificationChain msgs = null;
            if (modelFacet != null) msgs = ((InternalEObject) modelFacet).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_LABEL__MODEL_FACET, null, msgs);

            if (newModelFacet != null) msgs = ((InternalEObject) newModelFacet).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_LABEL__MODEL_FACET, null, msgs);

            msgs = basicSetModelFacet (newModelFacet, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LABEL__MODEL_FACET, newModelFacet, newModelFacet));

    }

    public EList getMetaFeatures () {
        return getMetaFeatures (getModelFacet ());
    }

    public static EList getMetaFeatures (LabelModelFacet modelFacet) {
        EList metaFeatures = new BasicEList ();
        if (modelFacet instanceof FeatureLabelModelFacet) {
            metaFeatures.addAll (((FeatureLabelModelFacet) modelFacet).getMetaFeatures ());
        }
        return metaFeatures;
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_LABEL__MODEL_FACET :
                return basicSetModelFacet (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_LABEL__READ_ONLY :
                return isReadOnly () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_LABEL__ELEMENT_ICON :
                return isElementIcon () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_LABEL__MODEL_FACET :
                return getModelFacet ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_LABEL__READ_ONLY :
                setReadOnly (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_LABEL__ELEMENT_ICON :
                setElementIcon (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_LABEL__MODEL_FACET :
                setModelFacet ((LabelModelFacet) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_LABEL__READ_ONLY :
                setReadOnly (READ_ONLY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_LABEL__ELEMENT_ICON :
                setElementIcon (ELEMENT_ICON_EDEFAULT);
                return;
            case GMFGenPackage.GEN_LABEL__MODEL_FACET :
                setModelFacet ((LabelModelFacet) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_LABEL__READ_ONLY :
                return readOnly != READ_ONLY_EDEFAULT;
            case GMFGenPackage.GEN_LABEL__ELEMENT_ICON :
                return elementIcon != ELEMENT_ICON_EDEFAULT;
            case GMFGenPackage.GEN_LABEL__MODEL_FACET :
                return modelFacet != null;
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (readOnly: ");
        result.append (readOnly);
        result.append (", elementIcon: ");
        result.append (elementIcon);
        result.append (')');
        return result.toString ();
    }

    protected abstract String getHostName ();

    public String getClassNamePrefix () {
        StringBuffer sb = new StringBuffer ();
        for (Iterator it = getMetaFeatures ().iterator ();
        it.hasNext ();) {
            GenFeature metaFeature = (GenFeature) it.next ();
            sb.append (metaFeature.getCapName ());
        }
        return getHostName () + (sb.length () > 0 ? sb.toString () : CLASS_NAME_PREFIX);
    }

}

