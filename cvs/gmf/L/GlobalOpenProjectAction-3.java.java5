package org.eclipse.gmf.runtime.common.ui.action.ide.actions.global;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.ui.help.WorkbenchHelp;

import org.eclipse.gmf.runtime.common.ui.action.global.GlobalAction;

import org.eclipse.gmf.runtime.common.ui.action.ide.global.IDEGlobalActionId;

import org.eclipse.gmf.runtime.common.ui.action.ide.internal.IHelpContextIds;

import org.eclipse.gmf.runtime.common.ui.action.ide.internal.l10n.ResourceManager;

public class GlobalOpenProjectAction extends GlobalAction {

    public GlobalOpenProjectAction (IWorkbenchPage workbenchPage) {
        super (workbenchPage);
    }

    public GlobalOpenProjectAction (IWorkbenchPart workbenchPart) {
        super (workbenchPart);
    }

    public void init () {
        setId (getWorkbenchActionConstant () != null ? getWorkbenchActionConstant () : getActionId ());
        setText (ResourceManager.getI18NString ("GlobalOpenProjectAction.label"));
        WorkbenchHelp.setHelp (this, IHelpContextIds.PX_U_DEFAULT_CS_HELP);
        super.init ();
    }

    public String getActionId () {
        return IDEGlobalActionId.OPEN_PROJECT;
    }

    public String getWorkbenchActionConstant () {
        return null;
    }

    public void run () {
        if (isEnabled ()) {
            super.run ();
        }
    }

    protected void doRun (IProgressMonitor progressMonitor) {
        super.doRun (progressMonitor);
        refresh ();
        GlobalAction closeProjectAction = IDEGlobalActionManager.getInstance ().getGlobalAction (getWorkbenchPart (), IDEGlobalActionId.CLOSE_PROJECT);
        if (closeProjectAction != null) {
            closeProjectAction.refresh ();
        }
    }

    protected boolean isSelectionListener () {
        return true;
    }

}

