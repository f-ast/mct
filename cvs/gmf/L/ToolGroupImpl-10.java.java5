package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import java.util.Iterator;

import org.eclipse.emf.codegen.util.CodeGenUtil;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.Palette;

import org.eclipse.gmf.codegen.gmfgen.ToolGroup;

import org.eclipse.gmf.codegen.gmfgen.ToolGroupItem;

public class ToolGroupImpl extends EntryBaseImpl implements ToolGroup {
    protected static final boolean STACK_EDEFAULT = false;
    protected boolean stack = STACK_EDEFAULT;
    protected static final boolean COLLAPSE_EDEFAULT = false;
    protected boolean collapse = COLLAPSE_EDEFAULT;
    protected EList entries = null;
    protected static final boolean TOOLS_ONLY_EDEFAULT = false;

    protected ToolGroupImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getToolGroup ();
    }

    public ToolGroup getGroup () {
        if (eContainerFeatureID != GMFGenPackage.TOOL_GROUP__GROUP) return null;

        return (ToolGroup) eContainer ();
    }

    public Palette getPaletteGen () {
        if (eContainerFeatureID != GMFGenPackage.TOOL_GROUP__PALETTE) return null;

        return (Palette) eContainer ();
    }

    public Palette getPalette () {
        Palette p = getPaletteGen ();
        if (p != null) {
            return p;
        }
        return getGroup () == null ? null : getGroup ().getPalette ();
    }

    public EList getEntries () {
        if (entries == null) {
            entries = new EObjectContainmentWithInverseEList (ToolGroupItem.class, this, GMFGenPackage.TOOL_GROUP__ENTRIES, GMFGenPackage.TOOL_GROUP_ITEM__GROUP);
        }
        return entries;
    }

    public boolean isToolsOnly () {
        for (Iterator it = getEntries ().iterator ();
        it.hasNext ();) {
            if (it.next () instanceof ToolGroup) {
                return false;
            }
        }
        return true;
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.TOOL_GROUP__GROUP :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.TOOL_GROUP__GROUP, msgs);
            case GMFGenPackage.TOOL_GROUP__PALETTE :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
            case GMFGenPackage.TOOL_GROUP__ENTRIES :
                return ((InternalEList) getEntries ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public boolean isStack () {
        return stack;
    }

    public void setStack (boolean newStack) {
        boolean oldStack = stack;
        stack = newStack;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.TOOL_GROUP__STACK, oldStack, stack));

    }

    public boolean isCollapse () {
        return collapse;
    }

    public void setCollapse (boolean newCollapse) {
        boolean oldCollapse = collapse;
        collapse = newCollapse;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.TOOL_GROUP__COLLAPSE, oldCollapse, collapse));

    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.TOOL_GROUP__GROUP :
                return eBasicSetContainer (null, GMFGenPackage.TOOL_GROUP__GROUP, msgs);
            case GMFGenPackage.TOOL_GROUP__PALETTE :
                return eBasicSetContainer (null, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
            case GMFGenPackage.TOOL_GROUP__ENTRIES :
                return ((InternalEList) getEntries ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.TOOL_GROUP__GROUP :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.TOOL_GROUP__ENTRIES, ToolGroup.class, msgs);
            case GMFGenPackage.TOOL_GROUP__PALETTE :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.PALETTE__GROUPS, Palette.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.TOOL_GROUP__GROUP :
                return getGroup ();
            case GMFGenPackage.TOOL_GROUP__PALETTE :
                return getPalette ();
            case GMFGenPackage.TOOL_GROUP__STACK :
                return isStack () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.TOOL_GROUP__COLLAPSE :
                return isCollapse () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.TOOL_GROUP__ENTRIES :
                return getEntries ();
            case GMFGenPackage.TOOL_GROUP__TOOLS_ONLY :
                return isToolsOnly () ? Boolean.TRUE : Boolean.FALSE;
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.TOOL_GROUP__STACK :
                setStack (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.TOOL_GROUP__COLLAPSE :
                setCollapse (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.TOOL_GROUP__ENTRIES :
                getEntries ().clear ();
                getEntries ().addAll ((Collection) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TOOL_GROUP__STACK :
                setStack (STACK_EDEFAULT);
                return;
            case GMFGenPackage.TOOL_GROUP__COLLAPSE :
                setCollapse (COLLAPSE_EDEFAULT);
                return;
            case GMFGenPackage.TOOL_GROUP__ENTRIES :
                getEntries ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TOOL_GROUP__GROUP :
                return getGroup () != null;
            case GMFGenPackage.TOOL_GROUP__PALETTE :
                return getPalette () != null;
            case GMFGenPackage.TOOL_GROUP__STACK :
                return stack != STACK_EDEFAULT;
            case GMFGenPackage.TOOL_GROUP__COLLAPSE :
                return collapse != COLLAPSE_EDEFAULT;
            case GMFGenPackage.TOOL_GROUP__ENTRIES :
                return entries != null && ! entries.isEmpty ();
            case GMFGenPackage.TOOL_GROUP__TOOLS_ONLY :
                return isToolsOnly () != TOOLS_ONLY_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    public int eBaseStructuralFeatureID (int derivedFeatureID, Class baseClass) {
        if (baseClass == ToolGroupItem.class) {
            switch (derivedFeatureID) {
                case GMFGenPackage.TOOL_GROUP__GROUP :
                    return GMFGenPackage.TOOL_GROUP_ITEM__GROUP;
                default :
                    return - 1;
            }
        }
        return super.eBaseStructuralFeatureID (derivedFeatureID, baseClass);
    }

    public int eDerivedStructuralFeatureID (int baseFeatureID, Class baseClass) {
        if (baseClass == ToolGroupItem.class) {
            switch (baseFeatureID) {
                case GMFGenPackage.TOOL_GROUP_ITEM__GROUP :
                    return GMFGenPackage.TOOL_GROUP__GROUP;
                default :
                    return - 1;
            }
        }
        return super.eDerivedStructuralFeatureID (baseFeatureID, baseClass);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (stack: ");
        result.append (stack);
        result.append (", collapse: ");
        result.append (collapse);
        result.append (')');
        return result.toString ();
    }

    public String getCreateMethodName () {
        if (getCreateMethodNameGen () != null) {
            return getCreateMethodNameGen ();
        }
        return CodeGenUtil.validJavaIdentifier ("create" + CodeGenUtil.capName (String.valueOf (getTitle ())) + getEntryID () + "Group");
    }

}

