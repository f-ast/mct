package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.beans.PropertyChangeEvent;

import java.beans.PropertyChangeListener;

import java.util.ArrayList;

import java.util.Collections;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.draw2d.FigureListener;

import org.eclipse.draw2d.FreeformLayer;

import org.eclipse.draw2d.FreeformLayout;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.TreeSearch;

import org.eclipse.draw2d.Viewport;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.CompoundSnapToHelper;

import org.eclipse.gef.DragTracker;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.LayerConstants;

import org.eclipse.gef.Request;

import org.eclipse.gef.SnapToGeometry;

import org.eclipse.gef.SnapToGrid;

import org.eclipse.gef.SnapToHelper;

import org.eclipse.gef.editpolicies.RootComponentEditPolicy;

import org.eclipse.gef.editpolicies.SnapFeedbackPolicy;

import org.eclipse.gef.requests.SelectionRequest;

import org.eclipse.gef.rulers.RulerProvider;

import org.eclipse.gef.tools.DeselectAllTracker;

import org.eclipse.swt.widgets.Scrollable;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ContainerEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ContainerNodeEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DiagramActionBarEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DiagramDragDropEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ISurfaceEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.figures.PageBreaksFigure;

import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageInfoHelper;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;

import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.SnapToGuidesEx;

import org.eclipse.gmf.runtime.diagram.ui.internal.tools.RubberbandDragTracker;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;

import org.eclipse.gmf.runtime.draw2d.ui.figures.AnimatableLayoutListener;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.View;

public class DiagramEditPart extends GraphicalEditPart implements LayerConstants, ISurfaceEditPart {
    private boolean shouldUpdatePageBreakLocation = false;
    private boolean isSupportingViewActions = true;

    public DiagramEditPart (View diagramView) {
        super (diagramView);
    }

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy ());
        installEditPolicy (EditPolicy.CONTAINER_ROLE, new ContainerEditPolicy ());
        installEditPolicy (EditPolicy.COMPONENT_ROLE, new RootComponentEditPolicy ());
        installEditPolicy (EditPolicy.LAYOUT_ROLE, new XYLayoutEditPolicy ());
        installEditPolicy (EditPolicyRoles.DRAG_DROP_ROLE, new DiagramDragDropEditPolicy ());
        installEditPolicy (EditPolicy.GRAPHICAL_NODE_ROLE, new ContainerNodeEditPolicy ());
        installEditPolicy (EditPolicyRoles.SNAP_FEEDBACK_ROLE, new SnapFeedbackPolicy ());
        installEditPolicy (EditPolicyRoles.ACTIONBAR_ROLE, new DiagramActionBarEditPolicy ());
    }

    protected IFigure createFigure () {
        IFigure f = new FreeformLayer () {

            public boolean containsPoint (int x, int y) {
                return getBounds ().contains (x, y);
            }

            public IFigure findFigureAt (int x, int y, TreeSearch search) {
                if (! isEnabled ()) return null;

                if (! containsPoint (x, y)) return null;

                if (search.prune (this)) return null;

                IFigure child = findDescendantAtExcluding (x, y, search);
                if (child != null) return child;

                if (search.accept (this)) return this;

                return null;
            }

            public void validate () {
                super.validate ();
                if (shouldUpdatePageBreakLocation) {
                    shouldUpdatePageBreakLocation = false;
                    updatePageBreaksLocation ();
                }
            }

        }

        ;
        f.setLayoutManager (new FreeformLayout ());
        f.addLayoutListener (new AnimatableLayoutListener ());
        return f;
    }

    public Diagram getDiagramView () {
        return (Diagram) getModel ();
    }

    public DragTracker getDragTracker (Request req) {
        if (req instanceof SelectionRequest && ((SelectionRequest) req).getLastButtonPressed () == 3) return new DeselectAllTracker (this);

        return new RubberbandDragTracker ();
    }

    public IFigure getLayer (Object layer) {
        return super.getLayer (layer);
    }

    public Scrollable getScrollableControl () {
        return (Scrollable) getViewer ().getControl ();
    }

    public Viewport getViewport () {
        IFigure fig = getFigure ().getParent ();
        while (fig != null) {
            if (fig instanceof Viewport) return (Viewport) fig;

            fig = fig.getParent ();
        }
        return null;
    }

    protected IFigure getConnectionLayer () {
        return getLayer (LayerConstants.CONNECTION_LAYER);
    }

    public List getConnectors () {
        Iterator views = getDiagramView ().getEdges ().iterator ();
        Map registry = getViewer ().getEditPartRegistry ();
        List connectors = new ArrayList ();
        while (views.hasNext ()) {
            Object connectorEP = registry.get (views.next ());
            if (connectorEP != null) connectors.add (connectorEP);

        }
        return connectors;
    }

    public List getPrimaryEditParts () {
        List connectors = getConnectors ();
        List shapes = getChildren ();
        if (connectors.size () > 0 || shapes.size () > 0) {
            List myChildren = new ArrayList ();
            myChildren.addAll (shapes);
            myChildren.addAll (connectors);
            return myChildren;
        }
        return Collections.EMPTY_LIST;
    }

    public Map getAppearancePropertiesMap () {
        return Collections.EMPTY_MAP;
    }

    protected void addChildVisual (EditPart childEditPart, int index) {
        final IFigure child = ((GraphicalEditPart) childEditPart).getFigure ();
        getContentPane ().add (child, index);
        child.addFigureListener (new FigureListener () {

            public void figureMoved (IFigure source) {
                updatePageBreaksLocation ();
            }

        }

        );
        child.addPropertyChangeListener (new PropertyChangeListener () {

            public void propertyChange (PropertyChangeEvent evt) {
                String pName = evt.getPropertyName ();
                Object newValue = evt.getNewValue ();
                if (pName == "parent" && newValue == null) {
                    shouldUpdatePageBreakLocation = true;
                }
            }

        }

        );
    }

    protected void updatePageBreaksLocation () {
        if (getParent () == null || getRoot () == null) {
            return;
        }
        if (((DiagramRootEditPart) getRoot ()).getWorkspaceViewerPreferences () == null) return;

        ((DiagramRootEditPart) getRoot ()).getPageBreakEditPart ().resize (getChildrenBounds ());
        Rectangle r = ((DiagramRootEditPart) getRoot ()).getPageBreakEditPart ().getFigure ().getBounds ();
        ((DiagramGraphicalViewer) getViewer ()).getWorkspaceViewerPreferenceStore ().setValue (WorkspaceViewerProperties.PAGEBREAK_X, r.x);
        ((DiagramGraphicalViewer) getViewer ()).getWorkspaceViewerPreferenceStore ().setValue (WorkspaceViewerProperties.PAGEBREAK_Y, r.y);
    }

    public Rectangle getChildrenBounds () {
        return PageInfoHelper.getChildrenBounds (this, PageBreaksFigure.class);
    }

    public Object getAdapter (Class adapter) {
        if (adapter == SnapToHelper.class) {
            List snapStrategies = new ArrayList ();
            Boolean val = (Boolean) getViewer ().getProperty (RulerProvider.PROPERTY_RULER_VISIBILITY);
            if (val != null && val.booleanValue ()) snapStrategies.add (new SnapToGuidesEx (this));

            val = (Boolean) getViewer ().getProperty (SnapToGeometry.PROPERTY_SNAP_ENABLED);
            if (val != null && val.booleanValue ()) snapStrategies.add (new SnapToGrid (this));

            if (snapStrategies.size () == 0) return null;

            if (snapStrategies.size () == 1) return (SnapToHelper) snapStrategies.get (0);

            SnapToHelper ss [] = new SnapToHelper [snapStrategies.size ()];
            for (int i = 0;
            i < snapStrategies.size (); i ++) ss [i] = (SnapToHelper) snapStrategies.get (i);

            return new CompoundSnapToHelper (ss);
        }
        return super.getAdapter (adapter);
    }

    public List getChildrenAffectingZoom () {
        return new ArrayList (getChildren ());
    }

    public void refreshPageBreaks () {
        if (getRoot () == null) {
            return;
        }
        ((DiagramRootEditPart) getRoot ()).refreshPageBreaks ();
    }

    public boolean isSupportingViewActions () {
        return this.isSupportingViewActions;
    }

    public void setIsSupportingViewActions (boolean supportsViewActions) {
        this.isSupportingViewActions = supportsViewActions;
    }

    protected void refreshChildren () {
        super.refreshChildren ();
    }

}

