package org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document;

import java.util.Collection;

import java.util.HashMap;

import java.util.Map;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IResource;

import org.eclipse.core.resources.IStorage;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IPath;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.core.runtime.Status;

import org.eclipse.core.runtime.jobs.ISchedulingRule;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.emf.transaction.Transaction;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.emf.workspace.AbstractEMFOperation;

import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramModificationListener;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DocumentEvent;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocumentProvider;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.EditorIDEPlugin;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.DiagramIOUtil;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.ui.IEditorInput;

import org.eclipse.ui.IFileEditorInput;

public class FileDiagramDocumentProvider extends FileDocumentProvider implements IDiagramDocumentProvider {
    public class DiagramFileInfo extends FileInfo {
        DiagramModificationListener fListener;

        public DiagramFileInfo (IDocument document, FileSynchronizer fileSynchronizer, DiagramModificationListener listener) {
            super (document, fileSynchronizer);
            fListener = listener;
        }

        public void documentAboutToBeChanged (DocumentEvent event) {
            if (event.getEventKind () == DocumentEvent.CONTENT_REPLACED) {
                IDiagramDocument diagramDoc = ((IDiagramDocument) event.getDocument ());
                Diagram existingContent = diagramDoc.getDiagram ();
                URI existingURI = null;
                if (existingContent != null) {
                    existingURI = existingContent.eResource ().getURI ();
                    DiagramIOUtil.unload (diagramDoc.getEditingDomain (), existingContent);
                }
                Diagram newContent = (Diagram) event.getEventInfo ();
                if (newContent != null && existingURI != null) {
                    newContent.eResource ().setURI (existingURI);
                }
            }
            super.documentAboutToBeChanged (event);
        }

    }

    protected IDocument createEmptyDocument () {
        return new DiagramDocument ();
    }

    public IDiagramDocument getDiagramDocument (Object element) {
        IDocument doc = getDocument (element);
        if (doc instanceof IDiagramDocument) return (IDiagramDocument) doc;

        return null;
    }

    protected void disposeElementInfo (Object element, ElementInfo info) {
        super.disposeElementInfo (element, info);
        Object content = info.fDocument.getContent ();
        if (content instanceof Diagram && info.fDocument instanceof IDiagramDocument) {
            DiagramIOUtil.unload (((IDiagramDocument) info.fDocument).getEditingDomain (), (Diagram) content);
            assert info instanceof DiagramFileInfo;
        }
        if (((DiagramFileInfo) info).fListener != null) ((DiagramFileInfo) info).fListener.stopListening ();

    }

    protected void setDocumentContentFromStorage (IDocument document, IStorage storage) throws CoreException {
        Diagram diagram = (Diagram) document.getContent ();
        if (diagram != null) {
            Resource resource = diagram.eResource ();
            IFile resourceFile = WorkspaceSynchronizer.getFile (resource);
            if (resourceFile != null) {
                if (resourceFile.equals (storage)) {
                    document.setContent (null);
                } else {
                    throw new CoreException (new Status (IStatus.ERROR, EditorIDEPlugin.getPluginId (), EditorStatusCodes.ERROR, EditorMessages.FileDocumentProvider_handleElementContentChanged, null));
                }
            }
        }
        IDiagramDocument diagramDocument = (IDiagramDocument) document;
        TransactionalEditingDomain domain = diagramDocument.getEditingDomain ();
        diagram = DiagramIOUtil.load (domain, storage, true, getProgressMonitor ());
        document.setContent (diagram);
    }

    protected void saveDocumentToFile (IDocument document, IFile file, boolean overwrite, IProgressMonitor monitor) throws CoreException {
        Diagram diagram = (Diagram) document.getContent ();
        Resource resource = diagram.eResource ();
        IFile resourceFile = WorkspaceSynchronizer.getFile (resource);
        if (resourceFile != null && ! resourceFile.equals (file)) {
            diagram = copyDiagramResource (diagram, file);
        }
        IDiagramDocument diagramDocument = (IDiagramDocument) document;
        TransactionalEditingDomain domain = diagramDocument.getEditingDomain ();
        doSave (domain, file, diagram, null, monitor);
    }

    private Diagram copyDiagramResource (Diagram sourceDiagram, IFile file) {
        Resource sourceRes = sourceDiagram.eResource ();
        EList contents = sourceRes.getContents ();
        int indexOfDiagram = contents.indexOf (sourceDiagram);
        final Collection copiedContents = EcoreUtil.copyAll (contents);
        TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain (sourceDiagram);
        String fileName = file.getFullPath ().toString ();
        final Resource newResource = editingDomain.getResourceSet ().createResource (URI.createPlatformResourceURI (fileName, true));
        Map options = new HashMap ();
        options.put (Transaction.OPTION_UNPROTECTED, Boolean.TRUE);
        AbstractEMFOperation operation = new AbstractEMFOperation (editingDomain, StringStatics.BLANK, options) {

            protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
                newResource.getContents ().addAll (copiedContents);
                return Status.OK_STATUS;
            }

        }

        ;
        try {
            operation.execute (new NullProgressMonitor (), null);
        } catch (ExecutionException e) {
            Trace.catching (EditorIDEPlugin.getInstance (), EditorDebugOptions.EXCEPTIONS_CATCHING, getClass (), "createView", e);
            Log.warning (EditorIDEPlugin.getInstance (), EditorStatusCodes.RESOURCE_FAILURE, "createView", e);
        }
        return (Diagram) newResource.getContents ().get (indexOfDiagram);
    }

    protected void handleElementContentChanged (IFileEditorInput fileEditorInput) {
        FileInfo info = (FileInfo) getElementInfo (fileEditorInput);
        if (info == null && ! (info.fDocument instanceof IDiagramDocument)) return;

        assert fileEditorInput instanceof FileEditorInputProxy;
        IDiagramDocument diagramDoc = (IDiagramDocument) info.fDocument;
        Diagram existingContent = diagramDoc.getDiagram ();
        if (existingContent != null) DiagramIOUtil.unload (((FileEditorInputProxy) fileEditorInput).getEditingDomain (), existingContent);

        super.handleElementContentChanged (fileEditorInput);
    }

    protected FileInfo createFileInfo (IDocument document, FileSynchronizer synchronizer, IFileEditorInput input) {
        assert document instanceof DiagramDocument;
        DiagramModificationListener diagramListener = null;
        if (((DiagramDocument) document).getDiagram () != null) {
            diagramListener = new FileDiagramModificationListener (this, (DiagramDocument) document, input);
        }
        DiagramFileInfo info = new DiagramFileInfo (document, synchronizer, diagramListener);
        if (info.fListener != null) info.fListener.startListening ();

        return info;
    }

    protected boolean setDocumentContent (IDocument document, IEditorInput editorInput) throws CoreException {
        if (editorInput instanceof FileEditorInputProxy) {
            FileEditorInputProxy diagramElement = (FileEditorInputProxy) editorInput;
            ((IDiagramDocument) document).setEditingDomain (diagramElement.getEditingDomain ());
            boolean docContentSet = super.setDocumentContent (document, editorInput);
            return docContentSet;
        }
        return super.setDocumentContent (document, editorInput);
    }

    public IEditorInput createInputWithEditingDomain (IEditorInput editorInput, TransactionalEditingDomain domain) {
        if (editorInput instanceof IFileEditorInput) return new FileEditorInputProxy ((IFileEditorInput) editorInput, domain);

        return null;
    }

    protected void doSaveDocument (IProgressMonitor monitor, Object element, IDocument document, boolean overwrite) throws CoreException {
        if (element instanceof IFileEditorInput) {
            IFileEditorInput input = (IFileEditorInput) element;
            IFile file = input.getFile ();
            file.refreshLocal (IResource.DEPTH_ZERO, getProgressMonitor ());
        }
        super.doSaveDocument (monitor, element, document, overwrite);
    }

    protected ISchedulingRule getSaveRule (Object element) {
        if (element instanceof IFileEditorInput) {
            IFileEditorInput input = (IFileEditorInput) element;
            return computeSaveSchedulingRule (input.getFile ());
        }
        return null;
    }

    private ISchedulingRule computeSaveSchedulingRule (IResource toCreateOrModify) {
        if (toCreateOrModify.exists () && toCreateOrModify.isSynchronized (IResource.DEPTH_ZERO)) return fResourceRuleFactory.modifyRule (toCreateOrModify);

        IResource parent = toCreateOrModify;
        do {
            toCreateOrModify = parent;
            parent = toCreateOrModify.getParent ();
        } while (parent != null && ! parent.exists () && ! parent.isSynchronized (IResource.DEPTH_ZERO));
        return fResourceRuleFactory.createRule (toCreateOrModify);
    }

    protected void doSave (TransactionalEditingDomain domain, IFile file, Diagram diagram, Map options, IProgressMonitor monitor) throws CoreException {
        if (options == null) {
            DiagramIOUtil.save (domain, file, diagram, DiagramIOUtil.hasUnrecognizedData (diagram.eResource ()), monitor);
        } else {
            DiagramIOUtil.save (domain, file, diagram, monitor, options);
        }
    }

    protected void handleElementMoved (IFileEditorInput fileEditorInput, IPath path) {
        if (path != null) {
            IDiagramDocument diagramDocument = getDiagramDocument (fileEditorInput);
            Diagram diagram = null;
            if (diagramDocument != null) {
                diagram = diagramDocument.getDiagram ();
            }
            if (diagram != null) {
                diagram.eResource ().setURI (URI.createPlatformResourceURI (path.toString ()));
            }
        }
        super.handleElementMoved (fileEditorInput, path);
    }

}

