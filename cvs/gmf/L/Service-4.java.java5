package org.eclipse.gmf.runtime.common.core.service;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import java.util.WeakHashMap;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Platform;

import org.eclipse.gmf.runtime.common.core.internal.CommonCoreDebugOptions;

import org.eclipse.gmf.runtime.common.core.internal.CommonCorePlugin;

import org.eclipse.gmf.runtime.common.core.internal.CommonCoreStatusCodes;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

public abstract class Service extends AbstractProvider implements IProvider, IProviderChangeListener {
    public static class ProviderDescriptor extends AbstractProvider implements IProvider, IProviderChangeListener {
        protected static final String A_CLASS = "class";
        protected static final String A_PLUGIN = "plugin";
        protected static final String E_POLICY = "Policy";
        private final IConfigurationElement element;
        protected IProvider provider;
        protected IProviderPolicy policy;

        protected ProviderDescriptor (IConfigurationElement element) {
            super ();
            this.element = element;
        }

        protected final IConfigurationElement getElement () {
            return element;
        }

        public IProvider getProvider () {
            if (null == provider) {
                CommonCorePlugin corePlugin = CommonCorePlugin.getDefault ();
                try {
                    Log.info (corePlugin, CommonCoreStatusCodes.OK, "Activating provider '" + getElement ().getAttribute (A_CLASS) + "'...");
                    provider = (IProvider) getElement ().createExecutableExtension (A_CLASS);
                    provider.addProviderChangeListener (this);
                    Trace.trace (corePlugin, CommonCoreDebugOptions.SERVICES_ACTIVATE, "Provider '" + String.valueOf (provider) + "' activated.");
                } catch (CoreException ce) {
                    Trace.catching (corePlugin, CommonCoreDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getProvider", ce);
                    IStatus status = ce.getStatus ();
                    Log.log (corePlugin, status.getSeverity (), CommonCoreStatusCodes.SERVICE_FAILURE, status.getMessage (), status.getException ());
                }
            }
            return provider;
        }

        protected IProviderPolicy getPolicy () {
            if (null == policy) {
                IConfigurationElement [] elements = getElement ().getChildren (E_POLICY);
                working : {
                    if (elements.length == 0) break working;

                    String pluginId = elements [0].getAttribute (A_PLUGIN);
                    if (null == pluginId) break working;

                    if (null != Platform.getBundle (pluginId)) {
                        CommonCorePlugin corePlugin = CommonCorePlugin.getDefault ();
                        try {
                            Log.info (corePlugin, CommonCoreStatusCodes.OK, "Activating provider policy '" + elements [0].getAttribute (A_CLASS) + "'...");
                            policy = (IProviderPolicy) getElement ().createExecutableExtension (E_POLICY);
                            Trace.trace (corePlugin, CommonCoreDebugOptions.SERVICES_ACTIVATE, "Provider policy '" + String.valueOf (policy) + "' activated.");
                        } catch (CoreException ce) {
                            Trace.catching (corePlugin, CommonCoreDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getPolicy", ce);
                            IStatus status = ce.getStatus ();
                            Log.log (corePlugin, status.getSeverity (), CommonCoreStatusCodes.SERVICE_FAILURE, status.getMessage (), status.getException ());
                        }
                    }
                }}
            return policy;
        }

        public boolean provides (IOperation operation) {
            IProviderPolicy thePolicy = getPolicy ();
            if (null != thePolicy) return thePolicy.provides (operation);

            IProvider theProvider = getProvider ();
            return null != theProvider && theProvider.provides (operation);
        }

        public void providerChanged (ProviderChangeEvent event) {
            fireProviderChange (event);
        }

    }

    protected static final String INVALID_ELEMENT_MESSAGE_PATTERN = "Invalid XML element ({0}).";
    private static final String A_NAME = "name";
    private static final String E_PRIORITY = "Priority";
    private static final int cacheSize;

    static {
        List priorities = ProviderPriority.HIGHEST.getValues ();
        int maxOrdinal = 0;
        for (Iterator i = priorities.iterator ();
        i.hasNext ();) {
            int ordinal = ((ProviderPriority) i.next ()).getOrdinal ();
            if (maxOrdinal < ordinal) maxOrdinal = ordinal;

        }
        cacheSize = maxOrdinal + 1;
    }

    private final Map [] cache;
    private final Map providers = new HashMap ();
    private final boolean optimistic;

    protected Service () {
        this (false);
    }

    protected Service (boolean optimized) {
        this (optimized, true);
    }

    protected Service (boolean optimized, boolean optimistic) {
        super ();
        if (optimized) {
            cache = new Map [cacheSize];
            for (int ordinal = cacheSize;
            -- ordinal >= 0;) {
                cache [ordinal] = createPriorityCache ();
            }
        } else {
            cache = null;
        }
        this.optimistic = optimistic;
    }

    protected Map createPriorityCache () {
        return new WeakHashMap ();
    }

    protected Object getCachingKey (IOperation operation) {
        return operation;
    }

    protected final boolean isOptimized () {
        return null != cache;
    }

    protected final boolean isOptimistic () {
        return optimistic;
    }

    protected final void clearCache () {
        if (null != cache) {
            for (int ordinal = cacheSize;
            -- ordinal >= 0;) {
                cache [ordinal].clear ();
            }
        }
    }

    List getProviders (ProviderPriority priority) {
        List result = (List) providers.get (priority);
        if (null == result) {
            result = new ArrayList ();
            providers.put (priority, result);
        }
        return result;
    }

    protected final List getProviders (ExecutionStrategy strategy, ProviderPriority priority, IOperation operation) {
        assert null != priority : "getProviders received null priority as argument";
        assert null != operation : "getproviders received null operation as argument";
        List providerList;
        if (! isOptimized ()) {
            providerList = strategy.getUncachedProviders (this, priority, operation);
        } else {
            Map map = cache [priority.getOrdinal ()];
            providerList = (List) map.get (getCachingKey (operation));
            if (! isOptimistic () && null != providerList) {
                if (providerList.isEmpty ()) {
                    providerList = null;
                } else {
                    for (Iterator i = providerList.iterator ();
                    i.hasNext ();) {
                        IProvider provider = (IProvider) i.next ();
                        if (! provider.provides (operation)) {
                            providerList = null;
                            break;
                        }
                    }
                }
            }
            if (null == providerList) {
                providerList = strategy.getUncachedProviders (this, priority, operation);
                map.put (getCachingKey (operation), providerList);
            }
        }
        return providerList;
    }

    protected final List getAllProviders () {
        List allProviders = new ArrayList ();
        for (Iterator i = providers.values ().iterator ();
        i.hasNext ();) {
            allProviders.addAll ((List) i.next ());
        }
        return allProviders;
    }

    protected final void addProvider (ProviderPriority priority, ProviderDescriptor provider) {
        assert null != priority : "null ProviderPriority";
        assert null != provider : "null ProviderDescriptor";
        if (null != cache) {
            cache [priority.getOrdinal ()].clear ();
        }
        getProviders (priority).add (provider);
        provider.addProviderChangeListener (this);
    }

    protected final void removeProvider (ProviderDescriptor provider) {
        assert null != provider : "null provider";
        for (Iterator i = providers.values ().iterator ();
        i.hasNext ();) {
            if (((List) i.next ()).remove (provider)) {
                provider.removeProviderChangeListener (this);
                clearCache ();
                break;
            }
        }
    }

    protected final List execute (ExecutionStrategy strategy, IOperation operation) {
        assert null != strategy : "null strategy";
        assert null != operation : "null operation";
        List results = strategy.execute (this, operation);
        if (Trace.shouldTrace (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.SERVICES_EXECUTE)) {
            Trace.trace (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.SERVICES_EXECUTE, "Operation '" + String.valueOf (operation) + "' executed using strategy '" + String.valueOf (strategy) + "'.");
        }
        return results;
    }

    protected final Object executeUnique (ExecutionStrategy strategy, IOperation operation) {
        List results = execute (strategy, operation);
        return results.size () == 1 ? results.get (0) : null;
    }

    public final boolean provides (IOperation operation) {
        assert null != operation : "null operation passed to provides(IOperation)";
        for (Iterator list = providers.values ().iterator ();
        list.hasNext ();) {
            for (Iterator provider = ((List) list.next ()).iterator ();
            provider.hasNext ();) {
                if (((IProvider) provider.next ()).provides (operation)) {
                    return true;
                }
            }
        }
        return false;
    }

    protected final boolean provides (ExecutionStrategy strategy, IOperation operation) {
        assert null != strategy : "null strategy";
        assert null != operation : "null operation";
        for (int i = 0;
        i < ExecutionStrategy.PRIORITIES.length; i ++) {
            ProviderPriority priority = ExecutionStrategy.PRIORITIES [i];
            List providerList = getProviders (strategy, priority, operation);
            for (Iterator provider = providerList.iterator ();
            provider.hasNext ();) {
                if (((IProvider) provider.next ()).provides (operation)) {
                    return true;
                }
            }
        }
        return false;
    }

    public final void providerChanged (ProviderChangeEvent event) {
        assert null != event : "null event";
        event.setSource (this);
        fireProviderChange (event);
    }

    public final void configureProviders (IConfigurationElement [] elements) {
        assert null != elements : "null elements";
        for (int i = 0;
        i < elements.length; i ++) {
            addProvider (ProviderPriority.parse (getPriority (elements [i])), newProviderDescriptor (elements [i]));
            Trace.trace (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.SERVICES_CONFIG, "Provider configured from extension '" + String.valueOf (elements [i].getDeclaringExtension ()) + "'.");
        }
    }

    public String getPriority (IConfigurationElement element) {
        return element.getChildren (E_PRIORITY) [0].getAttribute (A_NAME);
    }

    protected ProviderDescriptor newProviderDescriptor (IConfigurationElement element) {
        return new ProviderDescriptor (element);
    }

}

