package org.eclipse.gmf.runtime.emf.core.clipboard;

import java.io.IOException;

import java.io.InputStream;

import java.util.Iterator;

import java.util.Map;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.emf.ecore.xmi.XMLHelper;

import org.eclipse.emf.ecore.xmi.XMLLoad;

import org.eclipse.emf.ecore.xmi.XMLResource;

import org.eclipse.emf.ecore.xmi.XMLSave;

import org.eclipse.emf.ecore.xmi.impl.XMIHelperImpl;

import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;

import org.eclipse.emf.ecore.xmi.impl.XMISaveImpl;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.emf.core.internal.plugin.EMFCoreDebugOptions;

import org.eclipse.gmf.runtime.emf.core.internal.plugin.EMFCorePlugin;

import org.eclipse.gmf.runtime.emf.core.internal.util.EMFCoreConstants;

import org.eclipse.gmf.runtime.emf.core.internal.util.Util;

import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;

public class CopyingResource extends XMIResourceImpl {
    private XMLResource xmlResource;
    private CopyingResourceSet copyingResourceSet;

    public CopyingResource (XMLResource resource, URI uri, CopyingResourceSet copyingResourceSet) {
        this (resource, uri, copyingResourceSet, true);
    }

    public CopyingResource (XMLResource resource, URI uri, CopyingResourceSet copyingResourceSet, boolean regenerateIds) {
        super (uri);
        this.xmlResource = resource;
        this.copyingResourceSet = copyingResourceSet;
        setEncoding (resource.getEncoding ());
        setLoaded (true);
        getDefaultSaveOptions ().putAll (resource.getDefaultSaveOptions ());
        copyingResourceSet.getResources ().add (this);
        copyingResourceSet.getResourcesMap ().put (resource, this);
        if (regenerateIds) {
            createNewIDs ();
        } else {
            copyIDs ();
        }
    }

    private void createNewIDs () {
        Iterator it = getXMLResource ().getAllContents ();
        while (it.hasNext ()) {
            setID ((EObject) it.next (), EcoreUtil.generateUUID ());
        }
    }

    protected XMLLoad createXMLLoad () {
        throwUnsupportedOperationException ("createXMLLoad", new UnsupportedOperationException ("Can't call load on CopyingResource resource"));
        return null;
    }

    protected XMLHelper createXMLHelper () {
        return new CopyingHelper (this);
    }

    protected void unloaded (InternalEObject internalEObject) {
    }

    public boolean eNotificationRequired () {
        return false;
    }

    private void throwUnsupportedOperationException (String methodName, UnsupportedOperationException ex) {
        Trace.throwing (EMFCorePlugin.getDefault (), EMFCoreDebugOptions.EXCEPTIONS_THROWING, getClass (), methodName, ex);
        throw ex;
    }

    private Map getResourcesMap () {
        return getMslCopyingResourceSet ().getResourcesMap ();
    }

    public void doLoad (InputStream inputStream, Map options) throws IOException {
        throwUnsupportedOperationException ("doLoad", new UnsupportedOperationException ("Can't call load on CopyingResource resource"));
    }

    protected XMLSave createXMLSave () {
        return new CopyingSave (createXMLHelper ());
    }

    private boolean isInResource (EObject eObject) {
        while (eObject != null) {
            if (((InternalEObject) eObject).eDirectResource () == getXMLResource ()) {
                return true;
            }
            eObject = eObject.eContainer ();
        }
        return false;
    }

    public EList getContents () {
        return getXMLResource ().getContents ();
    }

    protected void doUnload () {
    }

    public EObject getEObject (String uriFragment) {
        int index = uriFragment.indexOf ('?');
        if (- 1 != index) {
            uriFragment = uriFragment.substring (0, index);
        }
        return super.getEObject (uriFragment);
    }

    protected EObject getEObjectByID (String id) {
        EObject eObj = getXMLResource ().getEObject (id);
        if (eObj == null) {
            return super.getEObjectByID (id);
        }
        return eObj;
    }

    public CopyingResourceSet getMslCopyingResourceSet () {
        return copyingResourceSet;
    }

    public ResourceSet getResourceSet () {
        return getMslCopyingResourceSet ();
    }

    public void attached (EObject eObject) {
    }

    public void detached (EObject eObject) {
    }

    public Map getEObjectToExtensionMap () {
        return getXMLResource ().getEObjectToExtensionMap ();
    }

    public boolean isTrackingModification () {
        return false;
    }

    private void copyIDs () {
        XMLResource lastRes = null;
        for (Iterator iter = getXMLResource ().getAllContents ();
        iter.hasNext ();) {
            InternalEObject eObject = (InternalEObject) iter.next ();
            if (eObject.eDirectResource () != null) {
                lastRes = (XMLResource) eObject.eDirectResource ();
            }
            getEObjectToIDMap ().put (eObject, lastRes.getID (eObject));
            getIDToEObjectMap ().put (lastRes.getID (eObject), eObject);
        }
    }

    protected XMLResource getXMLResource () {
        return xmlResource;
    }

    protected class CopyingHelper extends XMIHelperImpl {

        public CopyingHelper () {
            super ();
        }

        public CopyingHelper (XMLResource resource) {
            super (resource);
        }

        public URI deresolve (URI anUri) {
            if (((EMFCoreConstants.PLATFORM_SCHEME.equals (anUri.scheme ())) && (EMFCoreConstants.PLATFORM_SCHEME.equals (resourceURI.scheme ()))) && ((anUri.segmentCount () > 2) && (resourceURI.segmentCount () > 2)) && ((! anUri.segments () [0].equals (resourceURI.segments () [0])) || (! anUri.segments () [1].equals (resourceURI.segments () [1])))) return anUri;

            return super.deresolve (anUri);
        }

        public String getHREF (EObject obj) {
            EObject eObj = obj;
            if (obj.eIsProxy ()) {
                eObj = EcoreUtil.resolve (obj, getXMLResource ());
                if (eObj == obj) {
                    eObj = null;
                }
            }
            if (eObj != null) {
                Resource resource = eObj.eResource ();
                if (resource != null) {
                    URI objectURI = getHREF (resource, eObj);
                    objectURI = deresolve (objectURI);
                    return objectURI.toString ();
                }
            }
            return super.getHREF (obj);
        }

        protected URI getHREF (Resource otherResource, EObject obj) {
            if (! (otherResource instanceof CopyingResource)) {
                CopyingResource copyingResource = (CopyingResource) getResourcesMap ().get (otherResource);
                if (copyingResource != null) {
                    otherResource = copyingResource;
                }
            }
            return super.getHREF (otherResource, obj);
        }

    };

    public class CopyingSave extends XMISaveImpl {

        public CopyingSave (XMLHelper helper) {
            super (helper);
        }

        public CopyingSave (Map options, XMLHelper helper, String encoding) {
            super (options, helper, encoding);
        }

        public CopyingSave (Map options, XMLHelper helper, String encoding, String xmlVersion) {
            super (options, helper, encoding, xmlVersion);
        }

        protected int sameDocMany (EObject o, EStructuralFeature f) {
            InternalEList values = (InternalEList) helper.getValue (o, f);
            if (values.isEmpty ()) {
                return SKIP;
            }
            for (Iterator i = values.basicIterator ();
            i.hasNext ();) {
                EObject value = (EObject) i.next ();
                if (value.eIsProxy () || (isInResource (value) == false)) {
                    return CROSS_DOC;
                }
            }
            return SAME_DOC;
        }

        protected int sameDocSingle (EObject o, EStructuralFeature f) {
            EObject value = (EObject) helper.getValue (o, f);
            if (value == null) {
                return SKIP;
            } else if (value.eIsProxy ()) {
                return CROSS_DOC;
            } else {
                return (isInResource (value)) ? SAME_DOC : CROSS_DOC;
            }

        }

    };

}

