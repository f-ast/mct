package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.codegen.util.CodeGenUtil;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.eclipse.emf.ecore.util.EcoreEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;

import org.eclipse.gmf.codegen.gmfgen.GenLink;

import org.eclipse.gmf.codegen.gmfgen.GenNode;

import org.eclipse.gmf.codegen.gmfgen.ToolEntry;

public class ToolEntryImpl extends AbstractToolEntryImpl implements ToolEntry {
    protected EList < GenNode > genNodes;
    protected EList < GenLink > genLinks;

    protected ToolEntryImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getToolEntry ();
    }

    public EList < GenNode > getGenNodes () {
        if (genNodes == null) {
            genNodes = new EObjectResolvingEList < GenNode > (GenNode.class, this, GMFGenPackage.TOOL_ENTRY__GEN_NODES);
        }
        return genNodes;
    }

    public EList < GenLink > getGenLinks () {
        if (genLinks == null) {
            genLinks = new EObjectResolvingEList < GenLink > (GenLink.class, this, GMFGenPackage.TOOL_ENTRY__GEN_LINKS);
        }
        return genLinks;
    }

    public EList < GenCommonBase > getElements () {
        EList < ? extends GenCommonBase > picked;
        if (getGenNodes ().isEmpty ()) {
            picked = getGenLinks ();
        } else {
            picked = getGenNodes ();
        }
        return new EcoreEList.UnmodifiableEList < GenCommonBase > (this, GMFGenPackage.eINSTANCE.getToolEntry_Elements (), picked.size (), picked.toArray ());
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.TOOL_ENTRY__GEN_NODES :
                return getGenNodes ();
            case GMFGenPackage.TOOL_ENTRY__GEN_LINKS :
                return getGenLinks ();
            case GMFGenPackage.TOOL_ENTRY__ELEMENTS :
                return getElements ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.TOOL_ENTRY__GEN_NODES :
                getGenNodes ().clear ();
                getGenNodes ().addAll ((Collection < ? extends GenNode >) newValue);
                return;
            case GMFGenPackage.TOOL_ENTRY__GEN_LINKS :
                getGenLinks ().clear ();
                getGenLinks ().addAll ((Collection < ? extends GenLink >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TOOL_ENTRY__GEN_NODES :
                getGenNodes ().clear ();
                return;
            case GMFGenPackage.TOOL_ENTRY__GEN_LINKS :
                getGenLinks ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TOOL_ENTRY__GEN_NODES :
                return genNodes != null && ! genNodes.isEmpty ();
            case GMFGenPackage.TOOL_ENTRY__GEN_LINKS :
                return genLinks != null && ! genLinks.isEmpty ();
            case GMFGenPackage.TOOL_ENTRY__ELEMENTS :
                return ! getElements ().isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    public String getCreateMethodName () {
        if (getCreateMethodNameGen () != null) {
            return getCreateMethodNameGen ();
        }
        return CodeGenUtil.validJavaIdentifier ("create" + CodeGenUtil.capName (String.valueOf (getTitle ())) + getEntryID () + "CreationTool");
    }

}

