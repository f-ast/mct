package org.eclipse.gmf.runtime.common.ui.services.dnd.drag;

import java.util.ArrayList;

import java.util.Enumeration;

import java.util.Hashtable;

import java.util.Iterator;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Status;

import org.eclipse.jface.dialogs.ErrorDialog;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.swt.dnd.DragSource;

import org.eclipse.swt.dnd.DragSourceEvent;

import org.eclipse.swt.dnd.DragSourceListener;

import org.eclipse.swt.dnd.Transfer;

import org.eclipse.swt.dnd.TransferData;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.services.dnd.core.DragDropListenerService;

import org.eclipse.gmf.runtime.common.ui.services.dnd.core.TransferAdapterService;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.CommonUIServicesDNDDebugOptions;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.CommonUIServicesDNDPlugin;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.CommonUIServicesDNDStatusCodes;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.core.DragListenerContext;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.core.IListenerContext;

import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.l10n.ResourceManager;

public final class DelegatingDragSourceAdapter implements DragSourceListener {
    private static final String ERROR_MSG = ResourceManager.getI18NString ("DelegatingDragSourceAdapter.errorMessage");
    private static final String ERROR_MSG_LOG = ResourceManager.getI18NString ("DelegatingDragSourceAdapter._ERROR_.errorMessage");
    private final Hashtable allAdapters;
    private ITransferDragSourceListener [] currentAdapters = null;
    private ITransferDragSourceListener chosenAdapter = null;
    private final DragSourceContext context;

    public DelegatingDragSourceAdapter (DragSourceContext aContext) {
        super ();
        assert null != aContext : "aContext cannot be null";
        this.context = aContext;
        allAdapters = getAllTransferAdapters ();
    }

    public void dragStart (DragSourceEvent event) {
        try {
            if (Trace.shouldTrace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND)) {
                Trace.trace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND, "dragStart entered");
            }
            boolean saveDoit = event.doit;
            Object saveData = event.data;
            setCurrentAdapters (null);
            setChosenAdapter (null);
            setCurrentAdapters (getAdapters (getListeners ()));
            boolean doIt = false;
            ArrayList listOfActiveAdapters = new ArrayList ();
            ArrayList listOfActiveTransferAgents = new ArrayList ();
            if (getCurrentAdapters () != null && getCurrentAdapters ().length > 0) {
                for (int i = 0;
                i < getCurrentAdapters ().length; i ++) {
                    event.doit = saveDoit;
                    getCurrentAdapters () [i].dragStart (event);
                    if (event.doit) {
                        listOfActiveAdapters.add (getCurrentAdapters () [i]);
                        listOfActiveTransferAgents.add (getCurrentAdapters () [i].getTransferAgent ().getTransfer ());
                    }
                    doIt = doIt || event.doit;
                }
                if (doIt) {
                    ((DragSource) event.widget).setTransfer ((Transfer []) listOfActiveTransferAgents.toArray (new Transfer [listOfActiveTransferAgents.size ()]));
                    setCurrentAdapters ((org.eclipse.gmf.runtime.common.ui.services.dnd.drag.ITransferDragSourceListener []) listOfActiveAdapters.toArray (new ITransferDragSourceListener [listOfActiveAdapters.size ()]));
                }
                if (Trace.shouldTrace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND)) {
                    String result = doIt ? "true" : "false";
                    Trace.trace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND, "DragStart::Event do it flag is " + result);
                    for (int i = 0;
                    i < getCurrentAdapters ().length; i ++) {
                        Trace.trace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND, "DragStart::Transfer Adapter is " + getCurrentAdapters () [i].getClass ().getName ());
                    }
                }
                event.data = saveData;
                event.doit = doIt;
            } else {
                getContext ().dragStart (event);
            }
        } catch (Throwable e) {
            event.doit = false;
            handle (e, false);
        }
    }

    public void dragSetData (DragSourceEvent event) {
        try {
            setChosenAdapter (getAdapter (event.dataType));
            if (Trace.shouldTrace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND)) {
                String adapterChosen = getChosenAdapter () != null ? getChosenAdapter ().getClass ().getName () : "No Adapter Chosen";
                Trace.trace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND, "DragSetData::Chosen Adapter is " + adapterChosen);
            }
            if (getChosenAdapter () != null) {
                getChosenAdapter ().dragSetData (event);
            } else {
                getContext ().dragSetData (event);
            }
        } catch (Throwable e) {
            event.data = null;
            handle (e, false);
        }
    }

    public void dragFinished (DragSourceEvent event) {
        try {
            if (Trace.shouldTrace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND)) {
                String adapterChosen = getChosenAdapter () != null ? getChosenAdapter ().getClass ().getName () : "No Adapter Chosen";
                Trace.trace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.DND, "DragFinished::Chosen Adapter is " + adapterChosen);
            }
            if (getChosenAdapter () != null) {
                getChosenAdapter ().dragFinished (event);
            } else {
                setChosenAdapter (getAdapter (event.dataType));
                if (getChosenAdapter () != null) {
                    getChosenAdapter ().dragFinished (event);
                } else {
                    getContext ().dragFinished (event);
                }
            }
        } catch (Throwable e) {
            handle (e, false);
        } finally {
            setChosenAdapter (null);
            setCurrentAdapters (null);
        }
    }

    private ITransferDragSourceListener [] getCurrentAdapters () {
        return currentAdapters;
    }

    private DragSourceContext getContext () {
        return context;
    }

    private IDragSourceListener [] getListeners () {
        ISelection selection = getContext ().getSelection ();
        if (selection == null || selection.isEmpty () || ! (selection instanceof IStructuredSelection)) {
            return null;
        }
        Object [] array = ((IStructuredSelection) selection).toArray ();
        ArrayList listOfElementTypes = new ArrayList ();
        for (int i = 0;
        i < array.length; i ++) {
            if (! listOfElementTypes.contains (array [i].getClass ())) {
                listOfElementTypes.add (array [i].getClass ());
            }
        }
        ArrayList listOfListeners = new ArrayList ();
        Iterator iterator = listOfElementTypes.iterator ();
        while (iterator.hasNext ()) {
            Class clazz = (Class) iterator.next ();
            DragListenerContext aContext = new DragListenerContext (getContext ().getActivePart (), clazz, IListenerContext.ALL_TRANSFERS, false);
            IDragSourceListener [] listeners = DragDropListenerService.getInstance ().getDragSourceListeners (aContext);
            if (listeners == null || listeners.length == 0) {
                aContext = new DragListenerContext (getContext ().getActivePart (), clazz, IListenerContext.ALL_TRANSFERS, true);
                listeners = DragDropListenerService.getInstance ().getDragSourceListeners (aContext);
            }
            if (listeners != null && listeners.length != 0) {
                for (int i = 0;
                i < listeners.length; i ++) {
                    if (! listOfListeners.contains (listeners [i])) {
                        listOfListeners.add (listeners [i]);
                    }
                }
            }
        }
        return ! listOfListeners.isEmpty () ? (IDragSourceListener []) listOfListeners.toArray (new IDragSourceListener [listOfListeners.size ()]) : null;
    }

    private ITransferDragSourceListener [] getAdapters (IDragSourceListener [] listeners) {
        if (listeners == null || listeners.length == 0) {
            return null;
        }
        Hashtable listOfUniqueTransferIds = new Hashtable ();
        for (int i = 0;
        i < listeners.length; i ++) {
            if (! listeners [i].isDraggable (getContext ())) {
                continue;
            }
            String [] transferIds = listeners [i].getSupportingTransferIds ();
            if (transferIds == null || transferIds.length == 0) {
                continue;
            }
            for (int y = 0;
            y < transferIds.length; y ++) {
                ArrayList listOfListeners = null;
                if (! listOfUniqueTransferIds.containsKey (transferIds [y])) {
                    listOfListeners = new ArrayList ();
                } else {
                    listOfListeners = (ArrayList) listOfUniqueTransferIds.get (transferIds [y]);
                }
                if (listOfListeners != null) {
                    listOfListeners.add (listeners [i]);
                    listOfUniqueTransferIds.put (transferIds [y], listOfListeners);
                }
            }
        }
        if (listOfUniqueTransferIds.isEmpty ()) {
            return null;
        }
        ArrayList listOfAdapters = new ArrayList ();
        Enumeration enumeration = listOfUniqueTransferIds.keys ();
        while (enumeration.hasMoreElements ()) {
            String transferId = (String) enumeration.nextElement ();
            ArrayList supportingListeners = (ArrayList) listOfUniqueTransferIds.get (transferId);
            ITransferDragSourceListener adapter = (ITransferDragSourceListener) getAllAdapters ().get (new Integer (transferId.hashCode ()));
            if (adapter != null) {
                adapter.init ((IDragSourceListener []) supportingListeners.toArray (new IDragSourceListener [supportingListeners.size ()]), getContext ());
                listOfAdapters.add (adapter);
            }
        }
        return ! listOfAdapters.isEmpty () ? (ITransferDragSourceListener []) listOfAdapters.toArray (new ITransferDragSourceListener [listOfAdapters.size ()]) : null;
    }

    private void setCurrentAdapters (ITransferDragSourceListener [] currentAdapterArray) {
        this.currentAdapters = currentAdapterArray;
    }

    private ITransferDragSourceListener getAdapter (TransferData type) {
        if (type != null) {
            for (int i = 0;
            i < getCurrentAdapters ().length; i ++) {
                if (getCurrentAdapters () [i].getTransferAgent ().getTransfer ().isSupportedType (type)) {
                    return getCurrentAdapters () [i];
                }
            }
        }
        return null;
    }

    private ITransferDragSourceListener getChosenAdapter () {
        return chosenAdapter;
    }

    private void setChosenAdapter (ITransferDragSourceListener aChosenAdapter) {
        this.chosenAdapter = aChosenAdapter;
    }

    private Hashtable getAllTransferAdapters () {
        Hashtable listOfSupportedAdapters = new Hashtable ();
        String [] transferIds = DragDropListenerService.getInstance ().getAllTransferIds (getContext ().getActivePart ().getSite ().getId (), IListenerContext.DRAG);
        if (transferIds == null || transferIds.length == 0) {
            return null;
        }
        for (int i = 0;
        i < transferIds.length; i ++) {
            ITransferDragSourceListener adapter = TransferAdapterService.getInstance ().getTransferDragSourceAdapter (transferIds [i]);
            if (adapter != null) {
                listOfSupportedAdapters.put (new Integer (transferIds [i].hashCode ()), adapter);
            }
        }
        return listOfSupportedAdapters;
    }

    private void handle (Throwable exception, boolean displayDialog) {
        if (Trace.shouldTrace (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.EXCEPTIONS_CATCHING)) {
            Trace.catching (CommonUIServicesDNDPlugin.getDefault (), CommonUIServicesDNDDebugOptions.EXCEPTIONS_CATCHING, getClass (), "handle", exception);
        }
        IStatus status = new Status (IStatus.ERROR, CommonUIServicesDNDPlugin.getPluginId (), CommonUIServicesDNDStatusCodes.DRAG_ACTION_FAILURE, ERROR_MSG_LOG, exception);
        Log.log (CommonUIServicesDNDPlugin.getDefault (), status);
        if (displayDialog) {
            status = new Status (IStatus.ERROR, CommonUIServicesDNDPlugin.getPluginId (), CommonUIServicesDNDStatusCodes.DRAG_ACTION_FAILURE, ERROR_MSG, exception);
            ErrorDialog.openError (getContext ().getActivePart ().getSite ().getShell (), null, null, status);
        }
    }

    private Hashtable getAllAdapters () {
        return allAdapters;
    }

}

