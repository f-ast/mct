package org.eclipse.gmf.runtime.diagram.ui.commands;

import java.util.Collection;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.commands.Command;

import org.eclipse.jface.util.Assert;

import org.eclipse.gmf.runtime.common.core.command.AbstractCommand;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack;

public class SemanticCreateCommand extends AbstractCommand {
    CreateElementRequestAdapter requestAdapter;
    private ICommand realSemanticCommand;

    public SemanticCreateCommand (CreateElementRequestAdapter requestAdapter, Command realSemanticCommand) {
        super (realSemanticCommand.getLabel ());
        Assert.isNotNull (requestAdapter);
        Assert.isNotNull (realSemanticCommand);
        this.requestAdapter = requestAdapter;
        this.realSemanticCommand = DiagramCommandStack.getICommand (realSemanticCommand);
    }

    protected CommandResult doExecute (IProgressMonitor progressMonitor) {
        realSemanticCommand.execute (progressMonitor);
        CommandResult result = realSemanticCommand.getCommandResult ();
        if (result.getStatus ().isOK ()) {
            Object object = result.getReturnValue ();
            if (object instanceof Collection) {
                Collection col = (Collection) object;
                if (! col.isEmpty ()) object = col.iterator ().next ();

            }
            if (object != null) {
                Assert.isTrue (object instanceof EObject, "Failed to get an IElement out of the semantic command returned value");
                EObject element = (EObject) object;
                requestAdapter.setNewElement (element);
            }
            return newOKCommandResult (requestAdapter);
        }
        return result;
    }

    protected CommandResult doRedo () {
        realSemanticCommand.redo ();
        return realSemanticCommand.getCommandResult ();
    }

    protected CommandResult doUndo () {
        realSemanticCommand.undo ();
        return realSemanticCommand.getCommandResult ();
    }

    public boolean isExecutable () {
        return realSemanticCommand.isExecutable ();
    }

    public boolean isUndoable () {
        return realSemanticCommand.isUndoable ();
    }

    public boolean isRedoable () {
        return realSemanticCommand.isUndoable ();
    }

    public Collection getAffectedObjects () {
        return realSemanticCommand.getAffectedObjects ();
    }

}

