package org.eclipse.gmf.runtime.draw2d.ui.internal.routers;

import org.eclipse.draw2d.Connection;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.PointList;

import org.eclipse.draw2d.geometry.Ray;

import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.AnimationFigureHelper;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;

public class FanRouter extends org.eclipse.draw2d.FanRouter {
    static final int SEPARATION = 15;

    public void route (Connection conn) {
        if (! AnimationFigureHelper.getInstance ().layoutManagerHook (conn)) routeBendpoints (conn);

    }

    private void routeBendpoints (Connection conn) {
        if (! isFeedback (conn)) setSeparation (MapMode.DPtoLP (SEPARATION));
        else setSeparation (SEPARATION);

        super.route (conn);
    }

    private boolean isFeedback (Connection conn) {
        Dimension dim = new Dimension (100, 100);
        Dimension dimCheck = dim.getCopy ();
        conn.translateToRelative (dimCheck);
        return dim.equals (dimCheck);
    }

    protected void handleCollision (PointList points, int index) {
        if (points.size () == 2 && points.getFirstPoint ().equals (points.getLastPoint ())) {
            return;
        }
        Point start = points.getFirstPoint ();
        Point end = points.getLastPoint ();
        if (start.equals (end)) return;

        Point midPoint = new Point ((end.x + start.x) / 2, (end.y + start.y) / 2);
        int position = end.getPosition (start);
        Ray ray;
        if (position == PositionConstants.SOUTH || position == PositionConstants.EAST) ray = new Ray (start, end);
        else ray = new Ray (end, start);

        double length = Math.sqrt (((double) ray.x * (double) ray.x) + ((double) ray.y * (double) ray.y));
        double xSeparation = getSeparation () * ray.x / length;
        double ySeparation = getSeparation () * ray.y / length;
        Point bendPoint;
        if (index % 2 == 0) {
            bendPoint = new Point (midPoint.x + (index / 2) * (- 1 * ySeparation), midPoint.y + (index / 2) * xSeparation);
        } else {
            bendPoint = new Point (midPoint.x + (index / 2) * ySeparation, midPoint.y + (index / 2) * (- 1 * xSeparation));
        }
        if (! bendPoint.equals (midPoint)) points.insertPoint (bendPoint, 1);

    }

}

