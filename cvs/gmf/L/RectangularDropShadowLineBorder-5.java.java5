package org.eclipse.gmf.runtime.draw2d.ui.figures;

import org.eclipse.draw2d.Graphics;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.geometry.Insets;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.LineBorderEx;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

public class RectangularDropShadowLineBorder extends LineBorderEx implements DropShadowBorder {
    private boolean drawDropShadow = true;
    private static RectangularDropShadow dropShadow = new RectangularDropShadow ();

    public RectangularDropShadowLineBorder (int w) {
        super (w);
    }

    public RectangularDropShadowLineBorder () {
        super ();
    }

    protected int getShadowWidth () {
        if (shouldDrawDropShadow () == true) {
            return getDropShadow ().getShadowWidth ();
        }
        return 0;
    }

    protected int getShadowHeight () {
        if (shouldDrawDropShadow () == true) {
            return getDropShadow ().getShadowHeight ();
        }
        return 0;
    }

    public Insets getInsets (IFigure figure) {
        Insets insetsNew = super.getInsets (figure);
        insetsNew.top = 0;
        insetsNew.left = 0;
        insetsNew.bottom = MapModeUtil.getMapMode (figure).DPtoLP (insetsNew.bottom + getShadowHeight ());
        insetsNew.right = MapModeUtil.getMapMode (figure).DPtoLP (insetsNew.right + getShadowWidth ());
        return insetsNew;
    }

    protected boolean shouldDrawShadow (IFigure figure) {
        if (shouldDrawDropShadow () == false) return false;

        Rectangle rBox = figure.getBounds ();
        if (rBox.width < getShadowWidth () * 2 || rBox.height < getShadowHeight () * 2) {
            return false;
        }
        return true;
    }

    public Insets getTransparentInsets (IFigure figure) {
        Insets insetsNew = new Insets ();
        insetsNew.top = 0;
        insetsNew.left = 0;
        insetsNew.bottom = MapModeUtil.getMapMode (figure).DPtoLP (getShadowHeight ());
        insetsNew.right = MapModeUtil.getMapMode (figure).DPtoLP (getShadowWidth ());
        return insetsNew;
    }

    public boolean isOpaque () {
        return false;
    }

    public void paintLineBorder (IFigure figure, Graphics g, Insets insets) {
        if (getWidth () > 0) {
            tempRect.setBounds (getPaintRectangle (figure, insets));
            g.drawRectangle (tempRect);
        }
    }

    public void paintDropShadowBorder (IFigure figure, Graphics g, Insets insets, Rectangle rBox) {
        getDropShadow ().drawShadow (figure, g, rBox);
        IMapMode mm = MapModeUtil.getMapMode (figure);
        if (getWidth () > 0) {
            tempRect.setBounds (getPaintRectangle (figure, insets));
            tempRect.width -= mm.DPtoLP (getShadowWidth ());
            tempRect.height -= mm.DPtoLP (getShadowHeight ());
            if (getWidth () % 2 == 1) {
                tempRect.width -= mm.DPtoLP (1);
                tempRect.height -= mm.DPtoLP (1);
            }
            tempRect.shrink (mm.DPtoLP (getWidth () / 2), mm.DPtoLP (getWidth () / 2));
            g.setLineWidth (getWidth ());
            if (getColor () != null) {
                g.setForegroundColor (getColor ());
            } else {
                g.setForegroundColor (figure.getForegroundColor ());
            }
            g.drawRectangle (tempRect);
        }
    }

    public void paint (IFigure figure, Graphics g, Insets insets) {
        Rectangle rBox = new Rectangle (figure.getBounds ());
        if (shouldDrawShadow (figure)) {
            paintDropShadowBorder (figure, g, insets, rBox);
        } else {
            paintLineBorder (figure, g, insets);
        }
    }

    public boolean shouldDrawDropShadow () {
        return this.drawDropShadow;
    }

    public void setShouldDrawDropShadow (boolean bDrawDropShadow) {
        this.drawDropShadow = bDrawDropShadow;
    }

    protected RectangularDropShadow getDropShadow () {
        return dropShadow;
    }

}

