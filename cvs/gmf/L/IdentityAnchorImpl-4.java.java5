package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.runtime.notation.IdentityAnchor;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class IdentityAnchorImpl extends EObjectImpl implements IdentityAnchor {
    protected static final String ID_EDEFAULT = "anchor";
    protected String id = ID_EDEFAULT;

    protected IdentityAnchorImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.IDENTITY_ANCHOR;
    }

    public String getId () {
        return id;
    }

    public void setId (String newId) {
        String oldId = id;
        id = newId;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.IDENTITY_ANCHOR__ID, oldId, id));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.IDENTITY_ANCHOR__ID :
                return getId ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.IDENTITY_ANCHOR__ID :
                setId ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.IDENTITY_ANCHOR__ID :
                setId (ID_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.IDENTITY_ANCHOR__ID :
                return ID_EDEFAULT == null ? id != null : ! ID_EDEFAULT.equals (id);
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (id: ");
        result.append (id);
        result.append (')');
        return result.toString ();
    }

}

