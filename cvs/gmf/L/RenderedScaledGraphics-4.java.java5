package org.eclipse.gmf.runtime.draw2d.ui.render.internal.graphics;

import org.eclipse.draw2d.Graphics;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderHelper;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderingListener;

public class RenderedScaledGraphics extends org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScaledGraphics implements DrawableRenderedImage {
    boolean allowDelayRender = false;
    Dimension maximumRenderSize = null;

    public boolean shouldAllowDelayRender () {
        return allowDelayRender;
    }

    public RenderedScaledGraphics (Graphics g) {
        this (g, false, null);
    }

    public RenderedScaledGraphics (Graphics g, boolean allowDelayRender, Dimension maximumRenderSize) {
        super (g);
        this.allowDelayRender = allowDelayRender;
        this.maximumRenderSize = maximumRenderSize;
    }

    private double scale = 1.0;

    public void scale (double amount) {
        scale = amount;
        super.scale (amount);
    }

    public RenderedImage drawRenderedImage (RenderedImage srcImage, Rectangle rect, RenderingListener listener) {
        return RenderHelper.getInstance (scale, true, shouldAllowDelayRender (), getMaximumRenderSize ()).drawRenderedImage (getGraphics (), srcImage, rect, listener);
    }

    public Dimension getMaximumRenderSize () {
        return maximumRenderSize;
    }

}

