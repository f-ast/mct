package org.eclipse.gmf.mappings.util;

import java.util.List;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.mappings.*;

import org.eclipse.gmf.mappings.CanvasMapping;

import org.eclipse.gmf.mappings.ChildNodeMapping;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.LinkMapping;

import org.eclipse.gmf.mappings.Mapping;

import org.eclipse.gmf.mappings.MappingEntry;

import org.eclipse.gmf.mappings.NodeMapping;

public class GMFMapSwitch {
    protected static GMFMapPackage modelPackage;

    public GMFMapSwitch () {
        if (modelPackage == null) {
            modelPackage = GMFMapPackage.eINSTANCE;
        }
    }

    public Object doSwitch (EObject theEObject) {
        return doSwitch (theEObject.eClass (), theEObject);
    }

    protected Object doSwitch (EClass theEClass, EObject theEObject) {
        if (theEClass.eContainer () == modelPackage) {
            return doSwitch (theEClass.getClassifierID (), theEObject);
        } else {
            List eSuperTypes = theEClass.getESuperTypes ();
            return eSuperTypes.isEmpty () ? defaultCase (theEObject) : doSwitch ((EClass) eSuperTypes.get (0), theEObject);
        }
    }

    protected Object doSwitch (int classifierID, EObject theEObject) {
        switch (classifierID) {
            case GMFMapPackage.MAPPING_ENTRY :
                {
                    MappingEntry mappingEntry = (MappingEntry) theEObject;
                    Object result = caseMappingEntry (mappingEntry);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.NODE_MAPPING :
                {
                    NodeMapping nodeMapping = (NodeMapping) theEObject;
                    Object result = caseNodeMapping (nodeMapping);
                    if (result == null) result = caseMappingEntry (nodeMapping);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.CHILD_NODE_MAPPING :
                {
                    ChildNodeMapping childNodeMapping = (ChildNodeMapping) theEObject;
                    Object result = caseChildNodeMapping (childNodeMapping);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.LINK_MAPPING :
                {
                    LinkMapping linkMapping = (LinkMapping) theEObject;
                    Object result = caseLinkMapping (linkMapping);
                    if (result == null) result = caseMappingEntry (linkMapping);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.CANVAS_MAPPING :
                {
                    CanvasMapping canvasMapping = (CanvasMapping) theEObject;
                    Object result = caseCanvasMapping (canvasMapping);
                    if (result == null) result = caseMappingEntry (canvasMapping);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.MAPPING :
                {
                    Mapping mapping = (Mapping) theEObject;
                    Object result = caseMapping (mapping);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.CONSTRAINT :
                {
                    Constraint constraint = (Constraint) theEObject;
                    Object result = caseConstraint (constraint);
                    if (result == null) result = caseValueExpression (constraint);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.VALUE_EXPRESSION :
                {
                    ValueExpression valueExpression = (ValueExpression) theEObject;
                    Object result = caseValueExpression (valueExpression);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } default :
                return defaultCase (theEObject);
        }
    }

    public Object caseMappingEntry (MappingEntry object) {
        return null;
    }

    public Object caseNodeMapping (NodeMapping object) {
        return null;
    }

    public Object caseChildNodeMapping (ChildNodeMapping object) {
        return null;
    }

    public Object caseLinkMapping (LinkMapping object) {
        return null;
    }

    public Object caseCanvasMapping (CanvasMapping object) {
        return null;
    }

    public Object caseMapping (Mapping object) {
        return null;
    }

    public Object caseConstraint (Constraint object) {
        return null;
    }

    public Object caseValueExpression (ValueExpression object) {
        return null;
    }

    public Object defaultCase (EObject object) {
        return null;
    }

}

