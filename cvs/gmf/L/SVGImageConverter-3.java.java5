package org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg;

import java.awt.Color;

import java.awt.image.BufferedImage;

import java.io.ByteArrayInputStream;

import java.io.FileInputStream;

import java.io.InputStream;

import org.apache.batik.transcoder.Transcoder;

import org.apache.batik.transcoder.TranscoderInput;

import org.apache.batik.transcoder.TranscoderOutput;

import org.apache.batik.transcoder.image.ImageTranscoder;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;

import org.eclipse.swt.graphics.Image;

import org.w3c.dom.Document;

class SVGImageConverter {

    public SVGImageConverter () {
    }

    public BufferedImage renderSVGToAWTImage (Document document, RenderInfo info) throws Exception {
        ImageTranscoderEx transcoder = new ImageTranscoderEx ();
        setUpTranscoders (document, transcoder, info);
        return transcoder.getBufferedImage ();
    }

    public Image renderSVGtoSWTImage (Document document, RenderInfo info) throws Exception {
        SWTImageTranscoder transcoder = new SWTImageTranscoder ();
        setUpTranscoders (document, transcoder, info);
        return transcoder.getSWTImage ();
    }

    public BufferedImage renderSVGToAWTImage (String strFileName, RenderInfo info) throws Exception {
        InputStream in = new FileInputStream (strFileName);
        return renderSVGToAWTImage (in, info);
    }

    public BufferedImage renderSVGToAWTImage (byte [] buffer, RenderInfo info) throws Exception {
        InputStream in = new ByteArrayInputStream (buffer);
        return renderSVGToAWTImage (in, info);
    }

    private void setUpTranscoders (InputStream in, Transcoder transcoder, RenderInfo info) throws Exception {
        initializeTranscoderFromInfo (transcoder, info);
        TranscoderInput input = null;
        TranscoderOutput output = null;
        input = new TranscoderInput (in);
        output = new ImageTranscoderOutput ();
        transcoder.transcode (input, output);
    }

    private void setUpTranscoders (Document document, Transcoder transcoder, RenderInfo info) throws Exception {
        initializeTranscoderFromInfo (transcoder, info);
        TranscoderInput input = null;
        TranscoderOutput output = null;
        input = new TranscoderInput (document);
        output = new ImageTranscoderOutput ();
        transcoder.transcode (input, output);
    }

    private void initializeTranscoderFromInfo (Transcoder transcoder, RenderInfo info) {
        if (info.getWidth () > 0) transcoder.addTranscodingHint (ImageTranscoder.KEY_WIDTH, new Float (info.getWidth ()));

        if (info.getHeight () > 0) transcoder.addTranscodingHint (ImageTranscoder.KEY_HEIGHT, new Float (info.getHeight ()));

        transcoder.addTranscodingHint (ImageTranscoderEx.KEY_MAINTAIN_ASPECT_RATIO, Boolean.valueOf (info.shouldMaintainAspectRatio ()));
        transcoder.addTranscodingHint (ImageTranscoderEx.KEY_ANTI_ALIASING, Boolean.valueOf (info.shouldAntiAlias ()));
        if (info.getBackgroundColor () != null) {
            transcoder.addTranscodingHint (ImageTranscoderEx.KEY_FILL_COLOR, new Color (info.getBackgroundColor ().red, info.getBackgroundColor ().green, info.getBackgroundColor ().blue));
        }
        if (info.getForegroundColor () != null) {
            transcoder.addTranscodingHint (ImageTranscoderEx.KEY_OUTLINE_COLOR, new Color (info.getForegroundColor ().red, info.getForegroundColor ().green, info.getForegroundColor ().blue));
        }
    }

    public BufferedImage renderSVGToAWTImage (InputStream in, RenderInfo info) throws Exception {
        ImageTranscoderEx transcoder = new ImageTranscoderEx ();
        setUpTranscoders (in, transcoder, info);
        return transcoder.getBufferedImage ();
    }

    public Image renderSVGtoSWTImage (String strFileName, RenderInfo info) throws Exception {
        InputStream in = new FileInputStream (strFileName);
        return renderSVGtoSWTImage (in, info);
    }

    public Image renderSVGtoSWTImage (byte [] buffer, RenderInfo info) throws Exception {
        InputStream in = new ByteArrayInputStream (buffer);
        return renderSVGtoSWTImage (in, info);
    }

    public Image renderSVGtoSWTImage (InputStream in, RenderInfo info) throws Exception {
        SWTImageTranscoder transcoder = new SWTImageTranscoder ();
        setUpTranscoders (in, transcoder, info);
        return transcoder.getSWTImage ();
    }

}

