package org.eclipse.gmf.runtime.common.ui.services.action.contributionitem;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.core.runtime.Platform;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.service.IProvider;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionPlugin;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.ContributeToActionBarsOperation;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.ContributeToPopupMenuOperation;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.DisposeContributionsOperation;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.IContributionDescriptorReader;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.IContributionItemProvider;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.ProviderContributionDescriptor;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.UpdateActionBarsOperation;

import org.eclipse.gmf.runtime.common.ui.services.util.ActivityFilterProviderDescriptor;

import org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor;

import org.eclipse.gmf.runtime.common.ui.util.WorkbenchPartDescriptor;

import org.eclipse.jface.action.IMenuManager;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.ui.IActionBars;

import org.eclipse.ui.IPluginContribution;

import org.eclipse.ui.IWorkbenchPart;

import org.osgi.framework.Bundle;

public class ContributionItemService extends Service implements IContributionItemProvider {
    protected static class ProviderDescriptor extends ActivityFilterProviderDescriptor {
        private static final String CHECK_PLUGIN_LOADED = "checkPluginLoaded";
        private ProviderContributionDescriptor contributionDescriptor;
        private boolean checkPluginLoaded = true;

        public ProviderDescriptor (IConfigurationElement element) {
            super (element);
            String s = element.getAttribute (CHECK_PLUGIN_LOADED);
            if (s != null) this.checkPluginLoaded = Boolean.valueOf (s).booleanValue ();

            this.contributionDescriptor = ProviderContributionDescriptor.parse (element);
            assert null != contributionDescriptor : "contributionDescriptor cannot be null";
        }

        public boolean provides (IOperation operation) {
            if (! super.provides (operation)) {
                return false;
            }
            if (checkPluginLoaded && ! isPluginLoaded ()) {
                return false;
            }
            if (! contributionDescriptor.hasContributions ()) {
                if (! policyInitialized) {
                    policyInitialized = true;
                    policy = getPolicy ();
                }
                if (policy != null) {
                    return getPolicy ().provides (operation);
                }
                if (getProvider () != null) {
                    return getProvider ().provides (operation);
                }
            }
            if (operation instanceof ContributeToActionBarsOperation) {
                ContributeToActionBarsOperation op = (ContributeToActionBarsOperation) operation;
                return contributionDescriptor.hasContributionsFor (op.getWorkbenchPartDescriptor ().getPartId (), op.getWorkbenchPartDescriptor ().getPartClass ());
            } else if (operation instanceof ContributeToPopupMenuOperation) {
                ContributeToPopupMenuOperation op = (ContributeToPopupMenuOperation) operation;
                ISelection selection = op.getWorkbenchPart ().getSite ().getSelectionProvider ().getSelection ();
                return contributionDescriptor.hasContributionsFor (op.getPopupMenu (), selection);
            } else if (operation instanceof DisposeContributionsOperation) {
                if (provider != null) return provider.provides (operation);

            }

            return false;
        }

        public IProvider getProvider () {
            if (provider == null) {
                IProvider newProvider = super.getProvider ();
                if (provider instanceof IContributionDescriptorReader) {
                    IContributionDescriptorReader reader = (IContributionDescriptorReader) newProvider;
                    reader.setContributionDescriptor (contributionDescriptor);
                }
                if (provider instanceof AbstractContributionItemProvider) {
                    ((AbstractContributionItemProvider) provider).setPluginContribution (new IPluginContribution () {

                        public String getLocalId () {
                            return getElement ().getDeclaringExtension ().getSimpleIdentifier ();
                        }

                        public String getPluginId () {
                            return getElement ().getContributor ().getName ();
                        }

                    }

                    );
                }
                return newProvider;
            }
            return super.getProvider ();
        }

        private boolean isPluginLoaded () {
            String pluginId = getElement ().getDeclaringExtension ().getContributor ().getName ();
            Bundle bundle = Platform.getBundle (pluginId);
            return null != bundle && bundle.getState () == org.osgi.framework.Bundle.ACTIVE;
        }

    }

    private static final ContributionItemService instance = new ContributionItemService ();

    public static ContributionItemService getInstance () {
        return instance;
    }

    private ContributionItemService () {
        super ();
        configureProviders (CommonUIServicesActionPlugin.getPluginId (), "contributionItemProviders");
    }

    protected Service.ProviderDescriptor newProviderDescriptor (IConfigurationElement element) {
        return new ProviderDescriptor (element);
    }

    public void contributeToActionBars (IActionBars actionBars, IWorkbenchPart workbenchPart) {
        contributeToActionBars (actionBars, new WorkbenchPartDescriptor (workbenchPart.getSite ().getId (), workbenchPart.getClass (), workbenchPart.getSite ().getPage ()));
    }

    public void contributeToActionBars (IActionBars actionBars, IWorkbenchPartDescriptor workbenchPartDescriptor) {
        execute (new ContributeToActionBarsOperation (actionBars, workbenchPartDescriptor));
    }

    public void contributeToPopupMenu (IMenuManager popupMenu, IWorkbenchPart workbenchPart) {
        execute (new ContributeToPopupMenuOperation (popupMenu, workbenchPart));
    }

    public void disposeContributions (IWorkbenchPartDescriptor workbenchPartDescriptor) {
        execute (new DisposeContributionsOperation (workbenchPartDescriptor));
    }

    public void updateActionBars (IActionBars actionBars, IWorkbenchPartDescriptor workbenchPartDescriptor) {
        execute (new UpdateActionBarsOperation (actionBars, workbenchPartDescriptor));
    }

    public void disposeContributions (IWorkbenchPart workbenchPart) {
        execute (new DisposeContributionsOperation (new WorkbenchPartDescriptor (workbenchPart.getSite ().getId (), workbenchPart.getClass (), workbenchPart.getSite ().getPage ())));
    }

    private void execute (IOperation operation) {
        execute (ExecutionStrategy.REVERSE, operation);
    }

}

