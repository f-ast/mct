package org.eclipse.gmf.runtime.diagram.ui.internal.tools;

import org.eclipse.draw2d.Cursors;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.EditPartViewer;

import org.eclipse.gef.GraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ZoomableEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramUIPluginImages;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.KeyEvent;

import org.eclipse.swt.graphics.Cursor;

public class ZoomTool extends RubberbandSelectionTool {
    static private final int ZOOM_IN_MODE = 1;
    static private final int ZOOM_OUT_MODE = 2;
    static private final int ZOOM_PAN_MODE = 3;
    static final Cursor zoom_out_cursor = new Cursor (null, DiagramUIPluginImages.DESC_ZOOM_OUT.getImageData (), 0, 0);
    static final Cursor zoom_in_cursor = new Cursor (null, DiagramUIPluginImages.DESC_ZOOM_IN.getImageData (), 0, 0);
    static final Cursor zoom_pan_cursor = Cursors.HAND;
    private int zoommode = 1;

    public ZoomTool () {
        setUnloadWhenFinished (false);
    }

    protected Cursor getDefaultCursor () {
        if (getCurrentViewer () instanceof GraphicalViewer) {
            if (getZoomMode () == ZOOM_IN_MODE) return zoom_in_cursor;
            else if (getZoomMode () == ZOOM_OUT_MODE) return zoom_out_cursor;
            else if (getZoomMode () == ZOOM_PAN_MODE) return zoom_pan_cursor;

        }
        return Cursors.NO;
    }

    protected String getCommandName () {
        return REQ_SELECTION;
    }

    protected String getDebugName () {
        return "Marquee Tool";
    }

    private int getZoomMode () {
        return zoommode;
    }

    protected boolean handleKeyDown (KeyEvent e) {
        if (super.handleKeyDown (e)) return true;

        if (getCurrentViewer ().getKeyHandler () != null && getCurrentViewer ().getKeyHandler ().keyPressed (e)) return true;

        if (e.keyCode == SWT.SHIFT) setZoomMode (ZOOM_OUT_MODE);

        if (e.keyCode == SWT.ALT) setZoomMode (ZOOM_PAN_MODE);

        return false;
    }

    protected boolean handleKeyUp (KeyEvent e) {
        if (super.handleKeyUp (e)) return true;

        if (e.keyCode == SWT.SHIFT || e.keyCode == SWT.ALT) setZoomMode (ZOOM_IN_MODE);

        return false;
    }

    protected void performMarqueeSelect () {
        EditPartViewer viewer = getCurrentViewer ();
        ZoomableEditPart zoomableEditPart = null;
        if (viewer.getRootEditPart () instanceof ZoomableEditPart) zoomableEditPart = (ZoomableEditPart) viewer.getRootEditPart ();

        Rectangle zoomRect = getMarqueeSelectionRectangle ();
        if (zoomRect.width < 2 || zoomRect.height < 2) {
            if (getZoomMode () == ZOOM_OUT_MODE) {
                zoomableEditPart.zoomOut (getLocation ());
            } else if (getZoomMode () == ZOOM_IN_MODE) {
                zoomableEditPart.zoomIn (getLocation ());
            }

        } else {
            zoomableEditPart.zoomTo (zoomRect);
        }
    }

    public void setViewer (EditPartViewer viewer) {
        if (viewer == getCurrentViewer ()) return;

        super.setViewer (viewer);
    }

    private void setZoomMode (int zoommode) {
        this.zoommode = zoommode;
        setCursor (getDefaultCursor ());
    }

}

