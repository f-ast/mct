package org.eclipse.gmf.runtime.emf.ui.providers.marker;

import java.io.UnsupportedEncodingException;

import java.net.URLDecoder;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.resources.IMarker;

import org.eclipse.core.runtime.IPath;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.common.util.WrappedException;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.domain.IEditingDomainProvider;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.services.marker.AbstractMarkerNavigationProvider;

import org.eclipse.gmf.runtime.emf.ui.internal.MslUIDebugOptions;

import org.eclipse.gmf.runtime.emf.ui.internal.MslUIPlugin;

import org.eclipse.gmf.runtime.emf.ui.internal.MslUIStatusCodes;

import org.eclipse.ui.IEditorPart;

public abstract class AbstractModelMarkerNavigationProvider extends AbstractMarkerNavigationProvider {
    private TransactionalEditingDomain editingDomain;

    public final void gotoMarker (final IEditorPart editor, final IMarker marker) {
        setEditor (editor);
        IEditingDomainProvider domainProvider = (IEditingDomainProvider) getEditor ().getAdapter (IEditingDomainProvider.class);
        if (domainProvider != null) {
            EditingDomain domain = domainProvider.getEditingDomain ();
            if (domain instanceof TransactionalEditingDomain) {
                editingDomain = (TransactionalEditingDomain) domain;
            }
        }
        if (editingDomain != null) {
            try {
                editingDomain.runExclusive (new Runnable () {

                    public void run () {
                        AbstractModelMarkerNavigationProvider.super.gotoMarker (editor, marker);
                    }

                }

                );
            } catch (InterruptedException e) {
                Trace.catching (MslUIPlugin.getDefault (), MslUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "gotoMarker", e);
                Log.error (MslUIPlugin.getDefault (), MslUIStatusCodes.IGNORED_EXCEPTION_WARNING, e.getLocalizedMessage (), e);
            }
        }
    }

    protected Resource getResource (IMarker marker) {
        Resource result = null;
        if (marker.exists ()) {
            IPath resourcePath = marker.getResource ().getLocation ();
            if (resourcePath != null) {
                ResourceSet resourceSet = editingDomain.getResourceSet ();
                URI uri = URI.createFileURI (resourcePath.toOSString ());
                result = resourceSet.getResource (uri, true);
            }
        }
        return result;
    }

    protected List getEObjects (List ids, Resource resource) {
        List result = new java.util.ArrayList (ids.size ());
        URI resourceUri = resource.getURI ();
        ResourceSet rset = resource.getResourceSet ();
        if (rset != null) {
            for (Iterator iter = ids.iterator ();
            iter.hasNext ();) {
                String nextId = (String) iter.next ();
                URI nextUri;
                int hashPos = nextId.indexOf ('#');
                if (hashPos <= 0) {
                    nextUri = resourceUri.appendFragment (nextId.substring (hashPos + 1));
                } else {
                    String resUriStr = nextId.substring (0, hashPos);
                    String elemIdStr = nextId.substring (hashPos + 1);
                    try {
                        resUriStr = URLDecoder.decode (resUriStr, "UTF-8");
                    } catch (UnsupportedEncodingException e) {
                    }
                    nextUri = URI.createURI (resUriStr).appendFragment (elemIdStr);
                }
                try {
                    EObject element = rset.getEObject (nextUri, true);
                    if (element != null) {
                        result.add (element);
                    }
                } catch (WrappedException e) {
                }
            }
        }
        return result;
    }

}

