package org.eclipse.gmf.graphdef.editor.edit.parts;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.StackLayout;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.editpolicies.LayoutEditPolicy;

import org.eclipse.gef.editpolicies.NonResizableEditPolicy;

import org.eclipse.gef.requests.CreateRequest;

import org.eclipse.gmf.graphdef.editor.edit.policies.FigureGalleryCanonicalEditPolicy;

import org.eclipse.gmf.graphdef.editor.edit.policies.FigureGalleryGraphicalNodeEditPolicy;

import org.eclipse.gmf.graphdef.editor.edit.policies.FigureGalleryItemSemanticEditPolicy;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;

import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;

import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;

import org.eclipse.gmf.runtime.notation.View;

public class FigureGalleryEditPart extends ShapeNodeEditPart {
    public static final int VISUAL_ID = 2004;
    protected IFigure contentPane;
    protected IFigure primaryShape;

    public FigureGalleryEditPart (View view) {
        super (view);
    }

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicyRoles.SEMANTIC_ROLE, new FigureGalleryItemSemanticEditPolicy ());
        installEditPolicy (EditPolicy.GRAPHICAL_NODE_ROLE, new FigureGalleryGraphicalNodeEditPolicy ());
        installEditPolicy (EditPolicyRoles.CANONICAL_ROLE, new FigureGalleryCanonicalEditPolicy ());
        installEditPolicy (EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy ());
    }

    protected LayoutEditPolicy createLayoutEditPolicy () {
        return new LayoutEditPolicy () {

            protected EditPolicy createChildEditPolicy (EditPart child) {
                EditPolicy result = child.getEditPolicy (EditPolicy.PRIMARY_DRAG_ROLE);
                if (result == null) {
                    result = new NonResizableEditPolicy ();
                }
                return result;
            }

            protected Command getMoveChildrenCommand (Request request) {
                return null;
            }

            protected Command getCreateCommand (CreateRequest request) {
                return null;
            }

        }

        ;
    }

    protected IFigure createNodeShape () {
        FigureGalleryFigure figure = new FigureGalleryFigure ();
        return primaryShape = figure;
    }

    public FigureGalleryFigure getPrimaryShape () {
        return (FigureGalleryFigure) primaryShape;
    }

    protected boolean addFixedChild (EditPart childEditPart) {
        if (childEditPart instanceof FigureGalleryNameEditPart) {
            ((FigureGalleryNameEditPart) childEditPart).setLabel (getPrimaryShape ().getFigureFigureGalleryFigure_NameLabel ());
            return true;
        }
        return false;
    }

    protected boolean removeFixedChild (EditPart childEditPart) {
        return false;
    }

    protected NodeFigure createNodePlate () {
        return new DefaultSizeNodeFigure (getMapMode ().DPtoLP (40), getMapMode ().DPtoLP (40));
    }

    protected NodeFigure createNodeFigure () {
        NodeFigure figure = createNodePlate ();
        figure.setLayoutManager (new StackLayout ());
        IFigure shape = createNodeShape ();
        figure.add (shape);
        contentPane = setupContentPane (shape);
        return figure;
    }

    protected IFigure setupContentPane (IFigure nodeShape) {
        if (nodeShape.getLayoutManager () == null) {
            ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout ();
            layout.setSpacing (getMapMode ().DPtoLP (5));
            nodeShape.setLayoutManager (layout);
        }
        return nodeShape;
    }

    public IFigure getContentPane () {
        if (contentPane != null) {
            return contentPane;
        }
        return super.getContentPane ();
    }

    public EditPart getPrimaryChildEditPart () {
        return getChildBySemanticHint (GMFGraphVisualIDRegistry.getType (FigureGalleryNameEditPart.VISUAL_ID));
    }

    protected void addChildVisual (EditPart childEditPart, int index) {
        if (addFixedChild (childEditPart)) {
            return;
        }
        super.addChildVisual (childEditPart, - 1);
    }

    protected void removeChildVisual (EditPart childEditPart) {
        if (removeFixedChild (childEditPart)) {
            return;
        }
        super.removeChildVisual (childEditPart);
    }

    public class FigureGalleryFigure extends org.eclipse.draw2d.RectangleFigure {

        public FigureGalleryFigure () {
            createContents ();
        }

        private void createContents () {
            org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel fig_0 = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel ();
            setFigureFigureGalleryFigure_NameLabel (fig_0);
            Object layData0 = null;
            this.add (fig_0, layData0);
        }

        private org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel fFigureGalleryFigure_NameLabel;

        public org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel getFigureFigureGalleryFigure_NameLabel () {
            return fFigureGalleryFigure_NameLabel;
        }

        private void setFigureFigureGalleryFigure_NameLabel (org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel fig) {
            fFigureGalleryFigure_NameLabel = fig;
        }

        private boolean myUseLocalCoordinates = false;

        protected boolean useLocalCoordinates () {
            return myUseLocalCoordinates;
        }

        protected void setUseLocalCoordinates (boolean useLocalCoordinates) {
            myUseLocalCoordinates = useLocalCoordinates;
        }

    }

}

