package org.eclipse.gmf.gmfgraph.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.Rectangle2D;

import org.eclipse.gmf.gmfgraph.SVGFigure;

import org.eclipse.gmf.gmfgraph.SVGProperty;

public class SVGFigureImpl extends RealFigureImpl implements SVGFigure {
    protected static final String DOCUMENT_URI_EDEFAULT = null;
    protected String documentURI = DOCUMENT_URI_EDEFAULT;
    protected EList < SVGProperty > properties;
    protected Rectangle2D areaOfInterest;

    protected SVGFigureImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getSVGFigure ();
    }

    public String getDocumentURI () {
        return documentURI;
    }

    public void setDocumentURI (String newDocumentURI) {
        String oldDocumentURI = documentURI;
        documentURI = newDocumentURI;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SVG_FIGURE__DOCUMENT_URI, oldDocumentURI, documentURI));

    }

    public EList < SVGProperty > getProperties () {
        if (properties == null) {
            properties = new EObjectContainmentEList < SVGProperty > (SVGProperty.class, this, GMFGraphPackage.SVG_FIGURE__PROPERTIES);
        }
        return properties;
    }

    public Rectangle2D getAreaOfInterest () {
        return areaOfInterest;
    }

    public NotificationChain basicSetAreaOfInterest (Rectangle2D newAreaOfInterest, NotificationChain msgs) {
        Rectangle2D oldAreaOfInterest = areaOfInterest;
        areaOfInterest = newAreaOfInterest;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SVG_FIGURE__AREA_OF_INTEREST, oldAreaOfInterest, newAreaOfInterest);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setAreaOfInterest (Rectangle2D newAreaOfInterest) {
        if (newAreaOfInterest != areaOfInterest) {
            NotificationChain msgs = null;
            if (areaOfInterest != null) msgs = ((InternalEObject) areaOfInterest).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.SVG_FIGURE__AREA_OF_INTEREST, null, msgs);

            if (newAreaOfInterest != null) msgs = ((InternalEObject) newAreaOfInterest).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.SVG_FIGURE__AREA_OF_INTEREST, null, msgs);

            msgs = basicSetAreaOfInterest (newAreaOfInterest, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SVG_FIGURE__AREA_OF_INTEREST, newAreaOfInterest, newAreaOfInterest));

    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.SVG_FIGURE__PROPERTIES :
                return ((InternalEList < ? >) getProperties ()).basicRemove (otherEnd, msgs);
            case GMFGraphPackage.SVG_FIGURE__AREA_OF_INTEREST :
                return basicSetAreaOfInterest (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.SVG_FIGURE__DOCUMENT_URI :
                return getDocumentURI ();
            case GMFGraphPackage.SVG_FIGURE__PROPERTIES :
                return getProperties ();
            case GMFGraphPackage.SVG_FIGURE__AREA_OF_INTEREST :
                return getAreaOfInterest ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.SVG_FIGURE__DOCUMENT_URI :
                setDocumentURI ((String) newValue);
                return;
            case GMFGraphPackage.SVG_FIGURE__PROPERTIES :
                getProperties ().clear ();
                getProperties ().addAll ((Collection < ? extends SVGProperty >) newValue);
                return;
            case GMFGraphPackage.SVG_FIGURE__AREA_OF_INTEREST :
                setAreaOfInterest ((Rectangle2D) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.SVG_FIGURE__DOCUMENT_URI :
                setDocumentURI (DOCUMENT_URI_EDEFAULT);
                return;
            case GMFGraphPackage.SVG_FIGURE__PROPERTIES :
                getProperties ().clear ();
                return;
            case GMFGraphPackage.SVG_FIGURE__AREA_OF_INTEREST :
                setAreaOfInterest ((Rectangle2D) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.SVG_FIGURE__DOCUMENT_URI :
                return DOCUMENT_URI_EDEFAULT == null ? documentURI != null : ! DOCUMENT_URI_EDEFAULT.equals (documentURI);
            case GMFGraphPackage.SVG_FIGURE__PROPERTIES :
                return properties != null && ! properties.isEmpty ();
            case GMFGraphPackage.SVG_FIGURE__AREA_OF_INTEREST :
                return areaOfInterest != null;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (documentURI: ");
        result.append (documentURI);
        result.append (')');
        return result.toString ();
    }

}

