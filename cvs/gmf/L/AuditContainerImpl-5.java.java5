package org.eclipse.gmf.mappings.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.mappings.AuditContainer;

import org.eclipse.gmf.mappings.AuditRule;

import org.eclipse.gmf.mappings.GMFMapPackage;

public class AuditContainerImpl extends EObjectImpl implements AuditContainer {
    protected static final String ID_EDEFAULT = null;
    protected String id = ID_EDEFAULT;
    protected static final String NAME_EDEFAULT = null;
    protected String name = NAME_EDEFAULT;
    protected static final String DESCRIPTION_EDEFAULT = null;
    protected String description = DESCRIPTION_EDEFAULT;
    protected EList < AuditRule > audits = null;
    protected EList < AuditContainer > childContainers = null;

    protected AuditContainerImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getAuditContainer ();
    }

    public String getId () {
        return id;
    }

    public void setId (String newId) {
        String oldId = id;
        id = newId;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_CONTAINER__ID, oldId, id));

    }

    public String getName () {
        return name;
    }

    public void setName (String newName) {
        String oldName = name;
        name = newName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_CONTAINER__NAME, oldName, name));

    }

    public String getDescription () {
        return description;
    }

    public void setDescription (String newDescription) {
        String oldDescription = description;
        description = newDescription;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_CONTAINER__DESCRIPTION, oldDescription, description));

    }

    public AuditContainer getParentContainer () {
        if (eContainerFeatureID != GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER) return null;

        return (AuditContainer) eContainer ();
    }

    public NotificationChain basicSetParentContainer (AuditContainer newParentContainer, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newParentContainer, GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER, msgs);
        return msgs;
    }

    public void setParentContainer (AuditContainer newParentContainer) {
        if (newParentContainer != eInternalContainer () || (eContainerFeatureID != GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER && newParentContainer != null)) {
            if (EcoreUtil.isAncestor (this, newParentContainer)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newParentContainer != null) msgs = ((InternalEObject) newParentContainer).eInverseAdd (this, GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS, AuditContainer.class, msgs);

            msgs = basicSetParentContainer (newParentContainer, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER, newParentContainer, newParentContainer));

    }

    public EList < AuditRule > getAudits () {
        if (audits == null) {
            audits = new EObjectContainmentWithInverseEList < AuditRule > (AuditRule.class, this, GMFMapPackage.AUDIT_CONTAINER__AUDITS, GMFMapPackage.AUDIT_RULE__CONTAINER);
        }
        return audits;
    }

    public EList < AuditContainer > getChildContainers () {
        if (childContainers == null) {
            childContainers = new EObjectContainmentWithInverseEList < AuditContainer > (AuditContainer.class, this, GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS, GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER);
        }
        return childContainers;
    }

    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetParentContainer ((AuditContainer) otherEnd, msgs);
            case GMFMapPackage.AUDIT_CONTAINER__AUDITS :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getAudits ()).basicAdd (otherEnd, msgs);
            case GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getChildContainers ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER :
                return basicSetParentContainer (null, msgs);
            case GMFMapPackage.AUDIT_CONTAINER__AUDITS :
                return ((InternalEList < ? >) getAudits ()).basicRemove (otherEnd, msgs);
            case GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS :
                return ((InternalEList < ? >) getChildContainers ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER :
                return eInternalContainer ().eInverseRemove (this, GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS, AuditContainer.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFMapPackage.AUDIT_CONTAINER__ID :
                return getId ();
            case GMFMapPackage.AUDIT_CONTAINER__NAME :
                return getName ();
            case GMFMapPackage.AUDIT_CONTAINER__DESCRIPTION :
                return getDescription ();
            case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER :
                return getParentContainer ();
            case GMFMapPackage.AUDIT_CONTAINER__AUDITS :
                return getAudits ();
            case GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS :
                return getChildContainers ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFMapPackage.AUDIT_CONTAINER__ID :
                setId ((String) newValue);
                return;
            case GMFMapPackage.AUDIT_CONTAINER__NAME :
                setName ((String) newValue);
                return;
            case GMFMapPackage.AUDIT_CONTAINER__DESCRIPTION :
                setDescription ((String) newValue);
                return;
            case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER :
                setParentContainer ((AuditContainer) newValue);
                return;
            case GMFMapPackage.AUDIT_CONTAINER__AUDITS :
                getAudits ().clear ();
                getAudits ().addAll ((Collection < ? extends AuditRule >) newValue);
                return;
            case GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS :
                getChildContainers ().clear ();
                getChildContainers ().addAll ((Collection < ? extends AuditContainer >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFMapPackage.AUDIT_CONTAINER__ID :
                setId (ID_EDEFAULT);
                return;
            case GMFMapPackage.AUDIT_CONTAINER__NAME :
                setName (NAME_EDEFAULT);
                return;
            case GMFMapPackage.AUDIT_CONTAINER__DESCRIPTION :
                setDescription (DESCRIPTION_EDEFAULT);
                return;
            case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER :
                setParentContainer ((AuditContainer) null);
                return;
            case GMFMapPackage.AUDIT_CONTAINER__AUDITS :
                getAudits ().clear ();
                return;
            case GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS :
                getChildContainers ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFMapPackage.AUDIT_CONTAINER__ID :
                return ID_EDEFAULT == null ? id != null : ! ID_EDEFAULT.equals (id);
            case GMFMapPackage.AUDIT_CONTAINER__NAME :
                return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT.equals (name);
            case GMFMapPackage.AUDIT_CONTAINER__DESCRIPTION :
                return DESCRIPTION_EDEFAULT == null ? description != null : ! DESCRIPTION_EDEFAULT.equals (description);
            case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER :
                return getParentContainer () != null;
            case GMFMapPackage.AUDIT_CONTAINER__AUDITS :
                return audits != null && ! audits.isEmpty ();
            case GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS :
                return childContainers != null && ! childContainers.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (id: ");
        result.append (id);
        result.append (", name: ");
        result.append (name);
        result.append (", description: ");
        result.append (description);
        result.append (')');
        return result.toString ();
    }

}

