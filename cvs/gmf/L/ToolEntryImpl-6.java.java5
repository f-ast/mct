package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.ToolEntry;

public abstract class ToolEntryImpl extends EntryBaseImpl implements ToolEntry {
    protected static final boolean DEFAULT_EDEFAULT = false;
    protected boolean default_ = DEFAULT_EDEFAULT;

    protected ToolEntryImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getToolEntry ();
    }

    public boolean isDefault () {
        return default_;
    }

    public void setDefault (boolean newDefault) {
        boolean oldDefault = default_;
        default_ = newDefault;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.TOOL_ENTRY__DEFAULT, oldDefault, default_));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.TOOL_ENTRY__DEFAULT :
                return isDefault () ? Boolean.TRUE : Boolean.FALSE;
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.TOOL_ENTRY__DEFAULT :
                setDefault (((Boolean) newValue).booleanValue ());
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TOOL_ENTRY__DEFAULT :
                setDefault (DEFAULT_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TOOL_ENTRY__DEFAULT :
                return default_ != DEFAULT_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (default: ");
        result.append (default_);
        result.append (')');
        return result.toString ();
    }

    public String getCreateMethodName () {
        if (getCreateMethodNameGen () != null) {
            return getCreateMethodNameGen ();
        }
        return "create" + getTitleKey () + getEntryID () + "CreationTool";
    }

}

