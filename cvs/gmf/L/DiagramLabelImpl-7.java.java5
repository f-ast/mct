package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.gmfgraph.ChildAccess;

import org.eclipse.gmf.gmfgraph.DiagramLabel;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

public class DiagramLabelImpl extends NodeImpl implements DiagramLabel {
    protected static final boolean ELEMENT_ICON_EDEFAULT = true;
    protected boolean elementIcon = ELEMENT_ICON_EDEFAULT;
    protected ChildAccess accessor;
    protected ChildAccess container;
    protected static final boolean EXTERNAL_EDEFAULT = false;

    protected DiagramLabelImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getDiagramLabel ();
    }

    public boolean isElementIcon () {
        return elementIcon;
    }

    public void setElementIcon (boolean newElementIcon) {
        boolean oldElementIcon = elementIcon;
        elementIcon = newElementIcon;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.DIAGRAM_LABEL__ELEMENT_ICON, oldElementIcon, elementIcon));

    }

    public ChildAccess getAccessor () {
        if (accessor != null && accessor.eIsProxy ()) {
            InternalEObject oldAccessor = (InternalEObject) accessor;
            accessor = (ChildAccess) eResolveProxy (oldAccessor);
            if (accessor != oldAccessor) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGraphPackage.DIAGRAM_LABEL__ACCESSOR, oldAccessor, accessor));

            }
        }
        return accessor;
    }

    public ChildAccess basicGetAccessor () {
        return accessor;
    }

    public void setAccessor (ChildAccess newAccessor) {
        ChildAccess oldAccessor = accessor;
        accessor = newAccessor;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.DIAGRAM_LABEL__ACCESSOR, oldAccessor, accessor));

    }

    public ChildAccess getContainer () {
        if (container != null && container.eIsProxy ()) {
            InternalEObject oldContainer = (InternalEObject) container;
            container = (ChildAccess) eResolveProxy (oldContainer);
            if (container != oldContainer) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGraphPackage.DIAGRAM_LABEL__CONTAINER, oldContainer, container));

            }
        }
        return container;
    }

    public ChildAccess basicGetContainer () {
        return container;
    }

    public void setContainer (ChildAccess newContainer) {
        ChildAccess oldContainer = container;
        container = newContainer;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.DIAGRAM_LABEL__CONTAINER, oldContainer, container));

    }

    public boolean isExternal () {
        ChildAccess labelAccessor = getAccessor ();
        return labelAccessor == null;
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.DIAGRAM_LABEL__ELEMENT_ICON :
                return isElementIcon () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGraphPackage.DIAGRAM_LABEL__ACCESSOR :
                if (resolve) return getAccessor ();

                return basicGetAccessor ();
            case GMFGraphPackage.DIAGRAM_LABEL__CONTAINER :
                if (resolve) return getContainer ();

                return basicGetContainer ();
            case GMFGraphPackage.DIAGRAM_LABEL__EXTERNAL :
                return isExternal () ? Boolean.TRUE : Boolean.FALSE;
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.DIAGRAM_LABEL__ELEMENT_ICON :
                setElementIcon (((Boolean) newValue).booleanValue ());
                return;
            case GMFGraphPackage.DIAGRAM_LABEL__ACCESSOR :
                setAccessor ((ChildAccess) newValue);
                return;
            case GMFGraphPackage.DIAGRAM_LABEL__CONTAINER :
                setContainer ((ChildAccess) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.DIAGRAM_LABEL__ELEMENT_ICON :
                setElementIcon (ELEMENT_ICON_EDEFAULT);
                return;
            case GMFGraphPackage.DIAGRAM_LABEL__ACCESSOR :
                setAccessor ((ChildAccess) null);
                return;
            case GMFGraphPackage.DIAGRAM_LABEL__CONTAINER :
                setContainer ((ChildAccess) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.DIAGRAM_LABEL__ELEMENT_ICON :
                return elementIcon != ELEMENT_ICON_EDEFAULT;
            case GMFGraphPackage.DIAGRAM_LABEL__ACCESSOR :
                return accessor != null;
            case GMFGraphPackage.DIAGRAM_LABEL__CONTAINER :
                return container != null;
            case GMFGraphPackage.DIAGRAM_LABEL__EXTERNAL :
                return isExternal () != EXTERNAL_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (elementIcon: ");
        result.append (elementIcon);
        result.append (')');
        return result.toString ();
    }

}

