package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import java.util.Iterator;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;

import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;

import org.eclipse.gmf.codegen.gmfgen.ValueExpression;

public class GenExpressionProviderContainerImpl extends EObjectImpl implements GenExpressionProviderContainer {
    protected static final String EXPRESSIONS_PACKAGE_NAME_EDEFAULT = null;
    protected String expressionsPackageName = EXPRESSIONS_PACKAGE_NAME_EDEFAULT;
    protected static final String ABSTRACT_EXPRESSION_CLASS_NAME_EDEFAULT = null;
    protected String abstractExpressionClassName = ABSTRACT_EXPRESSION_CLASS_NAME_EDEFAULT;
    protected EList providers = null;

    protected GenExpressionProviderContainerImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenExpressionProviderContainer ();
    }

    public String getExpressionsPackageNameGen () {
        return expressionsPackageName;
    }

    public String getExpressionsPackageName () {
        String value = getExpressionsPackageNameGen ();
        if (value == null || value.length () == 0) {
            value = getEditorGen ().getPackageNamePrefix () + ".expressions";
        }
        return value;
    }

    public void setExpressionsPackageName (String newExpressionsPackageName) {
        String oldExpressionsPackageName = expressionsPackageName;
        expressionsPackageName = newExpressionsPackageName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EXPRESSIONS_PACKAGE_NAME, oldExpressionsPackageName, expressionsPackageName));

    }

    public String getAbstractExpressionClassNameGen () {
        return abstractExpressionClassName;
    }

    public String getAbstractExpressionClassName () {
        String value = getAbstractExpressionClassNameGen ();
        if (value == null || value.length () == 0) {
            String prefix = ((GenEditorGeneratorImpl) getEditorGen ()).getDomainModelCapName ();
            value = prefix + "AbstractExpression";
        }
        return value;
    }

    public void setAbstractExpressionClassName (String newAbstractExpressionClassName) {
        String oldAbstractExpressionClassName = abstractExpressionClassName;
        abstractExpressionClassName = newAbstractExpressionClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__ABSTRACT_EXPRESSION_CLASS_NAME, oldAbstractExpressionClassName, abstractExpressionClassName));

    }

    public EList getProviders () {
        if (providers == null) {
            providers = new EObjectContainmentWithInverseEList (GenExpressionProviderBase.class, this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER);
        }
        return providers;
    }

    public GenEditorGenerator getEditorGen () {
        if (eContainerFeatureID != GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN) return null;

        return (GenEditorGenerator) eContainer ();
    }

    public NotificationChain basicSetEditorGen (GenEditorGenerator newEditorGen, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newEditorGen, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN, msgs);
        return msgs;
    }

    public void setEditorGen (GenEditorGenerator newEditorGen) {
        if (newEditorGen != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN && newEditorGen != null)) {
            if (EcoreUtil.isAncestor (this, newEditorGen)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newEditorGen != null) msgs = ((InternalEObject) newEditorGen).eInverseAdd (this, GMFGenPackage.GEN_EDITOR_GENERATOR__EXPRESSION_PROVIDERS, GenEditorGenerator.class, msgs);

            msgs = basicSetEditorGen (newEditorGen, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN, newEditorGen, newEditorGen));

    }

    public boolean isCopy (ValueExpression expression) {
        GenExpressionProviderBase provider = getProvider (expression);
        if (provider != null) {
            return ! provider.getExpressions ().contains (expression);
        }
        return false;
    }

    public GenExpressionProviderBase getProvider (ValueExpression expression) {
        for (Iterator it = getProviders ().iterator ();
        it.hasNext ();) {
            GenExpressionProviderBase nextProvider = (GenExpressionProviderBase) it.next ();
            if (nextProvider.getExpressions ().contains (expression)) {
                return nextProvider;
            }
        }
        for (Iterator it = getProviders ().iterator ();
        it.hasNext ();) {
            GenExpressionProviderBase nextProvider = (GenExpressionProviderBase) it.next ();
            if (expression != null && expression.getLanguage () != null && expression.getLanguage ().equals (nextProvider.getLanguage ())) {
                return nextProvider;
            }
        }
        return null;
    }

    public String getAbstractExpressionQualifiedClassName () {
        return getExpressionsPackageName () + "." + getAbstractExpressionClassName ();
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS :
                return ((InternalEList) getProviders ()).basicAdd (otherEnd, msgs);
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetEditorGen ((GenEditorGenerator) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS :
                return ((InternalEList) getProviders ()).basicRemove (otherEnd, msgs);
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN :
                return basicSetEditorGen (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_EDITOR_GENERATOR__EXPRESSION_PROVIDERS, GenEditorGenerator.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EXPRESSIONS_PACKAGE_NAME :
                return getExpressionsPackageName ();
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__ABSTRACT_EXPRESSION_CLASS_NAME :
                return getAbstractExpressionClassName ();
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS :
                return getProviders ();
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN :
                return getEditorGen ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EXPRESSIONS_PACKAGE_NAME :
                setExpressionsPackageName ((String) newValue);
                return;
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__ABSTRACT_EXPRESSION_CLASS_NAME :
                setAbstractExpressionClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS :
                getProviders ().clear ();
                getProviders ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN :
                setEditorGen ((GenEditorGenerator) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EXPRESSIONS_PACKAGE_NAME :
                setExpressionsPackageName (EXPRESSIONS_PACKAGE_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__ABSTRACT_EXPRESSION_CLASS_NAME :
                setAbstractExpressionClassName (ABSTRACT_EXPRESSION_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS :
                getProviders ().clear ();
                return;
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN :
                setEditorGen ((GenEditorGenerator) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EXPRESSIONS_PACKAGE_NAME :
                return EXPRESSIONS_PACKAGE_NAME_EDEFAULT == null ? expressionsPackageName != null : ! EXPRESSIONS_PACKAGE_NAME_EDEFAULT.equals (expressionsPackageName);
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__ABSTRACT_EXPRESSION_CLASS_NAME :
                return ABSTRACT_EXPRESSION_CLASS_NAME_EDEFAULT == null ? abstractExpressionClassName != null : ! ABSTRACT_EXPRESSION_CLASS_NAME_EDEFAULT.equals (abstractExpressionClassName);
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS :
                return providers != null && ! providers.isEmpty ();
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN :
                return getEditorGen () != null;
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (expressionsPackageName: ");
        result.append (expressionsPackageName);
        result.append (", abstractExpressionClassName: ");
        result.append (abstractExpressionClassName);
        result.append (')');
        return result.toString ();
    }

}

