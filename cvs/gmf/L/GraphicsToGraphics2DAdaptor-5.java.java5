package org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.graphics;

import java.awt.AlphaComposite;

import java.awt.BasicStroke;

import java.awt.Composite;

import java.awt.GradientPaint;

import java.awt.Graphics2D;

import java.awt.Paint;

import java.awt.Polygon;

import java.awt.RenderingHints;

import java.awt.geom.AffineTransform;

import java.awt.geom.Arc2D;

import java.awt.geom.Ellipse2D;

import java.awt.geom.Line2D;

import java.awt.geom.Rectangle2D;

import java.awt.geom.RoundRectangle2D;

import java.awt.image.BufferedImage;

import java.util.Stack;

import org.eclipse.draw2d.Graphics;

import org.eclipse.draw2d.SWTGraphics;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.PointList;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage;

import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.image.ImageConverter;

import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.metafile.GdiFont;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderingListener;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.Font;

import org.eclipse.swt.graphics.FontData;

import org.eclipse.swt.graphics.FontMetrics;

import org.eclipse.swt.graphics.GC;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.widgets.Display;

public class GraphicsToGraphics2DAdaptor extends Graphics implements DrawableRenderedImage {
    private static class State {
        public int translateX = 0;
        public int translateY = 0;
        public int clipX = 0;
        public int clipY = 0;
        public int clipW = 0;
        public int clipH = 0;
        public Font font;
        public float [] lineDash = {3, 3};
        public int lineStyle = LINE_SOLID;
        public int lineWidth = 1;
        public boolean XorMode = false;
        public Color fgColor;
        public Color bgColor;
        public int alpha;

        public void copyFrom (State state) {
            translateX = state.translateX;
            translateY = state.translateY;
            clipX = state.clipX;
            clipY = state.clipY;
            clipW = state.clipW;
            clipH = state.clipH;
            font = state.font;
            lineStyle = state.lineStyle;
            lineWidth = state.lineWidth;
            fgColor = state.fgColor;
            bgColor = state.bgColor;
            XorMode = state.XorMode;
            alpha = state.alpha;
        }

    }

    private SWTGraphics swtGraphics;
    private Graphics2D graphics2D;
    private BasicStroke stroke;
    private Stack states = new Stack ();
    private final State currentState = new State ();
    private final State appliedState = new State ();
    private Rectangle relativeClipRegion;
    private org.eclipse.swt.graphics.Rectangle viewBox;
    private Image image;
    private int transX = 0;
    private int transY = 0;

    public GraphicsToGraphics2DAdaptor (Graphics2D graphics, Rectangle viewPort) {
        this (graphics, new org.eclipse.swt.graphics.Rectangle (viewPort.x, viewPort.y, viewPort.width, viewPort.height));
    }

    public GraphicsToGraphics2DAdaptor (Graphics2D graphics, org.eclipse.swt.graphics.Rectangle viewPort) {
        viewBox = viewPort;
        createSWTGraphics ();
        initSVGGraphics (graphics);
        init ();
    }

    private void createSWTGraphics () {
        org.eclipse.swt.graphics.Rectangle tempRect = new org.eclipse.swt.graphics.Rectangle (0, 0, 10, 10);
        image = new Image (Display.getDefault (), tempRect);
        GC gc = new GC (image);
        swtGraphics = new SWTGraphics (gc);
    }

    private void initSVGGraphics (Graphics2D graphics) {
        this.graphics2D = graphics;
        relativeClipRegion = new Rectangle (viewBox.x, viewBox.y, viewBox.width, viewBox.height);
        stroke = new BasicStroke (swtGraphics.getLineWidth (), BasicStroke.CAP_SQUARE, BasicStroke.JOIN_ROUND, 0, null, 0);
        setLineStyle (swtGraphics.getLineStyle ());
        setLineWidth (swtGraphics.getLineWidth ());
        getGraphics2D ().setStroke (stroke);
    }

    private void init () {
        setLineStyle (getLineStyle ());
        setLineWidth (1);
        setForegroundColor (getForegroundColor ());
        setBackgroundColor (getBackgroundColor ());
        setXORMode (getXORMode ());
        setFont (getFont ());
        currentState.font = appliedState.font = getFont ();
        currentState.translateX = appliedState.translateX = transX;
        currentState.translateY = appliedState.translateY = transY;
        currentState.clipX = appliedState.clipX = relativeClipRegion.x;
        currentState.clipY = appliedState.clipY = relativeClipRegion.y;
        currentState.clipW = appliedState.clipW = relativeClipRegion.width;
        currentState.clipH = appliedState.clipH = relativeClipRegion.height;
        currentState.alpha = appliedState.alpha = getAlpha ();
    }

    protected void checkState () {
        if (appliedState.font != currentState.font) {
            appliedState.font = currentState.font;
            setFont (currentState.font);
        }
        if (appliedState.clipX != currentState.clipX || appliedState.clipY != currentState.clipY || appliedState.clipW != currentState.clipW || appliedState.clipH != currentState.clipH) {
            appliedState.clipX = currentState.clipX;
            appliedState.clipY = currentState.clipY;
            appliedState.clipW = currentState.clipW;
            appliedState.clipH = currentState.clipH;
            getGraphics2D ().setClip (currentState.clipX - 1, currentState.clipY - 1, currentState.clipW + 2, currentState.clipH + 2);
        }
        if (appliedState.alpha != currentState.alpha) {
            appliedState.alpha = currentState.alpha;
            setAlpha (currentState.alpha);
        }
    }

    public void clipRect (Rectangle rect) {
        relativeClipRegion.intersect (rect);
        setClipAbsolute (relativeClipRegion.x + transX, relativeClipRegion.y + transY, relativeClipRegion.width, relativeClipRegion.height);
    }

    public void dispose () {
        swtGraphics.dispose ();
        if (image != null) {
            image.dispose ();
        }
        states.clear ();
    }

    protected java.awt.Color getColor (Color toConvert) {
        return new java.awt.Color (toConvert.getRed (), toConvert.getGreen (), toConvert.getBlue ());
    }

    public void drawArc (int x, int y, int width, int height, int startAngle, int endAngle) {
        Arc2D arc = new Arc2D.Float (x + transX, y + transY, width - 1, height, startAngle, endAngle, Arc2D.OPEN);
        checkState ();
        getGraphics2D ().setPaint (getColor (swtGraphics.getForegroundColor ()));
        getGraphics2D ().draw (arc);
    }

    public void fillArc (int x, int y, int w, int h, int offset, int length) {
        Arc2D arc = new Arc2D.Float (x + transX, y + transY, w, h, offset, length, Arc2D.OPEN);
        checkState ();
        getGraphics2D ().setPaint (getColor (swtGraphics.getBackgroundColor ()));
        getGraphics2D ().fill (arc);
    }

    public void drawFocus (int x, int y, int w, int h) {
        drawRectangle (x, y, w, h);
    }

    public void drawImage (Image srcImage, int xpos, int ypos) {
        xpos += transX;
        ypos += transY;
        BufferedImage toDraw = ImageConverter.convert (srcImage);
        checkState ();
        getGraphics2D ().drawImage (toDraw, new AffineTransform (1f, 0f, 0f, 1f, xpos, ypos), null);
    }

    public void drawImage (Image srcImage, int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2) {
        drawImage (srcImage, x2, y2);
    }

    public void drawLine (int x1, int y1, int x2, int y2) {
        Line2D line = new Line2D.Float (x1 + transX, y1 + transY, x2 + transX, y2 + transY);
        checkState ();
        getGraphics2D ().setPaint (getColor (swtGraphics.getForegroundColor ()));
        getGraphics2D ().draw (line);
    }

    public void drawOval (int x, int y, int w, int h) {
        Ellipse2D ellipse = new Ellipse2D.Float (x + transX, y + transY, w, h);
        checkState ();
        getGraphics2D ().setPaint (getColor (swtGraphics.getForegroundColor ()));
        getGraphics2D ().draw (ellipse);
    }

    public void fillOval (int x, int y, int w, int h) {
        Ellipse2D ellipse = new Ellipse2D.Float (x + transX, y + transY, w - 1, h - 1);
        checkState ();
        getGraphics2D ().setPaint (getColor (swtGraphics.getBackgroundColor ()));
        getGraphics2D ().fill (ellipse);
    }

    private Polygon createPolygon (PointList pointList) {
        Polygon toCreate = new Polygon ();
        for (int i = 0;
        i < pointList.size (); i ++) {
            Point pt = pointList.getPoint (i);
            toCreate.addPoint (pt.x + transX, pt.y + transY);
        }
        return toCreate;
    }

    public void drawPolygon (PointList pointList) {
        checkState ();
        getGraphics2D ().setPaint (getColor (swtGraphics.getForegroundColor ()));
        getGraphics2D ().draw (createPolygon (pointList));
    }

    public void fillPolygon (PointList pointList) {
        checkState ();
        getGraphics2D ().setPaint (getColor (swtGraphics.getBackgroundColor ()));
        getGraphics2D ().fill (createPolygon (pointList));
    }

    public void drawPolyline (PointList pointList) {
        for (int x = 1;
        x < pointList.size (); x ++) {
            Point p1 = pointList.getPoint (x - 1);
            Point p2 = pointList.getPoint (x);
            drawLine (p1.x, p1.y, p2.x, p2.y);
        }
    }

    public void drawRectangle (int x, int y, int w, int h) {
        Rectangle2D rect = new Rectangle2D.Float (x + transX, y + transY, w + 1, h + 1);
        checkState ();
        getGraphics2D ().setPaint (getColor (swtGraphics.getForegroundColor ()));
        getGraphics2D ().draw (rect);
    }

    public void fillRectangle (int x, int y, int width, int height) {
        Rectangle2D rect = new Rectangle2D.Float (x + transX, y + transY, width, height);
        checkState ();
        getGraphics2D ().setPaint (getColor (swtGraphics.getBackgroundColor ()));
        getGraphics2D ().fill (rect);
    }

    public void drawRoundRectangle (Rectangle rect, int arcWidth, int arcHeight) {
        RoundRectangle2D roundRect = new RoundRectangle2D.Float (rect.x + transX, rect.y + transY, rect.width, rect.height, arcWidth, arcHeight);
        checkState ();
        getGraphics2D ().setPaint (getColor (swtGraphics.getForegroundColor ()));
        getGraphics2D ().draw (roundRect);
    }

    public void fillRoundRectangle (Rectangle rect, int arcWidth, int arcHeight) {
        RoundRectangle2D roundRect = new RoundRectangle2D.Float (rect.x + transX, rect.y + transY, rect.width, rect.height, arcWidth, arcHeight);
        checkState ();
        getGraphics2D ().setPaint (getColor (swtGraphics.getBackgroundColor ()));
        getGraphics2D ().fill (roundRect);
    }

    public void drawText (String s, int x, int y) {
        drawString (s, x, y);
    }

    public void drawString (String s, int x, int y) {
        if (s == null) return;

        java.awt.FontMetrics metrics = getGraphics2D ().getFontMetrics ();
        int stringLength = metrics.stringWidth (s);
        float xpos = x + transX;
        float ypos = y + transY;
        ypos += metrics.getAscent ();
        checkState ();
        getGraphics2D ().setPaint (getColor (swtGraphics.getForegroundColor ()));
        getGraphics2D ().drawString (s, xpos, ypos);
        int lineWidth;
        if (isFontUnderlined (getFont ())) {
            int baseline = y + metrics.getAscent ();
            lineWidth = getLineWidth ();
            setLineWidth (1);
            drawLine (x, baseline, x + stringLength, baseline);
            setLineWidth (lineWidth);
        }
        if (isFontStrikeout (getFont ())) {
            int strikeline = y + (metrics.getHeight () / 2);
            lineWidth = getLineWidth ();
            setLineWidth (1);
            drawLine (x, strikeline, x + stringLength, strikeline);
            setLineWidth (lineWidth);
        }
    }

    public void fillString (String s, int x, int y) {
    }

    public void fillText (String s, int x, int y) {
    }

    public Color getBackgroundColor () {
        return swtGraphics.getBackgroundColor ();
    }

    public Rectangle getClip (Rectangle rect) {
        rect.setBounds (relativeClipRegion);
        return rect;
    }

    public Font getFont () {
        return swtGraphics.getFont ();
    }

    public FontMetrics getFontMetrics () {
        return swtGraphics.getFontMetrics ();
    }

    public Color getForegroundColor () {
        return swtGraphics.getForegroundColor ();
    }

    public int getLineStyle () {
        return swtGraphics.getLineStyle ();
    }

    public int getLineWidth () {
        return swtGraphics.getLineWidth ();
    }

    public boolean getXORMode () {
        return swtGraphics.getXORMode ();
    }

    public void popState () {
        swtGraphics.popState ();
        restoreState ((State) states.pop ());
    }

    public void pushState () {
        swtGraphics.pushState ();
        State toPush = new State ();
        toPush.copyFrom (currentState);
        states.push (toPush);
    }

    public void restoreState () {
        swtGraphics.restoreState ();
        restoreState ((State) states.peek ());
    }

    private void restoreState (State state) {
        setBackgroundColor (state.bgColor);
        setForegroundColor (state.fgColor);
        setLineStyle (state.lineStyle);
        setLineWidth (state.lineWidth);
        setXORMode (state.XorMode);
        setClipAbsolute (state.clipX, state.clipY, state.clipW, state.clipH);
        transX = currentState.translateX = state.translateX;
        transY = currentState.translateY = state.translateY;
        relativeClipRegion.x = state.clipX - transX;
        relativeClipRegion.y = state.clipY - transY;
        relativeClipRegion.width = state.clipW;
        relativeClipRegion.height = state.clipH;
        currentState.font = state.font;
        currentState.alpha = state.alpha;
    }

    public void scale (double amount) {
        swtGraphics.scale (amount);
    }

    public void setBackgroundColor (Color rgb) {
        currentState.bgColor = rgb;
        swtGraphics.setBackgroundColor (rgb);
    }

    public void setClip (Rectangle rect) {
        relativeClipRegion.x = rect.x;
        relativeClipRegion.y = rect.y;
        relativeClipRegion.width = rect.width;
        relativeClipRegion.height = rect.height;
        setClipAbsolute (rect.x + transX, rect.y + transY, rect.width, rect.height);
    }

    private void setClipAbsolute (int x, int y, int width, int height) {
        currentState.clipX = x;
        currentState.clipY = y;
        currentState.clipW = width;
        currentState.clipH = height;
    }

    private boolean isFontUnderlined (Font f) {
        return false;
    }

    private boolean isFontStrikeout (Font f) {
        return false;
    }

    public void setFont (Font f) {
        swtGraphics.setFont (f);
        currentState.font = f;
        FontData [] fontInfo = f.getFontData ();
        if (fontInfo [0] != null) {
            int height = fontInfo [0].getHeight ();
            float fsize = (float) height * (float) Display.getDefault ().getDPI ().x / 72.0f;
            height = Math.round (fsize);
            int style = fontInfo [0].getStyle ();
            boolean bItalic = (style & SWT.ITALIC) == SWT.ITALIC;
            boolean bBold = (style & SWT.BOLD) == SWT.BOLD;
            String faceName = fontInfo [0].getName ();
            int escapement = 0;
            boolean bUnderline = isFontUnderlined (f);
            boolean bStrikeout = isFontStrikeout (f);
            GdiFont font = new GdiFont (height, bItalic, bUnderline, bStrikeout, bBold, faceName, escapement);
            getGraphics2D ().setFont (font.getFont ());
        }
    }

    public void setForegroundColor (Color rgb) {
        currentState.fgColor = rgb;
        swtGraphics.setForegroundColor (rgb);
    }

    public void setLineDash (int dash []) {
        float dashFlt [] = new float [dash.length];
        for (int i = 0;
        i < dash.length; i ++) dashFlt [i] = dash [i];

        currentState.lineDash = dashFlt;
    }

    public void setLineStyle (int style) {
        currentState.lineStyle = style;
        swtGraphics.setLineStyle (style);
        float dash [] = {18, 9};
        float dash_dot [] = {9, 3, 3, 3};
        float dash_dot_dot [] = {9, 3, 3, 3, 3, 3};
        float dot [] = {3, 3};
        float dashPattern [];
        switch (style) {
            case SWTGraphics.LINE_DASH :
                dashPattern = dash;
                break;
            case SWTGraphics.LINE_DASHDOT :
                dashPattern = dash_dot;
                break;
            case SWTGraphics.LINE_DASHDOTDOT :
                dashPattern = dash_dot_dot;
                break;
            case SWTGraphics.LINE_DOT :
                dashPattern = dot;
                break;
            case SWTGraphics.LINE_CUSTOM :
                dashPattern = currentState.lineDash;
                break;
            default :
                dashPattern = null;
        }
        stroke = new BasicStroke (stroke.getLineWidth (), stroke.getEndCap (), stroke.getLineJoin (), stroke.getMiterLimit (), dashPattern, 0);
        getGraphics2D ().setStroke (stroke);
    }

    public void setLineWidth (int width) {
        currentState.lineWidth = width;
        swtGraphics.setLineWidth (width);
        stroke = new BasicStroke (width, stroke.getEndCap (), stroke.getLineJoin (), stroke.getMiterLimit (), stroke.getDashArray (), 0);
        getGraphics2D ().setStroke (stroke);
    }

    public void setXORMode (boolean xorMode) {
        currentState.XorMode = xorMode;
        swtGraphics.setXORMode (xorMode);
    }

    private void setTranslation (int x, int y) {
        transX = currentState.translateX = x;
        transY = currentState.translateY = y;
    }

    public void translate (int dx, int dy) {
        swtGraphics.translate (dx, dy);
        setTranslation (transX + dx, transY + dy);
        relativeClipRegion.x -= dx;
        relativeClipRegion.y -= dy;
    }

    protected Graphics2D getGraphics2D () {
        return graphics2D;
    }

    private SWTGraphics getSWTGraphics () {
        return swtGraphics;
    }

    public void fillGradient (int x, int y, int w, int h, boolean vertical) {
        GradientPaint gradient;
        checkState ();
        java.awt.Color start = getColor (getSWTGraphics ().getForegroundColor ());
        java.awt.Color stop = getColor (getSWTGraphics ().getBackgroundColor ());
        if (vertical) {
            gradient = new GradientPaint (x + transX, y + transY, start, x + transX, y + h + transY, stop);
        } else {
            gradient = new GradientPaint (x + transX, y + transY, start, x + w + transX, y + transY, stop);
        }
        Paint oldPaint = getGraphics2D ().getPaint ();
        getGraphics2D ().setPaint (gradient);
        getGraphics2D ().fill (new Rectangle2D.Double (x + transX, y + transY, w, h));
        getGraphics2D ().setPaint (oldPaint);
    }

    public RenderedImage drawRenderedImage (RenderedImage srcImage, Rectangle rect, RenderingListener listener) {
        RenderInfo info = srcImage.getRenderInfo ();
        info.setValues (rect.width, rect.height, info.shouldMaintainAspectRatio (), info.shouldAntiAlias (), info.getBackgroundColor (), info.getForegroundColor ());
        RenderedImage img = srcImage.getNewRenderedImage (info);
        BufferedImage bufImg = (BufferedImage) srcImage.getAdapter (BufferedImage.class);
        if (bufImg == null) {
            bufImg = ImageConverter.convert (srcImage.getSWTImage ());
        }
        int x = rect.x + transX;
        int y = rect.y + transY + rect.height - bufImg.getHeight ();
        checkState ();
        getGraphics2D ().drawImage (bufImg, new AffineTransform (1f, 0f, 0f, 1f, x, y), null);
        return img;
    }

    public boolean shouldAllowDelayRender () {
        return false;
    }

    public Dimension getMaximumRenderSize () {
        return null;
    }

    protected Point getTranslationOffset () {
        return new Point (transX, transY);
    }

    public int getAntialias () {
        Object antiAlias = getGraphics2D ().getRenderingHint (RenderingHints.KEY_ANTIALIASING);
        if (antiAlias != null) {
            if (antiAlias.equals (RenderingHints.VALUE_ANTIALIAS_ON)) return SWT.ON;
            else if (antiAlias.equals (RenderingHints.VALUE_ANTIALIAS_OFF)) return SWT.OFF;
            else if (antiAlias.equals (RenderingHints.VALUE_ANTIALIAS_DEFAULT)) return SWT.DEFAULT;

        }
        return SWT.DEFAULT;
    }

    public void setAntialias (int value) {
        if (value == SWT.ON) {
            getGraphics2D ().setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        } else if (value == SWT.OFF) {
            getGraphics2D ().setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
        }

    }

    public int getAlpha () {
        return swtGraphics.getAlpha ();
    }

    public void setAlpha (int alpha) {
        swtGraphics.setAlpha (alpha);
        currentState.alpha = alpha;
        Composite composite = getGraphics2D ().getComposite ();
        if (composite instanceof AlphaComposite) {
            AlphaComposite newComposite = AlphaComposite.getInstance (((AlphaComposite) composite).getRule (), (float) alpha / (float) 255);
            getGraphics2D ().setComposite (newComposite);
        }
    }

}

