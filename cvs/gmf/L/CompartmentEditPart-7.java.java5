package org.eclipse.gmf.graphdef.editor.edit.parts;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.StackLayout;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gmf.graphdef.editor.edit.policies.CompartmentCanonicalEditPolicy;

import org.eclipse.gmf.graphdef.editor.edit.policies.CompartmentGraphicalNodeEditPolicy;

import org.eclipse.gmf.graphdef.editor.edit.policies.CompartmentItemSemanticEditPolicy;

import org.eclipse.gmf.graphdef.editor.edit.policies.GMFGraphTextSelectionEditPolicy;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;

import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;

import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;

import org.eclipse.gmf.runtime.notation.View;

public class CompartmentEditPart extends ShapeNodeEditPart {
    public static final int VISUAL_ID = 1001;
    protected IFigure contentPane;
    protected IFigure primaryShape;

    public CompartmentEditPart (View view) {
        super (view);
    }

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicyRoles.SEMANTIC_ROLE, new CompartmentItemSemanticEditPolicy ());
        installEditPolicy (EditPolicy.GRAPHICAL_NODE_ROLE, new CompartmentGraphicalNodeEditPolicy ());
        installEditPolicy (EditPolicyRoles.CANONICAL_ROLE, new CompartmentCanonicalEditPolicy ());
        installEditPolicy (EditPolicy.LAYOUT_ROLE, new ConstrainedToolbarLayoutEditPolicy () {

            protected EditPolicy createChildEditPolicy (EditPart child) {
                if (child.getEditPolicy (EditPolicy.PRIMARY_DRAG_ROLE) == null) {
                    if (child instanceof ITextAwareEditPart) {
                        return new GMFGraphTextSelectionEditPolicy ();
                    }
                }
                return super.createChildEditPolicy (child);
            }

        }

        );
    }

    protected IFigure createNodeShape () {
        DiagramElementFigure figure = new DiagramElementFigure ();
        return primaryShape = figure;
    }

    public DiagramElementFigure getPrimaryShape () {
        return (DiagramElementFigure) primaryShape;
    }

    protected boolean addFixedChild (EditPart childEditPart) {
        if (childEditPart instanceof Compartment_nameEditPart) {
            ((Compartment_nameEditPart) childEditPart).setLabel (getPrimaryShape ().getFigureDiagramElementFigure_NameLabel ());
            return true;
        }
        return false;
    }

    protected NodeFigure createNodePlate () {
        return new DefaultSizeNodeFigure (getMapMode ().DPtoLP (40), getMapMode ().DPtoLP (40));
    }

    protected NodeFigure createNodeFigure () {
        NodeFigure figure = createNodePlate ();
        figure.setLayoutManager (new StackLayout ());
        IFigure shape = createNodeShape ();
        figure.add (shape);
        contentPane = setupContentPane (shape);
        return figure;
    }

    protected IFigure setupContentPane (IFigure nodeShape) {
        if (nodeShape.getLayoutManager () == null) {
            ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout ();
            layout.setSpacing (getMapMode ().DPtoLP (5));
            nodeShape.setLayoutManager (layout);
        }
        return nodeShape;
    }

    public IFigure getContentPane () {
        if (contentPane != null) {
            return contentPane;
        }
        return super.getContentPane ();
    }

    public EditPart getPrimaryChildEditPart () {
        return getChildBySemanticHint (GMFGraphVisualIDRegistry.getType (Compartment_nameEditPart.VISUAL_ID));
    }

    protected void addChildVisual (EditPart childEditPart, int index) {
        if (! addFixedChild (childEditPart)) {
            super.addChildVisual (childEditPart, - 1);
        }
    }

    public class DiagramElementFigure extends org.eclipse.draw2d.RectangleFigure {

        public DiagramElementFigure () {
            createContents ();
        }

        private void createContents () {
            org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel fig_0 = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel ();
            setFigureDiagramElementFigure_NameLabel (fig_0);
            Object layData0 = null;
            this.add (fig_0, layData0);
        }

        private org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel fDiagramElementFigure_NameLabel;

        public org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel getFigureDiagramElementFigure_NameLabel () {
            return fDiagramElementFigure_NameLabel;
        }

        private void setFigureDiagramElementFigure_NameLabel (org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel fig) {
            fDiagramElementFigure_NameLabel = fig;
        }

        private boolean myUseLocalCoordinates = false;

        protected boolean useLocalCoordinates () {
            return myUseLocalCoordinates;
        }

        protected void setUseLocalCoordinates (boolean useLocalCoordinates) {
            myUseLocalCoordinates = useLocalCoordinates;
        }

    }

}

