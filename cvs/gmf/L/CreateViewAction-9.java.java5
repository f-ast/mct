package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.RequestConstants;

import org.eclipse.gef.requests.CreateRequest;

import org.eclipse.gmf.runtime.diagram.core.util.ViewType;

import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;

import org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.resource.ImageDescriptor;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.swt.widgets.Display;

import org.eclipse.ui.IWorkbenchPage;

public class CreateViewAction extends DiagramAction {
    protected String semanticHint;

    public CreateViewAction (IWorkbenchPage workbenchPage, String actionId, String semanticHint, String label, ImageDescriptor imageDescriptor) {
        super (workbenchPage);
        setId (actionId);
        setSemanticHint (semanticHint);
        setText (label);
        setToolTipText (label);
        setImageDescriptor (imageDescriptor);
    }

    protected Request createTargetRequest () {
        ViewDescriptor viewDescriptor;
        if (getId ().equals (ActionIds.ACTION_ADD_NOTE)) {
            viewDescriptor = new ViewDescriptor (null, Node.class, ViewType.NOTE, getPreferencesHint ());
        } else {
            viewDescriptor = new ViewDescriptor (null, Node.class, ViewType.TEXT, getPreferencesHint ());
        }
        return new CreateViewRequest (viewDescriptor);
    }

    protected boolean isSelectionListener () {
        return true;
    }

    protected void setSemanticHint (String hint) {
        this.semanticHint = hint;
    }

    protected String getSemanticHint () {
        return this.semanticHint;
    }

    protected void updateTargetRequest () {
        super.updateTargetRequest ();
        CreateViewRequest req = (CreateViewRequest) getTargetRequest ();
        req.setLocation (getMouseLocation ());
    }

    protected void doRun (IProgressMonitor progressMonitor) {
        super.doRun (progressMonitor);
        selectAddedObject ();
    }

    protected void selectAddedObject () {
        Object result = ((CreateRequest) getTargetRequest ()).getNewObject ();
        if (! (result instanceof Collection)) {
            return;
        }
        final List editparts = new ArrayList (1);
        IDiagramGraphicalViewer viewer = getDiagramGraphicalViewer ();
        if (viewer == null) {
            return;
        }
        Map editpartRegistry = viewer.getEditPartRegistry ();
        for (Iterator iter = ((Collection) result).iterator ();
        iter.hasNext ();) {
            Object viewAdaptable = iter.next ();
            if (viewAdaptable instanceof IAdaptable) {
                Object editPart = editpartRegistry.get (((IAdaptable) viewAdaptable).getAdapter (View.class));
                if (editPart != null) editparts.add (editPart);

            }
        }
        if (! editparts.isEmpty ()) {
            viewer.setSelection (new StructuredSelection (editparts));
            Display.getCurrent ().asyncExec (new Runnable () {

                public void run () {
                    EditPart editPart = (EditPart) editparts.get (0);
                    editPart.performRequest (new Request (RequestConstants.REQ_DIRECT_EDIT));
                }

            }

            );
        }
    }

}

