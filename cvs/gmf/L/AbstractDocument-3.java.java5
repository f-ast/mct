package org.eclipse.gmf.runtime.diagram.ui.resources.editor.document;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

public abstract class AbstractDocument implements IDocument {
    protected Object content;
    private long fModificationStamp = IDocument.UNKNOWN_MODIFICATION_STAMP;

    public long getModificationStamp () {
        return fModificationStamp;
    }

    private List fDocumentListeners;
    private List fPrenotifiedDocumentListeners;
    private int fStoppedListenerNotification = 0;
    private DocumentEvent fDeferredDocumentEvent;

    protected void completeInitialization () {
        fDocumentListeners = new ArrayList ();
        fPrenotifiedDocumentListeners = new ArrayList ();
    }

    public void addDocumentListener (IDocumentListener listener) {
        assert listener != null;
        if (! fDocumentListeners.contains (listener)) fDocumentListeners.add (listener);

    }

    public void removeDocumentListener (IDocumentListener listener) {
        assert listener != null;
        fDocumentListeners.remove (listener);
    }

    public void addPrenotifiedDocumentListener (IDocumentListener listener) {
        assert listener != null;
        if (! fPrenotifiedDocumentListeners.contains (listener)) fPrenotifiedDocumentListeners.add (listener);

    }

    public void removePrenotifiedDocumentListener (IDocumentListener listener) {
        assert listener != null;
        fPrenotifiedDocumentListeners.remove (listener);
    }

    public Object getContent () {
        return content;
    }

    public void setContent (Object documentContent) {
        setContent (documentContent, getNextModificationStamp ());
    }

    public void setContent (Object documentContent, long modificationStamp) {
        DocumentEvent changed = new DocumentEvent (this, DocumentEvent.CONTENT_REPLACED, documentContent);
        DocumentEvent changing = new DocumentEvent (this, DocumentEvent.CONTENT_REPLACED, content);
        fireDocumentAboutToBeChanged (changed);
        content = documentContent;
        fModificationStamp = modificationStamp;
        changed.fModificationStamp = fModificationStamp;
        changing.fModificationStamp = fModificationStamp;
        fireDocumentChanged (changing);
    }

    private long getNextModificationStamp () {
        if (fModificationStamp == Long.MAX_VALUE || fModificationStamp == IDocument.UNKNOWN_MODIFICATION_STAMP) return 0;

        return fModificationStamp + 1;
    }

    protected void fireDocumentAboutToBeChanged (DocumentEvent event) {
        if (fPrenotifiedDocumentListeners.size () > 0) {
            List list = new ArrayList (fPrenotifiedDocumentListeners);
            Iterator e = list.iterator ();
            while (e.hasNext ()) {
                IDocumentListener l = (IDocumentListener) e.next ();
                l.documentAboutToBeChanged (event);
            }
        }
        if (fDocumentListeners.size () > 0) {
            List list = new ArrayList (fDocumentListeners);
            Iterator e = list.iterator ();
            while (e.hasNext ()) {
                IDocumentListener l = (IDocumentListener) e.next ();
                l.documentAboutToBeChanged (event);
            }
        }
    }

    protected void fireDocumentChanged (DocumentEvent event) {
        if (fStoppedListenerNotification == 0) doFireDocumentChanged (event);
        else fDeferredDocumentEvent = event;

    }

    protected void doFireDocumentChanged (DocumentEvent event) {
        if (fPrenotifiedDocumentListeners.size () > 0) {
            List list = new ArrayList (fPrenotifiedDocumentListeners);
            Iterator e = list.iterator ();
            while (e.hasNext ()) {
                IDocumentListener l = (IDocumentListener) e.next ();
                l.documentChanged (event);
            }
        }
        if (fDocumentListeners.size () > 0) {
            List list = new ArrayList (fDocumentListeners);
            Iterator e = list.iterator ();
            while (e.hasNext ()) {
                IDocumentListener l = (IDocumentListener) e.next ();
                l.documentChanged (event);
            }
        }
    }

    public void resumeListenerNotification () {
        -- fStoppedListenerNotification;
        if (fStoppedListenerNotification == 0) {
            resumeDocumentListenerNotification ();
        }
    }

    public void stopListenerNotification () {
        ++ fStoppedListenerNotification;
    }

    private void resumeDocumentListenerNotification () {
        if (fDeferredDocumentEvent != null) {
            DocumentEvent event = fDeferredDocumentEvent;
            fDeferredDocumentEvent = null;
            doFireDocumentChanged (event);
        }
    }

}

