package org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.draw2d.figures;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.PointList;

import org.eclipse.draw2d.geometry.PrecisionPoint;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.draw2d.ui.geometry.PrecisionPointList;

public class GeoShapeHexagonFigure extends GeoShapePolygonFigure {

    public GeoShapeHexagonFigure (int width, int height, int spacing) {
        super (width, height, spacing);
    }

    public GeoShapeHexagonFigure (int height, int spacing) {
        super ((int) Math.round (2 * height / Math.sqrt (3)), height, spacing);
    }

    protected PointList calculatePoints (Rectangle rect) {
        PointList points = new PrecisionPointList ();
        Point p1 = new PrecisionPoint (rect.preciseX () + rect.preciseWidth () - 1, rect.preciseY () + rect.preciseHeight () / 2);
        Point p2 = new PrecisionPoint (rect.preciseX () + 0.75 * rect.preciseWidth (), rect.preciseY ());
        Point p3 = new PrecisionPoint (rect.preciseX () + rect.preciseWidth () / 4, rect.preciseY ());
        Point p4 = new PrecisionPoint (rect.preciseX (), rect.preciseY () + rect.preciseHeight () / 2);
        Point p5 = new PrecisionPoint (p3.preciseX (), rect.preciseY () + rect.preciseHeight () - 1);
        Point p6 = new PrecisionPoint (p2.preciseX (), p5.preciseY ());
        points.addPoint (p1);
        points.addPoint (p2);
        points.addPoint (p3);
        points.addPoint (p4);
        points.addPoint (p5);
        points.addPoint (p6);
        points.addPoint (p1);
        return points;
    }

}

