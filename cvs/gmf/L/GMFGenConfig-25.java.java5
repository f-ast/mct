package org.eclipse.gmf.internal.codegen.util;

import org.eclipse.emf.ecore.EAttribute;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenStandardPreferencePage;

import org.eclipse.gmf.internal.common.reconcile.Copier;

import org.eclipse.gmf.internal.common.reconcile.Decision;

import org.eclipse.gmf.internal.common.reconcile.DefaultDecision;

import org.eclipse.gmf.internal.common.reconcile.Matcher;

import org.eclipse.gmf.internal.common.reconcile.ReconcilerConfigBase;

import org.eclipse.gmf.internal.common.reconcile.ReflectiveMatcher;

import org.eclipse.gmf.internal.common.reconcile.StringPatternDecision;

public class GMFGenConfig extends ReconcilerConfigBase {

    public GMFGenConfig () {
        final GMFGenPackage GMFGEN = GMFGenPackage.eINSTANCE;
        setMatcher (GMFGEN.getGenEditorGenerator (), ALWAYS_MATCH);
        preserveIfSet (GMFGEN.getGenEditorGenerator_CopyrightText ());
        preserveIfSet (GMFGEN.getGenEditorGenerator_PackageNamePrefix ());
        preserveIfSet (GMFGEN.getGenEditorGenerator_DomainFileExtension ());
        preserveIfSet (GMFGEN.getGenEditorGenerator_DiagramFileExtension ());
        preserveIfSet (GMFGEN.getGenEditorGenerator_SameFileForDiagramAndModel ());
        preserveIfSet (GMFGEN.getGenEditorGenerator_ModelID ());
        preserveIfSet (GMFGEN.getGenEditorGenerator_DynamicTemplates ());
        preserveIfSet (GMFGEN.getGenEditorGenerator_TemplateDirectory ());
        setMatcher (GMFGEN.getGenPlugin (), ALWAYS_MATCH);
        preserveIfSet (GMFGEN.getGenPlugin_ID ());
        preserveIfSet (GMFGEN.getGenPlugin_Name ());
        preserveIfSet (GMFGEN.getGenPlugin_Provider ());
        preserveIfSet (GMFGEN.getGenPlugin_Version ());
        preserveIfSet (GMFGEN.getGenPlugin_ActivatorClassName ());
        preserveIfSet (GMFGEN.getGenPlugin_PrintingEnabled ());
        setMatcher (GMFGEN.getGenEditorView (), ALWAYS_MATCH);
        preserveIfSet (GMFGEN.getGenEditorView_IconPath ());
        preserveIfSet (GMFGEN.getGenEditorView_ClassName ());
        preserveIfSet (GMFGEN.getGenEditorView_ID ());
        setMatcher (GMFGEN.getGenDiagram (), ALWAYS_MATCH);
        restoreOld (GMFGEN.getGenDiagram (), GMFGEN.getGenCommonBase_NotationViewFactoryClassName ());
        restoreOld (GMFGEN.getGenDiagram (), GMFGEN.getGenCommonBase_EditPartClassName ());
        restoreOld (GMFGEN.getGenDiagram (), GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName ());
        restoreOld (GMFGEN.getGenDiagram (), GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getGenDiagram_Synchronized ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getMeasurementUnit_Units ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getShortcuts_ContainsShortcutsTo ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getShortcuts_ShortcutsProvidedFor ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getEditorCandies_CreationWizardIconPath ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getEditorCandies_CreationWizardCategoryID ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getEditorCandies_EditingDomainID ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_ValidationEnabled ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_LiveValidationUIFeedback ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_ValidationDecorators ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_ValidationDecoratorProviderClassName ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_ValidationDecoratorProviderPriority ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_ValidationProviderClassName ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_ValidationProviderPriority ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_MetricProviderPriority ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_MetricProviderClassName ());
        for (EClass node : new EClass [] {GMFGEN.getGenTopLevelNode (), GMFGEN.getGenChildNode (), GMFGEN.getGenChildLabelNode (), GMFGEN.getGenChildSideAffixedNode ()}) {
            setMatcher (node, new VisualIDMatcher ());
            restoreOld (node, GMFGEN.getGenCommonBase_NotationViewFactoryClassName ());
            restoreOld (node, GMFGEN.getGenCommonBase_EditPartClassName ());
            restoreOld (node, GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName ());
            restoreOld (node, GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName ());
            restoreOld (node, GMFGEN.getGenNode_PrimaryDragEditPolicyQualifiedClassName ());
            restoreOld (node, GMFGEN.getGenNode_GraphicalNodeEditPolicyClassName ());
            restoreOld (node, GMFGEN.getGenNode_CreateCommandClassName ());
        }
        setMatcher (GMFGEN.getGenCompartment (), new VisualIDMatcher ());
        restoreOld (GMFGEN.getGenCompartment (), GMFGEN.getGenCommonBase_NotationViewFactoryClassName ());
        restoreOld (GMFGEN.getGenCompartment (), GMFGEN.getGenCommonBase_EditPartClassName ());
        restoreOld (GMFGEN.getGenCompartment (), GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName ());
        restoreOld (GMFGEN.getGenCompartment (), GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName ());
        restoreOld (GMFGEN.getGenCompartment_ListLayout ());
        preserveIfSet (GMFGEN.getGenCompartment_CanCollapse ());
        preserveIfSet (GMFGEN.getGenCompartment_HideIfEmpty ());
        preserveIfSet (GMFGEN.getGenCompartment_NeedsTitle ());
        setMatcher (GMFGEN.getGenLink (), new VisualIDMatcher ());
        restoreOld (GMFGEN.getGenLink (), GMFGEN.getGenCommonBase_NotationViewFactoryClassName ());
        restoreOld (GMFGEN.getGenLink (), GMFGEN.getGenCommonBase_EditPartClassName ());
        restoreOld (GMFGEN.getGenLink (), GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName ());
        restoreOld (GMFGEN.getGenLink_CreateCommandClassName ());
        restoreOld (GMFGEN.getGenLink_ReorientCommandClassName ());
        preserveIfSet (GMFGEN.getGenLink_IncomingCreationAllowed ());
        preserveIfSet (GMFGEN.getGenLink_OutgoingCreationAllowed ());
        preserveIfSet (GMFGEN.getGenLink_ViewDirectionAlignedWithModel ());
        preserveIfSet (GMFGEN.getGenLink_TreeBranch ());
        for (EClass label : new EClass [] {GMFGEN.getGenLinkLabel (), GMFGEN.getGenNodeLabel (), GMFGEN.getGenExternalNodeLabel ()}) {
            setMatcher (label, new VisualIDMatcher ());
            restoreOld (label, GMFGEN.getGenCommonBase_NotationViewFactoryClassName ());
            restoreOld (label, GMFGEN.getGenCommonBase_EditPartClassName ());
            restoreOld (label, GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName ());
        }
        setMatcherForAllSubclasses (GMFGEN.getViewmap (), ALWAYS_MATCH);
        setMatcher (GMFGEN.getDefaultSizeAttributes (), ALWAYS_MATCH);
        setCopier (GMFGEN.getDefaultSizeAttributes (), Copier.COMPLETE_COPY_NO_CROSSREF);
        preserveIfSet (GMFGEN.getDefaultSizeAttributes_Height ());
        preserveIfSet (GMFGEN.getDefaultSizeAttributes_Width ());
        setMatcherForAllSubclasses (GMFGEN.getAttributes (), ALWAYS_MATCH);
        setCopierForAllSubclasses (GMFGEN.getAttributes (), Copier.COMPLETE_COPY_NO_CROSSREF);
        setMatcher (GMFGEN.getCustomBehaviour (), ALWAYS_MATCH);
        setCopier (GMFGEN.getCustomBehaviour (), Copier.COMPLETE_COPY_NO_CROSSREF);
        setMatcher (GMFGEN.getOpenDiagramBehaviour (), ALWAYS_MATCH);
        class KeepOldIfNewIsByPatternOrNotSet extends StringPatternDecision {

            KeepOldIfNewIsByPatternOrNotSet (EAttribute feature, String pattern) {
                super (pattern, feature);
            }

            @Override
            public void apply (EObject current, EObject old) {
                String newValue = (String) current.eGet (getFeature ());
                if (isValueSet (old) && (newValue == null || myPattern.matcher (newValue).matches ())) {
                    preserveOld (current, old);
                } else {
                    acceptNew (current, old);
                }
            }

        }

        addDecision (GMFGEN.getOpenDiagramBehaviour (), new KeepOldIfNewIsByPatternOrNotSet (GMFGEN.getOpenDiagramBehaviour_DiagramKind (), "^FIXME.*"));
        addDecision (GMFGEN.getOpenDiagramBehaviour (), new KeepOldIfNewIsByPatternOrNotSet (GMFGEN.getOpenDiagramBehaviour_EditorID (), "^FIXME.*"));
        preserveIfSet (GMFGEN.getOpenDiagramBehaviour_EditPolicyClassName ());
        preserveIfSet (GMFGEN.getOpenDiagramBehaviour_OpenAsEclipseEditor ());
        setMatcher (GMFGEN.getMetamodelType (), ALWAYS_MATCH);
        restoreOld (GMFGEN.getMetamodelType_EditHelperClassName ());
        preserveIfSet (GMFGEN.getMetamodelType (), GMFGEN.getElementType_DisplayName ());
        preserveIfSet (GMFGEN.getMetamodelType (), GMFGEN.getElementType_DefinedExternally ());
        setMatcher (GMFGEN.getSpecializationType (), ALWAYS_MATCH);
        restoreOld (GMFGEN.getSpecializationType_EditHelperAdviceClassName ());
        preserveIfSet (GMFGEN.getSpecializationType (), GMFGEN.getElementType_DisplayName ());
        preserveIfSet (GMFGEN.getSpecializationType (), GMFGEN.getElementType_DefinedExternally ());
        setMatcher (GMFGEN.getGenPropertySheet (), ALWAYS_MATCH);
        preserveIfSet (GMFGEN.getGenPropertySheet_ReadOnly ());
        preserveIfSet (GMFGEN.getGenPropertySheet_NeedsCaption ());
        preserveIfSet (GMFGEN.getGenPropertySheet_PackageName ());
        preserveIfSet (GMFGEN.getGenPropertySheet_LabelProviderClassName ());
        setMatcherForAllSubclasses (GMFGEN.getGenPropertyTab (), new ReflectiveMatcher (GMFGEN.getGenPropertyTab_ID ()));
        preserveIfSet (GMFGEN.getGenStandardPropertyTab (), GMFGEN.getGenPropertyTab_Label ());
        addDecision (GMFGEN.getGenCustomPropertyTab (), new KeepOldIfNewIsByPatternOrNotSet (GMFGEN.getGenPropertyTab_Label (), "^Core$"));
        preserveIfSet (GMFGEN.getGenCustomPropertyTab_ClassName ());
        setCopier (GMFGEN.getGenCustomPropertyTab (), Copier.COMPLETE_COPY_NO_CROSSREF);
        setMatcher (GMFGEN.getGenNavigator (), ALWAYS_MATCH);
        preserveIfRemoved (GMFGEN.getGenEditorGenerator (), GMFGEN.getGenEditorGenerator_Navigator ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_GenerateDomainModelNavigator ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainContentExtensionID ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainContentExtensionName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainContentExtensionPriority ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainContentProviderClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainLabelProviderClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainModelElementTesterClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainNavigatorItemClassName ());
        preserveIfSet (GMFGEN.getGenNavigator_ContentExtensionID ());
        preserveIfSet (GMFGEN.getGenNavigator_ContentExtensionName ());
        preserveIfSet (GMFGEN.getGenNavigator_ContentExtensionPriority ());
        preserveIfSet (GMFGEN.getGenNavigator_LinkHelperExtensionID ());
        preserveIfSet (GMFGEN.getGenNavigator_SorterExtensionID ());
        preserveIfSet (GMFGEN.getGenNavigator_ActionProviderID ());
        preserveIfSet (GMFGEN.getGenNavigator_ContentProviderClassName ());
        preserveIfSet (GMFGEN.getGenNavigator_LabelProviderClassName ());
        preserveIfSet (GMFGEN.getGenNavigator_LinkHelperClassName ());
        preserveIfSet (GMFGEN.getGenNavigator_SorterClassName ());
        preserveIfSet (GMFGEN.getGenNavigator_ActionProviderClassName ());
        preserveIfSet (GMFGEN.getGenNavigator_AbstractNavigatorItemClassName ());
        preserveIfSet (GMFGEN.getGenNavigator_NavigatorGroupClassName ());
        preserveIfSet (GMFGEN.getGenNavigator_NavigatorItemClassName ());
        preserveIfSet (GMFGEN.getGenNavigator_UriInputTesterClassName ());
        preserveIfSet (GMFGEN.getGenNavigator_PackageName ());
        setMatcher (GMFGEN.getGenDiagramPreferences (), ALWAYS_MATCH);
        setCopier (GMFGEN.getGenDiagramPreferences (), Copier.COMPLETE_COPY_NO_CROSSREF);
        setMatcher (GMFGEN.getGenApplication (), ALWAYS_MATCH);
        preserveIfSet (GMFGEN.getGenApplication_ID ());
        preserveIfSet (GMFGEN.getGenApplication_Title ());
        preserveIfSet (GMFGEN.getGenApplication_PackageName ());
        preserveIfSet (GMFGEN.getGenApplication_ClassName ());
        preserveIfSet (GMFGEN.getGenApplication_PerspectiveId ());
        preserveIfSet (GMFGEN.getGenApplication_SupportFiles ());
        setMatcher (GMFGEN.getGenStandardPreferencePage (), new Matcher () {

            public boolean match (EObject current, EObject old) {
                assert current instanceof GenStandardPreferencePage;
                assert old instanceof GenStandardPreferencePage;
                GenStandardPreferencePage curPage = (GenStandardPreferencePage) current;
                GenStandardPreferencePage oldPage = (GenStandardPreferencePage) old;
                if (curPage.getParent () == null) {
                    return oldPage.getParent () == null;
                }
                return curPage.getKind () == oldPage.getKind ();
            }

        }

        );
        restoreOld (GMFGEN.getGenStandardPreferencePage (), GMFGEN.getGenPreferencePage_ID ());
        restoreOld (GMFGEN.getGenStandardPreferencePage (), GMFGEN.getGenPreferencePage_Name ());
        setMatcher (GMFGEN.getGenCustomPreferencePage (), GMFGEN.getGenCustomPreferencePage_QualifiedClassName ());
        restoreOld (GMFGEN.getGenCustomPreferencePage_GenerateBoilerplate ());
        setCopier (GMFGEN.getGenCustomPreferencePage (), Copier.COMPLETE_COPY_NO_CROSSREF);
        setMatcher (GMFGEN.getGenPreference (), GMFGEN.getGenPreference_Name ());
        preserveIfSet (GMFGEN.getGenPreference_Key ());
        preserveIfSet (GMFGEN.getGenPreference_DefaultValue ());
        setCopier (GMFGEN.getGenPreference (), Copier.COMPLETE_COPY_NO_CROSSREF);
        setMatcher (GMFGEN.getDynamicModelAccess (), ALWAYS_MATCH);
        preserveIfSet (GMFGEN.getDynamicModelAccess_ClassName ());
        preserveIfSet (GMFGEN.getDynamicModelAccess_PackageName ());
        setCopier (GMFGEN.getDynamicModelAccess (), Copier.COMPLETE_COPY_NO_CROSSREF);
        setMatcher (GMFGEN.getGenExpressionProviderContainer (), ALWAYS_MATCH);
        setMatcher (GMFGEN.getGenJavaExpressionProvider (), ALWAYS_MATCH);
        preserveIfSet (GMFGEN.getGenJavaExpressionProvider_InjectExpressionBody ());
        setMatcher (GMFGEN.getGenParsers (), ALWAYS_MATCH);
        preserveIfSet (GMFGEN.getGenParsers_ClassName ());
        preserveIfSet (GMFGEN.getGenParsers_PackageName ());
        preserveIfSet (GMFGEN.getGenParsers_ProviderPriority ());
        preserveIfSet (GMFGEN.getGenParsers_ExtensibleViaService ());
        setMatcher (GMFGEN.getFeatureLabelModelFacet (), ALWAYS_MATCH);
        setMatcher (GMFGEN.getDesignLabelModelFacet (), ALWAYS_MATCH);
        setMatcher (GMFGEN.getLabelModelFacet (), ALWAYS_MATCH);
        setMatcher (GMFGEN.getCustomParser (), new ReflectiveMatcher (GMFGEN.getCustomParser_QualifiedName ()));
        setCopier (GMFGEN.getCustomParser (), Copier.COMPLETE_COPY_WITH_CROSSREF);
        setMatcher (GMFGEN.getGenContextMenu (), new VisualIDMatcher (GMFGEN.getGenContextMenu_Context ()));
        setCopier (GMFGEN.getGenContextMenu (), Copier.COMPLETE_COPY_WITH_CROSSREF);
        setMatcher (GMFGEN.getGenCustomAction (), new ReflectiveMatcher (GMFGEN.getGenCustomAction_QualifiedClassName ()));
        preserveIfSet (GMFGEN.getGenCustomAction_GenerateBoilerplate ());
        preserveIfSet (GMFGEN.getGenCustomAction_Name ());
        setCopier (GMFGEN.getGenCustomAction (), Copier.COMPLETE_COPY_NO_CROSSREF);
        setMatcher (GMFGEN.getGenCommandAction (), new ReflectiveMatcher (GMFGEN.getGenCommandAction_CommandIdentifier ()));
        preserveIfSet (GMFGEN.getGenCommandAction_Name ());
        setCopier (GMFGEN.getGenCommandAction (), Copier.COMPLETE_COPY_NO_CROSSREF);
        setMatcher (GMFGEN.getGenSeparator (), new ReflectiveMatcher (GMFGEN.getGenSeparator_GroupName ()));
        setMatcher (GMFGEN.getGenGroupMarker (), new ReflectiveMatcher (GMFGEN.getGenGroupMarker_GroupName ()));
    }

    private void restoreOld (EClass eClass, EAttribute feature) {
        addDecision (eClass, new Decision.ALWAYS_OLD (feature));
    }

    private void restoreOld (EAttribute feature) {
        assert ! feature.getEContainingClass ().isAbstract ();
        restoreOld (feature.getEContainingClass (), feature);
    }

    private void preserveIfSet (EAttribute feature) {
        assert ! feature.getEContainingClass ().isAbstract ();
        addDecision (feature.getEContainingClass (), new DefaultDecision (feature));
    }

    private void preserveIfSet (EClass eClass, EAttribute feature) {
        addDecision (eClass, new DefaultDecision (feature));
    }

    private void preserveIfRemoved (EClass eClass, EStructuralFeature feature) {
        addDecision (eClass, new DefaultDecision (feature, true));
    }

}

