package org.eclipse.gmf.runtime.emf.type.core;

import java.util.ArrayList;

import java.util.Arrays;

import java.util.Collection;

import java.util.Collections;

import java.util.HashMap;

import java.util.HashSet;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import java.util.Set;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.core.runtime.Platform;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.emf.type.core.edithelper.IEditHelperAdvice;

import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePlugin;

import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePluginStatusCodes;

import org.eclipse.gmf.runtime.emf.type.core.internal.descriptors.ElementTypeDescriptor;

import org.eclipse.gmf.runtime.emf.type.core.internal.descriptors.ElementTypeFactoryDescriptor;

import org.eclipse.gmf.runtime.emf.type.core.internal.descriptors.ElementTypeXmlConfig;

import org.eclipse.gmf.runtime.emf.type.core.internal.descriptors.MetamodelDescriptor;

import org.eclipse.gmf.runtime.emf.type.core.internal.descriptors.MetamodelTypeDescriptor;

import org.eclipse.gmf.runtime.emf.type.core.internal.descriptors.SpecializationTypeDescriptor;

import org.eclipse.gmf.runtime.emf.type.core.internal.impl.DefaultMetamodelType;

import org.eclipse.gmf.runtime.emf.type.core.internal.impl.SpecializationTypeRegistry;

import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.EMFTypeCoreMessages;

public class ElementTypeRegistry {
    private static final String ELEMENT_TYPES_EXT_P_NAME = "elementTypes";
    private static final IElementType [] EMPTY_ELEMENT_TYPE_ARRAY = new IElementType [] {};
    private final SpecializationTypeRegistry specializationTypeRegistry;
    private final Map metamodelTypeDescriptorsByNsURI;
    private final Map metamodelTypeDescriptorsById;
    private final Map elementTypeFactoryMap;
    private final List elementTypeRegistryListeners;
    private static ElementTypeRegistry INSTANCE;

    private ElementTypeRegistry (IConfigurationElement [] configs) {
        super ();
        specializationTypeRegistry = new SpecializationTypeRegistry ();
        metamodelTypeDescriptorsByNsURI = new HashMap ();
        metamodelTypeDescriptorsById = new HashMap ();
        elementTypeFactoryMap = new HashMap ();
        elementTypeRegistryListeners = new ArrayList ();
        registerNullElementType ();
        load (configs);
    }

    public static ElementTypeRegistry getInstance () {
        if (INSTANCE == null) {
            IConfigurationElement [] configs = Platform.getExtensionRegistry ().getConfigurationElementsFor (EMFTypePlugin.getPluginId (), ELEMENT_TYPES_EXT_P_NAME);
            INSTANCE = new ElementTypeRegistry (configs);
        }
        return INSTANCE;
    }

    public IEditHelperAdvice [] getEditHelperAdvice (IElementType type) {
        IClientContext clientContext = ClientContextManager.getInstance ().getBinding (type);
        return getEditHelperAdvice (type, clientContext);
    }

    public IEditHelperAdvice [] getEditHelperAdvice (IElementType type, IClientContext clientContext) {
        IClientContext context = (clientContext == null) ? ClientContextManager.getDefaultClientContext () : clientContext;
        EClass eClass = type.getEClass ();
        MetamodelTypeDescriptor metamodelType = (eClass != null) ? getMetamodelTypeDescriptor (eClass, context) : null;
        List result = specializationTypeRegistry.getEditHelperAdvice (type, metamodelType, context);
        return (IEditHelperAdvice []) result.toArray (new IEditHelperAdvice [] {});
    }

    public IEditHelperAdvice [] getEditHelperAdvice (EObject eObject, IClientContext clientContext) {
        Collection result;
        MetamodelTypeDescriptor desc = getMetamodelTypeDescriptor (eObject, clientContext);
        if (desc == null) {
            result = specializationTypeRegistry.getEditHelperAdvice (eObject, DefaultMetamodelType.getDescriptorInstance (), clientContext);
        } else {
            result = specializationTypeRegistry.getEditHelperAdvice (eObject, desc, clientContext);
        }
        return (IEditHelperAdvice []) result.toArray (new IEditHelperAdvice [] {});
    }

    public IEditHelperAdvice [] getEditHelperAdvice (EObject eObject) {
        IClientContext clientContext = ClientContextManager.getInstance ().getClientContextFor (eObject);
        return getEditHelperAdvice (eObject, clientContext);
    }

    public IEditHelperAdvice [] getEditHelperAdvice (Object o) {
        if (o instanceof EObject) {
            return getEditHelperAdvice ((EObject) o);
        } else if (o instanceof IElementType) {
            return getEditHelperAdvice ((IElementType) o);
        } else if (o instanceof IEditHelperContext) {
            IEditHelperContext editHelperContext = (IEditHelperContext) o;
            IClientContext clientContext = editHelperContext.getClientContext ();
            IElementType elementType = editHelperContext.getElementType ();
            EObject eObject = editHelperContext.getEObject ();
            if (clientContext != null) {
                if (elementType != null) {
                    return getEditHelperAdvice (elementType, clientContext);
                } else if (eObject != null) {
                    return getEditHelperAdvice (eObject, clientContext);
                }

            } else {
                if (elementType != null) {
                    return getEditHelperAdvice (elementType);
                } else if (eObject != null) {
                    return getEditHelperAdvice (eObject);
                }

            }
        }

        return null;
    }

    public IElementType [] getContainedTypes (EObject eContainer, EReference reference, IClientContext clientContext) {
        Set result = new HashSet ();
        EClass containerEClass = eContainer.eClass ();
        if (reference.isContainment () && (containerEClass.getEAllReferences ().contains (reference))) {
            EClass eType = (EClass) reference.getEType ();
            Set types = getSubtypes (containerEClass.getEPackage (), eType);
            types.add (eType);
            List metamodelTypeDescriptors = getMetamodelTypeDescriptors (types, clientContext);
            for (Iterator i = metamodelTypeDescriptors.iterator ();
            i.hasNext ();) {
                MetamodelTypeDescriptor nextMetamodelTypeDescriptor = (MetamodelTypeDescriptor) i.next ();
                IMetamodelType nextMetamodelType = (IMetamodelType) nextMetamodelTypeDescriptor.getElementType ();
                if (nextMetamodelType != null && ! nextMetamodelType.getEClass ().isAbstract ()) {
                    result.add (nextMetamodelType);
                    Collection specializationDescriptors = specializationTypeRegistry.getMatchingSpecializations (nextMetamodelTypeDescriptor, eContainer, reference, clientContext);
                    for (Iterator j = specializationDescriptors.iterator ();
                    j.hasNext ();) {
                        ElementTypeDescriptor nextDescriptor = (ElementTypeDescriptor) j.next ();
                        IElementType nextElementType = nextDescriptor.getElementType ();
                        if (nextElementType != null) {
                            result.add (nextElementType);
                        }
                    }
                }
            }
        }
        return (IElementType []) result.toArray (EMPTY_ELEMENT_TYPE_ARRAY);
    }

    public IElementType [] getContainedTypes (EObject eContainer, EReference reference) {
        IClientContext clientContext = ClientContextManager.getInstance ().getClientContextFor (eContainer);
        return getContainedTypes (eContainer, reference, clientContext);
    }

    private Set getSubtypes (EPackage pkg, final EClass eType) {
        Set result = new HashSet ();
        List classifiers = pkg.getEClassifiers ();
        for (Iterator i = classifiers.iterator ();
        i.hasNext ();) {
            EClassifier nextClassifier = (EClassifier) i.next ();
            if (nextClassifier instanceof EClass && ((EClass) nextClassifier).getEAllSuperTypes ().contains (eType)) {
                result.add (nextClassifier);
            }
        }
        return result;
    }

    private IMetamodelType getMetamodelType (EClass eClass, IClientContext context) {
        MetamodelTypeDescriptor descriptor = getMetamodelTypeDescriptor (eClass, context);
        if (descriptor != null) {
            return (IMetamodelType) descriptor.getElementType ();
        }
        return null;
    }

    private IMetamodelType getMetamodelType (EObject eObject, IClientContext clientContext) {
        return getMetamodelType (eObject.eClass (), clientContext);
    }

    public IElementType getElementType (Object o) {
        if (o instanceof EObject) {
            return getElementType ((EObject) o);
        } else if (o instanceof IElementType) {
            return (IElementType) o;
        } else if (o instanceof IEditHelperContext) {
            IEditHelperContext editHelperContext = (IEditHelperContext) o;
            IElementType elementType = editHelperContext.getElementType ();
            if (elementType != null) {
                return elementType;
            }
            IClientContext clientContext = editHelperContext.getClientContext ();
            EObject eObject = editHelperContext.getEObject ();
            if (eObject != null) {
                if (clientContext != null) {
                    return getElementType (eObject, clientContext);
                } else {
                    return getElementType (eObject);
                }
            }
        }

        return null;
    }

    public IElementType getElementType (EClass eClass) {
        return getElementType (eClass, null);
    }

    public IElementType getElementType (EClass eClass, IClientContext clientContext) {
        IElementType result = getMetamodelType (eClass, clientContext);
        if (result == null) {
            result = DefaultMetamodelType.getInstance ();
        }
        return result;
    }

    public IElementType getElementType (EObject eObject) {
        IClientContext clientContext = ClientContextManager.getInstance ().getClientContextFor (eObject);
        return getElementType (eObject, clientContext);
    }

    public IElementType getElementType (EObject eObject, IClientContext clientContext) {
        IElementType result = getMetamodelType (eObject, clientContext);
        if (result == null) {
            result = DefaultMetamodelType.getInstance ();
        }
        return result;
    }

    private MetamodelTypeDescriptor getMetamodelTypeDescriptor (EObject eObject, IClientContext context) {
        return getMetamodelTypeDescriptor (eObject.eClass (), context);
    }

    private MetamodelTypeDescriptor getMetamodelTypeDescriptor (EClass eClass, IClientContext context) {
        IClientContext clientContext = context;
        if (clientContext == null) {
            clientContext = ClientContextManager.getDefaultClientContext ();
        }
        Map metamodelTypeDescriptorsByEClass = (Map) metamodelTypeDescriptorsByNsURI.get (eClass.getEPackage ().getNsURI ());
        Collection descriptors = metamodelTypeDescriptorsByEClass != null ? (Collection) metamodelTypeDescriptorsByEClass.get (eClass.getName ()) : null;
        if (descriptors != null) {
            for (Iterator i = descriptors.iterator ();
            i.hasNext ();) {
                MetamodelTypeDescriptor descriptor = (MetamodelTypeDescriptor) i.next ();
                if (clientContext.includes (descriptor)) {
                    return descriptor;
                }
            }
        } else {
            List supertypes = eClass.getEAllSuperTypes ();
            for (int i = supertypes.size () - 1;
            i >= 0; i --) {
                EClass nextEClass = (EClass) supertypes.get (i);
                descriptors = metamodelTypeDescriptorsByEClass != null ? (Collection) metamodelTypeDescriptorsByEClass.get (nextEClass.getName ()) : null;
                if (descriptors != null) {
                    for (Iterator j = descriptors.iterator ();
                    j.hasNext ();) {
                        MetamodelTypeDescriptor descriptor = (MetamodelTypeDescriptor) j.next ();
                        if (clientContext.includes (descriptor)) {
                            return descriptor;
                        }
                    }
                }
            }
        }
        return null;
    }

    public IElementType [] getAllTypesMatching (EObject eObject, IClientContext clientContext) {
        List result = new ArrayList ();
        IMetamodelType metamodelType = getMetamodelType (eObject, clientContext);
        if (metamodelType != null) {
            Collection specializations;
            MetamodelTypeDescriptor desc = getMetamodelTypeDescriptor (eObject, clientContext);
            if (desc == null) {
                specializations = Collections.EMPTY_LIST;
            } else {
                specializations = specializationTypeRegistry.getSpecializationDescriptorsMatching (eObject, desc, clientContext);
            }
            for (Iterator i = specializations.iterator ();
            i.hasNext ();) {
                SpecializationTypeDescriptor next = (SpecializationTypeDescriptor) i.next ();
                IElementType elementType = next.getElementType ();
                if (elementType != null) {
                    result.add (elementType);
                }
            }
            result.add (metamodelType);
            List superTypes = Arrays.asList (metamodelType.getAllSuperTypes ());
            Collections.reverse (superTypes);
            result.addAll (superTypes);
        }
        if (result.isEmpty ()) {
            result.add (DefaultMetamodelType.getInstance ());
        }
        return (IElementType []) result.toArray (EMPTY_ELEMENT_TYPE_ARRAY);
    }

    public IElementType [] getAllTypesMatching (EObject eObject) {
        IClientContext clientContext = ClientContextManager.getInstance ().getClientContextFor (eObject);
        return getAllTypesMatching (eObject, clientContext);
    }

    public IElementType getType (String id) {
        ElementTypeDescriptor typeDescriptor = getTypeDescriptor (id);
        if (typeDescriptor != null) {
            return typeDescriptor.getElementType ();
        } else if (DefaultMetamodelType.ID.equals (id)) {
            return DefaultMetamodelType.getInstance ();
        }

        return null;
    }

    public IElementTypeFactory getElementTypeFactory (String kindName) {
        ElementTypeFactoryDescriptor descriptor = (ElementTypeFactoryDescriptor) elementTypeFactoryMap.get (kindName);
        if (descriptor != null) {
            return descriptor.getElementTypeFactory ();
        }
        return null;
    }

    public boolean register (IMetamodelType metamodelType) {
        if (metamodelType == null || getType (metamodelType.getId ()) != null) {
            return false;
        }
        MetamodelTypeDescriptor descriptor = new MetamodelTypeDescriptor (metamodelType);
        boolean result = register (descriptor);
        if (result) {
            fireElementTypeAddedEvent (new ElementTypeAddedEvent (metamodelType.getId ()));
        }
        return result;
    }

    public boolean register (ISpecializationType specializationType) {
        if (specializationType == null || getType (specializationType.getId ()) != null) {
            return false;
        }
        boolean result = specializationTypeRegistry.registerSpecializationType (specializationType);
        if (result) {
            fireElementTypeAddedEvent (new ElementTypeAddedEvent (specializationType.getId ()));
        }
        return result;
    }

    private void removeInvalidSpecializations () {
        List specializationsToReject = new ArrayList ();
        Collection specializationTypes = specializationTypeRegistry.getSpecializationTypeDescriptors ();
        for (Iterator i = specializationTypes.iterator ();
        i.hasNext ();) {
            SpecializationTypeDescriptor nextSpecialization = (SpecializationTypeDescriptor) i.next ();
            MetamodelTypeDescriptor metamodelTypeDescriptor = getMetamodelTypeDescriptor (nextSpecialization);
            if (metamodelTypeDescriptor == null) {
                specializationsToReject.add (nextSpecialization);
            }
        }
        for (Iterator i = specializationsToReject.iterator ();
        i.hasNext ();) {
            specializationTypeRegistry.removeSpecializationType ((SpecializationTypeDescriptor) i.next ());
        }
    }

    private void loadMetamodel (IConfigurationElement configElement) throws CoreException {
        MetamodelDescriptor descriptor = new MetamodelDescriptor (configElement);
        IConfigurationElement [] typeConfigs = configElement.getChildren ();
        for (int i = 0;
        i < typeConfigs.length; i ++) {
            IConfigurationElement next = typeConfigs [i];
            String name = next.getName ();
            if (name.equals (ElementTypeXmlConfig.E_METAMODEL_TYPE)) {
                registerMetamodelType (next, descriptor);
            } else if (name.equals (ElementTypeXmlConfig.E_SPECIALIZATION_TYPE)) {
                registerSpecializationType (next, descriptor);
            } else if (name.equals (ElementTypeXmlConfig.E_ADVICE_BINDING)) {
                specializationTypeRegistry.registerAdviceBinding (next, descriptor);
            }

        }
    }

    private void registerMetamodelType (IConfigurationElement configElement, MetamodelDescriptor metamodelDescriptor) throws CoreException {
        MetamodelTypeDescriptor descriptor = new MetamodelTypeDescriptor (configElement, metamodelDescriptor);
        register (descriptor);
    }

    private SpecializationTypeDescriptor registerSpecializationType (IConfigurationElement configElement, MetamodelDescriptor metamodelDescriptor) throws CoreException {
        return specializationTypeRegistry.registerSpecializationType (configElement, metamodelDescriptor);
    }

    private boolean register (MetamodelTypeDescriptor typeDescriptor) {
        if (checkForDuplicate (typeDescriptor)) {
            return false;
        }
        String nsURI = typeDescriptor.getNsURI ();
        String eClassName = typeDescriptor.getEClassName ();
        Map metamodelTypeDescriptorsByEClass = (Map) metamodelTypeDescriptorsByNsURI.get (nsURI);
        if (metamodelTypeDescriptorsByEClass == null) {
            metamodelTypeDescriptorsByEClass = new HashMap ();
            metamodelTypeDescriptorsByNsURI.put (nsURI, metamodelTypeDescriptorsByEClass);
        }
        Collection descriptors = (Collection) metamodelTypeDescriptorsByEClass.get (eClassName);
        if (descriptors == null) {
            descriptors = new ArrayList ();
            metamodelTypeDescriptorsByEClass.put (eClassName, descriptors);
        }
        descriptors.add (typeDescriptor);
        metamodelTypeDescriptorsById.put (typeDescriptor.getId (), typeDescriptor);
        return true;
    }

    private void loadElementTypeFactory (IConfigurationElement configElement) throws CoreException {
        ElementTypeFactoryDescriptor descriptor = new ElementTypeFactoryDescriptor (configElement);
        elementTypeFactoryMap.put (descriptor.getKindName (), descriptor);
    }

    private boolean checkForDuplicate (ElementTypeDescriptor typeDescriptor) {
        if (metamodelTypeDescriptorsById.containsKey (typeDescriptor.getId ())) {
            Log.error (EMFTypePlugin.getPlugin (), EMFTypePluginStatusCodes.TYPE_NOT_INITED, EMFTypeCoreMessages.bind (EMFTypeCoreMessages.type_not_init_WARN_, typeDescriptor.getId (), EMFTypeCoreMessages.type_reason_duplicate_id_WARN_));
            return true;
        }
        return false;
    }

    private List getMetamodelTypeDescriptors (Set eClasses, IClientContext context) {
        List result = new ArrayList ();
        for (Iterator i = eClasses.iterator ();
        i.hasNext ();) {
            EClass nextType = (EClass) i.next ();
            MetamodelTypeDescriptor metamodelTypeDescriptor = getMetamodelTypeDescriptor (nextType, context);
            if (metamodelTypeDescriptor != null) {
                result.add (metamodelTypeDescriptor);
            }
        }
        return result;
    }

    private ElementTypeDescriptor getTypeDescriptor (String id) {
        ElementTypeDescriptor typeDescriptor = (ElementTypeDescriptor) metamodelTypeDescriptorsById.get (id);
        if (typeDescriptor == null) {
            typeDescriptor = specializationTypeRegistry.getSpecializationTypeDescriptor (id);
        }
        return typeDescriptor;
    }

    private MetamodelTypeDescriptor getMetamodelTypeDescriptor (SpecializationTypeDescriptor specializationTypeDescriptor) {
        MetamodelTypeDescriptor metamodelTypeDescriptor = null;
        String [] specializedTypeIds = specializationTypeDescriptor.getSpecializationTypeIds ();
        for (int j = 0;
        j < specializedTypeIds.length; j ++) {
            ElementTypeDescriptor nextSpecializedType = getTypeDescriptor (specializedTypeIds [j]);
            if (nextSpecializedType == null) {
                Log.error (EMFTypePlugin.getPlugin (), EMFTypePluginStatusCodes.SPECIALIZATION_TYPE_SPECIALIZES_INVALID_ID, EMFTypeCoreMessages.bind (EMFTypeCoreMessages.specializationType_specializes_invalid_id_ERROR_, specializationTypeDescriptor.getId (), specializedTypeIds [j]));
                return null;
            }
            MetamodelTypeDescriptor specializedMetamodelType = null;
            if (nextSpecializedType instanceof MetamodelTypeDescriptor) {
                specializedMetamodelType = (MetamodelTypeDescriptor) nextSpecializedType;
            } else if (nextSpecializedType instanceof SpecializationTypeDescriptor) {
                SpecializationTypeDescriptor nextSpecializationType = (SpecializationTypeDescriptor) nextSpecializedType;
                specializedMetamodelType = getMetamodelTypeDescriptor (nextSpecializationType);
            }

            if (specializedMetamodelType == null) {
                metamodelTypeDescriptor = null;
                break;
            } else if (metamodelTypeDescriptor == null) {
                metamodelTypeDescriptor = specializedMetamodelType;
            } else if (metamodelTypeDescriptor != specializedMetamodelType) {
                metamodelTypeDescriptor = null;
                break;
            }

        }
        if (metamodelTypeDescriptor == null) {
            Log.error (EMFTypePlugin.getPlugin (), EMFTypePluginStatusCodes.SPECIALIZATION_TYPE_SPECIALIZES_MULTIPLE_METAMODEL_TYPES, EMFTypeCoreMessages.bind (EMFTypeCoreMessages.specializationType_specializes_multiple_metamodel_types_ERROR_, specializationTypeDescriptor.getId ()));
        }
        return metamodelTypeDescriptor;
    }

    private void load (IConfigurationElement [] configs) {
        for (int i = 0;
        i < configs.length; i ++) {
            IConfigurationElement next = configs [i];
            try {
                String name = next.getName ();
                if (name.equals (ElementTypeXmlConfig.E_METAMODEL)) {
                    loadMetamodel (next);
                } else if (name.equals (ElementTypeXmlConfig.E_ELEMENT_TYPE_FACTORY)) {
                    loadElementTypeFactory (next);
                } else if (name.equals (ElementTypeXmlConfig.E_SPECIALIZATION_TYPE)) {
                    registerSpecializationType (next, null);
                }

            } catch (CoreException ce) {
                String sourcePluginId = next.getDeclaringExtension ().getContributor ().getName ();
                Log.error (EMFTypePlugin.getPlugin (), ce.getStatus ().getCode (), EMFTypeCoreMessages.bind (EMFTypeCoreMessages.xml_parsing_ERROR_, sourcePluginId, ce.getStatus ().getMessage ()), null);
            } catch (Exception e) {
                String sourcePluginId = next.getDeclaringExtension ().getContributor ().getName ();
                Log.error (EMFTypePlugin.getPlugin (), EMFTypePluginStatusCodes.ERROR_PARSING_XML, EMFTypeCoreMessages.bind (EMFTypeCoreMessages.xml_parsing_ERROR_, sourcePluginId, e.getMessage ()), e);
            }
        }
        removeInvalidSpecializations ();
    }

    public void addElementTypeRegistryListener (IElementTypeRegistryListener l) {
        if (! elementTypeRegistryListeners.contains (l)) {
            elementTypeRegistryListeners.add (l);
        }
    }

    public void removeElementTypeRegistryListener (IElementTypeRegistryListener l) {
        if (elementTypeRegistryListeners.contains (l)) {
            elementTypeRegistryListeners.remove (l);
        }
    }

    private void fireElementTypeAddedEvent (ElementTypeAddedEvent e) {
        for (Iterator i = elementTypeRegistryListeners.iterator ();
        i.hasNext ();) {
            IElementTypeRegistryListener nextListener = (IElementTypeRegistryListener) i.next ();
            nextListener.elementTypeAdded (e);
        }
    }

    private void registerNullElementType () {
        register (NullElementType.getInstance ());
    }

}

