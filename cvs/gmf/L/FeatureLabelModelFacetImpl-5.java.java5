package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.FeatureLabelModelFacet;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

public class FeatureLabelModelFacetImpl extends FeatureModelFacetImpl implements FeatureLabelModelFacet {
    protected static final String VIEW_PATTERN_EDEFAULT = null;
    protected String viewPattern = VIEW_PATTERN_EDEFAULT;
    protected static final String EDIT_PATTERN_EDEFAULT = null;
    protected String editPattern = EDIT_PATTERN_EDEFAULT;

    protected FeatureLabelModelFacetImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet ();
    }

    public String getViewPattern () {
        return viewPattern;
    }

    public void setViewPattern (String newViewPattern) {
        String oldViewPattern = viewPattern;
        viewPattern = newViewPattern;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_PATTERN, oldViewPattern, viewPattern));

    }

    public String getEditPattern () {
        return editPattern;
    }

    public void setEditPattern (String newEditPattern) {
        String oldEditPattern = editPattern;
        editPattern = newEditPattern;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN, oldEditPattern, editPattern));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_PATTERN :
                return getViewPattern ();
            case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN :
                return getEditPattern ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_PATTERN :
                setViewPattern ((String) newValue);
                return;
            case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN :
                setEditPattern ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_PATTERN :
                setViewPattern (VIEW_PATTERN_EDEFAULT);
                return;
            case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN :
                setEditPattern (EDIT_PATTERN_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_PATTERN :
                return VIEW_PATTERN_EDEFAULT == null ? viewPattern != null : ! VIEW_PATTERN_EDEFAULT.equals (viewPattern);
            case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN :
                return EDIT_PATTERN_EDEFAULT == null ? editPattern != null : ! EDIT_PATTERN_EDEFAULT.equals (editPattern);
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (viewPattern: ");
        result.append (viewPattern);
        result.append (", editPattern: ");
        result.append (editPattern);
        result.append (')');
        return result.toString ();
    }

}

