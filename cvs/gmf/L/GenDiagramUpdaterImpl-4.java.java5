package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenDiagramUpdater;

import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

public class GenDiagramUpdaterImpl extends EObjectImpl implements GenDiagramUpdater {
    protected static final String DIAGRAM_UPDATER_CLASS_NAME_EDEFAULT = null;
    protected String diagramUpdaterClassName = DIAGRAM_UPDATER_CLASS_NAME_EDEFAULT;
    protected static final String NODE_DESCRIPTOR_CLASS_NAME_EDEFAULT = null;
    protected String nodeDescriptorClassName = NODE_DESCRIPTOR_CLASS_NAME_EDEFAULT;
    protected static final String LINK_DESCRIPTOR_CLASS_NAME_EDEFAULT = null;
    protected String linkDescriptorClassName = LINK_DESCRIPTOR_CLASS_NAME_EDEFAULT;
    protected static final String UPDATE_COMMAND_CLASS_NAME_EDEFAULT = null;
    protected String updateCommandClassName = UPDATE_COMMAND_CLASS_NAME_EDEFAULT;
    protected static final String UPDATE_COMMAND_ID_EDEFAULT = null;
    protected String updateCommandID = UPDATE_COMMAND_ID_EDEFAULT;

    protected GenDiagramUpdaterImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenDiagramUpdater ();
    }

    public GenEditorGenerator getEditorGen () {
        if (eContainerFeatureID != GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN) return null;

        return (GenEditorGenerator) eContainer ();
    }

    public NotificationChain basicSetEditorGen (GenEditorGenerator newEditorGen, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newEditorGen, GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN, msgs);
        return msgs;
    }

    public void setEditorGen (GenEditorGenerator newEditorGen) {
        if (newEditorGen != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN && newEditorGen != null)) {
            if (EcoreUtil.isAncestor (this, newEditorGen)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newEditorGen != null) msgs = ((InternalEObject) newEditorGen).eInverseAdd (this, GMFGenPackage.GEN_EDITOR_GENERATOR__DIAGRAM_UPDATER, GenEditorGenerator.class, msgs);

            msgs = basicSetEditorGen (newEditorGen, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN, newEditorGen, newEditorGen));

    }

    public String getDiagramUpdaterClassNameGen () {
        return diagramUpdaterClassName;
    }

    public String getDiagramUpdaterClassName () {
        String value = getDiagramUpdaterClassNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getDomainPackageCapName () + "DiagramUpdater";
        }
        return value;
    }

    public void setDiagramUpdaterClassName (String newDiagramUpdaterClassName) {
        String oldDiagramUpdaterClassName = diagramUpdaterClassName;
        diagramUpdaterClassName = newDiagramUpdaterClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM_UPDATER__DIAGRAM_UPDATER_CLASS_NAME, oldDiagramUpdaterClassName, diagramUpdaterClassName));

    }

    public String getNodeDescriptorClassNameGen () {
        return nodeDescriptorClassName;
    }

    public String getNodeDescriptorClassName () {
        String value = getNodeDescriptorClassNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getDomainPackageCapName () + "NodeDescriptor";
        }
        return value;
    }

    public void setNodeDescriptorClassName (String newNodeDescriptorClassName) {
        String oldNodeDescriptorClassName = nodeDescriptorClassName;
        nodeDescriptorClassName = newNodeDescriptorClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM_UPDATER__NODE_DESCRIPTOR_CLASS_NAME, oldNodeDescriptorClassName, nodeDescriptorClassName));

    }

    public String getLinkDescriptorClassNameGen () {
        return linkDescriptorClassName;
    }

    public String getLinkDescriptorClassName () {
        String value = getLinkDescriptorClassNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getDomainPackageCapName () + "LinkDescriptor";
        }
        return value;
    }

    public void setLinkDescriptorClassName (String newLinkDescriptorClassName) {
        String oldLinkDescriptorClassName = linkDescriptorClassName;
        linkDescriptorClassName = newLinkDescriptorClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM_UPDATER__LINK_DESCRIPTOR_CLASS_NAME, oldLinkDescriptorClassName, linkDescriptorClassName));

    }

    public String getUpdateCommandClassNameGen () {
        return updateCommandClassName;
    }

    public String getUpdateCommandClassName () {
        String value = getUpdateCommandClassNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getDomainPackageCapName () + "DiagramUpdateCommand";
        }
        return value;
    }

    public void setUpdateCommandClassName (String newUpdateCommandClassName) {
        String oldUpdateCommandClassName = updateCommandClassName;
        updateCommandClassName = newUpdateCommandClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_CLASS_NAME, oldUpdateCommandClassName, updateCommandClassName));

    }

    public String getUpdateCommandIDGen () {
        return updateCommandID;
    }

    public String getUpdateCommandID () {
        String value = getUpdateCommandIDGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getEditorGen ().getPackageNamePrefix () + ".updateDiagram";
        }
        return value;
    }

    public void setUpdateCommandID (String newUpdateCommandID) {
        String oldUpdateCommandID = updateCommandID;
        updateCommandID = newUpdateCommandID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_ID, oldUpdateCommandID, updateCommandID));

    }

    public String getDiagramUpdaterQualifiedClassName () {
        return getEditorPackageName () + '.' + getDiagramUpdaterClassName ();
    }

    public String getNodeDescriptorQualifiedClassName () {
        return getEditorPackageName () + '.' + getNodeDescriptorClassName ();
    }

    public String getLinkDescriptorQualifiedClassName () {
        return getEditorPackageName () + '.' + getLinkDescriptorClassName ();
    }

    public String getUpdateCommandQualifiedClassName () {
        return getEditorPackageName () + '.' + getUpdateCommandClassName ();
    }

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetEditorGen ((GenEditorGenerator) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN :
                return basicSetEditorGen (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_EDITOR_GENERATOR__DIAGRAM_UPDATER, GenEditorGenerator.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN :
                return getEditorGen ();
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__DIAGRAM_UPDATER_CLASS_NAME :
                return getDiagramUpdaterClassName ();
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__NODE_DESCRIPTOR_CLASS_NAME :
                return getNodeDescriptorClassName ();
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__LINK_DESCRIPTOR_CLASS_NAME :
                return getLinkDescriptorClassName ();
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_CLASS_NAME :
                return getUpdateCommandClassName ();
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_ID :
                return getUpdateCommandID ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN :
                setEditorGen ((GenEditorGenerator) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__DIAGRAM_UPDATER_CLASS_NAME :
                setDiagramUpdaterClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__NODE_DESCRIPTOR_CLASS_NAME :
                setNodeDescriptorClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__LINK_DESCRIPTOR_CLASS_NAME :
                setLinkDescriptorClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_CLASS_NAME :
                setUpdateCommandClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_ID :
                setUpdateCommandID ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN :
                setEditorGen ((GenEditorGenerator) null);
                return;
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__DIAGRAM_UPDATER_CLASS_NAME :
                setDiagramUpdaterClassName (DIAGRAM_UPDATER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__NODE_DESCRIPTOR_CLASS_NAME :
                setNodeDescriptorClassName (NODE_DESCRIPTOR_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__LINK_DESCRIPTOR_CLASS_NAME :
                setLinkDescriptorClassName (LINK_DESCRIPTOR_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_CLASS_NAME :
                setUpdateCommandClassName (UPDATE_COMMAND_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_ID :
                setUpdateCommandID (UPDATE_COMMAND_ID_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN :
                return getEditorGen () != null;
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__DIAGRAM_UPDATER_CLASS_NAME :
                return DIAGRAM_UPDATER_CLASS_NAME_EDEFAULT == null ? diagramUpdaterClassName != null : ! DIAGRAM_UPDATER_CLASS_NAME_EDEFAULT.equals (diagramUpdaterClassName);
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__NODE_DESCRIPTOR_CLASS_NAME :
                return NODE_DESCRIPTOR_CLASS_NAME_EDEFAULT == null ? nodeDescriptorClassName != null : ! NODE_DESCRIPTOR_CLASS_NAME_EDEFAULT.equals (nodeDescriptorClassName);
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__LINK_DESCRIPTOR_CLASS_NAME :
                return LINK_DESCRIPTOR_CLASS_NAME_EDEFAULT == null ? linkDescriptorClassName != null : ! LINK_DESCRIPTOR_CLASS_NAME_EDEFAULT.equals (linkDescriptorClassName);
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_CLASS_NAME :
                return UPDATE_COMMAND_CLASS_NAME_EDEFAULT == null ? updateCommandClassName != null : ! UPDATE_COMMAND_CLASS_NAME_EDEFAULT.equals (updateCommandClassName);
            case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_ID :
                return UPDATE_COMMAND_ID_EDEFAULT == null ? updateCommandID != null : ! UPDATE_COMMAND_ID_EDEFAULT.equals (updateCommandID);
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (diagramUpdaterClassName: ");
        result.append (diagramUpdaterClassName);
        result.append (", nodeDescriptorClassName: ");
        result.append (nodeDescriptorClassName);
        result.append (", linkDescriptorClassName: ");
        result.append (linkDescriptorClassName);
        result.append (", updateCommandClassName: ");
        result.append (updateCommandClassName);
        result.append (", updateCommandID: ");
        result.append (updateCommandID);
        result.append (')');
        return result.toString ();
    }

    private String getDomainPackageCapName () {
        return ((GenEditorGeneratorImpl) getEditorGen ()).getDomainModelCapName ();
    }

    private String getEditorPackageName () {
        return getEditorGen ().getEditor ().getPackageName ();
    }

}

