package org.eclipse.gmf.runtime.notation.util;

import java.util.List;

import java.util.Map;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EModelElement;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.runtime.notation.*;

import org.eclipse.gmf.runtime.notation.Anchor;

import org.eclipse.gmf.runtime.notation.Bendpoints;

import org.eclipse.gmf.runtime.notation.Bounds;

import org.eclipse.gmf.runtime.notation.CanonicalStyle;

import org.eclipse.gmf.runtime.notation.ConnectorStyle;

import org.eclipse.gmf.runtime.notation.DescriptionStyle;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.DiagramStyle;

import org.eclipse.gmf.runtime.notation.DrawerStyle;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.FillStyle;

import org.eclipse.gmf.runtime.notation.FilteringStyle;

import org.eclipse.gmf.runtime.notation.FontStyle;

import org.eclipse.gmf.runtime.notation.Guide;

import org.eclipse.gmf.runtime.notation.GuideStyle;

import org.eclipse.gmf.runtime.notation.IdentityAnchor;

import org.eclipse.gmf.runtime.notation.Image;

import org.eclipse.gmf.runtime.notation.ImageBufferStyle;

import org.eclipse.gmf.runtime.notation.ImageStyle;

import org.eclipse.gmf.runtime.notation.LayoutConstraint;

import org.eclipse.gmf.runtime.notation.LineStyle;

import org.eclipse.gmf.runtime.notation.Location;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.PageStyle;

import org.eclipse.gmf.runtime.notation.Ratio;

import org.eclipse.gmf.runtime.notation.RelativeBendpoints;

import org.eclipse.gmf.runtime.notation.RoutingStyle;

import org.eclipse.gmf.runtime.notation.ShapeStyle;

import org.eclipse.gmf.runtime.notation.Size;

import org.eclipse.gmf.runtime.notation.SortingStyle;

import org.eclipse.gmf.runtime.notation.Style;

import org.eclipse.gmf.runtime.notation.TitleStyle;

import org.eclipse.gmf.runtime.notation.View;

public class NotationSwitch {
    protected static NotationPackage modelPackage;

    public NotationSwitch () {
        if (modelPackage == null) {
            modelPackage = NotationPackage.eINSTANCE;
        }
    }

    public Object doSwitch (EObject theEObject) {
        return doSwitch (theEObject.eClass (), theEObject);
    }

    protected Object doSwitch (EClass theEClass, EObject theEObject) {
        if (theEClass.eContainer () == modelPackage) {
            return doSwitch (theEClass.getClassifierID (), theEObject);
        } else {
            List eSuperTypes = theEClass.getESuperTypes ();
            return eSuperTypes.isEmpty () ? defaultCase (theEObject) : doSwitch ((EClass) eSuperTypes.get (0), theEObject);
        }
    }

    protected Object doSwitch (int classifierID, EObject theEObject) {
        switch (classifierID) {
            case NotationPackage.EDGE :
                {
                    Edge edge = (Edge) theEObject;
                    Object result = caseEdge (edge);
                    if (result == null) result = caseView (edge);

                    if (result == null) result = caseEModelElement (edge);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.NODE :
                {
                    Node node = (Node) theEObject;
                    Object result = caseNode (node);
                    if (result == null) result = caseView (node);

                    if (result == null) result = caseEModelElement (node);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.STYLE :
                {
                    Style style = (Style) theEObject;
                    Object result = caseStyle (style);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.FILL_STYLE :
                {
                    FillStyle fillStyle = (FillStyle) theEObject;
                    Object result = caseFillStyle (fillStyle);
                    if (result == null) result = caseStyle (fillStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.LINE_STYLE :
                {
                    LineStyle lineStyle = (LineStyle) theEObject;
                    Object result = caseLineStyle (lineStyle);
                    if (result == null) result = caseStyle (lineStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.FONT_STYLE :
                {
                    FontStyle fontStyle = (FontStyle) theEObject;
                    Object result = caseFontStyle (fontStyle);
                    if (result == null) result = caseStyle (fontStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.TITLE_STYLE :
                {
                    TitleStyle titleStyle = (TitleStyle) theEObject;
                    Object result = caseTitleStyle (titleStyle);
                    if (result == null) result = caseStyle (titleStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.SORTING_STYLE :
                {
                    SortingStyle sortingStyle = (SortingStyle) theEObject;
                    Object result = caseSortingStyle (sortingStyle);
                    if (result == null) result = caseStyle (sortingStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.DESCRIPTION_STYLE :
                {
                    DescriptionStyle descriptionStyle = (DescriptionStyle) theEObject;
                    Object result = caseDescriptionStyle (descriptionStyle);
                    if (result == null) result = caseStyle (descriptionStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.LAYOUT_CONSTRAINT :
                {
                    LayoutConstraint layoutConstraint = (LayoutConstraint) theEObject;
                    Object result = caseLayoutConstraint (layoutConstraint);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.SIZE :
                {
                    Size size = (Size) theEObject;
                    Object result = caseSize (size);
                    if (result == null) result = caseLayoutConstraint (size);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.LOCATION :
                {
                    Location location = (Location) theEObject;
                    Object result = caseLocation (location);
                    if (result == null) result = caseLayoutConstraint (location);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.BOUNDS :
                {
                    Bounds bounds = (Bounds) theEObject;
                    Object result = caseBounds (bounds);
                    if (result == null) result = caseLocation (bounds);

                    if (result == null) result = caseSize (bounds);

                    if (result == null) result = caseLayoutConstraint (bounds);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.RATIO :
                {
                    Ratio ratio = (Ratio) theEObject;
                    Object result = caseRatio (ratio);
                    if (result == null) result = caseLayoutConstraint (ratio);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.ANCHOR :
                {
                    Anchor anchor = (Anchor) theEObject;
                    Object result = caseAnchor (anchor);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.BENDPOINTS :
                {
                    Bendpoints bendpoints = (Bendpoints) theEObject;
                    Object result = caseBendpoints (bendpoints);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.IDENTITY_ANCHOR :
                {
                    IdentityAnchor identityAnchor = (IdentityAnchor) theEObject;
                    Object result = caseIdentityAnchor (identityAnchor);
                    if (result == null) result = caseAnchor (identityAnchor);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.ROUTING_STYLE :
                {
                    RoutingStyle routingStyle = (RoutingStyle) theEObject;
                    Object result = caseRoutingStyle (routingStyle);
                    if (result == null) result = caseStyle (routingStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.VIEW :
                {
                    View view = (View) theEObject;
                    Object result = caseView (view);
                    if (result == null) result = caseEModelElement (view);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.RELATIVE_BENDPOINTS :
                {
                    RelativeBendpoints relativeBendpoints = (RelativeBendpoints) theEObject;
                    Object result = caseRelativeBendpoints (relativeBendpoints);
                    if (result == null) result = caseBendpoints (relativeBendpoints);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.DIAGRAM :
                {
                    Diagram diagram = (Diagram) theEObject;
                    Object result = caseDiagram (diagram);
                    if (result == null) result = caseView (diagram);

                    if (result == null) result = caseEModelElement (diagram);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.IMAGE :
                {
                    Image image = (Image) theEObject;
                    Object result = caseImage (image);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.CANONICAL_STYLE :
                {
                    CanonicalStyle canonicalStyle = (CanonicalStyle) theEObject;
                    Object result = caseCanonicalStyle (canonicalStyle);
                    if (result == null) result = caseStyle (canonicalStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.SHAPE_STYLE :
                {
                    ShapeStyle shapeStyle = (ShapeStyle) theEObject;
                    Object result = caseShapeStyle (shapeStyle);
                    if (result == null) result = caseFontStyle (shapeStyle);

                    if (result == null) result = caseDescriptionStyle (shapeStyle);

                    if (result == null) result = caseFillStyle (shapeStyle);

                    if (result == null) result = caseLineStyle (shapeStyle);

                    if (result == null) result = caseStyle (shapeStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.CONNECTOR_STYLE :
                {
                    ConnectorStyle connectorStyle = (ConnectorStyle) theEObject;
                    Object result = caseConnectorStyle (connectorStyle);
                    if (result == null) result = caseRoutingStyle (connectorStyle);

                    if (result == null) result = caseLineStyle (connectorStyle);

                    if (result == null) result = caseStyle (connectorStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.PAGE_STYLE :
                {
                    PageStyle pageStyle = (PageStyle) theEObject;
                    Object result = casePageStyle (pageStyle);
                    if (result == null) result = caseStyle (pageStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.DRAWER_STYLE :
                {
                    DrawerStyle drawerStyle = (DrawerStyle) theEObject;
                    Object result = caseDrawerStyle (drawerStyle);
                    if (result == null) result = caseStyle (drawerStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.GUIDE_STYLE :
                {
                    GuideStyle guideStyle = (GuideStyle) theEObject;
                    Object result = caseGuideStyle (guideStyle);
                    if (result == null) result = caseStyle (guideStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.GUIDE :
                {
                    Guide guide = (Guide) theEObject;
                    Object result = caseGuide (guide);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.NODE_ENTRY :
                {
                    Map.Entry nodeEntry = (Map.Entry) theEObject;
                    Object result = caseNodeEntry (nodeEntry);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.FILTERING_STYLE :
                {
                    FilteringStyle filteringStyle = (FilteringStyle) theEObject;
                    Object result = caseFilteringStyle (filteringStyle);
                    if (result == null) result = caseStyle (filteringStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.DIAGRAM_STYLE :
                {
                    DiagramStyle diagramStyle = (DiagramStyle) theEObject;
                    Object result = caseDiagramStyle (diagramStyle);
                    if (result == null) result = casePageStyle (diagramStyle);

                    if (result == null) result = caseGuideStyle (diagramStyle);

                    if (result == null) result = caseDescriptionStyle (diagramStyle);

                    if (result == null) result = caseStyle (diagramStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.IMAGE_STYLE :
                {
                    ImageStyle imageStyle = (ImageStyle) theEObject;
                    Object result = caseImageStyle (imageStyle);
                    if (result == null) result = caseStyle (imageStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.IMAGE_BUFFER_STYLE :
                {
                    ImageBufferStyle imageBufferStyle = (ImageBufferStyle) theEObject;
                    Object result = caseImageBufferStyle (imageBufferStyle);
                    if (result == null) result = caseImageStyle (imageBufferStyle);

                    if (result == null) result = caseStyle (imageBufferStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.PROPERTIES_SET_STYLE :
                {
                    PropertiesSetStyle propertiesSetStyle = (PropertiesSetStyle) theEObject;
                    Object result = casePropertiesSetStyle (propertiesSetStyle);
                    if (result == null) result = caseNamedStyle (propertiesSetStyle);

                    if (result == null) result = caseStyle (propertiesSetStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY :
                {
                    Map.Entry stringToPropertyValueMapEntry = (Map.Entry) theEObject;
                    Object result = caseStringToPropertyValueMapEntry (stringToPropertyValueMapEntry);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.PROPERTY_VALUE :
                {
                    PropertyValue propertyValue = (PropertyValue) theEObject;
                    Object result = casePropertyValue (propertyValue);
                    if (result == null) result = caseStringObjectConverter (propertyValue);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.SINGLE_VALUE_STYLE :
                {
                    SingleValueStyle singleValueStyle = (SingleValueStyle) theEObject;
                    Object result = caseSingleValueStyle (singleValueStyle);
                    if (result == null) result = caseDataTypeStyle (singleValueStyle);

                    if (result == null) result = caseNamedStyle (singleValueStyle);

                    if (result == null) result = caseStringObjectConverter (singleValueStyle);

                    if (result == null) result = caseStyle (singleValueStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.LIST_VALUE_STYLE :
                {
                    ListValueStyle listValueStyle = (ListValueStyle) theEObject;
                    Object result = caseListValueStyle (listValueStyle);
                    if (result == null) result = caseDataTypeStyle (listValueStyle);

                    if (result == null) result = caseNamedStyle (listValueStyle);

                    if (result == null) result = caseStringObjectConverter (listValueStyle);

                    if (result == null) result = caseStyle (listValueStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.NAMED_STYLE :
                {
                    NamedStyle namedStyle = (NamedStyle) theEObject;
                    Object result = caseNamedStyle (namedStyle);
                    if (result == null) result = caseStyle (namedStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.STRING_OBJECT_CONVERTER :
                {
                    StringObjectConverter stringObjectConverter = (StringObjectConverter) theEObject;
                    Object result = caseStringObjectConverter (stringObjectConverter);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.DATA_TYPE_STYLE :
                {
                    DataTypeStyle dataTypeStyle = (DataTypeStyle) theEObject;
                    Object result = caseDataTypeStyle (dataTypeStyle);
                    if (result == null) result = caseNamedStyle (dataTypeStyle);

                    if (result == null) result = caseStringObjectConverter (dataTypeStyle);

                    if (result == null) result = caseStyle (dataTypeStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.INT_VALUE_STYLE :
                {
                    IntValueStyle intValueStyle = (IntValueStyle) theEObject;
                    Object result = caseIntValueStyle (intValueStyle);
                    if (result == null) result = caseNamedStyle (intValueStyle);

                    if (result == null) result = caseStyle (intValueStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.INT_LIST_VALUE_STYLE :
                {
                    IntListValueStyle intListValueStyle = (IntListValueStyle) theEObject;
                    Object result = caseIntListValueStyle (intListValueStyle);
                    if (result == null) result = caseNamedStyle (intListValueStyle);

                    if (result == null) result = caseStyle (intListValueStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.BOOLEAN_VALUE_STYLE :
                {
                    BooleanValueStyle booleanValueStyle = (BooleanValueStyle) theEObject;
                    Object result = caseBooleanValueStyle (booleanValueStyle);
                    if (result == null) result = caseNamedStyle (booleanValueStyle);

                    if (result == null) result = caseStyle (booleanValueStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.DOUBLE_VALUE_STYLE :
                {
                    DoubleValueStyle doubleValueStyle = (DoubleValueStyle) theEObject;
                    Object result = caseDoubleValueStyle (doubleValueStyle);
                    if (result == null) result = caseNamedStyle (doubleValueStyle);

                    if (result == null) result = caseStyle (doubleValueStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.DOUBLE_LIST_VALUE_STYLE :
                {
                    DoubleListValueStyle doubleListValueStyle = (DoubleListValueStyle) theEObject;
                    Object result = caseDoubleListValueStyle (doubleListValueStyle);
                    if (result == null) result = caseNamedStyle (doubleListValueStyle);

                    if (result == null) result = caseStyle (doubleListValueStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.STRING_VALUE_STYLE :
                {
                    StringValueStyle stringValueStyle = (StringValueStyle) theEObject;
                    Object result = caseStringValueStyle (stringValueStyle);
                    if (result == null) result = caseNamedStyle (stringValueStyle);

                    if (result == null) result = caseStyle (stringValueStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.STRING_LIST_VALUE_STYLE :
                {
                    StringListValueStyle stringListValueStyle = (StringListValueStyle) theEObject;
                    Object result = caseStringListValueStyle (stringListValueStyle);
                    if (result == null) result = caseNamedStyle (stringListValueStyle);

                    if (result == null) result = caseStyle (stringListValueStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.EOBJECT_VALUE_STYLE :
                {
                    EObjectValueStyle eObjectValueStyle = (EObjectValueStyle) theEObject;
                    Object result = caseEObjectValueStyle (eObjectValueStyle);
                    if (result == null) result = caseNamedStyle (eObjectValueStyle);

                    if (result == null) result = caseStyle (eObjectValueStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.EOBJECT_LIST_VALUE_STYLE :
                {
                    EObjectListValueStyle eObjectListValueStyle = (EObjectListValueStyle) theEObject;
                    Object result = caseEObjectListValueStyle (eObjectListValueStyle);
                    if (result == null) result = caseNamedStyle (eObjectListValueStyle);

                    if (result == null) result = caseStyle (eObjectListValueStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.BYTE_ARRAY_VALUE_STYLE :
                {
                    ByteArrayValueStyle byteArrayValueStyle = (ByteArrayValueStyle) theEObject;
                    Object result = caseByteArrayValueStyle (byteArrayValueStyle);
                    if (result == null) result = caseNamedStyle (byteArrayValueStyle);

                    if (result == null) result = caseStyle (byteArrayValueStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.BOOLEAN_LIST_VALUE_STYLE :
                {
                    BooleanListValueStyle booleanListValueStyle = (BooleanListValueStyle) theEObject;
                    Object result = caseBooleanListValueStyle (booleanListValueStyle);
                    if (result == null) result = caseNamedStyle (booleanListValueStyle);

                    if (result == null) result = caseStyle (booleanListValueStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.HINTED_DIAGRAM_LINK_STYLE :
                {
                    HintedDiagramLinkStyle hintedDiagramLinkStyle = (HintedDiagramLinkStyle) theEObject;
                    Object result = caseHintedDiagramLinkStyle (hintedDiagramLinkStyle);
                    if (result == null) result = caseDiagramLinkStyle (hintedDiagramLinkStyle);

                    if (result == null) result = caseStyle (hintedDiagramLinkStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.DIAGRAM_LINK_STYLE :
                {
                    DiagramLinkStyle diagramLinkStyle = (DiagramLinkStyle) theEObject;
                    Object result = caseDiagramLinkStyle (diagramLinkStyle);
                    if (result == null) result = caseStyle (diagramLinkStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case NotationPackage.MULTI_DIAGRAM_LINK_STYLE :
                {
                    MultiDiagramLinkStyle multiDiagramLinkStyle = (MultiDiagramLinkStyle) theEObject;
                    Object result = caseMultiDiagramLinkStyle (multiDiagramLinkStyle);
                    if (result == null) result = caseStyle (multiDiagramLinkStyle);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } default :
                return defaultCase (theEObject);
        }
    }

    public Object caseEdge (Edge object) {
        return null;
    }

    public Object caseNode (Node object) {
        return null;
    }

    public Object caseStyle (Style object) {
        return null;
    }

    public Object caseFillStyle (FillStyle object) {
        return null;
    }

    public Object caseLineStyle (LineStyle object) {
        return null;
    }

    public Object caseFontStyle (FontStyle object) {
        return null;
    }

    public Object caseTitleStyle (TitleStyle object) {
        return null;
    }

    public Object caseSortingStyle (SortingStyle object) {
        return null;
    }

    public Object caseDescriptionStyle (DescriptionStyle object) {
        return null;
    }

    public Object caseLayoutConstraint (LayoutConstraint object) {
        return null;
    }

    public Object caseSize (Size object) {
        return null;
    }

    public Object caseLocation (Location object) {
        return null;
    }

    public Object caseBounds (Bounds object) {
        return null;
    }

    public Object caseRatio (Ratio object) {
        return null;
    }

    public Object caseAnchor (Anchor object) {
        return null;
    }

    public Object caseBendpoints (Bendpoints object) {
        return null;
    }

    public Object caseIdentityAnchor (IdentityAnchor object) {
        return null;
    }

    public Object caseRoutingStyle (RoutingStyle object) {
        return null;
    }

    public Object caseView (View object) {
        return null;
    }

    public Object caseRelativeBendpoints (RelativeBendpoints object) {
        return null;
    }

    public Object caseCanonicalStyle (CanonicalStyle object) {
        return null;
    }

    public Object caseShapeStyle (ShapeStyle object) {
        return null;
    }

    public Object caseConnectorStyle (ConnectorStyle object) {
        return null;
    }

    public Object caseDiagram (Diagram object) {
        return null;
    }

    public Object caseImage (Image object) {
        return null;
    }

    public Object casePageStyle (PageStyle object) {
        return null;
    }

    public Object caseDrawerStyle (DrawerStyle object) {
        return null;
    }

    public Object caseGuideStyle (GuideStyle object) {
        return null;
    }

    public Object caseGuide (Guide object) {
        return null;
    }

    public Object caseNodeEntry (Map.Entry object) {
        return null;
    }

    public Object caseFilteringStyle (FilteringStyle object) {
        return null;
    }

    public Object caseDiagramStyle (DiagramStyle object) {
        return null;
    }

    public Object caseImageStyle (ImageStyle object) {
        return null;
    }

    public Object caseImageBufferStyle (ImageBufferStyle object) {
        return null;
    }

    public Object casePropertiesSetStyle (PropertiesSetStyle object) {
        return null;
    }

    public Object caseStringToPropertyValueMapEntry (Map.Entry object) {
        return null;
    }

    public Object casePropertyValue (PropertyValue object) {
        return null;
    }

    public Object caseSingleValueStyle (SingleValueStyle object) {
        return null;
    }

    public Object caseListValueStyle (ListValueStyle object) {
        return null;
    }

    public Object caseNamedStyle (NamedStyle object) {
        return null;
    }

    public Object caseStringObjectConverter (StringObjectConverter object) {
        return null;
    }

    public Object caseDataTypeStyle (DataTypeStyle object) {
        return null;
    }

    public Object caseIntValueStyle (IntValueStyle object) {
        return null;
    }

    public Object caseIntListValueStyle (IntListValueStyle object) {
        return null;
    }

    public Object caseBooleanValueStyle (BooleanValueStyle object) {
        return null;
    }

    public Object caseDoubleValueStyle (DoubleValueStyle object) {
        return null;
    }

    public Object caseDoubleListValueStyle (DoubleListValueStyle object) {
        return null;
    }

    public Object caseStringValueStyle (StringValueStyle object) {
        return null;
    }

    public Object caseStringListValueStyle (StringListValueStyle object) {
        return null;
    }

    public Object caseEObjectValueStyle (EObjectValueStyle object) {
        return null;
    }

    public Object caseEObjectListValueStyle (EObjectListValueStyle object) {
        return null;
    }

    public Object caseByteArrayValueStyle (ByteArrayValueStyle object) {
        return null;
    }

    public Object caseBooleanListValueStyle (BooleanListValueStyle object) {
        return null;
    }

    public Object caseHintedDiagramLinkStyle (HintedDiagramLinkStyle object) {
        return null;
    }

    public Object caseDiagramLinkStyle (DiagramLinkStyle object) {
        return null;
    }

    public Object caseMultiDiagramLinkStyle (MultiDiagramLinkStyle object) {
        return null;
    }

    public Object caseEModelElement (EModelElement object) {
        return null;
    }

    public Object defaultCase (EObject object) {
        return null;
    }

}

