package org.eclipse.gmf.mappings.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.command.CommandParameter;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.mappings.FeatureInitializer;

import org.eclipse.gmf.mappings.FeatureValueSpec;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.presentation.FilterUtil;

public class FeatureValueSpecItemProvider extends ValueExpressionItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public FeatureValueSpecItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    @Override
    public List < IItemPropertyDescriptor > getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addFeaturePropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addFeaturePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_FeatureInitializer_feature_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_FeatureInitializer_feature_feature", "_UI_FeatureInitializer_type"), GMFMapPackage.eINSTANCE.getFeatureInitializer_Feature (), true, false, true, null, null, null) {

            protected Collection < ? > getComboBoxObjects (Object object) {
                if (object instanceof FeatureInitializer) {
                    return FilterUtil.filterByFeatureInitializer ((Collection < EStructuralFeature >) super.getComboBoxObjects (object), (FeatureInitializer) object);
                }
                return super.getComboBoxObjects (object);
            }

        }

        );
    }

    @Override
    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/FeatureValueSpec"));
    }

    public String getText (Object object) {
        StringBuffer buf = new StringBuffer ();
        buf.append (getString ("_UI_FeatureValueSpec_type"));
        if (object instanceof FeatureValueSpec) {
            FeatureValueSpec featureValueSpec = (FeatureValueSpec) object;
            buf.append ('<');
            String feature = (featureValueSpec.getFeature () != null) ? featureValueSpec.getFeature ().getName () : null;
            if (feature != null && feature.length () > 0) {
                buf.append (feature).append (":=");
            }
            String body = crop (featureValueSpec.getBody ());
            if (body != null && body.length () > 0) {
                buf.append (' ').append (body);
            }
            buf.append ('>');
        }
        return buf.toString ();
    }

    @Override
    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (FeatureValueSpec.class)) {
            case GMFMapPackage.FEATURE_VALUE_SPEC__FEATURE :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
        }
        super.notifyChanged (notification);
    }

    @Override
    protected void collectNewChildDescriptors (Collection < CommandParameter > newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
    }

    @Override
    public ResourceLocator getResourceLocator () {
        return GMFMapEditPlugin.INSTANCE;
    }

}

