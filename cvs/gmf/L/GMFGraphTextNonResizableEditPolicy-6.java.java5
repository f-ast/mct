package org.eclipse.gmf.graphdef.editor.edit.policies;

import java.util.Collections;

import java.util.List;

import org.eclipse.draw2d.ColorConstants;

import org.eclipse.draw2d.Figure;

import org.eclipse.draw2d.Graphics;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.Label;

import org.eclipse.draw2d.RectangleFigure;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.handles.MoveHandle;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx;

import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;

import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;

public class GMFGraphTextNonResizableEditPolicy extends NonResizableEditPolicyEx {
    private IFigure selectionFeedbackFigure;
    private IFigure focusFeedbackFigure;

    protected void showPrimarySelection () {
        if (getHostFigure () instanceof WrapLabel) {
            ((WrapLabel) getHostFigure ()).setSelected (true);
            ((WrapLabel) getHostFigure ()).setFocus (true);
        } else {
            showSelection ();
            showFocus ();
        }
    }

    protected void showSelection () {
        if (getHostFigure () instanceof WrapLabel) {
            ((WrapLabel) getHostFigure ()).setSelected (true);
            ((WrapLabel) getHostFigure ()).setFocus (false);
        } else {
            hideSelection ();
            addFeedback (selectionFeedbackFigure = createSelectionFeedbackFigure ());
            refreshSelectionFeedback ();
            hideFocus ();
        }
    }

    protected void hideSelection () {
        if (getHostFigure () instanceof WrapLabel) {
            ((WrapLabel) getHostFigure ()).setSelected (false);
            ((WrapLabel) getHostFigure ()).setFocus (false);
        } else {
            if (selectionFeedbackFigure != null) {
                removeFeedback (selectionFeedbackFigure);
                selectionFeedbackFigure = null;
            }
            hideFocus ();
        }
    }

    protected void showFocus () {
        if (getHostFigure () instanceof WrapLabel) {
            ((WrapLabel) getHostFigure ()).setFocus (true);
        } else {
            hideFocus ();
            addFeedback (focusFeedbackFigure = createFocusFeedbackFigure ());
            refreshFocusFeedback ();
        }
    }

    protected void hideFocus () {
        if (getHostFigure () instanceof WrapLabel) {
            ((WrapLabel) getHostFigure ()).setFocus (false);
        } else {
            if (focusFeedbackFigure != null) {
                removeFeedback (focusFeedbackFigure);
                focusFeedbackFigure = null;
            }
        }
    }

    protected Rectangle getFeedbackBounds () {
        Rectangle bounds;
        if (getHostFigure () instanceof Label) {
            bounds = ((Label) getHostFigure ()).getTextBounds ();
            bounds.intersect (getHostFigure ().getBounds ());
        } else {
            bounds = getHostFigure ().getBounds ().getCopy ();
        }
        getHostFigure ().getParent ().translateToAbsolute (bounds);
        getFeedbackLayer ().translateToRelative (bounds);
        return bounds;
    }

    protected IFigure createSelectionFeedbackFigure () {
        if (getHostFigure () instanceof Label) {
            Label feedbackFigure = new Label ();
            feedbackFigure.setOpaque (true);
            feedbackFigure.setBackgroundColor (ColorConstants.menuBackgroundSelected);
            feedbackFigure.setForegroundColor (ColorConstants.menuForegroundSelected);
            return feedbackFigure;
        } else {
            RectangleFigure feedbackFigure = new RectangleFigure ();
            feedbackFigure.setFill (false);
            return feedbackFigure;
        }
    }

    protected IFigure createFocusFeedbackFigure () {
        return new Figure () {

            protected void paintFigure (Graphics graphics) {
                graphics.drawFocus (getBounds ().getResized (- 1, - 1));
            }

        }

        ;
    }

    protected void updateLabel (Label target) {
        Label source = (Label) getHostFigure ();
        target.setText (source.getText ());
        target.setTextAlignment (source.getTextAlignment ());
        target.setFont (source.getFont ());
    }

    protected void refreshSelectionFeedback () {
        if (selectionFeedbackFigure != null) {
            if (selectionFeedbackFigure instanceof Label) {
                updateLabel ((Label) selectionFeedbackFigure);
                selectionFeedbackFigure.setBounds (getFeedbackBounds ());
            } else {
                selectionFeedbackFigure.setBounds (getFeedbackBounds ().expand (5, 5));
            }
        }
    }

    protected void refreshFocusFeedback () {
        if (focusFeedbackFigure != null) {
            focusFeedbackFigure.setBounds (getFeedbackBounds ());
        }
    }

    public void refreshFeedback () {
        refreshSelectionFeedback ();
        refreshFocusFeedback ();
    }

    protected List createSelectionHandles () {
        MoveHandle moveHandle = new MoveHandle ((GraphicalEditPart) getHost ());
        moveHandle.setBorder (null);
        moveHandle.setDragTracker (new DragEditPartsTrackerEx (getHost ()));
        return Collections.singletonList (moveHandle);
    }

}

