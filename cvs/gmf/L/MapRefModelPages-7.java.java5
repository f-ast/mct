package org.eclipse.gmf.mappings.presentation;

import java.util.List;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.EcorePackage;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;

import org.eclipse.gmf.gmfgraph.Canvas;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.util.Assistant;

import org.eclipse.gmf.internal.common.ui.ComboElementSelectorExtension;

import org.eclipse.gmf.internal.common.ui.CreateNewModelExtension;

import org.eclipse.gmf.internal.common.ui.ElementSelectorExtension;

import org.eclipse.gmf.internal.common.ui.ExtensibleModelSelectionPage;

import org.eclipse.gmf.internal.common.ui.ListElementSelectorExtension;

import org.eclipse.gmf.internal.common.ui.PredefinedModelExtension;

import org.eclipse.gmf.internal.common.ui.ResourceLocationProvider;

import org.eclipse.gmf.mappings.CanvasMapping;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.Mapping;

import org.eclipse.gmf.tooldef.GMFToolPackage;

import org.eclipse.gmf.tooldef.Palette;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.jface.wizard.Wizard;

public class MapRefModelPages {
    private final boolean withSelectors;
    private ResourceSet resourceSet;
    private ExtensibleModelSelectionPage domainModelSelectionPage;
    private ExtensibleModelSelectionPage graphModelSelectionPage;
    private ExtensibleModelSelectionPage toolModelSelectionPage;

    public MapRefModelPages (boolean withSelectors, ResourceSet resourceSet) {
        this.withSelectors = withSelectors;
        this.resourceSet = resourceSet;
    }

    protected ResourceSet getResourceSet () {
        if (resourceSet == null) {
            resourceSet = new ResourceSetImpl ();
        }
        return resourceSet;
    }

    public ExtensibleModelSelectionPage getDomainModelSelectionPage () {
        return domainModelSelectionPage;
    }

    public ExtensibleModelSelectionPage getGraphModelSelectionPage () {
        return graphModelSelectionPage;
    }

    public ExtensibleModelSelectionPage getToolModelSelectionPage () {
        return toolModelSelectionPage;
    }

    public void addPages (Wizard wizard, ISelection selection) {
        ResourceLocationProvider rloc = new ResourceLocationProvider (selection);
        addDomainPage (wizard, rloc);
        addGraphPage (wizard, rloc);
        addToolPage (wizard, rloc);
    }

    protected void addDomainPage (Wizard wizard, ResourceLocationProvider rloc) {
        domainModelSelectionPage = new ExtensibleModelSelectionPage ("domain", rloc, getResourceSet ()) {

            protected String getModelFileExtension () {
                return "ecore";
            }

        }

        ;
        domainModelSelectionPage.setTitle ("Select Domain Model");
        domainModelSelectionPage.setDescription ("Load domain model and select element for canvas mapping.");
        List < URI > uris = rloc.getSelectedURIs ("ecore");
        uris.add (URI.createURI ("platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore"));
        domainModelSelectionPage.addExtension ("prem", new PredefinedModelExtension (domainModelSelectionPage, uris));
        if (withSelectors) {
            domainModelSelectionPage.addExtension ("domainModel", new ComboElementSelectorExtension () {

                protected String getModelElementName () {
                    return "Package:";
                }

                protected String getModelElementLabel (EObject modelElement) {
                    String name = ((EPackage) modelElement).getName ();
                    if (name == null || name.trim ().length () == 0) {
                        name = "<unnamed>";
                    }
                    return name;
                }

                protected EClass getModelElementClass () {
                    return EcorePackage.eINSTANCE.getEPackage ();
                }

            }

            );
            domainModelSelectionPage.addExtension ("domainElement", new ListElementSelectorExtension () {

                protected String getModelElementName () {
                    return "Class:";
                }

                protected String getModelElementLabel (EObject modelElement) {
                    String name = ((EClass) modelElement).getName ();
                    if (name == null || name.trim ().length () == 0) {
                        name = "<unnamed>";
                    }
                    return name;
                }

                protected EClass getModelElementClass () {
                    return EcorePackage.eINSTANCE.getEClass ();
                }

            }

            );
        }
        wizard.addPage (domainModelSelectionPage);
    }

    protected void addGraphPage (Wizard wizard, ResourceLocationProvider rloc) {
        graphModelSelectionPage = new ExtensibleModelSelectionPage ("graph", rloc, getResourceSet ()) {

            protected String getModelFileExtension () {
                return "gmfgraph";
            }

        }

        ;
        graphModelSelectionPage.setTitle ("Select Diagram Canvas");
        graphModelSelectionPage.setDescription ("Load graphical definition model and select diagram canvas for canvas mapping.");
        List < URI > uris = rloc.getSelectedURIs ("gmfgraph");
        uris.add (Assistant.getBasicGraphDef ());
        graphModelSelectionPage.addExtension ("prem", new PredefinedModelExtension (graphModelSelectionPage, uris));
        if (withSelectors) {
            graphModelSelectionPage.addExtension ("canvas", new ComboElementSelectorExtension () {

                protected String getModelElementName () {
                    return "Diagram Canvas:";
                }

                protected String getModelElementLabel (EObject modelElement) {
                    String name = ((Canvas) modelElement).getName ();
                    if (name == null || name.trim ().length () == 0) {
                        name = "<unnamed>";
                    }
                    return name;
                }

                protected EClass getModelElementClass () {
                    return GMFGraphPackage.eINSTANCE.getCanvas ();
                }

            }

            );
        }
        wizard.addPage (graphModelSelectionPage);
    }

    protected void addToolPage (Wizard wizard, ResourceLocationProvider rloc) {
        toolModelSelectionPage = new ExtensibleModelSelectionPage ("tool", rloc, getResourceSet ()) {

            protected String getModelFileExtension () {
                return "gmftool";
            }

            public void validatePage () {
                CreateNewModelExtension ext = (CreateNewModelExtension) getExtension ("new");
                if (ext != null) {
                    ext.validatePage ();
                } else {
                    super.validatePage ();
                }
            }

        }

        ;
        toolModelSelectionPage.setTitle ("Select Diagram Palette");
        toolModelSelectionPage.setDescription ("Load tooling definition model and select diagram palette for canvas mapping.");
        if (withSelectors) {
            toolModelSelectionPage.addExtension ("palette", new ComboElementSelectorExtension () {

                protected String getModelElementName () {
                    return "Diagram Palette:";
                }

                protected String getModelElementLabel (EObject modelElement) {
                    String title = ((Palette) modelElement).getTitle ();
                    if (title == null || title.trim ().length () == 0) {
                        title = "<untitled>";
                    }
                    return title;
                }

                protected EClass getModelElementClass () {
                    return GMFToolPackage.eINSTANCE.getPalette ();
                }

            }

            );
        }
        wizard.addPage (toolModelSelectionPage);
    }

    public void allowNewToolingModel () {
        toolModelSelectionPage.addExtension ("new", new CreateNewModelExtension (toolModelSelectionPage));
    }

    public CreateNewModelExtension getCreateNewToolingModelExt () {
        if (toolModelSelectionPage == null) {
            return null;
        }
        return (CreateNewModelExtension) toolModelSelectionPage.getExtension ("new");
    }

    public boolean shouldCreateNewToolingModel (boolean defaultValue) {
        CreateNewModelExtension ext = getCreateNewToolingModelExt ();
        if (ext == null) {
            return defaultValue;
        }
        return ext.shouldCreateNewModel ();
    }

    protected ElementSelectorExtension getElementSelectorExtension (ExtensibleModelSelectionPage page, String selectorId) {
        if (page == null) {
            return null;
        }
        return (ElementSelectorExtension) page.getExtension (selectorId);
    }

    protected EObject getSelectedElement (ExtensibleModelSelectionPage page, String selectorId) {
        ElementSelectorExtension ext = getElementSelectorExtension (page, selectorId);
        if (ext == null) {
            return null;
        }
        return ext.getModelElement ();
    }

    public ElementSelectorExtension getDomainModelExt () {
        return getElementSelectorExtension (domainModelSelectionPage, "domainModel");
    }

    public ElementSelectorExtension getDomainElementExt () {
        return getElementSelectorExtension (domainModelSelectionPage, "domainElement");
    }

    public ElementSelectorExtension getCanvasExt () {
        return getElementSelectorExtension (graphModelSelectionPage, "canvas");
    }

    public ElementSelectorExtension getPaletteExt () {
        return getElementSelectorExtension (toolModelSelectionPage, "palette");
    }

    public EPackage getDomainModel () {
        return (EPackage) getSelectedElement (domainModelSelectionPage, "domainModel");
    }

    public EClass getDomainElement () {
        return (EClass) getSelectedElement (domainModelSelectionPage, "domainElement");
    }

    public Canvas getCanvas () {
        return (Canvas) getSelectedElement (graphModelSelectionPage, "canvas");
    }

    public Palette getPalette () {
        return (Palette) getSelectedElement (toolModelSelectionPage, "palette");
    }

    public Mapping createMapping () {
        Mapping mapping = GMFMapPackage.eINSTANCE.getGMFMapFactory ().createMapping ();
        CanvasMapping canvasMapping = GMFMapPackage.eINSTANCE.getGMFMapFactory ().createCanvasMapping ();
        mapping.setDiagram (canvasMapping);
        EPackage domainModel = getDomainModel ();
        if (domainModel != null) {
            canvasMapping.setDomainModel (domainModel);
        }
        EClass domainElement = getDomainElement ();
        if (domainElement != null) {
            canvasMapping.setDomainMetaElement (domainElement);
        }
        Canvas canvas = getCanvas ();
        if (canvas != null) {
            canvasMapping.setDiagramCanvas (canvas);
        }
        Palette palette = getPalette ();
        if (palette != null) {
            canvasMapping.setPalette (palette);
        }
        return mapping;
    }

}

