package org.eclipse.gmf.tooldef.presentation;

import java.util.HashMap;

import java.util.Map;

import org.eclipse.core.resources.IContainer;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IFolder;

import org.eclipse.core.resources.IProject;

import org.eclipse.core.resources.IResource;

import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.Path;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;

import org.eclipse.emf.ecore.xmi.XMLResource;

import org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry;

import org.eclipse.gmf.tooldef.GMFToolPackage;

import org.eclipse.gmf.tooldef.provider.GMFToolEditPlugin;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.jface.wizard.Wizard;

import org.eclipse.ui.INewWizard;

import org.eclipse.ui.IWorkbench;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.ui.IWorkbenchWindow;

import org.eclipse.ui.PartInitException;

import org.eclipse.ui.actions.WorkspaceModifyOperation;

import org.eclipse.ui.dialogs.WizardNewFileCreationPage;

import org.eclipse.ui.part.FileEditorInput;

import org.eclipse.ui.part.ISetSelectionTarget;

public class GMFToolModelWizard extends Wizard implements INewWizard {
    protected GMFToolModelWizardNewFileCreationPage newFileCreationPage;
    protected IStructuredSelection selection;
    protected IWorkbench workbench;

    public void init (IWorkbench workbench, IStructuredSelection selection) {
        this.workbench = workbench;
        this.selection = selection;
        setWindowTitle (GMFToolEditPlugin.INSTANCE.getString ("_UI_Wizard_label"));
        setDefaultPageImageDescriptor (ExtendedImageRegistry.INSTANCE.getImageDescriptor (GMFToolEditPlugin.INSTANCE.getImage ("full/wizban/NewGMFTool")));
    }

    protected EObject createInitialModel () {
        return GMFToolPackage.eINSTANCE.getGMFToolFactory ().createToolRegistry ();
    }

    public boolean performFinish () {
        try {
            final IFile modelFile = getModelFile ();
            createModelFile (modelFile);
            return openEditor (modelFile);
        } catch (Exception exception) {
            GMFToolEditPlugin.INSTANCE.log (exception);
            return false;
        }
    }

    protected void createModelFile (final IFile modelFile) throws Exception {
        WorkspaceModifyOperation operation = new WorkspaceModifyOperation () {

            protected void execute (IProgressMonitor progressMonitor) {
                try {
                    ResourceSet resourceSet = new ResourceSetImpl ();
                    URI fileURI = URI.createPlatformResourceURI (modelFile.getFullPath ().toString (), false);
                    Resource resource = resourceSet.createResource (fileURI);
                    EObject rootObject = createInitialModel ();
                    if (rootObject != null) {
                        resource.getContents ().add (rootObject);
                    }
                    Map < String, String > options = new HashMap < String, String > ();
                    options.put (XMLResource.OPTION_ENCODING, "UTF-8");
                    resource.save (options);
                } catch (Exception exception) {
                    GMFToolEditPlugin.INSTANCE.log (exception);
                } finally {
                    progressMonitor.done ();
                }
            }

        }

        ;
        getContainer ().run (false, false, operation);
    }

    protected boolean openEditor (IFile modelFile) {
        IWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow ();
        IWorkbenchPage page = workbenchWindow.getActivePage ();
        final IWorkbenchPart activePart = page.getActivePart ();
        if (activePart instanceof ISetSelectionTarget) {
            final ISelection targetSelection = new StructuredSelection (modelFile);
            getShell ().getDisplay ().asyncExec (new Runnable () {

                public void run () {
                    ((ISetSelectionTarget) activePart).selectReveal (targetSelection);
                }

            }

            );
        }
        try {
            page.openEditor (new FileEditorInput (modelFile), workbench.getEditorRegistry ().getDefaultEditor (modelFile.getFullPath ().toString ()).getId ());
        } catch (PartInitException exception) {
            MessageDialog.openError (workbenchWindow.getShell (), GMFToolEditPlugin.INSTANCE.getString ("_UI_OpenEditorError_label"), exception.getMessage ());
            return false;
        }
        return true;
    }

    public class GMFToolModelWizardNewFileCreationPage extends WizardNewFileCreationPage {

        public GMFToolModelWizardNewFileCreationPage (String pageId, IStructuredSelection selection) {
            super (pageId, selection);
        }

        protected boolean validatePage () {
            if (super.validatePage ()) {
                String requiredExt = GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolEditorFilenameExtension");
                String enteredExt = new Path (getFileName ()).getFileExtension ();
                if (enteredExt == null || ! enteredExt.equals (requiredExt)) {
                    setErrorMessage (GMFToolEditPlugin.INSTANCE.getString ("_WARN_FilenameExtension", new Object [] {requiredExt}));
                    return false;
                } else {
                    return true;
                }
            } else {
                return false;
            }
        }

        public IFile getModelFile () {
            return ResourcesPlugin.getWorkspace ().getRoot ().getFile (getContainerFullPath ().append (getFileName ()));
        }

    }

    public void addPages () {
        newFileCreationPage = new GMFToolModelWizardNewFileCreationPage ("Whatever", selection);
        newFileCreationPage.setTitle (GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolModelWizard_label"));
        newFileCreationPage.setDescription (GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolModelWizard_description"));
        newFileCreationPage.setFileName (GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolEditorFilenameDefaultBase") + "." + GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolEditorFilenameExtension"));
        addPage (newFileCreationPage);
        if (selection != null && ! selection.isEmpty ()) {
            Object selectedElement = selection.iterator ().next ();
            if (selectedElement instanceof IResource) {
                IResource selectedResource = (IResource) selectedElement;
                if (selectedResource.getType () == IResource.FILE) {
                    selectedResource = selectedResource.getParent ();
                }
                if (selectedResource instanceof IFolder || selectedResource instanceof IProject) {
                    newFileCreationPage.setContainerFullPath (selectedResource.getFullPath ());
                    String defaultModelBaseFilename = GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolEditorFilenameDefaultBase");
                    String defaultModelFilenameExtension = GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolEditorFilenameExtension");
                    String modelFilename = defaultModelBaseFilename + "." + defaultModelFilenameExtension;
                    for (int i = 1;
                    ((IContainer) selectedResource).findMember (modelFilename) != null; ++ i) {
                        modelFilename = defaultModelBaseFilename + i + "." + defaultModelFilenameExtension;
                    }
                    newFileCreationPage.setFileName (modelFilename);
                }
            }
        }
    }

    public IFile getModelFile () {
        return newFileCreationPage.getModelFile ();
    }

}

