package org.eclipse.gmf.tooldef.provider;

import java.util.ArrayList;

import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.ComposedAdapterFactory;

import org.eclipse.emf.edit.provider.IChangeNotifier;

import org.eclipse.emf.edit.provider.IDisposable;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.INotifyChangedListener;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.gmf.tooldef.util.GMFToolAdapterFactory;

public class GMFToolItemProviderAdapterFactory extends GMFToolAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    protected ComposedAdapterFactory parentAdapterFactory;
    protected IChangeNotifier changeNotifier = new ChangeNotifier ();
    protected Collection < Object > supportedTypes = new ArrayList < Object > ();

    public GMFToolItemProviderAdapterFactory () {
        supportedTypes.add (IEditingDomainItemProvider.class);
        supportedTypes.add (IStructuredItemContentProvider.class);
        supportedTypes.add (ITreeItemContentProvider.class);
        supportedTypes.add (IItemLabelProvider.class);
        supportedTypes.add (IItemPropertySource.class);
    }

    protected ToolRegistryItemProvider toolRegistryItemProvider;

    @Override
    public Adapter createToolRegistryAdapter () {
        if (toolRegistryItemProvider == null) {
            toolRegistryItemProvider = new ToolRegistryItemProvider (this);
        }
        return toolRegistryItemProvider;
    }

    protected PaletteSeparatorItemProvider paletteSeparatorItemProvider;

    @Override
    public Adapter createPaletteSeparatorAdapter () {
        if (paletteSeparatorItemProvider == null) {
            paletteSeparatorItemProvider = new PaletteSeparatorItemProvider (this);
        }
        return paletteSeparatorItemProvider;
    }

    protected ToolGroupItemProvider toolGroupItemProvider;

    @Override
    public Adapter createToolGroupAdapter () {
        if (toolGroupItemProvider == null) {
            toolGroupItemProvider = new ToolGroupItemProvider (this);
        }
        return toolGroupItemProvider;
    }

    protected PaletteItemProvider paletteItemProvider;

    @Override
    public Adapter createPaletteAdapter () {
        if (paletteItemProvider == null) {
            paletteItemProvider = new PaletteItemProvider (this);
        }
        return paletteItemProvider;
    }

    protected StandardToolItemProvider standardToolItemProvider;

    @Override
    public Adapter createStandardToolAdapter () {
        if (standardToolItemProvider == null) {
            standardToolItemProvider = new StandardToolItemProvider (this);
        }
        return standardToolItemProvider;
    }

    protected CreationToolItemProvider creationToolItemProvider;

    @Override
    public Adapter createCreationToolAdapter () {
        if (creationToolItemProvider == null) {
            creationToolItemProvider = new CreationToolItemProvider (this);
        }
        return creationToolItemProvider;
    }

    protected GenericToolItemProvider genericToolItemProvider;

    @Override
    public Adapter createGenericToolAdapter () {
        if (genericToolItemProvider == null) {
            genericToolItemProvider = new GenericToolItemProvider (this);
        }
        return genericToolItemProvider;
    }

    protected SeparatorItemProvider separatorItemProvider;

    @Override
    public Adapter createSeparatorAdapter () {
        if (separatorItemProvider == null) {
            separatorItemProvider = new SeparatorItemProvider (this);
        }
        return separatorItemProvider;
    }

    protected PredefinedItemItemProvider predefinedItemItemProvider;

    @Override
    public Adapter createPredefinedItemAdapter () {
        if (predefinedItemItemProvider == null) {
            predefinedItemItemProvider = new PredefinedItemItemProvider (this);
        }
        return predefinedItemItemProvider;
    }

    protected PredefinedMenuItemProvider predefinedMenuItemProvider;

    @Override
    public Adapter createPredefinedMenuAdapter () {
        if (predefinedMenuItemProvider == null) {
            predefinedMenuItemProvider = new PredefinedMenuItemProvider (this);
        }
        return predefinedMenuItemProvider;
    }

    protected MenuActionItemProvider menuActionItemProvider;

    @Override
    public Adapter createMenuActionAdapter () {
        if (menuActionItemProvider == null) {
            menuActionItemProvider = new MenuActionItemProvider (this);
        }
        return menuActionItemProvider;
    }

    protected ItemRefItemProvider itemRefItemProvider;

    @Override
    public Adapter createItemRefAdapter () {
        if (itemRefItemProvider == null) {
            itemRefItemProvider = new ItemRefItemProvider (this);
        }
        return itemRefItemProvider;
    }

    protected ContextMenuItemProvider contextMenuItemProvider;

    @Override
    public Adapter createContextMenuAdapter () {
        if (contextMenuItemProvider == null) {
            contextMenuItemProvider = new ContextMenuItemProvider (this);
        }
        return contextMenuItemProvider;
    }

    protected PopupMenuItemProvider popupMenuItemProvider;

    @Override
    public Adapter createPopupMenuAdapter () {
        if (popupMenuItemProvider == null) {
            popupMenuItemProvider = new PopupMenuItemProvider (this);
        }
        return popupMenuItemProvider;
    }

    protected MainMenuItemProvider mainMenuItemProvider;

    @Override
    public Adapter createMainMenuAdapter () {
        if (mainMenuItemProvider == null) {
            mainMenuItemProvider = new MainMenuItemProvider (this);
        }
        return mainMenuItemProvider;
    }

    protected ToolbarItemProvider toolbarItemProvider;

    @Override
    public Adapter createToolbarAdapter () {
        if (toolbarItemProvider == null) {
            toolbarItemProvider = new ToolbarItemProvider (this);
        }
        return toolbarItemProvider;
    }

    protected DefaultImageItemProvider defaultImageItemProvider;

    @Override
    public Adapter createDefaultImageAdapter () {
        if (defaultImageItemProvider == null) {
            defaultImageItemProvider = new DefaultImageItemProvider (this);
        }
        return defaultImageItemProvider;
    }

    protected BundleImageItemProvider bundleImageItemProvider;

    @Override
    public Adapter createBundleImageAdapter () {
        if (bundleImageItemProvider == null) {
            bundleImageItemProvider = new BundleImageItemProvider (this);
        }
        return bundleImageItemProvider;
    }

    protected GenericStyleSelectorItemProvider genericStyleSelectorItemProvider;

    @Override
    public Adapter createGenericStyleSelectorAdapter () {
        if (genericStyleSelectorItemProvider == null) {
            genericStyleSelectorItemProvider = new GenericStyleSelectorItemProvider (this);
        }
        return genericStyleSelectorItemProvider;
    }

    public ComposeableAdapterFactory getRootAdapterFactory () {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory ();
    }

    public void setParentAdapterFactory (ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    @Override
    public boolean isFactoryForType (Object type) {
        return supportedTypes.contains (type) || super.isFactoryForType (type);
    }

    @Override
    public Adapter adapt (Notifier notifier, Object type) {
        return super.adapt (notifier, this);
    }

    @Override
    public Object adapt (Object object, Object type) {
        if (isFactoryForType (type)) {
            Object adapter = super.adapt (object, type);
            if (! (type instanceof Class) || (((Class < ? >) type).isInstance (adapter))) {
                return adapter;
            }
        }
        return null;
    }

    public void addListener (INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener (notifyChangedListener);
    }

    public void removeListener (INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener (notifyChangedListener);
    }

    public void fireNotifyChanged (Notification notification) {
        changeNotifier.fireNotifyChanged (notification);
        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged (notification);
        }
    }

    public void dispose () {
        if (toolRegistryItemProvider != null) toolRegistryItemProvider.dispose ();

        if (paletteSeparatorItemProvider != null) paletteSeparatorItemProvider.dispose ();

        if (toolGroupItemProvider != null) toolGroupItemProvider.dispose ();

        if (paletteItemProvider != null) paletteItemProvider.dispose ();

        if (standardToolItemProvider != null) standardToolItemProvider.dispose ();

        if (creationToolItemProvider != null) creationToolItemProvider.dispose ();

        if (genericToolItemProvider != null) genericToolItemProvider.dispose ();

        if (separatorItemProvider != null) separatorItemProvider.dispose ();

        if (predefinedItemItemProvider != null) predefinedItemItemProvider.dispose ();

        if (predefinedMenuItemProvider != null) predefinedMenuItemProvider.dispose ();

        if (menuActionItemProvider != null) menuActionItemProvider.dispose ();

        if (itemRefItemProvider != null) itemRefItemProvider.dispose ();

        if (contextMenuItemProvider != null) contextMenuItemProvider.dispose ();

        if (popupMenuItemProvider != null) popupMenuItemProvider.dispose ();

        if (mainMenuItemProvider != null) mainMenuItemProvider.dispose ();

        if (toolbarItemProvider != null) toolbarItemProvider.dispose ();

        if (defaultImageItemProvider != null) defaultImageItemProvider.dispose ();

        if (bundleImageItemProvider != null) bundleImageItemProvider.dispose ();

        if (genericStyleSelectorItemProvider != null) genericStyleSelectorItemProvider.dispose ();

    }

}

