package org.eclipse.gmf.runtime.emf.core.resources;

import java.util.HashMap;

import java.util.Iterator;

import java.util.Map;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.EFactory;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.resource.impl.ResourceImpl;

import org.eclipse.emf.ecore.xmi.UnresolvedReferenceException;

import org.eclipse.emf.ecore.xmi.XMIException;

import org.eclipse.emf.ecore.xmi.XMLHelper;

import org.eclipse.emf.ecore.xmi.XMLResource;

import org.eclipse.emf.ecore.xmi.impl.SAXXMIHandler;

import org.eclipse.emf.ecore.xml.type.AnyType;

public class GMFHandler extends SAXXMIHandler {
    protected final Map urisToProxies;
    protected boolean abortOnError;

    public GMFHandler (XMLResource xmiResource, XMLHelper helper, Map options) {
        super (xmiResource, helper, options);
        urisToProxies = new HashMap ();
        if (Boolean.TRUE.equals (options.get (GMFResource.OPTION_ABORT_ON_ERROR))) {
            abortOnError = true;
        }
    }

    public void endDocument () {
        super.endDocument ();
        if (null != extendedMetaData) {
            for (Iterator demandedPackages = extendedMetaData.demandedPackages ().iterator ();
            demandedPackages.hasNext ();) {
                EPackage ePackage = (EPackage) demandedPackages.next ();
                String nsURI = ePackage.getNsURI ();
                if (null != nsURI) {
                    if (null != urisToLocations) {
                        URI locationURI = (URI) urisToLocations.get (nsURI);
                        if (null != locationURI) {
                            Resource resource = new ResourceImpl ();
                            resource.setURI (locationURI);
                            resource.getContents ().add (ePackage);
                        }
                    }
                    for (Iterator entries = helper.getPrefixToNamespaceMap ().iterator ();
                    entries.hasNext ();) {
                        Map.Entry entry = (Map.Entry) entries.next ();
                        if (nsURI.equals (entry.getValue ())) {
                            ePackage.setNsPrefix ((String) entry.getKey ());
                        }
                    }
                }
            }
        }
    }

    protected EObject validateCreateObjectFromFactory (EFactory factory, String typeName, EObject newObject, EStructuralFeature feature) {
        if (! (objects.peek () instanceof AnyType) && null != newObject && newObject.eIsProxy () && ! sameDocumentProxies.contains (newObject)) {
            URI proxyURI = ((InternalEObject) newObject).eProxyURI ();
            Map typeNamesToProxies = (Map) urisToProxies.get (proxyURI);
            if (null == typeNamesToProxies) {
                urisToProxies.put (proxyURI, typeNamesToProxies = new HashMap ());
            }
            EObject proxy = (EObject) typeNamesToProxies.get (typeName);
            if (null == proxy) {
                typeNamesToProxies.put (typeName, proxy = newObject);
            }
            newObject = proxy;
        }
        return super.validateCreateObjectFromFactory (factory, typeName, newObject, feature);
    }

    public void error (XMIException e) {
        super.error (e);
        if (abortOnError) {
            if (! (e instanceof UnresolvedReferenceException)) {
                if (e.getCause () != null) {
                    throw new AbortResourceLoadException (e.getCause ());
                }
                throw new AbortResourceLoadException (e);
            }
        }
    }

}

