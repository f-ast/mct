package org.eclipse.gmf.runtime.common.ui.resources;

import java.text.MessageFormat;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IFileModificationValidator;

import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Status;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;

import org.eclipse.gmf.runtime.common.ui.internal.l10n.CommonUIMessages;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.swt.widgets.Display;

import org.eclipse.team.core.RepositoryProvider;

import org.eclipse.ui.PlatformUI;

public class FileModificationValidator {
    private static FileModificationValidator INSTANCE = new FileModificationValidator ();

    public static FileModificationValidator getInstance () {
        return INSTANCE;
    }

    private FileModificationValidator () {
        super ();
    }

    public boolean okToEdit (final IFile [] files, final String modificationReason) {
        final boolean result [] = new boolean [] {false};
        PlatformUI.getWorkbench ().getDisplay ().syncExec (new Runnable () {

            public void run () {
                IStatus status = ResourcesPlugin.getWorkspace ().validateEdit (files, PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell ());
                if (status.isOK ()) {
                    result [0] = true;
                } else {
                    MessageDialog.openError (PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell (), MessageFormat.format (CommonUIMessages.FileModificationValidator_EditProblemDialogTitle, new Object [] {modificationReason}), MessageFormat.format (CommonUIMessages.FileModificationValidator_EditProblemDialogMessage_part1, new Object [] {modificationReason}) + "\n\n" + CommonUIMessages.FileModificationValidator_EditProblemDialogMessage_part2 + "\n" + MessageFormat.format (CommonUIMessages.FileModificationValidator_EditProblemDialogMessage_part3, new Object [] {status.getMessage ()}));
                    result [0] = false;
                }
            }

        }

        );
        return result [0];
    }

    public boolean okToSave (IFile file) {
        IStatus status = null;
        RepositoryProvider provider = RepositoryProvider.getProvider (file.getProject ());
        IFileModificationValidator validator = null;
        if (provider != null) {
            validator = provider.getFileModificationValidator ();
        }
        if (validator == null) {
            status = getDefaultStatus (file);
        } else {
            status = validator.validateSave (file);
        }
        if (status.isOK ()) {
            return true;
        } else {
            MessageDialog.openError (Display.getCurrent ().getActiveShell (), CommonUIMessages.FileModificationValidator_SaveProblemDialogTitle, CommonUIMessages.FileModificationValidator_SaveProblemDialogMessage_part1 + "\n\n" + CommonUIMessages.FileModificationValidator_SaveProblemDialogMessage_part2 + "\n" + MessageFormat.format (CommonUIMessages.FileModificationValidator_SaveProblemDialogMessage_part3, new Object [] {status.getMessage ()}));
            return false;
        }
    }

    private IStatus getDefaultStatus (IFile file) {
        if (file.isReadOnly ()) {
            String message = MessageFormat.format (CommonUIMessages.FileModificationValidator_FileIsReadOnlyErrorMessage, new Object [] {file.getFullPath ().toString ()});
            return new Status (Status.ERROR, CommonUIPlugin.getPluginId (), Status.ERROR, message, null);
        } else {
            return new Status (Status.OK, CommonUIPlugin.getPluginId (), Status.OK, CommonUIMessages.FileModificationValidator_OK, null);
        }
    }

}

