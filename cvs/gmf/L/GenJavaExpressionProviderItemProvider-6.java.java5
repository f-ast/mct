package org.eclipse.gmf.codegen.gmfgen.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider;

public class GenJavaExpressionProviderItemProvider extends GenExpressionProviderBaseItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public GenJavaExpressionProviderItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    @Override
    public List < IItemPropertyDescriptor > getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addThrowExceptionPropertyDescriptor (object);
            addInjectExpressionBodyPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addThrowExceptionPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenJavaExpressionProvider_throwException_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenJavaExpressionProvider_throwException_feature", "_UI_GenJavaExpressionProvider_type"), GMFGenPackage.eINSTANCE.getGenJavaExpressionProvider_ThrowException (), true, false, false, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, null, null));
    }

    protected void addInjectExpressionBodyPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenJavaExpressionProvider_injectExpressionBody_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenJavaExpressionProvider_injectExpressionBody_feature", "_UI_GenJavaExpressionProvider_type"), GMFGenPackage.eINSTANCE.getGenJavaExpressionProvider_InjectExpressionBody (), true, false, false, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, null, null));
    }

    @Override
    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/GenJavaExpressionProvider"));
    }

    @Override
    public String getText (Object object) {
        GenJavaExpressionProvider genJavaExpressionProvider = (GenJavaExpressionProvider) object;
        return getString ("_UI_GenJavaExpressionProvider_type") + " " + genJavaExpressionProvider.isThrowException ();
    }

    @Override
    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (GenJavaExpressionProvider.class)) {
            case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__THROW_EXCEPTION :
            case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__INJECT_EXPRESSION_BODY :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
        }
        super.notifyChanged (notification);
    }

    @Override
    protected void collectNewChildDescriptors (Collection < Object > newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
    }

}

