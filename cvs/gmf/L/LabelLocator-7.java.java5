package org.eclipse.gmf.runtime.diagram.ui.figures;

import org.eclipse.draw2d.AbstractLocator;

import org.eclipse.draw2d.Connection;

import org.eclipse.draw2d.ConnectionLocator;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.PointList;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.diagram.ui.internal.figures.LabelHelper;

import org.eclipse.gmf.runtime.diagram.ui.internal.util.LabelViewConstants;

import org.eclipse.gmf.runtime.draw2d.ui.geometry.PointListUtilities;

public class LabelLocator extends AbstractLocator {
    protected IFigure parent;
    private int alignment;
    private Point offSet;
    private Dimension extent;

    public LabelLocator (IFigure parent, Point offSet, int alignment) {
        this.parent = parent;
        this.offSet = offSet;
        this.alignment = alignment;
    }

    public LabelLocator (IFigure parent, Rectangle bounds, int alignment) {
        this (parent, bounds.getLocation (), alignment);
        this.extent = bounds.getSize ();
    }

    public Point getOffset () {
        return this.offSet;
    }

    public void setOffset (Point offset) {
        this.offSet = offset;
    }

    public void relocate (IFigure target) {
        if (extent != null) {
            LabelLocator currentConstraint = (LabelLocator) target.getParent ().getLayoutManager ().getConstraint (target);
            Dimension currentExtent = currentConstraint.getSize ();
            Dimension size = new Dimension (currentExtent);
            if (currentExtent.width == - 1) size.width = target.getPreferredSize ().width;

            if (currentExtent.height == - 1) size.height = target.getPreferredSize ().height;

            target.setSize (size);
        } else {
            target.setSize (new Dimension (target.getPreferredSize ().width, target.getPreferredSize ().height));
        }
        Point location = LabelHelper.relativeCoordinateFromOffset (target, getReferencePoint (), offSet);
        target.setLocation (location);
    }

    protected Point getReferencePoint () {
        if (parent instanceof Connection) {
            PointList ptList = ((Connection) parent).getPoints ();
            return PointListUtilities.calculatePointRelativeToLine (ptList, 0, getLocation (), true);
        } else {
            return parent.getBounds ().getLocation ();
        }
    }

    private int getLocation () {
        switch (getAlignment ()) {
            case ConnectionLocator.SOURCE :
                return LabelViewConstants.TARGET_LOCATION;
            case ConnectionLocator.TARGET :
                return LabelViewConstants.SOURCE_LOCATION;
            case ConnectionLocator.MIDDLE :
                return LabelViewConstants.MIDDLE_LOCATION;
            default :
                return LabelViewConstants.MIDDLE_LOCATION;
        }
    }

    public int getAlignment () {
        return alignment;
    }

    public Dimension getSize () {
        return extent.getCopy ();
    }

    protected PointList getPointList () {
        if (parent instanceof Connection) {
            return ((Connection) parent).getPoints ();
        } else {
            PointList ptList = new PointList ();
            ptList.addPoint (parent.getBounds ().getLocation ());
            return ptList;
        }
    }

}

