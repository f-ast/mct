package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.GenPreferencePage;

public abstract class GenPreferencePageImpl extends EObjectImpl implements GenPreferencePage {
    protected static final String ID_EDEFAULT = null;
    protected String iD = ID_EDEFAULT;
    protected static final String NAME_EDEFAULT = null;
    protected String name = NAME_EDEFAULT;
    protected EList < GenPreferencePage > children;

    protected GenPreferencePageImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenPreferencePage ();
    }

    public String getID () {
        return iD;
    }

    public void setID (String newID) {
        String oldID = iD;
        iD = newID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PREFERENCE_PAGE__ID, oldID, iD));

    }

    public String getName () {
        return name;
    }

    public void setName (String newName) {
        String oldName = name;
        name = newName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PREFERENCE_PAGE__NAME, oldName, name));

    }

    public EList < GenPreferencePage > getChildren () {
        if (children == null) {
            children = new EObjectContainmentWithInverseEList < GenPreferencePage > (GenPreferencePage.class, this, GMFGenPackage.GEN_PREFERENCE_PAGE__CHILDREN, GMFGenPackage.GEN_PREFERENCE_PAGE__PARENT);
        }
        return children;
    }

    public GenPreferencePage getParent () {
        if (eContainerFeatureID != GMFGenPackage.GEN_PREFERENCE_PAGE__PARENT) return null;

        return (GenPreferencePage) eContainer ();
    }

    public GenDiagram getDiagram () {
        if (getParent () != null) {
            return getParent ().getDiagram ();
        }
        if (eContainer () instanceof GenDiagram) {
            return (GenDiagram) eContainer ();
        }
        return null;
    }

    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_PREFERENCE_PAGE__CHILDREN :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getChildren ()).basicAdd (otherEnd, msgs);
            case GMFGenPackage.GEN_PREFERENCE_PAGE__PARENT :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_PREFERENCE_PAGE__PARENT, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_PREFERENCE_PAGE__CHILDREN :
                return ((InternalEList < ? >) getChildren ()).basicRemove (otherEnd, msgs);
            case GMFGenPackage.GEN_PREFERENCE_PAGE__PARENT :
                return eBasicSetContainer (null, GMFGenPackage.GEN_PREFERENCE_PAGE__PARENT, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_PREFERENCE_PAGE__PARENT :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_PREFERENCE_PAGE__CHILDREN, GenPreferencePage.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_PREFERENCE_PAGE__ID :
                return getID ();
            case GMFGenPackage.GEN_PREFERENCE_PAGE__NAME :
                return getName ();
            case GMFGenPackage.GEN_PREFERENCE_PAGE__CHILDREN :
                return getChildren ();
            case GMFGenPackage.GEN_PREFERENCE_PAGE__PARENT :
                return getParent ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_PREFERENCE_PAGE__ID :
                setID ((String) newValue);
                return;
            case GMFGenPackage.GEN_PREFERENCE_PAGE__NAME :
                setName ((String) newValue);
                return;
            case GMFGenPackage.GEN_PREFERENCE_PAGE__CHILDREN :
                getChildren ().clear ();
                getChildren ().addAll ((Collection < ? extends GenPreferencePage >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_PREFERENCE_PAGE__ID :
                setID (ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_PREFERENCE_PAGE__NAME :
                setName (NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_PREFERENCE_PAGE__CHILDREN :
                getChildren ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_PREFERENCE_PAGE__ID :
                return ID_EDEFAULT == null ? iD != null : ! ID_EDEFAULT.equals (iD);
            case GMFGenPackage.GEN_PREFERENCE_PAGE__NAME :
                return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT.equals (name);
            case GMFGenPackage.GEN_PREFERENCE_PAGE__CHILDREN :
                return children != null && ! children.isEmpty ();
            case GMFGenPackage.GEN_PREFERENCE_PAGE__PARENT :
                return getParent () != null;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (iD: ");
        result.append (iD);
        result.append (", name: ");
        result.append (name);
        result.append (')');
        return result.toString ();
    }

}

