package org.eclipse.gmf.runtime.common.ui.services.internal;

import org.eclipse.core.runtime.Platform;

import org.eclipse.gmf.runtime.common.core.l10n.AbstractResourceManager;

import org.eclipse.gmf.runtime.common.ui.plugin.XToolsUIPlugin;

import org.eclipse.gmf.runtime.common.ui.services.editor.EditorService;

import org.eclipse.gmf.runtime.common.ui.services.icon.IconService;

import org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService;

import org.eclipse.gmf.runtime.common.ui.services.parser.ParserService;

public class CommonUIServicesPlugin extends XToolsUIPlugin {
    protected final static String EDITOR_PROVIDERS_EXT_P_NAME = "editorProviders";
    protected static final String MARKER_NAVIGATION_PROVIDERS_EXT_P_NAME = "markerNavigationProviders";
    protected static final String ICON_PROVIDERS_EXT_P_NAME = "iconProviders";
    protected static final String PARSER_PROVIDERS_EXT_P_NAME = "parserProviders";
    private static CommonUIServicesPlugin plugin;

    public CommonUIServicesPlugin () {
        super ();
        plugin = this;
    }

    public static CommonUIServicesPlugin getDefault () {
        return plugin;
    }

    public static String getPluginId () {
        return getDefault ().getBundle ().getSymbolicName ();
    }

    public AbstractResourceManager getResourceManager () {
        return null;
    }

    protected void doStartup () {
        configureEditorProviders ();
        configureMarkerNavigationProviders ();
        configureIconProviders ();
        configureParserProviders ();
    }

    private void configureEditorProviders () {
        EditorService.getInstance ().configureProviders (Platform.getExtensionRegistry ().getExtensionPoint (getPluginId (), EDITOR_PROVIDERS_EXT_P_NAME).getConfigurationElements ());
    }

    private void configureMarkerNavigationProviders () {
        MarkerNavigationService.getInstance ().configureProviders (Platform.getExtensionRegistry ().getExtensionPoint (getPluginId (), MARKER_NAVIGATION_PROVIDERS_EXT_P_NAME).getConfigurationElements ());
    }

    private void configureIconProviders () {
        IconService.getInstance ().configureProviders (Platform.getExtensionRegistry ().getExtensionPoint (getPluginId (), ICON_PROVIDERS_EXT_P_NAME).getConfigurationElements ());
    }

    private void configureParserProviders () {
        ParserService.getInstance ().configureProviders (Platform.getExtensionRegistry ().getExtensionPoint (getPluginId (), PARSER_PROVIDERS_EXT_P_NAME).getConfigurationElements ());
    }

}

