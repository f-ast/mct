package org.eclipse.gmf.runtime.diagram.ui.internal.tools;

import java.lang.reflect.InvocationTargetException;

import java.util.Collections;

import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.gef.DragTracker;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.dialogs.ExpansionType;

import org.eclipse.gmf.runtime.diagram.ui.commands.PopupMenuCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.handles.ConnectionHandle;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.internal.commands.ElementTypeLabelProvider;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.menus.PopupMenu;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditDomain;

import org.eclipse.gmf.runtime.diagram.ui.requests.ArrangeRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateUnspecifiedTypeConnectionRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.diagram.ui.requests.ShowRelatedElementsRequest;

import org.eclipse.gmf.runtime.diagram.ui.tools.ConnectionCreationTool;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantService;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.jface.dialogs.ProgressMonitorDialog;

import org.eclipse.jface.operation.IRunnableWithProgress;

import org.eclipse.jface.viewers.LabelProvider;

import org.eclipse.osgi.util.NLS;

import org.eclipse.swt.widgets.Display;

public class ConnectionHandleTool extends ConnectionCreationTool implements DragTracker {
    private static final int NO_RELATED_ELEMENTS_DISPLAY_TIME = 2000;
    private ConnectionHandle connectionHandle;

    public ConnectionHandleTool (ConnectionHandle connectionHandle) {
        this.connectionHandle = connectionHandle;
    }

    protected Request createTargetRequest () {
        if (getConnectionHandle ().isIncoming ()) {
            CreateUnspecifiedTypeConnectionRequest request = new CreateUnspecifiedTypeConnectionRequest (ModelingAssistantService.getInstance ().getRelTypesOnTarget (getConnectionHandle ().getOwner ()), true, getPreferencesHint ());
            request.setDirectionReversed (true);
            return request;
        } else {
            return new CreateUnspecifiedTypeConnectionRequest (ModelingAssistantService.getInstance ().getRelTypesOnSource (getConnectionHandle ().getOwner ()), true, getPreferencesHint ());
        }
    }

    protected Command getCommand () {
        if (getConnectionHandle ().isIncoming ()) {
            CreateUnspecifiedTypeConnectionRequest unspecifiedTypeRequest = (CreateUnspecifiedTypeConnectionRequest) getTargetRequest ();
            unspecifiedTypeRequest.setDirectionReversed (true);
        }
        return super.getCommand ();
    }

    protected boolean handleButtonUp (int button) {
        if (getDragMoveDelta ().equals (0, 0)) {
            return true;
        }
        return super.handleButtonUp (button);
    }

    protected boolean handleDoubleClick (int button) {
        eraseSourceFeedback ();
        setAvoidDeactivation (true);
        List relatedShapes = executeShowRelatedElementsCommand ();
        if (relatedShapes != null && relatedShapes.size () < 2) {
            signalNoRelatedElements ();
        }
        setAvoidDeactivation (false);
        deactivate ();
        return true;
    }

    protected List executeShowRelatedElementsCommand () {
        IGraphicalEditPart targetEP = (IGraphicalEditPart) getTargetEditPart ();
        DiagramEditPart diagramEP = ((DiagramEditDomain) targetEP.getDiagramEditDomain ()).getDiagramEditorPart ().getDiagramEditPart ();
        List popupContent = getConnectionHandle ().isIncoming () ? ModelingAssistantService.getInstance ().getRelTypesForSREOnTarget (targetEP) : ModelingAssistantService.getInstance ().getRelTypesForSREOnSource (targetEP);
        if (popupContent.isEmpty ()) {
            return null;
        }
        LabelProvider labelProvider = new ElementTypeLabelProvider () {

            public String getText (Object element) {
                String elementName = super.getText (element);
                if (element instanceof IElementType) {
                    String theInputStr = DiagramUIMessages.ConnectionHandle_Popup_ShowRelatedXRelationships;
                    String text = NLS.bind (theInputStr, elementName);
                    return text;
                }
                return elementName;
            }

        }

        ;
        PopupMenu popupMenu = new PopupMenu (popupContent, labelProvider);
        PopupMenuCommand popupCmd = new PopupMenuCommand ("", Display.getCurrent ().getActiveShell (), popupMenu);
        popupCmd.execute (null);
        if (! popupCmd.getCommandResult ().getStatus ().isOK ()) {
            return null;
        }
        Object result = popupCmd.getCommandResult ().getReturnValue ();
        if (result instanceof IElementType) {
            ExpansionType expansionType = (getConnectionHandle ().isIncoming ()) ? ExpansionType.INCOMING : ExpansionType.OUTGOING;
            ShowRelatedElementsRequest showRelatedRequest = new ShowRelatedElementsRequest (Collections.singletonList (targetEP), Collections.singletonList (result), false, 1, expansionType);
            Command sreCommand = diagramEP.getCommand (showRelatedRequest);
            if (sreCommand == null) {
                return null;
            }
            final CompoundCommand cc = new CompoundCommand (sreCommand.getLabel ());
            cc.add (sreCommand);
            ArrangeRequest request = new ArrangeRequest (RequestConstants.REQ_ARRANGE_DEFERRED);
            request.setViewAdaptersToArrange (showRelatedRequest.getRelatedShapes ());
            Command arrangeCommand = diagramEP.getCommand (request);
            cc.add (arrangeCommand);
            executeWithProgressMonitor (cc);
            return showRelatedRequest.getRelatedShapes ();
        } else {
            MessageDialog.openInformation (Display.getCurrent ().getActiveShell (), "To Be Implemented", "The Show Related Elements Dialog will popup.");
            return null;
        }
    }

    protected void executeWithProgressMonitor (final Command command) {
        final DiagramCommandStack commandStack = ((IGraphicalEditPart) getTargetEditPart ()).getDiagramEditDomain ().getDiagramCommandStack ();
        try {
            new ProgressMonitorDialog (null).run (false, true, new IRunnableWithProgress () {

                public void run (IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                    commandStack.execute (command, monitor);
                }

            }

            );
        } catch (InvocationTargetException ite) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, ConnectionHandleTool.class, "executeWithProgressMonitor", ite);
            Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "executeWithProgressMonitor", ite);
        } catch (InterruptedException ie) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, ConnectionHandleTool.class, "executeWithProgressMonitor", ie);
        }
    }

    protected void signalNoRelatedElements () {
        getConnectionHandle ().addErrorIcon ();
        Display.getCurrent ().timerExec (NO_RELATED_ELEMENTS_DISPLAY_TIME, new Runnable () {

            public void run () {
                getConnectionHandle ().removeErrorIcon ();
            }

        }

        );
    }

    protected ConnectionHandle getConnectionHandle () {
        return connectionHandle;
    }

}

