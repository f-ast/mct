package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.Iterator;

import java.util.List;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.Tool;

import org.eclipse.gef.palette.PaletteContainer;

import org.eclipse.gef.palette.PaletteDrawer;

import org.eclipse.gef.palette.PaletteEntry;

import org.eclipse.gef.palette.PaletteGroup;

import org.eclipse.gef.palette.PaletteListener;

import org.eclipse.gef.palette.PaletteRoot;

import org.eclipse.gef.palette.SelectionToolEntry;

import org.eclipse.gef.palette.ToolEntry;

import org.eclipse.gef.ui.palette.PaletteViewer;

import org.eclipse.gmf.runtime.common.ui.services.icon.IconService;

import org.eclipse.gmf.runtime.diagram.ui.internal.services.palette.PaletteToolEntry;

import org.eclipse.gmf.runtime.diagram.ui.tools.CreationTool;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.gef.ui.internal.palette.PaletteStack;

import org.eclipse.jface.resource.ImageDescriptor;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.graphics.ImageData;

import org.eclipse.swt.graphics.RGB;

public class DiagramPopupBarEditPolicy extends PopupBarEditPolicy implements PaletteListener {
    private ToolEntry theLastTool = null;

    public void activate () {
        super.activate ();
        addPaletteListener ();
    }

    public void deactivate () {
        removePaletteListener ();
        super.deactivate ();
    }

    protected void fillPopupBarDescriptors () {
        fillBasedOnLastActivePaletteTool ();
        if (getPopupBarDescriptors ().isEmpty ()) {
            fillBasedOnOpenPaletteDrawer ();
            if (getPopupBarDescriptors ().isEmpty ()) {
                fillWithDefaults ();
            }
        }
    }

    public void activeToolChanged (PaletteViewer palette, ToolEntry tool) {
        if (! (tool instanceof SelectionToolEntry)) {
            theLastTool = tool;
        }
    }

    private void addPaletteListener () {
        PaletteViewer paletteViewer = getHost ().getViewer ().getEditDomain ().getPaletteViewer ();
        if (paletteViewer != null) {
            paletteViewer.addPaletteListener (this);
        }
    }

    private void removePaletteListener () {
        PaletteViewer paletteViewer = getHost ().getViewer ().getEditDomain ().getPaletteViewer ();
        if (paletteViewer != null) {
            paletteViewer.removePaletteListener (this);
        }
        theLastTool = null;
    }

    protected void fillBasedOnLastActivePaletteTool () {
        if (theLastTool == null) return;

        PaletteContainer container = theLastTool.getParent ();
        while (! (container instanceof PaletteDrawer) && ! (container instanceof PaletteGroup) && ! (container instanceof PaletteRoot) && container.getParent () != null) {
            container = container.getParent ();
        }
        PaletteRoot realPaletteRoot = getHost ().getViewer ().getEditDomain ().getPaletteViewer ().getPaletteRoot ();
        PaletteContainer paletteRoot = container;
        boolean sameRoot = false;
        while (paletteRoot != null) {
            paletteRoot = paletteRoot.getParent ();
            if (paletteRoot == realPaletteRoot) {
                sameRoot = true;
                break;
            }
        }
        if (sameRoot) {
            fillWithPaletteToolsInContainer (container);
        }
    }

    protected void fillWithPaletteToolsInContainer (PaletteContainer palContainer) {
        if (palContainer != null) {
            List theEntries = palContainer.getChildren ();
            int isz = theEntries.size ();
            for (int i = 0;
            i < isz; i ++) {
                PaletteEntry theEntry = (PaletteEntry) theEntries.get (i);
                if (theEntry != null) {
                    if (theEntry instanceof PaletteToolEntry) {
                        PaletteToolEntry theXtoolsEntry = (PaletteToolEntry) theEntry;
                        Tool tempTool = theXtoolsEntry.createTool ();
                        if ((tempTool != null) && (tempTool instanceof CreationTool)) {
                            CreationTool theXtoolsTool = (CreationTool) tempTool;
                            IElementType theToolType = theXtoolsTool.getElementType ();
                            if ((theToolType != null)) {
                                Image image = IconService.getInstance ().getIcon (theToolType);
                                if (image != null && image.type == SWT.ICON && isMirrored ()) {
                                    image = convert (image);
                                }
                                addPopupBarDescriptor (theToolType, image);
                            }
                        }
                    } else if (theEntry instanceof PaletteStack) {
                        PaletteStack theStack = (PaletteStack) theEntry;
                        fillWithPaletteToolsInContainer (theStack);
                    }

                }
            }
        }
    }

    private boolean isMirrored () {
        return ((getHost ().getViewer ().getControl ().getStyle () & SWT.MIRRORED) != 0);
    }

    private Image convert (Image srcImage) {
        int height = srcImage.getBounds ().height;
        int width = srcImage.getBounds ().width;
        ImageData srcImageData = srcImage.getImageData ();
        RGB backgroundRGB = ((GraphicalEditPart) getHost ()).getFigure ().getBackgroundColor ().getRGB ();
        int backgroundColor = srcImageData.palette.getPixel (backgroundRGB);
        int count = 0;
        for (int y = 0;
        y < height; y ++) {
            for (int x = 0;
            x < width; x ++) {
                if (((srcImageData.maskData [count>> 3]>> (7 - (count % 8))) & 1) == 0) {
                    srcImageData.setPixel (x, y, backgroundColor);
                }
                count ++;
            }
        }
        srcImageData.maskData = null;
        Image convertedImage = ImageDescriptor.createFromImageData (srcImageData).createImage (srcImage.getDevice ());
        imagesToBeDisposed.add (convertedImage);
        return convertedImage;
    }

    protected void fillBasedOnOpenPaletteDrawer () {
        PaletteViewer paletteViewer = getHost ().getViewer ().getEditDomain ().getPaletteViewer ();
        if (paletteViewer != null) {
            for (Iterator iter = paletteViewer.getPaletteRoot ().getChildren ().iterator ();
            iter.hasNext ();) {
                Object child = iter.next ();
                if (child instanceof PaletteDrawer) {
                    PaletteDrawer drawer = (PaletteDrawer) child;
                    if (drawer.isInitiallyOpen ()) {
                        fillWithPaletteToolsInContainer (drawer);
                        break;
                    }
                }
            }
        }
    }

    protected void fillWithDefaults () {
    }

}

