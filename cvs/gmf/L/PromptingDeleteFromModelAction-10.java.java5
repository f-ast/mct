package org.eclipse.gmf.runtime.diagram.ui.internal.actions;

import java.util.Iterator;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gmf.runtime.diagram.ui.actions.DeleteFromModelAction;

import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;

import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;

import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;

import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;

import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;

import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchPart;

public class PromptingDeleteFromModelAction extends DeleteFromModelAction {

    public PromptingDeleteFromModelAction (IWorkbenchPart part) {
        super (part);
    }

    public PromptingDeleteFromModelAction (IWorkbenchPage workbenchPage) {
        super (workbenchPage);
    }

    protected Request createTargetRequest () {
        boolean shouldPrompt = ((IPreferenceStore) getPreferencesHint ().getPreferenceStore ()).getBoolean (IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_MODEL);
        TransactionalEditingDomain editingDomain = getEditingDomain ();
        if (editingDomain != null) {
            DestroyElementRequest destroyRequest = new DestroyElementRequest (editingDomain, shouldPrompt);
            return new EditCommandRequestWrapper (destroyRequest);
        }
        return null;
    }

    protected boolean calculateEnabled () {
        return true;
    }

    protected void doRun (IProgressMonitor progressMonitor) {
        setTargetRequest (null);
        Command command = getCommand ();
        if ((command instanceof CompoundCommand) && (((CompoundCommand) command).getChildren ().length > 0)) {
            CompositeTransactionalCommand compositeModelActionCommand = new CompositeTransactionalCommand (getEditingDomain (), getCommandLabel ());
            CompoundCommand compoundCommand = (CompoundCommand) command;
            Iterator iterator = compoundCommand.getCommands ().iterator ();
            while (iterator.hasNext ()) {
                compositeModelActionCommand.compose (new CommandProxy ((Command) iterator.next ()));
            }
            command = new ICommandProxy (compositeModelActionCommand);
        }
        if (command != null) execute (command, progressMonitor);

    }

}

