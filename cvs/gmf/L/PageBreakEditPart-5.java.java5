package org.eclipse.gmf.runtime.diagram.ui.internal.editparts;

import org.eclipse.draw2d.Cursors;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.DragTracker;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.Request;

import org.eclipse.gef.RootEditPart;

import org.eclipse.gef.editparts.AbstractGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IDiagramPreferenceSupport;

import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.PageBreakNonResizableEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.internal.figures.PageBreaksFigure;

import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageInfoHelper;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

import org.eclipse.jface.preference.IPreferenceStore;

public class PageBreakEditPart extends AbstractGraphicalEditPart {
    private PageBreaksFigure pageOutlineFigure;
    private Rectangle diagramBounds = new Rectangle ();

    public void set (Point location, Rectangle bounds) {
        if (bounds.x < location.x || bounds.y < location.y) {
            calculatePageBreakFigureBounds ();
        } else {
            int width = Math.abs (bounds.right () - location.x);
            int height = Math.abs (bounds.bottom () - location.y);
            Point printerPageSize = getPageSize ();
            float numCols = ((float) width) / printerPageSize.x;
            int cols = Math.max (1, (int) Math.ceil (numCols));
            float numRows = ((float) height) / printerPageSize.y;
            int rows = Math.max (1, (int) Math.ceil (numRows));
            int xInc = printerPageSize.x * cols;
            int yInc = printerPageSize.y * rows;
            getPageBreaksFigure ().setSize (new Dimension (xInc, yInc));
            getPageBreaksFigure ().setLocation (location);
            getPageBreaksFigure ().setPageCount (rows, cols);
        }
    }

    protected IFigure createFigure () {
        pageOutlineFigure = new PageBreaksFigure (PageBreaksFigure.FIGURE);
        pageOutlineFigure.setCursor (Cursors.SIZEALL);
        return pageOutlineFigure;
    }

    private PageBreaksFigure getPageBreaksFigure () {
        if (pageOutlineFigure == null) {
            createFigure ();
        }
        return pageOutlineFigure;
    }

    protected void createEditPolicies () {
        installEditPolicy (EditPolicy.PRIMARY_DRAG_ROLE, new PageBreakNonResizableEditPolicy ());
    }

    public void calculatePageBreakFigureBounds (boolean center) {
        Point printerPageSize = getPageSize ();
        float numCols = ((float) diagramBounds.width) / printerPageSize.x;
        int cols = Math.max (1, (int) Math.ceil (numCols));
        float numRows = ((float) diagramBounds.height) / printerPageSize.y;
        int rows = Math.max (1, (int) Math.ceil (numRows));
        int xInc = printerPageSize.x * cols;
        int yInc = printerPageSize.y * rows;
        getPageBreaksFigure ().setSize (new Dimension (xInc, yInc));
        getPageBreaksFigure ().setPageCount (rows, cols);
        if (center) {
            centerPageBreaksFigure ();
            updatePreferenceStore ();
        }
    }

    public void calculatePageBreakFigureBounds () {
        calculatePageBreakFigureBounds (true);
    }

    public Point getPageSize () {
        IPreferenceStore s = getPreferenceStoreForPageSetup ();
        IMapMode mm = MapModeUtil.getMapMode ();
        RootEditPart drEP = getRoot ();
        if (drEP instanceof DiagramRootEditPart) {
            mm = ((DiagramRootEditPart) drEP).getMapMode ();
        }
        return PageInfoHelper.getPageSize (s, mm);
    }

    private void centerPageBreaksFigure () {
        Rectangle pageBreakBounds = getPageBreaksFigure ().getBounds ();
        Rectangle r = diagramBounds;
        Point offset = new Point (((pageBreakBounds.width - diagramBounds.width) / 2), ((pageBreakBounds.height - diagramBounds.height) / 2));
        Rectangle centeredRec = new Rectangle (r.x - offset.x, r.y - offset.y, pageBreakBounds.width, pageBreakBounds.height);
        getPageBreaksFigure ().setBounds (centeredRec);
    }

    public void resize (Rectangle newBounds) {
        Rectangle pageBreakBounds = getFigure ().getBounds ();
        Point pageSize = getPageSize ();
        if (newBounds.x != diagramBounds.x || newBounds.width != diagramBounds.width) {
            if (newBounds.x < diagramBounds.x || newBounds.right () < diagramBounds.right ()) {
                if (newBounds.x < pageBreakBounds.x) {
                    int effectivewidth = Math.abs (pageBreakBounds.right () - newBounds.right ()) + newBounds.width;
                    float cols = ((float) effectivewidth) / pageSize.x;
                    int requiredCols = (int) Math.ceil (Math.abs (cols));
                    int xOffset = Math.round (requiredCols * pageSize.x);
                    getPageBreaksFigure ().setCols (requiredCols);
                    pageBreakBounds = getPageBreaksFigure ().getBounds ();
                    getPageBreaksFigure ().setBounds (new Rectangle (pageBreakBounds.right () - xOffset, pageBreakBounds.y, xOffset, pageBreakBounds.height));
                }
                pageBreakBounds = getPageBreaksFigure ().getBounds ();
                int effectiveWidth = Math.abs (newBounds.x - pageBreakBounds.x) + newBounds.width;
                float cols = ((float) effectiveWidth) / pageSize.x;
                int requiredCols = (int) Math.ceil (Math.abs (cols));
                int xOffset = Math.round (requiredCols * pageSize.x);
                getPageBreaksFigure ().setCols (requiredCols);
                getPageBreaksFigure ().setBounds (new Rectangle (pageBreakBounds.x, pageBreakBounds.y, xOffset, pageBreakBounds.height));
            } else {
                if (newBounds.right () > pageBreakBounds.right ()) {
                    int effectiveWidth = Math.abs (newBounds.x - pageBreakBounds.x) + newBounds.width;
                    float x = ((float) effectiveWidth) / pageSize.x;
                    int reqdCols = (int) Math.ceil (Math.abs (x));
                    int xOffset = Math.round (reqdCols * pageSize.x);
                    getPageBreaksFigure ().setCols (reqdCols);
                    pageBreakBounds = getFigure ().getBounds ();
                    getPageBreaksFigure ().setBounds (new Rectangle (pageBreakBounds.x, pageBreakBounds.y, xOffset, pageBreakBounds.height));
                }
                pageBreakBounds = getPageBreaksFigure ().getBounds ();
                int effectiveWidth = Math.abs (pageBreakBounds.right () - newBounds.right ()) + newBounds.width;
                float cols = ((float) effectiveWidth) / pageSize.x;
                int requiredCols = (int) Math.ceil (Math.abs (cols));
                int xOffset = Math.round (requiredCols * pageSize.x);
                getPageBreaksFigure ().setCols (requiredCols);
                getPageBreaksFigure ().setBounds (new Rectangle (pageBreakBounds.right () - xOffset, pageBreakBounds.y, xOffset, pageBreakBounds.height));
            }
        }
        if (newBounds.y != diagramBounds.y || newBounds.height != diagramBounds.height) {
            if (newBounds.y < diagramBounds.y || newBounds.bottom () < diagramBounds.bottom ()) {
                if (newBounds.y < pageBreakBounds.y) {
                    int effectiveHeight = (pageBreakBounds.bottom () - newBounds.bottom ()) + newBounds.height;
                    float rows = ((float) effectiveHeight) / pageSize.y;
                    int requiredRows = (int) Math.ceil (Math.abs (rows));
                    int yOffset = Math.round (requiredRows * pageSize.y);
                    getPageBreaksFigure ().setRows (requiredRows);
                    pageBreakBounds = getFigure ().getBounds ();
                    getPageBreaksFigure ().setBounds (new Rectangle (pageBreakBounds.x, pageBreakBounds.bottom () - yOffset, pageBreakBounds.width, yOffset));
                }
                pageBreakBounds = getPageBreaksFigure ().getBounds ();
                int effectiveHeight = Math.abs (newBounds.y - pageBreakBounds.y) + newBounds.height;
                float rows = ((float) effectiveHeight) / pageSize.y;
                int requiredRows = (int) Math.ceil (Math.abs (rows));
                int yOffset = Math.round (requiredRows * pageSize.y);
                getPageBreaksFigure ().setRows (requiredRows);
                pageBreakBounds = getFigure ().getBounds ();
                getPageBreaksFigure ().setBounds (new Rectangle (pageBreakBounds.x, pageBreakBounds.y, pageBreakBounds.width, yOffset));
            } else {
                if (newBounds.bottom () > pageBreakBounds.bottom ()) {
                    int effectiveHeight = (newBounds.y - pageBreakBounds.y) + newBounds.height;
                    float rows = ((float) effectiveHeight) / pageSize.y;
                    int requiredRows = (int) Math.ceil (Math.abs (rows));
                    int yOffset = Math.round (requiredRows * pageSize.y);
                    getPageBreaksFigure ().setRows (requiredRows);
                    pageBreakBounds = getFigure ().getBounds ();
                    getPageBreaksFigure ().setBounds (new Rectangle (pageBreakBounds.x, pageBreakBounds.y, pageBreakBounds.width, yOffset));
                }
                pageBreakBounds = getPageBreaksFigure ().getBounds ();
                int effectiveheight = Math.abs (pageBreakBounds.bottom () - newBounds.bottom ()) + newBounds.height;
                float rows = ((float) effectiveheight) / pageSize.y;
                int requiredRows = (int) Math.ceil (Math.abs (rows));
                int yOffset = Math.round (requiredRows * pageSize.y);
                getPageBreaksFigure ().setRows (requiredRows);
                pageBreakBounds = getFigure ().getBounds ();
                getPageBreaksFigure ().setBounds (new Rectangle (pageBreakBounds.x, pageBreakBounds.bottom () - yOffset, pageBreakBounds.width, yOffset));
            }
        }
        this.diagramBounds = newBounds;
    }

    private void updatePreferenceStore () {
        Rectangle r = getPageBreaksFigure ().getBounds ();
        IPreferenceStore s = ((DiagramGraphicalViewer) getRoot ().getViewer ()).getWorkspaceViewerPreferenceStore ();
        s.setValue (WorkspaceViewerProperties.PAGEBREAK_X, r.x);
        s.setValue (WorkspaceViewerProperties.PAGEBREAK_Y, r.y);
    }

    public DragTracker getDragTracker (Request req) {
        return new DragEditPartsTrackerEx (this) {

            protected boolean isMove () {
                return true;
            }

        }

        ;
    }

    private IPreferenceStore getPreferenceStoreForPageSetup () {
        IPreferenceStore workspaceStore = ((DiagramGraphicalViewer) getRoot ().getViewer ()).getWorkspaceViewerPreferenceStore ();
        if (workspaceStore.getBoolean (WorkspaceViewerProperties.PREF_USE_DIAGRAM_SETTINGS)) {
            return workspaceStore;
        } else if (getRoot () instanceof IDiagramPreferenceSupport) {
            ((IDiagramPreferenceSupport) getRoot ()).getPreferencesHint ().getPreferenceStore ();
        }

        return (IPreferenceStore) PreferencesHint.USE_DEFAULTS.getPreferenceStore ();
    }

}

