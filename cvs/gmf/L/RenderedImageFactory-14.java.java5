package org.eclipse.gmf.runtime.draw2d.ui.render.factory;

import java.io.FileInputStream;

import java.io.InputStream;

import java.lang.ref.WeakReference;

import java.net.URL;

import java.security.InvalidParameterException;

import java.util.ArrayList;

import java.util.List;

import java.util.ListIterator;

import java.util.Map;

import java.util.WeakHashMap;

import java.util.zip.Adler32;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.core.runtime.IExtensionPoint;

import org.eclipse.core.runtime.Platform;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.AbstractRenderedImage;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderDebugOptions;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderPlugin;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.factory.RenderedImageKey;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.image.ImageRenderedImage;

import org.eclipse.swt.graphics.RGB;

public class RenderedImageFactory {
    static private Map instanceMap = new WeakHashMap ();

    static public RenderInfo createInfo (int width, int height, boolean maintainAspectRatio, boolean antialias, RGB fill, RGB outline) {
        RenderedImageKey svgInfo = new RenderedImageKey ();
        svgInfo.setValues (width, height, maintainAspectRatio, antialias, fill, outline);
        return svgInfo;
    }

    static public RenderedImage getInstance (URL theURL) {
        return getInstance (theURL, new RenderedImageKey ());
    }

    static public RenderedImage getInstance (URL theURL, RenderInfo info) {
        try {
            InputStream is = theURL.openStream ();
            int size = is.available ();
            byte [] buffer = new byte [size];
            is.read (buffer);
            is.close ();
            return getInstance (buffer, info, theURL.toString ());
        } catch (Exception e) {
            Trace.throwing (Draw2dRenderPlugin.getInstance (), Draw2dRenderDebugOptions.EXCEPTIONS_THROWING, RenderedImage.class, "RenderedImageFactory.getInstance()", e);
        }
        return null;
    }

    public static RenderedImage getInstance (byte [] buffer, RenderInfo info, String url) {
        Adler32 checksum = new Adler32 ();
        checksum.update (buffer);
        final RenderedImageKey key = new RenderedImageKey (info, checksum.getValue (), null, url);
        WeakReference ref = (WeakReference) instanceMap.get (key);
        RenderedImage image = null;
        if (ref != null) image = (RenderedImage) (((WeakReference) instanceMap.get (key)).get ());
        else image = autodetectImage (buffer, key);

        if (image == null) {
            instanceMap.remove (key);
            image = getInstance (buffer);
        }
        return image;
    }

    static public RenderedImage getInstance (String szFilePath) {
        return getInstance (szFilePath, new RenderedImageKey ());
    }

    static public RenderedImage getInstance (String szFilePath, RenderInfo info) {
        try {
            FileInputStream fis = new FileInputStream (szFilePath);
            int size = fis.available ();
            byte [] buffer = new byte [size];
            fis.read (buffer);
            fis.close ();
            return getInstance (buffer, info, szFilePath);
        } catch (Exception e) {
            Trace.throwing (Draw2dRenderPlugin.getInstance (), Draw2dRenderDebugOptions.EXCEPTIONS_THROWING, RenderedImageFactory.class, "RenderedImageFactory.getInstance()", e);
        }
        return null;
    }

    static public RenderedImage getInstance (byte [] buffer) {
        return getInstance (buffer, new RenderedImageKey ());
    }

    static public RenderedImage getRelatedInstance (RenderedImage image, RenderInfo info) {
        if (image instanceof AbstractRenderedImage) {
            RenderedImageKey oldKey = ((AbstractRenderedImage) image).getKey ();
            Object extraData = oldKey.getExtraData ();
            if (info.getBackgroundColor () != null && ! info.getBackgroundColor ().equals (oldKey.getBackgroundColor ())) {
                extraData = null;
            } else if (info.getForegroundColor () != null && ! info.getForegroundColor ().equals (oldKey.getForegroundColor ())) {
                extraData = null;
            }

            RenderedImageKey key = new RenderedImageKey (info, oldKey.getChecksum (), extraData);
            WeakReference ref = (WeakReference) instanceMap.get (key);
            if (ref != null) {
                return (RenderedImage) ref.get ();
            } else {
                return autodetectImage (((AbstractRenderedImage) image).getBuffer (), key);
            }
        }
        return null;
    }

    static public RenderedImage getInstance (byte [] buffer, RenderInfo info) {
        if (buffer == null) throw new InvalidParameterException ();

        Adler32 checksum = new Adler32 ();
        checksum.update (buffer);
        final RenderedImageKey key = new RenderedImageKey (info, checksum.getValue (), null);
        WeakReference ref = (WeakReference) instanceMap.get (key);
        RenderedImage image = null;
        if (ref != null) image = (RenderedImage) (((WeakReference) instanceMap.get (key)).get ());
        else image = autodetectImage (buffer, key);

        if (image == null) {
            instanceMap.remove (key);
            image = getInstance (buffer);
        }
        return image;
    }

    private static final String E_MODIFIER_FACTORY = "factory";
    private static final String A_CLASS = "class";
    static private List imageTypes = null;

    static private RenderedImage autodetectImage (byte [] buffer, final RenderedImageKey key) {
        if (imageTypes == null) {
            imageTypes = new ArrayList ();
            IExtensionPoint riExtensionPt = Platform.getExtensionRegistry ().getExtensionPoint ("org.eclipse.gmf.runtime.draw2d.ui.render", "renderedImageFactory");
            IConfigurationElement [] configEls = riExtensionPt.getConfigurationElements ();
            for (int i = 0;
            i < configEls.length; i ++) {
                IConfigurationElement element = configEls [i];
                if (element.getName ().equals (E_MODIFIER_FACTORY)) {
                    RenderedImageType imageType = null;
                    try {
                        imageType = (RenderedImageType) element.createExecutableExtension (A_CLASS);
                        if (imageType != null) imageTypes.add (imageType);

                    } catch (CoreException e) {
                        continue;
                    }
                }
            }
        }
        RenderedImage image = null;
        ListIterator li = imageTypes.listIterator ();
        while (li.hasNext ()) {
            RenderedImageType imageType = (RenderedImageType) li.next ();
            image = imageType.autoDetect (buffer, key);
            if (image != null) break;

        }
        if (image == null) {
            image = new ImageRenderedImage (buffer, key);
        }
        if (image != null) {
            instanceMap.put (key, new WeakReference (image));
        }
        return image;
    }

}

