package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.Iterator;

import java.util.List;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;

import org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramActionsResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.resource.ImageDescriptor;

import org.eclipse.ui.IWorkbenchPage;

public class SizeHeightAction extends DiagramAction {
    private static final String ACTION_LABEL = "SameSizeAction.MakeSameSizeHeight.ActionLabelText";
    private static final String ACTION_TOOLTIP = "SameSizeAction.MakeSameSizeHeight.ActionToolTipText";

    public SizeHeightAction (IWorkbenchPage workbenchPage) {
        super (workbenchPage);
    }

    public void init () {
        super.init ();
        setId (ActionIds.ACTION_MAKE_SAME_SIZE_HEIGHT);
        setText (DiagramActionsResourceManager.getI18NString (ACTION_LABEL));
        setToolTipText (DiagramActionsResourceManager.getI18NString (ACTION_TOOLTIP));
        ImageDescriptor enabledImage = DiagramActionsResourceManager.getInstance ().getImageDescriptor (DiagramActionsResourceManager.IMAGE_MAKE_SAME_SIZE_HEIGHT);
        setImageDescriptor (enabledImage);
        setHoverImageDescriptor (enabledImage);
    }

    protected Request createTargetRequest () {
        return null;
    }

    protected boolean isSelectionListener () {
        return true;
    }

    protected Command getCommand () {
        CompoundCommand doResizeCmd = new CompoundCommand ();
        Iterator iter = getSelectedObjects ().iterator ();
        int last = getSelectedObjects ().size () - 1;
        IGraphicalEditPart primary = (IGraphicalEditPart) getSelectedObjects ().get (last);
        View primaryView = (View) primary.getModel ();
        Integer width = (Integer) ViewUtil.getPropertyValue (primaryView, Properties.ID_EXTENTX);
        Integer height = (Integer) ViewUtil.getPropertyValue (primaryView, Properties.ID_EXTENTY);
        Dimension primarySize;
        if (width.intValue () == - 1 || height.intValue () == - 1) primarySize = primary.getFigure ().getSize ().getCopy ();
        else primarySize = new Dimension (width.intValue (), height.intValue ());

        while (iter.hasNext ()) {
            IGraphicalEditPart toResize = (IGraphicalEditPart) iter.next ();
            View resizeView = (View) toResize.getModel ();
            Dimension size = primarySize.getCopy ();
            size.width = ((Integer) ViewUtil.getPropertyValue (resizeView, Properties.ID_EXTENTX)).intValue ();
            doResizeCmd.add (new EtoolsProxyCommand (new SetBoundsCommand ("", new EObjectAdapter (resizeView), size)));
        }
        return doResizeCmd.unwrap ();
    }

    protected boolean calculateEnabled () {
        List selection = getSelectedObjects ();
        if (selection.size () < 2) {
            return false;
        }
        return true;
    }

}

