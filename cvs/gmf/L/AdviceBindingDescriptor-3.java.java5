package org.eclipse.gmf.runtime.emf.type.core.internal.descriptors;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.emf.type.core.IContainerDescriptor;

import org.eclipse.gmf.runtime.emf.type.core.IElementMatcher;

import org.eclipse.gmf.runtime.emf.type.core.edithelper.IEditHelperAdvice;

import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePlugin;

import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePluginStatusCodes;

import org.eclipse.gmf.runtime.emf.type.core.internal.impl.XMLExpressionMatcher;

import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.ResourceManager;

public class AdviceBindingDescriptor implements IEditHelperAdviceDescriptor {
    private final String id;
    private final String typeId;
    private final AdviceBindingInheritance inheritance;
    private String matcherClassName;
    private IElementMatcher matcher;
    private IConfigurationElement matcherConfig;
    private final IConfigurationElement bindingConfig;
    private String editHelperAdviceName;
    private IEditHelperAdvice editHelperAdvice;
    private IContainerDescriptor containerDescriptor;
    private final MetamodelDescriptor metamodelDescriptor;

    public AdviceBindingDescriptor (IConfigurationElement config, MetamodelDescriptor metamodelDescriptor) throws CoreException {
        this.bindingConfig = config;
        this.metamodelDescriptor = metamodelDescriptor;
        this.id = config.getAttribute (ElementTypeXmlConfig.A_ID);
        if (id == null) {
            throw EMFTypePluginStatusCodes.getAdviceBindingInitException (StringStatics.BLANK, EMFTypePluginStatusCodes.ADVICE_BINDING_NO_ID_KEY);
        }
        editHelperAdviceName = config.getAttribute (ElementTypeXmlConfig.A_CLASS);
        if (editHelperAdviceName == null) {
            throw EMFTypePluginStatusCodes.getAdviceBindingInitException (id, EMFTypePluginStatusCodes.ADVICE_BINDING_NO_EDIT_HELPER_ADVICE_KEY);
        }
        this.typeId = config.getAttribute (ElementTypeXmlConfig.A_TYPE_ID);
        if (typeId == null) {
            throw EMFTypePluginStatusCodes.getAdviceBindingInitException (id, EMFTypePluginStatusCodes.ADVICE_BINDING_NO_TYPE_ID_KEY);
        }
        IConfigurationElement [] containerConfigs = config.getChildren (ElementTypeXmlConfig.E_ECONTAINER);
        if (containerConfigs.length > 0) {
            containerDescriptor = new ContainerDescriptor (containerConfigs [0], metamodelDescriptor, getId ());
        }
        String inheritanceString = config.getAttribute (ElementTypeXmlConfig.A_INHERITANCE);
        AdviceBindingInheritance declaredInheritance = AdviceBindingInheritance.getAdviceBindingInheritance (inheritanceString);
        if (declaredInheritance == null) {
            if (inheritanceString != null) {
                throw EMFTypePluginStatusCodes.getAdviceBindingInitException (id, EMFTypePluginStatusCodes.ADVICE_BINDING_INVALID_INHERITANCE);
            }
            declaredInheritance = AdviceBindingInheritance.NONE;
        }
        this.inheritance = declaredInheritance;
        IConfigurationElement [] enablementConfigs = config.getChildren (ElementTypeXmlConfig.E_ENABLEMENT);
        if (enablementConfigs.length > 0) {
            matcher = new XMLExpressionMatcher (enablementConfigs [0], id);
        }
        if (matcher == null) {
            IConfigurationElement [] matcherConfigs = config.getChildren (ElementTypeXmlConfig.E_MATCHER);
            if (matcherConfigs.length > 0) {
                matcherClassName = matcherConfigs [0].getAttribute (ElementTypeXmlConfig.A_CLASS);
                if (matcherClassName == null) {
                    throw EMFTypePluginStatusCodes.getInitException (id, EMFTypePluginStatusCodes.MATCHER_NO_CLASS_KEY, null);
                }
                matcherConfig = matcherConfigs [0];
            }
        }
    }

    public String getTypeId () {
        return typeId;
    }

    public String getId () {
        return id;
    }

    public IElementMatcher getMatcher () {
        if (matcher == null && matcherClassName != null && matcherConfig != null) {
            try {
                matcher = (IElementMatcher) matcherConfig.createExecutableExtension (ElementTypeXmlConfig.A_CLASS);
            } catch (CoreException e) {
                Log.error (EMFTypePlugin.getPlugin (), EMFTypePluginStatusCodes.MATCHER_CLASS_NOT_FOUND, ResourceManager.getMessage (EMFTypePluginStatusCodes.MATCHER_CLASS_NOT_FOUND_KEY, new Object [] {matcherClassName}), e);
                matcherClassName = null;
            }
        }
        return matcher;
    }

    public IEditHelperAdvice getEditHelperAdvice () {
        if (editHelperAdvice == null) {
            if (editHelperAdviceName != null) {
                try {
                    editHelperAdvice = (IEditHelperAdvice) bindingConfig.createExecutableExtension (ElementTypeXmlConfig.A_CLASS);
                } catch (CoreException e) {
                    Log.error (EMFTypePlugin.getPlugin (), EMFTypePluginStatusCodes.EDIT_HELPER_ADVICE_CLASS_NOT_FOUND, ResourceManager.getMessage (EMFTypePluginStatusCodes.EDIT_HELPER_ADVICE_CLASS_NOT_FOUND_KEY, new Object [] {editHelperAdviceName}), e);
                    editHelperAdviceName = null;
                }
            }
        }
        return editHelperAdvice;
    }

    public MetamodelDescriptor getMetamodelDescriptor () {
        return metamodelDescriptor;
    }

    public AdviceBindingInheritance getInheritance () {
        return inheritance;
    }

    public IContainerDescriptor getContainerDescriptor () {
        return containerDescriptor;
    }

}

