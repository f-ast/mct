package org.eclipse.gmf.mappings.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.mappings.ChildReference;

import org.eclipse.gmf.mappings.GMFMapFactory;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.LabelNodeMapping;

import org.eclipse.gmf.mappings.NodeMapping;

import org.eclipse.gmf.mappings.NodeReference;

import org.eclipse.gmf.mappings.presentation.FilterUtil;

public class ChildReferenceItemProvider extends NodeReferenceItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public ChildReferenceItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addCompartmentPropertyDescriptor (object);
            addReferencedChildPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addCompartmentPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_ChildReference_compartment_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_ChildReference_compartment_feature", "_UI_ChildReference_type"), GMFMapPackage.eINSTANCE.getChildReference_Compartment (), true, null, null, null));
    }

    protected void addReferencedChildPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_ChildReference_referencedChild_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_ChildReference_referencedChild_feature", "_UI_ChildReference_type"), GMFMapPackage.eINSTANCE.getChildReference_ReferencedChild (), true, null, null, null) {

            protected Collection getComboBoxObjects (Object object) {
                return FilterUtil.sort (super.getComboBoxObjects (object));
            }

        }

        );
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFMapPackage.eINSTANCE.getChildReference_OwnedChild ());
        }
        return childrenFeatures;
    }

    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/ChildReference"));
    }

    public String getText (Object object) {
        if (object instanceof NodeReference) {
            NodeReference reference = (NodeReference) object;
            String result = " <";
            if (reference.getContainmentFeature () != null) {
                result += reference.getContainmentFeature ().getName ();
            }
            if (reference.getChildrenFeature () != null) {
                result += "|";
                result += reference.getChildrenFeature ().getName ();
            }
            if (reference.isSetChild ()) {
                NodeMapping mapping = reference.getChild ();
                if (mapping.getDomainMetaElement () != null) {
                    result += "(";
                    result += mapping.getDomainMetaElement ().getName ();
                    result += ")";
                }
                result += "/";
                if (mapping.getDiagramNode () != null) {
                    result += mapping.getDiagramNode ().getName ();
                } else if (mapping instanceof LabelNodeMapping && ((LabelNodeMapping) mapping).getDiagramLabel () != null) {
                    result += ((LabelNodeMapping) mapping).getDiagramLabel ().getName ();
                }

            }
            result += ">";
            return getString ("_UI_ChildReference_type") + result;
        }
        return getString ("_UI_ChildReference_type");
    }

    public void notifyChangedGen (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (ChildReference.class)) {
            case GMFMapPackage.CHILD_REFERENCE__OWNED_CHILD :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    public void notifyChanged (Notification notification) {
        switch (notification.getFeatureID (NodeMapping.class)) {
            case GMFMapPackage.NODE_REFERENCE__CONTAINMENT_FEATURE :
            case GMFMapPackage.NODE_REFERENCE__CHILDREN_FEATURE :
                fireNotifyChanged (new ViewerNotification (notification, null));
                break;
        }
        notifyChangedGen (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFMapPackage.eINSTANCE.getChildReference_OwnedChild (), GMFMapFactory.eINSTANCE.createNodeMapping ()));
        newChildDescriptors.add (createChildParameter (GMFMapPackage.eINSTANCE.getChildReference_OwnedChild (), GMFMapFactory.eINSTANCE.createLabelNodeMapping ()));
    }

    public ResourceLocator getResourceLocator () {
        return GMFMapEditPlugin.INSTANCE;
    }

}

