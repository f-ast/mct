package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;

import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;

import org.eclipse.gmf.codegen.gmfgen.GenLanguage;

import org.eclipse.gmf.codegen.gmfgen.ValueExpression;

public abstract class GenExpressionProviderBaseImpl extends EObjectImpl implements GenExpressionProviderBase {
    protected EList < ValueExpression > expressions;

    protected GenExpressionProviderBaseImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenExpressionProviderBase ();
    }

    public abstract GenLanguage getLanguage ();

    public EList < ValueExpression > getExpressions () {
        if (expressions == null) {
            expressions = new EObjectContainmentWithInverseEList < ValueExpression > (ValueExpression.class, this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS, GMFGenPackage.VALUE_EXPRESSION__PROVIDER);
        }
        return expressions;
    }

    public GenExpressionProviderContainer getContainer () {
        if (eContainerFeatureID != GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER) return null;

        return (GenExpressionProviderContainer) eContainer ();
    }

    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getExpressions ()).basicAdd (otherEnd, msgs);
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS :
                return ((InternalEList < ? >) getExpressions ()).basicRemove (otherEnd, msgs);
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER :
                return eBasicSetContainer (null, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS, GenExpressionProviderContainer.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS :
                return getExpressions ();
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER :
                return getContainer ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS :
                getExpressions ().clear ();
                getExpressions ().addAll ((Collection < ? extends ValueExpression >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS :
                getExpressions ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS :
                return expressions != null && ! expressions.isEmpty ();
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER :
                return getContainer () != null;
        }
        return super.eIsSet (featureID);
    }

}

