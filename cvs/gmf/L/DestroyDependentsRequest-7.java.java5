package org.eclipse.gmf.runtime.emf.type.core.requests;

import java.util.Collection;

import java.util.Collections;

import java.util.HashMap;

import java.util.HashSet;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import java.util.Set;

import org.eclipse.emf.common.util.TreeIterator;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.emf.type.core.EditHelperContext;

import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;

import org.eclipse.gmf.runtime.emf.type.core.IClientContext;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.EMFTypeCoreMessages;

import org.eclipse.gmf.runtime.emf.type.core.internal.requests.RequestCacheEntries;

public class DestroyDependentsRequest extends DestroyRequest {
    private EObject elementToDestroy;
    private EObject ctorElementToDestroy;
    private Set dependentElementsToDestroy;
    private Set immutableViewOfDependents;

    public DestroyDependentsRequest (TransactionalEditingDomain editingDomain, EObject elementToDestroy, boolean confirmationRequired) {
        super (editingDomain, confirmationRequired);
        this.elementToDestroy = elementToDestroy;
        ctorElementToDestroy = elementToDestroy;
    }

    public final EObject getElementToDestroy () {
        return elementToDestroy;
    }

    public final void setElementToDestroy (EObject elementToDestroy) {
        this.elementToDestroy = elementToDestroy;
        if (elementToDestroy != null) {
            internalGetDependentElementsToDestroy ().add (elementToDestroy);
        }
    }

    public EObject getContainer () {
        if (getElementToDestroy () != null) {
            return getElementToDestroy ().eContainer ();
        }
        return null;
    }

    public List getElementsToEdit () {
        if (getElementToDestroy () != null) {
            return Collections.singletonList (getElementToDestroy ());
        }
        return super.getElementsToEdit ();
    }

    protected String getDefaultLabel () {
        return EMFTypeCoreMessages.Request_Label_DestroyDependents;
    }

    public Object getEditHelperContext () {
        IClientContext context = getClientContext ();
        if (context == null) {
            return getElementToDestroy ();
        } else {
            return new EditHelperContext (getElementToDestroy (), context);
        }
    }

    public TransactionalEditingDomain getEditingDomain () {
        TransactionalEditingDomain result = super.getEditingDomain ();
        if (result == null) {
            result = TransactionUtil.getEditingDomain (getElementToDestroy ());
            if (result != null) {
                setEditingDomain (result);
            }
        }
        return result;
    }

    protected final Set internalGetDependentElementsToDestroy () {
        if (dependentElementsToDestroy == null) {
            Map cacheMaps = (Map) getParameter (RequestCacheEntries.Cache_Maps);
            if (cacheMaps != null) {
                dependentElementsToDestroy = (Set) cacheMaps.get (RequestCacheEntries.Dependent_Elements);
            } else {
                dependentElementsToDestroy = new HashSet ();
            }
            immutableViewOfDependents = Collections.unmodifiableSet (dependentElementsToDestroy);
            if (ctorElementToDestroy != null) {
                dependentElementsToDestroy.add (ctorElementToDestroy);
                populateCacheMap (null, ctorElementToDestroy);
            }
            if (elementToDestroy != null && (elementToDestroy != ctorElementToDestroy)) {
                dependentElementsToDestroy.add (elementToDestroy);
                populateCacheMap (null, ctorElementToDestroy);
            }
            ctorElementToDestroy = null;
        }
        return dependentElementsToDestroy;
    }

    public final Set getDependentElementsToDestroy () {
        if (immutableViewOfDependents == null) {
            internalGetDependentElementsToDestroy ();
        }
        return immutableViewOfDependents;
    }

    public ICommand getDestroyDependentCommand (EObject dependent) {
        ICommand result = null;
        if (addDependentElementToDestroy (dependent)) {
            EObject elementBeingDestroyed = getElementToDestroy ();
            try {
                DestroyElementRequest destroy = new DestroyElementRequest (getEditingDomain (), dependent, isConfirmationRequired ());
                destroy.addParameters (getParameters ());
                destroy.setParameter (DestroyElementRequest.DESTROY_DEPENDENTS_REQUEST_PARAMETER, this);
                setElementToDestroy (dependent);
                Object eHelperContext = destroy.getEditHelperContext ();
                IElementType context = populateCacheMap (eHelperContext, dependent);
                if (context == null) {
                    context = ElementTypeRegistry.getInstance ().getElementType (eHelperContext);
                }
                if (context != null) {
                    result = context.getEditCommand (destroy);
                }
            } finally {
                setElementToDestroy (elementBeingDestroyed);
            }
        }
        return result;
    }

    private IElementType populateCacheMap (Object eHelperContext, EObject dependent) {
        IElementType context = null;
        Map cacheMaps = (Map) getParameter (RequestCacheEntries.Cache_Maps);
        if (cacheMaps != null) {
            Set dependents = internalGetDependentElementsToDestroy ();
            if (cacheMaps.get (dependent) == null) {
                Map parentMap = new HashMap ();
                cacheMaps.put (dependent, parentMap);
                RequestCacheEntries.initializeEObjCache (dependent, parentMap);
            }
            TreeIterator it = dependent.eAllContents ();
            while (it.hasNext ()) {
                EObject eObj = (EObject) it.next ();
                dependents.add (eObj);
                if (cacheMaps.get (eObj) == null) {
                    Map map = new HashMap ();
                    cacheMaps.put (eObj, map);
                    RequestCacheEntries.initializeEObjCache (eObj, map);
                }
            }
            if (eHelperContext != null) {
                Map eHelperMap = (Map) cacheMaps.get (eHelperContext);
                if (eHelperMap == null && (eHelperContext instanceof EObject)) {
                    eHelperMap = new HashMap ();
                    cacheMaps.put (eHelperContext, eHelperMap);
                    RequestCacheEntries.initializeEObjCache ((EObject) eHelperContext, eHelperMap);
                }
                if (eHelperMap != null) {
                    context = (IElementType) eHelperMap.get (RequestCacheEntries.Element_Type);
                }
            }
        }
        return context;
    }

    public ICommand getDestroyDependentsCommand (Collection dependents) {
        ICommand result = null;
        for (Iterator i = dependents.iterator ();
        i.hasNext ();) {
            result = CompositeCommand.compose (result, getDestroyDependentCommand ((EObject) i.next ()));
        }
        return result;
    }

    protected boolean addDependentElementToDestroy (EObject dependent) {
        if (dependent == null) {
            throw new NullPointerException ("dependent is null");
        }
        if (dependent == getElementToDestroy ()) {
            throw new IllegalArgumentException ("dependent is the element being destroyed");
        }
        if (! isElementToBeDestroyed (dependent)) {
            return internalGetDependentElementsToDestroy ().add (dependent);
        }
        return false;
    }

    protected boolean isElementToBeDestroyed (EObject eObject) {
        boolean result = false;
        EObject eObj = getElementToDestroy ();
        Set set = internalGetDependentElementsToDestroy ();
        while (! (result || (eObject == null))) {
            result = (eObject == eObj) || set.contains (eObject);
            eObject = eObject.eContainer ();
        }
        return result;
    }

}

