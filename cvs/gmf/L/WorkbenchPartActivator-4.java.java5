package org.eclipse.gmf.runtime.common.ui.util;

import java.text.MessageFormat;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Status;

import org.eclipse.jface.dialogs.ErrorDialog;

import org.eclipse.swt.widgets.Display;

import org.eclipse.ui.IPageLayout;

import org.eclipse.ui.IViewPart;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchWindow;

import org.eclipse.ui.PartInitException;

import org.eclipse.ui.PlatformUI;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIDebugOptions;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIStatusCodes;

import org.eclipse.gmf.runtime.common.ui.internal.l10n.CommonUIMessages;

public final class WorkbenchPartActivator {
    private static class ShowViewRunnable implements Runnable {
        private IViewPart viewPart = null;
        private final String viewId;

        public ShowViewRunnable (String viewId) {
            this.viewId = viewId;
        }

        public void run () {
            IWorkbenchWindow workbenchWindow = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ();
            if (workbenchWindow == null) {
                return;
            }
            IWorkbenchPage workbenchPage = workbenchWindow.getActivePage ();
            if (workbenchPage == null) {
                return;
            }
            try {
                viewPart = workbenchPage.showView (viewId);
            } catch (PartInitException pie) {
                Trace.catching (CommonUIPlugin.getDefault (), CommonUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), pie.getMessage (), pie);
                Log.warning (CommonUIPlugin.getDefault (), CommonUIStatusCodes.GENERAL_UI_FAILURE, pie.getMessage (), pie);
                String message = MessageFormat.format (CommonUIMessages.WorkbenchPartActivator_ErrorMessage, new Object [] {viewId});
                ErrorDialog.openError (Display.getCurrent ().getActiveShell (), null, message, new Status (IStatus.ERROR, CommonUIPlugin.getPluginId (), CommonUIStatusCodes.GENERAL_UI_FAILURE, pie.getLocalizedMessage (), pie));
            }
        }

        public IViewPart getViewPart () {
            return viewPart;
        }

    }

    private WorkbenchPartActivator () {
    }

    public static IViewPart showView (final String viewId) {
        ShowViewRunnable runnable = new ShowViewRunnable (viewId);
        Display.getCurrent ().syncExec (runnable);
        return runnable.getViewPart ();
    }

    public static IViewPart showTaskList () {
        return showView (IPageLayout.ID_TASK_LIST);
    }

    public static IViewPart showProblemView () {
        return showView (IPageLayout.ID_PROBLEM_VIEW);
    }

    public static IViewPart showBookmarkNavigator () {
        return showView (IPageLayout.ID_BOOKMARKS);
    }

    public static IViewPart showEditorArea () {
        return showView (IPageLayout.ID_EDITOR_AREA);
    }

    public static IViewPart showContentOutline () {
        return showView (IPageLayout.ID_OUTLINE);
    }

    public static IViewPart showPropertySheet () {
        return showView (IPageLayout.ID_PROP_SHEET);
    }

    public static IViewPart showResourceNavigator () {
        return showView (IPageLayout.ID_RES_NAV);
    }

}

