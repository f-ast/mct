package org.eclipse.gmf.internal.bridge.genmodel;

import java.util.Collection;

import java.util.Iterator;

import java.util.LinkedList;

import java.util.List;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Status;

import org.eclipse.emf.codegen.ecore.genmodel.GenModel;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.common.util.WrappedException;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;

public class BasicGenModelAccess implements GenModelAccess {
    private final EPackage model;
    private GenModel genModel;
    private final List < URI > locations = new LinkedList < URI > ();
    private boolean needUnload;

    public BasicGenModelAccess (EPackage aModel) {
        this.model = aModel;
    }

    public void initDefault () {
        registerLocation (constructDefaultFromModel ());
        registerLocation (fromExtpoint ());
    }

    protected final URI fromExtpoint () {
        return fromExtpoint (model.getNsURI ());
    }

    protected final URI fromExtpoint (String nsURI) {
        return EcorePlugin.getEPackageNsURIToGenModelLocationMap ().get (nsURI);
    }

    protected final URI constructDefaultFromModel () {
        if (model.eResource () == null || model.getNsURI () == null) {
            return null;
        }
        URI domainModelURI = model.eResource ().getURI ();
        if (model.getNsURI ().equals (domainModelURI.toString ())) {
            return null;
        }
        URI genModelURI = domainModelURI.trimFileExtension ().appendFileExtension ("genmodel");
        if (genModelURI.equals (domainModelURI)) {
            return null;
        }
        return genModelURI;
    }

    protected final EPackage original () {
        return model;
    }

    public GenModel model () {
        return genModel;
    }

    public IStatus ensure () {
        IStatus loadStatus = load ();
        if (loadStatus.isOK ()) {
            return loadStatus;
        }
        return createDummy ();
    }

    public IStatus load () {
        ResourceSet rs = model.eResource () == null || model.eResource ().getResourceSet () == null ? new ResourceSetImpl () : model.eResource ().getResourceSet ();
        return load (rs);
    }

    public IStatus load (ResourceSet rs) {
        assert ! locations.isEmpty ();
        for (Iterator it = locations.iterator ();
        it.hasNext ();) {
            try {
                URI uri = (URI) it.next ();
                Resource r = rs.getResource (uri, false);
                needUnload = r == null || ! r.isLoaded ();
                r = rs.getResource (uri, true);
                if (r != null) {
                    genModel = (GenModel) r.getContents ().get (0);
                    return Status.OK_STATUS;
                }
            } catch (WrappedException ex) {
                System.err.println (ex.getMessage ());
            }
        }
        needUnload = false;
        return Status.CANCEL_STATUS;
    }

    public void unload () {
        if (needUnload && genModel != null) {
            genModel.eResource ().unload ();
            genModel = null;
        }
        needUnload = false;
    }

    public IStatus createDummy () {
        return createDummy (null);
    }

    public IStatus createDummy (Collection < EPackage > additionalPackages) {
        genModel = new DummyGenModel (model, additionalPackages).create ();
        confineInResource ();
        return Status.OK_STATUS;
    }

    @SuppressWarnings("unchecked")
    private void confineInResource () {
        Resource r = new ResourceSetImpl ().createResource (URI.createGenericURI ("uri", genModel.getModelPluginID (), null));
        r.getContents ().add (genModel);
    }

    public boolean hasLocations () {
        return locations != null && ! locations.isEmpty ();
    }

    protected void registerLocation (URI location) {
        if (location != null) {
            locations.add (location);
        }
    }

    protected void unregsiterLocation (URI location) {
        locations.remove (location);
    }

}

