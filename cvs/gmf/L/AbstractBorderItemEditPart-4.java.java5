package org.eclipse.gmf.runtime.diagram.ui.editparts;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.DragTracker;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.Request;

import org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.figures.IBorderItemLocator;

import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public abstract class AbstractBorderItemEditPart extends ShapeNodeEditPart implements IBorderItemEditPart {

    public AbstractBorderItemEditPart (View view) {
        super (view);
    }

    protected void refreshBounds () {
        if (getBorderItemLocator () != null) {
            int x = ((Integer) getStructuralFeatureValue (NotationPackage.eINSTANCE.getLocation_X ())).intValue ();
            int y = ((Integer) getStructuralFeatureValue (NotationPackage.eINSTANCE.getLocation_Y ())).intValue ();
            Point loc = new Point (x, y);
            getBorderItemLocator ().setConstraint (new Rectangle (loc, getFigure ().getPreferredSize ()));
        } else {
            super.refreshBounds ();
        }
    }

    public IBorderItemLocator getBorderItemLocator () {
        IFigure parentFigure = getFigure ().getParent ();
        if (parentFigure != null && parentFigure.getLayoutManager () != null) {
            Object constraint = parentFigure.getLayoutManager ().getConstraint (getFigure ());
            if (constraint instanceof IBorderItemLocator) {
                return (IBorderItemLocator) constraint;
            }
        }
        return null;
    }

    public EditPolicy getPrimaryDragEditPolicy () {
        return new BorderItemSelectionEditPolicy ();
    }

    public EditPart getPrimaryChildEditPart () {
        return getChildBySemanticHint (CommonParserHint.NAME);
    }

    public DragTracker getDragTracker (Request request) {
        return new DragEditPartsTrackerEx (this) {

            protected boolean isMove () {
                return true;
            }

        }

        ;
    }

}

