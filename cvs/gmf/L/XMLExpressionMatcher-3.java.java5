package org.eclipse.gmf.runtime.emf.type.core.internal.impl;

import org.eclipse.core.expressions.EvaluationContext;

import org.eclipse.core.expressions.EvaluationResult;

import org.eclipse.core.expressions.Expression;

import org.eclipse.core.expressions.ExpressionConverter;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.emf.type.core.IElementMatcher;

import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePlugin;

import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePluginStatusCodes;

import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.ResourceManager;

public class XMLExpressionMatcher implements IElementMatcher {
    public static final String ECONTAINER_VARIABLE = "eContainer";
    private final String id;
    private final Expression xmlExpression;

    public XMLExpressionMatcher (IConfigurationElement config, String id) throws CoreException {
        this.id = id;
        try {
            xmlExpression = ExpressionConverter.getDefault ().perform (config);
        } catch (CoreException e) {
            throw EMFTypePluginStatusCodes.getInitException (id, EMFTypePluginStatusCodes.ENABLEMENT_INVALID_EXPRESSION_KEY, e);
        }
    }

    public boolean matches (EObject eObject) {
        try {
            EvaluationContext evaluationContext = new EvaluationContext (null, eObject);
            EObject container = eObject.eContainer ();
            if (container != null) {
                evaluationContext.addVariable (ECONTAINER_VARIABLE, container);
            }
            EvaluationResult result = xmlExpression.evaluate (evaluationContext);
            if (result == EvaluationResult.TRUE) {
                return true;
            }
        } catch (CoreException e) {
            Log.error (EMFTypePlugin.getPlugin (), EMFTypePluginStatusCodes.EXPRESSION_EVALUATION_FAILURE, ResourceManager.getMessage (EMFTypePluginStatusCodes.EXPRESSION_EVALUATION_FAILURE_KEY, new Object [] {id}), e);
        }
        return false;
    }

}

