package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.runtime.notation.FillStyle;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class FillStyleImpl extends NotationObjectImpl implements FillStyle {
    protected static final int FILL_COLOR_EDEFAULT = 16777215;
    protected int fillColor = FILL_COLOR_EDEFAULT;

    protected FillStyleImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.FILL_STYLE;
    }

    public int getFillColor () {
        return fillColor;
    }

    public void setFillColor (int newFillColor) {
        int oldFillColor = fillColor;
        fillColor = newFillColor;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.FILL_STYLE__FILL_COLOR, oldFillColor, fillColor));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.FILL_STYLE__UUID :
                return getUUID ();
            case NotationPackage.FILL_STYLE__FILL_COLOR :
                return new Integer (getFillColor ());
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.FILL_STYLE__UUID :
                setUUID ((byte []) newValue);
                return;
            case NotationPackage.FILL_STYLE__FILL_COLOR :
                setFillColor (((Integer) newValue).intValue ());
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.FILL_STYLE__UUID :
                setUUID (UUID_EDEFAULT);
                return;
            case NotationPackage.FILL_STYLE__FILL_COLOR :
                setFillColor (FILL_COLOR_EDEFAULT);
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.FILL_STYLE__UUID :
                return UUID_EDEFAULT == null ? uUID != null : ! UUID_EDEFAULT.equals (uUID);
            case NotationPackage.FILL_STYLE__FILL_COLOR :
                return fillColor != FILL_COLOR_EDEFAULT;
        }
        return eDynamicIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (fillColor: ");
        result.append (fillColor);
        result.append (')');
        return result.toString ();
    }

}

