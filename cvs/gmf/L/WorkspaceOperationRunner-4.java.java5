package org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document;

import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.core.runtime.jobs.ISchedulingRule;

import org.eclipse.jface.operation.IRunnableContext;

import org.eclipse.jface.operation.IRunnableWithProgress;

import org.eclipse.ui.actions.WorkspaceModifyDelegatingOperation;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.ISchedulingRuleProvider;

public class WorkspaceOperationRunner implements IRunnableContext {
    private IProgressMonitor fProgressMonitor;

    public WorkspaceOperationRunner () {
    }

    public void setProgressMonitor (IProgressMonitor progressMonitor) {
        fProgressMonitor = progressMonitor;
    }

    public IProgressMonitor getProgressMonitor () {
        if (fProgressMonitor == null) fProgressMonitor = new NullProgressMonitor ();

        return fProgressMonitor;
    }

    public void run (boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {
        if (runnable instanceof ISchedulingRuleProvider) run (fork, cancelable, runnable, ((ISchedulingRuleProvider) runnable).getSchedulingRule ());
        else run (fork, cancelable, runnable, ResourcesPlugin.getWorkspace ().getRoot ());

    }

    public void run (boolean fork, boolean cancelable, IRunnableWithProgress runnable, ISchedulingRule schedulingRule) throws InvocationTargetException, InterruptedException {
        WorkspaceModifyDelegatingOperation operation = new WorkspaceModifyDelegatingOperation (runnable, schedulingRule);
        operation.run (getProgressMonitor ());
    }

}

