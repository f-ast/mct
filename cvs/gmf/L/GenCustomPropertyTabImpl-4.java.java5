package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCustomPropertyTab;

import org.eclipse.gmf.codegen.gmfgen.GenPropertyTabFilter;

public class GenCustomPropertyTabImpl extends GenPropertyTabImpl implements GenCustomPropertyTab {
    protected static final String CLASS_NAME_EDEFAULT = null;
    protected String className = CLASS_NAME_EDEFAULT;
    protected GenPropertyTabFilter filter = null;

    protected GenCustomPropertyTabImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenCustomPropertyTab ();
    }

    public String getClassNameGen () {
        return className;
    }

    public String getClassName () {
        String rv = getClassNameGen ();
        if (rv == null || rv.trim ().length () == 0) {
            return ((GenEditorGeneratorImpl) getSheet ().getEditorGen ()).getDomainModelCapName () + "PropertySection";
        }
        return rv;
    }

    public void setClassName (String newClassName) {
        String oldClassName = className;
        className = newClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__CLASS_NAME, oldClassName, className));

    }

    public GenPropertyTabFilter getFilter () {
        return filter;
    }

    public NotificationChain basicSetFilter (GenPropertyTabFilter newFilter, NotificationChain msgs) {
        GenPropertyTabFilter oldFilter = filter;
        filter = newFilter;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER, oldFilter, newFilter);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setFilter (GenPropertyTabFilter newFilter) {
        if (newFilter != filter) {
            NotificationChain msgs = null;
            if (filter != null) msgs = ((InternalEObject) filter).eInverseRemove (this, GMFGenPackage.GEN_PROPERTY_TAB_FILTER__TAB, GenPropertyTabFilter.class, msgs);

            if (newFilter != null) msgs = ((InternalEObject) newFilter).eInverseAdd (this, GMFGenPackage.GEN_PROPERTY_TAB_FILTER__TAB, GenPropertyTabFilter.class, msgs);

            msgs = basicSetFilter (newFilter, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER, newFilter, newFilter));

    }

    public String getQualifiedClassName () {
        return getSheet ().getPackageName () + '.' + getClassName ();
    }

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER :
                if (filter != null) msgs = ((InternalEObject) filter).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER, null, msgs);

                return basicSetFilter ((GenPropertyTabFilter) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER :
                return basicSetFilter (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__CLASS_NAME :
                return getClassName ();
            case GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER :
                return getFilter ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__CLASS_NAME :
                setClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER :
                setFilter ((GenPropertyTabFilter) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__CLASS_NAME :
                setClassName (CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER :
                setFilter ((GenPropertyTabFilter) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__CLASS_NAME :
                return CLASS_NAME_EDEFAULT == null ? className != null : ! CLASS_NAME_EDEFAULT.equals (className);
            case GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER :
                return filter != null;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (className: ");
        result.append (className);
        result.append (')');
        return result.toString ();
    }

}

