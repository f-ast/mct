package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import java.util.Iterator;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.Palette;

import org.eclipse.gmf.codegen.gmfgen.StandardEntry;

import org.eclipse.gmf.codegen.gmfgen.ToolGroup;

public class PaletteImpl extends EObjectImpl implements Palette {
    protected static final boolean FLYOUT_EDEFAULT = true;
    protected boolean flyout = FLYOUT_EDEFAULT;
    protected EList < ToolGroup > groups;
    protected static final String PACKAGE_NAME_EDEFAULT = null;
    protected String packageName = PACKAGE_NAME_EDEFAULT;
    protected static final String FACTORY_CLASS_NAME_EDEFAULT = null;
    protected String factoryClassName = FACTORY_CLASS_NAME_EDEFAULT;

    protected PaletteImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getPalette ();
    }

    public GenDiagram getDiagram () {
        if (eContainerFeatureID != GMFGenPackage.PALETTE__DIAGRAM) return null;

        return (GenDiagram) eContainer ();
    }

    public boolean isFlyout () {
        return flyout;
    }

    public void setFlyout (boolean newFlyout) {
        boolean oldFlyout = flyout;
        flyout = newFlyout;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.PALETTE__FLYOUT, oldFlyout, flyout));

    }

    public EList < ToolGroup > getGroups () {
        if (groups == null) {
            groups = new EObjectContainmentWithInverseEList < ToolGroup > (ToolGroup.class, this, GMFGenPackage.PALETTE__GROUPS, GMFGenPackage.TOOL_GROUP__PALETTE);
        }
        return groups;
    }

    public String getPackageNameGen () {
        return packageName;
    }

    public String getPackageName () {
        String value = getPackageNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = getDiagram ().getEditorGen ().getEditor ().getPackageName ();
        }
        return value;
    }

    public void setPackageName (String newPackageName) {
        String oldPackageName = packageName;
        packageName = newPackageName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.PALETTE__PACKAGE_NAME, oldPackageName, packageName));

    }

    public String getFactoryClassNameGen () {
        return factoryClassName;
    }

    public String getFactoryClassName () {
        String value = getFactoryClassNameGen ();
        if (GenCommonBaseImpl.isEmpty (value)) {
            value = ((GenDiagramImpl) getDiagram ()).getDomainPackageCapName () + "PaletteFactory";
        }
        return value;
    }

    public void setFactoryClassName (String newFactoryClassName) {
        String oldFactoryClassName = factoryClassName;
        factoryClassName = newFactoryClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.PALETTE__FACTORY_CLASS_NAME, oldFactoryClassName, factoryClassName));

    }

    public String getFactoryQualifiedClassName () {
        return getPackageName () + '.' + getFactoryClassName ();
    }

    public boolean definesStandardTools () {
        for (Iterator < ? > it = eAllContents ();
        it.hasNext ();) {
            if (it.next () instanceof StandardEntry) {
                return true;
            }
        }
        return false;
    }

    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.PALETTE__DIAGRAM :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.PALETTE__DIAGRAM, msgs);
            case GMFGenPackage.PALETTE__GROUPS :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getGroups ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.PALETTE__DIAGRAM :
                return eBasicSetContainer (null, GMFGenPackage.PALETTE__DIAGRAM, msgs);
            case GMFGenPackage.PALETTE__GROUPS :
                return ((InternalEList < ? >) getGroups ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.PALETTE__DIAGRAM :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_DIAGRAM__PALETTE, GenDiagram.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.PALETTE__DIAGRAM :
                return getDiagram ();
            case GMFGenPackage.PALETTE__FLYOUT :
                return isFlyout () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.PALETTE__GROUPS :
                return getGroups ();
            case GMFGenPackage.PALETTE__PACKAGE_NAME :
                return getPackageName ();
            case GMFGenPackage.PALETTE__FACTORY_CLASS_NAME :
                return getFactoryClassName ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.PALETTE__FLYOUT :
                setFlyout (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.PALETTE__GROUPS :
                getGroups ().clear ();
                getGroups ().addAll ((Collection < ? extends ToolGroup >) newValue);
                return;
            case GMFGenPackage.PALETTE__PACKAGE_NAME :
                setPackageName ((String) newValue);
                return;
            case GMFGenPackage.PALETTE__FACTORY_CLASS_NAME :
                setFactoryClassName ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.PALETTE__FLYOUT :
                setFlyout (FLYOUT_EDEFAULT);
                return;
            case GMFGenPackage.PALETTE__GROUPS :
                getGroups ().clear ();
                return;
            case GMFGenPackage.PALETTE__PACKAGE_NAME :
                setPackageName (PACKAGE_NAME_EDEFAULT);
                return;
            case GMFGenPackage.PALETTE__FACTORY_CLASS_NAME :
                setFactoryClassName (FACTORY_CLASS_NAME_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.PALETTE__DIAGRAM :
                return getDiagram () != null;
            case GMFGenPackage.PALETTE__FLYOUT :
                return flyout != FLYOUT_EDEFAULT;
            case GMFGenPackage.PALETTE__GROUPS :
                return groups != null && ! groups.isEmpty ();
            case GMFGenPackage.PALETTE__PACKAGE_NAME :
                return PACKAGE_NAME_EDEFAULT == null ? packageName != null : ! PACKAGE_NAME_EDEFAULT.equals (packageName);
            case GMFGenPackage.PALETTE__FACTORY_CLASS_NAME :
                return FACTORY_CLASS_NAME_EDEFAULT == null ? factoryClassName != null : ! FACTORY_CLASS_NAME_EDEFAULT.equals (factoryClassName);
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (flyout: ");
        result.append (flyout);
        result.append (", packageName: ");
        result.append (packageName);
        result.append (", factoryClassName: ");
        result.append (factoryClassName);
        result.append (')');
        return result.toString ();
    }

}

