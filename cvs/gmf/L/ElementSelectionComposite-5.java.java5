package org.eclipse.gmf.runtime.common.ui.services.elementselection;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.jobs.Job;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.ui.services.internal.l10n.CommonUIServicesMessages;

import org.eclipse.jface.dialogs.Dialog;

import org.eclipse.jface.resource.JFaceResources;

import org.eclipse.jface.viewers.LabelProvider;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.jface.viewers.TableViewer;

import org.eclipse.jface.viewers.ViewerSorter;

import org.eclipse.jface.wizard.ProgressMonitorPart;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.ModifyEvent;

import org.eclipse.swt.events.ModifyListener;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.events.SelectionListener;

import org.eclipse.swt.graphics.FontMetrics;

import org.eclipse.swt.graphics.GC;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.layout.GridLayout;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Label;

import org.eclipse.swt.widgets.Table;

import org.eclipse.swt.widgets.Text;

public abstract class ElementSelectionComposite implements IElementSelectionListener {
    private final String title;
    private final List selectedElements = new ArrayList ();
    private Text filterText = null;
    private TableViewer tableViewer = null;
    private ProgressMonitorPart progressBar;
    private AbstractElementSelectionInput input;
    private Job job;

    public ElementSelectionComposite (String title, AbstractElementSelectionInput input) {
        super ();
        this.title = title;
        this.input = input;
    }

    abstract protected boolean isValidSelection (List currentSelectedElements);

    protected abstract void handleSelection (boolean isValid);

    public Composite createComposite (Composite parent) {
        Composite result = new Composite (parent, SWT.NONE);
        result.setLayout (new GridLayout ());
        result.setLayoutData (new GridData (GridData.FILL_BOTH));
        Label label = new Label (result, SWT.NONE);
        label.setText (title);
        filterText = new Text (result, SWT.SINGLE | SWT.BORDER);
        filterText.setLayoutData (new GridData (GridData.FILL_HORIZONTAL));
        filterText.addModifyListener (new ModifyListener () {

            public void modifyText (ModifyEvent e) {
                handleFilterChange ();
            }

        }

        );
        int selectStyle = SWT.SINGLE;
        tableViewer = new TableViewer (result, selectStyle | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
        tableViewer.setUseHashlookup (true);
        Table table = tableViewer.getTable ();
        GridData gridData = new GridData (GridData.FILL_BOTH);
        GC gc = new GC (result);
        gc.setFont (JFaceResources.getDefaultFont ());
        FontMetrics fontMetrics = gc.getFontMetrics ();
        gc.dispose ();
        gridData.widthHint = Dialog.convertWidthInCharsToPixels (fontMetrics, 80);
        gridData.heightHint = table.getItemHeight () * 15;
        table.setLayoutData (gridData);
        table.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                handleSelectionChange ();
            }

            public void widgetDefaultSelected (SelectionEvent e) {
            }

        }

        );
        progressBar = new ProgressMonitorPart (result, new GridLayout ());
        progressBar.setLayoutData (new GridData (GridData.FILL_HORIZONTAL));
        progressBar.setVisible (false);
        tableViewer.setLabelProvider (new LabelProvider () {

            public Image getImage (Object element) {
                assert element instanceof AbstractMatchingObject;
                return ((AbstractMatchingObject) element).getImage ();
            }

            public String getText (Object element) {
                assert element instanceof AbstractMatchingObject;
                return ((AbstractMatchingObject) element).getDisplayName ();
            }

        }

        );
        tableViewer.setSorter (new ViewerSorter ());
        createCompositeAdditions (result);
        return result;
    }

    protected void createCompositeAdditions (Composite parent) {
    }

    private void handleFilterChange () {
        input.setInput (filterText.getText ());
        fillTableViewer ();
        Object element = tableViewer.getElementAt (0);
        if (element != null) {
            tableViewer.setSelection (new StructuredSelection (element), true);
        }
        handleSelectionChange ();
    }

    private void fillTableViewer () {
        tableViewer.getTable ().removeAll ();
        if (! input.getInput ().equals (StringStatics.BLANK)) {
            filterText.setEnabled (false);
            progressBar.setVisible (true);
            progressBar.beginTask (CommonUIServicesMessages.ElementSelectionService_ProgressName, IProgressMonitor.UNKNOWN);
            job = ElementSelectionService.getInstance ().getMatchingObjects (input, this);
        }
    }

    private void handleSelectionChange () {
        StructuredSelection selection = (StructuredSelection) tableViewer.getSelection ();
        if (selection.size () == 0) {
            selectedElements.clear ();
            handleSelection (false);
            return;
        }
        List selectionList = selection.toList ();
        List currentSelectedElements = new ArrayList ();
        for (Iterator iter = selectionList.iterator ();
        iter.hasNext ();) {
            AbstractMatchingObject matchingObject = (AbstractMatchingObject) iter.next ();
            currentSelectedElements.add (matchingObject);
        }
        boolean isValidSelection = isValidSelection (currentSelectedElements);
        selectedElements.clear ();
        if (isValidSelection) {
            selectedElements.addAll (currentSelectedElements);
        }
        handleSelection (isValidSelection);
    }

    public List getSelectedElements () {
        List result = new ArrayList ();
        for (Iterator iter = selectedElements.iterator ();
        iter.hasNext ();) {
            IMatchingObject matchingObject = (IMatchingObject) iter.next ();
            IElementSelectionProvider provider = matchingObject.getProvider ();
            Object object = provider.resolve (matchingObject);
            result.add (object);
        }
        return result;
    }

    public void matchingObjectEvent (IMatchingObjectEvent matchingObjectEvent) {
        if (! progressBar.isDisposed ()) {
            if (matchingObjectEvent.getEventType () == MatchingObjectEventType.END_OF_MATCHES) {
                progressBar.done ();
                progressBar.setVisible (false);
                filterText.setEnabled (true);
                filterText.setFocus ();
            } else {
                progressBar.worked (1);
                progressBar.subTask (matchingObjectEvent.getMatchingObject ().getName ());
                tableViewer.add (matchingObjectEvent.getMatchingObject ());
            }
        }
    }

    public void cancel () {
        job.cancel ();
    }

}

