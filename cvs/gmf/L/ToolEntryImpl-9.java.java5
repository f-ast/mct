package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.codegen.util.CodeGenUtil;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.common.util.EMap;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.EcorePackage;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.eclipse.emf.ecore.util.EcoreEMap;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenLink;

import org.eclipse.gmf.codegen.gmfgen.GenNode;

import org.eclipse.gmf.codegen.gmfgen.ToolEntry;

public class ToolEntryImpl extends EntryBaseImpl implements ToolEntry {
    protected static final boolean DEFAULT_EDEFAULT = false;
    protected boolean default_ = DEFAULT_EDEFAULT;
    protected EList genNodes = null;
    protected EList genLinks = null;
    protected static final String QUALIFIED_TOOL_NAME_EDEFAULT = null;
    protected String qualifiedToolName = QUALIFIED_TOOL_NAME_EDEFAULT;
    protected EMap properties = null;

    protected ToolEntryImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getToolEntry ();
    }

    public boolean isDefault () {
        return default_;
    }

    public void setDefault (boolean newDefault) {
        boolean oldDefault = default_;
        default_ = newDefault;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.TOOL_ENTRY__DEFAULT, oldDefault, default_));

    }

    public EList getGenNodes () {
        if (genNodes == null) {
            genNodes = new EObjectResolvingEList (GenNode.class, this, GMFGenPackage.TOOL_ENTRY__GEN_NODES);
        }
        return genNodes;
    }

    public EList getGenLinks () {
        if (genLinks == null) {
            genLinks = new EObjectResolvingEList (GenLink.class, this, GMFGenPackage.TOOL_ENTRY__GEN_LINKS);
        }
        return genLinks;
    }

    public EList getElements () {
        if (getGenNodes ().isEmpty ()) {
            return getGenLinks ();
        }
        return getGenNodes ();
    }

    public String getQualifiedToolName () {
        return qualifiedToolName;
    }

    public void setQualifiedToolName (String newQualifiedToolName) {
        String oldQualifiedToolName = qualifiedToolName;
        qualifiedToolName = newQualifiedToolName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME, oldQualifiedToolName, qualifiedToolName));

    }

    public EMap getProperties () {
        if (properties == null) {
            properties = new EcoreEMap (EcorePackage.Literals.ESTRING_TO_STRING_MAP_ENTRY, EStringToStringMapEntryImpl.class, this, GMFGenPackage.TOOL_ENTRY__PROPERTIES);
        }
        return properties;
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.TOOL_ENTRY__PROPERTIES :
                return ((InternalEList) getProperties ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.TOOL_ENTRY__DEFAULT :
                return isDefault () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.TOOL_ENTRY__GEN_NODES :
                return getGenNodes ();
            case GMFGenPackage.TOOL_ENTRY__GEN_LINKS :
                return getGenLinks ();
            case GMFGenPackage.TOOL_ENTRY__ELEMENTS :
                return getElements ();
            case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME :
                return getQualifiedToolName ();
            case GMFGenPackage.TOOL_ENTRY__PROPERTIES :
                if (coreType) return getProperties ();
                else return getProperties ().map ();

        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.TOOL_ENTRY__DEFAULT :
                setDefault (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.TOOL_ENTRY__GEN_NODES :
                getGenNodes ().clear ();
                getGenNodes ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.TOOL_ENTRY__GEN_LINKS :
                getGenLinks ().clear ();
                getGenLinks ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME :
                setQualifiedToolName ((String) newValue);
                return;
            case GMFGenPackage.TOOL_ENTRY__PROPERTIES :
                ((EStructuralFeature.Setting) getProperties ()).set (newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TOOL_ENTRY__DEFAULT :
                setDefault (DEFAULT_EDEFAULT);
                return;
            case GMFGenPackage.TOOL_ENTRY__GEN_NODES :
                getGenNodes ().clear ();
                return;
            case GMFGenPackage.TOOL_ENTRY__GEN_LINKS :
                getGenLinks ().clear ();
                return;
            case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME :
                setQualifiedToolName (QUALIFIED_TOOL_NAME_EDEFAULT);
                return;
            case GMFGenPackage.TOOL_ENTRY__PROPERTIES :
                getProperties ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TOOL_ENTRY__DEFAULT :
                return default_ != DEFAULT_EDEFAULT;
            case GMFGenPackage.TOOL_ENTRY__GEN_NODES :
                return genNodes != null && ! genNodes.isEmpty ();
            case GMFGenPackage.TOOL_ENTRY__GEN_LINKS :
                return genLinks != null && ! genLinks.isEmpty ();
            case GMFGenPackage.TOOL_ENTRY__ELEMENTS :
                return ! getElements ().isEmpty ();
            case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME :
                return QUALIFIED_TOOL_NAME_EDEFAULT == null ? qualifiedToolName != null : ! QUALIFIED_TOOL_NAME_EDEFAULT.equals (qualifiedToolName);
            case GMFGenPackage.TOOL_ENTRY__PROPERTIES :
                return properties != null && ! properties.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (default: ");
        result.append (default_);
        result.append (", qualifiedToolName: ");
        result.append (qualifiedToolName);
        result.append (')');
        return result.toString ();
    }

    public String getCreateMethodName () {
        if (getCreateMethodNameGen () != null) {
            return getCreateMethodNameGen ();
        }
        return CodeGenUtil.validJavaIdentifier ("create" + CodeGenUtil.capName (String.valueOf (getTitle ())) + getEntryID () + "CreationTool");
    }

}

