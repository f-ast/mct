package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.gmfgraph.Dimension;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.GridLayout;

public class GridLayoutImpl extends EObjectImpl implements GridLayout {
    protected static final int NUM_COLUMNS_EDEFAULT = 1;
    protected int numColumns = NUM_COLUMNS_EDEFAULT;
    protected static final boolean EQUAL_WIDTH_EDEFAULT = true;
    protected boolean equalWidth = EQUAL_WIDTH_EDEFAULT;
    protected Dimension margins = null;
    protected Dimension spacing = null;

    protected GridLayoutImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getGridLayout ();
    }

    public int getNumColumns () {
        return numColumns;
    }

    public void setNumColumns (int newNumColumns) {
        int oldNumColumns = numColumns;
        numColumns = newNumColumns;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT__NUM_COLUMNS, oldNumColumns, numColumns));

    }

    public boolean isEqualWidth () {
        return equalWidth;
    }

    public void setEqualWidth (boolean newEqualWidth) {
        boolean oldEqualWidth = equalWidth;
        equalWidth = newEqualWidth;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT__EQUAL_WIDTH, oldEqualWidth, equalWidth));

    }

    public Dimension getMargins () {
        return margins;
    }

    public NotificationChain basicSetMargins (Dimension newMargins, NotificationChain msgs) {
        Dimension oldMargins = margins;
        margins = newMargins;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT__MARGINS, oldMargins, newMargins);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setMargins (Dimension newMargins) {
        if (newMargins != margins) {
            NotificationChain msgs = null;
            if (margins != null) msgs = ((InternalEObject) margins).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.GRID_LAYOUT__MARGINS, null, msgs);

            if (newMargins != null) msgs = ((InternalEObject) newMargins).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.GRID_LAYOUT__MARGINS, null, msgs);

            msgs = basicSetMargins (newMargins, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT__MARGINS, newMargins, newMargins));

    }

    public Dimension getSpacing () {
        return spacing;
    }

    public NotificationChain basicSetSpacing (Dimension newSpacing, NotificationChain msgs) {
        Dimension oldSpacing = spacing;
        spacing = newSpacing;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT__SPACING, oldSpacing, newSpacing);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setSpacing (Dimension newSpacing) {
        if (newSpacing != spacing) {
            NotificationChain msgs = null;
            if (spacing != null) msgs = ((InternalEObject) spacing).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.GRID_LAYOUT__SPACING, null, msgs);

            if (newSpacing != null) msgs = ((InternalEObject) newSpacing).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.GRID_LAYOUT__SPACING, null, msgs);

            msgs = basicSetSpacing (newSpacing, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT__SPACING, newSpacing, newSpacing));

    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.GRID_LAYOUT__MARGINS :
                return basicSetMargins (null, msgs);
            case GMFGraphPackage.GRID_LAYOUT__SPACING :
                return basicSetSpacing (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.GRID_LAYOUT__NUM_COLUMNS :
                return new Integer (getNumColumns ());
            case GMFGraphPackage.GRID_LAYOUT__EQUAL_WIDTH :
                return isEqualWidth () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGraphPackage.GRID_LAYOUT__MARGINS :
                return getMargins ();
            case GMFGraphPackage.GRID_LAYOUT__SPACING :
                return getSpacing ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.GRID_LAYOUT__NUM_COLUMNS :
                setNumColumns (((Integer) newValue).intValue ());
                return;
            case GMFGraphPackage.GRID_LAYOUT__EQUAL_WIDTH :
                setEqualWidth (((Boolean) newValue).booleanValue ());
                return;
            case GMFGraphPackage.GRID_LAYOUT__MARGINS :
                setMargins ((Dimension) newValue);
                return;
            case GMFGraphPackage.GRID_LAYOUT__SPACING :
                setSpacing ((Dimension) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.GRID_LAYOUT__NUM_COLUMNS :
                setNumColumns (NUM_COLUMNS_EDEFAULT);
                return;
            case GMFGraphPackage.GRID_LAYOUT__EQUAL_WIDTH :
                setEqualWidth (EQUAL_WIDTH_EDEFAULT);
                return;
            case GMFGraphPackage.GRID_LAYOUT__MARGINS :
                setMargins ((Dimension) null);
                return;
            case GMFGraphPackage.GRID_LAYOUT__SPACING :
                setSpacing ((Dimension) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.GRID_LAYOUT__NUM_COLUMNS :
                return numColumns != NUM_COLUMNS_EDEFAULT;
            case GMFGraphPackage.GRID_LAYOUT__EQUAL_WIDTH :
                return equalWidth != EQUAL_WIDTH_EDEFAULT;
            case GMFGraphPackage.GRID_LAYOUT__MARGINS :
                return margins != null;
            case GMFGraphPackage.GRID_LAYOUT__SPACING :
                return spacing != null;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (numColumns: ");
        result.append (numColumns);
        result.append (", equalWidth: ");
        result.append (equalWidth);
        result.append (')');
        return result.toString ();
    }

}

