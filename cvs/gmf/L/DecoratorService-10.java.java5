package org.eclipse.gmf.runtime.diagram.ui.internal.services.decorator;

import org.eclipse.core.runtime.Assert;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.services.decorator.CreateDecoratorsOperation;

import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorProvider;

import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget;

public class DecoratorService extends Service implements IDecoratorProvider {
    protected static class ProviderDescriptor extends Service.ProviderDescriptor {
        private DecoratorProviderConfiguration providerConfiguration;

        public ProviderDescriptor (IConfigurationElement element) {
            super (element);
            this.providerConfiguration = DecoratorProviderConfiguration.parse (element);
            Assert.isNotNull (providerConfiguration);
        }

        public boolean provides (IOperation operation) {
            if (! policyInitialized) {
                policy = getPolicy ();
                policyInitialized = true;
            }
            if (policy != null) return policy.provides (operation);

            if (provider == null) {
                if (isSupportedInExtention (operation)) {
                    providerConfiguration = null;
                    return getProvider ().provides (operation);
                }
                return false;
            }
            return getProvider ().provides (operation);
        }

        private boolean isSupportedInExtention (IOperation operation) {
            if (operation instanceof CreateDecoratorsOperation) {
                CreateDecoratorsOperation o = (CreateDecoratorsOperation) operation;
                return providerConfiguration.supports (o.getDecoratorTarget ());
            }
            return false;
        }

    }

    private final static DecoratorService service = new DecoratorService ();

    static {
        service.configureProviders (DiagramUIPlugin.getPluginId (), "decoratorProviders");
    }

    public static DecoratorService getInstance () {
        return service;
    }

    public void createDecorators (IDecoratorTarget decoratorTarget) {
        execute (ExecutionStrategy.REVERSE, new CreateDecoratorsOperation (decoratorTarget));
    }

    protected Service.ProviderDescriptor newProviderDescriptor (IConfigurationElement element) {
        return new ProviderDescriptor (element);
    }

}

