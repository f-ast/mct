package org.eclipse.gmf.runtime.diagram.ui.internal.dialogs.sortfilter;

import java.util.Iterator;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Status;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CommandStack;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gmf.runtime.diagram.ui.dialogs.sortfilter.SortFilterPage;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.jface.dialogs.IDialogConstants;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.jface.preference.IPreferenceNode;

import org.eclipse.jface.preference.IPreferencePage;

import org.eclipse.jface.preference.PreferenceDialog;

import org.eclipse.jface.preference.PreferenceManager;

import org.eclipse.jface.resource.JFaceResources;

import org.eclipse.jface.util.Policy;

import org.eclipse.jface.util.SafeRunnable;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Shell;

public class SortFilterDialog extends PreferenceDialog {
    private final String title = DiagramUIMessages.SortFilterDialog_title;
    private CommandStack commandStack = null;

    public SortFilterDialog (Shell parentShell, CommandStack commandStack) {
        super (parentShell, new SortFilterPageManager ());
        this.commandStack = commandStack;
    }

    protected Control createDialogArea (Composite parent) {
        Control control = super.createDialogArea (parent);
        getShell ().setText (title);
        getTreeViewer ().expandAll ();
        return control;
    }

    public boolean showPage (IPreferenceNode node) {
        return super.showPage (node);
    }

    protected String getSelectedNodePreference () {
        return null;
    }

    protected void okPressed () {
        SafeRunnable.run (new SafeRunnable () {
            private boolean errorOccurred;

            public void run () {
                getButton (IDialogConstants.OK_ID).setEnabled (false);
                errorOccurred = false;
                boolean hasFailedOK = false;
                try {
                    Iterator nodes = getPreferenceManager ().getElements (PreferenceManager.PRE_ORDER).iterator ();
                    CompoundCommand cc = new CompoundCommand ();
                    while (nodes.hasNext ()) {
                        IPreferenceNode node = (IPreferenceNode) nodes.next ();
                        IPreferencePage page = node.getPage ();
                        if (page != null) {
                            if (page instanceof SortFilterPage) {
                                Command cmd = ((SortFilterPage) page).getCommand ();
                                if (cmd != null && cmd.canExecute ()) cc.add (cmd);

                            } else if (! page.performOk ()) {
                                hasFailedOK = true;
                                return;
                            }

                        }
                    }
                    if (cc.canExecute ()) commandStack.execute (cc);

                } catch (Exception e) {
                    handleException (e);
                } finally {
                    if (hasFailedOK) {
                        setReturnCode (FAILED);
                        getButton (IDialogConstants.OK_ID).setEnabled (true);
                        return;
                    }
                    if (! errorOccurred) {
                        handleSave ();
                    }
                    setReturnCode (OK);
                    close ();
                }
            }

            public void handleException (Throwable e) {
                errorOccurred = true;
                Policy.getLog ().log (new Status (IStatus.ERROR, Policy.JFACE, 0, e.toString (), e));
                setSelectedNodePreference (null);
                String message = JFaceResources.getString ("SafeRunnable.errorMessage");
                MessageDialog.openError (getShell (), JFaceResources.getString ("Error"), message);
            }

        }

        );
    }

}

