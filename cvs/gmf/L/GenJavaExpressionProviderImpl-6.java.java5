package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider;

import org.eclipse.gmf.codegen.gmfgen.GenLanguage;

public class GenJavaExpressionProviderImpl extends GenExpressionProviderBaseImpl implements GenJavaExpressionProvider {
    protected static final boolean THROW_EXCEPTION_EDEFAULT = true;
    protected boolean throwException = THROW_EXCEPTION_EDEFAULT;
    protected static final boolean INJECT_EXPRESSION_BODY_EDEFAULT = false;
    protected boolean injectExpressionBody = INJECT_EXPRESSION_BODY_EDEFAULT;

    protected GenJavaExpressionProviderImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenJavaExpressionProvider ();
    }

    public boolean isThrowException () {
        return throwException;
    }

    public void setThrowException (boolean newThrowException) {
        boolean oldThrowException = throwException;
        throwException = newThrowException;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__THROW_EXCEPTION, oldThrowException, throwException));

    }

    public boolean isInjectExpressionBody () {
        return injectExpressionBody;
    }

    public void setInjectExpressionBody (boolean newInjectExpressionBody) {
        boolean oldInjectExpressionBody = injectExpressionBody;
        injectExpressionBody = newInjectExpressionBody;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__INJECT_EXPRESSION_BODY, oldInjectExpressionBody, injectExpressionBody));

    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__THROW_EXCEPTION :
                return isThrowException () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__INJECT_EXPRESSION_BODY :
                return isInjectExpressionBody () ? Boolean.TRUE : Boolean.FALSE;
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__THROW_EXCEPTION :
                setThrowException (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__INJECT_EXPRESSION_BODY :
                setInjectExpressionBody (((Boolean) newValue).booleanValue ());
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__THROW_EXCEPTION :
                setThrowException (THROW_EXCEPTION_EDEFAULT);
                return;
            case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__INJECT_EXPRESSION_BODY :
                setInjectExpressionBody (INJECT_EXPRESSION_BODY_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__THROW_EXCEPTION :
                return throwException != THROW_EXCEPTION_EDEFAULT;
            case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER__INJECT_EXPRESSION_BODY :
                return injectExpressionBody != INJECT_EXPRESSION_BODY_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (throwException: ");
        result.append (throwException);
        result.append (", injectExpressionBody: ");
        result.append (injectExpressionBody);
        result.append (')');
        return result.toString ();
    }

    public GenLanguage getLanguage () {
        return GenLanguage.JAVA_LITERAL;
    }

}

