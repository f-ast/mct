package org.eclipse.gmf.gmfgraph.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.gmfgraph.Canvas;

import org.eclipse.gmf.gmfgraph.GMFGraphFactory;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

public class CanvasItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public CanvasItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addNamePropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addNamePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_Identity_name_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_Identity_name_feature", "_UI_Identity_type"), GMFGraphPackage.eINSTANCE.getIdentity_Name (), true, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getCanvas_Figures ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getCanvas_Nodes ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getCanvas_Connections ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getCanvas_Compartments ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getCanvas_Children ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getCanvas_Labels ());
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/Canvas"));
    }

    public String getText (Object object) {
        String label = ((Canvas) object).getName ();
        return label == null || label.length () == 0 ? getString ("_UI_Canvas_type") : getString ("_UI_Canvas_type") + " " + label;
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (Canvas.class)) {
            case GMFGraphPackage.CANVAS__NAME :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
            case GMFGraphPackage.CANVAS__FIGURES :
            case GMFGraphPackage.CANVAS__NODES :
            case GMFGraphPackage.CANVAS__CONNECTIONS :
            case GMFGraphPackage.CANVAS__COMPARTMENTS :
            case GMFGraphPackage.CANVAS__CHILDREN :
            case GMFGraphPackage.CANVAS__LABELS :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCanvas_Figures (), GMFGraphFactory.eINSTANCE.createFigureGallery ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCanvas_Nodes (), GMFGraphFactory.eINSTANCE.createNode ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCanvas_Connections (), GMFGraphFactory.eINSTANCE.createConnection ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCanvas_Compartments (), GMFGraphFactory.eINSTANCE.createCompartment ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCanvas_Children (), GMFGraphFactory.eINSTANCE.createChild ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCanvas_Labels (), GMFGraphFactory.eINSTANCE.createDiagramLabel ()));
    }

    public ResourceLocator getResourceLocator () {
        return GMFGraphEditPlugin.INSTANCE;
    }

}

