package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.requests.CreateConnectionRequest;

import org.eclipse.gef.requests.CreateRequest;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.common.core.util.ObjectAdapter;

import org.eclipse.gmf.runtime.diagram.ui.commands.CreateViewAndOptionallyElementCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.DeferredCreateConnectorViewAndElementCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.commands.GetConnectorTypeAndEndCommand;

import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateUnspecifiedTypeConnectionRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

public class ContainerNodeEditPolicy extends GraphicalNodeEditPolicy {

    public Command getCommand (Request request) {
        if (RequestConstants.REQ_CONNECTION_END.equals (request.getType ()) && request instanceof CreateConnectionRequest) {
            return getConnectionAndEndCommands ((CreateConnectionRequest) request);
        }
        return null;
    }

    protected Command getConnectionAndEndCommands (CreateConnectionRequest request) {
        CompoundCommand cc = new CompoundCommand (PresentationResourceManager.getI18NString ("Command.CreateRelationship.Label"));
        boolean isDirectionReversed = request instanceof CreateUnspecifiedTypeConnectionRequest && ((CreateUnspecifiedTypeConnectionRequest) request).isDirectionReversed ();
        GetConnectorTypeAndEndCommand menuCmd = new GetConnectorTypeAndEndCommand (request, (IGraphicalEditPart) getHost ());
        cc.add (new EtoolsProxyCommand (menuCmd));
        CreateViewAndOptionallyElementCommand createOtherEndCmd = getCreateViewAndOptionallyElementCommand (menuCmd.getEndAdapter (), request.getLocation ());
        cc.add (new EtoolsProxyCommand (createOtherEndCmd));
        ICommand connectorCmd = isDirectionReversed ? getDeferredCreateConnectorViewAndElementCommand (request, menuCmd.getConnectorTypeAdapter (), createOtherEndCmd.getResult (), request.getSourceEditPart ()) : getDeferredCreateConnectorViewAndElementCommand (request, menuCmd.getConnectorTypeAdapter (), request.getSourceEditPart (), createOtherEndCmd.getResult ());
        cc.add (new EtoolsProxyCommand (connectorCmd));
        return cc;
    }

    protected CreateViewAndOptionallyElementCommand getCreateViewAndOptionallyElementCommand (ObjectAdapter endAdapter, Point location) {
        return new CreateViewAndOptionallyElementCommand (endAdapter, (IGraphicalEditPart) getHost (), location, ((IGraphicalEditPart) getHost ()).getDiagramPreferencesHint ());
    }

    protected DeferredCreateConnectorViewAndElementCommand getDeferredCreateConnectorViewAndElementCommand (CreateRequest request, IAdaptable typeInfoAdapter, IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter) {
        return new DeferredCreateConnectorViewAndElementCommand (request, typeInfoAdapter, sourceViewAdapter, targetViewAdapter, getHost ().getViewer ());
    }

}

