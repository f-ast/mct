package org.eclipse.gmf.runtime.notation.impl;

import java.util.ArrayList;

import java.util.Collections;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.RelativeBendpoints;

import org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint;

public class RelativeBendpointsImpl extends EObjectImpl implements RelativeBendpoints {
    protected static final List POINTS_EDEFAULT = Collections.EMPTY_LIST;
    protected List points = POINTS_EDEFAULT;

    protected RelativeBendpointsImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.eINSTANCE.getRelativeBendpoints ();
    }

    public List getPoints () {
        return Collections.unmodifiableList (points);
    }

    public void setPoints (List newPoints) {
        List oldPoints = points;
        if (newPoints == null) throw new NullPointerException ("the 'newPoints' parameter is null");
        else if (newPoints.isEmpty ()) points = POINTS_EDEFAULT;
        else {
            List tempList = new ArrayList (newPoints.size ());
            for (Iterator i = newPoints.iterator ();
            i.hasNext ();) {
                Object point = i.next ();
                if (! (point instanceof RelativeBendpoint)) throw new IllegalArgumentException ("One or more objects in the list is not of type org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint");

                tempList.add (point);
            }
            points = tempList;
        }

        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.RELATIVE_BENDPOINTS__POINTS, Collections.unmodifiableList (oldPoints), Collections.unmodifiableList (points)));

    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.RELATIVE_BENDPOINTS__POINTS :
                return getPoints ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.RELATIVE_BENDPOINTS__POINTS :
                setPoints ((List) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.RELATIVE_BENDPOINTS__POINTS :
                setPoints (POINTS_EDEFAULT);
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.RELATIVE_BENDPOINTS__POINTS :
                return POINTS_EDEFAULT == null ? points != null : ! POINTS_EDEFAULT.equals (points);
        }
        return eDynamicIsSet (eFeature);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (points: ");
        result.append (points);
        result.append (')');
        return result.toString ();
    }

}

