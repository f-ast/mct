package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.ArrayList;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.BasicEList;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeUniqueEList;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCustomPropertyTab;

import org.eclipse.gmf.codegen.gmfgen.GenNavigator;

import org.eclipse.gmf.codegen.gmfgen.GeneratedType;

import org.eclipse.gmf.codegen.gmfgen.TypeTabFilter;

public class TypeTabFilterImpl extends EObjectImpl implements TypeTabFilter {
    protected EList < String > types;
    protected EList < GeneratedType > generatedTypes;

    protected TypeTabFilterImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getTypeTabFilter ();
    }

    public GenCustomPropertyTab getTab () {
        if (eContainerFeatureID != GMFGenPackage.TYPE_TAB_FILTER__TAB) return null;

        return (GenCustomPropertyTab) eContainer ();
    }

    public NotificationChain basicSetTab (GenCustomPropertyTab newTab, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newTab, GMFGenPackage.TYPE_TAB_FILTER__TAB, msgs);
        return msgs;
    }

    public void setTab (GenCustomPropertyTab newTab) {
        if (newTab != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.TYPE_TAB_FILTER__TAB && newTab != null)) {
            if (EcoreUtil.isAncestor (this, newTab)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newTab != null) msgs = ((InternalEObject) newTab).eInverseAdd (this, GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER, GenCustomPropertyTab.class, msgs);

            msgs = basicSetTab (newTab, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.TYPE_TAB_FILTER__TAB, newTab, newTab));

    }

    public EList < String > getTypes () {
        if (types == null) {
            types = new EDataTypeUniqueEList < String > (String.class, this, GMFGenPackage.TYPE_TAB_FILTER__TYPES);
        }
        return types;
    }

    public EList < GeneratedType > getGeneratedTypes () {
        if (generatedTypes == null) {
            generatedTypes = new EDataTypeUniqueEList < GeneratedType > (GeneratedType.class, this, GMFGenPackage.TYPE_TAB_FILTER__GENERATED_TYPES);
        }
        return generatedTypes;
    }

    public EList < String > getAllTypes () {
        ArrayList < String > result = new ArrayList < String > ();
        result.addAll (getTypes ());
        if (getGeneratedTypes ().size () > 0) {
            for (GeneratedType nextGeneratedType : getGeneratedTypes ()) {
                if (nextGeneratedType == GeneratedType.ABSTRACT_NAVIGATOR_ITEM_LITERAL) {
                    GenNavigator navigator = getTab ().getSheet ().getEditorGen ().getNavigator ();
                    if (navigator != null) {
                        result.add (navigator.getAbstractNavigatorItemQualifiedClassName ());
                    }
                }
            }
        }
        return new BasicEList.UnmodifiableEList < String > (result.size (), result.toArray ());
    }

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.TYPE_TAB_FILTER__TAB :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetTab ((GenCustomPropertyTab) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.TYPE_TAB_FILTER__TAB :
                return basicSetTab (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.TYPE_TAB_FILTER__TAB :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER, GenCustomPropertyTab.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.TYPE_TAB_FILTER__TAB :
                return getTab ();
            case GMFGenPackage.TYPE_TAB_FILTER__TYPES :
                return getTypes ();
            case GMFGenPackage.TYPE_TAB_FILTER__GENERATED_TYPES :
                return getGeneratedTypes ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.TYPE_TAB_FILTER__TAB :
                setTab ((GenCustomPropertyTab) newValue);
                return;
            case GMFGenPackage.TYPE_TAB_FILTER__TYPES :
                getTypes ().clear ();
                getTypes ().addAll ((Collection < ? extends String >) newValue);
                return;
            case GMFGenPackage.TYPE_TAB_FILTER__GENERATED_TYPES :
                getGeneratedTypes ().clear ();
                getGeneratedTypes ().addAll ((Collection < ? extends GeneratedType >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TYPE_TAB_FILTER__TAB :
                setTab ((GenCustomPropertyTab) null);
                return;
            case GMFGenPackage.TYPE_TAB_FILTER__TYPES :
                getTypes ().clear ();
                return;
            case GMFGenPackage.TYPE_TAB_FILTER__GENERATED_TYPES :
                getGeneratedTypes ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TYPE_TAB_FILTER__TAB :
                return getTab () != null;
            case GMFGenPackage.TYPE_TAB_FILTER__TYPES :
                return types != null && ! types.isEmpty ();
            case GMFGenPackage.TYPE_TAB_FILTER__GENERATED_TYPES :
                return generatedTypes != null && ! generatedTypes.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (types: ");
        result.append (types);
        result.append (", generatedTypes: ");
        result.append (generatedTypes);
        result.append (')');
        return result.toString ();
    }

}

