package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.GenNode;

import org.eclipse.gmf.codegen.gmfgen.GenNodeLabel;

public class GenNodeLabelImpl extends GenLabelImpl implements GenNodeLabel {

    protected GenNodeLabelImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenNodeLabel ();
    }

    public GenNode getNode () {
        if (eContainerFeatureID != GMFGenPackage.GEN_NODE_LABEL__NODE) return null;

        return (GenNode) eContainer ();
    }

    public NotificationChain basicSetNode (GenNode newNode, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newNode, GMFGenPackage.GEN_NODE_LABEL__NODE, msgs);
        return msgs;
    }

    public void setNode (GenNode newNode) {
        if (newNode != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_NODE_LABEL__NODE && newNode != null)) {
            if (EcoreUtil.isAncestor (this, newNode)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newNode != null) msgs = ((InternalEObject) newNode).eInverseAdd (this, GMFGenPackage.GEN_NODE__LABELS, GenNode.class, msgs);

            msgs = basicSetNode (newNode, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NODE_LABEL__NODE, newNode, newNode));

    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_NODE_LABEL__NODE :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetNode ((GenNode) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_NODE_LABEL__NODE :
                return basicSetNode (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_NODE_LABEL__NODE :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_NODE__LABELS, GenNode.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_NODE_LABEL__NODE :
                return getNode ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_NODE_LABEL__NODE :
                setNode ((GenNode) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_NODE_LABEL__NODE :
                setNode ((GenNode) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_NODE_LABEL__NODE :
                return getNode () != null;
        }
        return super.eIsSet (featureID);
    }

    public GenDiagram getDiagram () {
        return getNode ().getDiagram ();
    }

    protected String getHostName () {
        return getNode ().getClassNamePrefix ();
    }

}

