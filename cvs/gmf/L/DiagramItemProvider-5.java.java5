package org.eclipse.gmf.runtime.notation.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.NotationEditPlugin;

import org.eclipse.gmf.runtime.notation.NotationFactory;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class DiagramItemProvider extends ViewItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public DiagramItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addNamePropertyDescriptor (object);
            addMeasurementUnitPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addNamePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_Diagram_name_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_Diagram_name_feature", "_UI_Diagram_type"), NotationPackage.Literals.DIAGRAM__NAME, true, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addMeasurementUnitPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_Diagram_measurementUnit_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_Diagram_measurementUnit_feature", "_UI_Diagram_type"), NotationPackage.eINSTANCE.getDiagram_MeasurementUnit (), false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (NotationPackage.Literals.DIAGRAM__PERSISTED_EDGES);
            childrenFeatures.add (NotationPackage.Literals.DIAGRAM__TRANSIENT_EDGES);
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    public Object getImage (Object object) {
        return getResourceLocator ().getImage ("full/obj16/Diagram");
    }

    public String getText (Object object) {
        String label = ((Diagram) object).getName ();
        return label == null || label.length () == 0 ? getString ("_UI_Diagram_type") : getString ("_UI_Diagram_type") + " " + label;
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (Diagram.class)) {
            case NotationPackage.DIAGRAM__NAME :
            case NotationPackage.DIAGRAM__MEASUREMENT_UNIT :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
            case NotationPackage.DIAGRAM__PERSISTED_EDGES :
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.DIAGRAM__PERSISTED_EDGES, NotationFactory.eINSTANCE.createEdge ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.DIAGRAM__TRANSIENT_EDGES, NotationFactory.eINSTANCE.createEdge ()));
    }

    public String getCreateChildText (Object owner, Object feature, Object child, Collection selection) {
        Object childFeature = feature;
        Object childObject = child;
        boolean qualify = childFeature == NotationPackage.Literals.VIEW__PERSISTED_CHILDREN || childFeature == NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN || childFeature == NotationPackage.Literals.DIAGRAM__PERSISTED_EDGES || childFeature == NotationPackage.Literals.DIAGRAM__TRANSIENT_EDGES;
        if (qualify) {
            return getString ("_UI_CreateChild_text2", new Object [] {getTypeText (childObject), getFeatureText (childFeature), getTypeText (owner)});
        }
        return super.getCreateChildText (owner, feature, child, selection);
    }

    public ResourceLocator getResourceLocator () {
        return NotationEditPlugin.INSTANCE;
    }

}

