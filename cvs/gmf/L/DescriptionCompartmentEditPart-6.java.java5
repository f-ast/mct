package org.eclipse.gmf.runtime.diagram.ui.internal.editparts;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.transaction.RunnableWithResult;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;

import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;

import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;

import org.eclipse.gmf.runtime.common.ui.services.parser.ParserService;

import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.DescriptionDirectEditPolicy;

import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.viewers.ICellEditorValidator;

public class DescriptionCompartmentEditPart extends TextCompartmentEditPart {

    public DescriptionCompartmentEditPart (View view) {
        super (view);
    }

    protected IFigure createFigure () {
        WrapLabel label = new WrapLabel ();
        label.setTextAlignment (PositionConstants.TOP);
        label.setLabelAlignment (PositionConstants.TOP);
        label.setTextWrap (true);
        return label;
    }

    protected boolean isEditable () {
        return true;
    }

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicy.DIRECT_EDIT_ROLE, new DescriptionDirectEditPolicy ());
    }

    public IParser getParser () {
        if (parser == null) {
            View view = getNotationView ();
            String parserHint = "";
            if (view != null) parserHint = view.getType ();

            EObject object = getPrimaryView ();
            ParserHintAdapter hintAdapter = new ParserHintAdapter (object, parserHint);
            parser = ParserService.getInstance ().getParser (hintAdapter);
        }
        return parser;
    }

    public ICellEditorValidator getEditTextValidator () {
        return new ICellEditorValidator () {

            public String isValid (final Object value) {
                if (value instanceof String) {
                    final IParser descParser = getParser ();
                    try {
                        IParserEditStatus isValid = (IParserEditStatus) getEditingDomain ().runExclusive (new RunnableWithResult.Impl () {

                            public void run () {
                                setResult (descParser.isValidEditString (null, (String) value));
                            }

                        }

                        );
                        return isValid.getCode () == ParserEditStatus.EDITABLE ? null : isValid.getMessage ();
                    } catch (Exception e) {
                        Log.error (DiagramUIPlugin.getInstance (), IStatus.ERROR, e.getMessage (), e);
                    }
                }
                return null;
            }

        }

        ;
    }

    protected String getLabelText () {
        return getParser ().getPrintString (new EObjectAdapter (getPrimaryView ()), getParserOptions ().intValue ());
    }

    public String getEditText () {
        return getParser ().getEditString (new EObjectAdapter (getPrimaryView ()), getParserOptions ().intValue ());
    }

    protected void refreshLabel () {
        super.refreshLabel ();
    }

}

