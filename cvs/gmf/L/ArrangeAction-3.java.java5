package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.Collections;

import java.util.List;

import java.util.ListIterator;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.draw2d.XYLayout;

import org.eclipse.gef.ConnectionEditPart;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.UnexecutableCommand;

import org.eclipse.gef.tools.ToolUtilities;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;

import org.eclipse.gmf.runtime.diagram.ui.actions.PresentationAction;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.Images;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.Messages;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;

import org.eclipse.gmf.runtime.diagram.ui.requests.ArrangeRequest;

import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.AnimationFigureHelper;

public class ArrangeAction extends PresentationAction {
    private boolean selectionOnly;

    protected ArrangeAction (IWorkbenchPage workbenchPage, boolean selectionOnly) {
        super (workbenchPage);
        this.selectionOnly = selectionOnly;
    }

    protected Request createTargetRequest () {
        return new ArrangeRequest (getId ());
    }

    protected void updateTargetRequest () {
        ArrangeRequest request = (ArrangeRequest) getTargetRequest ();
        request.setPartsToArrange (getOperationSet ());
    }

    private boolean isArrangeAll () {
        return ! selectionOnly;
    }

    protected Command getCommand () {
        if (getOperationSet ().size () >= 2) {
            EditPart parent = getSelectionParent (getOperationSet ());
            if (parent != null) return parent.getCommand (getTargetRequest ());

        }
        return UnexecutableCommand.INSTANCE;
    }

    protected boolean calculateEnabled () {
        if (isArrangeAll ()) {
            return true;
        }
        if (getOperationSet ().size () >= 2) {
            EditPart parentEP = getSelectionParent (getOperationSet ());
            if (parentEP instanceof GraphicalEditPart) {
                GraphicalEditPart parent = (GraphicalEditPart) parentEP;
                if ((parent != null) && (parent.getContentPane ().getLayoutManager () instanceof XYLayout)) return true;

            }
        }
        return false;
    }

    protected List createOperationSet () {
        List selection = getSelectedObjects ();
        if (isArrangeAll ()) {
            if (! selection.isEmpty () && selection.get (0) instanceof ShapeCompartmentEditPart) return createOperationSet (((ShapeCompartmentEditPart) selection.get (0)).getChildren ());

            if (getDiagramEditPart () != null) return createOperationSet (getDiagramEditPart ().getChildren ());

            return Collections.EMPTY_LIST;
        }
        if (selection.isEmpty () || ! (selection.get (0) instanceof IGraphicalEditPart)) return Collections.EMPTY_LIST;

        selection = ToolUtilities.getSelectionWithoutDependants (selection);
        return createOperationSet (selection);
    }

    private EditPart getSelectionParent (List editparts) {
        ListIterator li = editparts.listIterator ();
        while (li.hasNext ()) {
            Object obj = li.next ();
            if (! (obj instanceof ConnectionEditPart) && obj instanceof EditPart) {
                return ((EditPart) obj).getParent ();
            }
        }
        return null;
    }

    private List createOperationSet (List editparts) {
        if (editparts.size () < 2) return Collections.EMPTY_LIST;

        EditPart parent = getSelectionParent (editparts);
        if (parent == null) return Collections.EMPTY_LIST;

        for (int i = 1;
        i < editparts.size (); i ++) {
            EditPart part = (EditPart) editparts.get (i);
            if (part instanceof ConnectionEditPart) {
                continue;
            }
            if (part.getParent () != parent) return Collections.EMPTY_LIST;

        }
        return editparts;
    }

    protected boolean isSelectionListener () {
        return true;
    }

    public static ArrangeAction createArrangeAllAction (IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction (workbenchPage, false);
        action.setId (ActionIds.ACTION_ARRANGE_ALL);
        action.setText (Messages.getString ("ArrangeAction.ArrangeAll.ActionLabelText"));
        action.setToolTipText (Messages.getString ("ArrangeAction.ArrangeAll.ActionToolTipText"));
        action.setImageDescriptor (Images.DESC_ACTION_ARRANGE_ALL);
        action.setDisabledImageDescriptor (Images.DESC_ACTION_ARRANGE_ALL_DISABLED);
        action.setHoverImageDescriptor (Images.DESC_ACTION_ARRANGE_ALL);
        return action;
    }

    public static ArrangeAction createToolbarArrangeAllAction (IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction (workbenchPage, false);
        action.setId (ActionIds.ACTION_TOOLBAR_ARRANGE_ALL);
        action.setText (Messages.getString ("ArrangeAction.toolbar.ArrangeAll.ActionLabelText"));
        action.setToolTipText (Messages.getString ("ArrangeAction.toolbar.ArrangeAll.ActionToolTipText"));
        action.setImageDescriptor (Images.DESC_ACTION_ARRANGE_ALL);
        action.setDisabledImageDescriptor (Images.DESC_ACTION_ARRANGE_ALL_DISABLED);
        action.setHoverImageDescriptor (Images.DESC_ACTION_ARRANGE_ALL);
        return action;
    }

    public static ArrangeAction createArrangeSelectionAction (IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction (workbenchPage, true);
        action.setId (ActionIds.ACTION_ARRANGE_SELECTION);
        action.setText (Messages.getString ("ArrangeAction.ArrangeSelection.ActionLabelText"));
        action.setToolTipText (Messages.getString ("ArrangeAction.ArrangeSelection.ActionToolTipText"));
        action.setImageDescriptor (Images.DESC_ACTION_ARRANGE_SELECTED);
        action.setDisabledImageDescriptor (Images.DESC_ACTION_ARRANGE_SELECTED_DISABLED);
        action.setHoverImageDescriptor (Images.DESC_ACTION_ARRANGE_SELECTED);
        return action;
    }

    public static ArrangeAction createToolbarArrangeSelectionAction (IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction (workbenchPage, true);
        action.setId (ActionIds.ACTION_TOOLBAR_ARRANGE_SELECTION);
        action.setText (Messages.getString ("ArrangeAction.toolbar.ArrangeSelection.ActionLabelText"));
        action.setToolTipText (Messages.getString ("ArrangeAction.toolbar.ArrangeSelection.ActionToolTipText"));
        action.setImageDescriptor (Images.DESC_ACTION_ARRANGE_SELECTED);
        action.setDisabledImageDescriptor (Images.DESC_ACTION_ARRANGE_SELECTED_DISABLED);
        action.setHoverImageDescriptor (Images.DESC_ACTION_ARRANGE_SELECTED);
        return action;
    }

    protected void doRun (IProgressMonitor progressMonitor) {
        super.doRun (progressMonitor);
        IPreferenceStore preferenceStore = (IPreferenceStore) getDiagramEditPart ().getDiagramPreferencesHint ().getPreferenceStore ();
        boolean animatedLayout = preferenceStore.getBoolean (IPreferenceConstants.PREF_ENABLE_ANIMATED_LAYOUT);
        if (animatedLayout) {
            List operationSet = getOperationSet ();
            if (operationSet != null && ! operationSet.isEmpty ()) {
                IGraphicalEditPart container = (IGraphicalEditPart) ((EditPart) operationSet.get (0)).getParent ();
                AnimationFigureHelper.getInstance ().animate (container.getFigure ());
            }
        }
    }

}

