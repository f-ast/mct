package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.PrecisionRectangle;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.requests.AlignmentRequest;

import org.eclipse.gef.requests.ChangeBoundsRequest;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.BorderItemEditPart;

import org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemFigure;

import org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemFigure.BorderItemLocator;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.View;

public class BorderItemSelectionEditPolicy extends NonResizableEditPolicyEx {

    public void eraseSourceFeedback (Request request) {
        if ((REQ_MOVE.equals (request.getType ()) && isDragAllowed ()) || REQ_CLONE.equals (request.getType ()) || REQ_ADD.equals (request.getType ()) || RequestConstants.REQ_DROP.equals (request.getType ())) eraseChangeBoundsFeedback ((ChangeBoundsRequest) request);

    }

    public void showSourceFeedback (Request request) {
        if ((REQ_MOVE.equals (request.getType ()) && isDragAllowed ()) || REQ_ADD.equals (request.getType ()) || REQ_CLONE.equals (request.getType ()) || RequestConstants.REQ_DROP.equals (request.getType ())) showChangeBoundsFeedback ((ChangeBoundsRequest) request);

    }

    protected void showChangeBoundsFeedback (ChangeBoundsRequest request) {
        BorderItemEditPart borderItemEP = (BorderItemEditPart) getHost ();
        BorderItemLocator borderItemLocator = (BorderItemFigure.BorderItemLocator) borderItemEP.getLocator ();
        IFigure feedback = getDragSourceFeedbackFigure ();
        PrecisionRectangle rect = new PrecisionRectangle (getInitialFeedbackBounds ().getCopy ());
        getHostFigure ().translateToAbsolute (rect);
        rect.translate (request.getMoveDelta ());
        rect.resize (request.getSizeDelta ());
        getHostFigure ().translateToRelative (rect);
        Rectangle realLocation = borderItemLocator.locateOnBorder (rect.getCopy ());
        getHostFigure ().translateToAbsolute (realLocation);
        feedback.translateToRelative (realLocation);
        feedback.setBounds (realLocation);
    }

    protected Command getMoveCommand (ChangeBoundsRequest request) {
        BorderItemEditPart borderItemEP = (BorderItemEditPart) getHost ();
        BorderItemLocator borderItemLocator = (BorderItemFigure.BorderItemLocator) borderItemEP.getLocator ();
        PrecisionRectangle rect = new PrecisionRectangle (getInitialFeedbackBounds ().getCopy ());
        getHostFigure ().translateToAbsolute (rect);
        rect.translate (request.getMoveDelta ());
        rect.resize (request.getSizeDelta ());
        getHostFigure ().translateToRelative (rect);
        Rectangle realLocation = borderItemLocator.locateOnBorder (rect.getCopy ());
        Point location = borderItemLocator.getRelativeToBorder (realLocation.getTopLeft ());
        ICommand moveCommand = new SetBoundsCommand (DiagramUIMessages.Commands_MoveElement, new EObjectAdapter ((View) getHost ().getModel ()), location);
        return new EtoolsProxyCommand (moveCommand);
    }

    protected Command getAlignCommand (AlignmentRequest request) {
        return null;
    }

}

