package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.codegen.gmfgen.Behaviour;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;

import org.eclipse.gmf.codegen.gmfgen.SharedBehaviour;

public class SharedBehaviourImpl extends EObjectImpl implements SharedBehaviour {
    protected Behaviour delegate = null;

    protected SharedBehaviourImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getSharedBehaviour ();
    }

    public GenCommonBase getSubject () {
        if (eContainerFeatureID != GMFGenPackage.SHARED_BEHAVIOUR__SUBJECT) return null;

        return (GenCommonBase) eContainer ();
    }

    public Behaviour getDelegate () {
        if (delegate != null && delegate.eIsProxy ()) {
            InternalEObject oldDelegate = (InternalEObject) delegate;
            delegate = (Behaviour) eResolveProxy (oldDelegate);
            if (delegate != oldDelegate) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.SHARED_BEHAVIOUR__DELEGATE, oldDelegate, delegate));

            }
        }
        return delegate;
    }

    public Behaviour basicGetDelegate () {
        return delegate;
    }

    public void setDelegate (Behaviour newDelegate) {
        Behaviour oldDelegate = delegate;
        delegate = newDelegate;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.SHARED_BEHAVIOUR__DELEGATE, oldDelegate, delegate));

    }

    public String getEditPolicyQualifiedClassName () {
        return getDelegate () == null ? null : getDelegate ().getEditPolicyQualifiedClassName ();
    }

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.SHARED_BEHAVIOUR__SUBJECT :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.SHARED_BEHAVIOUR__SUBJECT, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.SHARED_BEHAVIOUR__SUBJECT :
                return eBasicSetContainer (null, GMFGenPackage.SHARED_BEHAVIOUR__SUBJECT, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.SHARED_BEHAVIOUR__SUBJECT :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR, GenCommonBase.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.SHARED_BEHAVIOUR__SUBJECT :
                return getSubject ();
            case GMFGenPackage.SHARED_BEHAVIOUR__DELEGATE :
                if (resolve) return getDelegate ();

                return basicGetDelegate ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.SHARED_BEHAVIOUR__DELEGATE :
                setDelegate ((Behaviour) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.SHARED_BEHAVIOUR__DELEGATE :
                setDelegate ((Behaviour) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.SHARED_BEHAVIOUR__SUBJECT :
                return getSubject () != null;
            case GMFGenPackage.SHARED_BEHAVIOUR__DELEGATE :
                return delegate != null;
        }
        return super.eIsSet (featureID);
    }

}

