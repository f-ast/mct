package org.eclipse.gmf.runtime.notation.impl;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EContentsEList;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public class DiagramImpl extends ViewImpl implements Diagram {
    protected static final String NAME_EDEFAULT = "";
    protected String name = NAME_EDEFAULT;
    protected EList persistedEdges = null;
    protected EList transientEdges = null;
    private EContentsEList allEdges = null;

    protected DiagramImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.eINSTANCE.getDiagram ();
    }

    public String getName () {
        return name;
    }

    public void setName (String newName) {
        String oldName = name;
        name = newName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.DIAGRAM__NAME, oldName, name));

    }

    public EList getEdges () {
        if (allEdges == null) {
            allEdges = new EContentsEList (this, new EStructuralFeature [] {NotationPackage.eINSTANCE.getDiagram_PersistedEdges (), NotationPackage.eINSTANCE.getDiagram_TransientEdges ()});
        }
        return allEdges;
    }

    public EList getPersistedEdges () {
        if (persistedEdges == null) {
            persistedEdges = new EObjectContainmentEList (Edge.class, this, NotationPackage.DIAGRAM__PERSISTED_EDGES);
        }
        return persistedEdges;
    }

    public EList getTransientEdges () {
        if (transientEdges == null) {
            transientEdges = new EObjectContainmentEList (Edge.class, this, NotationPackage.DIAGRAM__TRANSIENT_EDGES);
        }
        return transientEdges;
    }

    public Edge createEdge (EClass eClass) {
        Edge newEdge = (Edge) eClass.getEPackage ().getEFactoryInstance ().create (eClass);
        getEdges ().add (newEdge);
        return newEdge;
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case NotationPackage.DIAGRAM__EANNOTATIONS :
                    return ((InternalEList) getEAnnotations ()).basicAdd (otherEnd, msgs);
                case NotationPackage.DIAGRAM__SOURCE_EDGES :
                    return ((InternalEList) getSourceEdges ()).basicAdd (otherEnd, msgs);
                case NotationPackage.DIAGRAM__TARGET_EDGES :
                    return ((InternalEList) getTargetEdges ()).basicAdd (otherEnd, msgs);
                default :
                    return eDynamicInverseAdd (otherEnd, featureID, baseClass, msgs);
            }
        }
        if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);

        return eBasicSetContainer (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case NotationPackage.DIAGRAM__EANNOTATIONS :
                    return ((InternalEList) getEAnnotations ()).basicRemove (otherEnd, msgs);
                case NotationPackage.DIAGRAM__SOURCE_EDGES :
                    return ((InternalEList) getSourceEdges ()).basicRemove (otherEnd, msgs);
                case NotationPackage.DIAGRAM__TARGET_EDGES :
                    return ((InternalEList) getTargetEdges ()).basicRemove (otherEnd, msgs);
                case NotationPackage.DIAGRAM__PERSISTED_CHILDREN :
                    return ((InternalEList) getPersistedChildren ()).basicRemove (otherEnd, msgs);
                case NotationPackage.DIAGRAM__STYLES :
                    return ((InternalEList) getStyles ()).basicRemove (otherEnd, msgs);
                case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN :
                    return ((InternalEList) getTransientChildren ()).basicRemove (otherEnd, msgs);
                case NotationPackage.DIAGRAM__PERSISTED_EDGES :
                    return ((InternalEList) getPersistedEdges ()).basicRemove (otherEnd, msgs);
                case NotationPackage.DIAGRAM__TRANSIENT_EDGES :
                    return ((InternalEList) getTransientEdges ()).basicRemove (otherEnd, msgs);
                default :
                    return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
            }
        }
        return eBasicSetContainer (null, featureID, msgs);
    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.DIAGRAM__EANNOTATIONS :
                return getEAnnotations ();
            case NotationPackage.DIAGRAM__VISIBLE :
                return isVisible () ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.DIAGRAM__TYPE :
                return getType ();
            case NotationPackage.DIAGRAM__MUTABLE :
                return isMutable () ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.DIAGRAM__SOURCE_EDGES :
                return getSourceEdges ();
            case NotationPackage.DIAGRAM__TARGET_EDGES :
                return getTargetEdges ();
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN :
                return getPersistedChildren ();
            case NotationPackage.DIAGRAM__STYLES :
                return getStyles ();
            case NotationPackage.DIAGRAM__ELEMENT :
                if (resolve) return getElement ();

                return basicGetElement ();
            case NotationPackage.DIAGRAM__DIAGRAM :
                if (resolve) return getDiagram ();

                return basicGetDiagram ();
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN :
                return getTransientChildren ();
            case NotationPackage.DIAGRAM__NAME :
                return getName ();
            case NotationPackage.DIAGRAM__PERSISTED_EDGES :
                return getPersistedEdges ();
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES :
                return getTransientEdges ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.DIAGRAM__EANNOTATIONS :
                getEAnnotations ().clear ();
                getEAnnotations ().addAll ((Collection) newValue);
                return;
            case NotationPackage.DIAGRAM__VISIBLE :
                setVisible (((Boolean) newValue).booleanValue ());
                return;
            case NotationPackage.DIAGRAM__TYPE :
                setType ((String) newValue);
                return;
            case NotationPackage.DIAGRAM__MUTABLE :
                setMutable (((Boolean) newValue).booleanValue ());
                return;
            case NotationPackage.DIAGRAM__SOURCE_EDGES :
                getSourceEdges ().clear ();
                getSourceEdges ().addAll ((Collection) newValue);
                return;
            case NotationPackage.DIAGRAM__TARGET_EDGES :
                getTargetEdges ().clear ();
                getTargetEdges ().addAll ((Collection) newValue);
                return;
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN :
                getPersistedChildren ().clear ();
                getPersistedChildren ().addAll ((Collection) newValue);
                return;
            case NotationPackage.DIAGRAM__STYLES :
                getStyles ().clear ();
                getStyles ().addAll ((Collection) newValue);
                return;
            case NotationPackage.DIAGRAM__ELEMENT :
                setElement ((EObject) newValue);
                return;
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN :
                getTransientChildren ().clear ();
                getTransientChildren ().addAll ((Collection) newValue);
                return;
            case NotationPackage.DIAGRAM__NAME :
                setName ((String) newValue);
                return;
            case NotationPackage.DIAGRAM__PERSISTED_EDGES :
                getPersistedEdges ().clear ();
                getPersistedEdges ().addAll ((Collection) newValue);
                return;
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES :
                getTransientEdges ().clear ();
                getTransientEdges ().addAll ((Collection) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.DIAGRAM__EANNOTATIONS :
                getEAnnotations ().clear ();
                return;
            case NotationPackage.DIAGRAM__VISIBLE :
                setVisible (VISIBLE_EDEFAULT);
                return;
            case NotationPackage.DIAGRAM__TYPE :
                setType (TYPE_EDEFAULT);
                return;
            case NotationPackage.DIAGRAM__MUTABLE :
                setMutable (MUTABLE_EDEFAULT);
                return;
            case NotationPackage.DIAGRAM__SOURCE_EDGES :
                getSourceEdges ().clear ();
                return;
            case NotationPackage.DIAGRAM__TARGET_EDGES :
                getTargetEdges ().clear ();
                return;
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN :
                getPersistedChildren ().clear ();
                return;
            case NotationPackage.DIAGRAM__STYLES :
                getStyles ().clear ();
                return;
            case NotationPackage.DIAGRAM__ELEMENT :
                unsetElement ();
                return;
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN :
                getTransientChildren ().clear ();
                return;
            case NotationPackage.DIAGRAM__NAME :
                setName (NAME_EDEFAULT);
                return;
            case NotationPackage.DIAGRAM__PERSISTED_EDGES :
                getPersistedEdges ().clear ();
                return;
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES :
                getTransientEdges ().clear ();
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.DIAGRAM__EANNOTATIONS :
                return eAnnotations != null && ! eAnnotations.isEmpty ();
            case NotationPackage.DIAGRAM__VISIBLE :
                return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
            case NotationPackage.DIAGRAM__TYPE :
                return TYPE_EDEFAULT == null ? type != null : ! TYPE_EDEFAULT.equals (type);
            case NotationPackage.DIAGRAM__MUTABLE :
                return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
            case NotationPackage.DIAGRAM__SOURCE_EDGES :
                return sourceEdges != null && ! sourceEdges.isEmpty ();
            case NotationPackage.DIAGRAM__TARGET_EDGES :
                return targetEdges != null && ! targetEdges.isEmpty ();
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN :
                return persistedChildren != null && ! persistedChildren.isEmpty ();
            case NotationPackage.DIAGRAM__STYLES :
                return styles != null && ! styles.isEmpty ();
            case NotationPackage.DIAGRAM__ELEMENT :
                return isSetElement ();
            case NotationPackage.DIAGRAM__DIAGRAM :
                return basicGetDiagram () != null;
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN :
                return transientChildren != null && ! transientChildren.isEmpty ();
            case NotationPackage.DIAGRAM__NAME :
                return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT.equals (name);
            case NotationPackage.DIAGRAM__PERSISTED_EDGES :
                return persistedEdges != null && ! persistedEdges.isEmpty ();
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES :
                return transientEdges != null && ! transientEdges.isEmpty ();
        }
        return eDynamicIsSet (eFeature);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (name: ");
        result.append (name);
        result.append (')');
        return result.toString ();
    }

    public void insertEdge (Edge edge) {
        persistEdges ();
        getPersistedEdges ().add (edge);
    }

    public void insertEdgeAt (Edge edge, int index) {
        persistEdges ();
        if (getPersistedEdges ().size () >= index) {
            getPersistedEdges ().add (index, edge);
        }
    }

    public void insertEdge (Edge edge, boolean persisted) {
        List edges = null;
        if (persisted) edges = getPersistedEdges ();
        else edges = getTransientEdges ();

        edges.add (edge);
    }

    public void persistEdges () {
        if (transientEdges != null && transientEdges.size () > 0) {
            List edges = new ArrayList (transientEdges);
            getPersistedEdges ().addAll (transientEdges);
            for (Iterator iterator = edges.iterator ();
            iterator.hasNext ();) {
                Edge edge = (Edge) iterator.next ();
                View sourceView = edge.getSource ();
                View targetView = edge.getTarget ();
                if (sourceView != null) sourceView.persist ();

                if (targetView != null) targetView.persist ();

            }
        }
    }

    public void removeEdge (Edge edge) {
        if (edge.eContainingFeature () == NotationPackage.eINSTANCE.getDiagram_TransientEdges ()) {
            if (transientEdges != null && transientEdges.size () > 0) {
                transientEdges.remove (edge);
            }
        } else if (edge.eContainingFeature () == NotationPackage.eINSTANCE.getDiagram_PersistedEdges ()) {
            if (persistedEdges != null && persistedEdges.size () > 0) {
                persistedEdges.remove (edge);
            }
        }

    }

}

