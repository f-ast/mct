package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EAttribute;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.diadef.Connection;

import org.eclipse.gmf.mappings.Constraint;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.LinkMapping;

public class LinkMappingImpl extends MappingEntryImpl implements LinkMapping {
    protected Connection diagramLink = null;
    protected EClass domainMetaElement = null;
    protected Constraint domainSpecialization = null;
    protected EReference containmentFeature = null;
    protected EAttribute labelEditFeature = null;
    protected EAttribute labelDisplayFeature = null;
    protected EStructuralFeature linkMetaFeature = null;

    protected LinkMappingImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getLinkMapping ();
    }

    public Connection getDiagramLink () {
        if (diagramLink != null && diagramLink.eIsProxy ()) {
            Connection oldDiagramLink = diagramLink;
            diagramLink = (Connection) eResolveProxy ((InternalEObject) diagramLink);
            if (diagramLink != oldDiagramLink) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.LINK_MAPPING__DIAGRAM_LINK, oldDiagramLink, diagramLink));

            }
        }
        return diagramLink;
    }

    public Connection basicGetDiagramLink () {
        return diagramLink;
    }

    public void setDiagramLink (Connection newDiagramLink) {
        Connection oldDiagramLink = diagramLink;
        diagramLink = newDiagramLink;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.LINK_MAPPING__DIAGRAM_LINK, oldDiagramLink, diagramLink));

    }

    public EClass getDomainMetaElement () {
        if (domainMetaElement != null && domainMetaElement.eIsProxy ()) {
            EClass oldDomainMetaElement = domainMetaElement;
            domainMetaElement = (EClass) eResolveProxy ((InternalEObject) domainMetaElement);
            if (domainMetaElement != oldDomainMetaElement) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.LINK_MAPPING__DOMAIN_META_ELEMENT, oldDomainMetaElement, domainMetaElement));

            }
        }
        return domainMetaElement;
    }

    public EClass basicGetDomainMetaElement () {
        return domainMetaElement;
    }

    public void setDomainMetaElement (EClass newDomainMetaElement) {
        EClass oldDomainMetaElement = domainMetaElement;
        domainMetaElement = newDomainMetaElement;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.LINK_MAPPING__DOMAIN_META_ELEMENT, oldDomainMetaElement, domainMetaElement));

    }

    public Constraint getDomainSpecialization () {
        return domainSpecialization;
    }

    public NotificationChain basicSetDomainSpecialization (Constraint newDomainSpecialization, NotificationChain msgs) {
        Constraint oldDomainSpecialization = domainSpecialization;
        domainSpecialization = newDomainSpecialization;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFMapPackage.LINK_MAPPING__DOMAIN_SPECIALIZATION, oldDomainSpecialization, newDomainSpecialization);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setDomainSpecialization (Constraint newDomainSpecialization) {
        if (newDomainSpecialization != domainSpecialization) {
            NotificationChain msgs = null;
            if (domainSpecialization != null) msgs = ((InternalEObject) domainSpecialization).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.LINK_MAPPING__DOMAIN_SPECIALIZATION, null, msgs);

            if (newDomainSpecialization != null) msgs = ((InternalEObject) newDomainSpecialization).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.LINK_MAPPING__DOMAIN_SPECIALIZATION, null, msgs);

            msgs = basicSetDomainSpecialization (newDomainSpecialization, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.LINK_MAPPING__DOMAIN_SPECIALIZATION, newDomainSpecialization, newDomainSpecialization));

    }

    public EReference getContainmentFeature () {
        if (containmentFeature != null && containmentFeature.eIsProxy ()) {
            EReference oldContainmentFeature = containmentFeature;
            containmentFeature = (EReference) eResolveProxy ((InternalEObject) containmentFeature);
            if (containmentFeature != oldContainmentFeature) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.LINK_MAPPING__CONTAINMENT_FEATURE, oldContainmentFeature, containmentFeature));

            }
        }
        return containmentFeature;
    }

    public EReference basicGetContainmentFeature () {
        return containmentFeature;
    }

    public void setContainmentFeature (EReference newContainmentFeature) {
        EReference oldContainmentFeature = containmentFeature;
        containmentFeature = newContainmentFeature;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.LINK_MAPPING__CONTAINMENT_FEATURE, oldContainmentFeature, containmentFeature));

    }

    public EAttribute getLabelEditFeature () {
        if (labelEditFeature != null && labelEditFeature.eIsProxy ()) {
            EAttribute oldLabelEditFeature = labelEditFeature;
            labelEditFeature = (EAttribute) eResolveProxy ((InternalEObject) labelEditFeature);
            if (labelEditFeature != oldLabelEditFeature) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.LINK_MAPPING__LABEL_EDIT_FEATURE, oldLabelEditFeature, labelEditFeature));

            }
        }
        return labelEditFeature;
    }

    public EAttribute basicGetLabelEditFeature () {
        return labelEditFeature;
    }

    public void setLabelEditFeature (EAttribute newLabelEditFeature) {
        EAttribute oldLabelEditFeature = labelEditFeature;
        labelEditFeature = newLabelEditFeature;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.LINK_MAPPING__LABEL_EDIT_FEATURE, oldLabelEditFeature, labelEditFeature));

    }

    public EAttribute getLabelDisplayFeatureGen () {
        if (labelDisplayFeature != null && labelDisplayFeature.eIsProxy ()) {
            EAttribute oldLabelDisplayFeature = labelDisplayFeature;
            labelDisplayFeature = (EAttribute) eResolveProxy ((InternalEObject) labelDisplayFeature);
            if (labelDisplayFeature != oldLabelDisplayFeature) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.LINK_MAPPING__LABEL_DISPLAY_FEATURE, oldLabelDisplayFeature, labelDisplayFeature));

            }
        }
        return labelDisplayFeature;
    }

    public EAttribute getLabelDisplayFeature () {
        EAttribute rv = getLabelDisplayFeatureGen ();
        if (rv != null) {
            return rv;
        }
        return getLabelEditFeature ();
    }

    public EAttribute basicGetLabelDisplayFeature () {
        return labelDisplayFeature;
    }

    public void setLabelDisplayFeature (EAttribute newLabelDisplayFeature) {
        EAttribute oldLabelDisplayFeature = labelDisplayFeature;
        labelDisplayFeature = newLabelDisplayFeature;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.LINK_MAPPING__LABEL_DISPLAY_FEATURE, oldLabelDisplayFeature, labelDisplayFeature));

    }

    public EStructuralFeature getLinkMetaFeature () {
        if (linkMetaFeature != null && linkMetaFeature.eIsProxy ()) {
            EStructuralFeature oldLinkMetaFeature = linkMetaFeature;
            linkMetaFeature = (EStructuralFeature) eResolveProxy ((InternalEObject) linkMetaFeature);
            if (linkMetaFeature != oldLinkMetaFeature) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.LINK_MAPPING__LINK_META_FEATURE, oldLinkMetaFeature, linkMetaFeature));

            }
        }
        return linkMetaFeature;
    }

    public EStructuralFeature basicGetLinkMetaFeature () {
        return linkMetaFeature;
    }

    public void setLinkMetaFeature (EStructuralFeature newLinkMetaFeature) {
        EStructuralFeature oldLinkMetaFeature = linkMetaFeature;
        linkMetaFeature = newLinkMetaFeature;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.LINK_MAPPING__LINK_META_FEATURE, oldLinkMetaFeature, linkMetaFeature));

    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFMapPackage.LINK_MAPPING__DOMAIN_SPECIALIZATION :
                    return basicSetDomainSpecialization (null, msgs);
                default :
                    return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
            }
        }
        return eBasicSetContainer (null, featureID, msgs);
    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFMapPackage.LINK_MAPPING__DIAGRAM_LINK :
                if (resolve) return getDiagramLink ();

                return basicGetDiagramLink ();
            case GMFMapPackage.LINK_MAPPING__DOMAIN_META_ELEMENT :
                if (resolve) return getDomainMetaElement ();

                return basicGetDomainMetaElement ();
            case GMFMapPackage.LINK_MAPPING__DOMAIN_SPECIALIZATION :
                return getDomainSpecialization ();
            case GMFMapPackage.LINK_MAPPING__CONTAINMENT_FEATURE :
                if (resolve) return getContainmentFeature ();

                return basicGetContainmentFeature ();
            case GMFMapPackage.LINK_MAPPING__LABEL_EDIT_FEATURE :
                if (resolve) return getLabelEditFeature ();

                return basicGetLabelEditFeature ();
            case GMFMapPackage.LINK_MAPPING__LABEL_DISPLAY_FEATURE :
                if (resolve) return getLabelDisplayFeature ();

                return basicGetLabelDisplayFeature ();
            case GMFMapPackage.LINK_MAPPING__LINK_META_FEATURE :
                if (resolve) return getLinkMetaFeature ();

                return basicGetLinkMetaFeature ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFMapPackage.LINK_MAPPING__DIAGRAM_LINK :
                setDiagramLink ((Connection) newValue);
                return;
            case GMFMapPackage.LINK_MAPPING__DOMAIN_META_ELEMENT :
                setDomainMetaElement ((EClass) newValue);
                return;
            case GMFMapPackage.LINK_MAPPING__DOMAIN_SPECIALIZATION :
                setDomainSpecialization ((Constraint) newValue);
                return;
            case GMFMapPackage.LINK_MAPPING__CONTAINMENT_FEATURE :
                setContainmentFeature ((EReference) newValue);
                return;
            case GMFMapPackage.LINK_MAPPING__LABEL_EDIT_FEATURE :
                setLabelEditFeature ((EAttribute) newValue);
                return;
            case GMFMapPackage.LINK_MAPPING__LABEL_DISPLAY_FEATURE :
                setLabelDisplayFeature ((EAttribute) newValue);
                return;
            case GMFMapPackage.LINK_MAPPING__LINK_META_FEATURE :
                setLinkMetaFeature ((EStructuralFeature) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFMapPackage.LINK_MAPPING__DIAGRAM_LINK :
                setDiagramLink ((Connection) null);
                return;
            case GMFMapPackage.LINK_MAPPING__DOMAIN_META_ELEMENT :
                setDomainMetaElement ((EClass) null);
                return;
            case GMFMapPackage.LINK_MAPPING__DOMAIN_SPECIALIZATION :
                setDomainSpecialization ((Constraint) null);
                return;
            case GMFMapPackage.LINK_MAPPING__CONTAINMENT_FEATURE :
                setContainmentFeature ((EReference) null);
                return;
            case GMFMapPackage.LINK_MAPPING__LABEL_EDIT_FEATURE :
                setLabelEditFeature ((EAttribute) null);
                return;
            case GMFMapPackage.LINK_MAPPING__LABEL_DISPLAY_FEATURE :
                setLabelDisplayFeature ((EAttribute) null);
                return;
            case GMFMapPackage.LINK_MAPPING__LINK_META_FEATURE :
                setLinkMetaFeature ((EStructuralFeature) null);
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFMapPackage.LINK_MAPPING__DIAGRAM_LINK :
                return diagramLink != null;
            case GMFMapPackage.LINK_MAPPING__DOMAIN_META_ELEMENT :
                return domainMetaElement != null;
            case GMFMapPackage.LINK_MAPPING__DOMAIN_SPECIALIZATION :
                return domainSpecialization != null;
            case GMFMapPackage.LINK_MAPPING__CONTAINMENT_FEATURE :
                return containmentFeature != null;
            case GMFMapPackage.LINK_MAPPING__LABEL_EDIT_FEATURE :
                return labelEditFeature != null;
            case GMFMapPackage.LINK_MAPPING__LABEL_DISPLAY_FEATURE :
                return labelDisplayFeature != null;
            case GMFMapPackage.LINK_MAPPING__LINK_META_FEATURE :
                return linkMetaFeature != null;
        }
        return eDynamicIsSet (eFeature);
    }

}

