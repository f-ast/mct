package org.eclipse.gmf.runtime.common.core.internal;

import org.eclipse.core.commands.operations.IOperationApprover;

import org.eclipse.core.commands.operations.OperationHistoryFactory;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.core.runtime.IExtensionRegistry;

import org.eclipse.core.runtime.ILogListener;

import org.eclipse.core.runtime.Platform;

import org.eclipse.core.runtime.Plugin;

import org.eclipse.gmf.runtime.common.core.internal.command.FileModificationApprover;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.osgi.framework.BundleContext;

public class CommonCorePlugin extends Plugin {
    protected static final String LOG_LISTENER_EXT_P_NAME = "logListeners";
    private static CommonCorePlugin plugin;

    public CommonCorePlugin () {
        super ();
        plugin = this;
    }

    public static CommonCorePlugin getDefault () {
        return plugin;
    }

    public static String getPluginId () {
        return getDefault ().getBundle ().getSymbolicName ();
    }

    public void start (BundleContext context) throws Exception {
        super.start (context);
        configureLogListeners ();
        IOperationApprover approver = new FileModificationApprover ();
        OperationHistoryFactory.getOperationHistory ().addOperationApprover (approver);
    }

    private void configureLogListeners () {
        IExtensionRegistry reg = Platform.getExtensionRegistry ();
        IConfigurationElement [] elements = reg.getConfigurationElementsFor (getPluginId (), LOG_LISTENER_EXT_P_NAME);
        ILogListener listener = null;
        try {
            for (int i = 0;
            i < elements.length; i ++) {
                listener = (ILogListener) elements [i].createExecutableExtension ("class");
                Platform.getLog (getDefault ().getBundle ()).addLogListener (listener);
            }
        } catch (CoreException e) {
            Trace.catching (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.EXCEPTIONS_CATCHING, getClass (), "configureLogListeners", e);
            Log.error (CommonCorePlugin.getDefault (), CommonCoreStatusCodes.SERVICE_FAILURE, e.getMessage ());
        }
    }

}

