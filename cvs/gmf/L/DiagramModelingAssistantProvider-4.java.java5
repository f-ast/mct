package org.eclipse.gmf.runtime.diagram.ui.providers.internal;

import java.util.Collections;

import java.util.List;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.diagram.ui.editparts.INotableEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.NoteEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.util.PresentationNotationType;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.GetRelTypesOnSourceAndTargetOperation;

import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.GetRelTypesOnSourceOperation;

import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.GetRelTypesOnTargetOperation;

import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.GetTypesForSourceOperation;

import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.GetTypesForTargetOperation;

import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider;

public class DiagramModelingAssistantProvider extends ModelingAssistantProvider {
    private static List connectorTypes = null;
    private static List shapeTypes = null;

    private static List getConnectorTypes () {
        if (connectorTypes == null) {
            connectorTypes = Collections.singletonList (PresentationNotationType.NOTE_ATTACHMENT);
        }
        return connectorTypes;
    }

    private static List getShapeTypes () {
        if (shapeTypes == null) {
            shapeTypes = Collections.singletonList (PresentationNotationType.NOTE);
        }
        return shapeTypes;
    }

    public boolean provides (IOperation operation) {
        if (operation instanceof GetRelTypesOnSourceOperation || operation instanceof GetRelTypesOnTargetOperation || operation instanceof GetRelTypesOnSourceAndTargetOperation || operation instanceof GetTypesForTargetOperation || operation instanceof GetTypesForSourceOperation) {
            return super.provides (operation);
        }
        return false;
    }

    public List getRelTypesOnSource (IAdaptable source) {
        if (source != null) {
            INotableEditPart noteable = (INotableEditPart) source.getAdapter (INotableEditPart.class);
            if (noteable != null && noteable.canAttachNote ()) {
                return getConnectorTypes ();
            }
        }
        return Collections.EMPTY_LIST;
    }

    public List getRelTypesOnTarget (IAdaptable target) {
        if (target != null) {
            INotableEditPart noteable = (INotableEditPart) target.getAdapter (INotableEditPart.class);
            if (noteable != null && noteable.canAttachNote ()) {
                return getConnectorTypes ();
            }
        }
        return Collections.EMPTY_LIST;
    }

    public List getRelTypesOnSourceAndTarget (IAdaptable source, IAdaptable target) {
        if (source.getAdapter (NoteEditPart.class) != null) {
            INotableEditPart noteable = (INotableEditPart) target.getAdapter (INotableEditPart.class);
            if (noteable != null && noteable.canAttachNote ()) {
                return getConnectorTypes ();
            }
        } else if (target.getAdapter (NoteEditPart.class) != null) {
            INotableEditPart noteable = (INotableEditPart) source.getAdapter (INotableEditPart.class);
            if (noteable != null && noteable.canAttachNote ()) {
                return getConnectorTypes ();
            }
        }

        return Collections.EMPTY_LIST;
    }

    public List getTypesForSource (IAdaptable target, IElementType relationshipType) {
        if (target.getAdapter (NoteEditPart.class) != null || ! relationshipType.equals (PresentationNotationType.NOTE_ATTACHMENT)) {
            return Collections.EMPTY_LIST;
        }
        return getShapeTypes ();
    }

    public List getTypesForTarget (IAdaptable source, IElementType relationshipType) {
        if (source.getAdapter (NoteEditPart.class) != null || ! relationshipType.equals (PresentationNotationType.NOTE_ATTACHMENT)) {
            return Collections.EMPTY_LIST;
        }
        return getShapeTypes ();
    }

}

