package org.eclipse.gmf.mappings.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.mappings.GMFMapFactory;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.LabelNodeMapping;

import org.eclipse.gmf.mappings.NodeMapping;

import org.eclipse.gmf.mappings.presentation.FilterUtil;

public class NodeMappingItemProvider extends MappingEntryItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public NodeMappingItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addContextMenuPropertyDescriptor (object);
            addToolPropertyDescriptor (object);
            addAppearanceStylePropertyDescriptor (object);
            addDiagramNodePropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addContextMenuPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_MenuOwner_contextMenu_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_MenuOwner_contextMenu_feature", "_UI_MenuOwner_type"), GMFMapPackage.eINSTANCE.getMenuOwner_ContextMenu (), true, null, getString ("_UI_VisualrepresentationPropertyCategory"), null));
    }

    protected void addToolPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_ToolOwner_tool_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_ToolOwner_tool_feature", "_UI_ToolOwner_type"), GMFMapPackage.eINSTANCE.getToolOwner_Tool (), true, null, getString ("_UI_VisualrepresentationPropertyCategory"), null) {

            protected Collection getComboBoxObjects (Object object) {
                return FilterUtil.sort (super.getComboBoxObjects (object));
            }

        }

        );
    }

    protected void addAppearanceStylePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_AppearanceSteward_appearanceStyle_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_AppearanceSteward_appearanceStyle_feature", "_UI_AppearanceSteward_type"), GMFMapPackage.eINSTANCE.getAppearanceSteward_AppearanceStyle (), true, null, getString ("_UI_VisualrepresentationPropertyCategory"), null));
    }

    protected void addDiagramNodePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_NodeMapping_diagramNode_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_NodeMapping_diagramNode_feature", "_UI_NodeMapping_type"), GMFMapPackage.eINSTANCE.getNodeMapping_DiagramNode (), true, null, null, null));
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFMapPackage.eINSTANCE.getNodeMapping_Children ());
            childrenFeatures.add (GMFMapPackage.eINSTANCE.getNodeMapping_Compartments ());
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/NodeMapping"));
    }

    public String getText (Object object) {
        if (object instanceof NodeMapping) {
            NodeMapping mapping = (NodeMapping) object;
            String result = " <";
            if (mapping.getDomainMetaElement () != null) {
                result += mapping.getDomainMetaElement ().getName ();
            }
            result += "/";
            if (mapping.getDiagramNode () != null) {
                result += mapping.getDiagramNode ().getName ();
            } else if (mapping instanceof LabelNodeMapping && ((LabelNodeMapping) mapping).getDiagramLabel () != null) {
                result += ((LabelNodeMapping) mapping).getDiagramLabel ().getName ();
            }

            result += ">";
            return getString ("_UI_NodeMapping_type") + result;
        }
        return getString ("_UI_NodeMapping_type");
    }

    public void notifyChangedGen (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (NodeMapping.class)) {
            case GMFMapPackage.NODE_MAPPING__CHILDREN :
            case GMFMapPackage.NODE_MAPPING__COMPARTMENTS :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    public void notifyChanged (Notification notification) {
        switch (notification.getFeatureID (NodeMapping.class)) {
            case GMFMapPackage.NODE_MAPPING__DOMAIN_META_ELEMENT :
                fireNotifyChanged (new ViewerNotification (notification, null));
                break;
        }
        notifyChangedGen (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFMapPackage.eINSTANCE.getNodeMapping_Children (), GMFMapFactory.eINSTANCE.createChildReference ()));
        newChildDescriptors.add (createChildParameter (GMFMapPackage.eINSTANCE.getNodeMapping_Compartments (), GMFMapFactory.eINSTANCE.createCompartmentMapping ()));
    }

    public ResourceLocator getResourceLocator () {
        return GMFMapEditPlugin.INSTANCE;
    }

}

