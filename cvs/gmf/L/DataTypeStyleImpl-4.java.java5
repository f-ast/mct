package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EDataType;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.runtime.notation.DataTypeStyle;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class DataTypeStyleImpl extends NamedStyleImpl implements DataTypeStyle {
    protected EDataType instanceType;

    protected DataTypeStyleImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.DATA_TYPE_STYLE;
    }

    public EDataType getInstanceType () {
        if (instanceType != null && instanceType.eIsProxy ()) {
            InternalEObject oldInstanceType = (InternalEObject) instanceType;
            instanceType = (EDataType) eResolveProxy (oldInstanceType);
            if (instanceType != oldInstanceType) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, NotationPackage.DATA_TYPE_STYLE__INSTANCE_TYPE, oldInstanceType, instanceType));

            }
        }
        return instanceType;
    }

    public EDataType basicGetInstanceType () {
        return instanceType;
    }

    public void setInstanceType (EDataType newInstanceType) {
        EDataType oldInstanceType = instanceType;
        instanceType = newInstanceType;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.DATA_TYPE_STYLE__INSTANCE_TYPE, oldInstanceType, instanceType));

    }

    public String getStringFromObject (Object objectValue) {
        if (getInstanceType () == null && objectValue instanceof String) return (String) objectValue;

        return EcoreUtil.convertToString (getInstanceType (), objectValue);
    }

    public Object getObjectFromString (String stringValue) {
        if (getInstanceType () == null) return stringValue;

        return EcoreUtil.createFromString (getInstanceType (), stringValue);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.DATA_TYPE_STYLE__UUID :
                return getUUID ();
            case NotationPackage.DATA_TYPE_STYLE__NAME :
                return getName ();
            case NotationPackage.DATA_TYPE_STYLE__INSTANCE_TYPE :
                if (resolve) return getInstanceType ();

                return basicGetInstanceType ();
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.DATA_TYPE_STYLE__UUID :
                setUUID ((byte []) newValue);
                return;
            case NotationPackage.DATA_TYPE_STYLE__NAME :
                setName ((String) newValue);
                return;
            case NotationPackage.DATA_TYPE_STYLE__INSTANCE_TYPE :
                setInstanceType ((EDataType) newValue);
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.DATA_TYPE_STYLE__UUID :
                setUUID (UUID_EDEFAULT);
                return;
            case NotationPackage.DATA_TYPE_STYLE__NAME :
                setName (NAME_EDEFAULT);
                return;
            case NotationPackage.DATA_TYPE_STYLE__INSTANCE_TYPE :
                setInstanceType ((EDataType) null);
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.DATA_TYPE_STYLE__UUID :
                return UUID_EDEFAULT == null ? uUID != null : ! UUID_EDEFAULT.equals (uUID);
            case NotationPackage.DATA_TYPE_STYLE__NAME :
                return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT.equals (name);
            case NotationPackage.DATA_TYPE_STYLE__INSTANCE_TYPE :
                return instanceType != null;
        }
        return eDynamicIsSet (featureID);
    }

}

