package org.eclipse.gmf.runtime.common.ui.action.actions.global;

import org.eclipse.core.commands.operations.IUndoContext;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.gmf.runtime.common.ui.action.global.GlobalAction;

import org.eclipse.gmf.runtime.common.ui.action.global.GlobalActionId;

import org.eclipse.jface.action.IAction;

import org.eclipse.jface.resource.ImageDescriptor;

import org.eclipse.jface.util.IPropertyChangeListener;

import org.eclipse.jface.util.PropertyChangeEvent;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.ui.operations.RedoActionHandler;

public final class GlobalRedoAction extends GlobalAction {
    private RedoActionHandler delegate;
    private IUndoContext undoContext;
    private IPropertyChangeListener listener;

    public GlobalRedoAction (IWorkbenchPage workbenchPage) {
        super (workbenchPage);
    }

    public GlobalRedoAction (IWorkbenchPart workbenchPart) {
        super (workbenchPart);
    }

    public String getActionId () {
        return GlobalActionId.REDO;
    }

    protected void setWorkbenchPart (IWorkbenchPart workbenchPart) {
        super.setWorkbenchPart (workbenchPart);
        initializeWithContext (getUndoContext ());
    }

    protected void initializeWithContext (IUndoContext context) {
        if (context != null) {
            if (delegate != null) {
                delegate.removePropertyChangeListener (getDelegateListener ());
                delegate.dispose ();
            }
            delegate = new RedoActionHandler (getWorkbenchPart ().getSite (), context);
            delegate.addPropertyChangeListener (getDelegateListener ());
            boolean enabled = isEnabled ();
            firePropertyChange (IAction.ENABLED, Boolean.valueOf (! enabled), Boolean.valueOf (enabled));
        }
    }

    private IPropertyChangeListener getDelegateListener () {
        if (listener == null) {
            listener = new IPropertyChangeListener () {

                public void propertyChange (PropertyChangeEvent event) {
                    firePropertyChange (event.getProperty (), event.getOldValue (), event.getNewValue ());
                }

            }

            ;
        }
        return listener;
    }

    public ImageDescriptor getImageDescriptor () {
        if (delegate != null) {
            return delegate.getImageDescriptor ();
        } else {
            return null;
        }
    }

    public ImageDescriptor getDisabledImageDescriptor () {
        if (delegate != null) {
            return delegate.getDisabledImageDescriptor ();
        } else {
            return null;
        }
    }

    public ImageDescriptor getHoverImageDescriptor () {
        if (delegate != null) {
            return delegate.getHoverImageDescriptor ();
        } else {
            return null;
        }
    }

    public String getText () {
        if (delegate != null) {
            return delegate.getText ();
        } else {
            return null;
        }
    }

    public String getToolTipText () {
        if (delegate != null) {
            return delegate.getToolTipText ();
        } else {
            return null;
        }
    }

    public String getDescription () {
        if (delegate != null) {
            return delegate.getDescription ();
        } else {
            return null;
        }
    }

    public boolean isEnabled () {
        if (delegate != null) {
            return delegate.isEnabled ();
        } else {
            return false;
        }
    }

    public boolean isHandled () {
        if (delegate != null) {
            return delegate.isHandled ();
        } else {
            return false;
        }
    }

    public void setChecked (boolean checked) {
        if (delegate != null) {
            delegate.setChecked (checked);
        }
    }

    protected void doRun (IProgressMonitor progressMonitor) {
        if (delegate != null) {
            delegate.run ();
        }
    }

    public void refresh () {
        if (delegate != null) {
            delegate.update ();
        }
        setText (getText ());
    }

    public final void setUndoContext (IUndoContext undoContext) {
        this.undoContext = undoContext;
        initializeWithContext (undoContext);
    }

    public final IUndoContext getUndoContext () {
        if (undoContext == null) {
            IWorkbenchPart part = getWorkbenchPart ();
            if (part != null) {
                return (IUndoContext) part.getAdapter (IUndoContext.class);
            }
        }
        return undoContext;
    }

    protected boolean isOperationHistoryListener () {
        return true;
    }

}

