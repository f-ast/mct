package org.eclipse.gmf.runtime.draw2d.ui.render.internal.factory;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;

import org.eclipse.swt.graphics.RGB;

class RenderInfoImpl implements RenderInfo {
    private boolean maintainAspectRatio;
    private boolean antialias;
    private int width;
    private int height;
    private RGB fill = null;
    private RGB outline = null;

    public int getWidth () {
        return width;
    }

    public int getHeight () {
        return height;
    }

    public boolean shouldMaintainAspectRatio () {
        return maintainAspectRatio;
    }

    public boolean shouldAntiAlias () {
        return antialias;
    }

    public RGB getBackgroundColor () {
        if (fill == null) return null;

        return new RGB (fill.red, fill.green, fill.blue);
    }

    public RGB getForegroundColor () {
        if (outline == null) return null;

        return new RGB (outline.red, outline.green, outline.blue);
    }

    public void setValues (int width, int height, boolean maintainAspectRatio, boolean antialias, RGB fill, RGB outline) {
        this.width = width;
        this.height = height;
        this.fill = fill == null ? null : new RGB (fill.red, fill.green, fill.blue);
        this.outline = outline == null ? null : new RGB (outline.red, outline.green, outline.blue);
        this.maintainAspectRatio = maintainAspectRatio;
        this.antialias = antialias;
    }

    public RenderInfoImpl () {
        super ();
        this.width = 0;
        this.height = 0;
        this.fill = null;
        this.outline = null;
        this.maintainAspectRatio = true;
        this.antialias = true;
    }

    public RenderInfoImpl (RenderInfo info) {
        super ();
        this.width = info.getWidth ();
        this.height = info.getHeight ();
        this.fill = info.getBackgroundColor ();
        this.outline = info.getForegroundColor ();
        this.maintainAspectRatio = info.shouldMaintainAspectRatio ();
        this.antialias = info.shouldAntiAlias ();
    }

    public int hashCode () {
        int hashCode = (new Integer (width)).hashCode ();
        hashCode = hashCode + (new Integer (height)).hashCode ();
        hashCode = hashCode + (Boolean.valueOf (maintainAspectRatio)).hashCode ();
        hashCode = hashCode + (Boolean.valueOf (antialias)).hashCode ();
        if (fill != null) hashCode = hashCode + fill.hashCode ();

        if (outline != null) hashCode = hashCode + outline.hashCode ();

        return hashCode;
    }

    public boolean equals (Object object) {
        RenderInfoImpl info = null;
        if (object instanceof RenderInfoImpl) {
            info = (RenderInfoImpl) object;
        }
        if (info != null && (getWidth () == info.getWidth () && getHeight () == info.getHeight () && shouldMaintainAspectRatio () == info.shouldMaintainAspectRatio () && shouldAntiAlias () == info.shouldAntiAlias ())) {
            if (getBackgroundColor () == null) {
                if (info.getBackgroundColor () != null) return false;

            } else if (! getBackgroundColor ().equals (info.getBackgroundColor ())) return false;

            if (getForegroundColor () == null) {
                if (info.getForegroundColor () != null) return false;

            } else if (! getForegroundColor ().equals (info.getForegroundColor ())) return false;

            return true;
        }
        return false;
    }

}

