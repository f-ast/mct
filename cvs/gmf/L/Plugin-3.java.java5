package org.eclipse.gmf.internal.bridge.ui;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Status;

import org.eclipse.jface.resource.ImageDescriptor;

import org.eclipse.jface.resource.ImageRegistry;

import org.eclipse.ui.plugin.AbstractUIPlugin;

import org.osgi.framework.BundleContext;

public class Plugin extends AbstractUIPlugin {
    public static final String CHECKED_ICON = "/icons/cview16/checked.gif";
    public static final String UNCHECKED_ICON = "/icons/cview16/unchecked.gif";
    public static final String NODE_ICON = "/icons/cview16/node.gif";
    public static final String LINK_ICON = "/icons/cview16/link.gif";
    public static final String LABEL_ICON = "/icons/cview16/label.gif";
    private static Plugin plugin;

    public Plugin () {
        plugin = this;
    }

    public void stop (BundleContext context) throws Exception {
        super.stop (context);
        plugin = null;
    }

    public static Plugin getDefault () {
        return plugin;
    }

    protected void initializeImageRegistry (ImageRegistry reg) {
        loadImage (reg, CHECKED_ICON);
        loadImage (reg, UNCHECKED_ICON);
        loadImage (reg, NODE_ICON);
        loadImage (reg, LINK_ICON);
        loadImage (reg, LABEL_ICON);
    }

    protected void loadImage (ImageRegistry registry, String id) {
        loadImage (registry, id, getBundle ().getSymbolicName ());
    }

    protected void loadImage (ImageRegistry registry, String id, String bundleId) {
        ImageDescriptor descriptor = imageDescriptorFromPlugin (bundleId, id);
        if (descriptor != null) {
            registry.put (id, descriptor);
        }
    }

    public static void log (CoreException ex) {
        log (ex.getStatus ());
    }

    public static void log (Exception ex) {
        if (ex instanceof CoreException) {
            log ((CoreException) ex);
        } else {
            log (new Status (IStatus.ERROR, getPluginID (), 0, ex.getMessage (), ex));
        }
    }

    public static String getPluginID () {
        return getDefault ().getBundle ().getSymbolicName ();
    }

    public static void log (IStatus s) {
        getDefault ().getLog ().log (s);
    }

    public static ImageDescriptor getImageDescriptor (String path) {
        return AbstractUIPlugin.imageDescriptorFromPlugin ("org.eclipse.gmf.bridge.ui", path);
    }

}

