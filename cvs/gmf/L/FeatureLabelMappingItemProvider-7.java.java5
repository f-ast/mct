package org.eclipse.gmf.mappings.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.mappings.FeatureLabelMapping;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.presentation.FilterUtil;

public class FeatureLabelMappingItemProvider extends LabelMappingItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public FeatureLabelMappingItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    @Override
    public List < IItemPropertyDescriptor > getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addFeaturesPropertyDescriptor (object);
            addViewPatternPropertyDescriptor (object);
            addEditorPatternPropertyDescriptor (object);
            addEditPatternPropertyDescriptor (object);
            addViewMethodPropertyDescriptor (object);
            addEditMethodPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addFeaturesPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_FeatureLabelMapping_features_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_FeatureLabelMapping_features_feature", "_UI_FeatureLabelMapping_type"), GMFMapPackage.eINSTANCE.getFeatureLabelMapping_Features (), true, false, true, null, null, null) {

            protected Collection < ? > getComboBoxObjects (Object object) {
                @SuppressWarnings("unchecked")
                Collection < EStructuralFeature > original = (Collection < EStructuralFeature >) super.getComboBoxObjects (object);
                return FilterUtil.filterByContainerMetaclass (original, ((FeatureLabelMapping) object).getMapEntry ());
            }

        }

        );
    }

    protected void addViewPatternPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_FeatureLabelMapping_viewPattern_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_FeatureLabelMapping_viewPattern_feature", "_UI_FeatureLabelMapping_type"), GMFMapPackage.eINSTANCE.getFeatureLabelMapping_ViewPattern (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addEditorPatternPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_FeatureLabelMapping_editorPattern_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_FeatureLabelMapping_editorPattern_feature", "_UI_FeatureLabelMapping_type"), GMFMapPackage.eINSTANCE.getFeatureLabelMapping_EditorPattern (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addViewMethodPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_FeatureLabelMapping_viewMethod_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_FeatureLabelMapping_viewMethod_feature", "_UI_FeatureLabelMapping_type"), GMFMapPackage.eINSTANCE.getFeatureLabelMapping_ViewMethod (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addEditPatternPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_FeatureLabelMapping_editPattern_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_FeatureLabelMapping_editPattern_feature", "_UI_FeatureLabelMapping_type"), GMFMapPackage.eINSTANCE.getFeatureLabelMapping_EditPattern (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addEditMethodPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_FeatureLabelMapping_editMethod_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_FeatureLabelMapping_editMethod_feature", "_UI_FeatureLabelMapping_type"), GMFMapPackage.eINSTANCE.getFeatureLabelMapping_EditMethod (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    @Override
    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/FeatureLabelMapping"));
    }

    @Override
    public String getText (Object object) {
        FeatureLabelMapping featureLabelMapping = (FeatureLabelMapping) object;
        return getString ("_UI_FeatureLabelMapping_type") + " " + featureLabelMapping.isReadOnly ();
    }

    @Override
    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (FeatureLabelMapping.class)) {
            case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_PATTERN :
            case GMFMapPackage.FEATURE_LABEL_MAPPING__EDITOR_PATTERN :
            case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN :
            case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD :
            case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_METHOD :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
        }
        super.notifyChanged (notification);
    }

    @Override
    protected void collectNewChildDescriptors (Collection < Object > newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
    }

    @Override
    public ResourceLocator getResourceLocator () {
        return GMFMapEditPlugin.INSTANCE;
    }

}

