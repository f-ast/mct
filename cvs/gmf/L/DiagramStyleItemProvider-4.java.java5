package org.eclipse.gmf.runtime.notation.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.provider.EObjectItemProvider;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.runtime.notation.DiagramStyle;

import org.eclipse.gmf.runtime.notation.NotationEditPlugin;

import org.eclipse.gmf.runtime.notation.NotationFactory;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class DiagramStyleItemProvider extends EObjectItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public DiagramStyleItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addPageXPropertyDescriptor (object);
            addPageYPropertyDescriptor (object);
            addPageWidthPropertyDescriptor (object);
            addPageHeightPropertyDescriptor (object);
            addDescriptionPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addPageXPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_PageStyle_pageX_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_PageStyle_pageX_feature", "_UI_PageStyle_type"), NotationPackage.Literals.PAGE_STYLE__PAGE_X, true, ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE, null, null));
    }

    protected void addPageYPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_PageStyle_pageY_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_PageStyle_pageY_feature", "_UI_PageStyle_type"), NotationPackage.Literals.PAGE_STYLE__PAGE_Y, true, ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE, null, null));
    }

    protected void addPageWidthPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_PageStyle_pageWidth_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_PageStyle_pageWidth_feature", "_UI_PageStyle_type"), NotationPackage.Literals.PAGE_STYLE__PAGE_WIDTH, true, ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE, null, null));
    }

    protected void addPageHeightPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_PageStyle_pageHeight_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_PageStyle_pageHeight_feature", "_UI_PageStyle_type"), NotationPackage.Literals.PAGE_STYLE__PAGE_HEIGHT, true, ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE, null, null));
    }

    protected void addDescriptionPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_DescriptionStyle_description_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_DescriptionStyle_description_feature", "_UI_DescriptionStyle_type"), NotationPackage.Literals.DESCRIPTION_STYLE__DESCRIPTION, true, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (NotationPackage.Literals.GUIDE_STYLE__HORIZONTAL_GUIDES);
            childrenFeatures.add (NotationPackage.Literals.GUIDE_STYLE__VERTICAL_GUIDES);
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    public Object getImage (Object object) {
        return getResourceLocator ().getImage ("full/obj16/DiagramStyle");
    }

    public String getText (Object object) {
        DiagramStyle diagramStyle = (DiagramStyle) object;
        return getString ("_UI_DiagramStyle_type") + " " + diagramStyle.getPageX ();
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (DiagramStyle.class)) {
            case NotationPackage.DIAGRAM_STYLE__PAGE_X :
            case NotationPackage.DIAGRAM_STYLE__PAGE_Y :
            case NotationPackage.DIAGRAM_STYLE__PAGE_WIDTH :
            case NotationPackage.DIAGRAM_STYLE__PAGE_HEIGHT :
            case NotationPackage.DIAGRAM_STYLE__DESCRIPTION :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
            case NotationPackage.DIAGRAM_STYLE__HORIZONTAL_GUIDES :
            case NotationPackage.DIAGRAM_STYLE__VERTICAL_GUIDES :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.GUIDE_STYLE__HORIZONTAL_GUIDES, NotationFactory.eINSTANCE.createGuide ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.GUIDE_STYLE__VERTICAL_GUIDES, NotationFactory.eINSTANCE.createGuide ()));
    }

    public String getCreateChildText (Object owner, Object feature, Object child, Collection selection) {
        Object childFeature = feature;
        Object childObject = child;
        boolean qualify = childFeature == NotationPackage.Literals.GUIDE_STYLE__HORIZONTAL_GUIDES || childFeature == NotationPackage.Literals.GUIDE_STYLE__VERTICAL_GUIDES;
        if (qualify) {
            return getString ("_UI_CreateChild_text2", new Object [] {getTypeText (childObject), getFeatureText (childFeature), getTypeText (owner)});
        }
        return super.getCreateChildText (owner, feature, child, selection);
    }

    public ResourceLocator getResourceLocator () {
        return NotationEditPlugin.INSTANCE;
    }

}

