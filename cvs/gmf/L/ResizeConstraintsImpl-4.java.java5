package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.BasicEList;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.ResizeConstraints;

public class ResizeConstraintsImpl extends EObjectImpl implements ResizeConstraints {
    protected static final int RESIZE_HANDLES_EDEFAULT = 0;
    protected int resizeHandles = RESIZE_HANDLES_EDEFAULT;
    protected static final int NON_RESIZE_HANDLES_EDEFAULT = 0;
    protected int nonResizeHandles = NON_RESIZE_HANDLES_EDEFAULT;

    protected ResizeConstraintsImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getResizeConstraints ();
    }

    public int getResizeHandles () {
        return resizeHandles;
    }

    public void setResizeHandles (int newResizeHandles) {
        int oldResizeHandles = resizeHandles;
        resizeHandles = newResizeHandles;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLES, oldResizeHandles, resizeHandles));

    }

    public int getNonResizeHandles () {
        return nonResizeHandles;
    }

    public void setNonResizeHandles (int newNonResizeHandles) {
        int oldNonResizeHandles = nonResizeHandles;
        nonResizeHandles = newNonResizeHandles;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLES, oldNonResizeHandles, nonResizeHandles));

    }

    public EList getResizeHandleNames () {
        return getPositionConstantNames (getResizeHandles ());
    }

    public EList getNonResizeHandleNames () {
        return getPositionConstantNames (getNonResizeHandles ());
    }

    private EList getPositionConstantNames (int value) {
        EList rv = new BasicEList ();
        addConstantIfFlagSet (value, PositionConstants.NORTH, "NORTH", rv);
        addConstantIfFlagSet (value, PositionConstants.SOUTH, "SOUTH", rv);
        addConstantIfFlagSet (value, PositionConstants.WEST, "WEST", rv);
        addConstantIfFlagSet (value, PositionConstants.EAST, "EAST", rv);
        return rv;
    }

    private static void addConstantIfFlagSet (int value, int flag, String constantName, EList list) {
        if ((value & flag) == flag) {
            list.add (constantName);
        }
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLES :
                return new Integer (getResizeHandles ());
            case GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLES :
                return new Integer (getNonResizeHandles ());
            case GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLE_NAMES :
                return getResizeHandleNames ();
            case GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLE_NAMES :
                return getNonResizeHandleNames ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLES :
                setResizeHandles (((Integer) newValue).intValue ());
                return;
            case GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLES :
                setNonResizeHandles (((Integer) newValue).intValue ());
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLES :
                setResizeHandles (RESIZE_HANDLES_EDEFAULT);
                return;
            case GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLES :
                setNonResizeHandles (NON_RESIZE_HANDLES_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLES :
                return resizeHandles != RESIZE_HANDLES_EDEFAULT;
            case GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLES :
                return nonResizeHandles != NON_RESIZE_HANDLES_EDEFAULT;
            case GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLE_NAMES :
                return ! getResizeHandleNames ().isEmpty ();
            case GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLE_NAMES :
                return ! getNonResizeHandleNames ().isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (resizeHandles: ");
        result.append (resizeHandles);
        result.append (", nonResizeHandles: ");
        result.append (nonResizeHandles);
        result.append (')');
        return result.toString ();
    }

}

