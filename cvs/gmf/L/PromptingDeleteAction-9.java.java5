package org.eclipse.gmf.runtime.diagram.ui.internal.actions;

import java.util.List;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.RequestConstants;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.ui.actions.DeleteAction;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;

import org.eclipse.gmf.runtime.diagram.ui.requests.GroupRequestViaKeyboard;

import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.ui.IWorkbenchPart;

public class PromptingDeleteAction extends DeleteAction {

    public PromptingDeleteAction (IWorkbenchPart part) {
        super (part);
    }

    public Command createCommand (List objects) {
        if (objects.isEmpty ()) return null;

        GroupRequestViaKeyboard deleteReq = new GroupRequestViaKeyboard (RequestConstants.REQ_DELETE);
        deleteReq.setShowInformationDialog (DiagramUIPlugin.getInstance ().getPreferenceStore ().getBoolean (IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM));
        CompoundCommand deleteCC = new CompoundCommand (DiagramUIMessages.DeleteCommand_Label);
        deleteReq.setShowInformationDialog (false);
        boolean containsSemanticElement = false;
        CompositeTransactionalCommand command = null;
        TransactionalEditingDomain editingDomain = null;
        for (int i = 0;
        i < objects.size (); i ++) {
            if (objects.get (i) instanceof EditPart) {
                EditPart editPart = (EditPart) objects.get (i);
                if (editPart instanceof IGraphicalEditPart) {
                    if (editingDomain == null) {
                        editingDomain = ((IGraphicalEditPart) editPart).getEditingDomain ();
                    }
                    if (! containsSemanticElement && ViewUtil.resolveSemanticElement ((View) editPart.getModel ()) != null) {
                        containsSemanticElement = true;
                        deleteReq.setShowInformationDialog (true);
                    }
                }
                Command command2 = editPart.getCommand (deleteReq);
                if (command2 != null && editingDomain != null) {
                    if (command == null) command = new CompositeTransactionalCommand (editingDomain, command2.getLabel ());

                    command.compose (new CommandProxy (command2));
                }
            }
        }
        if ((command != null) && (command.size () > 0)) deleteCC.add (new EtoolsProxyCommand (command));

        return deleteCC;
    }

    protected boolean calculateEnabled () {
        return true;
    }

    public void run () {
        Command command = createCommand (getSelectedObjects ());
        if (command != null) execute (command);

    }

}

