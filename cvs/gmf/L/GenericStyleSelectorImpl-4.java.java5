package org.eclipse.gmf.tooldef.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeUniqueEList;

import org.eclipse.gmf.tooldef.AppearanceStyle;

import org.eclipse.gmf.tooldef.GMFToolPackage;

import org.eclipse.gmf.tooldef.GenericStyleSelector;

public class GenericStyleSelectorImpl extends EObjectImpl implements GenericStyleSelector {
    protected EList < AppearanceStyle > values = null;

    protected GenericStyleSelectorImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFToolPackage.eINSTANCE.getGenericStyleSelector ();
    }

    public EList < AppearanceStyle > getValues () {
        if (values == null) {
            values = new EDataTypeUniqueEList < AppearanceStyle > (AppearanceStyle.class, this, GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUES);
        }
        return values;
    }

    public boolean isOk (Object style) {
        if (false == style instanceof EObject) {
            return false;
        }
        final String styleName = ((EObject) style).eClass ().getName ();
        for (AppearanceStyle s : getValues ()) {
            if (styleName.equals (s.getName () + "Style")) {
                return true;
            }
        }
        return false;
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUES :
                return getValues ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUES :
                getValues ().clear ();
                getValues ().addAll ((Collection < ? extends AppearanceStyle >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUES :
                getValues ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUES :
                return values != null && ! values.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (values: ");
        result.append (values);
        result.append (')');
        return result.toString ();
    }

}

