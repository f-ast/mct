package org.eclipse.gmf.runtime.diagram.ui.internal.services.decorator;

import org.eclipse.draw2d.AncestorListener;

import org.eclipse.draw2d.Figure;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.Locator;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure;

import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoration;

public class Decoration extends Figure implements AncestorListener, IDecoration {
    private Locator locator;
    private IFigure owner;

    public boolean isVisible () {
        Rectangle decorationBounds = getBounds ().getCopy ();
        translateToAbsolute (decorationBounds);
        IFigure parentFigure = getOwnerFigure ();
        while (parentFigure != null) {
            if (! parentFigure.isVisible ()) {
                return false;
            }
            if (parentFigure instanceof ResizableCompartmentFigure) {
                Rectangle parentClientArea = parentFigure.getClientArea ().getCopy ();
                parentFigure.translateToAbsolute (parentClientArea);
                if (! (parentClientArea.contains (decorationBounds))) {
                    return false;
                }
            }
            parentFigure = parentFigure.getParent ();
        }
        return super.isVisible ();
    }

    public void validate () {
        if (getLocator () != null) {
            getLocator ().relocate (this);
        }
        super.validate ();
    }

    public Locator getLocator () {
        return locator;
    }

    public void setLocator (Locator locator) {
        this.locator = locator;
    }

    public IFigure getOwnerFigure () {
        return owner;
    }

    public void setOwnerFigure (IFigure figure) {
        owner = figure;
    }

    public void addNotify () {
        super.addNotify ();
        getOwnerFigure ().addAncestorListener (this);
    }

    public void removeNotify () {
        getOwnerFigure ().removeAncestorListener (this);
        super.removeNotify ();
    }

    public void ancestorMoved (IFigure ancestor) {
        revalidate ();
    }

    public void ancestorAdded (IFigure ancestor) {
    }

    public void ancestorRemoved (IFigure ancestor) {
    }

}

