package org.eclipse.gmf.runtime.diagram.core.commands;

import java.util.List;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.ecore.ENamedElement;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.diagram.core.internal.l10n.DiagramCoreMessages;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;

import org.eclipse.gmf.runtime.emf.core.util.PackageUtil;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.osgi.util.NLS;

public class SetPropertyCommand extends AbstractTransactionalCommand {
    static final private String CHANGE_PROPERTY_PATTERN = DiagramCoreMessages.Command_ChangeViewProperty_ChangePropertyPattern;
    private IAdaptable viewAdapter;
    private String propertyName;
    private String propertyId;
    private Object newValue;

    public SetPropertyCommand (TransactionalEditingDomain editingDomain, String label, IAdaptable viewAdapter, String propertyId, Object newValue) {
        super (editingDomain, label, null);
        this.viewAdapter = viewAdapter;
        this.propertyId = propertyId;
        this.newValue = newValue;
    }

    public SetPropertyCommand (TransactionalEditingDomain editingDomain, IAdaptable viewAdapter, String propertyId, String propertyName, Object newValue) {
        this (editingDomain, null, viewAdapter, propertyId, newValue);
        this.propertyName = propertyName;
    }

    public List getAffectedFiles () {
        if (viewAdapter != null) {
            View view = (View) viewAdapter.getAdapter (View.class);
            if (view != null) return getWorkspaceFiles (view);

        }
        return super.getAffectedFiles ();
    }

    public String getLabel () {
        String label = super.getLabel ();
        return (label != null) ? label : (NLS.bind (CHANGE_PROPERTY_PATTERN, propertyName));
    }

    protected CommandResult doExecuteWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException {
        View view = (View) viewAdapter.getAdapter (View.class);
        if (view != null) {
            ENamedElement namedElement = PackageUtil.getElement (propertyId);
            if (namedElement instanceof EStructuralFeature) ViewUtil.setStructuralFeatureValue (view, (EStructuralFeature) namedElement, newValue);

        }
        return CommandResult.newOKCommandResult ();
    }

    protected Object getNewValue () {
        return newValue;
    }

    protected Object getPropertyId () {
        return propertyId;
    }

    protected IAdaptable getViewAdapter () {
        return viewAdapter;
    }

    protected String getPropertyName () {
        return propertyName;
    }

    protected void setNewValue (Object newValue) {
        this.newValue = newValue;
    }

    protected void setPropertyId (String propertyId) {
        this.propertyId = propertyId;
    }

    protected void setViewAdapter (IAdaptable viewAdapter) {
        this.viewAdapter = viewAdapter;
    }

    protected void setPropertyName (String string) {
        propertyName = string;
    }

    protected EStructuralFeature getPropertyStructuralFeature () {
        if (getPropertyId () instanceof String) {
            ENamedElement namedElement = PackageUtil.getElement ((String) getPropertyId ());
            if (namedElement instanceof EStructuralFeature) {
                return (EStructuralFeature) namedElement;
            }
        }
        return null;
    }

}

