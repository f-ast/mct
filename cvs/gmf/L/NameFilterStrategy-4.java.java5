package org.eclipse.gmf.internal.bridge.wizards.strategy;

import java.util.Collection;

import java.util.Iterator;

import java.util.regex.Pattern;

import java.util.regex.PatternSyntaxException;

import org.eclipse.emf.ecore.ENamedElement;

import org.eclipse.emf.ecore.EObject;

public class NameFilterStrategy implements Strategy {
    private final Pattern [] myPatterns;

    public NameFilterStrategy (String [] namePatterns) {
        assert namePatterns != null && namePatterns.length > 1;
        myPatterns = new Pattern [namePatterns.length];
        try {
            for (int i = 0;
            i < namePatterns.length; i ++) {
                myPatterns [i] = Pattern.compile (namePatterns [i]);
            }
        } catch (PatternSyntaxException ex) {
            throw new IllegalArgumentException (ex.getMessage ());
        }
    }

    public String getID () {
        return "nameFilter";
    }

    public void filter (Collection < EObject > soFar, Hierarchy hierarchy) {
        for (Iterator < EObject > it = soFar.iterator ();
        it.hasNext ();) {
            ENamedElement next = (ENamedElement) it.next ();
            if (! match (next.getName ())) {
                it.remove ();
            }
        }
    }

    protected boolean match (String name) {
        if (name == null) for (int i = 0;
        i < myPatterns.length; i ++) {
            if (myPatterns [i].matcher (name).matches ()) {
                return true;
            }
        }

        return false;
    }

}

