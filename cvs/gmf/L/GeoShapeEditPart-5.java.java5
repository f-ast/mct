package org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.editparts;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.gef.AccessibleEditPart;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPolicy;

import org.eclipse.swt.accessibility.AccessibleEvent;

import org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.OpenDiagramEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ViewComponentEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.providers.GeoshapeConstants;

import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.DiagramLinkDragDropEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.NonSemanticEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;

import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;

import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.jface.preference.PreferenceConverter;

public abstract class GeoShapeEditPart extends ShapeNodeEditPart {

    public GeoShapeEditPart (View view) {
        super (view);
    }

    protected abstract NodeFigure createNodeFigure ();

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        removeEditPolicy (EditPolicyRoles.SEMANTIC_ROLE);
        installEditPolicy (EditPolicyRoles.SEMANTIC_ROLE, new NonSemanticEditPolicy ());
        installEditPolicy (EditPolicyRoles.DRAG_DROP_ROLE, new DiagramLinkDragDropEditPolicy ());
        installEditPolicy (EditPolicyRoles.OPEN_ROLE, new OpenDiagramEditPolicy ());
        installEditPolicy (EditPolicy.COMPONENT_ROLE, new ViewComponentEditPolicy ());
    }

    protected AccessibleEditPart getAccessibleEditPart () {
        if (accessibleEP == null) accessibleEP = new AccessibleGraphicalEditPart () {

            public void getName (AccessibleEvent e) {
                View view = (View) getModel ();
                e.result = GeoshapeConstants.getShapeLocalizedType (view.getType ());
            }

        }

        ;

        return accessibleEP;
    }

    public EditPart getPrimaryChildEditPart () {
        return getChildBySemanticHint (CommonParserHint.DESCRIPTION);
    }

    public Object getPreferredValue (EStructuralFeature feature) {
        Object preferenceStore = getDiagramPreferencesHint ().getPreferenceStore ();
        if (preferenceStore instanceof IPreferenceStore) {
            if (feature == NotationPackage.eINSTANCE.getLineStyle_LineColor ()) {
                return FigureUtilities.RGBToInteger (PreferenceConverter.getColor ((IPreferenceStore) preferenceStore, IPreferenceConstants.PREF_NOTE_LINE_COLOR));
            } else if (feature == NotationPackage.eINSTANCE.getFillStyle_FillColor ()) {
                return FigureUtilities.RGBToInteger (PreferenceConverter.getColor ((IPreferenceStore) preferenceStore, IPreferenceConstants.PREF_NOTE_FILL_COLOR));
            }

        }
        return super.getPreferredValue (feature);
    }

}

