package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import org.eclipse.draw2d.ConnectionAnchor;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.requests.CreateConnectionRequest;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.INodeEditPart;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.notation.Routing;

import org.eclipse.gmf.runtime.notation.View;

public class TreeGraphicalNodeEditPolicy extends GraphicalNodeEditPolicy {

    private boolean isTreeConnection (Request request) {
        IGraphicalEditPart editPart = (IGraphicalEditPart) getHost ();
        View view = editPart.getNotationView ();
        String modelHint = ViewUtil.getSemanticElementClassId (view);
        String hint = getSemanticHint (request);
        if (modelHint.equals (hint)) {
            return true;
        }
        return false;
    }

    protected INodeEditPart getConnectionCompleteEditPart (Request request) {
        if (isTreeConnection (request)) {
            return (INodeEditPart) ((ConnectionEditPart) getHost ()).getTarget ();
        }
        return super.getConnectionCompleteEditPart (request);
    }

    protected ConnectionAnchor getConnectionTargetAnchor (Request request) {
        if (isTreeConnection (request)) {
            INodeEditPart nep = getConnectionCompleteEditPart (request);
            return nep.getTargetConnectionAnchor ((ConnectionEditPart) getHost ());
        }
        return super.getConnectionTargetAnchor (request);
    }

    protected Command getConnectionCompleteCommand (CreateConnectionRequest request) {
        Command cmd = super.getConnectionCompleteCommand (request);
        Command cmdRouter = getRoutingAdjustment (getViewAdapter (), getSemanticHint (request), Routing.TREE_LITERAL, request.getTargetEditPart ());
        if (cmdRouter != null) {
            cmd = cmd == null ? cmdRouter : cmd.chain (cmdRouter);
        }
        return cmd;
    }

}

