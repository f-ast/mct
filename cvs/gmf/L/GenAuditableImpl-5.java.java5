package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.LinkedList;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.codegen.ecore.genmodel.GenClassifier;

import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenAuditable;

public abstract class GenAuditableImpl extends EObjectImpl implements GenAuditable {

    protected GenAuditableImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenAuditable ();
    }

    public abstract GenClassifier getContext ();

    public GenClass getTargetClass () {
        if (getContext () instanceof GenClass) {
            return (GenClass) getContext ();
        }
        return null;
    }

    public String getClientContextID () {
        return "DefaultCtx";
    }

    public String getTargetClassModelQualifiedName () {
        if (getTargetClass () == null || getTargetClass ().getGenPackage () == null) {
            return null;
        }
        LinkedList < String > packageNames = new LinkedList < String > ();
        for (GenPackage genPackage = getTargetClass ().getGenPackage ();
        genPackage != null;) {
            packageNames.addFirst (genPackage.getPackageName ());
            genPackage = genPackage.getSuperGenPackage ();
        }
        StringBuilder buf = new StringBuilder (getTargetClass ().getQualifiedInterfaceName ().length ());
        for (String next : packageNames) {
            buf.append (next).append ('.');
        }
        return buf.append (getTargetClass ().getName ()).toString ();
    }

}

