package org.eclipse.gmf.runtime.emf.clipboard.core;

import java.util.Collections;

import java.util.HashMap;

import java.util.HashSet;

import java.util.Map;

import java.util.Set;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.runtime.emf.clipboard.core.internal.MergedEObjectInfo;

import org.eclipse.gmf.runtime.emf.clipboard.core.internal.ResourceInfo;

public abstract class BasePasteOperation extends ClipboardOperation {
    public static final String PASTE = "paste";
    private Map loadOptionsMap;
    private ResourceInfo resourceInfo;
    private BasePasteOperation spawningPasteOperation;
    private Map mergedElementsMap;
    private Map unmodifiableMergedElementsMap;
    private Set pastedElementSet;
    private Set unmodifiablePastedElementSet;
    private Set criticalResolveFailuresSet;
    private Set unmodifiableCriticalResolveFailuresSet;
    private Set pasteFailuresObjectSet;
    private Set unmodifiablePasteFailuresObjectSet;

    public BasePasteOperation (IProgressMonitor monitor, Map loadOptionsMap, ResourceInfo resourceInfo, IClipboardSupport clipboardSupport) {
        super (monitor, clipboardSupport);
        this.loadOptionsMap = loadOptionsMap;
        this.resourceInfo = resourceInfo;
        mergedElementsMap = new HashMap ();
        pastedElementSet = new HashSet ();
        pasteFailuresObjectSet = new HashSet ();
        criticalResolveFailuresSet = new HashSet ();
    }

    public BasePasteOperation (BasePasteOperation spawningPasteOperation) {
        this (spawningPasteOperation.getProgressMonitor (), spawningPasteOperation.getLoadOptionsMap (), spawningPasteOperation.getResourceInfo (), spawningPasteOperation.getClipboardOperationHelper ());
        this.spawningPasteOperation = spawningPasteOperation;
    }

    protected final ResourceInfo getResourceInfo () {
        return resourceInfo;
    }

    protected final Map getLoadOptionsMap () {
        return loadOptionsMap;
    }

    public abstract void paste () throws Exception;

    public BasePasteOperation getSpawningPasteOperation () {
        return spawningPasteOperation;
    }

    public final Set getAllCriticalResolveFailuresSet () {
        if (getSpawningPasteOperation () != null) {
            return getSpawningPasteOperation ().getAllCriticalResolveFailuresSet ();
        } else {
            return getCriticalResolveFailuresSet ();
        }
    }

    public final Map getAllMergedElementsMap () {
        if (getSpawningPasteOperation () != null) {
            return getSpawningPasteOperation ().getAllMergedElementsMap ();
        } else {
            return getMergedElementsMap ();
        }
    }

    public final Set getAllPastedElementSet () {
        if (getSpawningPasteOperation () != null) {
            return getSpawningPasteOperation ().getAllPastedElementSet ();
        } else {
            return getPastedElementSet ();
        }
    }

    public final Set getCriticalResolveFailuresSet () {
        if (unmodifiableCriticalResolveFailuresSet == null) {
            unmodifiableCriticalResolveFailuresSet = Collections.unmodifiableSet (criticalResolveFailuresSet);
        }
        return unmodifiableCriticalResolveFailuresSet;
    }

    protected void addCriticalResolveFailure (EObject nonResolvedObject) {
        criticalResolveFailuresSet.add (nonResolvedObject);
        if (getSpawningPasteOperation () != null) {
            getSpawningPasteOperation ().addCriticalResolveFailure (nonResolvedObject);
        }
    }

    protected void removeCriticalResolveFailure (EObject newlyResolvedObject) {
        if (criticalResolveFailuresSet.remove (newlyResolvedObject) && getSpawningPasteOperation () != null) {
            getSpawningPasteOperation ().removeCriticalResolveFailure (newlyResolvedObject);
        }
    }

    public final Map getMergedElementsMap () {
        if (unmodifiableMergedElementsMap == null) {
            unmodifiableMergedElementsMap = Collections.unmodifiableMap (mergedElementsMap);
        }
        return unmodifiableMergedElementsMap;
    }

    protected void addMergedElementEntry (EObject mergedObject, MergedEObjectInfo mergedEObjectInfo) {
        mergedElementsMap.put (mergedObject, mergedEObjectInfo);
        if (getSpawningPasteOperation () != null) {
            getSpawningPasteOperation ().addMergedElementEntry (mergedObject, mergedEObjectInfo);
        }
    }

    public final Set getPastedElementSet () {
        if (unmodifiablePastedElementSet == null) {
            unmodifiablePastedElementSet = Collections.unmodifiableSet (pastedElementSet);
        }
        return unmodifiablePastedElementSet;
    }

    protected void addPastedElement (EObject pastedElement) {
        pastedElementSet.add (pastedElement);
        if (getSpawningPasteOperation () != null) {
            getSpawningPasteOperation ().addPastedElement (pastedElement);
        }
    }

    public final Set getPasteFailuresObjectSet () {
        if (unmodifiablePasteFailuresObjectSet == null) {
            unmodifiablePasteFailuresObjectSet = Collections.unmodifiableSet (pasteFailuresObjectSet);
        }
        return unmodifiablePasteFailuresObjectSet;
    }

    protected void addPasteFailuresObject (EObject eObject) {
        pasteFailuresObjectSet.add (eObject);
        if (getSpawningPasteOperation () != null) {
            getSpawningPasteOperation ().addPasteFailuresObject (eObject);
        }
    }

    public final Set getAllPasteFailuresObjectSet () {
        if (getSpawningPasteOperation () != null) {
            return getSpawningPasteOperation ().getAllPasteFailuresObjectSet ();
        } else {
            return getPasteFailuresObjectSet ();
        }
    }

    protected void throwCancelException () {
        throwCancelException (PASTE);
    }

}

