package org.eclipse.gmf.runtime.diagram.ui.internal.actions;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.runtime.Assert;

import org.eclipse.emf.ecore.ENamedElement;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.transaction.RunnableWithResult;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Request;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction;

import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.requests.ChangePropertyValueRequest;

import org.eclipse.gmf.runtime.emf.core.util.PackageUtil;

import org.eclipse.ui.IWorkbenchPage;

public abstract class PropertyChangeAction extends DiagramAction {
    private String propertyId = null;
    private String propertyName = null;

    public PropertyChangeAction (IWorkbenchPage workbenchPage, String propertyId, String propertyName) {
        super (workbenchPage);
        Assert.isNotNull (propertyId);
        Assert.isNotNull (propertyName);
        setPropertyId (propertyId);
        setPropertyName (propertyName);
    }

    protected String getPropertyId () {
        return propertyId;
    }

    protected void setPropertyId (String propertyId) {
        this.propertyId = propertyId;
    }

    protected String getPropertyName () {
        return propertyName;
    }

    protected void setPropertyName (String string) {
        propertyName = string;
    }

    protected Request createTargetRequest () {
        return new ChangePropertyValueRequest (getPropertyName (), getPropertyId ());
    }

    protected void updateTargetRequest () {
        ChangePropertyValueRequest request = (ChangePropertyValueRequest) getTargetRequest ();
        request.setValue (getNewPropertyValue ());
    }

    protected Object getOperationSetPropertyValue (String id) {
        List set = getOperationSet ();
        if (! set.isEmpty ()) {
            IGraphicalEditPart primaryEditPart = (IGraphicalEditPart) set.get (set.size () - 1);
            return getPropertyValue (primaryEditPart, id);
        }
        return null;
    }

    protected Object getPropertyValue (final IGraphicalEditPart editPart, final String thePropertyId) {
        try {
            return editPart.getEditingDomain ().runExclusive (new RunnableWithResult.Impl () {

                public void run () {
                    setResult (getStructuralFeatureValue (editPart, thePropertyId));
                }

            }

            );
        } catch (InterruptedException e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getPropertyValue", e);
            Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "getPropertyValue", e);
        }
        return null;
    }

    protected abstract Object getNewPropertyValue ();

    protected boolean isSelectionListener () {
        return true;
    }

    protected boolean digIntoGroups () {
        return false;
    }

    private Object getStructuralFeatureValue (IGraphicalEditPart editpart, final String thePropertyId) {
        ENamedElement element = PackageUtil.getElement (thePropertyId);
        if (element instanceof EStructuralFeature) {
            if (digIntoGroups () && editpart instanceof GroupEditPart) {
                editpart = (IGraphicalEditPart) editpart.getChildren ().get (0);
            }
            return editpart.getStructuralFeatureValue ((EStructuralFeature) element);
        }
        return null;
    }

    protected List getTargetEditParts (EditPart editpart) {
        if (digIntoGroups () && editpart instanceof GroupEditPart) {
            List targetEPs = new ArrayList ();
            for (Iterator iterator = ((GroupEditPart) editpart).getShapeChildren ().iterator ();
            iterator.hasNext ();) {
                EditPart childEP = (EditPart) iterator.next ();
                targetEPs.addAll (super.getTargetEditParts (childEP));
            }
            return targetEPs;
        }
        return super.getTargetEditParts (editpart);
    }

}

