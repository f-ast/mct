package org.eclipse.gmf.codegen.gmfgen.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IChildCreationExtender;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.ValueExpression;

public class ValueExpressionItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public ValueExpressionItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    @Override
    public List < IItemPropertyDescriptor > getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addBodyPropertyDescriptor (object);
            addLanguagePropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addBodyPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_ValueExpression_body_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_ValueExpression_body_feature", "_UI_ValueExpression_type"), GMFGenPackage.eINSTANCE.getValueExpression_Body (), true, true, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addLanguagePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_ValueExpression_language_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_ValueExpression_language_feature", "_UI_ValueExpression_type"), GMFGenPackage.eINSTANCE.getValueExpression_Language (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    @Override
    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/ValueExpression"));
    }

    @Override
    public String getText (Object object) {
        String label = crop (((ValueExpression) object).getBody ());
        return label == null || label.length () == 0 ? getString ("_UI_ValueExpression_type") : getString ("_UI_ValueExpression_type") + " " + label;
    }

    @Override
    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (ValueExpression.class)) {
            case GMFGenPackage.VALUE_EXPRESSION__BODY :
            case GMFGenPackage.VALUE_EXPRESSION__LANGUAGE :
            case GMFGenPackage.VALUE_EXPRESSION__LANG_NAME :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
        }
        super.notifyChanged (notification);
    }

    @Override
    protected void collectNewChildDescriptors (Collection < Object > newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
    }

    @Override
    public ResourceLocator getResourceLocator () {
        return ((IChildCreationExtender) adapterFactory).getResourceLocator ();
    }

}

