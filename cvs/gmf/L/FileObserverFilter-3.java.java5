package org.eclipse.gmf.runtime.common.ui.internal.resources;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IFolder;

import org.eclipse.core.resources.IResource;

import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.IPath;

public class FileObserverFilter {
    private FileObserverFilterType filterType;
    private Object filter;

    public FileObserverFilter (FileObserverFilterType aFilterType) {
        assert (aFilterType == FileObserverFilterType.ALL);
        setFilterType (aFilterType);
        setFilter (null);
    }

    public FileObserverFilter (FileObserverFilterType aFilterType, String [] extension) {
        assert (aFilterType == FileObserverFilterType.EXTENSION);
        setFilterType (aFilterType);
        setFilter (extension);
    }

    public FileObserverFilter (FileObserverFilterType aFilterType, IFolder folder) {
        assert (aFilterType == FileObserverFilterType.FOLDER);
        setFilterType (aFilterType);
        setFilter (folder);
    }

    public FileObserverFilter (FileObserverFilterType aFilterType, IFile file) {
        assert (aFilterType == FileObserverFilterType.FILE);
        setFilterType (aFilterType);
        setFilter (file);
    }

    public boolean matches (IResource resource) {
        if (getFilterType () == FileObserverFilterType.ALL) {
            return true;
        }
        if (getFilterType () == FileObserverFilterType.FILE && resource instanceof IFile && getAbsolutePath (getFileFilter ()).equals (getAbsolutePath (resource))) {
            return true;
        }
        if (getFilterType () == FileObserverFilterType.FOLDER && resource instanceof IFile && getAbsolutePath (resource).startsWith (getAbsolutePath (getFolderFilter ()))) {
            return true;
        }
        if (getFilterType () == FileObserverFilterType.EXTENSION && resource instanceof IFile) {
            String FileExtension = resource.getFullPath ().getFileExtension ();
            if (matchesExtension (FileExtension)) {
                return true;
            }
        }
        return false;
    }

    public boolean matches (IPath path) {
        if (getFilterType () == FileObserverFilterType.ALL) {
            return true;
        }
        if (getFilterType () == FileObserverFilterType.FILE && getAbsolutePath (getFileFilter ()).equals (path.toOSString ())) {
            return true;
        }
        if (getFilterType () == FileObserverFilterType.FOLDER && getAbsolutePath (getFolderFilter ()).startsWith (path.toOSString ())) {
            return true;
        }
        if (getFilterType () == FileObserverFilterType.EXTENSION && matchesExtension (path.getFileExtension ())) {
            return true;
        }
        return false;
    }

    private boolean matchesExtension (String extension) {
        String [] extensions = getExtensionFilter ();
        for (int i = 0;
        i < extensions.length; i ++) {
            if (extensions [i].equals (extension)) {
                return true;
            }
        }
        return false;
    }

    private IFile getFileFilter () {
        assert (filterType == FileObserverFilterType.FILE);
        return (IFile) filter;
    }

    private IFolder getFolderFilter () {
        assert (filterType == FileObserverFilterType.FOLDER);
        return (IFolder) filter;
    }

    private String [] getExtensionFilter () {
        assert (filterType == FileObserverFilterType.EXTENSION);
        return (String []) filter;
    }

    private FileObserverFilterType getFilterType () {
        return filterType;
    }

    private void setFilter (Object object) {
        filter = object;
    }

    private void setFilterType (FileObserverFilterType type) {
        filterType = type;
    }

    private String getAbsolutePath (IResource resource) {
        if (resource.getLocation () == null) {
            IPath root = ResourcesPlugin.getWorkspace ().getRoot ().getLocation ();
            IPath path = root.append (resource.getFullPath ());
            return path.toOSString ();
        } else {
            return resource.getLocation ().toOSString ();
        }
    }

}

