package org.eclipse.gmf.runtime.draw2d.ui.figures;

import java.util.List;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.PointList;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.RGB;

import org.eclipse.gmf.runtime.draw2d.ui.geometry.LineSeg;

import org.eclipse.gmf.runtime.draw2d.ui.geometry.PointListUtilities;

public class FigureUtilities extends org.eclipse.draw2d.FigureUtilities {

    public static Integer colorToInteger (Color c) {
        return new Integer ((c.getBlue () << 16) | (c.getGreen () << 8) | c.getRed ());
    }

    public static Color integerToColor (Integer i) {
        if (i == null) return null;

        int color = i.intValue ();
        return new Color (null, (color & 0x000000FF), (color & 0x0000FF00)>> 8, (color & 0x00FF0000)>> 16);
    }

    public static Integer RGBToInteger (RGB rgb) {
        return new Integer ((rgb.blue << 16) | (rgb.green << 8) | rgb.red);
    }

    public static RGB integerToRGB (Integer color) {
        int n = color.intValue ();
        return new RGB ((n & 0x000000FF), (n & 0x0000FF00)>> 8, (n & 0x00FF0000)>> 16);
    }

    public static Point getLocation (int pos, final Rectangle topos, final Rectangle constraint) {
        Rectangle b = constraint.getCopy ();
        Point svb = new Point (b.x, b.y);
        switch (pos) {
            case PositionConstants.NORTH :
                svb.x += b.width / 2;
                break;
            case PositionConstants.SOUTH :
                svb.x += b.width / 2;
                svb.y += b.height;
                break;
            case PositionConstants.WEST :
                svb.y += b.height / 2 - topos.height / 2;
                break;
            case PositionConstants.EAST :
                svb.x += b.width;
                svb.y += b.height / 2 - topos.height / 2;
                break;
            case PositionConstants.NORTH_EAST :
                svb.x += b.width - topos.width;
                break;
            case PositionConstants.SOUTH_EAST :
                svb.x += b.width - topos.width;
                svb.y += b.height - topos.height;
                break;
            case PositionConstants.SOUTH_WEST :
                svb.x += b.width;
                svb.y += topos.height;
                break;
            case PositionConstants.NORTH_SOUTH :
            case PositionConstants.EAST_WEST :
                svb.x += b.width / 2 - topos.width / 2;
                svb.y += b.height / 2 - topos.height / 2;
                break;
            case PositionConstants.NORTH_WEST :
            default :
                break;
        }
        return svb;
    }

    public static Point getLocation (int pos, final Dimension dim, final Rectangle constraint) {
        return getLocation (pos, new Rectangle (0, 0, dim.width, dim.height), constraint);
    }

    public static List getLineSegments (PointList points) {
        return PointListUtilities.getLineSegments (points);
    }

    public static LineSeg getNearestSegment (List mySegments, final int xCoord, final int yCoord) {
        return PointListUtilities.getNearestSegment (mySegments, xCoord, yCoord);
    }

    static public int findNearestLineSegIndexOfPoint (PointList points, final Point ptCoord) {
        return PointListUtilities.findNearestLineSegIndexOfPoint (points, ptCoord);
    }

}

