package org.eclipse.gmf.runtime.diagram.ui.commands;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Status;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.ui.IEditorPart;

import org.eclipse.gmf.runtime.common.core.command.AbstractCommand;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.services.editor.EditorService;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.ui.DiagramUIDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.DiagramUIStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditorInput;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.notation.Diagram;

public class OpenDiagramCommand extends AbstractCommand {
    private EObject _element = null;

    public OpenDiagramCommand (String label, EObject element) {
        super (label);
        setElement (element);
    }

    protected EObject getElement () {
        return _element;
    }

    protected void setElement (EObject element) {
        _element = element;
    }

    public OpenDiagramCommand (EObject element) {
        this (PresentationResourceManager.getI18NString ("Command.openDiagram"), element);
    }

    public boolean isExecutable () {
        return getElement () instanceof Diagram;
    }

    protected CommandResult doExecute (IProgressMonitor progressMonitor) {
        try {
            MEditingDomainGetter.getMEditingDomain (getElement ()).runAsRead (new MRunnable () {

                public Object run () {
                    Diagram diagram = null;
                    if (getElement () instanceof Diagram) {
                        diagram = (Diagram) getElement ();
                    }
                    if (diagram != null) {
                        IDiagramEditorInput diagramInput = new DiagramEditorInput (diagram);
                        IEditorPart editor = null;
                        editor = EditorService.getInstance ().openEditor (diagramInput);
                        if (editor == null) {
                            throw new UnsupportedOperationException ();
                        }
                    }
                    return null;
                }

            }

            );
        } catch (Exception e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "doExecute()", e);
            return new CommandResult (new Status (IStatus.ERROR, getPluginId (), DiagramUIStatusCodes.COMMAND_FAILURE, e.getMessage (), e));
        }
        return newOKCommandResult ();
    }

    public boolean isUndoable () {
        return false;
    }

    public boolean isRedoable () {
        return false;
    }

}

