package org.eclipse.gmf.internal.runtime.lite;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Status;

import org.eclipse.jface.resource.ImageDescriptor;

import org.eclipse.jface.resource.ImageRegistry;

import org.eclipse.ui.plugin.AbstractUIPlugin;

import org.osgi.framework.BundleContext;

public class Activator extends AbstractUIPlugin {
    public static final String PLUGIN_ID = "org.eclipse.gmf.runtime.lite";
    private static Activator plugin;

    public Activator () {
        plugin = this;
    }

    public void start (BundleContext context) throws Exception {
        super.start (context);
    }

    public void stop (BundleContext context) throws Exception {
        plugin = null;
        super.stop (context);
    }

    public static Activator getDefault () {
        return plugin;
    }

    public void logError (String error) {
        logError (error, null);
    }

    @Override
    protected void initializeImageRegistry (ImageRegistry reg) {
        PluginImages.initialize ();
        super.initializeImageRegistry (reg);
    }

    public void logError (String error, Throwable throwable) {
        log (error, throwable, IStatus.ERROR);
    }

    private void debug (String message, Throwable throwable) {
        if (! isDebugging ()) {
            return;
        }
        if (message != null) {
            System.err.println (message);
        }
        if (throwable != null) {
            throwable.printStackTrace ();
        }
    }

    public void logWarning (String error) {
        logWarning (error, null);
    }

    public void logWarning (String error, Throwable throwable) {
        log (error, throwable, IStatus.WARNING);
    }

    private void log (String error, Throwable throwable, int severity) {
        if (error == null && throwable != null) {
            error = throwable.getMessage ();
        }
        getLog ().log (new Status (severity, getBundle ().getSymbolicName (), IStatus.OK, error, throwable));
        debug (error, throwable);
    }

    public static ImageDescriptor getImageDescriptor (String imageFilePath) {
        return imageDescriptorFromPlugin (getDefault ().getBundle ().getSymbolicName (), imageFilePath);
    }

}

