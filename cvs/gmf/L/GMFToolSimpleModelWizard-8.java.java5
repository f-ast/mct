package org.eclipse.gmf.internal.bridge.wizards;

import org.eclipse.core.resources.IFile;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.internal.bridge.resolver.StructureBuilder;

import org.eclipse.gmf.internal.bridge.resolver.StructureResolver;

import org.eclipse.gmf.internal.bridge.wizards.pages.DefinitionPage;

import org.eclipse.gmf.internal.bridge.wizards.pages.DomainModelSelectionPage;

import org.eclipse.gmf.internal.bridge.wizards.pages.ToolDefBuilder;

import org.eclipse.gmf.internal.common.ui.ResourceLocationProvider;

import org.eclipse.gmf.tooldef.presentation.GMFToolModelWizard;

public class GMFToolSimpleModelWizard extends GMFToolModelWizard {
    protected DefinitionPage toolDefinitionPage;

    protected EObject createInitialModel () {
        ToolDefBuilder builder = new ToolDefBuilder ();
        return builder.process (toolDefinitionPage.getModel ());
    }

    public void addPages () {
        super.addPages ();
        if (selection != null && ! selection.isEmpty ()) {
            Object selected = selection.getFirstElement ();
            if (selected instanceof IFile) {
                newFileCreationPage.setFileName (WizardUtil.getDefaultFileName ((IFile) selected, "gmftool"));
            }
        }
        ResourceLocationProvider rloc = new ResourceLocationProvider (selection);
        DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage ("DomainModelSelectionPage", rloc);
        domainModelSelectionPage.setTitle ("Domain Model");
        domainModelSelectionPage.setDescription ("Select file with ecore domain model");
        addPage (domainModelSelectionPage);
        toolDefinitionPage = new DefinitionPage ("ToolDefinitionPage", new StructureBuilder (new StructureResolver (), false), domainModelSelectionPage);
        toolDefinitionPage.setTitle ("Tooling Definition");
        toolDefinitionPage.setDescription ("Specify basic tooling definition of the domain model");
        addPage (toolDefinitionPage);
    }

}

