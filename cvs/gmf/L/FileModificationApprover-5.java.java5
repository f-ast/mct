package org.eclipse.gmf.runtime.common.core.internal.command;

import java.io.File;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.commands.operations.IOperationApprover2;

import org.eclipse.core.commands.operations.IOperationHistory;

import org.eclipse.core.commands.operations.IUndoableOperation;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IPath;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Status;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

public class FileModificationApprover implements IOperationApprover2 {

    public IStatus proceedExecuting (IUndoableOperation operation, IOperationHistory history, IAdaptable info) {
        if (operation instanceof ICommand) {
            return approveFileModification ((ICommand) operation);
        }
        return Status.OK_STATUS;
    }

    public IStatus proceedRedoing (IUndoableOperation operation, IOperationHistory history, IAdaptable info) {
        if (operation instanceof ICommand) {
            return approveFileModification ((ICommand) operation);
        }
        return Status.OK_STATUS;
    }

    public IStatus proceedUndoing (IUndoableOperation operation, IOperationHistory history, IAdaptable info) {
        if (operation instanceof ICommand) {
            return approveFileModification ((ICommand) operation);
        }
        return Status.OK_STATUS;
    }

    private IStatus approveFileModification (ICommand fileModifier) {
        List files = new ArrayList ();
        for (Iterator i = fileModifier.getAffectedFiles ().iterator ();
        i.hasNext ();) {
            IFile nextFile = (IFile) i.next ();
            if (nextFile == null) continue;

            if (nextFile.exists ()) {
                files.add (nextFile);
            } else {
                IPath path = nextFile.getRawLocation ();
                if (path == null) {
                    setCommandResult (fileModifier, Status.CANCEL_STATUS);
                    return Status.CANCEL_STATUS;
                }
                File file = path.toFile ();
                if (file != null && file.exists () && ! file.canWrite ()) {
                    setCommandResult (fileModifier, Status.CANCEL_STATUS);
                    return Status.CANCEL_STATUS;
                }
            }
        }
        IStatus status = FileModificationValidator.approveFileModification ((IFile []) files.toArray (new IFile [] {}));
        if (! status.isOK ()) {
            setCommandResult (fileModifier, status);
        }
        return status;
    }

    private void setCommandResult (ICommand command, IStatus status) {
        if (command instanceof ICommandWithSettableResult) {
            ((ICommandWithSettableResult) command).internalSetResult (new CommandResult (status));
        }
    }

}

