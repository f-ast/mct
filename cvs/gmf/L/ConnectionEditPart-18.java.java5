package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.beans.PropertyChangeEvent;

import java.beans.PropertyChangeListener;

import java.util.ArrayList;

import java.util.Dictionary;

import java.util.HashMap;

import java.util.Hashtable;

import java.util.Iterator;

import java.util.List;

import java.util.ListIterator;

import java.util.Map;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IAdapterFactory;

import org.eclipse.core.runtime.Platform;

import org.eclipse.draw2d.Connection;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.RelativeBendpoint;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.ENamedElement;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.gef.AccessibleEditPart;

import org.eclipse.gef.CompoundSnapToHelper;

import org.eclipse.gef.DragTracker;

import org.eclipse.gef.EditDomain;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.LayerConstants;

import org.eclipse.gef.Request;

import org.eclipse.gef.RequestConstants;

import org.eclipse.gef.SnapToGeometry;

import org.eclipse.gef.SnapToGrid;

import org.eclipse.gef.SnapToGuides;

import org.eclipse.gef.SnapToHelper;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.UnexecutableCommand;

import org.eclipse.gef.editparts.AbstractConnectionEditPart;

import org.eclipse.gef.editpolicies.SnapFeedbackPolicy;

import org.eclipse.gef.rulers.RulerProvider;

import org.eclipse.gmf.runtime.common.ui.services.action.filter.ActionFilterService;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;

import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConnectionBendpointEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConnectionLabelsEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DecorationEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.PropertyHandlerEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.DefaultEditableEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.IContainedEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.IEditableEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.ConnectionEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.ConnectionLineSegEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.TreeConnectionBendpointEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramFontRegistry;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;

import org.eclipse.gmf.runtime.diagram.ui.internal.services.editpolicy.EditPolicyService;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditDomain;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.services.editpart.EditPartService;

import org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx;

import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.ConnectionLayerEx;

import org.eclipse.gmf.runtime.draw2d.ui.internal.routers.ForestRouter;

import org.eclipse.gmf.runtime.draw2d.ui.internal.routers.OrthogonalRouter;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

import org.eclipse.gmf.runtime.emf.core.EventTypes;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;

import org.eclipse.gmf.runtime.emf.core.util.ProxyUtil;

import org.eclipse.gmf.runtime.gef.ui.internal.editpolicies.GraphicalEditPolicyEx;

import org.eclipse.gmf.runtime.gef.ui.internal.l10n.Cursors;

import org.eclipse.gmf.runtime.gef.ui.internal.tools.SelectConnectionEditPartTracker;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.FontStyle;

import org.eclipse.gmf.runtime.notation.JumpLinkStatus;

import org.eclipse.gmf.runtime.notation.JumpLinkType;

import org.eclipse.gmf.runtime.notation.LineStyle;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.RelativeBendpoints;

import org.eclipse.gmf.runtime.notation.Routing;

import org.eclipse.gmf.runtime.notation.RoutingStyle;

import org.eclipse.gmf.runtime.notation.Smoothness;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.util.Assert;

import org.eclipse.swt.SWT;

import org.eclipse.swt.accessibility.AccessibleEvent;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.FontData;

import org.eclipse.swt.widgets.Display;

import org.eclipse.ui.IActionFilter;

abstract public class ConnectionEditPart extends AbstractConnectionEditPart implements IGraphicalEditPart, PropertyChangeListener, IContainedEditPart, IPrimaryEditPart, NotificationListener {
    private Map listenerFilters;
    private String elementGuid;
    protected AccessibleEditPart accessibleEP;

    protected Command getPropertyChangeCommand (Object property, Object oldValue, Object newValue) {
        return null;
    }

    private final IEditableEditPart editableEditPart;

    static {
        registerAdapters ();
    }

    public void activate () {
        addNotationalListeners ();
        EObject semanticProxy = ((View) getModel ()).getElement ();
        EObject semanticElement = ProxyUtil.resolve (MEditingDomainGetter.getMEditingDomain ((View) getModel ()), semanticProxy);
        if (semanticElement != null) addSemanticListeners ();
        else if (semanticProxy != null) {
            addListenerFilter ("SemanticProxy", this, semanticProxy);
        }

        super.activate ();
    }

    protected void addListenerFilter (String filterId, NotificationListener listener, EObject element) {
        if (element == null) return;

        Assert.isNotNull (filterId);
        Assert.isNotNull (listener);
        if (listenerFilters == null) listenerFilters = new HashMap ();

        DiagramEventBroker.getInstance ().addNotificationListener (element, listener);
        listenerFilters.put (filterId, new Object [] {element, listener});
    }

    protected void addListenerFilter (String filterId, NotificationListener listener, EObject element, EStructuralFeature feature) {
        if (element == null) return;

        Assert.isNotNull (filterId);
        Assert.isNotNull (listener);
        if (listenerFilters == null) listenerFilters = new HashMap ();

        DiagramEventBroker.getInstance ().addNotificationListener (element, feature, listener);
        listenerFilters.put (filterId, new Object [] {element, feature, listener});
    }

    final protected EditPart createChild (Object model) {
        return EditPartService.getInstance ().createGraphicEditPart ((View) model);
    }

    final protected org.eclipse.gef.ConnectionEditPart createConnection (Object connectionView) {
        return (org.eclipse.gef.ConnectionEditPart) createChild (connectionView);
    }

    final protected void createEditPolicies () {
        createDefaultEditPolicies ();
        EditPolicyService.getInstance ().createEditPolicies (this);
    }

    protected void createDefaultEditPolicies () {
        installEditPolicy (EditPolicyRoles.SEMANTIC_ROLE, new SemanticEditPolicy ());
        installEditPolicy (EditPolicyRoles.PROPERTY_HANDLER_ROLE, new PropertyHandlerEditPolicy ());
        installEditPolicy (EditPolicy.CONNECTION_ENDPOINTS_ROLE, new org.eclipse.gef.editpolicies.ConnectionEndpointEditPolicy ());
        installEditPolicy (EditPolicy.CONNECTION_ROLE, new ConnectionEditPolicy ());
        installBendpointEditPolicy ();
        installEditPolicy (EditPolicyRoles.DECORATION_ROLE, new DecorationEditPolicy ());
        installEditPolicy (EditPolicyRoles.CONNECTION_LABELS_ROLE, new ConnectionLabelsEditPolicy ());
        installEditPolicy (EditPolicyRoles.SNAP_FEEDBACK_ROLE, new SnapFeedbackPolicy ());
    }

    public void deactivate () {
        boolean wasActive = isActive ();
        super.deactivate ();
        if (listenerFilters != null && wasActive != isActive ()) {
            for (Iterator i = listenerFilters.keySet ().iterator ();
            i.hasNext ();) {
                Object [] obj = (Object []) listenerFilters.get (i.next ());
                if (obj.length > 2) {
                    DiagramEventBroker.getInstance ().removeNotificationListener ((EObject) obj [0], (EStructuralFeature) obj [1], (NotificationListener) obj [2]);
                } else {
                    DiagramEventBroker.getInstance ().removeNotificationListener ((EObject) obj [0], (NotificationListener) obj [1]);
                }
            }
        }
    }

    protected void executeCommand (Command command) {
        getEditDomain ().getCommandStack ().execute (command);
    }

    static private void registerAdapters () {
        Platform.getAdapterManager ().registerAdapters (new IAdapterFactory () {

            public Object getAdapter (Object adaptableObject, Class adapterType) {
                IGraphicalEditPart gep = (IGraphicalEditPart) adaptableObject;
                if (adapterType == IActionFilter.class) {
                    return ActionFilterService.getInstance ();
                } else if (adapterType == View.class) {
                    return gep.getModel ();
                }

                return null;
            }

            public Class [] getAdapterList () {
                return new Class [] {IActionFilter.class, View.class};
            }

        }

        , IGraphicalEditPart.class);
    }

    protected AccessibleEditPart getAccessibleEditPart () {
        if (accessibleEP == null) {
            accessibleEP = new AccessibleGraphicalEditPart () {

                private String getSemanticName () {
                    EObject semanticElement = resolveSemanticElement ();
                    if (semanticElement != null) {
                        String name = semanticElement.getClass ().getName ();
                        int startIndex = name.lastIndexOf ('.') + 1;
                        int endIndex = name.lastIndexOf ("Impl");
                        return name.substring (startIndex, endIndex);
                    }
                    return DiagramUIMessages.Accessible_Connection_Label;
                }

                public void getName (AccessibleEvent e) {
                    StringBuffer msg = new StringBuffer ();
                    EditPart sourceEP = getSource ();
                    EditPart targetEP = getTarget ();
                    msg.append (getSemanticName ());
                    if (sourceEP != null) {
                        AccessibleEditPart aEP = (AccessibleEditPart) sourceEP.getAdapter (AccessibleEditPart.class);
                        AccessibleEvent event = new AccessibleEvent (this);
                        aEP.getName (event);
                        msg.append (" ");
                        msg.append (DiagramUIMessages.Accessible_Connection_From);
                        msg.append (" ");
                        msg.append (event.result);
                    }
                    if (targetEP != null) {
                        AccessibleEditPart aEP = (AccessibleEditPart) targetEP.getAdapter (AccessibleEditPart.class);
                        AccessibleEvent event = new AccessibleEvent (this);
                        aEP.getName (event);
                        msg.append (" ");
                        msg.append (DiagramUIMessages.Accessible_Connection_To);
                        msg.append (" ");
                        msg.append (event.result);
                    }
                    e.result = msg.toString ();
                }

            }

            ;
        }
        return accessibleEP;
    }

    public Object getAdapter (Class key) {
        Object adapter = Platform.getAdapterManager ().getAdapter (this, key);
        if (adapter != null) {
            return adapter;
        }
        if (adapter == SnapToHelper.class) {
            List snapStrategies = new ArrayList ();
            Boolean val = (Boolean) getViewer ().getProperty (RulerProvider.PROPERTY_RULER_VISIBILITY);
            if (val != null && val.booleanValue ()) snapStrategies.add (new SnapToGuides (this));

            val = (Boolean) getViewer ().getProperty (SnapToGeometry.PROPERTY_SNAP_ENABLED);
            if (val != null && val.booleanValue ()) snapStrategies.add (new SnapToGrid (this));

            if (snapStrategies.size () == 0) return null;

            if (snapStrategies.size () == 1) return snapStrategies.get (0);

            SnapToHelper ss [] = new SnapToHelper [snapStrategies.size ()];
            for (int i = 0;
            i < snapStrategies.size (); i ++) ss [i] = (SnapToHelper) snapStrategies.get (i);

            return new CompoundSnapToHelper (ss);
        }
        Object model = getModel ();
        if (View.class.isAssignableFrom (key) && key.isInstance (model)) {
            return getModel ();
        }
        if (model != null && model instanceof View) {
            EObject semanticObject = ViewUtil.resolveSemanticElement ((View) model);
            if (key.isInstance (semanticObject)) {
                return semanticObject;
            } else if (key.isInstance (model)) {
                return model;
            }

        }
        return super.getAdapter (key);
    }

    public IGraphicalEditPart getChildBySemanticHint (String semanticHint) {
        if (getModel () != null) {
            View view = ViewUtil.getChildBySemanticHint ((View) getModel (), semanticHint);
            if (view != null) return (IGraphicalEditPart) getViewer ().getEditPartRegistry ().get (view);

        }
        return null;
    }

    public Command getCommand (Request _request) {
        if (! isEditModeEnabled ()) {
            return UnexecutableCommand.INSTANCE;
        }
        final Request request = _request;
        Command cmd = (Command) MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {

            public Object run () {
                return ConnectionEditPart.super.getCommand (request);
            }

        }

        );
        return cmd;
    }

    protected Diagram getDiagramView () {
        return (Diagram) getRoot ().getContents ().getModel ();
    }

    public View getPrimaryView () {
        for (EditPart parent = this;
        parent != null; parent = parent.getParent ()) if (parent instanceof IPrimaryEditPart) return (View) parent.getModel ();

        return null;
    }

    protected EditDomain getEditDomain () {
        return getRoot ().getViewer ().getEditDomain ();
    }

    public IDiagramEditDomain getDiagramEditDomain () {
        return (IDiagramEditDomain) getEditDomain ();
    }

    protected List getModelChildren () {
        return ((View) getModel ()).getChildren ();
    }

    public Object getPropertyValue (Object id) {
        return ViewUtil.getPropertyValue ((View) getModel (), id);
    }

    public Object getStructuralFeatureValue (EStructuralFeature feature) {
        return ViewUtil.getStructuralFeatureValue ((View) getModel (), feature);
    }

    public EObject resolveSemanticElement () {
        return (EObject) MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {

            public Object run () {
                return ViewUtil.resolveSemanticElement ((View) getModel ());
            }

        }

        );
    }

    public TopGraphicEditPart getTopGraphicEditPart () {
        EditPart editPart = this;
        while (editPart instanceof IGraphicalEditPart) {
            if (editPart instanceof TopGraphicEditPart) return (TopGraphicEditPart) editPart;

            editPart = editPart.getParent ();
        }
        return null;
    }

    public View getNotationView () {
        Object model = getModel ();
        if (model instanceof View) return (View) model;

        return null;
    }

    public final void propertyChange (PropertyChangeEvent event) {
        if (isActive ()) handlePropertyChangeEvent (event);

    }

    protected void handlePropertyChangeEvent (PropertyChangeEvent event) {
        if (event.getPropertyName ().equals (Connection.PROPERTY_CONNECTION_ROUTER)) {
            installRouter ();
        }
    }

    public void reactivateSemanticModel () {
        removeSemanticListeners ();
        if (resolveSemanticElement () != null) addSemanticListeners ();

        refresh ();
    }

    public EditPart findEditPart (EditPart epBegin, EObject theElement) {
        if (theElement == null) {
            return null;
        }
        EditPart epStart = null;
        if (epBegin == null) {
            epStart = this;
        } else {
            epStart = epBegin;
        }
        final View view = (View) ((IAdaptable) epStart).getAdapter (View.class);
        if (view != null) {
            EObject el = ViewUtil.resolveSemanticElement (view);
            if ((el != null) && el.equals (theElement)) {
                return epStart;
            }
        }
        ListIterator childLI = epStart.getChildren ().listIterator ();
        while (childLI.hasNext ()) {
            EditPart epChild = (EditPart) childLI.next ();
            EditPart elementEP = findEditPart (epChild, theElement);
            if (elementEP != null) {
                return elementEP;
            }
        }
        return null;
    }

    protected void refreshForegroundColor () {
        LineStyle style = (LineStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getLineStyle ());
        if (style != null) setForegroundColor (DiagramColorRegistry.getInstance ().getColor (new Integer (style.getLineColor ())));

    }

    protected void refreshVisibility () {
        setVisibility (((View) getModel ()).isVisible ());
    }

    protected void removeListenerFilter (String filterId) {
        if (listenerFilters == null) return;

        Object [] objects = (Object []) listenerFilters.get (filterId);
        if (objects == null) {
            return;
        }
        if (objects.length > 2) {
            DiagramEventBroker.getInstance ().removeNotificationListener ((EObject) objects [0], (EStructuralFeature) objects [1], (NotificationListener) objects [2]);
        } else {
            DiagramEventBroker.getInstance ().removeNotificationListener ((EObject) objects [0], (NotificationListener) objects [1]);
        }
        listenerFilters.remove (filterId);
    }

    protected void setForegroundColor (Color color) {
        getFigure ().setForegroundColor (color);
    }

    public void setPropertyValue (Object id, Object value) {
        ViewUtil.setPropertyValue ((View) getModel (), id, value);
    }

    public void setStructuralFeatureValue (EStructuralFeature feature, Object value) {
        ViewUtil.setStructuralFeatureValue ((View) getModel (), feature, value);
    }

    protected void setVisibility (boolean vis) {
        if (! vis && getSelected () != SELECTED_NONE) getViewer ().deselect (this);

        getFigure ().setVisible (vis);
        getFigure ().revalidate ();
    }

    protected void addNotationalListeners () {
        addListenerFilter ("View", this, (View) getModel ());
        getFigure ().addPropertyChangeListener (Connection.PROPERTY_CONNECTION_ROUTER, this);
    }

    protected void addSemanticListeners () {
        addListenerFilter ("SemanticModel", this, resolveSemanticElement ());
    }

    protected void removeNotationalListeners () {
        getFigure ().removePropertyChangeListener (Connection.PROPERTY_CONNECTION_ROUTER, this);
        removeListenerFilter ("View");
    }

    protected void removeSemanticListeners () {
        removeListenerFilter ("SemanticModel");
    }

    public void addNotify () {
        super.addNotify ();
        installRouter ();
    }

    public Map getAppearancePropertiesMap () {
        Map properties = new HashMap ();
        fillAppearancePropertiesMap (properties);
        return properties;
    }

    protected static final String [] appearanceProperties = new String [] {Properties.ID_FONTNAME, Properties.ID_FONTSIZE, Properties.ID_FONTBOLD, Properties.ID_FONTITALIC, Properties.ID_FONTCOLOR, Properties.ID_LINECOLOR};

    public ConnectionEditPart (View view) {
        setModel (view);
        this.editableEditPart = new DefaultEditableEditPart (this);
    }

    abstract protected Connection createConnectionFigure ();

    final protected IFigure createFigure () {
        return createConnectionFigure ();
    }

    public void refresh () {
        if (getSource () != null && getTarget () != null) MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {

            public Object run () {
                ConnectionEditPart.super.refresh ();
                EditPolicyIterator i = getEditPolicyIterator ();
                while (i.hasNext ()) {
                    EditPolicy policy = i.next ();
                    if (policy instanceof GraphicalEditPolicyEx) {
                        ((GraphicalEditPolicyEx) policy).refresh ();
                    }
                }
                return null;
            }

        }

        );

    }

    protected Edge getEdge () {
        return (Edge) getModel ();
    }

    public DragTracker getDragTracker (Request req) {
        return new SelectConnectionEditPartTracker (this);
    }

    protected Object getModelSource () {
        return getEdge ().getSource ();
    }

    protected Object getModelTarget () {
        return getEdge ().getTarget ();
    }

    protected void installRouter () {
        ConnectionLayerEx cLayer = (ConnectionLayerEx) getLayer (LayerConstants.CONNECTION_LAYER);
        RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getRoutingStyle ());
        if (style != null) {
            Routing routing = style.getRouting ();
            if (Routing.MANUAL_LITERAL == routing) {
                getConnectionFigure ().setConnectionRouter (cLayer.getObliqueRouter ());
            } else if (Routing.RECTILINEAR_LITERAL == routing) {
                getConnectionFigure ().setConnectionRouter (cLayer.getRectilinearRouter ());
            } else if (Routing.TREE_LITERAL == routing) {
                getConnectionFigure ().setConnectionRouter (cLayer.getTreeRouter ());
            }

        }
        refreshRouterChange ();
    }

    protected void refreshBendpoints () {
        RelativeBendpoints bendpoints = (RelativeBendpoints) getEdge ().getBendpoints ();
        List modelConstraint = bendpoints.getPoints ();
        List figureConstraint = new ArrayList ();
        for (int i = 0;
        i < modelConstraint.size (); i ++) {
            org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint wbp = (org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint) modelConstraint.get (i);
            RelativeBendpoint rbp = new RelativeBendpoint (getConnectionFigure ());
            rbp.setRelativeDimensions (new Dimension (wbp.getSourceX (), wbp.getSourceY ()), new Dimension (wbp.getTargetX (), wbp.getTargetY ()));
            rbp.setWeight ((i + 1) / ((float) modelConstraint.size () + 1));
            figureConstraint.add (rbp);
        }
        getConnectionFigure ().setRoutingConstraint (figureConstraint);
    }

    private void installBendpointEditPolicy () {
        if (getConnectionFigure ().getConnectionRouter () instanceof ForestRouter) {
            installEditPolicy (EditPolicy.CONNECTION_BENDPOINTS_ROLE, new TreeConnectionBendpointEditPolicy ());
            getConnectionFigure ().setCursor (Cursors.CURSOR_SEG_MOVE);
        } else if (getConnectionFigure ().getConnectionRouter () instanceof OrthogonalRouter) {
            installEditPolicy (EditPolicy.CONNECTION_BENDPOINTS_ROLE, new ConnectionLineSegEditPolicy ());
            getConnectionFigure ().setCursor (Cursors.CURSOR_SEG_MOVE);
        } else {
            installEditPolicy (EditPolicy.CONNECTION_BENDPOINTS_ROLE, new ConnectionBendpointEditPolicy ());
            getConnectionFigure ().setCursor (Cursors.CURSOR_SEG_ADD);
        }

    }

    protected void refreshRouterChange () {
        refreshBendpoints ();
        installBendpointEditPolicy ();
    }

    protected void refreshSmoothness () {
        PolylineConnectionEx poly = ((PolylineConnectionEx) getConnectionFigure ());
        RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getRoutingStyle ());
        if (style != null) {
            Smoothness smoothness = style.getSmoothness ();
            if (Smoothness.LESS_LITERAL == smoothness) {
                poly.setSmoothness (PolylineConnectionEx.SMOOTH_LESS);
            } else if (Smoothness.NORMAL_LITERAL == smoothness) {
                poly.setSmoothness (PolylineConnectionEx.SMOOTH_NORMAL);
            } else if (Smoothness.MORE_LITERAL == smoothness) {
                poly.setSmoothness (PolylineConnectionEx.SMOOTH_MORE);
            } else if (Smoothness.NONE_LITERAL == smoothness) {
                poly.setSmoothness (PolylineConnectionEx.SMOOTH_NONE);
            }

        }
    }

    protected void refreshJumplinks () {
        PolylineConnectionEx poly = ((PolylineConnectionEx) getConnectionFigure ());
        RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getRoutingStyle ());
        JumpLinkStatus status = JumpLinkStatus.NONE_LITERAL;
        JumpLinkType type = JumpLinkType.SEMICIRCLE_LITERAL;
        boolean reverse = false;
        if (style != null) {
            status = style.getJumpLinkStatus ();
            type = style.getJumpLinkType ();
            reverse = style.isJumpLinksReverse ();
        }
        int jumpType = 0;
        if (JumpLinkStatus.BELOW_LITERAL == status) {
            jumpType = PolylineConnectionEx.JUMPLINK_FLAG_BELOW;
        } else if (JumpLinkStatus.ABOVE_LITERAL == status) {
            jumpType = PolylineConnectionEx.JUMPLINK_FLAG_ABOVE;
        } else if (JumpLinkStatus.ALL_LITERAL == status) {
            jumpType = PolylineConnectionEx.JUMPLINK_FLAG_ALL;
        }

        boolean bCurved = type.equals (JumpLinkType.SEMICIRCLE_LITERAL);
        boolean bAngleIn = ! type.equals (JumpLinkType.SQUARE_LITERAL);
        boolean bOnBottom = reverse;
        poly.setJumpLinks (jumpType != 0);
        poly.setJumpLinksStyles (jumpType, bCurved, bAngleIn, bOnBottom);
    }

    protected void refreshRoutingStyles () {
        PolylineConnectionEx poly = ((PolylineConnectionEx) getConnectionFigure ());
        RoutingStyle style = (RoutingStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getRoutingStyle ());
        if (style != null) {
            boolean closestDistance = style.isClosestDistance ();
            boolean avoidObstruction = style.isAvoidObstructions ();
            poly.setRoutingStyles (closestDistance, avoidObstruction);
        }
    }

    protected void refreshVisuals () {
        super.refreshVisuals ();
        refreshVisibility ();
        refreshForegroundColor ();
        refreshRoutingStyles ();
        refreshSmoothness ();
        refreshJumplinks ();
        refreshBendpoints ();
        refreshFont ();
    }

    protected void refreshFont () {
        FontStyle style = (FontStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getFontStyle ());
        if (style != null) {
            setFont (new FontData (style.getFontName (), style.getFontHeight (), (style.isBold () ? SWT.BOLD : SWT.NORMAL) | (style.isItalic () ? SWT.ITALIC : SWT.NORMAL)));
        }
    }

    protected void setFont (FontData fontData) {
        getFigure ().setFont (DiagramFontRegistry.getInstance ().getFont (Display.getDefault (), fontData));
        getFigure ().repaint ();
    }

    public void fillAppearancePropertiesMap (Map properties) {
        if (getAppearancePropertyIDs ().length > 0) {
            final Dictionary local_properties = new Hashtable ();
            for (int i = 0;
            i < getAppearancePropertyIDs ().length; i ++) {
                String prob = getAppearancePropertyIDs () [i];
                ENamedElement element = MetaModelUtil.getElement (prob);
                if (element instanceof EStructuralFeature && ViewUtil.isPropertySupported ((View) getModel (), prob)) {
                    local_properties.put (getAppearancePropertyIDs () [i], getStructuralFeatureValue ((EStructuralFeature) element));
                }
            }
            properties.put (((View) getModel ()).getType (), local_properties);
        }
        Iterator iterator = getChildren ().iterator ();
        while (iterator.hasNext ()) {
            IGraphicalEditPart child = (IGraphicalEditPart) iterator.next ();
            child.fillAppearancePropertiesMap (properties);
        }
    }

    protected String [] getAppearancePropertyIDs () {
        return appearanceProperties;
    }

    public void performRequest (Request request) {
        if (! isEditModeEnabled ()) {
            return;
        }
        if (RequestConstants.REQ_DIRECT_EDIT == request.getType ()) {
            performDirectEditRequest (request);
        } else {
            EditPart targetEditPart = getTargetEditPart (request);
            if (targetEditPart != null) {
                Command command = targetEditPart.getCommand (request);
                if (command != null) {
                    getDiagramEditDomain ().getDiagramCommandStack ().execute (command);
                    return;
                }
            }
        }
    }

    protected void performDirectEditRequest (Request request) {
        EditPart primaryChildEditPart = (EditPart) MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {

            public Object run () {
                return getPrimaryChildEditPart ();
            }

        }

        );
        if (primaryChildEditPart != null) {
            primaryChildEditPart.performRequest (request);
        }
    }

    public boolean understandsRequest (Request req) {
        return RequestConstants.REQ_DIRECT_EDIT == req.getType () || super.understandsRequest (req);
    }

    protected void registerModel () {
        super.registerModel ();
        EObject ref = ((View) getModel ()).getElement ();
        if (ref == null) {
            return;
        }
        elementGuid = ProxyUtil.getProxyID (ref);
        ((IDiagramGraphicalViewer) getViewer ()).registerEditPartForElement (elementGuid, this);
    }

    protected void unregisterModel () {
        super.unregisterModel ();
        ((IDiagramGraphicalViewer) getViewer ()).unregisterEditPartForElement (elementGuid, this);
    }

    protected final void handleMajorSemanticChange () {
        if (getSource () instanceof GraphicalEditPart && getTarget () instanceof GraphicalEditPart) {
            ((GraphicalEditPart) getSource ()).refreshSourceConnection (this);
            ((GraphicalEditPart) getTarget ()).refreshTargetConnection (this);
        }
    }

    final void refreshChild (GraphicalEditPart child) {
        removeChild (child);
        refreshChildren ();
    }

    public final boolean isCanonical () {
        return getEditPolicy (EditPolicyRoles.CANONICAL_ROLE) != null;
    }

    public boolean isSelectable () {
        return getFigure ().isVisible ();
    }

    public void disableEditMode () {
        this.editableEditPart.disableEditMode ();
    }

    public void enableEditMode () {
        this.editableEditPart.enableEditMode ();
    }

    public boolean isEditModeEnabled () {
        return this.editableEditPart.isEditModeEnabled ();
    }

    public void showSourceFeedback (Request request) {
        if (! isEditModeEnabled ()) {
            return;
        }
        super.showSourceFeedback (request);
    }

    public void showTargetFeedback (Request request) {
        if (! isEditModeEnabled ()) {
            return;
        }
        super.showTargetFeedback (request);
    }

    public void eraseSourceFeedback (Request request) {
        if (! isEditModeEnabled ()) {
            return;
        }
        super.eraseSourceFeedback (request);
    }

    public void eraseTargetFeedback (Request request) {
        if (! isEditModeEnabled ()) {
            return;
        }
        super.eraseTargetFeedback (request);
    }

    public EditPart getPrimaryChildEditPart () {
        if (getChildren ().size () > 0) return (EditPart) getChildren ().get (0);

        return null;
    }

    public PreferencesHint getDiagramPreferencesHint () {
        if (getRoot () instanceof IDiagramPreferenceSupport) {
            return ((IDiagramPreferenceSupport) getRoot ()).getPreferencesHint ();
        }
        return PreferencesHint.USE_DEFAULTS;
    }

    public void notifyChanged (Notification notification) {
        if (isActive ()) {
            handleNotificationEvent (notification);
        }
    }

    protected void handleNotificationEvent (Notification event) {
        Object feature = event.getFeature ();
        if (NotationPackage.eINSTANCE.getView_PersistedChildren ().equals (feature) || NotationPackage.eINSTANCE.getView_TransientChildren ().equals (feature)) {
            refreshChildren ();
        } else if (NotationPackage.eINSTANCE.getView_Visible ().equals (feature)) {
            setVisibility (((Boolean) event.getNewValue ()).booleanValue ());
        } else if (NotationPackage.eINSTANCE.getRoutingStyle_Routing ().equals (feature)) {
            installRouter ();
        } else if (NotationPackage.eINSTANCE.getRoutingStyle_Smoothness ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_AvoidObstructions ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_ClosestDistance ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkStatus ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkType ().equals (feature) || NotationPackage.eINSTANCE.getRoutingStyle_JumpLinksReverse ().equals (feature)) {
            refreshVisuals ();
        } else if (NotationPackage.eINSTANCE.getLineStyle_LineColor ().equals (feature)) {
            Integer c = (Integer) event.getNewValue ();
            setForegroundColor (DiagramColorRegistry.getInstance ().getColor (c));
        } else if (NotationPackage.eINSTANCE.getRelativeBendpoints_Points ().equals (feature)) {
            refreshBendpoints ();
        } else if (event.getFeature () == NotationPackage.eINSTANCE.getView_Element () && ((EObject) event.getNotifier ()) == getNotationView ()) handleMajorSemanticChange ();
        else if (event.getEventType () == EventTypes.UNRESOLVE && event.getNotifier () == ((View) getModel ()).getElement ()) handleMajorSemanticChange ();

    }

    final protected IMapMode getMapMode () {
        EditPart parent = getParent ();
        if (parent instanceof DiagramRootEditPart) return ((DiagramRootEditPart) parent).getMapMode ();
        else if (parent instanceof org.eclipse.gef.GraphicalEditPart) return MapModeUtil.getMapMode (((org.eclipse.gef.GraphicalEditPart) parent).getFigure ());

        return MapModeUtil.getMapMode ();
    }

}

