package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;

import org.eclipse.gmf.codegen.gmfgen.GenLanguage;

import org.eclipse.gmf.codegen.gmfgen.ValueExpression;

import org.eclipse.gmf.internal.common.codegen.Conversions;

public class ValueExpressionImpl extends EObjectImpl implements ValueExpression {
    protected static final String BODY_EDEFAULT = null;
    protected String body = BODY_EDEFAULT;
    protected static final String LANG_NAME_EDEFAULT = null;

    protected ValueExpressionImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getValueExpression ();
    }

    public String getBody () {
        return body;
    }

    public void setBody (String newBody) {
        String oldBody = body;
        body = newBody;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.VALUE_EXPRESSION__BODY, oldBody, body));

    }

    public String getLangName () {
        GenLanguage langEnum = getProvider () == null ? null : getProvider ().getLanguage ();
        return (langEnum != null) ? langEnum.getName () : "";
    }

    public GenExpressionProviderBase getProvider () {
        if (eContainerFeatureID != GMFGenPackage.VALUE_EXPRESSION__PROVIDER) return null;

        return (GenExpressionProviderBase) eContainer ();
    }

    public String getBodyString () {
        return Conversions.toStringLiteral (getBody ());
    }

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.VALUE_EXPRESSION__PROVIDER :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.VALUE_EXPRESSION__PROVIDER, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.VALUE_EXPRESSION__PROVIDER :
                return eBasicSetContainer (null, GMFGenPackage.VALUE_EXPRESSION__PROVIDER, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.VALUE_EXPRESSION__PROVIDER :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS, GenExpressionProviderBase.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.VALUE_EXPRESSION__BODY :
                return getBody ();
            case GMFGenPackage.VALUE_EXPRESSION__LANG_NAME :
                return getLangName ();
            case GMFGenPackage.VALUE_EXPRESSION__PROVIDER :
                return getProvider ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.VALUE_EXPRESSION__BODY :
                setBody ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.VALUE_EXPRESSION__BODY :
                setBody (BODY_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.VALUE_EXPRESSION__BODY :
                return BODY_EDEFAULT == null ? body != null : ! BODY_EDEFAULT.equals (body);
            case GMFGenPackage.VALUE_EXPRESSION__LANG_NAME :
                return LANG_NAME_EDEFAULT == null ? getLangName () != null : ! LANG_NAME_EDEFAULT.equals (getLangName ());
            case GMFGenPackage.VALUE_EXPRESSION__PROVIDER :
                return getProvider () != null;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (body: ");
        result.append (body);
        result.append (')');
        return result.toString ();
    }

}

