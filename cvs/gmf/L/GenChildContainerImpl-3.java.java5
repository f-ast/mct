package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.CompartmentLayoutKind;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.GenNode;

public class GenChildContainerImpl extends GenCommonBaseImpl implements GenChildContainer {
    protected static final String GROUP_ID_EDEFAULT = null;
    protected String groupID = GROUP_ID_EDEFAULT;
    protected static final String TITLE_KEY_EDEFAULT = null;
    protected String titleKey = TITLE_KEY_EDEFAULT;
    protected static final boolean CAN_COLLAPSE_EDEFAULT = true;
    protected boolean canCollapse = CAN_COLLAPSE_EDEFAULT;
    protected static final boolean HIDE_IF_EMPTY_EDEFAULT = true;
    protected boolean hideIfEmpty = HIDE_IF_EMPTY_EDEFAULT;
    protected static final boolean NEEDS_TITLE_EDEFAULT = true;
    protected boolean needsTitle = NEEDS_TITLE_EDEFAULT;
    protected static final CompartmentLayoutKind LAYOUT_KIND_EDEFAULT = CompartmentLayoutKind.BORDER_LITERAL;
    protected CompartmentLayoutKind layoutKind = LAYOUT_KIND_EDEFAULT;

    protected GenChildContainerImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenChildContainer ();
    }

    public String getGroupID () {
        return groupID;
    }

    public void setGroupID (String newGroupID) {
        String oldGroupID = groupID;
        groupID = newGroupID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__GROUP_ID, oldGroupID, groupID));

    }

    public String getTitleKey () {
        return titleKey;
    }

    public void setTitleKey (String newTitleKey) {
        String oldTitleKey = titleKey;
        titleKey = newTitleKey;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__TITLE_KEY, oldTitleKey, titleKey));

    }

    public boolean isCanCollapse () {
        return canCollapse;
    }

    public void setCanCollapse (boolean newCanCollapse) {
        boolean oldCanCollapse = canCollapse;
        canCollapse = newCanCollapse;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__CAN_COLLAPSE, oldCanCollapse, canCollapse));

    }

    public boolean isHideIfEmpty () {
        return hideIfEmpty;
    }

    public void setHideIfEmpty (boolean newHideIfEmpty) {
        boolean oldHideIfEmpty = hideIfEmpty;
        hideIfEmpty = newHideIfEmpty;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__HIDE_IF_EMPTY, oldHideIfEmpty, hideIfEmpty));

    }

    public boolean isNeedsTitle () {
        return needsTitle;
    }

    public void setNeedsTitle (boolean newNeedsTitle) {
        boolean oldNeedsTitle = needsTitle;
        needsTitle = newNeedsTitle;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__NEEDS_TITLE, oldNeedsTitle, needsTitle));

    }

    public CompartmentLayoutKind getLayoutKind () {
        return layoutKind;
    }

    public void setLayoutKind (CompartmentLayoutKind newLayoutKind) {
        CompartmentLayoutKind oldLayoutKind = layoutKind;
        layoutKind = newLayoutKind == null ? LAYOUT_KIND_EDEFAULT : newLayoutKind;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__LAYOUT_KIND, oldLayoutKind, layoutKind));

    }

    public GenNode getParentNode () {
        if (eContainerFeatureID != GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE) return null;

        return (GenNode) eContainer;
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE :
                    if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);

                    return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE, msgs);
                default :
                    return eDynamicInverseAdd (otherEnd, featureID, baseClass, msgs);
            }
        }
        if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);

        return eBasicSetContainer (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE :
                    return eBasicSetContainer (null, GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE, msgs);
                default :
                    return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
            }
        }
        return eBasicSetContainer (null, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainer (NotificationChain msgs) {
        if (eContainerFeatureID >= 0) {
            switch (eContainerFeatureID) {
                case GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE :
                    return eContainer.eInverseRemove (this, GMFGenPackage.GEN_NODE__CHILD_CONTAINERS, GenNode.class, msgs);
                default :
                    return eDynamicBasicRemoveFromContainer (msgs);
            }
        }
        return eContainer.eInverseRemove (this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_CHILD_CONTAINER__DIAGRAM_RUN_TIME_CLASS :
                if (resolve) return getDiagramRunTimeClass ();

                return basicGetDiagramRunTimeClass ();
            case GMFGenPackage.GEN_CHILD_CONTAINER__VISUAL_ID :
                return new Integer (getVisualID ());
            case GMFGenPackage.GEN_CHILD_CONTAINER__EDIT_PART_CLASS_NAME :
                return getEditPartClassName ();
            case GMFGenPackage.GEN_CHILD_CONTAINER__GROUP_ID :
                return getGroupID ();
            case GMFGenPackage.GEN_CHILD_CONTAINER__TITLE_KEY :
                return getTitleKey ();
            case GMFGenPackage.GEN_CHILD_CONTAINER__CAN_COLLAPSE :
                return isCanCollapse () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_CHILD_CONTAINER__HIDE_IF_EMPTY :
                return isHideIfEmpty () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_CHILD_CONTAINER__NEEDS_TITLE :
                return isNeedsTitle () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_CHILD_CONTAINER__LAYOUT_KIND :
                return getLayoutKind ();
            case GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE :
                return getParentNode ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_CHILD_CONTAINER__DIAGRAM_RUN_TIME_CLASS :
                setDiagramRunTimeClass ((GenClass) newValue);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__VISUAL_ID :
                setVisualID (((Integer) newValue).intValue ());
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__EDIT_PART_CLASS_NAME :
                setEditPartClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__GROUP_ID :
                setGroupID ((String) newValue);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__TITLE_KEY :
                setTitleKey ((String) newValue);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__CAN_COLLAPSE :
                setCanCollapse (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__HIDE_IF_EMPTY :
                setHideIfEmpty (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__NEEDS_TITLE :
                setNeedsTitle (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__LAYOUT_KIND :
                setLayoutKind ((CompartmentLayoutKind) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_CHILD_CONTAINER__DIAGRAM_RUN_TIME_CLASS :
                setDiagramRunTimeClass ((GenClass) null);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__VISUAL_ID :
                setVisualID (VISUAL_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__EDIT_PART_CLASS_NAME :
                setEditPartClassName (EDIT_PART_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__GROUP_ID :
                setGroupID (GROUP_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__TITLE_KEY :
                setTitleKey (TITLE_KEY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__CAN_COLLAPSE :
                setCanCollapse (CAN_COLLAPSE_EDEFAULT);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__HIDE_IF_EMPTY :
                setHideIfEmpty (HIDE_IF_EMPTY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__NEEDS_TITLE :
                setNeedsTitle (NEEDS_TITLE_EDEFAULT);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__LAYOUT_KIND :
                setLayoutKind (LAYOUT_KIND_EDEFAULT);
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_CHILD_CONTAINER__DIAGRAM_RUN_TIME_CLASS :
                return diagramRunTimeClass != null;
            case GMFGenPackage.GEN_CHILD_CONTAINER__VISUAL_ID :
                return visualID != VISUAL_ID_EDEFAULT;
            case GMFGenPackage.GEN_CHILD_CONTAINER__EDIT_PART_CLASS_NAME :
                return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : ! EDIT_PART_CLASS_NAME_EDEFAULT.equals (editPartClassName);
            case GMFGenPackage.GEN_CHILD_CONTAINER__GROUP_ID :
                return GROUP_ID_EDEFAULT == null ? groupID != null : ! GROUP_ID_EDEFAULT.equals (groupID);
            case GMFGenPackage.GEN_CHILD_CONTAINER__TITLE_KEY :
                return TITLE_KEY_EDEFAULT == null ? titleKey != null : ! TITLE_KEY_EDEFAULT.equals (titleKey);
            case GMFGenPackage.GEN_CHILD_CONTAINER__CAN_COLLAPSE :
                return canCollapse != CAN_COLLAPSE_EDEFAULT;
            case GMFGenPackage.GEN_CHILD_CONTAINER__HIDE_IF_EMPTY :
                return hideIfEmpty != HIDE_IF_EMPTY_EDEFAULT;
            case GMFGenPackage.GEN_CHILD_CONTAINER__NEEDS_TITLE :
                return needsTitle != NEEDS_TITLE_EDEFAULT;
            case GMFGenPackage.GEN_CHILD_CONTAINER__LAYOUT_KIND :
                return layoutKind != LAYOUT_KIND_EDEFAULT;
            case GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE :
                return getParentNode () != null;
        }
        return eDynamicIsSet (eFeature);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (groupID: ");
        result.append (groupID);
        result.append (", titleKey: ");
        result.append (titleKey);
        result.append (", canCollapse: ");
        result.append (canCollapse);
        result.append (", hideIfEmpty: ");
        result.append (hideIfEmpty);
        result.append (", needsTitle: ");
        result.append (needsTitle);
        result.append (", layoutKind: ");
        result.append (layoutKind);
        result.append (')');
        return result.toString ();
    }

    public String getClassNamePrefix () {
        return getGroupID () == null ? "GenContainer$" + hashCode () : getGroupID ();
    }

    public String getClassNameSuffux () {
        return "Container";
    }

    public GenDiagram getDiagram () {
        GenNode parentNode = getParentNode ();
        if (parentNode == null) {
            return null;
        }
        return parentNode.getDiagram ();
    }

}

