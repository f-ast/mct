package org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.image;

import java.awt.image.BufferedImage;

import java.awt.image.WritableRaster;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.graphics.ImageData;

import org.eclipse.swt.graphics.PaletteData;

import org.eclipse.swt.graphics.RGB;

import org.eclipse.ui.PlatformUI;

public class ImageConverter {
    private static final PaletteData PALETTE_DATA = new PaletteData (0xFF0000, 0xFF00, 0xFF);

    public static Image convert (BufferedImage srcImage) {
        ImageData swtImageData = new ImageData (srcImage.getWidth (), srcImage.getHeight (), 24, PALETTE_DATA);
        int scansize = (((srcImage.getWidth () * 3) + 3) * 4) / 4;
        WritableRaster alphaRaster = srcImage.getAlphaRaster ();
        byte [] alphaBytes = new byte [srcImage.getWidth ()];
        for (int y = 0;
        y < srcImage.getHeight (); y ++) {
            int [] buff = srcImage.getRGB (0, y, srcImage.getWidth (), 1, null, 0, scansize);
            swtImageData.setPixels (0, y, srcImage.getWidth (), buff, 0);
            if (alphaRaster != null) {
                int [] alpha = alphaRaster.getPixels (0, y, srcImage.getWidth (), 1, (int []) null);
                for (int i = 0;
                i < srcImage.getWidth (); i ++) alphaBytes [i] = (byte) alpha [i];

                swtImageData.setAlphas (0, y, srcImage.getWidth (), alphaBytes, 0);
            }
        }
        return new Image (PlatformUI.getWorkbench ().getDisplay (), swtImageData);
    }

    public static BufferedImage convert (Image srcImage) {
        ImageData imageData = srcImage.getImageData ();
        int width = imageData.width;
        int height = imageData.height;
        ImageData maskData = null;
        int alpha [] = new int [1];
        if (imageData.alphaData == null) maskData = imageData.getTransparencyMask ();

        BufferedImage image = new BufferedImage (imageData.width, imageData.height, BufferedImage.TYPE_INT_ARGB);
        WritableRaster alphaRaster = image.getAlphaRaster ();
        for (int y = 0;
        y < height; y ++) {
            for (int x = 0;
            x < width; x ++) {
                int color = imageData.getPixel (x, y);
                color = translateColor (imageData, color);
                image.setRGB (x, y, color);
                if (alphaRaster != null) {
                    if (imageData.alphaData != null) {
                        alpha [0] = imageData.getAlpha (x, y);
                        alphaRaster.setPixel (x, y, alpha);
                    } else {
                        if (maskData != null) {
                            alpha [0] = maskData.getPixel (x, y) == 0 ? 0 : 255;
                            alphaRaster.setPixel (x, y, alpha);
                        }
                    }
                }
            }
        }
        return image;
    }

    private static int translateColor (ImageData imageData, int color) {
        int bitCount = imageData.depth;
        RGB [] rgb = imageData.getRGBs ();
        if (bitCount == 1 || bitCount == 4 || bitCount == 8) {
            if (rgb != null) {
                java.awt.Color foo = new java.awt.Color (rgb [color].red, rgb [color].green, rgb [color].blue);
                color = foo.getRGB ();
            } else {
                color = 0;
            }
        } else if (bitCount == 16) {
            int BLUE_MASK = 0x1f;
            int GREEN_MASK = 0x3e0;
            int RED_MASK = 0x7C00;
            color = applyRGBMask (color, RED_MASK, GREEN_MASK, BLUE_MASK);
        } else if (bitCount == 24) {
            int blue = (color & 0x00ff0000)>> 16;
            int green = (color & 0x0000ff00)>> 8;
            int red = (color & 0x000000ff);
            java.awt.Color foo = new java.awt.Color (red, green, blue);
            color = foo.getRGB ();
        } else if (bitCount == 32) {
            int blue = (color & 0xff000000)>>> 24;
            int green = (color & 0x00ff0000)>> 16;
            int red = (color & 0x0000ff00)>> 8;
            java.awt.Color foo = new java.awt.Color (red, green, blue);
            color = foo.getRGB ();
        }

        return color;
    }

    private static int applyRGBMask (int color, int redMask, int greenMask, int blueMask) {
        int shiftCount;
        int maskSize;
        int red;
        int green;
        int blue;
        shiftCount = getShiftCount (redMask);
        maskSize = countBits (redMask);
        red = (color & redMask)>>> shiftCount;
        red = red * 255 / ((int) Math.pow (2, maskSize) - 1);
        shiftCount = getShiftCount (greenMask);
        maskSize = countBits (greenMask);
        green = (color & greenMask)>>> shiftCount;
        green = green * 255 / ((int) Math.pow (2, maskSize) - 1);
        shiftCount = getShiftCount (blueMask);
        maskSize = countBits (blueMask);
        blue = (color & blueMask)>>> shiftCount;
        blue = blue * 255 / ((int) Math.pow (2, maskSize) - 1);
        java.awt.Color foo = new java.awt.Color (red, green, blue);
        color = foo.getRGB ();
        return color;
    }

    private static int getShiftCount (int mask) {
        int count = 0;
        while (mask != 0 && ((mask & 0x1) == 0)) {
            mask = mask>>> 1;
            count ++;
        }
        return count;
    }

    private static int countBits (int mask) {
        int count = 0;
        for (int index = 0;
        index < 32; index ++) {
            if ((mask & 0x1) != 0) {
                count ++;
            }
            mask = mask>>> 1;
        }
        return count;
    }

}

