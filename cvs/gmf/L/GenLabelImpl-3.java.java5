package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.FeatureModelFacet;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenLabel;

import org.eclipse.gmf.codegen.gmfgen.Viewmap;

public abstract class GenLabelImpl extends GenCommonBaseImpl implements GenLabel {
    protected static final boolean READ_ONLY_EDEFAULT = false;
    protected boolean readOnly = READ_ONLY_EDEFAULT;
    protected FeatureModelFacet modelFacet = null;

    protected GenLabelImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenLabel ();
    }

    public boolean isReadOnly () {
        return readOnly;
    }

    public void setReadOnly (boolean newReadOnly) {
        boolean oldReadOnly = readOnly;
        readOnly = newReadOnly;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LABEL__READ_ONLY, oldReadOnly, readOnly));

    }

    public FeatureModelFacet getModelFacet () {
        return modelFacet;
    }

    public NotificationChain basicSetModelFacet (FeatureModelFacet newModelFacet, NotificationChain msgs) {
        FeatureModelFacet oldModelFacet = modelFacet;
        modelFacet = newModelFacet;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LABEL__MODEL_FACET, oldModelFacet, newModelFacet);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setModelFacet (FeatureModelFacet newModelFacet) {
        if (newModelFacet != modelFacet) {
            NotificationChain msgs = null;
            if (modelFacet != null) msgs = ((InternalEObject) modelFacet).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_LABEL__MODEL_FACET, null, msgs);

            if (newModelFacet != null) msgs = ((InternalEObject) newModelFacet).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_LABEL__MODEL_FACET, null, msgs);

            msgs = basicSetModelFacet (newModelFacet, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LABEL__MODEL_FACET, newModelFacet, newModelFacet));

    }

    public GenFeature getMetaFeature () {
        return getModelFacet () == null ? null : getModelFacet ().getMetaFeature ();
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFGenPackage.GEN_LABEL__VIEWMAP :
                    return basicSetViewmap (null, msgs);
                case GMFGenPackage.GEN_LABEL__MODEL_FACET :
                    return basicSetModelFacet (null, msgs);
                default :
                    return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
            }
        }
        return eBasicSetContainer (null, featureID, msgs);
    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_LABEL__DIAGRAM_RUN_TIME_CLASS :
                if (resolve) return getDiagramRunTimeClass ();

                return basicGetDiagramRunTimeClass ();
            case GMFGenPackage.GEN_LABEL__VISUAL_ID :
                return new Integer (getVisualID ());
            case GMFGenPackage.GEN_LABEL__EDIT_PART_CLASS_NAME :
                return getEditPartClassName ();
            case GMFGenPackage.GEN_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME :
                return getNotationViewFactoryClassName ();
            case GMFGenPackage.GEN_LABEL__VIEWMAP :
                return getViewmap ();
            case GMFGenPackage.GEN_LABEL__READ_ONLY :
                return isReadOnly () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_LABEL__MODEL_FACET :
                return getModelFacet ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_LABEL__DIAGRAM_RUN_TIME_CLASS :
                setDiagramRunTimeClass ((GenClass) newValue);
                return;
            case GMFGenPackage.GEN_LABEL__VISUAL_ID :
                setVisualID (((Integer) newValue).intValue ());
                return;
            case GMFGenPackage.GEN_LABEL__EDIT_PART_CLASS_NAME :
                setEditPartClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME :
                setNotationViewFactoryClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_LABEL__VIEWMAP :
                setViewmap ((Viewmap) newValue);
                return;
            case GMFGenPackage.GEN_LABEL__READ_ONLY :
                setReadOnly (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_LABEL__MODEL_FACET :
                setModelFacet ((FeatureModelFacet) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_LABEL__DIAGRAM_RUN_TIME_CLASS :
                setDiagramRunTimeClass ((GenClass) null);
                return;
            case GMFGenPackage.GEN_LABEL__VISUAL_ID :
                setVisualID (VISUAL_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_LABEL__EDIT_PART_CLASS_NAME :
                setEditPartClassName (EDIT_PART_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME :
                setNotationViewFactoryClassName (NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_LABEL__VIEWMAP :
                setViewmap ((Viewmap) null);
                return;
            case GMFGenPackage.GEN_LABEL__READ_ONLY :
                setReadOnly (READ_ONLY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_LABEL__MODEL_FACET :
                setModelFacet ((FeatureModelFacet) null);
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_LABEL__DIAGRAM_RUN_TIME_CLASS :
                return diagramRunTimeClass != null;
            case GMFGenPackage.GEN_LABEL__VISUAL_ID :
                return visualID != VISUAL_ID_EDEFAULT;
            case GMFGenPackage.GEN_LABEL__EDIT_PART_CLASS_NAME :
                return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : ! EDIT_PART_CLASS_NAME_EDEFAULT.equals (editPartClassName);
            case GMFGenPackage.GEN_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME :
                return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : ! NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals (notationViewFactoryClassName);
            case GMFGenPackage.GEN_LABEL__VIEWMAP :
                return viewmap != null;
            case GMFGenPackage.GEN_LABEL__READ_ONLY :
                return readOnly != READ_ONLY_EDEFAULT;
            case GMFGenPackage.GEN_LABEL__MODEL_FACET :
                return modelFacet != null;
        }
        return eDynamicIsSet (eFeature);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (readOnly: ");
        result.append (readOnly);
        result.append (')');
        return result.toString ();
    }

    protected abstract String getHostName ();

    protected String getFeatureCapName () {
        GenFeature metaFeature = getMetaFeature ();
        if (metaFeature != null) {
            return metaFeature.getCapName ();
        }
        return "Label$" + hashCode ();
    }

    public String getClassNamePrefix () {
        return getHostName () + getFeatureCapName ();
    }

    public String getUniqueIdentifier () {
        return getClassNamePrefix () + "_" + getVisualID ();
    }

}

