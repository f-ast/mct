package org.eclipse.gmf.runtime.emf.clipboard.core.internal;

import java.util.Arrays;

import java.util.List;

import java.util.Map;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Status;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.gmf.runtime.emf.clipboard.core.IClipboardSupportFactory;

public class ClipboardSupportManager {
    static final String E_NSURI = "nsURI";
    static final String E_CLASS = "class";
    static final String E_PRIORITY = "priority";
    private static final List PRIORITIES = Arrays.asList (new String [] {"lowest", "low", "medium", "high", "highest"});
    private static final Map clipboardSupportMap = new java.util.HashMap ();

    private ClipboardSupportManager () {
        super ();
    }

    public static void configureExtensions (IConfigurationElement [] configs) {
        for (int i = 0;
        i < configs.length; i ++) {
            try {
                Descriptor desc = new Descriptor (configs [i]);
                Descriptor previous = (Descriptor) clipboardSupportMap.get (desc.getEPackage ());
                if ((previous == null) || (previous.getPriority () < desc.getPriority ())) {
                    clipboardSupportMap.put (desc.getEPackage (), desc);
                }
            } catch (CoreException e) {
                ClipboardPlugin.getPlugin ().log (e.getStatus ());
            }
        }
    }

    public static IClipboardSupportFactory lookup (EPackage ePackage) {
        IClipboardSupportFactory result = null;
        Descriptor desc = (Descriptor) clipboardSupportMap.get (ePackage);
        if (desc != null) {
            result = desc.getFactory ();
        }
        return result;
    }

    public static IClipboardSupportFactory lookup (EClass eClass) {
        return lookup (eClass.getEPackage ());
    }

    public static IClipboardSupportFactory lookup (EObject eObject) {
        return lookup (eObject.eClass ().getEPackage ());
    }

    static IStatus createErrorStatus (int code, String message) {
        return createErrorStatus (code, message, null);
    }

    static IStatus createErrorStatus (int code, String message, Throwable exception) {
        return new Status (IStatus.ERROR, ClipboardPlugin.getPlugin ().getSymbolicName (), code, message, exception);
    }

    private static final class Descriptor {
        private final EPackage ePackage;
        private IClipboardSupportFactory factory;
        private IConfigurationElement config;
        private int priority = 2;

        Descriptor (IConfigurationElement config) throws CoreException {
            this.config = config;
            String nsUri = config.getAttribute (E_NSURI);
            if ((nsUri == null) || (nsUri.length () == 0)) {
                throw new CoreException (createErrorStatus (ClipboardStatusCodes.CLIPBOARDSUPPORT_MISSING_NSURI, ClipboardPlugin.getPlugin ().getString ("missing.nsUri_ERROR_", new Object [] {ClipboardPlugin.EXTPT_CLIPBOARDSUPPORT, config.getDeclaringExtension ().getNamespace ()})));
            }
            ePackage = EPackage.Registry.INSTANCE.getEPackage (nsUri);
            if (ePackage == null) {
                throw new CoreException (createErrorStatus (ClipboardStatusCodes.CLIPBOARDSUPPORT_UNRESOLVED_NSURI, ClipboardPlugin.getPlugin ().getString ("unresolved.nsUri_ERROR_", new Object [] {ClipboardPlugin.EXTPT_CLIPBOARDSUPPORT, nsUri, config.getDeclaringExtension ().getNamespace ()})));
            }
            String className = config.getAttribute (E_CLASS);
            if ((className == null) || (className.length () == 0)) {
                throw new CoreException (createErrorStatus (ClipboardStatusCodes.CLIPBOARDSUPPORT_MISSING_CLASS, ClipboardPlugin.getPlugin ().getString ("missing.class_ERROR_", new Object [] {ClipboardPlugin.EXTPT_CLIPBOARDSUPPORT, config.getDeclaringExtension ().getNamespace ()})));
            }
            String priorityStr = config.getAttribute (E_PRIORITY);
            if (priorityStr != null) {
                priorityStr = priorityStr.toLowerCase ();
                if (PRIORITIES.contains (priorityStr)) {
                    priority = PRIORITIES.indexOf (priorityStr);
                }
            }
        }

        EPackage getEPackage () {
            return ePackage;
        }

        int getPriority () {
            return priority;
        }

        IClipboardSupportFactory getFactory () {
            if ((factory == null) && (config != null)) {
                factory = createFactory ();
            }
            return factory;
        }

        private IClipboardSupportFactory createFactory () {
            IClipboardSupportFactory result = null;
            try {
                result = (IClipboardSupportFactory) config.createExecutableExtension (E_CLASS);
            } catch (CoreException e) {
                ClipboardPlugin.getPlugin ().log (e.getStatus ());
            } catch (Exception e) {
                ClipboardPlugin.getPlugin ().log (createErrorStatus (ClipboardStatusCodes.CLIPBOARDSUPPORT_FACTORY_FAILED, ClipboardPlugin.getPlugin ().getString ("factory.failed_ERROR_", new Object [] {IClipboardSupportFactory.class.getName (), config.getAttribute (E_CLASS)}), e));
            } finally {
                config = null;
            }
            return result;
        }

    }

}

