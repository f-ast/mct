package org.eclipse.gmf.runtime.notation;

import java.util.Arrays;

import java.util.Collections;

import java.util.List;

import org.eclipse.emf.common.util.AbstractEnumerator;

public final class SortingDirection extends AbstractEnumerator {
    public static final int ASCENDING = 0;
    public static final int DESCENDING = 1;
    public static final SortingDirection ASCENDING_LITERAL = new SortingDirection (ASCENDING, "Ascending", "Ascending");
    public static final SortingDirection DESCENDING_LITERAL = new SortingDirection (DESCENDING, "Descending", "Descending");
    private static final SortingDirection [] VALUES_ARRAY = new SortingDirection [] {ASCENDING_LITERAL, DESCENDING_LITERAL,};
    public static final List VALUES = Collections.unmodifiableList (Arrays.asList (VALUES_ARRAY));

    public static SortingDirection get (String literal) {
        for (int i = 0;
        i < VALUES_ARRAY.length; ++ i) {
            SortingDirection result = VALUES_ARRAY [i];
            if (result.toString ().equals (literal)) {
                return result;
            }
        }
        return null;
    }

    public static SortingDirection getByName (String name) {
        for (int i = 0;
        i < VALUES_ARRAY.length; ++ i) {
            SortingDirection result = VALUES_ARRAY [i];
            if (result.getName ().equals (name)) {
                return result;
            }
        }
        return null;
    }

    public static SortingDirection get (int value) {
        switch (value) {
            case ASCENDING :
                return ASCENDING_LITERAL;
            case DESCENDING :
                return DESCENDING_LITERAL;
        }
        return null;
    }

    private SortingDirection (int value, String name, String literal) {
        super (value, name, literal);
    }

}

