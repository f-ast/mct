package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import org.eclipse.draw2d.Graphics;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.Polyline;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.PointList;

import org.eclipse.draw2d.geometry.PrecisionRectangle;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.editparts.AbstractConnectionEditPart;

import org.eclipse.gef.editpolicies.NonResizableEditPolicy;

import org.eclipse.gef.requests.ChangeBoundsRequest;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.figures.LabelHelper;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.draw2d.ui.geometry.PointListUtilities;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.View;

public class ResizableShapeLabelEditPolicy extends ResizableShapeEditPolicy {
    private Polyline tether = null;

    protected void eraseChangeBoundsFeedback (ChangeBoundsRequest request) {
        super.eraseChangeBoundsFeedback (request);
        if (tether != null) removeFeedback (tether);

        tether = null;
    }

    protected IFigure createDragSourceFeedbackFigure () {
        IFigure feedback = super.createDragSourceFeedbackFigure ();
        tether = new Polyline ();
        tether.setLineStyle (Graphics.LINE_DASHDOT);
        tether.setForegroundColor (((IGraphicalEditPart) getHost ().getParent ()).getFigure ().getForegroundColor ());
        addFeedback (tether);
        return feedback;
    }

    protected Command getMoveCommand (ChangeBoundsRequest request) {
        Point refPoint = getReferencePoint ();
        PointList pl = new PointList ();
        if (getHost ().getParent () instanceof AbstractConnectionEditPart) {
            pl = ((AbstractConnectionEditPart) getHost ().getParent ()).getConnectionFigure ().getPoints ();
        } else {
            pl.addPoint (getReferencePoint ());
        }
        PrecisionRectangle rect = new PrecisionRectangle (getInitialFeedbackBounds ().getCopy ());
        getHostFigure ().translateToAbsolute (rect);
        rect.translate (request.getMoveDelta ());
        rect.resize (request.getSizeDelta ());
        getHostFigure ().translateToRelative (rect);
        adjustRect (rect);
        Point normalPoint = LabelHelper.offsetFromRelativeCoordinate (getHostFigure (), rect, refPoint);
        ICommand moveCommand = new SetBoundsCommand (DiagramUIMessages.MoveLabelCommand_Label_Location, new EObjectAdapter ((View) getHost ().getModel ()), normalPoint);
        return new EtoolsProxyCommand (moveCommand);
    }

    protected void adjustRect (PrecisionRectangle rect) {
        rect.translate (rect.width / 2, rect.height / 2);
    }

    protected void showChangeBoundsFeedback (ChangeBoundsRequest request) {
        super.showChangeBoundsFeedback (request);
        IFigure p = getDragSourceFeedbackFigure ();
        Rectangle r = p.getBounds ();
        Point refPoint = getReferencePoint ();
        PrecisionRectangle rect = new PrecisionRectangle (getInitialFeedbackBounds ().getCopy ());
        getHostFigure ().translateToAbsolute (rect);
        rect.translate (request.getMoveDelta ());
        rect.resize (request.getSizeDelta ());
        p.translateToRelative (rect);
        p.setBounds (rect);
        PrecisionRectangle ref = new PrecisionRectangle (new Rectangle (refPoint.x, refPoint.y, 0, 0));
        getHostFigure ().translateToAbsolute (ref);
        p.translateToRelative (ref);
        Point midTop = new Point (r.x + r.width / 2, r.y);
        Point midBottom = new Point (r.x + r.width / 2, r.y + r.height);
        Point midLeft = new Point (r.x, r.y + r.height / 2);
        Point midRight = new Point (r.x + r.width, r.y + r.height / 2);
        Point startPoint = midTop;
        int x = r.x + r.width / 2 - refPoint.x;
        int y = r.y + r.height / 2 - refPoint.y;
        if (y > 0 && y > x && y > - x) startPoint = midTop;
        else if (y < 0 && y < x && y < - x) startPoint = midBottom;
        else if (x < 0 && y > x && y < - x) startPoint = midRight;
        else startPoint = midLeft;

        tether.setStart (startPoint);
        tether.setEnd (ref.getLocation ());
    }

    protected Command getResizeCommand (ChangeBoundsRequest request) {
        PrecisionRectangle rect = new PrecisionRectangle (getInitialFeedbackBounds ().getCopy ());
        getHostFigure ().translateToAbsolute (rect);
        rect.translate (request.getMoveDelta ());
        rect.resize (request.getSizeDelta ());
        getHostFigure ().translateToRelative (rect);
        View shapeView = (View) getHost ().getModel ();
        ICommand resizeCommand = new SetBoundsCommand (DiagramUIMessages.SetLocationCommand_Label_Resize, new EObjectAdapter (shapeView), rect.getSize ());
        return new EtoolsProxyCommand (resizeCommand);
    }

    private Point getReferencePoint () {
        if (getHost ().getParent () instanceof AbstractConnectionEditPart) {
            PointList ptList = ((AbstractConnectionEditPart) getHost ().getParent ()).getConnectionFigure ().getPoints ();
            return PointListUtilities.calculatePointRelativeToLine (ptList, 0, 50, true);
        } else {
            return ((GraphicalEditPart) getHost ().getParent ()).getFigure ().getBounds ().getLocation ();
        }
    }

}

