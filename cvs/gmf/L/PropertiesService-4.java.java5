package org.eclipse.gmf.runtime.common.ui.services.properties;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.core.runtime.IExtension;

import org.eclipse.core.runtime.Platform;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.service.IProvider;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.common.ui.services.properties.internal.PSFCommonUIPlugin;

import org.osgi.framework.Bundle;

public class PropertiesService extends Service implements IPropertiesProvider {
    protected static class PropertiesProviderDescriptor extends Service.ProviderDescriptor {
        private static final String A_PLUGIN_LOADED = "verifyPluginLoaded";

        protected PropertiesProviderDescriptor (IConfigurationElement element) {
            super (element);
        }

        public boolean provides (IOperation operation) {
            String attr_value = getElement ().getAttribute (A_PLUGIN_LOADED);
            Boolean pluginLoadedVerify = attr_value == null ? new Boolean (false) : new Boolean (attr_value);
            if (pluginLoadedVerify.booleanValue () && ! isPluginLoaded ()) return false;

            IProvider theProvider = getProvider ();
            return null != theProvider && theProvider.provides (operation);
        }

        private boolean isPluginLoaded () {
            String pluginId = ((IExtension) getElement ().getParent ()).getNamespace ();
            Bundle bundle = Platform.getBundle (pluginId);
            return null != bundle && bundle.getState () == org.osgi.framework.Bundle.ACTIVE;
        }

    }

    static class ModifiersService extends Service {

        public ModifiersService () {
            super ();
        }

        public ICompositePropertySource applyModifiers (ICompositePropertySource propertySource) {
            ApplyModifiersOperation operation = new ApplyModifiersOperation (propertySource);
            this.execute (ExecutionStrategy.FORWARD, operation);
            return operation.getPropertySource ();
        }

    }

    private static final String E_MODIFIER_PROVIDER = "Provider";
    private static final String A_CLASS = "class";
    private static final String STAR = "*";
    private static PropertiesService uniqueInstance;
    private Map modifiersServices = new HashMap ();
    private Map modifiersMap = new HashMap ();
    private static final String PROPERTY_PROVIDERS_EXT_P_NAME = "propertiesProviders";
    private static final String PROPERTY_MODIFIERS_EXT_P_NAME = "propertyModifiers";

    public static PropertiesService getInstance () {
        if (uniqueInstance == null) {
            uniqueInstance = new PropertiesService ();
        }
        return uniqueInstance;
    }

    private PropertiesService () {
        super ();
        String pluginId = PSFCommonUIPlugin.getPluginId ();
        configureProviders (pluginId, PROPERTY_PROVIDERS_EXT_P_NAME);
        configureModifiers (Platform.getExtensionRegistry ().getExtensionPoint (pluginId, PROPERTY_MODIFIERS_EXT_P_NAME).getConfigurationElements ());
    }

    public ICompositePropertySource getPropertySource (Object object) {
        GetPropertySourceOperation operation = new GetPropertySourceOperation (object);
        this.execute (ExecutionStrategy.FORWARD, operation);
        return operation.getPropertySource ();
    }

    public void applyModifiers (IPropertiesProvider provider, ICompositePropertySource propertySource) {
        ModifiersService modifiersService = getModifiersService (provider);
        if (modifiersService != null) modifiersService.applyModifiers (propertySource);

    }

    protected ModifiersService getModifiersService (IPropertiesProvider provider) {
        return (ModifiersService) modifiersServices.get (provider.getClass ().getName ());
    }

    public final void configureModifiers (IConfigurationElement [] elements) {
        List modifiersApplicableForAllProviders = new ArrayList ();
        for (int i = 0;
        i < elements.length; i ++) {
            IConfigurationElement element = elements [i];
            IConfigurationElement [] associatedProviders = element.getChildren (E_MODIFIER_PROVIDER);
            for (int p = 0;
            p < associatedProviders.length; p ++) {
                IConfigurationElement associatedProvider = associatedProviders [p];
                String providerId = associatedProvider.getAttribute (A_CLASS);
                if (providerId.equals (STAR)) modifiersApplicableForAllProviders.add (element);
                else {
                    if (! modifiersMap.containsKey (providerId)) modifiersMap.put (providerId, new ArrayList ());

                    ((List) modifiersMap.get (providerId)).add (element);
                }
            }
        }
        for (Iterator e = modifiersMap.keySet ().iterator ();
        e.hasNext ();) {
            String providerId = (String) e.next ();
            ArrayList modifierElements = (ArrayList) modifiersMap.get (providerId);
            modifierElements.addAll (modifiersApplicableForAllProviders);
            int modifiersForProvider = modifierElements.size ();
            if (modifiersForProvider > 0) {
                IConfigurationElement [] elementsArray = new IConfigurationElement [modifiersForProvider];
                System.arraycopy (modifierElements.toArray (), 0, elementsArray, 0, modifierElements.size ());
                initModifierServiceFor (providerId, elementsArray);
            }
        }
    }

    private void initModifierServiceFor (String providerId, IConfigurationElement [] modifierElements) {
        ModifiersService modifierService = new ModifiersService ();
        modifierService.configureProviders (modifierElements);
        modifiersServices.put (providerId, modifierService);
    }

    protected ProviderDescriptor newProviderDescriptor (IConfigurationElement element) {
        String providerId = element.getAttribute (A_CLASS);
        modifiersMap.put (providerId, new ArrayList ());
        return new PropertiesProviderDescriptor (element);
    }

}

