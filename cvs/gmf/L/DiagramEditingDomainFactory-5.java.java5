package org.eclipse.gmf.runtime.diagram.core;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.List;

import org.eclipse.core.commands.operations.IOperationHistory;

import org.eclipse.core.commands.operations.OperationHistoryFactory;

import org.eclipse.emf.common.command.Command;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.edit.provider.ComposedAdapterFactory;

import org.eclipse.emf.transaction.NotificationFilter;

import org.eclipse.emf.transaction.ResourceSetChangeEvent;

import org.eclipse.emf.transaction.ResourceSetListener;

import org.eclipse.emf.transaction.ResourceSetListenerImpl;

import org.eclipse.emf.transaction.RollbackException;

import org.eclipse.emf.transaction.Transaction;

import org.eclipse.emf.transaction.TransactionalCommandStack;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.impl.FilterManager;

import org.eclipse.emf.transaction.impl.InternalTransaction;

import org.eclipse.emf.transaction.impl.ReadWriteValidatorImpl;

import org.eclipse.emf.transaction.impl.TransactionValidator;

import org.eclipse.emf.transaction.impl.TransactionalEditingDomainImpl;

import org.eclipse.emf.transaction.util.CompositeChangeDescription;

import org.eclipse.emf.workspace.WorkspaceEditingDomainFactory;

import org.eclipse.emf.workspace.impl.WorkspaceCommandStackImpl;

import org.eclipse.gmf.runtime.diagram.core.internal.listener.NotationSemProc;

import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;

import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;

public class DiagramEditingDomainFactory extends GMFEditingDomainFactory {
    private static class DiagramEditingDomain extends TransactionalEditingDomainImpl {
        private InternalTransaction originatingTransaction = null;
        private DiagramEventBroker deb = null;
        private ResourceSetListener debWrapper = null;

        public void addResourceSetListener (ResourceSetListener l) {
            if (l.getClass () == DiagramEventBroker.class) {
                assert deb == null;
                deb = (DiagramEventBroker) l;
                debWrapper = new ResourceSetListenerImpl () {

                    public boolean isAggregatePrecommitListener () {
                        return deb.isAggregatePrecommitListener ();
                    }

                    public boolean isPrecommitOnly () {
                        return true;
                    }

                    public Command transactionAboutToCommit (ResourceSetChangeEvent event) throws RollbackException {
                        return deb.transactionAboutToCommit (event);
                    }

                    public void resourceSetChanged (ResourceSetChangeEvent event) {
                        deb.resourceSetChanged (event);
                    }

                    public NotificationFilter getFilter () {
                        return deb.getFilter ();
                    }

                    public boolean isPostcommitOnly () {
                        return false;
                    }

                }

                ;
                super.addResourceSetListener (debWrapper);
            } else {
                super.addResourceSetListener (l);
            }
        }

        public void removeResourceSetListener (ResourceSetListener l) {
            if (l.getClass () == DiagramEventBroker.class) {
                assert deb != null;
                deb = null;
                super.removeResourceSetListener (debWrapper);
                debWrapper = null;
            } else {
                super.removeResourceSetListener (l);
            }
        }

        public DiagramEditingDomain (AdapterFactory adapterFactory, ResourceSet resourceSet) {
            super (adapterFactory, resourceSet);
        }

        public DiagramEditingDomain (AdapterFactory adapterFactory, TransactionalCommandStack stack, ResourceSet resourceSet) {
            super (adapterFactory, stack, resourceSet);
        }

        public DiagramEditingDomain (AdapterFactory adapterFactory, TransactionalCommandStack stack) {
            super (adapterFactory, stack);
        }

        public DiagramEditingDomain (AdapterFactory adapterFactory) {
            super (adapterFactory);
        }

        protected void postcommit (InternalTransaction tx) {
            try {
                List notifications = getValidator ().getNotificationsForPostcommit (tx);
                if (deb != null && notifications != null && ! notifications.isEmpty ()) {
                    TransactionValidator originalValidator = null;
                    if (originatingTransaction == null) {
                        originatingTransaction = tx;
                        originalValidator = getValidator ();
                        setValidator (new ReadWriteValidatorImpl ());
                    } else {
                        ((CompositeChangeDescription) originatingTransaction.getChangeDescription ()).add (tx.getChangeDescription ());
                        originatingTransaction.getNotifications ().addAll (notifications);
                    }
                    try {
                        ArrayList cache = new ArrayList (notifications.size ());
                        List filtered = FilterManager.getInstance ().select (notifications, deb.getFilter (), cache);
                        HashMap options = new HashMap (originatingTransaction.getOptions ());
                        options.put (Transaction.OPTION_NO_UNDO, Boolean.FALSE);
                        InternalTransaction newTx = startTransaction (false, options);
                        deb.resourceSetChanged (new ResourceSetChangeEvent (this, tx, filtered));
                        newTx.commit ();
                    } catch (RollbackException e) {
                    } finally {
                        if (originatingTransaction == tx) {
                            originatingTransaction = null;
                            getValidator ().dispose ();
                            setValidator (originalValidator);
                        }
                    }
                }
            } catch (InterruptedException e) {
            }
            if (originatingTransaction == null) {
                super.postcommit (tx);
            }
        }

    }

    private static DiagramEditingDomainFactory instance = new DiagramEditingDomainFactory ();

    public static WorkspaceEditingDomainFactory getInstance () {
        return instance;
    }

    protected void configure (TransactionalEditingDomain domain) {
        super.configure (domain);
        domain.addResourceSetListener (new NotationSemProc ());
    }

    public TransactionalEditingDomain createEditingDomain () {
        TransactionalEditingDomain result = createEditingDomain (OperationHistoryFactory.getOperationHistory ());
        configure (result);
        return result;
    }

    public TransactionalEditingDomain createEditingDomain (IOperationHistory history) {
        WorkspaceCommandStackImpl stack = new WorkspaceCommandStackImpl (history);
        TransactionalEditingDomain result = new DiagramEditingDomain (new ComposedAdapterFactory (ComposedAdapterFactory.Descriptor.Registry.INSTANCE), stack);
        mapResourceSet (result);
        configure (result);
        return result;
    }

    public TransactionalEditingDomain createEditingDomain (ResourceSet rset) {
        TransactionalEditingDomain result = createEditingDomain (rset, OperationHistoryFactory.getOperationHistory ());
        configure (result);
        return result;
    }

    public TransactionalEditingDomain createEditingDomain (ResourceSet rset, IOperationHistory history) {
        WorkspaceCommandStackImpl stack = new WorkspaceCommandStackImpl (history);
        TransactionalEditingDomain result = new DiagramEditingDomain (new ComposedAdapterFactory (ComposedAdapterFactory.Descriptor.Registry.INSTANCE), stack, rset);
        mapResourceSet (result);
        configure (result);
        return result;
    }

}

