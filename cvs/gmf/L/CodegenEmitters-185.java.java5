package org.eclipse.gmf.codegen.util;

import java.lang.reflect.InvocationTargetException;

import java.net.MalformedURLException;

import java.net.URL;

import java.util.ArrayList;

import java.util.Map;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.core.runtime.Platform;

import org.eclipse.core.runtime.Status;

import org.eclipse.emf.codegen.jet.JETCompiler;

import org.eclipse.emf.codegen.merge.java.JControlModel;

import org.eclipse.emf.codegen.merge.java.JMerger;

import org.eclipse.emf.codegen.util.CodeGenUtil;

import org.eclipse.emf.common.CommonPlugin;

import org.eclipse.emf.common.util.URI;

import org.eclipse.gmf.common.UnexpectedBehaviourException;

import org.eclipse.gmf.internal.common.codegen.BinaryEmitter;

import org.eclipse.gmf.internal.common.codegen.DefaultTextMerger;

import org.eclipse.gmf.internal.common.codegen.GIFEmitter;

import org.eclipse.gmf.internal.common.codegen.JETGIFEmitterAdapter;

import org.eclipse.gmf.internal.common.codegen.TextEmitter;

import org.eclipse.gmf.internal.common.codegen.TextMerger;

import org.eclipse.gmf.internal.common.codegen.XpandTextEmitter;

import org.eclipse.gmf.internal.xpand.ResourceManager;

import org.eclipse.gmf.internal.xpand.util.BundleResourceManager;

import org.osgi.framework.Bundle;

public class CodegenEmitters {
    private static final String PATH_SEPARATOR = "::";
    private final ResourceManager myResourceManager;
    private final URL [] myLocations;
    private Map < String, Object > myGlobals;

    public CodegenEmitters (boolean useBaseTemplatesOnly, String templateDirectory, boolean includeDynamicModelTemplates) {
        ArrayList < URL > urls = new ArrayList < URL > (5);
        if (! useBaseTemplatesOnly) {
            urls.add (getDynamicTemplatesURL (templateDirectory));
        }
        if (includeDynamicModelTemplates) {
            urls.add (getTemplatesBundle ().getEntry ("/templates-dynmodel/"));
        }
        urls.add (getTemplatesBundle ().getEntry ("/templates/"));
        myLocations = urls.toArray (new URL [urls.size ()]);
        myResourceManager = new BundleResourceManager (myLocations);
    }

    void setGlobals (Map < String, Object > globals) {
        myGlobals = globals;
    }

    public TextMerger createMergeService () {
        URL controlFile = getJMergeControlFile ();
        if (controlFile != null) {
            JControlModel controlModel = new JControlModel ();
            controlModel.initialize (CodeGenUtil.instantiateFacadeHelper (JMerger.DEFAULT_FACADE_HELPER_CLASS), controlFile.toString ());
            if (! controlModel.canMerge ()) {
                throw new IllegalStateException ("Can not initialize JControlModel");
            }
            return new DefaultTextMerger (controlModel);
        }
        return null;
    }

    private static Bundle getTemplatesBundle () {
        return Platform.getBundle ("org.eclipse.gmf.codegen");
    }

    private static URL getDynamicTemplatesURL (String templateDirectory) {
        if (templateDirectory != null) {
            URI templatesURI = templateDirectory.indexOf (":") == - 1 ? URI.createPlatformResourceURI (templateDirectory, true) : URI.createURI (templateDirectory);
            try {
                return new URL (CommonPlugin.resolve (templatesURI).toString ());
            } catch (MalformedURLException e) {
                Platform.getLog (getTemplatesBundle ()).log (new Status (IStatus.ERROR, getTemplatesBundle ().getSymbolicName (), 0, "Incorrecct dynamic templates location", e));
            }
        }
        return null;
    }

    public URL getJMergeControlFile () {
        return getTemplatesBundle ().getEntry ("/templates/emf-merge.xml");
    }

    public TextEmitter getCreateNodeCommandEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::commands::CreateNodeCommand");
    }

    public TextEmitter getCreateLinkCommandEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::commands::CreateLinkCommand");
    }

    public TextEmitter getCreateRefLinkCommandEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::commands::CreateRefLinkCommand");
    }

    public TextEmitter getReorientLinkCommandEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::commands::ReorientLinkCommand");
    }

    public TextEmitter getReorientRefLinkCommandEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::commands::ReorientRefLinkCommand");
    }

    public TextEmitter getReorientLinkViewCommandEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::commands::ReorientLinkViewCommand");
    }

    public TextEmitter getCreateShortcutDecorationsCommandEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::commands::CreateShortcutDecorationsCommand");
    }

    public TextEmitter getBaseEditHelperEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::edithelpers::BaseEditHelper");
    }

    public TextEmitter getEditHelperEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::edithelpers::EditHelper");
    }

    public TextEmitter getEditHelperAdviceEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::edithelpers::EditHelperAdvice");
    }

    public TextEmitter getDiagramEditPartEmitter () throws UnexpectedBehaviourException {
        return getMainEmitter ("diagram::editparts::DiagramEditPart");
    }

    public TextEmitter getNodeEditPartEmitter () throws UnexpectedBehaviourException {
        return getMainEmitter ("diagram::editparts::NodeEditPart");
    }

    public TextEmitter getNodeLabelEditPartEmitter () throws UnexpectedBehaviourException {
        return getMainEmitter ("diagram::editparts::NodeLabelEditPart");
    }

    public TextEmitter getExternalNodeLabelEditPartEmitter () throws UnexpectedBehaviourException {
        return getMainEmitter ("diagram::editparts::ExternalNodeLabelEditPart");
    }

    public TextEmitter getChildNodeLabelEditPartEmitter () throws UnexpectedBehaviourException {
        return getMainEmitter ("diagram::editparts::ChildNodeLabelEditPart");
    }

    public TextEmitter getCompartmentEditPartEmitter () throws UnexpectedBehaviourException {
        return getMainEmitter ("diagram::editparts::CompartmentEditPart");
    }

    public TextEmitter getLinkEditPartEmitter () throws UnexpectedBehaviourException {
        return getMainEmitter ("diagram::editparts::LinkEditPart");
    }

    public TextEmitter getLinkLabelEditPartEmitter () throws UnexpectedBehaviourException {
        return getMainEmitter ("diagram::editparts::LinkLabelEditPart");
    }

    public TextEmitter getEditPartFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::editparts::EditPartFactory");
    }

    public TextEmitter getBaseItemSemanticEditPolicyEmitter () {
        return getPrimaryEmitter ("xpt::diagram::editpolicies::BaseItemSemanticEditPolicy");
    }

    public TextEmitter getOpenDiagramEditPolicyEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::editpolicies::OpenDiagram");
    }

    public TextEmitter getDiagramCanonicalEditPolicyEmitter () {
        return getPrimaryEmitter ("xpt::diagram::editpolicies::DiagramCanonicalEditPolicy");
    }

    public TextEmitter getChildContainerCanonicalEditPolicyEmitter () {
        return getPrimaryEmitter ("xpt::diagram::editpolicies::ChildContainerCanonicalEditPolicy");
    }

    public TextEmitter getDiagramItemSemanticEditPolicyEmitter () {
        return getPrimaryEmitter ("xpt::diagram::editpolicies::DiagramItemSemanticEditPolicy");
    }

    public TextEmitter getCompartmentItemSemanticEditPolicyEmitter () {
        return getPrimaryEmitter ("xpt::diagram::editpolicies::CompartmentItemSemanticEditPolicy");
    }

    public TextEmitter getGraphicalNodeEditPolicyEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::editpolicies::GraphicalNodeEditPolicy");
    }

    public TextEmitter getNodeItemSemanticEditPolicyEmitter () {
        return getPrimaryEmitter ("xpt::diagram::editpolicies::NodeItemSemanticEditPolicy");
    }

    public TextEmitter getLinkItemSemanticEditPolicyEmitter () {
        return getPrimaryEmitter ("xpt::diagram::editpolicies::LinkItemSemanticEditPolicy");
    }

    public TextEmitter getTextSelectionEditPolicyEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editpolicies::TextFeedback::TextSelectionEditPolicy");
    }

    public TextEmitter getTextNonResizableEditPolicyEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::diagram::editpolicies::TextFeedback::TextNonResizableEditPolicy");
    }

    public TextEmitter getDiagramViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::DiagramViewFactory");
    }

    public TextEmitter getNodeViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::NodeViewFactory");
    }

    public TextEmitter getLabelNodeViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::LabelNodeViewFactory");
    }

    public TextEmitter getCompartmentViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::CompartmentViewFactory");
    }

    public TextEmitter getLinkViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::LinkViewFactory");
    }

    public TextEmitter getFloatingLabelViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::FloatingLabelViewFactory");
    }

    public TextEmitter getLabelViewFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::views::LabelViewFactory");
    }

    public TextEmitter getDiagramUpdaterEmitter () {
        return getPrimaryEmitter ("xpt::diagram::updater::DiagramUpdater");
    }

    public TextEmitter getUpdateCommandEmitter () {
        return getPrimaryEmitter ("xpt::diagram::updater::UpdateCommand");
    }

    public TextEmitter getNodeDescriptorEmitter () {
        return getPrimaryEmitter ("xpt::diagram::updater::NodeDescriptor");
    }

    public TextEmitter getLinkDescriptorEmitter () {
        return getPrimaryEmitter ("xpt::diagram::updater::LinkDescriptor");
    }

    public TextEmitter getAbstractParserEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::parsers::AbstractParser");
    }

    public String getAbstractParserName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::parsers::AbstractParser", input);
    }

    public TextEmitter getPredefinedParserEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("parsers::PredefinedParser::Main");
    }

    public String getPredefinedParserName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("parsers::PredefinedParser", input);
    }

    public TextEmitter getParserProviderEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("parsers::ParserProvider::Main");
    }

    public TextEmitter getElementInitializersEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::providers::ElementInitializers");
    }

    public TextEmitter getElementTypesEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::providers::ElementTypes");
    }

    public TextEmitter getViewProviderEmitter () {
        return getPrimaryEmitter ("xpt::providers::ViewProvider");
    }

    public TextEmitter getEditPartProviderEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::providers::EditPartProvider");
    }

    public TextEmitter getContributionItemProviderEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::providers::ContributionItemProvider");
    }

    public TextEmitter getModelingAssistantProviderEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::providers::ModelingAssistantProvider");
    }

    public TextEmitter getIconProviderEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::providers::IconProvider");
    }

    public TextEmitter getMarkerNavigationProviderEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::providers::MarkerNavigationProvider");
    }

    public TextEmitter getValidationProviderEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::providers::ValidationProvider");
    }

    public TextEmitter getValidationDecoratorProviderEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::providers::ValidationDecoratorProvider");
    }

    public TextEmitter getShortcutsDecoratorProviderEmitter () {
        return getPrimaryEmitter ("xpt::providers::ShortcutsDecoratorProvider");
    }

    public TextEmitter getMetricProviderEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::providers::MetricProvider");
    }

    public TextEmitter getAbstractExpressionEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::expressions::AbstractExpression");
    }

    public TextEmitter getOCLExpressionFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::expressions::OCLExpressionFactory");
    }

    public TextEmitter getRegexpExpressionFactoryEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::expressions::RegexpExpressionFactory");
    }

    public TextEmitter getPropertySheetLabelProviderEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::propsheet::LabelProvider::Class");
    }

    public TextEmitter getPropertySectionEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::propsheet::PropertySection::Class");
    }

    public TextEmitter getValidateActionEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::ValidateAction");
    }

    public String getValidateActionName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::ValidateAction", input);
    }

    public TextEmitter getValidationMarkerEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::ValidationMarker");
    }

    public String getValidationMarkerName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::ValidationMarker", input);
    }

    public TextEmitter getDiagramContentInitializerEmitter () {
        return getPrimaryEmitter ("xpt::editor::DiagramContentInitializer");
    }

    public TextEmitter getShortcutPropertyTesterEmitter () {
        return getPrimaryEmitter ("xpt::editor::ShortcutPropertyTester");
    }

    public String getShortcutCreationWizardName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::ShortcutCreationWizard", input);
    }

    public TextEmitter getShortcutCreationWizardEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::ShortcutCreationWizard");
    }

    public String getModelElementSelectionPageName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::ModelElementSelectionPage", input);
    }

    public TextEmitter getModelElementSelectionPageEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::ModelElementSelectionPage");
    }

    public String getInitDiagramFileActionName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::InitDiagramFileAction", input);
    }

    public TextEmitter getInitDiagramFileActionEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::InitDiagramFileAction");
    }

    public String getNewDiagramFileWizardName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::NewDiagramFileWizard", input);
    }

    public TextEmitter getNewDiagramFileWizardEmitter () {
        return getPrimaryEmitter ("xpt::editor::NewDiagramFileWizard");
    }

    public TextEmitter getPaletteEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("xpt::editor::palette::PaletteFactory::Factory");
    }

    public TextEmitter getDiagramEditorUtilEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::DiagramEditorUtil");
    }

    public TextEmitter getVisualIDRegistryEmitter () {
        return getPrimaryEmitter ("xpt::editor::VisualIDRegistry");
    }

    public TextEmitter getCreationWizardEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::CreationWizard");
    }

    public TextEmitter getCreationWizardPageEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::CreationWizardPage");
    }

    public TextEmitter getDeleteElementActionEmitter () {
        return getPrimaryEmitter ("xpt::editor::DeleteElementAction");
    }

    public String getDeleteElementActionName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::DeleteElementAction", input);
    }

    public TextEmitter getDiagramEditorContextMenuProviderEmitter () {
        return getPrimaryEmitter ("xpt::editor::DiagramEditorContextMenuProvider");
    }

    public String getDiagramEditorContextMenuProviderName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::editor::DiagramEditorContextMenuProvider", input);
    }

    public TextEmitter getEditorEmitter () {
        return getPrimaryEmitter ("xpt::editor::Editor");
    }

    public TextEmitter getCreateShortcutActionEmitter () {
        return getPrimaryEmitter ("xpt::editor::CreateShortcutAction");
    }

    public TextEmitter getLoadResourceActionEmitter () {
        return getPrimaryEmitter ("xpt::editor::LoadResourceAction");
    }

    public TextEmitter getElementChooserEmitter () {
        return getPrimaryEmitter ("xpt::editor::ElementChooser");
    }

    public TextEmitter getDocumentProviderEmitter () {
        return getPrimaryEmitter ("xpt::editor::DocumentProvider");
    }

    public TextEmitter getActionBarContributorEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::editor::ActionBarContributor");
    }

    public TextEmitter getMatchingStrategyEmitter () {
        return getPrimaryEmitter ("xpt::editor::MatchingStrategy");
    }

    public TextEmitter getDomainModelElementTesterEmitter () {
        return getPrimaryEmitter ("xpt::editor::DomainModelElementTester");
    }

    public TextEmitter getURIEditorInputTesterEmitter () {
        return getPrimaryEmitter ("xpt::editor::UriEditorInputTester");
    }

    public BinaryEmitter getShortcutImageEmitter () throws UnexpectedBehaviourException {
        return newGIFEmitter ("/xpt/editor/shortcut.gif");
    }

    public BinaryEmitter getDiagramIconEmitter () throws UnexpectedBehaviourException {
        return newGIFEmitterAdapter ("/xpt/editor/diagram.gif");
    }

    public BinaryEmitter getWizardBannerImageEmitter () throws UnexpectedBehaviourException {
        return newGIFEmitterAdapter ("/xpt/editor/wizban.gif");
    }

    public TextEmitter getModelAccessFacilityEmitter () {
        return newXpandEmitter ("Facility::Main");
    }

    public TextEmitter getNavigatorContentProviderEmitter () {
        return getPrimaryEmitter ("xpt::navigator::NavigatorContentProvider");
    }

    public TextEmitter getDomainNavigatorContentProviderEmitter () {
        return getPrimaryEmitter ("xpt::navigator::DomainNavigatorContentProvider");
    }

    public TextEmitter getDomainNavigatorLabelProviderEmitter () {
        return getPrimaryEmitter ("xpt::navigator::DomainNavigatorLabelProvider");
    }

    public TextEmitter getDomainNavigatorItemEmitter () {
        return getPrimaryEmitter ("xpt::navigator::DomainNavigatorItem");
    }

    public TextEmitter getNavigatorLabelProviderEmitter () {
        return getPrimaryEmitter ("xpt::navigator::NavigatorLabelProvider");
    }

    public TextEmitter getNavigatorLinkHelperEmitter () {
        return getPrimaryEmitter ("xpt::navigator::NavigatorLinkHelper");
    }

    public TextEmitter getNavigatorSorterEmitter () {
        return getPrimaryEmitter ("xpt::navigator::NavigatorSorter");
    }

    public TextEmitter getNavigatorActionProviderEmitter () {
        return getPrimaryEmitter ("xpt::navigator::NavigatorActionProvider");
    }

    public TextEmitter getAbstractNavigatorItemEmitter () {
        return getPrimaryEmitter ("xpt::navigator::AbstractNavigatorItem");
    }

    public TextEmitter getNavigatorGroupEmitter () {
        return getPrimaryEmitter ("xpt::navigator::NavigatorGroup");
    }

    public TextEmitter getNavigatorItemEmitter () {
        return getPrimaryEmitter ("xpt::navigator::NavigatorItem");
    }

    public BinaryEmitter getGroupIconEmitter () throws UnexpectedBehaviourException {
        return newGIFEmitter ("/xpt/navigator/navigatorGroup.gif");
    }

    public TextEmitter getPreferenceInitializerEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::diagram::preferences::PreferenceInitializer");
    }

    public String getPreferenceInitializerName (Object...input) throws UnexpectedBehaviourException {
        return getQualifiedClassName ("xpt::diagram::preferences::PreferenceInitializer", input);
    }

    public TextEmitter getStandardPreferencePageEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("impl::preferences::StandardPage::Main");
    }

    public TextEmitter getCustomPreferencePageEmitter () throws UnexpectedBehaviourException {
        return newXpandEmitter ("impl::preferences::CustomPage::Main");
    }

    public TextEmitter getActivatorEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::plugin::Activator");
    }

    public TextEmitter getBundleManifestEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::plugin::manifest");
    }

    public TextEmitter getPluginXmlEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::plugin::plugin");
    }

    public TextEmitter getPluginPropertiesEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::plugin::properties");
    }

    public TextEmitter getBuildPropertiesEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::plugin::build");
    }

    public TextEmitter getOptionsFileEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::plugin::options");
    }

    public TextEmitter getExternalizeEmitter () {
        return newXpandEmitter ("xpt::Externalizer::Access");
    }

    public TextEmitter getMessagesEmitter () {
        return newXpandEmitter ("xpt::Externalizer::Values");
    }

    public TextEmitter getApplicationEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::application::Application");
    }

    public TextEmitter getActionBarAdvisorEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::application::ActionBarAdvisor");
    }

    public TextEmitter getPerspectiveEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::application::Perspective");
    }

    public TextEmitter getWorkbenchAdvisorEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::application::WorkbenchAdvisor");
    }

    public TextEmitter getWorkbenchWindowAdvisorEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::application::WorkbenchWindowAdvisor");
    }

    public TextEmitter getWizardNewFileCreationPageEmitter () throws UnexpectedBehaviourException {
        return getPrimaryEmitter ("xpt::application::WizardNewFileCreationPage");
    }

    public TextEmitter getCustomActionEmitter () {
        return newXpandEmitter ("impl::actions::CustomAction::Main");
    }

    private TextEmitter getPrimaryEmitter (String templateName) {
        String [] parts = templateName.split (PATH_SEPARATOR);
        String definition = templateName + PATH_SEPARATOR + parts [parts.length - 1];
        return newXpandEmitter (definition);
    }

    private TextEmitter getMainEmitter (String templateFilePath) {
        return newXpandEmitter (templateFilePath + PATH_SEPARATOR + "Main");
    }

    private TextEmitter getQualifiedClassNameEmitter (String templateName) throws UnexpectedBehaviourException {
        String definition = templateName + PATH_SEPARATOR + "qualifiedClassName";
        return newXpandEmitter (definition);
    }

    private String getText (TextEmitter emitter, Object...input) throws UnexpectedBehaviourException {
        try {
            return emitter.generate (new NullProgressMonitor (), input).trim ();
        } catch (InterruptedException ie) {
            return null;
        } catch (InvocationTargetException ite) {
            throw new UnexpectedBehaviourException (ite.getCause ());
        }
    }

    private String getQualifiedClassName (String templateName, Object...input) throws UnexpectedBehaviourException {
        TextEmitter emitter = getQualifiedClassNameEmitter (templateName);
        return getText (emitter, input);
    }

    private BinaryEmitter newGIFEmitter (String relativePath) throws UnexpectedBehaviourException {
        return new GIFEmitter (checkTemplateLocation (relativePath));
    }

    private BinaryEmitter newGIFEmitterAdapter (String relativePath) throws UnexpectedBehaviourException {
        return new JETGIFEmitterAdapter (new org.eclipse.emf.codegen.util.GIFEmitter (checkTemplateLocation (relativePath)));
    }

    private String checkTemplateLocation (String relativePath) throws UnexpectedBehaviourException {
        String [] templatesPath = new String [myLocations.length];
        for (int i = 0;
        i < myLocations.length; i ++) {
            templatesPath [i] = myLocations [i].toString ();
        }
        String templateLocation = JETCompiler.find (templatesPath, relativePath);
        if (templateLocation == null) {
            throw new UnexpectedBehaviourException ("Template " + relativePath + " not found");
        }
        return templateLocation;
    }

    protected TextEmitter newXpandEmitter (String definition) {
        return new XpandTextEmitter (myResourceManager, definition, getClass ().getClassLoader (), myGlobals);
    }

}

