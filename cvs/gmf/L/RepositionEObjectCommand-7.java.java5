package org.eclipse.gmf.runtime.emf.commands.core.commands;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;

public class RepositionEObjectCommand extends AbstractTransactionalCommand {
    private EObject element;
    private int displacement;
    private EList elements;

    public RepositionEObjectCommand (TransactionalEditingDomain editingDomain, String label, EList elements, EObject element, int displacement) {
        super (editingDomain, label, getWorkspaceFiles (element));
        this.element = element;
        this.displacement = displacement;
        this.elements = elements;
    }

    protected CommandResult doExecuteWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException {
        CommandResult commandResult = null;
        try {
            int currentPosition = elements.indexOf (element);
            elements.move (currentPosition + displacement, element);
        } catch (RuntimeException exp) {
            commandResult = CommandResult.newErrorCommandResult (exp);
        }
        return (commandResult == null) ? CommandResult.newOKCommandResult () : commandResult;
    }

}

