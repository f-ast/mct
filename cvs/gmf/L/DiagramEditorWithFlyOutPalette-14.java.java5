package org.eclipse.gmf.runtime.diagram.ui.parts;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.gef.ContextMenuProvider;

import org.eclipse.gef.DefaultEditDomain;

import org.eclipse.gef.KeyHandler;

import org.eclipse.gef.Tool;

import org.eclipse.gef.palette.PaletteRoot;

import org.eclipse.gef.ui.palette.FlyoutPaletteComposite;

import org.eclipse.gef.ui.palette.PaletteContextMenuProvider;

import org.eclipse.gef.ui.palette.PaletteCustomizer;

import org.eclipse.gef.ui.palette.PaletteViewer;

import org.eclipse.gef.ui.palette.PaletteViewerProvider;

import org.eclipse.gef.ui.views.palette.PalettePage;

import org.eclipse.gef.ui.views.palette.PaletteViewerPage;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.parts.ImageFileDropTargetListener;

import org.eclipse.gmf.runtime.diagram.ui.internal.parts.PaletteToolTransferDragSourceListener;

import org.eclipse.gmf.runtime.diagram.ui.internal.parts.PaletteToolTransferDropTargetListener;

import org.eclipse.gmf.runtime.diagram.ui.services.palette.PaletteService;

import org.eclipse.gmf.runtime.diagram.ui.tools.ConnectionCreationTool;

import org.eclipse.gmf.runtime.diagram.ui.tools.CreationTool;

import org.eclipse.gmf.runtime.gef.ui.palette.customize.PaletteCustomizerEx;

import org.eclipse.gmf.runtime.gef.ui.palette.customize.PaletteViewerEx;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.jface.util.TransferDropTargetListener;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.KeyEvent;

import org.eclipse.swt.events.MouseEvent;

import org.eclipse.swt.events.MouseListener;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.ui.PlatformUI;

import org.eclipse.ui.activities.ActivityManagerEvent;

import org.eclipse.ui.activities.IActivityManagerListener;

public abstract class DiagramEditorWithFlyOutPalette extends DiagramEditor {
    class ActivityManagerListener implements IActivityManagerListener {

        public void activityManagerChanged (ActivityManagerEvent activityManagerEvent) {
            if (activityManagerEvent.haveEnabledActivityIdsChanged ()) {
                if (getEditDomain () != null && getEditDomain ().getPaletteViewer () != null && getEditDomain ().getPaletteViewer ().getPaletteRoot () != null) {
                    createPaletteRoot (getEditDomain ().getPaletteViewer ().getPaletteRoot ());
                }
            }
        }

    }

    private IActivityManagerListener activityManagerListener;
    boolean fHasFlyoutPalette = true;

    public DiagramEditorWithFlyOutPalette () {
    }

    public DiagramEditorWithFlyOutPalette (boolean hasFlyout) {
        fHasFlyoutPalette = hasFlyout;
    }

    protected static final int UNCOLLAPSED_PINNED = 4;
    protected static final int COLLAPSED = 2;
    private PaletteViewerProvider provider;
    private FlyoutPaletteComposite splitter;
    private CustomPalettePage page;

    protected void initializeGraphicalViewer () {
        if (fHasFlyoutPalette) {
            splitter.hookDropTargetListener (getGraphicalViewer ());
            super.initializeGraphicalViewer ();
            getDiagramGraphicalViewer ().addDropTargetListener ((TransferDropTargetListener) new ImageFileDropTargetListener (getDiagramGraphicalViewer ()));
            getDiagramGraphicalViewer ().addDropTargetListener (new PaletteToolTransferDropTargetListener (getGraphicalViewer ()));
        } else {
            super.initializeGraphicalViewer ();
        }
    }

    protected boolean toolSupportsAccessibility (Tool t) {
        return (t instanceof CreationTool) || (t instanceof ConnectionCreationTool);
    }

    protected PaletteViewer constructPaletteViewer () {
        return new PaletteViewerEx ();
    }

    protected PaletteViewerProvider createPaletteViewerProvider () {
        assert fHasFlyoutPalette == true;
        getEditDomain ().setPaletteRoot (createPaletteRoot (null));
        return new PaletteViewerProvider (getEditDomain ()) {

            public PaletteViewer createPaletteViewer (Composite parent) {
                PaletteViewer pViewer = constructPaletteViewer ();
                pViewer.createControl (parent);
                configurePaletteViewer (pViewer);
                hookPaletteViewer (pViewer);
                return pViewer;
            }

            protected void configurePaletteViewer (PaletteViewer viewer) {
                super.configurePaletteViewer (viewer);
                viewer.getKeyHandler ().setParent (getPaletteKeyHandler ());
                viewer.getControl ().addMouseListener (getPaletteMouseListener ());
                viewer.addDragSourceListener (new PaletteToolTransferDragSourceListener (viewer));
                viewer.setCustomizer (createPaletteCustomizer ());
            }

            private KeyHandler getPaletteKeyHandler () {
                if (paletteKeyHandler == null) {
                    paletteKeyHandler = new KeyHandler () {

                        public boolean keyReleased (KeyEvent event) {
                            if (event.keyCode == SWT.Selection) {
                                Tool tool = getPaletteViewer ().getActiveTool ().createTool ();
                                if (toolSupportsAccessibility (tool)) {
                                    tool.keyUp (event, getDiagramGraphicalViewer ());
                                    getPaletteViewer ().setActiveTool (null);
                                    return true;
                                }
                            }
                            return super.keyReleased (event);
                        }

                    }

                    ;
                }
                return paletteKeyHandler;
            }

            private MouseListener getPaletteMouseListener () {
                if (paletteMouseListener == null) {
                    paletteMouseListener = new MouseListener () {
                        private boolean clearActiveTool = false;

                        public void mouseDoubleClick (MouseEvent e) {
                            Tool tool = getPaletteViewer ().getActiveTool ().createTool ();
                            if (toolSupportsAccessibility (tool)) {
                                tool.setViewer (getDiagramGraphicalViewer ());
                                tool.setEditDomain (getDiagramGraphicalViewer ().getEditDomain ());
                                tool.mouseDoubleClick (e, getDiagramGraphicalViewer ());
                                clearActiveTool = true;
                            }
                        }

                        public void mouseDown (MouseEvent e) {
                        }

                        public void mouseUp (MouseEvent e) {
                            if (clearActiveTool) {
                                getPaletteViewer ().setActiveTool (null);
                                clearActiveTool = false;
                            }
                        }

                    }

                    ;
                }
                return paletteMouseListener;
            }

        }

        ;
    }

    KeyHandler paletteKeyHandler = null;
    MouseListener paletteMouseListener = null;

    public void setFocus () {
        if (getGraphicalControl () != null) getGraphicalControl ().setFocus ();

    }

    public void createPartControl (Composite parent) {
        if (fHasFlyoutPalette) {
            FlyoutPaletteComposite.FlyoutPreferences flyoutPrefs = new FlyoutPreferencesImpl (getPreferenceStore ());
            splitter = new FlyoutPaletteComposite (parent, SWT.NONE, getSite ().getPage (), getPaletteViewerProvider (), flyoutPrefs);
            super.createPartControl (splitter);
            splitter.setGraphicalControl (getGraphicalControl ());
            if (page != null) {
                splitter.setExternalViewer (getPaletteViewer ());
                page = null;
            }
        } else {
            super.createPartControl (parent);
        }
    }

    protected IPreferenceStore getPreferenceStore () {
        return DiagramUIPlugin.getInstance ().getPreferenceStore ();
    }

    public Object getAdapter (Class type) {
        if (fHasFlyoutPalette) {
            if (type == PalettePage.class) {
                if (splitter == null) {
                    page = new CustomPalettePage (getPaletteViewerProvider ());
                    return page;
                }
                return new CustomPalettePage (getPaletteViewerProvider ());
            }
            if (type == PaletteViewer.class) {
                return getPaletteViewer ();
            }
        }
        return super.getAdapter (type);
    }

    protected PaletteRoot createPaletteRoot (PaletteRoot existingPaletteRoot) {
        PaletteRoot paletteRoot;
        if (existingPaletteRoot == null) {
            paletteRoot = PaletteService.getInstance ().createPalette (this, getDefaultPaletteContent ());
        } else {
            PaletteService.getInstance ().updatePalette (existingPaletteRoot, this, getDefaultPaletteContent ());
            paletteRoot = existingPaletteRoot;
        }
        applyCustomizationsToPalette (paletteRoot);
        return paletteRoot;
    }

    protected abstract Object getDefaultPaletteContent ();

    protected final PaletteViewerProvider getPaletteViewerProvider () {
        if (provider == null) provider = createPaletteViewerProvider ();

        return provider;
    }

    protected int getInitialPaletteSize () {
        return 125;
    }

    protected int getInitialPaletteState () {
        return UNCOLLAPSED_PINNED;
    }

    protected int getInitialDockLocation () {
        return PositionConstants.EAST;
    }

    protected void setEditDomain (DefaultEditDomain ed) {
        super.setEditDomain (ed);
    }

    protected void configurePaletteViewer () {
        assert fHasFlyoutPalette == true;
        PaletteViewer viewer = getPaletteViewer ();
        if (viewer == null) return;

        ContextMenuProvider paletteContextProvider = new PaletteContextMenuProvider (viewer);
        getPaletteViewer ().setContextMenu (paletteContextProvider);
    }

    private PaletteViewer getPaletteViewer () {
        return getEditDomain ().getPaletteViewer ();
    }

    protected class CustomPalettePage extends PaletteViewerPage {

        public CustomPalettePage (PaletteViewerProvider provider) {
            super (provider);
        }

        public void createControl (Composite parent) {
            super.createControl (parent);
            if (splitter != null) splitter.setExternalViewer (viewer);

        }

        public void dispose () {
            if (splitter != null) splitter.setExternalViewer (null);

            super.dispose ();
        }

        public PaletteViewer getPaletteViewer () {
            return viewer;
        }

    }

    protected void handlePaletteResized (int newSize) {
    }

    protected void handlePaletteDefaultStateChanged (int newState) {
    }

    private final class FlyoutPreferencesImpl implements FlyoutPaletteComposite.FlyoutPreferences {
        private static final String PALETTE_DOCK_LOCATION = "org.eclipse.gmf.pdock";
        private static final String PALETTE_SIZE = "org.eclipse.gmf.psize";
        private static final String PALETTE_STATE = "org.eclipse.gmf.pstate";
        private IPreferenceStore preferences;

        private FlyoutPreferencesImpl (IPreferenceStore preferenceStore) {
            preferences = preferenceStore;
        }

        public int getDockLocation () {
            if (preferences.contains (PALETTE_DOCK_LOCATION)) {
                return preferences.getInt (PALETTE_DOCK_LOCATION);
            } else {
                return getInitialDockLocation ();
            }
        }

        public int getPaletteState () {
            if (preferences.contains (PALETTE_STATE)) {
                return preferences.getInt (PALETTE_STATE);
            } else {
                return getInitialPaletteState ();
            }
        }

        public int getPaletteWidth () {
            if (preferences.contains (PALETTE_SIZE)) {
                return preferences.getInt (PALETTE_SIZE);
            } else {
                return getInitialPaletteSize ();
            }
        }

        public void setDockLocation (int location) {
            preferences.setValue (PALETTE_DOCK_LOCATION, location);
        }

        public void setPaletteState (int state) {
            preferences.setValue (PALETTE_STATE, state);
        }

        public void setPaletteWidth (int width) {
            preferences.setValue (PALETTE_SIZE, width);
        }

    }

    protected void startListening () {
        super.startListening ();
        activityManagerListener = createActivityManagerListener ();
        if (activityManagerListener != null) {
            PlatformUI.getWorkbench ().getActivitySupport ().getActivityManager ().addActivityManagerListener (activityManagerListener);
        }
    }

    protected void stopListening () {
        if (activityManagerListener != null) {
            PlatformUI.getWorkbench ().getActivitySupport ().getActivityManager ().removeActivityManagerListener (activityManagerListener);
            activityManagerListener = null;
        }
        super.stopListening ();
    }

    protected IActivityManagerListener createActivityManagerListener () {
        return new ActivityManagerListener ();
    }

    protected void applyCustomizationsToPalette (PaletteRoot paletteRoot) {
        PaletteCustomizer customizer = (getPaletteViewer () != null) ? getPaletteViewer ().getCustomizer () : createPaletteCustomizer ();
        if (customizer instanceof PaletteCustomizerEx) {
            ((PaletteCustomizerEx) customizer).applyCustomizationsToPalette (paletteRoot);
        }
    }

    protected PaletteCustomizer createPaletteCustomizer () {
        return new PaletteCustomizerEx (getPreferenceStore ());
    }

}

