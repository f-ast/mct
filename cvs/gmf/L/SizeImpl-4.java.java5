package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.Size;

public class SizeImpl extends EObjectImpl implements Size {
    protected static final int WIDTH_EDEFAULT = - 1;
    protected int width = WIDTH_EDEFAULT;
    protected static final int HEIGHT_EDEFAULT = - 1;
    protected int height = HEIGHT_EDEFAULT;

    protected SizeImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.SIZE;
    }

    public int getWidth () {
        return width;
    }

    public void setWidth (int newWidth) {
        int oldWidth = width;
        width = newWidth;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.SIZE__WIDTH, oldWidth, width));

    }

    public int getHeight () {
        return height;
    }

    public void setHeight (int newHeight) {
        int oldHeight = height;
        height = newHeight;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.SIZE__HEIGHT, oldHeight, height));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.SIZE__WIDTH :
                return new Integer (getWidth ());
            case NotationPackage.SIZE__HEIGHT :
                return new Integer (getHeight ());
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.SIZE__WIDTH :
                setWidth (((Integer) newValue).intValue ());
                return;
            case NotationPackage.SIZE__HEIGHT :
                setHeight (((Integer) newValue).intValue ());
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.SIZE__WIDTH :
                setWidth (WIDTH_EDEFAULT);
                return;
            case NotationPackage.SIZE__HEIGHT :
                setHeight (HEIGHT_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.SIZE__WIDTH :
                return width != WIDTH_EDEFAULT;
            case NotationPackage.SIZE__HEIGHT :
                return height != HEIGHT_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (width: ");
        result.append (width);
        result.append (", height: ");
        result.append (height);
        result.append (')');
        return result.toString ();
    }

}

