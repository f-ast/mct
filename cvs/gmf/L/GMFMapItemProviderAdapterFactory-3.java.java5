package org.eclipse.gmf.mappings.provider;

import java.util.ArrayList;

import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.ComposedAdapterFactory;

import org.eclipse.emf.edit.provider.IChangeNotifier;

import org.eclipse.emf.edit.provider.IDisposable;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.INotifyChangedListener;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.gmf.mappings.util.GMFMapAdapterFactory;

public class GMFMapItemProviderAdapterFactory extends GMFMapAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    protected ComposedAdapterFactory parentAdapterFactory;
    protected IChangeNotifier changeNotifier = new ChangeNotifier ();
    protected Collection supportedTypes = new ArrayList ();

    public GMFMapItemProviderAdapterFactory () {
        supportedTypes.add (IEditingDomainItemProvider.class);
        supportedTypes.add (IStructuredItemContentProvider.class);
        supportedTypes.add (ITreeItemContentProvider.class);
        supportedTypes.add (IItemLabelProvider.class);
        supportedTypes.add (IItemPropertySource.class);
    }

    protected NodeMappingItemProvider nodeMappingItemProvider;

    public Adapter createNodeMappingAdapter () {
        if (nodeMappingItemProvider == null) {
            nodeMappingItemProvider = new NodeMappingItemProvider (this);
        }
        return nodeMappingItemProvider;
    }

    protected ChildNodeMappingItemProvider childNodeMappingItemProvider;

    public Adapter createChildNodeMappingAdapter () {
        if (childNodeMappingItemProvider == null) {
            childNodeMappingItemProvider = new ChildNodeMappingItemProvider (this);
        }
        return childNodeMappingItemProvider;
    }

    protected LinkMappingItemProvider linkMappingItemProvider;

    public Adapter createLinkMappingAdapter () {
        if (linkMappingItemProvider == null) {
            linkMappingItemProvider = new LinkMappingItemProvider (this);
        }
        return linkMappingItemProvider;
    }

    protected CanvasMappingItemProvider canvasMappingItemProvider;

    public Adapter createCanvasMappingAdapter () {
        if (canvasMappingItemProvider == null) {
            canvasMappingItemProvider = new CanvasMappingItemProvider (this);
        }
        return canvasMappingItemProvider;
    }

    protected MappingItemProvider mappingItemProvider;

    public Adapter createMappingAdapter () {
        if (mappingItemProvider == null) {
            mappingItemProvider = new MappingItemProvider (this);
        }
        return mappingItemProvider;
    }

    protected ConstraintItemProvider constraintItemProvider;

    public Adapter createConstraintAdapter () {
        if (constraintItemProvider == null) {
            constraintItemProvider = new ConstraintItemProvider (this);
        }
        return constraintItemProvider;
    }

    protected ValueExpressionItemProvider valueExpressionItemProvider;

    public Adapter createValueExpressionAdapter () {
        if (valueExpressionItemProvider == null) {
            valueExpressionItemProvider = new ValueExpressionItemProvider (this);
        }
        return valueExpressionItemProvider;
    }

    public ComposeableAdapterFactory getRootAdapterFactory () {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory ();
    }

    public void setParentAdapterFactory (ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    public boolean isFactoryForType (Object type) {
        return supportedTypes.contains (type) || super.isFactoryForType (type);
    }

    public Adapter adapt (Notifier notifier, Object type) {
        return super.adapt (notifier, this);
    }

    public Object adapt (Object object, Object type) {
        if (isFactoryForType (type)) {
            Object adapter = super.adapt (object, type);
            if (! (type instanceof Class) || (((Class) type).isInstance (adapter))) {
                return adapter;
            }
        }
        return null;
    }

    public void addListener (INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener (notifyChangedListener);
    }

    public void removeListener (INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener (notifyChangedListener);
    }

    public void fireNotifyChanged (Notification notification) {
        changeNotifier.fireNotifyChanged (notification);
        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged (notification);
        }
    }

    public void dispose () {
        if (nodeMappingItemProvider != null) nodeMappingItemProvider.dispose ();

        if (childNodeMappingItemProvider != null) childNodeMappingItemProvider.dispose ();

        if (linkMappingItemProvider != null) linkMappingItemProvider.dispose ();

        if (canvasMappingItemProvider != null) canvasMappingItemProvider.dispose ();

        if (mappingItemProvider != null) mappingItemProvider.dispose ();

        if (constraintItemProvider != null) constraintItemProvider.dispose ();

        if (valueExpressionItemProvider != null) valueExpressionItemProvider.dispose ();

    }

}

