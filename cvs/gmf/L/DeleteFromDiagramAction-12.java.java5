package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.Collections;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.RequestConstants;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.requests.GroupRequest;

import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;

import org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramUIActionsMessages;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.ui.ISharedImages;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.ui.PlatformUI;

public class DeleteFromDiagramAction extends DiagramAction {

    public DeleteFromDiagramAction (IWorkbenchPart part) {
        super (part);
    }

    public DeleteFromDiagramAction (IWorkbenchPage workbenchPage) {
        super (workbenchPage);
    }

    public void init () {
        super.init ();
        setId (ActionIds.ACTION_DELETE_FROM_DIAGRAM);
        setText (DiagramUIActionsMessages.DeleteFromDiagram_ActionLabelText);
        setToolTipText (DiagramUIActionsMessages.DeleteFromDiagram_ActionToolTipText);
        ISharedImages workbenchImages = PlatformUI.getWorkbench ().getSharedImages ();
        setHoverImageDescriptor (workbenchImages.getImageDescriptor (ISharedImages.IMG_TOOL_DELETE));
        setImageDescriptor (workbenchImages.getImageDescriptor (ISharedImages.IMG_TOOL_DELETE));
        setDisabledImageDescriptor (workbenchImages.getImageDescriptor (ISharedImages.IMG_TOOL_DELETE_DISABLED));
    }

    protected boolean isSelectionListener () {
        return true;
    }

    protected Request createTargetRequest () {
        GroupRequest deleteReq = new GroupRequest (RequestConstants.REQ_DELETE);
        return deleteReq;
    }

    protected Command getCommand () {
        List objects = createOperationSet ();
        if (! supportViews (objects) || isCanonical (objects)) {
            return null;
        }
        CompoundCommand deleteCC = new CompoundCommand (getLabel ());
        for (Iterator iter = objects.iterator ();
        iter.hasNext ();) {
            EditPart editPart = (EditPart) iter.next ();
            deleteCC.add (editPart.getCommand (getTargetRequest ()));
        }
        return deleteCC;
    }

    private boolean supportViews (List objects) {
        for (Iterator iter = objects.iterator ();
        iter.hasNext ();) {
            Object object = iter.next ();
            if (object instanceof GraphicalEditPart && ! ((GraphicalEditPart) object).hasNotationView ()) {
                return false;
            }
        }
        return true;
    }

    protected List createOperationSet () {
        List selection = getSelectedObjects ();
        if (selection.isEmpty () || ! (selection.get (0) instanceof IGraphicalEditPart)) return Collections.EMPTY_LIST;

        return selection;
    }

    private boolean isCanonical (List selectedItems) {
        boolean isCanonical = false;
        if (! selectedItems.isEmpty ()) {
            for (Iterator si = selectedItems.iterator ();
            si.hasNext () && ! isCanonical;) {
                Object selected = si.next ();
                if (selected instanceof EditPart) {
                    EditPart child = (EditPart) selected;
                    View view = (View) child.getAdapter (View.class);
                    if (view == null || view.getElement () == null || view.getElement () instanceof View) {
                        isCanonical = false;
                        continue;
                    }
                    if (child instanceof ConnectionEditPart) {
                        ConnectionEditPart connection = (ConnectionEditPart) child;
                        isCanonical = (! connection.isSemanticConnection () || (isCanonical (connection.getSource ()) && isCanonical (connection.getTarget ())));
                    } else {
                        isCanonical = isCanonical (child);
                    }
                }
            }
        }
        return isCanonical;
    }

    private boolean isCanonical (EditPart ep) {
        EObject eObject = (EObject) ep.getAdapter (EObject.class);
        EditPart parent = ep.getParent ();
        if (eObject != null && parent != null) {
            CanonicalEditPolicy cep = (CanonicalEditPolicy) parent.getEditPolicy (EditPolicyRoles.CANONICAL_ROLE);
            return cep != null && cep.isEnabled () && cep.canCreate (eObject);
        }
        return false;
    }

}

