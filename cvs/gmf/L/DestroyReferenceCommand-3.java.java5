package org.eclipse.gmf.runtime.emf.type.core.commands;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;

public class DestroyReferenceCommand extends EditElementCommand {
    private EObject container;
    private EReference containingFeature;
    private EObject referencedObject;

    public DestroyReferenceCommand (DestroyReferenceRequest request) {
        super (request.getLabel (), request.getContainer (), request);
        this.container = request.getContainer ();
        this.containingFeature = request.getContainingFeature ();
        this.referencedObject = request.getReferencedObject ();
    }

    protected CommandResult doExecute (IProgressMonitor progressMonitor) {
        List features = new ArrayList ();
        if (getContainingFeature () == null) {
            features.addAll (getContainer ().eClass ().getEAllReferences ());
        } else {
            features.add (getContainingFeature ());
        }
        for (Iterator i = features.iterator ();
        i.hasNext ();) {
            EReference nextReference = (EReference) i.next ();
            if (nextReference.isMany ()) {
                Collection referenceCollection = (Collection) getContainer ().eGet (nextReference);
                if (referenceCollection.contains (getReferencedObject ())) {
                    referenceCollection.remove (getReferencedObject ());
                }
            } else if (getContainer ().eGet (nextReference) == getReferencedObject ()) {
                getContainer ().eSet (nextReference, null);
            }

        }
        return newOKCommandResult ();
    }

    protected EObject getContainer () {
        return container;
    }

    protected EReference getContainingFeature () {
        return containingFeature;
    }

    protected EObject getReferencedObject () {
        return referencedObject;
    }

    public boolean isExecutable () {
        return getReferencedObject () != null && getContainer () != null;
    }

}

