package org.eclipse.gmf.internal.xpand.expression.parser;

public class ExpressionLexerprs implements lpg.lpgjavaruntime.ParseTable, ExpressionLexersym {
    public interface IsKeyword {
        public final static byte isKeyword [] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    };

    public final static byte isKeyword [] = IsKeyword.isKeyword;

    public final boolean isKeyword (int index) {
        return isKeyword [index] != 0;
    }

    public interface BaseCheck {
        public final static byte baseCheck [] = {0, 1, 3, 3, 1, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 5, 1, 1, 2, 3, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 0, 1, 2, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    };

    public final static byte baseCheck [] = BaseCheck.baseCheck;

    public final int baseCheck (int index) {
        return baseCheck [index];
    }

    public final static byte rhs [] = baseCheck;

    public final int rhs (int index) {
        return rhs [index];
    }

    ;
    public interface BaseAction {
        public final static char baseAction [] = {17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 14, 14, 18, 12, 12, 12, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 19, 19, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 15, 15, 15, 15, 20, 20, 20, 20, 21, 21, 16, 16, 13, 13, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 494, 297, 296, 296, 296, 308, 485, 199, 144, 144, 144, 144, 318, 296, 251, 144, 905, 229, 6, 239, 904, 114, 230, 300, 309, 309, 309, 309, 880, 38, 144, 907, 309, 309, 309, 297, 286, 891, 38, 289, 300
          , 309, 309, 309, 309, 908, 909, 911, 298, 309, 309, 309, 910, 294, 903, 280, 289, 1, 160, 160, 160, 160, 160, 915, 902, 160, 397, 165, 165, 165, 165, 916, 160, 486, 586, 165, 165, 165, 302, 100, 158, 158, 158, 158, 158, 912, 906, 158, 658, 260, 326, 326, 326, 353, 158, 593, 42, 41, 41, 41, 326, 353, 260, 723, 42, 41, 41, 41, 788, 333, 811, 335, 834, 343, 333, 333, 335, 335, 343, 343, 857, 200, 353, 353, 353, 353, 200, 200, 353, 353};
    };

    public final static char baseAction [] = BaseAction.baseAction;

    public final int baseAction (int index) {
        return baseAction [index];
    }

    public final static char lhs [] = baseAction;

    public final int lhs (int index) {
        return lhs [index];
    }

    ;
    public interface TermCheck {
        public final static byte termCheck [] = {0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52
          , 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 0, 0, 0, 100, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 69, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 0, 0, 90, 91, 92, 93, 94, 95, 96, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 0, 0, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 0, 0, 90, 91, 92, 93, 94, 95, 96, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
          , 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 0, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 99, 99, 0, 0, 0, 0, 0, 97, 98, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 99, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 0, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54
          , 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 25, 26, 0, 0, 27, 0, 0, 27, 27, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 67, 65, 0, 66, 67, 0, 0, 73, 74, 76, 68, 0, 66, 72, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 89, 0, 0, 0, 0, 0, 0, 0, 97, 98, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0};
    };

    public final static byte termCheck [] = TermCheck.termCheck;

    public final int termCheck (int index) {
        return termCheck [index];
    }

    public interface TermAction {
        public final static char termAction [] = {0, 353, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 512, 302, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 353, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 388, 516, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511,
          511, 511, 511, 511, 36, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 29, 161, 353, 497, 166, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 383, 364, 309, 309, 309, 309, 309, 309, 309, 309, 287, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 309, 353, 353, 309, 309, 309, 309, 309, 309, 309, 167,
          518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 353, 353, 518, 518, 518, 518, 518, 518, 518, 518, 287, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 353, 40, 518, 518, 518, 518, 518, 518, 518, 353, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 243, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 308, 246, 263, 270, 271, 236, 384, 268, 277, 362, 269, 353, 377, 378, 375, 376, 386, 381, 254, 360, 275, 367, 368, 308, 308, 352, 1, 37, 353, 353, 353, 353, 308, 308, 1, 395, 395, 395, 395, 395, 395, 395, 395,
          395, 395, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 353, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 353, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 4, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 5, 395, 395, 395, 395, 395, 395, 395, 395, 395, 395, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 353, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 353, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333
          , 333, 333, 333, 333, 333, 353, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 335, 353, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 353, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 4, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 39, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 353, 10, 32, 34, 164, 17, 16, 13, 8, 27, 113, 554, 557, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 556, 558, 555, 331, 353, 353, 371, 353, 353, 373, 372, 374, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 311, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 353, 559, 560, 467, 353, 167, 167, 353, 353, 496, 258, 561, 365, 353, 356, 379, 355, 353, 353, 353, 353, 353, 353, 353, 353, 353, 467, 467, 353, 353, 353, 353, 353, 353, 353, 467, 467, 353, 353, 353, 353, 353, 353, 353
          , 34};
    };

    public final static char termAction [] = TermAction.termAction;

    public final int termAction (int index) {
        return termAction [index];
    }

    public final int asb (int index) {
        return 0;
    }

    public final int asr (int index) {
        return 0;
    }

    public final int nasb (int index) {
        return 0;
    }

    public final int nasr (int index) {
        return 0;
    }

    public final int terminalIndex (int index) {
        return 0;
    }

    public final int nonterminalIndex (int index) {
        return 0;
    }

    public final int scopePrefix (int index) {
        return 0;
    }

    public final int scopeSuffix (int index) {
        return 0;
    }

    public final int scopeLhs (int index) {
        return 0;
    }

    public final int scopeLa (int index) {
        return 0;
    }

    public final int scopeStateSet (int index) {
        return 0;
    }

    public final int scopeRhs (int index) {
        return 0;
    }

    public final int scopeState (int index) {
        return 0;
    }

    public final int inSymb (int index) {
        return 0;
    }

    public final String name (int index) {
        return null;
    }

    public final int getErrorSymbol () {
        return 0;
    }

    public final int getScopeUbound () {
        return 0;
    }

    public final int getScopeSize () {
        return 0;
    }

    public final int getMaxNameLength () {
        return 0;
    }

    public final static int NUM_STATES = 35, NT_OFFSET = 103, LA_STATE_OFFSET = 575, MAX_LA = 1, NUM_RULES = 222, NUM_NONTERMINALS = 24, NUM_SYMBOLS = 127, SEGMENT_SIZE = 8192, START_STATE = 223, IDENTIFIER_SYMBOL = 0, EOFT_SYMBOL = 99, EOLT_SYMBOL = 104, ACCEPT_ACTION = 352, ERROR_ACTION = 353;
    public final static boolean BACKTRACK = false;

    public final int getNumStates () {
        return NUM_STATES;
    }

    public final int getNtOffset () {
        return NT_OFFSET;
    }

    public final int getLaStateOffset () {
        return LA_STATE_OFFSET;
    }

    public final int getMaxLa () {
        return MAX_LA;
    }

    public final int getNumRules () {
        return NUM_RULES;
    }

    public final int getNumNonterminals () {
        return NUM_NONTERMINALS;
    }

    public final int getNumSymbols () {
        return NUM_SYMBOLS;
    }

    public final int getSegmentSize () {
        return SEGMENT_SIZE;
    }

    public final int getStartState () {
        return START_STATE;
    }

    public final int getStartSymbol () {
        return lhs [0];
    }

    public final int getIdentifierSymbol () {
        return IDENTIFIER_SYMBOL;
    }

    public final int getEoftSymbol () {
        return EOFT_SYMBOL;
    }

    public final int getEoltSymbol () {
        return EOLT_SYMBOL;
    }

    public final int getAcceptAction () {
        return ACCEPT_ACTION;
    }

    public final int getErrorAction () {
        return ERROR_ACTION;
    }

    public final boolean isValidForParser () {
        return isValidForParser;
    }

    public final boolean getBacktrack () {
        return BACKTRACK;
    }

    public final int originalState (int state) {
        return 0;
    }

    public final int asi (int state) {
        return 0;
    }

    public final int nasi (int state) {
        return 0;
    }

    public final int inSymbol (int state) {
        return 0;
    }

    public final int ntAction (int state, int sym) {
        return baseAction [state + sym];
    }

    public final int tAction (int state, int sym) {
        int i = baseAction [state], k = i + sym;
        return termAction [termCheck [k] == sym ? k : i];
    }

    public final int lookAhead (int la_state, int sym) {
        int k = la_state + sym;
        return termAction [termCheck [k] == sym ? k : la_state];
    }

}

