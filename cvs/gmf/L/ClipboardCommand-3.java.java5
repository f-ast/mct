package org.eclipse.gmf.runtime.diagram.ui.internal.commands;

import java.util.ArrayList;

import java.util.Collections;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.jface.util.Assert;

import org.eclipse.gmf.runtime.common.ui.action.actions.global.ClipboardManager;

import org.eclipse.gmf.runtime.common.ui.util.CustomData;

import org.eclipse.gmf.runtime.common.ui.util.CustomDataTransfer;

import org.eclipse.gmf.runtime.common.ui.util.ICustomData;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;

import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;

import org.eclipse.gmf.runtime.notation.View;

public abstract class ClipboardCommand extends AbstractModelCommand {
    public static final String DRAWING_SURFACE = "Drawing Surface";
    private final View viewContext;

    public ClipboardCommand (View viewContext) {
        this (null, viewContext);
    }

    public ClipboardCommand (String label, View viewContext) {
        super (label, viewContext);
        Assert.isNotNull (viewContext);
        this.viewContext = viewContext;
    }

    protected void copyToClipboard (List source) {
        if (source == null || source.size () == 0) {
            return;
        }
        CustomData data = new CustomData (DRAWING_SURFACE, copyViewsToString (source).getBytes ());
        if (data != null) {
            ClipboardManager.getInstance ().addToCache (new ICustomData [] {data}, CustomDataTransfer.getInstance ());
        }
    }

    protected View getViewContext () {
        return viewContext;
    }

    public static String copyViewsToString (List views) {
        Assert.isNotNull (views);
        Assert.isTrue (views.size () > 0);
        List selection = new ArrayList ();
        Iterator iter = views.iterator ();
        while (iter.hasNext ()) {
            EObject viewElement = (View) iter.next ();
            if (viewElement != null) selection.add (viewElement);

        }
        return EObjectUtil.serialize (selection, Collections.EMPTY_MAP);
    }

}

