package org.eclipse.gmf.runtime.common.ui.resources;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IFileModificationValidator;

import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Status;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;

import org.eclipse.gmf.runtime.common.ui.internal.l10n.CommonUIMessages;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.osgi.util.NLS;

import org.eclipse.swt.widgets.Display;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.team.core.RepositoryProvider;

import org.eclipse.ui.PlatformUI;

public class FileModificationValidator {
    private static FileModificationValidator INSTANCE = new FileModificationValidator ();

    public static FileModificationValidator getInstance () {
        return INSTANCE;
    }

    private FileModificationValidator () {
        super ();
    }

    public boolean okToEdit (final IFile [] files, final String modificationReason) {
        Shell shell = null;
        if (PlatformUI.getWorkbench ().getActiveWorkbenchWindow () != null && Display.getCurrent () != null) {
            shell = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell ();
        }
        final IStatus status = ResourcesPlugin.getWorkspace ().validateEdit (files, shell);
        if (status.isOK ()) {
            return true;
        } else {
            PlatformUI.getWorkbench ().getDisplay ().asyncExec (new Runnable () {

                public void run () {
                    MessageDialog.openError (PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell (), NLS.bind (CommonUIMessages.FileModificationValidator_EditProblemDialogTitle, modificationReason), NLS.bind (CommonUIMessages.FileModificationValidator_EditProblemDialogMessage, modificationReason, status.getMessage ()));
                }

            }

            );
            return false;
        }
    }

    public boolean okToSave (IFile file) {
        IStatus status = null;
        RepositoryProvider provider = RepositoryProvider.getProvider (file.getProject ());
        IFileModificationValidator validator = null;
        if (provider != null) {
            validator = provider.getFileModificationValidator ();
        }
        if (validator == null) {
            status = getDefaultStatus (file);
        } else {
            status = validator.validateSave (file);
        }
        if (status.isOK ()) {
            return true;
        } else {
            MessageDialog.openError (PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell (), CommonUIMessages.FileModificationValidator_SaveProblemDialogTitle, NLS.bind (CommonUIMessages.FileModificationValidator_SaveProblemDialogMessage, status.getMessage ()));
            return false;
        }
    }

    private IStatus getDefaultStatus (IFile file) {
        if (file.isReadOnly ()) {
            String message = NLS.bind (CommonUIMessages.FileModificationValidator_FileIsReadOnlyErrorMessage, file.getFullPath ().toString ());
            return new Status (Status.ERROR, CommonUIPlugin.getPluginId (), Status.ERROR, message, null);
        } else {
            return new Status (Status.OK, CommonUIPlugin.getPluginId (), Status.OK, CommonUIMessages.FileModificationValidator_OK, null);
        }
    }

}

