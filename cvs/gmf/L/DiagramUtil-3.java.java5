package org.eclipse.gmf.runtime.diagram.ui;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import java.util.ListIterator;

import java.util.Map;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.jface.util.Assert;

import org.eclipse.ui.IEditorPart;

import org.eclipse.ui.IWorkbenchWindow;

import org.eclipse.ui.PlatformUI;

import org.eclipse.gmf.runtime.common.core.util.ObjectAdapter;

import org.eclipse.gmf.runtime.common.ui.services.editor.EditorService;

import org.eclipse.gmf.runtime.diagram.core.internal.services.view.ViewService;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.LayoutNode;

import org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.LayoutService;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditorInput;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;

import org.eclipse.gmf.runtime.diagram.ui.services.layout.ILayoutNode;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

public class DiagramUtil {

    public static Diagram createDiagram (EObject context, String kind, PreferencesHint preferencesHint) {
        IAdaptable viewModel = (context != null) ? new EObjectAdapter (context) : null;
        String viewType = (kind != null) ? kind : "";
        return ViewService.getInstance ().createDiagramView (viewModel, viewType, preferencesHint);
    }

    public static Node createNode (View container, EObject eObject, String type, PreferencesHint preferencesHint) {
        Assert.isNotNull (container, "The container is null");
        IAdaptable viewModel = (eObject != null) ? new EObjectAdapter (eObject) : null;
        String viewType = (type != null) ? type : "";
        View view = ViewService.getInstance ().createNodeView (viewModel, container, viewType, ViewUtil.APPEND, preferencesHint);
        return (view != null) ? (Node) view : null;
    }

    public static Edge createEdge (Diagram diagram, EObject eObject, String type, PreferencesHint preferencesHint) {
        Assert.isNotNull (diagram, "The diagram is null");
        IAdaptable viewModel = (eObject != null) ? new EObjectAdapter (eObject) : null;
        String viewType = (type != null) ? type : "";
        View view = ViewService.getInstance ().createConnectorView (viewModel, diagram, viewType, ViewUtil.APPEND, preferencesHint);
        return (view != null) ? (Edge) view : null;
    }

    public static Edge createEdge (View source, View target, EObject eObject, String type, PreferencesHint preferencesHint) {
        Assert.isNotNull (source, "The source is null");
        Assert.isNotNull (target, "The target is null");
        Assert.isNotNull (source.getDiagram (), "The source is detached");
        Assert.isNotNull (target.getDiagram (), "The target is detached");
        Edge edge = createEdge (source.getDiagram (), eObject, type, preferencesHint);
        if (edge != null) {
            edge.setSource (source);
            edge.setTarget (target);
        }
        return edge;
    }

    public static void destroyView (View view) {
        EObjectUtil.destroy (view);
    }

    public static void openDiagramEditor (Diagram diagram) {
        EditorService.getInstance ().openEditor (new DiagramEditorInput (diagram));
    }

    public static ILayoutNode getLayoutNode (Node node) {
        if (null == node) {
            throw new NullPointerException ("Argument 'node' is null");
        }
        Diagram diagram = node.getDiagram ();
        DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance ().createDiagramEditPart (diagram);
        Map registry = diagramEP.getViewer ().getEditPartRegistry ();
        GraphicalEditPart gep = (GraphicalEditPart) registry.get (node);
        Dimension size = gep.getFigure ().getBounds ().getSize ();
        return new LayoutNode (node, size.width, size.height);
    }

    private static void checkValidNodes (List nodes) {
        if (null == nodes) {
            throw new NullPointerException ("Argument 'nodes' is null");
        }
        if (nodes.size () == 0) {
            throw new IllegalArgumentException ("Argument 'nodes' is empty");
        }
        ListIterator li = nodes.listIterator ();
        EObject parent = null;
        while (li.hasNext ()) {
            Object next = li.next ();
            if (! (next instanceof Node)) throw new IllegalArgumentException ("Argument 'nodes' contains objects which aren't of type 'Node'");

            Node node = (Node) next;
            if (parent == null) parent = ViewUtil.getContainerView (node);
            else if (ViewUtil.getContainerView (node) != parent) throw new IllegalArgumentException ("Argument 'nodes' contains objects which have a different parent containment");

        }
    }

    public static List getLayoutNodes (DiagramEditPart diagramEP, List nodes) {
        checkValidNodes (nodes);
        if (diagramEP == null) {
            Diagram diagram = ((Node) nodes.get (0)).getDiagram ();
            diagramEP = OffscreenEditPartFactory.getInstance ().createDiagramEditPart (diagram);
        }
        Map registry = diagramEP.getViewer ().getEditPartRegistry ();
        List layoutNodes = new ArrayList (nodes.size ());
        ListIterator li = nodes.listIterator ();
        while (li.hasNext ()) {
            Node node = (Node) li.next ();
            GraphicalEditPart gep = (GraphicalEditPart) registry.get (node);
            Dimension size = gep.getFigure ().getBounds ().getSize ();
            layoutNodes.add (new LayoutNode (node, size.width, size.height));
        }
        return layoutNodes;
    }

    public static void layout (View view, String hint) {
        if (null == view) {
            throw new NullPointerException ("Argument 'view' is null");
        }
        if (null == hint) {
            throw new NullPointerException ("Argument 'hint' is null");
        }
        Diagram diagram = view.getDiagram ();
        DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance ().createDiagramEditPart (diagram);
        List hints = new ArrayList (2);
        hints.add (hint);
        hints.add (diagramEP);
        IAdaptable layoutHint = new ObjectAdapter (hints);
        final Runnable layoutRun = LayoutService.getInstance ().layoutNodes (getLayoutNodes (diagramEP, view.getChildren ()), false, layoutHint);
        layoutRun.run ();
    }

    public static void layoutNodes (List nodes, String hint) {
        checkValidNodes (nodes);
        if (null == hint) {
            throw new NullPointerException ("Argument 'hint' is null");
        }
        Node nodeFirst = (Node) nodes.get (0);
        Diagram diagram = nodeFirst.getDiagram ();
        DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance ().createDiagramEditPart (diagram);
        List hints = new ArrayList (2);
        hints.add (hint);
        hints.add (diagramEP);
        IAdaptable layoutHint = new ObjectAdapter (hints);
        final Runnable layoutRun = LayoutService.getInstance ().layoutNodes (getLayoutNodes (diagramEP, nodes), true, layoutHint);
        layoutRun.run ();
    }

    public static IDiagramWorkbenchPart getOpenedDiagramEditor (Diagram diagram, IWorkbenchWindow window) {
        if (null == diagram) throw new NullPointerException ("Argument 'diagram' is null");

        if (window == null) window = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ();

        List editors = EditorService.getInstance ().getRegisteredEditorParts ();
        for (Iterator j = editors.iterator ();
        j.hasNext ();) {
            IEditorPart editor = (IEditorPart) j.next ();
            if (editor.getEditorSite ().getWorkbenchWindow () == window) {
                IDiagramWorkbenchPart de = (IDiagramWorkbenchPart) editor;
                if (de.getDiagram () == diagram) return de;

            }
        }
        return null;
    }

}

