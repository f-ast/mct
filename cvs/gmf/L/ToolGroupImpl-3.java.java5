package org.eclipse.gmf.tooldef.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.tooldef.AbstractTool;

import org.eclipse.gmf.tooldef.GMFToolPackage;

import org.eclipse.gmf.tooldef.ToolGroup;

public class ToolGroupImpl extends ToolContainerImpl implements ToolGroup {
    protected static final boolean COLLAPSIBLE_EDEFAULT = false;
    protected boolean collapsible = COLLAPSIBLE_EDEFAULT;
    protected static final boolean STACK_EDEFAULT = false;
    protected boolean stack = STACK_EDEFAULT;
    protected AbstractTool active = null;

    protected ToolGroupImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFToolPackage.eINSTANCE.getToolGroup ();
    }

    public boolean isCollapsible () {
        return collapsible;
    }

    public void setCollapsible (boolean newCollapsible) {
        boolean oldCollapsible = collapsible;
        collapsible = newCollapsible;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFToolPackage.TOOL_GROUP__COLLAPSIBLE, oldCollapsible, collapsible));

    }

    public boolean isStack () {
        return stack;
    }

    public void setStack (boolean newStack) {
        boolean oldStack = stack;
        stack = newStack;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFToolPackage.TOOL_GROUP__STACK, oldStack, stack));

    }

    public AbstractTool getActive () {
        if (active != null && active.eIsProxy ()) {
            InternalEObject oldActive = (InternalEObject) active;
            active = (AbstractTool) eResolveProxy (oldActive);
            if (active != oldActive) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFToolPackage.TOOL_GROUP__ACTIVE, oldActive, active));

            }
        }
        return active;
    }

    public AbstractTool basicGetActive () {
        return active;
    }

    public void setActive (AbstractTool newActive) {
        AbstractTool oldActive = active;
        active = newActive;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFToolPackage.TOOL_GROUP__ACTIVE, oldActive, active));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFToolPackage.TOOL_GROUP__COLLAPSIBLE :
                return isCollapsible () ? Boolean.TRUE : Boolean.FALSE;
            case GMFToolPackage.TOOL_GROUP__STACK :
                return isStack () ? Boolean.TRUE : Boolean.FALSE;
            case GMFToolPackage.TOOL_GROUP__ACTIVE :
                if (resolve) return getActive ();

                return basicGetActive ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFToolPackage.TOOL_GROUP__COLLAPSIBLE :
                setCollapsible (((Boolean) newValue).booleanValue ());
                return;
            case GMFToolPackage.TOOL_GROUP__STACK :
                setStack (((Boolean) newValue).booleanValue ());
                return;
            case GMFToolPackage.TOOL_GROUP__ACTIVE :
                setActive ((AbstractTool) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFToolPackage.TOOL_GROUP__COLLAPSIBLE :
                setCollapsible (COLLAPSIBLE_EDEFAULT);
                return;
            case GMFToolPackage.TOOL_GROUP__STACK :
                setStack (STACK_EDEFAULT);
                return;
            case GMFToolPackage.TOOL_GROUP__ACTIVE :
                setActive ((AbstractTool) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFToolPackage.TOOL_GROUP__COLLAPSIBLE :
                return collapsible != COLLAPSIBLE_EDEFAULT;
            case GMFToolPackage.TOOL_GROUP__STACK :
                return stack != STACK_EDEFAULT;
            case GMFToolPackage.TOOL_GROUP__ACTIVE :
                return active != null;
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (collapsible: ");
        result.append (collapsible);
        result.append (", stack: ");
        result.append (stack);
        result.append (')');
        return result.toString ();
    }

}

