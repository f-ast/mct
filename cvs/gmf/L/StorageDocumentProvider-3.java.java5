package org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document;

import org.eclipse.core.resources.IStorage;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.ILog;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Platform;

import org.eclipse.core.runtime.Status;

import org.eclipse.jface.operation.IRunnableContext;

import org.eclipse.ui.IEditorInput;

import org.eclipse.ui.IStorageEditorInput;

import org.eclipse.ui.PlatformUI;

import org.osgi.framework.Bundle;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages;

public abstract class StorageDocumentProvider extends AbstractDocumentProvider {
    protected class StorageInfo extends ElementInfo {
        public boolean fIsModifiable = false;
        public boolean fIsReadOnly = true;
        public boolean fUpdateCache = true;

        public StorageInfo (IDocument document) {
            super (document);
        }

    }

    public StorageDocumentProvider () {
        super ();
    }

    protected IDocument createDocument (Object element) throws CoreException {
        if (element instanceof IStorageEditorInput) {
            IDocument document = createEmptyDocument ();
            if (setDocumentContent (document, (IEditorInput) element)) {
                setupDocument (element, document);
                return document;
            }
        }
        return null;
    }

    protected void setupDocument (Object element, IDocument document) {
    }

    protected abstract IDocument createEmptyDocument ();

    protected ElementInfo createElementInfo (Object element) throws CoreException {
        if (element instanceof IStorageEditorInput) {
            IDocument document = null;
            IStatus status = null;
            try {
                document = createDocument (element);
            } catch (CoreException x) {
                handleCoreException (x, EditorMessages.StorageDocumentProvider_createElementInfo);
                status = x.getStatus ();
                document = createEmptyDocument ();
            }
            ElementInfo info = createNewElementInfo (document);
            info.fStatus = status;
            return info;
        }
        return super.createElementInfo (element);
    }

    public ElementInfo createNewElementInfo (IDocument document) {
        return new StorageInfo (document);
    }

    protected boolean setDocumentContent (IDocument document, IEditorInput editorInput) throws CoreException {
        if (editorInput instanceof IStorageEditorInput) {
            IStorage storage = ((IStorageEditorInput) editorInput).getStorage ();
            setDocumentContentFromStorage (document, storage);
            return true;
        }
        return false;
    }

    protected abstract void setDocumentContentFromStorage (IDocument document, IStorage storage) throws CoreException;

    protected void doSaveDocument (IProgressMonitor monitor, Object element, IDocument document, boolean overwrite) throws CoreException {
    }

    protected void handleCoreException (CoreException exception, String message) {
        Bundle bundle = Platform.getBundle (PlatformUI.PLUGIN_ID);
        ILog log = Platform.getLog (bundle);
        if (message != null) log.log (new Status (IStatus.ERROR, PlatformUI.PLUGIN_ID, 0, message, exception));
        else log.log (exception.getStatus ());

    }

    protected void updateCache (IStorageEditorInput input) throws CoreException {
        StorageInfo info = (StorageInfo) getElementInfo (input);
        if (info != null) {
            try {
                IStorage storage = input.getStorage ();
                if (storage != null) {
                    boolean readOnly = storage.isReadOnly ();
                    info.fIsReadOnly = readOnly;
                    info.fIsModifiable = ! readOnly;
                }
            } catch (CoreException x) {
                handleCoreException (x, EditorMessages.StorageDocumentProvider_updateCache);
            }
            info.fUpdateCache = false;
        }
    }

    public boolean isReadOnly (Object element) {
        if (element instanceof IStorageEditorInput) {
            StorageInfo info = (StorageInfo) getElementInfo (element);
            if (info != null) {
                if (info.fUpdateCache) {
                    try {
                        updateCache ((IStorageEditorInput) element);
                    } catch (CoreException x) {
                        handleCoreException (x, EditorMessages.StorageDocumentProvider_isReadOnly);
                    }
                }
                return info.fIsReadOnly;
            }
        }
        return super.isReadOnly (element);
    }

    public boolean isModifiable (Object element) {
        if (element instanceof IStorageEditorInput) {
            StorageInfo info = (StorageInfo) getElementInfo (element);
            if (info != null) {
                if (info.fUpdateCache) {
                    try {
                        updateCache ((IStorageEditorInput) element);
                    } catch (CoreException x) {
                        handleCoreException (x, EditorMessages.StorageDocumentProvider_isModifiable);
                    }
                }
                return info.fIsModifiable;
            }
        }
        return super.isModifiable (element);
    }

    protected void doUpdateStateCache (Object element) throws CoreException {
        if (element instanceof IStorageEditorInput) {
            StorageInfo info = (StorageInfo) getElementInfo (element);
            if (info != null) info.fUpdateCache = true;

        }
        super.doUpdateStateCache (element);
    }

    protected IRunnableContext getOperationRunner (IProgressMonitor monitor) {
        return null;
    }

}

