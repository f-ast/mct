package org.eclipse.gmf.graphdef.editor.part;

import java.util.Collections;

import org.eclipse.core.resources.IContainer;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.IPath;

import org.eclipse.core.runtime.Path;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.common.util.WrappedException;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;

import org.eclipse.gmf.runtime.diagram.core.services.ViewService;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.dialogs.Dialog;

import org.eclipse.jface.dialogs.IDialogConstants;

import org.eclipse.jface.viewers.ILabelProvider;

import org.eclipse.jface.viewers.ILabelProviderListener;

import org.eclipse.jface.viewers.ISelectionChangedListener;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.jface.viewers.ITreeContentProvider;

import org.eclipse.jface.viewers.SelectionChangedEvent;

import org.eclipse.jface.viewers.TreeViewer;

import org.eclipse.jface.viewers.Viewer;

import org.eclipse.jface.viewers.ViewerFilter;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.ui.model.WorkbenchContentProvider;

import org.eclipse.ui.model.WorkbenchLabelProvider;

public class GMFGraphElementChooserDialog extends Dialog {
    private TreeViewer myTreeViewer;
    private EObject mySelectedModelElement;
    private View myView;
    private EditingDomain myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain ();

    public GMFGraphElementChooserDialog (Shell parentShell, View view) {
        super (parentShell);
        setShellStyle (getShellStyle () | SWT.RESIZE);
        myView = view;
    }

    protected Control createDialogArea (Composite parent) {
        Composite composite = (Composite) super.createDialogArea (parent);
        createModelBrowser (composite);
        return composite;
    }

    protected Control createButtonBar (Composite parent) {
        Control buttonBar = super.createButtonBar (parent);
        setOkButtonEnabled (false);
        return buttonBar;
    }

    private void createModelBrowser (Composite composite) {
        myTreeViewer = new TreeViewer (composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
        GridData layoutData = new GridData (GridData.FILL_BOTH);
        layoutData.heightHint = 300;
        layoutData.widthHint = 300;
        myTreeViewer.getTree ().setLayoutData (layoutData);
        myTreeViewer.setContentProvider (new ModelElementsTreeContentProvider ());
        myTreeViewer.setLabelProvider (new ModelElementsTreeLabelProvider ());
        myTreeViewer.setInput (ResourcesPlugin.getWorkspace ().getRoot ());
        myTreeViewer.addFilter (new ModelFilesFilter ());
        myTreeViewer.addSelectionChangedListener (new OkButtonEnabler ());
    }

    private void setOkButtonEnabled (boolean enabled) {
        getButton (IDialogConstants.OK_ID).setEnabled (enabled);
    }

    private boolean isValidModelFile (IFile file) {
        String fileExtension = file.getFullPath ().getFileExtension ();
        return "gmfgen".equals (fileExtension);
    }

    public URI getSelectedModelElementURI () {
        Resource resource = mySelectedModelElement.eResource ();
        return resource.getURI ().appendFragment (resource.getURIFragment (mySelectedModelElement));
    }

    private class ModelElementsTreeContentProvider implements ITreeContentProvider {
        private ITreeContentProvider myWorkbenchContentProvider = new WorkbenchContentProvider ();
        private AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider (GMFGraphDiagramEditorPlugin.getInstance ().getItemProvidersAdapterFactory ());

        public Object [] getChildren (Object parentElement) {
            Object [] result = myWorkbenchContentProvider.getChildren (parentElement);
            if (result != null && result.length > 0) {
                return result;
            }
            if (parentElement instanceof IFile) {
                IFile modelFile = (IFile) parentElement;
                IPath resourcePath = modelFile.getFullPath ();
                ResourceSet resourceSet = myEditingDomain.getResourceSet ();
                try {
                    Resource modelResource = resourceSet.getResource (URI.createPlatformResourceURI (resourcePath.toString ()), true);
                    return myAdapterFctoryContentProvier.getChildren (modelResource);
                } catch (WrappedException e) {
                    GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to load resource: " + resourcePath.toString (), e);
                }
                return Collections.EMPTY_LIST.toArray ();
            }
            return myAdapterFctoryContentProvier.getChildren (parentElement);
        }

        public Object getParent (Object element) {
            Object parent = myWorkbenchContentProvider.getParent (element);
            if (parent != null) {
                return parent;
            }
            if (element instanceof EObject) {
                EObject eObject = (EObject) element;
                if (eObject.eContainer () == null && eObject.eResource ().getURI ().isFile ()) {
                    String path = eObject.eResource ().getURI ().path ();
                    return ResourcesPlugin.getWorkspace ().getRoot ().getFileForLocation (new Path (path));
                }
                return myAdapterFctoryContentProvier.getParent (eObject);
            }
            return null;
        }

        public boolean hasChildren (Object element) {
            if (element instanceof IFile) {
                return isValidModelFile ((IFile) element);
            }
            return myWorkbenchContentProvider.hasChildren (element) || myAdapterFctoryContentProvier.hasChildren (element);
        }

        public Object [] getElements (Object inputElement) {
            Object [] elements = myWorkbenchContentProvider.getElements (inputElement);
            return elements;
        }

        public void dispose () {
            myWorkbenchContentProvider.dispose ();
            myAdapterFctoryContentProvier.dispose ();
        }

        public void inputChanged (Viewer viewer, Object oldInput, Object newInput) {
            myWorkbenchContentProvider.inputChanged (viewer, oldInput, newInput);
            myAdapterFctoryContentProvier.inputChanged (viewer, oldInput, newInput);
        }

    }

    private class ModelElementsTreeLabelProvider implements ILabelProvider {
        private WorkbenchLabelProvider myWorkbenchLabelProvider = new WorkbenchLabelProvider ();
        private AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider (GMFGraphDiagramEditorPlugin.getInstance ().getItemProvidersAdapterFactory ());

        public Image getImage (Object element) {
            Image result = myWorkbenchLabelProvider.getImage (element);
            return result != null ? result : myAdapterFactoryLabelProvider.getImage (element);
        }

        public String getText (Object element) {
            String result = myWorkbenchLabelProvider.getText (element);
            return result != null && result.length () > 0 ? result : myAdapterFactoryLabelProvider.getText (element);
        }

        public void addListener (ILabelProviderListener listener) {
            myWorkbenchLabelProvider.addListener (listener);
            myAdapterFactoryLabelProvider.addListener (listener);
        }

        public void dispose () {
            myWorkbenchLabelProvider.dispose ();
            myAdapterFactoryLabelProvider.dispose ();
        }

        public boolean isLabelProperty (Object element, String property) {
            return myWorkbenchLabelProvider.isLabelProperty (element, property) || myAdapterFactoryLabelProvider.isLabelProperty (element, property);
        }

        public void removeListener (ILabelProviderListener listener) {
            myWorkbenchLabelProvider.removeListener (listener);
            myAdapterFactoryLabelProvider.removeListener (listener);
        }

    }

    private class ModelFilesFilter extends ViewerFilter {

        public boolean select (Viewer viewer, Object parentElement, Object element) {
            if (element instanceof IContainer) {
                return true;
            }
            if (element instanceof IFile) {
                IFile file = (IFile) element;
                return isValidModelFile (file);
            }
            return true;
        }

    }

    private class OkButtonEnabler implements ISelectionChangedListener {

        public void selectionChanged (SelectionChangedEvent event) {
            if (event.getSelection () instanceof IStructuredSelection) {
                IStructuredSelection selection = (IStructuredSelection) event.getSelection ();
                if (selection.size () == 1 && selection.getFirstElement () instanceof EObject) {
                    mySelectedModelElement = (EObject) selection.getFirstElement ();
                    setOkButtonEnabled (ViewService.getInstance ().provides (Node.class, new EObjectAdapter (mySelectedModelElement), myView, null, ViewUtil.APPEND, true, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT));
                    return;
                }
            }
            mySelectedModelElement = null;
            setOkButtonEnabled (false);
        }

    }

}

