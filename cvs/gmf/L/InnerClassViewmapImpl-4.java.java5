package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.InnerClassViewmap;

public class InnerClassViewmapImpl extends ViewmapImpl implements InnerClassViewmap {
    protected static final String CLASS_NAME_EDEFAULT = null;
    protected String className = CLASS_NAME_EDEFAULT;
    protected static final String CLASS_BODY_EDEFAULT = null;
    protected String classBody = CLASS_BODY_EDEFAULT;

    protected InnerClassViewmapImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getInnerClassViewmap ();
    }

    public String getClassName () {
        return className;
    }

    public void setClassName (String newClassName) {
        String oldClassName = className;
        className = newClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.INNER_CLASS_VIEWMAP__CLASS_NAME, oldClassName, className));

    }

    public String getClassBody () {
        return classBody;
    }

    public void setClassBody (String newClassBody) {
        String oldClassBody = classBody;
        classBody = newClassBody;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.INNER_CLASS_VIEWMAP__CLASS_BODY, oldClassBody, classBody));

    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.INNER_CLASS_VIEWMAP__CLASS_NAME :
                return getClassName ();
            case GMFGenPackage.INNER_CLASS_VIEWMAP__CLASS_BODY :
                return getClassBody ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.INNER_CLASS_VIEWMAP__CLASS_NAME :
                setClassName ((String) newValue);
                return;
            case GMFGenPackage.INNER_CLASS_VIEWMAP__CLASS_BODY :
                setClassBody ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.INNER_CLASS_VIEWMAP__CLASS_NAME :
                setClassName (CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.INNER_CLASS_VIEWMAP__CLASS_BODY :
                setClassBody (CLASS_BODY_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.INNER_CLASS_VIEWMAP__CLASS_NAME :
                return CLASS_NAME_EDEFAULT == null ? className != null : ! CLASS_NAME_EDEFAULT.equals (className);
            case GMFGenPackage.INNER_CLASS_VIEWMAP__CLASS_BODY :
                return CLASS_BODY_EDEFAULT == null ? classBody != null : ! CLASS_BODY_EDEFAULT.equals (classBody);
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (className: ");
        result.append (className);
        result.append (", classBody: ");
        result.append (classBody);
        result.append (')');
        return result.toString ();
    }

}

