package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.List;

import org.eclipse.draw2d.ConnectionAnchor;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.transaction.RunnableWithResult;

import org.eclipse.gef.ConnectionEditPart;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.Request;

import org.eclipse.gef.requests.DropRequest;

import org.eclipse.gef.requests.ReconnectRequest;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConnectionHandleEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SortFilterCompartmentItemsEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;

import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;

import org.eclipse.gmf.runtime.notation.Anchor;

import org.eclipse.gmf.runtime.notation.IdentityAnchor;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public abstract class ShapeNodeEditPart extends ShapeEditPart implements INodeEditPart {

    public ShapeNodeEditPart (View view) {
        super (view);
    }

    protected List getModelSourceConnections () {
        return ViewUtil.getSourceConnections ((View) getModel ());
    }

    protected List getModelTargetConnections () {
        return ViewUtil.getTargetConnections ((View) getModel ());
    }

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicy.GRAPHICAL_NODE_ROLE, new GraphicalNodeEditPolicy ());
        installEditPolicy (EditPolicyRoles.SORT_FILTER_ROLE, new SortFilterCompartmentItemsEditPolicy ());
        installEditPolicy (EditPolicyRoles.CONNECTION_HANDLES_ROLE, new ConnectionHandleEditPolicy ());
    }

    protected final IFigure createFigure () {
        return createNodeFigure ();
    }

    abstract protected NodeFigure createNodeFigure ();

    protected NodeFigure getNodeFigure () {
        return (NodeFigure) getFigure ();
    }

    public ConnectionAnchor getSourceConnectionAnchor (ConnectionEditPart connEditPart) {
        final ConnectionNodeEditPart connection = (ConnectionNodeEditPart) connEditPart;
        String t = "";
        try {
            t = (String) getEditingDomain ().runExclusive (new RunnableWithResult.Impl () {

                public void run () {
                    Anchor a = connection.getEdge ().getSourceAnchor ();
                    if (a instanceof IdentityAnchor) setResult (((IdentityAnchor) a).getId ());

                    setResult ("");
                }

            }

            );
        } catch (InterruptedException e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getSourceConnectionAnchor", e);
            Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "getSourceConnectionAnchor", e);
        }
        return getNodeFigure ().getConnectionAnchor (t);
    }

    public ConnectionAnchor getSourceConnectionAnchor (Request request) {
        if (request instanceof ReconnectRequest) {
            Point pt = ((DropRequest) request).getLocation ().getCopy ();
            return getNodeFigure ().getSourceConnectionAnchorAt (pt);
        } else if (request instanceof DropRequest) {
            return getNodeFigure ().getSourceConnectionAnchorAt (((DropRequest) request).getLocation ());
        }

        return getNodeFigure ().getSourceConnectionAnchorAt (null);
    }

    public ConnectionAnchor getTargetConnectionAnchor (ConnectionEditPart connEditPart) {
        final ConnectionNodeEditPart connection = (ConnectionNodeEditPart) connEditPart;
        String t = "";
        try {
            t = (String) getEditingDomain ().runExclusive (new RunnableWithResult.Impl () {

                public void run () {
                    Anchor a = connection.getEdge ().getTargetAnchor ();
                    if (a instanceof IdentityAnchor) setResult (((IdentityAnchor) a).getId ());

                    setResult ("");
                }

            }

            );
        } catch (InterruptedException e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getTargetConnectionAnchor", e);
            Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "getTargetConnectionAnchor", e);
        }
        return getNodeFigure ().getConnectionAnchor (t);
    }

    public ConnectionAnchor getTargetConnectionAnchor (Request request) {
        if (request instanceof ReconnectRequest) {
            Point pt = ((DropRequest) request).getLocation ().getCopy ();
            return getNodeFigure ().getTargetConnectionAnchorAt (pt);
        } else if (request instanceof DropRequest) {
            return getNodeFigure ().getTargetConnectionAnchorAt (((DropRequest) request).getLocation ());
        }

        return getNodeFigure ().getTargetConnectionAnchorAt (null);
    }

    final public String mapConnectionAnchorToTerminal (ConnectionAnchor c) {
        return getNodeFigure ().getConnectionAnchorTerminal (c);
    }

    final public ConnectionAnchor mapTerminalToConnectionAnchor (String terminal) {
        return getNodeFigure ().getConnectionAnchor (terminal);
    }

    protected void handleNotificationEvent (Notification notification) {
        Object feature = notification.getFeature ();
        if (NotationPackage.eINSTANCE.getView_SourceEdges ().equals (feature)) refreshSourceConnections ();
        else if (NotationPackage.eINSTANCE.getView_TargetEdges ().equals (feature)) refreshTargetConnections ();
        else super.handleNotificationEvent (notification);

    }

    public boolean canAttachNote () {
        return true;
    }

}

