package org.eclipse.gmf.runtime.diagram.ui.commands;

import java.util.Collection;

import java.util.Collections;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPartViewer;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.requests.CreateRequest;

import org.eclipse.gmf.runtime.common.core.command.AbstractCommand;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.diagram.core.internal.services.semantic.SuppressibleUIRequest;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewAndElementRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateUnspecifiedTypeConnectionRequest;

import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.util.Assert;

public class DeferredCreateConnectionViewAndElementCommand extends AbstractCommand {
    CreateRequest request = null;
    IAdaptable typeInfoAdapter = null;
    IAdaptable sourceViewAdapter = null;
    IAdaptable targetViewAdapter = null;
    Command command = null;
    EditPartViewer viewer = null;

    private DeferredCreateConnectionViewAndElementCommand (IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter, EditPartViewer currentViewer) {
        super (DiagramUIMessages.Commands_CreateCommand_Connection_Label);
        Assert.isNotNull (currentViewer, "currentViewer is null");
        this.sourceViewAdapter = sourceViewAdapter;
        this.targetViewAdapter = targetViewAdapter;
        this.viewer = currentViewer;
    }

    public DeferredCreateConnectionViewAndElementCommand (CreateConnectionViewAndElementRequest request, IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter, EditPartViewer currentViewer) {
        this (sourceViewAdapter, targetViewAdapter, currentViewer);
        this.request = request;
    }

    public DeferredCreateConnectionViewAndElementCommand (IElementType type, IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter, EditPartViewer currentViewer, PreferencesHint preferencesHint) {
        this (new CreateConnectionViewAndElementRequest (type, preferencesHint), sourceViewAdapter, targetViewAdapter, currentViewer);
    }

    public DeferredCreateConnectionViewAndElementCommand (CreateRequest request, IAdaptable typeInfoAdapter, IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter, EditPartViewer currentViewer) {
        this (sourceViewAdapter, targetViewAdapter, currentViewer);
        this.request = request;
        this.typeInfoAdapter = typeInfoAdapter;
    }

    public Collection getAffectedObjects () {
        if (viewer != null) {
            EditPart editpart = viewer.getRootEditPart ().getContents ();
            if (editpart instanceof IGraphicalEditPart) {
                View view = (View) editpart.getModel ();
                if (view != null) {
                    IFile f = EObjectUtil.getWorkspaceFile (view);
                    return f != null ? Collections.singletonList (f) : Collections.EMPTY_LIST;
                }
            }
        }
        return super.getAffectedObjects ();
    }

    public boolean isUndoable () {
        return command != null && command.canUndo ();
    }

    public boolean isRedoable () {
        return command != null && command.canExecute ();
    }

    protected EditPart getSourceEditPart () {
        return (IGraphicalEditPart) viewer.getEditPartRegistry ().get (sourceViewAdapter.getAdapter (View.class));
    }

    protected EditPart getTargetEditPart () {
        return (IGraphicalEditPart) viewer.getEditPartRegistry ().get (targetViewAdapter.getAdapter (View.class));
    }

    protected CommandResult doExecute (IProgressMonitor progressMonitor) {
        CreateConnectionViewRequest req = null;
        if (request != null) {
            if (request instanceof CreateConnectionViewRequest) {
                req = (CreateConnectionViewRequest) request;
            }
        } else {
            return newErrorCommandResult (getLabel ());
        }
        if (typeInfoAdapter != null) {
            IElementType typeInfo = (IElementType) typeInfoAdapter.getAdapter (IElementType.class);
            if (typeInfo == null) {
                newErrorCommandResult (getLabel ());
            }
            if (request instanceof CreateUnspecifiedTypeConnectionRequest) {
                req = ((CreateConnectionViewRequest) ((CreateUnspecifiedTypeConnectionRequest) request).getRequestForType (typeInfo));
            }
        }
        req.setLocation (null);
        if (targetViewAdapter.getAdapter (IGraphicalEditPart.class) == null && req instanceof SuppressibleUIRequest) ((SuppressibleUIRequest) req).setSuppressibleUI (true);

        EditPart sourceEP = getSourceEditPart ();
        EditPart targetEP = getTargetEditPart ();
        if ((sourceEP == null) || (targetEP == null)) return null;

        if (req instanceof CreateConnectionViewAndElementRequest) {
            command = CreateConnectionViewAndElementRequest.getCreateCommand (req, sourceEP, targetEP);
        } else {
            command = CreateConnectionViewRequest.getCreateCommand (req, sourceEP, targetEP);
        }
        if (command != null && command.canExecute ()) {
            command.execute ();
        }
        viewer = null;
        View view = (View) req.getConnectionViewDescriptor ().getAdapter (View.class);
        if (null == view) {
            return newCancelledCommandResult ();
        }
        return newOKCommandResult (req.getNewObject ());
    }

    public String getLabel () {
        if (command != null) {
            return command.getLabel ();
        }
        return null;
    }

    protected CommandResult doRedo () {
        if (command != null) {
            command.redo ();
        }
        return newOKCommandResult ();
    }

    protected CommandResult doUndo () {
        if (command != null) {
            command.undo ();
        }
        return newOKCommandResult ();
    }

}

