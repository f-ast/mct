package org.eclipse.gmf.mappings.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.MetricContainer;

import org.eclipse.gmf.mappings.MetricRule;

public class MetricContainerImpl extends EObjectImpl implements MetricContainer {
    protected EList < MetricRule > metrics;

    protected MetricContainerImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getMetricContainer ();
    }

    public EList < MetricRule > getMetrics () {
        if (metrics == null) {
            metrics = new EObjectContainmentWithInverseEList < MetricRule > (MetricRule.class, this, GMFMapPackage.METRIC_CONTAINER__METRICS, GMFMapPackage.METRIC_RULE__CONTAINER);
        }
        return metrics;
    }

    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFMapPackage.METRIC_CONTAINER__METRICS :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getMetrics ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFMapPackage.METRIC_CONTAINER__METRICS :
                return ((InternalEList < ? >) getMetrics ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFMapPackage.METRIC_CONTAINER__METRICS :
                return getMetrics ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFMapPackage.METRIC_CONTAINER__METRICS :
                getMetrics ().clear ();
                getMetrics ().addAll ((Collection < ? extends MetricRule >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFMapPackage.METRIC_CONTAINER__METRICS :
                getMetrics ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFMapPackage.METRIC_CONTAINER__METRICS :
                return metrics != null && ! metrics.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

}

