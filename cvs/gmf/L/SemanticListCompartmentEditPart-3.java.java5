package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Collections;

import java.util.Comparator;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPart;

import org.eclipse.gmf.runtime.diagram.core.listener.NotificationUtil;

import org.eclipse.gmf.runtime.notation.DrawerStyle;

import org.eclipse.gmf.runtime.notation.Filtering;

import org.eclipse.gmf.runtime.notation.FilteringStyle;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.Sorting;

import org.eclipse.gmf.runtime.notation.SortingDirection;

import org.eclipse.gmf.runtime.notation.SortingStyle;

import org.eclipse.gmf.runtime.notation.View;

abstract public class SemanticListCompartmentEditPart extends ListCompartmentEditPart {

    public SemanticListCompartmentEditPart (EObject model) {
        super (model);
    }

    protected void refreshChildren () {
        int i;
        GraphicalEditPart editPart;
        Map modelToEditPart = new HashMap ();
        List _children = getChildren ();
        for (i = 0; i < _children.size (); i ++) {
            editPart = (GraphicalEditPart) _children.get (i);
            modelToEditPart.put (editPart.basicGetModel (), editPart);
        }
        List modelObjects = getModelChildren ();
        for (i = 0; i < modelObjects.size (); i ++) {
            EObject element = (EObject) modelObjects.get (i);
            if (i < _children.size () && (((GraphicalEditPart) _children.get (i)).basicGetModel ()) == element) continue;

            editPart = (GraphicalEditPart) modelToEditPart.get (element);
            if (editPart != null) reorderChild (editPart, i);
            else {
                semanticChildAdded (element, i);
            }
        }
        List trash = new ArrayList ();
        for (; i < _children.size (); i ++) trash.add (_children.get (i));

        for (i = 0; i < trash.size (); i ++) {
            EditPart ep = (EditPart) trash.get (i);
            removeChild (ep);
        }
    }

    protected void semanticChildRemoved (EObject child) {
        if (children == null) return;

        for (Iterator iter = children.iterator ();
        iter.hasNext ();) {
            GraphicalEditPart ep = (GraphicalEditPart) iter.next ();
            if (ep.basicGetModel ().equals (child)) {
                removeChild (ep);
                break;
            }
        }
    }

    protected void refreshSemanticChildren () {
        if (! isCanonicalEnabled ()) return;

        if (resolveSemanticElement () == null) {
            return;
        }
        EObject semanticChild;
        List editPartsChildren = getChildren ();
        List semanticChildren = new ArrayList (getModelChildren ());
        Iterator childrenIT = editPartsChildren.iterator ();
        List orphaned = new ArrayList ();
        while (childrenIT.hasNext ()) {
            GraphicalEditPart eP = (GraphicalEditPart) childrenIT.next ();
            semanticChild = (EObject) eP.basicGetModel ();
            if (semanticChildren.contains (semanticChild)) {
                semanticChildren.remove (semanticChild);
            } else {
                orphaned.add (eP);
            }
        }
        if (! semanticChildren.isEmpty ()) {
            for (Iterator iter = semanticChildren.iterator ();
            iter.hasNext ();) {
                EObject element = (EObject) iter.next ();
                semanticChildAdded (element, - 1);
            }
        }
    }

    public void activate () {
        super.activate ();
        refreshSemanticChildren ();
    }

    abstract protected void semanticChildAdded (EObject child, int index);

    abstract protected List getSemanticChildrenList ();

    protected void handleNotificationEvent (Notification event) {
        Object feature = event.getFeature ();
        if (hasModelChildrenChanged (event)) {
            semanticChildrenListChanged (event);
        } else if ((NotationPackage.eINSTANCE.getDrawerStyle_Collapsed () == feature || NotationPackage.eINSTANCE.getView_Visible () == feature && ! event.getNewBooleanValue ()) || (NotationPackage.eINSTANCE.getView_Visible () == feature && event.getNewBooleanValue ())) {
            refreshSemanticChildren ();
        }

        super.handleNotificationEvent (event);
    }

    protected void semanticChildrenListChanged (Notification event) {
        if (! isCanonicalEnabled ()) return;

        if (NotificationUtil.isElementAddedToSlot (event) || NotificationUtil.isMove (event)) {
            refreshChildren ();
        } else if (NotificationUtil.isElementRemovedFromSlot (event) && event.getOldValue () instanceof EObject) {
            semanticChildRemoved ((EObject) event.getOldValue ());
        }

    }

    protected boolean isCanonicalEnabled () {
        DrawerStyle dstyle = (DrawerStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getDrawerStyle ());
        boolean isCollapsed = dstyle == null ? false : dstyle.isCollapsed ();
        if (isCollapsed) {
            return false;
        }
        return ((View) getModel ()).isVisible ();
    }

    protected List getSortedChildren () {
        SortingStyle style = (SortingStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getSortingStyle ());
        if (style != null) {
            Sorting sorting = style.getSorting ();
            if (Sorting.NONE_LITERAL == sorting) {
                return getSemanticChildrenList ();
            } else if (Sorting.MANUAL_LITERAL == sorting) {
                List allChildren = getSemanticChildrenList ();
                if (allChildren.isEmpty ()) return allChildren;

                List sortedChildren = style.eIsSet (NotationPackage.eINSTANCE.getSortingStyle_SortedObjects ()) ? style.getSortedObjects () : Collections.EMPTY_LIST;
                List sorted = new ArrayList ();
                Iterator i = sortedChildren.iterator ();
                while (i.hasNext ()) {
                    EObject eObject = (EObject) i.next ();
                    if (allChildren.contains (eObject)) sorted.add (eObject);

                }
                for (int j = 0;
                j < allChildren.size (); j ++) {
                    EObject element = (EObject) allChildren.get (j);
                    if (! sorted.contains (element)) sorted.add (element);

                }
                return sorted;
            } else if (Sorting.AUTOMATIC_LITERAL == sorting) {
                Map sortingKeys = style.eIsSet (NotationPackage.eINSTANCE.getSortingStyle_SortingKeys ()) ? style.getSortingKeys () : Collections.EMPTY_MAP;
                return getChildrenSortedBy (sortingKeys);
            }

        }
        return getSemanticChildrenList ();
    }

    protected List getChildrenSortedBy (Map sortingKeys) {
        List allChildren = new ArrayList (getSemanticChildrenList ());
        if (sortingKeys != null && ! sortingKeys.isEmpty ()) {
            Collection keySet = sortingKeys.keySet ();
            Iterator i = keySet.iterator ();
            String name = (String) i.next ();
            SortingDirection direction = (SortingDirection) sortingKeys.get (name);
            Comparator comparator = getComparator (name, direction);
            if (comparator != null) Collections.sort (allChildren, getComparator (name, direction));

        }
        return allChildren;
    }

    protected List getFilteredChildren () {
        Object model = getModel ();
        if (model instanceof View) {
            View view = (View) model;
            FilteringStyle style = (FilteringStyle) view.getStyle (NotationPackage.eINSTANCE.getFilteringStyle ());
            if (style != null) {
                Filtering filtering = style.getFiltering ();
                if (Filtering.NONE_LITERAL == filtering) {
                    return Collections.EMPTY_LIST;
                } else if (Filtering.MANUAL_LITERAL == filtering) {
                    List filteredChildren = style.eIsSet (NotationPackage.eINSTANCE.getFilteringStyle_FilteredObjects ()) ? style.getFilteredObjects () : Collections.EMPTY_LIST;
                    return filteredChildren;
                } else if (Filtering.AUTOMATIC_LITERAL == filtering) {
                    List filteringKeys = style.eIsSet (NotationPackage.eINSTANCE.getFilteringStyle_FilteringKeys ()) ? style.getFilteringKeys () : Collections.EMPTY_LIST;
                    return getChildrenFilteredBy (filteringKeys);
                }

            }
        }
        return Collections.EMPTY_LIST;
    }

}

