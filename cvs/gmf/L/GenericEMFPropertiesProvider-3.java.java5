package org.eclipse.gmf.runtime.emf.ui.properties.providers;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.ui.views.properties.IPropertySourceProvider;

import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.ui.services.properties.GetPropertySourceOperation;

import org.eclipse.gmf.runtime.common.ui.services.properties.ICompositePropertySource;

import org.eclipse.gmf.runtime.common.ui.services.properties.IPropertiesProvider;

import org.eclipse.gmf.runtime.emf.core.internal.util.MSLAdapterFactoryManager;

import org.eclipse.gmf.runtime.emf.ui.properties.descriptors.EMFCompositePropertySource;

public class GenericEMFPropertiesProvider extends AbstractProvider implements IPropertiesProvider {

    public GenericEMFPropertiesProvider () {
        super ();
    }

    protected static AdapterFactory getAdapterFactory () {
        return MSLAdapterFactoryManager.getAdapterFactory ();
    }

    public ICompositePropertySource getPropertySource (Object object) {
        if (object instanceof ICompositePropertySource) {
            return (ICompositePropertySource) object;
        } else {
            IItemPropertySource itemPropertySource = (IItemPropertySource) (getAdapterFactory ().adapt (object, IItemPropertySource.class));
            return itemPropertySource != null ? createPropertySource (object, itemPropertySource) : null;
        }
    }

    public boolean provides (IOperation operation) {
        return operation instanceof GetPropertySourceOperation && (((GetPropertySourceOperation) operation).getPropertySource () == null);
    }

    protected ICompositePropertySource createPropertySource (Object object, IItemPropertySource itemPropertySource) {
        return new EMFCompositePropertySource (object, itemPropertySource, "EMF");
    }

}

