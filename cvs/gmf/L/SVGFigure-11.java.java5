package org.eclipse.gmf.runtime.lite.svg;

import java.awt.geom.Rectangle2D;

import java.awt.image.BufferedImage;

import java.awt.image.WritableRaster;

import java.io.IOException;

import javax.xml.xpath.XPath;

import javax.xml.xpath.XPathConstants;

import javax.xml.xpath.XPathExpressionException;

import javax.xml.xpath.XPathFactory;

import org.apache.batik.bridge.BridgeContext;

import org.apache.batik.dom.svg.SAXSVGDocumentFactory;

import org.apache.batik.util.XMLResourceDescriptor;

import org.eclipse.draw2d.Figure;

import org.eclipse.draw2d.Graphics;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.internal.runtime.lite.svg.Activator;

import org.eclipse.gmf.internal.runtime.lite.svg.InferringNamespaceContext;

import org.eclipse.gmf.internal.runtime.lite.svg.SimpleImageTranscoder;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.Device;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.graphics.ImageData;

import org.eclipse.swt.graphics.PaletteData;

import org.eclipse.swt.widgets.Display;

import org.w3c.dom.Document;

import org.w3c.dom.Element;

import org.w3c.dom.NodeList;

public class SVGFigure extends Figure {
    private String uri;
    private boolean failedToLoadDocument, specifyCanvasWidth = true, specifyCanvasHeight = true;
    private SimpleImageTranscoder transcoder;

    public final String getURI () {
        return uri;
    }

    public final void setURI (String uri) {
        setURI (uri, true);
    }

    public void setURI (String uri, boolean loadOnDemand) {
        this.uri = uri;
        transcoder = null;
        failedToLoadDocument = false;
        if (loadOnDemand) {
            loadDocument ();
        }
    }

    private void loadDocument () {
        transcoder = null;
        failedToLoadDocument = true;
        if (uri == null) {
            return;
        }
        String parser = XMLResourceDescriptor.getXMLParserClassName ();
        SAXSVGDocumentFactory factory = new SAXSVGDocumentFactory (parser);
        try {
            Document document = factory.createDocument (uri);
            transcoder = new SimpleImageTranscoder (document);
            failedToLoadDocument = false;
        } catch (IOException e) {
            Activator.logError ("Error loading SVG file", e);
        }
    }

    protected final Document getDocument () {
        if (failedToLoadDocument) {
            return null;
        }
        if (transcoder == null) {
            loadDocument ();
        }
        return transcoder == null ? null : transcoder.getDocument ();
    }

    public final boolean checkContentAvailable () {
        return getDocument () != null;
    }

    private XPath getXPath () {
        XPath xpath = XPathFactory.newInstance ().newXPath ();
        xpath.setNamespaceContext (new InferringNamespaceContext (getDocument ().getDocumentElement ()));
        return xpath;
    }

    protected final NodeList getNodes (String query) {
        Document document = getDocument ();
        if (document != null) {
            try {
                return (NodeList) getXPath ().evaluate (query, document, XPathConstants.NODESET);
            } catch (XPathExpressionException e) {
                throw new RuntimeException (e);
            }
        }
        return null;
    }

    protected Color getColor (Element element, String attributeName) {
        if (getDocument () == null || getDocument () != element.getOwnerDocument ()) {
            return null;
        }
        Color color = null;
        BridgeContext ctx = transcoder.initCSSEngine ();
        try {
            color = SVGUtils.toSWTColor (element, attributeName);
        } finally {
            if (ctx != null) {
                ctx.dispose ();
            }
        }
        return color;
    }

    @Override
    protected void paintFigure (Graphics graphics) {
        super.paintFigure (graphics);
        Document document = getDocument ();
        if (document == null) {
            return;
        }
        Image image = null;
        try {
            Rectangle r = getClientArea ();
            transcoder.setCanvasSize (specifyCanvasWidth ? r.width : - 1, specifyCanvasHeight ? r.height : - 1);
            BufferedImage awtImage = transcoder.getBufferedImage ();
            if (awtImage != null) {
                image = toSWT (Display.getCurrent (), awtImage);
                graphics.drawImage (image, r.x, r.y);
            }
        } finally {
            if (image != null) {
                image.dispose ();
            }
        }
    }

    private static org.eclipse.swt.graphics.Image toSWT (Device device, BufferedImage awtImage) {
        PaletteData palette = new PaletteData (0xFF0000, 0xFF00, 0xFF);
        ImageData swtImageData = new ImageData (awtImage.getWidth (), awtImage.getHeight (), 24, palette);
        int scansize = (((awtImage.getWidth () * 3) + 3) * 4) / 4;
        WritableRaster alphaRaster = awtImage.getAlphaRaster ();
        byte [] alphaBytes = new byte [awtImage.getWidth ()];
        for (int y = 0;
        y < awtImage.getHeight (); y ++) {
            int [] buff = awtImage.getRGB (0, y, awtImage.getWidth (), 1, null, 0, scansize);
            swtImageData.setPixels (0, y, awtImage.getWidth (), buff, 0);
            if (alphaRaster != null) {
                int [] alpha = alphaRaster.getPixels (0, y, awtImage.getWidth (), 1, (int []) null);
                for (int i = 0;
                i < awtImage.getWidth (); i ++) {
                    alphaBytes [i] = (byte) alpha [i];
                }
                swtImageData.setAlphas (0, y, awtImage.getWidth (), alphaBytes, 0);
            }
        }
        return new org.eclipse.swt.graphics.Image (device, swtImageData);
    }

    public final Rectangle2D getAreaOfInterest () {
        getDocument ();
        return transcoder == null ? null : transcoder.getCanvasAreaOfInterest ();
    }

    public void setAreaOfInterest (Rectangle2D value) {
        getDocument ();
        if (transcoder != null) {
            transcoder.setCanvasAreaOfInterest (value);
        }
        repaint ();
    }

    public final boolean isSpecifyCanvasWidth () {
        return specifyCanvasWidth;
    }

    public void setSpecifyCanvasWidth (boolean specifyCanvasWidth) {
        this.specifyCanvasWidth = specifyCanvasWidth;
        contentChanged ();
    }

    public final boolean isSpecifyCanvasHeight () {
        return specifyCanvasHeight;
    }

    public void setSpecifyCanvasHeight (boolean specifyCanvasHeight) {
        this.specifyCanvasHeight = specifyCanvasHeight;
        contentChanged ();
    }

    public void contentChanged () {
        getDocument ();
        if (transcoder != null) {
            transcoder.contentChanged ();
        }
        repaint ();
    }

}

