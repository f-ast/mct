package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.List;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.requests.GroupRequest;

import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;

import org.eclipse.gmf.runtime.diagram.core.commands.SetPropertyCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;

import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.View;

public class VisibilityComponentEditPolicy extends ComponentEditPolicy {

    protected Command createDeleteViewCommand (GroupRequest deleteRequest) {
        CompositeCommand cc = new CompositeCommand (null);
        List toDel = deleteRequest.getEditParts ();
        if (toDel == null || toDel.isEmpty ()) {
            SetPropertyCommand c = new SetPropertyCommand (PresentationResourceManager.getInstance ().getString ("Command.hideLabel.Label"), new EObjectAdapter ((View) getHost ().getModel ()), Properties.ID_ISVISIBLE, new Boolean (false));
            cc.compose (c);
        } else {
            for (int i = 0;
            i < toDel.size (); i ++) {
                IGraphicalEditPart gep = (IGraphicalEditPart) toDel.get (i);
                SetPropertyCommand c = new SetPropertyCommand (PresentationResourceManager.getInstance ().getString ("Command.hideLabel.Label"), new EObjectAdapter ((View) gep.getModel ()), Properties.ID_ISVISIBLE, new Boolean (false));
                cc.compose (c);
            }
        }
        return new EtoolsProxyCommand (cc.unwrap ());
    }

    protected Command createDeleteSemanticCommand (GroupRequest deleteRequest) {
        return null;
    }

}

