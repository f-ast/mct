package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;

import org.eclipse.gmf.codegen.gmfgen.GenChildNode;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

public class GenChildNodeImpl extends GenNodeImpl implements GenChildNode {
    protected EList < GenChildContainer > containers;

    protected GenChildNodeImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenChildNode ();
    }

    public GenDiagram getDiagram () {
        if (eContainerFeatureID != GMFGenPackage.GEN_CHILD_NODE__DIAGRAM) return null;

        return (GenDiagram) eContainer ();
    }

    public NotificationChain basicSetDiagram (GenDiagram newDiagram, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newDiagram, GMFGenPackage.GEN_CHILD_NODE__DIAGRAM, msgs);
        return msgs;
    }

    public void setDiagram (GenDiagram newDiagram) {
        if (newDiagram != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_CHILD_NODE__DIAGRAM && newDiagram != null)) {
            if (EcoreUtil.isAncestor (this, newDiagram)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newDiagram != null) msgs = ((InternalEObject) newDiagram).eInverseAdd (this, GMFGenPackage.GEN_DIAGRAM__CHILD_NODES, GenDiagram.class, msgs);

            msgs = basicSetDiagram (newDiagram, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CHILD_NODE__DIAGRAM, newDiagram, newDiagram));

    }

    public EList < GenChildContainer > getContainers () {
        if (containers == null) {
            containers = new EObjectWithInverseResolvingEList.ManyInverse < GenChildContainer > (GenChildContainer.class, this, GMFGenPackage.GEN_CHILD_NODE__CONTAINERS, GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES);
        }
        return containers;
    }

    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetDiagram ((GenDiagram) otherEnd, msgs);
            case GMFGenPackage.GEN_CHILD_NODE__CONTAINERS :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getContainers ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM :
                return basicSetDiagram (null, msgs);
            case GMFGenPackage.GEN_CHILD_NODE__CONTAINERS :
                return ((InternalEList < ? >) getContainers ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_DIAGRAM__CHILD_NODES, GenDiagram.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM :
                return getDiagram ();
            case GMFGenPackage.GEN_CHILD_NODE__CONTAINERS :
                return getContainers ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM :
                setDiagram ((GenDiagram) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM :
                setDiagram ((GenDiagram) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM :
                return getDiagram () != null;
            case GMFGenPackage.GEN_CHILD_NODE__CONTAINERS :
                return containers != null && ! containers.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

}

