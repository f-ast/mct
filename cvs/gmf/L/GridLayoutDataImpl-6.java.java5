package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.gmfgraph.Alignment;

import org.eclipse.gmf.gmfgraph.Dimension;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.GridLayoutData;

import org.eclipse.gmf.gmfgraph.Layoutable;

public class GridLayoutDataImpl extends EObjectImpl implements GridLayoutData {
    protected static final boolean GRAB_EXCESS_HORIZONTAL_SPACE_EDEFAULT = false;
    protected boolean grabExcessHorizontalSpace = GRAB_EXCESS_HORIZONTAL_SPACE_EDEFAULT;
    protected static final boolean GRAB_EXCESS_VERTICAL_SPACE_EDEFAULT = false;
    protected boolean grabExcessVerticalSpace = GRAB_EXCESS_VERTICAL_SPACE_EDEFAULT;
    protected static final Alignment VERTICAL_ALIGNMENT_EDEFAULT = Alignment.CENTER_LITERAL;
    protected Alignment verticalAlignment = VERTICAL_ALIGNMENT_EDEFAULT;
    protected static final Alignment HORIZONTAL_ALIGNMENT_EDEFAULT = Alignment.CENTER_LITERAL;
    protected Alignment horizontalAlignment = HORIZONTAL_ALIGNMENT_EDEFAULT;
    protected static final int VERTICAL_SPAN_EDEFAULT = 1;
    protected int verticalSpan = VERTICAL_SPAN_EDEFAULT;
    protected static final int HORIZONTAL_SPAN_EDEFAULT = 1;
    protected int horizontalSpan = HORIZONTAL_SPAN_EDEFAULT;
    protected static final int HORIZONTAL_INDENT_EDEFAULT = 0;
    protected int horizontalIndent = HORIZONTAL_INDENT_EDEFAULT;
    protected Dimension sizeHint;

    protected GridLayoutDataImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getGridLayoutData ();
    }

    public boolean isGrabExcessHorizontalSpace () {
        return grabExcessHorizontalSpace;
    }

    public void setGrabExcessHorizontalSpace (boolean newGrabExcessHorizontalSpace) {
        boolean oldGrabExcessHorizontalSpace = grabExcessHorizontalSpace;
        grabExcessHorizontalSpace = newGrabExcessHorizontalSpace;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT_DATA__GRAB_EXCESS_HORIZONTAL_SPACE, oldGrabExcessHorizontalSpace, grabExcessHorizontalSpace));

    }

    public boolean isGrabExcessVerticalSpace () {
        return grabExcessVerticalSpace;
    }

    public void setGrabExcessVerticalSpace (boolean newGrabExcessVerticalSpace) {
        boolean oldGrabExcessVerticalSpace = grabExcessVerticalSpace;
        grabExcessVerticalSpace = newGrabExcessVerticalSpace;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT_DATA__GRAB_EXCESS_VERTICAL_SPACE, oldGrabExcessVerticalSpace, grabExcessVerticalSpace));

    }

    public Alignment getVerticalAlignment () {
        return verticalAlignment;
    }

    public void setVerticalAlignment (Alignment newVerticalAlignment) {
        Alignment oldVerticalAlignment = verticalAlignment;
        verticalAlignment = newVerticalAlignment == null ? VERTICAL_ALIGNMENT_EDEFAULT : newVerticalAlignment;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT_DATA__VERTICAL_ALIGNMENT, oldVerticalAlignment, verticalAlignment));

    }

    public Alignment getHorizontalAlignment () {
        return horizontalAlignment;
    }

    public void setHorizontalAlignment (Alignment newHorizontalAlignment) {
        Alignment oldHorizontalAlignment = horizontalAlignment;
        horizontalAlignment = newHorizontalAlignment == null ? HORIZONTAL_ALIGNMENT_EDEFAULT : newHorizontalAlignment;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_ALIGNMENT, oldHorizontalAlignment, horizontalAlignment));

    }

    public int getVerticalSpan () {
        return verticalSpan;
    }

    public void setVerticalSpan (int newVerticalSpan) {
        int oldVerticalSpan = verticalSpan;
        verticalSpan = newVerticalSpan;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT_DATA__VERTICAL_SPAN, oldVerticalSpan, verticalSpan));

    }

    public int getHorizontalSpan () {
        return horizontalSpan;
    }

    public void setHorizontalSpan (int newHorizontalSpan) {
        int oldHorizontalSpan = horizontalSpan;
        horizontalSpan = newHorizontalSpan;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_SPAN, oldHorizontalSpan, horizontalSpan));

    }

    public int getHorizontalIndent () {
        return horizontalIndent;
    }

    public void setHorizontalIndent (int newHorizontalIndent) {
        int oldHorizontalIndent = horizontalIndent;
        horizontalIndent = newHorizontalIndent;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_INDENT, oldHorizontalIndent, horizontalIndent));

    }

    public Dimension getSizeHint () {
        return sizeHint;
    }

    public NotificationChain basicSetSizeHint (Dimension newSizeHint, NotificationChain msgs) {
        Dimension oldSizeHint = sizeHint;
        sizeHint = newSizeHint;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT_DATA__SIZE_HINT, oldSizeHint, newSizeHint);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setSizeHint (Dimension newSizeHint) {
        if (newSizeHint != sizeHint) {
            NotificationChain msgs = null;
            if (sizeHint != null) msgs = ((InternalEObject) sizeHint).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.GRID_LAYOUT_DATA__SIZE_HINT, null, msgs);

            if (newSizeHint != null) msgs = ((InternalEObject) newSizeHint).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.GRID_LAYOUT_DATA__SIZE_HINT, null, msgs);

            msgs = basicSetSizeHint (newSizeHint, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT_DATA__SIZE_HINT, newSizeHint, newSizeHint));

    }

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.GRID_LAYOUT_DATA__OWNER :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetOwner ((Layoutable) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.GRID_LAYOUT_DATA__OWNER :
                return basicSetOwner (null, msgs);
            case GMFGraphPackage.GRID_LAYOUT_DATA__SIZE_HINT :
                return basicSetSizeHint (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGraphPackage.GRID_LAYOUT_DATA__OWNER :
                return eInternalContainer ().eInverseRemove (this, GMFGraphPackage.LAYOUTABLE__LAYOUT_DATA, Layoutable.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.GRID_LAYOUT_DATA__OWNER :
                return getOwner ();
            case GMFGraphPackage.GRID_LAYOUT_DATA__GRAB_EXCESS_HORIZONTAL_SPACE :
                return isGrabExcessHorizontalSpace () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGraphPackage.GRID_LAYOUT_DATA__GRAB_EXCESS_VERTICAL_SPACE :
                return isGrabExcessVerticalSpace () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGraphPackage.GRID_LAYOUT_DATA__VERTICAL_ALIGNMENT :
                return getVerticalAlignment ();
            case GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_ALIGNMENT :
                return getHorizontalAlignment ();
            case GMFGraphPackage.GRID_LAYOUT_DATA__VERTICAL_SPAN :
                return new Integer (getVerticalSpan ());
            case GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_SPAN :
                return new Integer (getHorizontalSpan ());
            case GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_INDENT :
                return new Integer (getHorizontalIndent ());
            case GMFGraphPackage.GRID_LAYOUT_DATA__SIZE_HINT :
                return getSizeHint ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.GRID_LAYOUT_DATA__OWNER :
                setOwner ((Layoutable) newValue);
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__GRAB_EXCESS_HORIZONTAL_SPACE :
                setGrabExcessHorizontalSpace (((Boolean) newValue).booleanValue ());
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__GRAB_EXCESS_VERTICAL_SPACE :
                setGrabExcessVerticalSpace (((Boolean) newValue).booleanValue ());
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__VERTICAL_ALIGNMENT :
                setVerticalAlignment ((Alignment) newValue);
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_ALIGNMENT :
                setHorizontalAlignment ((Alignment) newValue);
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__VERTICAL_SPAN :
                setVerticalSpan (((Integer) newValue).intValue ());
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_SPAN :
                setHorizontalSpan (((Integer) newValue).intValue ());
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_INDENT :
                setHorizontalIndent (((Integer) newValue).intValue ());
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__SIZE_HINT :
                setSizeHint ((Dimension) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.GRID_LAYOUT_DATA__OWNER :
                setOwner ((Layoutable) null);
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__GRAB_EXCESS_HORIZONTAL_SPACE :
                setGrabExcessHorizontalSpace (GRAB_EXCESS_HORIZONTAL_SPACE_EDEFAULT);
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__GRAB_EXCESS_VERTICAL_SPACE :
                setGrabExcessVerticalSpace (GRAB_EXCESS_VERTICAL_SPACE_EDEFAULT);
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__VERTICAL_ALIGNMENT :
                setVerticalAlignment (VERTICAL_ALIGNMENT_EDEFAULT);
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_ALIGNMENT :
                setHorizontalAlignment (HORIZONTAL_ALIGNMENT_EDEFAULT);
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__VERTICAL_SPAN :
                setVerticalSpan (VERTICAL_SPAN_EDEFAULT);
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_SPAN :
                setHorizontalSpan (HORIZONTAL_SPAN_EDEFAULT);
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_INDENT :
                setHorizontalIndent (HORIZONTAL_INDENT_EDEFAULT);
                return;
            case GMFGraphPackage.GRID_LAYOUT_DATA__SIZE_HINT :
                setSizeHint ((Dimension) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.GRID_LAYOUT_DATA__OWNER :
                return getOwner () != null;
            case GMFGraphPackage.GRID_LAYOUT_DATA__GRAB_EXCESS_HORIZONTAL_SPACE :
                return grabExcessHorizontalSpace != GRAB_EXCESS_HORIZONTAL_SPACE_EDEFAULT;
            case GMFGraphPackage.GRID_LAYOUT_DATA__GRAB_EXCESS_VERTICAL_SPACE :
                return grabExcessVerticalSpace != GRAB_EXCESS_VERTICAL_SPACE_EDEFAULT;
            case GMFGraphPackage.GRID_LAYOUT_DATA__VERTICAL_ALIGNMENT :
                return verticalAlignment != VERTICAL_ALIGNMENT_EDEFAULT;
            case GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_ALIGNMENT :
                return horizontalAlignment != HORIZONTAL_ALIGNMENT_EDEFAULT;
            case GMFGraphPackage.GRID_LAYOUT_DATA__VERTICAL_SPAN :
                return verticalSpan != VERTICAL_SPAN_EDEFAULT;
            case GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_SPAN :
                return horizontalSpan != HORIZONTAL_SPAN_EDEFAULT;
            case GMFGraphPackage.GRID_LAYOUT_DATA__HORIZONTAL_INDENT :
                return horizontalIndent != HORIZONTAL_INDENT_EDEFAULT;
            case GMFGraphPackage.GRID_LAYOUT_DATA__SIZE_HINT :
                return sizeHint != null;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (grabExcessHorizontalSpace: ");
        result.append (grabExcessHorizontalSpace);
        result.append (", grabExcessVerticalSpace: ");
        result.append (grabExcessVerticalSpace);
        result.append (", verticalAlignment: ");
        result.append (verticalAlignment);
        result.append (", horizontalAlignment: ");
        result.append (horizontalAlignment);
        result.append (", verticalSpan: ");
        result.append (verticalSpan);
        result.append (", horizontalSpan: ");
        result.append (horizontalSpan);
        result.append (", horizontalIndent: ");
        result.append (horizontalIndent);
        result.append (')');
        return result.toString ();
    }

    public Layoutable getOwner () {
        if (eContainerFeatureID != GMFGraphPackage.GRID_LAYOUT_DATA__OWNER) return null;

        return (Layoutable) eContainer ();
    }

    public NotificationChain basicSetOwner (Layoutable newOwner, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newOwner, GMFGraphPackage.GRID_LAYOUT_DATA__OWNER, msgs);
        return msgs;
    }

    public void setOwner (Layoutable newOwner) {
        if (newOwner != eInternalContainer () || (eContainerFeatureID != GMFGraphPackage.GRID_LAYOUT_DATA__OWNER && newOwner != null)) {
            if (EcoreUtil.isAncestor (this, newOwner)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newOwner != null) msgs = ((InternalEObject) newOwner).eInverseAdd (this, GMFGraphPackage.LAYOUTABLE__LAYOUT_DATA, Layoutable.class, msgs);

            msgs = basicSetOwner (newOwner, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.GRID_LAYOUT_DATA__OWNER, newOwner, newOwner));

    }

}

