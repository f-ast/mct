package org.eclipse.gmf.internal.bridge.resolver;

import java.lang.ref.WeakReference;

import java.util.Collection;

import java.util.HashSet;

import java.util.Iterator;

import java.util.Set;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.EReference;

public class ContainmentClosure {
    private static WeakReference < EClass > rootRef = new WeakReference < EClass > (null);
    private static WeakReference < EPackage > scopeRef = new WeakReference < EPackage > (null);
    private static WeakReference < Set < EClass > > closureRef = new WeakReference < Set < EClass > > (null);

    private ContainmentClosure () {
    }

    public static synchronized boolean contains (EClass root, EClass type, EPackage scope) {
        assert root != null;
        assert type != null;
        assert scope != null;
        Set < EClass > closure = closureRef.get ();
        if (rootRef.get () != root || scopeRef.get () != scope || closure == null) {
            closure = build (root, scope);
            rootRef = new WeakReference < EClass > (root);
            scopeRef = new WeakReference < EPackage > (scope);
            closureRef = new WeakReference < Set < EClass > > (closure);
        }
        return closure.contains (type);
    }

    private static Set < EClass > build (EClass type, EPackage scope) {
        assert type != null;
        Set < EClass > closure = new HashSet < EClass > ();
        Set < EClass > roots = new HashSet < EClass > ();
        roots.add (type);
        while (! roots.isEmpty ()) {
            Set localRoots = roots;
            roots = new HashSet < EClass > ();
            for (Iterator it = localRoots.iterator ();
            it.hasNext ();) {
                EClass root = (EClass) it.next ();
                for (Iterator it1 = root.getEAllContainments ().iterator ();
                it1.hasNext ();) {
                    EClass refType = ((EReference) it1.next ()).getEReferenceType ();
                    if (closure.contains (refType)) {
                        continue;
                    }
                    closure.add (refType);
                    roots.add (refType);
                    Collection subtypes = getSubtypes (refType, scope);
                    if (subtypes != null) {
                        for (Iterator it2 = subtypes.iterator ();
                        it2.hasNext ();) {
                            EClass subtype = (EClass) it2.next ();
                            if (closure.contains (subtype)) {
                                continue;
                            }
                            closure.add (subtype);
                            roots.add (subtype);
                        }
                    }
                }
            }
        }
        return closure;
    }

    private static Collection < EClass > getSubtypes (EClass type, EPackage scope) {
        Collection < EClass > subtypes = null;
        for (Iterator it = scope.eAllContents ();
        it.hasNext ();) {
            Object next = it.next ();
            if (next instanceof EClass) {
                EClass nextType = (EClass) next;
                if (type != nextType && type.isSuperTypeOf (nextType)) {
                    if (subtypes == null) {
                        subtypes = new HashSet < EClass > ();
                    }
                    subtypes.add (nextType);
                }
            }
        }
        return subtypes;
    }

}

