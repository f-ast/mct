package org.eclipse.gmf.internal.common.reconcile;

import java.text.MessageFormat;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

public class ReflectiveMatcher implements Matcher {
    private final EStructuralFeature myFeature;

    public ReflectiveMatcher (EStructuralFeature feature) {
        assert feature != null;
        myFeature = feature;
    }

    public final boolean match (EObject current, EObject old) {
        assertCompatible (current, old);
        checkReflector (current.eClass ());
        Object currentValue = current.eGet (myFeature);
        return currentValue != null && currentValue.equals (old.eGet (myFeature));
    }

    private void assertCompatible (EObject current, EObject old) {
        if (! current.eClass ().equals (old.eClass ())) {
            throw new IllegalStateException (MessageFormat.format ("Objects not compatible: {0}, {1}", new Object [] {current, old}));
        }
    }

    private void checkReflector (EClass eClass) {
        if (! myFeature.getEContainingClass ().isSuperTypeOf (eClass)) {
            throw new IllegalStateException (MessageFormat.format ("EClass {0} is not compatible with expected class {1} ", new Object [] {eClass, myFeature.getEContainingClass ()}));
        }
    }

}

