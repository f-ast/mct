package org.eclipse.gmf.runtime.notation.impl;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.BasicEList;

import org.eclipse.emf.common.util.ECollections;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.EModelElementImpl;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EContentsEList;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;

import org.eclipse.emf.ecore.util.EObjectWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.Style;

import org.eclipse.gmf.runtime.notation.View;

public abstract class ViewImpl extends EModelElementImpl implements View {
    protected static final boolean VISIBLE_EDEFAULT = true;
    protected static final int VISIBLE_EFLAG = 1 << 8;
    protected static final String TYPE_EDEFAULT = "";
    protected String type = TYPE_EDEFAULT;
    protected static final boolean MUTABLE_EDEFAULT = false;
    protected static final int MUTABLE_EFLAG = 1 << 9;
    protected EList sourceEdges = null;
    protected EList targetEdges = null;
    protected EList persistedChildren = null;
    protected EList styles = null;
    protected EObject element = null;
    protected static final int ELEMENT_ESETFLAG = 1 << 10;
    protected EList transientChildren = null;
    private EContentsEList allChildren = null;
    protected static final EStructuralFeature [] childrenFeatures = new EStructuralFeature [] {NotationPackage.Literals.VIEW__PERSISTED_CHILDREN, NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN};

    protected ViewImpl () {
        super ();
        eFlags |= VISIBLE_EFLAG;
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.VIEW;
    }

    public boolean isVisible () {
        return (eFlags & VISIBLE_EFLAG) != 0;
    }

    public void setVisible (boolean newVisible) {
        boolean oldVisible = (eFlags & VISIBLE_EFLAG) != 0;
        if (newVisible) eFlags |= VISIBLE_EFLAG;
        else eFlags &= ~ VISIBLE_EFLAG;

        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.VIEW__VISIBLE, oldVisible, newVisible));

    }

    public String getType () {
        return type;
    }

    public void setType (String newType) {
        String oldType = type;
        type = (newType == null) ? null : newType.intern ();
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.VIEW__TYPE, oldType, type));

    }

    public boolean isMutable () {
        return (eFlags & MUTABLE_EFLAG) != 0;
    }

    public void setMutable (boolean newMutable) {
        boolean oldMutable = (eFlags & MUTABLE_EFLAG) != 0;
        if (newMutable) eFlags |= MUTABLE_EFLAG;
        else eFlags &= ~ MUTABLE_EFLAG;

        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.VIEW__MUTABLE, oldMutable, newMutable));

    }

    public EList getSourceEdges () {
        if (sourceEdges == null) {
            sourceEdges = new EObjectWithInverseEList (Edge.class, this, NotationPackage.VIEW__SOURCE_EDGES, NotationPackage.EDGE__SOURCE);
        }
        return sourceEdges;
    }

    public EList getTargetEdges () {
        if (targetEdges == null) {
            targetEdges = new EObjectWithInverseEList (Edge.class, this, NotationPackage.VIEW__TARGET_EDGES, NotationPackage.EDGE__TARGET);
        }
        return targetEdges;
    }

    public EList getPersistedChildren () {
        if (persistedChildren == null) {
            persistedChildren = new EObjectContainmentEList (Node.class, this, NotationPackage.VIEW__PERSISTED_CHILDREN);
        }
        return persistedChildren;
    }

    public EList getChildren () {
        if (allChildren == null) {
            allChildren = new EContentsEList (this, childrenFeatures);
        }
        return allChildren;
    }

    public EList getStyles () {
        if (styles == null) {
            styles = new EObjectContainmentEList (Style.class, this, NotationPackage.VIEW__STYLES);
        }
        return styles;
    }

    public EObject getElement () {
        if (! isSetElement ()) {
            EObject container = eContainer ();
            if (container instanceof View) {
                View view = (View) container;
                element = view.getElement ();
            }
        }
        if (element != null && element.eIsProxy ()) {
            EObject oldElement = element;
            element = eResolveProxy ((InternalEObject) element);
            if (element != oldElement) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, NotationPackage.VIEW__ELEMENT, oldElement, element));

            }
        }
        return element;
    }

    public EObject basicGetElement () {
        return element;
    }

    public void setElement (EObject newElement) {
        EObject oldElement = element;
        element = newElement;
        boolean oldElementESet = (eFlags & ELEMENT_ESETFLAG) != 0;
        eFlags |= ELEMENT_ESETFLAG;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.VIEW__ELEMENT, oldElement, element, ! oldElementESet));

    }

    public void unsetElement () {
        EObject oldElement = element;
        boolean oldElementESet = (eFlags & ELEMENT_ESETFLAG) != 0;
        element = null;
        eFlags &= ~ ELEMENT_ESETFLAG;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.UNSET, NotationPackage.VIEW__ELEMENT, oldElement, null, oldElementESet));

    }

    public boolean isSetElement () {
        return (eFlags & ELEMENT_ESETFLAG) != 0;
    }

    public Diagram getDiagram () {
        Diagram diagram = basicGetDiagram ();
        return diagram != null && diagram.eIsProxy () ? (Diagram) eResolveProxy ((InternalEObject) diagram) : diagram;
    }

    public Diagram basicGetDiagram () {
        for (EObject parent = this;
        parent != null; parent = parent.eContainer ()) if (NotationPackage.Literals.DIAGRAM.isSuperTypeOf (parent.eClass ())) return (Diagram) parent;

        return null;
    }

    public EList getTransientChildren () {
        if (transientChildren == null) {
            transientChildren = new EObjectContainmentEList (Node.class, this, NotationPackage.VIEW__TRANSIENT_CHILDREN);
        }
        return transientChildren;
    }

    public Style getStyle (EClass eClass) {
        if (eClass != null && eIsSet (NotationPackage.Literals.VIEW__STYLES)) {
            for (Iterator i = getStyles ().iterator ();
            i.hasNext ();) {
                Style style = (Style) i.next ();
                if (style.eClass () == eClass || eClass.isInstance (style)) return style;

            }
        }
        return null;
    }

    public Node createChild (EClass eClass) {
        Node newChild = (Node) eClass.getEPackage ().getEFactoryInstance ().create (eClass);
        getPersistedChildren ().add (newChild);
        return newChild;
    }

    public Style createStyle (EClass eClass) {
        Style newStyle = (Style) eClass.getEPackage ().getEFactoryInstance ().create (eClass);
        getStyles ().add (newStyle);
        return newStyle;
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case NotationPackage.VIEW__EANNOTATIONS :
                return ((InternalEList) getEAnnotations ()).basicAdd (otherEnd, msgs);
            case NotationPackage.VIEW__SOURCE_EDGES :
                return ((InternalEList) getSourceEdges ()).basicAdd (otherEnd, msgs);
            case NotationPackage.VIEW__TARGET_EDGES :
                return ((InternalEList) getTargetEdges ()).basicAdd (otherEnd, msgs);
        }
        return eDynamicInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case NotationPackage.VIEW__EANNOTATIONS :
                return ((InternalEList) getEAnnotations ()).basicRemove (otherEnd, msgs);
            case NotationPackage.VIEW__SOURCE_EDGES :
                return ((InternalEList) getSourceEdges ()).basicRemove (otherEnd, msgs);
            case NotationPackage.VIEW__TARGET_EDGES :
                return ((InternalEList) getTargetEdges ()).basicRemove (otherEnd, msgs);
            case NotationPackage.VIEW__PERSISTED_CHILDREN :
                return ((InternalEList) getPersistedChildren ()).basicRemove (otherEnd, msgs);
            case NotationPackage.VIEW__STYLES :
                return ((InternalEList) getStyles ()).basicRemove (otherEnd, msgs);
            case NotationPackage.VIEW__TRANSIENT_CHILDREN :
                return ((InternalEList) getTransientChildren ()).basicRemove (otherEnd, msgs);
        }
        return eDynamicInverseRemove (otherEnd, featureID, msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.VIEW__EANNOTATIONS :
                return getEAnnotations ();
            case NotationPackage.VIEW__VISIBLE :
                return isVisible () ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.VIEW__TYPE :
                return getType ();
            case NotationPackage.VIEW__MUTABLE :
                return isMutable () ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.VIEW__SOURCE_EDGES :
                return getSourceEdges ();
            case NotationPackage.VIEW__TARGET_EDGES :
                return getTargetEdges ();
            case NotationPackage.VIEW__PERSISTED_CHILDREN :
                return getPersistedChildren ();
            case NotationPackage.VIEW__STYLES :
                return getStyles ();
            case NotationPackage.VIEW__ELEMENT :
                if (resolve) return getElement ();

                return basicGetElement ();
            case NotationPackage.VIEW__DIAGRAM :
                if (resolve) return getDiagram ();

                return basicGetDiagram ();
            case NotationPackage.VIEW__TRANSIENT_CHILDREN :
                return getTransientChildren ();
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.VIEW__EANNOTATIONS :
                getEAnnotations ().clear ();
                getEAnnotations ().addAll ((Collection) newValue);
                return;
            case NotationPackage.VIEW__VISIBLE :
                setVisible (((Boolean) newValue).booleanValue ());
                return;
            case NotationPackage.VIEW__TYPE :
                setType ((String) newValue);
                return;
            case NotationPackage.VIEW__MUTABLE :
                setMutable (((Boolean) newValue).booleanValue ());
                return;
            case NotationPackage.VIEW__SOURCE_EDGES :
                getSourceEdges ().clear ();
                getSourceEdges ().addAll ((Collection) newValue);
                return;
            case NotationPackage.VIEW__TARGET_EDGES :
                getTargetEdges ().clear ();
                getTargetEdges ().addAll ((Collection) newValue);
                return;
            case NotationPackage.VIEW__PERSISTED_CHILDREN :
                getPersistedChildren ().clear ();
                getPersistedChildren ().addAll ((Collection) newValue);
                return;
            case NotationPackage.VIEW__STYLES :
                getStyles ().clear ();
                getStyles ().addAll ((Collection) newValue);
                return;
            case NotationPackage.VIEW__ELEMENT :
                setElement ((EObject) newValue);
                return;
            case NotationPackage.VIEW__TRANSIENT_CHILDREN :
                getTransientChildren ().clear ();
                getTransientChildren ().addAll ((Collection) newValue);
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.VIEW__EANNOTATIONS :
                getEAnnotations ().clear ();
                return;
            case NotationPackage.VIEW__VISIBLE :
                setVisible (VISIBLE_EDEFAULT);
                return;
            case NotationPackage.VIEW__TYPE :
                setType (TYPE_EDEFAULT);
                return;
            case NotationPackage.VIEW__MUTABLE :
                setMutable (MUTABLE_EDEFAULT);
                return;
            case NotationPackage.VIEW__SOURCE_EDGES :
                getSourceEdges ().clear ();
                return;
            case NotationPackage.VIEW__TARGET_EDGES :
                getTargetEdges ().clear ();
                return;
            case NotationPackage.VIEW__PERSISTED_CHILDREN :
                getPersistedChildren ().clear ();
                return;
            case NotationPackage.VIEW__STYLES :
                getStyles ().clear ();
                return;
            case NotationPackage.VIEW__ELEMENT :
                unsetElement ();
                return;
            case NotationPackage.VIEW__TRANSIENT_CHILDREN :
                getTransientChildren ().clear ();
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.VIEW__EANNOTATIONS :
                return eAnnotations != null && ! eAnnotations.isEmpty ();
            case NotationPackage.VIEW__VISIBLE :
                return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
            case NotationPackage.VIEW__TYPE :
                return TYPE_EDEFAULT == null ? type != null : ! TYPE_EDEFAULT.equals (type);
            case NotationPackage.VIEW__MUTABLE :
                return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
            case NotationPackage.VIEW__SOURCE_EDGES :
                return sourceEdges != null && ! sourceEdges.isEmpty ();
            case NotationPackage.VIEW__TARGET_EDGES :
                return targetEdges != null && ! targetEdges.isEmpty ();
            case NotationPackage.VIEW__PERSISTED_CHILDREN :
                return persistedChildren != null && ! persistedChildren.isEmpty ();
            case NotationPackage.VIEW__STYLES :
                return styles != null && ! styles.isEmpty ();
            case NotationPackage.VIEW__ELEMENT :
                return isSetElement ();
            case NotationPackage.VIEW__DIAGRAM :
                return basicGetDiagram () != null;
            case NotationPackage.VIEW__TRANSIENT_CHILDREN :
                return transientChildren != null && ! transientChildren.isEmpty ();
        }
        return eDynamicIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (visible: ");
        result.append ((eFlags & VISIBLE_EFLAG) != 0);
        result.append (", type: ");
        result.append (type);
        result.append (", mutable: ");
        result.append ((eFlags & MUTABLE_EFLAG) != 0);
        result.append (')');
        return result.toString ();
    }

    public void persistChildren () {
        if (transientChildren != null && transientChildren.size () > 0) {
            getPersistedChildren ().addAll (transientChildren);
        }
    }

    public void insertChild (View child) {
        persistChildren ();
        getPersistedChildren ().add (child);
    }

    public void insertChildAt (View child, int index) {
        persistChildren ();
        if (getPersistedChildren ().size () >= index) {
            getPersistedChildren ().add (index, child);
        }
    }

    public void insertChild (View child, boolean persisted) {
        List children = null;
        if (persisted) children = getPersistedChildren ();
        else children = getTransientChildren ();

        children.add (child);
    }

    public void removeChild (View child) {
        if (child.eContainingFeature () == NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN) {
            if (transientChildren != null && transientChildren.size () > 0) {
                transientChildren.remove (child);
            }
        } else if (child.eContainingFeature () == NotationPackage.Literals.VIEW__PERSISTED_CHILDREN) {
            if (persistedChildren != null && persistedChildren.size () > 0) {
                persistedChildren.remove (child);
            }
        }

    }

    public void persist () {
        EStructuralFeature eContaingFeature = eContainingFeature ();
        if (eContainer != null && eContaingFeature != null && eContainer instanceof View && eContaingFeature.isTransient ()) {
            View vContainer = (View) eContainer;
            vContainer.persistChildren ();
        }
    }

    public EList getVisibleChildren () {
        if ((persistedChildren == null || persistedChildren.isEmpty ()) && (transientChildren == null || transientChildren.isEmpty ())) {
            return ECollections.EMPTY_ELIST;
        }
        List _children = new ArrayList ();
        if (persistedChildren != null && persistedChildren.size () > 0) {
            for (Iterator iter = persistedChildren.iterator ();
            iter.hasNext ();) {
                View view = (View) iter.next ();
                if (view.isVisible ()) _children.add (view);

            }
        }
        if (transientChildren != null && transientChildren.size () > 0) {
            for (Iterator iter = transientChildren.iterator ();
            iter.hasNext ();) {
                View view = (View) iter.next ();
                if (view.isVisible ()) _children.add (view);

            }
        }
        return new BasicEList.UnmodifiableEList (_children.size (), _children.toArray ());
    }

}

