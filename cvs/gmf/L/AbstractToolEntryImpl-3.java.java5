package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EMap;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.EcorePackage;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl;

import org.eclipse.emf.ecore.util.EcoreEMap;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.AbstractToolEntry;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.ToolGroup;

import org.eclipse.gmf.codegen.gmfgen.ToolGroupItem;

public abstract class AbstractToolEntryImpl extends EntryBaseImpl implements AbstractToolEntry {
    protected static final boolean DEFAULT_EDEFAULT = false;
    protected boolean default_ = DEFAULT_EDEFAULT;
    protected static final String QUALIFIED_TOOL_NAME_EDEFAULT = null;
    protected String qualifiedToolName = QUALIFIED_TOOL_NAME_EDEFAULT;
    protected EMap properties = null;

    protected AbstractToolEntryImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getAbstractToolEntry ();
    }

    public ToolGroup getGroup () {
        if (eContainerFeatureID != GMFGenPackage.ABSTRACT_TOOL_ENTRY__GROUP) return null;

        return (ToolGroup) eContainer ();
    }

    public boolean isDefault () {
        return default_;
    }

    public void setDefault (boolean newDefault) {
        boolean oldDefault = default_;
        default_ = newDefault;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.ABSTRACT_TOOL_ENTRY__DEFAULT, oldDefault, default_));

    }

    public String getQualifiedToolName () {
        return qualifiedToolName;
    }

    public void setQualifiedToolName (String newQualifiedToolName) {
        String oldQualifiedToolName = qualifiedToolName;
        qualifiedToolName = newQualifiedToolName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.ABSTRACT_TOOL_ENTRY__QUALIFIED_TOOL_NAME, oldQualifiedToolName, qualifiedToolName));

    }

    public EMap getProperties () {
        if (properties == null) {
            properties = new EcoreEMap (EcorePackage.Literals.ESTRING_TO_STRING_MAP_ENTRY, EStringToStringMapEntryImpl.class, this, GMFGenPackage.ABSTRACT_TOOL_ENTRY__PROPERTIES);
        }
        return properties;
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__GROUP :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.ABSTRACT_TOOL_ENTRY__GROUP, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__GROUP :
                return eBasicSetContainer (null, GMFGenPackage.ABSTRACT_TOOL_ENTRY__GROUP, msgs);
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__PROPERTIES :
                return ((InternalEList) getProperties ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__GROUP :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.TOOL_GROUP__ENTRIES, ToolGroup.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__GROUP :
                return getGroup ();
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__DEFAULT :
                return isDefault () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__QUALIFIED_TOOL_NAME :
                return getQualifiedToolName ();
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__PROPERTIES :
                if (coreType) return getProperties ();
                else return getProperties ().map ();

        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__DEFAULT :
                setDefault (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__QUALIFIED_TOOL_NAME :
                setQualifiedToolName ((String) newValue);
                return;
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__PROPERTIES :
                ((EStructuralFeature.Setting) getProperties ()).set (newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__DEFAULT :
                setDefault (DEFAULT_EDEFAULT);
                return;
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__QUALIFIED_TOOL_NAME :
                setQualifiedToolName (QUALIFIED_TOOL_NAME_EDEFAULT);
                return;
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__PROPERTIES :
                getProperties ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__GROUP :
                return getGroup () != null;
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__DEFAULT :
                return default_ != DEFAULT_EDEFAULT;
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__QUALIFIED_TOOL_NAME :
                return QUALIFIED_TOOL_NAME_EDEFAULT == null ? qualifiedToolName != null : ! QUALIFIED_TOOL_NAME_EDEFAULT.equals (qualifiedToolName);
            case GMFGenPackage.ABSTRACT_TOOL_ENTRY__PROPERTIES :
                return properties != null && ! properties.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    public int eBaseStructuralFeatureID (int derivedFeatureID, Class baseClass) {
        if (baseClass == ToolGroupItem.class) {
            switch (derivedFeatureID) {
                case GMFGenPackage.ABSTRACT_TOOL_ENTRY__GROUP :
                    return GMFGenPackage.TOOL_GROUP_ITEM__GROUP;
                default :
                    return - 1;
            }
        }
        return super.eBaseStructuralFeatureID (derivedFeatureID, baseClass);
    }

    public int eDerivedStructuralFeatureID (int baseFeatureID, Class baseClass) {
        if (baseClass == ToolGroupItem.class) {
            switch (baseFeatureID) {
                case GMFGenPackage.TOOL_GROUP_ITEM__GROUP :
                    return GMFGenPackage.ABSTRACT_TOOL_ENTRY__GROUP;
                default :
                    return - 1;
            }
        }
        return super.eDerivedStructuralFeatureID (baseFeatureID, baseClass);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (default: ");
        result.append (default_);
        result.append (", qualifiedToolName: ");
        result.append (qualifiedToolName);
        result.append (')');
        return result.toString ();
    }

}

