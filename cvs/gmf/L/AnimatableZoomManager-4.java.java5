package org.eclipse.gmf.runtime.gef.ui.internal.editparts;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.draw2d.ScalableFigure;

import org.eclipse.draw2d.Viewport;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.editparts.ZoomListener;

import org.eclipse.gef.editparts.ZoomManager;

import org.eclipse.gmf.runtime.draw2d.ui.geometry.LineSeg;

import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.AnimationModel;

public class AnimatableZoomManager extends ZoomManager {
    private int zoomAnimationStyle = ANIMATE_NEVER;
    private List animationListeners = new ArrayList ();

    public int getZoomAnimationStyle () {
        return zoomAnimationStyle;
    }

    public AnimatableZoomManager (ScalableFigure pane, Viewport viewport) {
        super (pane, viewport);
    }

    public void setZoomAnimationStyle (int style) {
        zoomAnimationStyle = style;
    }

    public void addZoomListener (ZoomListener listener) {
        super.addZoomListener (listener);
        if (listener instanceof AnimatedZoomListener) {
            animationListeners.add (listener);
        }
    }

    protected void fireAnimatedZoomStarted () {
        Iterator iter = animationListeners.iterator ();
        while (iter.hasNext ()) ((AnimatedZoomListener) iter.next ()).animatedZoomStarted ();

    }

    protected void fireAnimatedZoomEnded () {
        Iterator iter = animationListeners.iterator ();
        while (iter.hasNext ()) ((AnimatedZoomListener) iter.next ()).animatedZoomEnded ();

    }

    public void zoomTo (double zoom, Point center) {
        Point centerRel = center.getCopy ();
        getScalableFigure ().translateToRelative (centerRel);
        primSetZoom (zoom, centerRel);
    }

    public void zoomTo (Rectangle rect) {
        Dimension available = getViewport ().getClientArea ().getSize ();
        Dimension desired = rect.getSize ();
        double scaleX = available.width * getZoom () / desired.width;
        double scaleY = available.height * getZoom () / desired.height;
        double zoom = Math.min (getMaxZoom (), Math.max (getMinZoom (), Math.min (scaleX, scaleY)));
        zoomTo (zoom, rect.getCenter ());
    }

    private static final int DURATION_INCREMENT = 400;

    protected void primSetZoom (double zoom) {
        Point center = getViewport ().getClientArea ().getCenter ();
        primSetZoom (zoom, center);
    }

    private AnimationModel calculateAnimationModel (double zoom) {
        double dmod = zoom / getZoom ();
        int steps = (int) Math.round (dmod > 0 ? dmod : 1 / dmod);
        int duration = Math.max (DURATION_INCREMENT, steps * DURATION_INCREMENT);
        AnimationModel animationModel = new AnimationModel (duration, true);
        animationModel.animationStarted ();
        return animationModel;
    }

    private void primSetZoom (double zoom, Point finalCenterAbs) {
        primAnimateSetZoom (zoom, finalCenterAbs, getZoomAnimationStyle () == ANIMATE_ZOOM_IN_OUT ? calculateAnimationModel (zoom) : null);
    }

    private void primAnimateSetZoom (double zoom, Point finalCenter, AnimationModel animationModel) {
        double initialZoom = getZoom ();
        double finalZoom = zoom;
        Point finalCenterRel = finalCenter.getCopy ();
        Point originalViewLocation = getViewport ().getViewLocation ();
        Dimension centerDiff = originalViewLocation.getDifference (getViewport ().getClientArea ().getCenter ());
        Point finalViewLocation = finalCenterRel.scale (finalZoom / initialZoom).getTranslated (centerDiff);
        LineSeg scrollVector = new LineSeg (originalViewLocation, finalViewLocation);
        float progress = 1.0f;
        if (animationModel != null) {
            animationModel.animationStarted ();
            progress = animationModel.getProgress ();
        }
        boolean finished = false;
        fireAnimatedZoomStarted ();
        while (! finished) {
            if (animationModel == null || animationModel.isFinished ()) finished = true;

            double currentZoom = initialZoom + ((finalZoom - initialZoom) * progress);
            super.primSetZoom (currentZoom);
            Point currentViewLocation = scrollVector.locatePoint (progress, 0, LineSeg.Sign.POSITIVE);
            setViewLocation (currentViewLocation);
            getViewport ().getUpdateManager ().performUpdate ();
            if (animationModel != null) progress = animationModel.getProgress ();

        }
        fireAnimatedZoomEnded ();
    }

}

