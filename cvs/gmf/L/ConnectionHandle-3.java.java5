package org.eclipse.gmf.runtime.diagram.ui.handles;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.ImageFigure;

import org.eclipse.draw2d.Label;

import org.eclipse.draw2d.Locator;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.draw2d.StackLayout;

import org.eclipse.draw2d.TreeSearch;

import org.eclipse.gef.DragTracker;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.handles.AbstractHandle;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramUIPluginImages;

import org.eclipse.gmf.runtime.diagram.ui.internal.tools.ConnectionHandleTool;

import org.eclipse.gmf.runtime.diagram.ui.l10n.SharedImages;

import org.eclipse.swt.graphics.Image;

public class ConnectionHandle extends AbstractHandle {
    public static final class HandleDirection {

        private HandleDirection () {
        }

        public static final HandleDirection OUTGOING = new HandleDirection ();
        public static final HandleDirection INCOMING = new HandleDirection ();
    }

    private static final ImageFigure ERROR_IMAGE = new ImageFigure (SharedImages.get (SharedImages.IMG_ERROR));

    static {
        ERROR_IMAGE.setSize (SharedImages.get (SharedImages.IMG_ERROR).getBounds ().width, SharedImages.get (SharedImages.IMG_ERROR).getBounds ().height);
    }

    private HandleDirection handleDirection;

    public ConnectionHandle (IGraphicalEditPart ownerEditPart, HandleDirection relationshipDirection, String tooltip) {
        setOwner (ownerEditPart);
        setRelationshipDirection (relationshipDirection);
        setToolTip (new Label (tooltip));
        setLayoutManager (new StackLayout ());
    }

    protected DragTracker createDragTracker () {
        return new ConnectionHandleTool (this);
    }

    public IFigure findFigureAt (int x, int y, TreeSearch search) {
        if (containsPoint (x, y)) {
            return this;
        }
        return super.findFigureAt (x, y, search);
    }

    public void setLocator (Locator locator) {
        super.setLocator (locator);
    }

    public GraphicalEditPart getOwner () {
        return super.getOwner ();
    }

    protected void setRelationshipDirection (HandleDirection direction) {
        handleDirection = direction;
    }

    public boolean isIncoming () {
        return handleDirection == HandleDirection.INCOMING;
    }

    public void addErrorIcon () {
        add (ERROR_IMAGE);
    }

    public void removeErrorIcon () {
        if (getChildren ().contains (ERROR_IMAGE)) {
            remove (ERROR_IMAGE);
        }
    }

    public void validate () {
        if (isValid ()) return;

        removeAll ();
        int side = ((ConnectionHandleLocator) getLocator ()).getBorderSide ();
        Image image = null;
        if (side == PositionConstants.WEST) {
            image = isIncoming () ? DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_HANDLE_INCOMING_WEST) : DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_HANDLE_OUTGOING_WEST);
        } else if (side == PositionConstants.EAST) {
            image = isIncoming () ? DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_HANDLE_INCOMING_EAST) : DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_HANDLE_OUTGOING_EAST);
        } else if (side == PositionConstants.SOUTH) {
            image = isIncoming () ? DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_HANDLE_INCOMING_SOUTH) : DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_HANDLE_OUTGOING_SOUTH);
        } else {
            image = isIncoming () ? DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_HANDLE_INCOMING_NORTH) : DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_HANDLE_OUTGOING_NORTH);
        }

        ImageFigure imageFigure = new ImageFigure (image);
        imageFigure.setSize (image.getBounds ().width, image.getBounds ().height);
        add (imageFigure);
        setSize (imageFigure.getSize ().getUnioned (ERROR_IMAGE.getSize ()));
        super.validate ();
    }

}

