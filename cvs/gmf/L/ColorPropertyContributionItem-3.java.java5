package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.jface.preference.PreferenceConverter;

import org.eclipse.jface.resource.CompositeImageDescriptor;

import org.eclipse.jface.resource.ImageDescriptor;

import org.eclipse.jface.util.Assert;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.graphics.ImageData;

import org.eclipse.swt.graphics.PaletteData;

import org.eclipse.swt.graphics.Point;

import org.eclipse.swt.graphics.RGB;

import org.eclipse.swt.graphics.Rectangle;

import org.eclipse.swt.widgets.ColorDialog;

import org.eclipse.swt.widgets.Display;

import org.eclipse.swt.widgets.Event;

import org.eclipse.swt.widgets.Item;

import org.eclipse.swt.widgets.Listener;

import org.eclipse.swt.widgets.Menu;

import org.eclipse.swt.widgets.MenuItem;

import org.eclipse.swt.widgets.ToolBar;

import org.eclipse.swt.widgets.ToolItem;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.gmf.runtime.common.ui.l10n.AbstractUIResourceManager;

import org.eclipse.gmf.runtime.common.ui.util.WindowUtil;

import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramActionsResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.Images;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;

import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;

import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;

public class ColorPropertyContributionItem extends PropertyChangeContributionItem implements Listener {
    private static class ColorMenuImageDescriptor extends CompositeImageDescriptor {
        private ImageData basicImgData;
        private RGB rgb;

        public ColorMenuImageDescriptor (ImageData basicImgData, RGB rgb) {
            this.basicImgData = basicImgData;
            this.rgb = rgb;
        }

        protected void drawCompositeImage (int width, int height) {
            drawImage (basicImgData, 0, 0);
            if (rgb != null) {
                ImageData colorBar = new ImageData (14, 4, 1, new PaletteData (new RGB [] {rgb}));
                drawImage (colorBar, 1, 13);
            }
        }

        protected Point getSize () {
            return ICON_SIZE;
        }

    }

    private static class ColorBoxImageDescriptor extends ImageDescriptor {
        private RGB rgb;

        public ColorBoxImageDescriptor (RGB rgb) {
            this.rgb = rgb;
        }

        public ImageData getImageData () {
            ImageData data = new ImageData (ICON_SIZE.x, ICON_SIZE.y, 1, new PaletteData (new RGB [] {rgb, OUTLINE_COLOR}));
            for (int i = 0;
            i < ICON_SIZE.y; i ++) data.setPixel (0, i, 1);

            for (int i = 0;
            i < ICON_SIZE.y; i ++) data.setPixel (ICON_SIZE.x - 1, i, 1);

            for (int i = 0;
            i < ICON_SIZE.x; i ++) data.setPixel (i, 0, 1);

            for (int i = 0;
            i < ICON_SIZE.x; i ++) data.setPixel (i, ICON_SIZE.y - 1, 1);

            return data;
        }

    }

    private static class InventoryColorDescriptor {
        public RGB colorValue;
        public String colorName;

        public InventoryColorDescriptor (RGB colorValue, String colorName) {
            this.colorValue = colorValue;
            this.colorName = colorName;
        }

    }

    private static final InventoryColorDescriptor WHITE = new InventoryColorDescriptor (new RGB (255, 255, 255), getResources ().getString ("ColorPropertyChangeAction.white"));
    private static final InventoryColorDescriptor BLACK = new InventoryColorDescriptor (new RGB (0, 0, 0), getResources ().getString ("ColorPropertyChangeAction.black"));
    private static final InventoryColorDescriptor LIGHT_GRAY = new InventoryColorDescriptor (new RGB (192, 192, 192), getResources ().getString ("ColorPropertyChangeAction.lightGray"));
    private static final InventoryColorDescriptor GRAY = new InventoryColorDescriptor (new RGB (128, 128, 128), getResources ().getString ("ColorPropertyChangeAction.gray"));
    private static final InventoryColorDescriptor DARK_GRAY = new InventoryColorDescriptor (new RGB (64, 64, 64), getResources ().getString ("ColorPropertyChangeAction.darkGray"));
    private static final InventoryColorDescriptor RED = new InventoryColorDescriptor (new RGB (227, 164, 156), getResources ().getString ("ColorPropertyChangeAction.red"));
    private static final InventoryColorDescriptor GREEN = new InventoryColorDescriptor (new RGB (166, 193, 152), getResources ().getString ("ColorPropertyChangeAction.green"));
    private static final InventoryColorDescriptor BLUE = new InventoryColorDescriptor (new RGB (152, 168, 191), getResources ().getString ("ColorPropertyChangeAction.blue"));
    private static final InventoryColorDescriptor YELLOW = new InventoryColorDescriptor (new RGB (225, 225, 135), getResources ().getString ("ColorPropertyChangeAction.yellow"));
    private static final InventoryColorDescriptor PURPLE = new InventoryColorDescriptor (new RGB (184, 151, 192), getResources ().getString ("ColorPropertyChangeAction.magenta"));
    private static final InventoryColorDescriptor TEAL = new InventoryColorDescriptor (new RGB (155, 199, 204), getResources ().getString ("ColorPropertyChangeAction.cyan"));
    private static final InventoryColorDescriptor PINK = new InventoryColorDescriptor (new RGB (228, 179, 229), getResources ().getString ("ColorPropertyChangeAction.pink"));
    private static final InventoryColorDescriptor ORANGE = new InventoryColorDescriptor (new RGB (237, 201, 122), getResources ().getString ("ColorPropertyChangeAction.orange"));
    private static final Point ICON_SIZE = new Point (16, 16);
    private static final int CUSTOM_SIZE = 3;
    private static final RGB DEFAULT_PREF_COLOR = new RGB (0, 0, 0);
    private static final RGB OUTLINE_COLOR = new RGB (192, 192, 192);
    private static final String DEFAULT = "Default";
    private static final String CHOOSE = "Choose";
    private static final String CLEAR = "Clear";
    private String preferenceId;
    private ImageData basicImageData;
    private ImageData disabledBasicImageData;
    private Image disabledBasicImage;
    private Image overlyedImage;
    private Integer lastColor;
    private List customColors = new ArrayList ();
    private List inventoryColors = new ArrayList ();
    private HashMap imageColorMap = new HashMap ();
    private Menu menu;

    public ColorPropertyContributionItem (IWorkbenchPage workbenchPage, String id, String propertyId, String propertyName, String preferenceId, String toolTipText, ImageData basicImageData, ImageData disabledBasicImageData) {
        super (workbenchPage, id, propertyId, propertyName);
        Assert.isNotNull (toolTipText);
        Assert.isNotNull (basicImageData);
        this.preferenceId = preferenceId;
        this.basicImageData = basicImageData;
        this.disabledBasicImageData = disabledBasicImageData;
        setLabel (toolTipText);
    }

    protected void init () {
        super.init ();
        this.overlyedImage = new ColorMenuImageDescriptor (getBasicImageData (), null).createImage ();
        this.disabledBasicImage = new ColorMenuImageDescriptor (this.disabledBasicImageData, null).createImage ();
    }

    public void dispose () {
        if (overlyedImage != null && ! overlyedImage.isDisposed ()) {
            overlyedImage.dispose ();
            overlyedImage = null;
        }
        if (menu != null && ! menu.isDisposed ()) {
            menu.dispose ();
            menu = null;
        }
        for (Iterator i = imageColorMap.values ().iterator ();
        i.hasNext ();) {
            Image image = (Image) i.next ();
            if (! image.isDisposed ()) {
                image.dispose ();
            }
        }
        if (disabledBasicImage != null && ! disabledBasicImage.isDisposed ()) {
            disabledBasicImage.dispose ();
            disabledBasicImage = null;
        }
        imageColorMap = new HashMap ();
        super.dispose ();
    }

    protected ToolItem createToolItem (ToolBar parent, int index) {
        ToolItem ti = new ToolItem (parent, SWT.DROP_DOWN, index);
        ti.addListener (SWT.Selection, getItemListener ());
        ti.setImage (overlyedImage);
        ti.setDisabledImage (this.disabledBasicImage);
        return ti;
    }

    protected MenuItem createMenuItem (Menu parent, int index) {
        MenuItem mi = index >= 0 ? new MenuItem (parent, SWT.CASCADE, index) : new MenuItem (parent, SWT.CASCADE);
        createMenu (mi);
        mi.setImage (overlyedImage);
        return mi;
    }

    protected void handleWidgetEvent (Event e) {
        switch (e.type) {
            case SWT.Selection :
                handleWidgetSelection (e);
                break;
            default :
                super.handleWidgetEvent (e);
        }
    }

    private void handleWidgetSelection (Event e) {
        if (e.detail == 4) {
            createMenu (getItem ());
        } else {
            if (lastColor != null) runWithEvent (e);

        }
    }

    private void createMenu (Item item) {
        if (menu != null && ! menu.isDisposed ()) menu.dispose ();

        if (item instanceof ToolItem) {
            ToolItem toolItem = (ToolItem) item;
            menu = new Menu (toolItem.getParent ());
            Rectangle b = toolItem.getBounds ();
            Point p = toolItem.getParent ().toDisplay (new Point (b.x, b.y + b.height));
            menu.setLocation (p.x, p.y);
            menu.setVisible (true);
        } else if (item instanceof MenuItem) {
            MenuItem menuItem = (MenuItem) item;
            menu = new Menu (menuItem.getParent ());
            menuItem.setMenu (menu);
        }

        Assert.isNotNull (menu, "falid to create menu");
        buildMenu (menu);
    }

    protected Object getNewPropertyValue () {
        return lastColor;
    }

    private void buildMenu (Menu theMenu) {
        createInventoryColorMenuItem (theMenu, WHITE);
        createInventoryColorMenuItem (theMenu, BLACK);
        createInventoryColorMenuItem (theMenu, LIGHT_GRAY);
        createInventoryColorMenuItem (theMenu, GRAY);
        createInventoryColorMenuItem (theMenu, DARK_GRAY);
        createInventoryColorMenuItem (theMenu, RED);
        createInventoryColorMenuItem (theMenu, GREEN);
        createInventoryColorMenuItem (theMenu, BLUE);
        createInventoryColorMenuItem (theMenu, YELLOW);
        createInventoryColorMenuItem (theMenu, PURPLE);
        createInventoryColorMenuItem (theMenu, TEAL);
        createInventoryColorMenuItem (theMenu, PINK);
        createInventoryColorMenuItem (theMenu, ORANGE);
        if (! customColors.isEmpty ()) {
            createMenuSeparator (theMenu);
            Iterator iter = customColors.iterator ();
            while (iter.hasNext ()) {
                RGB rgb = (RGB) iter.next ();
                createColorMenuItem (theMenu, rgb);
            }
            createClearCustomColorMenuItem (theMenu);
        }
        createMenuSeparator (theMenu);
        createDefaultColorMenuItem (theMenu);
        createChooseColorMenuItem (theMenu);
    }

    private void createMenuSeparator (Menu theMenu) {
        new MenuItem (theMenu, SWT.SEPARATOR);
    }

    private void createInventoryColorMenuItem (Menu theMenu, InventoryColorDescriptor color) {
        RGB rgb = color.colorValue;
        Image image = (Image) imageColorMap.get (rgb);
        if (image == null) {
            image = new ColorBoxImageDescriptor (color.colorValue).createImage ();
            imageColorMap.put (rgb, image);
        }
        MenuItem mi = createMenuItem (theMenu, color.colorName, image);
        mi.setData (rgb);
        inventoryColors.add (rgb);
    }

    private void createColorMenuItem (Menu theMenu, RGB rgb) {
        Image image = (Image) imageColorMap.get (rgb);
        if (image == null) {
            image = new ColorBoxImageDescriptor (rgb).createImage ();
            imageColorMap.put (rgb, image);
        }
        MenuItem mi = createMenuItem (theMenu, rgb.toString (), image);
        mi.setData (rgb);
    }

    private void createDefaultColorMenuItem (Menu theMenu) {
        String text = getResources ().getString ("ColorPropertyChangeAction.default");
        Image image = null;
        MenuItem mi = createMenuItem (theMenu, text, image);
        mi.setData (DEFAULT);
    }

    private void createChooseColorMenuItem (Menu theMenu) {
        String text = getResources ().getString ("ColorPropertyChangeAction.moreColors");
        Image image = null;
        MenuItem mi = createMenuItem (theMenu, text, image);
        mi.setData (CHOOSE);
    }

    private void createClearCustomColorMenuItem (Menu theMenu) {
        String text = getResources ().getString ("ColorPropertyChangeAction.clearColors");
        Image image = null;
        MenuItem mi = createMenuItem (theMenu, text, image);
        mi.setData (CLEAR);
    }

    private MenuItem createMenuItem (Menu theMenu, String text, Image image) {
        MenuItem mi = new MenuItem (theMenu, SWT.PUSH);
        if (text != null) mi.setText (text);

        if (image != null) mi.setImage (image);

        mi.addListener (SWT.Selection, this);
        return mi;
    }

    public void handleEvent (Event event) {
        MenuItem menuItem = (MenuItem) event.widget;
        Object data = menuItem.getData ();
        RGB rgb = null;
        if (data instanceof RGB) {
            rgb = (RGB) data;
        } else if (data.equals (CHOOSE)) {
            rgb = getBrowseColor ();
        } else if (data.equals (DEFAULT)) {
            rgb = getDefaultColor ();
        } else if (data.equals (CLEAR)) {
            customColors.clear ();
        }

        if (rgb != null) {
            if (getToolItem () != null) {
                if (! customColors.contains (rgb) && ! inventoryColors.contains (rgb)) {
                    if (customColors.size () == CUSTOM_SIZE) customColors.remove (0);

                    customColors.add (rgb);
                }
                if (overlyedImage != null) overlyedImage.dispose ();

                overlyedImage = new ColorMenuImageDescriptor (getBasicImageData (), rgb).createImage ();
                getItem ().setImage (overlyedImage);
            }
            lastColor = FigureUtilities.RGBToInteger (rgb);
            runWithEvent (event);
        }
    }

    protected RGB getBrowseColor () {
        ColorDialog dialog = new ColorDialog (Display.getCurrent ().getActiveShell ());
        WindowUtil.centerDialog (dialog.getParent (), Display.getCurrent ().getActiveShell ());
        dialog.open ();
        return dialog.getRGB ();
    }

    protected RGB getDefaultColor () {
        IPreferenceStore store = (IPreferenceStore) getDiagramEditPart ().getDiagramPreferencesHint ().getPreferenceStore ();
        RGB color = null;
        if (preferenceId != null) color = PreferenceConverter.getColor (store, preferenceId);

        return color != null ? color : DEFAULT_PREF_COLOR;
    }

    protected ImageData getBasicImageData () {
        return this.basicImageData;
    }

    public static ColorPropertyContributionItem createFontColorContributionItem (IWorkbenchPage workbenchPage) {
        String propertyName = getResources ().getString ("PropertyDescriptorFactory.FontColor");
        String toolTipText = getResources ().getString ("ColorChangeActionMenu.fontColor");
        ImageData basicImageData = Images.DESC_ACTION_FONT_COLOR.getImageData ();
        ImageData disabledBasicImageData = Images.DESC_ACTION_FONT_COLOR_DISABLED.getImageData ();
        return new ColorPropertyContributionItem (workbenchPage, ActionIds.CUSTOM_FONT_COLOR, Properties.ID_FONTCOLOR, propertyName, null, toolTipText, basicImageData, disabledBasicImageData);
    }

    public static ColorPropertyContributionItem createLineColorContributionItem (IWorkbenchPage workbenchPage) {
        String propertyName = getResources ().getString ("PropertyDescriptorFactory.LineColor");
        String toolTipText = getResources ().getString ("ColorChangeActionMenu.lineColor");
        ImageData basicImageData = Images.DESC_ACTION_LINE_COLOR.getImageData ();
        ImageData disabledBasicImageData = Images.DESC_ACTION_LINE_COLOR_DISABLED.getImageData ();
        return new ColorPropertyContributionItem (workbenchPage, ActionIds.CUSTOM_LINE_COLOR, Properties.ID_LINECOLOR, propertyName, IPreferenceConstants.PREF_LINE_COLOR, toolTipText, basicImageData, disabledBasicImageData);
    }

    public static ColorPropertyContributionItem createFillColorContributionItem (IWorkbenchPage workbenchPage) {
        String propertyName = getResources ().getString ("PropertyDescriptorFactory.FillColor");
        String toolTipText = getResources ().getString ("ColorChangeActionMenu.fillColor");
        ImageData basicImageData = Images.DESC_ACTION_FILL_COLOR.getImageData ();
        ImageData disabledBasicImageData = Images.DESC_ACTION_FILL_COLOR_DISABLED.getImageData ();
        return new ColorPropertyContributionItem (workbenchPage, ActionIds.CUSTOM_FILL_COLOR, Properties.ID_FILLCOLOR, propertyName, IPreferenceConstants.PREF_FILL_COLOR, toolTipText, basicImageData, disabledBasicImageData);
    }

    private static AbstractUIResourceManager getResources () {
        return DiagramActionsResourceManager.getInstance ();
    }

}

