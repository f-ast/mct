package org.eclipse.gmf.runtime.draw2d.ui.internal.graphics;

import java.util.HashMap;

import java.util.Iterator;

import java.util.Map;

import org.eclipse.draw2d.Graphics;

import org.eclipse.swt.graphics.Font;

import org.eclipse.swt.graphics.FontData;

import org.eclipse.swt.graphics.GC;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.printing.Printer;

import org.eclipse.gmf.runtime.draw2d.ui.internal.l10n.Draw2dResourceManager;

public class PrinterGraphics extends org.eclipse.draw2d.PrinterGraphics {
    private double printScale = 1.0;
    private boolean roundFonts = false;

    protected double getPrintScale () {
        return printScale;
    }

    private Graphics g;

    public PrinterGraphics (Graphics g, Printer p, boolean roundFonts) {
        super (g, p);
        this.roundFonts = roundFonts;
        this.g = g;
    }

    public void dispose () {
        Iterator it = collapseImageCache.keySet ().iterator ();
        while (it.hasNext ()) {
            Object key = it.next ();
            Image img = (Image) collapseImageCache.get (key);
            img.dispose ();
        }
        super.dispose ();
    }

    Map collapseImageCache = new HashMap ();

    private Image collapseImage (Image srcImage) {
        Image result = (Image) collapseImageCache.get (srcImage);
        if (result != null) return result;

        org.eclipse.swt.graphics.Rectangle r1 = srcImage.getBounds ();
        Image newImg = new Image (null, r1.width, r1.height);
        GC gc = new GC (newImg);
        gc.setForeground (getForegroundColor ());
        gc.setBackground (getBackgroundColor ());
        gc.fillRectangle (0, 0, r1.width, r1.height);
        gc.drawImage (srcImage, 0, 0);
        gc.dispose ();
        collapseImageCache.put (srcImage, newImg);
        return newImg;
    }

    public void drawImage (Image srcImage, int x, int y) {
        Image collapseImage = collapseImage (srcImage);
        super.drawImage (collapseImage, x, y);
    }

    public void drawImage (Image srcImage, int sx, int sy, int sw, int sh, int tx, int ty, int tw, int th) {
        Image collapseImage = collapseImage (srcImage);
        super.drawImage (collapseImage, sx, sy, sw, sh, tx, ty, tw, th);
    }

    public boolean shouldRoundFonts () {
        return roundFonts;
    }

    public void scale (double amount) {
        printScale = amount;
        super.scale (amount);
    }

    public void setFont (Font f) {
        Font newFont = f;
        if (shouldRoundFonts ()) {
            FontData fd = f.getFontData () [0];
            int nAdjustedHeight = (int) (((fd.getHeight () - 0.5f) / printScale) * printScale);
            if (fd.getHeight () != nAdjustedHeight) {
                fd.setHeight (nAdjustedHeight);
                newFont = Draw2dResourceManager.getInstance ().getFont (null, fd);
            }
        }
        super.setFont (newFont);
    }

    public void setLineWidth (int width) {
        super.setLineWidth (width);
        if (getLineStyle () != Graphics.LINE_SOLID) {
            g.setLineWidth (1);
        }
    }

}

