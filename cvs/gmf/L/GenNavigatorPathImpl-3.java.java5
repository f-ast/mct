package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenNavigatorPath;

import org.eclipse.gmf.codegen.gmfgen.GenNavigatorPathSegment;

public class GenNavigatorPathImpl extends EObjectImpl implements GenNavigatorPath {
    protected EList < GenNavigatorPathSegment > segments = null;

    protected GenNavigatorPathImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenNavigatorPath ();
    }

    public EList < GenNavigatorPathSegment > getSegments () {
        if (segments == null) {
            segments = new EObjectContainmentWithInverseEList < GenNavigatorPathSegment > (GenNavigatorPathSegment.class, this, GMFGenPackage.GEN_NAVIGATOR_PATH__SEGMENTS, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH);
        }
        return segments;
    }

    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR_PATH__SEGMENTS :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getSegments ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR_PATH__SEGMENTS :
                return ((InternalEList < ? >) getSegments ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR_PATH__SEGMENTS :
                return getSegments ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR_PATH__SEGMENTS :
                getSegments ().clear ();
                getSegments ().addAll ((Collection < ? extends GenNavigatorPathSegment >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR_PATH__SEGMENTS :
                getSegments ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR_PATH__SEGMENTS :
                return segments != null && ! segments.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

}

