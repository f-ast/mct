package org.eclipse.gmf.runtime.common.ui.services.action.contributionitem;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.core.runtime.Platform;

import org.eclipse.jface.action.IContributionItem;

import org.eclipse.jface.action.IContributionManager;

import org.eclipse.jface.action.IMenuManager;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.ui.IActionBars;

import org.eclipse.ui.IWorkbenchPart;

import org.osgi.framework.Bundle;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.service.IProvider;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.ContributeToActionBarsOperation;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.ContributeToPopupMenuOperation;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.DisposeContributionsOperation;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.IContributionDescriptorReader;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.IContributionItemProvider;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem.ProviderContributionDescriptor;

import org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor;

import org.eclipse.gmf.runtime.common.ui.util.WorkbenchPartDescirptor;

public class ContributionItemService extends Service implements IContributionItemProvider {
    protected static class ProviderDescriptor extends Service.ProviderDescriptor {
        private static final String CHECK_PLUGIN_LOADED = "checkPluginLoaded";
        private ProviderContributionDescriptor contributionDescriptor;
        private boolean checkPluginLoaded = true;

        public ProviderDescriptor (IConfigurationElement element) {
            super (element);
            String s = element.getAttribute (CHECK_PLUGIN_LOADED);
            if (s != null) this.checkPluginLoaded = Boolean.valueOf (s).booleanValue ();

            this.contributionDescriptor = ProviderContributionDescriptor.parse (element);
            assert null != contributionDescriptor : "contributionDescriptor cannot be null";
        }

        public boolean provides (IOperation operation) {
            if (checkPluginLoaded && ! isPluginLoaded ()) return false;

            if (! contributionDescriptor.hasContributions ()) return super.provides (operation);

            if (operation instanceof ContributeToActionBarsOperation) {
                ContributeToActionBarsOperation op = (ContributeToActionBarsOperation) operation;
                return contributionDescriptor.hasContributionsFor (op.getWorkbenchPartDescriptor ().getPartId (), op.getWorkbenchPartDescriptor ().getPartClass ());
            } else if (operation instanceof ContributeToPopupMenuOperation) {
                ContributeToPopupMenuOperation op = (ContributeToPopupMenuOperation) operation;
                ISelection selection = op.getWorkbenchPart ().getSite ().getSelectionProvider ().getSelection ();
                return contributionDescriptor.hasContributionsFor (op.getPopupMenu (), selection);
            } else if (operation instanceof DisposeContributionsOperation) {
                if (provider != null) return provider.provides (operation);

            }

            return false;
        }

        public IProvider getProvider () {
            if (provider == null) {
                IProvider newProvider = super.getProvider ();
                if (provider instanceof IContributionDescriptorReader) {
                    IContributionDescriptorReader reader = (IContributionDescriptorReader) newProvider;
                    reader.setContributionDescriptor (contributionDescriptor);
                }
                return newProvider;
            }
            return super.getProvider ();
        }

        private boolean isPluginLoaded () {
            String pluginId = getElement ().getDeclaringExtension ().getNamespace ();
            Bundle bundle = Platform.getBundle (pluginId);
            return null != bundle && bundle.getState () == org.osgi.framework.Bundle.ACTIVE;
        }

    }

    private static ContributionItemService instance = new ContributionItemService ();

    public static ContributionItemService getInstance () {
        return instance;
    }

    private ContributionItemService () {
    }

    protected Service.ProviderDescriptor newProviderDescriptor (IConfigurationElement element) {
        return new ProviderDescriptor (element);
    }

    public void contributeToActionBars (IActionBars actionBars, IWorkbenchPart workbenchPart) {
        contributeToActionBars (actionBars, new WorkbenchPartDescirptor (workbenchPart.getSite ().getId (), workbenchPart.getClass (), workbenchPart.getSite ().getPage ()));
    }

    public void contributeToActionBars (IActionBars actionBars, IWorkbenchPartDescriptor workbenchPartDescriptor) {
        execute (new ContributeToActionBarsOperation (actionBars, workbenchPartDescriptor));
    }

    public void contributeToPopupMenu (IMenuManager popupMenu, IWorkbenchPart workbenchPart) {
        execute (new ContributeToPopupMenuOperation (popupMenu, workbenchPart));
    }

    public void disposeContributions (IWorkbenchPartDescriptor workbenchPartDescriptor) {
        execute (new DisposeContributionsOperation (workbenchPartDescriptor));
    }

    public void disposeContributions (IWorkbenchPart workbenchPart) {
        execute (new DisposeContributionsOperation (new WorkbenchPartDescirptor (workbenchPart.getSite ().getId (), workbenchPart.getClass (), workbenchPart.getSite ().getPage ())));
    }

    private void execute (IOperation operation) {
        execute (ExecutionStrategy.REVERSE, operation);
    }

    public void removeDisabledContributions (IContributionManager manager) {
        IContributionItem [] contributions = manager.getItems ();
        for (int i = 0;
        i < contributions.length; i ++) {
            if (contributions [i] instanceof IContributionManager) removeDisabledContributions ((IContributionManager) contributions [i]);

            if (! contributions [i].isEnabled ()) manager.remove (contributions [i]);

        }
    }

}

