package org.eclipse.gmf.tooldef.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.tooldef.GMFToolPackage;

import org.eclipse.gmf.tooldef.GenericTool;

public class GenericToolImpl extends AbstractToolImpl implements GenericTool {
    protected static final String TOOL_CLASS_EDEFAULT = null;
    protected String toolClass = TOOL_CLASS_EDEFAULT;

    protected GenericToolImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFToolPackage.eINSTANCE.getGenericTool ();
    }

    public String getToolClass () {
        return toolClass;
    }

    public void setToolClass (String newToolClass) {
        String oldToolClass = toolClass;
        toolClass = newToolClass;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFToolPackage.GENERIC_TOOL__TOOL_CLASS, oldToolClass, toolClass));

    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFToolPackage.GENERIC_TOOL__TOOL_CLASS :
                return getToolClass ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFToolPackage.GENERIC_TOOL__TOOL_CLASS :
                setToolClass ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFToolPackage.GENERIC_TOOL__TOOL_CLASS :
                setToolClass (TOOL_CLASS_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFToolPackage.GENERIC_TOOL__TOOL_CLASS :
                return TOOL_CLASS_EDEFAULT == null ? toolClass != null : ! TOOL_CLASS_EDEFAULT.equals (toolClass);
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (toolClass: ");
        result.append (toolClass);
        result.append (')');
        return result.toString ();
    }

}

