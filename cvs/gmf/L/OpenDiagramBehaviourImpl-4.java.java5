package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;

import org.eclipse.gmf.codegen.gmfgen.OpenDiagramBehaviour;

public class OpenDiagramBehaviourImpl extends EObjectImpl implements OpenDiagramBehaviour {
    public static final String ANNOTATION_SOURCE = "uri://eclipse.org/gmf/openDiagramPolicy";
    protected static final String EDIT_POLICY_CLASS_NAME_EDEFAULT = null;
    protected String editPolicyClassName = EDIT_POLICY_CLASS_NAME_EDEFAULT;
    protected static final String DIAGRAM_KIND_EDEFAULT = null;
    protected String diagramKind = DIAGRAM_KIND_EDEFAULT;
    protected static final String EDITOR_ID_EDEFAULT = null;
    protected String editorID = EDITOR_ID_EDEFAULT;
    protected static final boolean OPEN_AS_ECLIPSE_EDITOR_EDEFAULT = true;
    protected boolean openAsEclipseEditor = OPEN_AS_ECLIPSE_EDITOR_EDEFAULT;

    protected OpenDiagramBehaviourImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getOpenDiagramBehaviour ();
    }

    public GenCommonBase getSubject () {
        if (eContainerFeatureID != GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__SUBJECT) return null;

        return (GenCommonBase) eContainer ();
    }

    public String getEditPolicyClassNameGen () {
        return editPolicyClassName;
    }

    public String getEditPolicyClassName () {
        if (getEditPolicyClassNameGen () == null || getEditPolicyClassNameGen ().trim ().length () == 0) {
            return "OpenDiagramEditPolicy";
        }
        return getEditPolicyClassNameGen ();
    }

    public void setEditPolicyClassName (String newEditPolicyClassName) {
        String oldEditPolicyClassName = editPolicyClassName;
        editPolicyClassName = newEditPolicyClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__EDIT_POLICY_CLASS_NAME, oldEditPolicyClassName, editPolicyClassName));

    }

    public String getDiagramKind () {
        return diagramKind;
    }

    public void setDiagramKind (String newDiagramKind) {
        String oldDiagramKind = diagramKind;
        diagramKind = newDiagramKind;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__DIAGRAM_KIND, oldDiagramKind, diagramKind));

    }

    public String getEditorID () {
        return editorID;
    }

    public void setEditorID (String newEditorID) {
        String oldEditorID = editorID;
        editorID = newEditorID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__EDITOR_ID, oldEditorID, editorID));

    }

    public boolean isOpenAsEclipseEditor () {
        return openAsEclipseEditor;
    }

    public void setOpenAsEclipseEditor (boolean newOpenAsEclipseEditor) {
        boolean oldOpenAsEclipseEditor = openAsEclipseEditor;
        openAsEclipseEditor = newOpenAsEclipseEditor;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__OPEN_AS_ECLIPSE_EDITOR, oldOpenAsEclipseEditor, openAsEclipseEditor));

    }

    public String getEditPolicyQualifiedClassName () {
        return getSubject ().getDiagram ().getEditPoliciesPackageName () + '.' + getEditPolicyClassName ();
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__SUBJECT :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__SUBJECT, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__SUBJECT :
                return eBasicSetContainer (null, GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__SUBJECT, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__SUBJECT :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR, GenCommonBase.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__SUBJECT :
                return getSubject ();
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__EDIT_POLICY_CLASS_NAME :
                return getEditPolicyClassName ();
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__DIAGRAM_KIND :
                return getDiagramKind ();
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__EDITOR_ID :
                return getEditorID ();
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__OPEN_AS_ECLIPSE_EDITOR :
                return isOpenAsEclipseEditor () ? Boolean.TRUE : Boolean.FALSE;
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__EDIT_POLICY_CLASS_NAME :
                setEditPolicyClassName ((String) newValue);
                return;
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__DIAGRAM_KIND :
                setDiagramKind ((String) newValue);
                return;
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__EDITOR_ID :
                setEditorID ((String) newValue);
                return;
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__OPEN_AS_ECLIPSE_EDITOR :
                setOpenAsEclipseEditor (((Boolean) newValue).booleanValue ());
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__EDIT_POLICY_CLASS_NAME :
                setEditPolicyClassName (EDIT_POLICY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__DIAGRAM_KIND :
                setDiagramKind (DIAGRAM_KIND_EDEFAULT);
                return;
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__EDITOR_ID :
                setEditorID (EDITOR_ID_EDEFAULT);
                return;
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__OPEN_AS_ECLIPSE_EDITOR :
                setOpenAsEclipseEditor (OPEN_AS_ECLIPSE_EDITOR_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__SUBJECT :
                return getSubject () != null;
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__EDIT_POLICY_CLASS_NAME :
                return EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? editPolicyClassName != null : ! EDIT_POLICY_CLASS_NAME_EDEFAULT.equals (editPolicyClassName);
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__DIAGRAM_KIND :
                return DIAGRAM_KIND_EDEFAULT == null ? diagramKind != null : ! DIAGRAM_KIND_EDEFAULT.equals (diagramKind);
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__EDITOR_ID :
                return EDITOR_ID_EDEFAULT == null ? editorID != null : ! EDITOR_ID_EDEFAULT.equals (editorID);
            case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR__OPEN_AS_ECLIPSE_EDITOR :
                return openAsEclipseEditor != OPEN_AS_ECLIPSE_EDITOR_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (editPolicyClassName: ");
        result.append (editPolicyClassName);
        result.append (", diagramKind: ");
        result.append (diagramKind);
        result.append (", editorID: ");
        result.append (editorID);
        result.append (", openAsEclipseEditor: ");
        result.append (openAsEclipseEditor);
        result.append (')');
        return result.toString ();
    }

}

