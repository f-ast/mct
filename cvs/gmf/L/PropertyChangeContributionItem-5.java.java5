package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.List;

import org.eclipse.emf.ecore.ENamedElement;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.gef.Request;

import org.eclipse.jface.util.Assert;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.actions.PresentationContributionItem;

import org.eclipse.gmf.runtime.diagram.ui.requests.ChangePropertyValueRequest;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;

import org.eclipse.gmf.runtime.notation.View;

public abstract class PropertyChangeContributionItem extends PresentationContributionItem {
    private String propertyId = null;
    private String propertyName = null;

    public PropertyChangeContributionItem (IWorkbenchPage workbenchPage, String id, String propertyId, String propertyName) {
        super (workbenchPage, id);
        Assert.isNotNull (propertyId);
        Assert.isNotNull (propertyName);
        setPropertyId (propertyId);
        setPropertyName (propertyName);
    }

    protected String getPropertyId () {
        return propertyId;
    }

    protected void setPropertyId (String propertyId) {
        this.propertyId = propertyId;
    }

    protected String getPropertyName () {
        return propertyName;
    }

    protected void setPropertyName (String string) {
        propertyName = string;
    }

    protected Request createTargetRequest () {
        return new ChangePropertyValueRequest (getPropertyName (), getPropertyId ());
    }

    protected void updateTargetRequest () {
        ChangePropertyValueRequest request = (ChangePropertyValueRequest) getTargetRequest ();
        request.setValue (getNewPropertyValue ());
    }

    protected Object getOperationSetPropertyValue (String id) {
        List set = getOperationSet ();
        if (! set.isEmpty ()) {
            IGraphicalEditPart primaryEditPart = (IGraphicalEditPart) set.get (set.size () - 1);
            return getPropertyValue (primaryEditPart, id);
        }
        return null;
    }

    protected Object getPropertyValue (final IGraphicalEditPart editPart, final String thePropertyId) {
        return MEditingDomainGetter.getMEditingDomain ((View) editPart.getModel ()).runAsRead (new MRunnable () {

            public Object run () {
                ENamedElement element = MetaModelUtil.getElement (thePropertyId);
                if (element instanceof EStructuralFeature) return editPart.getStructuralFeatureValue ((EStructuralFeature) element);

                return null;
            }

        }

        );
    }

    protected abstract Object getNewPropertyValue ();

    protected boolean isSelectionListener () {
        return true;
    }

}

