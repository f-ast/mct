package org.eclipse.gmf.runtime.diagram.ui.tools;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.draw2d.FigureUtilities;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.Label;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.editparts.ZoomManager;

import org.eclipse.gef.tools.CellEditorLocator;

import org.eclipse.gef.tools.DirectEditManager;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.contentassist.ContentAssistantHelper;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;

import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

import org.eclipse.gmf.runtime.gef.ui.internal.parts.TextCellEditorEx;

import org.eclipse.gmf.runtime.gef.ui.internal.parts.WrapTextCellEditor;

import org.eclipse.jface.action.IAction;

import org.eclipse.jface.resource.DeviceResourceException;

import org.eclipse.jface.resource.FontDescriptor;

import org.eclipse.jface.resource.JFaceResources;

import org.eclipse.jface.resource.ResourceManager;

import org.eclipse.jface.text.contentassist.IContentAssistProcessor;

import org.eclipse.jface.util.Assert;

import org.eclipse.jface.viewers.CellEditor;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.Font;

import org.eclipse.swt.graphics.FontData;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.graphics.Point;

import org.eclipse.swt.graphics.RGB;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Display;

import org.eclipse.swt.widgets.Event;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.swt.widgets.Table;

import org.eclipse.swt.widgets.Text;

import org.eclipse.ui.IActionBars;

import org.eclipse.ui.PlatformUI;

import org.eclipse.ui.actions.ActionFactory;

import org.eclipse.ui.part.CellEditorActionHandler;

import com.ibm.icu.util.StringTokenizer;

public class TextDirectEditManager extends DirectEditManager {
    private Color proposalPopupBackgroundColor = null;
    private Color proposalPopupForegroundColor = null;
    private boolean committed = false;
    private boolean listenersAttached = true;
    private StringBuffer initialString = new StringBuffer ();
    private List cachedFontDescriptors = new ArrayList ();
    private IActionBars actionBars;
    private CellEditorActionHandler actionHandler;
    private IAction copy, cut, paste, undo, redo, find, selectAll, delete;
    private Font zoomLevelFont = null;
    private CellEditorLocator locator;
    static private class TextCellEditorLocator implements CellEditorLocator {
        private WrapLabel wrapLabel;

        public TextCellEditorLocator (WrapLabel wrapLabel) {
            super ();
            this.wrapLabel = wrapLabel;
        }

        public WrapLabel getWrapLabel () {
            return wrapLabel;
        }

        public void relocate (CellEditor celleditor) {
            Text text = (Text) celleditor.getControl ();
            WrapLabel fig = getWrapLabel ();
            Rectangle rect = fig.getTextBounds ().getCopy ();
            fig.translateToAbsolute (rect);
            int avrWidth = FigureUtilities.getFontMetrics (text.getFont ()).getAverageCharWidth ();
            if (fig.isTextWrapped () && fig.getText ().length () > 0) rect.setSize (new Dimension (rect.width, rect.height + FigureUtilities.getFontMetrics (text.getFont ()).getDescent ()));
            else rect.setSize (new Dimension (text.computeSize (SWT.DEFAULT, SWT.DEFAULT)).expand (avrWidth * 2, 0));

            org.eclipse.swt.graphics.Rectangle newRect = text.computeTrim (rect.x, rect.y, rect.width, rect.height);
            Rectangle textBounds = new Rectangle (text.getBounds ());
            if (! newRect.equals (textBounds)) {
                if (! (fig.getTextWrapAlignment () == PositionConstants.LEFT || fig.getTextAlignment () == PositionConstants.LEFT)) text.setBounds (newRect.x, newRect.y, newRect.width + avrWidth * 3, newRect.height);
                else {
                    if (text.getBounds ().x == 0 || Math.abs (text.getBounds ().x - newRect.x) >= avrWidth) text.setBounds (newRect.x, newRect.y, newRect.width + avrWidth * 3, newRect.height);
                    else text.setBounds (text.getBounds ().x, newRect.y, newRect.width + avrWidth * 3, newRect.height);

                }
            }
        }

    }

    private static class LabelCellEditorLocator implements CellEditorLocator {
        private Label label;

        public LabelCellEditorLocator (Label label) {
            this.label = label;
        }

        public Label getLabel () {
            return label;
        }

        public void relocate (CellEditor celleditor) {
            Text text = (Text) celleditor.getControl ();
            Rectangle rect = getLabel ().getTextBounds ().getCopy ();
            getLabel ().translateToAbsolute (rect);
            int avr = FigureUtilities.getFontMetrics (text.getFont ()).getAverageCharWidth ();
            rect.setSize (new Dimension (text.computeSize (SWT.DEFAULT, SWT.DEFAULT)).expand (avr * 2, 0));
            org.eclipse.swt.graphics.Rectangle newRect = text.computeTrim (rect.x, rect.y, rect.width, rect.height);
            if (! newRect.equals (new Rectangle (text.getBounds ()))) text.setBounds (newRect.x, newRect.y, newRect.width, newRect.height);

        }

    }

    public TextDirectEditManager (ITextAwareEditPart source) {
        this (source, getTextCellEditorClass (source), getTextCellEditorLocator (source));
    }

    public TextDirectEditManager (GraphicalEditPart source, Class editorType, CellEditorLocator locator) {
        super (source, editorType, locator);
        this.locator = locator;
    }

    public static CellEditorLocator getTextCellEditorLocator (ITextAwareEditPart source) {
        if (source instanceof TextCompartmentEditPart) return new TextCellEditorLocator (((TextCompartmentEditPart) source).getLabel ());
        else {
            IFigure figure = source.getFigure ();
            assert figure instanceof Label;
            return new LabelCellEditorLocator ((Label) figure);
        }
    }

    public static Class getTextCellEditorClass (GraphicalEditPart source) {
        IFigure figure = source.getFigure ();
        if (figure instanceof WrapLabel && ((WrapLabel) figure).isTextWrapped ()) return WrapTextCellEditor.class;

        return TextCellEditorEx.class;
    }

    protected Font getScaledFont (IFigure label) {
        Font scaledFont = label.getFont ();
        FontData data = scaledFont.getFontData () [0];
        Dimension fontSize = new Dimension (0, MapModeUtil.getMapMode (label).DPtoLP (data.getHeight ()));
        label.translateToAbsolute (fontSize);
        if (Math.abs (data.getHeight () - fontSize.height) < 2) fontSize.height = data.getHeight ();

        try {
            FontDescriptor fontDescriptor = FontDescriptor.createFrom (data);
            cachedFontDescriptors.add (fontDescriptor);
            return getResourceManager ().createFont (fontDescriptor);
        } catch (DeviceResourceException e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getScaledFont", e);
            Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "getScaledFont", e);
        }
        return JFaceResources.getDefaultFont ();
    }

    protected void initCellEditor () {
        committed = false;
        ITextAwareEditPart textEP = (ITextAwareEditPart) getEditPart ();
        setEditText (textEP.getEditText ());
        IFigure label = textEP.getFigure ();
        Assert.isNotNull (label);
        Text text = (Text) getCellEditor ().getControl ();
        text.setFont (getScaledFont (label));
        getCellEditor ().setValidator (textEP.getEditTextValidator ());
        if (textEP.getParser () != null) {
            IContentAssistProcessor processor = textEP.getCompletionProcessor ();
            if (processor != null) {
                proposalPopupBackgroundColor = new Color (getCellEditor ().getControl ().getShell ().getDisplay (), new RGB (254, 241, 233));
                proposalPopupForegroundColor = new Color (getCellEditor ().getControl ().getShell ().getDisplay (), new RGB (0, 0, 0));
                ContentAssistantHelper.createTextContentAssistant (text, proposalPopupForegroundColor, proposalPopupBackgroundColor, processor);
            }
        }
        actionBars = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getActivePage ().getActiveEditor ().getEditorSite ().getActionBars ();
        saveCurrentActions (actionBars);
        actionHandler = new CellEditorActionHandler (actionBars);
        actionHandler.addCellEditor (getCellEditor ());
        actionBars.updateActionBars ();
    }

    protected void commit () {
        Shell activeShell = Display.getCurrent ().getActiveShell ();
        if (activeShell != null && getCellEditor ().getControl ().getShell ().equals (activeShell.getParent ())) {
            Control [] children = activeShell.getChildren ();
            if (children.length == 1 && children [0] instanceof Table) {
                getCellEditor ().getControl ().setVisible (true);
                ((TextCellEditorEx) getCellEditor ()).setDeactivationLock (true);
                return;
            }
        }
        if (committed) {
            bringDown ();
            return;
        }
        committed = true;
        super.commit ();
    }

    protected void bringDown () {
        if (proposalPopupForegroundColor != null) {
            proposalPopupForegroundColor.dispose ();
            proposalPopupForegroundColor = null;
        }
        if (proposalPopupBackgroundColor != null) {
            proposalPopupBackgroundColor.dispose ();
            proposalPopupBackgroundColor = null;
        }
        eraseFeedback ();
        initialString = new StringBuffer ();
        Display.getCurrent ().asyncExec (new Runnable () {

            public void run () {
                TextDirectEditManager.super.bringDown ();
            }

        }

        );
        for (Iterator iter = cachedFontDescriptors.iterator ();
        iter.hasNext ();) {
            getResourceManager ().destroyFont ((FontDescriptor) iter.next ());
        }
        cachedFontDescriptors.clear ();
        if (actionHandler != null) {
            actionHandler.dispose ();
            actionHandler = null;
        }
        if (actionBars != null) {
            restoreSavedActions (actionBars);
            actionBars.updateActionBars ();
            actionBars = null;
        }
    }

    public void setEditText (String toEdit) {
        CellEditor cellEditor = getCellEditor ();
        if (cellEditor == null) {
            return;
        }
        ITextAwareEditPart textEP = (ITextAwareEditPart) getEditPart ();
        Text textControl = (Text) cellEditor.getControl ();
        textEP.setLabelText (toEdit);
        if (cellEditor instanceof TextCellEditorEx) {
            ((TextCellEditorEx) cellEditor).setValueAndProcessEditOccured (toEdit);
        } else {
            cellEditor.setValue (toEdit);
        }
        textControl.setSelection (toEdit.length ());
    }

    public void show (char initialChar) {
        initialString = initialString.append (initialChar);
        show ();
        if (SWT.getPlatform () != "carbon") {
            setEditText (initialString.toString ());
        }
    }

    private Font getZoomLevelFont (Font actualFont, Display display) {
        Object zoom = getEditPart ().getViewer ().getProperty (ZoomManager.class.toString ());
        if (zoom != null) {
            double zoomLevel = ((ZoomManager) zoom).getZoom ();
            if (zoomLevel == 1.0f) return actualFont;

            FontData [] fd = new FontData [actualFont.getFontData ().length];
            FontData tempFD = null;
            for (int i = 0;
            i < fd.length; i ++) {
                tempFD = actualFont.getFontData () [i];
                fd [i] = new FontData (tempFD.getName (), (int) (zoomLevel * tempFD.getHeight ()), tempFD.getStyle ());
            }
            try {
                FontDescriptor fontDescriptor = FontDescriptor.createFrom (fd);
                cachedFontDescriptors.add (fontDescriptor);
                return getResourceManager ().createFont (fontDescriptor);
            } catch (DeviceResourceException e) {
                Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getZoomLevelFonts", e);
                Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "getZoomLevelFonts", e);
                return actualFont;
            }
        } else return actualFont;

    }

    private Dimension getTextExtents (String s, Font font, IMapMode mm) {
        Dimension d = FigureUtilities.getTextExtents (s, font);
        int lineCount = getLineCount (s);
        d.height = FigureUtilities.getFontMetrics (font).getHeight () * lineCount;
        return new Dimension (mm.DPtoLP (d.width), mm.DPtoLP (d.height));
    }

    private int getLineCount (String s) {
        StringTokenizer tokenizer = new StringTokenizer (s, "\n");
        return tokenizer.countTokens ();
    }

    public void show () {
        super.show ();
        IFigure fig = getEditPart ().getFigure ();
        Control control = getCellEditor ().getControl ();
        this.zoomLevelFont = getZoomLevelFont (fig.getFont (), control.getDisplay ());
        control.setFont (this.zoomLevelFont);
        locator.relocate (getCellEditor ());
    }

    public void show (Point location) {
        show ();
        Rectangle iconBounds;
        Image icon;
        int textPlacement;
        String subStringText;
        String text;
        IFigure fig = getEditPart ().getFigure ();
        if (fig instanceof WrapLabel) {
            WrapLabel label = (WrapLabel) fig;
            iconBounds = label.getIconBounds ().getCopy ();
            icon = label.getIcon ();
            textPlacement = label.getTextPlacement ();
            subStringText = label.getSubStringText ();
            text = label.getText ();
        } else if (fig instanceof Label) {
            Label label = (Label) fig;
            iconBounds = label.getIconBounds ().getCopy ();
            icon = label.getIcon ();
            textPlacement = label.getTextPlacement ();
            subStringText = label.getSubStringText ();
            text = label.getText ();
        } else {
            sendClickToCellEditor (location);
            return;
        }

        Text textControl = (Text) getCellEditor ().getControl ();
        Rectangle restoreRect = fig.getBounds ().getCopy ();
        Rectangle rect = fig.getBounds ();
        fig.translateToAbsolute (rect);
        if (! rect.contains (new org.eclipse.draw2d.geometry.Point (location.x, location.y))) {
            textControl.setSelection (0, textControl.getText ().length ());
            fig.setBounds (restoreRect);
            return;
        }
        fig.translateToAbsolute (iconBounds);
        double avrLines = fig.getBounds ().height / (double) FigureUtilities.getFontMetrics (this.zoomLevelFont).getHeight ();
        int xWidth = location.x - rect.x;
        if (icon != null && textPlacement == PositionConstants.EAST) xWidth -= iconBounds.width;

        double yPercentage = (location.y - rect.y) / (double) rect.height;
        int lineNum = (int) Math.ceil (avrLines * yPercentage);
        int charCount = 0;
        StringTokenizer tokenizer = new StringTokenizer (subStringText, "\n");
        for (int lineCount = 1;
        lineCount < lineNum; lineCount ++) {
            if (tokenizer.hasMoreTokens ()) {
                charCount += tokenizer.nextToken ().length ();
                String newLineCheck = text.substring (charCount, charCount + 1);
                if (newLineCheck.equals ("\r") || newLineCheck.equals ("\n")) charCount ++;

            } else {
                sendClickToCellEditor (location);
                fig.setBounds (restoreRect);
                return;
            }
        }
        if (tokenizer.hasMoreTokens ()) {
            String currentLineText = tokenizer.nextToken ();
            IMapMode mm = MapModeUtil.getMapMode (fig);
            for (int i = 1;
            i <= currentLineText.length (); i ++) {
                Dimension textExtent = getTextExtents (currentLineText.substring (0, i), this.zoomLevelFont, mm);
                fig.translateToAbsolute (textExtent);
                charCount ++;
                if (textExtent.width >= xWidth) break;

            }
            textControl.setSelection (charCount);
            fig.setBounds (restoreRect);
        } else {
            sendClickToCellEditor (location);
            fig.setBounds (restoreRect);
        }
    }

    private void sendClickToCellEditor (final Point location) {
        getCellEditor ().getControl ().setCapture (true);
        if (getCellEditor () != null && getCellEditor ().getControl ().getBounds ().contains (location)) sendMouseClick (location);

    }

    private void sendMouseClick (final Point location) {
        final Display currDisplay = Display.getCurrent ();
        new Thread () {
            Event event;

            public void run () {
                event = new Event ();
                event.type = SWT.MouseDown;
                event.button = 1;
                event.x = location.x;
                event.y = location.y;
                currDisplay.post (event);
                event.type = SWT.MouseUp;
                currDisplay.post (event);
            }

        }

        .start ();
    }

    protected void unhookListeners () {
        if (listenersAttached) {
            listenersAttached = false;
            super.unhookListeners ();
        }
    }

    protected void setCellEditor (CellEditor editor) {
        super.setCellEditor (editor);
        if (editor != null) {
            listenersAttached = true;
        }
    }

    public void showFeedback () {
        try {
            getEditPart ().getRoot ();
            super.showFeedback ();
        } catch (Exception e) {
        }
    }

    protected ResourceManager getResourceManager () {
        return ((DiagramGraphicalViewer) getEditPart ().getViewer ()).getResourceManager ();
    }

    private void saveCurrentActions (IActionBars _actionBars) {
        copy = _actionBars.getGlobalActionHandler (ActionFactory.COPY.getId ());
        paste = _actionBars.getGlobalActionHandler (ActionFactory.PASTE.getId ());
        delete = _actionBars.getGlobalActionHandler (ActionFactory.DELETE.getId ());
        selectAll = _actionBars.getGlobalActionHandler (ActionFactory.SELECT_ALL.getId ());
        cut = _actionBars.getGlobalActionHandler (ActionFactory.CUT.getId ());
        find = _actionBars.getGlobalActionHandler (ActionFactory.FIND.getId ());
        undo = _actionBars.getGlobalActionHandler (ActionFactory.UNDO.getId ());
        redo = _actionBars.getGlobalActionHandler (ActionFactory.REDO.getId ());
    }

    private void restoreSavedActions (IActionBars _actionBars) {
        _actionBars.setGlobalActionHandler (ActionFactory.COPY.getId (), copy);
        _actionBars.setGlobalActionHandler (ActionFactory.PASTE.getId (), paste);
        _actionBars.setGlobalActionHandler (ActionFactory.DELETE.getId (), delete);
        _actionBars.setGlobalActionHandler (ActionFactory.SELECT_ALL.getId (), selectAll);
        _actionBars.setGlobalActionHandler (ActionFactory.CUT.getId (), cut);
        _actionBars.setGlobalActionHandler (ActionFactory.FIND.getId (), find);
        _actionBars.setGlobalActionHandler (ActionFactory.UNDO.getId (), undo);
        _actionBars.setGlobalActionHandler (ActionFactory.REDO.getId (), redo);
    }

    public void setLocator (CellEditorLocator locator) {
        super.setLocator (locator);
        this.locator = locator;
    }

}

