package org.eclipse.gmf.runtime.common.ui.util;

import java.io.ByteArrayInputStream;

import java.io.File;

import java.io.InputStream;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IResource;

import org.eclipse.core.resources.IResourceStatus;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IPath;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.OperationCanceledException;

import org.eclipse.core.runtime.Path;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIDebugOptions;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIStatusCodes;

public class FileUtil {

    static public void createFile (IFile fileHandle, InputStream contents, IProgressMonitor monitor) throws CoreException {
        if (contents == null) contents = new ByteArrayInputStream (new byte [0]);

        try {
            fileHandle.create (contents, false, monitor);
        } catch (CoreException e) {
            if (e.getStatus ().getCode () == IResourceStatus.PATH_OCCUPIED) fileHandle.refreshLocal (IResource.DEPTH_ZERO, null);
            else {
                Trace.catching (CommonUIPlugin.getDefault (), CommonUIDebugOptions.EXCEPTIONS_CATCHING, CommonUIPlugin.getDefault ().getClass (), "createFile", e);
                Log.error (CommonUIPlugin.getDefault (), CommonUIStatusCodes.SERVICE_FAILURE, "createFile", e);
                Trace.throwing (CommonUIPlugin.getDefault (), CommonUIDebugOptions.EXCEPTIONS_THROWING, CommonUIPlugin.getDefault ().getClass (), "createFile", e);
                throw e;
            }
        }
        if (monitor.isCanceled ()) throw new OperationCanceledException ();

    }

    static public void deleteFile (IFile fileHandle, IProgressMonitor monitor) throws CoreException {
        try {
            fileHandle.delete (true, monitor);
        } catch (CoreException e) {
            Trace.catching (CommonUIPlugin.getDefault (), CommonUIDebugOptions.EXCEPTIONS_CATCHING, CommonUIPlugin.getDefault ().getClass (), "createFile", e);
            Log.error (CommonUIPlugin.getDefault (), CommonUIStatusCodes.SERVICE_FAILURE, "createFile", e);
            Trace.throwing (CommonUIPlugin.getDefault (), CommonUIDebugOptions.EXCEPTIONS_THROWING, CommonUIPlugin.getDefault ().getClass (), "createFile", e);
            throw e;
        }
        if (monitor.isCanceled ()) throw new OperationCanceledException ();

    }

    private static final String RELATIVE_STR = "..";

    public static String getRelativePath (String urlPathstr, String modelPathstr) {
        StringBuffer res = new StringBuffer ();
        IPath urlPath = new Path (urlPathstr);
        IPath modelPath = new Path (modelPathstr);
        if (urlPathstr.indexOf ("://") > 0) {
            return urlPathstr;
        }
        int matchingSegments = urlPath.matchingFirstSegments (modelPath);
        int backSegments = modelPath.segmentCount () - matchingSegments - 1;
        while (backSegments > 0) {
            res.append (RELATIVE_STR);
            res.append (File.separatorChar);
            backSegments --;
        }
        int segCount = urlPath.segmentCount ();
        for (int i = matchingSegments;
        i < segCount; i ++) {
            if (i > matchingSegments) {
                res.append (File.separatorChar);
            }
            res.append (urlPath.segment (i));
        }
        return res.toString ();
    }

    public static String getAbsolutePath (String strurlPath, String strmodelPath) {
        IPath urlPath = new Path (strurlPath);
        if (urlPath.isAbsolute ()) return strurlPath;

        IPath modelPath = new Path (strmodelPath);
        int rel_level = 0;
        for (int i = 0;
        i < urlPath.segmentCount (); i ++) {
            if (urlPath.segment (i).equals (RELATIVE_STR)) {
                rel_level ++;
            }
        }
        urlPath = urlPath.removeFirstSegments (rel_level);
        modelPath = modelPath.removeLastSegments (rel_level + 1);
        urlPath = modelPath.append (urlPath);
        return urlPath.toOSString ();
    }

}

