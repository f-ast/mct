package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.mappings.Constraint;

import org.eclipse.gmf.mappings.ElementInitializer;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.MappingEntry;

public abstract class MappingEntryImpl extends EObjectImpl implements MappingEntry {
    protected EClass domainMetaElement = null;
    protected Constraint domainSpecialization = null;
    protected ElementInitializer domainInitializer = null;
    protected EReference containmentFeature = null;

    protected MappingEntryImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getMappingEntry ();
    }

    public EClass getDomainMetaElement () {
        if (domainMetaElement != null && domainMetaElement.eIsProxy ()) {
            InternalEObject oldDomainMetaElement = (InternalEObject) domainMetaElement;
            domainMetaElement = (EClass) eResolveProxy (oldDomainMetaElement);
            if (domainMetaElement != oldDomainMetaElement) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.MAPPING_ENTRY__DOMAIN_META_ELEMENT, oldDomainMetaElement, domainMetaElement));

            }
        }
        return domainMetaElement;
    }

    public EClass basicGetDomainMetaElement () {
        return domainMetaElement;
    }

    public void setDomainMetaElement (EClass newDomainMetaElement) {
        EClass oldDomainMetaElement = domainMetaElement;
        domainMetaElement = newDomainMetaElement;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.MAPPING_ENTRY__DOMAIN_META_ELEMENT, oldDomainMetaElement, domainMetaElement));

    }

    public Constraint getDomainSpecialization () {
        return domainSpecialization;
    }

    public NotificationChain basicSetDomainSpecialization (Constraint newDomainSpecialization, NotificationChain msgs) {
        Constraint oldDomainSpecialization = domainSpecialization;
        domainSpecialization = newDomainSpecialization;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFMapPackage.MAPPING_ENTRY__DOMAIN_SPECIALIZATION, oldDomainSpecialization, newDomainSpecialization);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setDomainSpecialization (Constraint newDomainSpecialization) {
        if (newDomainSpecialization != domainSpecialization) {
            NotificationChain msgs = null;
            if (domainSpecialization != null) msgs = ((InternalEObject) domainSpecialization).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.MAPPING_ENTRY__DOMAIN_SPECIALIZATION, null, msgs);

            if (newDomainSpecialization != null) msgs = ((InternalEObject) newDomainSpecialization).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.MAPPING_ENTRY__DOMAIN_SPECIALIZATION, null, msgs);

            msgs = basicSetDomainSpecialization (newDomainSpecialization, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.MAPPING_ENTRY__DOMAIN_SPECIALIZATION, newDomainSpecialization, newDomainSpecialization));

    }

    public ElementInitializer getDomainInitializer () {
        return domainInitializer;
    }

    public NotificationChain basicSetDomainInitializer (ElementInitializer newDomainInitializer, NotificationChain msgs) {
        ElementInitializer oldDomainInitializer = domainInitializer;
        domainInitializer = newDomainInitializer;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFMapPackage.MAPPING_ENTRY__DOMAIN_INITIALIZER, oldDomainInitializer, newDomainInitializer);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setDomainInitializer (ElementInitializer newDomainInitializer) {
        if (newDomainInitializer != domainInitializer) {
            NotificationChain msgs = null;
            if (domainInitializer != null) msgs = ((InternalEObject) domainInitializer).eInverseRemove (this, GMFMapPackage.ELEMENT_INITIALIZER__MAPPING_ENTRY, ElementInitializer.class, msgs);

            if (newDomainInitializer != null) msgs = ((InternalEObject) newDomainInitializer).eInverseAdd (this, GMFMapPackage.ELEMENT_INITIALIZER__MAPPING_ENTRY, ElementInitializer.class, msgs);

            msgs = basicSetDomainInitializer (newDomainInitializer, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.MAPPING_ENTRY__DOMAIN_INITIALIZER, newDomainInitializer, newDomainInitializer));

    }

    public EReference getContainmentFeature () {
        if (containmentFeature != null && containmentFeature.eIsProxy ()) {
            InternalEObject oldContainmentFeature = (InternalEObject) containmentFeature;
            containmentFeature = (EReference) eResolveProxy (oldContainmentFeature);
            if (containmentFeature != oldContainmentFeature) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.MAPPING_ENTRY__CONTAINMENT_FEATURE, oldContainmentFeature, containmentFeature));

            }
        }
        return containmentFeature;
    }

    public EReference basicGetContainmentFeature () {
        return containmentFeature;
    }

    public void setContainmentFeature (EReference newContainmentFeature) {
        EReference oldContainmentFeature = containmentFeature;
        containmentFeature = newContainmentFeature;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.MAPPING_ENTRY__CONTAINMENT_FEATURE, oldContainmentFeature, containmentFeature));

    }

    public abstract EClass getDomainContext ();

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_INITIALIZER :
                if (domainInitializer != null) msgs = ((InternalEObject) domainInitializer).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.MAPPING_ENTRY__DOMAIN_INITIALIZER, null, msgs);

                return basicSetDomainInitializer ((ElementInitializer) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_SPECIALIZATION :
                return basicSetDomainSpecialization (null, msgs);
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_INITIALIZER :
                return basicSetDomainInitializer (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_META_ELEMENT :
                if (resolve) return getDomainMetaElement ();

                return basicGetDomainMetaElement ();
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_SPECIALIZATION :
                return getDomainSpecialization ();
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_INITIALIZER :
                return getDomainInitializer ();
            case GMFMapPackage.MAPPING_ENTRY__CONTAINMENT_FEATURE :
                if (resolve) return getContainmentFeature ();

                return basicGetContainmentFeature ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_META_ELEMENT :
                setDomainMetaElement ((EClass) newValue);
                return;
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_SPECIALIZATION :
                setDomainSpecialization ((Constraint) newValue);
                return;
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_INITIALIZER :
                setDomainInitializer ((ElementInitializer) newValue);
                return;
            case GMFMapPackage.MAPPING_ENTRY__CONTAINMENT_FEATURE :
                setContainmentFeature ((EReference) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_META_ELEMENT :
                setDomainMetaElement ((EClass) null);
                return;
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_SPECIALIZATION :
                setDomainSpecialization ((Constraint) null);
                return;
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_INITIALIZER :
                setDomainInitializer ((ElementInitializer) null);
                return;
            case GMFMapPackage.MAPPING_ENTRY__CONTAINMENT_FEATURE :
                setContainmentFeature ((EReference) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_META_ELEMENT :
                return domainMetaElement != null;
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_SPECIALIZATION :
                return domainSpecialization != null;
            case GMFMapPackage.MAPPING_ENTRY__DOMAIN_INITIALIZER :
                return domainInitializer != null;
            case GMFMapPackage.MAPPING_ENTRY__CONTAINMENT_FEATURE :
                return containmentFeature != null;
        }
        return super.eIsSet (featureID);
    }

}

