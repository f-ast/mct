package org.eclipse.gmf.runtime.diagram.ui.commands;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Collections;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.draw2d.IFigure;

import org.eclipse.gef.commands.Command;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.requests.ArrangeRequest;

import org.eclipse.gmf.runtime.diagram.ui.services.layout.LayoutType;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;

import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;

import org.eclipse.gmf.runtime.notation.View;

public class DeferredLayoutCommand extends AbstractModelCommand {
    protected String layoutType;
    protected List viewAdapters;
    protected IGraphicalEditPart containerEP;
    protected Command layoutCmd;

    public DeferredLayoutCommand (List viewAdapters, IGraphicalEditPart containerEP) {
        this (viewAdapters, containerEP, LayoutType.DEFAULT);
    }

    public DeferredLayoutCommand (List viewAdapters, IGraphicalEditPart containerEP, String commandLayoutType) {
        super (DiagramResourceManager.getI18NString ("Command.Deferred_Layout"), null);
        if (commandLayoutType != null) {
            this.layoutType = commandLayoutType;
        } else {
            this.layoutType = LayoutType.DEFAULT;
        }
        this.viewAdapters = viewAdapters;
        this.containerEP = containerEP;
    }

    public Collection getAffectedObjects () {
        if (containerEP != null) {
            View view = (View) containerEP.getModel ();
            if (view != null) {
                IFile f = EObjectUtil.getWorkspaceFile (view);
                return f != null ? Collections.singletonList (f) : Collections.EMPTY_LIST;
            }
        }
        return super.getAffectedObjects ();
    }

    protected CommandResult doExecute (IProgressMonitor progressMonitor) {
        containerEP.refresh ();
        getContainerFigure ().invalidate ();
        getContainerFigure ().validate ();
        List editParts = new ArrayList (viewAdapters.size ());
        Map epRegistry = containerEP.getRoot ().getViewer ().getEditPartRegistry ();
        for (Iterator iter = viewAdapters.iterator ();
        iter.hasNext ();) {
            IAdaptable ad = (IAdaptable) iter.next ();
            View view = (View) ad.getAdapter (View.class);
            Object ep = epRegistry.get (view);
            if (ep != null) {
                editParts.add (ep);
            }
        }
        if (editParts.isEmpty ()) {
            return newOKCommandResult ();
        }
        ArrangeRequest request = new ArrangeRequest (ActionIds.ACTION_ARRANGE_SELECTION, layoutType);
        request.setPartsToArrange (editParts);
        layoutCmd = containerEP.getCommand (request);
        if (layoutCmd != null && layoutCmd.canExecute ()) {
            layoutCmd.execute ();
        }
        containerEP = null;
        return newOKCommandResult ();
    }

    protected IFigure getContainerFigure () {
        return containerEP.getFigure ();
    }

    protected IGraphicalEditPart getContainerEP () {
        return containerEP;
    }

    protected List getViewAdapters () {
        return viewAdapters;
    }

}

