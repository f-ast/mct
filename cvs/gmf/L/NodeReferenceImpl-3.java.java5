package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.NodeMapping;

import org.eclipse.gmf.mappings.NodeReference;

public abstract class NodeReferenceImpl extends EObjectImpl implements NodeReference {
    protected EReference containmentFeature = null;
    protected EReference childrenFeature = null;

    protected NodeReferenceImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getNodeReference ();
    }

    public EReference getContainmentFeature () {
        if (containmentFeature != null && containmentFeature.eIsProxy ()) {
            InternalEObject oldContainmentFeature = (InternalEObject) containmentFeature;
            containmentFeature = (EReference) eResolveProxy (oldContainmentFeature);
            if (containmentFeature != oldContainmentFeature) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.NODE_REFERENCE__CONTAINMENT_FEATURE, oldContainmentFeature, containmentFeature));

            }
        }
        return containmentFeature;
    }

    public EReference basicGetContainmentFeature () {
        return containmentFeature;
    }

    public void setContainmentFeature (EReference newContainmentFeature) {
        EReference oldContainmentFeature = containmentFeature;
        containmentFeature = newContainmentFeature;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.NODE_REFERENCE__CONTAINMENT_FEATURE, oldContainmentFeature, containmentFeature));

    }

    public EReference getChildrenFeature () {
        if (childrenFeature != null && childrenFeature.eIsProxy ()) {
            InternalEObject oldChildrenFeature = (InternalEObject) childrenFeature;
            childrenFeature = (EReference) eResolveProxy (oldChildrenFeature);
            if (childrenFeature != oldChildrenFeature) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.NODE_REFERENCE__CHILDREN_FEATURE, oldChildrenFeature, childrenFeature));

            }
        }
        return childrenFeature;
    }

    public EReference basicGetChildrenFeature () {
        return childrenFeature;
    }

    public void setChildrenFeature (EReference newChildrenFeature) {
        EReference oldChildrenFeature = childrenFeature;
        childrenFeature = newChildrenFeature;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.NODE_REFERENCE__CHILDREN_FEATURE, oldChildrenFeature, childrenFeature));

    }

    public abstract NodeMapping getChild ();

    public abstract boolean isSetChild ();

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFMapPackage.NODE_REFERENCE__CONTAINMENT_FEATURE :
                if (resolve) return getContainmentFeature ();

                return basicGetContainmentFeature ();
            case GMFMapPackage.NODE_REFERENCE__CHILDREN_FEATURE :
                if (resolve) return getChildrenFeature ();

                return basicGetChildrenFeature ();
            case GMFMapPackage.NODE_REFERENCE__CHILD :
                return getChild ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFMapPackage.NODE_REFERENCE__CONTAINMENT_FEATURE :
                setContainmentFeature ((EReference) newValue);
                return;
            case GMFMapPackage.NODE_REFERENCE__CHILDREN_FEATURE :
                setChildrenFeature ((EReference) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFMapPackage.NODE_REFERENCE__CONTAINMENT_FEATURE :
                setContainmentFeature ((EReference) null);
                return;
            case GMFMapPackage.NODE_REFERENCE__CHILDREN_FEATURE :
                setChildrenFeature ((EReference) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFMapPackage.NODE_REFERENCE__CONTAINMENT_FEATURE :
                return containmentFeature != null;
            case GMFMapPackage.NODE_REFERENCE__CHILDREN_FEATURE :
                return childrenFeature != null;
            case GMFMapPackage.NODE_REFERENCE__CHILD :
                return isSetChild ();
        }
        return super.eIsSet (featureID);
    }

}

