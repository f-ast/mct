package org.eclipse.gmf.runtime.diagram.ui.printing.render.dialogs;

import java.util.List;

import java.util.Locale;

import javax.print.DocFlavor;

import javax.print.PrintService;

import javax.print.PrintServiceLookup;

import javax.print.attribute.AttributeSet;

import javax.print.attribute.HashPrintServiceAttributeSet;

import javax.print.attribute.PrintServiceAttributeSet;

import javax.print.attribute.standard.PrinterLocation;

import javax.print.attribute.standard.PrinterMakeAndModel;

import javax.print.attribute.standard.PrinterMessageFromOperator;

import javax.print.attribute.standard.PrinterName;

import javax.print.attribute.standard.PrinterState;

import org.eclipse.core.databinding.DataBindingContext;

import org.eclipse.core.databinding.beans.BeansObservables;

import org.eclipse.core.databinding.observable.Realm;

import org.eclipse.core.databinding.observable.value.IObservableValue;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.l10n.DiagramUIPrintingMessages;

import org.eclipse.gmf.runtime.diagram.ui.printing.render.model.PrintDestination;

import org.eclipse.gmf.runtime.diagram.ui.printing.render.model.PrintOptions;

import org.eclipse.jface.databinding.viewers.ViewersObservables;

import org.eclipse.jface.viewers.ComboViewer;

import org.eclipse.jface.viewers.IStructuredContentProvider;

import org.eclipse.jface.viewers.LabelProvider;

import org.eclipse.jface.viewers.SelectionChangedEvent;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.jface.viewers.Viewer;

import org.eclipse.swt.events.SelectionAdapter;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.widgets.Button;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Label;

import org.eclipse.ui.PlatformUI;

class PrinterBlock extends DialogBlock {
    private final DataBindingContext bindings;
    private final PrintOptions options;
    private List < PrintDestination > destinations = new java.util.ArrayList < PrintDestination > ();
    private ComboViewer combo;
    private Label resultStatusLabel;
    private Label resultTypeLabel;
    private Label resultWhereLabel;
    private Label resultCommentLabel;

    PrinterBlock (IDialogUnitConverter dluConverter, DataBindingContext bindings, PrintOptions options) {
        super (dluConverter);
        this.bindings = bindings;
        this.options = options;
    }

    public Control createContents (Composite parent) {
        final Realm realm = bindings.getValidationRealm ();
        Composite result = group (parent, DiagramUIPrintingMessages.JPSPrintDialog_Printer);
        layout (result, 3);
        label (result, DiagramUIPrintingMessages.JPSPrintDialog_Name);
        combo = combo (result);
        layoutFillHorizontal (combo.getControl ());
        Button propertiesButton = button (result, DiagramUIPrintingMessages.JPSPrintDialog_Properties);
        propertiesButton.setEnabled (true);
        propertiesButton.addSelectionListener (new SelectionAdapter () {

            public void widgetSelected (SelectionEvent e) {
                openPrintOptionsDialog ();
            }

        }

        );
        IObservableValue destination = BeansObservables.observeValue (realm, options, PrintOptions.PROPERTY_DESTINATION);
        bindings.bindValue (ViewersObservables.observeSingleSelection (combo), destination, null, null);
        init ();
        return result;
    }

    private void handlePrinterSelectionChanged (SelectionChangedEvent selectionChangedEvent) {
        StructuredSelection selection = (StructuredSelection) selectionChangedEvent.getSelection ();
        if (selection != null) {
            PrintDestination destination = (PrintDestination) selection.getFirstElement ();
            if (destination != null) {
                String printerName = destination.getName ();
                AttributeSet attributes = new HashPrintServiceAttributeSet (new PrinterName (printerName, Locale.getDefault ()));
                PrintService [] services = PrintServiceLookup.lookupPrintServices (DocFlavor.SERVICE_FORMATTED.PRINTABLE, attributes);
                PrintService printService = services [0];
                PrintServiceAttributeSet printServiceAttributes = printService.getAttributes ();
                PrinterState printerState = (PrinterState) printServiceAttributes.get (PrinterState.class);
                PrinterLocation printerLocation = (PrinterLocation) printServiceAttributes.get (PrinterLocation.class);
                PrinterMakeAndModel printerMakeAndModel = (PrinterMakeAndModel) printServiceAttributes.get (PrinterMakeAndModel.class);
                PrinterMessageFromOperator printerComment = (PrinterMessageFromOperator) printServiceAttributes.get (PrinterMessageFromOperator.class);
                if (printerState != null) {
                    resultStatusLabel.setText (printerState.getName ());
                }
                if (printerLocation != null) {
                    resultWhereLabel.setText (printerLocation.getName ());
                }
                if (printerComment != null) {
                    resultCommentLabel.setText (printerComment.getName ());
                }
                if (printerMakeAndModel != null) {
                    resultTypeLabel.setText (printerMakeAndModel.getName ());
                }
            }
        }
    }

    private void init () {
        PrintService [] printServices = PrintServiceLookup.lookupPrintServices (null, null);
        PrintService defaultPrintService = PrintServiceLookup.lookupDefaultPrintService ();
        for (PrintService printService : printServices) {
            destinations.add (new PrintDestination (printService.getName ()));
        }
        PrintDestination defaultPrintDestination = getPrinterByName (defaultPrintService.getName ());
        combo.setContentProvider (new PrinterContentProvider ());
        combo.setLabelProvider (new PrinterLabelProvider ());
        initializePrinterCombo (defaultPrintDestination);
    }

    private void initializePrinterCombo (PrintDestination selection) {
        combo.setInput (destinations);
        combo.setSelection (new StructuredSelection (selection));
    }

    private PrintDestination getPrinterByName (String name) {
        PrintDestination result = null;
        for (PrintDestination printDestination : destinations) {
            if (printDestination.getName ().equals (name)) {
                result = printDestination;
                break;
            }
        }
        return result;
    }

    private class PrinterContentProvider implements IStructuredContentProvider {

        public Object [] getElements (Object inputElement) {
            return destinations.toArray ();
        }

        public void inputChanged (Viewer viewer, Object oldInput, Object newInput) {
        }

        public void dispose () {
        }

    }

    private class PrinterLabelProvider extends LabelProvider {

        public String getText (Object element) {
            return ((PrintDestination) element).getName ();
        }

    }

    private void openPrintOptionsDialog () {
        JPSOptionsDialog dlg = new JPSOptionsDialog (PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell (), bindings, options);
        dlg.open ();
    }

    @Override
    public void dispose () {
    }

}

