package org.eclipse.gmf.runtime.emf.type.core.edithelper;

import java.util.ArrayList;

import java.util.Arrays;

import java.util.Collection;

import java.util.Collections;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.common.core.command.ICompositeCommand;

import org.eclipse.gmf.runtime.common.core.command.IdentityCommand;

import org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand;

import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;

import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;

import org.eclipse.gmf.runtime.emf.type.core.IContainerDescriptor;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.emf.type.core.ISpecializationType;

import org.eclipse.gmf.runtime.emf.type.core.commands.CreateElementCommand;

import org.eclipse.gmf.runtime.emf.type.core.commands.CreateRelationshipCommand;

import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;

import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyReferenceCommand;

import org.eclipse.gmf.runtime.emf.type.core.commands.GetEditContextCommand;

import org.eclipse.gmf.runtime.emf.type.core.commands.MoveElementsCommand;

import org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand;

import org.eclipse.gmf.runtime.emf.type.core.internal.InternalRequestParameters;

import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyDependentsRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;

public abstract class AbstractEditHelper implements IEditHelper {
    private Map defaultContainmentFeatures = new HashMap ();

    public boolean canEdit (IEditCommandRequest req) {
        IEditHelperAdvice [] advice = getEditHelperAdvice (req);
        configureRequest (req, advice);
        boolean approved = approveRequest (req, advice);
        if (! approved) {
            return false;
        }
        ICommand command = getEditCommand (req, advice);
        return command != null && command.canExecute ();
    }

    public ICommand getEditCommand (IEditCommandRequest req) {
        IEditHelperAdvice [] advice = getEditHelperAdvice (req);
        configureRequest (req, advice);
        boolean approved = approveRequest (req, advice);
        if (! approved) {
            return null;
        }
        return getEditCommand (req, advice);
    }

    private ICommand getEditCommand (IEditCommandRequest req, IEditHelperAdvice [] advice) {
        ICompositeCommand command = createCommand (req);
        if (advice != null) {
            for (int i = 0;
            i < advice.length; i ++) {
                IEditHelperAdvice nextAdvice = advice [i];
                ICommand beforeAdvice = nextAdvice.getBeforeEditCommand (req);
                if (beforeAdvice != null) {
                    if (! beforeAdvice.canExecute ()) {
                        return UnexecutableCommand.INSTANCE;
                    }
                    command.compose (beforeAdvice);
                }
            }
        }
        Object replaceParam = req.getParameter (IEditCommandRequest.REPLACE_DEFAULT_COMMAND);
        if (replaceParam != Boolean.TRUE) {
            ICommand insteadCommand = getInsteadCommand (req);
            if (insteadCommand != null) {
                if (! insteadCommand.canExecute ()) {
                    return UnexecutableCommand.INSTANCE;
                }
                command.compose (insteadCommand);
            }
        }
        if (advice != null) {
            for (int i = 0;
            i < advice.length; i ++) {
                IEditHelperAdvice nextAdvice = advice [i];
                ICommand afterAdvice = nextAdvice.getAfterEditCommand (req);
                if (afterAdvice != null) {
                    if (! afterAdvice.canExecute ()) {
                        return UnexecutableCommand.INSTANCE;
                    }
                    command.compose (afterAdvice);
                }
            }
        }
        return command.isEmpty () ? null : command;
    }

    private void configureRequest (IEditCommandRequest req, IEditHelperAdvice [] advice) {
        if (advice != null) {
            for (int i = 0;
            i < advice.length; i ++) {
                IEditHelperAdvice nextAdvice = advice [i];
                nextAdvice.configureRequest (req);
            }
        }
        configureRequest (req);
    }

    private boolean approveRequest (IEditCommandRequest req, IEditHelperAdvice [] advice) {
        if (advice != null) {
            for (int i = 0;
            i < advice.length; i ++) {
                IEditHelperAdvice nextAdvice = advice [i];
                boolean approved = nextAdvice.approveRequest (req);
                if (! approved) {
                    return false;
                }
            }
        }
        return approveRequest (req);
    }

    protected void configureRequest (IEditCommandRequest request) {
    }

    protected boolean approveRequest (IEditCommandRequest request) {
        return true;
    }

    protected IEditHelperAdvice [] getEditHelperAdvice (IEditCommandRequest req) {
        Object editHelperContext = req.getEditHelperContext ();
        return ElementTypeRegistry.getInstance ().getEditHelperAdvice (editHelperContext);
    }

    protected ICompositeCommand createCommand (IEditCommandRequest req) {
        return new CompositeTransactionalCommand (req.getEditingDomain (), req.getLabel ()) {

            public CommandResult getCommandResult () {
                CommandResult result = super.getCommandResult ();
                IStatus status = result.getStatus ();
                if (status.getSeverity () == IStatus.OK) {
                    Object returnObject = null;
                    Object returnValue = result.getReturnValue ();
                    if (returnValue instanceof Collection) {
                        Collection collection = (Collection) returnValue;
                        if (! collection.isEmpty ()) {
                            returnObject = collection.iterator ().next ();
                        }
                    } else {
                        returnObject = returnValue;
                    }
                    result = new CommandResult (status, returnObject);
                }
                return result;
            }

            ;
        }

        ;
    }

    protected ICommand getInsteadCommand (IEditCommandRequest req) {
        if (req instanceof CreateRelationshipRequest) {
            initializeDefaultFeature ((CreateElementRequest) req);
            return getCreateRelationshipCommand ((CreateRelationshipRequest) req);
        } else if (req instanceof CreateElementRequest) {
            initializeDefaultFeature ((CreateElementRequest) req);
            return getCreateCommand ((CreateElementRequest) req);
        } else if (req instanceof ConfigureRequest) {
            return getConfigureCommand ((ConfigureRequest) req);
        } else if (req instanceof DestroyElementRequest) {
            return getDestroyElementCommand ((DestroyElementRequest) req);
        } else if (req instanceof DestroyDependentsRequest) {
            return getDestroyDependentsCommand ((DestroyDependentsRequest) req);
        } else if (req instanceof DestroyReferenceRequest) {
            return getDestroyReferenceCommand ((DestroyReferenceRequest) req);
        } else if (req instanceof DuplicateElementsRequest) {
            return getDuplicateCommand ((DuplicateElementsRequest) req);
        } else if (req instanceof GetEditContextRequest) {
            return getEditContextCommand ((GetEditContextRequest) req);
        } else if (req instanceof MoveRequest) {
            return getMoveCommand ((MoveRequest) req);
        } else if (req instanceof ReorientReferenceRelationshipRequest) {
            return getReorientReferenceRelationshipCommand ((ReorientReferenceRelationshipRequest) req);
        } else if (req instanceof ReorientRelationshipRequest) {
            return getReorientRelationshipCommand ((ReorientRelationshipRequest) req);
        } else if (req instanceof SetRequest) {
            return getSetCommand ((SetRequest) req);
        }

        return null;
    }

    public List getContainedValues (EObject eContainer, EReference feature) {
        return Arrays.asList (ElementTypeRegistry.getInstance ().getContainedTypes (eContainer, feature));
    }

    protected ICommand getConfigureCommand (ConfigureRequest req) {
        return null;
    }

    protected ICommand getCreateRelationshipCommand (CreateRelationshipRequest req) {
        EObject source = req.getSource ();
        EObject target = req.getTarget ();
        boolean noSourceOrTarget = (source == null || target == null);
        boolean noSourceAndTarget = (source == null && target == null);
        if (noSourceOrTarget && ! noSourceAndTarget) {
            return IdentityCommand.INSTANCE;
        }
        return new CreateRelationshipCommand (req);
    }

    protected ICommand getCreateCommand (CreateElementRequest req) {
        return new CreateElementCommand (req);
    }

    public void initializeDefaultFeature (CreateElementRequest req) {
        if (req.getContainmentFeature () == null) {
            ISpecializationType specializationType = (ISpecializationType) req.getElementType ().getAdapter (ISpecializationType.class);
            if (specializationType != null) {
                IContainerDescriptor containerDescriptor = specializationType.getEContainerDescriptor ();
                if (containerDescriptor != null) {
                    EReference [] features = containerDescriptor.getContainmentFeatures ();
                    if (features != null) {
                        for (int i = 0;
                        i < features.length; i ++) {
                            Object editHelperContext = req.getEditHelperContext ();
                            EClass eClass = null;
                            if (editHelperContext instanceof EClass) {
                                eClass = (EClass) editHelperContext;
                            } else if (editHelperContext instanceof EObject) {
                                eClass = ((EObject) editHelperContext).eClass ();
                            } else if (editHelperContext instanceof IElementType) {
                                eClass = ((IElementType) editHelperContext).getEClass ();
                            }

                            if (eClass != null && eClass.getEAllReferences ().contains (features [i])) {
                                req.initializeContainmentFeature ((features [i]));
                                return;
                            }
                        }
                    }
                }
            }
            EClass eClass = req.getElementType ().getEClass ();
            if (eClass != null) {
                req.initializeContainmentFeature (getDefaultContainmentFeature (eClass));
            }
        }
    }

    protected EReference getDefaultContainmentFeature (EClass eClass) {
        EReference result = (EReference) getDefaultContainmentFeatures ().get (eClass);
        if (result == null) {
            List superTypes = new ArrayList (eClass.getEAllSuperTypes ());
            Collections.reverse (superTypes);
            Iterator i = superTypes.iterator ();
            while (i.hasNext () && result == null) {
                EClass nextSuperType = (EClass) i.next ();
                result = (EReference) getDefaultContainmentFeatures ().get (nextSuperType);
            }
        }
        return result;
    }

    protected Map getDefaultContainmentFeatures () {
        return defaultContainmentFeatures;
    }

    protected ICommand getSetCommand (SetRequest req) {
        return new SetValueCommand (req);
    }

    protected ICommand getEditContextCommand (GetEditContextRequest req) {
        return new GetEditContextCommand (req);
    }

    protected ICommand getBasicDestroyElementCommand (DestroyElementRequest req) {
        ICommand result = req.getBasicDestroyCommand ();
        if (result == null) {
            result = new DestroyElementCommand (req);
        } else {
            req.setBasicDestroyCommand (null);
        }
        return result;
    }

    protected ICommand getDestroyElementWithDependentsCommand (DestroyElementRequest req) {
        ICommand result = getBasicDestroyElementCommand (req);
        DestroyDependentsRequest ddr = (DestroyDependentsRequest) req.getParameter (InternalRequestParameters.DESTROY_DEPENDENTS_REQUEST_PARAMETER);
        if (ddr == null) {
            ddr = new DestroyDependentsRequest (req.getEditingDomain (), req.getElementToDestroy (), req.isConfirmationRequired ());
            ddr.addParameters (req.getParameters ());
            ddr.setClientContext (req.getClientContext ());
            req.setParameter (InternalRequestParameters.DESTROY_DEPENDENTS_REQUEST_PARAMETER, ddr);
        } else {
            ddr.setElementToDestroy (req.getElementToDestroy ());
        }
        IElementType typeToDestroy = ElementTypeRegistry.getInstance ().getElementType (req.getElementToDestroy ());
        if (typeToDestroy != null) {
            ICommand command = typeToDestroy.getEditCommand (ddr);
            if (command != null) {
                result = result.compose (command);
            }
        }
        return result;
    }

    protected ICommand getDestroyElementCommand (DestroyElementRequest req) {
        ICommand result = null;
        ICommand destroyParent = getDestroyElementWithDependentsCommand (req);
        EObject parent = req.getElementToDestroy ();
        IElementType parentType = ElementTypeRegistry.getInstance ().getElementType (parent);
        if (parentType != null) {
            for (Iterator iter = parent.eContents ().iterator ();
            iter.hasNext ();) {
                EObject next = (EObject) iter.next ();
                DestroyDependentsRequest ddr = (DestroyDependentsRequest) req.getParameter (InternalRequestParameters.DESTROY_DEPENDENTS_REQUEST_PARAMETER);
                if ((ddr == null) || ! ddr.getDependentElementsToDestroy ().contains (next)) {
                    req.setElementToDestroy (next);
                    ICommand command = parentType.getEditCommand (req);
                    if (command != null) {
                        if (result == null) {
                            result = command;
                        } else {
                            result = result.compose (command);
                        }
                        if (! command.canExecute ()) {
                            break;
                        }
                    }
                }
            }
        }
        if (result == null) {
            result = destroyParent;
        } else {
            result = result.compose (destroyParent);
        }
        return result;
    }

    protected ICommand getDestroyDependentsCommand (DestroyDependentsRequest req) {
        return null;
    }

    protected ICommand getDestroyReferenceCommand (DestroyReferenceRequest req) {
        return new DestroyReferenceCommand (req);
    }

    protected ICommand getDuplicateCommand (DuplicateElementsRequest req) {
        return null;
    }

    protected ICommand getMoveCommand (MoveRequest req) {
        return new MoveElementsCommand (req);
    }

    protected ICommand getReorientReferenceRelationshipCommand (ReorientReferenceRelationshipRequest req) {
        return null;
    }

    protected ICommand getReorientRelationshipCommand (ReorientRelationshipRequest req) {
        return null;
    }

}

