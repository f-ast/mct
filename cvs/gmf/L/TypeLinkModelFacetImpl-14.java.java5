package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.BasicEList;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenLink;

import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;

public class TypeLinkModelFacetImpl extends TypeModelFacetImpl implements TypeLinkModelFacet {
    protected GenFeature sourceMetaFeature = null;
    protected GenFeature targetMetaFeature = null;
    protected static final String CREATE_COMMAND_CLASS_NAME_EDEFAULT = null;
    protected String createCommandClassName = CREATE_COMMAND_CLASS_NAME_EDEFAULT;

    protected TypeLinkModelFacetImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getTypeLinkModelFacet ();
    }

    public GenFeature getSourceMetaFeature () {
        if (sourceMetaFeature != null && sourceMetaFeature.eIsProxy ()) {
            InternalEObject oldSourceMetaFeature = (InternalEObject) sourceMetaFeature;
            sourceMetaFeature = (GenFeature) eResolveProxy (oldSourceMetaFeature);
            if (sourceMetaFeature != oldSourceMetaFeature) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.TYPE_LINK_MODEL_FACET__SOURCE_META_FEATURE, oldSourceMetaFeature, sourceMetaFeature));

            }
        }
        return sourceMetaFeature;
    }

    public GenFeature basicGetSourceMetaFeature () {
        return sourceMetaFeature;
    }

    public void setSourceMetaFeature (GenFeature newSourceMetaFeature) {
        GenFeature oldSourceMetaFeature = sourceMetaFeature;
        sourceMetaFeature = newSourceMetaFeature;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.TYPE_LINK_MODEL_FACET__SOURCE_META_FEATURE, oldSourceMetaFeature, sourceMetaFeature));

    }

    public GenFeature getTargetMetaFeature () {
        if (targetMetaFeature != null && targetMetaFeature.eIsProxy ()) {
            InternalEObject oldTargetMetaFeature = (InternalEObject) targetMetaFeature;
            targetMetaFeature = (GenFeature) eResolveProxy (oldTargetMetaFeature);
            if (targetMetaFeature != oldTargetMetaFeature) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.TYPE_LINK_MODEL_FACET__TARGET_META_FEATURE, oldTargetMetaFeature, targetMetaFeature));

            }
        }
        return targetMetaFeature;
    }

    public GenFeature basicGetTargetMetaFeature () {
        return targetMetaFeature;
    }

    public void setTargetMetaFeature (GenFeature newTargetMetaFeature) {
        GenFeature oldTargetMetaFeature = targetMetaFeature;
        targetMetaFeature = newTargetMetaFeature;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.TYPE_LINK_MODEL_FACET__TARGET_META_FEATURE, oldTargetMetaFeature, targetMetaFeature));

    }

    public String getCreateCommandClassNameGen () {
        return createCommandClassName;
    }

    public String getCreateCommandClassName () {
        return GenCommonBaseImpl.getValidClassName (getCreateCommandClassNameGen (), getLink (), CREATE_COMMAND_SUFFIX);
    }

    public void setCreateCommandClassName (String newCreateCommandClassName) {
        String oldCreateCommandClassName = createCommandClassName;
        createCommandClassName = newCreateCommandClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.TYPE_LINK_MODEL_FACET__CREATE_COMMAND_CLASS_NAME, oldCreateCommandClassName, createCommandClassName));

    }

    public String getCreateCommandQualifiedClassName () {
        return getDiagramImpl ().getEditCommandsPackageName () + '.' + getCreateCommandClassName ();
    }

    public GenClass getSourceType () {
        if (getSourceMetaFeature () != null) {
            return getSourceMetaFeature ().getTypeGenClass ();
        } else if (getContainmentMetaFeature () != null) {
            return getContainmentMetaFeature ().getGenClass ();
        }

        return null;
    }

    public GenClass getTargetType () {
        if (getTargetMetaFeature () != null) {
            return getTargetMetaFeature ().getTypeGenClass ();
        }
        return null;
    }

    public EList < GenClass > getAssistantSourceTypes () {
        BasicEList < GenClass > sources = new BasicEList < GenClass > ();
        GenClass sourceType = getSourceType ();
        if (sourceType != null) {
            sources.add (sourceType);
        }
        return sources;
    }

    public EList < GenClass > getAssistantTargetTypes () {
        BasicEList < GenClass > targets = new BasicEList < GenClass > ();
        GenClass targetType = getTargetType ();
        if (targetType != null) {
            targets.add (targetType);
        }
        return targets;
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.TYPE_LINK_MODEL_FACET__SOURCE_META_FEATURE :
                if (resolve) return getSourceMetaFeature ();

                return basicGetSourceMetaFeature ();
            case GMFGenPackage.TYPE_LINK_MODEL_FACET__TARGET_META_FEATURE :
                if (resolve) return getTargetMetaFeature ();

                return basicGetTargetMetaFeature ();
            case GMFGenPackage.TYPE_LINK_MODEL_FACET__CREATE_COMMAND_CLASS_NAME :
                return getCreateCommandClassName ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.TYPE_LINK_MODEL_FACET__SOURCE_META_FEATURE :
                setSourceMetaFeature ((GenFeature) newValue);
                return;
            case GMFGenPackage.TYPE_LINK_MODEL_FACET__TARGET_META_FEATURE :
                setTargetMetaFeature ((GenFeature) newValue);
                return;
            case GMFGenPackage.TYPE_LINK_MODEL_FACET__CREATE_COMMAND_CLASS_NAME :
                setCreateCommandClassName ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TYPE_LINK_MODEL_FACET__SOURCE_META_FEATURE :
                setSourceMetaFeature ((GenFeature) null);
                return;
            case GMFGenPackage.TYPE_LINK_MODEL_FACET__TARGET_META_FEATURE :
                setTargetMetaFeature ((GenFeature) null);
                return;
            case GMFGenPackage.TYPE_LINK_MODEL_FACET__CREATE_COMMAND_CLASS_NAME :
                setCreateCommandClassName (CREATE_COMMAND_CLASS_NAME_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TYPE_LINK_MODEL_FACET__SOURCE_META_FEATURE :
                return sourceMetaFeature != null;
            case GMFGenPackage.TYPE_LINK_MODEL_FACET__TARGET_META_FEATURE :
                return targetMetaFeature != null;
            case GMFGenPackage.TYPE_LINK_MODEL_FACET__CREATE_COMMAND_CLASS_NAME :
                return CREATE_COMMAND_CLASS_NAME_EDEFAULT == null ? createCommandClassName != null : ! CREATE_COMMAND_CLASS_NAME_EDEFAULT.equals (createCommandClassName);
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (createCommandClassName: ");
        result.append (createCommandClassName);
        result.append (')');
        return result.toString ();
    }

    private GenLink getLink () {
        return (GenLink) eContainer ();
    }

    private GenDiagramImpl getDiagramImpl () {
        return ((GenDiagramImpl) getLink ().getDiagram ());
    }

}

