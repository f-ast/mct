package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenAuditRoot;

import org.eclipse.gmf.codegen.gmfgen.GenAuditContainer;

import org.eclipse.gmf.codegen.gmfgen.GenAuditRule;

import org.eclipse.gmf.codegen.gmfgen.GenAuditable;

import org.eclipse.gmf.codegen.gmfgen.GenConstraint;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.GenDomainAttributeTarget;

import org.eclipse.gmf.codegen.gmfgen.GenSeverity;

public class GenAuditRuleImpl extends GenRuleBaseImpl implements GenAuditRule {
    protected static final String CONTEXT_SELECTOR_LOCAL_CLASS_NAME_EDEFAULT = null;
    protected String contextSelectorLocalClassName = CONTEXT_SELECTOR_LOCAL_CLASS_NAME_EDEFAULT;
    protected static final String ID_EDEFAULT = null;
    protected String id = ID_EDEFAULT;
    protected GenConstraint rule = null;
    protected GenAuditable target = null;
    protected static final String MESSAGE_EDEFAULT = null;
    protected String message = MESSAGE_EDEFAULT;
    protected static final GenSeverity SEVERITY_EDEFAULT = GenSeverity.ERROR_LITERAL;
    protected GenSeverity severity = SEVERITY_EDEFAULT;
    protected static final boolean USE_IN_LIVE_MODE_EDEFAULT = false;
    protected boolean useInLiveMode = USE_IN_LIVE_MODE_EDEFAULT;
    protected static final boolean REQUIRES_CONSTRAINT_ADAPTER_EDEFAULT = false;
    protected GenAuditContainer category = null;

    protected GenAuditRuleImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenAuditRule ();
    }

    public GenAuditRoot getRoot () {
        if (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_RULE__ROOT) return null;

        return (GenAuditRoot) eContainer ();
    }

    public GenAuditable getTarget () {
        return target;
    }

    public NotificationChain basicSetTarget (GenAuditable newTarget, NotificationChain msgs) {
        GenAuditable oldTarget = target;
        target = newTarget;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__TARGET, oldTarget, newTarget);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setTarget (GenAuditable newTarget) {
        if (newTarget != target) {
            NotificationChain msgs = null;
            if (target != null) msgs = ((InternalEObject) target).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_AUDIT_RULE__TARGET, null, msgs);

            if (newTarget != null) msgs = ((InternalEObject) newTarget).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_AUDIT_RULE__TARGET, null, msgs);

            msgs = basicSetTarget (newTarget, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__TARGET, newTarget, newTarget));

    }

    public String getId () {
        return id;
    }

    public void setId (String newId) {
        String oldId = id;
        id = newId;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__ID, oldId, id));

    }

    public String getMessage () {
        return message;
    }

    public void setMessage (String newMessage) {
        String oldMessage = message;
        message = newMessage;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__MESSAGE, oldMessage, message));

    }

    public GenConstraint getRule () {
        return rule;
    }

    public NotificationChain basicSetRule (GenConstraint newRule, NotificationChain msgs) {
        GenConstraint oldRule = rule;
        rule = newRule;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__RULE, oldRule, newRule);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setRule (GenConstraint newRule) {
        if (newRule != rule) {
            NotificationChain msgs = null;
            if (rule != null) msgs = ((InternalEObject) rule).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_AUDIT_RULE__RULE, null, msgs);

            if (newRule != null) msgs = ((InternalEObject) newRule).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_AUDIT_RULE__RULE, null, msgs);

            msgs = basicSetRule (newRule, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__RULE, newRule, newRule));

    }

    public GenSeverity getSeverity () {
        return severity;
    }

    public void setSeverity (GenSeverity newSeverity) {
        GenSeverity oldSeverity = severity;
        severity = newSeverity == null ? SEVERITY_EDEFAULT : newSeverity;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__SEVERITY, oldSeverity, severity));

    }

    public boolean isUseInLiveMode () {
        return useInLiveMode;
    }

    public void setUseInLiveMode (boolean newUseInLiveMode) {
        boolean oldUseInLiveMode = useInLiveMode;
        useInLiveMode = newUseInLiveMode;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__USE_IN_LIVE_MODE, oldUseInLiveMode, useInLiveMode));

    }

    public String getContextSelectorClassName () {
        if (getTarget () == null || getDiagram () == null) {
            return null;
        }
        return getDiagram ().getValidationProviderClassName () + "$" + getContextSelectorLocalClassName ();
    }

    public String getContextSelectorQualifiedClassName () {
        if (getTarget () == null || getDiagram () == null) {
            return null;
        }
        return getDiagram ().getValidationProviderQualifiedClassName () + "$" + getContextSelectorLocalClassName ();
    }

    public String getContextSelectorLocalClassNameGen () {
        return contextSelectorLocalClassName;
    }

    public String getContextSelectorLocalClassName () {
        if (getContextSelectorLocalClassNameGen () != null) {
            return getContextSelectorLocalClassNameGen ();
        }
        if (getTarget () == null) {
            return "NoCtx";
        }
        return getTarget ().getClientContextID ();
    }

    public void setContextSelectorLocalClassName (String newContextSelectorLocalClassName) {
        String oldContextSelectorLocalClassName = contextSelectorLocalClassName;
        contextSelectorLocalClassName = newContextSelectorLocalClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__CONTEXT_SELECTOR_LOCAL_CLASS_NAME, oldContextSelectorLocalClassName, contextSelectorLocalClassName));

    }

    public String getConstraintAdapterClassName () {
        if (getDiagram () == null || getConstraintAdapterLocalClassName () == null) {
            return null;
        }
        return getDiagram ().getValidationProviderClassName () + "$" + getConstraintAdapterLocalClassName ();
    }

    public String getConstraintAdapterLocalClassName () {
        return "Adapter" + (getRoot ().getRules ().indexOf (this) + 1);
    }

    public String getConstraintAdapterQualifiedClassName () {
        if (getDiagram () == null) {
            return null;
        }
        return getDiagram ().getValidationProviderQualifiedClassName () + "$" + getConstraintAdapterLocalClassName ();
    }

    private GenDiagram getDiagram () {
        if (getRoot () != null) {
            return getRoot ().getEditorGen ().getDiagram ();
        }
        return null;
    }

    public boolean isRequiresConstraintAdapter () {
        if (getRule () != null) {
            if (! getRule ().isOCLExpression () || getTarget () instanceof GenDomainAttributeTarget) {
                return true;
            } else if (getTarget () != null && getTarget ().getContext () != null) {
                return getTarget ().getContext () != getTarget ().getTargetClass ();
            }

        }
        return false;
    }

    public GenAuditContainer getCategory () {
        if (category != null && category.eIsProxy ()) {
            InternalEObject oldCategory = (InternalEObject) category;
            category = (GenAuditContainer) eResolveProxy (oldCategory);
            if (category != oldCategory) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.GEN_AUDIT_RULE__CATEGORY, oldCategory, category));

            }
        }
        return category;
    }

    public GenAuditContainer basicGetCategory () {
        return category;
    }

    public NotificationChain basicSetCategory (GenAuditContainer newCategory, NotificationChain msgs) {
        GenAuditContainer oldCategory = category;
        category = newCategory;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__CATEGORY, oldCategory, newCategory);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setCategory (GenAuditContainer newCategory) {
        if (newCategory != category) {
            NotificationChain msgs = null;
            if (category != null) msgs = ((InternalEObject) category).eInverseRemove (this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GenAuditContainer.class, msgs);

            if (newCategory != null) msgs = ((InternalEObject) newCategory).eInverseAdd (this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GenAuditContainer.class, msgs);

            msgs = basicSetCategory (newCategory, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__CATEGORY, newCategory, newCategory));

    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_AUDIT_RULE__ROOT :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_AUDIT_RULE__ROOT, msgs);
            case GMFGenPackage.GEN_AUDIT_RULE__CATEGORY :
                if (category != null) msgs = ((InternalEObject) category).eInverseRemove (this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GenAuditContainer.class, msgs);

                return basicSetCategory ((GenAuditContainer) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_AUDIT_RULE__ROOT :
                return eBasicSetContainer (null, GMFGenPackage.GEN_AUDIT_RULE__ROOT, msgs);
            case GMFGenPackage.GEN_AUDIT_RULE__RULE :
                return basicSetRule (null, msgs);
            case GMFGenPackage.GEN_AUDIT_RULE__TARGET :
                return basicSetTarget (null, msgs);
            case GMFGenPackage.GEN_AUDIT_RULE__CATEGORY :
                return basicSetCategory (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_AUDIT_RULE__ROOT :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_AUDIT_ROOT__RULES, GenAuditRoot.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_AUDIT_RULE__ROOT :
                return getRoot ();
            case GMFGenPackage.GEN_AUDIT_RULE__CONTEXT_SELECTOR_LOCAL_CLASS_NAME :
                return getContextSelectorLocalClassName ();
            case GMFGenPackage.GEN_AUDIT_RULE__ID :
                return getId ();
            case GMFGenPackage.GEN_AUDIT_RULE__RULE :
                return getRule ();
            case GMFGenPackage.GEN_AUDIT_RULE__TARGET :
                return getTarget ();
            case GMFGenPackage.GEN_AUDIT_RULE__MESSAGE :
                return getMessage ();
            case GMFGenPackage.GEN_AUDIT_RULE__SEVERITY :
                return getSeverity ();
            case GMFGenPackage.GEN_AUDIT_RULE__USE_IN_LIVE_MODE :
                return isUseInLiveMode () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_AUDIT_RULE__REQUIRES_CONSTRAINT_ADAPTER :
                return isRequiresConstraintAdapter () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_AUDIT_RULE__CATEGORY :
                if (resolve) return getCategory ();

                return basicGetCategory ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_AUDIT_RULE__CONTEXT_SELECTOR_LOCAL_CLASS_NAME :
                setContextSelectorLocalClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__ID :
                setId ((String) newValue);
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__RULE :
                setRule ((GenConstraint) newValue);
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__TARGET :
                setTarget ((GenAuditable) newValue);
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__MESSAGE :
                setMessage ((String) newValue);
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__SEVERITY :
                setSeverity ((GenSeverity) newValue);
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__USE_IN_LIVE_MODE :
                setUseInLiveMode (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__CATEGORY :
                setCategory ((GenAuditContainer) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_AUDIT_RULE__CONTEXT_SELECTOR_LOCAL_CLASS_NAME :
                setContextSelectorLocalClassName (CONTEXT_SELECTOR_LOCAL_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__ID :
                setId (ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__RULE :
                setRule ((GenConstraint) null);
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__TARGET :
                setTarget ((GenAuditable) null);
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__MESSAGE :
                setMessage (MESSAGE_EDEFAULT);
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__SEVERITY :
                setSeverity (SEVERITY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__USE_IN_LIVE_MODE :
                setUseInLiveMode (USE_IN_LIVE_MODE_EDEFAULT);
                return;
            case GMFGenPackage.GEN_AUDIT_RULE__CATEGORY :
                setCategory ((GenAuditContainer) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_AUDIT_RULE__ROOT :
                return getRoot () != null;
            case GMFGenPackage.GEN_AUDIT_RULE__CONTEXT_SELECTOR_LOCAL_CLASS_NAME :
                return CONTEXT_SELECTOR_LOCAL_CLASS_NAME_EDEFAULT == null ? contextSelectorLocalClassName != null : ! CONTEXT_SELECTOR_LOCAL_CLASS_NAME_EDEFAULT.equals (contextSelectorLocalClassName);
            case GMFGenPackage.GEN_AUDIT_RULE__ID :
                return ID_EDEFAULT == null ? id != null : ! ID_EDEFAULT.equals (id);
            case GMFGenPackage.GEN_AUDIT_RULE__RULE :
                return rule != null;
            case GMFGenPackage.GEN_AUDIT_RULE__TARGET :
                return target != null;
            case GMFGenPackage.GEN_AUDIT_RULE__MESSAGE :
                return MESSAGE_EDEFAULT == null ? message != null : ! MESSAGE_EDEFAULT.equals (message);
            case GMFGenPackage.GEN_AUDIT_RULE__SEVERITY :
                return severity != SEVERITY_EDEFAULT;
            case GMFGenPackage.GEN_AUDIT_RULE__USE_IN_LIVE_MODE :
                return useInLiveMode != USE_IN_LIVE_MODE_EDEFAULT;
            case GMFGenPackage.GEN_AUDIT_RULE__REQUIRES_CONSTRAINT_ADAPTER :
                return isRequiresConstraintAdapter () != REQUIRES_CONSTRAINT_ADAPTER_EDEFAULT;
            case GMFGenPackage.GEN_AUDIT_RULE__CATEGORY :
                return category != null;
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (contextSelectorLocalClassName: ");
        result.append (contextSelectorLocalClassName);
        result.append (", id: ");
        result.append (id);
        result.append (", message: ");
        result.append (message);
        result.append (", severity: ");
        result.append (severity);
        result.append (", useInLiveMode: ");
        result.append (useInLiveMode);
        result.append (')');
        return result.toString ();
    }

}

