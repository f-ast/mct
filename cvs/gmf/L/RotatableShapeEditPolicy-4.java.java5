package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.List;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.PrecisionRectangle;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.Handle;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.requests.ChangeBoundsRequest;

import org.eclipse.gmf.runtime.diagram.ui.internal.handles.RotateHandle;

import org.eclipse.gmf.runtime.diagram.ui.internal.tools.RotateTracker;

import org.eclipse.gmf.runtime.gef.ui.internal.requests.RotateShapeRequest;

public class RotatableShapeEditPolicy extends ResizableShapeEditPolicy {
    private final static int DEFAULT_TOLERANCE = 6;

    protected List createSelectionHandles () {
        setResizeDirections (PositionConstants.EAST | PositionConstants.SOUTH | PositionConstants.WEST | PositionConstants.NORTH);
        List selectionhandles = super.createSelectionHandles ();
        GraphicalEditPart part = (GraphicalEditPart) getHost ();
        selectionhandles.add (createRotationHandle (part, PositionConstants.SOUTH_EAST));
        selectionhandles.add (createRotationHandle (part, PositionConstants.SOUTH_WEST));
        selectionhandles.add (createRotationHandle (part, PositionConstants.NORTH_WEST));
        selectionhandles.add (createRotationHandle (part, PositionConstants.NORTH_EAST));
        return selectionhandles;
    }

    protected Handle createRotationHandle (GraphicalEditPart owner, int direction) {
        RotateHandle handle = new RotateHandle (owner, direction);
        handle.setDragTracker (new RotateTracker (owner, direction));
        return handle;
    }

    protected void showChangeBoundsFeedback (ChangeBoundsRequest request) {
        if (isRotationRequired (request)) {
            IFigure feedback = getDragSourceFeedbackFigure ();
            if (doRotation (request)) {
                PrecisionRectangle rect = getAbsoluteRotatedBounds ();
                feedback.translateToRelative (rect);
                feedback.setBounds (rect);
            } else {
                PrecisionRectangle initFigure = getAbsoluteInitialBounds ();
                feedback.translateToRelative (initFigure);
                feedback.setBounds (initFigure);
            }
        } else {
            super.showChangeBoundsFeedback (request);
        }
    }

    private PrecisionRectangle rotateRectangle (Rectangle r) {
        PrecisionRectangle rect = new PrecisionRectangle (r);
        if (isVertical (r)) {
            rect.setX (rect.preciseX - rect.preciseHeight / 2.0 + rect.preciseWidth / 2.0);
            rect.setY (rect.preciseY + rect.preciseHeight / 2.0 - rect.preciseWidth / 2.0);
        } else {
            rect.setX (rect.preciseX + rect.preciseWidth / 2.0 - rect.preciseHeight / 2.0);
            rect.setY (rect.preciseY - rect.preciseWidth / 2.0 + rect.preciseHeight / 2.0);
        }
        transposePrecisionRectangleSize (rect);
        return rect;
    }

    private boolean isVertical (Rectangle r) {
        return r.height > r.width;
    }

    private void transposePrecisionRectangleSize (PrecisionRectangle r) {
        double height = r.preciseHeight;
        r.setHeight (r.preciseWidth);
        r.setWidth (height);
    }

    private boolean isRotationRequired (ChangeBoundsRequest request) {
        return request instanceof RotateShapeRequest ? ((RotateShapeRequest) request).shouldRotate () : false;
    }

    protected Command getResizeCommand (ChangeBoundsRequest request) {
        if (isRotationRequired (request)) {
            ChangeBoundsRequest req = new ChangeBoundsRequest (REQ_RESIZE_CHILDREN);
            req.setEditParts (getHost ());
            if (doRotation (request)) {
                PrecisionRectangle rect = getAbsoluteRotatedBounds ();
                PrecisionRectangle initFigure = getAbsoluteInitialBounds ();
                req.setMoveDelta (new Point (rect.preciseX - initFigure.preciseX, rect.preciseY - initFigure.preciseY));
                req.setSizeDelta (new Dimension (rect.width - initFigure.width, rect.height - initFigure.height));
            } else {
                req.setSizeDelta (new Dimension ());
                req.setMoveDelta (new Point ());
            }
            req.setLocation (request.getLocation ());
            req.setExtendedData (request.getExtendedData ());
            req.setResizeDirection (request.getResizeDirection ());
            return getHost ().getParent ().getCommand (req);
        } else {
            return super.getResizeCommand (request);
        }
    }

    private boolean doRotation (ChangeBoundsRequest request) {
        return Math.abs (request.getSizeDelta ().width) > DEFAULT_TOLERANCE || Math.abs (request.getSizeDelta ().height) > DEFAULT_TOLERANCE;
    }

    private PrecisionRectangle getAbsoluteInitialBounds () {
        PrecisionRectangle initFigure = new PrecisionRectangle (getInitialFeedbackBounds ().getCopy ());
        getHostFigure ().translateToAbsolute (initFigure);
        return initFigure;
    }

    private PrecisionRectangle getAbsoluteRotatedBounds () {
        PrecisionRectangle rect = new PrecisionRectangle (rotateRectangle (getInitialFeedbackBounds ().getCopy ()));
        getHostFigure ().translateToAbsolute (rect);
        return rect;
    }

}

