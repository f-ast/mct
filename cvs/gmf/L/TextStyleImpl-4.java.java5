package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.TextAlignment;

import org.eclipse.gmf.runtime.notation.TextStyle;

public class TextStyleImpl extends NotationEObjectImpl implements TextStyle {
    protected static final TextAlignment TEXT_ALIGNMENT_EDEFAULT = TextAlignment.LEFT_LITERAL;
    protected static final int TEXT_ALIGNMENT_EFLAG_OFFSET = 8;
    protected static final int TEXT_ALIGNMENT_EFLAG_DEFAULT = TextAlignment.VALUES.indexOf (TEXT_ALIGNMENT_EDEFAULT) << TEXT_ALIGNMENT_EFLAG_OFFSET;
    private static final TextAlignment [] TEXT_ALIGNMENT_EFLAG_VALUES = (TextAlignment []) TextAlignment.VALUES.toArray (new TextAlignment [TextAlignment.VALUES.size ()]);
    protected static final int TEXT_ALIGNMENT_EFLAG = 0x3 << TEXT_ALIGNMENT_EFLAG_OFFSET;

    protected TextStyleImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.TEXT_STYLE;
    }

    public TextAlignment getTextAlignment () {
        return TEXT_ALIGNMENT_EFLAG_VALUES [(eFlags & TEXT_ALIGNMENT_EFLAG)>>> TEXT_ALIGNMENT_EFLAG_OFFSET];
    }

    public void setTextAlignment (TextAlignment newTextAlignment) {
        TextAlignment oldTextAlignment = TEXT_ALIGNMENT_EFLAG_VALUES [(eFlags & TEXT_ALIGNMENT_EFLAG)>>> TEXT_ALIGNMENT_EFLAG_OFFSET];
        if (newTextAlignment == null) newTextAlignment = TEXT_ALIGNMENT_EDEFAULT;

        eFlags = eFlags & ~ TEXT_ALIGNMENT_EFLAG | TextAlignment.VALUES.indexOf (newTextAlignment) << TEXT_ALIGNMENT_EFLAG_OFFSET;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.TEXT_STYLE__TEXT_ALIGNMENT, oldTextAlignment, newTextAlignment));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.TEXT_STYLE__TEXT_ALIGNMENT :
                return getTextAlignment ();
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.TEXT_STYLE__TEXT_ALIGNMENT :
                setTextAlignment ((TextAlignment) newValue);
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.TEXT_STYLE__TEXT_ALIGNMENT :
                setTextAlignment (TEXT_ALIGNMENT_EDEFAULT);
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.TEXT_STYLE__TEXT_ALIGNMENT :
                return (eFlags & TEXT_ALIGNMENT_EFLAG) != TEXT_ALIGNMENT_EFLAG_DEFAULT;
        }
        return eDynamicIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (textAlignment: ");
        result.append (TEXT_ALIGNMENT_EFLAG_VALUES [(eFlags & TEXT_ALIGNMENT_EFLAG)>>> TEXT_ALIGNMENT_EFLAG_OFFSET]);
        result.append (')');
        return result.toString ();
    }

}

