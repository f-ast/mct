package org.eclipse.gmf.runtime.diagram.ui.internal.services.editpart;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.core.runtime.Assert;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.gmf.runtime.common.core.service.AbstractProviderConfiguration;

import org.eclipse.gmf.runtime.notation.View;

public class EditPartProviderConfiguration extends AbstractProviderConfiguration {
    private static final String CONTEXT = "context";
    private static final String VIEWS = "views";
    private static final String PROVIDES_ROOT_EDITPART = "providesRootEditPart";
    private List requests = new ArrayList ();

    public static EditPartProviderConfiguration parse (IConfigurationElement configElement) {
        Assert.isNotNull (configElement, "null provider configuration element");
        return new EditPartProviderConfiguration (configElement);
    }

    private EditPartProviderConfiguration (IConfigurationElement configElement) {
        IConfigurationElement configChildren [];
        Map objects = new HashMap ();
        configChildren = configElement.getChildren (OBJECT);
        for (int i = 0;
        i < configChildren.length; i ++) {
            String id = configChildren [i].getAttribute (ID);
            if (id != null) objects.put (id, new ObjectDescriptor (configChildren [i]));

        }
        configChildren = configElement.getChildren (CONTEXT);
        for (int i = 0;
        i < configChildren.length; i ++) {
            List views = getObjectList (configChildren [i].getAttribute (VIEWS), objects, configElement);
            if (views != null) requests.add (new ContextDescriptor (views));

            String s = configChildren [i].getAttribute (PROVIDES_ROOT_EDITPART);
            if (s != null) {
                requests.add (new ContextDescriptor (Boolean.valueOf (s).booleanValue ()));
            }
        }
    }

    public boolean supports (View view) {
        if (requests.isEmpty ()) return true;

        Iterator iter = requests.iterator ();
        while (iter.hasNext ()) {
            ContextDescriptor request = (ContextDescriptor) iter.next ();
            if (request.matches (view)) return true;

        }
        return false;
    }

    public boolean supportsRootEditPart () {
        if (requests.isEmpty ()) return true;

        Iterator iter = requests.iterator ();
        while (iter.hasNext ()) {
            ContextDescriptor request = (ContextDescriptor) iter.next ();
            if (request.providesRootEditPart ()) return true;

        }
        return false;
    }

    private static class ContextDescriptor {
        private List views;
        private boolean providesRootEditPart;

        public ContextDescriptor (List views) {
            this.views = views;
        }

        public ContextDescriptor (boolean providesRootEditPart) {
            this.providesRootEditPart = providesRootEditPart;
        }

        public boolean matches (View view) {
            return views != null && objectMatches (view, views);
        }

        public boolean providesRootEditPart () {
            return providesRootEditPart;
        }

    }

}

