package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.gmfgraph.Node;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.NodeMapping;

public class NodeMappingImpl extends AbstractNodeMappingImpl implements NodeMapping {
    protected Node diagramNode = null;

    protected NodeMappingImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getNodeMapping ();
    }

    public Node getDiagramNode () {
        if (diagramNode != null && diagramNode.eIsProxy ()) {
            InternalEObject oldDiagramNode = (InternalEObject) diagramNode;
            diagramNode = (Node) eResolveProxy (oldDiagramNode);
            if (diagramNode != oldDiagramNode) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE, oldDiagramNode, diagramNode));

            }
        }
        return diagramNode;
    }

    public Node basicGetDiagramNode () {
        return diagramNode;
    }

    public void setDiagramNode (Node newDiagramNode) {
        Node oldDiagramNode = diagramNode;
        diagramNode = newDiagramNode;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE, oldDiagramNode, diagramNode));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE :
                if (resolve) return getDiagramNode ();

                return basicGetDiagramNode ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE :
                setDiagramNode ((Node) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE :
                setDiagramNode ((Node) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE :
                return diagramNode != null;
        }
        return super.eIsSet (featureID);
    }

}

