package org.eclipse.gmf.runtime.notation.provider;

import java.util.Collection;

import java.util.List;

import java.util.Map;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.runtime.notation.NotationEditPlugin;

import org.eclipse.gmf.runtime.notation.NotationFactory;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class StringToPropertyValueMapEntryItemProvider extends NotationObjectItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public StringToPropertyValueMapEntryItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addKeyPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addKeyPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_StringToPropertyValueMapEntry_key_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_StringToPropertyValueMapEntry_key_feature", "_UI_StringToPropertyValueMapEntry_type"), NotationPackage.Literals.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__KEY, true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (NotationPackage.Literals.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__VALUE);
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/StringToPropertyValueMapEntry"));
    }

    public String getText (Object object) {
        Map.Entry stringToPropertyValueMapEntry = (Map.Entry) object;
        return "" + stringToPropertyValueMapEntry.getKey () + " -> " + stringToPropertyValueMapEntry.getValue ();
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (Map.Entry.class)) {
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__KEY :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
            case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__VALUE :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.STRING_TO_PROPERTY_VALUE_MAP_ENTRY__VALUE, NotationFactory.eINSTANCE.createPropertyValue ()));
    }

}

