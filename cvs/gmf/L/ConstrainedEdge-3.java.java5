package org.eclipse.gmf.runtime.draw2d.ui.graph;

import org.eclipse.draw2d.geometry.PointList;

import org.eclipse.draw2d.graph.Edge;

import org.eclipse.draw2d.graph.Node;

public class ConstrainedEdge extends Edge {
    public static String DEFAULT_ROUTING_STYLE = "Default";
    public static String ORTHOGONAL_ROUTING_STYLE = "Orthogonal";
    private String style = DEFAULT_ROUTING_STYLE;
    BorderNode sourceConstraint = null;
    BorderNode targetConstraint = null;
    PointList startingRoutedPoints = new PointList ();
    PointList endingRoutedPoints = new PointList ();

    public ConstrainedEdge (Node source, Node target) {
        this (null, source, target);
    }

    public ConstrainedEdge (Node source, Node target, int delta, int weight) {
        this (source, target);
        this.delta = delta;
        this.weight = weight;
    }

    public ConstrainedEdge (Object data, Node source, Node target) {
        super (data, source, target);
        if (source instanceof BorderNode) {
            sourceConstraint = (BorderNode) source;
            this.source = sourceConstraint.borderNodeParent;
            this.source.outgoing.add (this);
            sourceConstraint.addOutgoingEdge (this);
        }
        if (target instanceof BorderNode) {
            targetConstraint = (BorderNode) target;
            this.target = targetConstraint.borderNodeParent;
            this.target.incoming.add (this);
            targetConstraint.addIncomingEdge (this);
        }
        if (this.source.equals (this.target)) {
            throw new RuntimeException ("Edges between border nodes on the same parent or border node and its parent are disallowed.");
        }
    }

    public String getStyle () {
        return style;
    }

    public void setStyle (String style) {
        this.style = style;
    }

    public void invert () {
        super.invert ();
        if (sourceConstraint != null) {
            sourceConstraint.outgoingJointEdges.edges.remove (this);
        }
        if (targetConstraint != null) {
            targetConstraint.incomingJointEdges.edges.remove (this);
        }
        BorderNode temp = sourceConstraint;
        sourceConstraint = targetConstraint;
        targetConstraint = temp;
        if (sourceConstraint != null) {
            sourceConstraint.outgoingJointEdges.edges.add (this);
        }
        if (targetConstraint != null) {
            targetConstraint.incomingJointEdges.edges.add (this);
        }
    }

}

