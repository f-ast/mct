package org.eclipse.gmf.runtime.common.ui.services.properties.extended;

import java.text.MessageFormat;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.List;

import java.util.Map;

import org.eclipse.ui.views.properties.IPropertyDescriptor;

import org.eclipse.gmf.runtime.common.ui.services.properties.ICompositePropertySource;

import org.eclipse.gmf.runtime.common.ui.services.properties.internal.l10n.CommonUIServicesPropertiesMessages;

public class PropertySource implements IExtendedPropertySource {
    private Object element;
    protected Map properties;
    protected Map propertyDescriptors;
    private boolean flag = false;
    protected ICompositePropertySource enclosed = null;

    public PropertySource () {
        propertyDescriptors = new HashMap ();
        properties = new HashMap ();
    }

    public void addPropertySource (ICompositePropertySource source) {
        assert (this != source);
        if (this.enclosed == null) enclosed = source;
        else enclosed.addPropertySource (source);

    }

    public PropertySource (Object element) {
        this ();
        this.element = element;
    }

    public Object getEditableValue () {
        if (isDirty ()) {
            setDirty (false);
            return CommonUIServicesPropertiesMessages.ExtendedPropertyDescriptor_blank;
        }
        if (getElement () == null && enclosed != null) return enclosed.getEditableValue ();

        return getElement ();
    }

    public void setEditableValue (Object object) {
        assert (false) : "This method is obsolete and should not be used";
    }

    public IPropertyDescriptor [] getPropertyDescriptors () {
        List list = new ArrayList (propertyDescriptors.values ());
        IPropertyDescriptor [] descriptors = new IPropertyDescriptor [list.size ()];
        System.arraycopy (list.toArray (), 0, descriptors, 0, list.size ());
        if (enclosed != null) {
            IPropertyDescriptor [] enclosedDecriptors = enclosed.getPropertyDescriptors ();
            IPropertyDescriptor [] all = new IPropertyDescriptor [descriptors.length + enclosedDecriptors.length];
            System.arraycopy (enclosedDecriptors, 0, all, 0, enclosedDecriptors.length);
            System.arraycopy (descriptors, 0, all, enclosedDecriptors.length, descriptors.length);
            return all;
        }
        return descriptors;
    }

    public void addPropertyDescriptor (IExtendedPropertyDescriptor propertyDescriptor) {
        assert null != propertyDescriptor;
        propertyDescriptors.put (propertyDescriptor.getId (), propertyDescriptor);
        propertyDescriptor.setPropertySource (this);
    }

    public Object getPropertyValue (Object id) {
        assert null != id;
        if (properties.containsKey (id)) {
            IExtendedPropertyDescriptor propertyDescriptor = (IExtendedPropertyDescriptor) propertyDescriptors.get (id);
            Object [] args = new Object [1];
            args [0] = id;
            String message = MessageFormat.format (CommonUIServicesPropertiesMessages.PropertySource__ERROR__descriptorError, args);
            assert null != propertyDescriptor : message;
            if (propertyDescriptor.isDirty ()) {
                propertyDescriptor.setDirtyFlag (false);
                if (properties.get (id) instanceof IExtendedPropertySource) {
                    ((IExtendedPropertySource) properties.get (id)).setDirty (true);
                    return properties.get (id);
                }
                return propertyDescriptor.getBlank ();
            } else return properties.get (id);

        }
        if (enclosed != null) return enclosed.getPropertyValue (id);

        return null;
    }

    public boolean isPropertySet (Object id) {
        assert null != id;
        if (propertyDescriptors.containsKey (id)) return true;

        if (enclosed != null) return enclosed.isPropertySet (id);

        return false;
    }

    public void resetPropertyValue (Object id) {
    }

    public void setPropertyValue (Object id, Object value) {
        if (propertyDescriptors.containsKey (id)) {
            if (isValueOkay (id, value)) {
                Object oldValue = getPropertyValue (id);
                if ((oldValue != null && oldValue.equals (value)) || (oldValue == null && value == null)) {
                    return;
                }
                boolean failed = true;
                addProperty (id, value);
                try {
                    getPropertyDescriptor (id).setPropertyValue (value);
                    failed = false;
                } finally {
                    if (failed) {
                        addProperty (id, oldValue);
                    }
                }
            }
        } else if (enclosed != null) enclosed.setPropertyValue (id, value);

    }

    public Object getElement () {
        return element;
    }

    public void setElement (Object element) {
        assert null != element;
        this.element = element;
    }

    public void addProperty (Object id, Object property) {
        properties.put (id, property);
    }

    public void removeProperty (Object id) {
        assert null != id;
        propertyDescriptors.remove (id);
        properties.remove (id);
    }

    public IExtendedPropertyDescriptor getPropertyDescriptor (Object id) {
        assert null != id;
        return (IExtendedPropertyDescriptor) propertyDescriptors.get (id);
    }

    public boolean isDirty () {
        return flag;
    }

    public void setDirty (boolean flag) {
        this.flag = flag;
    }

    public Map getProperties () {
        return properties;
    }

    public void setProperties (Map properties) {
        this.properties = properties;
    }

    public void setPropertyDescriptors (Map propertyDescriptors) {
        this.propertyDescriptors = propertyDescriptors;
    }

    public void refresh () {
    }

    public boolean isValueOkay (Object id, Object value) {
        if (value == null) return true;

        if (value instanceof String) {
            if (((String) value).equals (CommonUIServicesPropertiesMessages.ExtendedPropertyDescriptor_blank)) return false;

        }
        return true;
    }

}

