package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

import org.eclipse.gmf.codegen.gmfgen.GenPropertySheet;

import org.eclipse.gmf.codegen.gmfgen.GenPropertyTab;

public class GenPropertySheetImpl extends EObjectImpl implements GenPropertySheet {
    protected EList tabs = null;
    protected static final String PACKAGE_NAME_EDEFAULT = null;
    protected String packageName = PACKAGE_NAME_EDEFAULT;
    protected static final boolean READ_ONLY_EDEFAULT = false;
    protected boolean readOnly = READ_ONLY_EDEFAULT;
    protected static final boolean NEEDS_CAPTION_EDEFAULT = true;
    protected boolean needsCaption = NEEDS_CAPTION_EDEFAULT;
    protected static final String LABEL_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String labelProviderClassName = LABEL_PROVIDER_CLASS_NAME_EDEFAULT;

    protected GenPropertySheetImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenPropertySheet ();
    }

    public GenEditorGenerator getEditorGen () {
        if (eContainerFeatureID != GMFGenPackage.GEN_PROPERTY_SHEET__EDITOR_GEN) return null;

        return (GenEditorGenerator) eContainer ();
    }

    public EList getTabs () {
        if (tabs == null) {
            tabs = new EObjectContainmentWithInverseEList (GenPropertyTab.class, this, GMFGenPackage.GEN_PROPERTY_SHEET__TABS, GMFGenPackage.GEN_PROPERTY_TAB__SHEET);
        }
        return tabs;
    }

    public String getPackageNameGen () {
        return packageName;
    }

    public String getPackageName () {
        String name = getPackageNameGen ();
        if (name == null || name.trim ().length () == 0) {
            return getEditorGen ().getPackageNamePrefix () + ".sheet";
        }
        return name;
    }

    public void setPackageName (String newPackageName) {
        String oldPackageName = packageName;
        packageName = newPackageName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PROPERTY_SHEET__PACKAGE_NAME, oldPackageName, packageName));

    }

    public boolean isReadOnly () {
        return readOnly;
    }

    public void setReadOnly (boolean newReadOnly) {
        boolean oldReadOnly = readOnly;
        readOnly = newReadOnly;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PROPERTY_SHEET__READ_ONLY, oldReadOnly, readOnly));

    }

    public boolean isNeedsCaption () {
        return needsCaption;
    }

    public void setNeedsCaption (boolean newNeedsCaption) {
        boolean oldNeedsCaption = needsCaption;
        needsCaption = newNeedsCaption;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PROPERTY_SHEET__NEEDS_CAPTION, oldNeedsCaption, needsCaption));

    }

    public String getLabelProviderClassNameGen () {
        return labelProviderClassName;
    }

    public String getLabelProviderClassName () {
        String name = getLabelProviderClassNameGen ();
        if (name == null || name.trim ().length () == 0) {
            return ((GenEditorGeneratorImpl) getEditorGen ()).getDomainModelCapName () + "SheetLabelProvider";
        }
        return name;
    }

    public void setLabelProviderClassName (String newLabelProviderClassName) {
        String oldLabelProviderClassName = labelProviderClassName;
        labelProviderClassName = newLabelProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_PROPERTY_SHEET__LABEL_PROVIDER_CLASS_NAME, oldLabelProviderClassName, labelProviderClassName));

    }

    public String getLabelProviderQualifiedClassName () {
        return getPackageName () + '.' + getLabelProviderClassName ();
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_PROPERTY_SHEET__EDITOR_GEN :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_PROPERTY_SHEET__EDITOR_GEN, msgs);
            case GMFGenPackage.GEN_PROPERTY_SHEET__TABS :
                return ((InternalEList) getTabs ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_PROPERTY_SHEET__EDITOR_GEN :
                return eBasicSetContainer (null, GMFGenPackage.GEN_PROPERTY_SHEET__EDITOR_GEN, msgs);
            case GMFGenPackage.GEN_PROPERTY_SHEET__TABS :
                return ((InternalEList) getTabs ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_PROPERTY_SHEET__EDITOR_GEN :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_EDITOR_GENERATOR__PROPERTY_SHEET, GenEditorGenerator.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_PROPERTY_SHEET__EDITOR_GEN :
                return getEditorGen ();
            case GMFGenPackage.GEN_PROPERTY_SHEET__TABS :
                return getTabs ();
            case GMFGenPackage.GEN_PROPERTY_SHEET__PACKAGE_NAME :
                return getPackageName ();
            case GMFGenPackage.GEN_PROPERTY_SHEET__READ_ONLY :
                return isReadOnly () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_PROPERTY_SHEET__NEEDS_CAPTION :
                return isNeedsCaption () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_PROPERTY_SHEET__LABEL_PROVIDER_CLASS_NAME :
                return getLabelProviderClassName ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_PROPERTY_SHEET__TABS :
                getTabs ().clear ();
                getTabs ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.GEN_PROPERTY_SHEET__PACKAGE_NAME :
                setPackageName ((String) newValue);
                return;
            case GMFGenPackage.GEN_PROPERTY_SHEET__READ_ONLY :
                setReadOnly (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_PROPERTY_SHEET__NEEDS_CAPTION :
                setNeedsCaption (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_PROPERTY_SHEET__LABEL_PROVIDER_CLASS_NAME :
                setLabelProviderClassName ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_PROPERTY_SHEET__TABS :
                getTabs ().clear ();
                return;
            case GMFGenPackage.GEN_PROPERTY_SHEET__PACKAGE_NAME :
                setPackageName (PACKAGE_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_PROPERTY_SHEET__READ_ONLY :
                setReadOnly (READ_ONLY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_PROPERTY_SHEET__NEEDS_CAPTION :
                setNeedsCaption (NEEDS_CAPTION_EDEFAULT);
                return;
            case GMFGenPackage.GEN_PROPERTY_SHEET__LABEL_PROVIDER_CLASS_NAME :
                setLabelProviderClassName (LABEL_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_PROPERTY_SHEET__EDITOR_GEN :
                return getEditorGen () != null;
            case GMFGenPackage.GEN_PROPERTY_SHEET__TABS :
                return tabs != null && ! tabs.isEmpty ();
            case GMFGenPackage.GEN_PROPERTY_SHEET__PACKAGE_NAME :
                return PACKAGE_NAME_EDEFAULT == null ? packageName != null : ! PACKAGE_NAME_EDEFAULT.equals (packageName);
            case GMFGenPackage.GEN_PROPERTY_SHEET__READ_ONLY :
                return readOnly != READ_ONLY_EDEFAULT;
            case GMFGenPackage.GEN_PROPERTY_SHEET__NEEDS_CAPTION :
                return needsCaption != NEEDS_CAPTION_EDEFAULT;
            case GMFGenPackage.GEN_PROPERTY_SHEET__LABEL_PROVIDER_CLASS_NAME :
                return LABEL_PROVIDER_CLASS_NAME_EDEFAULT == null ? labelProviderClassName != null : ! LABEL_PROVIDER_CLASS_NAME_EDEFAULT.equals (labelProviderClassName);
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (packageName: ");
        result.append (packageName);
        result.append (", readOnly: ");
        result.append (readOnly);
        result.append (", needsCaption: ");
        result.append (needsCaption);
        result.append (", labelProviderClassName: ");
        result.append (labelProviderClassName);
        result.append (')');
        return result.toString ();
    }

}

