package org.eclipse.gmf.mappings.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.LabelMapping;

import org.eclipse.gmf.mappings.presentation.FilterUtil;

public class LabelMappingItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public LabelMappingItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addDiagramLabelPropertyDescriptor (object);
            addFeaturesPropertyDescriptor (object);
            addReadOnlyPropertyDescriptor (object);
            addViewPatternPropertyDescriptor (object);
            addEditPatternPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addDiagramLabelPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LabelMapping_diagramLabel_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LabelMapping_diagramLabel_feature", "_UI_LabelMapping_type"), GMFMapPackage.eINSTANCE.getLabelMapping_DiagramLabel (), true, null, null, null) {

            protected Collection getComboBoxObjects (Object object) {
                return FilterUtil.sort (super.getComboBoxObjects (object));
            }

        }

        );
    }

    protected void addFeaturesPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LabelMapping_features_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LabelMapping_features_feature", "_UI_LabelMapping_type"), GMFMapPackage.eINSTANCE.getLabelMapping_Features (), true, null, null, null) {

            protected Collection getComboBoxObjects (Object object) {
                return FilterUtil.filterByContainerMetaclass (super.getComboBoxObjects (object), (LabelMapping) object);
            }

        }

        );
    }

    protected void addReadOnlyPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LabelMapping_readOnly_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LabelMapping_readOnly_feature", "_UI_LabelMapping_type"), GMFMapPackage.eINSTANCE.getLabelMapping_ReadOnly (), true, false, false, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, null, null));
    }

    protected void addViewPatternPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LabelMapping_viewPattern_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LabelMapping_viewPattern_feature", "_UI_LabelMapping_type"), GMFMapPackage.eINSTANCE.getLabelMapping_ViewPattern (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addEditPatternPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LabelMapping_editPattern_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LabelMapping_editPattern_feature", "_UI_LabelMapping_type"), GMFMapPackage.eINSTANCE.getLabelMapping_EditPattern (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/LabelMapping"));
    }

    public String getText (Object object) {
        String label = ((LabelMapping) object).getViewPattern ();
        return label == null || label.length () == 0 ? getString ("_UI_LabelMapping_type") : getString ("_UI_LabelMapping_type") + " " + label;
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (LabelMapping.class)) {
            case GMFMapPackage.LABEL_MAPPING__READ_ONLY :
            case GMFMapPackage.LABEL_MAPPING__VIEW_PATTERN :
            case GMFMapPackage.LABEL_MAPPING__EDIT_PATTERN :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
    }

    public ResourceLocator getResourceLocator () {
        return GMFMapEditPlugin.INSTANCE;
    }

}

