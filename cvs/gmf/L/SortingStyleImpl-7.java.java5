package org.eclipse.gmf.runtime.notation.impl;

import java.util.Collection;

import java.util.Collections;

import java.util.Iterator;

import java.util.LinkedHashMap;

import java.util.Map;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.Sorting;

import org.eclipse.gmf.runtime.notation.SortingDirection;

import org.eclipse.gmf.runtime.notation.SortingStyle;

public class SortingStyleImpl extends NotationObjectImpl implements SortingStyle {
    protected static final Sorting SORTING_EDEFAULT = Sorting.NONE_LITERAL;
    protected Sorting sorting = SORTING_EDEFAULT;
    protected static final Map SORTING_KEYS_EDEFAULT = Collections.EMPTY_MAP;
    protected Map sortingKeys = SORTING_KEYS_EDEFAULT;
    protected EList sortedObjects;

    protected SortingStyleImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.SORTING_STYLE;
    }

    public Sorting getSorting () {
        return sorting;
    }

    public void setSorting (Sorting newSorting) {
        Sorting oldSorting = sorting;
        sorting = newSorting == null ? SORTING_EDEFAULT : newSorting;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.SORTING_STYLE__SORTING, oldSorting, sorting));

    }

    public Map getSortingKeys () {
        return Collections.unmodifiableMap (sortingKeys);
    }

    public void setSortingKeys (Map newSortingKeys) {
        Map oldSortingKeys = sortingKeys;
        if (newSortingKeys == null) throw new NullPointerException ("the 'newSortingKeys' parameter is null");
        else if (newSortingKeys.isEmpty ()) sortingKeys = SORTING_KEYS_EDEFAULT;
        else {
            Map tempMap = new LinkedHashMap (newSortingKeys.size ());
            for (Iterator i = newSortingKeys.keySet ().iterator ();
            i.hasNext ();) {
                Object key = i.next ();
                if (! (key instanceof String)) throw new IllegalArgumentException ("One or more keys in the map is not of type java.lang.String");

                Object value = newSortingKeys.get (key);
                if (! (value instanceof SortingDirection)) throw new IllegalArgumentException ("One or more values in the map is not of type org.eclipse.gmf.runtime.notation.SortingDirection");

                tempMap.put (key, value);
            }
            sortingKeys = tempMap;
        }

        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.SORTING_STYLE__SORTING_KEYS, oldSortingKeys, sortingKeys));

    }

    public EList getSortedObjects () {
        if (sortedObjects == null) {
            sortedObjects = new EObjectResolvingEList (EObject.class, this, NotationPackage.SORTING_STYLE__SORTED_OBJECTS);
        }
        return sortedObjects;
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.SORTING_STYLE__UUID :
                return getUUID ();
            case NotationPackage.SORTING_STYLE__SORTING :
                return getSorting ();
            case NotationPackage.SORTING_STYLE__SORTING_KEYS :
                return getSortingKeys ();
            case NotationPackage.SORTING_STYLE__SORTED_OBJECTS :
                return getSortedObjects ();
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.SORTING_STYLE__UUID :
                setUUID ((byte []) newValue);
                return;
            case NotationPackage.SORTING_STYLE__SORTING :
                setSorting ((Sorting) newValue);
                return;
            case NotationPackage.SORTING_STYLE__SORTING_KEYS :
                setSortingKeys ((Map) newValue);
                return;
            case NotationPackage.SORTING_STYLE__SORTED_OBJECTS :
                getSortedObjects ().clear ();
                getSortedObjects ().addAll ((Collection) newValue);
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.SORTING_STYLE__UUID :
                setUUID (UUID_EDEFAULT);
                return;
            case NotationPackage.SORTING_STYLE__SORTING :
                setSorting (SORTING_EDEFAULT);
                return;
            case NotationPackage.SORTING_STYLE__SORTING_KEYS :
                setSortingKeys (SORTING_KEYS_EDEFAULT);
                return;
            case NotationPackage.SORTING_STYLE__SORTED_OBJECTS :
                getSortedObjects ().clear ();
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.SORTING_STYLE__UUID :
                return UUID_EDEFAULT == null ? uUID != null : ! UUID_EDEFAULT.equals (uUID);
            case NotationPackage.SORTING_STYLE__SORTING :
                return sorting != SORTING_EDEFAULT;
            case NotationPackage.SORTING_STYLE__SORTING_KEYS :
                return SORTING_KEYS_EDEFAULT == null ? sortingKeys != null : ! SORTING_KEYS_EDEFAULT.equals (sortingKeys);
            case NotationPackage.SORTING_STYLE__SORTED_OBJECTS :
                return sortedObjects != null && ! sortedObjects.isEmpty ();
        }
        return eDynamicIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (sorting: ");
        result.append (sorting);
        result.append (", sortingKeys: ");
        result.append (sortingKeys);
        result.append (')');
        return result.toString ();
    }

}

