package org.eclipse.gmf.graphdef.editor.edit.policies;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gmf.graphdef.editor.edit.commands.ChildAccessCreateCommand;

import org.eclipse.gmf.graphdef.editor.edit.commands.ChildAccessReorientCommand;

import org.eclipse.gmf.graphdef.editor.edit.parts.ChildAccessEditPart;

import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;

import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;

public class PolylineItemSemanticEditPolicy extends GMFGraphBaseItemSemanticEditPolicy {

    protected Command getDestroyElementCommand (DestroyElementRequest req) {
        CompoundCommand cc = getDestroyEdgesCommand ();
        addDestroyShortcutsCommand (cc);
        cc.add (getGEFWrapper (new DestroyElementCommand (req)));
        return cc.unwrap ();
    }

    protected Command getCreateRelationshipCommand (CreateRelationshipRequest req) {
        Command command = req.getTarget () == null ? getStartCreateRelationshipCommand (req) : getCompleteCreateRelationshipCommand (req);
        return command != null ? command : super.getCreateRelationshipCommand (req);
    }

    protected Command getStartCreateRelationshipCommand (CreateRelationshipRequest req) {
        if (GMFGraphElementTypes.ChildAccess_4002 == req.getElementType ()) {
            return null;
        }
        return null;
    }

    protected Command getCompleteCreateRelationshipCommand (CreateRelationshipRequest req) {
        if (GMFGraphElementTypes.ChildAccess_4002 == req.getElementType ()) {
            return getGEFWrapper (new ChildAccessCreateCommand (req, req.getSource (), req.getTarget ()));
        }
        return null;
    }

    protected Command getReorientRelationshipCommand (ReorientRelationshipRequest req) {
        switch (getVisualID (req)) {
            case ChildAccessEditPart.VISUAL_ID :
                return getGEFWrapper (new ChildAccessReorientCommand (req));
        }
        return super.getReorientRelationshipCommand (req);
    }

}

