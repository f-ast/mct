package org.eclipse.gmf.internal.xpand.util;

import java.io.IOException;

import java.io.Reader;

import java.util.ArrayList;

import org.eclipse.gmf.internal.xpand.ast.Template;

import org.eclipse.gmf.internal.xpand.model.XpandResource;

import org.eclipse.gmf.internal.xpand.parser.XpandLexer;

import org.eclipse.gmf.internal.xpand.parser.XpandParser;

public class XpandResourceParser {

    public XpandResource parse (final Reader source, final String qualifiedTemplateName) throws IOException, ParserException {
        Template tpl = null;
        XpandParser parser = null;
        XpandLexer scanner = null;
        final ArrayList < ParserException.ErrorLocationInfo > errors = new ArrayList < ParserException.ErrorLocationInfo > ();
        final char [] buffer = new StreamConverter ().toCharArray (source);
        try {
            scanner = new XpandLexer (buffer, qualifiedTemplateName) {

                @Override
                public void reportError (int left_loc, int right_loc) {
                    errors.add (XtendResourceParser.createError (this, left_loc, right_loc));
                    super.reportError (left_loc, right_loc);
                }

            }

            ;
            parser = new XpandParser (scanner);
            scanner.lexer (parser);
            tpl = parser.parser ();
        } catch (final Exception e) {
            if (errors.isEmpty ()) {
                throw new IOException ("Unexpected exception while parsing");
            } else {
                throw new ParserException (errors);
            }
        }
        if (tpl != null) {
            tpl.setFullyQualifiedName (qualifiedTemplateName);
            return tpl;
        }
        return null;
    }

}

