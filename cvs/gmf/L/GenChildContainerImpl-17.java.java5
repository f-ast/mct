package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;

import org.eclipse.gmf.codegen.gmfgen.GenChildNode;

public abstract class GenChildContainerImpl extends GenCommonBaseImpl implements GenChildContainer {
    protected static final String CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT = null;
    protected String canonicalEditPolicyClassName = CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT;
    protected EList childNodes = null;

    protected GenChildContainerImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenChildContainer ();
    }

    public EList getContainedNodes () {
        return getChildNodes ();
    }

    public EList getChildNodes () {
        if (childNodes == null) {
            childNodes = new EObjectWithInverseResolvingEList.ManyInverse (GenChildNode.class, this, GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES, GMFGenPackage.GEN_CHILD_NODE__CONTAINERS);
        }
        return childNodes;
    }

    public boolean needsCanonicalEditPolicy () {
        if (getDiagram ().isSynchronized ()) {
            return ! getChildNodes ().isEmpty () || (getDiagram ().getGenClass2PhantomMap ().size () > 0 && getDiagram ().getPhantomLinks ().size () > 0);
        } else {
            return false;
        }
    }

    public String getCanonicalEditPolicyClassNameGen () {
        return canonicalEditPolicyClassName;
    }

    public String getCanonicalEditPolicyClassName () {
        return getValidClassName (getCanonicalEditPolicyClassNameGen (), this, CANONICAL_EDIT_POLICY_SUFFIX);
    }

    public void setCanonicalEditPolicyClassName (String newCanonicalEditPolicyClassName) {
        String oldCanonicalEditPolicyClassName = canonicalEditPolicyClassName;
        canonicalEditPolicyClassName = newCanonicalEditPolicyClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME, oldCanonicalEditPolicyClassName, canonicalEditPolicyClassName));

    }

    public String getCanonicalEditPolicyQualifiedClassName () {
        return getDiagram ().getEditPoliciesPackageName () + '.' + getCanonicalEditPolicyClassName ();
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES :
                return ((InternalEList) getChildNodes ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES :
                return ((InternalEList) getChildNodes ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_CONTAINER__CONTAINED_NODES :
                return getContainedNodes ();
            case GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME :
                return getCanonicalEditPolicyClassName ();
            case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES :
                return getChildNodes ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_CONTAINER__CONTAINED_NODES :
                getContainedNodes ().clear ();
                getContainedNodes ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME :
                setCanonicalEditPolicyClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES :
                getChildNodes ().clear ();
                getChildNodes ().addAll ((Collection) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_CONTAINER__CONTAINED_NODES :
                getContainedNodes ().clear ();
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME :
                setCanonicalEditPolicyClassName (CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES :
                getChildNodes ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_CHILD_CONTAINER__CONTAINED_NODES :
                return ! getContainedNodes ().isEmpty ();
            case GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME :
                return CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? canonicalEditPolicyClassName != null : ! CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals (canonicalEditPolicyClassName);
            case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES :
                return childNodes != null && ! childNodes.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (canonicalEditPolicyClassName: ");
        result.append (canonicalEditPolicyClassName);
        result.append (')');
        return result.toString ();
    }

}

