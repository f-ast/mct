package org.eclipse.gmf.gmfgraph.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.gmfgraph.Canvas;

import org.eclipse.gmf.gmfgraph.Compartment;

import org.eclipse.gmf.gmfgraph.Connection;

import org.eclipse.gmf.gmfgraph.DiagramLabel;

import org.eclipse.gmf.gmfgraph.FigureGallery;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.Node;

public class CanvasImpl extends EObjectImpl implements Canvas {
    protected static final String NAME_EDEFAULT = null;
    protected String name = NAME_EDEFAULT;
    protected EList < FigureGallery > figures = null;
    protected EList < Node > nodes = null;
    protected EList < Connection > connections = null;
    protected EList < Compartment > compartments = null;
    protected EList < DiagramLabel > labels = null;

    protected CanvasImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getCanvas ();
    }

    public String getName () {
        return name;
    }

    public void setName (String newName) {
        String oldName = name;
        name = newName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.CANVAS__NAME, oldName, name));

    }

    public EList < FigureGallery > getFigures () {
        if (figures == null) {
            figures = new EObjectContainmentEList < FigureGallery > (FigureGallery.class, this, GMFGraphPackage.CANVAS__FIGURES);
        }
        return figures;
    }

    public EList < Node > getNodes () {
        if (nodes == null) {
            nodes = new EObjectContainmentEList < Node > (Node.class, this, GMFGraphPackage.CANVAS__NODES);
        }
        return nodes;
    }

    public EList < Connection > getConnections () {
        if (connections == null) {
            connections = new EObjectContainmentEList < Connection > (Connection.class, this, GMFGraphPackage.CANVAS__CONNECTIONS);
        }
        return connections;
    }

    public EList < Compartment > getCompartments () {
        if (compartments == null) {
            compartments = new EObjectContainmentEList < Compartment > (Compartment.class, this, GMFGraphPackage.CANVAS__COMPARTMENTS);
        }
        return compartments;
    }

    public EList < DiagramLabel > getLabels () {
        if (labels == null) {
            labels = new EObjectContainmentEList < DiagramLabel > (DiagramLabel.class, this, GMFGraphPackage.CANVAS__LABELS);
        }
        return labels;
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.CANVAS__FIGURES :
                return ((InternalEList < ? >) getFigures ()).basicRemove (otherEnd, msgs);
            case GMFGraphPackage.CANVAS__NODES :
                return ((InternalEList < ? >) getNodes ()).basicRemove (otherEnd, msgs);
            case GMFGraphPackage.CANVAS__CONNECTIONS :
                return ((InternalEList < ? >) getConnections ()).basicRemove (otherEnd, msgs);
            case GMFGraphPackage.CANVAS__COMPARTMENTS :
                return ((InternalEList < ? >) getCompartments ()).basicRemove (otherEnd, msgs);
            case GMFGraphPackage.CANVAS__LABELS :
                return ((InternalEList < ? >) getLabels ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.CANVAS__NAME :
                return getName ();
            case GMFGraphPackage.CANVAS__FIGURES :
                return getFigures ();
            case GMFGraphPackage.CANVAS__NODES :
                return getNodes ();
            case GMFGraphPackage.CANVAS__CONNECTIONS :
                return getConnections ();
            case GMFGraphPackage.CANVAS__COMPARTMENTS :
                return getCompartments ();
            case GMFGraphPackage.CANVAS__LABELS :
                return getLabels ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.CANVAS__NAME :
                setName ((String) newValue);
                return;
            case GMFGraphPackage.CANVAS__FIGURES :
                getFigures ().clear ();
                getFigures ().addAll ((Collection < ? extends FigureGallery >) newValue);
                return;
            case GMFGraphPackage.CANVAS__NODES :
                getNodes ().clear ();
                getNodes ().addAll ((Collection < ? extends Node >) newValue);
                return;
            case GMFGraphPackage.CANVAS__CONNECTIONS :
                getConnections ().clear ();
                getConnections ().addAll ((Collection < ? extends Connection >) newValue);
                return;
            case GMFGraphPackage.CANVAS__COMPARTMENTS :
                getCompartments ().clear ();
                getCompartments ().addAll ((Collection < ? extends Compartment >) newValue);
                return;
            case GMFGraphPackage.CANVAS__LABELS :
                getLabels ().clear ();
                getLabels ().addAll ((Collection < ? extends DiagramLabel >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.CANVAS__NAME :
                setName (NAME_EDEFAULT);
                return;
            case GMFGraphPackage.CANVAS__FIGURES :
                getFigures ().clear ();
                return;
            case GMFGraphPackage.CANVAS__NODES :
                getNodes ().clear ();
                return;
            case GMFGraphPackage.CANVAS__CONNECTIONS :
                getConnections ().clear ();
                return;
            case GMFGraphPackage.CANVAS__COMPARTMENTS :
                getCompartments ().clear ();
                return;
            case GMFGraphPackage.CANVAS__LABELS :
                getLabels ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.CANVAS__NAME :
                return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT.equals (name);
            case GMFGraphPackage.CANVAS__FIGURES :
                return figures != null && ! figures.isEmpty ();
            case GMFGraphPackage.CANVAS__NODES :
                return nodes != null && ! nodes.isEmpty ();
            case GMFGraphPackage.CANVAS__CONNECTIONS :
                return connections != null && ! connections.isEmpty ();
            case GMFGraphPackage.CANVAS__COMPARTMENTS :
                return compartments != null && ! compartments.isEmpty ();
            case GMFGraphPackage.CANVAS__LABELS :
                return labels != null && ! labels.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (name: ");
        result.append (name);
        result.append (')');
        return result.toString ();
    }

}

