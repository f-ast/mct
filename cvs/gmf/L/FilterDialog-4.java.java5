package org.eclipse.gmf.runtime.diagram.ui.internal.dialogs.sortfilter;

import java.util.ArrayList;

import java.util.Collections;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import java.util.Set;

import org.eclipse.gef.EditPolicy;

import org.eclipse.jface.dialogs.Dialog;

import org.eclipse.jface.dialogs.IDialogConstants;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.SelectionAdapter;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.graphics.GC;

import org.eclipse.swt.graphics.Rectangle;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.layout.GridLayout;

import org.eclipse.swt.widgets.Button;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Event;

import org.eclipse.swt.widgets.Label;

import org.eclipse.swt.widgets.Listener;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.XtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SortFilterContentEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;

import org.eclipse.gmf.runtime.diagram.ui.requests.ChangePropertyValueRequest;

import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;

import org.eclipse.gmf.runtime.notation.Filtering;

public class FilterDialog extends Dialog {
    private final String title = PresentationResourceManager.getInstance ().getString ("SortFilterDialog.title");
    static private final String FILTER_ITEMS_CONTAINING = PresentationResourceManager.getInstance ().getString ("SortFilter.filterItemsListLabel");
    static private final String FILTER_ITEMS_LIST = PresentationResourceManager.getInstance ().getString ("SortFilter.fitlerListLabel");
    static private final String ADD_TO = PresentationResourceManager.getInstance ().getString ("SortFilter.addTo");
    private final String ADD_TO_LABEL = "<";
    static private final String REMOVE_FROM = PresentationResourceManager.getInstance ().getString ("SortFilter.removeFrom");
    private final String REMOVE_FROM_LABEL = ">";
    static private final String ADD_ALL = PresentationResourceManager.getInstance ().getString ("SortFilter.addAll");
    private final String ADD_ALL_LABEL = "<<";
    static private final String REMOVE_ALL = PresentationResourceManager.getInstance ().getString ("SortFilter.removeAll");
    private final String REMOVE_ALL_LABEL = ">>";
    static private final String APPLY = PresentationResourceManager.getInstance ().getString ("SortFilter.apply");
    private org.eclipse.swt.widgets.List filterList = null;
    private org.eclipse.swt.widgets.List filters = null;
    private Button addTo = null;
    private Button removeFrom = null;
    private Button addAllTo = null;
    private Button removeAllFrom = null;
    private final int ADD_TO_ID = 1000;
    private final int REMOVE_FROM_ID = ADD_TO_ID + 1;
    private final int ADD_ALL_TO_ID = ADD_TO_ID + 2;
    private final int REMOVE_ALL_FROM_ID = ADD_TO_ID + 3;
    private final int APPLY_ID = 5000;
    private int LIST_HEIGHT = 8;
    private Map filterMap = null;
    private String [] filterStrings = null;
    private Filtering _filtering = Filtering.NONE_LITERAL;
    private List _filteringKeys = Collections.EMPTY_LIST;
    private List selection;
    private boolean changeToApply = true;
    class ButtonSelectionAdapter extends SelectionAdapter {

        public void widgetSelected (SelectionEvent event) {
            buttonPressed (((Integer) event.widget.getData ()).intValue ());
        }

    }

    private ButtonSelectionAdapter buttonSelectionAdapter = new ButtonSelectionAdapter ();

    protected FilterDialog (Shell parentShell, List selection, Map filterMap) {
        super (parentShell);
        this.selection = selection;
        this.filterMap = filterMap;
    }

    protected Control createDialogArea (Composite parent) {
        getShell ().setText (title);
        createFilterLists (parent);
        return parent;
    }

    protected void createButtonsForButtonBar (Composite parent) {
        super.createButtonsForButtonBar (parent);
        createButton (parent, APPLY_ID, APPLY, true);
    }

    private void createFilterLists (Composite ancestor) {
        if (filterMap == null || filterMap.isEmpty ()) return;

        Object [] filterArray = filterMap.keySet ().toArray ();
        this.filterStrings = new String [filterArray.length];
        for (int i = 0;
        i < filterArray.length; i ++) {
            filterStrings [i] = (String) filterArray [i];
        }
        Composite parent = new Composite (ancestor, SWT.NULL);
        GridLayout layout = new GridLayout ();
        layout.marginHeight = 10;
        layout.marginWidth = 10;
        layout.numColumns = 3;
        parent.setLayout (layout);
        Label filterItemsLabel = new Label (parent, SWT.LEFT);
        filterItemsLabel.setText (FILTER_ITEMS_CONTAINING);
        GridData gd = new GridData ();
        gd.horizontalAlignment = GridData.HORIZONTAL_ALIGN_BEGINNING;
        filterItemsLabel.setLayoutData (gd);
        new Label (parent, SWT.LEFT);
        Label filterItemLabel = new Label (parent, SWT.LEFT);
        filterItemLabel.setText (FILTER_ITEMS_LIST);
        GridData gd2 = new GridData ();
        gd2.horizontalAlignment = GridData.BEGINNING;
        filterItemLabel.setLayoutData (gd2);
        filters = new org.eclipse.swt.widgets.List (parent, SWT.MULTI | SWT.BORDER | SWT.V_SCROLL);
        GridData gridData = new GridData (GridData.VERTICAL_ALIGN_FILL);
        gridData.verticalSpan = 1;
        gridData.widthHint = 80;
        int listHeight = filters.getItemHeight () * LIST_HEIGHT;
        Rectangle trim = filters.computeTrim (0, 0, 0, listHeight);
        gridData.heightHint = trim.height;
        filters.setLayoutData (gridData);
        Composite buttonComposite = new Composite (parent, SWT.NULL);
        GridLayout buttonLayout = new GridLayout ();
        buttonLayout.marginHeight = 0;
        buttonLayout.marginWidth = 0;
        buttonLayout.numColumns = 1;
        buttonComposite.setLayout (buttonLayout);
        GridData buttGD = new GridData (GridData.FILL_VERTICAL | GridData.CENTER);
        buttGD.horizontalSpan = 1;
        buttGD.widthHint = 30;
        buttonComposite.setLayoutData (buttGD);
        removeFrom = new Button (buttonComposite, SWT.PUSH);
        removeFrom.setText (REMOVE_FROM_LABEL);
        removeFrom.setToolTipText (REMOVE_FROM);
        removeFrom.setLayoutData (makeArrowButtonGridData (removeFrom));
        removeFrom.setData (new Integer (REMOVE_FROM_ID));
        removeFrom.addSelectionListener (buttonSelectionAdapter);
        removeFrom.setEnabled (false);
        addTo = new Button (buttonComposite, SWT.PUSH);
        addTo.setText (ADD_TO_LABEL);
        addTo.setToolTipText (ADD_TO);
        addTo.setLayoutData (makeArrowButtonGridData (addTo));
        addTo.setData (new Integer (ADD_TO_ID));
        addTo.addSelectionListener (buttonSelectionAdapter);
        addTo.setEnabled (false);
        removeAllFrom = new Button (buttonComposite, SWT.PUSH);
        removeAllFrom.setText (REMOVE_ALL_LABEL);
        removeAllFrom.setToolTipText (REMOVE_ALL);
        removeAllFrom.setLayoutData (makeArrowButtonGridData (removeAllFrom));
        removeAllFrom.setData (new Integer (REMOVE_ALL_FROM_ID));
        removeAllFrom.addSelectionListener (buttonSelectionAdapter);
        addAllTo = new Button (buttonComposite, SWT.PUSH);
        addAllTo.setText (ADD_ALL_LABEL);
        addAllTo.setToolTipText (ADD_ALL);
        addAllTo.setLayoutData (makeArrowButtonGridData (addAllTo));
        addAllTo.setData (new Integer (ADD_ALL_TO_ID));
        addAllTo.addSelectionListener (buttonSelectionAdapter);
        this.filterList = new org.eclipse.swt.widgets.List (parent, SWT.MULTI | SWT.BORDER | SWT.V_SCROLL);
        GridData gridData2 = new GridData (GridData.VERTICAL_ALIGN_FILL);
        gridData2.verticalSpan = 1;
        gridData2.widthHint = 80;
        int listHeight2 = filterList.getItemHeight () * LIST_HEIGHT;
        Rectangle trim2 = filterList.computeTrim (0, 0, 0, listHeight2);
        gridData.heightHint = trim2.height;
        filterList.setLayoutData (gridData2);
        filters.addListener (SWT.Selection, new Listener () {

            public void handleEvent (Event e) {
                removeFrom.setEnabled (filters.getSelectionCount () > 0);
            }

        }

        );
        filterList.addListener (SWT.Selection, new Listener () {

            public void handleEvent (Event e) {
                addTo.setEnabled (filterList.getSelectionCount () > 0);
            }

        }

        );
        initFilterLists ();
    }

    private void initFilterLists () {
        if (filterMap != null && ! filterMap.isEmpty ()) {
            Set keySet = filterMap.keySet ();
            Iterator i = keySet.iterator ();
            if (_filtering == Filtering.AUTOMATIC_LITERAL) {
                while (i.hasNext ()) {
                    String filterString = (String) i.next ();
                    if (_filteringKeys.contains (filterString)) {
                        filters.add (filterString);
                    } else {
                        filterList.add (filterString);
                    }
                }
            } else {
                while (i.hasNext ()) {
                    String filterString = (String) i.next ();
                    filterList.add (filterString);
                }
            }
        }
    }

    protected GridData makeArrowButtonGridData (Control control) {
        GC gc = new GC (control);
        gc.setFont (control.getFont ());
        GridData gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.heightHint = 24;
        gc.dispose ();
        return gridData;
    }

    public void setFilter (Map filterMap, String property) {
        if (filterMap != null) {
            this.filterMap = filterMap;
            Object [] filterArray = filterMap.keySet ().toArray ();
            this.filterStrings = new String [filterArray.length];
            for (int i = 0;
            i < filterArray.length; i ++) {
                filterStrings [i] = (String) filterArray [i];
            }
        }
    }

    protected void buttonPressed (int buttonId) {
        String [] items = {};
        switch (buttonId) {
            case ADD_TO_ID :
                items = filterList.getSelection ();
                for (int i = 0;
                i < items.length; i ++) {
                    filters.add (items [i]);
                    filterList.remove (items [i]);
                }
                addTo.setEnabled (false);
                changeToApply = true;
                break;
            case REMOVE_FROM_ID :
                items = filters.getSelection ();
                for (int i = 0;
                i < items.length; i ++) {
                    filterList.add (items [i]);
                    filters.remove (items [i]);
                }
                removeFrom.setEnabled (false);
                changeToApply = true;
                break;
            case ADD_ALL_TO_ID :
                items = filterList.getItems ();
                for (int i = 0;
                i < items.length; i ++) {
                    filters.add (items [i]);
                    filterList.remove (items [i]);
                }
                changeToApply = true;
                break;
            case REMOVE_ALL_FROM_ID :
                items = filters.getItems ();
                for (int i = 0;
                i < items.length; i ++) {
                    filters.remove (items [i]);
                    filterList.add (items [i]);
                }
                changeToApply = true;
                break;
            case IDialogConstants.OK_ID :
                okPressed ();
                break;
            case APPLY_ID :
                applyPressed ();
                break;
            default :
                super.buttonPressed (buttonId);
        }
    }

    protected void okPressed () {
        if (changeToApply) applyPressed ();

        super.okPressed ();
    }

    protected void applyPressed () {
        if (! changeToApply) return;

        if (filters.getItemCount () > 0) {
            _filteringKeys = new ArrayList ();
            _filtering = Filtering.AUTOMATIC_LITERAL;
            for (int i = 0;
            i < filters.getItemCount (); i ++) {
                _filteringKeys.add (filters.getItems () [i]);
            }
        } else {
            _filtering = Filtering.NONE_LITERAL;
            _filteringKeys = Collections.EMPTY_LIST;
        }
        ChangePropertyValueRequest filterTypeRequest = new ChangePropertyValueRequest (Properties.ID_FILTERING, Properties.ID_FILTERING, _filtering);
        ChangePropertyValueRequest filterKeysRequest = new ChangePropertyValueRequest (Properties.ID_FILTERING_KEYS, Properties.ID_FILTERING_KEYS, _filteringKeys);
        CompositeModelCommand cc = new CompositeModelCommand (PresentationResourceManager.getI18NString ("Command.SortFilterCommand"));
        Iterator iter = selection.iterator ();
        while (iter.hasNext ()) {
            GraphicalEditPart ep = (GraphicalEditPart) iter.next ();
            List children = ep.getChildren ();
            for (int i = 0;
            i < children.size (); i ++) {
                if (children.get (i) instanceof ListCompartmentEditPart) {
                    ListCompartmentEditPart editPart = (ListCompartmentEditPart) children.get (i);
                    if (filterMap != null && filterMap.equals (getFilterMapFromEditPart (editPart))) {
                        cc.compose (new XtoolsProxyCommand (editPart.getCommand (filterTypeRequest)));
                        cc.compose (new XtoolsProxyCommand (editPart.getCommand (filterKeysRequest)));
                    }
                }
            }
        }
        ((IGraphicalEditPart) selection.get (0)).getRoot ().getViewer ().getEditDomain ().getCommandStack ().execute (new EtoolsProxyCommand (cc));
        changeToApply = false;
    }

    private Map getFilterMapFromEditPart (ListCompartmentEditPart editPart) {
        EditPolicy ep = editPart.getEditPolicy (EditPolicyRoles.SORT_FILTER_CONTENT_ROLE);
        if (ep instanceof SortFilterContentEditPolicy) {
            return ((SortFilterContentEditPolicy) ep).getFilter ();
        }
        return Collections.EMPTY_MAP;
    }

}

