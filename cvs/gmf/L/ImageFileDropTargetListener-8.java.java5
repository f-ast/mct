package org.eclipse.gmf.runtime.diagram.ui.internal.parts;

import java.util.ArrayList;

import java.util.List;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPartViewer;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.swt.SWTException;

import org.eclipse.swt.dnd.DropTargetEvent;

import org.eclipse.swt.dnd.FileTransfer;

public class ImageFileDropTargetListener extends DiagramDropTargetListener {

    public ImageFileDropTargetListener (EditPartViewer viewer) {
        super (viewer, FileTransfer.getInstance ());
    }

    protected List getObjectsBeingDropped () {
        List < String > filesList = new ArrayList < String > ();
        if (getCurrentEvent ().data instanceof String []) {
            insertFileNamesFromStringArray (filesList, (String []) getCurrentEvent ().data);
        } else if (getCurrentEvent ().data instanceof IStructuredSelection) {
            Object [] array = ((IStructuredSelection) getCurrentEvent ().data).toArray ();
            for (int j = 0;
            j < array.length; j ++) {
                if (array [j] instanceof IFile) {
                    IFile dropFile = (IFile) array [j];
                    filesList.add (dropFile.getLocation ().toOSString ());
                }
            }
        } else {
            try {
                Object files = FileTransfer.getInstance ().nativeToJava (getCurrentEvent ().currentDataType);
                if (files instanceof String []) {
                    insertFileNamesFromStringArray (filesList, (String []) files);
                }
            } catch (SWTException e) {
                return null;
            }
        }

        if (filesList.size () > 0) {
            return filesList;
        }
        return null;
    }

    private void insertFileNamesFromStringArray (List < String > filesList, String [] fileNames) {
        for (int i = 0;
        i < fileNames.length; i ++) {
            filesList.add (fileNames [i]);
        }
    }

    public boolean isEnabled (DropTargetEvent event) {
        if (super.isEnabled (event)) {
            Object modelObj = getViewer ().getContents ().getModel ();
            if (modelObj instanceof EObject) {
                return true;
            } else if (modelObj instanceof IAdaptable) {
                final EObject target = (EObject) ((IAdaptable) modelObj).getAdapter (EObject.class);
                if (target == null) {
                    return false;
                }
            }

            return true;
        }
        return false;
    }

    protected boolean isDataTransfered () {
        return super.isDataTransfered () && ! getDropObjectsRequest ().getObjects ().isEmpty ();
    }

}

