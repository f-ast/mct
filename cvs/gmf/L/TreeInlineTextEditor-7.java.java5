package org.eclipse.gmf.runtime.common.ui.util;

import java.util.List;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.jface.action.IMenuListener;

import org.eclipse.jface.action.IMenuManager;

import org.eclipse.jface.dialogs.ErrorDialog;

import org.eclipse.jface.text.contentassist.IContentAssistProcessor;

import org.eclipse.jface.viewers.ISelectionChangedListener;

import org.eclipse.jface.viewers.SelectionChangedEvent;

import org.eclipse.jface.viewers.TreeViewer;

import org.eclipse.swt.SWT;

import org.eclipse.swt.custom.TreeEditor;

import org.eclipse.swt.events.FocusAdapter;

import org.eclipse.swt.events.FocusEvent;

import org.eclipse.swt.events.KeyAdapter;

import org.eclipse.swt.events.KeyEvent;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.Point;

import org.eclipse.swt.graphics.RGB;

import org.eclipse.swt.graphics.Rectangle;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Display;

import org.eclipse.swt.widgets.Event;

import org.eclipse.swt.widgets.Listener;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.swt.widgets.Text;

import org.eclipse.swt.widgets.Tree;

import org.eclipse.swt.widgets.TreeItem;

import org.eclipse.ui.IActionBars;

import org.eclipse.ui.contentassist.ContentAssistHandler;

import org.eclipse.gmf.runtime.common.ui.contentassist.ContentAssistantHelper;

import org.eclipse.gmf.runtime.common.ui.internal.l10n.CommonUIMessages;

public class TreeInlineTextEditor {
    private TreeEditor treeEditor;
    private Tree tree;
    private Text textEditor;
    private Composite textEditorParent;
    private static final Rectangle nullRectangle = new Rectangle (0, 0, 0, 0);
    private String finalText;
    private String initialText;
    private IEditStringProvider editStringProvider;
    private TreeItem treeItem;
    private TreeViewer viewer;
    private IInlineTextActionHandler textActionHandler;
    private boolean isF2disabled;
    private volatile boolean inEndEdit;
    private ContentAssistHandler contentAssistHandler = null;
    private Color proposalPopupBackgroundColor;
    private Color proposalPopupForegroundColor;

    private boolean isF2disabled () {
        return isF2disabled;
    }

    private void setIsF2disabled (boolean isF2disabled) {
        this.isF2disabled = isF2disabled;
    }

    private TreeViewer getTreeViewer () {
        return viewer;
    }

    private void setTreeViewer (TreeViewer viewer) {
        this.viewer = viewer;
    }

    private TreeItem getTreeItem () {
        return treeItem;
    }

    private IEditStringProvider getEditStringProvider () {
        return editStringProvider;
    }

    private TreeEditor getTreeEditor () {
        return treeEditor;
    }

    private void setTreeEditor (TreeEditor treeEditor) {
        this.treeEditor = treeEditor;
    }

    public TreeInlineTextEditor (TreeViewer treeViewer, IActionBars actionBars, List disableActionsIds, IEditStringProvider editStringProvider) {
        this (treeViewer, editStringProvider, false);
        initTextActionHandler (actionBars, disableActionsIds);
    }

    public TreeInlineTextEditor (TreeViewer treeViewer, IEditStringProvider editStringProvider, boolean isF2disabled) {
        setTreeViewer (treeViewer);
        setTree (treeViewer.getTree ());
        setIsF2disabled (isF2disabled);
        setEditStringProvider (editStringProvider);
        createControl ();
        init ();
    }

    public boolean isDisposed () {
        return ((getTextEditorParent () == null) || (getTextEditorParent ().isDisposed ()));
    }

    public boolean canEdit () {
        return ((isDisposed () == false) && (getTree ().isDisposed () == false) && (getTree ().getEnabled ()) && (getTree ().getVisible ()) && (isSelectedItemEditable ()));
    }

    private boolean isSelectedItemEditable () {
        return ((getTree ().getSelection ().length == 1) && (getTree ().getSelection () [0].isDisposed () == false) && (getTree ().getSelection () [0].getData () != null) && getEditStringProvider ().canEdit (getTree ().getSelection () [0].getData ()));
    }

    public void startEdit () {
        while (Display.getCurrent ().readAndDispatch ()) {
        }
        if (canEdit ()) {
            cancelEdit ();
            setTreeItem (getTree ().getSelection () [0]);
            setInitialText (getEditStringProvider ().getEditString (getTreeItem ().getData ()));
            getTextEditor ().setText (getInitialText ());
            getTreeEditor ().setItem (getTreeItem ());
            show ();
        }
    }

    public void cancelEdit () {
        if (canProceed ()) {
            hide ();
        }
    }

    public void endEdit () {
        if (inEndEdit) {
            return;
        }
        inEndEdit = true;
        try {
            if (canProceed ()) {
                setFinalText (getCurrentText ());
                if (getFinalText ().equals (getInitialText ()) == false) {
                    final Object obj = getTreeItem ().getData ();
                    getEditStringProvider ().setEditString (obj, getFinalText ());
                    getTreeItem ().getDisplay ().asyncExec (new Runnable () {

                        public void run () {
                            if (! isDisposed ()) {
                                getTreeViewer ().update (obj, null);
                            }
                        }

                    }

                    );
                    hide ();
                } else {
                    hide ();
                }
            }
        } finally {
            inEndEdit = false;
        }
    }

    protected void openErrorDialog (IStatus status) {
        ErrorDialog.openError (getShell (), CommonUIMessages.TreeInlineTextEditor_errorDialogTitle, null, status);
    }

    private Shell getShell () {
        return getTree ().getShell ();
    }

    private boolean canProceed () {
        return isDisposed () == false && getTreeItem () != null && ! getTreeItem ().isDisposed ();
    }

    private void show () {
        uninstallContentAssist (false);
        if (getTreeItem () != null) {
            IContentAssistProcessor processor = getEditStringProvider ().getCompletionProcessor (getTreeItem ().getData ());
            if (processor != null) {
                contentAssistHandler = ContentAssistantHelper.createTextContentAssistant (getTextEditor (), proposalPopupForegroundColor, proposalPopupBackgroundColor, processor);
            }
        }
        getTextEditorParent ().setEnabled (true);
        getTextEditorParent ().setVisible (true);
        getTextEditor ().setEnabled (true);
        getTextEditor ().setVisible (true);
        adjustTextEditorBounds ();
        getTextEditorParent ().redraw ();
        getTextEditor ().selectAll ();
        getTextEditor ().setFocus ();
        if (getTextActionHandler () != null) {
            getTextActionHandler ().hookHandlers ();
        }
    }

    private void hide () {
        setTreeItem (null);
        getTreeEditor ().setItem (null);
        getTextEditor ().setVisible (false);
        getTextEditor ().setEnabled (false);
        getTextEditorParent ().setBounds (getNullRectangle ());
        getTextEditorParent ().setVisible (false);
        getTextEditorParent ().setEnabled (false);
        if (getTextActionHandler () != null) {
            getTextActionHandler ().unHookHandlers ();
        }
        uninstallContentAssist (true);
    }

    private void uninstallContentAssist (boolean fork) {
        if (contentAssistHandler != null) {
            final ContentAssistHandler localHandler = contentAssistHandler;
            contentAssistHandler = null;
            if (fork) {
                Display.getCurrent ().asyncExec (new Runnable () {

                    public void run () {
                        localHandler.setEnabled (false);
                    }

                }

                );
            } else {
                localHandler.setEnabled (false);
            }
        }
    }

    public void dispose () {
        if (getTextEditorParent () != null) {
            if (getTextActionHandler () != null) {
                getTextActionHandler ().dispose ();
            }
            setTextActionHandler (null);
            setTextEditorParent (null);
            setTextEditor (null);
            getTreeEditor ().setEditor (null, null);
            setTreeEditor (null);
            setTree (null);
            proposalPopupBackgroundColor.dispose ();
            proposalPopupForegroundColor.dispose ();
        }
    }

    private void createControl () {
        setTextEditorParent (new Composite (getTree (), SWT.NONE));
        setTreeEditor (new TreeEditor (getTree ()));
        getTreeEditor ().horizontalAlignment = SWT.LEFT;
        getTreeEditor ().grabHorizontal = true;
        getTreeEditor ().setEditor (getTextEditorParent (), null);
        getTextEditorParent ().setVisible (false);
        setTextEditor (new Text (getTextEditorParent (), SWT.NONE));
        getTextEditorParent ().setBackground (getTextEditor ().getBackground ());
        proposalPopupBackgroundColor = new Color (getShell ().getDisplay (), new RGB (254, 241, 233));
        proposalPopupForegroundColor = new Color (getShell ().getDisplay (), new RGB (0, 0, 0));
    }

    private void init () {
        getTextEditorParent ().addListener (SWT.Paint, new Listener () {

            public void handleEvent (Event e) {
                Point textSize = getTextEditor ().getSize ();
                Point parentSize = getTextEditorParent ().getSize ();
                e.gc.drawRectangle (0, 0, Math.min (textSize.x + 4, parentSize.x - 1), parentSize.y - 1);
            }

        }

        );
        getTextEditor ().addListener (SWT.Modify, new Listener () {

            public void handleEvent (Event e) {
                adjustTextEditorBounds ();
                getTextEditorParent ().redraw ();
            }

        }

        );
        getTextEditor ().addKeyListener (new KeyAdapter () {

            public void keyReleased (KeyEvent event) {
                if (event.character == SWT.CR) {
                    endEdit ();
                } else if (event.character == SWT.ESC) {
                    cancelEdit ();
                }

            }

        }

        );
        getTextEditor ().addFocusListener (new FocusAdapter () {

            public void focusGained (FocusEvent e) {
                return;
            }

            public void focusLost (FocusEvent fe) {
                Shell activeShell = fe.display.getActiveShell ();
                if (activeShell != null && getTextEditor ().getShell ().equals (activeShell.getParent ())) {
                    return;
                }
                if ((getTreeViewer ().getSelection ().isEmpty () == false) && canProceed ()) {
                    final Object obj = getTreeItem ().getData ();
                    getTreeItem ().getDisplay ().asyncExec (new Runnable () {

                        public void run () {
                            if (! isDisposed ()) {
                                getTreeViewer ().update (obj, null);
                            }
                        }

                    }

                    );
                }
                endEdit ();
            }

        }

        );
        getTreeViewer ().addSelectionChangedListener (new ISelectionChangedListener () {

            public void selectionChanged (SelectionChangedEvent event) {
                cancelEdit ();
            }

        }

        );
        if (! isF2disabled ()) {
            getTree ().addKeyListener (new KeyAdapter () {

                public void keyReleased (KeyEvent event) {
                    if (event.keyCode == SWT.F2) {
                        startEdit ();
                    }
                }

            }

            );
        }
    }

    private void initTextActionHandler (IActionBars actionBars, List disableActionsIds) {
        if (actionBars == null) {
            return;
        }
        actionBars.getMenuManager ().addMenuListener (new IMenuListener () {

            public void menuAboutToShow (IMenuManager manager) {
                cancelEdit ();
            }

        }

        );
        setTextActionHandler (new InlineTextActionHandler (actionBars, getTextEditor (), disableActionsIds));
    }

    private void adjustTextEditorBounds () {
        Point textSize = getTextEditor ().computeSize (SWT.DEFAULT, SWT.DEFAULT);
        textSize.x += textSize.y;
        Point parentSize = getTextEditorParent ().getSize ();
        getTextEditor ().setBounds (2, 1, Math.min (textSize.x, parentSize.x - 4), parentSize.y - 2);
    }

    private Tree getTree () {
        return tree;
    }

    public String getCurrentText () {
        return (canProceed ()) ? getTextEditor ().getText () : null;
    }

    public String getInitialText () {
        return initialText;
    }

    public String getFinalText () {
        return finalText;
    }

    private Text getTextEditor () {
        return textEditor;
    }

    private Composite getTextEditorParent () {
        return textEditorParent;
    }

    private void setEditStringProvider (IEditStringProvider editStringProvider) {
        this.editStringProvider = editStringProvider;
    }

    private void setTextEditor (Text textEditor) {
        this.textEditor = textEditor;
    }

    private void setTextEditorParent (Composite textEditorParent) {
        this.textEditorParent = textEditorParent;
    }

    private void setTree (Tree tree) {
        this.tree = tree;
    }

    private void setTreeItem (TreeItem treeItem) {
        this.treeItem = treeItem;
    }

    private Rectangle getNullRectangle () {
        return nullRectangle;
    }

    private void setFinalText (String finalText) {
        this.finalText = finalText;
    }

    private void setInitialText (String initialText) {
        this.initialText = initialText;
    }

    private IInlineTextActionHandler getTextActionHandler () {
        return textActionHandler;
    }

    private void setTextActionHandler (IInlineTextActionHandler textActionHandler) {
        this.textActionHandler = textActionHandler;
    }

}

