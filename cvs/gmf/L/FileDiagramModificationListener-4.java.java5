package org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.transaction.DemultiplexingListener;

import org.eclipse.emf.transaction.NotificationFilter;

import org.eclipse.emf.transaction.ResourceSetListener;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramModificationListener;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.ui.IFileEditorInput;

public class FileDiagramModificationListener extends DiagramModificationListener {
    private ResourceSetListener diagramSavedListener = null;

    public FileDiagramModificationListener (final FileDocumentProvider documentProvider, final DiagramDocument document, final IFileEditorInput input) {
        super (documentProvider, document);
        final Diagram diagram = document.getDiagram ();
        NotificationFilter diagramResourceModifiedFilter = NotificationFilter.createNotifierFilter (diagram.eResource ()).and (NotificationFilter.createEventTypeFilter (Notification.SET).or (NotificationFilter.createEventTypeFilter (Notification.UNSET))).and (NotificationFilter.createFeatureFilter (Resource.class, Resource.RESOURCE__IS_MODIFIED));
        if (diagramSavedListener == null) {
            diagramSavedListener = new DemultiplexingListener (diagramResourceModifiedFilter) {

                protected void handleNotification (TransactionalEditingDomain domain, Notification notification) {
                    if (diagram != null && notification.getNotifier () instanceof Resource) {
                        Resource notifierResource = (Resource) notification.getNotifier ();
                        EList contents = notifierResource.getContents ();
                        if (! contents.isEmpty ()) {
                            Object root = contents.get (0);
                            if (notification.getNewBooleanValue () == false) {
                                if (root instanceof EObject && ((EObject) root).eResource () != null && ((EObject) root).eResource ().equals (notifierResource) && notifierResource.isLoaded ()) {
                                    document.setContent (document.getContent (), documentProvider.computeModificationStamp (input.getFile ()));
                                    documentProvider.handleExistingDocumentSaved (input);
                                }
                            }
                        }
                    }
                }

            }

            ;
        }
    }

    public void startListening () {
        super.startListening ();
        getEditingDomain ().addResourceSetListener (diagramSavedListener);
    }

    public void stopListening () {
        getEditingDomain ().removeResourceSetListener (diagramSavedListener);
        super.stopListening ();
    }

}

