package org.eclipse.gmf.runtime.diagram.ui.commands;

import java.util.ArrayList;

import java.util.Collections;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.requests.CreateConnectionRequest;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.common.core.util.ObjectAdapter;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.commands.ElementTypeLabelProvider;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.menus.PopupMenu;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewAndElementRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateUnspecifiedTypeConnectionRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequestFactory;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;

import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantService;

import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.SelectExistingElementForSourceOperation;

import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.SelectExistingElementForTargetOperation;

import org.eclipse.jface.viewers.ILabelProvider;

import org.eclipse.osgi.util.NLS;

import org.eclipse.swt.widgets.Display;

public class PromptForConnectionAndEndCommand extends PopupMenuCommand {
    protected class ConnectionLabelProvider extends ElementTypeLabelProvider {

        public String getText (Object element) {
            String theInputStr = null;
            if (isDirectionReversed ()) theInputStr = DiagramUIMessages.ConnectionHandle_Popup_CreateXFrom;
            else theInputStr = DiagramUIMessages.ConnectionHandle_Popup_CreateXTo;

            String text = NLS.bind (theInputStr, super.getText (element));
            return text;
        }

    }

    protected class EndLabelProvider extends ElementTypeLabelProvider {

        public String getText (Object element) {
            if (element instanceof IElementType) {
                String theInputStr = DiagramUIMessages.ConnectionHandle_Popup_NewX;
                String text = NLS.bind (theInputStr, super.getText (element));
                return text;
            } else {
                return element.toString ();
            }
        }

    }

    protected class ConnectionAndEndLabelProvider extends ElementTypeLabelProvider {
        private Object connectionItem;

        protected ConnectionAndEndLabelProvider (Object connectionItem) {
            this.connectionItem = connectionItem;
        }

        public String getText (Object element) {
            String theInputStr = null;
            if (element instanceof IElementType) {
                if (isDirectionReversed ()) theInputStr = DiagramUIMessages.ConnectionHandle_Popup_CreateXFromNewY;
                else theInputStr = DiagramUIMessages.ConnectionHandle_Popup_CreateXToNewY;

                String text = NLS.bind (theInputStr, new Object [] {super.getText (connectionItem), super.getText (element)});
                return text;
            } else {
                if (isDirectionReversed ()) theInputStr = DiagramUIMessages.ConnectionHandle_Popup_CreateXFromY;
                else theInputStr = DiagramUIMessages.ConnectionHandle_Popup_CreateXToY;

                String text = NLS.bind (theInputStr, new Object [] {super.getText (connectionItem), super.getText (element)});
                return text;
            }
        }

        protected Object getConnectionItem () {
            return connectionItem;
        }

    }

    private static String EXISTING_ELEMENT = DiagramUIMessages.ConnectionHandle_Popup_ExistingElement;
    private ConnectionLabelProvider connectionLabelProvider;
    private static EndLabelProvider endLabelProvider;
    private ObjectAdapter connectionAdapter = new ObjectAdapter ();
    private ObjectAdapter endAdapter = new ObjectAdapter ();
    private CreateConnectionRequest request;
    private IGraphicalEditPart containerEP;

    public PromptForConnectionAndEndCommand (CreateConnectionRequest request, IGraphicalEditPart containerEP) {
        super (DiagramUIMessages.Command_GetRelationshipTypeAndEndFromUser_Label, Display.getCurrent ().getActiveShell ());
        this.request = request;
        this.containerEP = containerEP;
    }

    protected List getConnectionMenuContent () {
        List validRelTypes = new ArrayList ();
        if (request instanceof CreateUnspecifiedTypeConnectionRequest) {
            List allRelTypes = null;
            if (((CreateUnspecifiedTypeConnectionRequest) request).useModelingAssistantService ()) {
                allRelTypes = isDirectionReversed () ? ModelingAssistantService.getInstance ().getRelTypesOnTarget (getKnownEnd ()) : ModelingAssistantService.getInstance ().getRelTypesOnSource (getKnownEnd ());
            } else {
                allRelTypes = ((CreateUnspecifiedTypeConnectionRequest) request).getElementTypes ();
            }
            if (isDirectionReversed ()) {
                validRelTypes = allRelTypes;
            } else {
                for (Iterator iter = allRelTypes.iterator ();
                iter.hasNext ();) {
                    IElementType rType = (IElementType) iter.next ();
                    if (((CreateConnectionRequest) ((CreateUnspecifiedTypeConnectionRequest) request).getRequestForType (rType)).getStartCommand () != null) {
                        validRelTypes.add (rType);
                    }
                }
            }
        } else if (request instanceof CreateConnectionViewAndElementRequest) {
            if (((CreateConnectionViewAndElementRequest) request).getStartCommand () != null) {
                validRelTypes.add (((CreateRelationshipRequest) ((CreateConnectionViewAndElementRequest) request).getConnectionViewAndElementDescriptor ().getCreateElementRequestAdapter ().getAdapter (CreateRelationshipRequest.class)).getElementType ());
            }
        } else if (request instanceof CreateConnectionViewRequest) {
            if (((CreateConnectionViewRequest) request).getStartCommand () != null) {
                Object type = ((CreateConnectionViewRequest) request).getConnectionViewDescriptor ().getElementAdapter ().getAdapter (IElementType.class);
                if (type != null) {
                    validRelTypes.add (type);
                }
            }
        }

        return validRelTypes;
    }

    protected List getEndMenuContent (Object connectionItem) {
        if (connectionItem instanceof IElementType) {
            IElementType connectionType = (IElementType) connectionItem;
            List menuContent = isDirectionReversed () ? ModelingAssistantService.getInstance ().getTypesForSource (getKnownEnd (), connectionType) : ModelingAssistantService.getInstance ().getTypesForTarget (getKnownEnd (), connectionType);
            menuContent = filterUnsupportedNodeTypes (menuContent);
            if (! menuContent.isEmpty () && supportsExistingElement (connectionType)) {
                menuContent.add (EXISTING_ELEMENT);
            }
            return menuContent;
        }
        return Collections.EMPTY_LIST;
    }

    protected PopupMenu createPopupMenu () {
        final List connectionMenuContent = getConnectionMenuContent ();
        if (connectionMenuContent == null || connectionMenuContent.isEmpty ()) {
            return null;
        } else if (connectionMenuContent.size () == 1) {
            List menuContent = getEndMenuContent (connectionMenuContent.get (0));
            if (menuContent == null || menuContent.isEmpty ()) {
                return null;
            }
            ILabelProvider labelProvider = getConnectionAndEndLabelProvider (connectionMenuContent.get (0));
            return new PopupMenu (menuContent, labelProvider) {

                public Object getResult () {
                    Object endResult = super.getResult ();
                    if (endResult == null) {
                        return null;
                    } else {
                        List resultList = new ArrayList (2);
                        resultList.add (connectionMenuContent.get (0));
                        resultList.add (endResult);
                        return resultList;
                    }
                }

            }

            ;
        } else {
            List menuContent = new ArrayList ();
            for (Iterator iter = connectionMenuContent.iterator ();
            iter.hasNext ();) {
                Object connectionItem = iter.next ();
                List subMenuContent = getEndMenuContent (connectionItem);
                if (subMenuContent.isEmpty ()) {
                    continue;
                }
                PopupMenu subMenu = new PopupMenu (subMenuContent, getEndLabelProvider ());
                menuContent.add (new PopupMenu.CascadingMenu (connectionItem, subMenu));
            }
            if (! menuContent.isEmpty ()) {
                return new PopupMenu (menuContent, getConnectionLabelProvider ());
            }
        }

        return null;
    }

    private List filterUnsupportedNodeTypes (List allTypes) {
        List validTypes = new ArrayList ();
        for (Iterator iter = allTypes.iterator ();
        iter.hasNext ();) {
            IElementType type = (IElementType) iter.next ();
            Request createRequest = CreateViewRequestFactory.getCreateShapeRequest (type, containerEP.getDiagramPreferencesHint ());
            EditPart target = containerEP.getTargetEditPart (createRequest);
            if (target != null) {
                Command cmd = target.getCommand (createRequest);
                if (cmd != null && cmd.canExecute ()) {
                    validTypes.add (type);
                }
            }
        }
        return validTypes;
    }

    public boolean canExecute () {
        return createPopupMenu () != null;
    }

    protected CommandResult doExecuteWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException {
        PopupMenu popup = createPopupMenu ();
        if (popup == null) {
            return CommandResult.newErrorCommandResult (getLabel ());
        }
        setPopupMenu (popup);
        CommandResult cmdResult = super.doExecuteWithResult (progressMonitor, info);
        if (! cmdResult.getStatus ().isOK ()) {
            return cmdResult;
        }
        Object result = cmdResult.getReturnValue ();
        if (result instanceof List) {
            List resultList = (List) result;
            if (resultList.size () == 2) {
                connectionAdapter.setObject (resultList.get (0));
                Object targetResult = resultList.get (1);
                if (targetResult.equals (EXISTING_ELEMENT)) {
                    targetResult = isDirectionReversed () ? ModelingAssistantService.getInstance ().selectExistingElementForSource (getKnownEnd (), (IElementType) resultList.get (0)) : ModelingAssistantService.getInstance ().selectExistingElementForTarget (getKnownEnd (), (IElementType) resultList.get (0));
                    if (targetResult == null) {
                        return CommandResult.newCancelledCommandResult ();
                    }
                }
                endAdapter.setObject (targetResult);
                return CommandResult.newOKCommandResult ();
            }
        }
        return CommandResult.newErrorCommandResult (getLabel ());
    }

    private boolean supportsExistingElement (IElementType connectionType) {
        if (isDirectionReversed ()) {
            if (ModelingAssistantService.getInstance ().provides (new SelectExistingElementForSourceOperation (getKnownEnd (), connectionType))) {
                return true;
            }
        } else if (ModelingAssistantService.getInstance ().provides (new SelectExistingElementForTargetOperation (getKnownEnd (), connectionType))) {
            return true;
        }

        return false;
    }

    public ObjectAdapter getConnectionAdapter () {
        return connectionAdapter;
    }

    public IAdaptable getEndAdapter () {
        return endAdapter;
    }

    protected boolean isDirectionReversed () {
        return (request instanceof CreateUnspecifiedTypeConnectionRequest && ((CreateUnspecifiedTypeConnectionRequest) request).isDirectionReversed ());
    }

    private EditPart getKnownEnd () {
        return request.getSourceEditPart ();
    }

    protected ILabelProvider getConnectionLabelProvider () {
        if (connectionLabelProvider == null) {
            connectionLabelProvider = new ConnectionLabelProvider ();
        }
        return connectionLabelProvider;
    }

    protected ILabelProvider getEndLabelProvider () {
        if (endLabelProvider == null) {
            endLabelProvider = new EndLabelProvider ();
        }
        return endLabelProvider;
    }

    protected ILabelProvider getConnectionAndEndLabelProvider (Object connectionItem) {
        return new ConnectionAndEndLabelProvider (connectionItem);
    }

}

