package org.eclipse.gmf.runtime.common.ui.services.action.internal.contributionitem;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.jface.action.IMenuManager;

import org.eclipse.jface.text.IMarkSelection;

import org.eclipse.jface.text.ITextSelection;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.gmf.runtime.common.core.service.AbstractProviderConfiguration;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionDebugOptions;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionPlugin;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionStatusCodes;

public class ProviderContributionDescriptor extends AbstractProviderConfiguration {
    private static final String PART_CONTRIBUTION = "partContribution";
    private static final String PART_MENU_CONTRIBUTION = "partMenu";
    private static final String PART_MENUGROUP_CONTRIBUTION = "partMenuGroup";
    private static final String PART_ACTION_CONTRIBUTION = "partAction";
    private static final String PART_ACTIONGROUP_CONTRIBUTION = "partActionGroup";
    private static final String PART_CUSTOM_CONTRIBUTION = "partCustom";
    private static final String POPUP_CONTRIBUTION = "popupContribution";
    private static final String POPUP_MENU_CONTRIBUTION = "popupMenu";
    private static final String POPUP_MENUGROUP_CONTRIBUTION = "popupMenuGroup";
    private static final String POPUP_ACTION_CONTRIBUTION = "popupAction";
    private static final String POPUP_ACTIONGROUP_CONTRIBUTION = "popupActionGroup";
    private static final String POPUP_CUSTOM_CONTRIBUTION = "popupCustom";
    private static final String STRUCTURED_CRITERIA = "popupStructuredContributionCriteria";
    private static final String TEXT_CRITERIA = "popupTextContributionCriteria";
    private static final String MARK_CRITERIA = "popupMarkContributionCriteria";
    private static final String CONTRIBUTION_ID = "id";
    private static final String CONTRIBUTION_TOOLBAR_PATH = "toolbarPath";
    private static final String CONTRIBUTION_MENUBAR_PATH = "menubarPath";
    private static final String CONTRIBUTION_PATH = "path";
    private static final String MENUGROUP_SEPARATOR = "separator";
    private static final String OBJECT_CLASS = "objectClass";
    private static final String OBJECT_COUNT = "objectCount";
    private static final String POLICY_CLASS = "policyClass";
    private static final String GLOBAL = "global";
    private static final String TEXT = "text";
    private static final String DOCUMENT_CLASS = "documentClass";
    private List partContributions = new ArrayList ();
    private List popupContributions = new ArrayList ();

    private ProviderContributionDescriptor (IConfigurationElement configElement) {
        IConfigurationElement configChildren [] = configElement.getChildren ();
        if (configChildren.length <= 1) Log.info (CommonUIServicesActionPlugin.getDefault (), CommonUIServicesActionStatusCodes.SERVICE_FAILURE, "The contribution item provider has zero contributions");

        for (int i = 1;
        i < configChildren.length; i ++) {
            if (configChildren [i].getName ().equals (PART_CONTRIBUTION)) {
                partContributions.add (new PartContributionDescriptor (configChildren [i]));
            } else if (configChildren [i].getName ().equals (POPUP_CONTRIBUTION)) {
                popupContributions.add (new PopupContributionDescriptor (configChildren [i]));
            }

        }
    }

    public static ProviderContributionDescriptor parse (IConfigurationElement configElement) {
        assert null != configElement : "null provider configuration element";
        return new ProviderContributionDescriptor (configElement);
    }

    public boolean hasContributions () {
        return ! partContributions.isEmpty () || ! popupContributions.isEmpty ();
    }

    public boolean hasContributionsFor (String partId, Class partClass) {
        assert null != partId : "null part id";
        assert null != partClass : "null part class";
        Iterator iter = partContributions.iterator ();
        while (iter.hasNext ()) {
            PartContributionDescriptor contribution = (PartContributionDescriptor) iter.next ();
            if (contribution.appliesTo (partId, partClass)) return true;

        }
        return false;
    }

    public boolean hasContributionsFor (IMenuManager popupMenu, ISelection selection) {
        assert null != popupMenu : "null popupMenu";
        assert null != selection : "null selection";
        String popupId = popupMenu.getId ();
        Class popupClass = popupMenu.getClass ();
        Iterator iter = popupContributions.iterator ();
        while (iter.hasNext ()) {
            PopupContributionDescriptor contribution = (PopupContributionDescriptor) iter.next ();
            if (contribution.appliesTo (popupId, popupClass, selection)) return true;

        }
        return false;
    }

    public List getContributionsFor (String partId, Class partClass) {
        assert null != partId : "null part id";
        assert null != partClass : "null part class";
        List contributions = new ArrayList ();
        Iterator iter = partContributions.iterator ();
        while (iter.hasNext ()) {
            PartContributionDescriptor contribution = (PartContributionDescriptor) iter.next ();
            if (contribution.appliesTo (partId, partClass)) {
                contributions.addAll (contribution.getContributionItems ());
            }
        }
        return contributions;
    }

    public List getContributionsFor (IMenuManager popupMenu, ISelection selection) {
        assert null != popupMenu : "null popupMenu";
        assert null != selection : "null selection";
        List contributions = new ArrayList ();
        Iterator iter = popupContributions.iterator ();
        while (iter.hasNext ()) {
            PopupContributionDescriptor contribution = (PopupContributionDescriptor) iter.next ();
            if (contribution.appliesTo (popupMenu.getId (), popupMenu.getClass (), selection)) {
                contributions.addAll (contribution.getContributionItems ());
            }
        }
        return contributions;
    }

    private static abstract class AbstractContributionDescriptor {
        private final String targetId;
        private final String targetClassName;
        private List contributionItems = new ArrayList ();

        public AbstractContributionDescriptor (IConfigurationElement configElement) {
            targetId = configElement.getAttribute (ID);
            targetClassName = configElement.getAttribute (CLASS);
            if (targetId == null && targetClassName == null) Log.info (CommonUIServicesActionPlugin.getDefault (), CommonUIServicesActionStatusCodes.SERVICE_FAILURE, "Both the target id and class are missing for the contribution");

        }

        protected boolean appliesTo (String sourceId, Class sourceClass) {
            if (targetId != null && sourceId != null) {
                return targetId.equals (sourceId);
            }
            if (targetClassName != null && sourceClass != null) {
                return isAssignableTo (sourceClass, targetClassName);
            }
            return false;
        }

        public List getContributionItems () {
            return contributionItems;
        }

    }

    private static class PartContributionDescriptor extends AbstractContributionDescriptor {

        public PartContributionDescriptor (IConfigurationElement configElement) {
            super (configElement);
            IConfigurationElement configChildren [] = configElement.getChildren ();
            if (configChildren.length <= 0) Log.info (CommonUIServicesActionPlugin.getDefault (), CommonUIServicesActionStatusCodes.SERVICE_FAILURE, "The part contribution has zero contribution items");

            for (int i = 0;
            i < configChildren.length; i ++) {
                String contributionType = configChildren [i].getName ();
                if (contributionType.equals (PART_MENU_CONTRIBUTION)) getContributionItems ().add (new PartMenuDescriptor (configChildren [i]));
                else if (contributionType.equals (PART_MENUGROUP_CONTRIBUTION)) getContributionItems ().add (new PartMenuGroupDescriptor (configChildren [i]));
                else if (contributionType.equals (PART_ACTION_CONTRIBUTION)) getContributionItems ().add (new PartActionDescriptor (configChildren [i]));
                else if (contributionType.equals (PART_CUSTOM_CONTRIBUTION)) getContributionItems ().add (new PartCustomDescriptor (configChildren [i]));
                else if (contributionType.equals (PART_ACTIONGROUP_CONTRIBUTION)) getContributionItems ().add (new PartActionGroupDescriptor (configChildren [i]));

            }
        }

        public boolean appliesTo (String sourceId, Class sourceClass) {
            return super.appliesTo (sourceId, sourceClass);
        }

    }

    private static class PopupContributionDescriptor extends AbstractContributionDescriptor {
        private PopupContributionCriteria [] criteria;

        public PopupContributionDescriptor (IConfigurationElement configElement) {
            super (configElement);
            criteria = readCriteria (configElement);
            IConfigurationElement configChildren [] = configElement.getChildren ();
            if (configChildren.length <= 0) Log.info (CommonUIServicesActionPlugin.getDefault (), CommonUIServicesActionStatusCodes.SERVICE_FAILURE, "The part contribution has zero contribution items");

            for (int i = 0;
            i < configChildren.length; i ++) {
                String contributionType = configChildren [i].getName ();
                if (contributionType.equals (POPUP_MENU_CONTRIBUTION)) getContributionItems ().add (new PopupMenuDescriptor (configChildren [i]));
                else if (contributionType.equals (POPUP_MENUGROUP_CONTRIBUTION)) getContributionItems ().add (new PopupMenuGroupDescriptor (configChildren [i]));
                else if (contributionType.equals (POPUP_ACTION_CONTRIBUTION)) getContributionItems ().add (new PopupActionDescriptor (configChildren [i]));
                else if (contributionType.equals (POPUP_CUSTOM_CONTRIBUTION)) getContributionItems ().add (new PopupCustomDescriptor (configChildren [i]));
                else if (contributionType.equals (POPUP_ACTIONGROUP_CONTRIBUTION)) getContributionItems ().add (new PopupActionGroupDescriptor (configChildren [i]));

            }
        }

        protected PopupContributionCriteria [] readCriteria (IConfigurationElement configElement) {
            IConfigurationElement [] criteriaEl;
            criteriaEl = configElement.getChildren (STRUCTURED_CRITERIA);
            if (criteriaEl.length > 0) {
                PopupContributionCriteria [] pcc = new PopupContributionCriteria [criteriaEl.length];
                for (int i = 0;
                i < criteriaEl.length; i ++) {
                    pcc [i] = new PopupStructuredContributionCriteria (criteriaEl [i]);
                }
                return pcc;
            }
            criteriaEl = configElement.getChildren (TEXT_CRITERIA);
            if (criteriaEl.length > 0) {
                PopupContributionCriteria [] pcc = new PopupContributionCriteria [criteriaEl.length];
                for (int i = 0;
                i < criteriaEl.length; i ++) {
                    pcc [i] = new PopupTextContributionCriteria (criteriaEl [i]);
                }
                return pcc;
            }
            criteriaEl = configElement.getChildren (MARK_CRITERIA);
            if (criteriaEl.length > 0) {
                PopupContributionCriteria [] pcc = new PopupContributionCriteria [criteriaEl.length];
                for (int i = 0;
                i < criteriaEl.length; i ++) {
                    pcc [i] = new PopupMarkContributionCriteria (criteriaEl [i]);
                }
                return pcc;
            }
            return null;
        }

        public boolean appliesTo (String sourceId, Class sourceClass, ISelection selection) {
            if (! appliesTo (sourceId, sourceClass)) return false;

            if (criteria != null) {
                if (! isCriteriaMet (selection)) return false;

            }
            return true;
        }

        protected boolean isCriteriaMet (ISelection selection) {
            for (int i = 0;
            i < criteria.length; i ++) {
                if (criteria [i].appliesTo (selection)) return true;

            }
            return false;
        }

    }

    private static abstract class AbstractContributionItemDescriptor {
        private String id;

        public AbstractContributionItemDescriptor (IConfigurationElement configElement) {
            this.id = configElement.getAttribute (CONTRIBUTION_ID);
            assert null != id : "The contribution item's id is missing";
        }

        public String getId () {
            return id;
        }

        protected static String extractMenuPath (String location) {
            if (location != null) {
                int loc = location.lastIndexOf ('/');
                if (loc != - 1) {
                    return location.substring (0, loc == 0 ? 1 : loc);
                }
            }
            return null;
        }

        protected static String extractGroup (String location) {
            if (location != null) {
                int loc = location.lastIndexOf ('/');
                if (loc != - 1) {
                    return location.substring (loc + 1);
                }
            }
            return null;
        }

    }

    private static abstract class AbstractPartContributionItemDescriptor extends AbstractContributionItemDescriptor {
        private String menubarPath;
        private String menubarGroup;
        private String toolbarPath;
        private String toolbarGroup;

        public AbstractPartContributionItemDescriptor (IConfigurationElement configElement) {
            super (configElement);
            String location;
            location = configElement.getAttribute (CONTRIBUTION_MENUBAR_PATH);
            if (location != null) {
                menubarPath = extractMenuPath (location);
                menubarGroup = extractGroup (location);
            }
            location = configElement.getAttribute (CONTRIBUTION_TOOLBAR_PATH);
            if (location != null) {
                toolbarPath = extractMenuPath (location);
                toolbarGroup = extractGroup (location);
            }
        }

        public String getMenubarPath () {
            return menubarPath;
        }

        public String getMenubarGroup () {
            return menubarGroup;
        }

        public String getToolbarPath () {
            return toolbarPath;
        }

        public String getToolbarGroup () {
            return toolbarGroup;
        }

    }

    private static abstract class AbstractPopupContributionItemDescriptor extends AbstractContributionItemDescriptor {
        private String path;
        private String group;

        public AbstractPopupContributionItemDescriptor (IConfigurationElement configElement) {
            super (configElement);
            String location = configElement.getAttribute (CONTRIBUTION_PATH);
            if (location != null) {
                path = extractMenuPath (location);
                group = extractGroup (location);
            } else {
                path = "/";
                group = ContributionItemConstants.GROUP_ADDITIONS;
            }
        }

        public String getPath () {
            return path;
        }

        public String getGroup () {
            return group;
        }

    }

    public static class PartMenuDescriptor extends AbstractPartContributionItemDescriptor {

        public PartMenuDescriptor (IConfigurationElement configElement) {
            super (configElement);
        }

    }

    public static class PartMenuGroupDescriptor extends AbstractPartContributionItemDescriptor {
        private Boolean separator;

        public PartMenuGroupDescriptor (IConfigurationElement configElement) {
            super (configElement);
            String sep = configElement.getAttribute (MENUGROUP_SEPARATOR);
            separator = sep == null ? Boolean.TRUE : Boolean.valueOf (sep);
        }

        public boolean isSeparator () {
            return separator.booleanValue ();
        }

    }

    public static class PartActionDescriptor extends AbstractPartContributionItemDescriptor {
        private Boolean isGlobal;

        public PartActionDescriptor (IConfigurationElement configElement) {
            super (configElement);
            String global = configElement.getAttribute (GLOBAL);
            isGlobal = global == null ? Boolean.FALSE : Boolean.valueOf (global);
        }

        public boolean isGlobal () {
            return isGlobal.booleanValue ();
        }

    }

    public static class PartActionGroupDescriptor extends AbstractPartContributionItemDescriptor {

        public PartActionGroupDescriptor (IConfigurationElement configElement) {
            super (configElement);
        }

    }

    public static class PartCustomDescriptor extends AbstractPartContributionItemDescriptor {

        public PartCustomDescriptor (IConfigurationElement configElement) {
            super (configElement);
        }

    }

    public static class PopupMenuDescriptor extends AbstractPopupContributionItemDescriptor {

        public PopupMenuDescriptor (IConfigurationElement configElement) {
            super (configElement);
        }

    }

    public static class PopupMenuGroupDescriptor extends AbstractPopupContributionItemDescriptor {
        private Boolean separator;

        public PopupMenuGroupDescriptor (IConfigurationElement configElement) {
            super (configElement);
            String sep = configElement.getAttribute (MENUGROUP_SEPARATOR);
            separator = sep == null ? Boolean.TRUE : Boolean.valueOf (sep);
        }

        public boolean isSeparator () {
            return separator.booleanValue ();
        }

    }

    public static class PopupActionDescriptor extends AbstractPopupContributionItemDescriptor {

        public PopupActionDescriptor (IConfigurationElement configElement) {
            super (configElement);
        }

    }

    public static class PopupActionGroupDescriptor extends AbstractPopupContributionItemDescriptor {

        public PopupActionGroupDescriptor (IConfigurationElement configElement) {
            super (configElement);
        }

    }

    public static class PopupCustomDescriptor extends AbstractPopupContributionItemDescriptor {

        public PopupCustomDescriptor (IConfigurationElement configElement) {
            super (configElement);
        }

    }

    private static class PopupContributionCriteria {
        private IConfigurationElement configElement;
        private String policyClassName;
        private IPopupMenuContributionPolicy policy = null;

        public PopupContributionCriteria (IConfigurationElement configElement) {
            this.configElement = configElement;
            this.policyClassName = configElement.getAttribute (POLICY_CLASS);
        }

        public boolean appliesTo (ISelection selection) {
            if (policyClassName != null) {
                IPopupMenuContributionPolicy thePolicy = getPolicy ();
                if (thePolicy == null || ! thePolicy.appliesTo (selection, configElement)) return false;

            }
            return true;
        }

        protected IPopupMenuContributionPolicy getPolicy () {
            if (null == policy) {
                try {
                    Object extension = configElement.createExecutableExtension (policyClassName);
                    if (extension instanceof IPopupMenuContributionPolicy) policy = (IPopupMenuContributionPolicy) extension;
                    else Log.info (CommonUIServicesActionPlugin.getDefault (), CommonUIServicesActionStatusCodes.SERVICE_FAILURE, "The supplied policy class name does not implement IPopupMenuContributionPolicy");

                } catch (CoreException ce) {
                    Trace.catching (CommonUIServicesActionPlugin.getDefault (), CommonUIServicesActionDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getPolicy", ce);
                    Log.log (CommonUIServicesActionPlugin.getDefault (), ce.getStatus ().getSeverity (), CommonUIServicesActionStatusCodes.SERVICE_FAILURE, ce.getStatus ().getMessage (), ce.getStatus ().getException ());
                }
            }
            return policy;
        }

    }

    private static class PopupStructuredContributionCriteria extends PopupContributionCriteria {
        private ObjectDescriptor object;
        private Integer targetCount;
        private boolean orHigher;

        public PopupStructuredContributionCriteria (IConfigurationElement configElement) {
            super (configElement);
            object = new ObjectDescriptor (configElement, OBJECT_CLASS);
            String countStr = configElement.getAttribute (OBJECT_COUNT);
            this.orHigher = false;
            if (countStr != null) {
                if (countStr.equals ("*")) {
                    this.targetCount = Integer.valueOf ("0");
                    this.orHigher = true;
                } else if (countStr.equals ("+")) {
                    this.targetCount = Integer.valueOf ("1");
                    this.orHigher = true;
                } else {
                    int plusIndex = countStr.lastIndexOf ("+");
                    if (plusIndex > 0) {
                        this.orHigher = true;
                        countStr = countStr.substring (0, plusIndex);
                    }
                    try {
                        this.targetCount = Integer.valueOf (countStr);
                    } catch (NumberFormatException e) {
                        this.orHigher = true;
                        this.targetCount = Integer.valueOf ("1");
                    }
                }

            }
        }

        public boolean appliesTo (ISelection selection) {
            if (! (selection instanceof IStructuredSelection)) return false;

            IStructuredSelection structuredSelection = (IStructuredSelection) selection;
            Iterator objects = structuredSelection.iterator ();
            while (objects.hasNext ()) {
                if (! object.sameAs (objects.next ())) return false;

            }
            if (targetCount != null) {
                if (orHigher) {
                    if (structuredSelection.size () < targetCount.intValue ()) return false;

                } else {
                    if (structuredSelection.size () != targetCount.intValue ()) return false;

                }
            }
            return super.appliesTo (selection);
        }

    }

    private static class PopupTextContributionCriteria extends PopupContributionCriteria {
        private String text;

        public PopupTextContributionCriteria (IConfigurationElement configElement) {
            super (configElement);
            text = configElement.getAttribute (TEXT);
        }

        public boolean appliesTo (ISelection selection) {
            if (! (selection instanceof ITextSelection)) return false;

            ITextSelection textSelection = (ITextSelection) selection;
            if (text != null) {
                if (! text.equals (textSelection.getText ())) return false;

            }
            return super.appliesTo (selection);
        }

    }

    private static class PopupMarkContributionCriteria extends PopupContributionCriteria {
        private ObjectDescriptor document;

        public PopupMarkContributionCriteria (IConfigurationElement configElement) {
            super (configElement);
            document = new ObjectDescriptor (configElement, DOCUMENT_CLASS);
        }

        public boolean appliesTo (ISelection selection) {
            if (! (selection instanceof IMarkSelection)) return false;

            IMarkSelection markSelection = (IMarkSelection) selection;
            if (! document.sameAs (markSelection.getDocument ())) return false;

            return super.appliesTo (selection);
        }

    }

}

