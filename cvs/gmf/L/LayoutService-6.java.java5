package org.eclipse.gmf.runtime.diagram.ui.services.layout;

import java.util.ArrayList;

import java.util.List;

import java.util.ListIterator;

import java.util.Map;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.common.core.util.ObjectAdapter;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.OffscreenEditPartFactory;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.LayoutNode;

import org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.LayoutNodesOperation;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.util.Assert;

import org.eclipse.swt.widgets.Shell;

final public class LayoutService extends Service implements ILayoutNodeProvider {
    private final static LayoutService instance = new LayoutService ();

    private LayoutService () {
        super ();
        configureProviders (DiagramUIPlugin.getPluginId (), "layoutProviders");
    }

    public static LayoutService getInstance () {
        return instance;
    }

    private Object execute (LayoutNodesOperation operation) {
        List results = execute (ExecutionStrategy.FIRST, operation);
        return results.isEmpty () ? null : results.get (0);
    }

    public ILayoutNode getLayoutNode (Node node) {
        if (null == node) {
            throw new NullPointerException ("Argument 'node' is null");
        }
        Shell shell = new Shell ();
        try {
            Diagram diagram = node.getDiagram ();
            DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance ().createDiagramEditPart (diagram, shell);
            Map registry = diagramEP.getViewer ().getEditPartRegistry ();
            GraphicalEditPart gep = (GraphicalEditPart) registry.get (node);
            Dimension size = gep.getFigure ().getBounds ().getSize ();
            return new LayoutNode (node, size.width, size.height);
        } finally {
            shell.dispose ();
        }
    }

    private void checkValidLayoutNodes (List nodes) {
        if (null == nodes) {
            throw new NullPointerException ("Argument 'nodes' is null");
        }
        if (nodes.size () == 0) {
            throw new IllegalArgumentException ("Argument 'nodes' is empty");
        }
        ListIterator li = nodes.listIterator ();
        EObject parent = null;
        while (li.hasNext ()) {
            Object next = li.next ();
            if (! (next instanceof ILayoutNode)) throw new IllegalArgumentException ("Argument 'nodes' contains objects which aren't of type 'ILayoutNode'");

            ILayoutNode node = (ILayoutNode) next;
            if (parent == null) parent = ViewUtil.getContainerView (node.getNode ());
            else if (ViewUtil.getContainerView (node.getNode ()) != parent) throw new IllegalArgumentException ("Argument 'nodes' contains objects which have a different parent containment");

        }
    }

    private void checkValidNodes (List nodes) {
        if (null == nodes) {
            throw new NullPointerException ("Argument 'nodes' is null");
        }
        if (nodes.size () == 0) {
            throw new IllegalArgumentException ("Argument 'nodes' is empty");
        }
        ListIterator li = nodes.listIterator ();
        EObject parent = null;
        while (li.hasNext ()) {
            Object next = li.next ();
            if (! (next instanceof Node)) throw new IllegalArgumentException ("Argument 'nodes' contains objects which aren't of type 'Node'");

            Node node = (Node) next;
            if (parent == null) parent = ViewUtil.getContainerView (node);
            else if (ViewUtil.getContainerView (node) != parent) throw new IllegalArgumentException ("Argument 'nodes' contains objects which have a different parent containment");

        }
    }

    public List getLayoutNodes (DiagramEditPart diagramEP, List nodes) {
        checkValidNodes (nodes);
        Shell shell = null;
        try {
            if (diagramEP == null) {
                shell = new Shell ();
                Diagram diagram = ((Node) nodes.get (0)).getDiagram ();
                diagramEP = OffscreenEditPartFactory.getInstance ().createDiagramEditPart (diagram, shell);
            }
            Map registry = diagramEP.getViewer ().getEditPartRegistry ();
            List layoutNodes = new ArrayList (nodes.size ());
            ListIterator li = nodes.listIterator ();
            while (li.hasNext ()) {
                Node node = (Node) li.next ();
                GraphicalEditPart gep = (GraphicalEditPart) registry.get (node);
                Dimension size = gep.getFigure ().getBounds ().getSize ();
                layoutNodes.add (new LayoutNode (node, size.width, size.height));
            }
            return layoutNodes;
        } finally {
            if (shell != null) {
                shell.dispose ();
            }
        }
    }

    public void layout (View container, String hint) {
        if (null == container) {
            throw new NullPointerException ("Argument 'view' is null");
        }
        if (null == hint) {
            throw new NullPointerException ("Argument 'hint' is null");
        }
        Shell shell = new Shell ();
        try {
            Diagram diagram = container.getDiagram ();
            DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance ().createDiagramEditPart (diagram, shell);
            List hints = new ArrayList (2);
            hints.add (hint);
            hints.add (diagramEP);
            IAdaptable layoutHint = new ObjectAdapter (hints);
            final Runnable layoutRun = LayoutService.getInstance ().layoutLayoutNodes (getLayoutNodes (diagramEP, container.getChildren ()), false, layoutHint);
            layoutRun.run ();
        } finally {
            shell.dispose ();
        }
    }

    public void layoutNodes (List nodes, boolean offsetFromBoundingBox, String hint) {
        checkValidNodes (nodes);
        if (null == hint) {
            throw new NullPointerException ("Argument 'hint' is null");
        }
        Shell shell = new Shell ();
        try {
            Node nodeFirst = (Node) nodes.get (0);
            Diagram diagram = nodeFirst.getDiagram ();
            DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance ().createDiagramEditPart (diagram, shell);
            List hints = new ArrayList (2);
            hints.add (hint);
            hints.add (diagramEP);
            IAdaptable layoutHint = new ObjectAdapter (hints);
            final Runnable layoutRun = LayoutService.getInstance ().layoutLayoutNodes (getLayoutNodes (diagramEP, nodes), true, layoutHint);
            layoutRun.run ();
        } finally {
            shell.dispose ();
        }
    }

    public Runnable layoutLayoutNodes (List layoutNodes, boolean offsetFromBoundingBox, IAdaptable layoutHint) {
        if (null == layoutHint) {
            throw new NullPointerException ("Argument 'layoutHint' is null");
        }
        checkValidLayoutNodes (layoutNodes);
        Assert.isNotNull (layoutNodes);
        Assert.isNotNull (layoutHint);
        return (Runnable) execute (new LayoutNodesOperation (layoutNodes, offsetFromBoundingBox, layoutHint));
    }

}

