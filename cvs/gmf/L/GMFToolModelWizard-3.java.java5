package org.eclipse.gmf.tooldef.presentation;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Collections;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import java.util.MissingResourceException;

import java.util.StringTokenizer;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.xmi.XMLResource;

import org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry;

import org.eclipse.core.resources.IContainer;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IFolder;

import org.eclipse.core.resources.IProject;

import org.eclipse.core.resources.IResource;

import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.jface.wizard.Wizard;

import org.eclipse.jface.wizard.WizardPage;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.ModifyListener;

import org.eclipse.swt.events.ModifyEvent;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.layout.GridLayout;

import org.eclipse.swt.widgets.Combo;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Label;

import org.eclipse.ui.INewWizard;

import org.eclipse.ui.IWorkbench;

import org.eclipse.ui.actions.WorkspaceModifyOperation;

import org.eclipse.ui.dialogs.WizardNewFileCreationPage;

import org.eclipse.ui.part.FileEditorInput;

import org.eclipse.ui.part.ISetSelectionTarget;

import org.eclipse.gmf.tooldef.GMFToolFactory;

import org.eclipse.gmf.tooldef.GMFToolPackage;

import org.eclipse.gmf.tooldef.provider.GMFToolEditPlugin;

import org.eclipse.core.runtime.Path;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.ui.IWorkbenchWindow;

import org.eclipse.ui.PartInitException;

public class GMFToolModelWizard extends Wizard implements INewWizard {
    protected GMFToolPackage gmfToolPackage = GMFToolPackage.eINSTANCE;
    protected GMFToolFactory gmfToolFactory = gmfToolPackage.getGMFToolFactory ();
    protected GMFToolModelWizardNewFileCreationPage newFileCreationPage;
    protected GMFToolModelWizardInitialObjectCreationPage initialObjectCreationPage;
    protected IStructuredSelection selection;
    protected IWorkbench workbench;
    protected List initialObjectNames;

    public void init (IWorkbench workbench, IStructuredSelection selection) {
        this.workbench = workbench;
        this.selection = selection;
        setWindowTitle (GMFToolEditPlugin.INSTANCE.getString ("_UI_Wizard_label"));
        setDefaultPageImageDescriptor (ExtendedImageRegistry.INSTANCE.getImageDescriptor (GMFToolEditPlugin.INSTANCE.getImage ("full/wizban/NewGMFTool")));
    }

    protected Collection getInitialObjectNames () {
        if (initialObjectNames == null) {
            initialObjectNames = new ArrayList ();
            for (Iterator classifiers = gmfToolPackage.getEClassifiers ().iterator ();
            classifiers.hasNext ();) {
                EClassifier eClassifier = (EClassifier) classifiers.next ();
                if (eClassifier instanceof EClass) {
                    EClass eClass = (EClass) eClassifier;
                    if (! eClass.isAbstract ()) {
                        initialObjectNames.add (eClass.getName ());
                    }
                }
            }
            Collections.sort (initialObjectNames, java.text.Collator.getInstance ());
        }
        return initialObjectNames;
    }

    protected EObject createInitialModel () {
        return gmfToolFactory.createToolRegistry ();
    }

    public boolean performFinish () {
        try {
            final IFile modelFile = getModelFile ();
            WorkspaceModifyOperation operation = new WorkspaceModifyOperation () {

                protected void execute (IProgressMonitor progressMonitor) {
                    try {
                        ResourceSet resourceSet = new ResourceSetImpl ();
                        URI fileURI = URI.createPlatformResourceURI (modelFile.getFullPath ().toString ());
                        Resource resource = resourceSet.createResource (fileURI);
                        EObject rootObject = createInitialModel ();
                        if (rootObject != null) {
                            resource.getContents ().add (rootObject);
                        }
                        Map options = new HashMap ();
                        options.put (XMLResource.OPTION_ENCODING, "UTF-8");
                        resource.save (options);
                    } catch (Exception exception) {
                        GMFToolEditPlugin.INSTANCE.log (exception);
                    } finally {
                        progressMonitor.done ();
                    }
                }

            }

            ;
            getContainer ().run (false, false, operation);
            IWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow ();
            IWorkbenchPage page = workbenchWindow.getActivePage ();
            final IWorkbenchPart activePart = page.getActivePart ();
            if (activePart instanceof ISetSelectionTarget) {
                final ISelection targetSelection = new StructuredSelection (modelFile);
                getShell ().getDisplay ().asyncExec (new Runnable () {

                    public void run () {
                        ((ISetSelectionTarget) activePart).selectReveal (targetSelection);
                    }

                }

                );
            }
            try {
                page.openEditor (new FileEditorInput (modelFile), workbench.getEditorRegistry ().getDefaultEditor (modelFile.getFullPath ().toString ()).getId ());
            } catch (PartInitException exception) {
                MessageDialog.openError (workbenchWindow.getShell (), GMFToolEditPlugin.INSTANCE.getString ("_UI_OpenEditorError_label"), exception.getMessage ());
                return false;
            }
            return true;
        } catch (Exception exception) {
            GMFToolEditPlugin.INSTANCE.log (exception);
            return false;
        }
    }

    public class GMFToolModelWizardNewFileCreationPage extends WizardNewFileCreationPage {

        public GMFToolModelWizardNewFileCreationPage (String pageId, IStructuredSelection selection) {
            super (pageId, selection);
        }

        protected boolean validatePage () {
            if (super.validatePage ()) {
                String requiredExt = GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolEditorFilenameExtension");
                String enteredExt = new Path (getFileName ()).getFileExtension ();
                if (enteredExt == null || ! enteredExt.equals (requiredExt)) {
                    setErrorMessage (GMFToolEditPlugin.INSTANCE.getString ("_WARN_FilenameExtension", new Object [] {requiredExt}));
                    return false;
                } else {
                    return true;
                }
            } else {
                return false;
            }
        }

        public IFile getModelFile () {
            return ResourcesPlugin.getWorkspace ().getRoot ().getFile (getContainerFullPath ().append (getFileName ()));
        }

    }

    public class GMFToolModelWizardInitialObjectCreationPage extends WizardPage {
        protected Combo initialObjectField;
        protected List encodings;
        protected Combo encodingField;

        public GMFToolModelWizardInitialObjectCreationPage (String pageId) {
            super (pageId);
        }

        public void createControl (Composite parent) {
            Composite composite = new Composite (parent, SWT.NONE);
            {
                GridLayout layout = new GridLayout ();
                layout.numColumns = 1;
                layout.verticalSpacing = 12;
                composite.setLayout (layout);
                GridData data = new GridData ();
                data.verticalAlignment = GridData.FILL;
                data.grabExcessVerticalSpace = true;
                data.horizontalAlignment = GridData.FILL;
                composite.setLayoutData (data);
            } Label containerLabel = new Label (composite, SWT.LEFT);
            {
                containerLabel.setText (GMFToolEditPlugin.INSTANCE.getString ("_UI_ModelObject"));
                GridData data = new GridData ();
                data.horizontalAlignment = GridData.FILL;
                containerLabel.setLayoutData (data);
            } initialObjectField = new Combo (composite, SWT.BORDER);
            {
                GridData data = new GridData ();
                data.horizontalAlignment = GridData.FILL;
                data.grabExcessHorizontalSpace = true;
                initialObjectField.setLayoutData (data);
            } for (Iterator i = getInitialObjectNames ().iterator ();
            i.hasNext ();) {
                initialObjectField.add (getLabel ((String) i.next ()));
            }
            if (initialObjectField.getItemCount () == 1) {
                initialObjectField.select (0);
            }
            initialObjectField.addModifyListener (validator);
            Label encodingLabel = new Label (composite, SWT.LEFT);
            {
                encodingLabel.setText (GMFToolEditPlugin.INSTANCE.getString ("_UI_XMLEncoding"));
                GridData data = new GridData ();
                data.horizontalAlignment = GridData.FILL;
                encodingLabel.setLayoutData (data);
            } encodingField = new Combo (composite, SWT.BORDER);
            {
                GridData data = new GridData ();
                data.horizontalAlignment = GridData.FILL;
                data.grabExcessHorizontalSpace = true;
                encodingField.setLayoutData (data);
            } for (Iterator i = getEncodings ().iterator ();
            i.hasNext ();) {
                encodingField.add ((String) i.next ());
            }
            encodingField.select (0);
            encodingField.addModifyListener (validator);
            setPageComplete (validatePage ());
            setControl (composite);
        }

        protected ModifyListener validator = new ModifyListener () {

            public void modifyText (ModifyEvent e) {
                setPageComplete (validatePage ());
            }

        }

        ;

        protected boolean validatePage () {
            return getInitialObjectName () != null && getEncodings ().contains (encodingField.getText ());
        }

        public void setVisible (boolean visible) {
            super.setVisible (visible);
            if (visible) {
                if (initialObjectField.getItemCount () == 1) {
                    initialObjectField.clearSelection ();
                    encodingField.setFocus ();
                } else {
                    encodingField.clearSelection ();
                    initialObjectField.setFocus ();
                }
            }
        }

        public String getInitialObjectName () {
            String label = initialObjectField.getText ();
            for (Iterator i = getInitialObjectNames ().iterator ();
            i.hasNext ();) {
                String name = (String) i.next ();
                if (getLabel (name).equals (label)) {
                    return name;
                }
            }
            return null;
        }

        public String getEncoding () {
            return encodingField.getText ();
        }

        protected String getLabel (String typeName) {
            try {
                return GMFToolEditPlugin.INSTANCE.getString ("_UI_" + typeName + "_type");
            } catch (MissingResourceException mre) {
                GMFToolEditPlugin.INSTANCE.log (mre);
            }
            return typeName;
        }

        protected Collection getEncodings () {
            if (encodings == null) {
                encodings = new ArrayList ();
                for (StringTokenizer stringTokenizer = new StringTokenizer (GMFToolEditPlugin.INSTANCE.getString ("_UI_XMLEncodingChoices"));
                stringTokenizer.hasMoreTokens ();) {
                    encodings.add (stringTokenizer.nextToken ());
                }
            }
            return encodings;
        }

    }

    public void addPages () {
        newFileCreationPage = new GMFToolModelWizardNewFileCreationPage ("Whatever", selection);
        newFileCreationPage.setTitle (GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolModelWizard_label"));
        newFileCreationPage.setDescription (GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolModelWizard_description"));
        newFileCreationPage.setFileName (GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolEditorFilenameDefaultBase") + "." + GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolEditorFilenameExtension"));
        addPage (newFileCreationPage);
        if (selection != null && ! selection.isEmpty ()) {
            Object selectedElement = selection.iterator ().next ();
            if (selectedElement instanceof IResource) {
                IResource selectedResource = (IResource) selectedElement;
                if (selectedResource.getType () == IResource.FILE) {
                    selectedResource = selectedResource.getParent ();
                }
                if (selectedResource instanceof IFolder || selectedResource instanceof IProject) {
                    newFileCreationPage.setContainerFullPath (selectedResource.getFullPath ());
                    String defaultModelBaseFilename = GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolEditorFilenameDefaultBase");
                    String defaultModelFilenameExtension = GMFToolEditPlugin.INSTANCE.getString ("_UI_GMFToolEditorFilenameExtension");
                    String modelFilename = defaultModelBaseFilename + "." + defaultModelFilenameExtension;
                    for (int i = 1;
                    ((IContainer) selectedResource).findMember (modelFilename) != null; ++ i) {
                        modelFilename = defaultModelBaseFilename + i + "." + defaultModelFilenameExtension;
                    }
                    newFileCreationPage.setFileName (modelFilename);
                }
            }
        }
    }

    public IFile getModelFile () {
        return newFileCreationPage.getModelFile ();
    }

}

