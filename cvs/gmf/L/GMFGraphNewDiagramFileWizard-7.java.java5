package org.eclipse.gmf.graphdef.editor.part;

import java.io.IOException;

import java.util.Collections;

import java.util.LinkedList;

import java.util.List;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.commands.operations.OperationHistoryFactory;

import org.eclipse.core.resources.IContainer;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.core.runtime.Path;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.common.util.WrappedException;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.diagram.core.services.ViewService;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;

import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.jface.wizard.Wizard;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.PartInitException;

import org.eclipse.ui.dialogs.WizardNewFileCreationPage;

import org.eclipse.ui.ide.IDE;

public class GMFGraphNewDiagramFileWizard extends Wizard {
    private TransactionalEditingDomain myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain ();
    private WizardNewFileCreationPage myFileCreationPage;
    private IFile mySelectedModelFile;
    private IWorkbenchPage myWorkbenchPage;
    private IStructuredSelection mySelection;

    public GMFGraphNewDiagramFileWizard (IFile selectedModelFile, IWorkbenchPage workbenchPage, IStructuredSelection selection) {
        mySelectedModelFile = selectedModelFile;
        myWorkbenchPage = workbenchPage;
        mySelection = selection;
    }

    public void addPages () {
        myFileCreationPage = new WizardNewFileCreationPage ("Initialize new Ecore diagram file", mySelection) {

            public void createControl (Composite parent) {
                super.createControl (parent);
                IContainer parentContainer = mySelectedModelFile.getParent ();
                String originalFileName = mySelectedModelFile.getProjectRelativePath ().removeFileExtension ().lastSegment ();
                String fileExtension = ".gmfgraph_diagram";
                String fileName = originalFileName + fileExtension;
                for (int i = 1;
                parentContainer.getFile (new Path (fileName)).exists (); i ++) {
                    fileName = originalFileName + i + fileExtension;
                }
                setFileName (fileName);
            }

        }

        ;
        myFileCreationPage.setTitle ("Diagram file");
        myFileCreationPage.setDescription ("Create new diagram and initialize it using specified " + CanvasEditPart.MODEL_ID + " model content");
        addPage (myFileCreationPage);
    }

    public boolean performFinish () {
        final EObject diagramModelObject = load ();
        if (diagramModelObject == null) {
            MessageDialog.openError (getShell (), "Error", "Failed to load user model");
            return false;
        }
        IFile diagramFile = myFileCreationPage.createNewFile ();
        try {
            diagramFile.setCharset ("UTF-8", new NullProgressMonitor ());
        } catch (CoreException e) {
            GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to set charset for diagram file", e);
        }
        ResourceSet resourceSet = myEditingDomain.getResourceSet ();
        final Resource diagramResource = resourceSet.createResource (URI.createPlatformResourceURI (diagramFile.getFullPath ().toString ()));
        List affectedFiles = new LinkedList ();
        affectedFiles.add (mySelectedModelFile);
        affectedFiles.add (diagramFile);
        AbstractTransactionalCommand command = new AbstractTransactionalCommand (myEditingDomain, "Initializing diagram contents", affectedFiles) {

            protected CommandResult doExecuteWithResult (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
                int diagramVID = GMFGraphVisualIDRegistry.getDiagramVisualID (diagramModelObject);
                if (diagramVID != CanvasEditPart.VISUAL_ID) {
                    return CommandResult.newErrorCommandResult ("Incorrect model object stored as a root resource object");
                }
                Diagram diagram = ViewService.createDiagram (diagramModelObject, CanvasEditPart.MODEL_ID, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
                diagramResource.getContents ().add (diagram);
                return CommandResult.newOKCommandResult ();
            }

        }

        ;
        try {
            OperationHistoryFactory.getOperationHistory ().execute (command, new NullProgressMonitor (), null);
            diagramResource.save (Collections.EMPTY_MAP);
            IDE.openEditor (myWorkbenchPage, diagramFile);
        } catch (ExecutionException e) {
            GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to create model and diagram", e);
        } catch (IOException ex) {
            GMFGraphDiagramEditorPlugin.getInstance ().logError ("Save operation failed for: " + diagramFile.getFullPath ().toString (), ex);
        } catch (PartInitException ex) {
            GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to open editor", ex);
        }
        return true;
    }

    private EObject load () {
        ResourceSet resourceSet = myEditingDomain.getResourceSet ();
        try {
            Resource resource = resourceSet.getResource (URI.createPlatformResourceURI (mySelectedModelFile.getFullPath ().toString ()), true);
            return (EObject) resource.getContents ().get (0);
        } catch (WrappedException ex) {
            GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to load resource: " + mySelectedModelFile.getFullPath ().toString (), ex);
        }
        return null;
    }

}

