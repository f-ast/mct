package org.eclipse.gmf.runtime.emf.type.core.requests;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.gmf.runtime.emf.type.core.ClientContextManager;

import org.eclipse.gmf.runtime.emf.type.core.EditHelperContext;

import org.eclipse.gmf.runtime.emf.type.core.IClientContext;

import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;

import org.eclipse.gmf.runtime.emf.type.core.internal.impl.DefaultMetamodelType;

public class DestroyElementRequest extends DestroyRequest {
    public static final String DESTROY_DEPENDENTS_REQUEST_PARAMETER = "DestroyElementRequest.destroyDependentsRequest";
    public static final String INITIAL_ELEMENT_TO_DESTROY_PARAMETER = "DestroyElementRequest.initialElementToDestroy";
    private EObject elementToDestroy;
    private DestroyElementCommand basicDestroyCommand;

    public DestroyElementRequest (TransactionalEditingDomain editingDomain, boolean confirmationRequired) {
        this (editingDomain, null, confirmationRequired);
    }

    public DestroyElementRequest (TransactionalEditingDomain editingDomain, EObject elementToDestroy, boolean confirmationRequired) {
        super (editingDomain, confirmationRequired);
        this.elementToDestroy = elementToDestroy;
    }

    public DestroyElementRequest (boolean confirmationRequired) {
        this (null, null, confirmationRequired);
    }

    public DestroyElementRequest (EObject elementToDestroy, boolean confirmationRequired) {
        this (TransactionUtil.getEditingDomain (elementToDestroy), elementToDestroy, confirmationRequired);
    }

    public EObject getElementToDestroy () {
        return elementToDestroy;
    }

    public void setElementToDestroy (EObject elementToDestroy) {
        this.elementToDestroy = elementToDestroy;
    }

    public EObject getContainer () {
        if (getElementToDestroy () != null) {
            return getElementToDestroy ().eContainer ();
        }
        return null;
    }

    public Object getEditHelperContext () {
        Object result = super.getEditHelperContext ();
        if (result == null) {
            EObject element = getElementToDestroy ();
            if ((element != null) && (element.eResource () != null)) {
                IClientContext context = ClientContextManager.getInstance ().getClientContextFor (element);
                result = new EditHelperContext (DefaultMetamodelType.getInstance (), context);
            }
        }
        return result;
    }

    public TransactionalEditingDomain getEditingDomain () {
        TransactionalEditingDomain result = super.getEditingDomain ();
        if (result == null) {
            result = TransactionUtil.getEditingDomain (getElementToDestroy ());
            if (result != null) {
                setEditingDomain (result);
            }
        }
        return result;
    }

    public void setBasicDestroyCommand (DestroyElementCommand command) {
        basicDestroyCommand = command;
    }

    public DestroyElementCommand getBasicDestroyCommand () {
        return basicDestroyCommand;
    }

}

