package org.eclipse.gmf.codegen.gmfgen.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;

import org.eclipse.gmf.codegen.gmfgen.presentation.EditorPlugin;

public class GenCommonBaseItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public GenCommonBaseItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    @Override
    public List < IItemPropertyDescriptor > getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addDiagramRunTimeClassPropertyDescriptor (object);
            addVisualIDPropertyDescriptor (object);
            addEditPartClassNamePropertyDescriptor (object);
            addItemSemanticEditPolicyClassNamePropertyDescriptor (object);
            addNotationViewFactoryClassNamePropertyDescriptor (object);
            addStylesPropertyDescriptor (object);
            addSansDomainPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addDiagramRunTimeClassPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenCommonBase_diagramRunTimeClass_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenCommonBase_diagramRunTimeClass_feature", "_UI_GenCommonBase_type"), GMFGenPackage.eINSTANCE.getGenCommonBase_DiagramRunTimeClass (), true, false, false, null, getString ("_UI_DiagramElementPropertyCategory"), null));
    }

    protected void addVisualIDPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenCommonBase_visualID_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenCommonBase_visualID_feature", "_UI_GenCommonBase_type"), GMFGenPackage.eINSTANCE.getGenCommonBase_VisualID (), true, false, false, ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE, getString ("_UI_DiagramElementPropertyCategory"), null));
    }

    protected void addEditPartClassNamePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenCommonBase_editPartClassName_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenCommonBase_editPartClassName_feature", "_UI_GenCommonBase_type"), GMFGenPackage.eINSTANCE.getGenCommonBase_EditPartClassName (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, getString ("_UI_ClassNamesPropertyCategory"), null));
    }

    protected void addItemSemanticEditPolicyClassNamePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenCommonBase_itemSemanticEditPolicyClassName_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenCommonBase_itemSemanticEditPolicyClassName_feature", "_UI_GenCommonBase_type"), GMFGenPackage.eINSTANCE.getGenCommonBase_ItemSemanticEditPolicyClassName (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, getString ("_UI_ClassNamesPropertyCategory"), null));
    }

    protected void addNotationViewFactoryClassNamePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenCommonBase_notationViewFactoryClassName_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenCommonBase_notationViewFactoryClassName_feature", "_UI_GenCommonBase_type"), GMFGenPackage.eINSTANCE.getGenCommonBase_NotationViewFactoryClassName (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, getString ("_UI_ClassNamesPropertyCategory"), null));
    }

    protected void addStylesPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenCommonBase_styles_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenCommonBase_styles_feature", "_UI_GenCommonBase_type"), GMFGenPackage.eINSTANCE.getGenCommonBase_Styles (), true, false, true, null, getString ("_UI_DiagramElementPropertyCategory"), null));
    }

    protected void addSansDomainPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenCommonBase_sansDomain_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenCommonBase_sansDomain_feature", "_UI_GenCommonBase_type"), GMFGenPackage.eINSTANCE.getGenCommonBase_SansDomain (), false, false, false, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, getString ("_UI_DiagramElementPropertyCategory"), null));
    }

    @Override
    public Collection < ? extends EStructuralFeature > getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFGenPackage.eINSTANCE.getGenCommonBase_ElementType ());
            childrenFeatures.add (GMFGenPackage.eINSTANCE.getGenCommonBase_Viewmap ());
            childrenFeatures.add (GMFGenPackage.eINSTANCE.getGenCommonBase_Behaviour ());
        }
        return childrenFeatures;
    }

    @Override
    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    @Override
    public String getText (Object object) {
        String label = ((GenCommonBase) object).getEditPartClassName ();
        return label == null || label.length () == 0 ? getString ("_UI_GenCommonBase_type") : getString ("_UI_GenCommonBase_type") + " " + label;
    }

    @Override
    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (GenCommonBase.class)) {
            case GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID :
            case GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME :
            case GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
            case GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME :
            case GMFGenPackage.GEN_COMMON_BASE__SANS_DOMAIN :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
            case GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE :
            case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP :
            case GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    @Override
    protected void collectNewChildDescriptors (Collection < Object > newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenCommonBase_ElementType (), GMFGenFactory.eINSTANCE.createMetamodelType ()));
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenCommonBase_ElementType (), GMFGenFactory.eINSTANCE.createSpecializationType ()));
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenCommonBase_ElementType (), GMFGenFactory.eINSTANCE.createNotationType ()));
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenCommonBase_Viewmap (), GMFGenFactory.eINSTANCE.createFigureViewmap ()));
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenCommonBase_Viewmap (), GMFGenFactory.eINSTANCE.createSnippetViewmap ()));
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenCommonBase_Viewmap (), GMFGenFactory.eINSTANCE.createInnerClassViewmap ()));
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenCommonBase_Viewmap (), GMFGenFactory.eINSTANCE.createParentAssignedViewmap ()));
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenCommonBase_Behaviour (), GMFGenFactory.eINSTANCE.createCustomBehaviour ()));
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenCommonBase_Behaviour (), GMFGenFactory.eINSTANCE.createSharedBehaviour ()));
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenCommonBase_Behaviour (), GMFGenFactory.eINSTANCE.createOpenDiagramBehaviour ()));
    }

    @Override
    public ResourceLocator getResourceLocator () {
        return EditorPlugin.INSTANCE;
    }

}

