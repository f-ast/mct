package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenContributionItem;

import org.eclipse.gmf.codegen.gmfgen.GenSharedContributionItem;

public class GenSharedContributionItemImpl extends GenContributionItemImpl implements GenSharedContributionItem {
    protected GenContributionItem actualItem = null;

    protected GenSharedContributionItemImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenSharedContributionItem ();
    }

    public GenContributionItem getActualItem () {
        if (actualItem != null && actualItem.eIsProxy ()) {
            InternalEObject oldActualItem = (InternalEObject) actualItem;
            actualItem = (GenContributionItem) eResolveProxy (oldActualItem);
            if (actualItem != oldActualItem) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.GEN_SHARED_CONTRIBUTION_ITEM__ACTUAL_ITEM, oldActualItem, actualItem));

            }
        }
        return actualItem;
    }

    public GenContributionItem basicGetActualItem () {
        return actualItem;
    }

    public void setActualItem (GenContributionItem newActualItem) {
        GenContributionItem oldActualItem = actualItem;
        actualItem = newActualItem;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_SHARED_CONTRIBUTION_ITEM__ACTUAL_ITEM, oldActualItem, actualItem));

    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_SHARED_CONTRIBUTION_ITEM__ACTUAL_ITEM :
                if (resolve) return getActualItem ();

                return basicGetActualItem ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_SHARED_CONTRIBUTION_ITEM__ACTUAL_ITEM :
                setActualItem ((GenContributionItem) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_SHARED_CONTRIBUTION_ITEM__ACTUAL_ITEM :
                setActualItem ((GenContributionItem) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_SHARED_CONTRIBUTION_ITEM__ACTUAL_ITEM :
                return actualItem != null;
        }
        return super.eIsSet (featureID);
    }

}

