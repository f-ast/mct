package org.eclipse.gmf.runtime.diagram.ui.internal.services.editpolicy;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.gef.EditPart;

import org.eclipse.jface.util.Assert;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.services.editpolicy.CreateEditPoliciesOperation;

import org.eclipse.gmf.runtime.diagram.ui.services.editpolicy.IEditPolicyProvider;

public class EditPolicyService extends Service implements IEditPolicyProvider {
    protected static class ProviderDescriptor extends Service.ProviderDescriptor {
        private EditPolicyProviderConfiguration providerConfiguration;

        public ProviderDescriptor (IConfigurationElement element) {
            super (element);
            this.providerConfiguration = EditPolicyProviderConfiguration.parse (element);
            Assert.isNotNull (providerConfiguration);
        }

        public boolean provides (IOperation operation) {
            if (getPolicy () != null) return getPolicy ().provides (operation);

            if (provider == null) {
                if (isSupportedInExtention (operation)) {
                    providerConfiguration = null;
                    return getProvider ().provides (operation);
                }
                return false;
            }
            return getProvider ().provides (operation);
        }

        private boolean isSupportedInExtention (IOperation operation) {
            CreateEditPoliciesOperation o = (CreateEditPoliciesOperation) operation;
            return providerConfiguration.supports (o.getEditPart ());
        }

        public String toString () {
            return getElement ().getAttribute ("class");
        }

    }

    private final static EditPolicyService service = new EditPolicyService ();

    static {
        service.configureProviders (DiagramUIPlugin.getPluginId (), "editpolicyProviders");
    }

    public static EditPolicyService getInstance () {
        return service;
    }

    private void execute (IOperation operation) {
        execute (ExecutionStrategy.REVERSE, operation);
    }

    public void createEditPolicies (EditPart editPart) {
        execute (new CreateEditPoliciesOperation (editPart));
    }

    protected Service.ProviderDescriptor newProviderDescriptor (IConfigurationElement element) {
        return new ProviderDescriptor (element);
    }

}

