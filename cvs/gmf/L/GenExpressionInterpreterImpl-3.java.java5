package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.codegen.util.CodeGenUtil;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeUniqueEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter;

import org.eclipse.gmf.codegen.gmfgen.GenLanguage;

import org.eclipse.gmf.codegen.gmfgen.ValueExpression;

public class GenExpressionInterpreterImpl extends GenExpressionProviderBaseImpl implements GenExpressionInterpreter {
    protected static final GenLanguage LANGUAGE_EDEFAULT = GenLanguage.OCL_LITERAL;
    protected GenLanguage language = LANGUAGE_EDEFAULT;
    protected static final String CLASS_NAME_EDEFAULT = null;
    protected String className = CLASS_NAME_EDEFAULT;
    protected EList requiredPluginIDs = null;

    protected GenExpressionInterpreterImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenExpressionInterpreter ();
    }

    public String getClassNameGen () {
        return className;
    }

    public String getClassName () {
        String value = getClassNameGen ();
        if (value == null || value.length () == 0) {
            String prefix = ((GenEditorGeneratorImpl) getContainer ().getEditorGen ()).getDomainModelCapName ();
            value = prefix + CodeGenUtil.validJavaIdentifier (getLanguage ().getName ().toUpperCase ()) + "Factory";
        }
        return value;
    }

    public void setClassName (String newClassName) {
        String oldClassName = className;
        className = newClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_EXPRESSION_INTERPRETER__CLASS_NAME, oldClassName, className));

    }

    public EList getRequiredPluginIDs () {
        if (requiredPluginIDs == null) {
            requiredPluginIDs = new EDataTypeUniqueEList (String.class, this, GMFGenPackage.GEN_EXPRESSION_INTERPRETER__REQUIRED_PLUGIN_IDS);
        }
        return requiredPluginIDs;
    }

    public GenLanguage getLanguage () {
        return language;
    }

    public void setLanguage (GenLanguage newLanguage) {
        GenLanguage oldLanguage = language;
        language = newLanguage == null ? LANGUAGE_EDEFAULT : newLanguage;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_EXPRESSION_INTERPRETER__LANGUAGE, oldLanguage, language));

    }

    public String getQualifiedClassName () {
        return getContainer ().getExpressionsPackageName () + "." + getClassName ();
    }

    public String getExpressionAccessor (ValueExpression expression) {
        return "getExpression";
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__LANGUAGE :
                return getLanguage ();
            case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__CLASS_NAME :
                return getClassName ();
            case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__REQUIRED_PLUGIN_IDS :
                return getRequiredPluginIDs ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__LANGUAGE :
                setLanguage ((GenLanguage) newValue);
                return;
            case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__CLASS_NAME :
                setClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__REQUIRED_PLUGIN_IDS :
                getRequiredPluginIDs ().clear ();
                getRequiredPluginIDs ().addAll ((Collection) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__LANGUAGE :
                setLanguage (LANGUAGE_EDEFAULT);
                return;
            case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__CLASS_NAME :
                setClassName (CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__REQUIRED_PLUGIN_IDS :
                getRequiredPluginIDs ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__LANGUAGE :
                return language != LANGUAGE_EDEFAULT;
            case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__CLASS_NAME :
                return CLASS_NAME_EDEFAULT == null ? className != null : ! CLASS_NAME_EDEFAULT.equals (className);
            case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__REQUIRED_PLUGIN_IDS :
                return requiredPluginIDs != null && ! requiredPluginIDs.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (language: ");
        result.append (language);
        result.append (", className: ");
        result.append (className);
        result.append (", requiredPluginIDs: ");
        result.append (requiredPluginIDs);
        result.append (')');
        return result.toString ();
    }

}

