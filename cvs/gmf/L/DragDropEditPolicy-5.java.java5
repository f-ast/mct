package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.editpolicies.GraphicalEditPolicy;

import org.eclipse.gef.requests.ChangeBoundsRequest;

import org.eclipse.gef.tools.ToolUtilities;

import org.eclipse.swt.dnd.DND;

import org.eclipse.swt.graphics.Color;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.requests.DropObjectsRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;

import org.eclipse.gmf.runtime.notation.View;

public class DragDropEditPolicy extends GraphicalEditPolicy {
    private static final Color GRAY = new Color (null, 200, 200, 200);
    protected Color revertColor;
    protected boolean opacity;

    public Command getCommand (Request request) {
        if (RequestConstants.REQ_DRAG.equals (request.getType ())) {
            return getDragCommand ((ChangeBoundsRequest) request);
        } else if (RequestConstants.REQ_DROP.equals (request.getType ())) {
            return getDropCommand ((ChangeBoundsRequest) request);
        } else if (RequestConstants.REQ_DROP_OBJECTS.equals (request.getType ())) {
            DropObjectsRequest dndRequest = (DropObjectsRequest) request;
            dndRequest.setRequiredDetail (getRequiredDragDetail (dndRequest));
            return getDropObjectsCommand (dndRequest);
        }

        return null;
    }

    protected Command getDragCommand (ChangeBoundsRequest request) {
        ChangeBoundsRequest req = new ChangeBoundsRequest (REQ_ORPHAN);
        req.setEditParts (request.getEditParts ());
        req.setMoveDelta (request.getMoveDelta ());
        req.setSizeDelta (request.getSizeDelta ());
        req.setLocation (request.getLocation ());
        req.setResizeDirection (request.getResizeDirection ());
        return getHost ().getCommand (req);
    }

    protected Command getDropCommand (ChangeBoundsRequest request) {
        ChangeBoundsRequest req = new ChangeBoundsRequest (REQ_ADD);
        req.setEditParts (request.getEditParts ());
        req.setMoveDelta (request.getMoveDelta ());
        req.setSizeDelta (request.getSizeDelta ());
        req.setLocation (request.getLocation ());
        req.setResizeDirection (request.getResizeDirection ());
        return getHost ().getCommand (req);
    }

    protected Command getDropElementCommand (EObject element, DropObjectsRequest request) {
        return null;
    }

    protected Command getDropObjectsCommand (DropObjectsRequest request) {
        CompoundCommand cm = new CompoundCommand ();
        Iterator elements = request.getObjects ().iterator ();
        while (elements.hasNext ()) {
            Object obj = elements.next ();
            if (obj instanceof EObject) {
                Command cmd = getDropElementCommand ((EObject) obj, request);
                if (cmd != null) cm.add (cmd);

            }
        }
        if (cm.isEmpty ()) return null;

        return new EtoolsProxyCommand (new CommandProxy (cm.unwrap ()));
    }

    public EditPart getTargetEditPart (final Request request) {
        return understandsRequest (request) ? getHost () : null;
    }

    public boolean understandsRequest (Request request) {
        return RequestConstants.REQ_MOVE.equals (request.getType ()) || RequestConstants.REQ_DRAG.equals (request.getType ()) || RequestConstants.REQ_DROP.equals (request.getType ()) || RequestConstants.REQ_DROP_OBJECTS.equals (request.getType ());
    }

    public void showTargetFeedback (Request request) {
        Command c = getCommand (request);
        if (c != null && c.canExecute ()) {
            if (revertColor == null) {
                revertColor = getHostFigure ().getBackgroundColor ();
                opacity = getHostFigure ().isOpaque ();
                getHostFigure ().setBackgroundColor (FigureUtilities.mixColors (GRAY, revertColor));
                getHostFigure ().setOpaque (true);
            }
        }
    }

    public void eraseTargetFeedback (Request request) {
        if (revertColor != null) {
            getHostFigure ().setBackgroundColor (revertColor);
            getHostFigure ().setOpaque (opacity);
            revertColor = null;
        }
    }

    protected int getRequiredDragDetail (Request request) {
        return DND.DROP_COPY;
    }

    protected EObject getHostObject () {
        return ViewUtil.resolveSemanticElement ((View) ((IGraphicalEditPart) getHost ()).getModel ());
    }

    protected DropObjectsRequest castToDropObjectsRequest (ChangeBoundsRequest request) {
        Iterator editParts = ToolUtilities.getSelectionWithoutDependants (request.getEditParts ()).iterator ();
        List elements = new ArrayList ();
        while (editParts.hasNext ()) {
            EditPart editPart = (EditPart) editParts.next ();
            if (editPart instanceof IGraphicalEditPart) {
                EObject element = ViewUtil.resolveSemanticElement ((View) ((IGraphicalEditPart) editPart).getModel ());
                if (element != null) elements.add (element);

            }
        }
        DropObjectsRequest req = new DropObjectsRequest ();
        req.setObjects (elements);
        req.setAllowedDetail (DND.DROP_COPY | DND.DROP_MOVE | DND.DROP_LINK);
        req.setLocation (request.getLocation ());
        req.setRequiredDetail (getRequiredDragDetail (request));
        return req;
    }

}

