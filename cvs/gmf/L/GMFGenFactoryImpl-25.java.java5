package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EDataType;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.eclipse.gmf.codegen.gmfgen.*;

import org.eclipse.gmf.codegen.gmfgen.ColorAttributes;

import org.eclipse.gmf.codegen.gmfgen.DefaultSizeAttributes;

import org.eclipse.gmf.codegen.gmfgen.FeatureModelFacet;

import org.eclipse.gmf.codegen.gmfgen.FigureViewmap;

import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenAuditContainer;

import org.eclipse.gmf.codegen.gmfgen.GenAuditRule;

import org.eclipse.gmf.codegen.gmfgen.GenChildNode;

import org.eclipse.gmf.codegen.gmfgen.GenCompartment;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.GenExternalNodeLabel;

import org.eclipse.gmf.codegen.gmfgen.GenFeatureSeqInitializer;

import org.eclipse.gmf.codegen.gmfgen.GenFeatureValueSpec;

import org.eclipse.gmf.codegen.gmfgen.GenLink;

import org.eclipse.gmf.codegen.gmfgen.GenLinkConstraints;

import org.eclipse.gmf.codegen.gmfgen.GenLinkLabel;

import org.eclipse.gmf.codegen.gmfgen.GenNodeLabel;

import org.eclipse.gmf.codegen.gmfgen.GenSeverity;

import org.eclipse.gmf.codegen.gmfgen.GenTopLevelNode;

import org.eclipse.gmf.codegen.gmfgen.InnerClassViewmap;

import org.eclipse.gmf.codegen.gmfgen.LinkEntry;

import org.eclipse.gmf.codegen.gmfgen.LinkLabelAlignment;

import org.eclipse.gmf.codegen.gmfgen.ModelElementSelector;

import org.eclipse.gmf.codegen.gmfgen.NodeEntry;

import org.eclipse.gmf.codegen.gmfgen.Palette;

import org.eclipse.gmf.codegen.gmfgen.ShapeAttributes;

import org.eclipse.gmf.codegen.gmfgen.SnippetViewmap;

import org.eclipse.gmf.codegen.gmfgen.ToolGroup;

import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;

import org.eclipse.gmf.codegen.gmfgen.TypeModelFacet;

import org.eclipse.gmf.codegen.gmfgen.ValueExpression;

public class GMFGenFactoryImpl extends EFactoryImpl implements GMFGenFactory {

    public static GMFGenFactory init () {
        try {
            GMFGenFactory theGMFGenFactory = (GMFGenFactory) EPackage.Registry.INSTANCE.getEFactory ("http://www.eclipse.org/gmf/2005/GenModel");
            if (theGMFGenFactory != null) {
                return theGMFGenFactory;
            }
        } catch (Exception exception) {
            EcorePlugin.INSTANCE.log (exception);
        }
        return new GMFGenFactoryImpl ();
    }

    public GMFGenFactoryImpl () {
        super ();
    }

    public EObject create (EClass eClass) {
        switch (eClass.getClassifierID ()) {
            case GMFGenPackage.GEN_DIAGRAM :
                return createGenDiagram ();
            case GMFGenPackage.GEN_TOP_LEVEL_NODE :
                return createGenTopLevelNode ();
            case GMFGenPackage.GEN_CHILD_NODE :
                return createGenChildNode ();
            case GMFGenPackage.GEN_COMPARTMENT :
                return createGenCompartment ();
            case GMFGenPackage.GEN_LINK :
                return createGenLink ();
            case GMFGenPackage.GEN_NODE_LABEL :
                return createGenNodeLabel ();
            case GMFGenPackage.GEN_EXTERNAL_NODE_LABEL :
                return createGenExternalNodeLabel ();
            case GMFGenPackage.GEN_LINK_LABEL :
                return createGenLinkLabel ();
            case GMFGenPackage.TYPE_MODEL_FACET :
                return createTypeModelFacet ();
            case GMFGenPackage.FEATURE_MODEL_FACET :
                return createFeatureModelFacet ();
            case GMFGenPackage.TYPE_LINK_MODEL_FACET :
                return createTypeLinkModelFacet ();
            case GMFGenPackage.COLOR_ATTRIBUTES :
                return createColorAttributes ();
            case GMFGenPackage.SHAPE_ATTRIBUTES :
                return createShapeAttributes ();
            case GMFGenPackage.DEFAULT_SIZE_ATTRIBUTES :
                return createDefaultSizeAttributes ();
            case GMFGenPackage.FIGURE_VIEWMAP :
                return createFigureViewmap ();
            case GMFGenPackage.SNIPPET_VIEWMAP :
                return createSnippetViewmap ();
            case GMFGenPackage.INNER_CLASS_VIEWMAP :
                return createInnerClassViewmap ();
            case GMFGenPackage.VALUE_EXPRESSION :
                return createValueExpression ();
            case GMFGenPackage.MODEL_ELEMENT_SELECTOR :
                return createModelElementSelector ();
            case GMFGenPackage.PALETTE :
                return createPalette ();
            case GMFGenPackage.NODE_ENTRY :
                return createNodeEntry ();
            case GMFGenPackage.LINK_ENTRY :
                return createLinkEntry ();
            case GMFGenPackage.TOOL_GROUP :
                return createToolGroup ();
            case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER :
                return createGenFeatureSeqInitializer ();
            case GMFGenPackage.GEN_FEATURE_VALUE_SPEC :
                return createGenFeatureValueSpec ();
            case GMFGenPackage.GEN_LINK_CONSTRAINTS :
                return createGenLinkConstraints ();
            case GMFGenPackage.GEN_AUDIT_CONTAINER :
                return createGenAuditContainer ();
            case GMFGenPackage.GEN_AUDIT_RULE :
                return createGenAuditRule ();
            default :
                throw new IllegalArgumentException ("The class '" + eClass.getName () + "' is not a valid classifier");
        }
    }

    public Object createFromString (EDataType eDataType, String initialValue) {
        switch (eDataType.getClassifierID ()) {
            case GMFGenPackage.LINK_LABEL_ALIGNMENT :
                return createLinkLabelAlignmentFromString (eDataType, initialValue);
            case GMFGenPackage.GEN_SEVERITY :
                return createGenSeverityFromString (eDataType, initialValue);
            default :
                throw new IllegalArgumentException ("The datatype '" + eDataType.getName () + "' is not a valid classifier");
        }
    }

    public String convertToString (EDataType eDataType, Object instanceValue) {
        switch (eDataType.getClassifierID ()) {
            case GMFGenPackage.LINK_LABEL_ALIGNMENT :
                return convertLinkLabelAlignmentToString (eDataType, instanceValue);
            case GMFGenPackage.GEN_SEVERITY :
                return convertGenSeverityToString (eDataType, instanceValue);
            default :
                throw new IllegalArgumentException ("The datatype '" + eDataType.getName () + "' is not a valid classifier");
        }
    }

    public GenDiagram createGenDiagram () {
        GenDiagramImpl genDiagram = new GenDiagramImpl ();
        return genDiagram;
    }

    public GenTopLevelNode createGenTopLevelNode () {
        GenTopLevelNodeImpl genTopLevelNode = new GenTopLevelNodeImpl ();
        return genTopLevelNode;
    }

    public GenChildNode createGenChildNode () {
        GenChildNodeImpl genChildNode = new GenChildNodeImpl ();
        return genChildNode;
    }

    public GenCompartment createGenCompartment () {
        GenCompartmentImpl genCompartment = new GenCompartmentImpl ();
        return genCompartment;
    }

    public GenLink createGenLink () {
        GenLinkImpl genLink = new GenLinkImpl ();
        return genLink;
    }

    public GenNodeLabel createGenNodeLabel () {
        GenNodeLabelImpl genNodeLabel = new GenNodeLabelImpl ();
        return genNodeLabel;
    }

    public GenExternalNodeLabel createGenExternalNodeLabel () {
        GenExternalNodeLabelImpl genExternalNodeLabel = new GenExternalNodeLabelImpl ();
        return genExternalNodeLabel;
    }

    public GenLinkLabel createGenLinkLabel () {
        GenLinkLabelImpl genLinkLabel = new GenLinkLabelImpl ();
        return genLinkLabel;
    }

    public TypeModelFacet createTypeModelFacet () {
        TypeModelFacetImpl typeModelFacet = new TypeModelFacetImpl ();
        return typeModelFacet;
    }

    public FeatureModelFacet createFeatureModelFacet () {
        FeatureModelFacetImpl featureModelFacet = new FeatureModelFacetImpl ();
        return featureModelFacet;
    }

    public TypeLinkModelFacet createTypeLinkModelFacet () {
        TypeLinkModelFacetImpl typeLinkModelFacet = new TypeLinkModelFacetImpl ();
        return typeLinkModelFacet;
    }

    public ColorAttributes createColorAttributes () {
        ColorAttributesImpl colorAttributes = new ColorAttributesImpl ();
        return colorAttributes;
    }

    public ShapeAttributes createShapeAttributes () {
        ShapeAttributesImpl shapeAttributes = new ShapeAttributesImpl ();
        return shapeAttributes;
    }

    public DefaultSizeAttributes createDefaultSizeAttributes () {
        DefaultSizeAttributesImpl defaultSizeAttributes = new DefaultSizeAttributesImpl ();
        return defaultSizeAttributes;
    }

    public FigureViewmap createFigureViewmap () {
        FigureViewmapImpl figureViewmap = new FigureViewmapImpl ();
        return figureViewmap;
    }

    public SnippetViewmap createSnippetViewmap () {
        SnippetViewmapImpl snippetViewmap = new SnippetViewmapImpl ();
        return snippetViewmap;
    }

    public InnerClassViewmap createInnerClassViewmap () {
        InnerClassViewmapImpl innerClassViewmap = new InnerClassViewmapImpl ();
        return innerClassViewmap;
    }

    public ValueExpression createValueExpression () {
        ValueExpressionImpl valueExpression = new ValueExpressionImpl ();
        return valueExpression;
    }

    public ModelElementSelector createModelElementSelector () {
        ModelElementSelectorImpl modelElementSelector = new ModelElementSelectorImpl ();
        return modelElementSelector;
    }

    public Palette createPalette () {
        PaletteImpl palette = new PaletteImpl ();
        return palette;
    }

    public NodeEntry createNodeEntry () {
        NodeEntryImpl nodeEntry = new NodeEntryImpl ();
        return nodeEntry;
    }

    public LinkEntry createLinkEntry () {
        LinkEntryImpl linkEntry = new LinkEntryImpl ();
        return linkEntry;
    }

    public ToolGroup createToolGroup () {
        ToolGroupImpl toolGroup = new ToolGroupImpl ();
        return toolGroup;
    }

    public GenFeatureSeqInitializer createGenFeatureSeqInitializer () {
        GenFeatureSeqInitializerImpl genFeatureSeqInitializer = new GenFeatureSeqInitializerImpl ();
        return genFeatureSeqInitializer;
    }

    public GenFeatureValueSpec createGenFeatureValueSpec () {
        GenFeatureValueSpecImpl genFeatureValueSpec = new GenFeatureValueSpecImpl ();
        return genFeatureValueSpec;
    }

    public GenLinkConstraints createGenLinkConstraints () {
        GenLinkConstraintsImpl genLinkConstraints = new GenLinkConstraintsImpl ();
        return genLinkConstraints;
    }

    public GenAuditContainer createGenAuditContainer () {
        GenAuditContainerImpl genAuditContainer = new GenAuditContainerImpl ();
        return genAuditContainer;
    }

    public GenAuditRule createGenAuditRule () {
        GenAuditRuleImpl genAuditRule = new GenAuditRuleImpl ();
        return genAuditRule;
    }

    public LinkLabelAlignment createLinkLabelAlignmentFromString (EDataType eDataType, String initialValue) {
        LinkLabelAlignment result = LinkLabelAlignment.get (initialValue);
        if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");

        return result;
    }

    public String convertLinkLabelAlignmentToString (EDataType eDataType, Object instanceValue) {
        return instanceValue == null ? null : instanceValue.toString ();
    }

    public GenSeverity createGenSeverityFromString (EDataType eDataType, String initialValue) {
        GenSeverity result = GenSeverity.get (initialValue);
        if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");

        return result;
    }

    public String convertGenSeverityToString (EDataType eDataType, Object instanceValue) {
        return instanceValue == null ? null : instanceValue.toString ();
    }

    public GMFGenPackage getGMFGenPackage () {
        return (GMFGenPackage) getEPackage ();
    }

    public static GMFGenPackage getPackage () {
        return GMFGenPackage.eINSTANCE;
    }

}

