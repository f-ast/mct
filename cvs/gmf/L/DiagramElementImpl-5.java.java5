package org.eclipse.gmf.gmfgraph.impl;

import java.util.Collection;

import java.util.Iterator;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.gmfgraph.DiagramElement;

import org.eclipse.gmf.gmfgraph.Figure;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.VisualFacet;

public abstract class DiagramElementImpl extends EObjectImpl implements DiagramElement {
    protected static final String NAME_EDEFAULT = null;
    protected String name = NAME_EDEFAULT;
    protected Figure figure = null;
    protected EList facets = null;

    protected DiagramElementImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getDiagramElement ();
    }

    public String getName () {
        return name;
    }

    public void setName (String newName) {
        String oldName = name;
        name = newName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.DIAGRAM_ELEMENT__NAME, oldName, name));

    }

    public Figure getFigure () {
        if (figure != null && figure.eIsProxy ()) {
            InternalEObject oldFigure = (InternalEObject) figure;
            figure = (Figure) eResolveProxy (oldFigure);
            if (figure != oldFigure) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE, oldFigure, figure));

            }
        }
        return figure;
    }

    public Figure basicGetFigure () {
        return figure;
    }

    public NotificationChain basicSetFigure (Figure newFigure, NotificationChain msgs) {
        Figure oldFigure = figure;
        figure = newFigure;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE, oldFigure, newFigure);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setFigure (Figure newFigure) {
        if (newFigure != figure) {
            NotificationChain msgs = null;
            if (figure != null) msgs = ((InternalEObject) figure).eInverseRemove (this, GMFGraphPackage.FIGURE__REFERENCING_ELEMENTS, Figure.class, msgs);

            if (newFigure != null) msgs = ((InternalEObject) newFigure).eInverseAdd (this, GMFGraphPackage.FIGURE__REFERENCING_ELEMENTS, Figure.class, msgs);

            msgs = basicSetFigure (newFigure, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE, newFigure, newFigure));

    }

    public EList getFacets () {
        if (facets == null) {
            facets = new EObjectContainmentEList (VisualFacet.class, this, GMFGraphPackage.DIAGRAM_ELEMENT__FACETS);
        }
        return facets;
    }

    public VisualFacet find (Class facetClass) {
        if (facets == null) {
            return null;
        }
        if (facetClass == null) {
            throw new NullPointerException ();
        }
        for (Iterator it = getFacets ().iterator ();
        it.hasNext ();) {
            Object next = it.next ();
            if (facetClass.isAssignableFrom (next.getClass ())) {
                return (VisualFacet) next;
            }
        }
        return null;
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE :
                if (figure != null) msgs = ((InternalEObject) figure).eInverseRemove (this, GMFGraphPackage.FIGURE__REFERENCING_ELEMENTS, Figure.class, msgs);

                return basicSetFigure ((Figure) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE :
                return basicSetFigure (null, msgs);
            case GMFGraphPackage.DIAGRAM_ELEMENT__FACETS :
                return ((InternalEList) getFacets ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.DIAGRAM_ELEMENT__NAME :
                return getName ();
            case GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE :
                if (resolve) return getFigure ();

                return basicGetFigure ();
            case GMFGraphPackage.DIAGRAM_ELEMENT__FACETS :
                return getFacets ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.DIAGRAM_ELEMENT__NAME :
                setName ((String) newValue);
                return;
            case GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE :
                setFigure ((Figure) newValue);
                return;
            case GMFGraphPackage.DIAGRAM_ELEMENT__FACETS :
                getFacets ().clear ();
                getFacets ().addAll ((Collection) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.DIAGRAM_ELEMENT__NAME :
                setName (NAME_EDEFAULT);
                return;
            case GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE :
                setFigure ((Figure) null);
                return;
            case GMFGraphPackage.DIAGRAM_ELEMENT__FACETS :
                getFacets ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.DIAGRAM_ELEMENT__NAME :
                return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT.equals (name);
            case GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE :
                return figure != null;
            case GMFGraphPackage.DIAGRAM_ELEMENT__FACETS :
                return facets != null && ! facets.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (name: ");
        result.append (name);
        result.append (')');
        return result.toString ();
    }

}

