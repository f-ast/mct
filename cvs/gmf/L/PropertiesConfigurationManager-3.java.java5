package org.eclipse.gmf.runtime.common.core.util;

import java.io.FileInputStream;

import java.io.FileNotFoundException;

import java.io.IOException;

import java.net.URL;

import java.util.HashMap;

import java.util.Map;

import java.util.Properties;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.core.runtime.IExtension;

import org.eclipse.core.runtime.Platform;

import org.eclipse.gmf.runtime.common.core.internal.CommonCoreDebugOptions;

import org.eclipse.gmf.runtime.common.core.internal.CommonCorePlugin;

import org.eclipse.gmf.runtime.common.core.internal.CommonCoreStatusCodes;

public class PropertiesConfigurationManager {
    private static final String PROPERTIES_CONFIGURATION_EXT_P_NAME = "propertiesConfiguration";
    private static final String PATH_ATTRIBUTE = "path";
    private static Map pluginIdToPropertiesMap = null;

    private PropertiesConfigurationManager () {
        super ();
    }

    public static String getString (String pluginId, String key) {
        Map propertiesMap = (Map) getPluginIdToPropertiesMap ().get (pluginId);
        if (propertiesMap == null) {
            propertiesMap = new HashMap ();
            getPluginIdToPropertiesMap ().put (pluginId, propertiesMap);
            IExtension [] extensions = Platform.getExtensionRegistry ().getExtensionPoint (CommonCorePlugin.getPluginId (), PROPERTIES_CONFIGURATION_EXT_P_NAME).getExtensions ();
            for (int i = 0;
            i < extensions.length; ++ i) {
                if (extensions [i].getNamespace ().equals (pluginId)) {
                    loadProperties (propertiesMap, extensions [i].getConfigurationElements ());
                }
            }
        }
        return (String) propertiesMap.get (key);
    }

    private static Map getPluginIdToPropertiesMap () {
        if (pluginIdToPropertiesMap == null) {
            pluginIdToPropertiesMap = new HashMap ();
        }
        return pluginIdToPropertiesMap;
    }

    private static void loadProperties (Map propertiesMap, IConfigurationElement [] elements) {
        for (int i = 0;
        i < elements.length; i ++) {
            IConfigurationElement element = elements [i];
            String relativePath = element.getAttribute (PATH_ATTRIBUTE);
            URL installURL = Platform.getBundle (element.getDeclaringExtension ().getNamespace ()).getEntry ("/");
            URL resolveURL = null;
            try {
                resolveURL = Platform.resolve (installURL);
            } catch (IOException e1) {
                assert (false);
            }
            String fullPath = resolveURL.getFile () + relativePath;
            Properties properties = new Properties ();
            try {
                FileInputStream stream = new FileInputStream (fullPath);
                properties.load (stream);
            } catch (FileNotFoundException e) {
                handleException (e);
                continue;
            } catch (IOException e) {
                handleException (e);
                continue;
            }
            propertiesMap.putAll (properties);
        }
    }

    private static void handleException (Exception e) {
        Trace.catching (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.EXCEPTIONS_CATCHING, PropertiesConfigurationManager.class, "configureProperties", e);
        Log.error (CommonCorePlugin.getDefault (), CommonCoreStatusCodes.SERVICE_FAILURE, e.getMessage (), e);
    }

}

