package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

import org.eclipse.gmf.codegen.gmfgen.GenNavigator;

import org.eclipse.gmf.codegen.gmfgen.GenNavigatorChildReference;

public class GenNavigatorImpl extends EObjectImpl implements GenNavigator {
    protected static final boolean GENERATE_DOMAIN_MODEL_NAVIGATOR_EDEFAULT = true;
    protected boolean generateDomainModelNavigator = GENERATE_DOMAIN_MODEL_NAVIGATOR_EDEFAULT;
    protected static final String DOMAIN_CONTENT_EXTENSION_ID_EDEFAULT = null;
    protected String domainContentExtensionID = DOMAIN_CONTENT_EXTENSION_ID_EDEFAULT;
    protected static final String DOMAIN_CONTENT_EXTENSION_NAME_EDEFAULT = null;
    protected String domainContentExtensionName = DOMAIN_CONTENT_EXTENSION_NAME_EDEFAULT;
    protected static final String DOMAIN_CONTENT_EXTENSION_PRIORITY_EDEFAULT = null;
    protected String domainContentExtensionPriority = DOMAIN_CONTENT_EXTENSION_PRIORITY_EDEFAULT;
    protected static final String DOMAIN_CONTENT_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String domainContentProviderClassName = DOMAIN_CONTENT_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final String DOMAIN_LABEL_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String domainLabelProviderClassName = DOMAIN_LABEL_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final String DOMAIN_MODEL_ELEMENT_TESTER_CLASS_NAME_EDEFAULT = null;
    protected String domainModelElementTesterClassName = DOMAIN_MODEL_ELEMENT_TESTER_CLASS_NAME_EDEFAULT;
    protected static final String DOMAIN_NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT = null;
    protected String domainNavigatorItemClassName = DOMAIN_NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT;
    protected static final String CONTENT_EXTENSION_ID_EDEFAULT = null;
    protected String contentExtensionID = CONTENT_EXTENSION_ID_EDEFAULT;
    protected static final String CONTENT_EXTENSION_NAME_EDEFAULT = null;
    protected String contentExtensionName = CONTENT_EXTENSION_NAME_EDEFAULT;
    protected static final String CONTENT_EXTENSION_PRIORITY_EDEFAULT = null;
    protected String contentExtensionPriority = CONTENT_EXTENSION_PRIORITY_EDEFAULT;
    protected static final String LINK_HELPER_EXTENSION_ID_EDEFAULT = null;
    protected String linkHelperExtensionID = LINK_HELPER_EXTENSION_ID_EDEFAULT;
    protected static final String SORTER_EXTENSION_ID_EDEFAULT = null;
    protected String sorterExtensionID = SORTER_EXTENSION_ID_EDEFAULT;
    protected static final String ACTION_PROVIDER_ID_EDEFAULT = null;
    protected String actionProviderID = ACTION_PROVIDER_ID_EDEFAULT;
    protected static final String CONTENT_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String contentProviderClassName = CONTENT_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final String LABEL_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String labelProviderClassName = LABEL_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final String LINK_HELPER_CLASS_NAME_EDEFAULT = null;
    protected String linkHelperClassName = LINK_HELPER_CLASS_NAME_EDEFAULT;
    protected static final String SORTER_CLASS_NAME_EDEFAULT = null;
    protected String sorterClassName = SORTER_CLASS_NAME_EDEFAULT;
    protected static final String ACTION_PROVIDER_CLASS_NAME_EDEFAULT = null;
    protected String actionProviderClassName = ACTION_PROVIDER_CLASS_NAME_EDEFAULT;
    protected static final String ABSTRACT_NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT = null;
    protected String abstractNavigatorItemClassName = ABSTRACT_NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT;
    protected static final String NAVIGATOR_GROUP_CLASS_NAME_EDEFAULT = null;
    protected String navigatorGroupClassName = NAVIGATOR_GROUP_CLASS_NAME_EDEFAULT;
    protected static final String NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT = null;
    protected String navigatorItemClassName = NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT;
    protected static final String URI_INPUT_TESTER_CLASS_NAME_EDEFAULT = null;
    protected String uriInputTesterClassName = URI_INPUT_TESTER_CLASS_NAME_EDEFAULT;
    protected static final String PACKAGE_NAME_EDEFAULT = null;
    protected String packageName = PACKAGE_NAME_EDEFAULT;
    protected EList < GenNavigatorChildReference > childReferences;

    protected GenNavigatorImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenNavigator ();
    }

    public GenEditorGenerator getEditorGen () {
        if (eContainerFeatureID != GMFGenPackage.GEN_NAVIGATOR__EDITOR_GEN) return null;

        return (GenEditorGenerator) eContainer ();
    }

    public String getContentExtensionIDGen () {
        return contentExtensionID;
    }

    public String getContentExtensionID () {
        String value = getContentExtensionIDGen ();
        if (isEmpty (value)) {
            value = getEditorGen ().getPlugin ().getID () + ".resourceContent";
        }
        return value;
    }

    public void setContentExtensionID (String newContentExtensionID) {
        String oldContentExtensionID = contentExtensionID;
        contentExtensionID = newContentExtensionID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_ID, oldContentExtensionID, contentExtensionID));

    }

    public String getContentExtensionNameGen () {
        return contentExtensionName;
    }

    public String getContentExtensionName () {
        String value = getContentExtensionNameGen ();
        if (isEmpty (value)) {
            value = "%navigatorContentName";
        }
        return value;
    }

    public void setContentExtensionName (String newContentExtensionName) {
        String oldContentExtensionName = contentExtensionName;
        contentExtensionName = newContentExtensionName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_NAME, oldContentExtensionName, contentExtensionName));

    }

    public String getContentExtensionPriorityGen () {
        return contentExtensionPriority;
    }

    public String getContentExtensionPriority () {
        String value = getContentExtensionPriorityGen ();
        if (isEmpty (value)) {
            value = "normal";
        }
        return value;
    }

    public void setContentExtensionPriority (String newContentExtensionPriority) {
        String oldContentExtensionPriority = contentExtensionPriority;
        contentExtensionPriority = newContentExtensionPriority;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_PRIORITY, oldContentExtensionPriority, contentExtensionPriority));

    }

    public String getLinkHelperExtensionIDGen () {
        return linkHelperExtensionID;
    }

    public String getLinkHelperExtensionID () {
        String value = getLinkHelperExtensionIDGen ();
        if (isEmpty (value)) {
            value = getEditorGen ().getPlugin ().getID () + ".navigatorLinkHelper";
        }
        return value;
    }

    public void setLinkHelperExtensionID (String newLinkHelperExtensionID) {
        String oldLinkHelperExtensionID = linkHelperExtensionID;
        linkHelperExtensionID = newLinkHelperExtensionID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__LINK_HELPER_EXTENSION_ID, oldLinkHelperExtensionID, linkHelperExtensionID));

    }

    public String getSorterExtensionIDGen () {
        return sorterExtensionID;
    }

    public String getSorterExtensionID () {
        String value = getSorterExtensionIDGen ();
        if (isEmpty (value)) {
            value = getEditorGen ().getPlugin ().getID () + ".navigatorSorter";
        }
        return value;
    }

    public void setSorterExtensionID (String newSorterExtensionID) {
        String oldSorterExtensionID = sorterExtensionID;
        sorterExtensionID = newSorterExtensionID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__SORTER_EXTENSION_ID, oldSorterExtensionID, sorterExtensionID));

    }

    public String getActionProviderIDGen () {
        return actionProviderID;
    }

    public String getActionProviderID () {
        String value = getActionProviderIDGen ();
        if (isEmpty (value)) {
            value = getEditorGen ().getPlugin ().getID () + ".navigatorActionProvider";
        }
        return value;
    }

    public void setActionProviderID (String newActionProviderID) {
        String oldActionProviderID = actionProviderID;
        actionProviderID = newActionProviderID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__ACTION_PROVIDER_ID, oldActionProviderID, actionProviderID));

    }

    public String getContentProviderClassNameGen () {
        return contentProviderClassName;
    }

    public String getContentProviderClassName () {
        String value = getContentProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "NavigatorContentProvider";
        }
        return value;
    }

    public void setContentProviderClassName (String newContentProviderClassName) {
        String oldContentProviderClassName = contentProviderClassName;
        contentProviderClassName = newContentProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__CONTENT_PROVIDER_CLASS_NAME, oldContentProviderClassName, contentProviderClassName));

    }

    public String getLabelProviderClassNameGen () {
        return labelProviderClassName;
    }

    public String getLabelProviderClassName () {
        String value = getLabelProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "NavigatorLabelProvider";
        }
        return value;
    }

    public void setLabelProviderClassName (String newLabelProviderClassName) {
        String oldLabelProviderClassName = labelProviderClassName;
        labelProviderClassName = newLabelProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__LABEL_PROVIDER_CLASS_NAME, oldLabelProviderClassName, labelProviderClassName));

    }

    public String getLinkHelperClassNameGen () {
        return linkHelperClassName;
    }

    public String getLinkHelperClassName () {
        String value = getLinkHelperClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "NavigatorLinkHelper";
        }
        return value;
    }

    public void setLinkHelperClassName (String newLinkHelperClassName) {
        String oldLinkHelperClassName = linkHelperClassName;
        linkHelperClassName = newLinkHelperClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__LINK_HELPER_CLASS_NAME, oldLinkHelperClassName, linkHelperClassName));

    }

    public String getSorterClassNameGen () {
        return sorterClassName;
    }

    public String getSorterClassName () {
        String value = getSorterClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "NavigatorSorter";
        }
        return value;
    }

    public void setSorterClassName (String newSorterClassName) {
        String oldSorterClassName = sorterClassName;
        sorterClassName = newSorterClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__SORTER_CLASS_NAME, oldSorterClassName, sorterClassName));

    }

    public String getActionProviderClassNameGen () {
        return actionProviderClassName;
    }

    public String getActionProviderClassName () {
        String value = getActionProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "NavigatorActionProvider";
        }
        return value;
    }

    public void setActionProviderClassName (String newActionProviderClassName) {
        String oldActionProviderClassName = actionProviderClassName;
        actionProviderClassName = newActionProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__ACTION_PROVIDER_CLASS_NAME, oldActionProviderClassName, actionProviderClassName));

    }

    public String getAbstractNavigatorItemClassNameGen () {
        return abstractNavigatorItemClassName;
    }

    public String getAbstractNavigatorItemClassName () {
        String value = getAbstractNavigatorItemClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "AbstractNavigatorItem";
        }
        return value;
    }

    public void setAbstractNavigatorItemClassName (String newAbstractNavigatorItemClassName) {
        String oldAbstractNavigatorItemClassName = abstractNavigatorItemClassName;
        abstractNavigatorItemClassName = newAbstractNavigatorItemClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__ABSTRACT_NAVIGATOR_ITEM_CLASS_NAME, oldAbstractNavigatorItemClassName, abstractNavigatorItemClassName));

    }

    public String getNavigatorGroupClassNameGen () {
        return navigatorGroupClassName;
    }

    public String getNavigatorGroupClassName () {
        String value = getNavigatorGroupClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "NavigatorGroup";
        }
        return value;
    }

    public void setNavigatorGroupClassName (String newNavigatorGroupClassName) {
        String oldNavigatorGroupClassName = navigatorGroupClassName;
        navigatorGroupClassName = newNavigatorGroupClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__NAVIGATOR_GROUP_CLASS_NAME, oldNavigatorGroupClassName, navigatorGroupClassName));

    }

    public String getNavigatorItemClassNameGen () {
        return navigatorItemClassName;
    }

    public String getNavigatorItemClassName () {
        String value = getNavigatorItemClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "NavigatorItem";
        }
        return value;
    }

    public void setNavigatorItemClassName (String newNavigatorItemClassName) {
        String oldNavigatorItemClassName = navigatorItemClassName;
        navigatorItemClassName = newNavigatorItemClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__NAVIGATOR_ITEM_CLASS_NAME, oldNavigatorItemClassName, navigatorItemClassName));

    }

    public String getUriInputTesterClassNameGen () {
        return uriInputTesterClassName;
    }

    public String getUriInputTesterClassName () {
        String value = getUriInputTesterClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "UriEditorInputTester";
        }
        return value;
    }

    public void setUriInputTesterClassName (String newUriInputTesterClassName) {
        String oldUriInputTesterClassName = uriInputTesterClassName;
        uriInputTesterClassName = newUriInputTesterClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__URI_INPUT_TESTER_CLASS_NAME, oldUriInputTesterClassName, uriInputTesterClassName));

    }

    public String getPackageNameGen () {
        return packageName;
    }

    public String getPackageName () {
        String value = getPackageNameGen ();
        if (value == null) {
            value = getEditorGen ().getPackageNamePrefix () + ".navigator";
        }
        return value;
    }

    public void setPackageName (String newPackageName) {
        String oldPackageName = packageName;
        packageName = newPackageName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__PACKAGE_NAME, oldPackageName, packageName));

    }

    public boolean isGenerateDomainModelNavigator () {
        return generateDomainModelNavigator;
    }

    public void setGenerateDomainModelNavigator (boolean newGenerateDomainModelNavigator) {
        boolean oldGenerateDomainModelNavigator = generateDomainModelNavigator;
        generateDomainModelNavigator = newGenerateDomainModelNavigator;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__GENERATE_DOMAIN_MODEL_NAVIGATOR, oldGenerateDomainModelNavigator, generateDomainModelNavigator));

    }

    public String getDomainContentExtensionIDGen () {
        return domainContentExtensionID;
    }

    public String getDomainContentExtensionID () {
        String value = getDomainContentExtensionIDGen ();
        if (isEmpty (value)) {
            value = getEditorGen ().getPlugin ().getID () + ".domainResourceContent";
        }
        return value;
    }

    public void setDomainContentExtensionID (String newDomainContentExtensionID) {
        String oldDomainContentExtensionID = domainContentExtensionID;
        domainContentExtensionID = newDomainContentExtensionID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_ID, oldDomainContentExtensionID, domainContentExtensionID));

    }

    public String getDomainContentExtensionNameGen () {
        return domainContentExtensionName;
    }

    public String getDomainContentExtensionName () {
        String value = getDomainContentExtensionNameGen ();
        if (isEmpty (value)) {
            value = "%domainNavigatorContentName";
        }
        return value;
    }

    public void setDomainContentExtensionName (String newDomainContentExtensionName) {
        String oldDomainContentExtensionName = domainContentExtensionName;
        domainContentExtensionName = newDomainContentExtensionName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_NAME, oldDomainContentExtensionName, domainContentExtensionName));

    }

    public String getDomainContentExtensionPriorityGen () {
        return domainContentExtensionPriority;
    }

    public String getDomainContentExtensionPriority () {
        String value = getDomainContentExtensionPriorityGen ();
        if (isEmpty (value)) {
            value = "normal";
        }
        return value;
    }

    public void setDomainContentExtensionPriority (String newDomainContentExtensionPriority) {
        String oldDomainContentExtensionPriority = domainContentExtensionPriority;
        domainContentExtensionPriority = newDomainContentExtensionPriority;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_PRIORITY, oldDomainContentExtensionPriority, domainContentExtensionPriority));

    }

    public String getDomainContentProviderClassNameGen () {
        return domainContentProviderClassName;
    }

    public String getDomainContentProviderClassName () {
        String value = getDomainContentProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "DomainNavigatorContentProvider";
        }
        return value;
    }

    public void setDomainContentProviderClassName (String newDomainContentProviderClassName) {
        String oldDomainContentProviderClassName = domainContentProviderClassName;
        domainContentProviderClassName = newDomainContentProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_PROVIDER_CLASS_NAME, oldDomainContentProviderClassName, domainContentProviderClassName));

    }

    public String getDomainLabelProviderClassNameGen () {
        return domainLabelProviderClassName;
    }

    public String getDomainLabelProviderClassName () {
        String value = getDomainLabelProviderClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "DomainNavigatorLabelProvider";
        }
        return value;
    }

    public void setDomainLabelProviderClassName (String newDomainLabelProviderClassName) {
        String oldDomainLabelProviderClassName = domainLabelProviderClassName;
        domainLabelProviderClassName = newDomainLabelProviderClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__DOMAIN_LABEL_PROVIDER_CLASS_NAME, oldDomainLabelProviderClassName, domainLabelProviderClassName));

    }

    public String getDomainModelElementTesterClassNameGen () {
        return domainModelElementTesterClassName;
    }

    public String getDomainModelElementTesterClassName () {
        String value = getDomainModelElementTesterClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "DomainModelElementTester";
        }
        return value;
    }

    public void setDomainModelElementTesterClassName (String newDomainModelElementTesterClassName) {
        String oldDomainModelElementTesterClassName = domainModelElementTesterClassName;
        domainModelElementTesterClassName = newDomainModelElementTesterClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__DOMAIN_MODEL_ELEMENT_TESTER_CLASS_NAME, oldDomainModelElementTesterClassName, domainModelElementTesterClassName));

    }

    public String getDomainNavigatorItemClassNameGen () {
        return domainNavigatorItemClassName;
    }

    public String getDomainNavigatorItemClassName () {
        String value = getDomainNavigatorItemClassNameGen ();
        if (isEmpty (value)) {
            value = getDomainPackageCapName () + "DomainNavigatorItem";
        }
        return value;
    }

    public void setDomainNavigatorItemClassName (String newDomainNavigatorItemClassName) {
        String oldDomainNavigatorItemClassName = domainNavigatorItemClassName;
        domainNavigatorItemClassName = newDomainNavigatorItemClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR__DOMAIN_NAVIGATOR_ITEM_CLASS_NAME, oldDomainNavigatorItemClassName, domainNavigatorItemClassName));

    }

    public EList < GenNavigatorChildReference > getChildReferences () {
        if (childReferences == null) {
            childReferences = new EObjectContainmentWithInverseEList < GenNavigatorChildReference > (GenNavigatorChildReference.class, this, GMFGenPackage.GEN_NAVIGATOR__CHILD_REFERENCES, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR);
        }
        return childReferences;
    }

    public String getContentProviderQualifiedClassName () {
        return getPackageName () + '.' + getContentProviderClassName ();
    }

    public String getLabelProviderQualifiedClassName () {
        return getPackageName () + '.' + getLabelProviderClassName ();
    }

    public String getLinkHelperQualifiedClassName () {
        return getPackageName () + '.' + getLinkHelperClassName ();
    }

    public String getSorterQualifiedClassName () {
        return getPackageName () + '.' + getSorterClassName ();
    }

    public String getActionProviderQualifiedClassName () {
        return getPackageName () + '.' + getActionProviderClassName ();
    }

    public String getAbstractNavigatorItemQualifiedClassName () {
        return getPackageName () + '.' + getAbstractNavigatorItemClassName ();
    }

    public String getNavigatorGroupQualifiedClassName () {
        return getPackageName () + '.' + getNavigatorGroupClassName ();
    }

    public String getNavigatorItemQualifiedClassName () {
        return getPackageName () + '.' + getNavigatorItemClassName ();
    }

    public String getUriInputTesterQualifiedClassName () {
        return getEditorGen ().getEditor ().getPackageName () + '.' + getUriInputTesterClassName ();
    }

    public String getDomainContentProviderQualifiedClassName () {
        return getPackageName () + '.' + getDomainContentProviderClassName ();
    }

    public String getDomainLabelProviderQualifiedClassName () {
        return getPackageName () + '.' + getDomainLabelProviderClassName ();
    }

    public String getDomainModelElementTesterQualifiedClassName () {
        return getEditorGen ().getEditor ().getPackageName () + '.' + getDomainModelElementTesterClassName ();
    }

    public String getDomainNavigatorItemQualifiedClassName () {
        return getPackageName () + '.' + getDomainNavigatorItemClassName ();
    }

    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR__EDITOR_GEN :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_NAVIGATOR__EDITOR_GEN, msgs);
            case GMFGenPackage.GEN_NAVIGATOR__CHILD_REFERENCES :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getChildReferences ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR__EDITOR_GEN :
                return eBasicSetContainer (null, GMFGenPackage.GEN_NAVIGATOR__EDITOR_GEN, msgs);
            case GMFGenPackage.GEN_NAVIGATOR__CHILD_REFERENCES :
                return ((InternalEList < ? >) getChildReferences ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_NAVIGATOR__EDITOR_GEN :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_EDITOR_GENERATOR__NAVIGATOR, GenEditorGenerator.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR__GENERATE_DOMAIN_MODEL_NAVIGATOR :
                return isGenerateDomainModelNavigator () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_ID :
                return getDomainContentExtensionID ();
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_NAME :
                return getDomainContentExtensionName ();
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_PRIORITY :
                return getDomainContentExtensionPriority ();
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_PROVIDER_CLASS_NAME :
                return getDomainContentProviderClassName ();
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_LABEL_PROVIDER_CLASS_NAME :
                return getDomainLabelProviderClassName ();
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_MODEL_ELEMENT_TESTER_CLASS_NAME :
                return getDomainModelElementTesterClassName ();
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_NAVIGATOR_ITEM_CLASS_NAME :
                return getDomainNavigatorItemClassName ();
            case GMFGenPackage.GEN_NAVIGATOR__EDITOR_GEN :
                return getEditorGen ();
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_ID :
                return getContentExtensionID ();
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_NAME :
                return getContentExtensionName ();
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_PRIORITY :
                return getContentExtensionPriority ();
            case GMFGenPackage.GEN_NAVIGATOR__LINK_HELPER_EXTENSION_ID :
                return getLinkHelperExtensionID ();
            case GMFGenPackage.GEN_NAVIGATOR__SORTER_EXTENSION_ID :
                return getSorterExtensionID ();
            case GMFGenPackage.GEN_NAVIGATOR__ACTION_PROVIDER_ID :
                return getActionProviderID ();
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_PROVIDER_CLASS_NAME :
                return getContentProviderClassName ();
            case GMFGenPackage.GEN_NAVIGATOR__LABEL_PROVIDER_CLASS_NAME :
                return getLabelProviderClassName ();
            case GMFGenPackage.GEN_NAVIGATOR__LINK_HELPER_CLASS_NAME :
                return getLinkHelperClassName ();
            case GMFGenPackage.GEN_NAVIGATOR__SORTER_CLASS_NAME :
                return getSorterClassName ();
            case GMFGenPackage.GEN_NAVIGATOR__ACTION_PROVIDER_CLASS_NAME :
                return getActionProviderClassName ();
            case GMFGenPackage.GEN_NAVIGATOR__ABSTRACT_NAVIGATOR_ITEM_CLASS_NAME :
                return getAbstractNavigatorItemClassName ();
            case GMFGenPackage.GEN_NAVIGATOR__NAVIGATOR_GROUP_CLASS_NAME :
                return getNavigatorGroupClassName ();
            case GMFGenPackage.GEN_NAVIGATOR__NAVIGATOR_ITEM_CLASS_NAME :
                return getNavigatorItemClassName ();
            case GMFGenPackage.GEN_NAVIGATOR__URI_INPUT_TESTER_CLASS_NAME :
                return getUriInputTesterClassName ();
            case GMFGenPackage.GEN_NAVIGATOR__PACKAGE_NAME :
                return getPackageName ();
            case GMFGenPackage.GEN_NAVIGATOR__CHILD_REFERENCES :
                return getChildReferences ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR__GENERATE_DOMAIN_MODEL_NAVIGATOR :
                setGenerateDomainModelNavigator (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_ID :
                setDomainContentExtensionID ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_NAME :
                setDomainContentExtensionName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_PRIORITY :
                setDomainContentExtensionPriority ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_PROVIDER_CLASS_NAME :
                setDomainContentProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_LABEL_PROVIDER_CLASS_NAME :
                setDomainLabelProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_MODEL_ELEMENT_TESTER_CLASS_NAME :
                setDomainModelElementTesterClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_NAVIGATOR_ITEM_CLASS_NAME :
                setDomainNavigatorItemClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_ID :
                setContentExtensionID ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_NAME :
                setContentExtensionName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_PRIORITY :
                setContentExtensionPriority ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__LINK_HELPER_EXTENSION_ID :
                setLinkHelperExtensionID ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__SORTER_EXTENSION_ID :
                setSorterExtensionID ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__ACTION_PROVIDER_ID :
                setActionProviderID ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_PROVIDER_CLASS_NAME :
                setContentProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__LABEL_PROVIDER_CLASS_NAME :
                setLabelProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__LINK_HELPER_CLASS_NAME :
                setLinkHelperClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__SORTER_CLASS_NAME :
                setSorterClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__ACTION_PROVIDER_CLASS_NAME :
                setActionProviderClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__ABSTRACT_NAVIGATOR_ITEM_CLASS_NAME :
                setAbstractNavigatorItemClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__NAVIGATOR_GROUP_CLASS_NAME :
                setNavigatorGroupClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__NAVIGATOR_ITEM_CLASS_NAME :
                setNavigatorItemClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__URI_INPUT_TESTER_CLASS_NAME :
                setUriInputTesterClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__PACKAGE_NAME :
                setPackageName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__CHILD_REFERENCES :
                getChildReferences ().clear ();
                getChildReferences ().addAll ((Collection < ? extends GenNavigatorChildReference >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR__GENERATE_DOMAIN_MODEL_NAVIGATOR :
                setGenerateDomainModelNavigator (GENERATE_DOMAIN_MODEL_NAVIGATOR_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_ID :
                setDomainContentExtensionID (DOMAIN_CONTENT_EXTENSION_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_NAME :
                setDomainContentExtensionName (DOMAIN_CONTENT_EXTENSION_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_PRIORITY :
                setDomainContentExtensionPriority (DOMAIN_CONTENT_EXTENSION_PRIORITY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_PROVIDER_CLASS_NAME :
                setDomainContentProviderClassName (DOMAIN_CONTENT_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_LABEL_PROVIDER_CLASS_NAME :
                setDomainLabelProviderClassName (DOMAIN_LABEL_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_MODEL_ELEMENT_TESTER_CLASS_NAME :
                setDomainModelElementTesterClassName (DOMAIN_MODEL_ELEMENT_TESTER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_NAVIGATOR_ITEM_CLASS_NAME :
                setDomainNavigatorItemClassName (DOMAIN_NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_ID :
                setContentExtensionID (CONTENT_EXTENSION_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_NAME :
                setContentExtensionName (CONTENT_EXTENSION_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_PRIORITY :
                setContentExtensionPriority (CONTENT_EXTENSION_PRIORITY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__LINK_HELPER_EXTENSION_ID :
                setLinkHelperExtensionID (LINK_HELPER_EXTENSION_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__SORTER_EXTENSION_ID :
                setSorterExtensionID (SORTER_EXTENSION_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__ACTION_PROVIDER_ID :
                setActionProviderID (ACTION_PROVIDER_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_PROVIDER_CLASS_NAME :
                setContentProviderClassName (CONTENT_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__LABEL_PROVIDER_CLASS_NAME :
                setLabelProviderClassName (LABEL_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__LINK_HELPER_CLASS_NAME :
                setLinkHelperClassName (LINK_HELPER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__SORTER_CLASS_NAME :
                setSorterClassName (SORTER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__ACTION_PROVIDER_CLASS_NAME :
                setActionProviderClassName (ACTION_PROVIDER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__ABSTRACT_NAVIGATOR_ITEM_CLASS_NAME :
                setAbstractNavigatorItemClassName (ABSTRACT_NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__NAVIGATOR_GROUP_CLASS_NAME :
                setNavigatorGroupClassName (NAVIGATOR_GROUP_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__NAVIGATOR_ITEM_CLASS_NAME :
                setNavigatorItemClassName (NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__URI_INPUT_TESTER_CLASS_NAME :
                setUriInputTesterClassName (URI_INPUT_TESTER_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__PACKAGE_NAME :
                setPackageName (PACKAGE_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NAVIGATOR__CHILD_REFERENCES :
                getChildReferences ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_NAVIGATOR__GENERATE_DOMAIN_MODEL_NAVIGATOR :
                return generateDomainModelNavigator != GENERATE_DOMAIN_MODEL_NAVIGATOR_EDEFAULT;
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_ID :
                return DOMAIN_CONTENT_EXTENSION_ID_EDEFAULT == null ? domainContentExtensionID != null : ! DOMAIN_CONTENT_EXTENSION_ID_EDEFAULT.equals (domainContentExtensionID);
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_NAME :
                return DOMAIN_CONTENT_EXTENSION_NAME_EDEFAULT == null ? domainContentExtensionName != null : ! DOMAIN_CONTENT_EXTENSION_NAME_EDEFAULT.equals (domainContentExtensionName);
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_EXTENSION_PRIORITY :
                return DOMAIN_CONTENT_EXTENSION_PRIORITY_EDEFAULT == null ? domainContentExtensionPriority != null : ! DOMAIN_CONTENT_EXTENSION_PRIORITY_EDEFAULT.equals (domainContentExtensionPriority);
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_CONTENT_PROVIDER_CLASS_NAME :
                return DOMAIN_CONTENT_PROVIDER_CLASS_NAME_EDEFAULT == null ? domainContentProviderClassName != null : ! DOMAIN_CONTENT_PROVIDER_CLASS_NAME_EDEFAULT.equals (domainContentProviderClassName);
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_LABEL_PROVIDER_CLASS_NAME :
                return DOMAIN_LABEL_PROVIDER_CLASS_NAME_EDEFAULT == null ? domainLabelProviderClassName != null : ! DOMAIN_LABEL_PROVIDER_CLASS_NAME_EDEFAULT.equals (domainLabelProviderClassName);
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_MODEL_ELEMENT_TESTER_CLASS_NAME :
                return DOMAIN_MODEL_ELEMENT_TESTER_CLASS_NAME_EDEFAULT == null ? domainModelElementTesterClassName != null : ! DOMAIN_MODEL_ELEMENT_TESTER_CLASS_NAME_EDEFAULT.equals (domainModelElementTesterClassName);
            case GMFGenPackage.GEN_NAVIGATOR__DOMAIN_NAVIGATOR_ITEM_CLASS_NAME :
                return DOMAIN_NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT == null ? domainNavigatorItemClassName != null : ! DOMAIN_NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT.equals (domainNavigatorItemClassName);
            case GMFGenPackage.GEN_NAVIGATOR__EDITOR_GEN :
                return getEditorGen () != null;
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_ID :
                return CONTENT_EXTENSION_ID_EDEFAULT == null ? contentExtensionID != null : ! CONTENT_EXTENSION_ID_EDEFAULT.equals (contentExtensionID);
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_NAME :
                return CONTENT_EXTENSION_NAME_EDEFAULT == null ? contentExtensionName != null : ! CONTENT_EXTENSION_NAME_EDEFAULT.equals (contentExtensionName);
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_EXTENSION_PRIORITY :
                return CONTENT_EXTENSION_PRIORITY_EDEFAULT == null ? contentExtensionPriority != null : ! CONTENT_EXTENSION_PRIORITY_EDEFAULT.equals (contentExtensionPriority);
            case GMFGenPackage.GEN_NAVIGATOR__LINK_HELPER_EXTENSION_ID :
                return LINK_HELPER_EXTENSION_ID_EDEFAULT == null ? linkHelperExtensionID != null : ! LINK_HELPER_EXTENSION_ID_EDEFAULT.equals (linkHelperExtensionID);
            case GMFGenPackage.GEN_NAVIGATOR__SORTER_EXTENSION_ID :
                return SORTER_EXTENSION_ID_EDEFAULT == null ? sorterExtensionID != null : ! SORTER_EXTENSION_ID_EDEFAULT.equals (sorterExtensionID);
            case GMFGenPackage.GEN_NAVIGATOR__ACTION_PROVIDER_ID :
                return ACTION_PROVIDER_ID_EDEFAULT == null ? actionProviderID != null : ! ACTION_PROVIDER_ID_EDEFAULT.equals (actionProviderID);
            case GMFGenPackage.GEN_NAVIGATOR__CONTENT_PROVIDER_CLASS_NAME :
                return CONTENT_PROVIDER_CLASS_NAME_EDEFAULT == null ? contentProviderClassName != null : ! CONTENT_PROVIDER_CLASS_NAME_EDEFAULT.equals (contentProviderClassName);
            case GMFGenPackage.GEN_NAVIGATOR__LABEL_PROVIDER_CLASS_NAME :
                return LABEL_PROVIDER_CLASS_NAME_EDEFAULT == null ? labelProviderClassName != null : ! LABEL_PROVIDER_CLASS_NAME_EDEFAULT.equals (labelProviderClassName);
            case GMFGenPackage.GEN_NAVIGATOR__LINK_HELPER_CLASS_NAME :
                return LINK_HELPER_CLASS_NAME_EDEFAULT == null ? linkHelperClassName != null : ! LINK_HELPER_CLASS_NAME_EDEFAULT.equals (linkHelperClassName);
            case GMFGenPackage.GEN_NAVIGATOR__SORTER_CLASS_NAME :
                return SORTER_CLASS_NAME_EDEFAULT == null ? sorterClassName != null : ! SORTER_CLASS_NAME_EDEFAULT.equals (sorterClassName);
            case GMFGenPackage.GEN_NAVIGATOR__ACTION_PROVIDER_CLASS_NAME :
                return ACTION_PROVIDER_CLASS_NAME_EDEFAULT == null ? actionProviderClassName != null : ! ACTION_PROVIDER_CLASS_NAME_EDEFAULT.equals (actionProviderClassName);
            case GMFGenPackage.GEN_NAVIGATOR__ABSTRACT_NAVIGATOR_ITEM_CLASS_NAME :
                return ABSTRACT_NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT == null ? abstractNavigatorItemClassName != null : ! ABSTRACT_NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT.equals (abstractNavigatorItemClassName);
            case GMFGenPackage.GEN_NAVIGATOR__NAVIGATOR_GROUP_CLASS_NAME :
                return NAVIGATOR_GROUP_CLASS_NAME_EDEFAULT == null ? navigatorGroupClassName != null : ! NAVIGATOR_GROUP_CLASS_NAME_EDEFAULT.equals (navigatorGroupClassName);
            case GMFGenPackage.GEN_NAVIGATOR__NAVIGATOR_ITEM_CLASS_NAME :
                return NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT == null ? navigatorItemClassName != null : ! NAVIGATOR_ITEM_CLASS_NAME_EDEFAULT.equals (navigatorItemClassName);
            case GMFGenPackage.GEN_NAVIGATOR__URI_INPUT_TESTER_CLASS_NAME :
                return URI_INPUT_TESTER_CLASS_NAME_EDEFAULT == null ? uriInputTesterClassName != null : ! URI_INPUT_TESTER_CLASS_NAME_EDEFAULT.equals (uriInputTesterClassName);
            case GMFGenPackage.GEN_NAVIGATOR__PACKAGE_NAME :
                return PACKAGE_NAME_EDEFAULT == null ? packageName != null : ! PACKAGE_NAME_EDEFAULT.equals (packageName);
            case GMFGenPackage.GEN_NAVIGATOR__CHILD_REFERENCES :
                return childReferences != null && ! childReferences.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (generateDomainModelNavigator: ");
        result.append (generateDomainModelNavigator);
        result.append (", domainContentExtensionID: ");
        result.append (domainContentExtensionID);
        result.append (", domainContentExtensionName: ");
        result.append (domainContentExtensionName);
        result.append (", domainContentExtensionPriority: ");
        result.append (domainContentExtensionPriority);
        result.append (", domainContentProviderClassName: ");
        result.append (domainContentProviderClassName);
        result.append (", domainLabelProviderClassName: ");
        result.append (domainLabelProviderClassName);
        result.append (", domainModelElementTesterClassName: ");
        result.append (domainModelElementTesterClassName);
        result.append (", domainNavigatorItemClassName: ");
        result.append (domainNavigatorItemClassName);
        result.append (", contentExtensionID: ");
        result.append (contentExtensionID);
        result.append (", contentExtensionName: ");
        result.append (contentExtensionName);
        result.append (", contentExtensionPriority: ");
        result.append (contentExtensionPriority);
        result.append (", linkHelperExtensionID: ");
        result.append (linkHelperExtensionID);
        result.append (", sorterExtensionID: ");
        result.append (sorterExtensionID);
        result.append (", actionProviderID: ");
        result.append (actionProviderID);
        result.append (", contentProviderClassName: ");
        result.append (contentProviderClassName);
        result.append (", labelProviderClassName: ");
        result.append (labelProviderClassName);
        result.append (", linkHelperClassName: ");
        result.append (linkHelperClassName);
        result.append (", sorterClassName: ");
        result.append (sorterClassName);
        result.append (", actionProviderClassName: ");
        result.append (actionProviderClassName);
        result.append (", abstractNavigatorItemClassName: ");
        result.append (abstractNavigatorItemClassName);
        result.append (", navigatorGroupClassName: ");
        result.append (navigatorGroupClassName);
        result.append (", navigatorItemClassName: ");
        result.append (navigatorItemClassName);
        result.append (", uriInputTesterClassName: ");
        result.append (uriInputTesterClassName);
        result.append (", packageName: ");
        result.append (packageName);
        result.append (')');
        return result.toString ();
    }

    private String getDomainPackageCapName () {
        return ((GenEditorGeneratorImpl) getEditorGen ()).getDomainModelCapName ();
    }

    static boolean isEmpty (String s) {
        return s == null || s.trim ().length () == 0;
    }

}

