package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.beans.PropertyChangeEvent;

import java.util.ArrayList;

import java.util.HashSet;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import java.util.Set;

import org.eclipse.draw2d.Connection;

import org.eclipse.draw2d.ConnectionAnchor;

import org.eclipse.draw2d.FigureCanvas;

import org.eclipse.draw2d.FreeformLayout;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.LayoutManager;

import org.eclipse.draw2d.RangeModel;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.CompoundSnapToHelper;

import org.eclipse.gef.DragTracker;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPartViewer;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.Request;

import org.eclipse.gef.SnapToGeometry;

import org.eclipse.gef.SnapToGrid;

import org.eclipse.gef.SnapToGuides;

import org.eclipse.gef.SnapToHelper;

import org.eclipse.gef.editpolicies.SnapFeedbackPolicy;

import org.eclipse.gef.requests.SelectionRequest;

import org.eclipse.gef.rulers.RulerProvider;

import org.eclipse.gef.tools.DeselectAllTracker;

import org.eclipse.swt.widgets.Display;

import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ActionBarEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ContainerEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ContainerNodeEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.figures.ShapeCompartmentFigure;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ISurfaceEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.DiagramLinkDragDropEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.ShapeCompartmentDropEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.internal.tools.RubberbandDragTracker;

import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.View;

public abstract class ShapeCompartmentEditPart extends ResizableCompartmentEditPart implements ISurfaceEditPart {
    private ConnectorRefreshMgr _crMgr;
    private boolean _refreshQueued = false;
    private boolean isSupportingViewActions = false;
    public static class ConnectorRefreshMgr {

        protected void refreshConnectors (ShapeCompartmentEditPart scep) {
            Iterator connectionNodes = getConnectionNodes (scep).iterator ();
            while (connectionNodes.hasNext ()) {
                ConnectionNodeEditPart cep = (ConnectionNodeEditPart) connectionNodes.next ();
                Connection connector = (Connection) cep.getFigure ();
                IGraphicalEditPart source = (IGraphicalEditPart) getSourceEditPart (cep);
                IGraphicalEditPart target = (IGraphicalEditPart) getTargetEditPart (cep);
                ShapeCompartmentEditPart sContainer = getOwningShapeCompartment (source);
                ShapeCompartmentEditPart tContainer = getOwningShapeCompartment (target);
                if (sContainer == null && tContainer == null) {
                    continue;
                }
                boolean sfVisible = source != null;
                boolean tfVisible = target != null;
                ConnectionAnchor sc = cep.getSourceConnectionAnchor ();
                ConnectionAnchor tc = cep.getTargetConnectionAnchor ();
                Point sLoc = sc.getLocation (tc.getReferencePoint ());
                Point tLoc = tc.getLocation (sc.getReferencePoint ());
                Diagram diagram = ((View) scep.getModel ()).getDiagram ();
                Map registry = scep.getViewer ().getEditPartRegistry ();
                IGraphicalEditPart dep = (IGraphicalEditPart) registry.get (diagram);
                IFigure stopFigure = dep == null ? null : dep.getContentPane ();
                if (sContainer != null) {
                    ShapeCompartmentFigure fig = sContainer.getShapeCompartmentFigure ();
                    sfVisible = isFigureVisible (fig, sLoc, stopFigure);
                    if (! sfVisible) {
                        sfVisible = isBorderItem (sContainer, source);
                    }
                }
                if (tContainer != null) {
                    ShapeCompartmentFigure fig = tContainer.getShapeCompartmentFigure ();
                    tfVisible = isFigureVisible (fig, tLoc, stopFigure);
                    if (! tfVisible) {
                        tfVisible = isBorderItem (tContainer, target);
                    }
                }
                connector.setVisible (sfVisible && tfVisible);
            }
        }

        protected Set getConnectionNodes (ShapeCompartmentEditPart scep) {
            Set endPoints = new HashSet ();
            Object modelObject = scep.getModel ();
            if (scep.getViewer () == null || modelObject == null || ! (modelObject instanceof View)) {
                return endPoints;
            }
            Diagram diagram = ((View) modelObject).getDiagram ();
            Map registry = scep.getViewer ().getEditPartRegistry ();
            List edges = diagram.getEdges ();
            Iterator connectors = edges.iterator ();
            while (connectors.hasNext ()) {
                Edge connector = (Edge) connectors.next ();
                EditPart endPoint = (EditPart) registry.get (connector.getSource ());
                if (isChildOf (scep, endPoint)) {
                    Object cep = registry.get (connector);
                    if (cep != null) {
                        endPoints.add (cep);
                    }
                    continue;
                }
                endPoint = (EditPart) registry.get (connector.getTarget ());
                if (isChildOf (scep, endPoint)) {
                    Object cep = registry.get (connector);
                    if (cep != null) {
                        endPoints.add (cep);
                    }
                }
            }
            return endPoints;
        }

        protected boolean isChildOf (EditPart parent, EditPart child) {
            EditPart walker = child;
            while (walker != null && walker != parent) {
                walker = walker.getParent ();
            }
            return walker != null;
        }

        protected ShapeCompartmentEditPart getOwningShapeCompartment (EditPart ep) {
            EditPart walker = ep;
            while (walker != null && ! (walker instanceof ShapeCompartmentEditPart)) {
                walker = walker.getParent ();
            }
            return (ShapeCompartmentEditPart) walker;
        }

        protected boolean isBorderItem (ShapeCompartmentEditPart scep, IGraphicalEditPart itemEditPart) {
            return false;
        }

        protected EditPart getSourceEditPart (ConnectionEditPart connectionEditPart) {
            return connectionEditPart.getSource ();
        }

        protected EditPart getTargetEditPart (ConnectionEditPart connectionEditPart) {
            return connectionEditPart.getTarget ();
        }

        protected List getSourceConnections (IGraphicalEditPart editPart) {
            return editPart.getSourceConnections ();
        }

        protected List getTargetConnections (IGraphicalEditPart editPart) {
            return editPart.getTargetConnections ();
        }

        protected boolean isFigureVisible (final IFigure figure, final Point loc) {
            return isFigureVisible (figure, loc, null);
        }

        protected boolean isFigureVisible (final IFigure figure, final Point loc, final IFigure stopFigure) {
            if (! (figure.isVisible ())) {
                return false;
            } else {
                Rectangle bounds = figure.getBounds ().getCopy ();
                figure.translateToAbsolute (bounds);
                if (! (bounds.contains (loc))) {
                    return false;
                }
            }
            IFigure parent = figure.getParent ();
            while (parent != null && parent != stopFigure) {
                return isFigureVisible (parent, loc, stopFigure);
            }
            return true;
        }

    }

    public ShapeCompartmentEditPart (View view) {
        super (view);
    }

    protected final ConnectorRefreshMgr getConnectorRefreshMgr () {
        if (_crMgr == null) {
            _crMgr = createConnectorRefreshMgr ();
        }
        return _crMgr;
    }

    protected ConnectorRefreshMgr createConnectorRefreshMgr () {
        return new ConnectorRefreshMgr ();
    }

    protected LayoutManager getLayoutManager () {
        return new FreeformLayout ();
    }

    protected IFigure createFigure () {
        ShapeCompartmentFigure scf = new ShapeCompartmentFigure (getTitleName ());
        scf.getContentPane ().setLayoutManager (getLayoutManager ());
        return scf;
    }

    public ShapeCompartmentFigure getShapeCompartmentFigure () {
        return (ShapeCompartmentFigure) getCompartmentFigure ();
    }

    public IFigure getContentPane () {
        return getShapeCompartmentFigure ().getContentPane ();
    }

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy ());
        installEditPolicy (EditPolicy.LAYOUT_ROLE, new XYLayoutEditPolicy ());
        installEditPolicy (EditPolicy.CONTAINER_ROLE, new ContainerEditPolicy ());
        installEditPolicy (EditPolicyRoles.DRAG_DROP_ROLE, new DiagramLinkDragDropEditPolicy ());
        installEditPolicy (EditPolicy.GRAPHICAL_NODE_ROLE, new ContainerNodeEditPolicy ());
        installEditPolicy (EditPolicyRoles.SNAP_FEEDBACK_ROLE, new SnapFeedbackPolicy ());
        installEditPolicy (EditPolicyRoles.DRAG_DROP_ROLE, new ShapeCompartmentDropEditPolicy ());
        installEditPolicy (EditPolicyRoles.ACTIONBAR_ROLE, new ActionBarEditPolicy ());
    }

    protected void handlePropertyChangeEvent (PropertyChangeEvent event) {
        String pName = event.getPropertyName ();
        if (Properties.ID_EXTENTX.equals (pName) || Properties.ID_EXTENTY.equals (pName) || RangeModel.PROPERTY_EXTENT.equals (pName) || RangeModel.PROPERTY_VALUE.equals (pName)) {
            refreshConnectors ();
        } else {
            super.handlePropertyChangeEvent (event);
        }
    }

    protected void handleNotificationEvent (NotificationEvent event) {
        super.handleNotificationEvent (event);
        if (event.isElementAddedToSlot () || event.isElementRemovedFromSlot ()) {
            refreshConnectors ();
        }
    }

    protected void refreshConnectors () {
        if (! _refreshQueued) {
            _refreshQueued = true;
            Display.getDefault ().asyncExec (new Runnable () {

                public void run () {
                    try {
                        if (ShapeCompartmentEditPart.this.isActive ()) {
                            getConnectorRefreshMgr ().refreshConnectors (ShapeCompartmentEditPart.this);
                        }
                    } finally {
                        ShapeCompartmentEditPart.this._refreshQueued = false;
                    }
                }

            }

            );
        }
    }

    protected void unregister () {
        super.unregister ();
        getShapeCompartmentFigure ().removePropertyChangeListener (this);
        EditPartViewer viewer = getViewer ();
        if (viewer != null && viewer.getControl () instanceof FigureCanvas) {
            FigureCanvas figureCanvas = (FigureCanvas) viewer.getControl ();
            figureCanvas.getViewport ().getVerticalRangeModel ().removePropertyChangeListener (this);
            figureCanvas.getViewport ().getHorizontalRangeModel ().removePropertyChangeListener (this);
        }
    }

    protected void registerVisuals () {
        super.registerVisuals ();
        getShapeCompartmentFigure ().addPropertyChangeListener (this);
        EditPartViewer viewer = getViewer ();
        if (viewer != null && viewer.getControl () instanceof FigureCanvas) {
            FigureCanvas figureCanvas = (FigureCanvas) viewer.getControl ();
            figureCanvas.getViewport ().getVerticalRangeModel ().addPropertyChangeListener (this);
            figureCanvas.getViewport ().getHorizontalRangeModel ().addPropertyChangeListener (this);
        }
    }

    protected boolean supportsDragSelection () {
        return true;
    }

    public DragTracker getDragTracker (Request req) {
        if (! supportsDragSelection ()) return super.getDragTracker (req);

        if (req instanceof SelectionRequest && ((SelectionRequest) req).getLastButtonPressed () == 3) return new DeselectAllTracker (this) {

            protected boolean handleButtonDown (int button) {
                getCurrentViewer ().select (ShapeCompartmentEditPart.this);
                return true;
            }

        }

        ;

        return new RubberbandDragTracker () {

            protected void handleFinished () {
                if (getViewer ().getSelectedEditParts ().isEmpty ()) getViewer ().select (ShapeCompartmentEditPart.this);

            }

        }

        ;
    }

    protected String getTitleName () {
        return null;
    }

    public Object getAdapter (Class adapter) {
        if (adapter == SnapToHelper.class) {
            List snapStrategies = new ArrayList ();
            Boolean val = (Boolean) getViewer ().getProperty (RulerProvider.PROPERTY_RULER_VISIBILITY);
            if (val != null && val.booleanValue ()) snapStrategies.add (new SnapToGuides (this));

            val = (Boolean) getViewer ().getProperty (SnapToGeometry.PROPERTY_SNAP_ENABLED);
            if (val != null && val.booleanValue ()) snapStrategies.add (new SnapToGrid ((GraphicalEditPart) this.getParent ()));

            if (snapStrategies.size () == 0) return null;

            if (snapStrategies.size () == 1) return (SnapToHelper) snapStrategies.get (0);

            SnapToHelper ss [] = new SnapToHelper [snapStrategies.size ()];
            for (int i = 0;
            i < snapStrategies.size (); i ++) ss [i] = (SnapToHelper) snapStrategies.get (i);

            return new CompoundSnapToHelper (ss);
        }
        return super.getAdapter (adapter);
    }

    protected void refreshVisibility () {
        super.refreshVisibility ();
        refreshConnectors ();
    }

    public boolean isSupportingViewActions () {
        return this.isSupportingViewActions;
    }

    public void setIsSupportingViewActions (boolean supportsViewActions) {
        this.isSupportingViewActions = supportsViewActions;
    }

}

