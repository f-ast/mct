package org.eclipse.gmf.mappings.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.mappings.CanvasMapping;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.LinkMapping;

import org.eclipse.gmf.mappings.Mapping;

import org.eclipse.gmf.mappings.NodeMapping;

import org.eclipse.gmf.mappings.ToolGroup;

public class MappingImpl extends EObjectImpl implements Mapping {
    protected EList nodes = null;
    protected EList links = null;
    protected CanvasMapping diagram = null;
    protected EList toolGroups = null;

    protected MappingImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getMapping ();
    }

    public EList getNodes () {
        if (nodes == null) {
            nodes = new EObjectContainmentEList (NodeMapping.class, this, GMFMapPackage.MAPPING__NODES);
        }
        return nodes;
    }

    public EList getLinks () {
        if (links == null) {
            links = new EObjectContainmentEList (LinkMapping.class, this, GMFMapPackage.MAPPING__LINKS);
        }
        return links;
    }

    public CanvasMapping getDiagram () {
        return diagram;
    }

    public NotificationChain basicSetDiagram (CanvasMapping newDiagram, NotificationChain msgs) {
        CanvasMapping oldDiagram = diagram;
        diagram = newDiagram;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFMapPackage.MAPPING__DIAGRAM, oldDiagram, newDiagram);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setDiagram (CanvasMapping newDiagram) {
        if (newDiagram != diagram) {
            NotificationChain msgs = null;
            if (diagram != null) msgs = ((InternalEObject) diagram).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.MAPPING__DIAGRAM, null, msgs);

            if (newDiagram != null) msgs = ((InternalEObject) newDiagram).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.MAPPING__DIAGRAM, null, msgs);

            msgs = basicSetDiagram (newDiagram, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.MAPPING__DIAGRAM, newDiagram, newDiagram));

    }

    public EList getToolGroups () {
        if (toolGroups == null) {
            toolGroups = new EObjectContainmentEList (ToolGroup.class, this, GMFMapPackage.MAPPING__TOOL_GROUPS);
        }
        return toolGroups;
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFMapPackage.MAPPING__NODES :
                    return ((InternalEList) getNodes ()).basicRemove (otherEnd, msgs);
                case GMFMapPackage.MAPPING__LINKS :
                    return ((InternalEList) getLinks ()).basicRemove (otherEnd, msgs);
                case GMFMapPackage.MAPPING__DIAGRAM :
                    return basicSetDiagram (null, msgs);
                case GMFMapPackage.MAPPING__TOOL_GROUPS :
                    return ((InternalEList) getToolGroups ()).basicRemove (otherEnd, msgs);
                default :
                    return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
            }
        }
        return eBasicSetContainer (null, featureID, msgs);
    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFMapPackage.MAPPING__NODES :
                return getNodes ();
            case GMFMapPackage.MAPPING__LINKS :
                return getLinks ();
            case GMFMapPackage.MAPPING__DIAGRAM :
                return getDiagram ();
            case GMFMapPackage.MAPPING__TOOL_GROUPS :
                return getToolGroups ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFMapPackage.MAPPING__NODES :
                getNodes ().clear ();
                getNodes ().addAll ((Collection) newValue);
                return;
            case GMFMapPackage.MAPPING__LINKS :
                getLinks ().clear ();
                getLinks ().addAll ((Collection) newValue);
                return;
            case GMFMapPackage.MAPPING__DIAGRAM :
                setDiagram ((CanvasMapping) newValue);
                return;
            case GMFMapPackage.MAPPING__TOOL_GROUPS :
                getToolGroups ().clear ();
                getToolGroups ().addAll ((Collection) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFMapPackage.MAPPING__NODES :
                getNodes ().clear ();
                return;
            case GMFMapPackage.MAPPING__LINKS :
                getLinks ().clear ();
                return;
            case GMFMapPackage.MAPPING__DIAGRAM :
                setDiagram ((CanvasMapping) null);
                return;
            case GMFMapPackage.MAPPING__TOOL_GROUPS :
                getToolGroups ().clear ();
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFMapPackage.MAPPING__NODES :
                return nodes != null && ! nodes.isEmpty ();
            case GMFMapPackage.MAPPING__LINKS :
                return links != null && ! links.isEmpty ();
            case GMFMapPackage.MAPPING__DIAGRAM :
                return diagram != null;
            case GMFMapPackage.MAPPING__TOOL_GROUPS :
                return toolGroups != null && ! toolGroups.isEmpty ();
        }
        return eDynamicIsSet (eFeature);
    }

}

