package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Collections;

import java.util.HashSet;

import java.util.Iterator;

import java.util.List;

import java.util.ListIterator;

import java.util.Set;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPartViewer;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.UnexecutableCommand;

import org.eclipse.gef.requests.CreateRequest;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.INodeEditPart;

import org.eclipse.gmf.runtime.diagram.ui.figures.ICanonicalShapeCompartmentLayout;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.DropObjectsRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.osgi.util.NLS;

public abstract class CanonicalConnectionEditPolicy extends CanonicalEditPolicy {

    abstract protected List getSemanticConnectionsList ();

    abstract protected EObject getSourceElement (EObject relationship);

    abstract protected EObject getTargetElement (EObject relationship);

    protected List getSemanticChildrenList () {
        return Collections.EMPTY_LIST;
    }

    protected void refreshOnActivate () {
        List c = getHost ().getChildren ();
        for (int i = 0;
        i < c.size (); i ++) ((EditPart) c.get (i)).activate ();

        refresh ();
    }

    protected boolean canCreateConnection (EditPart sep, EditPart tep, EObject connection) {
        if (sep != null && sep.isActive () && tep != null && tep.isActive ()) {
            View src = (View) sep.getAdapter (View.class);
            View tgt = (View) tep.getAdapter (View.class);
            if (src != null && tgt != null) {
                return sep.getParent ().getEditPolicy (EditPolicyRoles.CANONICAL_ROLE) != null && tep.getParent ().getEditPolicy (EditPolicyRoles.CANONICAL_ROLE) != null;
            }
        }
        return false;
    }

    private EditPart getEditPartFor (EObject element, EObject context) {
        if (element != null && ! (element instanceof View)) {
            EditPartViewer viewer = getHost ().getViewer ();
            if (viewer instanceof IDiagramGraphicalViewer) {
                List parts = ((IDiagramGraphicalViewer) viewer).findEditPartsForElement (EObjectUtil.getID (element), INodeEditPart.class);
                if (parts.isEmpty ()) {
                    EObject container = element.eContainer ();
                    EditPart containerEP = getEditPartFor (container, null);
                    if (containerEP != null) {
                        containerEP.refresh ();
                        parts = ((IDiagramGraphicalViewer) viewer).findEditPartsForElement (EObjectUtil.getID (element), INodeEditPart.class);
                    }
                }
                return findEditPartForElement (element, context, parts);
            }
        }
        return (EditPart) host ().getViewer ().getEditPartRegistry ().get (element);
    }

    protected EditPart findEditPartForElement (EObject element, EObject context, List parts) {
        EditPart ancestor = getHost ();
        while (ancestor != null) {
            EditPart ep = reachForEditPartWithAncestor (parts, ancestor);
            if (ep != null) {
                return ep;
            }
            ancestor = ancestor.getParent ();
        }
        return null;
    }

    private EditPart reachForEditPartWithAncestor (List results, EditPart ancestor) {
        ListIterator li = results.listIterator ();
        while (li.hasNext ()) {
            EditPart ep = (EditPart) li.next ();
            EditPart walker = ep.getParent ();
            while (walker != null) {
                if (walker.equals (ancestor)) return ep;

                walker = walker.getParent ();
            }
        }
        return null;
    }

    protected String getDefaultFactoryHint () {
        return "";
    }

    protected final Edge createConnectionView (EObject connection, int index) {
        EditPart sep = getSourceEditPartFor (connection);
        EditPart tep = getTargetEditPartFor (connection);
        if (! canCreateConnection (sep, tep, connection)) {
            return null;
        }
        View sView = (View) sep.getModel ();
        View tView = (View) tep.getModel ();
        Edge model = null;
        String factoryHint = getDefaultFactoryHint ();
        IAdaptable elementAdapter = new CanonicalElementAdapter (connection, factoryHint);
        CreateConnectionViewRequest ccr = getCreateConnectionViewRequest (elementAdapter, getFactoryHint (elementAdapter, factoryHint), index);
        ccr.setType (RequestConstants.REQ_CONNECTION_START);
        ccr.setSourceEditPart (sep);
        getCreateViewCommand (ccr);
        ccr.setTargetEditPart (tep);
        ccr.setType (RequestConstants.REQ_CONNECTION_END);
        Command cmd = getCreateViewCommand (ccr);
        if (cmd != null && cmd.canExecute ()) {
            List viewAdapters = new ArrayList ();
            viewAdapters.add (new EObjectAdapter (((View) host ().getModel ()).getDiagram ()));
            viewAdapters.add (new EObjectAdapter (sView));
            viewAdapters.add (new EObjectAdapter (tView));
            SetViewMutabilityCommand.makeMutable (viewAdapters).execute ();
            executeCommand (cmd);
            IAdaptable adapter = (IAdaptable) ccr.getNewObject ();
            SetViewMutabilityCommand.makeMutable (adapter).execute ();
            model = (Edge) adapter.getAdapter (Edge.class);
            if (model == null) {
                String eMsg = NLS.bind (DiagramUIMessages.CanonicalEditPolicy_create_view_failed_ERROR_, connection);
                IllegalStateException ise = new IllegalStateException (eMsg);
                Log.error (DiagramUIPlugin.getInstance (), IStatus.ERROR, eMsg, ise);
                throw ise;
            }
        }
        return model;
    }

    protected EditPart getTargetEditPartFor (EObject connection) {
        EObject tel;
        EditPart tep;
        tel = getTargetElement (connection);
        tep = getEditPartFor (tel, connection);
        return tep;
    }

    protected EditPart getSourceEditPartFor (EObject connection) {
        EObject sel;
        EditPart sep;
        sel = getSourceElement (connection);
        sep = getEditPartFor (sel, connection);
        return sep;
    }

    protected Command getCreateViewCommand (CreateRequest request) {
        if (request instanceof CreateConnectionViewRequest) {
            CreateConnectionViewRequest ccr = (CreateConnectionViewRequest) request;
            EditPart ep = ccr.getTargetEditPart () == null ? ccr.getSourceEditPart () : ccr.getTargetEditPart ();
            return ep.getCommand (request);
        }
        return super.getCreateViewCommand (request);
    }

    protected CreateViewRequest getCreateViewRequest (CreateViewRequest.ViewDescriptor descriptor) {
        return getCreateViewRequest (Collections.singletonList (descriptor));
    }

    protected CreateViewRequest getCreateViewRequest (List descriptors) {
        CreateViewRequest cvr = super.getCreateViewRequest (descriptors);
        Point loc = ICanonicalShapeCompartmentLayout.UNDEFINED.getLocation ();
        cvr.setLocation (loc);
        return cvr;
    }

    private CreateConnectionViewRequest getCreateConnectionViewRequest (IAdaptable elementAdapter, String hint, int index) {
        return new CreateConnectionViewRequest (getConnectionViewDescriptor (elementAdapter, hint, index));
    }

    private ConnectionViewDescriptor getConnectionViewDescriptor (IAdaptable elementAdapter, String hint, int index) {
        return new ConnectionViewDescriptor (elementAdapter, hint, index, false, ((IGraphicalEditPart) getHost ()).getDiagramPreferencesHint ());
    }

    protected List refreshSemanticConnections () {
        Edge viewChild;
        EObject semanticChild;
        Collection viewChildren = getConnectionViews ();
        Collection semanticChildren = new HashSet ();
        semanticChildren.addAll (getSemanticConnectionsList ());
        List orphaned = cleanCanonicalSemanticChildren (viewChildren, semanticChildren);
        deleteViews (orphaned.iterator ());
        List viewDescriptors = new ArrayList ();
        Iterator semanticChildrenIT = semanticChildren.iterator ();
        while (semanticChildrenIT.hasNext ()) {
            semanticChild = (EObject) semanticChildrenIT.next ();
            viewChild = createConnectionView (semanticChild, ViewUtil.APPEND);
            if (viewChild != null) {
                viewDescriptors.add (new EObjectAdapter (viewChild));
            }
        }
        makeViewsMutable (viewDescriptors);
        HashSet ends = new HashSet ();
        ListIterator li = viewDescriptors.listIterator ();
        while (li.hasNext ()) {
            IAdaptable adaptable = (IAdaptable) li.next ();
            Edge edge = (Edge) adaptable.getAdapter (Edge.class);
            EditPart sourceEP = getEditPartFor (edge.getSource (), edge);
            if (sourceEP != null) {
                ends.add (sourceEP);
            }
            EditPart targetEP = getEditPartFor (edge.getTarget (), edge);
            if (targetEP != null) {
                ends.add (targetEP);
            }
        }
        for (Iterator iter = ends.iterator ();
        iter.hasNext ();) {
            EditPart end = (EditPart) iter.next ();
            end.refresh ();
        }
        return viewDescriptors;
    }

    protected void refreshSemantic () {
        List createdViews = super.refreshSemanticChildren ();
        List createdConnectionViews = refreshSemanticConnections ();
        if (createdViews.size () > 1) {
            DeferredLayoutCommand layoutCmd = new DeferredLayoutCommand (host ().getEditingDomain (), createdViews, host ());
            executeCommand (new EtoolsProxyCommand (layoutCmd));
        }
        List allViews = new ArrayList (createdConnectionViews.size () + createdViews.size ());
        allViews.addAll (createdViews);
        allViews.addAll (createdConnectionViews);
        makeViewsImmutable (allViews);
    }

    protected boolean shouldDeleteView (View view) {
        return ViewUtil.resolveSemanticElement (view) == null;
    }

    protected void postProcessRefreshSemantic (List viewDescriptors) {
        makeViewsMutable (viewDescriptors);
        super.postProcessRefreshSemantic (viewDescriptors);
    }

    protected Collection getConnectionViews () {
        Collection children = getViewChildren ();
        Set connections = new HashSet ();
        if (getHost () instanceof IGraphicalEditPart) {
            IGraphicalEditPart gep = (IGraphicalEditPart) getHost ();
            getConnectionViews (connections, gep.getNotationView (), children);
        }
        return connections;
    }

    private void getConnectionViews (Set connections, View view, Collection viewChildren) {
        IGraphicalEditPart gep = (IGraphicalEditPart) getHost ();
        View hostView = gep.getNotationView ();
        if (hostView != view) {
            if (! shouldCheckForConnections (view, viewChildren)) return;

        }
        Iterator sourceIter = view.getSourceEdges ().listIterator ();
        while (sourceIter.hasNext ()) {
            Edge sourceEdge = (Edge) sourceIter.next ();
            if (shouldIncludeConnection (sourceEdge, (List) viewChildren)) connections.add (sourceEdge);

        }
        Iterator targetIter = view.getTargetEdges ().listIterator ();
        while (targetIter.hasNext ()) {
            Edge targetEdge = (Edge) targetIter.next ();
            if (shouldIncludeConnection (targetEdge, (List) viewChildren)) connections.add (targetEdge);

        }
        List children = view.getChildren ();
        Iterator iter = children.listIterator ();
        while (iter.hasNext ()) {
            View viewChild = (View) iter.next ();
            if (viewChild instanceof Node) {
                getConnectionViews (connections, viewChild, viewChildren);
            }
        }
    }

    protected boolean shouldCheckForConnections (View view, Collection viewChildren) {
        return (view != null && (viewChildren.contains (view) || viewChildren.contains (view.eContainer ())));
    }

    protected boolean shouldIncludeConnection (Edge connection, Collection children) {
        return shouldCheckForConnections (connection.getSource (), children) || shouldCheckForConnections (connection.getTarget (), children);
    }

    protected boolean shouldIncludeConnection (Edge connection, List children) {
        return shouldIncludeConnection (connection, (Collection) children);
    }

    public Command getCommand (Request request) {
        if (understandsRequest (request)) {
            if (isEnabled () && request instanceof DropObjectsRequest) {
                return getDropCommand ((DropObjectsRequest) request);
            }
        }
        return super.getCommand (request);
    }

    protected Command getDropCommand (DropObjectsRequest request) {
        boolean enabled = isEnabled ();
        List children = getSemanticChildrenList ();
        Iterator dropElements = request.getObjects ().iterator ();
        while (dropElements.hasNext ()) {
            Object dropElement = dropElements.next ();
            if (dropElement instanceof Diagram) continue;

            if (dropElement instanceof EObject && preventDropElement (dropElement)) {
                return UnexecutableCommand.INSTANCE;
            }
            boolean containsElement = children.contains (dropElement);
            if (enabled) {
                if (containsElement || preventDropElement (dropElement)) {
                    return UnexecutableCommand.INSTANCE;
                }
            }
        }
        return null;
    }

    protected boolean preventDropElement (Object dropElement) {
        return dropElement instanceof EObject ? ! EObjectUtil.canContain (getSemanticHost (), ((EObject) dropElement).eClass (), false) : false;
    }

    public boolean understandsRequest (Request req) {
        return (RequestConstants.REQ_DROP_OBJECTS.equals (req.getType ()) || req instanceof DropObjectsRequest || RequestConstants.REQ_CREATE.equals (req.getType ())) ? true : super.understandsRequest (req);
    }

}

