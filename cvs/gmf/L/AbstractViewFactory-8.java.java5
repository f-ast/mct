package org.eclipse.gmf.runtime.diagram.ui.view.factories;

import java.util.ArrayList;

import java.util.List;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.core.services.ViewService;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.core.view.factories.ViewFactory;

import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;

import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.jface.preference.PreferenceConverter;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.FontData;

import org.eclipse.swt.graphics.RGB;

abstract public class AbstractViewFactory implements ViewFactory {
    private PreferencesHint preferencesHint;

    abstract public View createView (final IAdaptable semanticAdapter, final View containerView, final String semanticHint, final int index, final boolean persisted, final PreferencesHint thePreferencesHint);

    protected List createStyles (View view) {
        return new ArrayList ();
    }

    protected boolean requiresElement (IAdaptable semanticAdapter, View view) {
        EObject semanticElement = null;
        if (semanticAdapter != null) {
            semanticElement = (EObject) semanticAdapter.getAdapter (EObject.class);
            return requiresElement (semanticElement, view);
        }
        return true;
    }

    protected boolean requiresElement (EObject semanticElement, View view) {
        EObject containerSemanticElement = view.getElement ();
        if (containerSemanticElement == semanticElement) return false;

        return true;
    }

    protected void initializeFromPreferences (View view) {
        IPreferenceStore store = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
        if (store == null) {
            return;
        }
        RGB lineRGB = PreferenceConverter.getColor (store, IPreferenceConstants.PREF_LINE_COLOR);
        ViewUtil.setStructuralFeatureValue (view, NotationPackage.eINSTANCE.getLineStyle_LineColor (), FigureUtilities.RGBToInteger (lineRGB));
        FontData fontData = PreferenceConverter.getFontData (store, IPreferenceConstants.PREF_DEFAULT_FONT);
        ViewUtil.setStructuralFeatureValue (view, NotationPackage.eINSTANCE.getFontStyle_FontName (), fontData.getName ());
        ViewUtil.setStructuralFeatureValue (view, NotationPackage.eINSTANCE.getFontStyle_FontHeight (), new Integer (fontData.getHeight ()));
        ViewUtil.setStructuralFeatureValue (view, NotationPackage.eINSTANCE.getFontStyle_Bold (), Boolean.valueOf ((fontData.getStyle () & SWT.BOLD) != 0));
        ViewUtil.setStructuralFeatureValue (view, NotationPackage.eINSTANCE.getFontStyle_Italic (), Boolean.valueOf ((fontData.getStyle () & SWT.ITALIC) != 0));
        RGB fontRGB = PreferenceConverter.getColor (store, IPreferenceConstants.PREF_FONT_COLOR);
        ViewUtil.setStructuralFeatureValue (view, NotationPackage.eINSTANCE.getFontStyle_FontColor (), FigureUtilities.RGBToInteger (fontRGB));
    }

    protected static ViewService getViewService () {
        return ViewService.getInstance ();
    }

    protected PreferencesHint getPreferencesHint () {
        return preferencesHint;
    }

    protected void setPreferencesHint (PreferencesHint preferencesHint) {
        this.preferencesHint = preferencesHint;
    }

    protected TransactionalEditingDomain getEditingDomain (EObject semanticElement, View containerView) {
        TransactionalEditingDomain result = null;
        if (semanticElement != null) {
            result = TransactionUtil.getEditingDomain (semanticElement);
        }
        if (result == null) {
            result = TransactionUtil.getEditingDomain (containerView);
        }
        return result;
    }

}

