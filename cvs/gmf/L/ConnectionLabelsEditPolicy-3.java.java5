package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.Iterator;

import java.util.List;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.editpolicies.AbstractEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.requests.ChangePropertyValueRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.diagram.ui.requests.ToggleConnectionLabelsRequest;

public class ConnectionLabelsEditPolicy extends AbstractEditPolicy {

    public boolean understandsRequest (Request request) {
        return RequestConstants.REQ_TOGGLE_CONNECTION_LABELS.equals (request.getType ());
    }

    public Command getCommand (Request request) {
        if (RequestConstants.REQ_TOGGLE_CONNECTION_LABELS.equals (request.getType ())) {
            boolean showHide = ((ToggleConnectionLabelsRequest) request).showConnectionLabel ();
            CompoundCommand cc = new CompoundCommand ();
            List children = getHost ().getChildren ();
            Iterator iter = children.iterator ();
            while (iter.hasNext ()) {
                GraphicalEditPart ep = (GraphicalEditPart) iter.next ();
                if (ep instanceof LabelEditPart) {
                    ChangePropertyValueRequest req = new ChangePropertyValueRequest (DiagramUIMessages.Command_hideLabel_Label, Properties.ID_ISVISIBLE, Boolean.valueOf (showHide));
                    Command setLabelVisCmd = ep.getCommand (req);
                    if (setLabelVisCmd != null && setLabelVisCmd.canExecute ()) cc.add (setLabelVisCmd);

                }
            }
            return cc;
        }
        return null;
    }

    public EditPart getTargetEditPart (Request request) {
        if (understandsRequest (request)) {
            Command command = getHost ().getCommand (new ToggleConnectionLabelsRequest (false));
            if (command != null && command.canExecute ()) return getHost ();

        }
        return null;
    }

}

