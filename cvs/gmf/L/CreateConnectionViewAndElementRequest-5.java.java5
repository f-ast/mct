package org.eclipse.gmf.runtime.diagram.ui.requests;

import java.util.Map;

import org.eclipse.core.runtime.Assert;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.commands.Command;

import org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.SuppressibleUIRequest;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;

public class CreateConnectionViewAndElementRequest extends CreateConnectionViewRequest implements SuppressibleUIRequest {
    private boolean suppressUI = false;

    public boolean isUISupressed () {
        return suppressUI;
    }

    public void setSuppressibleUI (boolean suppressUI) {
        this.suppressUI = suppressUI;
    }

    public static class ConnectionViewAndElementDescriptor extends ConnectionViewDescriptor {

        public ConnectionViewAndElementDescriptor (CreateElementRequestAdapter requestAdapter, PreferencesHint preferencesHint) {
            super (requestAdapter, preferencesHint);
        }

        public ConnectionViewAndElementDescriptor (CreateElementRequestAdapter requestAdapter, String semanticHint, PreferencesHint preferencesHint) {
            super (requestAdapter, semanticHint, preferencesHint);
        }

        public ConnectionViewAndElementDescriptor (CreateElementRequestAdapter requestAdapter, String semanticHint, int index, PreferencesHint preferencesHint) {
            super (requestAdapter, semanticHint, index, preferencesHint);
        }

        public CreateElementRequestAdapter getCreateElementRequestAdapter () {
            return (CreateElementRequestAdapter) getElementAdapter ();
        }

    }

    public CreateConnectionViewAndElementRequest (ConnectionViewAndElementDescriptor connectionViewAndElementDescriptor) {
        super (connectionViewAndElementDescriptor);
    }

    public CreateConnectionViewAndElementRequest (IElementType type, String semanticHint, PreferencesHint preferencesHint) {
        super (new ConnectionViewAndElementDescriptor (new CreateElementRequestAdapter (new CreateRelationshipRequest (type)), semanticHint, preferencesHint));
    }

    public CreateConnectionViewAndElementRequest (IElementType type, PreferencesHint preferencesHint) {
        super (new ConnectionViewAndElementDescriptor (new CreateElementRequestAdapter (new CreateRelationshipRequest (type)), preferencesHint));
    }

    public ConnectionViewAndElementDescriptor getConnectionViewAndElementDescriptor () {
        return (ConnectionViewAndElementDescriptor) getConnectionViewDescriptor ();
    }

    public static Command getCreateCommand (CreateConnectionViewAndElementRequest request, EditPart sourceEditPart, EditPart targetEditPart) {
        Assert.isNotNull (request);
        Assert.isNotNull (sourceEditPart);
        Assert.isNotNull (targetEditPart);
        request.setSourceEditPart (sourceEditPart);
        request.setTargetEditPart (targetEditPart);
        request.setType (RequestConstants.REQ_CONNECTION_START);
        sourceEditPart.getCommand (request);
        request.setType (RequestConstants.REQ_CONNECTION_END);
        Command command = targetEditPart.getCommand (request);
        return command;
    }

    public static Command getCreateCommand (IElementType elementType, EditPart sourceEditPart, EditPart targetEditPart, PreferencesHint preferencesHint) {
        return getCreateCommand (new CreateConnectionViewAndElementRequest (elementType, preferencesHint), sourceEditPart, targetEditPart);
    }

    public void setExtendedData (Map map) {
        super.setExtendedData (map);
        ConnectionViewAndElementDescriptor descriptor = getConnectionViewAndElementDescriptor ();
        if (descriptor != null) {
            CreateElementRequestAdapter adapter = descriptor.getCreateElementRequestAdapter ();
            if (adapter != null) {
                CreateElementRequest request = (CreateElementRequest) adapter.getAdapter (CreateElementRequest.class);
                if (request != null) {
                    request.getParameters ().clear ();
                    request.addParameters (map);
                }
            }
        }
    }

}

