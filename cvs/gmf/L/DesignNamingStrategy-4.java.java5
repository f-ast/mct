package org.eclipse.gmf.internal.bridge.naming;

import org.eclipse.gmf.common.NamesDispenser;

import org.eclipse.gmf.mappings.CanvasMapping;

import org.eclipse.gmf.mappings.CompartmentMapping;

import org.eclipse.gmf.mappings.LabelMapping;

import org.eclipse.gmf.mappings.LinkMapping;

import org.eclipse.gmf.mappings.NodeMapping;

public class DesignNamingStrategy extends AbstractNamingStrategy {

    public DesignNamingStrategy (String suffix, NamesDispenser namesDispenser, NamingStrategy chainedNamingStrategy, NamingStrategy prefixNamingStrategy) {
        super (suffix, namesDispenser, chainedNamingStrategy, prefixNamingStrategy);
    }

    public String get (CanvasMapping mapping) {
        if (mapping.getDiagramCanvas () != null) {
            String name = mapping.getDiagramCanvas ().getName ();
            if (! isEmpty (name)) {
                return createClassName (name);
            }
        }
        return super.get (mapping);
    }

    public String get (NodeMapping mapping) {
        if (mapping.getDiagramNode () != null) {
            String name = mapping.getDiagramNode ().getName ();
            if (! isEmpty (name)) {
                return createClassName (name);
            }
        }
        return super.get (mapping);
    }

    public String get (LinkMapping mapping) {
        if (mapping.getDiagramLink () != null) {
            String name = mapping.getDiagramLink ().getName ();
            if (! isEmpty (name)) {
                return createClassName (name);
            }
        }
        return super.get (mapping);
    }

    public String get (CompartmentMapping mapping) {
        if (mapping.getCompartment () != null) {
            String name = mapping.getCompartment ().getName ();
            if (! isEmpty (name)) {
                name = Character.toUpperCase (name.charAt (0)) + name.substring (1);
                name = getCompartmentHostPrefix (mapping) + name;
                return createClassName (name);
            }
        }
        return super.get (mapping);
    }

    public String get (LabelMapping mapping) {
        if (mapping.getDiagramLabel () != null) {
            String name = mapping.getDiagramLabel ().getName ();
            if (! isEmpty (name)) {
                name = Character.toUpperCase (name.charAt (0)) + name.substring (1);
                return createClassName (name);
            }
        }
        return super.get (mapping);
    }

}

