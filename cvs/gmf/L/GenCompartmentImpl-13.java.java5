package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCompartment;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.GenNode;

public class GenCompartmentImpl extends GenChildContainerImpl implements GenCompartment {
    protected static final String TITLE_EDEFAULT = null;
    protected String title = TITLE_EDEFAULT;
    protected static final boolean CAN_COLLAPSE_EDEFAULT = true;
    protected boolean canCollapse = CAN_COLLAPSE_EDEFAULT;
    protected static final boolean HIDE_IF_EMPTY_EDEFAULT = true;
    protected boolean hideIfEmpty = HIDE_IF_EMPTY_EDEFAULT;
    protected static final boolean NEEDS_TITLE_EDEFAULT = true;
    protected boolean needsTitle = NEEDS_TITLE_EDEFAULT;
    protected GenNode node = null;
    protected static final boolean LIST_LAYOUT_EDEFAULT = true;
    protected boolean listLayout = LIST_LAYOUT_EDEFAULT;

    protected GenCompartmentImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenCompartment ();
    }

    public String getTitle () {
        return title;
    }

    public void setTitle (String newTitle) {
        String oldTitle = title;
        title = newTitle;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__TITLE, oldTitle, title));

    }

    public boolean isCanCollapse () {
        return canCollapse;
    }

    public void setCanCollapse (boolean newCanCollapse) {
        boolean oldCanCollapse = canCollapse;
        canCollapse = newCanCollapse;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE, oldCanCollapse, canCollapse));

    }

    public boolean isHideIfEmpty () {
        return hideIfEmpty;
    }

    public void setHideIfEmpty (boolean newHideIfEmpty) {
        boolean oldHideIfEmpty = hideIfEmpty;
        hideIfEmpty = newHideIfEmpty;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY, oldHideIfEmpty, hideIfEmpty));

    }

    public boolean isNeedsTitle () {
        return needsTitle;
    }

    public void setNeedsTitle (boolean newNeedsTitle) {
        boolean oldNeedsTitle = needsTitle;
        needsTitle = newNeedsTitle;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE, oldNeedsTitle, needsTitle));

    }

    public GenDiagram getDiagram () {
        if (eContainerFeatureID != GMFGenPackage.GEN_COMPARTMENT__DIAGRAM) return null;

        return (GenDiagram) eContainer ();
    }

    public GenNode getNode () {
        if (node != null && node.eIsProxy ()) {
            InternalEObject oldNode = (InternalEObject) node;
            node = (GenNode) eResolveProxy (oldNode);
            if (node != oldNode) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.GEN_COMPARTMENT__NODE, oldNode, node));

            }
        }
        return node;
    }

    public GenNode basicGetNode () {
        return node;
    }

    public NotificationChain basicSetNode (GenNode newNode, NotificationChain msgs) {
        GenNode oldNode = node;
        node = newNode;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__NODE, oldNode, newNode);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setNode (GenNode newNode) {
        if (newNode != node) {
            NotificationChain msgs = null;
            if (node != null) msgs = ((InternalEObject) node).eInverseRemove (this, GMFGenPackage.GEN_NODE__COMPARTMENTS, GenNode.class, msgs);

            if (newNode != null) msgs = ((InternalEObject) newNode).eInverseAdd (this, GMFGenPackage.GEN_NODE__COMPARTMENTS, GenNode.class, msgs);

            msgs = basicSetNode (newNode, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__NODE, newNode, newNode));

    }

    public boolean isListLayout () {
        return listLayout;
    }

    public void setListLayout (boolean newListLayout) {
        boolean oldListLayout = listLayout;
        listLayout = newListLayout;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__LIST_LAYOUT, oldListLayout, listLayout));

    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_COMPARTMENT__DIAGRAM, msgs);
            case GMFGenPackage.GEN_COMPARTMENT__NODE :
                if (node != null) msgs = ((InternalEObject) node).eInverseRemove (this, GMFGenPackage.GEN_NODE__COMPARTMENTS, GenNode.class, msgs);

                return basicSetNode ((GenNode) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM :
                return eBasicSetContainer (null, GMFGenPackage.GEN_COMPARTMENT__DIAGRAM, msgs);
            case GMFGenPackage.GEN_COMPARTMENT__NODE :
                return basicSetNode (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_DIAGRAM__COMPARTMENTS, GenDiagram.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_COMPARTMENT__TITLE :
                return getTitle ();
            case GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE :
                return isCanCollapse () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY :
                return isHideIfEmpty () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE :
                return isNeedsTitle () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM :
                return getDiagram ();
            case GMFGenPackage.GEN_COMPARTMENT__NODE :
                if (resolve) return getNode ();

                return basicGetNode ();
            case GMFGenPackage.GEN_COMPARTMENT__LIST_LAYOUT :
                return isListLayout () ? Boolean.TRUE : Boolean.FALSE;
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_COMPARTMENT__TITLE :
                setTitle ((String) newValue);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE :
                setCanCollapse (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY :
                setHideIfEmpty (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE :
                setNeedsTitle (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_COMPARTMENT__NODE :
                setNode ((GenNode) newValue);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__LIST_LAYOUT :
                setListLayout (((Boolean) newValue).booleanValue ());
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_COMPARTMENT__TITLE :
                setTitle (TITLE_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE :
                setCanCollapse (CAN_COLLAPSE_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY :
                setHideIfEmpty (HIDE_IF_EMPTY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE :
                setNeedsTitle (NEEDS_TITLE_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__NODE :
                setNode ((GenNode) null);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__LIST_LAYOUT :
                setListLayout (LIST_LAYOUT_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_COMPARTMENT__TITLE :
                return TITLE_EDEFAULT == null ? title != null : ! TITLE_EDEFAULT.equals (title);
            case GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE :
                return canCollapse != CAN_COLLAPSE_EDEFAULT;
            case GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY :
                return hideIfEmpty != HIDE_IF_EMPTY_EDEFAULT;
            case GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE :
                return needsTitle != NEEDS_TITLE_EDEFAULT;
            case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM :
                return getDiagram () != null;
            case GMFGenPackage.GEN_COMPARTMENT__NODE :
                return node != null;
            case GMFGenPackage.GEN_COMPARTMENT__LIST_LAYOUT :
                return listLayout != LIST_LAYOUT_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (title: ");
        result.append (title);
        result.append (", canCollapse: ");
        result.append (canCollapse);
        result.append (", hideIfEmpty: ");
        result.append (hideIfEmpty);
        result.append (", needsTitle: ");
        result.append (needsTitle);
        result.append (", listLayout: ");
        result.append (listLayout);
        result.append (')');
        return result.toString ();
    }

    public String getClassNamePrefix () {
        if (getTitle () == null) {
            return "Compartment" + hashCode ();
        }
        char [] chars = getTitle ().toCharArray ();
        for (int i = 0;
        i < chars.length; i ++) {
            if (i == 0) {
                if (! Character.isJavaIdentifierStart (chars [0])) {
                    chars [0] = '_';
                }
                chars [0] = Character.toUpperCase (chars [0]);
            } else {
                if (! Character.isJavaIdentifierPart (chars [i])) {
                    chars [i] = '_';
                }
            }
        }
        return new String (chars);
    }

    public String getClassNameSuffux () {
        return "Container";
    }

    public String getUniqueIdentifier () {
        return getClassNamePrefix () + "_" + getVisualID ();
    }

    public String getItemSemanticEditPolicyClassName () {
        String value = getItemSemanticEditPolicyClassNameGen ();
        if (value == null || value.length () == 0) {
            return "Compartment_" + getClassNamePrefix () + getClassNameSuffux () + "ItemSemanticEditPolicy";
        }
        return value;
    }

}

