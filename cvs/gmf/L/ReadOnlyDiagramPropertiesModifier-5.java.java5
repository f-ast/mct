package org.eclipse.gmf.runtime.diagram.ui.properties.providers;

import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.ui.services.properties.ApplyModifiersOperation;

import org.eclipse.gmf.runtime.common.ui.services.properties.ICompositePropertySource;

import org.eclipse.gmf.runtime.common.ui.services.properties.IPropertiesModifier;

import org.eclipse.gmf.runtime.common.ui.services.properties.descriptors.ICompositeSourcePropertyDescriptor;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;

import org.eclipse.gmf.runtime.diagram.ui.properties.views.IReadOnlyDiagramPropertySheetPageContributor;

import org.eclipse.ui.IEditorPart;

import org.eclipse.ui.IWorkbench;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchWindow;

import org.eclipse.ui.PlatformUI;

import org.eclipse.ui.views.properties.IPropertyDescriptor;

public class ReadOnlyDiagramPropertiesModifier extends AbstractProvider implements IPropertiesModifier {

    public boolean provides (IOperation operation) {
        if (operation instanceof ApplyModifiersOperation) {
            IWorkbench workbench = PlatformUI.getWorkbench ();
            if (workbench != null) {
                IWorkbenchWindow window = workbench.getActiveWorkbenchWindow ();
                if (window != null) {
                    IWorkbenchPage page = window.getActivePage ();
                    if (page != null) {
                        IEditorPart part = page.getActiveEditor ();
                        return part instanceof IReadOnlyDiagramPropertySheetPageContributor || (part instanceof DiagramEditor && ! ((DiagramEditor) part).isWritable ());
                    }
                }
            }
        }
        return false;
    }

    public void apply (ICompositePropertySource propertySource) {
        if (propertySource != null) {
            IPropertyDescriptor [] descriptors = propertySource.getPropertyDescriptors ();
            for (int i = 0;
            i < descriptors.length; i ++) {
                if (descriptors [i] instanceof ICompositeSourcePropertyDescriptor) ((ICompositeSourcePropertyDescriptor) descriptors [i]).setReadOnly (true);

            }
        }
    }

}

