package org.eclipse.gmf.runtime.diagram.ui.actions;

import java.util.ArrayList;

import java.util.Collections;

import java.util.List;

import org.eclipse.gef.EditPart;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramUIActionsMessages;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;

import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.util.Assert;

import org.eclipse.ui.IWorkbenchPage;

public abstract class IndividualConnectionLabelAction extends BooleanPropertyAction {
    private final String [] labelSemanticHints;

    protected IndividualConnectionLabelAction (IWorkbenchPage workbenchPage, String [] labelSemanticHints) {
        super (workbenchPage, MetaModelUtil.getID (NotationPackage.eINSTANCE.getView_Visible ()), DiagramUIActionsMessages.ConstrainedFlowLayoutEditPolicy_changeVisibilityCommand_label);
        Assert.isNotNull (labelSemanticHints);
        this.labelSemanticHints = labelSemanticHints;
    }

    protected List getTargetEditParts (EditPart editpart) {
        EditPart targetEP = null;
        List editParts = new ArrayList ();
        if (editpart instanceof ConnectionNodeEditPart) {
            final ConnectionNodeEditPart conEP = (ConnectionNodeEditPart) editpart;
            MEditingDomain editingDomain = MEditingDomainGetter.getMEditingDomain ((View) editpart.getModel ());
            for (int i = 0;
            i < getLabelSemanticHints ().length; i ++) {
                final int index = i;
                targetEP = (EditPart) editingDomain.runAsRead (new MRunnable () {

                    public Object run () {
                        return conEP.getChildBySemanticHint (getLabelSemanticHints () [index]);
                    }

                }

                );
                if (targetEP != null) editParts.add (targetEP);

            }
        }
        return (editParts.isEmpty ()) ? Collections.EMPTY_LIST : editParts;
    }

    protected String [] getLabelSemanticHints () {
        return labelSemanticHints;
    }

}

