package org.eclipse.gmf.runtime.diagram.ui.preferences;

import java.text.NumberFormat;

import java.text.ParseException;

import org.eclipse.gef.rulers.RulerProvider;

import org.eclipse.jface.preference.BooleanFieldEditor;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.jface.preference.StringFieldEditor;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.events.SelectionListener;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.layout.GridLayout;

import org.eclipse.swt.widgets.Combo;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Display;

import org.eclipse.swt.widgets.Group;

import org.eclipse.swt.widgets.Label;

import org.eclipse.swt.widgets.Text;

import org.eclipse.gmf.runtime.common.ui.preferences.AbstractPreferencePage;

import org.eclipse.gmf.runtime.common.ui.preferences.ComboFieldEditor;

import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;

import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;

public class RulerGridPreferencePage extends AbstractPreferencePage {
    private class DoubleFieldEditor extends StringFieldEditor {
        private double minValidValue = 00.001;
        private double maxValidValue = 99.999;

        public DoubleFieldEditor (String pref, String label, Composite parent) {
            super (pref, label, parent);
        }

        protected boolean doCheckState () {
            Text text = getTextControl ();
            if (text == null) return false;

            try {
                NumberFormat numberFormatter = NumberFormat.getInstance ();
                Double pageHeight = forceDouble (numberFormatter.parse (text.getText ()));
                double number = pageHeight.doubleValue ();
                if (number >= minValidValue && number <= maxValidValue) {
                    clearErrorMessage ();
                    return true;
                } else {
                    showErrorMessage ();
                    return false;
                }
            } catch (NumberFormatException e1) {
                showErrorMessage ();
            } catch (ParseException e2) {
                showErrorMessage ();
            }
            return false;
        }

        protected void doLoadDefault () {
            Text text = getTextControl ();
            if (text != null) {
                double value = getPreferenceStore ().getDefaultDouble (getPreferenceName ());
                NumberFormat numberFormatter = NumberFormat.getNumberInstance ();
                text.setText (numberFormatter.format (value));
            }
            valueChanged ();
        }

        protected void doLoad () {
            Text text = getTextControl ();
            if (text != null) {
                double value = getPreferenceStore ().getDouble (getPreferenceName ());
                NumberFormat numberFormatter = NumberFormat.getNumberInstance ();
                text.setText (numberFormatter.format (value));
            }
        }

        protected void doStore () {
            NumberFormat numberFormatter = NumberFormat.getInstance ();
            Double gridWidth;
            try {
                gridWidth = forceDouble (numberFormatter.parse (getTextControl ().getText ()));
                getPreferenceStore ().setValue (getPreferenceName (), gridWidth.doubleValue ());
            } catch (ParseException e) {
                showErrorMessage ();
            }
        }

    }

    private int oldUnits = - 1;
    private String RULER_GROUP_LABEL = PresentationResourceManager.getI18NString ("GriRulerPreferencePage.rulerGroup.label");
    private String SHOW_RULERS_LABEL = PresentationResourceManager.getI18NString ("GridRulerPreferencePage.showRulers.label");
    private String RULER_UNITS_LABEL = PresentationResourceManager.getI18NString ("GridRulerPreferencePage.rulerUnits.label");
    private String RULER_UNITS_IN_LABEL = PresentationResourceManager.getI18NString ("GridRulerPreferencePage.rulerUnits.inch.label");
    private String RULER_UNITS_CM_LABEL = PresentationResourceManager.getI18NString ("GridRulerPreferencePage.rulerUnits.cm.label");
    private String RULER_UNITS_PIXEL_LABEL = PresentationResourceManager.getI18NString ("GridRulerPreferencePage.rulerUnits.pixel.label");
    private String GRID_GROUP_LABEL = PresentationResourceManager.getI18NString ("GridRulerPreferencePage.gridGroup.label");
    private String SHOW_GRID_LABEL = PresentationResourceManager.getI18NString ("GridRulerPreferencePage.showGrid.label");
    private String SNAP_TO_GRID_LABEL = PresentationResourceManager.getI18NString ("GridRulerPreferencePage.snapToGrid.label");
    private String GRID_SPACING_LABEL = PresentationResourceManager.getI18NString ("GridRulerPreferencePage.gridSpacing.label");
    private BooleanFieldEditor showRulers = null;
    private ComboFieldEditor rulerUnits;
    private BooleanFieldEditor showGrid = null;
    private BooleanFieldEditor snapToGrid = null;
    private DoubleFieldEditor gridSpacing = null;
    private Label gridUnits = null;

    private String convertUnits (int fromUnits, int toUnits) {
        String valueStr = gridSpacing.getStringValue ();
        if (fromUnits == toUnits) {
            return valueStr;
        }
        NumberFormat numberFormatter = NumberFormat.getInstance ();
        Double value = new Double (0.125);
        try {
            value = forceDouble (numberFormatter.parse (valueStr));
        } catch (ParseException e) {
        }
        double pixelValue = 0;
        switch (fromUnits) {
            case 0 :
                pixelValue = value.doubleValue () * Display.getDefault ().getDPI ().x;
                break;
            case 1 :
                pixelValue = value.doubleValue () * Display.getDefault ().getDPI ().x / 2.54;
                break;
            case 2 :
                pixelValue = value.intValue ();
        }
        double returnValue = 0;
        switch (toUnits) {
            case 0 :
                returnValue = pixelValue / Display.getDefault ().getDPI ().x;
                break;
            case 1 :
                returnValue = pixelValue * 2.54 / Display.getDefault ().getDPI ().x;
                break;
            case 2 :
                returnValue = pixelValue;
        }
        return numberFormatter.format (returnValue);
    }

    private void updateUnits () {
        int units = rulerUnits.getComboControl ().getSelectionIndex ();
        if (units == - 1) {
            units = getPreferenceStore ().getInt (IPreferenceConstants.PREF_RULER_UNITS);
            oldUnits = units;
        }
        switch (units) {
            case 0 :
                gridUnits.setText (RULER_UNITS_IN_LABEL);
                break;
            case 1 :
                gridUnits.setText (RULER_UNITS_CM_LABEL);
                break;
            case 2 :
                gridUnits.setText (RULER_UNITS_PIXEL_LABEL);
                break;
        }
        gridSpacing.setStringValue (convertUnits (oldUnits, units));
        oldUnits = units;
    }

    private void addRulerFields (Composite parent) {
        Group group = new Group (parent, SWT.NONE);
        group.setText (RULER_GROUP_LABEL);
        GridLayout gridLayout = new GridLayout (2, false);
        GridData gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.horizontalSpan = 2;
        showRulers = new BooleanFieldEditor (IPreferenceConstants.PREF_SHOW_RULERS, SHOW_RULERS_LABEL, group);
        addField (showRulers);
        rulerUnits = new ComboFieldEditor (IPreferenceConstants.PREF_RULER_UNITS, RULER_UNITS_LABEL, group, ComboFieldEditor.INT_TYPE, false, 0, 0, true);
        addField (rulerUnits);
        Combo rulerUnitsCombo;
        rulerUnitsCombo = rulerUnits.getComboControl ();
        rulerUnitsCombo.add (RULER_UNITS_IN_LABEL);
        rulerUnitsCombo.add (RULER_UNITS_CM_LABEL);
        rulerUnitsCombo.add (RULER_UNITS_PIXEL_LABEL);
        rulerUnitsCombo.addSelectionListener (new SelectionListener () {

            public void widgetDefaultSelected (SelectionEvent e) {
            }

            public void widgetSelected (SelectionEvent e) {
                updateUnits ();
            }

        }

        );
        group.setLayoutData (gridData);
        group.setLayout (gridLayout);
    }

    private void addGridFields (Composite parent) {
        Group group = new Group (parent, SWT.NONE);
        group.setText (GRID_GROUP_LABEL);
        GridLayout gridLayout = new GridLayout (2, false);
        GridData gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.horizontalSpan = 2;
        showGrid = new BooleanFieldEditor (IPreferenceConstants.PREF_SHOW_GRID, SHOW_GRID_LABEL, group);
        addField (showGrid);
        snapToGrid = new BooleanFieldEditor (IPreferenceConstants.PREF_SNAP_TO_GRID, SNAP_TO_GRID_LABEL, group);
        addField (snapToGrid);
        addGridSpacing (group);
        group.setLayoutData (gridData);
        group.setLayout (gridLayout);
    }

    private void addGridSpacing (Composite parent) {
        Composite group = new Composite (parent, SWT.NONE);
        GridLayout gridLayout = new GridLayout (3, false);
        GridData gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.horizontalSpan = 1;
        gridSpacing = new DoubleFieldEditor (IPreferenceConstants.PREF_GRID_SPACING, GRID_SPACING_LABEL, group);
        gridSpacing.setTextLimit (10);
        addField (gridSpacing);
        GridData gridData2 = new GridData (GridData.FILL_HORIZONTAL);
        gridData2.grabExcessHorizontalSpace = true;
        gridData2.horizontalSpan = 1;
        gridUnits = new Label (group, SWT.LEFT);
        gridUnits.setLayoutData (gridData2);
        updateUnits ();
        group.setLayoutData (gridData);
        group.setLayout (gridLayout);
    }

    protected void addFields (Composite parent) {
        addRulerFields (parent);
        addGridFields (parent);
    }

    protected void initHelp () {
    }

    public static void initDefaults (IPreferenceStore preferenceStore) {
        preferenceStore.setDefault (IPreferenceConstants.PREF_SHOW_RULERS, false);
        preferenceStore.setDefault (IPreferenceConstants.PREF_RULER_UNITS, RulerProvider.UNIT_INCHES);
        preferenceStore.setDefault (IPreferenceConstants.PREF_SHOW_GRID, false);
        preferenceStore.setDefault (IPreferenceConstants.PREF_SNAP_TO_GRID, true);
        preferenceStore.setDefault (IPreferenceConstants.PREF_GRID_SPACING, 0.125);
    }

    private Double forceDouble (Number number) {
        if (number instanceof Long) return new Double (number.doubleValue ());

        return (Double) number;
    }

}

