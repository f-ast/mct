package org.eclipse.gmf.runtime.emf.clipboard.core;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.emf.ecore.EAnnotation;

import org.eclipse.emf.ecore.EAttribute;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.util.FeatureMapUtil;

import org.eclipse.emf.ecore.xmi.XMLResource;

import org.eclipse.gmf.runtime.emf.clipboard.core.internal.MergedEObjectInfo;

import org.eclipse.gmf.runtime.emf.clipboard.core.internal.ObjectCopyType;

import org.eclipse.gmf.runtime.emf.clipboard.core.internal.PasteIntoParentOperation;

import org.eclipse.gmf.runtime.emf.clipboard.core.internal.ResourceInfoProcessor;

import org.eclipse.gmf.runtime.emf.clipboard.core.internal.l10n.EMFClipboardCoreMessages;

public class PasteChildOperation extends BasePasteOperation {
    protected static final String COPY = EMFClipboardCoreMessages.pasteChildOperation_copyPrefix;
    protected static final PasteChildOperation [] EMPTY_ARRAY = new PasteChildOperation [0];
    private Map auxiliaryChildPasteProcessMap;
    private PasteChildOperation mainChildPasteProcess;
    private PasteChildOperation postPasteOperation;
    private List alwaysCopyObjectPasteOperations;
    private ObjectInfo childObjectInfo;
    private EObject childEObject;
    private EObject pastedElement;
    private EObject copyParentEObject;
    private ObjectInfo copyParentObjectInfo;
    private EObject directContainerEObject;
    private OverridePasteChildOperation overrideChildPasteOperation;
    private EReference containmentFeature;
    private Map embeddedCopyParentObjectInfoMap = new HashMap ();

    public PasteChildOperation (PasteIntoParentOperation parentPasteProcess, ObjectInfo childEObjectInfo) {
        super (parentPasteProcess);
        this.childObjectInfo = childEObjectInfo;
        auxiliaryChildPasteProcessMap = new HashMap ();
    }

    protected EReference getContainmentFeature () {
        if (containmentFeature == null) {
            containmentFeature = getParentPasteProcess ().getContainmentFeature (getEObject ());
        }
        return containmentFeature;
    }

    private PasteChildOperation (PasteChildOperation mainChildPasteProcess, ObjectInfo childEObjectInfo) {
        this (mainChildPasteProcess.getParentPasteProcess (), childEObjectInfo);
        this.mainChildPasteProcess = mainChildPasteProcess;
    }

    protected PasteChildOperation (PasteChildOperation mainChildPasteProcess) {
        this (mainChildPasteProcess.getParentPasteProcess (), mainChildPasteProcess.childObjectInfo);
    }

    protected EObject getLoadedDirectContainerEObject () {
        if (directContainerEObject == null) {
            directContainerEObject = getLoadedEObject (getChildObjectInfo ().containerId);
        }
        return directContainerEObject;
    }

    public PasteIntoParentOperation getParentPasteProcess () {
        return (PasteIntoParentOperation) getSpawningPasteOperation ();
    }

    protected PasteChildOperation getAuxiliaryChildPasteProcess (ObjectInfo auxiliaryChildEObjectInfo) {
        PasteChildOperation auxiliaryChildPasteProcess = (PasteChildOperation) auxiliaryChildPasteProcessMap.get (auxiliaryChildEObjectInfo);
        if (auxiliaryChildPasteProcess == null) {
            auxiliaryChildPasteProcess = makeAuxiliaryChildPasteProcess (auxiliaryChildEObjectInfo);
            if (auxiliaryChildPasteProcess != null) {
                auxiliaryChildPasteProcessMap.put (auxiliaryChildEObjectInfo, auxiliaryChildPasteProcess);
            }
        }
        return auxiliaryChildPasteProcess;
    }

    protected PasteChildOperation makeAuxiliaryChildPasteProcess (ObjectInfo auxiliaryChildEObjectInfo) {
        return new PasteChildOperation (this, auxiliaryChildEObjectInfo);
    }

    public EObject getEObject () {
        if (childEObject == null) {
            childEObject = getLoadedEObject (getChildObjectInfo ().objId);
        }
        return childEObject;
    }

    public EObject getPastedElement () {
        return pastedElement;
    }

    protected EObject getLoadedEObject (String objId) {
        return getParentPasteProcess ().getLoadedEObject (objId);
    }

    protected String getLoadedEObjectID (EObject eObject) {
        return getParentPasteProcess ().getLoadedEObjectID (eObject);
    }

    protected boolean hasCopyParent () {
        return (ResourceInfoProcessor.NONE.equals (getChildObjectInfo ().copyParentId) == false);
    }

    protected boolean isCopyAlways () {
        return (getChildObjectInfo ().objCopyType.equals (ObjectCopyType.OBJ_COPY_TYPE_ALWAYS));
    }

    protected EObject getCopyParentEObject () {
        if (copyParentEObject == null) {
            copyParentEObject = getLoadedEObject (getChildObjectInfo ().copyParentId);
        }
        return copyParentEObject;
    }

    protected EObject getEObject (String objId) {
        return getParentPasteProcess ().getEObject (objId);
    }

    protected String getEObjectID (EObject eObject) {
        return getParentPasteProcess ().getEObjectID (eObject);
    }

    protected PasteTarget getSuitableParentUsingAncestry (String preferredTypeName) {
        PasteTarget suitableParent = getSuitableParentUsingAncestry (getParentTarget (), preferredTypeName, true);
        if (suitableParent == null) {
            suitableParent = getSuitableParentUsingAncestry (getParentTarget (), preferredTypeName, false);
        }
        return suitableParent;
    }

    private PasteTarget getSuitableParentUsingAncestry (PasteTarget potentialParent, String preferredTypeName, boolean strictMatch) {
        PasteTarget suitableParent = checkPotentialParent (potentialParent, preferredTypeName, strictMatch);
        if (suitableParent == null && ! potentialParent.isResource ()) {
            EObject potentialParentObject = (EObject) potentialParent.getObject ();
            while ((suitableParent == null) && (potentialParentObject.eContainer () != null)) {
                potentialParentObject = potentialParentObject.eContainer ();
                suitableParent = checkPotentialParent (new PasteTarget (potentialParentObject), preferredTypeName, strictMatch);
            }
        }
        return suitableParent;
    }

    protected EObject getPastedEObject (EObject eObject) {
        String id = getEObjectID (eObject);
        if (id != null) {
            return eObject;
        } else {
            MergedEObjectInfo info = (MergedEObjectInfo) getAllMergedElementsMap ().get (eObject);
            if (info != null) {
                if (info.targetEObjects.size () == 1) {
                    return (EObject) info.targetEObjects.get (0);
                } else if (info.targetEObjects.size () > 1) {
                    Iterator it = info.targetEObjects.iterator ();
                    while (it.hasNext ()) {
                        EObject mergeTarget = (EObject) it.next ();
                        if ((getParentTarget ().isResource () && getParentTarget ().getObject () == mergeTarget.eResource ()) || ClipboardSupportUtil.isChild (getParentEObject (), mergeTarget)) {
                            return mergeTarget;
                        }
                    }
                    return (EObject) info.targetEObjects.get (0);
                }

            }
        }
        return null;
    }

    protected EObject getPastedDirectCopyParent () {
        return getPastedEObject (getLoadedDirectContainerEObject ());
    }

    private EObject doPasteIntoNearestCopyParent (EObject topMostCopyParentEObject) throws Exception {
        EObject nearestParent = getLoadedEObject (getChildObjectInfo ().containerId);
        while (nearestParent.equals (topMostCopyParentEObject) == false) {
            EObject parentElement = doPasteIntoCopyParent (makeEmbeddedCopyParentObjectInfo (nearestParent));
            if (parentElement != null) {
                return parentElement;
            }
            nearestParent = nearestParent.eContainer ();
        }
        return null;
    }

    private EObject doPasteIntoCopyParent (ObjectInfo theCopyParentObjectInfo) throws Exception {
        PasteChildOperation copyParentProcess = getAuxiliaryChildPasteProcess (theCopyParentObjectInfo);
        copyParentProcess.paste ();
        EObject pastedCopyParent = copyParentProcess.getPastedElement ();
        if (pastedCopyParent != null) {
            return doPasteInto (getPastedDirectCopyParent ());
        }
        return null;
    }

    private ObjectInfo makeEmbeddedCopyParentObjectInfo (EObject embeddedCopyParent) {
        ObjectInfo objectInfo = (ObjectInfo) embeddedCopyParentObjectInfoMap.get (embeddedCopyParent);
        if (objectInfo == null) {
            objectInfo = new ObjectInfo ();
            objectInfo.objCopyType = ObjectCopyType.OBJ_COPY_TYPE_PARENT;
            objectInfo.objId = getLoadedEObjectID (embeddedCopyParent);
            objectInfo.containerId = getLoadedEObjectID (embeddedCopyParent.eContainer ());
            objectInfo.containerClass = embeddedCopyParent.eContainer ().eClass ().getInstanceClassName ();
            if (objectInfo.objId.equals (getChildObjectInfo ().copyParentId) == false) {
                objectInfo.copyParentId = getChildObjectInfo ().copyParentId;
            } else {
                objectInfo.copyParentId = ResourceInfoProcessor.NONE;
            }
            objectInfo.hints = ResourceInfoProcessor.NONE;
            embeddedCopyParentObjectInfoMap.put (embeddedCopyParent, objectInfo);
        }
        return objectInfo;
    }

    private EObject doPasteIntoCopyParent () throws Exception {
        EObject existingCopyParentEObject = getEObject (getChildObjectInfo ().containerId);
        if (existingCopyParentEObject != null) {
            return doPasteInto (existingCopyParentEObject);
        }
        EObject pastedDirectCopyParent = getPastedDirectCopyParent ();
        if (pastedDirectCopyParent != null) {
            return doPasteInto (pastedDirectCopyParent);
        }
        EObject nearestParent = null;
        if (isCopyParentDirectParent () == false) {
            nearestParent = getLoadedEObject (getChildObjectInfo ().containerId);
            EObject perent = nearestParent.eContainer ();
            EObject root = getCopyParentEObject ();
            while ((perent != null) && (perent.equals (root) == false)) {
                existingCopyParentEObject = getPastedEObject (perent);
                if (existingCopyParentEObject != null) {
                    break;
                }
                nearestParent = perent;
                perent = nearestParent.eContainer ();
            }
            if (existingCopyParentEObject == null) {
                existingCopyParentEObject = getPastedEObject (root);
            }
        }
        if (existingCopyParentEObject != null) {
            return doPasteIntoCopyParent (makeEmbeddedCopyParentObjectInfo (nearestParent));
        } else {
            PasteTarget possibleParent = getSuitableParentUsingAncestry (getLoadedDirectContainerEObject ().eClass ().getInstanceClassName ());
            if (possibleParent != null) {
                return doPasteInto (possibleParent);
            } else {
                EObject element = doPasteIntoNearestCopyParent (getCopyParentEObject ());
                if (element != null) {
                    return element;
                }
                return doPasteIntoCopyParent (getCopyParentObjectInfo ());
            }
        }
    }

    public EObject getParentEObject () {
        return getParentPasteProcess ().getEObject ();
    }

    public PasteTarget getParentTarget () {
        return getParentPasteProcess ().getPasteTarget ();
    }

    public XMLResource getParentResource () {
        return getParentPasteProcess ().getParentResource ();
    }

    public PasteChildOperation getPostPasteOperation () {
        return (overrideChildPasteOperation != null) ? overrideChildPasteOperation.getPostPasteOperation () : doGetPostPasteOperation ();
    }

    private PasteChildOperation doGetPostPasteOperation () {
        if ((postPasteOperation == null) && (getPastedElement () != null) && (getAlwaysCopyObjectPasteOperations ().isEmpty () == false)) {
            postPasteOperation = new PostPasteChildOperation (this, getAlwaysCopyObjectPasteOperations ());
        }
        return postPasteOperation;
    }

    public void paste () throws Exception {
        if (getPastedEObject (getEObject ()) != null) {
            setPastedElement (getEObject ());
            addPastedElement (getPastedElement ());
            postPasteOperation = PostPasteChildOperation.makeNullPostPasteChildOperation (this);
            return;
        }
        if (getClipboardOperationHelper ().shouldOverrideChildPasteOperation (getParentEObject (), getEObject ())) {
            overrideChildPasteOperation = getClipboardOperationHelper ().getOverrideChildPasteOperation (this);
            if (overrideChildPasteOperation != null) {
                overrideChildPasteOperation.paste ();
                setPastedElement (overrideChildPasteOperation.getPastedElement ());
            } else {
                addPasteFailuresObject (getEObject ());
            }
            return;
        }
        if (hasCopyParent ()) {
            setPastedElement (doPasteIntoCopyParent ());
        } else {
            EObject element = null;
            element = doPasteInto (getParentTarget ());
            if (element == null) {
                if ((element == null) && ((getChildObjectInfo ().hasHint (ClipboardUtil.PASTE_TO_TARGET_PARENT)) || (isCopyAlways ()))) {
                    PasteTarget possibleParent = getSuitableParentUsingAncestry (getChildObjectInfo ().containerClass);
                    if (possibleParent != null) {
                        element = doPasteInto (possibleParent);
                    }
                }
            }
            setPastedElement (element);
        }
        if (getPastedElement () != null) {
            addPastedElement (getPastedElement ());
        } else {
            addPasteFailuresObject (getEObject ());
        }
    }

    protected EObject doPasteInto (EObject pasteIntoEObject) {
        if (pasteIntoEObject != null) {
            EReference reference = getPasteContainmentFeature (pasteIntoEObject);
            if (reference != null) {
                return doPasteInto (pasteIntoEObject, reference);
            }
        }
        return null;
    }

    protected EObject doPasteInto (PasteTarget pasteTarget) {
        if (pasteTarget != null) {
            if (pasteTarget.isResource ()) {
                return doPasteInto ((Resource) pasteTarget.getObject ());
            } else {
                return doPasteInto ((EObject) pasteTarget.getObject ());
            }
        }
        return null;
    }

    protected EObject doPasteInto (EObject pasteIntoEObject, EReference reference) {
        EObject childElement = null;
        Object value = pasteIntoEObject.eGet (reference, true);
        if (FeatureMapUtil.isMany (pasteIntoEObject, reference)) {
            if (handleCollision (reference, (List) value, getEObject (), getChildObjectInfo ())) {
                childElement = ClipboardSupportUtil.appendEObjectAt (pasteIntoEObject, reference, getEObject ());
            } else if (getPastedElement () != null) {
                childElement = getPastedElement ();
            }

        } else {
            if (handleCollision (reference, (EObject) value, getEObject (), getChildObjectInfo ())) {
                childElement = ClipboardSupportUtil.setEObject (pasteIntoEObject, reference, getEObject ());
            } else if (getPastedElement () != null) {
                childElement = getPastedElement ();
            }

        }
        return childElement;
    }

    protected EObject doPasteInto (Resource pasteIntoResource) {
        EObject childElement = null;
        if (handleCollision (null, pasteIntoResource.getContents (), getEObject (), getChildObjectInfo ())) {
            childElement = ClipboardSupportUtil.appendEObject (pasteIntoResource, getEObject ());
        } else if (getPastedElement () != null) {
            childElement = getPastedElement ();
        }

        return childElement;
    }

    protected List getAlwaysCopyObjectPasteOperations () {
        if (alwaysCopyObjectPasteOperations == null) {
            alwaysCopyObjectPasteOperations = new ArrayList ();
            Iterator alwaysCopyEObjectInfoIt = getChildObjectInfo ().getCopyAlwaysObjectInfoList ().iterator ();
            while (alwaysCopyEObjectInfoIt.hasNext ()) {
                getProgressMonitor ().worked (WORK_UNIT);
                if (isCancelled ()) {
                    throwCancelException ();
                }
                ObjectInfo alwaysCopyObjectInfo = (ObjectInfo) alwaysCopyEObjectInfoIt.next ();
                if (shouldPasteAlwaysCopyObject (alwaysCopyObjectInfo)) {
                    PasteChildOperation pasteOperation = getAuxiliaryChildPasteProcess (alwaysCopyObjectInfo);
                    if (pasteOperation != null) {
                        alwaysCopyObjectPasteOperations.add (pasteOperation);
                    }
                }
            }
        }
        return alwaysCopyObjectPasteOperations;
    }

    protected boolean shouldPasteAlwaysCopyObject (ObjectInfo alwaysCopyObjectInfo) {
        EObject existingObject = getEObject (alwaysCopyObjectInfo.objId);
        EObject loadedEObject = getLoadedEObject (alwaysCopyObjectInfo.objId);
        return ((existingObject == null) || (getClipboardOperationHelper ().getPasteCollisionAction (loadedEObject.eClass ()) == PasteAction.ADD));
    }

    private PasteTarget checkPotentialParent (PasteTarget potentialParent, String preferredTypeName, boolean strictMatch) {
        if ((potentialParent.getObject () instanceof EAnnotation) == false) {
            if (potentialParent.isResource ()) {
                if (preferredTypeName == null || strictMatch == false) {
                    return potentialParent;
                }
            } else {
                EObject potentialParentObject = (EObject) potentialParent.getObject ();
                if (potentialParentObject.eClass ().getInstanceClassName ().equals (preferredTypeName)) {
                    return potentialParent;
                } else if ((strictMatch == false) && (getPasteContainmentFeature (potentialParentObject) != null)) {
                    return potentialParent;
                }

            }
        }
        return null;
    }

    public EReference getPasteContainmentFeature (EObject parentEObject) {
        return ClipboardSupportUtil.getPasteContainmentFeature (parentEObject, getEObject (), getContainmentFeature ());
    }

    protected boolean handleCollision (EReference reference, List list, EObject eObject, ObjectInfo eObjectInfo) {
        PasteAction pasteCollisionAction = (eObjectInfo.objCopyType.equals (ObjectCopyType.OBJ_COPY_TYPE_ALWAYS)) ? PasteAction.CLONE : getClipboardOperationHelper ().getPasteCollisionAction (eObject.eClass ());
        if (pasteCollisionAction == PasteAction.DISCARD) {
            return false;
        }
        if (list.isEmpty ()) {
            return true;
        }
        EObject object = null;
        Iterator it = list.iterator ();
        while (it.hasNext ()) {
            object = (EObject) it.next ();
            if (ClipboardSupportUtil.hasNameCollision (object, eObject)) {
                if (pasteCollisionAction.equals (PasteAction.ADD)) {
                    ClipboardSupportUtil.rename (list, eObject, COPY);
                    return true;
                } else if (pasteCollisionAction.equals (PasteAction.REPLACE)) {
                    if (canBeReplaced (object)) {
                        if (reference == null) {
                            ClipboardSupportUtil.destroyEObjectInResource (object);
                        } else {
                            ClipboardSupportUtil.destroyEObjectInCollection (object.eContainer (), reference, object);
                        }
                        return true;
                    }
                    return false;
                } else if (pasteCollisionAction.equals (PasteAction.IGNORE)) {
                    return false;
                } else if (pasteCollisionAction.equals (PasteAction.MERGE)) {
                    mergeEObjects (eObjectInfo.hasHint (ClipboardUtil.MERGE_HINT_WEAK), object, eObject, eObjectInfo);
                    setPastedElement (object);
                    return false;
                } else if (pasteCollisionAction.equals (PasteAction.CLONE)) {
                    ClipboardSupportUtil.rename (list, eObject, COPY);
                    return true;
                }

            }
        }
        return true;
    }

    protected boolean handleCollision (EReference reference, EObject object, EObject eObject, ObjectInfo eObjectInfo) {
        PasteAction pasteCollisionAction = (eObjectInfo.objCopyType.equals (ObjectCopyType.OBJ_COPY_TYPE_ALWAYS)) ? PasteAction.CLONE : getClipboardOperationHelper ().getPasteCollisionAction (eObject.eClass ());
        if (pasteCollisionAction.equals (PasteAction.DISCARD)) {
            return false;
        }
        if (object == null) {
            return true;
        }
        if (pasteCollisionAction.equals (PasteAction.ADD)) {
            if (canBeReplaced (object)) {
                ClipboardSupportUtil.destroyEObject (object.eContainer (), reference);
                return true;
            }
            return false;
        } else if (pasteCollisionAction.equals (PasteAction.REPLACE)) {
            if (canBeReplaced (object)) {
                ClipboardSupportUtil.destroyEObject (object.eContainer (), reference);
                return true;
            }
            return false;
        } else if (pasteCollisionAction.equals (PasteAction.IGNORE)) {
            return false;
        } else if (pasteCollisionAction.equals (PasteAction.MERGE)) {
            mergeEObjects (eObjectInfo.hasHint (ClipboardUtil.MERGE_HINT_WEAK), object, eObject, eObjectInfo);
            setPastedElement (object);
            return false;
        } else if (pasteCollisionAction.equals (PasteAction.CLONE)) {
            if (canBeReplaced (object)) {
                ClipboardSupportUtil.destroyEObject (object.eContainer (), reference);
                return true;
            }
            return false;
        }

        return true;
    }

    protected List mergeLists (EReference reference, List targetObjectList, List objectList, ObjectInfo objectInfo) {
        List mergedList = new ArrayList ();
        mergedList.addAll (targetObjectList);
        if (targetObjectList.equals (objectList)) {
            return mergedList;
        }
        EObject eObject = null;
        Iterator childIt = objectList.iterator ();
        while (childIt.hasNext ()) {
            eObject = (EObject) childIt.next ();
            if (handleCollision (reference, mergedList, eObject, objectInfo)) {
                mergedList.add (eObject);
            }
        }
        return mergedList;
    }

    protected void mergeEObjects (boolean weakMerge, EObject targetEObject, EObject eObject, ObjectInfo objectInfo) {
        if (targetEObject.equals (eObject)) {
            return;
        }
        MergedEObjectInfo info = (MergedEObjectInfo) getAllMergedElementsMap ().get (eObject);
        if ((info != null) && (info.targetEObjects.contains (targetEObject))) {
            return;
        }
        if (info == null) {
            info = new MergedEObjectInfo ();
            info.mergedEObject = eObject;
            info.mergedEObjectID = getLoadedEObjectID (eObject);
            addMergedElementEntry (eObject, info);
        }
        info.targetEObjects.add (targetEObject);
        Iterator it = eObject.eClass ().getEAllReferences ().iterator ();
        EReference reference = null;
        while (it.hasNext ()) {
            reference = (EReference) it.next ();
            if (reference.isChangeable ()) {
                Object unresolvedEObjectValue = eObject.eGet (reference, false);
                if (FeatureMapUtil.isMany (eObject, reference)) {
                    List childList = (List) unresolvedEObjectValue;
                    if (childList.isEmpty () == false) {
                        List targetObjectList = (List) targetEObject.eGet (reference, true);
                        List mergedList = mergeLists (reference, targetObjectList, childList, objectInfo);
                        ClipboardSupportUtil.setEObjectList (targetEObject, reference, mergedList);
                    }
                } else if (unresolvedEObjectValue != null) {
                    EObject targetObjectValue = (EObject) targetEObject.eGet (reference, true);
                    if (handleCollision (reference, targetObjectValue, (EObject) unresolvedEObjectValue, objectInfo)) {
                        ClipboardSupportUtil.setEObject (targetEObject, reference, (EObject) unresolvedEObjectValue);
                    }
                }

            }
        }
        if (weakMerge == false) {
            it = eObject.eClass ().getEAllAttributes ().iterator ();
            EAttribute attribute = null;
            while (it.hasNext ()) {
                attribute = (EAttribute) it.next ();
                ClipboardSupportUtil.setEAttribute (targetEObject, attribute, eObject.eGet (attribute));
            }
        }
    }

    protected ObjectInfo getChildObjectInfo () {
        return childObjectInfo;
    }

    protected PasteChildOperation getMainChildPasteProcess () {
        return mainChildPasteProcess;
    }

    public boolean isAuxiliaryOperation () {
        return (getMainChildPasteProcess () != null);
    }

    protected ObjectInfo getCopyParentObjectInfo () {
        if (copyParentObjectInfo == null) {
            copyParentObjectInfo = (ObjectInfo) getResourceInfo ().objects.get (getChildObjectInfo ().copyParentId);
        }
        return copyParentObjectInfo;
    }

    protected boolean isCopyParentDirectParent () {
        return getChildObjectInfo ().containerId.equals (getCopyParentObjectInfo ().objId);
    }

    protected void setPastedElement (EObject pastedElement) {
        this.pastedElement = pastedElement;
    }

    protected boolean canBeReplaced (EObject eObject) {
        if (! getParentTarget ().isResource ()) {
            if (eObject.equals (getParentEObject ())) {
                return false;
            }
            if (ClipboardSupportUtil.isChild (eObject, getParentEObject ())) {
                return false;
            }
        }
        return true;
    }

}

