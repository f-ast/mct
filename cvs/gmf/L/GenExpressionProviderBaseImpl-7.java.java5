package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.codegen.ecore.genmodel.GenClassifier;

import org.eclipse.emf.codegen.ecore.genmodel.GenDataType;

import org.eclipse.emf.codegen.ecore.genmodel.GenTypedElement;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;

import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;

import org.eclipse.gmf.codegen.gmfgen.GenLanguage;

import org.eclipse.gmf.codegen.gmfgen.ValueExpression;

public abstract class GenExpressionProviderBaseImpl extends EObjectImpl implements GenExpressionProviderBase {
    protected EList < ValueExpression > expressions = null;

    protected GenExpressionProviderBaseImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenExpressionProviderBase ();
    }

    public abstract GenLanguage getLanguage ();

    public String getQualifiedInstanceClassName (GenClassifier genClassifier) {
        if (genClassifier instanceof GenClass) {
            return ((GenClass) genClassifier).getQualifiedInterfaceName ();
        } else if (genClassifier instanceof GenDataType) {
            Class < ? > clazz = genClassifier.getEcoreClassifier ().getInstanceClass ();
            if (clazz != null && clazz.isPrimitive ()) {
                return EcoreUtil.wrapperClassFor (clazz).getName ();
            }
            return ((GenDataType) genClassifier).getQualifiedInstanceClassName ();
        }

        return "java.lang.Object";
    }

    public String getQualifiedTypeInstanceClassName (GenTypedElement genTypedElement) {
        if (genTypedElement.isPrimitiveType () && ! genTypedElement.isListType ()) {
            return getQualifiedInstanceClassName (genTypedElement.getTypeGenClassifier ());
        }
        String type = genTypedElement.getType ();
        return (type != null) ? type : "java.lang.Object";
    }

    public EList < ValueExpression > getExpressions () {
        if (expressions == null) {
            expressions = new EObjectResolvingEList < ValueExpression > (ValueExpression.class, this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS);
        }
        return expressions;
    }

    public GenExpressionProviderContainer getContainer () {
        if (eContainerFeatureID != GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER) return null;

        return (GenExpressionProviderContainer) eContainer ();
    }

    public NotificationChain basicSetContainer (GenExpressionProviderContainer newContainer, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newContainer, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER, msgs);
        return msgs;
    }

    public void setContainer (GenExpressionProviderContainer newContainer) {
        if (newContainer != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER && newContainer != null)) {
            if (EcoreUtil.isAncestor (this, newContainer)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newContainer != null) msgs = ((InternalEObject) newContainer).eInverseAdd (this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS, GenExpressionProviderContainer.class, msgs);

            msgs = basicSetContainer (newContainer, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER, newContainer, newContainer));

    }

    public abstract EList < String > getRequiredPluginIDs ();

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetContainer ((GenExpressionProviderContainer) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER :
                return basicSetContainer (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS, GenExpressionProviderContainer.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS :
                return getExpressions ();
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER :
                return getContainer ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS :
                getExpressions ().clear ();
                getExpressions ().addAll ((Collection < ? extends ValueExpression >) newValue);
                return;
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER :
                setContainer ((GenExpressionProviderContainer) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS :
                getExpressions ().clear ();
                return;
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER :
                setContainer ((GenExpressionProviderContainer) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS :
                return expressions != null && ! expressions.isEmpty ();
            case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER :
                return getContainer () != null;
        }
        return super.eIsSet (featureID);
    }

}

