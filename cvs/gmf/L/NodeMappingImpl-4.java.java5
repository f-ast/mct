package org.eclipse.gmf.mappings.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EAttribute;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.diadef.Node;

import org.eclipse.gmf.mappings.ChildNodeMapping;

import org.eclipse.gmf.mappings.Constraint;

import org.eclipse.gmf.mappings.ElementInitializer;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.NodeMapping;

public class NodeMappingImpl extends MappingEntryImpl implements NodeMapping {
    protected Node diagramNode = null;
    protected EClass domainMetaElement = null;
    protected Constraint domainSpecialization = null;
    protected ElementInitializer domainInitializer = null;
    protected EReference containmentFeature = null;
    protected EAttribute editFeature = null;
    protected EList childMappings = null;

    protected NodeMappingImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getNodeMapping ();
    }

    public Node getDiagramNode () {
        if (diagramNode != null && diagramNode.eIsProxy ()) {
            Node oldDiagramNode = diagramNode;
            diagramNode = (Node) eResolveProxy ((InternalEObject) diagramNode);
            if (diagramNode != oldDiagramNode) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE, oldDiagramNode, diagramNode));

            }
        }
        return diagramNode;
    }

    public Node basicGetDiagramNode () {
        return diagramNode;
    }

    public void setDiagramNode (Node newDiagramNode) {
        Node oldDiagramNode = diagramNode;
        diagramNode = newDiagramNode;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE, oldDiagramNode, diagramNode));

    }

    public EClass getDomainMetaElement () {
        if (domainMetaElement != null && domainMetaElement.eIsProxy ()) {
            EClass oldDomainMetaElement = domainMetaElement;
            domainMetaElement = (EClass) eResolveProxy ((InternalEObject) domainMetaElement);
            if (domainMetaElement != oldDomainMetaElement) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.NODE_MAPPING__DOMAIN_META_ELEMENT, oldDomainMetaElement, domainMetaElement));

            }
        }
        return domainMetaElement;
    }

    public EClass basicGetDomainMetaElement () {
        return domainMetaElement;
    }

    public void setDomainMetaElement (EClass newDomainMetaElement) {
        EClass oldDomainMetaElement = domainMetaElement;
        domainMetaElement = newDomainMetaElement;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.NODE_MAPPING__DOMAIN_META_ELEMENT, oldDomainMetaElement, domainMetaElement));

    }

    public Constraint getDomainSpecialization () {
        return domainSpecialization;
    }

    public NotificationChain basicSetDomainSpecialization (Constraint newDomainSpecialization, NotificationChain msgs) {
        Constraint oldDomainSpecialization = domainSpecialization;
        domainSpecialization = newDomainSpecialization;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION, oldDomainSpecialization, newDomainSpecialization);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setDomainSpecialization (Constraint newDomainSpecialization) {
        if (newDomainSpecialization != domainSpecialization) {
            NotificationChain msgs = null;
            if (domainSpecialization != null) msgs = ((InternalEObject) domainSpecialization).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION, null, msgs);

            if (newDomainSpecialization != null) msgs = ((InternalEObject) newDomainSpecialization).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION, null, msgs);

            msgs = basicSetDomainSpecialization (newDomainSpecialization, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION, newDomainSpecialization, newDomainSpecialization));

    }

    public ElementInitializer getDomainInitializer () {
        return domainInitializer;
    }

    public NotificationChain basicSetDomainInitializer (ElementInitializer newDomainInitializer, NotificationChain msgs) {
        ElementInitializer oldDomainInitializer = domainInitializer;
        domainInitializer = newDomainInitializer;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER, oldDomainInitializer, newDomainInitializer);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setDomainInitializer (ElementInitializer newDomainInitializer) {
        if (newDomainInitializer != domainInitializer) {
            NotificationChain msgs = null;
            if (domainInitializer != null) msgs = ((InternalEObject) domainInitializer).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER, null, msgs);

            if (newDomainInitializer != null) msgs = ((InternalEObject) newDomainInitializer).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER, null, msgs);

            msgs = basicSetDomainInitializer (newDomainInitializer, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER, newDomainInitializer, newDomainInitializer));

    }

    public EReference getContainmentFeature () {
        if (containmentFeature != null && containmentFeature.eIsProxy ()) {
            EReference oldContainmentFeature = containmentFeature;
            containmentFeature = (EReference) eResolveProxy ((InternalEObject) containmentFeature);
            if (containmentFeature != oldContainmentFeature) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.NODE_MAPPING__CONTAINMENT_FEATURE, oldContainmentFeature, containmentFeature));

            }
        }
        return containmentFeature;
    }

    public EReference basicGetContainmentFeature () {
        return containmentFeature;
    }

    public void setContainmentFeature (EReference newContainmentFeature) {
        EReference oldContainmentFeature = containmentFeature;
        containmentFeature = newContainmentFeature;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.NODE_MAPPING__CONTAINMENT_FEATURE, oldContainmentFeature, containmentFeature));

    }

    public EAttribute getEditFeature () {
        if (editFeature != null && editFeature.eIsProxy ()) {
            EAttribute oldEditFeature = editFeature;
            editFeature = (EAttribute) eResolveProxy ((InternalEObject) editFeature);
            if (editFeature != oldEditFeature) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.NODE_MAPPING__EDIT_FEATURE, oldEditFeature, editFeature));

            }
        }
        return editFeature;
    }

    public EAttribute basicGetEditFeature () {
        return editFeature;
    }

    public void setEditFeature (EAttribute newEditFeature) {
        EAttribute oldEditFeature = editFeature;
        editFeature = newEditFeature;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.NODE_MAPPING__EDIT_FEATURE, oldEditFeature, editFeature));

    }

    public EList getChildMappings () {
        if (childMappings == null) {
            childMappings = new EObjectContainmentEList (ChildNodeMapping.class, this, GMFMapPackage.NODE_MAPPING__CHILD_MAPPINGS);
        }
        return childMappings;
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION :
                    return basicSetDomainSpecialization (null, msgs);
                case GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER :
                    return basicSetDomainInitializer (null, msgs);
                case GMFMapPackage.NODE_MAPPING__CHILD_MAPPINGS :
                    return ((InternalEList) getChildMappings ()).basicRemove (otherEnd, msgs);
                default :
                    return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
            }
        }
        return eBasicSetContainer (null, featureID, msgs);
    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE :
                if (resolve) return getDiagramNode ();

                return basicGetDiagramNode ();
            case GMFMapPackage.NODE_MAPPING__DOMAIN_META_ELEMENT :
                if (resolve) return getDomainMetaElement ();

                return basicGetDomainMetaElement ();
            case GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION :
                return getDomainSpecialization ();
            case GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER :
                return getDomainInitializer ();
            case GMFMapPackage.NODE_MAPPING__CONTAINMENT_FEATURE :
                if (resolve) return getContainmentFeature ();

                return basicGetContainmentFeature ();
            case GMFMapPackage.NODE_MAPPING__EDIT_FEATURE :
                if (resolve) return getEditFeature ();

                return basicGetEditFeature ();
            case GMFMapPackage.NODE_MAPPING__CHILD_MAPPINGS :
                return getChildMappings ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE :
                setDiagramNode ((Node) newValue);
                return;
            case GMFMapPackage.NODE_MAPPING__DOMAIN_META_ELEMENT :
                setDomainMetaElement ((EClass) newValue);
                return;
            case GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION :
                setDomainSpecialization ((Constraint) newValue);
                return;
            case GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER :
                setDomainInitializer ((ElementInitializer) newValue);
                return;
            case GMFMapPackage.NODE_MAPPING__CONTAINMENT_FEATURE :
                setContainmentFeature ((EReference) newValue);
                return;
            case GMFMapPackage.NODE_MAPPING__EDIT_FEATURE :
                setEditFeature ((EAttribute) newValue);
                return;
            case GMFMapPackage.NODE_MAPPING__CHILD_MAPPINGS :
                getChildMappings ().clear ();
                getChildMappings ().addAll ((Collection) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE :
                setDiagramNode ((Node) null);
                return;
            case GMFMapPackage.NODE_MAPPING__DOMAIN_META_ELEMENT :
                setDomainMetaElement ((EClass) null);
                return;
            case GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION :
                setDomainSpecialization ((Constraint) null);
                return;
            case GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER :
                setDomainInitializer ((ElementInitializer) null);
                return;
            case GMFMapPackage.NODE_MAPPING__CONTAINMENT_FEATURE :
                setContainmentFeature ((EReference) null);
                return;
            case GMFMapPackage.NODE_MAPPING__EDIT_FEATURE :
                setEditFeature ((EAttribute) null);
                return;
            case GMFMapPackage.NODE_MAPPING__CHILD_MAPPINGS :
                getChildMappings ().clear ();
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE :
                return diagramNode != null;
            case GMFMapPackage.NODE_MAPPING__DOMAIN_META_ELEMENT :
                return domainMetaElement != null;
            case GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION :
                return domainSpecialization != null;
            case GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER :
                return domainInitializer != null;
            case GMFMapPackage.NODE_MAPPING__CONTAINMENT_FEATURE :
                return containmentFeature != null;
            case GMFMapPackage.NODE_MAPPING__EDIT_FEATURE :
                return editFeature != null;
            case GMFMapPackage.NODE_MAPPING__CHILD_MAPPINGS :
                return childMappings != null && ! childMappings.isEmpty ();
        }
        return eDynamicIsSet (eFeature);
    }

}

