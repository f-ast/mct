package org.eclipse.gmf.mappings.provider;

import java.util.Collection;

import java.util.Collections;

import java.util.HashSet;

import java.util.Iterator;

import java.util.List;

import java.util.Set;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.mappings.GMFMapFactory;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.NodeMapping;

public class NodeMappingItemProvider extends MappingEntryItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public NodeMappingItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addDiagramNodePropertyDescriptor (object);
            addDomainMetaElementPropertyDescriptor (object);
            addContainmentFeaturePropertyDescriptor (object);
            addEditFeaturePropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addDiagramNodePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_AbstractNodeMapping_diagramNode_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_AbstractNodeMapping_diagramNode_feature", "_UI_AbstractNodeMapping_type"), GMFMapPackage.eINSTANCE.getAbstractNodeMapping_DiagramNode (), true, null, null, null));
    }

    protected void addDomainMetaElementPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_AbstractNodeMapping_domainMetaElement_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_AbstractNodeMapping_domainMetaElement_feature", "_UI_AbstractNodeMapping_type"), GMFMapPackage.eINSTANCE.getAbstractNodeMapping_DomainMetaElement (), true, null, null, null));
    }

    protected void addContainmentFeaturePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_NodeMapping_containmentFeature_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_NodeMapping_containmentFeature_feature", "_UI_NodeMapping_type"), GMFMapPackage.eINSTANCE.getAbstractNodeMapping_ContainmentFeature (), true, null, null, null) {

            protected Collection getComboBoxObjects (Object object) {
                if (object instanceof NodeMapping) {
                    NodeMapping nm = (NodeMapping) object;
                    if (nm.getDomainMetaElement () != null) {
                        Set features = new HashSet ();
                        for (Iterator it = nm.getDomainMetaElement ().getEPackage ().eAllContents ();
                        it.hasNext ();) {
                            Object next = it.next ();
                            if (next instanceof EReference) {
                                EReference ref = (EReference) next;
                                if (ref.isContainment () && nm.getDomainMetaElement ().equals (ref.getEType ())) {
                                    features.add (ref);
                                }
                            }
                        }
                        return features;
                    }
                }
                return Collections.EMPTY_LIST;
            }

        }

        );
    }

    protected void addEditFeaturePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_NodeMapping_editFeature_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_NodeMapping_editFeature_feature", "_UI_NodeMapping_type"), GMFMapPackage.eINSTANCE.getAbstractNodeMapping_EditFeature (), true, null, null, null) {

            protected Collection getComboBoxObjects (Object object) {
                if (object instanceof NodeMapping) {
                    NodeMapping nm = (NodeMapping) object;
                    if (nm.getDomainMetaElement () != null) {
                        return nm.getDomainMetaElement ().getEAllAttributes ();
                    }
                }
                return Collections.EMPTY_LIST;
            }

        }

        );
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFMapPackage.eINSTANCE.getAbstractNodeMapping_DomainSpecialization ());
            childrenFeatures.add (GMFMapPackage.eINSTANCE.getAbstractNodeMapping_DomainInitializer ());
            childrenFeatures.add (GMFMapPackage.eINSTANCE.getAbstractNodeMapping_ChildMappings ());
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    public Object getImage (Object object) {
        return getResourceLocator ().getImage ("full/obj16/NodeMapping");
    }

    public String getText (Object object) {
        return getString ("_UI_NodeMapping_type");
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (NodeMapping.class)) {
            case GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION :
            case GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER :
            case GMFMapPackage.NODE_MAPPING__CHILD_MAPPINGS :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFMapPackage.eINSTANCE.getAbstractNodeMapping_DomainSpecialization (), GMFMapFactory.eINSTANCE.createConstraint ()));
        newChildDescriptors.add (createChildParameter (GMFMapPackage.eINSTANCE.getAbstractNodeMapping_DomainInitializer (), GMFMapFactory.eINSTANCE.createFeatureSeqInitializer ()));
        newChildDescriptors.add (createChildParameter (GMFMapPackage.eINSTANCE.getAbstractNodeMapping_ChildMappings (), GMFMapFactory.eINSTANCE.createChildNodeMapping ()));
    }

    public ResourceLocator getResourceLocator () {
        return GMFMapEditPlugin.INSTANCE;
    }

}

