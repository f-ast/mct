package org.eclipse.gmf.codegen.gmfgen.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenLinkConstraints;

import org.eclipse.gmf.codegen.gmfgen.presentation.EditorPlugin;

public class GenLinkConstraintsItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public GenLinkConstraintsItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    @Override
    public List < IItemPropertyDescriptor > getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
        }
        return itemPropertyDescriptors;
    }

    @Override
    public Collection < ? extends EStructuralFeature > getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFGenPackage.eINSTANCE.getGenLinkConstraints_SourceEnd ());
            childrenFeatures.add (GMFGenPackage.eINSTANCE.getGenLinkConstraints_TargetEnd ());
        }
        return childrenFeatures;
    }

    @Override
    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    @Override
    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/GenLinkConstraints"));
    }

    @Override
    public String getText (Object object) {
        return getString ("_UI_GenLinkConstraints_type");
    }

    @Override
    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (GenLinkConstraints.class)) {
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__SOURCE_END :
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__TARGET_END :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    @Override
    protected void collectNewChildDescriptors (Collection < Object > newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenLinkConstraints_SourceEnd (), GMFGenFactory.eINSTANCE.createGenConstraint ()));
        newChildDescriptors.add (createChildParameter (GMFGenPackage.eINSTANCE.getGenLinkConstraints_TargetEnd (), GMFGenFactory.eINSTANCE.createGenConstraint ()));
    }

    @Override
    public String getCreateChildText (Object owner, Object feature, Object child, Collection < ? > selection) {
        Object childFeature = feature;
        Object childObject = child;
        boolean qualify = childFeature == GMFGenPackage.eINSTANCE.getGenLinkConstraints_SourceEnd () || childFeature == GMFGenPackage.eINSTANCE.getGenLinkConstraints_TargetEnd ();
        if (qualify) {
            return getString ("_UI_CreateChild_text2", new Object [] {getTypeText (childObject), getFeatureText (childFeature), getTypeText (owner)});
        }
        return super.getCreateChildText (owner, feature, child, selection);
    }

    @Override
    public ResourceLocator getResourceLocator () {
        return EditorPlugin.INSTANCE;
    }

}

