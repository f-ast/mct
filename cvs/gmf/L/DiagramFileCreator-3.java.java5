package org.eclipse.gmf.runtime.diagram.ui.resources.editor.util;

import java.io.ByteArrayInputStream;

import java.io.InputStream;

import java.lang.reflect.InvocationTargetException;

import java.text.MessageFormat;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IResource;

import org.eclipse.core.resources.IResourceStatus;

import org.eclipse.core.resources.IWorkspaceRoot;

import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IPath;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.core.runtime.OperationCanceledException;

import org.eclipse.core.runtime.Plugin;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorPlugin;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.l10n.EditorResourceManager;

import org.eclipse.jface.dialogs.ErrorDialog;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.jface.operation.IRunnableContext;

import org.eclipse.swt.widgets.Shell;

public abstract class DiagramFileCreator {

    public abstract String getExtension ();

    protected Plugin getPlugin () {
        return EditorPlugin.getInstance ();
    }

    private IFile createFileHandle (IPath filePath) {
        return ResourcesPlugin.getWorkspace ().getRoot ().getFile (filePath);
    }

    public String appendExtensionToFileName (String szFileName) {
        if (! szFileName.endsWith (getExtension ())) {
            return szFileName + getExtension ();
        } else return szFileName;

    }

    public String getUniqueFileName (final IPath containerPath, String szFileName) {
        int nFileNumber = 1;
        String szNewFileName = szFileName;
        IPath filePath = containerPath.append (appendExtensionToFileName (szNewFileName));
        IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace ().getRoot ();
        while (workspaceRoot.exists (filePath)) {
            nFileNumber ++;
            szNewFileName = szFileName + nFileNumber;
            filePath = containerPath.append (appendExtensionToFileName (szNewFileName));
        }
        return szNewFileName;
    }

    protected void createFile (IFile fileHandle, InputStream contents, IProgressMonitor monitor) throws CoreException {
        if (contents == null) contents = new ByteArrayInputStream (new byte [0]);

        try {
            fileHandle.create (contents, false, monitor);
        } catch (CoreException e) {
            if (e.getStatus ().getCode () == IResourceStatus.PATH_OCCUPIED) fileHandle.refreshLocal (IResource.DEPTH_ZERO, null);
            else {
                Log.error (getPlugin (), IStatus.ERROR, e.getMessage (), e);
                throw e;
            }
        }
        if (monitor.isCanceled ()) {
            OperationCanceledException oce = new OperationCanceledException ();
            Log.error (getPlugin (), IStatus.ERROR, oce.getMessage (), oce);
            throw oce;
        }
    }

    private void createFile (IFile fileHandle, InputStream contents, IRunnableContext runContext) throws InterruptedException, InvocationTargetException {
        try {
            createFile (fileHandle, contents, new NullProgressMonitor ());
        } catch (CoreException e) {
            Log.error (getPlugin (), IStatus.ERROR, e.getMessage (), e);
            throw new InvocationTargetException (e);
        }
    }

    public IFile createNewFile (final IPath containerPath, final String fileName, final InputStream initialContents, Shell shell, IRunnableContext runContext) {
        IFile newFile;
        IPath newFilePath = containerPath.append (appendExtensionToFileName (fileName));
        final IFile newFileHandle = createFileHandle (newFilePath);
        try {
            createFile (newFileHandle, initialContents, runContext);
        } catch (InterruptedException e) {
            return null;
        } catch (InvocationTargetException e) {
            if (e.getTargetException () instanceof CoreException) {
                ErrorDialog.openError (shell, EditorResourceManager.getI18NString ("Editor.DialogErrorTitle.CreationProblem"), null, ((CoreException) e.getTargetException ()).getStatus ());
            } else {
                Log.error (EditorPlugin.getInstance (), EditorStatusCodes.ERROR, MessageFormat.format ("Exception in {0}.getNewFile(): {1}", new Object [] {getClass ().getName (), e.getTargetException ()}), e);
                MessageDialog.openError (shell, EditorResourceManager.getI18NString ("Editor.DialogInternalErrorTitle.CreationProblem"), MessageFormat.format (EditorResourceManager.getI18NString ("Editor.DialogInternalErrorMessage"), new Object [] {e.getTargetException ().getMessage ()}));
            }
            return null;
        }
        newFile = newFileHandle;
        return newFile;
    }

}

