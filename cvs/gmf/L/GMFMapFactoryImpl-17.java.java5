package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EDataType;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.eclipse.gmf.mappings.*;

import org.eclipse.gmf.mappings.AuditContainer;

import org.eclipse.gmf.mappings.AuditRule;

import org.eclipse.gmf.mappings.CanvasMapping;

import org.eclipse.gmf.mappings.ChildReference;

import org.eclipse.gmf.mappings.CompartmentMapping;

import org.eclipse.gmf.mappings.Constraint;

import org.eclipse.gmf.mappings.FeatureSeqInitializer;

import org.eclipse.gmf.mappings.FeatureValueSpec;

import org.eclipse.gmf.mappings.GMFMapFactory;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.LabelMapping;

import org.eclipse.gmf.mappings.LinkConstraints;

import org.eclipse.gmf.mappings.LinkMapping;

import org.eclipse.gmf.mappings.Mapping;

import org.eclipse.gmf.mappings.Severity;

import org.eclipse.gmf.mappings.TopNodeReference;

import org.eclipse.gmf.mappings.ValueExpression;

public class GMFMapFactoryImpl extends EFactoryImpl implements GMFMapFactory {

    public static GMFMapFactory init () {
        try {
            GMFMapFactory theGMFMapFactory = (GMFMapFactory) EPackage.Registry.INSTANCE.getEFactory ("http://www.eclipse.org/gmf/2005/mappings");
            if (theGMFMapFactory != null) {
                return theGMFMapFactory;
            }
        } catch (Exception exception) {
            EcorePlugin.INSTANCE.log (exception);
        }
        return new GMFMapFactoryImpl ();
    }

    public GMFMapFactoryImpl () {
        super ();
    }

    public EObject create (EClass eClass) {
        switch (eClass.getClassifierID ()) {
            case GMFMapPackage.MAPPING :
                return createMapping ();
            case GMFMapPackage.CHILD_REFERENCE :
                return createChildReference ();
            case GMFMapPackage.TOP_NODE_REFERENCE :
                return createTopNodeReference ();
            case GMFMapPackage.SHAPE_NODE_MAPPING :
                return createShapeNodeMapping ();
            case GMFMapPackage.LABEL_NODE_MAPPING :
                return createLabelNodeMapping ();
            case GMFMapPackage.COMPARTMENT_MAPPING :
                return createCompartmentMapping ();
            case GMFMapPackage.LINK_MAPPING :
                return createLinkMapping ();
            case GMFMapPackage.CANVAS_MAPPING :
                return createCanvasMapping ();
            case GMFMapPackage.LABEL_MAPPING :
                return createLabelMapping ();
            case GMFMapPackage.CONSTRAINT :
                return createConstraint ();
            case GMFMapPackage.LINK_CONSTRAINTS :
                return createLinkConstraints ();
            case GMFMapPackage.VALUE_EXPRESSION :
                return createValueExpression ();
            case GMFMapPackage.FEATURE_SEQ_INITIALIZER :
                return createFeatureSeqInitializer ();
            case GMFMapPackage.FEATURE_VALUE_SPEC :
                return createFeatureValueSpec ();
            case GMFMapPackage.AUDIT_CONTAINER :
                return createAuditContainer ();
            case GMFMapPackage.AUDIT_RULE :
                return createAuditRule ();
            case GMFMapPackage.DOMAIN_ELEMENT_TARGET :
                return createDomainElementTarget ();
            case GMFMapPackage.DOMAIN_ATTRIBUTE_TARGET :
                return createDomainAttributeTarget ();
            case GMFMapPackage.DIAGRAM_ELEMENT_TARGET :
                return createDiagramElementTarget ();
            case GMFMapPackage.NOTATION_ELEMENT_TARGET :
                return createNotationElementTarget ();
            case GMFMapPackage.METRIC_CONTAINER :
                return createMetricContainer ();
            case GMFMapPackage.METRIC_RULE :
                return createMetricRule ();
            case GMFMapPackage.AUDITED_METRIC_TARGET :
                return createAuditedMetricTarget ();
            default :
                throw new IllegalArgumentException ("The class '" + eClass.getName () + "' is not a valid classifier");
        }
    }

    public Object createFromString (EDataType eDataType, String initialValue) {
        switch (eDataType.getClassifierID ()) {
            case GMFMapPackage.SEVERITY :
                return createSeverityFromString (eDataType, initialValue);
            default :
                throw new IllegalArgumentException ("The datatype '" + eDataType.getName () + "' is not a valid classifier");
        }
    }

    public String convertToString (EDataType eDataType, Object instanceValue) {
        switch (eDataType.getClassifierID ()) {
            case GMFMapPackage.SEVERITY :
                return convertSeverityToString (eDataType, instanceValue);
            default :
                throw new IllegalArgumentException ("The datatype '" + eDataType.getName () + "' is not a valid classifier");
        }
    }

    public CompartmentMapping createCompartmentMapping () {
        CompartmentMappingImpl compartmentMapping = new CompartmentMappingImpl ();
        return compartmentMapping;
    }

    public LinkMapping createLinkMapping () {
        LinkMappingImpl linkMapping = new LinkMappingImpl ();
        return linkMapping;
    }

    public CanvasMapping createCanvasMapping () {
        CanvasMappingImpl canvasMapping = new CanvasMappingImpl ();
        return canvasMapping;
    }

    public LabelMapping createLabelMapping () {
        LabelMappingImpl labelMapping = new LabelMappingImpl ();
        return labelMapping;
    }

    public Mapping createMapping () {
        MappingImpl mapping = new MappingImpl ();
        return mapping;
    }

    public ChildReference createChildReference () {
        ChildReferenceImpl childReference = new ChildReferenceImpl ();
        return childReference;
    }

    public TopNodeReference createTopNodeReference () {
        TopNodeReferenceImpl topNodeReference = new TopNodeReferenceImpl ();
        return topNodeReference;
    }

    public ShapeNodeMapping createShapeNodeMapping () {
        ShapeNodeMappingImpl shapeNodeMapping = new ShapeNodeMappingImpl ();
        return shapeNodeMapping;
    }

    public LabelNodeMapping createLabelNodeMapping () {
        LabelNodeMappingImpl labelNodeMapping = new LabelNodeMappingImpl ();
        return labelNodeMapping;
    }

    public Constraint createConstraint () {
        ConstraintImpl constraint = new ConstraintImpl ();
        return constraint;
    }

    public LinkConstraints createLinkConstraints () {
        LinkConstraintsImpl linkConstraints = new LinkConstraintsImpl ();
        return linkConstraints;
    }

    public ValueExpression createValueExpression () {
        ValueExpressionImpl valueExpression = new ValueExpressionImpl ();
        return valueExpression;
    }

    public FeatureSeqInitializer createFeatureSeqInitializer () {
        FeatureSeqInitializerImpl featureSeqInitializer = new FeatureSeqInitializerImpl ();
        return featureSeqInitializer;
    }

    public FeatureValueSpec createFeatureValueSpec () {
        FeatureValueSpecImpl featureValueSpec = new FeatureValueSpecImpl ();
        return featureValueSpec;
    }

    public AuditContainer createAuditContainer () {
        AuditContainerImpl auditContainer = new AuditContainerImpl ();
        return auditContainer;
    }

    public AuditRule createAuditRule () {
        AuditRuleImpl auditRule = new AuditRuleImpl ();
        return auditRule;
    }

    public DomainElementTarget createDomainElementTarget () {
        DomainElementTargetImpl domainElementTarget = new DomainElementTargetImpl ();
        return domainElementTarget;
    }

    public DomainAttributeTarget createDomainAttributeTarget () {
        DomainAttributeTargetImpl domainAttributeTarget = new DomainAttributeTargetImpl ();
        return domainAttributeTarget;
    }

    public DiagramElementTarget createDiagramElementTarget () {
        DiagramElementTargetImpl diagramElementTarget = new DiagramElementTargetImpl ();
        return diagramElementTarget;
    }

    public NotationElementTarget createNotationElementTarget () {
        NotationElementTargetImpl notationElementTarget = new NotationElementTargetImpl ();
        return notationElementTarget;
    }

    public MetricContainer createMetricContainer () {
        MetricContainerImpl metricContainer = new MetricContainerImpl ();
        return metricContainer;
    }

    public MetricRule createMetricRule () {
        MetricRuleImpl metricRule = new MetricRuleImpl ();
        return metricRule;
    }

    public AuditedMetricTarget createAuditedMetricTarget () {
        AuditedMetricTargetImpl auditedMetricTarget = new AuditedMetricTargetImpl ();
        return auditedMetricTarget;
    }

    public Severity createSeverityFromString (EDataType eDataType, String initialValue) {
        Severity result = Severity.get (initialValue);
        if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");

        return result;
    }

    public String convertSeverityToString (EDataType eDataType, Object instanceValue) {
        return instanceValue == null ? null : instanceValue.toString ();
    }

    public GMFMapPackage getGMFMapPackage () {
        return (GMFMapPackage) getEPackage ();
    }

    public static GMFMapPackage getPackage () {
        return GMFMapPackage.eINSTANCE;
    }

}

