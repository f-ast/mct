package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.List;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.commands.UnexecutableCommand;

import org.eclipse.gef.requests.GroupRequest;

import org.eclipse.jface.dialogs.IDialogConstants;

import org.eclipse.jface.dialogs.MessageDialogWithToggle;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.swt.widgets.Display;

import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;

import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IInsertableEditPart;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;

import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;

import org.eclipse.gmf.runtime.diagram.ui.requests.GroupRequestViaKeyboard;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.emf.core.edit.MObjectType;

import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;

import org.eclipse.gmf.runtime.notation.View;

public class ComponentEditPolicy extends org.eclipse.gef.editpolicies.ComponentEditPolicy {
    private static final String DELETE_FROM_DIAGRAM_DLG_TITLE = DiagramResourceManager.getI18NString ("PromptingDeleteAction.DeleteFromDiagramDialog.Title");
    private static final String DELETE_FROM_DIAGRAM_DLG_MESSAGE = DiagramResourceManager.getI18NString ("PromptingDeleteAction.DeleteFromDiagramDialog.Message");
    private static final String DELETE_FROM_MODEL_DLG_TOGGLE_LABEL = DiagramResourceManager.getI18NString ("MessageDialogWithToggle.DoNotPromptAgainToggle.label");

    protected final Command createDeleteCommand (GroupRequest deleteRequest) {
        if (shouldDeleteSemantic ()) {
            return createDeleteSemanticCommand (deleteRequest);
        }
        if (deleteRequest instanceof GroupRequestViaKeyboard) {
            boolean isModellerElement = false;
            if (getHost () instanceof IGraphicalEditPart) {
                EObject semanticElement = ViewUtil.resolveSemanticElement ((View) ((IGraphicalEditPart) getHost ()).getModel ());
                if ((semanticElement != null) && (EObjectUtil.getType (semanticElement) == MObjectType.MODELING)) {
                    isModellerElement = true;
                }
            }
            boolean shouldShowPrompt = ((GroupRequestViaKeyboard) deleteRequest).isShowInformationDialog ();
            if (shouldShowPrompt && isModellerElement) {
                ((GroupRequestViaKeyboard) deleteRequest).setShowInformationDialog (false);
                if (showPrompt () == false) {
                    return UnexecutableCommand.INSTANCE;
                }
            }
        }
        return createDeleteViewCommand (deleteRequest);
    }

    protected boolean shouldDeleteSemantic () {
        EditPart parent = getHost ().getParent ();
        if (parent instanceof IGraphicalEditPart) {
            CanonicalEditPolicy cep = (CanonicalEditPolicy) parent.getEditPolicy (EditPolicyRoles.CANONICAL_ROLE);
            if (cep != null) {
                return cep.isEnabled ();
            }
        }
        return false;
    }

    protected Command createDeleteViewCommand (GroupRequest deleteRequest) {
        CompositeCommand cc = new CompositeCommand (null);
        List toDel = deleteRequest.getEditParts ();
        if (toDel == null || toDel.isEmpty ()) {
            cc.compose (new DeleteCommand ((View) getHost ().getModel ()));
        } else {
            for (int i = 0;
            i < toDel.size (); i ++) {
                IGraphicalEditPart gep = (IGraphicalEditPart) toDel.get (i);
                cc.compose (new DeleteCommand ((View) gep.getModel ()));
            }
        }
        return new EtoolsProxyCommand (cc.unwrap ());
    }

    protected Command createDeleteSemanticCommand (GroupRequest deleteRequest) {
        EditCommandRequestWrapper editCommandRequest = new EditCommandRequestWrapper (new DestroyElementRequest (false));
        Command semanticCmd = getHost ().getCommand (editCommandRequest);
        if (semanticCmd != null && semanticCmd.canExecute ()) {
            CompoundCommand cc = new CompoundCommand ();
            cc.add (semanticCmd);
            return cc;
        }
        return createDeleteViewCommand (deleteRequest);
    }

    protected View getView () {
        if (getHost ().getModel () instanceof View && getHost () instanceof GraphicalEditPart) {
            GraphicalEditPart ePart = (GraphicalEditPart) getHost ();
            return ePart.getPrimaryView ();
        }
        return null;
    }

    private boolean showPrompt () {
        boolean prompt = ((IPreferenceStore) ((IGraphicalEditPart) getHost ()).getDiagramPreferencesHint ().getPreferenceStore ()).getBoolean (IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);
        if (prompt) if (showMessageDialog ()) return true;
        else return false;

        return true;
    }

    private boolean showMessageDialog () {
        MessageDialogWithToggle dialog = MessageDialogWithToggle.openYesNoQuestion (Display.getCurrent ().getActiveShell (), DELETE_FROM_DIAGRAM_DLG_TITLE, DELETE_FROM_DIAGRAM_DLG_MESSAGE, DELETE_FROM_MODEL_DLG_TOGGLE_LABEL, false, (IPreferenceStore) ((IGraphicalEditPart) getHost ()).getDiagramPreferencesHint ().getPreferenceStore (), IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);
        if (dialog.getReturnCode () == IDialogConstants.YES_ID) return true;
        else return false;

    }

    protected IInsertableEditPart getInsertableEditPart () {
        if (getHost () instanceof IInsertableEditPart) {
            return (IInsertableEditPart) getHost ();
        }
        return null;
    }

    protected Command getInsertCommand (GroupRequest insertRequest) {
        IInsertableEditPart insertEP = getInsertableEditPart ();
        if (null == insertEP) return null;

        EObject hostElement = ViewUtil.resolveSemanticElement ((View) insertEP.getModel ());
        if (hostElement != null) {
            MObjectType theMType = EObjectUtil.getType (hostElement);
            if (theMType.equals (MObjectType.MODELING)) {
                CreateElementRequest theReq = new CreateElementRequest (hostElement, insertEP.getElementType ());
                EditCommandRequestWrapper editCommandRequest = new EditCommandRequestWrapper (theReq);
                Command cmd = ((IGraphicalEditPart) getHost ()).getCommand (editCommandRequest);
                return cmd;
            }
        }
        return null;
    }

    public Command getCommand (Request request) {
        if (! (request instanceof GroupRequest)) return null;

        GroupRequest grpRequest = (GroupRequest) request;
        if (grpRequest instanceof GroupRequestViaKeyboard) {
            return getDeleteCommand (grpRequest);
        } else if (grpRequest.getType ().equals (RequestConstants.REQ_INSERT_SEMANTIC)) {
            return getInsertCommand (grpRequest);
        }

        return super.getCommand (request);
    }

}

