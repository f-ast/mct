package org.eclipse.gmf.runtime.common.ui.services.icon;

import java.util.List;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.swt.graphics.Image;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.common.ui.services.internal.icon.IconOperation;

import org.eclipse.gmf.runtime.common.ui.services.internal.icon.IconServiceProviderConfiguration;

public class IconService extends Service implements IIconProvider {
    private final static IconService _instance = new IconService ();
    protected static class ProviderDescriptor extends Service.ProviderDescriptor {
        private IconServiceProviderConfiguration providerConfiguration;

        public ProviderDescriptor (IConfigurationElement element) {
            super (element);
            this.providerConfiguration = IconServiceProviderConfiguration.parse (element);
            assert null != element : "NULL configuration element";
        }

        public boolean provides (IOperation operation) {
            if (getPolicy () != null) return getPolicy ().provides (operation);

            if (provider == null) {
                if (isSupportedInExtention (operation)) {
                    providerConfiguration = null;
                    return getProvider ().provides (operation);
                }
                return false;
            }
            return getProvider ().provides (operation);
        }

        private boolean isSupportedInExtention (IOperation operation) {
            if (operation instanceof GetIconOperation) {
                GetIconOperation o = (GetIconOperation) operation;
                return providerConfiguration.supports (o.getHint ());
            }
            return false;
        }

    }

    private IconService () {
    }

    public static IconService getInstance () {
        return _instance;
    }

    private Object execute (IconOperation operation) {
        List results = execute (ExecutionStrategy.FIRST, operation);
        return results.isEmpty () ? null : results.get (0);
    }

    public Image getIcon (IAdaptable hint, int flags) {
        return (Image) execute (new GetIconOperation (hint, flags));
    }

    public Image getIcon (IAdaptable hint) {
        return getIcon (hint, IconOptions.NONE.intValue ());
    }

    protected Service.ProviderDescriptor newProviderDescriptor (IConfigurationElement element) {
        return new ProviderDescriptor (element);
    }

}

