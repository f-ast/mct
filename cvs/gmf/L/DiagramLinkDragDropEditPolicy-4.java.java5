package org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies;

import java.util.Iterator;

import java.util.List;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.swt.dnd.DND;

import org.eclipse.gmf.runtime.diagram.core.internal.commands.CreateDiagramLinkCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.requests.DropObjectsRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.View;

public class DiagramLinkDragDropEditPolicy extends DragDropEditPolicy {

    public Command getDropObjectsCommand (DropObjectsRequest request) {
        if (RequestConstants.REQ_DROP_OBJECTS.equals (request.getType ())) {
            DropObjectsRequest elements = request;
            Iterator i = elements.getObjects ().iterator ();
            while (i.hasNext ()) {
                Object element = i.next ();
                if (element instanceof Diagram) {
                    Diagram diagram = (Diagram) element;
                    View view = (View) getHost ().getModel ();
                    CreateDiagramLinkCommand com = new CreateDiagramLinkCommand (PresentationResourceManager.getI18NString ("Command.CreateDiagramLink"), view, diagram);
                    return new EtoolsProxyCommand (com);
                }
            }
        }
        return null;
    }

    public boolean understandsRequest (Request request) {
        if (RequestConstants.REQ_DROP_OBJECTS.equals (request.getType ())) {
            List elements = ((DropObjectsRequest) request).getObjects ();
            return elements.size () == 1 && elements.get (0) instanceof Diagram;
        }
        return super.understandsRequest (request);
    }

    public void showTargetFeedback (Request request) {
        if (understandsRequest (request)) super.showTargetFeedback (request);

    }

    protected int getRequiredDragDetail (Request request) {
        if (request instanceof DropObjectsRequest) {
            DropObjectsRequest req = (DropObjectsRequest) request;
            if ((req.getAllowedDetail () & DND.DROP_LINK) != 0) return DND.DROP_LINK;

            return DND.DROP_COPY;
        }
        return super.getRequiredDragDetail (request);
    }

}

