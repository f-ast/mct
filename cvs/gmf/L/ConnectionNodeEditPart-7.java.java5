package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.List;

import org.eclipse.draw2d.ConnectionAnchor;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.NodeEditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.requests.CreateRequest;

import org.eclipse.gef.requests.DropRequest;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy;

import org.eclipse.gmf.runtime.draw2d.ui.figures.IAnchorableFigure;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.notation.Anchor;

import org.eclipse.gmf.runtime.notation.IdentityAnchor;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

abstract public class ConnectionNodeEditPart extends ConnectionEditPart implements INodeEditPart {

    public ConnectionNodeEditPart (View view) {
        super (view);
    }

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicy.GRAPHICAL_NODE_ROLE, new GraphicalNodeEditPolicy ());
    }

    protected List getModelSourceConnections () {
        return ViewUtil.getSourceConnections (getEdge ());
    }

    protected List getModelTargetConnections () {
        return ViewUtil.getTargetConnections (getEdge ());
    }

    protected ConnectionAnchor getSourceConnectionAnchor () {
        if (getSource () != null && getSource () instanceof NodeEditPart) {
            NodeEditPart editPart = (NodeEditPart) getSource ();
            return editPart.getSourceConnectionAnchor (this);
        }
        return super.getSourceConnectionAnchor ();
    }

    public ConnectionAnchor getSourceConnectionAnchor (org.eclipse.gef.ConnectionEditPart connEditPart) {
        final ConnectionNodeEditPart connection = (ConnectionNodeEditPart) connEditPart;
        String t = (String) MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {

            public Object run () {
                Anchor a = connection.getEdge ().getSourceAnchor ();
                if (a instanceof IdentityAnchor) return ((IdentityAnchor) a).getId ();

                return "";
            }

        }

        );
        return ((IAnchorableFigure) getFigure ()).getConnectionAnchor (t);
    }

    public ConnectionAnchor getSourceConnectionAnchor (Request request) {
        Point center = getFigure ().getBounds ().getCenter ();
        getFigure ().translateToAbsolute (center);
        Point pt = ((DropRequest) request).getLocation () == null ? center : new Point (((DropRequest) request).getLocation ());
        if (request instanceof CreateRequest) {
            getFigure ().translateToRelative (pt);
        }
        return ((IAnchorableFigure) getFigure ()).getSourceConnectionAnchorAt (pt);
    }

    protected ConnectionAnchor getTargetConnectionAnchor () {
        if (getTarget () instanceof NodeEditPart) {
            NodeEditPart editPart = (NodeEditPart) getTarget ();
            return editPart.getTargetConnectionAnchor (this);
        }
        return super.getTargetConnectionAnchor ();
    }

    public ConnectionAnchor getTargetConnectionAnchor (org.eclipse.gef.ConnectionEditPart connEditPart) {
        final ConnectionNodeEditPart connection = (ConnectionNodeEditPart) connEditPart;
        String t = (String) MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {

            public Object run () {
                Anchor a = connection.getEdge ().getTargetAnchor ();
                if (a instanceof IdentityAnchor) return ((IdentityAnchor) a).getId ();

                return "";
            }

        }

        );
        return ((IAnchorableFigure) getFigure ()).getConnectionAnchor (t);
    }

    public ConnectionAnchor getTargetConnectionAnchor (Request request) {
        Point center = getFigure ().getBounds ().getCenter ();
        getFigure ().translateToAbsolute (center);
        Point pt = ((DropRequest) request).getLocation () == null ? center : new Point (((DropRequest) request).getLocation ());
        if (request instanceof CreateRequest) {
            getFigure ().translateToRelative (pt);
        }
        return ((IAnchorableFigure) getFigure ()).getTargetConnectionAnchorAt (pt);
    }

    final public String mapConnectionAnchorToTerminal (ConnectionAnchor c) {
        return ((IAnchorableFigure) getFigure ()).getConnectionAnchorTerminal (c);
    }

    final public ConnectionAnchor mapTerminalToConnectionAnchor (String terminal) {
        return ((IAnchorableFigure) getFigure ()).getConnectionAnchor (terminal);
    }

    public boolean canAttachNote () {
        return true;
    }

    protected void handleNotificationEvent (Notification notification) {
        Object feature = notification.getFeature ();
        if (NotationPackage.eINSTANCE.getView_SourceEdges ().equals (feature)) refreshSourceConnections ();
        else if (NotationPackage.eINSTANCE.getView_TargetEdges ().equals (feature)) refreshTargetConnections ();
        else super.handleNotificationEvent (notification);

        if (NotationPackage.eINSTANCE.getIdentityAnchor_Id ().equals (feature) || notification.getNewValue () instanceof IdentityAnchor || notification.getOldValue () instanceof IdentityAnchor) {
            anchorChange ();
        }
    }

    public void anchorChange () {
        refreshSourceAnchor ();
        refreshTargetAnchor ();
    }

}

