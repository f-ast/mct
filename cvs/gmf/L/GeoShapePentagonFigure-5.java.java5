package org.eclipse.gmf.runtime.diagram.ui.geoshapes.internal.draw2d.figures;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.PointList;

import org.eclipse.draw2d.geometry.PrecisionPoint;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.draw2d.ui.geometry.PrecisionPointList;

public class GeoShapePentagonFigure extends GeoShapePolygonFigure {
    private final static double WIDTH_FACTOR = 2 * Math.sin (0.4 * Math.PI) / (1 + Math.cos (0.2 * Math.PI));
    private final static double BOTTOM_OFFSET_FACTOR = 1 / (4 * Math.cos (0.2 * Math.PI));
    private final static double SIDE_OFFSET_FACTOR = (1 - Math.cos (0.4 * Math.PI)) / (1 + Math.cos (0.2 * Math.PI));

    public GeoShapePentagonFigure (int width, int height, int spacing) {
        super (width, height, spacing);
    }

    public GeoShapePentagonFigure (int height, int spacing) {
        this ((int) Math.round (WIDTH_FACTOR * height), height, spacing);
    }

    protected PointList calculatePoints (Rectangle rect) {
        PointList points = new PrecisionPointList ();
        Point p1 = new PrecisionPoint (rect.preciseX () + rect.preciseWidth () / 2, rect.preciseY ());
        Point p2 = new PrecisionPoint (rect.preciseX () + rect.preciseWidth () - 1, rect.preciseY () + rect.preciseHeight () * SIDE_OFFSET_FACTOR);
        Point p3 = new PrecisionPoint (rect.preciseX () + rect.preciseWidth () * (0.5 + BOTTOM_OFFSET_FACTOR), rect.preciseY () + rect.preciseHeight () - 1);
        Point p4 = new PrecisionPoint (rect.preciseX () + rect.preciseWidth () * (0.5 - BOTTOM_OFFSET_FACTOR), p3.preciseY ());
        Point p5 = new PrecisionPoint (rect.preciseX (), p2.preciseY ());
        points.addPoint (p1);
        points.addPoint (p2);
        points.addPoint (p3);
        points.addPoint (p4);
        points.addPoint (p5);
        points.addPoint (p1);
        return points;
    }

}

