package org.eclipse.gmf.runtime.diagram.ui.actions;

import java.util.Collections;

import java.util.List;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.draw2d.geometry.PrecisionRectangle;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.RequestConstants;

import org.eclipse.gef.requests.AlignmentRequest;

import org.eclipse.gef.tools.ToolUtilities;

import org.eclipse.gef.ui.actions.AlignmentAction;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.Messages;

import org.eclipse.ui.IWorkbenchPage;

public class AlignAction extends PresentationAction {
    private String id;
    private int alignment;
    private boolean isToolbarItem = true;

    public AlignAction (IWorkbenchPage workbenchPage, String id, int align) {
        super (workbenchPage);
        this.id = id;
        this.alignment = align;
        initUI ();
    }

    public AlignAction (IWorkbenchPage workbenchPage, String id, int align, boolean isToolbarItem) {
        super (workbenchPage);
        this.id = id;
        this.alignment = align;
        this.isToolbarItem = isToolbarItem;
        initUI ();
    }

    protected void initUI () {
        setId (this.id);
        String text = null;
        String toolTipText = null;
        AlignmentAction gefAlignmentAction = new AlignmentAction (getWorkbenchPart (), alignment);
        setHoverImageDescriptor (gefAlignmentAction.getHoverImageDescriptor ());
        setImageDescriptor (gefAlignmentAction.getImageDescriptor ());
        setDisabledImageDescriptor (gefAlignmentAction.getDisabledImageDescriptor ());
        gefAlignmentAction.dispose ();
        switch (alignment) {
            case PositionConstants.LEFT :
                {
                    if (isToolbarItem) {
                        text = Messages.getString ("AlignLeftToolbarAction.Label");
                        toolTipText = Messages.getString ("AlignLeftToolbarAction.Tooltip");
                    } else {
                        text = Messages.getString ("AlignLeft");
                        toolTipText = Messages.getString ("AlignLeft");
                    }
                    break;
                } case PositionConstants.RIGHT :
                {
                    if (isToolbarItem) {
                        text = Messages.getString ("AlignRightToolbarAction.Label");
                        toolTipText = Messages.getString ("AlignRightToolbarAction.Tooltip");
                    } else {
                        text = Messages.getString ("AlignRight");
                        toolTipText = Messages.getString ("AlignRight");
                    }
                    break;
                } case PositionConstants.TOP :
                {
                    if (isToolbarItem) {
                        text = Messages.getString ("AlignTopToolbarAction.Label");
                        toolTipText = Messages.getString ("AlignTopToolbarAction.Tooltip");
                    } else {
                        text = Messages.getString ("AlignTop");
                        toolTipText = Messages.getString ("AlignTop");
                    }
                    break;
                } case PositionConstants.BOTTOM :
                {
                    if (isToolbarItem) {
                        text = Messages.getString ("AlignBottomToolbarAction.Label");
                        toolTipText = Messages.getString ("AlignBottomToolbarAction.Tooltip");
                    } else {
                        text = Messages.getString ("AlignBottom");
                        toolTipText = Messages.getString ("AlignBottom");
                    }
                    break;
                } case PositionConstants.CENTER :
                {
                    if (isToolbarItem) {
                        text = Messages.getString ("AlignCenterToolbarAction.Label");
                        toolTipText = Messages.getString ("AlignCenterToolbarAction.Tooltip");
                    } else {
                        text = Messages.getString ("AlignCenter");
                        toolTipText = Messages.getString ("AlignCenter");
                    }
                    break;
                } case PositionConstants.MIDDLE :
                {
                    if (isToolbarItem) {
                        text = Messages.getString ("AlignMiddleToolbarAction.Label");
                        toolTipText = Messages.getString ("AlignMiddleToolbarAction.Tooltip");
                    } else {
                        text = Messages.getString ("AlignMiddle");
                        toolTipText = Messages.getString ("AlignMiddle");
                    }
                    break;
                }}
        setText (text);
        setToolTipText (toolTipText);
    }

    protected boolean isSelectionListener () {
        return true;
    }

    protected boolean isCommandStackListener () {
        return true;
    }

    protected List createOperationSet () {
        List editparts = super.createOperationSet ();
        editparts = ToolUtilities.getSelectionWithoutDependants (editparts);
        if (editparts.size () < 2) return Collections.EMPTY_LIST;

        EditPart parent = ((EditPart) editparts.get (0)).getParent ();
        for (int i = 1;
        i < editparts.size (); i ++) {
            EditPart part = (EditPart) editparts.get (i);
            if (part.getParent () != parent) return Collections.EMPTY_LIST;

        }
        return editparts;
    }

    protected Request createTargetRequest () {
        AlignmentRequest request = new AlignmentRequest (RequestConstants.REQ_ALIGN);
        request.setAlignment (alignment);
        return request;
    }

    protected void updateTargetRequest () {
        AlignmentRequest request = (AlignmentRequest) getTargetRequest ();
        request.setAlignmentRectangle (calculateAlignmentRectangle ());
        super.updateTargetRequest ();
    }

    protected Rectangle calculateAlignmentRectangle () {
        List editparts = getOperationSet ();
        if (editparts == null || editparts.isEmpty ()) return null;

        GraphicalEditPart part = (GraphicalEditPart) editparts.get (editparts.size () - 1);
        Rectangle rect = new PrecisionRectangle (part.getFigure ().getBounds ());
        part.getFigure ().translateToAbsolute (rect);
        return rect;
    }

}

