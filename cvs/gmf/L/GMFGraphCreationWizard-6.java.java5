package org.eclipse.gmf.graphdef.editor.part;

import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.jface.dialogs.ErrorDialog;

import org.eclipse.jface.operation.IRunnableWithProgress;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.jface.wizard.Wizard;

import org.eclipse.ui.INewWizard;

import org.eclipse.ui.IWorkbench;

import org.eclipse.ui.PartInitException;

import org.eclipse.ui.actions.WorkspaceModifyOperation;

public class GMFGraphCreationWizard extends Wizard implements INewWizard {
    private IWorkbench workbench;
    protected IStructuredSelection selection;
    protected GMFGraphCreationWizardPage diagramModelFilePage;
    protected GMFGraphCreationWizardPage domainModelFilePage;
    protected Resource diagram;
    private boolean openNewlyCreatedDiagramEditor = true;

    public IWorkbench getWorkbench () {
        return workbench;
    }

    public IStructuredSelection getSelection () {
        return selection;
    }

    public final Resource getDiagram () {
        return diagram;
    }

    public final boolean isOpenNewlyCreatedDiagramEditor () {
        return openNewlyCreatedDiagramEditor;
    }

    public void setOpenNewlyCreatedDiagramEditor (boolean openNewlyCreatedDiagramEditor) {
        this.openNewlyCreatedDiagramEditor = openNewlyCreatedDiagramEditor;
    }

    public void init (IWorkbench workbench, IStructuredSelection selection) {
        this.workbench = workbench;
        this.selection = selection;
        setWindowTitle ("New GMFGraph Diagram");
        setDefaultPageImageDescriptor (GMFGraphDiagramEditorPlugin.getBundledImageDescriptor ("icons/wizban/NewGMFGraphWizard.gif"));
        setNeedsProgressMonitor (true);
    }

    public void addPages () {
        diagramModelFilePage = new GMFGraphCreationWizardPage ("DiagramModelFile", getSelection (), "gmfgraph_diagram");
        diagramModelFilePage.setTitle ("Create GMFGraph Diagram");
        diagramModelFilePage.setDescription ("Select file that will contain diagram model.");
        addPage (diagramModelFilePage);
        domainModelFilePage = new GMFGraphCreationWizardPage ("DomainModelFile", getSelection (), "gmfgraph");
        domainModelFilePage.setTitle ("Create GMFGraph Diagram");
        domainModelFilePage.setDescription ("Select file that will contain domain model.");
        addPage (domainModelFilePage);
    }

    public boolean performFinish () {
        IRunnableWithProgress op = new WorkspaceModifyOperation (null) {

            protected void execute (IProgressMonitor monitor) throws CoreException, InterruptedException {
                diagram = GMFGraphDiagramEditorUtil.createDiagram (diagramModelFilePage.getURI (), domainModelFilePage.getURI (), monitor);
                if (isOpenNewlyCreatedDiagramEditor () && diagram != null) {
                    try {
                        GMFGraphDiagramEditorUtil.openDiagram (diagram);
                    } catch (PartInitException e) {
                        ErrorDialog.openError (getContainer ().getShell (), "Error opening diagram editor", null, e.getStatus ());
                    }
                }
            }

        }

        ;
        try {
            getContainer ().run (false, true, op);
        } catch (InterruptedException e) {
            return false;
        } catch (InvocationTargetException e) {
            if (e.getTargetException () instanceof CoreException) {
                ErrorDialog.openError (getContainer ().getShell (), "Creation Problems", null, ((CoreException) e.getTargetException ()).getStatus ());
            } else {
                GMFGraphDiagramEditorPlugin.getInstance ().logError ("Error creating diagram", e.getTargetException ());
            }
            return false;
        }
        return diagram != null;
    }

}

