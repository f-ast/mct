package org.eclipse.gmf.internal.bridge.ui.dashboard.actions;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;

import org.eclipse.gmf.bridge.ui.dashboard.DashboardAction;

import org.eclipse.gmf.bridge.ui.dashboard.DashboardFacade;

import org.eclipse.gmf.bridge.ui.dashboard.DashboardState;

import org.eclipse.gmf.internal.bridge.transform.TransformOptions;

import org.eclipse.gmf.internal.bridge.transform.TransformToGenModelOperation;

import org.eclipse.jface.dialogs.ErrorDialog;

public class TransformMap2GenModelAction implements DashboardAction {
    private DashboardFacade context;

    public void init (DashboardFacade context) {
        this.context = context;
    }

    public boolean isEnabled () {
        DashboardState state = context.getState ();
        if (context.isStrict ()) {
            if (state.getDM () == null || state.getDGM () == null || state.getTDM () == null) {
                return false;
            }
        }
        return state.getMM () != null;
    }

    public void run () {
        DashboardState state = context.getState ();
        URI mm = state.getMM ();
        URI gm = state.getGM ();
        if (gm == null) {
            gm = mm.trimFileExtension ().appendFileExtension ("gmfgen");
            state.setGM (gm);
        }
        try {
            TransformToGenModelOperation op = new TransformToGenModelOperation ();
            configureOptions (op.getOptions ());
            final ResourceSet rs = new ResourceSetImpl ();
            op.loadMappingModel (rs, mm, new NullProgressMonitor ());
            op.loadGenModel (rs, state.getDGM (), new NullProgressMonitor ());
            op.setGenURI (gm);
            op.executeTransformation (rs, new NullProgressMonitor ());
        } catch (CoreException ce) {
            ErrorDialog.openError (context.getShell (), null, ce.getMessage (), ce.getStatus ());
        } finally {
            context.updateStatus ();
        }
    }

    protected void configureOptions (TransformOptions options) {
        options.setUseRuntimeFigures (true);
        options.setUseMapMode (true);
        options.setGenerateRCP (false);
    }

}

