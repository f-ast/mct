package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.LinkEntry;

import org.eclipse.gmf.codegen.gmfgen.NodeEntry;

import org.eclipse.gmf.codegen.gmfgen.Palette;

import org.eclipse.gmf.codegen.gmfgen.ToolGroup;

public class ToolGroupImpl extends EntryBaseImpl implements ToolGroup {
    protected EList nodeTools = null;
    protected EList linkTools = null;

    protected ToolGroupImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getToolGroup ();
    }

    public EList getNodeTools () {
        if (nodeTools == null) {
            nodeTools = new EObjectContainmentWithInverseEList (NodeEntry.class, this, GMFGenPackage.TOOL_GROUP__NODE_TOOLS, GMFGenPackage.NODE_ENTRY__GROUP);
        }
        return nodeTools;
    }

    public EList getLinkTools () {
        if (linkTools == null) {
            linkTools = new EObjectContainmentWithInverseEList (LinkEntry.class, this, GMFGenPackage.TOOL_GROUP__LINK_TOOLS, GMFGenPackage.LINK_ENTRY__GROUP);
        }
        return linkTools;
    }

    public Palette getPalette () {
        if (eContainerFeatureID != GMFGenPackage.TOOL_GROUP__PALETTE) return null;

        return (Palette) eContainer ();
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.TOOL_GROUP__NODE_TOOLS :
                return ((InternalEList) getNodeTools ()).basicAdd (otherEnd, msgs);
            case GMFGenPackage.TOOL_GROUP__LINK_TOOLS :
                return ((InternalEList) getLinkTools ()).basicAdd (otherEnd, msgs);
            case GMFGenPackage.TOOL_GROUP__PALETTE :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.TOOL_GROUP__NODE_TOOLS :
                return ((InternalEList) getNodeTools ()).basicRemove (otherEnd, msgs);
            case GMFGenPackage.TOOL_GROUP__LINK_TOOLS :
                return ((InternalEList) getLinkTools ()).basicRemove (otherEnd, msgs);
            case GMFGenPackage.TOOL_GROUP__PALETTE :
                return eBasicSetContainer (null, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.TOOL_GROUP__PALETTE :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.PALETTE__GROUPS, Palette.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.TOOL_GROUP__NODE_TOOLS :
                return getNodeTools ();
            case GMFGenPackage.TOOL_GROUP__LINK_TOOLS :
                return getLinkTools ();
            case GMFGenPackage.TOOL_GROUP__PALETTE :
                return getPalette ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.TOOL_GROUP__NODE_TOOLS :
                getNodeTools ().clear ();
                getNodeTools ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.TOOL_GROUP__LINK_TOOLS :
                getLinkTools ().clear ();
                getLinkTools ().addAll ((Collection) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TOOL_GROUP__NODE_TOOLS :
                getNodeTools ().clear ();
                return;
            case GMFGenPackage.TOOL_GROUP__LINK_TOOLS :
                getLinkTools ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.TOOL_GROUP__NODE_TOOLS :
                return nodeTools != null && ! nodeTools.isEmpty ();
            case GMFGenPackage.TOOL_GROUP__LINK_TOOLS :
                return linkTools != null && ! linkTools.isEmpty ();
            case GMFGenPackage.TOOL_GROUP__PALETTE :
                return getPalette () != null;
        }
        return super.eIsSet (featureID);
    }

}

