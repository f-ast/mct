package org.eclipse.gmf.runtime.emf.type.core.requests;

import java.text.MessageFormat;

import java.util.Collections;

import java.util.List;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.ResourceManager;

public class CreateElementRequest extends AbstractEditCommandRequest {
    private EObject container;
    private EReference containmentFeature;
    private final IElementType elementType;
    private EObject newElement;
    private ICommand editContextCommand;
    private GetEditContextRequest editContextRequest;

    public CreateElementRequest (EObject container, IElementType elementType) {
        this (container, elementType, null);
    }

    public CreateElementRequest (IElementType elementType) {
        this (null, elementType, null);
    }

    public CreateElementRequest (EObject container, IElementType elementType, EReference containmentFeature) {
        super ();
        this.container = container;
        this.elementType = elementType;
        this.containmentFeature = containmentFeature;
    }

    public EObject getNewElement () {
        return newElement;
    }

    public void setNewElement (EObject element) {
        this.newElement = element;
    }

    public EReference getContainmentFeature () {
        return containmentFeature;
    }

    public void setContainmentFeature (EReference containmentFeature) {
        if (this.containmentFeature != containmentFeature) {
            this.containmentFeature = containmentFeature;
            invalidateEditHelperContext ();
        }
    }

    public EObject getContainer () {
        return container;
    }

    public EObject createContainer () {
        Object result = null;
        ICommand contextCommand = getEditContextCommand ();
        if (contextCommand != null && contextCommand.isExecutable ()) {
            contextCommand.execute (new NullProgressMonitor ());
            CommandResult commandResult = contextCommand.getCommandResult ();
            if (commandResult.getStatus ().getCode () == IStatus.OK) {
                result = commandResult.getReturnValue ();
            }
        }
        if (result == null || result instanceof EObject) {
            container = (EObject) result;
        }
        return getContainer ();
    }

    private ICommand getEditContextCommand () {
        if (editContextCommand == null) {
            editContextCommand = getElementType ().getEditCommand (getEditContextRequest ());
        }
        return editContextCommand;
    }

    private GetEditContextRequest getEditContextRequest () {
        if (editContextRequest == null) {
            editContextRequest = new GetEditContextRequest (this, getElementType ());
            editContextRequest.setEditContext (getContainer ());
        }
        return editContextRequest;
    }

    public void setContainer (EObject container) {
        if (this.container != container) {
            this.container = container;
            invalidateEditHelperContext ();
            invalidateContainmentFeature ();
        }
    }

    public IElementType getElementType () {
        return elementType;
    }

    public List getElementsToEdit () {
        if (getContainer () != null) {
            return Collections.singletonList (getContainer ());
        }
        return super.getElementsToEdit ();
    }

    protected String getDefaultLabel () {
        String createString = ResourceManager.getInstance ().getString ("Request.Label.Create");
        String label = MessageFormat.format (createString, new Object [] {getElementType ().getDisplayName ()});
        return label;
    }

    public Object getEditHelperContext () {
        ICommand contextCommand = getEditContextCommand ();
        if (contextCommand != null && contextCommand.isExecutable ()) {
            return getEditContextRequest ().getEditContext ();
        }
        return null;
    }

    public void setParameter (String parameterName, Object value) {
        super.setParameter (parameterName, value);
    }

    protected void invalidateEditHelperContext () {
        editContextCommand = null;
        editContextRequest = null;
    }

    protected void invalidateContainmentFeature () {
        containmentFeature = null;
    }

}

