package org.eclipse.gmf.validate;

import java.util.HashMap;

import org.eclipse.emf.common.util.Diagnostic;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.EValidator;

import org.eclipse.emf.ecore.util.Diagnostician;

import org.eclipse.emf.ecore.util.EObjectValidator;

import org.eclipse.gmf.internal.validate.AnnotatedDefinitionValidator;

import org.eclipse.gmf.internal.validate.AnnotatedOclValidator;

import org.eclipse.gmf.internal.validate.ExternModelImport;

import org.eclipse.gmf.internal.validate.ValidatorChain;

public class GMFValidator extends ValidatorChain {
    private static EValidator [] GMF_VALIDATORS = new EValidator [] {ExternModelImport.getImportValidator (), new AnnotatedOclValidator (), new AnnotatedDefinitionValidator ()};
    private static final EValidator NO_ECORE_INSTANCE = new ValidatorChain (GMF_VALIDATORS);
    private static EValidator [] ALL_VALIDATORS = new EValidator [] {EObjectValidator.INSTANCE, NO_ECORE_INSTANCE};
    public static final EValidator INSTANCE = new ValidatorChain (ALL_VALIDATORS);

    private GMFValidator () {
        super (GMF_VALIDATORS);
    }

    public static Diagnostic validate (EObject eObject) {
        Diagnostician diagnostician = new Diagnostician (new DelegateRegistry ());
        return diagnostician.validate (eObject);
    }

    public static Diagnostic validate (EObject eObject, ValidationOptions options) {
        Diagnostician diagnostician = new Diagnostician (new DelegateRegistry (options));
        return diagnostician.validate (eObject);
    }

    private static class DelegateRegistry extends HashMap < EPackage, Object > implements Registry {
        private ValidationOptions options;
        private EValidator gmfValidator;
        private EValidator noEcoreValidator;

        @SuppressWarnings("synthetic-access")
        DelegateRegistry () {
            this (null);
            gmfValidator = GMFValidator.INSTANCE;
            noEcoreValidator = GMFValidator.NO_ECORE_INSTANCE;
        }

        DelegateRegistry (ValidationOptions options) {
            this.options = options;
        }

        @SuppressWarnings("synthetic-access")
        private EValidator getGmfValidator () {
            if (gmfValidator == null) {
                gmfValidator = new ValidatorChain (ALL_VALIDATORS, options);
            }
            return gmfValidator;
        }

        @SuppressWarnings("synthetic-access")
        private EValidator getNoEcoreValidator () {
            if (noEcoreValidator == null) {
                noEcoreValidator = new ValidatorChain (GMF_VALIDATORS, options);
            }
            return noEcoreValidator;
        }

        public EValidator getEValidator (EPackage ePackage) {
            if (containsKey (ePackage)) {
                return (EValidator) super.get (ePackage);
            }
            EValidator delegateValidator = Registry.INSTANCE.getEValidator (ePackage);
            if (delegateValidator == null || delegateValidator.getClass ().equals (EObjectValidator.class)) {
                return getGmfValidator ();
            }
            return createDelegator (ePackage, delegateValidator);
        }

        @SuppressWarnings("unchecked")
        private EValidator createDelegator (Object key, EValidator delegate) {
            EValidator delegatingValidator = new ValidatorChain (new EValidator [] {delegate, getNoEcoreValidator ()});
            put ((EPackage) key, delegatingValidator);
            return delegatingValidator;
        }

        public Object get (Object key) {
            Object provider = super.get (key);
            if (provider != null) {
                return provider;
            }
            provider = Registry.INSTANCE.get (key);
            if (provider != null && provider instanceof EValidator) {
                if (provider.getClass ().equals (EObjectValidator.class)) {
                    return getGmfValidator ();
                }
                provider = createDelegator (key, (EValidator) provider);
            }
            return provider;
        }

    }

}

