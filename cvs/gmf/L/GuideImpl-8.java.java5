package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EMap;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EcoreEMap;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.runtime.notation.Guide;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class GuideImpl extends NotationEObjectImpl implements Guide {
    protected static final int POSITION_EDEFAULT = 0;
    protected int position = POSITION_EDEFAULT;
    protected EMap nodeMap;

    protected GuideImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.GUIDE;
    }

    public int getPosition () {
        return position;
    }

    public void setPosition (int newPosition) {
        int oldPosition = position;
        position = newPosition;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.GUIDE__POSITION, oldPosition, position));

    }

    public EMap getNodeMap () {
        if (nodeMap == null) {
            nodeMap = new EcoreEMap (NotationPackage.Literals.NODE_ENTRY, NodeEntryImpl.class, this, NotationPackage.GUIDE__NODE_MAP);
        }
        return nodeMap;
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case NotationPackage.GUIDE__NODE_MAP :
                return ((InternalEList) getNodeMap ()).basicRemove (otherEnd, msgs);
        }
        return eDynamicInverseRemove (otherEnd, featureID, msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.GUIDE__POSITION :
                return new Integer (getPosition ());
            case NotationPackage.GUIDE__NODE_MAP :
                if (coreType) return getNodeMap ();
                else return getNodeMap ().map ();

        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.GUIDE__POSITION :
                setPosition (((Integer) newValue).intValue ());
                return;
            case NotationPackage.GUIDE__NODE_MAP :
                ((EStructuralFeature.Setting) getNodeMap ()).set (newValue);
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.GUIDE__POSITION :
                setPosition (POSITION_EDEFAULT);
                return;
            case NotationPackage.GUIDE__NODE_MAP :
                getNodeMap ().clear ();
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.GUIDE__POSITION :
                return position != POSITION_EDEFAULT;
            case NotationPackage.GUIDE__NODE_MAP :
                return nodeMap != null && ! nodeMap.isEmpty ();
        }
        return eDynamicIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (position: ");
        result.append (position);
        result.append (')');
        return result.toString ();
    }

}

