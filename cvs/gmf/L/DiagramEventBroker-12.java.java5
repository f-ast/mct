package org.eclipse.gmf.runtime.diagram.core.listener;

import java.lang.ref.WeakReference;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Collections;

import java.util.HashMap;

import java.util.HashSet;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import java.util.Set;

import java.util.WeakHashMap;

import org.eclipse.emf.common.command.Command;

import org.eclipse.emf.common.command.CompoundCommand;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EAnnotation;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.transaction.NotificationFilter;

import org.eclipse.emf.transaction.ResourceSetChangeEvent;

import org.eclipse.emf.transaction.ResourceSetListenerImpl;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.emf.workspace.EMFOperationCommand;

import org.eclipse.gmf.runtime.diagram.core.internal.commands.PersistElementCommand;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public class DiagramEventBroker extends ResourceSetListenerImpl {
    private static String LISTEN_TO_ALL_FEATURES = "*";
    private final NotifierToKeyToListenersSetMap preListeners = new NotifierToKeyToListenersSetMap ();
    private final NotifierToKeyToListenersSetMap postListeners = new NotifierToKeyToListenersSetMap ();
    private static final Map instanceMap = new WeakHashMap ();
    private final class NotifierToKeyToListenersSetMap {
        private final Map listenersMap = new WeakHashMap ();

        public void addListener (EObject notifier, Object key, Object listener) {
            Map keys = (Map) listenersMap.get (notifier);
            if (keys == null) {
                keys = new HashMap ();
                listenersMap.put (notifier, keys);
            }
            Set listenersSet = (Set) keys.get (key);
            if (listenersSet == null) {
                listenersSet = new HashSet ();
                keys.put (key, listenersSet);
            }
            listenersSet.add (listener);
        }

        public void addListener (EObject notifier, Object listener) {
            addListener (notifier, LISTEN_TO_ALL_FEATURES, listener);
        }

        public void removeListener (EObject notifier, Object key, Object listener) {
            Map keys = (Map) listenersMap.get (notifier);
            if (keys != null) {
                Set listenersSet = (Set) keys.get (key);
                if (listenersSet != null) {
                    listenersSet.remove (listener);
                    if (listenersSet.isEmpty ()) {
                        keys.remove (key);
                    }
                }
                if (keys.isEmpty ()) listenersMap.remove (notifier);

            }
        }

        public Set getListeners (Object notifier, Object key) {
            Map keys = (Map) listenersMap.get (notifier);
            if (keys != null) {
                Set listenersSet = (Set) keys.get (key);
                if (listenersSet != null) {
                    return listenersSet;
                }
            }
            return Collections.EMPTY_SET;
        }

        public Set getAllListeners (Object notifier) {
            Map keys = (Map) listenersMap.get (notifier);
            if (keys == null || keys.isEmpty ()) {
                return Collections.EMPTY_SET;
            }
            Set listenersCollection = new HashSet ();
            Set enteries = keys.entrySet ();
            for (Iterator iter = enteries.iterator ();
            iter.hasNext ();) {
                Map.Entry entry = (Map.Entry) iter.next ();
                Set listenersSet = (Set) entry.getValue ();
                if (listenersSet != null && ! listenersSet.isEmpty ()) listenersCollection.addAll (listenersSet);

            }
            return listenersCollection;
        }

    }

    private DiagramEventBroker () {
        super (NotificationFilter.createNotifierTypeFilter (EObject.class));
    }

    public static DiagramEventBroker getInstance (TransactionalEditingDomain editingDomain) {
        WeakReference reference = (WeakReference) instanceMap.get (editingDomain);
        if (reference != null) {
            return (DiagramEventBroker) reference.get ();
        }
        return null;
    }

    public static void startListening (TransactionalEditingDomain editingDomain) {
        DiagramEventBroker diagramEventBroker = getInstance (editingDomain);
        if (diagramEventBroker == null) {
            diagramEventBroker = new DiagramEventBroker ();
            editingDomain.addResourceSetListener (diagramEventBroker);
            instanceMap.put (editingDomain, new WeakReference (diagramEventBroker));
        }
    }

    public static void stopListening (TransactionalEditingDomain editingDomain) {
        DiagramEventBroker diagramEventBroker = getInstance (editingDomain);
        if (diagramEventBroker != null) {
            editingDomain.removeResourceSetListener (diagramEventBroker);
            instanceMap.remove (editingDomain);
        }
    }

    public Command transactionAboutToCommit (ResourceSetChangeEvent event) {
        Set deletedObjects = NotificationUtil.getDeletedObjects (event);
        CompoundCommand cc = new CompoundCommand ();
        for (Iterator i = event.getNotifications ().iterator ();
        i.hasNext ();) {
            final Notification notification = (Notification) i.next ();
            if (shouldIgnoreNotification (notification)) continue;

            Object notifier = notification.getNotifier ();
            if (notifier instanceof EObject) {
                if (deletedObjects.contains (notification.getNotifier ())) {
                    continue;
                }
                Command cmd = handleTransactionAboutToCommitEvent (notification);
                if (cmd != null) {
                    cc.append (cmd);
                }
            }
        }
        return cc.isEmpty () ? null : cc;
    }

    public void resourceSetChanged (ResourceSetChangeEvent event) {
        Set deletedObjects = NotificationUtil.getDeletedObjects (event);
        for (Iterator i = event.getNotifications ().iterator ();
        i.hasNext ();) {
            final Notification notification = (Notification) i.next ();
            if (shouldIgnoreNotification (notification)) continue;

            Object notifier = notification.getNotifier ();
            if (notifier instanceof EObject) {
                if (deletedObjects.contains (notification.getNotifier ())) {
                    continue;
                }
                handleElementEvent (notification);
            }
        }
    }

    protected boolean shouldIgnoreNotification (Notification notification) {
        if ((notification.isTouch () && notification.getEventType () != Notification.RESOLVE) || NotationPackage.eINSTANCE.getView_Mutable ().equals (notification.getFeature ())) {
            return true;
        }
        return false;
    }

    private void fireNotification (Notification event) {
        Collection listenerList = getInterestedNotificationListeners (event, false);
        if (! listenerList.isEmpty ()) {
            List listenersSnapShot = new ArrayList (listenerList);
            if (! listenerList.isEmpty ()) {
                for (Iterator listenerIT = listenersSnapShot.iterator ();
                listenerIT.hasNext ();) {
                    NotificationListener listener = (NotificationListener) listenerIT.next ();
                    listener.notifyChanged (event);
                }
            }
        }
    }

    private Command fireTransactionAboutToCommit (Notification event) {
        Collection listenerList = getInterestedNotificationListeners (event, true);
        CompoundCommand cc = new CompoundCommand ();
        preparePersistCommand (event, cc);
        if (! listenerList.isEmpty ()) {
            List listenersSnapShot = new ArrayList (listenerList);
            if (! listenerList.isEmpty ()) {
                for (Iterator listenerIT = listenersSnapShot.iterator ();
                listenerIT.hasNext ();) {
                    NotificationPreCommitListener listener = (NotificationPreCommitListener) listenerIT.next ();
                    Command cmd = listener.transactionAboutToCommit (event);
                    if (cmd != null) {
                        cc.append (cmd);
                    }
                }
                return cc.isEmpty () ? null : cc;
            }
        }
        if (cc.isEmpty ()) return null;

        return cc;
    }

    private void preparePersistCommand (Notification event, CompoundCommand cc) {
        PersistElementCommand persistCmd = null;
        if (! event.isTouch ()) {
            EObject elementToPersist = (EObject) event.getNotifier ();
            while (elementToPersist != null && ! (elementToPersist instanceof View)) {
                elementToPersist = elementToPersist.eContainer ();
            }
            if (elementToPersist != null && (NotationPackage.eINSTANCE.getView_TransientChildren () == elementToPersist.eContainingFeature () || NotationPackage.eINSTANCE.getDiagram_TransientEdges () == elementToPersist.eContainingFeature ())) {
                if (! NotificationFilter.READ.matches (event)) {
                    persistCmd = getPersistViewCommand ((View) elementToPersist);
                }
            }
        }
        if (persistCmd != null) cc.append (new EMFOperationCommand (persistCmd.getEditingDomain (), persistCmd));

    }

    public final void addNotificationListener (EObject target, NotificationPreCommitListener listener) {
        if (target != null) {
            preListeners.addListener (target, LISTEN_TO_ALL_FEATURES, listener);
        }
    }

    public final void addNotificationListener (EObject target, NotificationListener listener) {
        if (target != null) {
            postListeners.addListener (target, LISTEN_TO_ALL_FEATURES, listener);
        }
    }

    public final void addNotificationListener (EObject target, EStructuralFeature key, NotificationPreCommitListener listener) {
        if (target != null) {
            preListeners.addListener (target, key, listener);
        }
    }

    public final void addNotificationListener (EObject target, EStructuralFeature key, NotificationListener listener) {
        if (target != null) {
            postListeners.addListener (target, key, listener);
        }
    }

    public final void removeNotificationListener (EObject target, NotificationPreCommitListener listener) {
        if (target != null) {
            preListeners.removeListener (target, LISTEN_TO_ALL_FEATURES, listener);
        }
    }

    public final void removeNotificationListener (EObject target, NotificationListener listener) {
        if (target != null) {
            postListeners.removeListener (target, LISTEN_TO_ALL_FEATURES, listener);
        }
    }

    public final void removeNotificationListener (EObject target, Object key, NotificationPreCommitListener listener) {
        if (target != null) {
            preListeners.removeListener (target, key, listener);
        }
    }

    public final void removeNotificationListener (EObject target, Object key, NotificationListener listener) {
        if (target != null) {
            postListeners.removeListener (target, key, listener);
        }
    }

    public final void finalize () {
        try {
            for (Iterator iter = instanceMap.keySet ().iterator ();
            iter.hasNext ();) {
                TransactionalEditingDomain editingDomain = (TransactionalEditingDomain) iter.next ();
                editingDomain.removeResourceSetListener ((DiagramEventBroker) ((WeakReference) instanceMap.get (editingDomain)).get ());
            }
        } catch (Throwable ignored) {
        }
    }

    private Set getNotificationListeners (Object notifier, boolean preCommit) {
        NotifierToKeyToListenersSetMap listeners = preCommit ? preListeners : postListeners;
        return listeners.getListeners (notifier, LISTEN_TO_ALL_FEATURES);
    }

    private Set getNotificationListeners (Object notifier, Object key, boolean preCommit) {
        NotifierToKeyToListenersSetMap listeners = preCommit ? preListeners : postListeners;
        if (key != null) {
            if (! key.equals (LISTEN_TO_ALL_FEATURES)) {
                Set listenersSet = new HashSet ();
                Collection c = listeners.getListeners (notifier, key);
                if (c != null && ! c.isEmpty ()) listenersSet.addAll (c);

                c = listeners.getListeners (notifier, LISTEN_TO_ALL_FEATURES);
                if (c != null && ! c.isEmpty ()) listenersSet.addAll (c);

                return listenersSet;
            } else if (key.equals (LISTEN_TO_ALL_FEATURES)) {
                return listeners.getAllListeners (notifier);
            }

        }
        return listeners.getAllListeners (notifier);
    }

    private Set getInterestedNotificationListeners (Notification event, boolean preCommit) {
        HashSet listenerSet = new HashSet ();
        Collection c = getNotificationListeners (event.getNotifier (), event.getFeature (), preCommit);
        if (c != null) {
            listenerSet.addAll (c);
        }
        EObject notifier = (EObject) event.getNotifier ();
        if (NotationPackage.eINSTANCE.getView_Visible ().equals (event.getFeature ()) && notifier.eContainer () != null) {
            listenerSet.addAll (getNotificationListeners (notifier.eContainer (), preCommit));
        } else if (notifier instanceof EAnnotation) {
            addListenersOfNotifier (listenerSet, notifier.eContainer (), event, preCommit);
        } else if (! (notifier instanceof View)) {
            while (notifier != null && ! (notifier instanceof View)) {
                notifier = notifier.eContainer ();
            }
            addListenersOfNotifier (listenerSet, notifier, event, preCommit);
        }

        return listenerSet;
    }

    public boolean isAggregatePrecommitListener () {
        return true;
    }

    public boolean isPrecommitOnly () {
        return true;
    }

    private void addListenersOfNotifier (Set listenerSet, EObject notifier, Notification event, boolean preCommit) {
        if (notifier != null) {
            Collection c = getNotificationListeners (notifier, event.getFeature (), preCommit);
            if (c != null) {
                if (listenerSet.isEmpty ()) listenerSet.addAll (c);
                else {
                    Iterator i = c.iterator ();
                    while (i.hasNext ()) {
                        Object o = i.next ();
                        listenerSet.add (o);
                    }
                }
            }
        }
    }

    private Command handleTransactionAboutToCommitEvent (Notification event) {
        EObject element = (EObject) event.getNotifier ();
        if (element != null) {
            return fireTransactionAboutToCommit (event);
        }
        return null;
    }

    private void handleElementEvent (Notification event) {
        EObject element = (EObject) event.getNotifier ();
        if (element != null) {
            fireNotification (event);
        }
    }

    private PersistElementCommand getPersistViewCommand (View view) {
        PersistElementCommand pvc = null;
        if (! view.isMutable ()) {
            TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain (view);
            View viewToPersist = ViewUtil.getTopViewToPersist (view);
            if (viewToPersist != null) {
                pvc = new PersistElementCommand (editingDomain, viewToPersist);
            }
        }
        return pvc;
    }

}

