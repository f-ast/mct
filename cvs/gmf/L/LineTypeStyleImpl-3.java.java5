package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.FlatEObjectImpl;

import org.eclipse.gmf.runtime.notation.LineType;

import org.eclipse.gmf.runtime.notation.LineTypeStyle;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class LineTypeStyleImpl extends NotationObjectImpl implements LineTypeStyle {
    protected static final LineType LINE_TYPE_EDEFAULT = LineType.SOLID_LITERAL;
    protected LineType lineType = LINE_TYPE_EDEFAULT;

    protected LineTypeStyleImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.LINE_TYPE_STYLE;
    }

    public LineType getLineType () {
        return lineType;
    }

    public void setLineType (LineType newLineType) {
        LineType oldLineType = lineType;
        lineType = newLineType == null ? LINE_TYPE_EDEFAULT : newLineType;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.LINE_TYPE_STYLE__LINE_TYPE, oldLineType, lineType));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.LINE_TYPE_STYLE__UUID :
                return getUUID ();
            case NotationPackage.LINE_TYPE_STYLE__LINE_TYPE :
                return getLineType ();
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.LINE_TYPE_STYLE__UUID :
                setUUID ((byte []) newValue);
                return;
            case NotationPackage.LINE_TYPE_STYLE__LINE_TYPE :
                setLineType ((LineType) newValue);
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.LINE_TYPE_STYLE__UUID :
                setUUID (UUID_EDEFAULT);
                return;
            case NotationPackage.LINE_TYPE_STYLE__LINE_TYPE :
                setLineType (LINE_TYPE_EDEFAULT);
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.LINE_TYPE_STYLE__UUID :
                return UUID_EDEFAULT == null ? uUID != null : ! UUID_EDEFAULT.equals (uUID);
            case NotationPackage.LINE_TYPE_STYLE__LINE_TYPE :
                return lineType != LINE_TYPE_EDEFAULT;
        }
        return eDynamicIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (lineType: ");
        result.append (lineType);
        result.append (')');
        return result.toString ();
    }

}

