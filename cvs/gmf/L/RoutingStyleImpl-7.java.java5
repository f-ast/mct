package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.runtime.notation.JumpLinkStatus;

import org.eclipse.gmf.runtime.notation.JumpLinkType;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.Routing;

import org.eclipse.gmf.runtime.notation.RoutingStyle;

import org.eclipse.gmf.runtime.notation.Smoothness;

public class RoutingStyleImpl extends NotationObjectImpl implements RoutingStyle {
    protected static final Routing ROUTING_EDEFAULT = Routing.MANUAL_LITERAL;
    protected Routing routing = ROUTING_EDEFAULT;
    protected static final Smoothness SMOOTHNESS_EDEFAULT = Smoothness.NONE_LITERAL;
    protected Smoothness smoothness = SMOOTHNESS_EDEFAULT;
    protected static final boolean AVOID_OBSTRUCTIONS_EDEFAULT = false;
    protected static final int AVOID_OBSTRUCTIONS_EFLAG = 1 << 8;
    protected static final boolean CLOSEST_DISTANCE_EDEFAULT = false;
    protected static final int CLOSEST_DISTANCE_EFLAG = 1 << 9;
    protected static final JumpLinkStatus JUMP_LINK_STATUS_EDEFAULT = JumpLinkStatus.NONE_LITERAL;
    protected JumpLinkStatus jumpLinkStatus = JUMP_LINK_STATUS_EDEFAULT;
    protected static final JumpLinkType JUMP_LINK_TYPE_EDEFAULT = JumpLinkType.SEMICIRCLE_LITERAL;
    protected JumpLinkType jumpLinkType = JUMP_LINK_TYPE_EDEFAULT;
    protected static final boolean JUMP_LINKS_REVERSE_EDEFAULT = false;
    protected static final int JUMP_LINKS_REVERSE_EFLAG = 1 << 10;

    protected RoutingStyleImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.ROUTING_STYLE;
    }

    public Routing getRouting () {
        return routing;
    }

    public void setRouting (Routing newRouting) {
        Routing oldRouting = routing;
        routing = newRouting == null ? ROUTING_EDEFAULT : newRouting;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.ROUTING_STYLE__ROUTING, oldRouting, routing));

    }

    public Smoothness getSmoothness () {
        return smoothness;
    }

    public void setSmoothness (Smoothness newSmoothness) {
        Smoothness oldSmoothness = smoothness;
        smoothness = newSmoothness == null ? SMOOTHNESS_EDEFAULT : newSmoothness;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.ROUTING_STYLE__SMOOTHNESS, oldSmoothness, smoothness));

    }

    public boolean isAvoidObstructions () {
        return (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
    }

    public void setAvoidObstructions (boolean newAvoidObstructions) {
        boolean oldAvoidObstructions = (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
        if (newAvoidObstructions) eFlags |= AVOID_OBSTRUCTIONS_EFLAG;
        else eFlags &= ~ AVOID_OBSTRUCTIONS_EFLAG;

        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS, oldAvoidObstructions, newAvoidObstructions));

    }

    public boolean isClosestDistance () {
        return (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
    }

    public void setClosestDistance (boolean newClosestDistance) {
        boolean oldClosestDistance = (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
        if (newClosestDistance) eFlags |= CLOSEST_DISTANCE_EFLAG;
        else eFlags &= ~ CLOSEST_DISTANCE_EFLAG;

        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE, oldClosestDistance, newClosestDistance));

    }

    public JumpLinkStatus getJumpLinkStatus () {
        return jumpLinkStatus;
    }

    public void setJumpLinkStatus (JumpLinkStatus newJumpLinkStatus) {
        JumpLinkStatus oldJumpLinkStatus = jumpLinkStatus;
        jumpLinkStatus = newJumpLinkStatus == null ? JUMP_LINK_STATUS_EDEFAULT : newJumpLinkStatus;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS, oldJumpLinkStatus, jumpLinkStatus));

    }

    public JumpLinkType getJumpLinkType () {
        return jumpLinkType;
    }

    public void setJumpLinkType (JumpLinkType newJumpLinkType) {
        JumpLinkType oldJumpLinkType = jumpLinkType;
        jumpLinkType = newJumpLinkType == null ? JUMP_LINK_TYPE_EDEFAULT : newJumpLinkType;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE, oldJumpLinkType, jumpLinkType));

    }

    public boolean isJumpLinksReverse () {
        return (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
    }

    public void setJumpLinksReverse (boolean newJumpLinksReverse) {
        boolean oldJumpLinksReverse = (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
        if (newJumpLinksReverse) eFlags |= JUMP_LINKS_REVERSE_EFLAG;
        else eFlags &= ~ JUMP_LINKS_REVERSE_EFLAG;

        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE, oldJumpLinksReverse, newJumpLinksReverse));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.ROUTING_STYLE__UUID :
                return getUUID ();
            case NotationPackage.ROUTING_STYLE__ROUTING :
                return getRouting ();
            case NotationPackage.ROUTING_STYLE__SMOOTHNESS :
                return getSmoothness ();
            case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS :
                return isAvoidObstructions () ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE :
                return isClosestDistance () ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS :
                return getJumpLinkStatus ();
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE :
                return getJumpLinkType ();
            case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE :
                return isJumpLinksReverse () ? Boolean.TRUE : Boolean.FALSE;
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.ROUTING_STYLE__UUID :
                setUUID ((byte []) newValue);
                return;
            case NotationPackage.ROUTING_STYLE__ROUTING :
                setRouting ((Routing) newValue);
                return;
            case NotationPackage.ROUTING_STYLE__SMOOTHNESS :
                setSmoothness ((Smoothness) newValue);
                return;
            case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS :
                setAvoidObstructions (((Boolean) newValue).booleanValue ());
                return;
            case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE :
                setClosestDistance (((Boolean) newValue).booleanValue ());
                return;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS :
                setJumpLinkStatus ((JumpLinkStatus) newValue);
                return;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE :
                setJumpLinkType ((JumpLinkType) newValue);
                return;
            case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE :
                setJumpLinksReverse (((Boolean) newValue).booleanValue ());
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.ROUTING_STYLE__UUID :
                setUUID (UUID_EDEFAULT);
                return;
            case NotationPackage.ROUTING_STYLE__ROUTING :
                setRouting (ROUTING_EDEFAULT);
                return;
            case NotationPackage.ROUTING_STYLE__SMOOTHNESS :
                setSmoothness (SMOOTHNESS_EDEFAULT);
                return;
            case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS :
                setAvoidObstructions (AVOID_OBSTRUCTIONS_EDEFAULT);
                return;
            case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE :
                setClosestDistance (CLOSEST_DISTANCE_EDEFAULT);
                return;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS :
                setJumpLinkStatus (JUMP_LINK_STATUS_EDEFAULT);
                return;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE :
                setJumpLinkType (JUMP_LINK_TYPE_EDEFAULT);
                return;
            case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE :
                setJumpLinksReverse (JUMP_LINKS_REVERSE_EDEFAULT);
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.ROUTING_STYLE__UUID :
                return UUID_EDEFAULT == null ? uUID != null : ! UUID_EDEFAULT.equals (uUID);
            case NotationPackage.ROUTING_STYLE__ROUTING :
                return routing != ROUTING_EDEFAULT;
            case NotationPackage.ROUTING_STYLE__SMOOTHNESS :
                return smoothness != SMOOTHNESS_EDEFAULT;
            case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS :
                return ((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0) != AVOID_OBSTRUCTIONS_EDEFAULT;
            case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE :
                return ((eFlags & CLOSEST_DISTANCE_EFLAG) != 0) != CLOSEST_DISTANCE_EDEFAULT;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS :
                return jumpLinkStatus != JUMP_LINK_STATUS_EDEFAULT;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE :
                return jumpLinkType != JUMP_LINK_TYPE_EDEFAULT;
            case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE :
                return ((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0) != JUMP_LINKS_REVERSE_EDEFAULT;
        }
        return eDynamicIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (routing: ");
        result.append (routing);
        result.append (", smoothness: ");
        result.append (smoothness);
        result.append (", avoidObstructions: ");
        result.append ((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0);
        result.append (", closestDistance: ");
        result.append ((eFlags & CLOSEST_DISTANCE_EFLAG) != 0);
        result.append (", jumpLinkStatus: ");
        result.append (jumpLinkStatus);
        result.append (", jumpLinkType: ");
        result.append (jumpLinkType);
        result.append (", jumpLinksReverse: ");
        result.append ((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0);
        result.append (')');
        return result.toString ();
    }

}

