package org.eclipse.gmf.runtime.notation.impl;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Collections;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.eclipse.gmf.runtime.notation.Filtering;

import org.eclipse.gmf.runtime.notation.FilteringStyle;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class FilteringStyleImpl extends EObjectImpl implements FilteringStyle {
    protected static final Filtering FILTERING_EDEFAULT = Filtering.NONE_LITERAL;
    protected Filtering filtering = FILTERING_EDEFAULT;
    protected static final List FILTERING_KEYS_EDEFAULT = Collections.EMPTY_LIST;
    protected List filteringKeys = FILTERING_KEYS_EDEFAULT;
    protected EList filteredObjects = null;

    protected FilteringStyleImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.eINSTANCE.getFilteringStyle ();
    }

    public Filtering getFiltering () {
        return filtering;
    }

    public void setFiltering (Filtering newFiltering) {
        Filtering oldFiltering = filtering;
        filtering = newFiltering == null ? FILTERING_EDEFAULT : newFiltering;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.FILTERING_STYLE__FILTERING, oldFiltering, filtering));

    }

    public List getFilteringKeys () {
        return Collections.unmodifiableList (filteringKeys);
    }

    public void setFilteringKeys (List newFilteringKeys) {
        List oldFilteringKeys = filteringKeys;
        if (newFilteringKeys == null) throw new NullPointerException ("the 'newFilteringKeys' parameter is null");
        else if (newFilteringKeys.isEmpty ()) filteringKeys = FILTERING_KEYS_EDEFAULT;
        else {
            List tempList = new ArrayList (newFilteringKeys.size ());
            for (Iterator i = newFilteringKeys.iterator ();
            i.hasNext ();) {
                Object key = i.next ();
                if (! (key instanceof String)) throw new IllegalArgumentException ("One or more objects in the list is not of type java.lang.String");

                tempList.add (key);
            }
            filteringKeys = tempList;
        }

        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.FILTERING_STYLE__FILTERING_KEYS, oldFilteringKeys, filteringKeys));

    }

    public EList getFilteredObjects () {
        if (filteredObjects == null) {
            filteredObjects = new EObjectResolvingEList (EObject.class, this, NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS);
        }
        return filteredObjects;
    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.FILTERING_STYLE__FILTERING :
                return getFiltering ();
            case NotationPackage.FILTERING_STYLE__FILTERING_KEYS :
                return getFilteringKeys ();
            case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS :
                return getFilteredObjects ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.FILTERING_STYLE__FILTERING :
                setFiltering ((Filtering) newValue);
                return;
            case NotationPackage.FILTERING_STYLE__FILTERING_KEYS :
                setFilteringKeys ((List) newValue);
                return;
            case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS :
                getFilteredObjects ().clear ();
                getFilteredObjects ().addAll ((Collection) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.FILTERING_STYLE__FILTERING :
                setFiltering (FILTERING_EDEFAULT);
                return;
            case NotationPackage.FILTERING_STYLE__FILTERING_KEYS :
                setFilteringKeys (FILTERING_KEYS_EDEFAULT);
                return;
            case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS :
                getFilteredObjects ().clear ();
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case NotationPackage.FILTERING_STYLE__FILTERING :
                return filtering != FILTERING_EDEFAULT;
            case NotationPackage.FILTERING_STYLE__FILTERING_KEYS :
                return FILTERING_KEYS_EDEFAULT == null ? filteringKeys != null : ! FILTERING_KEYS_EDEFAULT.equals (filteringKeys);
            case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS :
                return filteredObjects != null && ! filteredObjects.isEmpty ();
        }
        return eDynamicIsSet (eFeature);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (filtering: ");
        result.append (filtering);
        result.append (", filteringKeys: ");
        result.append (filteringKeys);
        result.append (')');
        return result.toString ();
    }

}

