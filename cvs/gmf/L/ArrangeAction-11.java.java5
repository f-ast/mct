package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.ArrayList;

import java.util.Collections;

import java.util.HashSet;

import java.util.Iterator;

import java.util.List;

import java.util.ListIterator;

import java.util.Set;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.draw2d.Animation;

import org.eclipse.draw2d.XYLayout;

import org.eclipse.gef.ConnectionEditPart;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.commands.UnexecutableCommand;

import org.eclipse.gef.tools.ToolUtilities;

import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;

import org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramUIActionsMessages;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramUIActionsPluginImages;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.IEditableEditPart;

import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;

import org.eclipse.gmf.runtime.diagram.ui.requests.ArrangeRequest;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.ui.IWorkbenchPage;

public class ArrangeAction extends DiagramAction {
    private boolean selectionOnly;

    protected ArrangeAction (IWorkbenchPage workbenchPage, boolean selectionOnly) {
        super (workbenchPage);
        this.selectionOnly = selectionOnly;
    }

    protected Request createTargetRequest () {
        return new ArrangeRequest (getId ());
    }

    protected void updateTargetRequest () {
        ArrangeRequest request = (ArrangeRequest) getTargetRequest ();
        request.setPartsToArrange (getOperationSet ());
    }

    private boolean isArrangeAll () {
        return ! selectionOnly;
    }

    protected Command getCommand () {
        if (isArrangeAll ()) {
            CompoundCommand arrangeCC = new CompoundCommand (getLabel ());
            List elements = getOperationSet ();
            for (Iterator iter = elements.iterator ();
            iter.hasNext ();) {
                EditPart element = (EditPart) iter.next ();
                Command cmd = element.getCommand (getTargetRequest ());
                if (cmd != null) arrangeCC.add (cmd);

            }
            if (! arrangeCC.isEmpty ()) return arrangeCC;
            else return UnexecutableCommand.INSTANCE;

        } else if (getOperationSet ().size () >= 2) {
            EditPart parent = getSelectionParent (getOperationSet ());
            if (parent != null) return parent.getCommand (getTargetRequest ());

        }

        return UnexecutableCommand.INSTANCE;
    }

    protected boolean calculateEnabled () {
        List operationSet = getOperationSet ();
        if (isArrangeAll () && ! operationSet.isEmpty ()) {
            return true;
        }
        EditPart parentEP = getSelectionParent (operationSet);
        if ((parentEP instanceof IEditableEditPart) && ! ((IEditableEditPart) parentEP).isEditModeEnabled ()) {
            return false;
        }
        for (Iterator i = operationSet.iterator ();
        i.hasNext ();) {
            Object next = i.next ();
            if ((next instanceof IEditableEditPart) && ! ((IEditableEditPart) next).isEditModeEnabled ()) {
                return false;
            }
        }
        if (operationSet.size () >= 2) {
            if (parentEP instanceof GraphicalEditPart) {
                GraphicalEditPart parent = (GraphicalEditPart) parentEP;
                if ((parent != null) && (parent.getContentPane ().getLayoutManager () instanceof XYLayout)) return true;

            }
        }
        return false;
    }

    protected List createOperationSet () {
        List selection = getSelectedObjects ();
        if (isArrangeAll ()) {
            if (! selection.isEmpty ()) {
                return getElementsToArrange (selection);
            }
            if (getDiagramEditPart () != null) return createOperationSet (getDiagramEditPart ().getChildren ());

            return Collections.EMPTY_LIST;
        }
        if (selection.isEmpty () || ! (selection.get (0) instanceof IGraphicalEditPart)) return Collections.EMPTY_LIST;

        selection = ToolUtilities.getSelectionWithoutDependants (selection);
        return createOperationSet (selection);
    }

    private EditPart getSelectionParent (List editparts) {
        ListIterator li = editparts.listIterator ();
        while (li.hasNext ()) {
            Object obj = li.next ();
            if (! (obj instanceof ConnectionEditPart) && obj instanceof EditPart) {
                return ((EditPart) obj).getParent ();
            }
        }
        return null;
    }

    private List createOperationSet (List editparts) {
        if (editparts == null || editparts.isEmpty ()) return Collections.EMPTY_LIST;

        EditPart parent = getSelectionParent (editparts);
        if (parent == null) return Collections.EMPTY_LIST;

        for (int i = 1;
        i < editparts.size (); i ++) {
            EditPart part = (EditPart) editparts.get (i);
            if (part instanceof ConnectionEditPart) {
                continue;
            }
            if (part.getParent () != parent) return Collections.EMPTY_LIST;

        }
        return editparts;
    }

    protected boolean isSelectionListener () {
        return true;
    }

    public static ArrangeAction createArrangeAllAction (IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction (workbenchPage, false);
        action.setId (ActionIds.ACTION_ARRANGE_ALL);
        action.setText (DiagramUIActionsMessages.ArrangeAction_ArrangeAll_ActionLabelText);
        action.setToolTipText (DiagramUIActionsMessages.ArrangeAction_ArrangeAll_ActionToolTipText);
        action.setImageDescriptor (DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
        action.setDisabledImageDescriptor (DiagramUIActionsPluginImages.DESC_ARRANGE_ALL_DISABLED);
        action.setHoverImageDescriptor (DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
        return action;
    }

    public static ArrangeAction createToolbarArrangeAllAction (IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction (workbenchPage, false);
        action.setId (ActionIds.ACTION_TOOLBAR_ARRANGE_ALL);
        action.setText (DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeAll_ActionLabelText);
        action.setToolTipText (DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeAll_ActionToolTipText);
        action.setImageDescriptor (DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
        action.setDisabledImageDescriptor (DiagramUIActionsPluginImages.DESC_ARRANGE_ALL_DISABLED);
        action.setHoverImageDescriptor (DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
        return action;
    }

    public static ArrangeAction createArrangeSelectionAction (IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction (workbenchPage, true);
        action.setId (ActionIds.ACTION_ARRANGE_SELECTION);
        action.setText (DiagramUIActionsMessages.ArrangeAction_ArrangeSelection_ActionLabelText);
        action.setToolTipText (DiagramUIActionsMessages.ArrangeAction_ArrangeSelection_ActionToolTipText);
        action.setImageDescriptor (DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
        action.setDisabledImageDescriptor (DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED_DISABLED);
        action.setHoverImageDescriptor (DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
        return action;
    }

    public static ArrangeAction createToolbarArrangeSelectionAction (IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction (workbenchPage, true);
        action.setId (ActionIds.ACTION_TOOLBAR_ARRANGE_SELECTION);
        action.setText (DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeSelection_ActionLabelText);
        action.setToolTipText (DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeSelection_ActionToolTipText);
        action.setImageDescriptor (DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
        action.setDisabledImageDescriptor (DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED_DISABLED);
        action.setHoverImageDescriptor (DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
        return action;
    }

    protected void doRun (IProgressMonitor progressMonitor) {
        IPreferenceStore preferenceStore = (IPreferenceStore) getDiagramEditPart ().getDiagramPreferencesHint ().getPreferenceStore ();
        boolean animatedLayout = preferenceStore.getBoolean (IPreferenceConstants.PREF_ENABLE_ANIMATED_LAYOUT);
        if (animatedLayout) Animation.markBegin ();

        super.doRun (progressMonitor);
        if (animatedLayout) {
            int durationInc = 800;
            int factor = 10;
            int size = 0;
            List operationSet = getOperationSet ();
            if (isArrangeAll ()) {
                for (Iterator iter = operationSet.iterator ();
                iter.hasNext ();) {
                    IGraphicalEditPart element = (IGraphicalEditPart) iter.next ();
                    size += element.getFigure ().getChildren ().size ();
                }
            } else if (operationSet != null && ! operationSet.isEmpty ()) {
                IGraphicalEditPart container = (IGraphicalEditPart) getSelectionParent (operationSet);
                size += container.getFigure ().getChildren ().size ();
            }

            int totalDuration = Math.min (durationInc * factor / 2, Math.max (durationInc, (size / factor) * durationInc));
            Animation.run (totalDuration);
        }
    }

    private List getElementsToArrange (List selection) {
        Set parentsSet = new HashSet ();
        for (Iterator iter = selection.iterator ();
        iter.hasNext ();) {
            Object element = iter.next ();
            if (element instanceof ShapeCompartmentEditPart || element instanceof DiagramEditPart) {
                parentsSet.add (element);
            } else if (element instanceof EditPart) {
                EditPart gEditPart = (EditPart) element;
                EditPart parentEditPart = gEditPart.getParent ();
                if (parentEditPart instanceof ShapeCompartmentEditPart || parentEditPart instanceof DiagramEditPart) {
                    if (! parentsSet.contains (parentEditPart)) parentsSet.add (parentEditPart);

                }
            }

        }
        if (parentsSet.isEmpty ()) return Collections.EMPTY_LIST;

        List elements = new ArrayList ();
        elements.addAll (parentsSet);
        return elements;
    }

}

