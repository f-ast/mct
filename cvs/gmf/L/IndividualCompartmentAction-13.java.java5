package org.eclipse.gmf.runtime.diagram.ui.actions;

import org.eclipse.core.runtime.Assert;

import org.eclipse.emf.ecore.ENamedElement;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.transaction.RunnableWithResult;

import org.eclipse.gef.Request;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.DiagramActionsDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.DiagramActionsPlugin;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.DiagramActionsStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramUIActionsMessages;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.requests.ChangeChildPropertyValueRequest;

import org.eclipse.gmf.runtime.emf.core.util.PackageUtil;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.ui.IWorkbenchPage;

public abstract class IndividualCompartmentAction extends BooleanPropertyAction {
    private final String compartmentSemanticHint;

    public IndividualCompartmentAction (IWorkbenchPage workbenchPage, String compartmentSemanticHint) {
        super (workbenchPage, PackageUtil.getID (NotationPackage.eINSTANCE.getView_Visible ()), DiagramUIActionsMessages.ConstrainedFlowLayoutEditPolicy_changeVisibilityCommand_label);
        Assert.isNotNull (compartmentSemanticHint);
        this.compartmentSemanticHint = compartmentSemanticHint;
    }

    protected Request createTargetRequest () {
        return new ChangeChildPropertyValueRequest (getPropertyName (), getPropertyId (), getCompartmentSemanticHint ());
    }

    protected String getCompartmentSemanticHint () {
        return compartmentSemanticHint;
    }

    protected Object getPropertyValue (final IGraphicalEditPart editPart, final String thePropertyId) {
        try {
            return editPart.getEditingDomain ().runExclusive (new RunnableWithResult.Impl () {

                public void run () {
                    ENamedElement element = PackageUtil.getElement (thePropertyId);
                    if (element instanceof EStructuralFeature) {
                        View view = editPart.getNotationView ();
                        if (view != null) {
                            View childView = ViewUtil.getChildBySemanticHint (view, getCompartmentSemanticHint ());
                            if (childView != null) {
                                setResult (ViewUtil.getStructuralFeatureValue (childView, (EStructuralFeature) element));
                            }
                        }
                    }
                }

            }

            );
        } catch (InterruptedException e) {
            Trace.catching (DiagramActionsPlugin.getInstance (), DiagramActionsDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getPropertyValue", e);
            Log.error (DiagramActionsPlugin.getInstance (), DiagramActionsStatusCodes.IGNORED_EXCEPTION_WARNING, "getPropertyValue", e);
        }
        return null;
    }

    @Override
    protected boolean digIntoGroups () {
        return true;
    }

}

