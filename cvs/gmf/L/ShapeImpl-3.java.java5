package org.eclipse.gmf.gmfgraph.impl;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Iterator;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.BasicEList;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.gmfgraph.ColorStyle;

import org.eclipse.gmf.gmfgraph.Figure;

import org.eclipse.gmf.gmfgraph.FigureMarker;

import org.eclipse.gmf.gmfgraph.FigureRef;

import org.eclipse.gmf.gmfgraph.FontStyle;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.Identity;

import org.eclipse.gmf.gmfgraph.LineKind;

import org.eclipse.gmf.gmfgraph.Point;

import org.eclipse.gmf.gmfgraph.Shape;

import org.eclipse.gmf.gmfgraph.SizeStyle;

public abstract class ShapeImpl extends EObjectImpl implements Shape {
    protected static final String NAME_EDEFAULT = null;
    protected String name = NAME_EDEFAULT;
    protected EList children = null;
    protected ColorStyle colorStyle = null;
    protected SizeStyle sizeStyle = null;
    protected FontStyle fontStyle = null;
    protected Point location = null;
    protected Point size = null;
    protected static final String LAYOUT_MANAGER_EDEFAULT = null;
    protected String layoutManager = LAYOUT_MANAGER_EDEFAULT;
    protected static final boolean OUTLINE_EDEFAULT = false;
    protected boolean outline = OUTLINE_EDEFAULT;
    protected static final boolean FILL_EDEFAULT = false;
    protected boolean fill = FILL_EDEFAULT;
    protected static final int LINE_WIDTH_EDEFAULT = 1;
    protected int lineWidth = LINE_WIDTH_EDEFAULT;
    protected static final LineKind LINE_KIND_EDEFAULT = LineKind.LINE_SOLID_LITERAL;
    protected LineKind lineKind = LINE_KIND_EDEFAULT;
    protected static final boolean XOR_FILL_EDEFAULT = false;
    protected boolean xorFill = XOR_FILL_EDEFAULT;
    protected static final boolean XOR_OUTLINE_EDEFAULT = false;
    protected boolean xorOutline = XOR_OUTLINE_EDEFAULT;

    protected ShapeImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getShape ();
    }

    public String getName () {
        return name;
    }

    public void setName (String newName) {
        String oldName = name;
        name = newName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__NAME, oldName, name));

    }

    public EList getChildren () {
        if (children == null) {
            children = new EObjectContainmentEList (FigureMarker.class, this, GMFGraphPackage.SHAPE__CHILDREN);
        }
        return children;
    }

    public Figure getParent () {
        if (eContainerFeatureID != GMFGraphPackage.SHAPE__PARENT) return null;

        return (Figure) eContainer;
    }

    public ColorStyle getColorStyle () {
        return colorStyle;
    }

    public NotificationChain basicSetColorStyle (ColorStyle newColorStyle, NotificationChain msgs) {
        ColorStyle oldColorStyle = colorStyle;
        colorStyle = newColorStyle;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__COLOR_STYLE, oldColorStyle, newColorStyle);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setColorStyle (ColorStyle newColorStyle) {
        if (newColorStyle != colorStyle) {
            NotificationChain msgs = null;
            if (colorStyle != null) msgs = ((InternalEObject) colorStyle).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.SHAPE__COLOR_STYLE, null, msgs);

            if (newColorStyle != null) msgs = ((InternalEObject) newColorStyle).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.SHAPE__COLOR_STYLE, null, msgs);

            msgs = basicSetColorStyle (newColorStyle, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__COLOR_STYLE, newColorStyle, newColorStyle));

    }

    public SizeStyle getSizeStyle () {
        return sizeStyle;
    }

    public NotificationChain basicSetSizeStyle (SizeStyle newSizeStyle, NotificationChain msgs) {
        SizeStyle oldSizeStyle = sizeStyle;
        sizeStyle = newSizeStyle;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__SIZE_STYLE, oldSizeStyle, newSizeStyle);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setSizeStyle (SizeStyle newSizeStyle) {
        if (newSizeStyle != sizeStyle) {
            NotificationChain msgs = null;
            if (sizeStyle != null) msgs = ((InternalEObject) sizeStyle).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.SHAPE__SIZE_STYLE, null, msgs);

            if (newSizeStyle != null) msgs = ((InternalEObject) newSizeStyle).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.SHAPE__SIZE_STYLE, null, msgs);

            msgs = basicSetSizeStyle (newSizeStyle, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__SIZE_STYLE, newSizeStyle, newSizeStyle));

    }

    public FontStyle getFontStyle () {
        return fontStyle;
    }

    public NotificationChain basicSetFontStyle (FontStyle newFontStyle, NotificationChain msgs) {
        FontStyle oldFontStyle = fontStyle;
        fontStyle = newFontStyle;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__FONT_STYLE, oldFontStyle, newFontStyle);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setFontStyle (FontStyle newFontStyle) {
        if (newFontStyle != fontStyle) {
            NotificationChain msgs = null;
            if (fontStyle != null) msgs = ((InternalEObject) fontStyle).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.SHAPE__FONT_STYLE, null, msgs);

            if (newFontStyle != null) msgs = ((InternalEObject) newFontStyle).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.SHAPE__FONT_STYLE, null, msgs);

            msgs = basicSetFontStyle (newFontStyle, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__FONT_STYLE, newFontStyle, newFontStyle));

    }

    public Point getLocation () {
        return location;
    }

    public NotificationChain basicSetLocation (Point newLocation, NotificationChain msgs) {
        Point oldLocation = location;
        location = newLocation;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__LOCATION, oldLocation, newLocation);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setLocation (Point newLocation) {
        if (newLocation != location) {
            NotificationChain msgs = null;
            if (location != null) msgs = ((InternalEObject) location).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.SHAPE__LOCATION, null, msgs);

            if (newLocation != null) msgs = ((InternalEObject) newLocation).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.SHAPE__LOCATION, null, msgs);

            msgs = basicSetLocation (newLocation, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__LOCATION, newLocation, newLocation));

    }

    public Point getSize () {
        return size;
    }

    public NotificationChain basicSetSize (Point newSize, NotificationChain msgs) {
        Point oldSize = size;
        size = newSize;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__SIZE, oldSize, newSize);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setSize (Point newSize) {
        if (newSize != size) {
            NotificationChain msgs = null;
            if (size != null) msgs = ((InternalEObject) size).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.SHAPE__SIZE, null, msgs);

            if (newSize != null) msgs = ((InternalEObject) newSize).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.SHAPE__SIZE, null, msgs);

            msgs = basicSetSize (newSize, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__SIZE, newSize, newSize));

    }

    public String getLayoutManager () {
        return layoutManager;
    }

    public void setLayoutManager (String newLayoutManager) {
        String oldLayoutManager = layoutManager;
        layoutManager = newLayoutManager;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__LAYOUT_MANAGER, oldLayoutManager, layoutManager));

    }

    public EList getResolvedChildren () {
        ArrayList r = new ArrayList (getChildren ().size ());
        for (Iterator it = getChildren ().iterator ();
        it.hasNext ();) {
            FigureMarker next = (FigureMarker) it.next ();
            if (next instanceof FigureRef) {
                r.add (((FigureRef) next).getFigure ());
            } else {
                assert next instanceof Figure;
                r.add (next);
            }
        }
        return new BasicEList.UnmodifiableEList (r.size (), r.toArray ());
    }

    public boolean isOutline () {
        return outline;
    }

    public void setOutline (boolean newOutline) {
        boolean oldOutline = outline;
        outline = newOutline;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__OUTLINE, oldOutline, outline));

    }

    public boolean isFill () {
        return fill;
    }

    public void setFill (boolean newFill) {
        boolean oldFill = fill;
        fill = newFill;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__FILL, oldFill, fill));

    }

    public int getLineWidth () {
        return lineWidth;
    }

    public void setLineWidth (int newLineWidth) {
        int oldLineWidth = lineWidth;
        lineWidth = newLineWidth;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__LINE_WIDTH, oldLineWidth, lineWidth));

    }

    public LineKind getLineKind () {
        return lineKind;
    }

    public void setLineKind (LineKind newLineKind) {
        LineKind oldLineKind = lineKind;
        lineKind = newLineKind == null ? LINE_KIND_EDEFAULT : newLineKind;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__LINE_KIND, oldLineKind, lineKind));

    }

    public boolean isXorFill () {
        return xorFill;
    }

    public void setXorFill (boolean newXorFill) {
        boolean oldXorFill = xorFill;
        xorFill = newXorFill;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__XOR_FILL, oldXorFill, xorFill));

    }

    public boolean isXorOutline () {
        return xorOutline;
    }

    public void setXorOutline (boolean newXorOutline) {
        boolean oldXorOutline = xorOutline;
        xorOutline = newXorOutline;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.SHAPE__XOR_OUTLINE, oldXorOutline, xorOutline));

    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFGraphPackage.SHAPE__PARENT :
                    if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);

                    return eBasicSetContainer (otherEnd, GMFGraphPackage.SHAPE__PARENT, msgs);
                default :
                    return eDynamicInverseAdd (otherEnd, featureID, baseClass, msgs);
            }
        }
        if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);

        return eBasicSetContainer (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFGraphPackage.SHAPE__CHILDREN :
                    return ((InternalEList) getChildren ()).basicRemove (otherEnd, msgs);
                case GMFGraphPackage.SHAPE__PARENT :
                    return eBasicSetContainer (null, GMFGraphPackage.SHAPE__PARENT, msgs);
                case GMFGraphPackage.SHAPE__COLOR_STYLE :
                    return basicSetColorStyle (null, msgs);
                case GMFGraphPackage.SHAPE__SIZE_STYLE :
                    return basicSetSizeStyle (null, msgs);
                case GMFGraphPackage.SHAPE__FONT_STYLE :
                    return basicSetFontStyle (null, msgs);
                case GMFGraphPackage.SHAPE__LOCATION :
                    return basicSetLocation (null, msgs);
                case GMFGraphPackage.SHAPE__SIZE :
                    return basicSetSize (null, msgs);
                default :
                    return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
            }
        }
        return eBasicSetContainer (null, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainer (NotificationChain msgs) {
        if (eContainerFeatureID >= 0) {
            switch (eContainerFeatureID) {
                case GMFGraphPackage.SHAPE__PARENT :
                    return eContainer.eInverseRemove (this, GMFGraphPackage.FIGURE__CHILDREN, Figure.class, msgs);
                default :
                    return eDynamicBasicRemoveFromContainer (msgs);
            }
        }
        return eContainer.eInverseRemove (this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGraphPackage.SHAPE__NAME :
                return getName ();
            case GMFGraphPackage.SHAPE__CHILDREN :
                return getChildren ();
            case GMFGraphPackage.SHAPE__PARENT :
                return getParent ();
            case GMFGraphPackage.SHAPE__COLOR_STYLE :
                return getColorStyle ();
            case GMFGraphPackage.SHAPE__SIZE_STYLE :
                return getSizeStyle ();
            case GMFGraphPackage.SHAPE__FONT_STYLE :
                return getFontStyle ();
            case GMFGraphPackage.SHAPE__LOCATION :
                return getLocation ();
            case GMFGraphPackage.SHAPE__SIZE :
                return getSize ();
            case GMFGraphPackage.SHAPE__LAYOUT_MANAGER :
                return getLayoutManager ();
            case GMFGraphPackage.SHAPE__RESOLVED_CHILDREN :
                return getResolvedChildren ();
            case GMFGraphPackage.SHAPE__OUTLINE :
                return isOutline () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGraphPackage.SHAPE__FILL :
                return isFill () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGraphPackage.SHAPE__LINE_WIDTH :
                return new Integer (getLineWidth ());
            case GMFGraphPackage.SHAPE__LINE_KIND :
                return getLineKind ();
            case GMFGraphPackage.SHAPE__XOR_FILL :
                return isXorFill () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGraphPackage.SHAPE__XOR_OUTLINE :
                return isXorOutline () ? Boolean.TRUE : Boolean.FALSE;
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGraphPackage.SHAPE__NAME :
                setName ((String) newValue);
                return;
            case GMFGraphPackage.SHAPE__CHILDREN :
                getChildren ().clear ();
                getChildren ().addAll ((Collection) newValue);
                return;
            case GMFGraphPackage.SHAPE__COLOR_STYLE :
                setColorStyle ((ColorStyle) newValue);
                return;
            case GMFGraphPackage.SHAPE__SIZE_STYLE :
                setSizeStyle ((SizeStyle) newValue);
                return;
            case GMFGraphPackage.SHAPE__FONT_STYLE :
                setFontStyle ((FontStyle) newValue);
                return;
            case GMFGraphPackage.SHAPE__LOCATION :
                setLocation ((Point) newValue);
                return;
            case GMFGraphPackage.SHAPE__SIZE :
                setSize ((Point) newValue);
                return;
            case GMFGraphPackage.SHAPE__LAYOUT_MANAGER :
                setLayoutManager ((String) newValue);
                return;
            case GMFGraphPackage.SHAPE__OUTLINE :
                setOutline (((Boolean) newValue).booleanValue ());
                return;
            case GMFGraphPackage.SHAPE__FILL :
                setFill (((Boolean) newValue).booleanValue ());
                return;
            case GMFGraphPackage.SHAPE__LINE_WIDTH :
                setLineWidth (((Integer) newValue).intValue ());
                return;
            case GMFGraphPackage.SHAPE__LINE_KIND :
                setLineKind ((LineKind) newValue);
                return;
            case GMFGraphPackage.SHAPE__XOR_FILL :
                setXorFill (((Boolean) newValue).booleanValue ());
                return;
            case GMFGraphPackage.SHAPE__XOR_OUTLINE :
                setXorOutline (((Boolean) newValue).booleanValue ());
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGraphPackage.SHAPE__NAME :
                setName (NAME_EDEFAULT);
                return;
            case GMFGraphPackage.SHAPE__CHILDREN :
                getChildren ().clear ();
                return;
            case GMFGraphPackage.SHAPE__COLOR_STYLE :
                setColorStyle ((ColorStyle) null);
                return;
            case GMFGraphPackage.SHAPE__SIZE_STYLE :
                setSizeStyle ((SizeStyle) null);
                return;
            case GMFGraphPackage.SHAPE__FONT_STYLE :
                setFontStyle ((FontStyle) null);
                return;
            case GMFGraphPackage.SHAPE__LOCATION :
                setLocation ((Point) null);
                return;
            case GMFGraphPackage.SHAPE__SIZE :
                setSize ((Point) null);
                return;
            case GMFGraphPackage.SHAPE__LAYOUT_MANAGER :
                setLayoutManager (LAYOUT_MANAGER_EDEFAULT);
                return;
            case GMFGraphPackage.SHAPE__OUTLINE :
                setOutline (OUTLINE_EDEFAULT);
                return;
            case GMFGraphPackage.SHAPE__FILL :
                setFill (FILL_EDEFAULT);
                return;
            case GMFGraphPackage.SHAPE__LINE_WIDTH :
                setLineWidth (LINE_WIDTH_EDEFAULT);
                return;
            case GMFGraphPackage.SHAPE__LINE_KIND :
                setLineKind (LINE_KIND_EDEFAULT);
                return;
            case GMFGraphPackage.SHAPE__XOR_FILL :
                setXorFill (XOR_FILL_EDEFAULT);
                return;
            case GMFGraphPackage.SHAPE__XOR_OUTLINE :
                setXorOutline (XOR_OUTLINE_EDEFAULT);
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGraphPackage.SHAPE__NAME :
                return NAME_EDEFAULT == null ? name != null : ! NAME_EDEFAULT.equals (name);
            case GMFGraphPackage.SHAPE__CHILDREN :
                return children != null && ! children.isEmpty ();
            case GMFGraphPackage.SHAPE__PARENT :
                return getParent () != null;
            case GMFGraphPackage.SHAPE__COLOR_STYLE :
                return colorStyle != null;
            case GMFGraphPackage.SHAPE__SIZE_STYLE :
                return sizeStyle != null;
            case GMFGraphPackage.SHAPE__FONT_STYLE :
                return fontStyle != null;
            case GMFGraphPackage.SHAPE__LOCATION :
                return location != null;
            case GMFGraphPackage.SHAPE__SIZE :
                return size != null;
            case GMFGraphPackage.SHAPE__LAYOUT_MANAGER :
                return LAYOUT_MANAGER_EDEFAULT == null ? layoutManager != null : ! LAYOUT_MANAGER_EDEFAULT.equals (layoutManager);
            case GMFGraphPackage.SHAPE__RESOLVED_CHILDREN :
                return ! getResolvedChildren ().isEmpty ();
            case GMFGraphPackage.SHAPE__OUTLINE :
                return outline != OUTLINE_EDEFAULT;
            case GMFGraphPackage.SHAPE__FILL :
                return fill != FILL_EDEFAULT;
            case GMFGraphPackage.SHAPE__LINE_WIDTH :
                return lineWidth != LINE_WIDTH_EDEFAULT;
            case GMFGraphPackage.SHAPE__LINE_KIND :
                return lineKind != LINE_KIND_EDEFAULT;
            case GMFGraphPackage.SHAPE__XOR_FILL :
                return xorFill != XOR_FILL_EDEFAULT;
            case GMFGraphPackage.SHAPE__XOR_OUTLINE :
                return xorOutline != XOR_OUTLINE_EDEFAULT;
        }
        return eDynamicIsSet (eFeature);
    }

    public int eBaseStructuralFeatureID (int derivedFeatureID, Class baseClass) {
        if (baseClass == Identity.class) {
            switch (derivedFeatureID) {
                case GMFGraphPackage.SHAPE__NAME :
                    return GMFGraphPackage.IDENTITY__NAME;
                default :
                    return - 1;
            }
        }
        return super.eBaseStructuralFeatureID (derivedFeatureID, baseClass);
    }

    public int eDerivedStructuralFeatureID (int baseFeatureID, Class baseClass) {
        if (baseClass == Identity.class) {
            switch (baseFeatureID) {
                case GMFGraphPackage.IDENTITY__NAME :
                    return GMFGraphPackage.SHAPE__NAME;
                default :
                    return - 1;
            }
        }
        return super.eDerivedStructuralFeatureID (baseFeatureID, baseClass);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (name: ");
        result.append (name);
        result.append (", layoutManager: ");
        result.append (layoutManager);
        result.append (", outline: ");
        result.append (outline);
        result.append (", fill: ");
        result.append (fill);
        result.append (", lineWidth: ");
        result.append (lineWidth);
        result.append (", lineKind: ");
        result.append (lineKind);
        result.append (", xorFill: ");
        result.append (xorFill);
        result.append (", xorOutline: ");
        result.append (xorOutline);
        result.append (')');
        return result.toString ();
    }

}

