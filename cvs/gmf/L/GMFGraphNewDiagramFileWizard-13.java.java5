package org.eclipse.gmf.graphdef.editor.part;

import java.io.IOException;

import java.util.Collections;

import java.util.LinkedList;

import java.util.List;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.commands.operations.OperationHistoryFactory;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IPath;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.core.runtime.Path;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.resource.ResourceSet;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.diagram.core.services.ViewService;

import org.eclipse.gmf.runtime.diagram.core.services.view.CreateDiagramViewOperation;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.jface.wizard.Wizard;

import org.eclipse.ui.PartInitException;

import org.eclipse.ui.dialogs.WizardNewFileCreationPage;

public class GMFGraphNewDiagramFileWizard extends Wizard {
    private WizardNewFileCreationPage myFileCreationPage;
    private ModelElementSelectionPage diagramRootElementSelectionPage;
    private TransactionalEditingDomain myEditingDomain;

    public GMFGraphNewDiagramFileWizard (org.eclipse.emf.common.util.URI domainModelURI, EObject diagramRoot, TransactionalEditingDomain editingDomain) {
        assert domainModelURI != null : "Domain model uri must be specified";
        assert diagramRoot != null : "Doagram root element must be specified";
        assert editingDomain != null : "Editing domain must be specified";
        myFileCreationPage = new WizardNewFileCreationPage ("Initialize new diagram file", StructuredSelection.EMPTY);
        myFileCreationPage.setTitle ("Diagram file");
        myFileCreationPage.setDescription ("Create new diagram based on " + CanvasEditPart.MODEL_ID + " model content");
        IPath filePath;
        String fileName = domainModelURI.trimFileExtension ().lastSegment ();
        if (domainModelURI.isPlatformResource ()) {
            filePath = new Path (domainModelURI.trimSegments (1).toPlatformString (true));
        } else if (domainModelURI.isFile ()) {
            filePath = new Path (domainModelURI.trimSegments (1).toFileString ());
        } else {
            throw new IllegalArgumentException ("Unsupported URI: " + domainModelURI);
        }

        myFileCreationPage.setContainerFullPath (filePath);
        myFileCreationPage.setFileName (GMFGraphDiagramEditorUtil.getUniqueFileName (filePath, fileName, "gmfgraph_diagram"));
        diagramRootElementSelectionPage = new DiagramRootElementSelectionPage ("Select diagram root element");
        diagramRootElementSelectionPage.setTitle ("Diagram root element");
        diagramRootElementSelectionPage.setDescription ("Select semantic model element to be depicted on diagram");
        diagramRootElementSelectionPage.setModelElement (diagramRoot);
        myEditingDomain = editingDomain;
    }

    public void addPages () {
        addPage (myFileCreationPage);
        addPage (diagramRootElementSelectionPage);
    }

    public boolean performFinish () {
        List affectedFiles = new LinkedList ();
        IFile diagramFile = myFileCreationPage.createNewFile ();
        try {
            diagramFile.setCharset ("UTF-8", new NullProgressMonitor ());
        } catch (CoreException e) {
            GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to set charset for diagram file", e);
        }
        affectedFiles.add (diagramFile);
        org.eclipse.emf.common.util.URI diagramModelURI = org.eclipse.emf.common.util.URI.createPlatformResourceURI (diagramFile.getFullPath ().toString (), true);
        ResourceSet resourceSet = myEditingDomain.getResourceSet ();
        final Resource diagramResource = resourceSet.createResource (diagramModelURI);
        AbstractTransactionalCommand command = new AbstractTransactionalCommand (myEditingDomain, "Initializing diagram contents", affectedFiles) {

            protected CommandResult doExecuteWithResult (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
                int diagramVID = GMFGraphVisualIDRegistry.getDiagramVisualID (diagramRootElementSelectionPage.getModelElement ());
                if (diagramVID != CanvasEditPart.VISUAL_ID) {
                    return CommandResult.newErrorCommandResult ("Incorrect model object stored as a root resource object");
                }
                Diagram diagram = ViewService.createDiagram (diagramRootElementSelectionPage.getModelElement (), CanvasEditPart.MODEL_ID, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
                diagramResource.getContents ().add (diagram);
                return CommandResult.newOKCommandResult ();
            }

        }

        ;
        try {
            OperationHistoryFactory.getOperationHistory ().execute (command, new NullProgressMonitor (), null);
            diagramResource.save (Collections.EMPTY_MAP);
            GMFGraphDiagramEditorUtil.openDiagram (diagramResource);
        } catch (ExecutionException e) {
            GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to create model and diagram", e);
        } catch (IOException ex) {
            GMFGraphDiagramEditorPlugin.getInstance ().logError ("Save operation failed for: " + diagramModelURI, ex);
        } catch (PartInitException ex) {
            GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to open editor", ex);
        }
        return true;
    }

    private static class DiagramRootElementSelectionPage extends ModelElementSelectionPage {

        protected DiagramRootElementSelectionPage (String pageName) {
            super (pageName);
        }

        protected String getSelectionTitle () {
            return "Select diagram root element:";
        }

        protected boolean validatePage () {
            if (selectedModelElement == null) {
                setErrorMessage ("Diagram root element is not selected");
                return false;
            }
            boolean result = ViewService.getInstance ().provides (new CreateDiagramViewOperation (new EObjectAdapter (selectedModelElement), CanvasEditPart.MODEL_ID, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT));
            setErrorMessage (result ? null : "Invalid diagram root element is selected");
            return result;
        }

    }

}

