package org.eclipse.gmf.runtime.diagram.ui.printing.internal.printpreview;

import java.util.ArrayList;

import java.util.List;

import org.eclipse.draw2d.Graphics;

import org.eclipse.draw2d.SWTGraphics;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.LayerConstants;

import org.eclipse.gef.RootEditPart;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.action.actions.IPrintActionHelper;

import org.eclipse.gmf.runtime.common.ui.util.WindowUtil;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IDiagramPreferenceSupport;

import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageInfoHelper;

import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageInfoHelper.PageMargins;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.DiagramPrintingDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.DiagramPrintingPlugin;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.DiagramPrintingStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.l10n.DiagramPrintingResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.util.HeaderAndFooterHelper;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.util.PrintHelper;

import org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.MapModeGraphics;

import org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScaledGraphics;

import org.eclipse.gmf.runtime.draw2d.ui.internal.mapmode.DiagramMapModeUtil;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.jface.util.Assert;

import org.eclipse.swt.SWT;

import org.eclipse.swt.SWTError;

import org.eclipse.swt.events.SelectionAdapter;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.events.SelectionListener;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.GC;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.graphics.Point;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.layout.GridLayout;

import org.eclipse.swt.printing.Printer;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Display;

import org.eclipse.swt.widgets.Label;

import org.eclipse.swt.widgets.Menu;

import org.eclipse.swt.widgets.MenuItem;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.swt.widgets.ToolBar;

import org.eclipse.swt.widgets.ToolItem;

import org.eclipse.ui.IEditorPart;

import org.eclipse.ui.PlatformUI;

public class PrintPreviewHelper {
    protected IPrintActionHelper printActionHelper;
    protected int userX = 0;
    protected int userY = 0;
    protected int numberOfRowsToDisplay = 2;
    protected int numberOfColumnsToDisplay = 2;
    protected int totalNumberOfRows = - 1;
    protected int totalNumberOfColumns = - 1;
    protected DiagramEditPart diagramEditPart;
    protected Rectangle pageBreakBounds;
    protected Composite body;
    protected Composite composite;
    protected int buttonBarHeight;
    protected Shell shell;
    protected ToolItem printTool;
    protected ToolItem pagesTool;
    protected ToolItem leftTool;
    protected ToolItem rightTool;
    protected ToolItem upTool;
    protected ToolItem downTool;
    protected ToolItem closeTool;
    private List imageList = new ArrayList ();
    protected static final int BORDER_SIZE = 20;
    private static final Color BACKGROUND_COLOR = new Color (Display.getDefault (), 124, 124, 124);
    protected Image printImage;
    protected Image disabledPrintImage;
    protected Image pageImage;
    protected Image leftImage;
    protected Image disabledLeftImage;
    protected Image rightImage;
    protected Image disabledRightImage;
    protected Image upImage;
    protected Image disabledUpImage;
    protected Image downImage;
    protected Image disabledDownImage;
    protected Image closeImage;

    protected void initializeToolbarImages () {
        printImage = DiagramPrintingResourceManager.getInstance ().createImage ("etool16/print_preview_print.gif");
        disabledPrintImage = DiagramPrintingResourceManager.getInstance ().createImage ("dtool16/print_preview_print.gif");
        pageImage = DiagramPrintingResourceManager.getInstance ().createImage ("etool16/print_preview_pages.gif");
        leftImage = DiagramPrintingResourceManager.getInstance ().createImage ("etool16/print_preview_left.gif");
        disabledLeftImage = DiagramPrintingResourceManager.getInstance ().createImage ("dtool16/print_preview_left.gif");
        rightImage = DiagramPrintingResourceManager.getInstance ().createImage ("etool16/print_preview_right.gif");
        disabledRightImage = DiagramPrintingResourceManager.getInstance ().createImage ("dtool16/print_preview_right.gif");
        upImage = DiagramPrintingResourceManager.getInstance ().createImage ("etool16/print_preview_up.gif");
        disabledUpImage = DiagramPrintingResourceManager.getInstance ().createImage ("dtool16/print_preview_up.gif");
        downImage = DiagramPrintingResourceManager.getInstance ().createImage ("etool16/print_preview_down.gif");
        disabledDownImage = DiagramPrintingResourceManager.getInstance ().createImage ("dtool16/print_preview_down.gif");
        closeImage = DiagramPrintingResourceManager.getInstance ().createImage ("etool16/print_preview_close.gif");
    }

    public void doPrintPreview (IPrintActionHelper prActionHelper) {
        this.printActionHelper = prActionHelper;
        if (getDiagramEditorPart () == null) {
            MessageDialog.openInformation (PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell (), DiagramPrintingResourceManager.getI18NString ("PrintPreview.Title"), DiagramPrintingResourceManager.getI18NString ("PrintPreview.NotEnabled"));
            return;
        }
        if (! isPrinterInstalled ()) {
            WindowUtil.doMessageBox (DiagramPrintingResourceManager.getI18NString ("PrintPreview.NoPrinterInstalled"), DiagramPrintingResourceManager.getI18NString ("PrintPreview.Title"), SWT.ICON_ERROR, PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell ());
            return;
        }
        initializeToolbarImages ();
        initializeMapMode ();
        diagramEditPart = null;
        pageBreakBounds = null;
        userX = 0;
        userY = 0;
        numberOfRowsToDisplay = 2;
        numberOfColumnsToDisplay = 2;
        totalNumberOfRows = - 1;
        totalNumberOfColumns = - 1;
        Display display = Display.getDefault ();
        shell = new Shell (display, SWT.APPLICATION_MODAL | SWT.TITLE | SWT.CLOSE | SWT.BORDER);
        shell.setSize (PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell ().getSize ());
        shell.setText (DiagramPrintingResourceManager.getI18NString ("PrintPreview.Title"));
        shell.setLocation (PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell ().getLocation ());
        shell.setLayout (new GridLayout (1, true));
        ToolBar bar = new ToolBar (shell, SWT.FLAT | SWT.HORIZONTAL);
        printTool = new ToolItem (bar, SWT.NULL);
        printTool.setToolTipText (DiagramPrintingResourceManager.getI18NString ("PrintPreview.PrintToolItem"));
        printTool.setImage (printImage);
        printTool.setDisabledImage (disabledPrintImage);
        printTool.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                Assert.isNotNull (printActionHelper);
                printActionHelper.doPrint (PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getActivePage ().getActivePart ());
                shell.setActive ();
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        if (printActionHelper == null) {
            printTool.setEnabled (false);
        }
        new ToolItem (bar, SWT.SEPARATOR);
        pagesTool = new ToolItem (bar, SWT.DROP_DOWN);
        pagesTool.setToolTipText (DiagramPrintingResourceManager.getI18NString ("PrintPreview.PagesToolItem"));
        pagesTool.setImage (pageImage);
        pagesTool.addSelectionListener (new SelectionAdapter () {
            private Menu menu = null;

            private void updatePreview (int newNumberOfColumnsToDisplay, int newNumberOfRowsToDisplay) {
                numberOfRowsToDisplay = newNumberOfRowsToDisplay;
                numberOfColumnsToDisplay = newNumberOfColumnsToDisplay;
                if (userX + numberOfColumnsToDisplay > getTotalNumberOfColumns ()) {
                    userX = getTotalNumberOfColumns () - numberOfColumnsToDisplay;
                    if (userX < 0) userX = 0;

                }
                if (userY + numberOfRowsToDisplay > getTotalNumberOfRows ()) {
                    userY = getTotalNumberOfRows () - numberOfRowsToDisplay;
                    if (userY < 0) userY = 0;

                }
                updateLeftRightUpDownButtonsForToolbar ();
                updateCompositeForNumberOfColumns (numberOfRowsToDisplay, numberOfColumnsToDisplay);
            }

            public void widgetSelected (SelectionEvent event) {
                if (menu == null) {
                    menu = new Menu (shell);
                    MenuItem menuItem = new MenuItem (menu, SWT.NONE);
                    menuItem.setText (DiagramPrintingResourceManager.getI18NString ("PrintPreview.1Up"));
                    menuItem.addSelectionListener (new SelectionAdapter () {

                        public void widgetSelected (SelectionEvent e) {
                            updatePreview (1, 1);
                        }

                    }

                    );
                    menuItem = new MenuItem (menu, SWT.NONE);
                    menuItem.setText (DiagramPrintingResourceManager.getI18NString ("PrintPreview.2Up"));
                    menuItem.addSelectionListener (new SelectionAdapter () {

                        public void widgetSelected (SelectionEvent e) {
                            updatePreview (2, 1);
                        }

                    }

                    );
                    menuItem = new MenuItem (menu, SWT.NONE);
                    menuItem.setText (DiagramPrintingResourceManager.getI18NString ("PrintPreview.4Up"));
                    menuItem.addSelectionListener (new SelectionAdapter () {

                        public void widgetSelected (SelectionEvent e) {
                            updatePreview (2, 2);
                        }

                    }

                    );
                }
                final ToolItem toolItem = (ToolItem) event.widget;
                final ToolBar toolBar = toolItem.getParent ();
                org.eclipse.swt.graphics.Rectangle toolItemBounds = toolItem.getBounds ();
                Point point = toolBar.toDisplay (new Point (toolItemBounds.x, toolItemBounds.y));
                menu.setLocation (point.x, point.y + toolItemBounds.height);
                setMenuVisible (true);
            }

            private void setMenuVisible (boolean visible) {
                menu.setVisible (visible);
            }

        }

        );
        new ToolItem (bar, SWT.SEPARATOR);
        leftTool = new ToolItem (bar, SWT.NULL);
        leftTool.setToolTipText (DiagramPrintingResourceManager.getI18NString ("PrintPreview.LeftToolItem"));
        leftTool.setImage (leftImage);
        leftTool.setDisabledImage (disabledLeftImage);
        leftTool.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                if (userX > 0) {
                    userX --;
                    updateCompositeForNumberOfColumns (numberOfRowsToDisplay, numberOfColumnsToDisplay);
                    updateLeftRightUpDownButtonsForToolbar ();
                }
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        rightTool = new ToolItem (bar, SWT.NULL);
        rightTool.setToolTipText (DiagramPrintingResourceManager.getI18NString ("PrintPreview.RightToolItem"));
        rightTool.setImage (rightImage);
        rightTool.setDisabledImage (disabledRightImage);
        rightTool.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                if (! (userX + numberOfColumnsToDisplay + 1 > getTotalNumberOfColumns ())) {
                    userX ++;
                    updateCompositeForNumberOfColumns (numberOfRowsToDisplay, numberOfColumnsToDisplay);
                    updateLeftRightUpDownButtonsForToolbar ();
                }
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        upTool = new ToolItem (bar, SWT.NULL);
        upTool.setToolTipText (DiagramPrintingResourceManager.getI18NString ("PrintPreview.UpToolItem"));
        upTool.setImage (upImage);
        upTool.setDisabledImage (disabledUpImage);
        upTool.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                if (userY > 0) {
                    userY --;
                    updateCompositeForNumberOfColumns (numberOfRowsToDisplay, numberOfColumnsToDisplay);
                    updateLeftRightUpDownButtonsForToolbar ();
                }
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        downTool = new ToolItem (bar, SWT.NULL);
        downTool.setToolTipText (DiagramPrintingResourceManager.getI18NString ("PrintPreview.DownToolItem"));
        downTool.setImage (downImage);
        downTool.setDisabledImage (disabledDownImage);
        downTool.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                if (! (userY + numberOfRowsToDisplay + 1 > getTotalNumberOfRows ())) {
                    userY ++;
                    updateCompositeForNumberOfColumns (numberOfRowsToDisplay, numberOfColumnsToDisplay);
                    updateLeftRightUpDownButtonsForToolbar ();
                }
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        new ToolItem (bar, SWT.SEPARATOR);
        closeTool = new ToolItem (bar, SWT.NULL);
        closeTool.setToolTipText (DiagramPrintingResourceManager.getI18NString ("PrintPreview.CloseToolItem"));
        closeTool.setImage (closeImage);
        closeTool.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                dispose ();
                shell.close ();
                shell.dispose ();
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        buttonBarHeight = bar.getBounds ().height - bar.getBounds ().y;
        bar.setBounds (0, 0, shell.getSize ().x, buttonBarHeight);
        body = new Composite (shell, SWT.NULL);
        body.setLayout (new GridLayout (1, true));
        body.setLayoutData (new GridData (GridData.FILL_BOTH));
        body.setBackground (BACKGROUND_COLOR);
        composite = new Composite (body, SWT.NULL);
        composite.setLayoutData (new GridData (SWT.CENTER, SWT.CENTER, true, true));
        updateCompositeForNumberOfColumns (2, 2);
        updateLeftRightUpDownButtonsForToolbar ();
        shell.open ();
        while (! shell.isDisposed ()) {
            if (! display.readAndDispatch ()) display.sleep ();

        }
        shell.dispose ();
    }

    private IMapMode mm;

    public PrintPreviewHelper () {
    }

    protected IMapMode getMapMode () {
        return mm;
    }

    private void initializeMapMode () {
        DiagramEditor diagramEditor = getDiagramEditorPart ();
        assert diagramEditor != null;
        IDiagramGraphicalViewer viewer = diagramEditor.getDiagramGraphicalViewer ();
        if (viewer != null) {
            RootEditPart rootEP = viewer.getRootEditPart ();
            if (rootEP instanceof DiagramRootEditPart) {
                this.mm = ((DiagramRootEditPart) rootEP).getMapMode ();
                ;
                return;
            }
        }
        this.mm = MapModeUtil.getMapMode ();
    }

    private int getTotalNumberOfRows () {
        if (totalNumberOfRows < 0) {
            float numRows = ((float) getBounds ().height) / PageInfoHelper.getPageSize (getPreferenceStore (), false, getMapMode ()).y;
            totalNumberOfRows = Math.max (1, (int) Math.ceil (numRows));
        }
        return totalNumberOfRows;
    }

    private DiagramEditor getDiagramEditorPart () {
        IEditorPart editorPart = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getActivePage ().getActiveEditor ();
        if (! (editorPart instanceof DiagramEditor)) {
            return null;
        }
        DiagramEditor diagramEditorPart = (DiagramEditor) editorPart;
        return diagramEditorPart;
    }

    protected Rectangle getDiagramBounds () {
        return PageInfoHelper.getChildrenBounds (getDiagramEditPart (), null);
    }

    protected Rectangle getPageBreakBounds () {
        if (pageBreakBounds == null) {
            pageBreakBounds = PrintHelper.getPageBreakBounds (getDiagramEditPart (), true);
        }
        return pageBreakBounds;
    }

    protected Rectangle getBounds () {
        return (getPageBreakBounds () == null) ? getDiagramBounds () : getPageBreakBounds ();
    }

    protected DiagramEditPart getDiagramEditPart () {
        if (diagramEditPart == null) {
            Diagram diagram = getDiagramEditorPart ().getDiagram ();
            PreferencesHint preferencesHint = getPreferencesHint (getDiagramEditorPart ());
            diagramEditPart = PrintHelper.createDiagramEditPart (diagram, preferencesHint);
            PrintHelper.initializePreferences (diagramEditPart, preferencesHint);
        }
        return diagramEditPart;
    }

    protected PreferencesHint getPreferencesHint (IEditorPart editorPart) {
        if (editorPart instanceof IDiagramWorkbenchPart) {
            RootEditPart rootEP = ((IDiagramWorkbenchPart) editorPart).getDiagramGraphicalViewer ().getRootEditPart ();
            if (rootEP instanceof IDiagramPreferenceSupport) {
                return ((IDiagramPreferenceSupport) rootEP).getPreferencesHint ();
            }
        }
        return PreferencesHint.USE_DEFAULTS;
    }

    private int getTotalNumberOfColumns () {
        if (totalNumberOfColumns < 0) {
            float numCols = ((float) getBounds ().width) / PageInfoHelper.getPageSize (getPreferenceStore (), false, getMapMode ()).x;
            totalNumberOfColumns = Math.max (1, (int) Math.ceil (numCols));
        }
        return totalNumberOfColumns;
    }

    protected boolean isPrinterInstalled () {
        Printer printer = null;
        try {
            printer = new Printer ();
        } catch (SWTError e) {
            Trace.catching (DiagramPrintingPlugin.getInstance (), DiagramPrintingDebugOptions.EXCEPTIONS_CATCHING, PrintPreviewHelper.class, "isPrinterInstalled", e);
            if (e.code == SWT.ERROR_NO_HANDLES) {
                return false;
            }
            Log.error (DiagramPrintingPlugin.getInstance (), DiagramPrintingStatusCodes.GENERAL_UI_FAILURE, "Failed to make instance of Printer object", e);
            Trace.throwing (DiagramPrintingPlugin.getInstance (), DiagramPrintingDebugOptions.EXCEPTIONS_CATCHING, PrintPreviewHelper.class, "isPrinterInstalled", e);
            throw e;
        }
        printer.dispose ();
        return true;
    }

    private void disposeImages () {
        while (imageList.size () > 0) {
            Assert.isTrue (imageList.get (0) instanceof Image);
            if (! ((Image) imageList.get (0)).isDisposed ()) ((Image) imageList.get (0)).dispose ();

            imageList.remove (0);
        }
    }

    private void updateCompositeForNumberOfColumns (int numberOfRows, int numberOfColumns) {
        Assert.isNotNull (shell);
        Assert.isNotNull (composite);
        WindowUtil.disposeChildren (composite);
        disposeImages ();
        composite.setLayout (null);
        composite.pack ();
        composite.setLayout (new GridLayout (numberOfColumns, true));
        int imageHeight = (shell.getSize ().y - buttonBarHeight - BORDER_SIZE - BORDER_SIZE - BORDER_SIZE - ((numberOfRows - 1) * BORDER_SIZE)) / numberOfRows;
        int imageWidth = (shell.getSize ().x - BORDER_SIZE - BORDER_SIZE - ((numberOfColumns - 1) * BORDER_SIZE)) / numberOfColumns;
        org.eclipse.draw2d.geometry.Point pageSize = PageInfoHelper.getPageSize (getPreferenceStore (), false, getMapMode ());
        Assert.isNotNull (pageSize);
        float printerRatio = ((float) pageSize.x) / ((float) pageSize.y);
        if (imageHeight * printerRatio < imageWidth) {
            imageWidth = (int) (imageHeight * printerRatio);
        } else if (imageWidth * (1 / printerRatio) < imageHeight) {
            imageHeight = (int) (imageWidth * (1.0f / printerRatio));
        }

        PageMargins margins = PageInfoHelper.getPageMargins (getPreferenceStore (), getMapMode ());
        if (! (imageHeight <= 4 || imageWidth <= 4)) {
            float scale = ((float) imageHeight / (float) pageSize.y) / (float) DiagramMapModeUtil.getScale (getMapMode ());
            for (int i = 0;
            i < numberOfRows; i ++) {
                for (int j = 0;
                j < numberOfColumns; j ++) {
                    Label label = new Label (composite, SWT.NULL);
                    Image pageImg = makeImage (imageWidth, imageHeight, i, j, scale, margins);
                    label.setImage (pageImg);
                    imageList.add (pageImg);
                }
            }
        }
        composite.pack ();
        org.eclipse.swt.graphics.Rectangle compositeBounds = composite.getBounds ();
        compositeBounds.x = (shell.getSize ().x - BORDER_SIZE - compositeBounds.width) / 2;
        compositeBounds.y = (shell.getSize ().y - buttonBarHeight - BORDER_SIZE - BORDER_SIZE - BORDER_SIZE - compositeBounds.height) / 2;
        composite.setBounds (compositeBounds);
    }

    protected void updateLeftRightUpDownButtonsForToolbar () {
        if (userX == 0) {
            leftTool.setEnabled (false);
        } else {
            leftTool.setEnabled (true);
        }
        if (userX + numberOfColumnsToDisplay + 1 > getTotalNumberOfColumns ()) {
            rightTool.setEnabled (false);
        } else {
            rightTool.setEnabled (true);
        }
        if (userY == 0) {
            upTool.setEnabled (false);
        } else {
            upTool.setEnabled (true);
        }
        if (userY + numberOfRowsToDisplay + 1 > getTotalNumberOfRows ()) {
            downTool.setEnabled (false);
        } else {
            downTool.setEnabled (true);
        }
    }

    protected Image makeImage (int imageWidth, int imageHeight, int row, int col, float scale, PageMargins margins) {
        Image image = new Image (Display.getDefault (), imageWidth, imageHeight);
        GC gc = new GC (image);
        SWTGraphics sg = new SWTGraphics (gc);
        ScaledGraphics g1 = new ScaledGraphics (sg);
        MapModeGraphics mmg = createMapModeGraphics (g1);
        gc.setFont (mmg.getFont ());
        drawPage (mmg, gc, scale, row, col, margins);
        gc.dispose ();
        return image;
    }

    private boolean doesPageExist (int x, int y) {
        return x > 0 && y > 0 && x <= getTotalNumberOfColumns () && y <= getTotalNumberOfRows ();
    }

    protected void drawPage (Graphics g, GC gc, float scale, int row, int col, PageMargins margins) {
        org.eclipse.draw2d.geometry.Point pageSize = PageInfoHelper.getPageSize (getPreferenceStore (), false, getMapMode ());
        g.pushState ();
        Rectangle bounds = getBounds ();
        int translateX = (int) (0f - bounds.x * scale + ((float) getTotalNumberOfColumns () * pageSize.x - bounds.width) * scale / 2f - (((float) pageSize.x) * ((float) (col + userX)) * scale)), translateY = (int) (0f - bounds.y * scale + ((float) getTotalNumberOfRows () * pageSize.y - bounds.height) * scale / 2f - (((float) pageSize.y) * ((float) (row + userY)) * scale));
        translateX = - bounds.x - (pageSize.x * (col + userX)) + (margins.left * (col + userX + 1)) + (margins.right * (col + userX));
        translateY = - bounds.y - (pageSize.y * (row + userY)) + (margins.top * (row + userY + 1)) + (margins.bottom * (row + userY));
        if (doesPageExist (1 + userX + col, 1 + userY + row)) {
            g.pushState ();
            g.scale (scale);
            String headerOrFooter = HeaderAndFooterHelper.makeHeaderOrFooterString (WorkspaceViewerProperties.HEADER_PREFIX, 1 + userY + row, 1 + userX + col, getDiagramEditPart ());
            g.drawText (headerOrFooter, (pageSize.x - getMapMode ().DPtoLP (gc.textExtent (headerOrFooter).x)) / 2, getMapMode ().DPtoLP (HeaderAndFooterHelper.TOP_MARGIN_DP));
            headerOrFooter = HeaderAndFooterHelper.makeHeaderOrFooterString (WorkspaceViewerProperties.FOOTER_PREFIX, 1 + userY + row, 1 + userX + col, getDiagramEditPart ());
            g.drawText (headerOrFooter, (pageSize.x - getMapMode ().DPtoLP (gc.textExtent (headerOrFooter).x)) / 2, pageSize.y - getMapMode ().DPtoLP (HeaderAndFooterHelper.BOTTOM_MARGIN_DP));
            g.popState ();
        }
        g.scale (scale);
        g.translate (translateX, translateY);
        Rectangle clip = new Rectangle ((pageSize.x - margins.left - margins.right) * (col + userX) + bounds.x, (pageSize.y - margins.top - margins.bottom) * (row + userY) + bounds.y, pageSize.x - margins.left - margins.right, pageSize.y - margins.top - margins.bottom);
        g.clipRect (clip);
        getDiagramEditPart ().getLayer (LayerConstants.PRINTABLE_LAYERS).paint (g);
        g.popState ();
    }

    private void safeDisposeImage (Image image) {
        if (image != null && ! image.isDisposed ()) image.dispose ();

    }

    protected void dispose () {
        disposeImages ();
        safeDisposeImage (printImage);
        safeDisposeImage (disabledPrintImage);
        safeDisposeImage (pageImage);
        safeDisposeImage (leftImage);
        safeDisposeImage (disabledLeftImage);
        safeDisposeImage (rightImage);
        safeDisposeImage (disabledRightImage);
        safeDisposeImage (upImage);
        safeDisposeImage (disabledUpImage);
        safeDisposeImage (downImage);
        safeDisposeImage (disabledDownImage);
        safeDisposeImage (closeImage);
    }

    private IPreferenceStore getWorkspaceViewerPreferenceStore () {
        assert getDiagramEditPart ().getViewer () instanceof DiagramGraphicalViewer;
        return ((DiagramGraphicalViewer) getDiagramEditPart ().getViewer ()).getWorkspaceViewerPreferenceStore ();
    }

    private IPreferenceStore getGlobalPreferenceStore () {
        return (IPreferenceStore) getDiagramEditPart ().getDiagramPreferencesHint ().getPreferenceStore ();
    }

    private IPreferenceStore getPreferenceStore () {
        if (getWorkspaceViewerPreferenceStore ().getBoolean (WorkspaceViewerProperties.PREF_USE_WORKSPACE_SETTINGS)) return getGlobalPreferenceStore ();
        else return getWorkspaceViewerPreferenceStore ();

    }

    protected MapModeGraphics createMapModeGraphics (ScaledGraphics scaledGraphics) {
        return new MapModeGraphics (scaledGraphics, getMapMode ());
    }

}

