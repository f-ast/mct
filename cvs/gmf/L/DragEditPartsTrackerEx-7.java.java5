package org.eclipse.gmf.runtime.diagram.ui.tools;

import java.util.Iterator;

import java.util.List;

import org.eclipse.draw2d.FigureCanvas;

import org.eclipse.draw2d.Viewport;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.SharedCursors;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.requests.ChangeBoundsRequest;

import org.eclipse.gef.tools.DragEditPartsTracker;

import org.eclipse.gef.tools.ToolUtilities;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.requests.DuplicateRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

import org.eclipse.swt.graphics.Cursor;

import org.eclipse.swt.widgets.Control;

public class DragEditPartsTrackerEx extends DragEditPartsTracker {

    public DragEditPartsTrackerEx (EditPart sourceEditPart) {
        super (sourceEditPart);
    }

    protected Command getCommand () {
        if (! isMove ()) {
            CompoundCommand command = new CompoundCommand ();
            addSourceCommands (false, command);
            if (getTargetEditPart () != null) {
                command.add (getTargetEditPart ().getCommand (getTargetRequest ()));
                if (command.canExecute ()) return command;

            }
        }
        CompoundCommand command = new CompoundCommand ();
        addSourceCommands (true, command);
        return command;
    }

    protected void addSourceCommands (boolean isMove, CompoundCommand command) {
        Request request = getTargetRequest ();
        if (isCloneActive ()) {
            List editparts = ToolUtilities.getSelectionWithoutDependants (getCurrentViewer ());
            DuplicateRequest duplicateRequest = new DuplicateRequest ();
            duplicateRequest.setEditParts (editparts);
            duplicateRequest.setExtendedData (request.getExtendedData ());
            if (request instanceof ChangeBoundsRequest) {
                Point delta = ((ChangeBoundsRequest) request).getMoveDelta ();
                MapModeUtil.getMapMode (((IGraphicalEditPart) getTargetEditPart ()).getFigure ()).DPtoLP (delta);
                duplicateRequest.setOffset (delta);
            }
            command.add (getTargetEditPart ().getCommand (duplicateRequest));
        } else {
            request.setType (isMove ? REQ_MOVE : RequestConstants.REQ_DRAG);
            Iterator iter = getOperationSet ().iterator ();
            while (iter.hasNext ()) {
                EditPart editPart = (EditPart) iter.next ();
                command.add (editPart.getCommand (request));
            }
        }
        request.setType (RequestConstants.REQ_DROP);
    }

    protected String getCommandName () {
        if (! isMove ()) return RequestConstants.REQ_DROP;

        return super.getCommandName ();
    }

    protected boolean isMove () {
        if (! getOperationSet ().contains (getSourceEditPart ())) return false;

        return super.isMove ();
    }

    protected void executeCurrentCommand () {
        super.executeCurrentCommand ();
        if (isActive ()) {
            if (getOperationSet ().size () > 0) {
                if (getOperationSet ().get (0) instanceof IGraphicalEditPart) {
                    IGraphicalEditPart editpart = (IGraphicalEditPart) getOperationSet ().get (0);
                    if ((editpart.getFigure () == null) || (editpart.getFigure ().getParent () == null) || (editpart.getFigure ().getParent ().getLayoutManager () == null)) return;

                    editpart.getFigure ().getParent ().getLayoutManager ().layout (editpart.getFigure ().getParent ());
                    reveal (editpart);
                }
            }
        }
    }

    protected void reveal (EditPart editpart) {
        editpart.getViewer ().reveal (editpart);
    }

    protected boolean handleDragInProgress () {
        boolean returnValue = super.handleDragInProgress ();
        if (isInState (STATE_DRAG_IN_PROGRESS) || isInState (STATE_ACCESSIBLE_DRAG_IN_PROGRESS)) {
            updateAutoexposeHelper ();
        }
        return returnValue;
    }

    protected Cursor calculateCursor () {
        if (isInState (STATE_DRAG_IN_PROGRESS) || isInState (STATE_ACCESSIBLE_DRAG_IN_PROGRESS)) {
            if (getAutoexposeHelper () != null) {
                return SharedCursors.HAND;
            } else {
                Control control = getCurrentViewer ().getControl ();
                if (control instanceof FigureCanvas) {
                    Viewport viewport = ((FigureCanvas) control).getViewport ();
                    Rectangle rect = Rectangle.SINGLETON;
                    viewport.getClientArea (rect);
                    viewport.translateToParent (rect);
                    viewport.translateToAbsolute (rect);
                    if (! rect.contains (getLocation ())) {
                        return getDisabledCursor ();
                    }
                }
            }
        }
        return super.calculateCursor ();
    }

}

