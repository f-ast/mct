package org.eclipse.gmf.mappings.util;

import java.util.List;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.mappings.*;

import org.eclipse.gmf.mappings.AppearanceSteward;

import org.eclipse.gmf.mappings.AuditContainer;

import org.eclipse.gmf.mappings.AuditRule;

import org.eclipse.gmf.mappings.CanvasMapping;

import org.eclipse.gmf.mappings.ChildReference;

import org.eclipse.gmf.mappings.CompartmentMapping;

import org.eclipse.gmf.mappings.Constraint;

import org.eclipse.gmf.mappings.ElementInitializer;

import org.eclipse.gmf.mappings.FeatureSeqInitializer;

import org.eclipse.gmf.mappings.FeatureValueSpec;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.LabelMapping;

import org.eclipse.gmf.mappings.LinkConstraints;

import org.eclipse.gmf.mappings.LinkMapping;

import org.eclipse.gmf.mappings.Mapping;

import org.eclipse.gmf.mappings.MappingEntry;

import org.eclipse.gmf.mappings.MenuOwner;

import org.eclipse.gmf.mappings.NeedsContainment;

import org.eclipse.gmf.mappings.NodeMapping;

import org.eclipse.gmf.mappings.NodeReference;

import org.eclipse.gmf.mappings.ToolOwner;

import org.eclipse.gmf.mappings.TopNodeReference;

import org.eclipse.gmf.mappings.ValueExpression;

public class GMFMapSwitch {
    protected static GMFMapPackage modelPackage;

    public GMFMapSwitch () {
        if (modelPackage == null) {
            modelPackage = GMFMapPackage.eINSTANCE;
        }
    }

    public Object doSwitch (EObject theEObject) {
        return doSwitch (theEObject.eClass (), theEObject);
    }

    protected Object doSwitch (EClass theEClass, EObject theEObject) {
        if (theEClass.eContainer () == modelPackage) {
            return doSwitch (theEClass.getClassifierID (), theEObject);
        } else {
            List eSuperTypes = theEClass.getESuperTypes ();
            return eSuperTypes.isEmpty () ? defaultCase (theEObject) : doSwitch ((EClass) eSuperTypes.get (0), theEObject);
        }
    }

    protected Object doSwitch (int classifierID, EObject theEObject) {
        switch (classifierID) {
            case GMFMapPackage.MAPPING :
                {
                    Mapping mapping = (Mapping) theEObject;
                    Object result = caseMapping (mapping);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.MAPPING_ENTRY :
                {
                    MappingEntry mappingEntry = (MappingEntry) theEObject;
                    Object result = caseMappingEntry (mappingEntry);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.NEEDS_CONTAINMENT :
                {
                    NeedsContainment needsContainment = (NeedsContainment) theEObject;
                    Object result = caseNeedsContainment (needsContainment);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.NODE_REFERENCE :
                {
                    NodeReference nodeReference = (NodeReference) theEObject;
                    Object result = caseNodeReference (nodeReference);
                    if (result == null) result = caseNeedsContainment (nodeReference);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.CHILD_REFERENCE :
                {
                    ChildReference childReference = (ChildReference) theEObject;
                    Object result = caseChildReference (childReference);
                    if (result == null) result = caseNodeReference (childReference);

                    if (result == null) result = caseNeedsContainment (childReference);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.TOP_NODE_REFERENCE :
                {
                    TopNodeReference topNodeReference = (TopNodeReference) theEObject;
                    Object result = caseTopNodeReference (topNodeReference);
                    if (result == null) result = caseNodeReference (topNodeReference);

                    if (result == null) result = caseNeedsContainment (topNodeReference);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.NODE_MAPPING :
                {
                    NodeMapping nodeMapping = (NodeMapping) theEObject;
                    Object result = caseNodeMapping (nodeMapping);
                    if (result == null) result = caseMappingEntry (nodeMapping);

                    if (result == null) result = caseMenuOwner (nodeMapping);

                    if (result == null) result = caseToolOwner (nodeMapping);

                    if (result == null) result = caseAppearanceSteward (nodeMapping);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.LABEL_NODE_MAPPING :
                {
                    LabelNodeMapping labelNodeMapping = (LabelNodeMapping) theEObject;
                    Object result = caseLabelNodeMapping (labelNodeMapping);
                    if (result == null) result = caseNodeMapping (labelNodeMapping);

                    if (result == null) result = caseLabelFlavour (labelNodeMapping);

                    if (result == null) result = caseMappingEntry (labelNodeMapping);

                    if (result == null) result = caseMenuOwner (labelNodeMapping);

                    if (result == null) result = caseToolOwner (labelNodeMapping);

                    if (result == null) result = caseAppearanceSteward (labelNodeMapping);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.COMPARTMENT_MAPPING :
                {
                    CompartmentMapping compartmentMapping = (CompartmentMapping) theEObject;
                    Object result = caseCompartmentMapping (compartmentMapping);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.LINK_MAPPING :
                {
                    LinkMapping linkMapping = (LinkMapping) theEObject;
                    Object result = caseLinkMapping (linkMapping);
                    if (result == null) result = caseMappingEntry (linkMapping);

                    if (result == null) result = caseNeedsContainment (linkMapping);

                    if (result == null) result = caseMenuOwner (linkMapping);

                    if (result == null) result = caseToolOwner (linkMapping);

                    if (result == null) result = caseAppearanceSteward (linkMapping);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.CANVAS_MAPPING :
                {
                    CanvasMapping canvasMapping = (CanvasMapping) theEObject;
                    Object result = caseCanvasMapping (canvasMapping);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.LABEL_MAPPING :
                {
                    LabelMapping labelMapping = (LabelMapping) theEObject;
                    Object result = caseLabelMapping (labelMapping);
                    if (result == null) result = caseLabelFlavour (labelMapping);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.LABEL_FLAVOUR :
                {
                    LabelFlavour labelFlavour = (LabelFlavour) theEObject;
                    Object result = caseLabelFlavour (labelFlavour);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.CONSTRAINT :
                {
                    Constraint constraint = (Constraint) theEObject;
                    Object result = caseConstraint (constraint);
                    if (result == null) result = caseValueExpression (constraint);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.LINK_CONSTRAINTS :
                {
                    LinkConstraints linkConstraints = (LinkConstraints) theEObject;
                    Object result = caseLinkConstraints (linkConstraints);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.VALUE_EXPRESSION :
                {
                    ValueExpression valueExpression = (ValueExpression) theEObject;
                    Object result = caseValueExpression (valueExpression);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.ELEMENT_INITIALIZER :
                {
                    ElementInitializer elementInitializer = (ElementInitializer) theEObject;
                    Object result = caseElementInitializer (elementInitializer);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.FEATURE_SEQ_INITIALIZER :
                {
                    FeatureSeqInitializer featureSeqInitializer = (FeatureSeqInitializer) theEObject;
                    Object result = caseFeatureSeqInitializer (featureSeqInitializer);
                    if (result == null) result = caseElementInitializer (featureSeqInitializer);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.FEATURE_VALUE_SPEC :
                {
                    FeatureValueSpec featureValueSpec = (FeatureValueSpec) theEObject;
                    Object result = caseFeatureValueSpec (featureValueSpec);
                    if (result == null) result = caseValueExpression (featureValueSpec);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.MENU_OWNER :
                {
                    MenuOwner menuOwner = (MenuOwner) theEObject;
                    Object result = caseMenuOwner (menuOwner);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.TOOL_OWNER :
                {
                    ToolOwner toolOwner = (ToolOwner) theEObject;
                    Object result = caseToolOwner (toolOwner);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.APPEARANCE_STEWARD :
                {
                    AppearanceSteward appearanceSteward = (AppearanceSteward) theEObject;
                    Object result = caseAppearanceSteward (appearanceSteward);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.AUDIT_CONTAINER :
                {
                    AuditContainer auditContainer = (AuditContainer) theEObject;
                    Object result = caseAuditContainer (auditContainer);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.RULE_BASE :
                {
                    RuleBase ruleBase = (RuleBase) theEObject;
                    Object result = caseRuleBase (ruleBase);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.AUDIT_RULE :
                {
                    AuditRule auditRule = (AuditRule) theEObject;
                    Object result = caseAuditRule (auditRule);
                    if (result == null) result = caseRuleBase (auditRule);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.DOMAIN_ELEMENT_TARGET :
                {
                    DomainElementTarget domainElementTarget = (DomainElementTarget) theEObject;
                    Object result = caseDomainElementTarget (domainElementTarget);
                    if (result == null) result = caseAuditable (domainElementTarget);

                    if (result == null) result = caseMeasurable (domainElementTarget);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.DOMAIN_ATTRIBUTE_TARGET :
                {
                    DomainAttributeTarget domainAttributeTarget = (DomainAttributeTarget) theEObject;
                    Object result = caseDomainAttributeTarget (domainAttributeTarget);
                    if (result == null) result = caseAuditable (domainAttributeTarget);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.DIAGRAM_ELEMENT_TARGET :
                {
                    DiagramElementTarget diagramElementTarget = (DiagramElementTarget) theEObject;
                    Object result = caseDiagramElementTarget (diagramElementTarget);
                    if (result == null) result = caseAuditable (diagramElementTarget);

                    if (result == null) result = caseMeasurable (diagramElementTarget);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.NOTATION_ELEMENT_TARGET :
                {
                    NotationElementTarget notationElementTarget = (NotationElementTarget) theEObject;
                    Object result = caseNotationElementTarget (notationElementTarget);
                    if (result == null) result = caseAuditable (notationElementTarget);

                    if (result == null) result = caseMeasurable (notationElementTarget);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.METRIC_CONTAINER :
                {
                    MetricContainer metricContainer = (MetricContainer) theEObject;
                    Object result = caseMetricContainer (metricContainer);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.METRIC_RULE :
                {
                    MetricRule metricRule = (MetricRule) theEObject;
                    Object result = caseMetricRule (metricRule);
                    if (result == null) result = caseRuleBase (metricRule);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.AUDITED_METRIC_TARGET :
                {
                    AuditedMetricTarget auditedMetricTarget = (AuditedMetricTarget) theEObject;
                    Object result = caseAuditedMetricTarget (auditedMetricTarget);
                    if (result == null) result = caseAuditable (auditedMetricTarget);

                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.AUDITABLE :
                {
                    Auditable auditable = (Auditable) theEObject;
                    Object result = caseAuditable (auditable);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } case GMFMapPackage.MEASURABLE :
                {
                    Measurable measurable = (Measurable) theEObject;
                    Object result = caseMeasurable (measurable);
                    if (result == null) result = defaultCase (theEObject);

                    return result;
                } default :
                return defaultCase (theEObject);
        }
    }

    public Object caseMappingEntry (MappingEntry object) {
        return null;
    }

    public Object caseNeedsContainment (NeedsContainment object) {
        return null;
    }

    public Object caseNodeReference (NodeReference object) {
        return null;
    }

    public Object caseChildReference (ChildReference object) {
        return null;
    }

    public Object caseTopNodeReference (TopNodeReference object) {
        return null;
    }

    public Object caseNodeMapping (NodeMapping object) {
        return null;
    }

    public Object caseLabelNodeMapping (LabelNodeMapping object) {
        return null;
    }

    public Object caseCompartmentMapping (CompartmentMapping object) {
        return null;
    }

    public Object caseLinkMapping (LinkMapping object) {
        return null;
    }

    public Object caseCanvasMapping (CanvasMapping object) {
        return null;
    }

    public Object caseLabelMapping (LabelMapping object) {
        return null;
    }

    public Object caseLabelFlavour (LabelFlavour object) {
        return null;
    }

    public Object caseMapping (Mapping object) {
        return null;
    }

    public Object caseConstraint (Constraint object) {
        return null;
    }

    public Object caseLinkConstraints (LinkConstraints object) {
        return null;
    }

    public Object caseValueExpression (ValueExpression object) {
        return null;
    }

    public Object caseElementInitializer (ElementInitializer object) {
        return null;
    }

    public Object caseFeatureSeqInitializer (FeatureSeqInitializer object) {
        return null;
    }

    public Object caseFeatureValueSpec (FeatureValueSpec object) {
        return null;
    }

    public Object caseMenuOwner (MenuOwner object) {
        return null;
    }

    public Object caseToolOwner (ToolOwner object) {
        return null;
    }

    public Object caseAppearanceSteward (AppearanceSteward object) {
        return null;
    }

    public Object caseAuditContainer (AuditContainer object) {
        return null;
    }

    public Object caseAuditRule (AuditRule object) {
        return null;
    }

    public Object caseRuleBase (RuleBase object) {
        return null;
    }

    public Object caseDomainElementTarget (DomainElementTarget object) {
        return null;
    }

    public Object caseDomainAttributeTarget (DomainAttributeTarget object) {
        return null;
    }

    public Object caseDiagramElementTarget (DiagramElementTarget object) {
        return null;
    }

    public Object caseNotationElementTarget (NotationElementTarget object) {
        return null;
    }

    public Object caseMetricContainer (MetricContainer object) {
        return null;
    }

    public Object caseMetricRule (MetricRule object) {
        return null;
    }

    public Object caseAuditedMetricTarget (AuditedMetricTarget object) {
        return null;
    }

    public Object caseAuditable (Auditable object) {
        return null;
    }

    public Object caseMeasurable (Measurable object) {
        return null;
    }

    public Object defaultCase (EObject object) {
        return null;
    }

}

