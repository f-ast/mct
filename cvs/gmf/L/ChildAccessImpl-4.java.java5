package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.codegen.util.CodeGenUtil;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.gmfgraph.ChildAccess;

import org.eclipse.gmf.gmfgraph.Figure;

import org.eclipse.gmf.gmfgraph.FigureAccessor;

import org.eclipse.gmf.gmfgraph.FigureDescriptor;

import org.eclipse.gmf.gmfgraph.FigureRef;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.RealFigure;

public class ChildAccessImpl extends EObjectImpl implements ChildAccess {
    protected static final String ACCESSOR_EDEFAULT = null;
    protected String accessor = ACCESSOR_EDEFAULT;
    protected Figure figure;

    protected ChildAccessImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getChildAccess ();
    }

    public FigureDescriptor getOwner () {
        if (eContainerFeatureID != GMFGraphPackage.CHILD_ACCESS__OWNER) return null;

        return (FigureDescriptor) eContainer ();
    }

    public NotificationChain basicSetOwner (FigureDescriptor newOwner, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newOwner, GMFGraphPackage.CHILD_ACCESS__OWNER, msgs);
        return msgs;
    }

    public void setOwner (FigureDescriptor newOwner) {
        if (newOwner != eInternalContainer () || (eContainerFeatureID != GMFGraphPackage.CHILD_ACCESS__OWNER && newOwner != null)) {
            if (EcoreUtil.isAncestor (this, newOwner)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newOwner != null) msgs = ((InternalEObject) newOwner).eInverseAdd (this, GMFGraphPackage.FIGURE_DESCRIPTOR__ACCESSORS, FigureDescriptor.class, msgs);

            msgs = basicSetOwner (newOwner, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.CHILD_ACCESS__OWNER, newOwner, newOwner));

    }

    public String getAccessorGen () {
        return accessor;
    }

    public String getAccessor () {
        if (getAccessorGen () == null || getAccessorGen ().trim ().length () == 0) {
            final Figure fig = getFigure ();
            if (fig == null) {
                return "getFigure" + CodeGenUtil.capName (CodeGenUtil.validJavaIdentifier (String.valueOf ((Object) null)));
            }
            if (fig.eContainer () instanceof FigureAccessor) {
                return ((FigureAccessor) fig.eContainer ()).getAccessor ();
            }
            if (fig instanceof FigureRef) {
                return "getFigure" + CodeGenUtil.capName (CodeGenUtil.validJavaIdentifier (String.valueOf (((FigureRef) fig).getFigure ().getName ())));
            }
            assert fig instanceof RealFigure;
            return "getFigure" + CodeGenUtil.capName (CodeGenUtil.validJavaIdentifier (String.valueOf (((RealFigure) fig).getName ())));
        }
        return CodeGenUtil.validJavaIdentifier (getAccessorGen ());
    }

    public void setAccessor (String newAccessor) {
        String oldAccessor = accessor;
        accessor = newAccessor;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.CHILD_ACCESS__ACCESSOR, oldAccessor, accessor));

    }

    public Figure getFigure () {
        if (figure != null && figure.eIsProxy ()) {
            InternalEObject oldFigure = (InternalEObject) figure;
            figure = (Figure) eResolveProxy (oldFigure);
            if (figure != oldFigure) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGraphPackage.CHILD_ACCESS__FIGURE, oldFigure, figure));

            }
        }
        return figure;
    }

    public Figure basicGetFigure () {
        return figure;
    }

    public void setFigure (Figure newFigure) {
        Figure oldFigure = figure;
        figure = newFigure;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.CHILD_ACCESS__FIGURE, oldFigure, figure));

    }

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.CHILD_ACCESS__OWNER :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetOwner ((FigureDescriptor) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.CHILD_ACCESS__OWNER :
                return basicSetOwner (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGraphPackage.CHILD_ACCESS__OWNER :
                return eInternalContainer ().eInverseRemove (this, GMFGraphPackage.FIGURE_DESCRIPTOR__ACCESSORS, FigureDescriptor.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.CHILD_ACCESS__OWNER :
                return getOwner ();
            case GMFGraphPackage.CHILD_ACCESS__ACCESSOR :
                return getAccessor ();
            case GMFGraphPackage.CHILD_ACCESS__FIGURE :
                if (resolve) return getFigure ();

                return basicGetFigure ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.CHILD_ACCESS__OWNER :
                setOwner ((FigureDescriptor) newValue);
                return;
            case GMFGraphPackage.CHILD_ACCESS__ACCESSOR :
                setAccessor ((String) newValue);
                return;
            case GMFGraphPackage.CHILD_ACCESS__FIGURE :
                setFigure ((Figure) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.CHILD_ACCESS__OWNER :
                setOwner ((FigureDescriptor) null);
                return;
            case GMFGraphPackage.CHILD_ACCESS__ACCESSOR :
                setAccessor (ACCESSOR_EDEFAULT);
                return;
            case GMFGraphPackage.CHILD_ACCESS__FIGURE :
                setFigure ((Figure) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.CHILD_ACCESS__OWNER :
                return getOwner () != null;
            case GMFGraphPackage.CHILD_ACCESS__ACCESSOR :
                return ACCESSOR_EDEFAULT == null ? accessor != null : ! ACCESSOR_EDEFAULT.equals (accessor);
            case GMFGraphPackage.CHILD_ACCESS__FIGURE :
                return figure != null;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (accessor: ");
        result.append (accessor);
        result.append (')');
        return result.toString ();
    }

}

