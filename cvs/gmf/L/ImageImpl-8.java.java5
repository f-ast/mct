package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.runtime.notation.Image;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class ImageImpl extends NotationEObjectImpl implements Image {
    protected static final byte [] DATA_EDEFAULT = null;
    protected byte [] data = DATA_EDEFAULT;

    protected ImageImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.IMAGE;
    }

    public byte [] getData () {
        return data;
    }

    public void setData (byte [] newData) {
        byte [] oldData = data;
        data = newData;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.IMAGE__DATA, oldData, data));

    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.IMAGE__DATA :
                return getData ();
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.IMAGE__DATA :
                setData ((byte []) newValue);
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.IMAGE__DATA :
                setData (DATA_EDEFAULT);
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.IMAGE__DATA :
                return DATA_EDEFAULT == null ? data != null : ! DATA_EDEFAULT.equals (data);
        }
        return eDynamicIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (data: ");
        result.append (data);
        result.append (')');
        return result.toString ();
    }

}

