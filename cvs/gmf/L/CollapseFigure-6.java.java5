package org.eclipse.gmf.runtime.diagram.ui.internal.figures;

import org.eclipse.draw2d.Graphics;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.RectangleFigure;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramUIPluginImages;

import org.eclipse.swt.graphics.Image;

public class CollapseFigure extends RectangleFigure {
    private boolean collapsed = false;
    private IFigure containerFigure = null;

    public CollapseFigure () {
        super ();
    }

    public CollapseFigure (IFigure containerFigure) {
        super ();
        this.containerFigure = containerFigure;
    }

    protected void fillShape (Graphics graphics) {
        Image img;
        if (isCollapsed ()) img = DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_HANDLE_EXPAND);
        else img = DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_HANDLE_COLLAPSE);

        graphics.drawImage (img, getBounds ().x, getBounds ().y);
    }

    protected void outlineShape (Graphics graphics) {
    }

    public boolean isCollapsed () {
        return collapsed;
    }

    public void setCollapsed (boolean b) {
        collapsed = b;
        revalidate ();
        repaint ();
    }

    public boolean isVisible () {
        boolean visibility = super.isVisible ();
        if (visibility && containerFigure != null) {
            Rectangle containerBounds = containerFigure.getClientArea ().getCopy ();
            containerFigure.translateToAbsolute (containerBounds);
            translateToRelative (containerBounds);
            return containerBounds.contains (getBounds ());
        }
        return visibility;
    }

}

