package org.eclipse.gmf.runtime.diagram.ui.resources.editor.document;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.transaction.DemultiplexingListener;

import org.eclipse.emf.transaction.NotificationFilter;

import org.eclipse.emf.transaction.ResourceSetListener;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.gmf.runtime.notation.Diagram;

public class DiagramModificationListener {
    private ResourceSetListener diagramChangeListener = null;
    private TransactionalEditingDomain editingDomain;

    public DiagramModificationListener (final AbstractDocumentProvider documentProvider, final DiagramDocument document) {
        final Diagram diagram = document.getDiagram ();
        editingDomain = TransactionUtil.getEditingDomain (diagram);
        NotificationFilter diagramResourceModifiedFilter = NotificationFilter.createNotifierFilter (diagram.eResource ()).and (NotificationFilter.createEventTypeFilter (Notification.SET).or (NotificationFilter.createEventTypeFilter (Notification.UNSET))).and (NotificationFilter.createFeatureFilter (Resource.class, Resource.RESOURCE__IS_MODIFIED));
        if (diagramChangeListener == null) {
            diagramChangeListener = new DemultiplexingListener (diagramResourceModifiedFilter) {

                protected void handleNotification (TransactionalEditingDomain domain, Notification notification) {
                    if (diagram != null && notification.getNotifier () instanceof Resource) {
                        Resource notifierResource = (Resource) notification.getNotifier ();
                        EList contents = notifierResource.getContents ();
                        if (! contents.isEmpty ()) {
                            Object root = contents.get (0);
                            if (notification.getNewBooleanValue () == true && notification.getOldBooleanValue () == false) {
                                if (root instanceof EObject && ((EObject) root).eResource () != null && ((EObject) root).eResource ().equals (notifierResource) && notifierResource.isLoaded ()) {
                                    document.setContent (document.getContent ());
                                }
                            }
                        }
                    }
                }

            }

            ;
        }
    }

    public void startListening () {
        getEditingDomain ().addResourceSetListener (diagramChangeListener);
    }

    public void stopListening () {
        getEditingDomain ().removeResourceSetListener (diagramChangeListener);
    }

    protected TransactionalEditingDomain getEditingDomain () {
        return editingDomain;
    }

}

