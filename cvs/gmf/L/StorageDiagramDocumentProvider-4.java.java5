package org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document;

import org.eclipse.core.resources.IStorage;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.ui.IEditorInput;

import org.eclipse.ui.IStorageEditorInput;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocumentProvider;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.PathEditorInputProxy;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.utils.DiagramIOUtil;

import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;

import org.eclipse.gmf.runtime.notation.Diagram;

public class StorageDiagramDocumentProvider extends StorageDocumentProvider implements IDiagramDocumentProvider {

    protected IDocument createEmptyDocument () {
        return new DiagramDocument ();
    }

    public IDiagramDocument getDiagramDocument (Object element) {
        IDocument doc = getDocument (element);
        if (doc instanceof IDiagramDocument) return (IDiagramDocument) doc;

        return null;
    }

    protected void disposeElementInfo (Object element, ElementInfo info) {
        super.disposeElementInfo (element, info);
        Object content = info.fDocument.getContent ();
        if (content instanceof Diagram && info.fDocument instanceof IDiagramDocument) {
            MEditingDomain domain = ((IDiagramDocument) info.fDocument).getEditingDomain ();
            DiagramIOUtil.unload (domain, (Diagram) content);
            IDiagramDocument diagramDocument = (IDiagramDocument) info.fDocument;
            diagramDocument.disableDiagramListener ();
        }
    }

    protected void setDocumentContentFromStorage (IDocument document, IStorage storage) throws CoreException {
        IDiagramDocument diagramDocument = (IDiagramDocument) document;
        MEditingDomain domain = diagramDocument.getEditingDomain ();
        Diagram diagram = DiagramIOUtil.load (domain, storage, true, getProgressMonitor ());
        document.setContent (diagram);
    }

    protected boolean setDocumentContent (IDocument document, IEditorInput editorInput) throws CoreException {
        if (editorInput instanceof PathEditorInputProxy) {
            PathEditorInputProxy diagramElement = (PathEditorInputProxy) editorInput;
            ((IDiagramDocument) document).setEditingDomain (diagramElement.getEditingDomain ());
            boolean docContentSet = super.setDocumentContent (document, editorInput);
            return docContentSet;
        }
        return super.setDocumentContent (document, editorInput);
    }

    public IEditorInput createInputWithEditingDomain (IEditorInput editorInput, MEditingDomain domain) {
        if (editorInput instanceof IStorageEditorInput) return new StorageEditorInputProxy ((IStorageEditorInput) editorInput, domain);

        assert false;
        return null;
    }

}

