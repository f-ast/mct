package org.eclipse.gmf.internal.xpand.util;

import java.io.IOException;

import java.io.Reader;

import org.eclipse.gmf.internal.xpand.xtend.ast.ExtensionFile;

import org.eclipse.gmf.internal.xpand.xtend.ast.XtendResource;

import org.eclipse.gmf.internal.xpand.xtend.parser.XtendLexer;

import org.eclipse.gmf.internal.xpand.xtend.parser.XtendParser;

public class XtendResourceParser {

    public XtendResource parse (final Reader source, final String name) throws IOException, ParserException {
        ExtensionFile tpl = null;
        XtendLexer scanner = null;
        final char [] buffer = new StreamConverter ().toCharArray (source);
        try {
            scanner = new XtendLexer (buffer, name);
            XtendParser parser = new XtendParser (scanner);
            scanner.lexer (parser);
            tpl = parser.parser ();
        } catch (final Exception e) {
            ParserException.ErrorLocationInfo [] errors = scanner.getErrors ();
            if (errors.length == 0) {
                throw new IOException ("Unexpected exception while parsing");
            } else {
                throw new ParserException (errors);
            }
        }
        if (tpl != null) {
            tpl.setFullyQualifiedName (name);
            return tpl;
        }
        ParserException.ErrorLocationInfo [] errors = scanner.getErrors ();
        assert errors.length > 0 : "otherwise, no reason not to get template";
        throw new ParserException (errors);
    }

}

