package org.eclipse.gmf.runtime.emf.type.core.requests;

import java.text.MessageFormat;

import java.util.Collections;

import java.util.List;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.emf.type.core.ClientContextManager;

import org.eclipse.gmf.runtime.emf.type.core.IClientContext;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypeDebugOptions;

import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePlugin;

import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePluginStatusCodes;

import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.EMFTypeCoreMessages;

public class CreateElementRequest extends AbstractEditCommandRequest {
    private EObject container;
    private EReference containmentFeature;
    private final IElementType elementType;
    private EObject newElement;
    private ICommand editContextCommand;
    private boolean requestingEditContext;
    private GetEditContextRequest editContextRequest;

    public CreateElementRequest (TransactionalEditingDomain editingDomain, EObject container, IElementType elementType) {
        this (editingDomain, container, elementType, null);
    }

    public CreateElementRequest (EObject container, IElementType elementType) {
        this (TransactionUtil.getEditingDomain (container), container, elementType, null);
    }

    public CreateElementRequest (IElementType elementType) {
        this (null, null, elementType, null);
    }

    public CreateElementRequest (TransactionalEditingDomain editingDomain, IElementType elementType) {
        this (editingDomain, null, elementType, null);
    }

    public CreateElementRequest (TransactionalEditingDomain editingDomain, EObject container, IElementType elementType, EReference containmentFeature) {
        super (editingDomain);
        this.container = container;
        this.elementType = elementType;
        this.containmentFeature = containmentFeature;
    }

    public CreateElementRequest (EObject container, IElementType elementType, EReference containmentFeature) {
        this (TransactionUtil.getEditingDomain (container), container, elementType, containmentFeature);
    }

    public EObject getNewElement () {
        return newElement;
    }

    public void setNewElement (EObject element) {
        this.newElement = element;
    }

    public EReference getContainmentFeature () {
        return containmentFeature;
    }

    public void setContainmentFeature (EReference containmentFeature) {
        if (this.containmentFeature != containmentFeature) {
            this.containmentFeature = containmentFeature;
            invalidateEditHelperContext ();
        }
    }

    public void initializeContainmentFeature (EReference feature) {
        if (this.containmentFeature != feature) {
            this.containmentFeature = feature;
        }
    }

    public EObject getContainer () {
        return container;
    }

    public EObject createContainer () {
        Object result = null;
        ICommand contextCommand = getEditContextCommand ();
        if (contextCommand != null && contextCommand.canExecute ()) {
            try {
                contextCommand.execute (new NullProgressMonitor (), null);
                CommandResult commandResult = contextCommand.getCommandResult ();
                if (commandResult.getStatus ().getCode () == IStatus.OK) {
                    result = commandResult.getReturnValue ();
                }
            } catch (ExecutionException e) {
                Trace.catching (EMFTypePlugin.getPlugin (), EMFTypeDebugOptions.EXCEPTIONS_CATCHING, getClass (), "createContainer", e);
                Log.error (EMFTypePlugin.getPlugin (), EMFTypePluginStatusCodes.COMMAND_FAILURE, e.getLocalizedMessage (), e);
            }
        }
        if (result == null || result instanceof EObject) {
            container = (EObject) result;
        }
        return getContainer ();
    }

    private ICommand getEditContextCommand () {
        if (editContextCommand == null) {
            requestingEditContext = true;
            try {
                editContextCommand = getElementType ().getEditCommand (getEditContextRequest ());
            } finally {
                requestingEditContext = false;
            }
        }
        return editContextCommand;
    }

    private GetEditContextRequest getEditContextRequest () {
        if (editContextRequest == null) {
            editContextRequest = new GetEditContextRequest (getEditingDomain (), this, getElementType ());
            editContextRequest.setEditContext (getContainer ());
            editContextRequest.setClientContext (getClientContext ());
        }
        return editContextRequest;
    }

    public void setContainer (EObject container) {
        if (this.container != container) {
            this.container = container;
            if (! requestingEditContext) {
                editContextCommand = null;
                if (editContextRequest != null) {
                    editContextRequest.setEditContext (container);
                }
            }
            invalidateContainmentFeature ();
        }
    }

    public void setClientContext (IClientContext clientContext) {
        super.setClientContext (clientContext);
        if (editContextRequest != null) {
            editContextRequest.setClientContext (clientContext);
        }
    }

    public IClientContext getClientContext () {
        IClientContext result = super.getClientContext ();
        IElementType type = getElementType ();
        if (result == null && type != null) {
            result = ClientContextManager.getInstance ().getBinding (type);
        }
        return result;
    }

    public IElementType getElementType () {
        return elementType;
    }

    public List getElementsToEdit () {
        if (getContainer () != null) {
            return Collections.singletonList (getContainer ());
        }
        return super.getElementsToEdit ();
    }

    protected String getDefaultLabel () {
        String label = MessageFormat.format (EMFTypeCoreMessages.Request_Label_Create, new Object [] {getElementType ().getDisplayName ()});
        return label;
    }

    public Object getEditHelperContext () {
        ICommand contextCommand = getEditContextCommand ();
        if (contextCommand != null && contextCommand.canExecute ()) {
            return getEditContextRequest ().getEditContext ();
        }
        return null;
    }

    public void setParameter (String parameterName, Object value) {
        super.setParameter (parameterName, value);
    }

    protected void invalidateEditHelperContext () {
        if (! requestingEditContext) {
            editContextCommand = null;
            editContextRequest = null;
        }
    }

    protected void invalidateContainmentFeature () {
        if (! requestingEditContext) {
            containmentFeature = null;
        }
    }

    public TransactionalEditingDomain getEditingDomain () {
        TransactionalEditingDomain result = super.getEditingDomain ();
        EObject c = getContainer ();
        if (result == null && c != null) {
            result = TransactionUtil.getEditingDomain (c);
        }
        return result;
    }

}

