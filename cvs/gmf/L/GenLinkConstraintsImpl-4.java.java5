package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.codegen.gmfgen.FeatureModelFacet;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenConstraint;

import org.eclipse.gmf.codegen.gmfgen.GenLink;

import org.eclipse.gmf.codegen.gmfgen.GenLinkConstraints;

import org.eclipse.gmf.codegen.gmfgen.LinkModelFacet;

import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;

public class GenLinkConstraintsImpl extends EObjectImpl implements GenLinkConstraints {
    protected GenConstraint sourceEnd = null;
    protected GenConstraint targetEnd = null;

    protected GenLinkConstraintsImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenLinkConstraints ();
    }

    public GenLink getLink () {
        if (eContainerFeatureID != GMFGenPackage.GEN_LINK_CONSTRAINTS__LINK) return null;

        return (GenLink) eContainer ();
    }

    public void setLink (GenLink newLink) {
        if (newLink != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_LINK_CONSTRAINTS__LINK && newLink != null)) {
            if (EcoreUtil.isAncestor (this, newLink)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newLink != null) msgs = ((InternalEObject) newLink).eInverseAdd (this, GMFGenPackage.GEN_LINK__CREATION_CONSTRAINTS, GenLink.class, msgs);

            msgs = eBasicSetContainer ((InternalEObject) newLink, GMFGenPackage.GEN_LINK_CONSTRAINTS__LINK, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LINK_CONSTRAINTS__LINK, newLink, newLink));

    }

    public GenConstraint getSourceEnd () {
        return sourceEnd;
    }

    public NotificationChain basicSetSourceEnd (GenConstraint newSourceEnd, NotificationChain msgs) {
        GenConstraint oldSourceEnd = sourceEnd;
        sourceEnd = newSourceEnd;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LINK_CONSTRAINTS__SOURCE_END, oldSourceEnd, newSourceEnd);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setSourceEnd (GenConstraint newSourceEnd) {
        if (newSourceEnd != sourceEnd) {
            NotificationChain msgs = null;
            if (sourceEnd != null) msgs = ((InternalEObject) sourceEnd).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_LINK_CONSTRAINTS__SOURCE_END, null, msgs);

            if (newSourceEnd != null) msgs = ((InternalEObject) newSourceEnd).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_LINK_CONSTRAINTS__SOURCE_END, null, msgs);

            msgs = basicSetSourceEnd (newSourceEnd, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LINK_CONSTRAINTS__SOURCE_END, newSourceEnd, newSourceEnd));

    }

    public GenConstraint getTargetEnd () {
        return targetEnd;
    }

    public NotificationChain basicSetTargetEnd (GenConstraint newTargetEnd, NotificationChain msgs) {
        GenConstraint oldTargetEnd = targetEnd;
        targetEnd = newTargetEnd;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LINK_CONSTRAINTS__TARGET_END, oldTargetEnd, newTargetEnd);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setTargetEnd (GenConstraint newTargetEnd) {
        if (newTargetEnd != targetEnd) {
            NotificationChain msgs = null;
            if (targetEnd != null) msgs = ((InternalEObject) targetEnd).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_LINK_CONSTRAINTS__TARGET_END, null, msgs);

            if (newTargetEnd != null) msgs = ((InternalEObject) newTargetEnd).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_LINK_CONSTRAINTS__TARGET_END, null, msgs);

            msgs = basicSetTargetEnd (newTargetEnd, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LINK_CONSTRAINTS__TARGET_END, newTargetEnd, newTargetEnd));

    }

    public GenClass getLinkClass () {
        GenLink owningLink = getLink ();
        if (owningLink != null) {
            if (owningLink.getModelFacet () instanceof TypeLinkModelFacet) {
                TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) owningLink.getModelFacet ();
                return modelFacet.getMetaClass ();
            }
        }
        return null;
    }

    public GenClass getSourceEndContextClass () {
        GenLink owningLink = getLink ();
        if (owningLink != null) {
            LinkModelFacet linkFacet = owningLink.getModelFacet ();
            if (linkFacet instanceof TypeLinkModelFacet) {
                GenFeature metaFeature = ((TypeLinkModelFacet) linkFacet).getContainmentMetaFeature ();
                return (metaFeature != null) ? metaFeature.getGenClass () : null;
            } else if (linkFacet instanceof FeatureModelFacet) {
                GenFeature metaFeature = ((FeatureModelFacet) linkFacet).getMetaFeature ();
                return (metaFeature != null) ? metaFeature.getGenClass () : null;
            }

        }
        return null;
    }

    public GenClass getTargetEndContextClass () {
        GenLink owningLink = getLink ();
        if (owningLink != null) {
            LinkModelFacet linkFacet = owningLink.getModelFacet ();
            if (linkFacet instanceof TypeLinkModelFacet) {
                GenFeature targetFeature = ((TypeLinkModelFacet) linkFacet).getTargetMetaFeature ();
                return (targetFeature != null) ? targetFeature.getTypeGenClass () : null;
            } else if (linkFacet instanceof FeatureModelFacet) {
                GenFeature metaFeature = ((FeatureModelFacet) linkFacet).getMetaFeature ();
                return (metaFeature != null) ? metaFeature.getTypeGenClass () : null;
            }

        }
        return null;
    }

    public String getConstraintsInstanceFieldName () {
        return (getLink () != null) ? getLink ().getUniqueIdentifier () : "";
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__LINK :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_LINK_CONSTRAINTS__LINK, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__LINK :
                return eBasicSetContainer (null, GMFGenPackage.GEN_LINK_CONSTRAINTS__LINK, msgs);
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__SOURCE_END :
                return basicSetSourceEnd (null, msgs);
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__TARGET_END :
                return basicSetTargetEnd (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__LINK :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_LINK__CREATION_CONSTRAINTS, GenLink.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__LINK :
                return getLink ();
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__SOURCE_END :
                return getSourceEnd ();
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__TARGET_END :
                return getTargetEnd ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__LINK :
                setLink ((GenLink) newValue);
                return;
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__SOURCE_END :
                setSourceEnd ((GenConstraint) newValue);
                return;
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__TARGET_END :
                setTargetEnd ((GenConstraint) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__LINK :
                setLink ((GenLink) null);
                return;
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__SOURCE_END :
                setSourceEnd ((GenConstraint) null);
                return;
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__TARGET_END :
                setTargetEnd ((GenConstraint) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__LINK :
                return getLink () != null;
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__SOURCE_END :
                return sourceEnd != null;
            case GMFGenPackage.GEN_LINK_CONSTRAINTS__TARGET_END :
                return targetEnd != null;
        }
        return super.eIsSet (featureID);
    }

}

