package org.eclipse.gmf.internal.bridge.resolver;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.ecore.EAttribute;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.EReference;

public class StructureResolver {
    private Vocabulary nodeVocabulary;
    private Vocabulary linkVocabulary;
    private Vocabulary linkSourceVocabulary;
    private Vocabulary linkTargetVocabulary;

    public StructureResolver () {
        nodeVocabulary = new Vocabulary ();
        nodeVocabulary.add (new String [] {"node", "item"});
        linkVocabulary = new Vocabulary ();
        linkVocabulary.add (new String [] {"link", "connection", "relation", "dependency", "flow"});
        linkSourceVocabulary = new Vocabulary ();
        linkSourceVocabulary.add (new String [] {"source", "src", "from"});
        linkTargetVocabulary = new Vocabulary ();
        linkTargetVocabulary.add (new String [] {"destination", "dst", "dest", "to"});
    }

    protected boolean guessNode (EClass type) {
        return nodeVocabulary.containsWords (type.getName ());
    }

    protected boolean guessLink (EClass type) {
        return linkVocabulary.containsWords (type.getName ());
    }

    protected EReference guessLinkSource (EReference [] refs) {
        for (int i = 0;
        i < refs.length; i ++) {
            if (linkSourceVocabulary.containsWords (refs [i].getName ())) {
                return refs [i];
            }
        }
        return null;
    }

    protected EReference guessLinkTarget (EReference [] refs) {
        for (int i = 0;
        i < refs.length; i ++) {
            if (linkTargetVocabulary.containsWords (refs [i].getName ())) {
                return refs [i];
            }
        }
        return null;
    }

    public TypePattern resolve (EClass type, EPackage domainPackage) {
        if (type.isAbstract () || type.isInterface ()) {
            return null;
        }
        EReference [] containments = getContainments (type, domainPackage);
        if (containments.length == 0) {
            return null;
        }
        EAttribute [] labels = getLabels (type);
        EReference [] refs = getEAllPotentialRefs (type, true);
        if (refs.length == 0 || ! type.getEAllContainments ().isEmpty () || guessNode (type)) {
            refs = getEAllPotentialRefs (type, false);
            return new NodePattern (type, labels, refs);
        }
        EReference source;
        EReference target;
        if (refs.length == 1) {
            source = null;
            target = refs [0];
        } else {
            source = guessLinkSource (refs);
            target = guessLinkTarget (refs);
            if (source == null) {
                source = target == refs [0] ? refs [1] : refs [0];
            }
            if (target == null) {
                target = source == refs [1] ? refs [0] : refs [1];
            }
        }
        return new TypeLinkPattern (type, labels, source, target);
    }

    protected EAttribute [] getLabels (EClass type) {
        List attrs = new ArrayList ();
        for (Iterator it = type.getEAllAttributes ().iterator ();
        it.hasNext ();) {
            EAttribute attr = (EAttribute) it.next ();
            attrs.add (attr);
        }
        return (EAttribute []) attrs.toArray (new EAttribute [attrs.size ()]);
    }

    protected EReference [] getEAllPotentialRefs (EClass type, boolean forLink) {
        List refs = new ArrayList ();
        for (Iterator it = type.getEAllReferences ().iterator ();
        it.hasNext ();) {
            EReference ref = (EReference) it.next ();
            EClass refType = ref.getEReferenceType ();
            if (forLink && (refType.isSuperTypeOf (type) || ref.isMany ())) {
                continue;
            }
            boolean samePackage = refType.getEPackage ().equals (type.getEPackage ());
            if (! ref.isDerived () && ! ref.isContainer () && ! ref.isContainment () && samePackage) {
                refs.add (ref);
            }
        }
        return (EReference []) refs.toArray (new EReference [refs.size ()]);
    }

    protected EReference [] getContainments (EClass type, EPackage domainPackage) {
        List refs = new ArrayList ();
        for (Iterator it = domainPackage.eAllContents ();
        it.hasNext ();) {
            EObject element = (EObject) it.next ();
            if (element instanceof EReference) {
                EReference ref = (EReference) element;
                if (ref.isContainment () && ref.getEReferenceType ().isSuperTypeOf (type) && ref.getEContainingClass () != type) {
                    refs.add (ref);
                }
            }
        }
        return (EReference []) refs.toArray (new EReference [refs.size ()]);
    }

}

