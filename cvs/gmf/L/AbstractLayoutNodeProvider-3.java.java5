package org.eclipse.gmf.runtime.diagram.ui.services.layout;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

abstract public class AbstractLayoutNodeProvider extends AbstractProvider implements ILayoutNodeProvider {

    protected View getContainer (IOperation operation) {
        View container = null;
        if (operation instanceof ILayoutNodeOperation) {
            Iterator nodes = ((ILayoutNodeOperation) operation).getLayoutNodes ().listIterator ();
            if (nodes.hasNext ()) {
                Node node = ((ILayoutNode) nodes.next ()).getNode ();
                container = ViewUtil.getContainerView (node);
            }
        } else {
            return null;
        }
        return container;
    }

    protected Map getNodeToSizeMap (ILayoutNodeOperation operation) {
        List layoutNodes = operation.getLayoutNodes ();
        Map viewsToSizesMap = new HashMap (layoutNodes.size ());
        Iterator nodes = layoutNodes.listIterator ();
        while (nodes.hasNext ()) {
            ILayoutNode layoutNode = ((ILayoutNode) nodes.next ());
            Node node = layoutNode.getNode ();
            viewsToSizesMap.put (node, new org.eclipse.draw2d.geometry.Dimension (layoutNode.getWidth (), layoutNode.getHeight ()));
        }
        return viewsToSizesMap;
    }

}

