package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.GenLink;

import org.eclipse.gmf.codegen.gmfgen.GenLinkLabel;

import org.eclipse.gmf.codegen.gmfgen.LinkLabelAlignment;

public class GenLinkLabelImpl extends GenLabelImpl implements GenLinkLabel {
    protected static final LinkLabelAlignment ALIGNMENT_EDEFAULT = LinkLabelAlignment.MIDDLE_LITERAL;
    protected LinkLabelAlignment alignment = ALIGNMENT_EDEFAULT;

    protected GenLinkLabelImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenLinkLabel ();
    }

    public GenLink getLink () {
        if (eContainerFeatureID != GMFGenPackage.GEN_LINK_LABEL__LINK) return null;

        return (GenLink) eContainer ();
    }

    public NotificationChain basicSetLink (GenLink newLink, NotificationChain msgs) {
        msgs = eBasicSetContainer ((InternalEObject) newLink, GMFGenPackage.GEN_LINK_LABEL__LINK, msgs);
        return msgs;
    }

    public void setLink (GenLink newLink) {
        if (newLink != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_LINK_LABEL__LINK && newLink != null)) {
            if (EcoreUtil.isAncestor (this, newLink)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());

            NotificationChain msgs = null;
            if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

            if (newLink != null) msgs = ((InternalEObject) newLink).eInverseAdd (this, GMFGenPackage.GEN_LINK__LABELS, GenLink.class, msgs);

            msgs = basicSetLink (newLink, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LINK_LABEL__LINK, newLink, newLink));

    }

    public LinkLabelAlignment getAlignment () {
        return alignment;
    }

    public void setAlignment (LinkLabelAlignment newAlignment) {
        LinkLabelAlignment oldAlignment = alignment;
        alignment = newAlignment == null ? ALIGNMENT_EDEFAULT : newAlignment;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_LINK_LABEL__ALIGNMENT, oldAlignment, alignment));

    }

    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_LINK_LABEL__LINK :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return basicSetLink ((GenLink) otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_LINK_LABEL__LINK :
                return basicSetLink (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_LINK_LABEL__LINK :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_LINK__LABELS, GenLink.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_LINK_LABEL__LINK :
                return getLink ();
            case GMFGenPackage.GEN_LINK_LABEL__ALIGNMENT :
                return getAlignment ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_LINK_LABEL__LINK :
                setLink ((GenLink) newValue);
                return;
            case GMFGenPackage.GEN_LINK_LABEL__ALIGNMENT :
                setAlignment ((LinkLabelAlignment) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_LINK_LABEL__LINK :
                setLink ((GenLink) null);
                return;
            case GMFGenPackage.GEN_LINK_LABEL__ALIGNMENT :
                setAlignment (ALIGNMENT_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_LINK_LABEL__LINK :
                return getLink () != null;
            case GMFGenPackage.GEN_LINK_LABEL__ALIGNMENT :
                return alignment != ALIGNMENT_EDEFAULT;
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (alignment: ");
        result.append (alignment);
        result.append (')');
        return result.toString ();
    }

    public GenDiagram getDiagram () {
        return getLink ().getDiagram ();
    }

    protected String getHostName () {
        return getLink ().getClassNamePrefix ();
    }

}

