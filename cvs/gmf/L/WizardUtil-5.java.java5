package org.eclipse.gmf.internal.bridge.wizards;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IResource;

import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.Path;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.gmf.gmfgraph.provider.GMFGraphEditPlugin;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.ui.IWorkbench;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.ui.IWorkbenchWindow;

import org.eclipse.ui.PartInitException;

import org.eclipse.ui.PlatformUI;

import org.eclipse.ui.internal.UIPlugin;

import org.eclipse.ui.part.FileEditorInput;

import org.eclipse.ui.part.ISetSelectionTarget;

public class WizardUtil {

    private WizardUtil () {
    }

    public static String getDefaultFileName (IStructuredSelection selection, String defaultName, String extension) {
        if (selection != null && ! selection.isEmpty ()) {
            Object selected = selection.getFirstElement ();
            if (selected instanceof IFile) {
                return getDefaultFileName ((IFile) selected, extension);
            }
        }
        return defaultName + '.' + extension;
    }

    public static String getDefaultFileName (IFile file, String extension) {
        String fileNameBase = getFileBaseName (file);
        String modelFilename = fileNameBase + '.' + extension;
        for (int i = 1;
        file.getParent ().findMember (modelFilename) != null; ++ i) {
            modelFilename = fileNameBase + i + '.' + extension;
        }
        return modelFilename;
    }

    public static String getCapped (String s) {
        if (s == null) {
            return "";
        }
        s = s.trim ();
        return s.length () > 1 ? Character.toUpperCase (s.charAt (0)) + s.substring (1) : s.toUpperCase ();
    }

    public static String getCapName (EObject element) {
        if (element instanceof EClass) {
            return WizardUtil.getCapName ((EClass) element);
        } else if (element instanceof EStructuralFeature) {
            return WizardUtil.getCapName ((EStructuralFeature) element);
        } else {
            return null;
        }

    }

    public static String getCapName (EClass type) {
        return getCapped (type.getName ());
    }

    public static String getCapName (EStructuralFeature feature) {
        EClass type = feature.getEContainingClass ();
        return getCapped (type.getName ()) + getCapped (feature.getName ());
    }

    public static void openEditor (URI uri) {
        IFile modelFile = null;
        String fileName = uri.toFileString ();
        if (fileName != null) {
            modelFile = ResourcesPlugin.getWorkspace ().getRoot ().getFileForLocation (new Path (fileName));
        }
        if (uri.toString ().startsWith ("platform:/resource")) {
            String path = uri.toString ().substring ("platform:/resources".length ());
            IResource workspaceResource = ResourcesPlugin.getWorkspace ().getRoot ().findMember (new Path (path));
            if (workspaceResource instanceof IFile) {
                modelFile = (IFile) workspaceResource;
            }
        }
        if (modelFile != null) {
            openEditor (modelFile);
        }
    }

    public static boolean openEditor (IFile modelFile) {
        IWorkbench workbench = PlatformUI.getWorkbench ();
        IWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow ();
        IWorkbenchPage page = workbenchWindow.getActivePage ();
        final IWorkbenchPart activePart = page.getActivePart ();
        if (activePart instanceof ISetSelectionTarget) {
            final ISelection targetSelection = new StructuredSelection (modelFile);
            workbenchWindow.getShell ().getDisplay ().asyncExec (new Runnable () {

                public void run () {
                    ((ISetSelectionTarget) activePart).selectReveal (targetSelection);
                }

            }

            );
        }
        try {
            page.openEditor (new FileEditorInput (modelFile), workbench.getEditorRegistry ().getDefaultEditor (modelFile.getFullPath ().toString ()).getId ());
        } catch (PartInitException exception) {
            MessageDialog.openError (workbenchWindow.getShell (), "Unable to open editor for " + modelFile, exception.getMessage ());
            return false;
        }
        return true;
    }

    public static void selectReveal (IWorkbench workbench, final ISelection selection) {
        IWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow ();
        IWorkbenchPage page = workbenchWindow.getActivePage ();
        final IWorkbenchPart activePart = page.getActivePart ();
        if (activePart instanceof ISetSelectionTarget) {
            workbench.getDisplay ().asyncExec (new Runnable () {

                public void run () {
                    ((ISetSelectionTarget) activePart).selectReveal (selection);
                }

            }

            );
        }
    }

    public static void openInEditor (IWorkbench workbench, IFile file) throws PartInitException {
        IWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow ();
        IWorkbenchPage page = workbenchWindow.getActivePage ();
        page.openEditor (new FileEditorInput (file), workbench.getEditorRegistry ().getDefaultEditor (file.getFullPath ().toString ()).getId ());
    }

    public static IFile findExistingFile (IStructuredSelection selection, String fileExt) {
        if (selection == null || selection.isEmpty () || false == selection.getFirstElement () instanceof IFile) {
            return null;
        }
        IFile selected = (IFile) selection.getFirstElement ();
        String fileNameBase = getFileBaseName (selected);
        IResource candidate = selected.getParent ().findMember (fileNameBase + '.' + fileExt);
        if (candidate != null && candidate.getType () == IResource.FILE && candidate.exists ()) {
            return (IFile) candidate;
        }
        return null;
    }

    private static String getFileBaseName (IFile file) {
        String fileNameBase = file.getName ();
        if (file.getFileExtension () != null) {
            fileNameBase = fileNameBase.substring (0, fileNameBase.length () - (file.getFileExtension ().length () + 1));
        }
        return fileNameBase;
    }

}

