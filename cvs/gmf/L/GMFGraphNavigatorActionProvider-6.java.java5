package org.eclipse.gmf.graphdef.editor.navigator;

import java.util.Iterator;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.emf.common.ui.URIEditorInput;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;

import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditor;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;

import org.eclipse.gmf.graphdef.editor.part.Messages;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.action.Action;

import org.eclipse.jface.action.IMenuManager;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.ui.IActionBars;

import org.eclipse.ui.IEditorInput;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.PartInitException;

import org.eclipse.ui.navigator.CommonActionProvider;

import org.eclipse.ui.navigator.ICommonActionConstants;

import org.eclipse.ui.navigator.ICommonActionExtensionSite;

import org.eclipse.ui.navigator.ICommonViewerWorkbenchSite;

import org.eclipse.ui.part.FileEditorInput;

public class GMFGraphNavigatorActionProvider extends CommonActionProvider {
    private boolean myContribute;
    private OpenDiagramAction myOpenDiagramAction;

    public void init (ICommonActionExtensionSite aSite) {
        super.init (aSite);
        if (aSite.getViewSite () instanceof ICommonViewerWorkbenchSite) {
            myContribute = true;
            makeActions ((ICommonViewerWorkbenchSite) aSite.getViewSite ());
        } else {
            myContribute = false;
        }
    }

    private void makeActions (ICommonViewerWorkbenchSite viewerSite) {
        myOpenDiagramAction = new OpenDiagramAction (viewerSite);
    }

    public void fillActionBars (IActionBars actionBars) {
        if (! myContribute) {
            return;
        }
        IStructuredSelection selection = (IStructuredSelection) getContext ().getSelection ();
        myOpenDiagramAction.selectionChanged (selection);
        if (myOpenDiagramAction.isEnabled ()) {
            actionBars.setGlobalActionHandler (ICommonActionConstants.OPEN, myOpenDiagramAction);
        }
    }

    public void fillContextMenu (IMenuManager menu) {
    }

    private class OpenDiagramAction extends Action {
        private Diagram myDiagram;
        private ICommonViewerWorkbenchSite myViewerSite;

        public OpenDiagramAction (ICommonViewerWorkbenchSite viewerSite) {
            super (Messages.NavigatorActionProvider_OpenDiagramActionName);
            myViewerSite = viewerSite;
        }

        public final void selectionChanged (IStructuredSelection selection) {
            myDiagram = null;
            if (selection.size () == 1) {
                Object selectedElement = selection.getFirstElement ();
                if (selectedElement instanceof GMFGraphNavigatorItem) {
                    selectedElement = ((GMFGraphNavigatorItem) selectedElement).getView ();
                } else if (selectedElement instanceof IAdaptable) {
                    selectedElement = ((IAdaptable) selectedElement).getAdapter (View.class);
                }

                if (selectedElement instanceof Diagram) {
                    Diagram diagram = (Diagram) selectedElement;
                    if (CanvasEditPart.MODEL_ID.equals (GMFGraphVisualIDRegistry.getModelID (diagram))) {
                        myDiagram = diagram;
                    }
                }
            }
            setEnabled (myDiagram != null);
        }

        public void run () {
            if (myDiagram == null || myDiagram.eResource () == null) {
                return;
            }
            IEditorInput editorInput = getEditorInput ();
            IWorkbenchPage page = myViewerSite.getPage ();
            try {
                page.openEditor (editorInput, GMFGraphDiagramEditor.ID);
            } catch (PartInitException e) {
                GMFGraphDiagramEditorPlugin.getInstance ().logError ("Exception while openning diagram", e);
            }
        }

        private IEditorInput getEditorInput () {
            for (Iterator it = myDiagram.eResource ().getContents ().iterator ();
            it.hasNext ();) {
                EObject nextEObject = (EObject) it.next ();
                if (nextEObject == myDiagram) {
                    return new FileEditorInput (WorkspaceSynchronizer.getFile (myDiagram.eResource ()));
                }
                if (nextEObject instanceof Diagram) {
                    break;
                }
            }
            URI uri = EcoreUtil.getURI (myDiagram);
            String editorName = uri.lastSegment () + "#" + myDiagram.eResource ().getContents ().indexOf (myDiagram);
            IEditorInput editorInput = new URIEditorInput (uri, editorName);
            return editorInput;
        }

    }

}

