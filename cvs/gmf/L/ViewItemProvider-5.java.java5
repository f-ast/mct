package org.eclipse.gmf.runtime.notation.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.provider.EModelElementItemProvider;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.runtime.notation.NotationEditPlugin;

import org.eclipse.gmf.runtime.notation.NotationFactory;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public class ViewItemProvider extends EModelElementItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public ViewItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addStylesPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addVisiblePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_View_visible_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_View_visible_feature", "_UI_View_type"), NotationPackage.Literals.VIEW__VISIBLE, true, false, false, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, null, null));
    }

    protected void addTypePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_View_type_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_View_type_feature", "_UI_View_type"), NotationPackage.Literals.VIEW__TYPE, true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addMutablePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_View_mutable_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_View_mutable_feature", "_UI_View_type"), NotationPackage.Literals.VIEW__MUTABLE, true, false, false, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, null, null));
    }

    protected void addSourceEdgesPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_View_sourceEdges_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_View_sourceEdges_feature", "_UI_View_type"), NotationPackage.Literals.VIEW__SOURCE_EDGES, true, false, false, null, null, null));
    }

    protected void addTargetEdgesPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_View_targetEdges_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_View_targetEdges_feature", "_UI_View_type"), NotationPackage.Literals.VIEW__TARGET_EDGES, true, false, false, null, null, null));
    }

    protected void addElementPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_View_element_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_View_element_feature", "_UI_View_type"), NotationPackage.Literals.VIEW__ELEMENT, true, false, false, null, null, null));
    }

    protected void addDiagramPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_View_diagram_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_View_diagram_feature", "_UI_View_type"), NotationPackage.Literals.VIEW__DIAGRAM, false, false, false, null, null, null));
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (NotationPackage.Literals.VIEW__PERSISTED_CHILDREN);
            childrenFeatures.add (NotationPackage.Literals.VIEW__STYLES);
            childrenFeatures.add (NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN);
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    protected void addStylesPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getString ("_UI_View_styles_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_View_styles_feature", "_UI_View_type"), NotationPackage.Literals.VIEW__STYLES, false));
    }

    public String getText (Object object) {
        View view = (View) object;
        return getString ("_UI_View_type") + " " + view.isVisible ();
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (View.class)) {
            case NotationPackage.VIEW__VISIBLE :
            case NotationPackage.VIEW__TYPE :
            case NotationPackage.VIEW__MUTABLE :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
            case NotationPackage.VIEW__PERSISTED_CHILDREN :
            case NotationPackage.VIEW__STYLES :
            case NotationPackage.VIEW__TRANSIENT_CHILDREN :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__PERSISTED_CHILDREN, NotationFactory.eINSTANCE.createNode ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createFillStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createLineStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createFontStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createTitleStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createSortingStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createDescriptionStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createRoutingStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createCanonicalStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createShapeStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createConnectorStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createPageStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createDrawerStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createGuideStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createFilteringStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createDiagramStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createImageStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__STYLES, NotationFactory.eINSTANCE.createImageBufferStyle ()));
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN, NotationFactory.eINSTANCE.createNode ()));
    }

    public String getCreateChildText (Object owner, Object feature, Object child, Collection selection) {
        Object childFeature = feature;
        Object childObject = child;
        boolean qualify = childFeature == NotationPackage.Literals.VIEW__PERSISTED_CHILDREN || childFeature == NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN;
        if (qualify) {
            return getString ("_UI_CreateChild_text2", new Object [] {getTypeText (childObject), getFeatureText (childFeature), getTypeText (owner)});
        }
        return super.getCreateChildText (owner, feature, child, selection);
    }

    public ResourceLocator getResourceLocator () {
        return NotationEditPlugin.INSTANCE;
    }

}

