package org.eclipse.gmf.runtime.common.ui.services.dnd.ide.internal.core;

import java.util.Hashtable;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.swt.dnd.TransferData;

import org.eclipse.ui.part.MarkerTransfer;

import org.eclipse.ui.part.ResourceTransfer;

import org.eclipse.ui.views.navigator.LocalSelectionTransfer;

import org.eclipse.gmf.runtime.common.ui.services.dnd.core.AbstractTransferAdapterProvider;

import org.eclipse.gmf.runtime.common.ui.services.dnd.core.TransferAgent;

import org.eclipse.gmf.runtime.common.ui.services.dnd.drag.ITransferDragSourceListener;

import org.eclipse.gmf.runtime.common.ui.services.dnd.drag.SelectionDragAdapter;

import org.eclipse.gmf.runtime.common.ui.services.dnd.drag.TransferDragSourceAdapter;

import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.ITransferDropTargetListener;

import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.SelectionDropAdapter;

import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.TransferDropTargetAdapter;

import org.eclipse.gmf.runtime.common.ui.services.dnd.ide.core.IDETransferId;

public final class IDETransferAdapterProvider extends AbstractTransferAdapterProvider {
    private Hashtable transferDragSourceTable = new Hashtable ();
    private Hashtable transferDropTargetTable = new Hashtable ();

    public IDETransferAdapterProvider () {
        super ();
        getTransferDragSourceTable ().put (new Integer (IDETransferId.RESOURCE_TRANSFER.hashCode ()), new TransferDragSourceAdapter (new TransferAgent (IDETransferId.RESOURCE_TRANSFER, ResourceTransfer.getInstance (), false)));
        getTransferDragSourceTable ().put (new Integer (IDETransferId.MARKER_TRANSFER.hashCode ()), new TransferDragSourceAdapter (new TransferAgent (IDETransferId.MARKER_TRANSFER, MarkerTransfer.getInstance (), false)));
        getTransferDragSourceTable ().put (new Integer (IDETransferId.NAV_SELECTION_TRANSFER.hashCode ()), new SelectionDragAdapter (new TransferAgent (IDETransferId.NAV_SELECTION_TRANSFER, LocalSelectionTransfer.getInstance (), true) {

            public ISelection getSelection (TransferData transferData) {
                return LocalSelectionTransfer.getInstance ().getSelection ();
            }

            public void setSelection (ISelection selection) {
                LocalSelectionTransfer.getInstance ().setSelection (selection);
            }

        }

        ));
        getTransferDropTargetTable ().put (new Integer (IDETransferId.RESOURCE_TRANSFER.hashCode ()), new TransferDropTargetAdapter (new TransferAgent (IDETransferId.RESOURCE_TRANSFER, ResourceTransfer.getInstance (), false)));
        getTransferDropTargetTable ().put (new Integer (IDETransferId.MARKER_TRANSFER.hashCode ()), new TransferDropTargetAdapter (new TransferAgent (IDETransferId.MARKER_TRANSFER, MarkerTransfer.getInstance (), false)));
        getTransferDropTargetTable ().put (new Integer (IDETransferId.NAV_SELECTION_TRANSFER.hashCode ()), new SelectionDropAdapter (new TransferAgent (IDETransferId.NAV_SELECTION_TRANSFER, LocalSelectionTransfer.getInstance (), true) {

            public ISelection getSelection (TransferData transferData) {
                return LocalSelectionTransfer.getInstance ().getSelection ();
            }

        }

        ));
    }

    public ITransferDragSourceListener getTransferDragSourceAdapter (String transferId) {
        assert null != transferId : "transferId cannot be null";
        ;
        ITransferDragSourceListener listener = null;
        listener = (ITransferDragSourceListener) getTransferDragSourceTable ().get (new Integer (transferId.hashCode ()));
        return listener;
    }

    public ITransferDropTargetListener getTransferDropTargetAdapter (String transferId) {
        assert null != transferId : "transferId cannot be null";
        ITransferDropTargetListener listener = null;
        listener = (ITransferDropTargetListener) getTransferDropTargetTable ().get (new Integer (transferId.hashCode ()));
        return listener;
    }

    private Hashtable getTransferDragSourceTable () {
        return transferDragSourceTable;
    }

    private Hashtable getTransferDropTargetTable () {
        return transferDropTargetTable;
    }

}

