package org.eclipse.gmf.runtime.emf.type.core.commands;

import java.util.Collection;

import java.util.Iterator;

import java.util.Map;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.emf.core.util.PackageUtil;

import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.EMFTypeCoreMessages;

import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;

public class MoveElementsCommand extends EditElementCommand {
    private final Map elementsToMove;
    private final EObject targetContainer;

    public MoveElementsCommand (MoveRequest request) {
        super (request.getLabel (), request.getTargetContainer (), request);
        this.elementsToMove = request.getElementsToMove ();
        this.targetContainer = request.getTargetContainer ();
    }

    protected CommandResult doExecuteWithResult (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
        for (Iterator i = getElementsToMove ().keySet ().iterator ();
        i.hasNext ();) {
            EObject element = (EObject) i.next ();
            EReference feature = getTargetFeature (element);
            if (feature != null) {
                if (feature.isMany ()) {
                    ((Collection) targetContainer.eGet (feature)).add (element);
                } else {
                    targetContainer.eSet (feature, element);
                }
            } else {
                return CommandResult.newErrorCommandResult (EMFTypeCoreMessages.moveElementsCommand_noTargetFeature);
            }
        }
        return CommandResult.newOKCommandResult ();
    }

    protected EReference getTargetFeature (EObject element) {
        EReference feature = (EReference) getElementsToMove ().get (element);
        if (feature == null) {
            EReference oldContainmentFeature = element.eContainmentFeature ();
            if (getTargetContainer ().eClass ().getEAllReferences ().contains (oldContainmentFeature)) {
                getElementsToMove ().put (element, oldContainmentFeature);
                feature = oldContainmentFeature;
            }
        }
        if (feature == null) {
            feature = PackageUtil.findFeature (getTargetContainer ().eClass (), element.eClass ());
            setTargetFeature (element, feature);
        }
        return feature;
    }

    protected EObject getTargetContainer () {
        return targetContainer;
    }

    protected Map getElementsToMove () {
        return elementsToMove;
    }

    protected void setTargetFeature (EObject element, EReference targetFeature) {
        getElementsToMove ().put (element, targetFeature);
    }

    public boolean canExecute () {
        EObject container = getTargetContainer ();
        if (container == null || elementsToMove == null || elementsToMove.isEmpty ()) {
            return false;
        }
        for (Iterator i = getElementsToMove ().keySet ().iterator ();
        i.hasNext ();) {
            EObject element = (EObject) i.next ();
            EReference feature = getTargetFeature (element);
            if (feature == null || ! container.eClass ().getEAllReferences ().contains (feature)) {
                return false;
            }
            if (container.equals (element.eContainer ()) && feature == element.eContainmentFeature ()) {
                return false;
            }
            if (EcoreUtil.isAncestor (element, getTargetContainer ())) {
                return false;
            }
            if (! PackageUtil.canContain (getTargetContainer ().eClass (), feature, element.eClass (), false)) {
                return false;
            }
        }
        return true;
    }

}

