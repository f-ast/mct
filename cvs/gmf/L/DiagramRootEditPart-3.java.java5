package org.eclipse.gmf.runtime.diagram.ui.editparts;

import org.eclipse.draw2d.FreeformLayer;

import org.eclipse.draw2d.FreeformLayeredPane;

import org.eclipse.draw2d.LayeredPane;

import org.eclipse.draw2d.ScalableFigure;

import org.eclipse.draw2d.ScalableFreeformLayeredPane;

import org.eclipse.draw2d.Viewport;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.Request;

import org.eclipse.gef.SnapToGeometry;

import org.eclipse.gef.SnapToGrid;

import org.eclipse.gef.editparts.ScalableFreeformRootEditPart;

import org.eclipse.gef.editparts.ZoomManager;

import org.eclipse.gef.rulers.RulerProvider;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.jface.util.IPropertyChangeListener;

import org.eclipse.swt.widgets.Display;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.DiagramUIStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.PageBreakEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ZoomableEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.figures.PageBreaksFigure;

import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageInfoHelper;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;

import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.DiagramRuler;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.ConnectionLayerEx;

import org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.MapModeFreeformLayer;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;

import org.eclipse.gmf.runtime.gef.ui.internal.editparts.AnimatableZoomManager;

public class DiagramRootEditPart extends ScalableFreeformRootEditPart implements ZoomableEditPart, IDiagramPreferenceSupport {
    class FeedbackLayer extends FreeformLayer {

        FeedbackLayer () {
            setEnabled (false);
        }

    }

    private class PreferenceStoreListener implements IPropertyChangeListener {

        public void propertyChange (org.eclipse.jface.util.PropertyChangeEvent event) {
            handlePreferenceStorePropertyChanged (event);
        }

    }

    private DiagramRuler verticalRuler, horizontalRuler;
    private AnimatableZoomManager zoomManager;
    private double [] zoomLevels = {.05, .1, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 4};
    private PageBreakEditPart pageBreakEditPart;
    private PreferenceStoreListener listener = new PreferenceStoreListener ();
    private ScalableFreeformLayeredPane layers;
    private PreferencesHint preferencesHint = PreferencesHint.USE_DEFAULTS;

    private void initPreferenceStoreListener () {
        IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
        preferenceStore.addPropertyChangeListener (listener);
    }

    private void removePreferenceStoreListener () {
        IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
        preferenceStore.removePropertyChangeListener (listener);
        listener = null;
    }

    final public static String PAGE_BREAKS_LAYER = "Page Breaks Layer";
    final public static String DECORATION_PRINTABLE_LAYER = "Decoration Printable Layer";
    final public static String DECORATION_UNPRINTABLE_LAYER = "Decoration Unprintable Layer";

    protected LayeredPane createPrintableLayers () {
        FreeformLayeredPane layeredPane = new FreeformLayeredPane ();
        layeredPane.add (new FreeformLayer (), PRIMARY_LAYER);
        layeredPane.add (new ConnectionLayerEx (), CONNECTION_LAYER);
        layeredPane.add (new FreeformLayer (), DECORATION_PRINTABLE_LAYER);
        return layeredPane;
    }

    protected ScalableFreeformLayeredPane createScaledLayers () {
        layers = createScalableFreeformLayeredPane ();
        layers.add (createGridLayer (), GRID_LAYER);
        layers.add (new FreeformLayer (), PAGE_BREAKS_LAYER);
        layers.add (getPrintableLayers (), PRINTABLE_LAYERS);
        layers.add (new FreeformLayer (), DECORATION_UNPRINTABLE_LAYER);
        return layers;
    }

    protected MapModeFreeformLayer createMapModeFreeformLayer () {
        return new MapModeFreeformLayer ();
    }

    protected ScalableFreeformLayeredPane createScalableFreeformLayeredPane () {
        return new org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScalableFreeformLayeredPane ();
    }

    public ZoomManager getZoomManager () {
        if (zoomManager == null) {
            zoomManager = new AnimatableZoomManager ((ScalableFigure) getScaledLayers (), ((Viewport) getFigure ()));
            zoomManager.setZoomLevels (zoomLevels);
            refreshEnableZoomAnimation (zoomManager);
        }
        return zoomManager;
    }

    public void zoomTo (double zoom, Point center) {
        zoomManager.zoomTo (zoom, center);
    }

    public void zoomTo (Rectangle rect) {
        zoomManager.zoomTo (rect);
    }

    public void zoomIn () {
        zoomManager.zoomIn ();
    }

    public void zoomIn (Point center) {
        zoomManager.zoomTo (zoomManager.getNextZoomLevel (), center);
    }

    public void zoomOut () {
        zoomManager.zoomOut ();
    }

    public void zoomOut (Point center) {
        zoomManager.zoomTo (zoomManager.getPreviousZoomLevel (), center);
    }

    protected IPreferenceStore getWorkspaceViewerPreferences () {
        return ((DiagramGraphicalViewer) getViewer ()).getWorkspaceViewerPreferenceStore ();
    }

    public double getGridSpacing () {
        IPreferenceStore pluginStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
        return pluginStore.getDouble (IPreferenceConstants.PREF_GRID_SPACING);
    }

    public void setGridSpacing (double gridSpacing) {
        IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
        int rulerUnits = preferenceStore.getInt (IPreferenceConstants.PREF_RULER_UNITS);
        double dotsPerInch = Display.getDefault ().getDPI ().x;
        int spacingInPixels = 0;
        switch (rulerUnits) {
            case RulerProvider.UNIT_INCHES :
                spacingInPixels = (int) Math.round (dotsPerInch * gridSpacing);
                break;
            case RulerProvider.UNIT_CENTIMETERS :
                spacingInPixels = (int) Math.round (dotsPerInch * gridSpacing / 2.54);
                break;
            default :
                spacingInPixels = (int) gridSpacing;
        }
        int spacing = MapMode.DPtoLP (spacingInPixels);
        getViewer ().setProperty (SnapToGrid.PROPERTY_GRID_SPACING, new Dimension (spacing, spacing));
    }

    public PageBreakEditPart getPageBreakEditPart () {
        if (pageBreakEditPart == null) {
            pageBreakEditPart = new PageBreakEditPart ();
            pageBreakEditPart.setParent (this);
        }
        return pageBreakEditPart;
    }

    protected void refreshPageBreaks () {
        if (getWorkspaceViewerPreferences ().getBoolean (WorkspaceViewerProperties.VIEWPAGEBREAKS)) showPageBreaks ();
        else hidePageBreaks ();

    }

    private void showPageBreaks () {
        getLayer (PAGE_BREAKS_LAYER).add (getPageBreakEditPart ().getFigure ());
        Point p = new Point (getWorkspaceViewerPreferences ().getInt (WorkspaceViewerProperties.PAGEBREAK_X), getWorkspaceViewerPreferences ().getInt (WorkspaceViewerProperties.PAGEBREAK_Y));
        getPageBreakEditPart ().set (p, PageInfoHelper.getChildrenBounds ((DiagramEditPart) getContents (), PageBreaksFigure.class));
    }

    private void hidePageBreaks () {
        if (getLayer (PAGE_BREAKS_LAYER).getChildren ().contains (getPageBreakEditPart ().getFigure ())) getLayer (PAGE_BREAKS_LAYER).remove (getPageBreakEditPart ().getFigure ());

    }

    private void handlePreferenceStorePropertyChanged (org.eclipse.jface.util.PropertyChangeEvent event) {
        if (WorkspaceViewerProperties.VIEWPAGEBREAKS.equals (event.getProperty ())) {
            refreshPageBreaks ();
        } else if (isPageSizeChange (event.getProperty ())) {
            getPageBreakEditPart ().calculatePageBreakFigureBounds (false);
            refreshPageBreaks ();
        } else if (WorkspaceViewerProperties.VIEWGRID.equals (event.getProperty ())) {
            getViewer ().setProperty (SnapToGrid.PROPERTY_GRID_VISIBLE, event.getNewValue ());
        } else if (WorkspaceViewerProperties.SNAPTOGRID.equals (event.getProperty ())) {
            getViewer ().setProperty (SnapToGeometry.PROPERTY_SNAP_ENABLED, event.getNewValue ());
        } else if (WorkspaceViewerProperties.VIEWRULERS.equals (event.getProperty ())) {
            getViewer ().setProperty (RulerProvider.PROPERTY_RULER_VISIBILITY, event.getNewValue ());
        } else if (IPreferenceConstants.PREF_RULER_UNITS.equals (event.getProperty ())) {
            Object newValue = event.getNewValue ();
            int rulerUnits;
            if (newValue.getClass () == Integer.class) {
                rulerUnits = ((Integer) newValue).intValue ();
                setRulers (rulerUnits);
            } else if (newValue.getClass () == String.class) {
                try {
                    rulerUnits = Integer.parseInt ((String) newValue);
                    setRulers (rulerUnits);
                } catch (NumberFormatException e) {
                    Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.RESOURCE_FAILURE, e.toString ());
                }
            } else {
                Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.RESOURCE_FAILURE, newValue.getClass ().getName ());
            }

            Boolean oldValue = (Boolean) getViewer ().getProperty (RulerProvider.PROPERTY_RULER_VISIBILITY);
            getViewer ().setProperty (RulerProvider.PROPERTY_RULER_VISIBILITY, new Boolean (false));
            getViewer ().setProperty (RulerProvider.PROPERTY_RULER_VISIBILITY, oldValue);
            double spacing = getGridSpacing ();
            setGridSpacing (spacing);
        } else if (IPreferenceConstants.PREF_GRID_SPACING.equals (event.getProperty ())) {
            Object newValue = event.getNewValue ();
            double gridSpacing;
            try {
                if (newValue.getClass () == Double.class) {
                    gridSpacing = ((Double) newValue).doubleValue ();
                    setGridSpacing (gridSpacing);
                } else if (newValue.getClass () == String.class) {
                    gridSpacing = Double.parseDouble ((String) newValue);
                    setGridSpacing (gridSpacing);
                } else {
                    Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.RESOURCE_FAILURE, newValue.getClass ().getName ());
                }

            } catch (NumberFormatException ex) {
                Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.RESOURCE_FAILURE, ex.toString ());
            }
        } else if (event.getProperty ().equals (IPreferenceConstants.PREF_ENABLE_ANIMATED_ZOOM)) {
            refreshEnableZoomAnimation (getZoomManager ());
        } else if (event.getProperty ().equals (IPreferenceConstants.PREF_ENABLE_ANTIALIAS)) {
            refreshEnableAntiAlias ();
        }

    }

    private void setRulers (int rulerUnits) {
        if (verticalRuler != null) {
            verticalRuler.setUnit (rulerUnits);
        }
        if (horizontalRuler != null) {
            horizontalRuler.setUnit (rulerUnits);
        }
    }

    private void refreshEnableZoomAnimation (ZoomManager zoomMangr) {
        IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
        boolean animatedZoom = preferenceStore.getBoolean (IPreferenceConstants.PREF_ENABLE_ANIMATED_ZOOM);
        zoomMangr.setZoomAnimationStyle (animatedZoom ? ZoomManager.ANIMATE_ZOOM_IN_OUT : ZoomManager.ANIMATE_NEVER);
    }

    public void refreshVisuals () {
        refreshEnableAntiAlias ();
    }

    protected void refreshEnableAntiAlias () {
        IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
        boolean antiAlias = preferenceStore.getBoolean (IPreferenceConstants.PREF_ENABLE_ANTIALIAS);
        if (layers instanceof org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScalableFreeformLayeredPane) ((org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScalableFreeformLayeredPane) layers).setAntiAlias (antiAlias);

    }

    public void performRequest (Request request) {
        if (request.getType ().equals (RequestConstants.REQ_RECALCULATE_PAGEBREAKS)) {
            getPageBreakEditPart ().calculatePageBreakFigureBounds ();
        }
    }

    public void activate () {
        super.activate ();
        if (getWorkspaceViewerPreferences () != null) getWorkspaceViewerPreferences ().addPropertyChangeListener (listener);

        initPreferenceStoreListener ();
    }

    public void deactivate () {
        if (getWorkspaceViewerPreferences () != null) getWorkspaceViewerPreferences ().removePropertyChangeListener (listener);

        removePreferenceStoreListener ();
        super.deactivate ();
    }

    private boolean isPageSizeChange (String s) {
        if (WorkspaceViewerProperties.PREF_MARGIN_TOP.equals (s) || WorkspaceViewerProperties.PREF_MARGIN_LEFT.equals (s) || WorkspaceViewerProperties.PREF_MARGIN_RIGHT.equals (s) || WorkspaceViewerProperties.PREF_MARGIN_BOTTOM.equals (s) || WorkspaceViewerProperties.PREF_PAGE_SIZE.equals (s) || WorkspaceViewerProperties.PREF_USE_LANDSCAPE.equals (s) || WorkspaceViewerProperties.PREF_USE_PORTRAIT.equals (s) || WorkspaceViewerProperties.PREF_PAGE_HEIGHT.equals (s) || WorkspaceViewerProperties.PREF_PAGE_WIDTH.equals (s) || WorkspaceViewerProperties.PREF_USE_DIAGRAM_SETTINGS.equals (s)) return true;
        else return false;

    }

    protected ScalableFreeformLayeredPane getLayers () {
        return layers;
    }

    protected void setLayers (ScalableFreeformLayeredPane layers) {
        this.layers = layers;
    }

    public void setPreferencesHint (PreferencesHint preferenceHint) {
        this.preferencesHint = preferenceHint;
    }

    public PreferencesHint getPreferencesHint () {
        return preferencesHint;
    }

}

