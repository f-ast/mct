package org.eclipse.gmf.runtime.diagram.ui.resources.editor.document;

import org.eclipse.core.resources.IStorage;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.ILog;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.Platform;

import org.eclipse.core.runtime.Status;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.l10n.EditorMessages;

import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.jface.operation.IRunnableContext;

import org.eclipse.ui.IEditorInput;

import org.eclipse.ui.PlatformUI;

import org.osgi.framework.Bundle;

public class DiagramInputDocumentProvider extends AbstractDocumentProvider implements IDiagramDocumentProvider {
    protected class DiagramResourceInfo extends ElementInfo {
        public boolean fIsModifiable = false;
        public boolean fIsReadOnly = true;
        public boolean fUpdateCache = true;
        public DiagramModificationListener fListener = null;

        public DiagramResourceInfo (IDocument document, DiagramModificationListener listener) {
            super (document);
            fListener = listener;
        }

    }

    protected IDocument createDocument (Object element) throws CoreException {
        if (element instanceof IDiagramEditorInput) {
            IDocument document = createEmptyDocument ();
            if (setDocumentContent (document, (IEditorInput) element)) {
                setupDocument (element, document);
                return document;
            }
        }
        return null;
    }

    protected void setupDocument (Object element, IDocument document) {
    }

    protected IDocument createEmptyDocument () {
        return new DiagramDocument ();
    }

    protected ElementInfo createElementInfo (Object element) throws CoreException {
        if (element instanceof IDiagramEditorInput) {
            IDocument document = null;
            IStatus status = null;
            try {
                document = createDocument (element);
            } catch (CoreException x) {
                handleCoreException (x, EditorMessages.DiagramInputDocumentProvider_createElementInfo);
                status = x.getStatus ();
                document = createEmptyDocument ();
            }
            DiagramModificationListener listener = new DiagramModificationListener (this, (DiagramDocument) document);
            ElementInfo info = new DiagramResourceInfo (document, listener);
            info.fStatus = status;
            listener.startListening ();
            return info;
        }
        return super.createElementInfo (element);
    }

    protected void disposeElementInfo (Object element, ElementInfo info) {
        super.disposeElementInfo (element, info);
        ((DiagramResourceInfo) info).fListener.stopListening ();
    }

    protected boolean setDocumentContent (IDocument document, IEditorInput editorInput) throws CoreException {
        if (editorInput instanceof IDiagramEditorInput) {
            Diagram diagram = ((IDiagramEditorInput) editorInput).getDiagram ();
            document.setContent (diagram);
            return true;
        }
        return false;
    }

    protected void doSaveDocument (IProgressMonitor monitor, Object element, IDocument document, boolean overwrite) throws CoreException {
    }

    protected void handleCoreException (CoreException exception, String message) {
        Bundle bundle = Platform.getBundle (PlatformUI.PLUGIN_ID);
        ILog log = Platform.getLog (bundle);
        if (message != null) log.log (new Status (IStatus.ERROR, PlatformUI.PLUGIN_ID, 0, message, exception));
        else log.log (exception.getStatus ());

    }

    protected void updateCache (IDiagramEditorInput input) throws CoreException {
        DiagramResourceInfo info = (DiagramResourceInfo) getElementInfo (input);
        if (info != null) {
            IStorage storage = (IStorage) input.getAdapter (IStorage.class);
            if (storage != null) {
                boolean readOnly = storage.isReadOnly ();
                info.fIsReadOnly = readOnly;
                info.fIsModifiable = ! readOnly;
            }
            info.fUpdateCache = false;
        }
    }

    public boolean isReadOnly (Object element) {
        if (element instanceof IDiagramEditorInput) {
            DiagramResourceInfo info = (DiagramResourceInfo) getElementInfo (element);
            if (info != null) {
                if (info.fUpdateCache) {
                    try {
                        updateCache ((IDiagramEditorInput) element);
                    } catch (CoreException x) {
                        handleCoreException (x, EditorMessages.DiagramInputDocumentProvider_isReadOnly);
                    }
                }
                return info.fIsReadOnly;
            }
        }
        return super.isReadOnly (element);
    }

    public boolean isModifiable (Object element) {
        if (element instanceof IDiagramEditorInput) {
            DiagramResourceInfo info = (DiagramResourceInfo) getElementInfo (element);
            if (info != null) {
                if (info.fUpdateCache) {
                    try {
                        updateCache ((IDiagramEditorInput) element);
                    } catch (CoreException x) {
                        handleCoreException (x, EditorMessages.DiagramInputDocumentProvider_isModifiable);
                    }
                }
                return info.fIsModifiable;
            }
        }
        return super.isModifiable (element);
    }

    protected void doUpdateStateCache (Object element) throws CoreException {
        if (element instanceof IDiagramEditorInput) {
            DiagramResourceInfo info = (DiagramResourceInfo) getElementInfo (element);
            if (info != null) info.fUpdateCache = true;

        }
        super.doUpdateStateCache (element);
    }

    protected IRunnableContext getOperationRunner (IProgressMonitor monitor) {
        return null;
    }

    public IDiagramDocument getDiagramDocument (Object element) {
        IDocument doc = getDocument (element);
        if (doc instanceof IDiagramDocument) return (IDiagramDocument) doc;

        return null;
    }

    public IEditorInput createInputWithEditingDomain (IEditorInput editorInput, MEditingDomain domain) {
        if (editorInput instanceof IDiagramEditorInput) return new EditorInputProxy (editorInput, domain);

        assert false;
        return null;
    }

}

