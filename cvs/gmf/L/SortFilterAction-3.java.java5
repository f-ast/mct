package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.ArrayList;

import java.util.Collections;

import java.util.Iterator;

import java.util.List;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Request;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.gmf.runtime.diagram.ui.actions.PresentationAction;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramActionsResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.Images;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.SortFilterCompartmentItemsRequest;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.SortFilterContentRequest;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.notation.View;

public class SortFilterAction extends PresentationAction {

    public SortFilterAction (IWorkbenchPage workbenchpage) {
        super (workbenchpage);
    }

    protected Request createTargetRequest () {
        return new SortFilterCompartmentItemsRequest ();
    }

    public void init () {
        super.init ();
        setId (ActionIds.ACTION_SORT_FILTER);
        setText (DiagramActionsResourceManager.getI18NString ("SortFilterCompartmentsAction.ActionLabelText"));
        setToolTipText (DiagramActionsResourceManager.getI18NString ("SortFilterCompartmentsAction.ActionToolTipText"));
        setImageDescriptor (Images.DESC_ACTION_SORT_FILTER);
        setDisabledImageDescriptor (Images.DESC_ACTION_SORT_FILTER_DISABLED);
    }

    protected boolean calculateEnabled () {
        Iterator iter = getSelectedObjects ().iterator ();
        while (iter.hasNext ()) {
            Object obj = iter.next ();
            if (obj instanceof IGraphicalEditPart) {
                IGraphicalEditPart selectedEP = (IGraphicalEditPart) obj;
                Object model = selectedEP.getModel ();
                if (! (model instanceof View) || ViewUtil.resolveSemanticElement ((View) model) == null) continue;

                List childContributions = new ArrayList ();
                List children = selectedEP.getChildren ();
                for (int i = 0;
                i < children.size (); i ++) {
                    if (children.get (i) instanceof ListCompartmentEditPart) {
                        SortFilterContentRequest contentRequest = new SortFilterContentRequest (childContributions);
                        ListCompartmentEditPart editPart = (ListCompartmentEditPart) children.get (i);
                        editPart.getCommand (contentRequest);
                        if (childContributions.size () > 0) return true;

                    }
                }
            }
        }
        return false;
    }

    protected List createOperationSet () {
        List selection = getSelectedObjects ();
        if (selection.isEmpty () || ! (selection.get (0) instanceof IGraphicalEditPart)) return Collections.EMPTY_LIST;

        Iterator selectedEPs = selection.iterator ();
        List targetedEPs = new ArrayList ();
        while (selectedEPs.hasNext ()) {
            EditPart selectedEP = (EditPart) selectedEPs.next ();
            targetedEPs.addAll (getTargetEdiParts (selectedEP));
            if (targetedEPs.size () > 0) {
                EditPart ep = (EditPart) targetedEPs.get (0);
                targetedEPs.clear ();
                targetedEPs.add (ep);
                return targetedEPs;
            }
        }
        return targetedEPs.isEmpty () ? Collections.EMPTY_LIST : targetedEPs;
    }

    public boolean isSelectionListener () {
        return true;
    }

    protected void updateTargetRequest () {
        ((SortFilterCompartmentItemsRequest) getTargetRequest ()).setEditParts (getSelectedObjects ());
    }

}

