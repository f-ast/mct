package org.eclipse.gmf.mappings.provider;

import java.util.Collection;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.mappings.FeatureInitializer;

import org.eclipse.gmf.mappings.FeatureSeqInitializer;

import org.eclipse.gmf.mappings.GMFMapFactory;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.presentation.FilterUtil;

public class FeatureSeqInitializerItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public FeatureSeqInitializerItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addElementClassPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addElementClassPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_FeatureSeqInitializer_elementClass_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_FeatureSeqInitializer_elementClass_feature", "_UI_FeatureSeqInitializer_type"), GMFMapPackage.eINSTANCE.getFeatureSeqInitializer_ElementClass (), true, false, true, null, null, null) {

            protected Collection getComboBoxObjects (Object object) {
                if (object instanceof FeatureSeqInitializer) {
                    return FilterUtil.filterByFeatureSeqInitializer (super.getComboBoxObjects (object), (FeatureSeqInitializer) object);
                }
                return super.getComboBoxObjects (object);
            }

        }

        );
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFMapPackage.eINSTANCE.getFeatureSeqInitializer_Initializers ());
        }
        return childrenFeatures;
    }

    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/FeatureSeqInitializer"));
    }

    public String getText (Object object) {
        StringBuffer buf = new StringBuffer ();
        buf.append (getString ("_UI_FeatureSeqInitializer_type"));
        if (object instanceof FeatureSeqInitializer) {
            FeatureSeqInitializer fSeqInitializer = (FeatureSeqInitializer) object;
            buf.append ('<');
            if (fSeqInitializer.getElementClass () != null) {
                if (fSeqInitializer.getCreatingInitializer () != null) {
                    buf.append ("new ");
                }
                buf.append (fSeqInitializer.getElementClass ().getName ());
            }
            buf.append ('(');
            for (Iterator it = fSeqInitializer.getInitializers ().iterator ();
            it.hasNext ();) {
                FeatureInitializer nextInitializer = (FeatureInitializer) it.next ();
                if (nextInitializer != null && nextInitializer.getFeature () != null) {
                    buf.append (nextInitializer.getFeature ().getName ());
                }
                if (it.hasNext ()) {
                    buf.append (',');
                }
            }
            buf.append (')');
            buf.append ('>');
        }
        return buf.toString ();
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (FeatureSeqInitializer.class)) {
            case GMFMapPackage.FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
            case GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFMapPackage.eINSTANCE.getFeatureSeqInitializer_Initializers (), GMFMapFactory.eINSTANCE.createFeatureValueSpec ()));
        newChildDescriptors.add (createChildParameter (GMFMapPackage.eINSTANCE.getFeatureSeqInitializer_Initializers (), GMFMapFactory.eINSTANCE.createReferenceNewElementSpec ()));
    }

    public ResourceLocator getResourceLocator () {
        return GMFMapEditPlugin.INSTANCE;
    }

}

