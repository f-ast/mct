package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Collections;

import java.util.HashMap;

import java.util.HashSet;

import java.util.Iterator;

import java.util.List;

import java.util.ListIterator;

import java.util.Map;

import java.util.Set;

import java.util.WeakHashMap;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.core.runtime.Status;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.UniqueEList;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.transaction.Transaction;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.emf.workspace.AbstractEMFOperation;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPartViewer;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.editpolicies.AbstractEditPolicy;

import org.eclipse.gef.requests.CreateRequest;

import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;

import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;

import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;

import org.eclipse.gmf.runtime.diagram.core.listener.NotificationUtil;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;

import org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;

import org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;

import org.eclipse.gmf.runtime.diagram.ui.util.EditPartUtil;

import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.CanonicalStyle;

import org.eclipse.gmf.runtime.notation.DrawerStyle;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.Style;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.osgi.util.NLS;

import org.eclipse.ui.PlatformUI;

public abstract class CanonicalEditPolicy extends AbstractEditPolicy implements NotificationListener {
    private static class AsyncCommand extends Command {
        private final CompoundCommand _cc;

        public AsyncCommand (String label) {
            super (label);
            _cc = new CompoundCommand (label);
        }

        public AsyncCommand (Command cmd) {
            this (cmd.getLabel ());
            add (cmd);
        }

        public AsyncCommand (ICommand cmd) {
            this (cmd.getLabel ());
            add (cmd);
        }

        public final void execute () {
            PlatformUI.getWorkbench ().getDisplay ().asyncExec (new Runnable () {

                public void run () {
                    AsyncCommand.this.doExecute ();
                }

            }

            );
        }

        protected final CompoundCommand getCommand () {
            return _cc;
        }

        protected void doExecute () {
            getCommand ().execute ();
        }

        public void add (ICommand cmd) {
            _cc.add (new ICommandProxy (cmd));
        }

        public void add (Command cmd) {
            _cc.add (cmd);
        }

    }

    static Map _registry = new WeakHashMap ();
    private static final String SEMANTIC_FILTER_ID = "SemanticFilterID";
    private boolean _enabled = true;
    private boolean _deferredRefresh = false;
    private Map _listenerFilters;
    protected static final class CanonicalElementAdapter extends EObjectAdapter {
        private String _hint;

        public CanonicalElementAdapter (EObject element, String hint) {
            super (element);
            _hint = hint;
        }

        public Object getAdapter (Class adapter) {
            if (adapter.equals (String.class)) {
                return _hint;
            }
            return super.getAdapter (adapter);
        }

    }

    private void RegisterEditPolicy () {
        EObject semanticHost = getSemanticHost ();
        Set set = (Set) _registry.get (semanticHost);
        if (set == null) {
            set = new HashSet ();
            _registry.put (semanticHost, set);
        }
        set.add (this);
    }

    private void UnregisterEditPolicy () {
        EObject semanticHost = null;
        Set set = (Set) _registry.get (null);
        if (set != null) {
            set.remove (this);
            if (set.isEmpty ()) {
                _registry.remove (semanticHost);
            }
        }
        Iterator keys = _registry.keySet ().iterator ();
        while (keys.hasNext ()) {
            EObject key = (EObject) keys.next ();
            if (((Set) _registry.get (key)).contains (this)) {
                semanticHost = key;
                break;
            }
        }
        set = (Set) _registry.get (semanticHost);
        if (set != null) {
            set.remove (this);
            if (set.isEmpty ()) {
                _registry.remove (semanticHost);
            }
        }
    }

    public static List getRegisteredEditPolicies (EObject element) {
        List policies = new ArrayList ();
        Collection policiesWithSemanticElements = (Collection) _registry.get (element);
        if (policiesWithSemanticElements != null) {
            policies.addAll (policiesWithSemanticElements);
        }
        Collection policiesWithNullSemanticElements = (Collection) _registry.get (null);
        if (policiesWithNullSemanticElements != null) {
            policies.addAll (policiesWithNullSemanticElements);
        }
        return Collections.unmodifiableList (policies);
    }

    public static List getRegisteredEditPolicies (EObject element, Class clazz) {
        List registeredPolicies = new ArrayList ();
        Iterator ceps = getRegisteredEditPolicies (element).iterator ();
        while (ceps.hasNext ()) {
            CanonicalEditPolicy cep = (CanonicalEditPolicy) ceps.next ();
            if (cep.isEnabled () && clazz.isInstance (cep)) {
                registeredPolicies.add (cep);
            }
        }
        return Collections.unmodifiableList (registeredPolicies);
    }

    public void setHost (EditPart host) {
        if (! (host instanceof IGraphicalEditPart)) {
            throw new IllegalArgumentException ();
        }
        super.setHost (host);
    }

    protected final IGraphicalEditPart host () {
        return (IGraphicalEditPart) getHost ();
    }

    abstract protected List getSemanticChildrenList ();

    protected String getDefaultFactoryHint () {
        return ((View) host ().getModel ()).getType ();
    }

    protected String getFactoryHint (IAdaptable elementAdapter, final String defaultHint) {
        String fh = getFactoryHint (elementAdapter);
        return fh == null ? defaultHint : fh;
    }

    protected String getFactoryHint (IAdaptable elementAdapter) {
        return null;
    }

    protected final boolean deleteViews (Iterator views) {
        if (! isEnabled ()) {
            return false;
        }
        final CompoundCommand cc = new CompoundCommand (DiagramUIMessages.DeleteCommand_Label);
        while (views.hasNext ()) {
            View view = (View) views.next ();
            if (shouldDeleteView (view)) {
                cc.add (getDeleteViewCommand (view));
            }
        }
        boolean doDelete = ! cc.isEmpty () && cc.canExecute ();
        if (doDelete) {
            executeCommand (cc);
        }
        return doDelete;
    }

    protected Command getDeleteViewCommand (View view) {
        TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost ()).getEditingDomain ();
        return new ICommandProxy (new DeleteCommand (editingDomain, view));
    }

    protected boolean shouldDeleteView (View view) {
        return true;
    }

    protected List getViewReferers (EObject element) {
        List views = new ArrayList ();
        if (element != null) {
            EReference [] features = {NotationPackage.eINSTANCE.getView_Element ()};
            views.addAll (EMFCoreUtil.getReferencers (element, features));
        }
        return views;
    }

    protected int getViewIndexFor (EObject semanticChild) {
        return ViewUtil.APPEND;
    }

    protected final List createViews (List eObjects) {
        List descriptors = new ArrayList ();
        Iterator elements = eObjects.iterator ();
        while (elements.hasNext ()) {
            EObject element = (EObject) elements.next ();
            if (element != null) {
                CreateViewRequest.ViewDescriptor descriptor = getViewDescriptor (element);
                descriptors.add (descriptor);
            }
        }
        if (! descriptors.isEmpty ()) {
            CreateViewRequest request = getCreateViewRequest (descriptors);
            Command cmd = getCreateViewCommand (request);
            if (cmd != null && cmd.canExecute ()) {
                SetViewMutabilityCommand.makeMutable (new EObjectAdapter (host ().getNotationView ())).execute ();
                executeCommand (cmd);
                List adapters = (List) request.getNewObject ();
                return adapters;
            }
        }
        return Collections.EMPTY_LIST;
    }

    protected void executeCommand (final Command cmd) {
        Map options = null;
        EditPart ep = getHost ();
        while (ep != null && ! (ep instanceof DiagramEditPart)) {
            ep = ep.getParent ();
        }
        if (ep == null || (ep != null && ((DiagramEditPart) ep).isActivatingDiagram ()) || ! EditPartUtil.isWriteTransactionInProgress ((IGraphicalEditPart) getHost (), false, false)) options = Collections.singletonMap (Transaction.OPTION_UNPROTECTED, Boolean.TRUE);

        AbstractEMFOperation operation = new AbstractEMFOperation (((IGraphicalEditPart) getHost ()).getEditingDomain (), StringStatics.BLANK, options) {

            protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
                cmd.execute ();
                return Status.OK_STATUS;
            }

        }

        ;
        try {
            operation.execute (new NullProgressMonitor (), null);
        } catch (ExecutionException e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "executeCommand", e);
            Log.warning (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "executeCommand", e);
        }
    }

    protected Command getCreateViewCommand (CreateRequest request) {
        CompositeCommand cc = new CompositeCommand (DiagramUIMessages.AddCommand_Label);
        Command cmd = host ().getCommand (request);
        if (cmd == null) {
            assert request instanceof CreateViewRequest;
            Iterator descriptors = ((CreateViewRequest) request).getViewDescriptors ().iterator ();
            while (descriptors.hasNext ()) {
                CreateViewRequest.ViewDescriptor descriptor = (CreateViewRequest.ViewDescriptor) descriptors.next ();
                ICommand createCommand = getCreateViewCommand (descriptor);
                cc.compose (createCommand);
            }
        } else {
            cc.compose (new CommandProxy (cmd));
            Iterator descriptors = ((CreateViewRequest) request).getViewDescriptors ().iterator ();
            while (descriptors.hasNext ()) {
                CreateViewRequest.ViewDescriptor descriptor = (CreateViewRequest.ViewDescriptor) descriptors.next ();
                cc.compose (new CommandProxy (SetViewMutabilityCommand.makeMutable (descriptor)));
            }
        }
        return new ICommandProxy (cc.reduce ());
    }

    protected ICommand getCreateViewCommand (CreateViewRequest.ViewDescriptor descriptor) {
        TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost ()).getEditingDomain ();
        CreateCommand createCommand = new CreateCommand (editingDomain, descriptor, (View) getHost ().getModel ());
        CompositeCommand cmd = new CompositeCommand (DiagramUIMessages.AddCommand_Label);
        cmd.compose (createCommand);
        cmd.compose (new CommandProxy (SetViewMutabilityCommand.makeMutable (descriptor)));
        return cmd;
    }

    protected CreateViewRequest getCreateViewRequest (List descriptors) {
        return new CreateViewRequest (descriptors);
    }

    protected CreateViewRequest.ViewDescriptor getViewDescriptor (IAdaptable elementAdapter, Class viewKind, String hint, int index) {
        return new CreateViewRequest.ViewDescriptor (elementAdapter, viewKind, hint, index, false, host ().getDiagramPreferencesHint ());
    }

    protected CreateViewRequest.ViewDescriptor getViewDescriptor (EObject element) {
        String factoryHint = getDefaultFactoryHint ();
        IAdaptable elementAdapter = new CanonicalElementAdapter (element, factoryHint);
        int pos = getViewIndexFor (element);
        CreateViewRequest.ViewDescriptor descriptor = getViewDescriptor (elementAdapter, Node.class, getFactoryHint (elementAdapter, factoryHint), pos);
        return descriptor;
    }

    public void activate () {
        EObject semanticHost = getSemanticHost ();
        if (semanticHost != null && ! isActive ()) {
            addListenerFilter (SEMANTIC_FILTER_ID, this, semanticHost);
            addListenerFilter ("NotationListener_Visibility", this, (View) getHost ().getModel (), NotationPackage.eINSTANCE.getView_Visible ());
            Style style = ((View) host ().getModel ()).getStyle (NotationPackage.eINSTANCE.getDrawerStyle ());
            if (style != null) {
                addListenerFilter ("NotationListener_DrawerStyle", this, style);
            }
            style = ((View) host ().getModel ()).getStyle (NotationPackage.eINSTANCE.getCanonicalStyle ());
            if (style != null) {
                addListenerFilter ("NotationListener_CanonicalStyle", this, style);
            }
            refreshOnActivate ();
        }
        RegisterEditPolicy ();
    }

    protected void refreshOnActivate () {
        refresh ();
    }

    public boolean isEnabled () {
        if (TransactionUtil.getEditingDomain ((EObject) getHost ().getModel ()) == null) {
            return false;
        }
        DrawerStyle dstyle = (DrawerStyle) ((View) host ().getModel ()).getStyle (NotationPackage.eINSTANCE.getDrawerStyle ());
        boolean isCollapsed = dstyle == null ? false : dstyle.isCollapsed ();
        if (isCollapsed) {
            return false;
        }
        CanonicalStyle style = getCanonicalStyle ();
        boolean enabled = _enabled && ((View) host ().getModel ()).isVisible ();
        return style == null ? enabled : style.isCanonical () && enabled;
    }

    public void enableRefresh (boolean enable) {
        _enabled = enable;
        if (_enabled && _deferredRefresh) {
            _deferredRefresh = false;
            refresh ();
        }
    }

    public void setEnable (boolean enable) {
        EObject sHost = getSemanticHost ();
        List registeredPolicies = getRegisteredEditPolicies (sHost);
        CanonicalEditPolicy [] policies = new CanonicalEditPolicy [registeredPolicies.size ()];
        registeredPolicies.toArray (policies);
        for (int i = 0;
        i < policies.length; i ++) {
            policies [i].enableRefresh (enable);
        }
    }

    public final boolean isActive () {
        return _listenerFilters == null ? false : _listenerFilters.containsKey (SEMANTIC_FILTER_ID);
    }

    public EObject getSemanticHost () {
        return ViewUtil.resolveSemanticElement ((View) host ().getModel ());
    }

    public void deactivate () {
        if (_listenerFilters != null) {
            Map listeners = new HashMap (_listenerFilters);
            Iterator keys = listeners.keySet ().iterator ();
            while (keys.hasNext ()) {
                String id = (String) keys.next ();
                removeListenerFilter (id);
            }
        }
        UnregisterEditPolicy ();
    }

    protected boolean addListenerFilter (String filterId, NotificationListener listener, EObject element) {
        if (filterId == null || listener == null) {
            throw new NullPointerException ();
        }
        if (element != null) {
            if (_listenerFilters == null) _listenerFilters = new HashMap ();

            if (! _listenerFilters.containsKey (filterId)) {
                getDiagramEventBroker ().addNotificationListener (element, listener);
                _listenerFilters.put (filterId, new Object [] {element, listener});
                return true;
            }
        }
        return false;
    }

    protected boolean addListenerFilter (String filterId, NotificationListener listener, EObject element, EStructuralFeature feature) {
        if (filterId == null || listener == null) {
            throw new NullPointerException ();
        }
        if (element != null) {
            if (_listenerFilters == null) _listenerFilters = new HashMap ();

            if (! _listenerFilters.containsKey (filterId)) {
                getDiagramEventBroker ().addNotificationListener (element, feature, listener);
                _listenerFilters.put (filterId, new Object [] {element, feature, listener});
                return true;
            }
        }
        return false;
    }

    protected void removeListenerFilter (String filterId) {
        if (_listenerFilters == null) return;

        Object [] objects = (Object []) _listenerFilters.remove (filterId);
        if (objects == null) return;

        if (objects.length > 2) {
            getDiagramEventBroker ().removeNotificationListener ((EObject) objects [0], (EStructuralFeature) objects [1], (NotificationListener) objects [2]);
        } else {
            getDiagramEventBroker ().removeNotificationListener ((EObject) objects [0], (NotificationListener) objects [1]);
        }
    }

    public final void notifyChanged (Notification notification) {
        if (isHostStillValid ()) {
            Object element = notification.getNotifier ();
            if (element == null) {
                return;
            }
            handleNotificationEvent (notification);
        }
    }

    protected final boolean isHostStillValid () {
        if (! host ().isActive ()) {
            return false;
        }
        EObject eObject = (EObject) host ().getModel ();
        if (eObject != null && eObject.eResource () == null && ! eObject.eIsProxy ()) {
            return false;
        }
        return true;
    }

    protected void handleNotificationEvent (Notification event) {
        boolean shouldRefresh = false;
        if (shouldHandleNotificationEvent (event)) {
            if (NotationPackage.eINSTANCE.getCanonicalStyle_Canonical () == event.getFeature ()) {
                CanonicalStyle style = (CanonicalStyle) ((View) host ().getModel ()).getStyle (NotationPackage.eINSTANCE.getCanonicalStyle ());
                if (style != null) {
                    setEnable (style.isCanonical ());
                }
            }
            shouldRefresh = true;
        }
        if (shouldRefresh) refresh ();

    }

    protected boolean shouldHandleNotificationEvent (Notification event) {
        if (NotationPackage.eINSTANCE.getDrawerStyle_Collapsed () == event.getFeature () || NotationPackage.eINSTANCE.getCanonicalStyle_Canonical () == event.getFeature () || NotationPackage.eINSTANCE.getView_Visible () == event.getFeature () || NotationPackage.eINSTANCE.getView_PersistedChildren () == event.getFeature ()) {
            return true;
        }
        Object element = event.getNotifier ();
        return (element instanceof EObject && ! (element instanceof View) && (NotificationUtil.isElementAddedToSlot (event) || NotificationUtil.isElementRemovedFromSlot (event)));
    }

    protected List getViewChildren () {
        return new ArrayList (((View) host ().getModel ()).getChildren ());
    }

    public final void refresh () {
        try {
            if (isEnabled ()) {
                boolean defRefresh = _deferredRefresh;
                _deferredRefresh = false;
                refreshSemantic ();
                _deferredRefresh = defRefresh;
            } else {
                _deferredRefresh = true;
            }
        } catch (Throwable t) {
            String eMsg = DiagramUIMessages.CanonicalEditPolicy_refresh_failed_ERROR_;
            Log.error (DiagramUIPlugin.getInstance (), IStatus.WARNING, eMsg, t);
        }
    }

    protected void refreshSemantic () {
        List createdViews = refreshSemanticChildren ();
        makeViewsImmutable (createdViews);
    }

    final protected void makeViewsMutable (List createdViews) {
        if (createdViews != null && ! createdViews.isEmpty ()) {
            List viewAdapters = prepareAdapterList (createdViews);
            executeCommand (SetViewMutabilityCommand.makeMutable (viewAdapters));
        }
    }

    final protected void makeViewsImmutable (List createdViews) {
        if (createdViews != null && ! createdViews.isEmpty ()) {
            addListenersToContainers (createdViews);
            List viewAdapters = prepareAdapterList (createdViews);
            Command immutable = SetViewMutabilityCommand.makeImmutable (viewAdapters);
            AsyncCommand ac = new AsyncCommand (immutable);
            ac.execute ();
        }
    }

    private void addListenersToContainers (List createdViews) {
        UniqueEList list = new UniqueEList ();
        ListIterator li = createdViews.listIterator ();
        while (li.hasNext ()) {
            Object obj = li.next ();
            if (obj instanceof IAdaptable) {
                View view = (View) ((IAdaptable) obj).getAdapter (View.class);
                if (view != null) list.add (view.eContainer ());

            }
        }
        ListIterator liContainers = list.listIterator ();
        while (liContainers.hasNext ()) {
            View containerView = (View) liContainers.next ();
            addListenerFilter ("NotationListener_Container" + containerView.toString (), this, containerView, NotationPackage.eINSTANCE.getView_PersistedChildren ());
        }
    }

    private List prepareAdapterList (List createdViews) {
        List viewAdapters = new ArrayList ();
        viewAdapters.add (host ());
        ListIterator li = createdViews.listIterator ();
        while (li.hasNext ()) {
            Object obj = li.next ();
            if (obj != null) {
                if (! (obj instanceof IAdaptable) && obj instanceof EObject) viewAdapters.add (new EObjectAdapter ((EObject) obj));
                else viewAdapters.add (obj);

            }
        }
        return viewAdapters;
    }

    protected final List refreshSemanticChildren () {
        if (resolveSemanticElement () == null) {
            return Collections.EMPTY_LIST;
        }
        List viewChildren = getViewChildren ();
        List semanticChildren = new ArrayList (getSemanticChildrenList ());
        List orphaned = cleanCanonicalSemanticChildren (viewChildren, semanticChildren);
        boolean changed = false;
        if (! orphaned.isEmpty ()) {
            changed = deleteViews (orphaned.iterator ());
        }
        List createdViews = Collections.EMPTY_LIST;
        if (! semanticChildren.isEmpty ()) {
            createdViews = createViews (semanticChildren);
            for (int i = 0;
            i < createdViews.size (); i ++) {
                View createdView = (View) ((IAdaptable) createdViews.get (i)).getAdapter (View.class);
                if (createdView == null) {
                    String eMsg = NLS.bind (DiagramUIMessages.CanonicalEditPolicy_create_view_failed_ERROR_, semanticChildren.get (i));
                    IllegalStateException ise = new IllegalStateException (eMsg);
                    Log.error (DiagramUIPlugin.getInstance (), IStatus.ERROR, eMsg, ise);
                    throw ise;
                }
            }
        }
        if (changed || createdViews.size () > 0) postProcessRefreshSemantic (createdViews);

        return createdViews;
    }

    final protected List cleanCanonicalSemanticChildren (Collection viewChildren, Collection semanticChildren) {
        View viewChild;
        EObject semanticChild;
        Iterator viewChildrenIT = viewChildren.iterator ();
        List orphaned = new ArrayList ();
        Map viewToSemanticMap = new HashMap ();
        while (viewChildrenIT.hasNext ()) {
            viewChild = (View) viewChildrenIT.next ();
            semanticChild = viewChild.getElement ();
            if (! isOrphaned (semanticChildren, viewChild)) {
                semanticChildren.remove (semanticChild);
                viewToSemanticMap.put (semanticChild, viewChild);
            } else {
                orphaned.add (viewChild);
            }
            View viewInMap = (View) viewToSemanticMap.get (semanticChild);
            if (viewInMap != null && ! viewChild.equals (viewInMap)) {
                if (viewInMap.isMutable ()) {
                    orphaned.remove (viewChild);
                    orphaned.add (viewInMap);
                    viewToSemanticMap.put (semanticChild, viewChild);
                }
            }
        }
        return orphaned;
    }

    protected boolean isOrphaned (Collection semanticChildren, View view) {
        return ! semanticChildren.contains (view.getElement ());
    }

    protected void postProcessRefreshSemantic (List viewDescriptors) {
        getHost ().refresh ();
    }

    protected final EObject resolveSemanticElement () {
        return ViewUtil.resolveSemanticElement ((View) host ().getModel ());
    }

    protected CanonicalStyle getCanonicalStyle () {
        return (CanonicalStyle) ((View) host ().getModel ()).getStyle (NotationPackage.eINSTANCE.getCanonicalStyle ());
    }

    private DiagramEventBroker getDiagramEventBroker () {
        TransactionalEditingDomain theEditingDomain = ((IGraphicalEditPart) getHost ()).getEditingDomain ();
        if (theEditingDomain != null) {
            return DiagramEventBroker.getInstance (theEditingDomain);
        }
        return null;
    }

    final public EditPartViewer getViewer () {
        return getHost ().getViewer ();
    }

}

