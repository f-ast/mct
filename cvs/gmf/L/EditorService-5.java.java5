package org.eclipse.gmf.runtime.common.ui.services.editor;

import java.util.ArrayList;

import java.util.Collection;

import java.util.HashMap;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.ui.IEditorInput;

import org.eclipse.ui.IEditorPart;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.common.ui.services.internal.CommonUIServicesPlugin;

public class EditorService extends Service implements IEditorProvider {
    private final static EditorService instance = new EditorService ();

    static {
        instance.configureProviders (CommonUIServicesPlugin.getPluginId (), "editorProviders");
    }

    protected EditorService () {
        super (true);
    }

    public static EditorService getInstance () {
        return instance;
    }

    private Object execute (IOperation operation) {
        List results = execute (ExecutionStrategy.FIRST, operation);
        return results.isEmpty () ? null : results.get (0);
    }

    public IEditorPart openEditor (IEditorInput editorInput) {
        assert null != editorInput;
        IEditorPart editor = (IEditorPart) execute (new OpenEditorOperation (editorInput));
        return editor;
    }

    private Map editorsMap;

    protected Map getEditorsMap () {
        if (editorsMap == null) editorsMap = new HashMap ();

        return editorsMap;
    }

    public void registerEditor (IEditorPart editor) {
        assert null != editor;
        String editorId = editor.getEditorSite ().getId ();
        List editors = (List) getEditorsMap ().get (editorId);
        if (editors == null) {
            editors = new ArrayList ();
            getEditorsMap ().put (editorId, editors);
        }
        editors.add (editor);
    }

    public void unregisterEditor (IEditorPart editor) {
        assert null != editor;
        String editorId = editor.getEditorSite ().getId ();
        List editors = (List) getEditorsMap ().get (editorId);
        assert null != editors;
        assert (editors.contains (editor));
        editors.remove (editor);
    }

    public List getRegisteredEditors (String editorId) {
        return (List) getEditorsMap ().get (editorId);
    }

    public List getRegisteredEditorParts () {
        List allEditors = new ArrayList ();
        Iterator iter = getEditorsMap ().values ().iterator ();
        while (iter.hasNext ()) allEditors.addAll ((Collection) iter.next ());

        return allEditors;
    }

}

