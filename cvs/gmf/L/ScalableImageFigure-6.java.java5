package org.eclipse.gmf.runtime.draw2d.ui.render.figures;

import java.io.ByteArrayOutputStream;

import org.eclipse.draw2d.Graphics;

import org.eclipse.draw2d.ImageFigure;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage;

import org.eclipse.gmf.runtime.draw2d.ui.render.factory.RenderedImageFactory;

import org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.graphics.ImageData;

import org.eclipse.swt.graphics.ImageLoader;

public class ScalableImageFigure extends ImageFigure {
    private Dimension preferredSize = new Dimension (- 1, - 1);
    private RenderedImage renderedImage = null;
    private boolean useDefaultImageSize = false;
    private boolean maintainAspectRatio = true;
    private boolean antiAlias = true;
    private boolean useOriginalColors = false;

    public boolean isAntiAlias () {
        return antiAlias;
    }

    public void setAntiAlias (boolean antiAlias) {
        this.antiAlias = antiAlias;
        invalidate ();
    }

    public boolean isMaintainAspectRatio () {
        return maintainAspectRatio;
    }

    public void setMaintainAspectRatio (boolean maintainAspectRatio) {
        this.maintainAspectRatio = maintainAspectRatio;
        invalidate ();
    }

    public ScalableImageFigure (Image img) {
        ImageLoader imageLoader = new ImageLoader ();
        ByteArrayOutputStream byteOS = new ByteArrayOutputStream ();
        imageLoader.data = new ImageData [] {img.getImageData ()};
        imageLoader.logicalScreenHeight = img.getBounds ().width;
        imageLoader.logicalScreenHeight = img.getBounds ().height;
        imageLoader.save (byteOS, SWT.IMAGE_BMP);
        this.renderedImage = RenderedImageFactory.getInstance (byteOS.toByteArray ());
    }

    public ScalableImageFigure (RenderedImage renderedImage) {
        this.renderedImage = renderedImage;
    }

    public ScalableImageFigure (RenderedImage renderedImage, boolean antiAlias) {
        this.renderedImage = renderedImage;
        setAntiAlias (antiAlias);
    }

    public ScalableImageFigure (RenderedImage renderedImage, boolean useDefaultImageSize, boolean useOriginalColors, boolean antiAlias) {
        this (renderedImage, antiAlias);
        this.useDefaultImageSize = useDefaultImageSize;
        this.useOriginalColors = useOriginalColors;
    }

    public void setPreferredImageSize (int w, int h) {
        preferredSize = new Dimension (w, h);
    }

    public Dimension getPreferredSize (int wHint, int hHint) {
        if (preferredSize.height == - 1 && preferredSize.width == - 1) {
            if (getImage () == null) return preferredSize;

            int extent = MapModeUtil.getMapMode (this).DPtoLP (32);
            preferredSize = new Dimension (extent, extent);
            if (useDefaultImageSize) {
                if (getRenderedImage () != null) {
                    RenderedImage rndImage = getRenderedImage (new Dimension (0, 0));
                    Image swtImage = null;
                    if (rndImage != null) swtImage = rndImage.getSWTImage ();

                    if (swtImage != null) {
                        org.eclipse.swt.graphics.Rectangle imgRect = swtImage.getBounds ();
                        preferredSize.width = MapModeUtil.getMapMode (this).DPtoLP (imgRect.width);
                        preferredSize.height = MapModeUtil.getMapMode (this).DPtoLP (imgRect.height);
                    }
                }
            }
        }
        return preferredSize;
    }

    public Image getImage () {
        if (getRenderedImage () == null) return null;

        Dimension absDim = new Dimension (getBounds ().getSize ());
        translateToAbsolute (absDim);
        RenderedImage rndImage = getRenderedImage (absDim);
        if (rndImage != null) return rndImage.getSWTImage ();

        return null;
    }

    private RenderedImage getRenderedImage (Dimension dim) {
        RenderInfo newRenderInfo = RenderedImageFactory.createInfo (dim.width, dim.height, useOriginalColors () ? null : translateSWTColorToAWTColor (getBackgroundColor ()), useOriginalColors () ? null : translateSWTColorToAWTColor (getForegroundColor ()), isMaintainAspectRatio (), isAntiAlias ());
        RenderedImage newRenderedImage = getRenderedImage ().getNewRenderedImage (newRenderInfo);
        if (getRenderedImage () != null) {
            if (getRenderedImage ().equals (newRenderedImage)) {
                newRenderedImage = getRenderedImage ();
            }
        }
        setRenderedImage (newRenderedImage);
        return getRenderedImage ();
    }

    public boolean useOriginalColors () {
        return useOriginalColors;
    }

    protected void paintFigure (Graphics graphics) {
        int x, y;
        Rectangle area = getClientArea ().getCopy ();
        y = (area.height - getBounds ().height) / 2 + area.y;
        x = (area.width - getBounds ().width) / 2 + area.x;
        if (graphics instanceof DrawableRenderedImage) {
            ((DrawableRenderedImage) graphics).drawRenderedImage (getRenderedImage (new Dimension (getBounds ().width, getBounds ().height)), x, y, getBounds ().width, getBounds ().height);
        } else {
            area = (Rectangle) MapModeUtil.getMapMode (this).LPtoDP (area);
            RenderedImage rndImage = getRenderedImage (new Dimension (area.width, area.height));
            if (rndImage != null && renderedImage.getSWTImage () != null) graphics.drawImage (renderedImage.getSWTImage (), x, y);

        }
    }

    private java.awt.Color translateSWTColorToAWTColor (Color swtColor) {
        return (swtColor == null) ? null : new java.awt.Color (swtColor.getRed (), swtColor.getGreen (), swtColor.getBlue ());
    }

    public RenderedImage getRenderedImage () {
        return renderedImage;
    }

    public void setRenderedImage (RenderedImage renderedImage) {
        this.renderedImage = renderedImage;
    }

}

