package org.eclipse.gmf.internal.xpand.util;

import java.io.FileNotFoundException;

import java.io.IOException;

import java.io.InputStream;

import java.io.InputStreamReader;

import java.io.Reader;

import java.net.MalformedURLException;

import java.net.URL;

import java.nio.charset.Charset;

import java.util.ArrayList;

import org.eclipse.gmf.internal.xpand.Activator;

import org.eclipse.gmf.internal.xpand.expression.SyntaxConstants;

import org.eclipse.gmf.internal.xpand.util.ParserException.ErrorLocationInfo;

public class BundleResourceManager extends ResourceManagerImpl {
    private final URL [] paths;

    public BundleResourceManager (URL...paths) {
        assert paths != null && paths.length > 0;
        this.paths = new URL [paths.length];
        for (int i = 0;
        i < paths.length; i ++) {
            this.paths [i] = fixTrailingSlash (paths [i]);
        }
    }

    private static URL fixTrailingSlash (URL u) {
        try {
            if (u.getPath () != null && ! u.getPath ().endsWith ("/")) {
                return new URL (u, u.getPath () + '/');
            }
        } catch (MalformedURLException ex) {
        }
        return u;
    }

    @Override
    protected boolean shouldCache () {
        return true;
    }

    @Override
    protected void handleParserException (ParserException ex) {
        Activator.logWarn (ex.getResourceName () + ":" + ex.getClass ().getName ());
        for (ErrorLocationInfo ei : ex.getParsingErrors ()) {
            Activator.logWarn (ei.startLine + ":" + ei.message);
        }
    }

    private Reader createReader (String urlPath, URL baseUrl) throws MalformedURLException, IOException {
        URL u = new URL (baseUrl, urlPath);
        InputStream is = u.openStream ();
        return new InputStreamReader (is, Charset.forName ("ISO-8859-1"));
    }

    @Override
    protected Reader [] resolveMultiple (String fullyQualifiedName, String extension) throws IOException {
        final String urlPath = fullyQualifiedName.replaceAll (SyntaxConstants.NS_DELIM, "/") + '.' + extension;
        ArrayList < Reader > result = new ArrayList < Reader > (paths.length);
        for (int i = 0;
        i < paths.length; i ++) {
            try {
                result.add (createReader (urlPath, paths [i]));
            } catch (MalformedURLException ex) {
            } catch (IOException ex) {
            } catch (Exception ex) {
                Activator.logError (ex);
            }
        }
        if (result.isEmpty ()) {
            throw new FileNotFoundException (fullyQualifiedName);
        }
        return result.toArray (new Reader [result.size ()]);
    }

}

