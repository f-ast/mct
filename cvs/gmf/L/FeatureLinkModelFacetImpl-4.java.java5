package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.BasicEList;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.codegen.gmfgen.FeatureLinkModelFacet;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

public class FeatureLinkModelFacetImpl extends EObjectImpl implements FeatureLinkModelFacet {
    protected GenFeature metaFeature = null;

    protected FeatureLinkModelFacetImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getFeatureLinkModelFacet ();
    }

    public GenFeature getMetaFeature () {
        if (metaFeature != null && metaFeature.eIsProxy ()) {
            InternalEObject oldMetaFeature = (InternalEObject) metaFeature;
            metaFeature = (GenFeature) eResolveProxy (oldMetaFeature);
            if (metaFeature != oldMetaFeature) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFGenPackage.FEATURE_LINK_MODEL_FACET__META_FEATURE, oldMetaFeature, metaFeature));

            }
        }
        return metaFeature;
    }

    public GenFeature basicGetMetaFeature () {
        return metaFeature;
    }

    public void setMetaFeature (GenFeature newMetaFeature) {
        GenFeature oldMetaFeature = metaFeature;
        metaFeature = newMetaFeature;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.FEATURE_LINK_MODEL_FACET__META_FEATURE, oldMetaFeature, metaFeature));

    }

    public EList getSourceTypes () {
        EList sources = new BasicEList ();
        if (getMetaFeature () != null) {
            sources.add (getMetaFeature ().getGenClass ());
        }
        return sources;
    }

    public EList getTargetTypes () {
        EList targets = new BasicEList ();
        if (getMetaFeature () != null) {
            targets.add (getMetaFeature ().getTypeGenClass ());
        }
        return targets;
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.FEATURE_LINK_MODEL_FACET__META_FEATURE :
                if (resolve) return getMetaFeature ();

                return basicGetMetaFeature ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.FEATURE_LINK_MODEL_FACET__META_FEATURE :
                setMetaFeature ((GenFeature) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.FEATURE_LINK_MODEL_FACET__META_FEATURE :
                setMetaFeature ((GenFeature) null);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.FEATURE_LINK_MODEL_FACET__META_FEATURE :
                return metaFeature != null;
        }
        return super.eIsSet (featureID);
    }

}

