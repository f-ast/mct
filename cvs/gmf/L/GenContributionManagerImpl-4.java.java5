package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenContributionItem;

import org.eclipse.gmf.codegen.gmfgen.GenContributionManager;

public abstract class GenContributionManagerImpl extends GenContributionItemImpl implements GenContributionManager {
    protected static final String ID_EDEFAULT = null;
    protected String iD = ID_EDEFAULT;
    protected EList < GenContributionItem > items = null;

    protected GenContributionManagerImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenContributionManager ();
    }

    public String getID () {
        return iD;
    }

    public void setID (String newID) {
        String oldID = iD;
        iD = newID;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ID, oldID, iD));

    }

    public EList < GenContributionItem > getItems () {
        if (items == null) {
            items = new EObjectContainmentWithInverseEList < GenContributionItem > (GenContributionItem.class, this, GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ITEMS, GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER);
        }
        return items;
    }

    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ITEMS :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getItems ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ITEMS :
                return ((InternalEList < ? >) getItems ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ID :
                return getID ();
            case GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ITEMS :
                return getItems ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ID :
                setID ((String) newValue);
                return;
            case GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ITEMS :
                getItems ().clear ();
                getItems ().addAll ((Collection < ? extends GenContributionItem >) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ID :
                setID (ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ITEMS :
                getItems ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ID :
                return ID_EDEFAULT == null ? iD != null : ! ID_EDEFAULT.equals (iD);
            case GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ITEMS :
                return items != null && ! items.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (iD: ");
        result.append (iD);
        result.append (')');
        return result.toString ();
    }

}

