package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.gmfgraph.BorderLayout;

import org.eclipse.gmf.gmfgraph.Dimension;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

public class BorderLayoutImpl extends EObjectImpl implements BorderLayout {
    protected Dimension spacing;

    protected BorderLayoutImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getBorderLayout ();
    }

    public Dimension getSpacing () {
        return spacing;
    }

    public NotificationChain basicSetSpacing (Dimension newSpacing, NotificationChain msgs) {
        Dimension oldSpacing = spacing;
        spacing = newSpacing;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.BORDER_LAYOUT__SPACING, oldSpacing, newSpacing);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setSpacing (Dimension newSpacing) {
        if (newSpacing != spacing) {
            NotificationChain msgs = null;
            if (spacing != null) msgs = ((InternalEObject) spacing).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.BORDER_LAYOUT__SPACING, null, msgs);

            if (newSpacing != null) msgs = ((InternalEObject) newSpacing).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.BORDER_LAYOUT__SPACING, null, msgs);

            msgs = basicSetSpacing (newSpacing, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.BORDER_LAYOUT__SPACING, newSpacing, newSpacing));

    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.BORDER_LAYOUT__SPACING :
                return basicSetSpacing (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.BORDER_LAYOUT__SPACING :
                return getSpacing ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.BORDER_LAYOUT__SPACING :
                setSpacing ((Dimension) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.BORDER_LAYOUT__SPACING :
                setSpacing ((Dimension) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.BORDER_LAYOUT__SPACING :
                return spacing != null;
        }
        return super.eIsSet (featureID);
    }

}

