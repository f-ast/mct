package org.eclipse.gmf.runtime.diagram.ui.requests;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.RequestConstants;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.requests.CreateConnectionRequest;

import org.eclipse.gef.requests.CreationFactory;

import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;

import org.eclipse.gmf.runtime.diagram.core.commands.SetConnectionEndsCommand;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.jface.util.Assert;

public class CreateConnectionViewRequest extends CreateConnectionRequest {
    public static class ConnectionViewDescriptor extends ViewDescriptor {

        public ConnectionViewDescriptor (IAdaptable elementAdapter, PreferencesHint preferencesHint) {
            super (elementAdapter, Edge.class, preferencesHint);
        }

        public ConnectionViewDescriptor (IAdaptable elementAdapter, String semanticHint, PreferencesHint preferencesHint) {
            super (elementAdapter, Edge.class, semanticHint, preferencesHint);
        }

        public ConnectionViewDescriptor (IAdaptable elementAdapter, String semanticHint, int index, PreferencesHint preferencesHint) {
            super (elementAdapter, Edge.class, semanticHint, index, preferencesHint);
        }

        public ConnectionViewDescriptor (IAdaptable elementAdapter, String semanticHint, int index, boolean persisted, PreferencesHint preferencesHint) {
            super (elementAdapter, Edge.class, semanticHint, index, persisted, preferencesHint);
        }

    }

    private ConnectionViewDescriptor connectionViewDescriptor;

    public CreateConnectionViewRequest (EObject element, PreferencesHint preferencesHint) {
        this (new ConnectionViewDescriptor (new EObjectAdapter (element), preferencesHint));
    }

    public CreateConnectionViewRequest (ConnectionViewDescriptor ViewDescriptor) {
        Assert.isNotNull (ViewDescriptor);
        this.connectionViewDescriptor = ViewDescriptor;
    }

    public ConnectionViewDescriptor getConnectionViewDescriptor () {
        return connectionViewDescriptor;
    }

    public Object getNewObject () {
        return getConnectionViewDescriptor ();
    }

    public Object getNewObjectType () {
        return IAdaptable.class;
    }

    protected CreationFactory getFactory () {
        throw new UnsupportedOperationException ("The Factory mechanism is not used");
    }

    public void setFactory (CreationFactory factory) {
        throw new UnsupportedOperationException ("The Factory mechanism is not used");
    }

    public static Command getCreateCommand (EObject element, EditPart sourceEditPart, EditPart targetEditPart, PreferencesHint preferencesHint) {
        Assert.isNotNull (element);
        Assert.isNotNull (sourceEditPart);
        Assert.isNotNull (targetEditPart);
        CreateConnectionViewRequest request = new CreateConnectionViewRequest (element, preferencesHint);
        request.setSourceEditPart (sourceEditPart);
        request.setTargetEditPart (targetEditPart);
        request.setType (RequestConstants.REQ_CONNECTION_START);
        sourceEditPart.getCommand (request);
        request.setType (RequestConstants.REQ_CONNECTION_END);
        return targetEditPart.getCommand (request);
    }

    public static Command getCreateCommand (CreateConnectionViewRequest request, EditPart sourceEditPart, EditPart targetEditPart) {
        Assert.isNotNull (request);
        Assert.isNotNull (sourceEditPart);
        Assert.isNotNull (targetEditPart);
        request.setSourceEditPart (sourceEditPart);
        request.setTargetEditPart (targetEditPart);
        request.setType (RequestConstants.REQ_CONNECTION_START);
        sourceEditPart.getCommand (request);
        request.setType (RequestConstants.REQ_CONNECTION_END);
        return targetEditPart.getCommand (request);
    }

    public static Command getCreateCommand (IAdaptable elementAdapter, IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter, DiagramEditPart diagramEditPart, PreferencesHint preferencesHint) {
        CreateCommand createCommand = new CreateCommand (new ConnectionViewDescriptor (elementAdapter, preferencesHint), diagramEditPart.getDiagramView ().getDiagram ());
        IAdaptable viewAdapter = (IAdaptable) createCommand.getCommandResult ().getReturnValue ();
        SetConnectionEndsCommand sceCommand = new SetConnectionEndsCommand (DiagramUIMessages.Commands_SetConnectionEndsCommand_Source);
        sceCommand.setEdgeAdaptor (viewAdapter);
        sceCommand.setNewSourceAdaptor (sourceViewAdapter);
        sceCommand.setNewTargetAdaptor (targetViewAdapter);
        CompositeCommand cc = new CompositeCommand (null);
        cc.compose (createCommand);
        cc.compose (sceCommand);
        return new EtoolsProxyCommand (cc);
    }

    public static Command getCreateCommand (ViewDescriptor viewDescriptor, IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter, DiagramEditPart diagramEditPart) {
        CreateCommand createCommand = new CreateCommand (viewDescriptor, diagramEditPart.getDiagramView ().getDiagram ());
        IAdaptable viewAdapter = (IAdaptable) createCommand.getCommandResult ().getReturnValue ();
        SetConnectionEndsCommand sceCommand = new SetConnectionEndsCommand (DiagramUIMessages.Commands_SetConnectionEndsCommand_Source);
        sceCommand.setEdgeAdaptor (viewAdapter);
        sceCommand.setNewSourceAdaptor (sourceViewAdapter);
        sceCommand.setNewTargetAdaptor (targetViewAdapter);
        CompositeCommand cc = new CompositeCommand (null);
        cc.compose (createCommand);
        cc.compose (sceCommand);
        return new EtoolsProxyCommand (cc);
    }

}

