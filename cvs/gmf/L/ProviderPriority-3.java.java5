package org.eclipse.gmf.runtime.common.core.service;

import java.util.Arrays;

import java.util.Collections;

import java.util.List;

import org.eclipse.gmf.runtime.common.core.internal.CommonCoreDebugOptions;

import org.eclipse.gmf.runtime.common.core.internal.CommonCorePlugin;

import org.eclipse.gmf.runtime.common.core.util.EnumeratedType;

import org.eclipse.gmf.runtime.common.core.util.Trace;

public class ProviderPriority extends EnumeratedType {
    private static int nextOrdinal = 0;
    public static final ProviderPriority LOWEST = new ProviderPriority ("Lowest");
    public static final ProviderPriority LOW = new ProviderPriority ("Low");
    public static final ProviderPriority MEDIUM = new ProviderPriority ("Medium");
    public static final ProviderPriority HIGH = new ProviderPriority ("High");
    public static final ProviderPriority HIGHEST = new ProviderPriority ("Highest");
    private static final ProviderPriority [] VALUES = {LOWEST, LOW, MEDIUM, HIGH, HIGHEST};

    public static ProviderPriority parse (String name) {
        for (int i = 0;
        i < VALUES.length; i ++) {
            if (VALUES [i].getName ().equals (name)) {
                return VALUES [i];
            }
        }
        IllegalArgumentException iae = new IllegalArgumentException (name);
        Trace.throwing (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.EXCEPTIONS_THROWING, ProviderPriority.class, "parse", iae);
        throw iae;
    }

    private ProviderPriority (String name) {
        super (name, nextOrdinal ++);
    }

    protected ProviderPriority (String name, int ordinal) {
        super (name, ordinal);
    }

    protected List getValues () {
        return Collections.unmodifiableList (Arrays.asList (VALUES));
    }

    public int compareTo (Object object) {
        List values = getValues ();
        return values.indexOf (this) - values.indexOf (object);
    }

}

