package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import java.util.HashSet;

import java.util.Iterator;

import java.util.Set;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

import org.eclipse.gmf.codegen.gmfgen.GenMetricContainer;

import org.eclipse.gmf.codegen.gmfgen.GenMetricRule;

public class GenMetricContainerImpl extends EObjectImpl implements GenMetricContainer {
    protected EList metrics = null;

    protected GenMetricContainerImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenMetricContainer ();
    }

    public GenEditorGenerator getEditorGen () {
        if (eContainerFeatureID != GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN) return null;

        return (GenEditorGenerator) eContainer ();
    }

    public EList getMetrics () {
        if (metrics == null) {
            metrics = new EObjectContainmentWithInverseEList (GenMetricRule.class, this, GMFGenPackage.GEN_METRIC_CONTAINER__METRICS, GMFGenPackage.GEN_METRIC_RULE__CONTAINER);
        }
        return metrics;
    }

    public Set getAllTargetedModelPackages () {
        Set packages = new HashSet ();
        EList allRules = getMetrics ();
        for (Iterator it = allRules.iterator ();
        it.hasNext ();) {
            GenMetricRule nextRule = (GenMetricRule) it.next ();
            if (nextRule.getTarget () != null && nextRule.getTarget ().getContext () != null) {
                packages.add (nextRule.getTarget ().getContext ().getGenPackage ());
            }
        }
        return packages;
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN :
                if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);

                return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN, msgs);
            case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS :
                return ((InternalEList) getMetrics ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN :
                return eBasicSetContainer (null, GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN, msgs);
            case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS :
                return ((InternalEList) getMetrics ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
        switch (eContainerFeatureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN :
                return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_EDITOR_GENERATOR__METRICS, GenEditorGenerator.class, msgs);
        }
        return super.eBasicRemoveFromContainerFeature (msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN :
                return getEditorGen ();
            case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS :
                return getMetrics ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS :
                getMetrics ().clear ();
                getMetrics ().addAll ((Collection) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS :
                getMetrics ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN :
                return getEditorGen () != null;
            case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS :
                return metrics != null && ! metrics.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

}

