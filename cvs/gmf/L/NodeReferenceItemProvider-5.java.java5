package org.eclipse.gmf.mappings.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.NodeReference;

import org.eclipse.gmf.mappings.presentation.FilterUtil;

public abstract class NodeReferenceItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public NodeReferenceItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addContainmentFeaturePropertyDescriptor (object);
            addChildrenFeaturePropertyDescriptor (object);
            addChildPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addContainmentFeaturePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_NeedsContainment_containmentFeature_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_NeedsContainment_containmentFeature_feature", "_UI_NeedsContainment_type"), GMFMapPackage.eINSTANCE.getNeedsContainment_ContainmentFeature (), true, null, null, null) {

            protected Collection getComboBoxObjects (Object object) {
                return FilterUtil.filterByContainerMetaclass (super.getComboBoxObjects (object), (NodeReference) object, true);
            }

        }

        );
    }

    protected void addChildrenFeaturePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (new ItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_NodeReference_childrenFeature_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_NodeReference_childrenFeature_feature", "_UI_NodeReference_type"), GMFMapPackage.eINSTANCE.getNodeReference_ChildrenFeature (), true, null, null, null) {

            protected Collection getComboBoxObjects (Object object) {
                return FilterUtil.filterByContainerMetaclass (super.getComboBoxObjects (object), (NodeReference) object, false);
            }

        }

        );
    }

    protected void addChildPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_NodeReference_child_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_NodeReference_child_feature", "_UI_NodeReference_type"), GMFMapPackage.eINSTANCE.getNodeReference_Child (), false, null, null, null));
    }

    public abstract String getText (Object object);

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
    }

    public ResourceLocator getResourceLocator () {
        return GMFMapEditPlugin.INSTANCE;
    }

}

