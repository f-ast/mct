package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.codegen.gmfgen.EntryBase;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

public abstract class EntryBaseImpl extends EObjectImpl implements EntryBase {
    protected static final String TITLE_EDEFAULT = null;
    protected String title = TITLE_EDEFAULT;
    protected static final String DESCRIPTION_EDEFAULT = null;
    protected String description = DESCRIPTION_EDEFAULT;
    protected static final String LARGE_ICON_PATH_EDEFAULT = null;
    protected String largeIconPath = LARGE_ICON_PATH_EDEFAULT;
    protected static final String SMALL_ICON_PATH_EDEFAULT = null;
    protected String smallIconPath = SMALL_ICON_PATH_EDEFAULT;
    protected static final String CREATE_METHOD_NAME_EDEFAULT = null;
    protected String createMethodName = CREATE_METHOD_NAME_EDEFAULT;

    protected EntryBaseImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getEntryBase ();
    }

    public String getTitle () {
        return title;
    }

    public void setTitle (String newTitle) {
        String oldTitle = title;
        title = newTitle;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.ENTRY_BASE__TITLE, oldTitle, title));

    }

    public String getDescription () {
        return description;
    }

    public void setDescription (String newDescription) {
        String oldDescription = description;
        description = newDescription;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.ENTRY_BASE__DESCRIPTION, oldDescription, description));

    }

    public String getLargeIconPath () {
        return largeIconPath;
    }

    public void setLargeIconPath (String newLargeIconPath) {
        String oldLargeIconPath = largeIconPath;
        largeIconPath = newLargeIconPath;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.ENTRY_BASE__LARGE_ICON_PATH, oldLargeIconPath, largeIconPath));

    }

    public String getSmallIconPath () {
        return smallIconPath;
    }

    public void setSmallIconPath (String newSmallIconPath) {
        String oldSmallIconPath = smallIconPath;
        smallIconPath = newSmallIconPath;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.ENTRY_BASE__SMALL_ICON_PATH, oldSmallIconPath, smallIconPath));

    }

    public String getCreateMethodNameGen () {
        return createMethodName;
    }

    public void setCreateMethodName (String newCreateMethodName) {
        String oldCreateMethodName = createMethodName;
        createMethodName = newCreateMethodName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.ENTRY_BASE__CREATE_METHOD_NAME, oldCreateMethodName, createMethodName));

    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.ENTRY_BASE__TITLE :
                return getTitle ();
            case GMFGenPackage.ENTRY_BASE__DESCRIPTION :
                return getDescription ();
            case GMFGenPackage.ENTRY_BASE__LARGE_ICON_PATH :
                return getLargeIconPath ();
            case GMFGenPackage.ENTRY_BASE__SMALL_ICON_PATH :
                return getSmallIconPath ();
            case GMFGenPackage.ENTRY_BASE__CREATE_METHOD_NAME :
                return getCreateMethodName ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.ENTRY_BASE__TITLE :
                setTitle ((String) newValue);
                return;
            case GMFGenPackage.ENTRY_BASE__DESCRIPTION :
                setDescription ((String) newValue);
                return;
            case GMFGenPackage.ENTRY_BASE__LARGE_ICON_PATH :
                setLargeIconPath ((String) newValue);
                return;
            case GMFGenPackage.ENTRY_BASE__SMALL_ICON_PATH :
                setSmallIconPath ((String) newValue);
                return;
            case GMFGenPackage.ENTRY_BASE__CREATE_METHOD_NAME :
                setCreateMethodName ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.ENTRY_BASE__TITLE :
                setTitle (TITLE_EDEFAULT);
                return;
            case GMFGenPackage.ENTRY_BASE__DESCRIPTION :
                setDescription (DESCRIPTION_EDEFAULT);
                return;
            case GMFGenPackage.ENTRY_BASE__LARGE_ICON_PATH :
                setLargeIconPath (LARGE_ICON_PATH_EDEFAULT);
                return;
            case GMFGenPackage.ENTRY_BASE__SMALL_ICON_PATH :
                setSmallIconPath (SMALL_ICON_PATH_EDEFAULT);
                return;
            case GMFGenPackage.ENTRY_BASE__CREATE_METHOD_NAME :
                setCreateMethodName (CREATE_METHOD_NAME_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.ENTRY_BASE__TITLE :
                return TITLE_EDEFAULT == null ? title != null : ! TITLE_EDEFAULT.equals (title);
            case GMFGenPackage.ENTRY_BASE__DESCRIPTION :
                return DESCRIPTION_EDEFAULT == null ? description != null : ! DESCRIPTION_EDEFAULT.equals (description);
            case GMFGenPackage.ENTRY_BASE__LARGE_ICON_PATH :
                return LARGE_ICON_PATH_EDEFAULT == null ? largeIconPath != null : ! LARGE_ICON_PATH_EDEFAULT.equals (largeIconPath);
            case GMFGenPackage.ENTRY_BASE__SMALL_ICON_PATH :
                return SMALL_ICON_PATH_EDEFAULT == null ? smallIconPath != null : ! SMALL_ICON_PATH_EDEFAULT.equals (smallIconPath);
            case GMFGenPackage.ENTRY_BASE__CREATE_METHOD_NAME :
                return CREATE_METHOD_NAME_EDEFAULT == null ? createMethodName != null : ! CREATE_METHOD_NAME_EDEFAULT.equals (createMethodName);
        }
        return super.eIsSet (featureID);
    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (title: ");
        result.append (title);
        result.append (", description: ");
        result.append (description);
        result.append (", largeIconPath: ");
        result.append (largeIconPath);
        result.append (", smallIconPath: ");
        result.append (smallIconPath);
        result.append (", createMethodName: ");
        result.append (createMethodName);
        result.append (')');
        return result.toString ();
    }

    protected final int getEntryID () {
        EReference r = eContainmentFeature ();
        if (r != null) {
            if (eContainer ().eGet (r) instanceof EList) {
                return 1 + ((EList < ? >) eContainer ().eGet (r)).indexOf (this);
            }
            return 1;
        }
        return hashCode ();
    }

}

