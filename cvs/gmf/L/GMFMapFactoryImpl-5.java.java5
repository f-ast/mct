package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.gmf.mappings.*;

import org.eclipse.gmf.mappings.CanvasMapping;

import org.eclipse.gmf.mappings.ChildNodeMapping;

import org.eclipse.gmf.mappings.GMFMapFactory;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.LinkMapping;

import org.eclipse.gmf.mappings.Mapping;

import org.eclipse.gmf.mappings.NodeMapping;

public class GMFMapFactoryImpl extends EFactoryImpl implements GMFMapFactory {

    public GMFMapFactoryImpl () {
        super ();
    }

    public EObject create (EClass eClass) {
        switch (eClass.getClassifierID ()) {
            case GMFMapPackage.NODE_MAPPING :
                return createNodeMapping ();
            case GMFMapPackage.CHILD_NODE_MAPPING :
                return createChildNodeMapping ();
            case GMFMapPackage.LINK_MAPPING :
                return createLinkMapping ();
            case GMFMapPackage.CANVAS_MAPPING :
                return createCanvasMapping ();
            case GMFMapPackage.MAPPING :
                return createMapping ();
            case GMFMapPackage.CONSTRAINT :
                return createConstraint ();
            case GMFMapPackage.VALUE_EXPRESSION :
                return createValueExpression ();
            case GMFMapPackage.FEATURE_SEQ_INITIALIZER :
                return createFeatureSeqInitializer ();
            case GMFMapPackage.FEATURE_VALUE_SPEC :
                return createFeatureValueSpec ();
            default :
                throw new IllegalArgumentException ("The class '" + eClass.getName () + "' is not a valid classifier");
        }
    }

    public NodeMapping createNodeMapping () {
        NodeMappingImpl nodeMapping = new NodeMappingImpl ();
        return nodeMapping;
    }

    public ChildNodeMapping createChildNodeMapping () {
        ChildNodeMappingImpl childNodeMapping = new ChildNodeMappingImpl ();
        return childNodeMapping;
    }

    public LinkMapping createLinkMapping () {
        LinkMappingImpl linkMapping = new LinkMappingImpl ();
        return linkMapping;
    }

    public CanvasMapping createCanvasMapping () {
        CanvasMappingImpl canvasMapping = new CanvasMappingImpl ();
        return canvasMapping;
    }

    public Mapping createMapping () {
        MappingImpl mapping = new MappingImpl ();
        return mapping;
    }

    public Constraint createConstraint () {
        ConstraintImpl constraint = new ConstraintImpl ();
        return constraint;
    }

    public ValueExpression createValueExpression () {
        ValueExpressionImpl valueExpression = new ValueExpressionImpl ();
        return valueExpression;
    }

    public FeatureSeqInitializer createFeatureSeqInitializer () {
        FeatureSeqInitializerImpl featureSeqInitializer = new FeatureSeqInitializerImpl ();
        return featureSeqInitializer;
    }

    public FeatureValueSpec createFeatureValueSpec () {
        FeatureValueSpecImpl featureValueSpec = new FeatureValueSpecImpl ();
        return featureValueSpec;
    }

    public GMFMapPackage getGMFMapPackage () {
        return (GMFMapPackage) getEPackage ();
    }

    public static GMFMapPackage getPackage () {
        return GMFMapPackage.eINSTANCE;
    }

}

