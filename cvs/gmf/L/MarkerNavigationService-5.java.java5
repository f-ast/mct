package org.eclipse.gmf.runtime.common.ui.services.marker;

import java.util.Vector;

import org.eclipse.core.resources.IMarker;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.services.internal.CommonUIServicesDebugOptions;

import org.eclipse.gmf.runtime.common.ui.services.internal.CommonUIServicesPlugin;

import org.eclipse.gmf.runtime.common.ui.services.internal.CommonUIServicesStatusCodes;

import org.eclipse.gmf.runtime.common.ui.services.internal.marker.IMarkerNavigationProvider;

import org.eclipse.swt.widgets.Display;

import org.eclipse.ui.IEditorPart;

public class MarkerNavigationService extends Service implements IMarkerNavigationProvider {
    private final static MarkerNavigationService instance = new MarkerNavigationService ();

    static {
        instance.configureProviders (CommonUIServicesPlugin.getPluginId (), "markerNavigationProviders");
    }

    protected static class MarkerNavigationProviderDescriptor extends Service.ProviderDescriptor {
        protected static final String A_NAME = "name";
        protected static final String E_MARKER_TYPE = "MarkerType";
        private Vector markerTypes = new Vector ();

        protected MarkerNavigationProviderDescriptor (IConfigurationElement element) {
            super (element);
            IConfigurationElement [] elements = getElement ().getChildren (E_MARKER_TYPE);
            for (int i = 0;
            i < elements.length; i ++) {
                String markerType = elements [i].getAttribute (A_NAME);
                if (markerType != null) {
                    markerTypes.add (markerType);
                }
            }
        }

        public boolean provides (IOperation operation) {
            boolean doesProvide = false;
            if (operation instanceof GotoMarkerOperation) {
                try {
                    String markerType = ((GotoMarkerOperation) operation).getMarker ().getType ();
                    if (markerTypes.contains (markerType)) {
                        doesProvide = super.provides (operation);
                    }
                } catch (Exception e) {
                    Trace.catching (CommonUIServicesPlugin.getDefault (), CommonUIServicesDebugOptions.EXCEPTIONS_CATCHING, getClass (), "provides", e);
                    Log.error (CommonUIServicesPlugin.getDefault (), CommonUIServicesStatusCodes.SERVICE_FAILURE, e.getLocalizedMessage (), e);
                    doesProvide = false;
                }
            }
            return doesProvide;
        }

    }

    protected Service.ProviderDescriptor newProviderDescriptor (IConfigurationElement element) {
        return new MarkerNavigationProviderDescriptor (element);
    }

    protected MarkerNavigationService () {
        super (true);
    }

    public static MarkerNavigationService getInstance () {
        return instance;
    }

    private void execute (GotoMarkerOperation operation) {
        execute (ExecutionStrategy.FIRST, operation);
    }

    public void gotoMarker (final IEditorPart editor, final IMarker marker) {
        assert null != editor;
        assert null != marker;
        Display.getDefault ().asyncExec (new Runnable () {

            public void run () {
                execute (new GotoMarkerOperation (editor, marker));
            }

        }

        );
    }

}

