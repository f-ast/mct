package org.eclipse.gmf.internal.xpand.util;

import java.io.IOException;

import java.io.Reader;

import org.eclipse.gmf.internal.xpand.ast.Template;

import org.eclipse.gmf.internal.xpand.model.XpandResource;

import org.eclipse.gmf.internal.xpand.parser.XpandLexer;

import org.eclipse.gmf.internal.xpand.parser.XpandParser;

public class XpandResourceParser {

    public XpandResource parse (final Reader source, final String qualifiedTemplateName) throws IOException, ParserException {
        Template tpl = null;
        XpandParser parser = null;
        XpandLexer scanner = null;
        final char [] buffer = new StreamConverter ().toCharArray (source);
        try {
            scanner = new XpandLexer (buffer, qualifiedTemplateName);
            parser = new XpandParser (scanner);
            scanner.lexer (parser);
            tpl = parser.parser ();
        } catch (final Exception e) {
            ParserException.ErrorLocationInfo [] errors = scanner.getErrors ();
            if (errors.length == 0) {
                throw new IOException ("Unexpected exception while parsing");
            } else {
                throw new ParserException (errors);
            }
        }
        if (tpl != null) {
            tpl.setFullyQualifiedName (qualifiedTemplateName);
            return tpl;
        }
        ParserException.ErrorLocationInfo [] errors = scanner.getErrors ();
        assert errors.length > 0 : "otherwise, no reason not to get template";
        throw new ParserException (errors);
    }

}

