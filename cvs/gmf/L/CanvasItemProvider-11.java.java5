package org.eclipse.gmf.gmfgraph.provider;

import java.util.Collection;

import java.util.Iterator;

import java.util.LinkedList;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.command.CommandParameter;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.gmfgraph.Canvas;

import org.eclipse.gmf.gmfgraph.DiagramLabel;

import org.eclipse.gmf.gmfgraph.GMFGraphFactory;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

public class CanvasItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public CanvasItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addNamePropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addNamePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_Identity_name_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_Identity_name_feature", "_UI_Identity_type"), GMFGraphPackage.eINSTANCE.getIdentity_Name (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getCanvas_Figures ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getCanvas_Nodes ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getCanvas_Connections ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getCanvas_Compartments ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getCanvas_Labels ());
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        if (object instanceof Canvas && child instanceof DiagramLabel) {
            return GMFGraphPackage.eINSTANCE.getCanvas_Labels ();
        }
        return super.getChildFeature (object, child);
    }

    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/Canvas"));
    }

    public String getText (Object object) {
        String label = ((Canvas) object).getName ();
        return label == null || label.length () == 0 ? getString ("_UI_Canvas_type") : getString ("_UI_Canvas_type") + " " + label;
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (Canvas.class)) {
            case GMFGraphPackage.CANVAS__NAME :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
            case GMFGraphPackage.CANVAS__FIGURES :
            case GMFGraphPackage.CANVAS__NODES :
            case GMFGraphPackage.CANVAS__CONNECTIONS :
            case GMFGraphPackage.CANVAS__COMPARTMENTS :
            case GMFGraphPackage.CANVAS__LABELS :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptorsGen (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCanvas_Figures (), GMFGraphFactory.eINSTANCE.createFigureGallery ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCanvas_Nodes (), GMFGraphFactory.eINSTANCE.createNode ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCanvas_Nodes (), GMFGraphFactory.eINSTANCE.createDiagramLabel ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCanvas_Connections (), GMFGraphFactory.eINSTANCE.createConnection ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCanvas_Compartments (), GMFGraphFactory.eINSTANCE.createCompartment ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getCanvas_Labels (), GMFGraphFactory.eINSTANCE.createDiagramLabel ()));
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        LinkedList allGenerated = new LinkedList ();
        collectNewChildDescriptorsGen (allGenerated, object);
        CommandParameter toRemove = createChildParameter (GMFGraphPackage.eINSTANCE.getCanvas_Nodes (), GMFGraphFactory.eINSTANCE.createDiagramLabel ());
        for (Iterator generated = allGenerated.iterator ();
        generated.hasNext ();) {
            CommandParameter next = (CommandParameter) generated.next ();
            if (equalsChildParameters (toRemove, next)) {
                generated.remove ();
                break;
            }
        }
        newChildDescriptors.addAll (allGenerated);
    }

    private static boolean equalsChildParameters (CommandParameter first, CommandParameter second) {
        if (! first.getFeature ().equals (second.getFeature ())) {
            return false;
        }
        assert first.getValue () instanceof EObject;
        assert second.getValue () instanceof EObject;
        EClass firstEClass = ((EObject) first.getValue ()).eClass ();
        EClass secondEClass = ((EObject) second.getValue ()).eClass ();
        assert firstEClass.getEPackage ().getNsURI ().equals (secondEClass.getEPackage ().getNsURI ());
        return firstEClass.getClassifierID () == secondEClass.getClassifierID ();
    }

    public String getCreateChildText (Object owner, Object feature, Object child, Collection selection) {
        Object childFeature = feature;
        Object childObject = child;
        boolean qualify = childFeature == GMFGraphPackage.eINSTANCE.getCanvas_Nodes () || childFeature == GMFGraphPackage.eINSTANCE.getCanvas_Labels ();
        if (qualify) {
            return getString ("_UI_CreateChild_text2", new Object [] {getTypeText (childObject), getFeatureText (childFeature), getTypeText (owner)});
        }
        return super.getCreateChildText (owner, feature, child, selection);
    }

    public ResourceLocator getResourceLocator () {
        return GMFGraphEditPlugin.INSTANCE;
    }

}

