package org.eclipse.gmf.runtime.common.core.command;

import java.util.Collection;

import java.util.Collections;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.core.runtime.Status;

import org.eclipse.gmf.runtime.common.core.internal.CommonCoreDebugOptions;

import org.eclipse.gmf.runtime.common.core.internal.CommonCorePlugin;

import org.eclipse.gmf.runtime.common.core.internal.CommonCoreStatusCodes;

import org.eclipse.gmf.runtime.common.core.internal.l10n.ResourceManager;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

public abstract class AbstractCommand implements ICommand {
    protected static final String EMPTY_STRING = "";
    protected static final String CANCELLED_MESSAGE = ResourceManager.getInstance ().getString ("AbstractCommand._INFO_.cancelOperation");
    private final String label;
    private CommandResult result = null;

    protected AbstractCommand (String label) {
        super ();
        this.label = label;
    }

    public String getLabel () {
        return label;
    }

    public final CommandResult getCommandResult () {
        return result;
    }

    protected final void setResult (CommandResult result) {
        this.result = result;
    }

    public Collection getAffectedObjects () {
        return Collections.EMPTY_LIST;
    }

    public boolean involvesReadOnlyNonWorkSpaceFiles () {
        return false;
    }

    public CMValidator getValidator () {
        return new CMValidator ();
    }

    protected String getPluginId () {
        return CommonCorePlugin.getPluginId ();
    }

    public ICommand compose (ICommand command) {
        assert null != command : "null command";
        return new CompositeCommand (getLabel ()).compose (this).compose (command);
    }

    public boolean isExecutable () {
        return true;
    }

    public boolean isRedoable () {
        return false;
    }

    public boolean isUndoable () {
        return false;
    }

    public void execute (IProgressMonitor progressMonitor) {
        IProgressMonitor monitor = (progressMonitor == null) ? new NullProgressMonitor () : progressMonitor;
        try {
            if (getValidator ().okToEdit (this)) {
                setResult (doExecute (monitor));
            } else {
                setResult (newCancelledCommandResult ());
            }
        } catch (Exception e) {
            handle (e);
        }
    }

    public void redo () {
        try {
            if (getValidator ().okToEdit (this)) {
                setResult (doRedo ());
            } else {
                setResult (newCancelledCommandResult ());
            }
        } catch (Exception e) {
            handle (e);
        }
    }

    public void undo () {
        try {
            if (getValidator ().okToEdit (this)) {
                setResult (doUndo ());
            } else {
                setResult (newCancelledCommandResult ());
            }
        } catch (Exception e) {
            handle (e);
        }
    }

    protected CommandResult newOKCommandResult () {
        return new CommandResult (new Status (IStatus.OK, getPluginId (), CommonCoreStatusCodes.OK, EMPTY_STRING, null));
    }

    protected CommandResult newOKCommandResult (Object returnValue) {
        return new CommandResult (new Status (IStatus.OK, getPluginId (), CommonCoreStatusCodes.OK, EMPTY_STRING, null), returnValue);
    }

    protected CommandResult newCancelledCommandResult () {
        return new CommandResult (new Status (IStatus.ERROR, getPluginId (), CommonCoreStatusCodes.CANCELLED, CANCELLED_MESSAGE, null), null);
    }

    protected CommandResult newErrorCommandResult (String errorMessage) {
        return new CommandResult (new Status (IStatus.ERROR, getPluginId (), CommonCoreStatusCodes.COMMAND_FAILURE, errorMessage, null));
    }

    protected CommandResult newWarningCommandResult (String warningMessage, Object returnValue) {
        return new CommandResult (new Status (IStatus.WARNING, getPluginId (), CommonCoreStatusCodes.OK, warningMessage, null), returnValue);
    }

    protected void handle (Exception exception) {
        Trace.catching (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.EXCEPTIONS_CATCHING, getClass (), "handle", exception);
        setResult (new CommandResult (new Status (IStatus.ERROR, getPluginId (), CommonCoreStatusCodes.COMMAND_FAILURE, String.valueOf (exception.getMessage ()), exception)));
        Log.log (CommonCorePlugin.getDefault (), getCommandResult ().getStatus ());
    }

    protected abstract CommandResult doExecute (IProgressMonitor progressMonitor);

    protected CommandResult doRedo () {
        UnsupportedOperationException uoe = new UnsupportedOperationException ();
        Trace.throwing (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.EXCEPTIONS_THROWING, getClass (), "doRedo", uoe);
        throw uoe;
    }

    protected CommandResult doUndo () {
        UnsupportedOperationException uoe = new UnsupportedOperationException ();
        Trace.throwing (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.EXCEPTIONS_THROWING, getClass (), "doUndo", uoe);
        throw uoe;
    }

}

