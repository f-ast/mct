package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import java.util.HashSet;

import java.util.Set;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.BasicEList;

import org.eclipse.emf.common.util.ECollections;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.FeatureLinkModelFacet;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCompartment;

import org.eclipse.gmf.codegen.gmfgen.GenLink;

import org.eclipse.gmf.codegen.gmfgen.GenNode;

import org.eclipse.gmf.codegen.gmfgen.GenNodeLabel;

import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;

import org.eclipse.gmf.codegen.gmfgen.TypeModelFacet;

public abstract class GenNodeImpl extends GenChildContainerImpl implements GenNode {
    protected TypeModelFacet modelFacet = null;
    protected EList < GenNodeLabel > labels = null;
    protected EList < GenCompartment > compartments = null;
    protected static final String PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME_EDEFAULT = null;
    protected String primaryDragEditPolicyQualifiedClassName = PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME_EDEFAULT;
    protected static final String GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT = null;
    protected String graphicalNodeEditPolicyClassName = GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT;
    protected static final String CREATE_COMMAND_CLASS_NAME_EDEFAULT = null;
    protected String createCommandClassName = CREATE_COMMAND_CLASS_NAME_EDEFAULT;

    protected GenNodeImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenNode ();
    }

    public GenClass getDomainMetaClass () {
        return getModelFacet () == null ? null : getModelFacet ().getMetaClass ();
    }

    public String getGraphicalNodeEditPolicyQualifiedClassName () {
        return getDiagram ().getEditPoliciesPackageName () + '.' + getGraphicalNodeEditPolicyClassName ();
    }

    public String getCreateCommandQualifiedClassName () {
        return getDiagram ().getEditCommandsPackageName () + '.' + getCreateCommandClassName ();
    }

    @SuppressWarnings("unchecked")
    @Override
    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_NODE__LABELS :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getLabels ()).basicAdd (otherEnd, msgs);
            case GMFGenPackage.GEN_NODE__COMPARTMENTS :
                return ((InternalEList < InternalEObject >) (InternalEList < ? >) getCompartments ()).basicAdd (otherEnd, msgs);
        }
        return super.eInverseAdd (otherEnd, featureID, msgs);
    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.GEN_NODE__MODEL_FACET :
                return basicSetModelFacet (null, msgs);
            case GMFGenPackage.GEN_NODE__LABELS :
                return ((InternalEList < ? >) getLabels ()).basicRemove (otherEnd, msgs);
            case GMFGenPackage.GEN_NODE__COMPARTMENTS :
                return ((InternalEList < ? >) getCompartments ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.GEN_NODE__MODEL_FACET :
                return getModelFacet ();
            case GMFGenPackage.GEN_NODE__LABELS :
                return getLabels ();
            case GMFGenPackage.GEN_NODE__COMPARTMENTS :
                return getCompartments ();
            case GMFGenPackage.GEN_NODE__PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME :
                return getPrimaryDragEditPolicyQualifiedClassName ();
            case GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME :
                return getGraphicalNodeEditPolicyClassName ();
            case GMFGenPackage.GEN_NODE__CREATE_COMMAND_CLASS_NAME :
                return getCreateCommandClassName ();
            case GMFGenPackage.GEN_NODE__REORIENTED_INCOMING_LINKS :
                return getReorientedIncomingLinks ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @SuppressWarnings("unchecked")
    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.GEN_NODE__MODEL_FACET :
                setModelFacet ((TypeModelFacet) newValue);
                return;
            case GMFGenPackage.GEN_NODE__LABELS :
                getLabels ().clear ();
                getLabels ().addAll ((Collection < ? extends GenNodeLabel >) newValue);
                return;
            case GMFGenPackage.GEN_NODE__COMPARTMENTS :
                getCompartments ().clear ();
                getCompartments ().addAll ((Collection < ? extends GenCompartment >) newValue);
                return;
            case GMFGenPackage.GEN_NODE__PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME :
                setPrimaryDragEditPolicyQualifiedClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME :
                setGraphicalNodeEditPolicyClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NODE__CREATE_COMMAND_CLASS_NAME :
                setCreateCommandClassName ((String) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_NODE__MODEL_FACET :
                setModelFacet ((TypeModelFacet) null);
                return;
            case GMFGenPackage.GEN_NODE__LABELS :
                getLabels ().clear ();
                return;
            case GMFGenPackage.GEN_NODE__COMPARTMENTS :
                getCompartments ().clear ();
                return;
            case GMFGenPackage.GEN_NODE__PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME :
                setPrimaryDragEditPolicyQualifiedClassName (PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME :
                setGraphicalNodeEditPolicyClassName (GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NODE__CREATE_COMMAND_CLASS_NAME :
                setCreateCommandClassName (CREATE_COMMAND_CLASS_NAME_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.GEN_NODE__MODEL_FACET :
                return modelFacet != null;
            case GMFGenPackage.GEN_NODE__LABELS :
                return labels != null && ! labels.isEmpty ();
            case GMFGenPackage.GEN_NODE__COMPARTMENTS :
                return compartments != null && ! compartments.isEmpty ();
            case GMFGenPackage.GEN_NODE__PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME :
                return PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME_EDEFAULT == null ? primaryDragEditPolicyQualifiedClassName != null : ! PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME_EDEFAULT.equals (primaryDragEditPolicyQualifiedClassName);
            case GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME :
                return GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? graphicalNodeEditPolicyClassName != null : ! GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals (graphicalNodeEditPolicyClassName);
            case GMFGenPackage.GEN_NODE__CREATE_COMMAND_CLASS_NAME :
                return CREATE_COMMAND_CLASS_NAME_EDEFAULT == null ? createCommandClassName != null : ! CREATE_COMMAND_CLASS_NAME_EDEFAULT.equals (createCommandClassName);
            case GMFGenPackage.GEN_NODE__REORIENTED_INCOMING_LINKS :
                return ! getReorientedIncomingLinks ().isEmpty ();
        }
        return super.eIsSet (featureID);
    }

    public EList < GenNodeLabel > getLabels () {
        if (labels == null) {
            labels = new EObjectContainmentWithInverseEList < GenNodeLabel > (GenNodeLabel.class, this, GMFGenPackage.GEN_NODE__LABELS, GMFGenPackage.GEN_NODE_LABEL__NODE);
        }
        return labels;
    }

    public EList < GenCompartment > getCompartments () {
        if (compartments == null) {
            compartments = new EObjectWithInverseResolvingEList < GenCompartment > (GenCompartment.class, this, GMFGenPackage.GEN_NODE__COMPARTMENTS, GMFGenPackage.GEN_COMPARTMENT__NODE);
        }
        return compartments;
    }

    public String getPrimaryDragEditPolicyQualifiedClassName () {
        return primaryDragEditPolicyQualifiedClassName;
    }

    public void setPrimaryDragEditPolicyQualifiedClassName (String newPrimaryDragEditPolicyQualifiedClassName) {
        String oldPrimaryDragEditPolicyQualifiedClassName = primaryDragEditPolicyQualifiedClassName;
        primaryDragEditPolicyQualifiedClassName = newPrimaryDragEditPolicyQualifiedClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NODE__PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME, oldPrimaryDragEditPolicyQualifiedClassName, primaryDragEditPolicyQualifiedClassName));

    }

    public String getGraphicalNodeEditPolicyClassNameGen () {
        return graphicalNodeEditPolicyClassName;
    }

    public String getGraphicalNodeEditPolicyClassName () {
        return getValidClassName (getGraphicalNodeEditPolicyClassNameGen (), this, GRAPHICAL_NODE_EDIT_POLICY_SUFFIX);
    }

    public void setGraphicalNodeEditPolicyClassName (String newGraphicalNodeEditPolicyClassName) {
        String oldGraphicalNodeEditPolicyClassName = graphicalNodeEditPolicyClassName;
        graphicalNodeEditPolicyClassName = newGraphicalNodeEditPolicyClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME, oldGraphicalNodeEditPolicyClassName, graphicalNodeEditPolicyClassName));

    }

    public String getCreateCommandClassNameGen () {
        return createCommandClassName;
    }

    public String getCreateCommandClassName () {
        return GenCommonBaseImpl.getValidClassName (getCreateCommandClassNameGen (), this, CREATE_COMMAND_SUFFIX);
    }

    public void setCreateCommandClassName (String newCreateCommandClassName) {
        String oldCreateCommandClassName = createCommandClassName;
        createCommandClassName = newCreateCommandClassName;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NODE__CREATE_COMMAND_CLASS_NAME, oldCreateCommandClassName, createCommandClassName));

    }

    public TypeModelFacet getModelFacet () {
        return modelFacet;
    }

    public NotificationChain basicSetModelFacet (TypeModelFacet newModelFacet, NotificationChain msgs) {
        TypeModelFacet oldModelFacet = modelFacet;
        modelFacet = newModelFacet;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NODE__MODEL_FACET, oldModelFacet, newModelFacet);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setModelFacet (TypeModelFacet newModelFacet) {
        if (newModelFacet != modelFacet) {
            NotificationChain msgs = null;
            if (modelFacet != null) msgs = ((InternalEObject) modelFacet).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_NODE__MODEL_FACET, null, msgs);

            if (newModelFacet != null) msgs = ((InternalEObject) newModelFacet).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_NODE__MODEL_FACET, null, msgs);

            msgs = basicSetModelFacet (newModelFacet, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NODE__MODEL_FACET, newModelFacet, newModelFacet));

    }

    @Override
    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (primaryDragEditPolicyQualifiedClassName: ");
        result.append (primaryDragEditPolicyQualifiedClassName);
        result.append (", graphicalNodeEditPolicyClassName: ");
        result.append (graphicalNodeEditPolicyClassName);
        result.append (", createCommandClassName: ");
        result.append (createCommandClassName);
        result.append (')');
        return result.toString ();
    }

    public String getClassNamePrefix () {
        if (getDomainMetaClass () != null) {
            String name = getDomainMetaClass ().getName ();
            if (! isEmpty (name)) {
                return getValidClassName (name);
            }
        }
        return CLASS_NAME_PREFIX;
    }

    public EList < GenLink > getReorientedIncomingLinks () {
        if (getModelFacet () == null) {
            return ECollections.emptyEList ();
        }
        Set < GenLink > reorientedLinks = new HashSet < GenLink > ();
        for (GenLink genLink : getDiagram ().getLinks ()) {
            if (! genLink.isViewDirectionAlignedWithModel () || genLink.getModelFacet () == null) {
                continue;
            }
            GenClass incomingClass;
            GenClass outgoingClass;
            if (genLink.getModelFacet () instanceof TypeLinkModelFacet) {
                TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet ();
                outgoingClass = modelFacet.getSourceMetaFeature () == null ? modelFacet.getContainmentMetaFeature ().getGenClass () : modelFacet.getSourceMetaFeature ().getTypeGenClass ();
                incomingClass = modelFacet.getTargetMetaFeature ().getTypeGenClass ();
            } else if (genLink.getModelFacet () instanceof FeatureLinkModelFacet) {
                GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet ()).getMetaFeature ();
                outgoingClass = metaFeature.getGenClass ();
                incomingClass = metaFeature.getTypeGenClass ();
            } else {
                continue;
            }

            GenClass nodeMetaClass = getModelFacet ().getMetaClass ();
            boolean canBeSource = outgoingClass.getEcoreClass ().isSuperTypeOf (nodeMetaClass.getEcoreClass ());
            boolean canBeTarget = incomingClass.getEcoreClass ().isSuperTypeOf (nodeMetaClass.getEcoreClass ());
            if (canBeSource && canBeTarget) {
                continue;
            }
            if (genLink.isIncomingCreationAllowed () && canBeSource) {
                reorientedLinks.add (genLink);
            }
        }
        return new BasicEList.UnmodifiableEList < GenLink > (reorientedLinks.size (), reorientedLinks.toArray ());
    }

    public boolean isSansDomain () {
        return getModelFacet () == null;
    }

}

