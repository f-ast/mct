package org.eclipse.gmf.runtime.common.ui.preferences;

import org.eclipse.jface.dialogs.IDialogConstants;

import org.eclipse.jface.preference.FieldEditor;

import org.eclipse.jface.preference.PreferenceConverter;

import org.eclipse.jface.resource.JFaceResources;

import org.eclipse.jface.resource.StringConverter;

import org.eclipse.jface.util.Assert;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.DisposeEvent;

import org.eclipse.swt.events.DisposeListener;

import org.eclipse.swt.events.SelectionAdapter;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.graphics.Font;

import org.eclipse.swt.graphics.FontData;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.widgets.Button;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.FontDialog;

import org.eclipse.swt.widgets.Label;

import org.eclipse.swt.widgets.Text;

public class FontFieldEditor extends FieldEditor {
    private Button changeFontButton = null;
    private String changeButtonText;
    private String previewText;
    private FontData [] chosenFont;
    private Label valueControl;
    private DefaultPreviewer previewer;
    private static class DefaultPreviewer {
        private Text text;
        private String string;
        private Font font;

        public DefaultPreviewer (String s, Composite parent) {
            string = s;
            text = new Text (parent, SWT.READ_ONLY | SWT.BORDER);
            text.addDisposeListener (new DisposeListener () {

                public void widgetDisposed (DisposeEvent e) {
                    if (font != null) font.dispose ();

                }

            }

            );
            if (string != null) text.setText (string);

        }

        public Control getControl () {
            return text;
        }

        public void setFont (FontData [] fontData) {
            if (font != null) font.dispose ();

            font = new Font (text.getDisplay (), fontData);
            text.setFont (font);
        }

        public int getPreferredExtent () {
            return 40;
        }

    }

    public FontFieldEditor (String name, String labelText, String previewAreaText, Composite parent) {
        init (name, labelText);
        previewText = previewAreaText;
        changeButtonText = JFaceResources.getString ("openChange");
        createControl (parent);
    }

    public FontFieldEditor (String name, String labelText, Composite parent) {
        this (name, labelText, null, parent);
    }

    protected void adjustForNumColumns (int numColumns) {
        GridData data = new GridData ();
        if (valueControl.getLayoutData () != null) data = (GridData) valueControl.getLayoutData ();

        data.horizontalSpan = numColumns - getNumberOfControls () + 1;
        valueControl.setLayoutData (data);
    }

    protected void applyFont () {
        if (chosenFont != null && previewer != null) previewer.setFont (chosenFont);

    }

    protected void doFillIntoGrid (Composite parent, int numColumns) {
        getLabelControl (parent);
        valueControl = getValueControl (parent);
        GridData gd = new GridData (GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
        gd.horizontalSpan = numColumns - getNumberOfControls () + 1;
        valueControl.setLayoutData (gd);
        if (previewText != null) {
            previewer = new DefaultPreviewer (previewText, parent);
            gd = new GridData (GridData.FILL_HORIZONTAL);
            gd.heightHint = previewer.getPreferredExtent ();
            gd.widthHint = previewer.getPreferredExtent ();
            previewer.getControl ().setLayoutData (gd);
        }
        changeFontButton = getChangeControl (parent);
        gd = new GridData ();
        gd.heightHint = convertVerticalDLUsToPixels (changeFontButton, IDialogConstants.BUTTON_HEIGHT);
        int widthHint = convertHorizontalDLUsToPixels (changeFontButton, IDialogConstants.BUTTON_WIDTH);
        gd.widthHint = Math.max (widthHint, changeFontButton.computeSize (SWT.DEFAULT, SWT.DEFAULT, true).x);
        changeFontButton.setLayoutData (gd);
    }

    protected void doLoad () {
        if (changeFontButton == null) return;

        updateFont (PreferenceConverter.getFontDataArray (getPreferenceStore (), getPreferenceName ()));
    }

    protected void doLoadDefault () {
        if (changeFontButton == null) return;

        updateFont (PreferenceConverter.getDefaultFontDataArray (getPreferenceStore (), getPreferenceName ()));
    }

    protected void doStore () {
        if (chosenFont != null) PreferenceConverter.setValue (getPreferenceStore (), getPreferenceName (), chosenFont);

    }

    protected Button getChangeControl (Composite parent) {
        if (changeFontButton == null) {
            changeFontButton = new Button (parent, SWT.PUSH);
            if (changeButtonText != null) changeFontButton.setText (changeButtonText);

            changeFontButton.addSelectionListener (new SelectionAdapter () {

                public void widgetSelected (SelectionEvent event) {
                    FontDialog fontDialog = new FontDialog (changeFontButton.getShell ());
                    if (chosenFont != null) fontDialog.setFontList (chosenFont);

                    FontData font = fontDialog.open ();
                    if (font != null) {
                        FontData [] oldFont = chosenFont;
                        if (oldFont == null) oldFont = JFaceResources.getDefaultFont ().getFontData ();

                        setPresentsDefaultValue (false);
                        FontData [] newData = new FontData [1];
                        newData [0] = font;
                        updateFont (newData);
                        fireValueChanged (VALUE, oldFont [0], font);
                    }
                }

            }

            );
            changeFontButton.addDisposeListener (new DisposeListener () {

                public void widgetDisposed (DisposeEvent event) {
                    changeFontButton = null;
                }

            }

            );
            changeFontButton.setFont (parent.getFont ());
            setButtonLayoutData (changeFontButton);
        } else {
            checkParent (changeFontButton, parent);
        }
        return changeFontButton;
    }

    public int getNumberOfControls () {
        if (previewer == null) return 3;
        else return 4;

    }

    public int getPreferredPreviewHeight () {
        if (previewer == null) return - 1;

        return previewer.getPreferredExtent ();
    }

    public Control getPreviewControl () {
        if (previewer == null) return null;

        return previewer.getControl ();
    }

    protected Label getValueControl (Composite parent) {
        if (valueControl == null) {
            valueControl = new Label (parent, SWT.LEFT);
            valueControl.setFont (parent.getFont ());
            valueControl.addDisposeListener (new DisposeListener () {

                public void widgetDisposed (DisposeEvent event) {
                    valueControl = null;
                }

            }

            );
        } else {
            checkParent (valueControl, parent);
        }
        return valueControl;
    }

    public void setChangeButtonText (String text) {
        Assert.isNotNull (text);
        changeButtonText = text;
        if (changeFontButton != null) changeFontButton.setText (text);

    }

    private void updateFont (FontData font []) {
        FontData [] bestFont = JFaceResources.getFontRegistry ().bestDataArray (font, valueControl.getDisplay ());
        if (bestFont == null) bestFont = getDefaultFontData ();

        this.chosenFont = bestFont;
        if (valueControl != null) {
            valueControl.setText (StringConverter.asString (chosenFont [0]));
        }
        if (previewer != null) {
            previewer.setFont (bestFont);
        }
    }

    protected void setToDefault () {
        FontData [] defaultFontData = PreferenceConverter.getDefaultFontDataArray (getPreferenceStore (), getPreferenceName ());
        PreferenceConverter.setValue (getPreferenceStore (), getPreferenceName (), defaultFontData);
    }

    private FontData [] getDefaultFontData () {
        return valueControl.getDisplay ().getSystemFont ().getFontData ();
    }

    public void setEnabled (boolean enabled, Composite parent) {
        super.setEnabled (enabled, parent);
        getChangeControl (parent).setEnabled (enabled);
        getValueControl (parent).setEnabled (enabled);
    }

    public void setFont (FontData newFont) {
        FontData [] oldFont = chosenFont;
        if (oldFont == null) oldFont = JFaceResources.getDefaultFont ().getFontData ();

        setPresentsDefaultValue (false);
        FontData [] newData = new FontData [1];
        newData [0] = newFont;
        updateFont (newData);
        fireValueChanged (VALUE, oldFont [0], newFont);
    }

}

