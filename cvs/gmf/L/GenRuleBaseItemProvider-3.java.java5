package org.eclipse.gmf.codegen.gmfgen.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenRuleBase;

import org.eclipse.gmf.codegen.gmfgen.presentation.EditorPlugin;

public class GenRuleBaseItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public GenRuleBaseItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addNamePropertyDescriptor (object);
            addDescriptionPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addNamePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenRuleBase_name_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenRuleBase_name_feature", "_UI_GenRuleBase_type"), GMFGenPackage.eINSTANCE.getGenRuleBase_Name (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addDescriptionPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_GenRuleBase_description_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_GenRuleBase_description_feature", "_UI_GenRuleBase_type"), GMFGenPackage.eINSTANCE.getGenRuleBase_Description (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/GenRuleBase"));
    }

    public String getText (Object object) {
        String label = ((GenRuleBase) object).getName ();
        return label == null || label.length () == 0 ? getString ("_UI_GenRuleBase_type") : getString ("_UI_GenRuleBase_type") + " " + label;
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (GenRuleBase.class)) {
            case GMFGenPackage.GEN_RULE_BASE__NAME :
            case GMFGenPackage.GEN_RULE_BASE__DESCRIPTION :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
    }

    public ResourceLocator getResourceLocator () {
        return EditorPlugin.INSTANCE;
    }

}

