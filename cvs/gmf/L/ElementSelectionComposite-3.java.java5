package org.eclipse.gmf.runtime.common.ui.services.elementselection;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.gmf.runtime.common.ui.services.internal.elementselection.ElementSelectionCompositeContentProvider;

import org.eclipse.gmf.runtime.common.ui.services.internal.elementselection.ElementSelectionCompositeLabelProvider;

import org.eclipse.jface.dialogs.Dialog;

import org.eclipse.jface.resource.JFaceResources;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.jface.viewers.TableViewer;

import org.eclipse.jface.viewers.ViewerSorter;

import org.eclipse.swt.SWT;

import org.eclipse.swt.events.ModifyEvent;

import org.eclipse.swt.events.ModifyListener;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.events.SelectionListener;

import org.eclipse.swt.graphics.FontMetrics;

import org.eclipse.swt.graphics.GC;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.layout.GridLayout;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Label;

import org.eclipse.swt.widgets.Table;

import org.eclipse.swt.widgets.Text;

public abstract class ElementSelectionComposite {
    private final String title;
    private final List selectedElements = new ArrayList ();
    private Text filterText = null;
    private TableViewer tableViewer = null;
    private AbstractElementSelectionInput input;

    public ElementSelectionComposite (String title, AbstractElementSelectionInput input) {
        super ();
        this.title = title;
        this.input = input;
    }

    abstract protected boolean isValidSelection (List currentSelectedElements);

    protected abstract void handleSelection (boolean isValid);

    public Composite createComposite (Composite parent) {
        Composite result = new Composite (parent, SWT.NONE);
        result.setLayout (new GridLayout ());
        result.setLayoutData (new GridData (GridData.FILL_BOTH));
        Label label = new Label (result, SWT.NONE);
        label.setText (title);
        filterText = new Text (result, SWT.SINGLE | SWT.BORDER);
        filterText.setLayoutData (new GridData (GridData.FILL_HORIZONTAL));
        filterText.addModifyListener (new ModifyListener () {

            public void modifyText (ModifyEvent e) {
                handleFilterChange ();
            }

        }

        );
        int selectStyle = SWT.SINGLE;
        tableViewer = new TableViewer (result, selectStyle | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
        tableViewer.setUseHashlookup (true);
        Table table = tableViewer.getTable ();
        GridData gridData = new GridData (GridData.FILL_BOTH);
        GC gc = new GC (result);
        gc.setFont (JFaceResources.getDefaultFont ());
        FontMetrics fontMetrics = gc.getFontMetrics ();
        gc.dispose ();
        gridData.widthHint = Dialog.convertWidthInCharsToPixels (fontMetrics, 80);
        gridData.heightHint = table.getItemHeight () * 15;
        table.setLayoutData (gridData);
        table.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                handleSelectionChange ();
            }

            public void widgetDefaultSelected (SelectionEvent e) {
            }

        }

        );
        tableViewer.setLabelProvider (new ElementSelectionCompositeLabelProvider ());
        tableViewer.setContentProvider (new ElementSelectionCompositeContentProvider ());
        tableViewer.setSorter (new ViewerSorter ());
        createCompositeAdditions (result);
        return result;
    }

    protected void createCompositeAdditions (Composite parent) {
    }

    private void handleFilterChange () {
        input.setFilter (filterText.getText ());
        tableViewer.setInput (input);
        Object element = tableViewer.getElementAt (0);
        if (element != null) {
            tableViewer.setSelection (new StructuredSelection (element), true);
        }
        handleSelectionChange ();
    }

    private void handleSelectionChange () {
        StructuredSelection selection = (StructuredSelection) tableViewer.getSelection ();
        if (selection.size () == 0) {
            selectedElements.clear ();
            handleSelection (false);
            return;
        }
        List selectionList = selection.toList ();
        List currentSelectedElements = new ArrayList ();
        for (Iterator iter = selectionList.iterator ();
        iter.hasNext ();) {
            AbstractMatchingObject matchingObject = (AbstractMatchingObject) iter.next ();
            currentSelectedElements.add (matchingObject);
        }
        boolean isValidSelection = isValidSelection (currentSelectedElements);
        selectedElements.clear ();
        if (isValidSelection) {
            selectedElements.addAll (currentSelectedElements);
        }
        handleSelection (isValidSelection);
    }

    public List getSelectedElements () {
        List result = new ArrayList ();
        for (Iterator iter = selectedElements.iterator ();
        iter.hasNext ();) {
            IMatchingObject matchingObject = (IMatchingObject) iter.next ();
            IElementSelectionProvider provider = matchingObject.getProvider ();
            Object object = provider.resolve (matchingObject);
            result.add (object);
        }
        return result;
    }

}

