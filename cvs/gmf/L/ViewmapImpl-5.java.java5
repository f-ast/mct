package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import java.util.Iterator;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.Attributes;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.Viewmap;

public abstract class ViewmapImpl extends EObjectImpl implements Viewmap {
    protected EList attributes = null;

    protected ViewmapImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getViewmap ();
    }

    public EList getAttributes () {
        if (attributes == null) {
            attributes = new EObjectContainmentEList (Attributes.class, this, GMFGenPackage.VIEWMAP__ATTRIBUTES);
        }
        return attributes;
    }

    public Attributes find (Class attributesClass) {
        for (Iterator it = getAttributes ().iterator ();
        it.hasNext ();) {
            Attributes next = (Attributes) it.next ();
            if (attributesClass.isInstance (next)) {
                return next;
            }
        }
        return null;
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGenPackage.VIEWMAP__ATTRIBUTES :
                return ((InternalEList) getAttributes ()).basicRemove (otherEnd, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGenPackage.VIEWMAP__ATTRIBUTES :
                return getAttributes ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGenPackage.VIEWMAP__ATTRIBUTES :
                getAttributes ().clear ();
                getAttributes ().addAll ((Collection) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGenPackage.VIEWMAP__ATTRIBUTES :
                getAttributes ().clear ();
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGenPackage.VIEWMAP__ATTRIBUTES :
                return attributes != null && ! attributes.isEmpty ();
        }
        return super.eIsSet (featureID);
    }

}

