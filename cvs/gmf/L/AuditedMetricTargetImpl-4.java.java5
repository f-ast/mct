package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.mappings.AuditedMetricTarget;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.MetricRule;

public class AuditedMetricTargetImpl extends EObjectImpl implements AuditedMetricTarget {
    protected MetricRule metric;

    protected AuditedMetricTargetImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getAuditedMetricTarget ();
    }

    public MetricRule getMetric () {
        if (metric != null && metric.eIsProxy ()) {
            InternalEObject oldMetric = (InternalEObject) metric;
            metric = (MetricRule) eResolveProxy (oldMetric);
            if (metric != oldMetric) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFMapPackage.AUDITED_METRIC_TARGET__METRIC, oldMetric, metric));

            }
        }
        return metric;
    }

    public MetricRule basicGetMetric () {
        return metric;
    }

    public void setMetric (MetricRule newMetric) {
        MetricRule oldMetric = metric;
        metric = newMetric;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.AUDITED_METRIC_TARGET__METRIC, oldMetric, metric));

    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFMapPackage.AUDITED_METRIC_TARGET__METRIC :
                if (resolve) return getMetric ();

                return basicGetMetric ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFMapPackage.AUDITED_METRIC_TARGET__METRIC :
                setMetric ((MetricRule) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFMapPackage.AUDITED_METRIC_TARGET__METRIC :
                setMetric ((MetricRule) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFMapPackage.AUDITED_METRIC_TARGET__METRIC :
                return metric != null;
        }
        return super.eIsSet (featureID);
    }

}

