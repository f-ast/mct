package org.eclipse.gmf.runtime.common.ui.action;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.commands.operations.IOperationHistory;

import org.eclipse.core.commands.operations.IOperationHistoryListener;

import org.eclipse.core.commands.operations.IUndoContext;

import org.eclipse.core.commands.operations.IUndoableOperation;

import org.eclipse.core.commands.operations.OperationHistoryEvent;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.core.runtime.Status;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIDebugOptions;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;

import org.eclipse.gmf.runtime.common.ui.internal.CommonUIStatusCodes;

import org.eclipse.gmf.runtime.common.ui.util.PartListenerAdapter;

import org.eclipse.jface.action.ContributionItem;

import org.eclipse.jface.dialogs.ErrorDialog;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.jface.viewers.ISelectionChangedListener;

import org.eclipse.jface.viewers.ISelectionProvider;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.jface.viewers.SelectionChangedEvent;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.swt.SWT;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Event;

import org.eclipse.swt.widgets.Item;

import org.eclipse.swt.widgets.Listener;

import org.eclipse.swt.widgets.Menu;

import org.eclipse.swt.widgets.MenuItem;

import org.eclipse.swt.widgets.ToolBar;

import org.eclipse.swt.widgets.ToolItem;

import org.eclipse.ui.IPartListener;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.ui.PlatformUI;

public abstract class AbstractContributionItem extends ContributionItem implements ISelectionChangedListener, IOperationHistoryListener, IActionWithProgress {
    private boolean setup;
    private IWorkbenchPage workbenchPage;
    private IPartListener partListener;
    private IWorkbenchPart workbenchPart;
    private Listener itemListener;
    private Item item;
    private Control control;
    private String label;
    private boolean enabled = true;

    public AbstractContributionItem (IWorkbenchPage workbenchPage) {
        this (workbenchPage, null);
    }

    public AbstractContributionItem (IWorkbenchPage workbenchPage, String id) {
        super (id);
        assert null != workbenchPage : "workbenchPage is null";
        this.workbenchPage = workbenchPage;
        partListener = new PartListenerAdapter () {

            public void partActivated (IWorkbenchPart part) {
                setWorkbenchPart (part);
                update ();
            }

        }

        ;
        itemListener = new Listener () {

            public void handleEvent (Event event) {
                AbstractContributionItem.this.handleWidgetEvent (event);
            }

        }

        ;
    }

    protected void init () {
        if (getWorkbenchPart () == null) setWorkbenchPart (workbenchPage.getActivePart ());

        workbenchPage.addPartListener (partListener);
    }

    public void dispose () {
        workbenchPage.removePartListener (partListener);
        setWorkbenchPart (null);
        item = null;
        control = null;
        super.dispose ();
    }

    protected IWorkbenchPart getWorkbenchPart () {
        return workbenchPart;
    }

    protected IUndoContext getUndoContext () {
        IWorkbenchPart part = getWorkbenchPart ();
        if (part != null) {
            return (IUndoContext) part.getAdapter (IUndoContext.class);
        }
        return null;
    }

    protected Control getControl () {
        return control;
    }

    protected Item getItem () {
        return item;
    }

    protected ToolItem getToolItem () {
        return item instanceof ToolItem ? (ToolItem) item : null;
    }

    protected MenuItem getMenuItem () {
        return item instanceof MenuItem ? (MenuItem) item : null;
    }

    public String getLabel () {
        return label;
    }

    public void setItem (Item item) {
        this.item = item;
    }

    protected void setLabel (String label) {
        this.label = label;
    }

    protected void setWorkbenchPart (IWorkbenchPart workbenchPart) {
        if (getWorkbenchPart () != null) {
            if (isSelectionListener ()) {
                ISelectionProvider provider = getWorkbenchPart ().getSite ().getSelectionProvider ();
                if (provider != null) {
                    provider.removeSelectionChangedListener (this);
                }
            }
            if (isOperationHistoryListener ()) {
                getOperationHistory ().removeOperationHistoryListener (this);
            }
        }
        this.workbenchPart = workbenchPart;
        if (workbenchPart != null) {
            if (isSelectionListener ()) {
                ISelectionProvider provider = getWorkbenchPart ().getSite ().getSelectionProvider ();
                if (provider != null) {
                    provider.addSelectionChangedListener (this);
                }
            }
            if (isOperationHistoryListener ()) {
                getOperationHistory ().addOperationHistoryListener (this);
            }
        }
    }

    public final void fill (Composite parent) {
        init ();
        control = createControl (parent);
        if (control != null) {
            update ();
        }
        assert null != control : "The contribution item cannot fill in composites";
    }

    public final void fill (Menu parent, int index) {
        init ();
        MenuItem menuItem = createMenuItem (parent, index);
        if (menuItem != null) {
            menuItem.setData (this);
            menuItem.setText (getLabel ());
            menuItem.addListener (SWT.Dispose, getItemListener ());
            setItem (menuItem);
            update ();
        }
        assert null != menuItem : "The contribution item cannot fill in menus";
    }

    public final void fill (ToolBar parent, int index) {
        init ();
        ToolItem toolItem = createToolItem (parent, index);
        if (toolItem != null) {
            toolItem.setData (this);
            toolItem.setToolTipText (getLabel ());
            toolItem.addListener (SWT.Dispose, getItemListener ());
            setItem (toolItem);
            update ();
        }
        assert null != toolItem : "The contribution item cannot fill in toolbars";
    }

    protected ToolItem createToolItem (ToolBar parent, int index) {
        control = createControl (parent);
        if (control != null) {
            ToolItem anItem = new ToolItem (parent, SWT.SEPARATOR, index);
            anItem.setControl (control);
            anItem.setWidth (computeWidth (control));
            return anItem;
        }
        return null;
    }

    protected MenuItem createMenuItem (Menu parent, int index) {
        return null;
    }

    protected Control createControl (Composite parent) {
        return null;
    }

    protected int computeWidth (Control cont) {
        return cont.computeSize (SWT.DEFAULT, SWT.DEFAULT, true).x;
    }

    public final void update () {
        if (getWorkbenchPart () == null) setWorkbenchPart (workbenchPage.getActivePart ());

        if (getWorkbenchPart () != null) {
            refresh ();
        }
    }

    public void refresh () {
        setEnabled (calculateEnabled ());
        if (getControl () != null || getItem () != null) refreshItem ();

    }

    protected void refreshItem () {
        if (getControl () != null) getControl ().setEnabled (isEnabled ());
        else if (getToolItem () != null) getToolItem ().setEnabled (isEnabled ());
        else if (getMenuItem () != null) getMenuItem ().setEnabled (isEnabled ());

    }

    protected abstract boolean calculateEnabled ();

    protected void setEnabled (boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isEnabled () {
        return enabled;
    }

    protected void execute (ICommand command) {
        if (command == null || ! command.canExecute ()) return;

        command.addContext (getUndoContext ());
        try {
            getOperationHistory ().execute (command, new NullProgressMonitor (), null);
        } catch (ExecutionException e) {
            Trace.catching (CommonUIPlugin.getDefault (), CommonUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "execute", e);
            Log.error (CommonUIPlugin.getDefault (), CommonUIStatusCodes.ACTION_FAILURE, e.getLocalizedMessage (), e);
        }
        return;
    }

    protected ActionManager getActionManager () {
        ActionManager manager = (ActionManager) getWorkbenchPart ().getAdapter (ActionManager.class);
        return null == manager ? ActionManager.getDefault () : manager;
    }

    protected IOperationHistory getOperationHistory () {
        return getActionManager ().getOperationHistory ();
    }

    protected void runWithEvent (Event event) {
        getActionManager ().run (this);
    }

    protected abstract void doRun (IProgressMonitor progressMonitor);

    protected void handle (Exception exception) {
        Trace.catching (CommonUIPlugin.getDefault (), CommonUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "handle", exception);
        IStatus status = new Status (IStatus.ERROR, CommonUIPlugin.getPluginId (), CommonUIStatusCodes.ACTION_FAILURE, String.valueOf (exception.getMessage ()), exception);
        Log.log (CommonUIPlugin.getDefault (), status);
        openErrorDialog (status);
    }

    protected void openErrorDialog (IStatus status) {
        ErrorDialog.openError (getWorkbenchPart ().getSite ().getShell (), getLabel (), null, status);
    }

    protected void handleWidgetEvent (Event e) {
        switch (e.type) {
            case SWT.Dispose :
                handleWidgetDispose (e);
                break;
        }
    }

    protected void handleWidgetDispose (Event e) {
        dispose ();
    }

    protected boolean isSelectionListener () {
        return false;
    }

    protected boolean isOperationHistoryListener () {
        return false;
    }

    public final void selectionChanged (SelectionChangedEvent event) {
        update ();
    }

    public void historyNotification (OperationHistoryEvent event) {
        IUndoableOperation operation = event.getOperation ();
        if (operation != null) {
            IUndoContext partContext = getUndoContext ();
            if (partContext != null && operation.hasContext (partContext)) {
                PlatformUI.getWorkbench ().getDisplay ().syncExec (new Runnable () {

                    public void run () {
                        update ();
                    }

                }

                );
            }
        }
    }

    protected ISelection getSelection () {
        ISelection selection = null;
        ISelectionProvider selectionProvider = getWorkbenchPart ().getSite ().getSelectionProvider ();
        if (selectionProvider != null) {
            selection = selectionProvider.getSelection ();
        }
        return (selection != null) ? selection : StructuredSelection.EMPTY;
    }

    protected IStructuredSelection getStructuredSelection () {
        IStructuredSelection selection = null;
        ISelectionProvider selectionProvider = getWorkbenchPart ().getSite ().getSelectionProvider ();
        if (selectionProvider != null && selectionProvider.getSelection () instanceof IStructuredSelection) {
            selection = (IStructuredSelection) selectionProvider.getSelection ();
        }
        return (selection != null) ? selection : StructuredSelection.EMPTY;
    }

    protected Listener getItemListener () {
        return itemListener;
    }

    public WorkIndicatorType getWorkIndicatorType () {
        return WorkIndicatorType.BUSY;
    }

    public boolean isRunnable () {
        return isEnabled ();
    }

    public void run (IProgressMonitor progressMonitor) {
        if (isSetup () || ! needsSetup ()) {
            try {
                doRun (progressMonitor);
            } catch (Exception e) {
                handle (e);
            }
            setSetup (false);
        } else {
            throw new IllegalStateException ("action must be setup before it is run");
        }
    }

    public boolean setup () {
        setSetup (true);
        return true;
    }

    public boolean isSetup () {
        return setup;
    }

    protected void setSetup (boolean setup) {
        this.setup = setup;
    }

    protected boolean needsSetup () {
        return false;
    }

}

