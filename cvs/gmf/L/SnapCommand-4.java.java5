package org.eclipse.gmf.runtime.diagram.ui.internal.commands;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.PrecisionPoint;

import org.eclipse.draw2d.geometry.PrecisionRectangle;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gef.SnapToHelper;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.handles.HandleBounds;

import org.eclipse.gef.requests.ChangeBoundsRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;

import org.eclipse.gmf.runtime.notation.Bounds;

import org.eclipse.gmf.runtime.notation.LayoutConstraint;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

public class SnapCommand extends AbstractTransactionalCommand {
    protected List editparts;

    public SnapCommand (TransactionalEditingDomain editingDomain, List editparts) {
        super (editingDomain, DiagramUIMessages.SnapToGrid_textLabel, null);
        this.editparts = editparts;
    }

    public List getAffectedFiles () {
        if (editparts != null) {
            IGraphicalEditPart parent = (IGraphicalEditPart) editparts.get (0);
            View view = (View) parent.getParent ().getModel ();
            return getWorkspaceFiles (view);
        }
        return super.getAffectedFiles ();
    }

    protected CommandResult doExecuteWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException {
        CompoundCommand snapCommand = new CompoundCommand ();
        for (Iterator iter = editparts.iterator ();
        iter.hasNext ();) {
            IGraphicalEditPart newEditPart = (IGraphicalEditPart) iter.next ();
            IMapMode mapMode = ((DiagramRootEditPart) newEditPart.getRoot ()).getMapMode ();
            if (newEditPart.getModel () instanceof Node) {
                LayoutConstraint constraint = ((Node) newEditPart.getModel ()).getLayoutConstraint ();
                if (constraint instanceof Bounds) {
                    Bounds bounds = (Bounds) constraint;
                    ChangeBoundsRequest request = new ChangeBoundsRequest (RequestConstants.REQ_MOVE);
                    request.setEditParts (newEditPart);
                    int xDiff = mapMode.LPtoDP (bounds.getX ()) - mapMode.LPtoDP (newEditPart.getFigure ().getBounds ().x);
                    int yDiff = mapMode.LPtoDP (bounds.getY ()) - mapMode.LPtoDP (newEditPart.getFigure ().getBounds ().y);
                    Point moveDelta = new Point (xDiff, yDiff);
                    request.getExtendedData ().clear ();
                    request.setMoveDelta (moveDelta);
                    PrecisionRectangle figureBounds = null;
                    IFigure figure = newEditPart.getFigure ();
                    if (figure instanceof HandleBounds) {
                        figureBounds = new PrecisionRectangle (((HandleBounds) figure).getHandleBounds ());
                    } else {
                        figureBounds = new PrecisionRectangle (figure.getBounds ());
                    }
                    figure.translateToAbsolute (figureBounds);
                    SnapToHelper snapToHelper = (SnapToHelper) newEditPart.getAdapter (SnapToHelper.class);
                    PrecisionRectangle baseRect = new PrecisionRectangle (figureBounds);
                    baseRect.translate (moveDelta);
                    PrecisionPoint preciseDelta = new PrecisionPoint (moveDelta);
                    if (snapToHelper != null) {
                        snapToHelper.snapPoint (request, PositionConstants.HORIZONTAL | PositionConstants.VERTICAL, new PrecisionRectangle [] {baseRect}, preciseDelta);
                        request.setMoveDelta (preciseDelta);
                    }
                    snapCommand.add (newEditPart.getCommand (request));
                }
            }
        }
        if (snapCommand != null && snapCommand.canExecute ()) {
            snapCommand.execute ();
        }
        return CommandResult.newOKCommandResult ();
    }

}

