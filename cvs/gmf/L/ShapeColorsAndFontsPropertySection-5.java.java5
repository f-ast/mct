package org.eclipse.gmf.runtime.diagram.ui.properties.sections.appearance;

import org.eclipse.swt.events.SelectionAdapter;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.ToolBar;

import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;

import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;

import org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n.ResourceManager;

import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class ShapeColorsAndFontsPropertySection extends ColorsAndFontsPropertySection {

    protected ToolBar createFontsGroup (Composite contents) {
        ToolBar toolBar = super.createFontsGroup (contents);
        fillColorButton.addSelectionListener (new SelectionAdapter () {

            public void widgetSelected (SelectionEvent event) {
                changeFillColor (event);
            }

        }

        );
        if (isReadOnly ()) fillColorButton.setEnabled (false);
        else fillColorButton.setEnabled (true);

        return toolBar;
    }

    protected void updateColorCache () {
        super.updateColorCache ();
        executeAsReadAction (new MRunnable () {

            public Object run () {
                if (getSingleInput () instanceof GraphicalEditPart) {
                    GraphicalEditPart ep = (GraphicalEditPart) getSingleInput ();
                    fillColor = FigureUtilities.integerToRGB ((Integer) ep.getStructuralFeatureValue (NotationPackage.eINSTANCE.getFillStyle_FillColor ()));
                } else fillColor = DEFAULT_PREF_COLOR;

                return fillColor;
            }

        }

        );
    }

    protected void changeFillColor (SelectionEvent event) {
        fillColor = changeColor (event, fillColorButton, IPreferenceConstants.PREF_FILL_COLOR, Properties.ID_FILLCOLOR, FILL_COLOR_COMMAND_NAME, FILL_COLOR_IMAGE_NAME);
    }

    public void refresh () {
        super.refresh ();
        if (! isDisposed ()) {
            Image overlyedImage = new ColorOverlayImageDescriptor (ResourceManager.getInstance ().getImage (FILL_COLOR_IMAGE_NAME).getImageData (), fillColor).createImage ();
            fillColorButton.setImage (overlyedImage);
        }
    }

}

