package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.Collections;

import java.util.List;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.MarginBorder;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.ExposeHelper;

import org.eclipse.gef.editparts.ViewportExposeHelper;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableCompartmentEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure;

import org.eclipse.gmf.runtime.diagram.ui.internal.figures.NestedResizableCompartmentFigure;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;

import org.eclipse.gmf.runtime.diagram.ui.label.ILabelDelegate;

import org.eclipse.gmf.runtime.diagram.ui.label.WrappingLabelDelegate;

import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;

import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;

import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;

import org.eclipse.gmf.runtime.notation.DrawerStyle;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.Ratio;

import org.eclipse.gmf.runtime.notation.Style;

import org.eclipse.gmf.runtime.notation.View;

public class NestableListItemEditPart extends ListItemEditPart implements IResizableCompartmentEditPart {
    final static int IS_RESIZABLE_FLAG = MAX_FLAG << 5;

    public NestableListItemEditPart (EObject view) {
        super (view);
        setFlag (IS_RESIZABLE_FLAG, false);
        Object model = basicGetModel ();
        if (model instanceof Node) {
            Node node = (Node) model;
            Style style = node.getStyle (NotationPackage.Literals.DRAWER_STYLE);
            if (style != null) setFlag (IS_RESIZABLE_FLAG, true);

        }
    }

    WrapLabel textLabel = null;

    public WrapLabel getLabel () {
        if (isResizable ()) {
            if (textLabel == null) {
                textLabel = createWrapLabel ();
            }
            return textLabel;
        } else {
            return super.getLabel ();
        }
    }

    protected IFigure getMainLabel () {
        return getLabel ();
    }

    public String getCompartmentName () {
        return getLabelDelegate ().getText ();
    }

    protected IFigure createFigure () {
        if (isResizable ()) {
            IMapMode mm = getMapMode ();
            ResizableCompartmentFigure compartmentFigure = new NestedResizableCompartmentFigure (mm);
            ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout ();
            layout.setStretchMajorAxis (false);
            layout.setStretchMinorAxis (false);
            layout.setMinorAlignment (ConstrainedToolbarLayout.ALIGN_TOPLEFT);
            compartmentFigure.getContentPane ().setLayoutManager (layout);
            compartmentFigure.getTextPane ().add (getMainLabel ());
            int one = mm.DPtoLP (1);
            int half_15 = mm.DPtoLP (15) / 2;
            compartmentFigure.getTextPane ().setBorder (new MarginBorder (one, half_15, one, half_15));
            compartmentFigure.getContentPane ().setBorder (new MarginBorder (one, mm.DPtoLP (15), one, half_15));
            getMainLabel ().setVisible (true);
            return compartmentFigure;
        } else {
            return super.createFigure ();
        }
    }

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        if (isResizable ()) {
            installEditPolicy (EditPolicy.PRIMARY_DRAG_ROLE, new ResizableCompartmentEditPolicy ());
        }
    }

    final protected boolean isResizable () {
        return getFlag (IS_RESIZABLE_FLAG);
    }

    protected List getModelChildren () {
        if (getModel () instanceof View) {
            return ((View) getModel ()).getChildren ();
        }
        return Collections.EMPTY_LIST;
    }

    public Object getAdapter (Class key) {
        if (key == ExposeHelper.class) {
            ViewportExposeHelper helper = new ViewportExposeHelper (this);
            return helper;
        }
        return super.getAdapter (key);
    }

    protected void refreshVisuals () {
        super.refreshVisuals ();
        if (isResizable ()) {
            refreshCollapsed ();
            refreshRatio ();
        }
    }

    private ResizableCompartmentFigure getCompartmentFigure () {
        if (isResizable ()) {
            return (ResizableCompartmentFigure) getFigure ();
        } else {
            return null;
        }
    }

    public IFigure getContentPane () {
        if (getCompartmentFigure () != null) {
            return getCompartmentFigure ().getContentPane ();
        } else {
            return super.getContentPane ();
        }
    }

    protected void handleNotificationEvent (Notification evt) {
        Object feature = evt.getFeature ();
        if (NotationPackage.Literals.RATIO__VALUE.equals (feature) || evt.getOldValue () instanceof Ratio || evt.getNewValue () instanceof Ratio) refreshRatio ();
        else if (NotationPackage.Literals.DRAWER_STYLE__COLLAPSED.equals (feature)) {
            setCollapsed (((Boolean) evt.getNewValue ()).booleanValue (), true);
            this.getFigure ().revalidate ();
        } else super.handleNotificationEvent (evt);

    }

    protected void refreshRatio () {
        if (ViewUtil.isPropertySupported ((View) getModel (), Properties.ID_RATIO)) setRatio ((Double) ViewUtil.getStructuralFeatureValue ((View) getModel (), NotationPackage.Literals.RATIO__VALUE));
        else setRatio (new Double (- 1));

    }

    protected void refreshCollapsed () {
        DrawerStyle style = (DrawerStyle) ((View) getModel ()).getStyle (NotationPackage.Literals.DRAWER_STYLE);
        if (style != null) setCollapsed (style.isCollapsed (), false);

    }

    protected void setCollapsed (boolean collapsed, boolean animate) {
        if (getCompartmentFigure () != null) {
            if (collapsed) {
                if (animate) getCompartmentFigure ().collapse ();
                else getCompartmentFigure ().setCollapsed ();

            } else {
                if (animate) getCompartmentFigure ().expand ();
                else getCompartmentFigure ().setExpanded ();

            }
        }
    }

    protected void setRatio (Double ratio) {
        ((IGraphicalEditPart) getParent ()).setLayoutConstraint (this, getFigure (), ratio);
    }

    protected void setShowCompartmentTitle (boolean showCompartmentTitle) {
        if (getCompartmentFigure () != null) getCompartmentFigure ().setTitleVisibility (showCompartmentTitle);

    }

}

