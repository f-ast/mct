package org.eclipse.gmf.graphdef.editor.navigator;

import org.eclipse.core.runtime.IAdapterFactory;

import org.eclipse.core.runtime.Platform;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.runtime.notation.View;

public class GMFGraphNavigatorItem extends GMFGraphAbstractNavigatorItem {

    static {
        final Class [] supportedTypes = new Class [] {View.class, EObject.class};
        Platform.getAdapterManager ().registerAdapters (new IAdapterFactory () {

            public Object getAdapter (Object adaptableObject, Class adapterType) {
                if (adaptableObject instanceof org.eclipse.gmf.graphdef.editor.navigator.GMFGraphNavigatorItem && (adapterType == View.class || adapterType == EObject.class)) {
                    return ((org.eclipse.gmf.graphdef.editor.navigator.GMFGraphNavigatorItem) adaptableObject).getView ();
                }
                return null;
            }

            public Class [] getAdapterList () {
                return supportedTypes;
            }

        }

        , org.eclipse.gmf.graphdef.editor.navigator.GMFGraphNavigatorItem.class);
    }

    private View myView;
    private boolean myLeaf = false;

    public GMFGraphNavigatorItem (View view, Object parent, boolean isLeaf) {
        super (parent);
        myView = view;
        myLeaf = isLeaf;
    }

    public View getView () {
        return myView;
    }

    public boolean isLeaf () {
        return myLeaf;
    }

    public boolean equals (Object obj) {
        if (obj instanceof org.eclipse.gmf.graphdef.editor.navigator.GMFGraphNavigatorItem) {
            return EcoreUtil.getURI (getView ()).equals (EcoreUtil.getURI (((org.eclipse.gmf.graphdef.editor.navigator.GMFGraphNavigatorItem) obj).getView ()));
        }
        return super.equals (obj);
    }

    public int hashCode () {
        return EcoreUtil.getURI (getView ()).hashCode ();
    }

}

