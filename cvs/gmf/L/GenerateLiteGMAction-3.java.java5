package org.eclipse.gmf.internal.codegen.lite.dashboard;

import org.eclipse.emf.common.util.URI;

import org.eclipse.gmf.bridge.ui.dashboard.DashboardAction;

import org.eclipse.gmf.bridge.ui.dashboard.DashboardFacade;

import org.eclipse.gmf.bridge.ui.dashboard.DashboardState;

import org.eclipse.gmf.internal.codegen.popup.actions.TransformToGenModelOperation;

public class GenerateLiteGMAction implements DashboardAction {
    private DashboardFacade context;

    public void init (DashboardFacade context) {
        this.context = context;
    }

    public boolean isEnabled () {
        DashboardState state = context.getState ();
        if (context.isStrict ()) {
            if (state.getDM () == null || state.getDGM () == null || state.getTDM () == null) {
                return false;
            }
        }
        return state.getMM () != null;
    }

    public void run () {
        DashboardState state = context.getState ();
        URI mm = state.getMM ();
        URI gm = state.getGM ();
        if (gm == null) {
            gm = mm.trimFileExtension ().appendFileExtension ("gmfgen");
            state.setGM (gm);
        }
        try {
            TransformToGenModelOperation op = new TransformToGenModelOperation ();
            op.setUseRuntimeFigures (false);
            op.setUseMapMode (false);
            op.setRCP (false);
            op.setMapModelURI (mm);
            op.setGenModelURI (gm);
            op.setDomainGenModelURI (state.getDGM ());
            op.run ();
        } finally {
            context.updateStatus ();
        }
    }

}

