package org.eclipse.gmf.mappings.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.mappings.GMFMapFactory;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.LinkMapping;

public class LinkMappingItemProvider extends MappingEntryItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public LinkMappingItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addDiagramLinkPropertyDescriptor (object);
            addDomainMetaElementPropertyDescriptor (object);
            addContainmentFeaturePropertyDescriptor (object);
            addLabelEditFeaturePropertyDescriptor (object);
            addLabelDisplayFeaturePropertyDescriptor (object);
            addLinkMetaFeaturePropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addDiagramLinkPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LinkMapping_diagramLink_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LinkMapping_diagramLink_feature", "_UI_LinkMapping_type"), GMFMapPackage.eINSTANCE.getLinkMapping_DiagramLink (), true, null, null, null));
    }

    protected void addDomainMetaElementPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LinkMapping_domainMetaElement_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LinkMapping_domainMetaElement_feature", "_UI_LinkMapping_type"), GMFMapPackage.eINSTANCE.getLinkMapping_DomainMetaElement (), true, null, null, null));
    }

    protected void addContainmentFeaturePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LinkMapping_containmentFeature_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LinkMapping_containmentFeature_feature", "_UI_LinkMapping_type"), GMFMapPackage.eINSTANCE.getLinkMapping_ContainmentFeature (), true, null, null, null));
    }

    protected void addLabelEditFeaturePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LinkMapping_labelEditFeature_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LinkMapping_labelEditFeature_feature", "_UI_LinkMapping_type"), GMFMapPackage.eINSTANCE.getLinkMapping_LabelEditFeature (), true, null, null, null));
    }

    protected void addLabelDisplayFeaturePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LinkMapping_labelDisplayFeature_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LinkMapping_labelDisplayFeature_feature", "_UI_LinkMapping_type"), GMFMapPackage.eINSTANCE.getLinkMapping_LabelDisplayFeature (), true, null, null, null));
    }

    protected void addLinkMetaFeaturePropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_LinkMapping_linkMetaFeature_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_LinkMapping_linkMetaFeature_feature", "_UI_LinkMapping_type"), GMFMapPackage.eINSTANCE.getLinkMapping_LinkMetaFeature (), true, null, null, null));
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFMapPackage.eINSTANCE.getLinkMapping_DomainSpecialization ());
            childrenFeatures.add (GMFMapPackage.eINSTANCE.getLinkMapping_DomainInitializer ());
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    public Object getImage (Object object) {
        return getResourceLocator ().getImage ("full/obj16/LinkMapping");
    }

    public String getText (Object object) {
        return getString ("_UI_LinkMapping_type");
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (LinkMapping.class)) {
            case GMFMapPackage.LINK_MAPPING__DOMAIN_SPECIALIZATION :
            case GMFMapPackage.LINK_MAPPING__DOMAIN_INITIALIZER :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFMapPackage.eINSTANCE.getLinkMapping_DomainSpecialization (), GMFMapFactory.eINSTANCE.createConstraint ()));
        newChildDescriptors.add (createChildParameter (GMFMapPackage.eINSTANCE.getLinkMapping_DomainInitializer (), GMFMapFactory.eINSTANCE.createFeatureSeqInitializer ()));
    }

    public ResourceLocator getResourceLocator () {
        return GMFMapEditPlugin.INSTANCE;
    }

}

