package org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards;

import java.io.InputStream;

import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.resources.IFile;

import org.eclipse.core.resources.IProject;

import org.eclipse.core.resources.IWorkspaceRoot;

import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.CoreException;

import org.eclipse.core.runtime.IPath;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.common.util.URI;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorUtil;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorPlugin;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.EditorUtil;

import org.eclipse.jface.dialogs.ErrorDialog;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.osgi.util.NLS;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.ui.IWorkbench;

import org.eclipse.ui.IWorkbenchWindow;

import org.eclipse.ui.actions.WorkspaceModifyOperation;

import org.eclipse.ui.dialogs.WizardNewFileCreationPage;

;
public abstract class EditorWizardPage extends WizardNewFileCreationPage {
    protected final IWorkbench workbench;
    private final IStructuredSelection selection;
    protected IFile diagramFile;
    protected boolean openNewlyCreatedDiagramEditor;

    public EditorWizardPage (String pageName, IWorkbench aWorkbench, IStructuredSelection selection) {
        super (pageName, selection);
        this.workbench = aWorkbench;
        this.selection = selection;
        this.diagramFile = null;
        this.openNewlyCreatedDiagramEditor = true;
    }

    public boolean doFinish (IProgressMonitor monitor) {
        diagramFile = createAndOpenDiagram (getContainerFullPath (), getFileName (), getInitialContents (), getDiagramKind (), workbench.getActiveWorkbenchWindow (), monitor, true);
        return diagramFile != null;
    }

    public IFile createAndOpenDiagram (IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow dWindow, IProgressMonitor progressMonitor, boolean saveDiagram) {
        return IDEEditorUtil.createAndOpenDiagram (getDiagramFileCreator (), containerPath, fileName, initialContents, kind, dWindow, progressMonitor, isOpenNewlyCreatedDiagramEditor (), saveDiagram);
    }

    public boolean isOpenNewlyCreatedDiagramEditor () {
        return openNewlyCreatedDiagramEditor;
    }

    public void setOpenNewlyCreatedDiagramEditor (boolean openNewlyCreatedDiagramEditor) {
        this.openNewlyCreatedDiagramEditor = openNewlyCreatedDiagramEditor;
    }

    public boolean finish () {
        final boolean [] result = new boolean [1];
        WorkspaceModifyOperation op = new WorkspaceModifyOperation (null) {

            protected void execute (IProgressMonitor monitor) throws CoreException, InterruptedException {
                result [0] = doFinish (monitor);
            }

        }

        ;
        try {
            getContainer ().run (false, true, op);
        } catch (InterruptedException e) {
            return false;
        } catch (InvocationTargetException e) {
            if (e.getTargetException () instanceof CoreException) {
                ErrorDialog.openError (getContainer ().getShell (), EditorMessages.EditorWizardPage_DialogInternalErrorTitle, null, ((CoreException) e.getTargetException ()).getStatus ());
            } else {
                Trace.catching (EditorPlugin.getInstance (), EditorDebugOptions.EXCEPTIONS_CATCHING, getClass (), "finish", e.getTargetException ());
                Log.error (EditorPlugin.getInstance (), EditorStatusCodes.ERROR, EditorMessages.WizardPage_DIAGRAM_CREATION_FAIL_EXC_, e.getTargetException ());
            }
            return false;
        }
        return result [0];
    }

    public final IFile getDiagramFile () {
        return diagramFile;
    }

    protected String getDefaultFileName () {
        return null;
    }

    public abstract DiagramFileCreator getDiagramFileCreator ();

    protected String getDiagramKind () {
        return null;
    }

    protected InputStream getInitialContents () {
        return EditorUtil.getInitialContents ();
    }

    public String getFileName () {
        String fileName = super.getFileName ();
        if (fileName != null) fileName = getDiagramFileCreator ().appendExtensionToFileName (fileName);

        return fileName;
    }

    protected boolean validatePage () {
        if (super.validatePage ()) {
            String fileName = getFileName ();
            if (fileName == null) return false;

            IPath path = getContainerFullPath ().append (fileName);
            if (ResourcesPlugin.getWorkspace ().getRoot ().exists (path)) {
                setErrorMessage (EditorMessages.WizardPage_Message_FileExists_ERROR_);
                return false;
            }
            URI fileURI = URI.createFileURI (path.toString ());
            String ext = fileURI.fileExtension ();
            if (ext != null && getDiagramFileCreator ().getExtension ().equals ("." + ext)) {
                return true;
            }
            setErrorMessage (NLS.bind (EditorMessages.EditorWizardPage_InvalidFilename, fileName));
        }
        return false;
    }

    public final IStructuredSelection getSelection () {
        return selection;
    }

    public void createControl (Composite parent) {
        super.createControl (parent);
        IPath path = getContainerFullPath ();
        if (null != path) {
            String fileName = getDiagramFileCreator ().getUniqueFileName (path, getDefaultFileName ());
            setFileName (fileName);
        }
        setPageComplete (validatePage ());
    }

    protected void initialPopulateContainerNameField () {
        IPath path = EditorUtil.getDefaultDiagramPath (selection.toList (), getDiagramKind ());
        if (path == null) {
            super.initialPopulateContainerNameField ();
            path = getContainerFullPath ();
            if (path == null) {
                IWorkspaceRoot root = ResourcesPlugin.getWorkspace ().getRoot ();
                IProject [] projects = root.getProjects ();
                path = root.getFullPath ();
                for (int i = 0;
                i < projects.length; ++ i) {
                    IProject project = projects [i];
                    if (project.isOpen ()) {
                        path = project.getFullPath ();
                        break;
                    }
                }
            }
        }
        setContainerFullPath (path);
    }

}

