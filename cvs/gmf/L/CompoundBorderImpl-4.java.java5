package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.gmfgraph.Border;

import org.eclipse.gmf.gmfgraph.CompoundBorder;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

public class CompoundBorderImpl extends EObjectImpl implements CompoundBorder {
    protected Border outer;
    protected Border inner;

    protected CompoundBorderImpl () {
        super ();
    }

    @Override
    protected EClass eStaticClass () {
        return GMFGraphPackage.eINSTANCE.getCompoundBorder ();
    }

    public Border getOuter () {
        return outer;
    }

    public NotificationChain basicSetOuter (Border newOuter, NotificationChain msgs) {
        Border oldOuter = outer;
        outer = newOuter;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.COMPOUND_BORDER__OUTER, oldOuter, newOuter);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setOuter (Border newOuter) {
        if (newOuter != outer) {
            NotificationChain msgs = null;
            if (outer != null) msgs = ((InternalEObject) outer).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.COMPOUND_BORDER__OUTER, null, msgs);

            if (newOuter != null) msgs = ((InternalEObject) newOuter).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.COMPOUND_BORDER__OUTER, null, msgs);

            msgs = basicSetOuter (newOuter, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.COMPOUND_BORDER__OUTER, newOuter, newOuter));

    }

    public Border getInner () {
        return inner;
    }

    public NotificationChain basicSetInner (Border newInner, NotificationChain msgs) {
        Border oldInner = inner;
        inner = newInner;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGraphPackage.COMPOUND_BORDER__INNER, oldInner, newInner);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setInner (Border newInner) {
        if (newInner != inner) {
            NotificationChain msgs = null;
            if (inner != null) msgs = ((InternalEObject) inner).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.COMPOUND_BORDER__INNER, null, msgs);

            if (newInner != null) msgs = ((InternalEObject) newInner).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.COMPOUND_BORDER__INNER, null, msgs);

            msgs = basicSetInner (newInner, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGraphPackage.COMPOUND_BORDER__INNER, newInner, newInner));

    }

    @Override
    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
        switch (featureID) {
            case GMFGraphPackage.COMPOUND_BORDER__OUTER :
                return basicSetOuter (null, msgs);
            case GMFGraphPackage.COMPOUND_BORDER__INNER :
                return basicSetInner (null, msgs);
        }
        return super.eInverseRemove (otherEnd, featureID, msgs);
    }

    @Override
    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFGraphPackage.COMPOUND_BORDER__OUTER :
                return getOuter ();
            case GMFGraphPackage.COMPOUND_BORDER__INNER :
                return getInner ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    @Override
    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFGraphPackage.COMPOUND_BORDER__OUTER :
                setOuter ((Border) newValue);
                return;
            case GMFGraphPackage.COMPOUND_BORDER__INNER :
                setInner ((Border) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    @Override
    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.COMPOUND_BORDER__OUTER :
                setOuter ((Border) null);
                return;
            case GMFGraphPackage.COMPOUND_BORDER__INNER :
                setInner ((Border) null);
                return;
        }
        super.eUnset (featureID);
    }

    @Override
    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFGraphPackage.COMPOUND_BORDER__OUTER :
                return outer != null;
            case GMFGraphPackage.COMPOUND_BORDER__INNER :
                return inner != null;
        }
        return super.eIsSet (featureID);
    }

}

