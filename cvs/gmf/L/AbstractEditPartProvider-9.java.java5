package org.eclipse.gmf.runtime.diagram.ui.services.editpart;

import java.lang.reflect.Constructor;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.gef.RootEditPart;

import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;

import org.eclipse.gmf.runtime.diagram.ui.internal.services.editpart.IEditPartProvider;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.emf.core.util.ProxyUtil;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.util.Assert;

import org.eclipse.osgi.util.NLS;

public abstract class AbstractEditPartProvider extends AbstractProvider implements IEditPartProvider, Properties {

    public IGraphicalEditPart createGraphicEditPart (View view) {
        Class editpartClass = getEditPartClass (view);
        IGraphicalEditPart graphicEditPart = createNewGraphicEditPart (editpartClass, new Object [] {view});
        Assert.isNotNull (graphicEditPart);
        return graphicEditPart;
    }

    public boolean provides (IOperation operation) {
        if (operation instanceof CreateGraphicEditPartOperation) {
            View view = ((CreateGraphicEditPartOperation) operation).getView ();
            return getEditPartClass (view) != null;
        }
        return false;
    }

    private Class getEditPartClass (View view) {
        if (view instanceof Diagram) return getDiagramEditPartClass (view);
        else if (view instanceof Edge) return getEdgeEditPartClass (view);
        else if (view instanceof Node) return getNodeEditPartClass (view);

        return null;
    }

    protected Class getEdgeEditPartClass (View view) {
        return null;
    }

    protected Class getDiagramEditPartClass (View view) {
        return null;
    }

    protected Class getNodeEditPartClass (View view) {
        return null;
    }

    private IGraphicalEditPart createNewGraphicEditPart (Class editpartClass, Object [] constructorParams) {
        try {
            Constructor constructor = getCreationConstructor (editpartClass);
            Assert.isNotNull (constructor);
            return (constructor == null) ? null : (IGraphicalEditPart) constructor.newInstance (constructorParams);
        } catch (Throwable e) {
            String eMsg = NLS.bind (DiagramUIMessages.AbstractEditPartProvider_new_graphicaleditpart_failed_ERROR_, editpartClass);
            Log.warning (DiagramUIPlugin.getInstance (), IStatus.WARNING, eMsg, e);
            return null;
        }
    }

    private Constructor getCreationConstructor (Class editpartClass) {
        Assert.isNotNull (editpartClass);
        if (editpartClass != null) {
            Constructor [] consts = editpartClass.getConstructors ();
            if (consts.length != 0) return consts [0];

        }
        return null;
    }

    protected static EClass getReferencedElementEClass (View view) {
        return ProxyUtil.getProxyClass (view.getElement ());
    }

    public RootEditPart createRootEditPart () {
        return null;
    }

    public RootEditPart createRootEditPart (Diagram diagram) {
        return null;
    }

}

