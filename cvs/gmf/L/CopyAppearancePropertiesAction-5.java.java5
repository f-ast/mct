package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.List;

import java.util.Map;

import org.eclipse.gef.Request;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramActionsResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ApplyAppearancePropertiesRequest;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.resource.ImageDescriptor;

import org.eclipse.ui.IWorkbenchPage;

public class CopyAppearancePropertiesAction extends DiagramAction {

    public CopyAppearancePropertiesAction (IWorkbenchPage workbenchPage) {
        super (workbenchPage);
        setId (ActionIds.ACTION_COPY_APPEARANCE_PROPERTIES);
        setText (DiagramActionsResourceManager.getInstance ().getString ("CopyAppearancePropertiesAction.text"));
        setToolTipText (DiagramActionsResourceManager.getInstance ().getString ("CopyAppearancePropertiesAction.toolTip"));
        ImageDescriptor enabledImage = DiagramActionsResourceManager.getInstance ().getImageDescriptor (DiagramActionsResourceManager.IMAGE_COPY_APPEARANCE);
        setImageDescriptor (enabledImage);
        setDisabledImageDescriptor (DiagramActionsResourceManager.getInstance ().getImageDescriptor (DiagramActionsResourceManager.IMAGE_COPY_APPEARANCE_DISABLED));
        setHoverImageDescriptor (enabledImage);
    }

    protected boolean isSelectionListener () {
        return true;
    }

    protected Request createTargetRequest () {
        return new ApplyAppearancePropertiesRequest ();
    }

    protected void updateTargetRequest () {
        ApplyAppearancePropertiesRequest request = (ApplyAppearancePropertiesRequest) getTargetRequest ();
        List set = super.createOperationSet ();
        if (! set.isEmpty ()) {
            IGraphicalEditPart editPart = (IGraphicalEditPart) set.get (0);
            request.setProperties (getEditPartAppearancePropertiesMap (editPart));
        }
        super.updateTargetRequest ();
    }

    protected List createOperationSet () {
        List operationSet = super.createOperationSet ();
        if (! operationSet.isEmpty ()) operationSet.remove (0);

        return operationSet;
    }

    private Map getEditPartAppearancePropertiesMap (final IGraphicalEditPart editPart) {
        return (Map) MEditingDomainGetter.getMEditingDomain ((View) editPart.getModel ()).runAsRead (new MRunnable () {

            public Object run () {
                return editPart.getAppearancePropertiesMap ();
            }

        }

        );
    }

}

