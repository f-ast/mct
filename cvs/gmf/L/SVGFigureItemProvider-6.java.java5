package org.eclipse.gmf.gmfgraph.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.gmfgraph.GMFGraphFactory;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.SVGFigure;

public class SVGFigureItemProvider extends RealFigureItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public SVGFigureItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    @Override
    public List < IItemPropertyDescriptor > getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addDocumentURIPropertyDescriptor (object);
            addNoCanvasWidthPropertyDescriptor (object);
            addNoCanvasHeightPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addDocumentURIPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_SVGFigure_documentURI_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_SVGFigure_documentURI_feature", "_UI_SVGFigure_type"), GMFGraphPackage.eINSTANCE.getSVGFigure_DocumentURI (), true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addNoCanvasWidthPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_SVGFigure_noCanvasWidth_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_SVGFigure_noCanvasWidth_feature", "_UI_SVGFigure_type"), GMFGraphPackage.eINSTANCE.getSVGFigure_NoCanvasWidth (), true, false, false, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, null, null));
    }

    protected void addNoCanvasHeightPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_SVGFigure_noCanvasHeight_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_SVGFigure_noCanvasHeight_feature", "_UI_SVGFigure_type"), GMFGraphPackage.eINSTANCE.getSVGFigure_NoCanvasHeight (), true, false, false, ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE, null, null));
    }

    @Override
    public Collection < ? extends EStructuralFeature > getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getSVGFigure_Properties ());
            childrenFeatures.add (GMFGraphPackage.eINSTANCE.getSVGFigure_AreaOfInterest ());
        }
        return childrenFeatures;
    }

    @Override
    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    @Override
    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/SVGFigure"));
    }

    @Override
    public String getText (Object object) {
        String label = ((SVGFigure) object).getName ();
        return label == null || label.length () == 0 ? getString ("_UI_SVGFigure_type") : getString ("_UI_SVGFigure_type") + " " + label;
    }

    @Override
    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (SVGFigure.class)) {
            case GMFGraphPackage.SVG_FIGURE__DOCUMENT_URI :
            case GMFGraphPackage.SVG_FIGURE__NO_CANVAS_WIDTH :
            case GMFGraphPackage.SVG_FIGURE__NO_CANVAS_HEIGHT :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
            case GMFGraphPackage.SVG_FIGURE__PROPERTIES :
            case GMFGraphPackage.SVG_FIGURE__AREA_OF_INTEREST :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    @Override
    protected void collectNewChildDescriptors (Collection < Object > newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getSVGFigure_Properties (), GMFGraphFactory.eINSTANCE.createSVGProperty ()));
        newChildDescriptors.add (createChildParameter (GMFGraphPackage.eINSTANCE.getSVGFigure_AreaOfInterest (), GMFGraphFactory.eINSTANCE.createRectangle2D ()));
    }

    @Override
    public String getCreateChildText (Object owner, Object feature, Object child, Collection < ? > selection) {
        Object childFeature = feature;
        Object childObject = child;
        boolean qualify = childFeature == GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_MaximumSize () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_MinimumSize () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_PreferredSize () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_Location () || childFeature == GMFGraphPackage.eINSTANCE.getFigure_Size ();
        if (qualify) {
            return getString ("_UI_CreateChild_text2", new Object [] {getTypeText (childObject), getFeatureText (childFeature), getTypeText (owner)});
        }
        return super.getCreateChildText (owner, feature, child, selection);
    }

}

