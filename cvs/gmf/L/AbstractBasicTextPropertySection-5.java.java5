package org.eclipse.gmf.runtime.diagram.ui.properties.sections;

import java.util.ArrayList;

import java.util.Iterator;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.swt.SWT;

import org.eclipse.swt.custom.CLabel;

import org.eclipse.swt.layout.FormAttachment;

import org.eclipse.swt.layout.FormData;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Event;

import org.eclipse.swt.widgets.Text;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.ui.PlatformUI;

import org.eclipse.ui.views.properties.tabbed.ITabbedPropertyConstants;

import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.ui.util.StatusLineUtil;

import org.eclipse.gmf.runtime.diagram.ui.properties.views.TextChangeHelper;

public abstract class AbstractBasicTextPropertySection extends AbstractModelerPropertySection {
    private Text textWidget;
    private CLabel propertyNameLabelWidget;

    abstract protected String getPropertyNameLabel ();

    abstract protected void setPropertyValue (EObject object, Object value);

    abstract protected String getPropertyValueString ();

    protected abstract String getPropertyChangeCommandName ();

    private TextChangeHelper listener = new TextChangeHelper () {
        boolean textModified = false;

        public void handleEvent (Event event) {
            switch (event.type) {
                case SWT.KeyDown :
                    textModified = true;
                    if (event.character == SWT.CR) textChanged ((Control) event.widget);

                    break;
                case SWT.FocusOut :
                    textChanged ((Control) event.widget);
                    break;
            }
        }

        public void textChanged (Control control) {
            if (textModified) {
                IWorkbenchPart part = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getActivePage ().getActivePart ();
                StatusLineUtil.outputErrorMessage (part, StringStatics.BLANK);
                setPropertyValue (control);
                textModified = false;
            }
        }

    }

    ;
    private Composite sectionComposite;

    public void createControls (Composite parent, TabbedPropertySheetPage aTabbedPropertySheetPage) {
        doCreateControls (parent, aTabbedPropertySheetPage);
    }

    public void doCreateControls (Composite parent, TabbedPropertySheetPage aTabbedPropertySheetPage) {
        super.createControls (parent, aTabbedPropertySheetPage);
        sectionComposite = getWidgetFactory ().createFlatFormComposite (parent);
        textWidget = createTextWidget (sectionComposite);
        propertyNameLabelWidget = createLabelWidget (sectionComposite);
        startTextWidgetEventListener ();
    }

    protected void startTextWidgetEventListener () {
        if (! isReadOnly ()) {
            getListener ().startListeningTo (getTextWidget ());
            getListener ().startListeningForEnter (getTextWidget ());
        }
    }

    protected void stopTextWidgetEventListener () {
        if (! isReadOnly ()) getListener ().stopListeningTo (getTextWidget ());

    }

    protected Text createTextWidget (Composite parent) {
        Text text = getWidgetFactory ().createText (parent, StringStatics.BLANK);
        FormData data = new FormData ();
        data.left = new FormAttachment (0, getStandardLabelWidth (parent, getPropertyNameStringsArray ()));
        data.right = new FormAttachment (100, 0);
        data.top = new FormAttachment (0, 0);
        text.setLayoutData (data);
        if (isReadOnly ()) text.setEditable (false);

        return text;
    }

    protected String [] getPropertyNameStringsArray () {
        return new String [] {getPropertyNameLabel ()};
    }

    protected CLabel createLabelWidget (Composite parent) {
        CLabel label = getWidgetFactory ().createCLabel (parent, getPropertyNameLabel ());
        FormData data = new FormData ();
        data.left = new FormAttachment (0, 0);
        data.right = new FormAttachment (getTextWidget (), - ITabbedPropertyConstants.HSPACE);
        data.top = new FormAttachment (getTextWidget (), 0, SWT.CENTER);
        label.setLayoutData (data);
        return label;
    }

    protected synchronized void setPropertyValue (Control control) {
        final Object value = computeNewPropertyValue ();
        ArrayList commands = new ArrayList ();
        for (Iterator it = getEObjectList ().iterator ();
        it.hasNext ();) {
            final EObject next = (EObject) it.next ();
            commands.add (createCommand (getPropertyChangeCommandName (), next, new Runnable () {

                public void run () {
                    setPropertyValue (next, value);
                }

            }

            ));
        }
        executeAsCompositeCommand (getPropertyChangeCommandName (), commands);
        refresh ();
    }

    protected Object computeNewPropertyValue () {
        return getTextWidget ().getText ();
    }

    public void dispose () {
        stopTextWidgetEventListener ();
        super.dispose ();
    }

    public void refresh () {
        getListener ().startNonUserChange ();
        try {
            executeAsReadAction (new Runnable () {

                public void run () {
                    refreshUI ();
                }

            }

            );
        } finally {
            getListener ().finishNonUserChange ();
        }
    }

    protected void refreshUI () {
        getTextWidget ().setText (getPropertyValueString ());
    }

    protected TextChangeHelper getListener () {
        return listener;
    }

    protected Text getTextWidget () {
        return textWidget;
    }

    public CLabel getPropertyNameLabelWidget () {
        return propertyNameLabelWidget;
    }

    public Composite getSectionComposite () {
        return sectionComposite;
    }

}

