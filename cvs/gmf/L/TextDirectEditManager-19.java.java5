package org.eclipse.gmf.runtime.diagram.ui.tools;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.runtime.Assert;

import org.eclipse.draw2d.AncestorListener;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.editparts.ZoomManager;

import org.eclipse.gef.tools.CellEditorLocator;

import org.eclipse.gef.tools.DirectEditManager;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.contentassist.ContentAssistantHelper;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.label.ILabelDelegate;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;

import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;

import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;

import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

import org.eclipse.gmf.runtime.gef.ui.internal.parts.TextCellEditorEx;

import org.eclipse.gmf.runtime.gef.ui.internal.parts.WrapTextCellEditor;

import org.eclipse.jface.action.IAction;

import org.eclipse.jface.resource.DeviceResourceException;

import org.eclipse.jface.resource.FontDescriptor;

import org.eclipse.jface.resource.JFaceResources;

import org.eclipse.jface.resource.ResourceManager;

import org.eclipse.jface.text.contentassist.IContentAssistProcessor;

import org.eclipse.jface.viewers.CellEditor;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.Font;

import org.eclipse.swt.graphics.FontData;

import org.eclipse.swt.graphics.Point;

import org.eclipse.swt.graphics.RGB;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Display;

import org.eclipse.swt.widgets.Event;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.swt.widgets.Table;

import org.eclipse.swt.widgets.Text;

import org.eclipse.ui.IActionBars;

import org.eclipse.ui.PlatformUI;

import org.eclipse.ui.actions.ActionFactory;

import org.eclipse.ui.part.CellEditorActionHandler;

public class TextDirectEditManager extends DirectEditManager {
    private Color proposalPopupBackgroundColor = null;
    private Color proposalPopupForegroundColor = null;
    private boolean committed = false;
    private boolean listenersAttached = true;
    private StringBuffer initialString = new StringBuffer ();
    private List cachedFontDescriptors = new ArrayList ();
    private IActionBars actionBars;
    private CellEditorActionHandler actionHandler;
    private IAction copy, cut, paste, undo, redo, find, selectAll, delete;
    private Font zoomLevelFont = null;
    private AncestorListener textFigureListener;
    private Class editorType;

    public TextDirectEditManager (ITextAwareEditPart source) {
        this (source, null, getTextCellEditorLocator (source));
    }

    public TextDirectEditManager (GraphicalEditPart source, Class editorType, CellEditorLocator locator) {
        super (source, editorType, locator);
        this.editorType = editorType;
    }

    public static CellEditorLocator getTextCellEditorLocator (final ITextAwareEditPart source) {
        final ILabelDelegate label = (ILabelDelegate) source.getAdapter (ILabelDelegate.class);
        if (label != null) {
            return new CellEditorLocator () {

                public void relocate (CellEditor celleditor) {
                    Text text = (Text) celleditor.getControl ();
                    Rectangle rect = label.getTextBounds ().getCopy ();
                    if (label.getText ().length () <= 0) {
                        rect.setSize (new Dimension (text.computeSize (SWT.DEFAULT, SWT.DEFAULT)));
                        if (label.isTextWrapOn ()) {
                            if (label.getTextJustification () == PositionConstants.RIGHT) {
                                rect.translate (- rect.width, 0);
                            } else if (label.getTextJustification () == PositionConstants.CENTER) {
                                rect.translate (- rect.width / 2, 0);
                            }

                        }
                    }
                    if (label.isTextWrapOn ()) {
                        if (! text.getFont ().isDisposed ()) {
                            int charHeight = FigureUtilities.getFontMetrics (text.getFont ()).getHeight ();
                            rect.resize (0, charHeight / 2);
                        }
                    } else {
                        rect.setSize (new Dimension (text.computeSize (SWT.DEFAULT, SWT.DEFAULT)));
                        int avr = FigureUtilities.getFontMetrics (text.getFont ()).getAverageCharWidth ();
                        rect.setSize (new Dimension (text.computeSize (SWT.DEFAULT, SWT.DEFAULT)).expand (avr * 2, 0));
                    }
                    org.eclipse.swt.graphics.Rectangle newRect = text.computeTrim (rect.x, rect.y, rect.width, rect.height);
                    if (! newRect.equals (text.getBounds ())) {
                        text.setBounds (newRect.x, newRect.y, newRect.width, newRect.height);
                    }
                }

            }

            ;
        }
        return new CellEditorLocator () {

            public void relocate (CellEditor celleditor) {
                Text text = (Text) celleditor.getControl ();
                Rectangle rect = source.getFigure ().getBounds ().getCopy ();
                source.getFigure ().translateToAbsolute (rect);
                if (! rect.equals (new Rectangle (text.getBounds ()))) {
                    text.setBounds (rect.x, rect.y, rect.width, rect.height);
                }
            }

        }

        ;
    }

    public static Class getTextCellEditorClass (GraphicalEditPart source) {
        IFigure figure = source.getFigure ();
        if (figure instanceof WrapLabel && ((WrapLabel) figure).isTextWrapped ()) return WrapTextCellEditor.class;

        return TextCellEditorEx.class;
    }

    protected CellEditor createCellEditorOn (Composite composite) {
        if (editorType != null) {
            return super.createCellEditorOn (composite);
        }
        ILabelDelegate label = (ILabelDelegate) getEditPart ().getAdapter (ILabelDelegate.class);
        if (label != null && label.isTextWrapOn ()) {
            int style = SWT.WRAP | SWT.MULTI;
            switch (label.getTextJustification ()) {
                case PositionConstants.LEFT :
                    style = style | SWT.LEAD;
                    break;
                case PositionConstants.RIGHT :
                    style = style | SWT.TRAIL;
                    break;
                case PositionConstants.CENTER :
                    style = style | SWT.CENTER;
                    break;
                default :
                    break;
            }
            return new WrapTextCellEditor (composite, style);
        } else {
            return new TextCellEditorEx (composite);
        }
    }

    protected Font getScaledFont (IFigure label) {
        Font scaledFont = label.getFont ();
        FontData data = scaledFont.getFontData () [0];
        Dimension fontSize = new Dimension (0, MapModeUtil.getMapMode (label).DPtoLP (data.getHeight ()));
        label.translateToAbsolute (fontSize);
        if (Math.abs (data.getHeight () - fontSize.height) < 2) fontSize.height = data.getHeight ();

        try {
            FontDescriptor fontDescriptor = FontDescriptor.createFrom (data);
            cachedFontDescriptors.add (fontDescriptor);
            return getResourceManager ().createFont (fontDescriptor);
        } catch (DeviceResourceException e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getScaledFont", e);
            Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "getScaledFont", e);
        }
        return JFaceResources.getDefaultFont ();
    }

    protected void initCellEditor () {
        committed = false;
        ITextAwareEditPart textEP = (ITextAwareEditPart) getEditPart ();
        setEditText (textEP.getEditText ());
        IFigure label = textEP.getFigure ();
        Assert.isNotNull (label);
        Text text = (Text) getCellEditor ().getControl ();
        text.setFont (getScaledFont (label));
        getCellEditor ().setValidator (textEP.getEditTextValidator ());
        if (textEP.getParser () != null) {
            IContentAssistProcessor processor = textEP.getCompletionProcessor ();
            if (processor != null) {
                proposalPopupBackgroundColor = new Color (getCellEditor ().getControl ().getShell ().getDisplay (), new RGB (254, 241, 233));
                proposalPopupForegroundColor = new Color (getCellEditor ().getControl ().getShell ().getDisplay (), new RGB (0, 0, 0));
                ContentAssistantHelper.createTextContentAssistant (text, proposalPopupForegroundColor, proposalPopupBackgroundColor, processor);
            }
        }
        actionBars = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getActivePage ().getActiveEditor ().getEditorSite ().getActionBars ();
        saveCurrentActions (actionBars);
        actionHandler = new CellEditorActionHandler (actionBars);
        actionHandler.addCellEditor (getCellEditor ());
        actionBars.updateActionBars ();
    }

    protected void commit () {
        Shell activeShell = Display.getCurrent ().getActiveShell ();
        if (activeShell != null && getCellEditor ().getControl ().getShell ().equals (activeShell.getParent ())) {
            Control [] children = activeShell.getChildren ();
            if (children.length == 1 && children [0] instanceof Table) {
                getCellEditor ().getControl ().setVisible (true);
                ((TextCellEditorEx) getCellEditor ()).setDeactivationLock (true);
                return;
            }
        }
        if (committed) {
            bringDown ();
            return;
        }
        committed = true;
        super.commit ();
    }

    protected void bringDown () {
        if (proposalPopupForegroundColor != null) {
            proposalPopupForegroundColor.dispose ();
            proposalPopupForegroundColor = null;
        }
        if (proposalPopupBackgroundColor != null) {
            proposalPopupBackgroundColor.dispose ();
            proposalPopupBackgroundColor = null;
        }
        eraseFeedback ();
        initialString = new StringBuffer ();
        Display.getCurrent ().asyncExec (new Runnable () {

            public void run () {
                TextDirectEditManager.super.bringDown ();
            }

        }

        );
        for (Iterator iter = cachedFontDescriptors.iterator ();
        iter.hasNext ();) {
            getResourceManager ().destroyFont ((FontDescriptor) iter.next ());
        }
        cachedFontDescriptors.clear ();
        if (actionHandler != null) {
            actionHandler.dispose ();
            actionHandler = null;
        }
        if (actionBars != null) {
            restoreSavedActions (actionBars);
            actionBars.updateActionBars ();
            actionBars = null;
        }
    }

    public void setEditText (String toEdit) {
        CellEditor cellEditor = getCellEditor ();
        if (cellEditor == null) {
            return;
        }
        ITextAwareEditPart textEP = (ITextAwareEditPart) getEditPart ();
        Text textControl = (Text) cellEditor.getControl ();
        textEP.setLabelText (toEdit);
        if (cellEditor instanceof TextCellEditorEx) {
            ((TextCellEditorEx) cellEditor).setValueAndProcessEditOccured (toEdit);
        } else {
            cellEditor.setValue (toEdit);
        }
        textControl.setSelection (toEdit.length ());
    }

    public void show (char initialChar) {
        initialString = initialString.append (initialChar);
        show ();
        if (SWT.getPlatform () != "carbon") {
            setEditText (initialString.toString ());
        }
    }

    private Font getZoomLevelFont (Font actualFont, Display display) {
        Object zoom = getEditPart ().getViewer ().getProperty (ZoomManager.class.toString ());
        if (zoom != null) {
            double zoomLevel = ((ZoomManager) zoom).getZoom ();
            if (zoomLevel == 1.0f) return actualFont;

            FontData [] fd = new FontData [actualFont.getFontData ().length];
            FontData tempFD = null;
            for (int i = 0;
            i < fd.length; i ++) {
                tempFD = actualFont.getFontData () [i];
                fd [i] = new FontData (tempFD.getName (), (int) (zoomLevel * tempFD.getHeight ()), tempFD.getStyle ());
            }
            try {
                FontDescriptor fontDescriptor = FontDescriptor.createFrom (fd);
                cachedFontDescriptors.add (fontDescriptor);
                return getResourceManager ().createFont (fontDescriptor);
            } catch (DeviceResourceException e) {
                Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getZoomLevelFonts", e);
                Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "getZoomLevelFonts", e);
                return actualFont;
            }
        } else return actualFont;

    }

    public void show () {
        super.show ();
        IFigure fig = getEditPart ().getFigure ();
        Control control = getCellEditor ().getControl ();
        this.zoomLevelFont = getZoomLevelFont (fig.getFont (), control.getDisplay ());
        control.setFont (this.zoomLevelFont);
        getLocator ().relocate (getCellEditor ());
    }

    public void show (Point location) {
        show ();
        sendClickToCellEditor (location);
    }

    private void sendClickToCellEditor (final Point location) {
        getCellEditor ().getControl ().setCapture (true);
        if (getCellEditor () != null && getCellEditor ().getControl ().getBounds ().contains (location)) sendMouseClick (location);

    }

    private void sendMouseClick (final Point location) {
        final Display currDisplay = Display.getCurrent ();
        new Thread () {
            Event event;

            public void run () {
                event = new Event ();
                event.type = SWT.MouseDown;
                event.button = 1;
                event.x = location.x;
                event.y = location.y;
                currDisplay.post (event);
                event.type = SWT.MouseUp;
                currDisplay.post (event);
            }

        }

        .start ();
    }

    protected void hookListeners () {
        super.hookListeners ();
        ILabelDelegate label = (ILabelDelegate) getEditPart ().getAdapter (ILabelDelegate.class);
        if (label != null && getEditPart ().getFigure () instanceof WrappingLabel) {
            textFigureListener = new AncestorListener.Stub () {

                public void ancestorMoved (IFigure ancestor) {
                    getLocator ().relocate (getCellEditor ());
                }

            };

            ((IFigure) ((WrappingLabel) getEditPart ().getFigure ()).getTextFigure ().getChildren ().get (0)).addAncestorListener (textFigureListener);
        }
    }

    protected void unhookListeners () {
        if (listenersAttached) {
            listenersAttached = false;
            super.unhookListeners ();
            ILabelDelegate label = (ILabelDelegate) getEditPart ().getAdapter (ILabelDelegate.class);
            if (label != null && textFigureListener != null) {
                ((IFigure) ((WrappingLabel) getEditPart ().getFigure ()).getTextFigure ().getChildren ().get (0)).removeAncestorListener (textFigureListener);
                textFigureListener = null;
            }
        }
    }

    protected void setCellEditor (CellEditor editor) {
        super.setCellEditor (editor);
        if (editor != null) {
            listenersAttached = true;
        }
    }

    public void showFeedback () {
        try {
            getEditPart ().getRoot ();
            super.showFeedback ();
        } catch (Exception e) {
        }
    }

    protected ResourceManager getResourceManager () {
        return ((DiagramGraphicalViewer) getEditPart ().getViewer ()).getResourceManager ();
    }

    private void saveCurrentActions (IActionBars _actionBars) {
        copy = _actionBars.getGlobalActionHandler (ActionFactory.COPY.getId ());
        paste = _actionBars.getGlobalActionHandler (ActionFactory.PASTE.getId ());
        delete = _actionBars.getGlobalActionHandler (ActionFactory.DELETE.getId ());
        selectAll = _actionBars.getGlobalActionHandler (ActionFactory.SELECT_ALL.getId ());
        cut = _actionBars.getGlobalActionHandler (ActionFactory.CUT.getId ());
        find = _actionBars.getGlobalActionHandler (ActionFactory.FIND.getId ());
        undo = _actionBars.getGlobalActionHandler (ActionFactory.UNDO.getId ());
        redo = _actionBars.getGlobalActionHandler (ActionFactory.REDO.getId ());
    }

    private void restoreSavedActions (IActionBars _actionBars) {
        _actionBars.setGlobalActionHandler (ActionFactory.COPY.getId (), copy);
        _actionBars.setGlobalActionHandler (ActionFactory.PASTE.getId (), paste);
        _actionBars.setGlobalActionHandler (ActionFactory.DELETE.getId (), delete);
        _actionBars.setGlobalActionHandler (ActionFactory.SELECT_ALL.getId (), selectAll);
        _actionBars.setGlobalActionHandler (ActionFactory.CUT.getId (), cut);
        _actionBars.setGlobalActionHandler (ActionFactory.FIND.getId (), find);
        _actionBars.setGlobalActionHandler (ActionFactory.UNDO.getId (), undo);
        _actionBars.setGlobalActionHandler (ActionFactory.REDO.getId (), redo);
    }

}

