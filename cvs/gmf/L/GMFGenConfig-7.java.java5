package org.eclipse.gmf.internal.codegen.util;

import org.eclipse.emf.ecore.EAttribute;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.internal.common.reconcile.Copier;

import org.eclipse.gmf.internal.common.reconcile.Decision;

import org.eclipse.gmf.internal.common.reconcile.DefaultDecision;

import org.eclipse.gmf.internal.common.reconcile.ReconcilerConfigBase;

import org.eclipse.gmf.internal.common.reconcile.ReflectiveMatcher;

import org.eclipse.gmf.internal.common.reconcile.StringPatternDecision;

public class GMFGenConfig extends ReconcilerConfigBase {
    private final GMFGenPackage GMFGEN = GMFGenPackage.eINSTANCE;

    public GMFGenConfig () {
        setMatcher (GMFGEN.getGenEditorGenerator (), ALWAYS_MATCH);
        preserveIfSet (GMFGEN.getGenEditorGenerator (), GMFGEN.getGenEditorGenerator_CopyrightText ());
        preserveIfSet (GMFGEN.getGenEditorGenerator (), GMFGEN.getGenEditorGenerator_PackageNamePrefix ());
        preserveIfSet (GMFGEN.getGenEditorGenerator (), GMFGEN.getGenEditorGenerator_DomainFileExtension ());
        preserveIfSet (GMFGEN.getGenEditorGenerator (), GMFGEN.getGenEditorGenerator_DiagramFileExtension ());
        preserveIfSet (GMFGEN.getGenEditorGenerator (), GMFGEN.getGenEditorGenerator_SameFileForDiagramAndModel ());
        preserveIfSet (GMFGEN.getGenEditorGenerator (), GMFGEN.getGenEditorGenerator_ModelID ());
        preserveIfSet (GMFGEN.getGenEditorGenerator (), GMFGEN.getGenEditorGenerator_DynamicTemplates ());
        preserveIfSet (GMFGEN.getGenEditorGenerator (), GMFGEN.getGenEditorGenerator_TemplateDirectory ());
        setMatcher (GMFGEN.getGenPlugin (), ALWAYS_MATCH);
        preserveIfSet (GMFGEN.getGenPlugin (), GMFGEN.getGenPlugin_ID ());
        preserveIfSet (GMFGEN.getGenPlugin (), GMFGEN.getGenPlugin_Name ());
        preserveIfSet (GMFGEN.getGenPlugin (), GMFGEN.getGenPlugin_Provider ());
        preserveIfSet (GMFGEN.getGenPlugin (), GMFGEN.getGenPlugin_Version ());
        preserveIfSet (GMFGEN.getGenPlugin (), GMFGEN.getGenPlugin_ActivatorClassName ());
        preserveIfSet (GMFGEN.getGenPlugin (), GMFGEN.getGenPlugin_PrintingEnabled ());
        setMatcher (GMFGEN.getGenEditorView (), ALWAYS_MATCH);
        preserveIfSet (GMFGEN.getGenEditorView (), GMFGEN.getGenEditorView_IconPath ());
        preserveIfSet (GMFGEN.getGenEditorView (), GMFGEN.getGenEditorView_ClassName ());
        preserveIfSet (GMFGEN.getGenEditorView (), GMFGEN.getGenEditorView_ID ());
        setMatcher (GMFGEN.getGenDiagram (), ALWAYS_MATCH);
        restore (GMFGEN.getGenDiagram (), GMFGEN.getGenCommonBase_NotationViewFactoryClassName ());
        restore (GMFGEN.getGenDiagram (), GMFGEN.getGenCommonBase_EditPartClassName ());
        restore (GMFGEN.getGenDiagram (), GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName ());
        restore (GMFGEN.getGenDiagram (), GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getGenDiagram_Synchronized ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getShortcuts_ContainsShortcutsTo ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getShortcuts_ShortcutsProvidedFor ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getEditorCandies_CreationWizardIconPath ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getEditorCandies_CreationWizardCategoryID ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_ValidationEnabled ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_LiveValidationUIFeedback ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_ValidationDecorators ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_ValidationDecoratorProviderClassName ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_ValidationDecoratorProviderPriority ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_ValidationProviderClassName ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_ValidationProviderPriority ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_MetricProviderPriority ());
        preserveIfSet (GMFGEN.getGenDiagram (), GMFGEN.getBatchValidation_MetricProviderClassName ());
        for (EClass node : new EClass [] {GMFGEN.getGenTopLevelNode (), GMFGEN.getGenChildNode (), GMFGEN.getGenChildLabelNode (), GMFGEN.getGenChildSideAffixedNode ()}) {
            setMatcher (node, new VisualIDMatcher ());
            restore (node, GMFGEN.getGenCommonBase_NotationViewFactoryClassName ());
            restore (node, GMFGEN.getGenCommonBase_EditPartClassName ());
            restore (node, GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName ());
            restore (node, GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName ());
            restore (node, GMFGEN.getGenNode_PrimaryDragEditPolicyQualifiedClassName ());
            restore (node, GMFGEN.getGenNode_GraphicalNodeEditPolicyClassName ());
            restore (node, GMFGEN.getGenNode_CreateCommandClassName ());
        }
        setMatcher (GMFGEN.getGenCompartment (), new VisualIDMatcher ());
        restore (GMFGEN.getGenCompartment (), GMFGEN.getGenCommonBase_NotationViewFactoryClassName ());
        restore (GMFGEN.getGenCompartment (), GMFGEN.getGenCommonBase_EditPartClassName ());
        restore (GMFGEN.getGenCompartment (), GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName ());
        restore (GMFGEN.getGenCompartment (), GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName ());
        preserveIfSet (GMFGEN.getGenCompartment (), GMFGEN.getGenCompartment_ListLayout ());
        preserveIfSet (GMFGEN.getGenCompartment (), GMFGEN.getGenCompartment_CanCollapse ());
        preserveIfSet (GMFGEN.getGenCompartment (), GMFGEN.getGenCompartment_HideIfEmpty ());
        preserveIfSet (GMFGEN.getGenCompartment (), GMFGEN.getGenCompartment_NeedsTitle ());
        setMatcher (GMFGEN.getGenLink (), new VisualIDMatcher ());
        restore (GMFGEN.getGenLink (), GMFGEN.getGenCommonBase_NotationViewFactoryClassName ());
        restore (GMFGEN.getGenLink (), GMFGEN.getGenCommonBase_EditPartClassName ());
        restore (GMFGEN.getGenLink (), GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName ());
        restore (GMFGEN.getGenLink (), GMFGEN.getGenLink_CreateCommandClassName ());
        restore (GMFGEN.getGenLink (), GMFGEN.getGenLink_ReorientCommandClassName ());
        for (EClass label : new EClass [] {GMFGEN.getGenLinkLabel (), GMFGEN.getGenNodeLabel (), GMFGEN.getGenExternalNodeLabel ()}) {
            setMatcher (label, new VisualIDMatcher ());
            restore (label, GMFGEN.getGenCommonBase_NotationViewFactoryClassName ());
            restore (label, GMFGEN.getGenCommonBase_EditPartClassName ());
            restore (label, GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName ());
        }
        setMatcherForAllSubclasses (GMFGEN.getViewmap (), ALWAYS_MATCH);
        setMatcher (GMFGEN.getDefaultSizeAttributes (), ALWAYS_MATCH);
        setCopier (GMFGEN.getDefaultSizeAttributes (), Copier.COMPLETE_COPY);
        preserveIfSet (GMFGEN.getDefaultSizeAttributes (), GMFGEN.getDefaultSizeAttributes_Height ());
        preserveIfSet (GMFGEN.getDefaultSizeAttributes (), GMFGEN.getDefaultSizeAttributes_Width ());
        setMatcher (GMFGEN.getCustomBehaviour (), ALWAYS_MATCH);
        setCopier (GMFGEN.getCustomBehaviour (), Copier.COMPLETE_COPY);
        setMatcher (GMFGEN.getOpenDiagramBehaviour (), ALWAYS_MATCH);
        class KeepOldIfNewIsByPatternOrNotSet extends StringPatternDecision {

            KeepOldIfNewIsByPatternOrNotSet (EAttribute feature, String pattern) {
                super (pattern, feature);
            }

            @Override
            public void apply (EObject current, EObject old) {
                String newValue = (String) current.eGet (getFeature ());
                if (isValueSet (old) && (newValue == null || myPattern.matcher (newValue).matches ())) {
                    preserveOld (current, old);
                } else {
                    acceptNew (current, old);
                }
            }

        }

        addDecision (GMFGEN.getOpenDiagramBehaviour (), new KeepOldIfNewIsByPatternOrNotSet (GMFGEN.getOpenDiagramBehaviour_DiagramKind (), "^FIXME.*"));
        addDecision (GMFGEN.getOpenDiagramBehaviour (), new KeepOldIfNewIsByPatternOrNotSet (GMFGEN.getOpenDiagramBehaviour_EditorID (), "^FIXME.*"));
        preserveIfSet (GMFGEN.getOpenDiagramBehaviour (), GMFGEN.getOpenDiagramBehaviour_EditPolicyClassName ());
        preserveIfSet (GMFGEN.getOpenDiagramBehaviour (), GMFGEN.getOpenDiagramBehaviour_OpenAsEclipseEditor ());
        setMatcher (GMFGEN.getMetamodelType (), ALWAYS_MATCH);
        restore (GMFGEN.getMetamodelType (), GMFGEN.getMetamodelType_EditHelperClassName ());
        preserveIfSet (GMFGEN.getMetamodelType (), GMFGEN.getElementType_DisplayName ());
        preserveIfSet (GMFGEN.getMetamodelType (), GMFGEN.getElementType_DefinedExternally ());
        setMatcher (GMFGEN.getSpecializationType (), ALWAYS_MATCH);
        restore (GMFGEN.getSpecializationType (), GMFGEN.getSpecializationType_EditHelperAdviceClassName ());
        preserveIfSet (GMFGEN.getSpecializationType (), GMFGEN.getElementType_DisplayName ());
        preserveIfSet (GMFGEN.getSpecializationType (), GMFGEN.getElementType_DefinedExternally ());
        setMatcher (GMFGEN.getGenPropertySheet (), ALWAYS_MATCH);
        preserveIfSet (GMFGEN.getGenPropertySheet (), GMFGEN.getGenPropertySheet_ReadOnly ());
        preserveIfSet (GMFGEN.getGenPropertySheet (), GMFGEN.getGenPropertySheet_NeedsCaption ());
        preserveIfSet (GMFGEN.getGenPropertySheet (), GMFGEN.getGenPropertySheet_PackageName ());
        preserveIfSet (GMFGEN.getGenPropertySheet (), GMFGEN.getGenPropertySheet_LabelProviderClassName ());
        setMatcherForAllSubclasses (GMFGEN.getGenPropertyTab (), new ReflectiveMatcher (GMFGEN.getGenPropertyTab_ID ()));
        preserveIfSet (GMFGEN.getGenStandardPropertyTab (), GMFGEN.getGenPropertyTab_Label ());
        preserveIfSet (GMFGEN.getGenCustomPropertyTab (), GMFGEN.getGenPropertyTab_Label ());
        preserveIfSet (GMFGEN.getGenCustomPropertyTab (), GMFGEN.getGenCustomPropertyTab_ClassName ());
        setCopier (GMFGEN.getGenCustomPropertyTab (), Copier.COMPLETE_COPY);
        setMatcher (GMFGEN.getGenNavigator (), ALWAYS_MATCH);
        preserveIfRemoved (GMFGEN.getGenEditorGenerator (), GMFGEN.getGenEditorGenerator_Navigator ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_GenerateDomainModelNavigator ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainContentExtensionID ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainContentExtensionName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainContentExtensionPriority ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainContentProviderClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainLabelProviderClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainModelElementTesterClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenDomainModelNavigator_DomainNavigatorItemClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_ContentExtensionID ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_ContentExtensionName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_ContentExtensionPriority ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_LinkHelperExtensionID ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_SorterExtensionID ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_ActionProviderID ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_ContentProviderClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_LabelProviderClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_LinkHelperClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_SorterClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_ActionProviderClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_AbstractNavigatorItemClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_NavigatorGroupClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_NavigatorItemClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_UriInputTesterClassName ());
        preserveIfSet (GMFGEN.getGenNavigator (), GMFGEN.getGenNavigator_PackageName ());
        setMatcher (GMFGEN.getGenDiagramPreferences (), ALWAYS_MATCH);
        setCopier (GMFGEN.getGenDiagramPreferences (), Copier.COMPLETE_COPY);
        setMatcher (GMFGEN.getGenApplication (), ALWAYS_MATCH);
        preserveIfSet (GMFGEN.getGenApplication (), GMFGEN.getGenApplication_ID ());
        preserveIfSet (GMFGEN.getGenApplication (), GMFGEN.getGenApplication_Title ());
        preserveIfSet (GMFGEN.getGenApplication (), GMFGEN.getGenApplication_PackageName ());
        preserveIfSet (GMFGEN.getGenApplication (), GMFGEN.getGenApplication_ClassName ());
        preserveIfSet (GMFGEN.getGenApplication (), GMFGEN.getGenApplication_PerspectiveId ());
        preserveIfSet (GMFGEN.getGenApplication (), GMFGEN.getGenApplication_SupportFiles ());
    }

    private void restore (EClass eClass, EAttribute feature) {
        addDecision (eClass, new Decision.ALWAYS_OLD (feature));
    }

    private void preserveIfSet (EClass eClass, EAttribute feature) {
        addDecision (eClass, new DefaultDecision (feature));
    }

    private void preserveIfRemoved (EClass eClass, EStructuralFeature feature) {
        addDecision (eClass, new DefaultDecision (feature, true));
    }

}

