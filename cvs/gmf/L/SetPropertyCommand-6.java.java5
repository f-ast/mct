package org.eclipse.gmf.runtime.diagram.core.commands;

import java.text.MessageFormat;

import java.util.Collection;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.ecore.ENamedElement;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.diagram.core.internal.l10n.DiagramResourceManager;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;

import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;

import org.eclipse.gmf.runtime.notation.View;

public class SetPropertyCommand extends AbstractModelCommand {
    static final private String CHANGE_PROPERTY_PATTERN = DiagramResourceManager.getI18NString ("Command.ChangeViewProperty.ChangePropertyPattern");
    private IAdaptable viewAdapter;
    private String propertyName;
    private String propertyId;
    private Object newValue;

    public SetPropertyCommand (String label, IAdaptable viewAdapter, String propertyId, Object newValue) {
        super (label, null);
        this.viewAdapter = viewAdapter;
        this.propertyId = propertyId;
        this.newValue = newValue;
    }

    public SetPropertyCommand (IAdaptable viewAdapter, String propertyId, String propertyName, Object newValue) {
        this (null, viewAdapter, propertyId, newValue);
        this.propertyName = propertyName;
    }

    public Collection getAffectedObjects () {
        if (viewAdapter != null) {
            View view = (View) viewAdapter.getAdapter (View.class);
            if (view != null) return getWorkspaceFilesFor (view);

        }
        return super.getAffectedObjects ();
    }

    public String getLabel () {
        String label = super.getLabel ();
        return (label != null) ? label : (MessageFormat.format (CHANGE_PROPERTY_PATTERN, new Object [] {propertyName}));
    }

    protected CommandResult doExecute (IProgressMonitor progressMonitor) {
        View view = (View) viewAdapter.getAdapter (View.class);
        if (view != null) {
            ENamedElement namedElement = MetaModelUtil.getElement (propertyId);
            if (namedElement instanceof EStructuralFeature) ViewUtil.setStructuralFeatureValue (view, (EStructuralFeature) namedElement, newValue);

        }
        return newOKCommandResult ();
    }

    protected Object getNewValue () {
        return newValue;
    }

    protected Object getPropertyId () {
        return propertyId;
    }

    protected IAdaptable getViewAdapter () {
        return viewAdapter;
    }

    protected String getPropertyName () {
        return propertyName;
    }

    protected void setNewValue (Object newValue) {
        this.newValue = newValue;
    }

    protected void setPropertyId (String propertyId) {
        this.propertyId = propertyId;
    }

    protected void setViewAdapter (IAdaptable viewAdapter) {
        this.viewAdapter = viewAdapter;
    }

    protected void setPropertyName (String string) {
        propertyName = string;
    }

}

