package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.ArrayList;

import java.util.List;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.draw2d.ColorConstants;

import org.eclipse.draw2d.FigureUtilities;

import org.eclipse.draw2d.Graphics;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.draw2d.RectangleFigure;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.gef.AccessibleHandleProvider;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.Handle;

import org.eclipse.gef.Request;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.handles.MoveHandle;

import org.eclipse.gef.handles.ResizeHandle;

import org.eclipse.gef.tools.ResizeTracker;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.diagram.core.internal.commands.IPropertyValueDeferred;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ChangeBoundsDeferredRequest;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public class ResizableShapeEditPolicy extends ResizableEditPolicyEx {

    protected List createSelectionHandles () {
        GraphicalEditPart part = (GraphicalEditPart) getHost ();
        List selectionhandles = new ArrayList (9);
        MoveHandle moveHandle = new MoveHandle (part);
        moveHandle.setBorder (null);
        selectionhandles.add (moveHandle);
        selectionhandles.add (createHandle (part, PositionConstants.EAST));
        selectionhandles.add (createHandle (part, PositionConstants.SOUTH_EAST));
        selectionhandles.add (createHandle (part, PositionConstants.SOUTH));
        selectionhandles.add (createHandle (part, PositionConstants.SOUTH_WEST));
        selectionhandles.add (createHandle (part, PositionConstants.WEST));
        selectionhandles.add (createHandle (part, PositionConstants.NORTH_WEST));
        selectionhandles.add (createHandle (part, PositionConstants.NORTH));
        selectionhandles.add (createHandle (part, PositionConstants.NORTH_EAST));
        return selectionhandles;
    }

    protected Handle createHandle (GraphicalEditPart owner, int direction) {
        ResizeHandle handle = new ResizeHandle (owner, direction);
        handle.setDragTracker (new ResizeTracker (owner, direction));
        return handle;
    }

    protected Command getAutoSizeCommand (Request request) {
        ICommand resizeCommand = new SetBoundsCommand (DiagramUIMessages.SetAutoSizeCommand_Label, new EObjectAdapter ((View) getHost ().getModel ()), new Dimension (- 1, - 1));
        return new EtoolsProxyCommand (resizeCommand);
    }

    protected Command getMoveDeferredCommand (ChangeBoundsDeferredRequest request) {
        final class SetDeferredPropertyCommand extends AbstractModelCommand {
            private IAdaptable newValue;
            private IAdaptable viewAdapter;

            public SetDeferredPropertyCommand (String label, IAdaptable viewAdapter, IAdaptable newValue) {
                super (label, null);
                this.viewAdapter = viewAdapter;
                this.newValue = newValue;
            }

            protected CommandResult doExecute (IProgressMonitor progressMonitor) {
                if (null == viewAdapter || null == newValue) return newCancelledCommandResult ();

                View view = (View) viewAdapter.getAdapter (View.class);
                Point p = (Point) newValue.getAdapter (IPropertyValueDeferred.class);
                ViewUtil.setStructuralFeatureValue (view, NotationPackage.eINSTANCE.getLocation_X (), new Integer (p.x));
                ViewUtil.setStructuralFeatureValue (view, NotationPackage.eINSTANCE.getLocation_Y (), new Integer (p.y));
                viewAdapter = null;
                newValue = null;
                return newOKCommandResult ();
            }

        }

        SetDeferredPropertyCommand cmd = new SetDeferredPropertyCommand (DiagramUIMessages.ResizableShapeEditPolicy_MoveDeferredCommand_label, new EObjectAdapter ((View) getHost ().getModel ()), request.getLocationAdapter ());
        return new EtoolsProxyCommand (cmd);
    }

    public Command getCommand (Request request) {
        if (RequestConstants.REQ_AUTOSIZE.equals (request.getType ())) return getAutoSizeCommand (request);

        if (RequestConstants.REQ_MOVE_DEFERRED.equals (request.getType ())) return getMoveDeferredCommand ((ChangeBoundsDeferredRequest) request);

        return super.getCommand (request);
    }

    public boolean understandsRequest (Request request) {
        if (RequestConstants.REQ_AUTOSIZE.equals (request.getType ()) || RequestConstants.REQ_MOVE_DEFERRED.equals (request.getType ())) return true;

        return super.understandsRequest (request);
    }

    protected IFigure createDragSourceFeedbackFigure () {
        RectangleFigure r = new RectangleFigure ();
        FigureUtilities.makeGhostShape (r);
        r.setLineStyle (Graphics.LINE_DOT);
        r.setForegroundColor (ColorConstants.white);
        r.setBounds (getInitialFeedbackBounds ());
        addFeedback (r);
        return r;
    }

    public Object getAdapter (Class key) {
        if (key == AccessibleHandleProvider.class) if (handles == null) {
            return null;
        }

        return super.getAdapter (key);
    }

}

