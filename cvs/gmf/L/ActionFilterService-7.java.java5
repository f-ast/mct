package org.eclipse.gmf.runtime.common.ui.services.action.filter;

import java.lang.ref.WeakReference;

import java.text.MessageFormat;

import java.util.HashMap;

import java.util.List;

import java.util.Map;

import org.eclipse.core.commands.operations.IOperationHistory;

import org.eclipse.core.commands.operations.IOperationHistoryListener;

import org.eclipse.core.commands.operations.OperationHistoryEvent;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.service.IProvider;

import org.eclipse.gmf.runtime.common.core.service.Service;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.action.ActionManager;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionDebugOptions;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionPlugin;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.CommonUIServicesActionStatusCodes;

import org.eclipse.gmf.runtime.common.ui.services.action.internal.filter.IActionFilterProvider;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.ui.IWorkbenchWindow;

import org.eclipse.ui.PlatformUI;

public class ActionFilterService extends Service implements IActionFilterProvider, IOperationHistoryListener {
    private static class CacheKey {
        public String name;
        public String value;

        public CacheKey () {
            this (null, null);
        }

        public CacheKey (String name, String value) {
            this.name = name;
            this.value = value;
        }

        public boolean equals (Object obj) {
            CacheKey other = (CacheKey) obj;
            return value.equals (other.value) && name.equals (other.name);
        }

        public int hashCode () {
            return name.hashCode () ^ value.hashCode ();
        }

    }

    private static final CacheKey TEST_KEY = new CacheKey ();
    protected static class ProviderDescriptor extends Service.ProviderDescriptor {
        protected static final String A_NAME = "name";
        protected static final String A_VALUE = "value";
        protected static final String E_ATTRIBUTE = "Attribute";

        protected ProviderDescriptor (IConfigurationElement element) {
            super (element);
        }

        public boolean provides (IOperation operation) {
            IConfigurationElement [] elements = getElement ().getChildren (E_ATTRIBUTE);
            if (0 < elements.length) {
                TestAttributeOperation tao = (TestAttributeOperation) operation;
                for (int i = 0;
                i < elements.length; i ++) {
                    try {
                        String name = elements [i].getAttribute (A_NAME);
                        String value = elements [i].getAttribute (A_VALUE);
                        if (name.equals (tao.getName ()) && ((null == value) || value.equals (tao.getValue ()))) {
                            return true;
                        }
                    } catch (Exception e) {
                        Trace.catching (CommonUIServicesActionPlugin.getDefault (), CommonUIServicesActionDebugOptions.EXCEPTIONS_CATCHING, getClass (), "provides", e);
                        Log.error (CommonUIServicesActionPlugin.getDefault (), CommonUIServicesActionStatusCodes.SERVICE_FAILURE, MessageFormat.format (INVALID_ELEMENT_MESSAGE_PATTERN, new Object [] {elements [i].getName ()}), e);
                    }
                }
                return false;
            } else {
                return super.provides (operation);
            }
        }

    }

    protected final static String PREFIX = "@";
    private final static ActionFilterService instance = new ActionFilterService ();

    static {
        instance.configureProviders (CommonUIServicesActionPlugin.getPluginId (), "actionFilterProviders");
    }

    private final Map cachedResults = new HashMap ();
    private WeakReference cachedSelection = null;

    protected ActionFilterService () {
        super (true);
        getOperationHistory ().addOperationHistoryListener (this);
    }

    public static ActionFilterService getInstance () {
        return instance;
    }

    private Map getCachedResults () {
        return cachedResults;
    }

    private ISelection getCachedSelection () {
        if (cachedSelection != null) {
            Object sel = cachedSelection.get ();
            if (sel != null) return (ISelection) sel;

        }
        return StructuredSelection.EMPTY;
    }

    private void setCachedSelection (ISelection selection) {
        this.cachedSelection = new WeakReference (selection);
    }

    protected ActionManager getActionManager () {
        return ActionManager.getDefault ();
    }

    protected IOperationHistory getOperationHistory () {
        return getActionManager ().getOperationHistory ();
    }

    protected Service.ProviderDescriptor newProviderDescriptor (IConfigurationElement element) {
        return new ProviderDescriptor (element);
    }

    public final void clearCachedResults () {
        getCachedResults ().clear ();
    }

    protected void updateCachedData () {
        ISelection selection = null;
        IWorkbenchWindow window = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ();
        if (null != window) {
            selection = window.getSelectionService ().getSelection ();
        }
        selection = (null == selection ? StructuredSelection.EMPTY : selection);
        ISelection cachedSel = getCachedSelection ();
        if (cachedSel != selection) {
            if (! cachedSel.equals (selection)) {
                clearCachedResults ();
            }
            setCachedSelection (selection);
        }
    }

    public boolean testAttribute (Object target, String name, String value) {
        updateCachedData ();
        TEST_KEY.name = name;
        TEST_KEY.value = value;
        Boolean result = (Boolean) getCachedResults ().get (TEST_KEY);
        if (null == result) {
            String normalizedname = name;
            if (name.startsWith (PREFIX)) {
                normalizedname = name.substring (1);
            }
            List results = execute (ExecutionStrategy.FIRST, new TestAttributeOperation (target, normalizedname, value));
            result = results.isEmpty () ? Boolean.FALSE : (Boolean) results.get (0);
            getCachedResults ().put (new CacheKey (name, value), result);
        }
        return result.booleanValue ();
    }

    public void historyNotification (OperationHistoryEvent event) {
        clearCachedResults ();
        setCachedSelection (StructuredSelection.EMPTY);
    }

}

