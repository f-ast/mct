package org.eclipse.gmf.internal.xpand.parser;

public class XpandKWLexer extends XpandKWLexerprs implements XpandParsersym {
    private char [] inputChars;
    private final int keywordKind [] = new int [47 + 1];

    public int [] getKeywordKinds () {
        return keywordKind;
    }

    public int lexer (int curtok, int lasttok) {
        int current_kind = getKind (inputChars [curtok]), act;
        for (act = tAction (START_STATE, current_kind); act > NUM_RULES && act < ACCEPT_ACTION; act = tAction (act, current_kind)) {
            curtok ++;
            current_kind = (curtok > lasttok ? Char_EOF : getKind (inputChars [curtok]));
        }
        if (act > ERROR_ACTION) {
            curtok ++;
            act -= ERROR_ACTION;
        }
        return keywordKind [act == ERROR_ACTION || curtok <= lasttok ? 0 : act];
    }

    public void setInputChars (char [] inputChars) {
        this.inputChars = inputChars;
    }

    final static int tokenKind [] = new int [128];

    static {
        tokenKind ['a'] = Char_a;
        tokenKind ['b'] = Char_b;
        tokenKind ['c'] = Char_c;
        tokenKind ['d'] = Char_d;
        tokenKind ['e'] = Char_e;
        tokenKind ['f'] = Char_f;
        tokenKind ['g'] = Char_g;
        tokenKind ['h'] = Char_h;
        tokenKind ['i'] = Char_i;
        tokenKind ['j'] = Char_j;
        tokenKind ['k'] = Char_k;
        tokenKind ['l'] = Char_l;
        tokenKind ['m'] = Char_m;
        tokenKind ['n'] = Char_n;
        tokenKind ['o'] = Char_o;
        tokenKind ['p'] = Char_p;
        tokenKind ['q'] = Char_q;
        tokenKind ['r'] = Char_r;
        tokenKind ['s'] = Char_s;
        tokenKind ['t'] = Char_t;
        tokenKind ['u'] = Char_u;
        tokenKind ['v'] = Char_v;
        tokenKind ['w'] = Char_w;
        tokenKind ['x'] = Char_x;
        tokenKind ['y'] = Char_y;
        tokenKind ['z'] = Char_z;
        tokenKind ['A'] = Char_A;
        tokenKind ['B'] = Char_B;
        tokenKind ['C'] = Char_C;
        tokenKind ['D'] = Char_D;
        tokenKind ['E'] = Char_E;
        tokenKind ['F'] = Char_F;
        tokenKind ['G'] = Char_G;
        tokenKind ['H'] = Char_H;
        tokenKind ['I'] = Char_I;
        tokenKind ['J'] = Char_J;
        tokenKind ['K'] = Char_K;
        tokenKind ['L'] = Char_L;
        tokenKind ['M'] = Char_M;
        tokenKind ['N'] = Char_N;
        tokenKind ['O'] = Char_O;
        tokenKind ['P'] = Char_P;
        tokenKind ['Q'] = Char_Q;
        tokenKind ['R'] = Char_R;
        tokenKind ['S'] = Char_S;
        tokenKind ['T'] = Char_T;
        tokenKind ['U'] = Char_U;
        tokenKind ['V'] = Char_V;
        tokenKind ['W'] = Char_W;
        tokenKind ['X'] = Char_X;
        tokenKind ['Y'] = Char_Y;
        tokenKind ['Z'] = Char_Z;
    }

    ;

    final int getKind (char c) {
        return (c < 128 ? tokenKind [c] : 0);
    }

    public XpandKWLexer (char [] inputChars, int identifierKind) {
        this.inputChars = inputChars;
        keywordKind [0] = identifierKind;
        keywordKind [1] = (TK_null);
        keywordKind [2] = (TK_true);
        keywordKind [3] = (TK_false);
        keywordKind [4] = (TK_new);
        keywordKind [5] = (TK_let);
        keywordKind [6] = (TK_switch);
        keywordKind [7] = (TK_case);
        keywordKind [8] = (TK_default);
        keywordKind [9] = (TK_implies);
        keywordKind [10] = (TK_Set);
        keywordKind [11] = (TK_List);
        keywordKind [12] = (TK_Collection);
        keywordKind [13] = (TK_forAll);
        keywordKind [14] = (TK_exists);
        keywordKind [15] = (TK_notExists);
        keywordKind [16] = (TK_collect);
        keywordKind [17] = (TK_select);
        keywordKind [18] = (TK_reject);
        keywordKind [19] = (TK_typeSelect);
        keywordKind [20] = (TK_IMPORT);
        keywordKind [21] = (TK_EXTENSION);
        keywordKind [22] = (TK_AROUND);
        keywordKind [23] = (TK_ENDAROUND);
        keywordKind [24] = (TK_DEFINE);
        keywordKind [25] = (TK_ENDDEFINE);
        keywordKind [26] = (TK_ERROR);
        keywordKind [27] = (TK_EXPAND);
        keywordKind [28] = (TK_FOR);
        keywordKind [29] = (TK_SEPARATOR);
        keywordKind [30] = (TK_AS);
        keywordKind [31] = (TK_ITERATOR);
        keywordKind [32] = (TK_FOREACH);
        keywordKind [33] = (TK_ENDFOREACH);
        keywordKind [34] = (TK_FILE);
        keywordKind [35] = (TK_ENDFILE);
        keywordKind [36] = (TK_IF);
        keywordKind [37] = (TK_ELSEIF);
        keywordKind [38] = (TK_ELSE);
        keywordKind [39] = (TK_ENDIF);
        keywordKind [40] = (TK_LET);
        keywordKind [41] = (TK_ENDLET);
        keywordKind [42] = (TK_PROTECT);
        keywordKind [43] = (TK_CSTART);
        keywordKind [44] = (TK_CEND);
        keywordKind [45] = (TK_ID);
        keywordKind [46] = (TK_DISABLE);
        keywordKind [47] = (TK_ENDPROTECT);
        for (int i = 0;
        i < keywordKind.length; i ++) {
            if (keywordKind [i] == 0) keywordKind [i] = identifierKind;

        }
    }

}

