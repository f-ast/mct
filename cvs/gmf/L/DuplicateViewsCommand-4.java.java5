package org.eclipse.gmf.runtime.diagram.ui.internal.commands;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import java.util.Map;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.DuplicateRequest;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;

import org.eclipse.gmf.runtime.emf.commands.core.commands.DuplicateEObjectsCommand;

import org.eclipse.gmf.runtime.notation.Bounds;

import org.eclipse.gmf.runtime.notation.LayoutConstraint;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

public class DuplicateViewsCommand extends DuplicateEObjectsCommand {
    Map duplicatedElements;
    List duplicatedViewsToBeReturned = new ArrayList ();

    public DuplicateViewsCommand (String label, DuplicateRequest request, List viewsToDuplicate, Map duplicatedElements) {
        super (label, viewsToDuplicate);
        this.duplicatedElements = duplicatedElements;
        duplicatedViewsToBeReturned = request.getDuplicatedViews ();
    }

    public DuplicateViewsCommand (String label, DuplicateRequest request, List viewsToDuplicate) {
        this (label, request, viewsToDuplicate, null);
    }

    protected CommandResult doExecute (IProgressMonitor progressMonitor) {
        CommandResult result = super.doExecute (progressMonitor);
        if (! result.getStatus ().isOK ()) {
            return result;
        }
        if (duplicatedElements != null && ! duplicatedElements.isEmpty ()) {
            EcoreUtil.Copier copier = new EcoreUtil.Copier ();
            copier.putAll (duplicatedElements);
            copier.putAll (getAllDuplicatedObjectsMap ());
            copier.copyReferences ();
        }
        for (Iterator iter = getObjectsToBeDuplicated ().iterator ();
        iter.hasNext ();) {
            View originalView = (View) iter.next ();
            View duplicateView = (View) getAllDuplicatedObjectsMap ().get (originalView);
            List sourceRefs = new ArrayList (duplicateView.getSourceEdges ());
            for (Iterator iterator = sourceRefs.iterator ();
            iterator.hasNext ();) {
                EObject edge = (EObject) iterator.next ();
                if (! getAllDuplicatedObjectsMap ().containsValue (edge)) {
                    sourceRefs.remove (edge);
                }
            }
            List targetRefs = new ArrayList (duplicateView.getTargetEdges ());
            for (Iterator iterator = targetRefs.iterator ();
            iterator.hasNext ();) {
                EObject edge = (EObject) iterator.next ();
                if (! getAllDuplicatedObjectsMap ().containsValue (edge)) {
                    targetRefs.remove (edge);
                }
            }
            if (duplicateView instanceof Node) {
                LayoutConstraint layoutConstraint = ((Node) duplicateView).getLayoutConstraint ();
                if (layoutConstraint instanceof Bounds) {
                    Bounds bounds = (Bounds) layoutConstraint;
                    int x = bounds.getX ();
                    bounds.setX (x + MapMode.DPtoLP (10));
                    int y = bounds.getY ();
                    bounds.setY (y + MapMode.DPtoLP (10));
                }
            }
            if (duplicateView != null) {
                duplicatedViewsToBeReturned.add (duplicateView);
            }
        }
        return newOKCommandResult (duplicatedViewsToBeReturned);
    }

}

