package org.eclipse.gmf.runtime.draw2d.ui.internal.figures;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.Orientable;

import org.eclipse.draw2d.ScrollBar;

import org.eclipse.draw2d.ScrollPane;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Insets;

import org.eclipse.gmf.runtime.draw2d.ui.figures.ListScrollBar;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

public class AnimatableScrollPane extends ScrollPane {
    private AnimationModel animationModel = null;
    private boolean expanded = true;
    private static final long delay = 150;

    private void animate () {
        animationModel = new AnimationModel (delay, expanded);
        animationModel.animationStarted ();
        while (! animationModel.isFinished ()) this.step ();

        animationModel = null;
    }

    public void collapse () {
        if (expanded == false) return;

        expanded = false;
        animate ();
    }

    public void expand () {
        if (expanded == true) return;

        expanded = true;
        animate ();
    }

    public void setExpanded (boolean value) {
        if (expanded == value) return;

        expanded = value;
        revalidate ();
    }

    public final boolean isExpanded () {
        return expanded;
    }

    private void step () {
        revalidate ();
        getUpdateManager ().performUpdate ();
    }

    public boolean isOpaque () {
        return false;
    }

    public Dimension getPreferredSize (int wHint, int hHint) {
        if (animationModel == null) {
            if (expanded) return super.getPreferredSize (wHint, hHint);

            return getMinimumSize (wHint, hHint);
        }
        Dimension pref = super.getPreferredSize (wHint, hHint);
        Dimension min = getMinimumSize (wHint, hHint);
        float scale = animationModel.getProgress ();
        return pref.equals (min) ? pref : pref.getScaled (scale).expand (min.getScaled (1.0f - scale));
    }

    public void validate () {
        if (isValid ()) return;

        setValid (true);
        layout ();
        for (int i = 0;
        i < getChildren ().size (); i ++) ((IFigure) getChildren ().get (i)).validate ();

        if ((hBar != null) && getHorizontalScrollBarVisibility () != NEVER) getHorizontalScrollBar ().validate ();

        if ((vBar != null) && getVerticalScrollBarVisibility () != NEVER) getVerticalScrollBar ().validate ();

    }

    protected void createVerticalScrollBar () {
        IMapMode mm = MapModeUtil.getMapMode (this);
        int mm_1 = mm.DPtoLP (1);
        Insets insets = new Insets (mm_1, mm.DPtoLP (2), mm_1, mm.DPtoLP (0));
        int mm_15 = mm.DPtoLP (15);
        Dimension size = new Dimension (mm_15, mm_15);
        setVerticalScrollBar (new ListScrollBar (Orientable.VERTICAL, insets, size, mm.DPtoLP (10), mm.DPtoLP (50)));
    }

    protected void createHorizontalScrollBar () {
        IMapMode mm = MapModeUtil.getMapMode (this);
        int mm_1 = mm.DPtoLP (1);
        Insets insets = new Insets (mm_1, mm.DPtoLP (2), mm_1, mm.DPtoLP (0));
        int mm_15 = mm.DPtoLP (15);
        Dimension size = new Dimension (mm_15, mm_15);
        setHorizontalScrollBar (new ListScrollBar (Orientable.HORIZONTAL, insets, size, mm.DPtoLP (10), mm.DPtoLP (50)));
    }

    public ScrollBar basicGetVerticalScrollBar () {
        return vBar;
    }

    public ScrollBar basicGetHorizontalScrollBar () {
        return hBar;
    }

}

