package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.beans.PropertyChangeEvent;

import org.eclipse.draw2d.IFigure;

import org.eclipse.gef.ExposeHelper;

import org.eclipse.gef.editparts.ViewportExposeHelper;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.FontData;

import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;

import org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure;

import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.notation.DrawerStyle;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.Ratio;

import org.eclipse.gmf.runtime.notation.TitleStyle;

import org.eclipse.gmf.runtime.notation.View;

public abstract class ResizableCompartmentEditPart extends CompartmentEditPart implements IResizableCompartmentEditPart {

    public ResizableCompartmentEditPart (View view) {
        super (view);
    }

    public Object getAdapter (Class key) {
        if (key == ExposeHelper.class) {
            ViewportExposeHelper helper = new ViewportExposeHelper (this);
            return helper;
        }
        return super.getAdapter (key);
    }

    protected void refreshVisuals () {
        super.refreshVisuals ();
        refreshFont ();
        refreshFontColor ();
        refreshShowCompartmentTitle ();
        refreshCollapsed ();
        refreshRatio ();
    }

    protected IFigure createFigure () {
        return new ResizableCompartmentFigure (getTitleName ());
    }

    public ResizableCompartmentFigure getCompartmentFigure () {
        return (ResizableCompartmentFigure) getFigure ();
    }

    public IFigure getContentPane () {
        if (getCompartmentFigure () != null) {
            return getCompartmentFigure ().getContentPane ();
        } else {
            return null;
        }
    }

    protected abstract String getTitleName ();

    protected void handlePropertyChangeEvent (PropertyChangeEvent evt) {
        if (evt.getPropertyName ().equals (Properties.ID_RATIO) || evt.getOldValue () instanceof Ratio || evt.getNewValue () instanceof Ratio) refreshRatio ();
        else if (evt.getPropertyName ().equals (Properties.ID_COLLAPSED)) {
            setCollapsed (((Boolean) evt.getNewValue ()).booleanValue (), true);
            this.getFigure ().revalidate ();
        } else if (evt.getPropertyName ().equals (Properties.ID_SHOWCOMPARTMENTTITLE)) setShowCompartmentTitle (((Boolean) evt.getNewValue ()).booleanValue ());
        else if (evt.getPropertyName ().equals (Properties.ID_FONTCOLOR)) {
            Integer c = (Integer) evt.getNewValue ();
            setFontColor (PresentationResourceManager.getInstance ().getColor (c));
        } else super.handlePropertyChangeEvent (evt);

    }

    protected void handleNotificationEvent (NotificationEvent event) {
        if (NotationPackage.eINSTANCE.getFontStyle ().isInstance (event.getElement ())) refreshFont ();
        else super.handleNotificationEvent (event);

    }

    protected void refreshRatio () {
        if (ViewUtil.isPropertySupported ((View) getModel (), Properties.ID_RATIO)) setRatio ((Double) getPropertyValue (Properties.ID_RATIO));
        else setRatio (new Double (- 1));

    }

    protected void refreshCollapsed () {
        DrawerStyle style = (DrawerStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getDrawerStyle ());
        if (style != null) setCollapsed (style.isCollapsed (), false);

    }

    protected void refreshShowCompartmentTitle () {
        TitleStyle style = (TitleStyle) ((View) getModel ()).getStyle (NotationPackage.eINSTANCE.getTitleStyle ());
        if (style != null) setShowCompartmentTitle (style.isShowTitle ());

    }

    protected void setCollapsed (boolean collapsed, boolean animate) {
        if (getCompartmentFigure () != null) {
            if (collapsed) {
                if (animate) getCompartmentFigure ().collapse ();
                else getCompartmentFigure ().setCollapsed ();

            } else {
                if (animate) getCompartmentFigure ().expand ();
                else getCompartmentFigure ().setExpanded ();

            }
        }
    }

    protected void setRatio (Double ratio) {
        ((IGraphicalEditPart) getParent ()).setLayoutConstraint (this, getFigure (), ratio);
    }

    protected void setShowCompartmentTitle (boolean showCompartmentTitle) {
        if (getCompartmentFigure () != null) getCompartmentFigure ().setTitleVisibility (showCompartmentTitle);

    }

    protected void setFont (FontData fontData) {
        if (getCompartmentFigure () != null) fontData.setHeight (fontData.getHeight () - 1);

        super.setFont (fontData);
    }

    protected void setFontColor (Color color) {
        if (getCompartmentFigure () != null) getCompartmentFigure ().setFontColor (color);

    }

    protected void addNotationalListeners () {
        super.addNotationalListeners ();
        addListenerFilter ("PrimaryView", this, ViewUtil.getPropertyChangeNotifier (getPrimaryView ()));
    }

    protected void removeNotationalListeners () {
        super.removeNotationalListeners ();
        removeListenerFilter ("PrimaryView");
    }

    public boolean isSelectable () {
        if (super.isSelectable ()) {
            return (! (getParent () instanceof ResizableCompartmentEditPart));
        }
        return false;
    }

}

