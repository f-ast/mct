package org.eclipse.gmf.runtime.diagram.ui.preferences;

import org.eclipse.draw2d.ColorConstants;

import org.eclipse.jface.preference.ColorFieldEditor;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.jface.preference.PreferenceConverter;

import org.eclipse.jface.resource.JFaceResources;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.FontData;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.layout.GridLayout;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Group;

import org.eclipse.gmf.runtime.common.ui.preferences.AbstractPreferencePage;

import org.eclipse.gmf.runtime.common.ui.preferences.FontFieldEditor;

import org.eclipse.gmf.runtime.diagram.ui.figures.DiagramColorConstants;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;

public class AppearancePreferencePage extends AbstractPreferencePage {
    private String COLORANDFONT_GROUPBOX_LABEL = DiagramResourceManager.getI18NString ("GeneralPreferencePage.colorAndFontGroupBox.label");
    private String DEFAULT_FONT_LABEL = DiagramResourceManager.getI18NString ("GeneralPreferencePage.defaultFont.label");
    private String FONT_COLOR_LABEL = DiagramResourceManager.getI18NString ("GeneralPreferencePage.fontColor.label");
    private String FILL_COLOR_LABEL = DiagramResourceManager.getI18NString ("GeneralPreferencePage.fillColor.label");
    private String LINE_COLOR_LABEL = DiagramResourceManager.getI18NString ("GeneralPreferencePage.lineColor.label");
    private String NOTE_FILL_COLOR_LABEL = DiagramResourceManager.getI18NString ("GeneralPreferencePage.noteFillColor.label");
    private String NOTE_LINE_COLOR_LABEL = DiagramResourceManager.getI18NString ("GeneralPreferencePage.noteLineColor.label");
    private FontFieldEditor defaultFontEditor = null;
    private ColorFieldEditor fontColorEditor = null;
    private ColorFieldEditor fillColorEditor = null;
    private ColorFieldEditor lineColorEditor = null;
    private ColorFieldEditor noteFillColorEditor = null;
    private ColorFieldEditor noteLineColorEditor = null;

    protected void addFields (Composite parent) {
        Composite main = createPageLayout (parent);
        createFontAndColorGroup (main);
    }

    protected Composite createPageLayout (Composite parent) {
        Composite main = new Composite (parent, SWT.NULL);
        main.setLayout (new GridLayout ());
        main.setLayoutData (new GridData (GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL));
        return main;
    }

    protected Composite createFontAndColorGroup (Composite parent) {
        Group group = new Group (parent, SWT.NONE);
        group.setLayoutData (new GridData (GridData.FILL_HORIZONTAL));
        group.setLayout (new GridLayout (3, false));
        Composite composite = new Composite (group, SWT.NONE);
        GridLayout gridLayout = new GridLayout (3, false);
        composite.setLayout (gridLayout);
        GridData gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.horizontalSpan = 3;
        composite.setLayoutData (gridData);
        group.setText (COLORANDFONT_GROUPBOX_LABEL);
        addFontAndColorFields (composite);
        GridLayout layout = new GridLayout ();
        layout.numColumns = 3;
        layout.marginWidth = 0;
        layout.marginHeight = 0;
        layout.horizontalSpacing = 8;
        composite.setLayout (layout);
        return group;
    }

    protected void addFontAndColorFields (Composite composite) {
        defaultFontEditor = new FontFieldEditor (IPreferenceConstants.PREF_DEFAULT_FONT, DEFAULT_FONT_LABEL, composite);
        addField (defaultFontEditor);
        fontColorEditor = new ColorFieldEditor (IPreferenceConstants.PREF_FONT_COLOR, FONT_COLOR_LABEL, composite);
        addField (fontColorEditor);
        fillColorEditor = new ColorFieldEditor (IPreferenceConstants.PREF_FILL_COLOR, FILL_COLOR_LABEL, composite);
        addField (fillColorEditor);
        lineColorEditor = new ColorFieldEditor (IPreferenceConstants.PREF_LINE_COLOR, LINE_COLOR_LABEL, composite);
        addField (lineColorEditor);
        noteFillColorEditor = new ColorFieldEditor (IPreferenceConstants.PREF_NOTE_FILL_COLOR, NOTE_FILL_COLOR_LABEL, composite);
        addField (noteFillColorEditor);
        noteLineColorEditor = new ColorFieldEditor (IPreferenceConstants.PREF_NOTE_LINE_COLOR, NOTE_LINE_COLOR_LABEL, composite);
        addField (noteLineColorEditor);
    }

    public static void initDefaults (IPreferenceStore store) {
        setDefaultFontPreference (store);
        Color fontColor = ColorConstants.black;
        PreferenceConverter.setDefault (store, IPreferenceConstants.PREF_FONT_COLOR, fontColor.getRGB ());
        Color fillColor = DiagramColorConstants.white;
        PreferenceConverter.setDefault (store, IPreferenceConstants.PREF_FILL_COLOR, fillColor.getRGB ());
        Color lineColor = DiagramColorConstants.diagramGray;
        PreferenceConverter.setDefault (store, IPreferenceConstants.PREF_LINE_COLOR, lineColor.getRGB ());
        Color noteFillColor = DiagramColorConstants.diagramLightYellow;
        PreferenceConverter.setDefault (store, IPreferenceConstants.PREF_NOTE_FILL_COLOR, noteFillColor.getRGB ());
        Color noteLineColor = DiagramColorConstants.diagramDarkYellow;
        PreferenceConverter.setDefault (store, IPreferenceConstants.PREF_NOTE_LINE_COLOR, noteLineColor.getRGB ());
    }

    protected void initHelp () {
    }

    protected void performDefaults () {
        setDefaultFontPreference (getPreferenceStore ());
        super.performDefaults ();
    }

    static protected void setDefaultFontPreference (IPreferenceStore store) {
        FontData fontDataArray [] = JFaceResources.getDefaultFont ().getFontData ();
        FontData fontData = fontDataArray [0];
        fontData.setHeight (9);
        PreferenceConverter.setDefault (store, IPreferenceConstants.PREF_DEFAULT_FONT, fontData);
    }

    protected FontFieldEditor getDefaultFontEditor () {
        return defaultFontEditor;
    }

    protected ColorFieldEditor getFillColorEditor () {
        return fillColorEditor;
    }

    protected ColorFieldEditor getLineColorEditor () {
        return lineColorEditor;
    }

}

