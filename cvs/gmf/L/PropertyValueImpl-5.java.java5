package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EDataType;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.PropertyValue;

public class PropertyValueImpl extends NotationEObjectImpl implements PropertyValue {
    protected static final String RAW_VALUE_EDEFAULT = null;
    protected String rawValue = RAW_VALUE_EDEFAULT;
    protected EDataType instanceType;

    protected PropertyValueImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return NotationPackage.Literals.PROPERTY_VALUE;
    }

    public String getRawValue () {
        return rawValue;
    }

    public void setRawValue (String newRawValue) {
        if (getInstanceType () != null) {
            try {
                getObjectFromString (newRawValue);
            } catch (Exception e) {
                throw new IllegalArgumentException ("Value <" + newRawValue + "> cannot be associated with Data type <" + getInstanceType ().toString () + ">: " + e.getMessage ());
            }
        }
        String oldRawValue = rawValue;
        rawValue = newRawValue;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.PROPERTY_VALUE__RAW_VALUE, oldRawValue, rawValue));

    }

    public EDataType getInstanceType () {
        if (instanceType != null && instanceType.eIsProxy ()) {
            InternalEObject oldInstanceType = (InternalEObject) instanceType;
            instanceType = (EDataType) eResolveProxy (oldInstanceType);
            if (instanceType != oldInstanceType) {
                if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, NotationPackage.PROPERTY_VALUE__INSTANCE_TYPE, oldInstanceType, instanceType));

            }
        }
        return instanceType;
    }

    public EDataType basicGetInstanceType () {
        return instanceType;
    }

    public void setInstanceType (EDataType newInstanceType) {
        EDataType oldInstanceType = instanceType;
        instanceType = newInstanceType;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, NotationPackage.PROPERTY_VALUE__INSTANCE_TYPE, oldInstanceType, instanceType));

    }

    public Object getValue () {
        return getObjectFromString (getRawValue ());
    }

    public void setValue (Object newValue) {
        setRawValue (getStringFromObject (newValue));
    }

    public String getStringFromObject (Object objectValue) {
        if (getInstanceType () == null && objectValue instanceof String) return (String) objectValue;

        return EcoreUtil.convertToString (getInstanceType (), objectValue);
    }

    public Object getObjectFromString (String stringValue) {
        if (getInstanceType () == null) return stringValue;

        return EcoreUtil.createFromString (getInstanceType (), stringValue);
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case NotationPackage.PROPERTY_VALUE__RAW_VALUE :
                return getRawValue ();
            case NotationPackage.PROPERTY_VALUE__INSTANCE_TYPE :
                if (resolve) return getInstanceType ();

                return basicGetInstanceType ();
        }
        return eDynamicGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case NotationPackage.PROPERTY_VALUE__RAW_VALUE :
                setRawValue ((String) newValue);
                return;
            case NotationPackage.PROPERTY_VALUE__INSTANCE_TYPE :
                setInstanceType ((EDataType) newValue);
                return;
        }
        eDynamicSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case NotationPackage.PROPERTY_VALUE__RAW_VALUE :
                setRawValue (RAW_VALUE_EDEFAULT);
                return;
            case NotationPackage.PROPERTY_VALUE__INSTANCE_TYPE :
                setInstanceType ((EDataType) null);
                return;
        }
        eDynamicUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case NotationPackage.PROPERTY_VALUE__RAW_VALUE :
                return RAW_VALUE_EDEFAULT == null ? rawValue != null : ! RAW_VALUE_EDEFAULT.equals (rawValue);
            case NotationPackage.PROPERTY_VALUE__INSTANCE_TYPE :
                return instanceType != null;
        }
        return eDynamicIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (rawValue: ");
        result.append (rawValue);
        result.append (')');
        return result.toString ();
    }

}

