package org.eclipse.gmf.runtime.diagram.ui.render.internal.providers;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.common.ui.action.global.GlobalActionId;

import org.eclipse.gmf.runtime.common.ui.services.action.global.IGlobalActionContext;

import org.eclipse.gmf.runtime.common.ui.util.CustomData;

import org.eclipse.gmf.runtime.common.ui.util.ICustomData;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.PasteViewRequest;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;

import org.eclipse.gmf.runtime.diagram.ui.providers.DiagramGlobalActionHandler;

import org.eclipse.gmf.runtime.diagram.ui.render.clipboard.AWTClipboardHelper;

import org.eclipse.gmf.runtime.diagram.ui.render.internal.commands.CopyImageCommand;

public class ImageSupportGlobalActionHandler extends DiagramGlobalActionHandler {

    public ImageSupportGlobalActionHandler () {
        super ();
    }

    public boolean canHandle (IGlobalActionContext cntxt) {
        IWorkbenchPart part = cntxt.getActivePart ();
        if (! (part instanceof IDiagramWorkbenchPart)) {
            return false;
        }
        if (! (cntxt.getSelection () instanceof IStructuredSelection)) {
            return false;
        }
        String actionId = cntxt.getActionId ();
        if (actionId.equals (GlobalActionId.COPY)) {
            return canCopy (cntxt);
        } else if (actionId.equals (GlobalActionId.CUT)) {
            return canCut (cntxt);
        } else if (actionId.equals (GlobalActionId.PASTE)) {
            return canPaste (cntxt);
        }

        return false;
    }

    protected boolean canCopy (IGlobalActionContext cntxt) {
        return AWTClipboardHelper.getInstance ().isImageCopySupported () && super.canCopy (cntxt);
    }

    protected boolean canCut (IGlobalActionContext cntxt) {
        return AWTClipboardHelper.getInstance ().isImageCopySupported () && super.canCut (cntxt);
    }

    protected boolean canPaste (IGlobalActionContext cntxt) {
        return AWTClipboardHelper.getInstance ().isImageCopySupported () && AWTClipboardHelper.getInstance ().hasCustomData ();
    }

    protected ICommand getCopyCommand (IGlobalActionContext cntxt, IDiagramWorkbenchPart diagramPart, final boolean isUndoable) {
        return new CopyImageCommand (cntxt.getLabel (), diagramPart.getDiagram (), getSelectedViews (cntxt.getSelection ()), diagramPart.getDiagramEditPart ()) {

            public boolean isUndoable () {
                return isUndoable;
            }

            public boolean isRedoable () {
                return isUndoable;
            }

            protected CommandResult doUndo () {
                return isUndoable ? newOKCommandResult () : super.doUndo ();
            }

            protected CommandResult doRedo () {
                return isUndoable ? newOKCommandResult () : super.doRedo ();
            }

        }

        ;
    }

    protected PasteViewRequest createPasteViewRequest () {
        CustomData data = AWTClipboardHelper.getInstance ().getCustomData ();
        return new PasteViewRequest (new ICustomData [] {data});
    }

}

