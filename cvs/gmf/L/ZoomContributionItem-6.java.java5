package org.eclipse.gmf.runtime.diagram.ui.internal.actions;

import java.util.ArrayList;

import java.util.Iterator;

import java.util.List;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.Viewport;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.editparts.ZoomListener;

import org.eclipse.gef.editparts.ZoomManager;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;

import org.eclipse.gmf.runtime.diagram.ui.internal.util.IUIConstants;

import org.eclipse.gmf.runtime.diagram.ui.l10n.Images;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;

import org.eclipse.gmf.runtime.diagram.ui.internal.util.IUIConstants;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;

import org.eclipse.jface.resource.ImageDescriptor;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.widgets.Combo;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Event;

import org.eclipse.swt.widgets.Listener;

import org.eclipse.swt.widgets.Menu;

import org.eclipse.swt.widgets.MenuItem;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchPart;

public class ZoomContributionItem extends CustomContributionItem implements ZoomListener, Listener {
    private static final String ZOOM_IN = DiagramResourceManager.getI18NString ("ZoomAction.ZoomCombo.ZoomIn");
    private static final String ZOOM_OUT = DiagramResourceManager.getI18NString ("ZoomAction.ZoomCombo.ZoomOut");
    private static final String ZOOM_100 = DiagramResourceManager.getI18NString ("ZoomAction.Zoom100");
    private static final String ZOOM_FIT = DiagramResourceManager.getI18NString ("ZoomAction.ZoomCombo.ZoomToFit");
    private static final String ZOOM_WIDTH = DiagramResourceManager.getI18NString ("ZoomAction.ZoomCombo.ZoomToWidth");
    private static final String ZOOM_HEIGHT = DiagramResourceManager.getI18NString ("ZoomAction.ZoomCombo.ZoomToHeight");
    private static final String ZOOM_SELECTION = DiagramResourceManager.getI18NString ("ZoomAction.ZoomCombo.ZoomToSelection");
    private static final String ZOOM_IN_ACTION = DiagramResourceManager.getI18NString ("ZoomAction.ZoomIn");
    private static final String ZOOM_OUT_ACTION = DiagramResourceManager.getI18NString ("ZoomAction.ZoomOut");
    private static final String ZOOM_100_ACTION = DiagramResourceManager.getI18NString ("ZoomAction.Zoom100");
    private static final String ZOOM_FIT_ACTION = DiagramResourceManager.getI18NString ("ZoomAction.ZoomToFit");
    private static final String ZOOM_WIDTH_ACTION = DiagramResourceManager.getI18NString ("ZoomAction.ZoomToWidth");
    private static final String ZOOM_HEIGHT_ACTION = DiagramResourceManager.getI18NString ("ZoomAction.ZoomToHeight");
    private static final String ZOOM_SELECTION_ACTION = DiagramResourceManager.getI18NString ("ZoomAction.ZoomToSelection");
    private ZoomManager zoomManager;
    private List zoomImages = new ArrayList ();

    public ZoomContributionItem (IWorkbenchPage workbenchPage) {
        super (workbenchPage, ActionIds.CUSTOM_ZOOM);
        setLabel (DiagramResourceManager.getI18NString ("ZoomActionMenu.ZoomLabel"));
    }

    protected Request createTargetRequest () {
        return null;
    }

    protected void setWorkbenchPart (IWorkbenchPart workbenchPart) {
        super.setWorkbenchPart (workbenchPart);
        if (workbenchPart != null) setZoomManager ((ZoomManager) workbenchPart.getAdapter (ZoomManager.class));

    }

    protected boolean calculateEnabled () {
        return getZoomManager () != null;
    }

    public ZoomManager getZoomManager () {
        return zoomManager;
    }

    public void setZoomManager (ZoomManager zm) {
        if (zoomManager == zm) return;

        if (zoomManager != null) zoomManager.removeZoomListener (this);

        zoomManager = zm;
        update ();
        if (zoomManager != null) zoomManager.addZoomListener (this);

    }

    public void dispose () {
        if (getZoomManager () != null) {
            getZoomManager ().removeZoomListener (this);
            zoomManager = null;
        }
        Iterator iter = zoomImages.iterator ();
        while (iter.hasNext ()) ((Image) iter.next ()).dispose ();

        zoomImages.clear ();
        super.dispose ();
    }

    public void zoomChanged (double zoom) {
        update ();
    }

    protected Control createControl (Composite parent) {
        Combo combo = new Combo (parent, SWT.DROP_DOWN);
        combo.addListener (SWT.Selection, this);
        combo.addListener (SWT.KeyDown, this);
        combo.setItems (getZoomLevelsAsText ());
        combo.setVisibleItemCount (IUIConstants.DEFAULT_DROP_DOWN_SIZE);
        return combo;
    }

    protected MenuItem createMenuItem (Menu parent, int index) {
        MenuItem mi = index >= 0 ? new MenuItem (parent, SWT.CASCADE, index) : new MenuItem (parent, SWT.CASCADE);
        createMenu (mi);
        mi.setImage (DiagramResourceManager.getInstance ().getImage (DiagramResourceManager.IMAGE_ZOOM_IN));
        return mi;
    }

    private void createMenu (MenuItem mi) {
        Menu menu = new Menu (mi.getParent ());
        createMenuItem (menu, ZOOM_IN_ACTION, ZOOM_IN, DiagramResourceManager.getInstance ().getImageDescriptor (DiagramResourceManager.IMAGE_ZOOM_IN));
        createMenuItem (menu, ZOOM_OUT_ACTION, ZOOM_OUT, DiagramResourceManager.getInstance ().getImageDescriptor (DiagramResourceManager.IMAGE_ZOOM_OUT));
        createMenuItem (menu, ZOOM_100_ACTION, ZOOM_100, DiagramResourceManager.getInstance ().getImageDescriptor (DiagramResourceManager.IMAGE_ZOOM_100));
        createMenuItem (menu, ZOOM_FIT_ACTION, ZOOM_FIT, DiagramResourceManager.getInstance ().getImageDescriptor (DiagramResourceManager.IMAGE_ZOOM_TOFIT));
        createMenuItem (menu, ZOOM_WIDTH_ACTION, ZOOM_WIDTH, DiagramResourceManager.getInstance ().getImageDescriptor (DiagramResourceManager.IMAGE_ZOOM_TOFIT));
        createMenuItem (menu, ZOOM_HEIGHT_ACTION, ZOOM_HEIGHT, DiagramResourceManager.getInstance ().getImageDescriptor (DiagramResourceManager.IMAGE_ZOOM_TOFIT));
        createMenuItem (menu, ZOOM_SELECTION_ACTION, ZOOM_SELECTION, DiagramResourceManager.getInstance ().getImageDescriptor (DiagramResourceManager.IMAGE_ZOOM_TOFIT));
        mi.setMenu (menu);
    }

    private MenuItem createMenuItem (Menu menu, String text, String data, ImageDescriptor imageDescriptor) {
        MenuItem mi = new MenuItem (menu, SWT.PUSH);
        mi.setText (text);
        mi.setData (data);
        if (imageDescriptor != null) mi.setImage (createImage (imageDescriptor));

        mi.addListener (SWT.Selection, this);
        return mi;
    }

    public String [] getZoomLevelsAsText () {
        int nNumericZoomLevels = (getZoomManager () != null) ? getZoomManager ().getZoomLevels ().length : 0;
        String [] allZoomLevels = new String [nNumericZoomLevels + 6];
        allZoomLevels [0] = ZOOM_IN;
        allZoomLevels [1] = ZOOM_OUT;
        allZoomLevels [2] = ZOOM_FIT;
        allZoomLevels [3] = ZOOM_WIDTH;
        allZoomLevels [4] = ZOOM_HEIGHT;
        allZoomLevels [5] = ZOOM_SELECTION;
        if (getZoomManager () != null) {
            String [] numericZoomLevels = getZoomManager ().getZoomLevelsAsText ();
            for (int i = 0;
            i < getZoomManager ().getZoomLevels ().length; i ++) {
                allZoomLevels [i + 6] = numericZoomLevels [i];
            }
        }
        return allZoomLevels;
    }

    protected void refreshItem () {
        if (getZoomManager () != null) {
            if (getControl () != null) {
                Combo combo = (Combo) getControl ();
                combo.setItems (getZoomLevelsAsText ());
                String zoom = getZoomManager ().getZoomAsText ();
                int index = combo.indexOf (zoom);
                if (index != - 1) combo.select (index);
                else combo.setText (zoom);

            }
        }
        super.refreshItem ();
    }

    public void handleEvent (Event event) {
        if (event.type == SWT.KeyDown && event.character != '\r') return;

        if (getControl () != null) setZoomAsText (((Combo) getControl ()).getText ());
        else setZoomAsText ((String) event.widget.getData ());

    }

    public void setZoomAsText (String zoomText) {
        if (ZOOM_IN.equals (zoomText)) getZoomManager ().zoomIn ();
        else if (ZOOM_OUT.equals (zoomText)) getZoomManager ().zoomOut ();
        else if (ZOOM_100.equals (zoomText)) getZoomManager ().setZoom (1);
        else if (ZOOM_FIT.equals (zoomText)) zoomToFit (true, true, false);
        else if (ZOOM_WIDTH.equals (zoomText)) zoomToFit (true, false, false);
        else if (ZOOM_HEIGHT.equals (zoomText)) zoomToFit (false, true, false);
        else if (ZOOM_SELECTION.equals (zoomText)) zoomToFit (true, true, true);
        else getZoomManager ().setZoomAsText (zoomText);

    }

    protected void zoomToFit (boolean onWidth, boolean onHeight, boolean selectionOnly) {
        zoomToFit (onWidth, onHeight, selectionOnly, false);
    }

    protected void zoomToFit (boolean onWidth, boolean onHeight, boolean selectionOnly, boolean zoomOutOnly) {
        Iterator editParts;
        if (selectionOnly) {
            editParts = getStructuredSelection ().iterator ();
        } else {
            List allEditParts = getDiagramEditPart ().getConnections ();
            allEditParts.addAll (getDiagramEditPart ().getChildrenAffectingZoom ());
            editParts = allEditParts.iterator ();
        }
        Rectangle rectangle = null;
        while (editParts.hasNext ()) {
            IFigure f = ((GraphicalEditPart) editParts.next ()).getFigure ();
            rectangle = rectangle == null ? f.getBounds ().getCopy () : rectangle.getUnion (f.getBounds ());
        }
        if (rectangle == null) {
            return;
        }
        MapModeUtil.getMapMode (getDiagramEditPart ().getFigure ()).LPtoDP (rectangle);
        Viewport viewport = getZoomManager ().getViewport ();
        float xratio = viewport.getHorizontalRangeModel ().getExtent () / (float) rectangle.width;
        float yratio = viewport.getVerticalRangeModel ().getExtent () / (float) rectangle.height;
        double zoom = 1.0;
        if (onHeight && onWidth) {
            zoom = (yratio < xratio) ? Math.floor (yratio * 100) : Math.floor (xratio * 100);
        } else if (onWidth) {
            zoom = Math.round (xratio * 100);
        } else if (onHeight) {
            zoom = Math.round (yratio * 100);
        }

        if (zoomOutOnly && zoom >= 100) {
            zoom = 100;
        }
        zoom = Math.min ((int) (zoomManager.getMaxZoom () * 100), Math.max ((int) (zoomManager.getMinZoom () * 100), zoom));
        int viewX = Math.round (rectangle.getTopLeft ().x * (float) zoom / 100.0f);
        int viewY = Math.round (rectangle.getTopLeft ().y * (float) zoom / 100.0f);
        getZoomManager ().setZoom (zoom / 100);
        viewport.setHorizontalLocation (viewX);
        viewport.setVerticalLocation (viewY);
    }

    private Image createImage (ImageDescriptor descriptor) {
        int index = zoomImages.indexOf (descriptor);
        if (index != - 1) return (Image) zoomImages.get (index);

        Image image = descriptor.createImage ();
        zoomImages.add (image);
        return image;
    }

}

