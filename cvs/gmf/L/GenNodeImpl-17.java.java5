package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.CompartmentPlacementKind;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;

import org.eclipse.gmf.codegen.gmfgen.GenChildNode;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.GenNode;

import org.eclipse.gmf.codegen.gmfgen.GenNodeLabel;

import org.eclipse.gmf.codegen.gmfgen.TypeModelFacet;

import org.eclipse.gmf.codegen.gmfgen.Viewmap;

public class GenNodeImpl extends GenCommonBaseImpl implements GenNode {
    protected TypeModelFacet modelFacet = null;
    protected EList labels = null;
    protected EList childContainers = null;
    protected EList childNodes = null;
    protected static final CompartmentPlacementKind CHILD_CONTAINERS_PLACEMENT_EDEFAULT = CompartmentPlacementKind.TOOLBAR_LITERAL;
    protected CompartmentPlacementKind childContainersPlacement = CHILD_CONTAINERS_PLACEMENT_EDEFAULT;

    protected GenNodeImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenNode ();
    }

    public GenDiagram getDiagram () {
        if (eContainerFeatureID != GMFGenPackage.GEN_NODE__DIAGRAM) return null;

        return (GenDiagram) eContainer;
    }

    public GenClass getDomainMetaClass () {
        return getModelFacet ().getMetaClass ();
    }

    public EList getLabels () {
        if (labels == null) {
            labels = new EObjectContainmentWithInverseEList (GenNodeLabel.class, this, GMFGenPackage.GEN_NODE__LABELS, GMFGenPackage.GEN_NODE_LABEL__NODE);
        }
        return labels;
    }

    public EList getChildContainers () {
        if (childContainers == null) {
            childContainers = new EObjectContainmentWithInverseEList (GenChildContainer.class, this, GMFGenPackage.GEN_NODE__CHILD_CONTAINERS, GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE);
        }
        return childContainers;
    }

    public EList getChildNodes () {
        if (childNodes == null) {
            childNodes = new EObjectContainmentWithInverseEList (GenChildNode.class, this, GMFGenPackage.GEN_NODE__CHILD_NODES, GMFGenPackage.GEN_CHILD_NODE__PARENT_NODE);
        }
        return childNodes;
    }

    public CompartmentPlacementKind getChildContainersPlacement () {
        return childContainersPlacement;
    }

    public void setChildContainersPlacement (CompartmentPlacementKind newChildContainersPlacement) {
        CompartmentPlacementKind oldChildContainersPlacement = childContainersPlacement;
        childContainersPlacement = newChildContainersPlacement == null ? CHILD_CONTAINERS_PLACEMENT_EDEFAULT : newChildContainersPlacement;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT, oldChildContainersPlacement, childContainersPlacement));

    }

    public TypeModelFacet getModelFacet () {
        return modelFacet;
    }

    public NotificationChain basicSetModelFacet (TypeModelFacet newModelFacet, NotificationChain msgs) {
        TypeModelFacet oldModelFacet = modelFacet;
        modelFacet = newModelFacet;
        if (eNotificationRequired ()) {
            ENotificationImpl notification = new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NODE__MODEL_FACET, oldModelFacet, newModelFacet);
            if (msgs == null) msgs = notification;
            else msgs.add (notification);

        }
        return msgs;
    }

    public void setModelFacet (TypeModelFacet newModelFacet) {
        if (newModelFacet != modelFacet) {
            NotificationChain msgs = null;
            if (modelFacet != null) msgs = ((InternalEObject) modelFacet).eInverseRemove (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_NODE__MODEL_FACET, null, msgs);

            if (newModelFacet != null) msgs = ((InternalEObject) newModelFacet).eInverseAdd (this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_NODE__MODEL_FACET, null, msgs);

            msgs = basicSetModelFacet (newModelFacet, msgs);
            if (msgs != null) msgs.dispatch ();

        } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_NODE__MODEL_FACET, newModelFacet, newModelFacet));

    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFGenPackage.GEN_NODE__DIAGRAM :
                    if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);

                    return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_NODE__DIAGRAM, msgs);
                case GMFGenPackage.GEN_NODE__LABELS :
                    return ((InternalEList) getLabels ()).basicAdd (otherEnd, msgs);
                case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS :
                    return ((InternalEList) getChildContainers ()).basicAdd (otherEnd, msgs);
                case GMFGenPackage.GEN_NODE__CHILD_NODES :
                    return ((InternalEList) getChildNodes ()).basicAdd (otherEnd, msgs);
                default :
                    return eDynamicInverseAdd (otherEnd, featureID, baseClass, msgs);
            }
        }
        if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);

        return eBasicSetContainer (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFGenPackage.GEN_NODE__VIEWMAP :
                    return basicSetViewmap (null, msgs);
                case GMFGenPackage.GEN_NODE__DIAGRAM :
                    return eBasicSetContainer (null, GMFGenPackage.GEN_NODE__DIAGRAM, msgs);
                case GMFGenPackage.GEN_NODE__MODEL_FACET :
                    return basicSetModelFacet (null, msgs);
                case GMFGenPackage.GEN_NODE__LABELS :
                    return ((InternalEList) getLabels ()).basicRemove (otherEnd, msgs);
                case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS :
                    return ((InternalEList) getChildContainers ()).basicRemove (otherEnd, msgs);
                case GMFGenPackage.GEN_NODE__CHILD_NODES :
                    return ((InternalEList) getChildNodes ()).basicRemove (otherEnd, msgs);
                default :
                    return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
            }
        }
        return eBasicSetContainer (null, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainer (NotificationChain msgs) {
        if (eContainerFeatureID >= 0) {
            switch (eContainerFeatureID) {
                case GMFGenPackage.GEN_NODE__DIAGRAM :
                    return eContainer.eInverseRemove (this, GMFGenPackage.GEN_DIAGRAM__NODES, GenDiagram.class, msgs);
                default :
                    return eDynamicBasicRemoveFromContainer (msgs);
            }
        }
        return eContainer.eInverseRemove (this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_NODE__DIAGRAM_RUN_TIME_CLASS :
                if (resolve) return getDiagramRunTimeClass ();

                return basicGetDiagramRunTimeClass ();
            case GMFGenPackage.GEN_NODE__VISUAL_ID :
                return new Integer (getVisualID ());
            case GMFGenPackage.GEN_NODE__EDIT_PART_CLASS_NAME :
                return getEditPartClassName ();
            case GMFGenPackage.GEN_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME :
                return getNotationViewFactoryClassName ();
            case GMFGenPackage.GEN_NODE__VIEWMAP :
                return getViewmap ();
            case GMFGenPackage.GEN_NODE__DIAGRAM :
                return getDiagram ();
            case GMFGenPackage.GEN_NODE__MODEL_FACET :
                return getModelFacet ();
            case GMFGenPackage.GEN_NODE__LABELS :
                return getLabels ();
            case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS :
                return getChildContainers ();
            case GMFGenPackage.GEN_NODE__CHILD_NODES :
                return getChildNodes ();
            case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT :
                return getChildContainersPlacement ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_NODE__DIAGRAM_RUN_TIME_CLASS :
                setDiagramRunTimeClass ((GenClass) newValue);
                return;
            case GMFGenPackage.GEN_NODE__VISUAL_ID :
                setVisualID (((Integer) newValue).intValue ());
                return;
            case GMFGenPackage.GEN_NODE__EDIT_PART_CLASS_NAME :
                setEditPartClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME :
                setNotationViewFactoryClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_NODE__VIEWMAP :
                setViewmap ((Viewmap) newValue);
                return;
            case GMFGenPackage.GEN_NODE__MODEL_FACET :
                setModelFacet ((TypeModelFacet) newValue);
                return;
            case GMFGenPackage.GEN_NODE__LABELS :
                getLabels ().clear ();
                getLabels ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS :
                getChildContainers ().clear ();
                getChildContainers ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.GEN_NODE__CHILD_NODES :
                getChildNodes ().clear ();
                getChildNodes ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT :
                setChildContainersPlacement ((CompartmentPlacementKind) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_NODE__DIAGRAM_RUN_TIME_CLASS :
                setDiagramRunTimeClass ((GenClass) null);
                return;
            case GMFGenPackage.GEN_NODE__VISUAL_ID :
                setVisualID (VISUAL_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NODE__EDIT_PART_CLASS_NAME :
                setEditPartClassName (EDIT_PART_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME :
                setNotationViewFactoryClassName (NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_NODE__VIEWMAP :
                setViewmap ((Viewmap) null);
                return;
            case GMFGenPackage.GEN_NODE__MODEL_FACET :
                setModelFacet ((TypeModelFacet) null);
                return;
            case GMFGenPackage.GEN_NODE__LABELS :
                getLabels ().clear ();
                return;
            case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS :
                getChildContainers ().clear ();
                return;
            case GMFGenPackage.GEN_NODE__CHILD_NODES :
                getChildNodes ().clear ();
                return;
            case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT :
                setChildContainersPlacement (CHILD_CONTAINERS_PLACEMENT_EDEFAULT);
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_NODE__DIAGRAM_RUN_TIME_CLASS :
                return diagramRunTimeClass != null;
            case GMFGenPackage.GEN_NODE__VISUAL_ID :
                return visualID != VISUAL_ID_EDEFAULT;
            case GMFGenPackage.GEN_NODE__EDIT_PART_CLASS_NAME :
                return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : ! EDIT_PART_CLASS_NAME_EDEFAULT.equals (editPartClassName);
            case GMFGenPackage.GEN_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME :
                return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : ! NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals (notationViewFactoryClassName);
            case GMFGenPackage.GEN_NODE__VIEWMAP :
                return viewmap != null;
            case GMFGenPackage.GEN_NODE__DIAGRAM :
                return getDiagram () != null;
            case GMFGenPackage.GEN_NODE__MODEL_FACET :
                return modelFacet != null;
            case GMFGenPackage.GEN_NODE__LABELS :
                return labels != null && ! labels.isEmpty ();
            case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS :
                return childContainers != null && ! childContainers.isEmpty ();
            case GMFGenPackage.GEN_NODE__CHILD_NODES :
                return childNodes != null && ! childNodes.isEmpty ();
            case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT :
                return childContainersPlacement != CHILD_CONTAINERS_PLACEMENT_EDEFAULT;
        }
        return eDynamicIsSet (eFeature);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (childContainersPlacement: ");
        result.append (childContainersPlacement);
        result.append (')');
        return result.toString ();
    }

    public String getClassNamePrefix () {
        return getDomainMetaClass () == null ? "GenNode$" + hashCode () : getDomainMetaClass ().getName ();
    }

    public String getClassNameSuffux () {
        return "Node";
    }

    public String getUniqueIdentifier () {
        return getDomainMetaClass ().getInterfaceName () + "_" + getVisualID ();
    }

}

