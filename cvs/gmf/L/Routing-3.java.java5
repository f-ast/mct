package org.eclipse.gmf.runtime.notation;

import java.util.Arrays;

import java.util.Collections;

import java.util.List;

import org.eclipse.emf.common.util.AbstractEnumerator;

public final class Routing extends AbstractEnumerator {
    public static final int MANUAL = 0;
    public static final int RECTILINEAR = 1;
    public static final int TREE = 2;
    public static final Routing MANUAL_LITERAL = new Routing (MANUAL, "Manual");
    public static final Routing RECTILINEAR_LITERAL = new Routing (RECTILINEAR, "Rectilinear");
    public static final Routing TREE_LITERAL = new Routing (TREE, "Tree");
    private static final Routing [] VALUES_ARRAY = new Routing [] {MANUAL_LITERAL, RECTILINEAR_LITERAL, TREE_LITERAL,};
    public static final List VALUES = Collections.unmodifiableList (Arrays.asList (VALUES_ARRAY));

    public static Routing get (String name) {
        for (int i = 0;
        i < VALUES_ARRAY.length; ++ i) {
            Routing result = VALUES_ARRAY [i];
            if (result.toString ().equals (name)) {
                return result;
            }
        }
        return null;
    }

    public static Routing get (int value) {
        switch (value) {
            case MANUAL :
                return MANUAL_LITERAL;
            case RECTILINEAR :
                return RECTILINEAR_LITERAL;
            case TREE :
                return TREE_LITERAL;
        }
        return null;
    }

    private Routing (int value, String name) {
        super (value, name);
    }

}

