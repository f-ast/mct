package org.eclipse.gmf.runtime.diagram.ui.properties.sections;

import org.eclipse.core.commands.operations.OperationHistoryFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.domain.IEditingDomainProvider;

import org.eclipse.emf.transaction.NotificationFilter;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gmf.runtime.emf.ui.properties.sections.UndoableModelPropertySheetEntry;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.swt.SWT;

import org.eclipse.swt.custom.CLabel;

import org.eclipse.swt.layout.FormAttachment;

import org.eclipse.swt.layout.FormData;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.ui.IActionBars;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.ui.views.properties.IPropertySourceProvider;

import org.eclipse.ui.views.properties.PropertySheetPage;

import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;

public class AdvancedPropertySection extends AbstractModelerPropertySection {
    protected PropertySheetPage page;

    public void createControls (final Composite parent, TabbedPropertySheetPage aTabbedPropertySheetPage) {
        super.createControls (parent, aTabbedPropertySheetPage);
        Composite composite = getWidgetFactory ().createFlatFormComposite (parent);
        FormData data = null;
        String tableLabelStr = getTableLabel ();
        CLabel tableLabel = null;
        if (tableLabelStr != null && tableLabelStr.length () > 0) {
            tableLabel = getWidgetFactory ().createCLabel (composite, tableLabelStr);
            data = new FormData ();
            data.left = new FormAttachment (0, 0);
            data.top = new FormAttachment (0, 0);
            tableLabel.setLayoutData (data);
        }
        page = new PropertySheetPage ();
        UndoableModelPropertySheetEntry root = new UndoableModelPropertySheetEntry (OperationHistoryFactory.getOperationHistory ());
        root.setPropertySourceProvider (getPropertySourceProvider ());
        page.setRootEntry (root);
        page.createControl (composite);
        data = new FormData ();
        data.left = new FormAttachment (0, 0);
        data.right = new FormAttachment (100, 0);
        if (tableLabel == null) {
            data.top = new FormAttachment (0, 0);
        } else {
            data.top = new FormAttachment (tableLabel, 0, SWT.BOTTOM);
        }
        data.bottom = new FormAttachment (100, 0);
        data.height = 100;
        data.width = 100;
        page.getControl ().setLayoutData (data);
        setActionBars (aTabbedPropertySheetPage.getSite ().getActionBars ());
    }

    public void setActionBars (IActionBars actionBars) {
        actionBars.getMenuManager ().removeAll ();
        actionBars.getToolBarManager ().removeAll ();
        actionBars.getStatusLineManager ().removeAll ();
        page.makeContributions (actionBars.getMenuManager (), actionBars.getToolBarManager (), actionBars.getStatusLineManager ());
        actionBars.getToolBarManager ().update (true);
    }

    protected IPropertySourceProvider getPropertySourceProvider () {
        return propertiesProvider;
    }

    protected String getTableLabel () {
        return null;
    }

    public void setInput (IWorkbenchPart part, ISelection selection) {
        IEditingDomainProvider provider = (IEditingDomainProvider) part.getAdapter (IEditingDomainProvider.class);
        if (provider != null) {
            EditingDomain theEditingDomain = provider.getEditingDomain ();
            if (theEditingDomain instanceof TransactionalEditingDomain) {
                setEditingDomain ((TransactionalEditingDomain) theEditingDomain);
            }
        }
        page.selectionChanged (part, selection);
    }

    public void dispose () {
        super.dispose ();
        if (page != null) {
            page.dispose ();
            page = null;
        }
    }

    public void refresh () {
        page.refresh ();
    }

    public boolean shouldUseExtraSpace () {
        return true;
    }

    public void update (final Notification notification, EObject element) {
        if (! isDisposed ()) {
            postUpdateRequest (new Runnable () {

                public void run () {
                    if (! isDisposed () && ! isNotifierDeleted (notification)) refresh ();

                }

            }

            );
        }
    }

    public NotificationFilter getFilter () {
        return NotificationFilter.createEventTypeFilter (Notification.SET).or (NotificationFilter.createEventTypeFilter (Notification.UNSET)).or (NotificationFilter.createEventTypeFilter (Notification.ADD)).or (NotificationFilter.createEventTypeFilter (Notification.ADD_MANY)).or (NotificationFilter.createEventTypeFilter (Notification.REMOVE)).or (NotificationFilter.createEventTypeFilter (Notification.REMOVE_MANY)).and (NotificationFilter.createNotifierTypeFilter (EObject.class));
    }

    protected boolean addToEObjectList (Object object) {
        return true;
    }

}

