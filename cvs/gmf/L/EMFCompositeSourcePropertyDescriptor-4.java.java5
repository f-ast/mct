package org.eclipse.gmf.runtime.emf.ui.properties.descriptors;

import java.util.ArrayList;

import java.util.Arrays;

import java.util.Collection;

import java.util.Iterator;

import java.util.List;

import org.eclipse.emf.common.ui.celleditor.ExtendedComboBoxCellEditor;

import org.eclipse.emf.ecore.EClassifier;

import org.eclipse.emf.ecore.EDataType;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.EcorePackage;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry;

import org.eclipse.emf.edit.ui.provider.PropertyDescriptor;

import org.eclipse.jface.viewers.CellEditor;

import org.eclipse.jface.viewers.ICellEditorValidator;

import org.eclipse.jface.viewers.ILabelProvider;

import org.eclipse.jface.viewers.LabelProvider;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.ui.views.properties.IPropertyDescriptor;

import org.eclipse.gmf.runtime.common.ui.services.properties.descriptors.ICompositeSourcePropertyDescriptor;

import org.eclipse.gmf.runtime.emf.core.internal.util.MSLAdapterFactoryManager;

import org.eclipse.gmf.runtime.emf.ui.properties.internal.l10n.EMFPropertiesResourceManager;

public class EMFCompositeSourcePropertyDescriptor extends PropertyDescriptor implements ICompositeSourcePropertyDescriptor {
    public static final String UNDO_PROPERTY = EMFPropertiesResourceManager.getInstance ().getString ("EMFCompositeSourcePropertyDescriptor.undoProperty.commandName");
    protected String category = null;
    protected String [] filterFlags;
    protected boolean readOnly = false;
    protected CellEditor propertyEditor = null;
    protected ICellEditorValidator validator;

    public static ILabelProvider createLabelProvider (IItemPropertyDescriptor itemPropertyDescriptor) {
        final IItemLabelProvider itemLabelProvider = itemPropertyDescriptor.getLabelProvider (null);
        return new LabelProvider () {

            public String getText (Object object) {
                return itemLabelProvider.getText (object);
            }

            public Image getImage (Object object) {
                return ExtendedImageRegistry.getInstance ().getImage (itemLabelProvider.getImage (object));
            }

        }

        ;
    }

    public EMFCompositeSourcePropertyDescriptor (Object object, IItemPropertyDescriptor itemPropertyDescriptor) {
        super (object, itemPropertyDescriptor);
        filterFlags = itemPropertyDescriptor.getFilterFlags (object);
        filterFlags = filterFlags == null ? new String [0] : filterFlags;
    }

    public EMFCompositeSourcePropertyDescriptor (Object object, IItemPropertyDescriptor itemPropertyDescriptor, String category) {
        this (object, itemPropertyDescriptor);
        setCategory (category);
    }

    public void setCategory (String category) {
        this.category = category;
    }

    public String getCategory () {
        String aCategory = super.getCategory ();
        return aCategory == null ? this.category : aCategory;
    }

    public String [] getFilterFlags () {
        return filterFlags;
    }

    public void addFilterFlag (String flag) {
        if (! Arrays.asList (filterFlags).contains (flag)) {
            String [] flags = new String [filterFlags.length + 1];
            System.arraycopy (filterFlags, 0, flags, 0, filterFlags.length);
            flags [filterFlags.length] = flag;
            filterFlags = flags;
        }
    }

    public CellEditor createPropertyEditor (Composite composite) {
        if (isReadOnly ()) return null;

        if (getPropertyEditor () != null) return getPropertyEditor ();

        return doCreateEditor (composite);
    }

    protected CellEditor doCreateEditor (Composite composite) {
        CellEditor result = null;
        Object genericFeature = getFeature ();
        if (genericFeature instanceof EReference []) {
            result = createComboBoxCellEditor (composite);
        } else if (genericFeature instanceof EStructuralFeature) {
            final EStructuralFeature feature = (EStructuralFeature) genericFeature;
            final EClassifier eType = feature.getEType ();
            final Collection choiceOfValues = getChoiceOfValues ();
            if (! choiceOfValues.isEmpty ()) {
                if (feature.isMany ()) {
                    boolean valid = true;
                    for (Iterator i = choiceOfValues.iterator ();
                    i.hasNext ();) {
                        Object choice = i.next ();
                        if (! eType.isInstance (choice)) {
                            valid = false;
                            break;
                        }
                    }
                    if (valid) result = createComboBoxCellEditor (composite);

                }
                if (result == null) result = createComboBoxCellEditor (composite);

            } else {
                if (eType instanceof EDataType) {
                    EDataType eDataType = (EDataType) eType;
                    if (eDataType.isSerializable ()) {
                        if (feature.isMany ()) {
                            result = createComboBoxCellEditor (composite);
                        } else if (eDataType == EcorePackage.eINSTANCE.getEBoolean () || eDataType == EcorePackage.eINSTANCE.getEBooleanObject () || eDataType.getInstanceClass () == EcorePackage.eINSTANCE.getEBoolean ().getInstanceClass ()) {
                            result = createBooleanCellEditor (composite);
                        } else {
                            result = createDataTypeCellEditor (composite);
                        }

                    }
                }
            }
        }

        return result == null ? super.createPropertyEditor (composite) : result;
    }

    public boolean isReadOnly () {
        return (! itemPropertyDescriptor.canSetProperty (object)) || readOnly;
    }

    public void setReadOnly (boolean value) {
        this.readOnly = value;
    }

    public boolean isCompatibleWith (IPropertyDescriptor anotherProperty) {
        if (this == anotherProperty) return true;

        if (! (anotherProperty instanceof EMFCompositeSourcePropertyDescriptor)) return false;

        EMFCompositeSourcePropertyDescriptor descriptor = (EMFCompositeSourcePropertyDescriptor) anotherProperty;
        if (getFeature () == descriptor.getFeature ()) return (getCategory ().equals (descriptor.getCategory ()));

        return false;
    }

    protected Object getObject () {
        return object;
    }

    public IItemPropertyDescriptor getItemDescriptor () {
        return itemPropertyDescriptor;
    }

    public Object getFeature () {
        return itemPropertyDescriptor.getFeature (getObject ());
    }

    protected CellEditor getPropertyEditor () {
        return propertyEditor;
    }

    public void setPropertyEditor (CellEditor propertyEditor) {
        this.propertyEditor = propertyEditor;
    }

    public ICellEditorValidator getValidator () {
        return validator;
    }

    public void setValidator (ICellEditorValidator validator) {
        this.validator = validator;
    }

    protected CellEditor createComboBoxCellEditor (Composite composite) {
        return new ExtendedComboBoxCellEditor (composite, new ArrayList (getChoiceOfValues ()), getLabelProvider (), true);
    }

    protected CellEditor createBooleanCellEditor (Composite composite) {
        return new ExtendedComboBoxCellEditor (composite, Arrays.asList (new Object [] {Boolean.FALSE, Boolean.TRUE}), getLabelProvider (), true);
    }

    protected CellEditor createDataTypeCellEditor (Composite composite) {
        Object genericFeature = itemPropertyDescriptor.getFeature (object);
        if (genericFeature instanceof EStructuralFeature) {
            EClassifier eType = ((EStructuralFeature) genericFeature).getEType ();
            if (eType instanceof EDataType) {
                return new EDataTypeCellEditor ((EDataType) eType, composite) {

                    protected void focusLost () {
                        if (isActivated ()) {
                            deactivate ();
                        }
                    }

                }

                ;
            }
        }
        return null;
    }

    public Object getPropertyValue () {
        return getEditableValue ();
    }

    protected Object getEditableValue () {
        Object aValue = getItemDescriptor ().getPropertyValue (getObject ());
        IItemPropertySource itemSource = getPropertySource (aValue);
        if (itemSource != null) {
            aValue = itemSource.getEditableValue (aValue);
        }
        return aValue;
    }

    public void setPropertyValue (final Object value) {
        Object oldValue = getEditableValue ();
        if ((oldValue != null && oldValue.equals (value)) || (oldValue == null && value == null)) return;

        getItemDescriptor ().setPropertyValue (getObject (), value);
    }

    public void resetPropertyValue () {
        getItemDescriptor ().resetPropertyValue (getObject ());
    }

    protected IItemPropertySource getPropertySource (Object value) {
        return (IItemPropertySource) MSLAdapterFactoryManager.getAdapterFactory ().adapt (value, IItemPropertySource.class);
    }

    public Object getId () {
        return getFeature ();
    }

    public List getChoiceOfValues () {
        Collection types = itemPropertyDescriptor.getChoiceOfValues (getObject ());
        return types == null ? new ArrayList () : new ArrayList (types);
    }

    public void resetPropertyValue (Object value) {
        getItemDescriptor ().resetPropertyValue (getObject ());
    }

}

