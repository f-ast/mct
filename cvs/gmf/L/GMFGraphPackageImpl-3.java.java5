package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.ecore.EAttribute;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EEnum;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.eclipse.gmf.gmfgraph.Canvas;

import org.eclipse.gmf.gmfgraph.Child;

import org.eclipse.gmf.gmfgraph.ColorStyle;

import org.eclipse.gmf.gmfgraph.Compartment;

import org.eclipse.gmf.gmfgraph.Connection;

import org.eclipse.gmf.gmfgraph.ConnectionFigure;

import org.eclipse.gmf.gmfgraph.CustomConnection;

import org.eclipse.gmf.gmfgraph.CustomDecoration;

import org.eclipse.gmf.gmfgraph.CustomFigure;

import org.eclipse.gmf.gmfgraph.DecorationFigure;

import org.eclipse.gmf.gmfgraph.DiagramElement;

import org.eclipse.gmf.gmfgraph.Direction;

import org.eclipse.gmf.gmfgraph.Ellipse;

import org.eclipse.gmf.gmfgraph.Figure;

import org.eclipse.gmf.gmfgraph.FigureGallery;

import org.eclipse.gmf.gmfgraph.FigureMarker;

import org.eclipse.gmf.gmfgraph.FigureRef;

import org.eclipse.gmf.gmfgraph.FontStyle;

import org.eclipse.gmf.gmfgraph.GMFGraphFactory;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.gmfgraph.GeneralFacet;

import org.eclipse.gmf.gmfgraph.GradientFacet;

import org.eclipse.gmf.gmfgraph.Identity;

import org.eclipse.gmf.gmfgraph.Label;

import org.eclipse.gmf.gmfgraph.LabeledContainer;

import org.eclipse.gmf.gmfgraph.LineKind;

import org.eclipse.gmf.gmfgraph.Node;

import org.eclipse.gmf.gmfgraph.Point;

import org.eclipse.gmf.gmfgraph.Polygon;

import org.eclipse.gmf.gmfgraph.PolygonDecoration;

import org.eclipse.gmf.gmfgraph.Polyline;

import org.eclipse.gmf.gmfgraph.PolylineConnection;

import org.eclipse.gmf.gmfgraph.PolylineDecoration;

import org.eclipse.gmf.gmfgraph.Rectangle;

import org.eclipse.gmf.gmfgraph.RoundedRectangle;

import org.eclipse.gmf.gmfgraph.Shape;

import org.eclipse.gmf.gmfgraph.SizeStyle;

import org.eclipse.gmf.gmfgraph.VisualFacet;

public class GMFGraphPackageImpl extends EPackageImpl implements GMFGraphPackage {
    private EClass canvasEClass = null;
    private EClass figureGalleryEClass = null;
    private EClass identityEClass = null;
    private EClass diagramElementEClass = null;
    private EClass nodeEClass = null;
    private EClass connectionEClass = null;
    private EClass compartmentEClass = null;
    private EClass childEClass = null;
    private EClass visualFacetEClass = null;
    private EClass generalFacetEClass = null;
    private EClass gradientFacetEClass = null;
    private EClass figureMarkerEClass = null;
    private EClass figureEClass = null;
    private EClass figureRefEClass = null;
    private EClass connectionFigureEClass = null;
    private EClass decorationFigureEClass = null;
    private EClass shapeEClass = null;
    private EClass labelEClass = null;
    private EClass labeledContainerEClass = null;
    private EClass rectangleEClass = null;
    private EClass roundedRectangleEClass = null;
    private EClass ellipseEClass = null;
    private EClass polylineEClass = null;
    private EClass polygonEClass = null;
    private EClass polylineConnectionEClass = null;
    private EClass polylineDecorationEClass = null;
    private EClass polygonDecorationEClass = null;
    private EClass customFigureEClass = null;
    private EClass customDecorationEClass = null;
    private EClass customConnectionEClass = null;
    private EClass colorStyleEClass = null;
    private EClass sizeStyleEClass = null;
    private EClass fontStyleEClass = null;
    private EClass pointEClass = null;
    private EEnum directionEEnum = null;
    private EEnum lineKindEEnum = null;

    private GMFGraphPackageImpl () {
        super (eNS_URI, GMFGraphFactory.eINSTANCE);
    }

    private static boolean isInited = false;

    public static GMFGraphPackage init () {
        if (isInited) return (GMFGraphPackage) EPackage.Registry.INSTANCE.getEPackage (GMFGraphPackage.eNS_URI);

        GMFGraphPackageImpl theGMFGraphPackage = (GMFGraphPackageImpl) (EPackage.Registry.INSTANCE.getEPackage (eNS_URI) instanceof GMFGraphPackageImpl ? EPackage.Registry.INSTANCE.getEPackage (eNS_URI) : new GMFGraphPackageImpl ());
        isInited = true;
        theGMFGraphPackage.createPackageContents ();
        theGMFGraphPackage.initializePackageContents ();
        theGMFGraphPackage.freeze ();
        return theGMFGraphPackage;
    }

    public EClass getCanvas () {
        return canvasEClass;
    }

    public EReference getCanvas_Figures () {
        return (EReference) canvasEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getCanvas_Nodes () {
        return (EReference) canvasEClass.getEStructuralFeatures ().get (1);
    }

    public EReference getCanvas_Connections () {
        return (EReference) canvasEClass.getEStructuralFeatures ().get (2);
    }

    public EReference getCanvas_Compartments () {
        return (EReference) canvasEClass.getEStructuralFeatures ().get (3);
    }

    public EReference getCanvas_Children () {
        return (EReference) canvasEClass.getEStructuralFeatures ().get (4);
    }

    public EClass getFigureGallery () {
        return figureGalleryEClass;
    }

    public EReference getFigureGallery_Figures () {
        return (EReference) figureGalleryEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getFigureGallery_ImplementationBundle () {
        return (EAttribute) figureGalleryEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getIdentity () {
        return identityEClass;
    }

    public EAttribute getIdentity_Name () {
        return (EAttribute) identityEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getDiagramElement () {
        return diagramElementEClass;
    }

    public EReference getDiagramElement_Figure () {
        return (EReference) diagramElementEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getDiagramElement_Facets () {
        return (EReference) diagramElementEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getNode () {
        return nodeEClass;
    }

    public EAttribute getNode_ResizeConstraint () {
        return (EAttribute) nodeEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getConnection () {
        return connectionEClass;
    }

    public EClass getCompartment () {
        return compartmentEClass;
    }

    public EAttribute getCompartment_Collapsible () {
        return (EAttribute) compartmentEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getCompartment_NeedsTitle () {
        return (EAttribute) compartmentEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getChild () {
        return childEClass;
    }

    public EClass getVisualFacet () {
        return visualFacetEClass;
    }

    public EClass getGeneralFacet () {
        return generalFacetEClass;
    }

    public EAttribute getGeneralFacet_Identifier () {
        return (EAttribute) generalFacetEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getGeneralFacet_Data () {
        return (EAttribute) generalFacetEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getGradientFacet () {
        return gradientFacetEClass;
    }

    public EAttribute getGradientFacet_Direction () {
        return (EAttribute) gradientFacetEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getFigureMarker () {
        return figureMarkerEClass;
    }

    public EClass getFigure () {
        return figureEClass;
    }

    public EReference getFigure_Children () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getFigure_Parent () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (1);
    }

    public EReference getFigure_ColorStyle () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (2);
    }

    public EReference getFigure_SizeStyle () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (3);
    }

    public EReference getFigure_FontStyle () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (4);
    }

    public EReference getFigure_Location () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (5);
    }

    public EReference getFigure_Size () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (6);
    }

    public EAttribute getFigure_LayoutManager () {
        return (EAttribute) figureEClass.getEStructuralFeatures ().get (7);
    }

    public EReference getFigure_ResolvedChildren () {
        return (EReference) figureEClass.getEStructuralFeatures ().get (8);
    }

    public EClass getFigureRef () {
        return figureRefEClass;
    }

    public EReference getFigureRef_Figure () {
        return (EReference) figureRefEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getConnectionFigure () {
        return connectionFigureEClass;
    }

    public EClass getDecorationFigure () {
        return decorationFigureEClass;
    }

    public EClass getShape () {
        return shapeEClass;
    }

    public EAttribute getShape_Outline () {
        return (EAttribute) shapeEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getShape_Fill () {
        return (EAttribute) shapeEClass.getEStructuralFeatures ().get (1);
    }

    public EAttribute getShape_LineWidth () {
        return (EAttribute) shapeEClass.getEStructuralFeatures ().get (2);
    }

    public EAttribute getShape_LineKind () {
        return (EAttribute) shapeEClass.getEStructuralFeatures ().get (3);
    }

    public EAttribute getShape_XorFill () {
        return (EAttribute) shapeEClass.getEStructuralFeatures ().get (4);
    }

    public EAttribute getShape_XorOutline () {
        return (EAttribute) shapeEClass.getEStructuralFeatures ().get (5);
    }

    public EClass getLabel () {
        return labelEClass;
    }

    public EAttribute getLabel_Text () {
        return (EAttribute) labelEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getLabeledContainer () {
        return labeledContainerEClass;
    }

    public EClass getRectangle () {
        return rectangleEClass;
    }

    public EClass getRoundedRectangle () {
        return roundedRectangleEClass;
    }

    public EAttribute getRoundedRectangle_CornerWidth () {
        return (EAttribute) roundedRectangleEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getRoundedRectangle_CornerHeight () {
        return (EAttribute) roundedRectangleEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getEllipse () {
        return ellipseEClass;
    }

    public EClass getPolyline () {
        return polylineEClass;
    }

    public EReference getPolyline_Template () {
        return (EReference) polylineEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getPolygon () {
        return polygonEClass;
    }

    public EClass getPolylineConnection () {
        return polylineConnectionEClass;
    }

    public EReference getPolylineConnection_SourceDecoration () {
        return (EReference) polylineConnectionEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getPolylineConnection_TargetDecoration () {
        return (EReference) polylineConnectionEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getPolylineDecoration () {
        return polylineDecorationEClass;
    }

    public EClass getPolygonDecoration () {
        return polygonDecorationEClass;
    }

    public EClass getCustomFigure () {
        return customFigureEClass;
    }

    public EAttribute getCustomFigure_QualifiedClassName () {
        return (EAttribute) customFigureEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getCustomFigure_BundleName () {
        return (EAttribute) customFigureEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getCustomDecoration () {
        return customDecorationEClass;
    }

    public EClass getCustomConnection () {
        return customConnectionEClass;
    }

    public EClass getColorStyle () {
        return colorStyleEClass;
    }

    public EAttribute getColorStyle_ForegroundColor () {
        return (EAttribute) colorStyleEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getColorStyle_BackgroundColor () {
        return (EAttribute) colorStyleEClass.getEStructuralFeatures ().get (1);
    }

    public EClass getSizeStyle () {
        return sizeStyleEClass;
    }

    public EReference getSizeStyle_MaxSize () {
        return (EReference) sizeStyleEClass.getEStructuralFeatures ().get (0);
    }

    public EReference getSizeStyle_MinSize () {
        return (EReference) sizeStyleEClass.getEStructuralFeatures ().get (1);
    }

    public EReference getSizeStyle_PrefSize () {
        return (EReference) sizeStyleEClass.getEStructuralFeatures ().get (2);
    }

    public EClass getFontStyle () {
        return fontStyleEClass;
    }

    public EAttribute getFontStyle_FaceName () {
        return (EAttribute) fontStyleEClass.getEStructuralFeatures ().get (0);
    }

    public EClass getPoint () {
        return pointEClass;
    }

    public EAttribute getPoint_X () {
        return (EAttribute) pointEClass.getEStructuralFeatures ().get (0);
    }

    public EAttribute getPoint_Y () {
        return (EAttribute) pointEClass.getEStructuralFeatures ().get (1);
    }

    public EEnum getDirection () {
        return directionEEnum;
    }

    public EEnum getLineKind () {
        return lineKindEEnum;
    }

    public GMFGraphFactory getGMFGraphFactory () {
        return (GMFGraphFactory) getEFactoryInstance ();
    }

    private boolean isCreated = false;

    public void createPackageContents () {
        if (isCreated) return;

        isCreated = true;
        canvasEClass = createEClass (CANVAS);
        createEReference (canvasEClass, CANVAS__FIGURES);
        createEReference (canvasEClass, CANVAS__NODES);
        createEReference (canvasEClass, CANVAS__CONNECTIONS);
        createEReference (canvasEClass, CANVAS__COMPARTMENTS);
        createEReference (canvasEClass, CANVAS__CHILDREN);
        figureGalleryEClass = createEClass (FIGURE_GALLERY);
        createEReference (figureGalleryEClass, FIGURE_GALLERY__FIGURES);
        createEAttribute (figureGalleryEClass, FIGURE_GALLERY__IMPLEMENTATION_BUNDLE);
        identityEClass = createEClass (IDENTITY);
        createEAttribute (identityEClass, IDENTITY__NAME);
        diagramElementEClass = createEClass (DIAGRAM_ELEMENT);
        createEReference (diagramElementEClass, DIAGRAM_ELEMENT__FIGURE);
        createEReference (diagramElementEClass, DIAGRAM_ELEMENT__FACETS);
        nodeEClass = createEClass (NODE);
        createEAttribute (nodeEClass, NODE__RESIZE_CONSTRAINT);
        connectionEClass = createEClass (CONNECTION);
        compartmentEClass = createEClass (COMPARTMENT);
        createEAttribute (compartmentEClass, COMPARTMENT__COLLAPSIBLE);
        createEAttribute (compartmentEClass, COMPARTMENT__NEEDS_TITLE);
        childEClass = createEClass (CHILD);
        visualFacetEClass = createEClass (VISUAL_FACET);
        generalFacetEClass = createEClass (GENERAL_FACET);
        createEAttribute (generalFacetEClass, GENERAL_FACET__IDENTIFIER);
        createEAttribute (generalFacetEClass, GENERAL_FACET__DATA);
        gradientFacetEClass = createEClass (GRADIENT_FACET);
        createEAttribute (gradientFacetEClass, GRADIENT_FACET__DIRECTION);
        figureMarkerEClass = createEClass (FIGURE_MARKER);
        figureEClass = createEClass (FIGURE);
        createEReference (figureEClass, FIGURE__CHILDREN);
        createEReference (figureEClass, FIGURE__PARENT);
        createEReference (figureEClass, FIGURE__COLOR_STYLE);
        createEReference (figureEClass, FIGURE__SIZE_STYLE);
        createEReference (figureEClass, FIGURE__FONT_STYLE);
        createEReference (figureEClass, FIGURE__LOCATION);
        createEReference (figureEClass, FIGURE__SIZE);
        createEAttribute (figureEClass, FIGURE__LAYOUT_MANAGER);
        createEReference (figureEClass, FIGURE__RESOLVED_CHILDREN);
        figureRefEClass = createEClass (FIGURE_REF);
        createEReference (figureRefEClass, FIGURE_REF__FIGURE);
        connectionFigureEClass = createEClass (CONNECTION_FIGURE);
        decorationFigureEClass = createEClass (DECORATION_FIGURE);
        shapeEClass = createEClass (SHAPE);
        createEAttribute (shapeEClass, SHAPE__OUTLINE);
        createEAttribute (shapeEClass, SHAPE__FILL);
        createEAttribute (shapeEClass, SHAPE__LINE_WIDTH);
        createEAttribute (shapeEClass, SHAPE__LINE_KIND);
        createEAttribute (shapeEClass, SHAPE__XOR_FILL);
        createEAttribute (shapeEClass, SHAPE__XOR_OUTLINE);
        labelEClass = createEClass (LABEL);
        createEAttribute (labelEClass, LABEL__TEXT);
        labeledContainerEClass = createEClass (LABELED_CONTAINER);
        rectangleEClass = createEClass (RECTANGLE);
        roundedRectangleEClass = createEClass (ROUNDED_RECTANGLE);
        createEAttribute (roundedRectangleEClass, ROUNDED_RECTANGLE__CORNER_WIDTH);
        createEAttribute (roundedRectangleEClass, ROUNDED_RECTANGLE__CORNER_HEIGHT);
        ellipseEClass = createEClass (ELLIPSE);
        polylineEClass = createEClass (POLYLINE);
        createEReference (polylineEClass, POLYLINE__TEMPLATE);
        polygonEClass = createEClass (POLYGON);
        polylineConnectionEClass = createEClass (POLYLINE_CONNECTION);
        createEReference (polylineConnectionEClass, POLYLINE_CONNECTION__SOURCE_DECORATION);
        createEReference (polylineConnectionEClass, POLYLINE_CONNECTION__TARGET_DECORATION);
        polylineDecorationEClass = createEClass (POLYLINE_DECORATION);
        polygonDecorationEClass = createEClass (POLYGON_DECORATION);
        customFigureEClass = createEClass (CUSTOM_FIGURE);
        createEAttribute (customFigureEClass, CUSTOM_FIGURE__QUALIFIED_CLASS_NAME);
        createEAttribute (customFigureEClass, CUSTOM_FIGURE__BUNDLE_NAME);
        customDecorationEClass = createEClass (CUSTOM_DECORATION);
        customConnectionEClass = createEClass (CUSTOM_CONNECTION);
        colorStyleEClass = createEClass (COLOR_STYLE);
        createEAttribute (colorStyleEClass, COLOR_STYLE__FOREGROUND_COLOR);
        createEAttribute (colorStyleEClass, COLOR_STYLE__BACKGROUND_COLOR);
        sizeStyleEClass = createEClass (SIZE_STYLE);
        createEReference (sizeStyleEClass, SIZE_STYLE__MAX_SIZE);
        createEReference (sizeStyleEClass, SIZE_STYLE__MIN_SIZE);
        createEReference (sizeStyleEClass, SIZE_STYLE__PREF_SIZE);
        fontStyleEClass = createEClass (FONT_STYLE);
        createEAttribute (fontStyleEClass, FONT_STYLE__FACE_NAME);
        pointEClass = createEClass (POINT);
        createEAttribute (pointEClass, POINT__X);
        createEAttribute (pointEClass, POINT__Y);
        directionEEnum = createEEnum (DIRECTION);
        lineKindEEnum = createEEnum (LINE_KIND);
    }

    private boolean isInitialized = false;

    public void initializePackageContents () {
        if (isInitialized) return;

        isInitialized = true;
        setName (eNAME);
        setNsPrefix (eNS_PREFIX);
        setNsURI (eNS_URI);
        canvasEClass.getESuperTypes ().add (this.getIdentity ());
        figureGalleryEClass.getESuperTypes ().add (this.getIdentity ());
        diagramElementEClass.getESuperTypes ().add (this.getIdentity ());
        nodeEClass.getESuperTypes ().add (this.getDiagramElement ());
        connectionEClass.getESuperTypes ().add (this.getDiagramElement ());
        compartmentEClass.getESuperTypes ().add (this.getDiagramElement ());
        childEClass.getESuperTypes ().add (this.getDiagramElement ());
        generalFacetEClass.getESuperTypes ().add (this.getVisualFacet ());
        gradientFacetEClass.getESuperTypes ().add (this.getVisualFacet ());
        figureEClass.getESuperTypes ().add (this.getFigureMarker ());
        figureEClass.getESuperTypes ().add (this.getIdentity ());
        figureRefEClass.getESuperTypes ().add (this.getFigureMarker ());
        connectionFigureEClass.getESuperTypes ().add (this.getFigure ());
        decorationFigureEClass.getESuperTypes ().add (this.getFigure ());
        shapeEClass.getESuperTypes ().add (this.getFigure ());
        labelEClass.getESuperTypes ().add (this.getFigure ());
        labeledContainerEClass.getESuperTypes ().add (this.getFigure ());
        rectangleEClass.getESuperTypes ().add (this.getShape ());
        roundedRectangleEClass.getESuperTypes ().add (this.getShape ());
        ellipseEClass.getESuperTypes ().add (this.getShape ());
        polylineEClass.getESuperTypes ().add (this.getShape ());
        polygonEClass.getESuperTypes ().add (this.getPolyline ());
        polylineConnectionEClass.getESuperTypes ().add (this.getPolyline ());
        polylineConnectionEClass.getESuperTypes ().add (this.getConnectionFigure ());
        polylineDecorationEClass.getESuperTypes ().add (this.getPolyline ());
        polylineDecorationEClass.getESuperTypes ().add (this.getDecorationFigure ());
        polygonDecorationEClass.getESuperTypes ().add (this.getPolygon ());
        polygonDecorationEClass.getESuperTypes ().add (this.getDecorationFigure ());
        customFigureEClass.getESuperTypes ().add (this.getFigure ());
        customDecorationEClass.getESuperTypes ().add (this.getCustomFigure ());
        customDecorationEClass.getESuperTypes ().add (this.getDecorationFigure ());
        customConnectionEClass.getESuperTypes ().add (this.getCustomFigure ());
        customConnectionEClass.getESuperTypes ().add (this.getConnectionFigure ());
        initEClass (canvasEClass, Canvas.class, "Canvas", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getCanvas_Figures (), this.getFigureGallery (), null, "figures", null, 0, - 1, Canvas.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getCanvas_Nodes (), this.getNode (), null, "nodes", null, 0, - 1, Canvas.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getCanvas_Connections (), this.getConnection (), null, "connections", null, 0, - 1, Canvas.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getCanvas_Compartments (), this.getCompartment (), null, "compartments", null, 0, - 1, Canvas.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getCanvas_Children (), this.getChild (), null, "children", null, 0, - 1, Canvas.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (figureGalleryEClass, FigureGallery.class, "FigureGallery", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getFigureGallery_Figures (), this.getFigure (), null, "figures", null, 0, - 1, FigureGallery.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getFigureGallery_ImplementationBundle (), ecorePackage.getEString (), "implementationBundle", null, 0, 1, FigureGallery.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (identityEClass, Identity.class, "Identity", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getIdentity_Name (), ecorePackage.getEString (), "name", null, 1, 1, Identity.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (diagramElementEClass, DiagramElement.class, "DiagramElement", IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getDiagramElement_Figure (), this.getFigure (), null, "figure", null, 1, 1, DiagramElement.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getDiagramElement_Facets (), this.getVisualFacet (), null, "facets", null, 0, - 1, DiagramElement.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (nodeEClass, Node.class, "Node", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getNode_ResizeConstraint (), this.getDirection (), "resizeConstraint", null, 0, 1, Node.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (connectionEClass, Connection.class, "Connection", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (compartmentEClass, Compartment.class, "Compartment", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getCompartment_Collapsible (), ecorePackage.getEBoolean (), "collapsible", null, 0, 1, Compartment.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getCompartment_NeedsTitle (), ecorePackage.getEBoolean (), "needsTitle", null, 0, 1, Compartment.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (childEClass, Child.class, "Child", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (visualFacetEClass, VisualFacet.class, "VisualFacet", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (generalFacetEClass, GeneralFacet.class, "GeneralFacet", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getGeneralFacet_Identifier (), ecorePackage.getEString (), "identifier", null, 0, 1, GeneralFacet.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getGeneralFacet_Data (), ecorePackage.getEString (), "data", null, 0, 1, GeneralFacet.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (gradientFacetEClass, GradientFacet.class, "GradientFacet", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getGradientFacet_Direction (), this.getDirection (), "direction", null, 0, 1, GradientFacet.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (figureMarkerEClass, FigureMarker.class, "FigureMarker", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (figureEClass, Figure.class, "Figure", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getFigure_Children (), this.getFigureMarker (), null, "children", null, 0, - 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_Parent (), this.getFigure (), this.getFigure_Children (), "parent", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, ! IS_CHANGEABLE, ! IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_ColorStyle (), this.getColorStyle (), null, "colorStyle", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_SizeStyle (), this.getSizeStyle (), null, "sizeStyle", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_FontStyle (), this.getFontStyle (), null, "fontStyle", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_Location (), this.getPoint (), null, "location", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_Size (), this.getPoint (), null, "size", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getFigure_LayoutManager (), ecorePackage.getEString (), "layoutManager", null, 0, 1, Figure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getFigure_ResolvedChildren (), this.getFigure (), null, "resolvedChildren", null, 0, - 1, Figure.class, IS_TRANSIENT, IS_VOLATILE, ! IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, IS_DERIVED, IS_ORDERED);
        initEClass (figureRefEClass, FigureRef.class, "FigureRef", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getFigureRef_Figure (), this.getFigure (), null, "figure", null, 1, 1, FigureRef.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (connectionFigureEClass, ConnectionFigure.class, "ConnectionFigure", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (decorationFigureEClass, DecorationFigure.class, "DecorationFigure", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (shapeEClass, Shape.class, "Shape", IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getShape_Outline (), ecorePackage.getEBoolean (), "outline", null, 0, 1, Shape.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getShape_Fill (), ecorePackage.getEBoolean (), "fill", null, 0, 1, Shape.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getShape_LineWidth (), ecorePackage.getEInt (), "lineWidth", "1", 0, 1, Shape.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getShape_LineKind (), this.getLineKind (), "lineKind", null, 0, 1, Shape.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getShape_XorFill (), ecorePackage.getEBoolean (), "xorFill", null, 0, 1, Shape.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getShape_XorOutline (), ecorePackage.getEBoolean (), "xorOutline", null, 0, 1, Shape.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (labelEClass, Label.class, "Label", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getLabel_Text (), ecorePackage.getEString (), "text", null, 0, 1, Label.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (labeledContainerEClass, LabeledContainer.class, "LabeledContainer", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (rectangleEClass, Rectangle.class, "Rectangle", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (roundedRectangleEClass, RoundedRectangle.class, "RoundedRectangle", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getRoundedRectangle_CornerWidth (), ecorePackage.getEInt (), "cornerWidth", null, 0, 1, RoundedRectangle.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getRoundedRectangle_CornerHeight (), ecorePackage.getEInt (), "cornerHeight", null, 0, 1, RoundedRectangle.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (ellipseEClass, Ellipse.class, "Ellipse", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (polylineEClass, Polyline.class, "Polyline", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getPolyline_Template (), this.getPoint (), null, "template", null, 0, - 1, Polyline.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (polygonEClass, Polygon.class, "Polygon", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (polylineConnectionEClass, PolylineConnection.class, "PolylineConnection", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getPolylineConnection_SourceDecoration (), this.getDecorationFigure (), null, "sourceDecoration", null, 0, 1, PolylineConnection.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getPolylineConnection_TargetDecoration (), this.getDecorationFigure (), null, "targetDecoration", null, 0, 1, PolylineConnection.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (polylineDecorationEClass, PolylineDecoration.class, "PolylineDecoration", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (polygonDecorationEClass, PolygonDecoration.class, "PolygonDecoration", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (customFigureEClass, CustomFigure.class, "CustomFigure", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getCustomFigure_QualifiedClassName (), ecorePackage.getEString (), "qualifiedClassName", null, 0, 1, CustomFigure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getCustomFigure_BundleName (), ecorePackage.getEString (), "bundleName", null, 0, 1, CustomFigure.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (customDecorationEClass, CustomDecoration.class, "CustomDecoration", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (customConnectionEClass, CustomConnection.class, "CustomConnection", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEClass (colorStyleEClass, ColorStyle.class, "ColorStyle", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getColorStyle_ForegroundColor (), ecorePackage.getEString (), "foregroundColor", null, 0, 1, ColorStyle.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getColorStyle_BackgroundColor (), ecorePackage.getEString (), "backgroundColor", null, 0, 1, ColorStyle.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (sizeStyleEClass, SizeStyle.class, "SizeStyle", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEReference (getSizeStyle_MaxSize (), this.getPoint (), null, "maxSize", null, 0, 1, SizeStyle.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getSizeStyle_MinSize (), this.getPoint (), null, "minSize", null, 0, 1, SizeStyle.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEReference (getSizeStyle_PrefSize (), this.getPoint (), null, "prefSize", null, 0, 1, SizeStyle.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (fontStyleEClass, FontStyle.class, "FontStyle", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getFontStyle_FaceName (), ecorePackage.getEString (), "faceName", null, 0, 1, FontStyle.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEClass (pointEClass, Point.class, "Point", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
        initEAttribute (getPoint_X (), ecorePackage.getEInt (), "x", null, 0, 1, Point.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEAttribute (getPoint_Y (), ecorePackage.getEInt (), "y", null, 0, 1, Point.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
        initEEnum (directionEEnum, Direction.class, "Direction");
        addEEnumLiteral (directionEEnum, Direction.NONE_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.NORTH_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.SOUTH_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.EAST_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.WEST_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.NORTH_WEST_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.NORTH_EAST_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.SOUTH_WEST_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.SOUTH_EAST_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.VERTICAL_LITERAL);
        addEEnumLiteral (directionEEnum, Direction.HORIZONTAL_LITERAL);
        initEEnum (lineKindEEnum, LineKind.class, "LineKind");
        addEEnumLiteral (lineKindEEnum, LineKind.LINE_SOLID_LITERAL);
        addEEnumLiteral (lineKindEEnum, LineKind.LINE_DASH_LITERAL);
        addEEnumLiteral (lineKindEEnum, LineKind.LINE_DOT_LITERAL);
        addEEnumLiteral (lineKindEEnum, LineKind.LINE_DASHDOT_LITERAL);
        addEEnumLiteral (lineKindEEnum, LineKind.LINE_DASHDOTDOT_LITERAL);
        addEEnumLiteral (lineKindEEnum, LineKind.LINE_CUSTOM_LITERAL);
        createResource (eNS_URI);
    }

}

