package org.eclipse.gmf.internal.bridge.genmodel;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;

import org.eclipse.emf.codegen.ecore.genmodel.GenModel;

import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.EStructuralFeature;

public class GenModelMatcher {
    private final GenModel myEMFGenModel;

    public GenModelMatcher (GenModel genModel) {
        assert genModel != null;
        myEMFGenModel = genModel;
    }

    public GenModelMatcher (EPackage domainModel) {
        BasicGenModelAccess gma = new BasicGenModelAccess (domainModel);
        gma.initDefault ();
        if (gma.load ().isOK ()) {
            myEMFGenModel = gma.model ();
        } else {
            throw new IllegalStateException ("Can't find genModel for domain model with nsURI=" + domainModel.getNsURI ());
        }
    }

    public GenModel getGenModel () {
        return myEMFGenModel;
    }

    public GenPackage findGenPackage (EPackage domainPackage) {
        return domainPackage == null ? null : getGenModel ().findGenPackage (domainPackage);
    }

    public GenClass findGenClass (EClass domainMetaClass) {
        if (domainMetaClass == null) {
            return null;
        }
        GenPackage gp = findGenPackage (domainMetaClass.getEPackage ());
        if (gp == null) {
            throw new IllegalStateException ("Can't find genPackage for " + domainMetaClass.getEPackage ());
        }
        for (GenClass genClass : gp.getGenClasses ()) {
            if (genClass.getEcoreClass ().equals (domainMetaClass)) {
                return genClass;
            }
        }
        throw new IllegalStateException ("Can't find genClass for class '" + domainMetaClass.getName () + "' in package " + gp.getPackageName ());
    }

    public GenFeature findGenFeature (EStructuralFeature domainMetaFeature) {
        if (domainMetaFeature == null) {
            return null;
        }
        GenClass genClass = findGenClass (domainMetaFeature.getEContainingClass ());
        for (GenFeature next : genClass.getGenFeatures ()) {
            if (next.getEcoreFeature ().equals (domainMetaFeature)) {
                return next;
            }
        }
        throw new IllegalStateException ("Can't find genFeature for feature '" + domainMetaFeature.getName () + "' in class " + genClass.getName ());
    }

}

