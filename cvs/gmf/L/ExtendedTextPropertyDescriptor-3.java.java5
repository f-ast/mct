package org.eclipse.gmf.runtime.common.ui.services.properties.extended;

import java.text.MessageFormat;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.jface.viewers.CellEditor;

import org.eclipse.jface.viewers.TextCellEditor;

import org.eclipse.swt.events.KeyEvent;

import org.eclipse.swt.events.ModifyEvent;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Display;

import org.eclipse.gmf.runtime.common.ui.services.properties.internal.l10n.PSFResourceManager;

public class ExtendedTextPropertyDescriptor extends ExtendedPropertyDescriptor {
    private static String DIALOG_TITLE = PSFResourceManager.getI18NString ("ExtendedTextPropertyDescriptor.PropertiesViewErrorDialog.Title");

    public ExtendedTextPropertyDescriptor (Object id, String displayName) {
        super (id, displayName);
    }

    public CellEditor createPropertyEditor (Composite parent) {
        if (isReadOnly ()) return null;

        TextCellEditor editor = new TextCellEditor (parent) {

            protected void editOccured (ModifyEvent e) {
                String value = text.getText ();
                if (value == null) value = "";

                Object typedValue = value;
                boolean oldValidState = isValueValid ();
                boolean newValidState = isCorrect (typedValue);
                if (typedValue == null && newValidState) assert (false) : "Validator isn't limiting the cell editor's type range";

                if (! newValidState) {
                    setErrorMessage (MessageFormat.format (getErrorMessage (), new Object [] {value}));
                }
                valueChanged (oldValidState, newValidState);
            }

            protected void keyReleaseOccured (KeyEvent keyEvent) {
                if (keyEvent.character == '\u001b') {
                    fireCancelEditor ();
                    return;
                } else if (keyEvent.character == '\r') {
                    String value = text.getText ();
                    if (value == null) {
                        value = "";
                    }
                    boolean newValidState = isCorrect (value);
                    if (value == null && newValidState) assert (false) : "Validator isn't limiting the cell editor's type range";

                    if (! newValidState) {
                        MessageDialog.openError (Display.getCurrent ().getActiveShell (), DIALOG_TITLE, getErrorMessage ());
                        fireCancelEditor ();
                    } else {
                        fireApplyEditorValue ();
                        deactivate ();
                    }
                    return;
                }

            }

        }

        ;
        editor.setValidator (this.getValidator ());
        return editor;
    }

}

