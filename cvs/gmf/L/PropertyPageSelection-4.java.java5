package org.eclipse.gmf.runtime.emf.ui.properties.util;

import java.util.ArrayList;

import java.util.Collections;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.jface.resource.ImageDescriptor;

import org.eclipse.jface.viewers.CellEditor;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.jface.viewers.StructuredSelection;

import org.eclipse.ui.IActionFilter;

import org.eclipse.ui.model.IWorkbenchAdapter;

import org.eclipse.ui.views.properties.IPropertySource;

import org.eclipse.gmf.runtime.common.ui.services.action.filter.ActionFilterService;

import org.eclipse.gmf.runtime.common.ui.services.parser.ParserService;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.emf.ui.properties.internal.l10n.EMFUIPropertiesMessages;

public class PropertyPageSelection implements IAdaptable, IStructuredSelection {
    private final IStructuredSelection selection;
    private IWorkbenchAdapter workbenchAdapter;

    public PropertyPageSelection (Object selectedObject) {
        this (new ArrayList (Collections.singleton (selectedObject)));
    }

    public PropertyPageSelection (List selectedObjects) {
        super ();
        selection = new StructuredSelection (selectedObjects);
    }

    private IStructuredSelection getSelection () {
        return selection;
    }

    private IWorkbenchAdapter getWorkbenchAdapter () {
        if (workbenchAdapter == null) {
            workbenchAdapter = new IWorkbenchAdapter () {

                public Object [] getChildren (Object o) {
                    return null;
                }

                public ImageDescriptor getImageDescriptor (Object object) {
                    return null;
                }

                public String getLabel (Object o) {
                    if (getSelection ().size () > 1) {
                        return EMFUIPropertiesMessages.PropertyPageSelection_PropertyDialog_selectedElementsTitle;
                    } else {
                        EObject element = (EObject) getAdapter (EObject.class);
                        if (element != null) {
                            return ParserService.getInstance ().getPrintString (new EObjectAdapter (element));
                        } else {
                            return EMFUIPropertiesMessages.PropertyPageSelection_PropertyDialog_selectedElementsTitle;
                        }
                    }
                }

                public Object getParent (Object o) {
                    return null;
                }

            }

            ;
        }
        return workbenchAdapter;
    }

    public Object getAdapter (Class adapter) {
        if (EObject.class.equals (adapter)) {
            return ((IAdaptable) getSelection ().getFirstElement ()).getAdapter (EObject.class);
        } else if (IStructuredSelection.class.equals (adapter)) {
            return this;
        } else if (IActionFilter.class.equals (adapter)) {
            return ActionFilterService.getInstance ();
        } else if (IPropertySource.class.equals (adapter)) {
            return ((IAdaptable) getSelection ().getFirstElement ()).getAdapter (IPropertySource.class);
        } else if (IWorkbenchAdapter.class.equals (adapter)) {
            return getWorkbenchAdapter ();
        } else if (CellEditor.class.equals (adapter)) {
            return ((IAdaptable) getSelection ().getFirstElement ()).getAdapter (CellEditor.class);
        }

        return null;
    }

    public boolean isEmpty () {
        return getSelection ().isEmpty ();
    }

    public Object getFirstElement () {
        return getSelection ().getFirstElement ();
    }

    public Iterator iterator () {
        return getSelection ().iterator ();
    }

    public int size () {
        return getSelection ().size ();
    }

    public Object [] toArray () {
        return getSelection ().toArray ();
    }

    public List toList () {
        return getSelection ().toList ();
    }

}

