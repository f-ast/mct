package org.eclipse.gmf.runtime.common.core.util;

import java.io.IOException;

import java.io.InputStream;

import java.net.URL;

import java.util.HashMap;

import java.util.Map;

import java.util.Properties;

import org.eclipse.core.runtime.FileLocator;

import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.core.runtime.IExtension;

import org.eclipse.core.runtime.Path;

import org.eclipse.core.runtime.Platform;

import org.eclipse.gmf.runtime.common.core.internal.CommonCoreDebugOptions;

import org.eclipse.gmf.runtime.common.core.internal.CommonCorePlugin;

import org.eclipse.gmf.runtime.common.core.internal.CommonCoreStatusCodes;

import org.osgi.framework.Bundle;

public class PropertiesConfigurationManager {
    private static final String PROPERTIES_CONFIGURATION_EXT_P_NAME = "propertiesConfiguration";
    private static final String PATH_ATTRIBUTE = "path";
    private static Map pluginIdToPropertiesMap = null;

    private PropertiesConfigurationManager () {
        super ();
    }

    public static String getString (String pluginId, String key) {
        Map propertiesMap = (Map) getPluginIdToPropertiesMap ().get (pluginId);
        if (propertiesMap == null) {
            propertiesMap = new HashMap ();
            getPluginIdToPropertiesMap ().put (pluginId, propertiesMap);
            IExtension [] extensions = Platform.getExtensionRegistry ().getExtensionPoint (CommonCorePlugin.getPluginId (), PROPERTIES_CONFIGURATION_EXT_P_NAME).getExtensions ();
            for (int i = 0;
            i < extensions.length; ++ i) {
                if (extensions [i].getContributor ().getName ().equals (pluginId)) {
                    loadProperties (propertiesMap, extensions [i].getConfigurationElements ());
                }
            }
        }
        return (String) propertiesMap.get (key);
    }

    private static Map getPluginIdToPropertiesMap () {
        if (pluginIdToPropertiesMap == null) {
            pluginIdToPropertiesMap = new HashMap ();
        }
        return pluginIdToPropertiesMap;
    }

    private static void loadProperties (Map propertiesMap, IConfigurationElement [] elements) {
        for (int i = 0;
        i < elements.length; i ++) {
            IConfigurationElement element = elements [i];
            String relativePath = element.getAttribute (PATH_ATTRIBUTE);
            Bundle bundle = Platform.getBundle (element.getDeclaringExtension ().getContributor ().getName ());
            assert bundle != null;
            URL url = FileLocator.find (bundle, new Path (relativePath), null);
            if (url == null) {
                Log.error (CommonCorePlugin.getDefault (), CommonCoreStatusCodes.SERVICE_FAILURE, "Couldn't find relative path " + relativePath + " in " + element.getDeclaringExtension ().getContributor ().getName ());
            }
            InputStream is = null;
            try {
                is = url.openStream ();
                Properties properties = new Properties ();
                properties.load (is);
                propertiesMap.putAll (properties);
            } catch (IOException e) {
                handleException (e);
            } finally {
                if (is != null) {
                    try {
                        is.close ();
                    } catch (IOException e) {
                        handleException (e);
                    }
                }
            }
        }
    }

    private static void handleException (Exception e) {
        Trace.catching (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.EXCEPTIONS_CATCHING, PropertiesConfigurationManager.class, "configureProperties", e);
        Log.error (CommonCorePlugin.getDefault (), CommonCoreStatusCodes.SERVICE_FAILURE, e.getMessage (), e);
    }

}

