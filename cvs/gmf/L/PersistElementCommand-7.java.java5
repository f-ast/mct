package org.eclipse.gmf.runtime.diagram.core.internal.commands;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.diagram.core.internal.DiagramPlugin;

import org.eclipse.gmf.runtime.diagram.core.internal.l10n.DiagramCoreMessages;

import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.View;

public class PersistElementCommand extends AbstractTransactionalCommand {
    private View _view;

    public PersistElementCommand (TransactionalEditingDomain editingDomain, View view) {
        super (editingDomain, DiagramCoreMessages.AddCommand_Label, null);
        _view = view;
    }

    protected CommandResult doExecuteWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException {
        try {
            assert null != _view : "Null view in PersistElementCommand::doExecute";
            EObject container = _view.eContainer ();
            if (_view instanceof Edge) {
                Diagram diagram = (Diagram) container;
                diagram.persistEdges ();
            } else if (container instanceof View) ((View) container).persistChildren ();

            return CommandResult.newOKCommandResult (_view);
        } catch (Exception e) {
            Log.error (DiagramPlugin.getInstance (), IStatus.ERROR, e.getMessage (), e);
            return CommandResult.newErrorCommandResult (e.getMessage ());
        }
    }

}

