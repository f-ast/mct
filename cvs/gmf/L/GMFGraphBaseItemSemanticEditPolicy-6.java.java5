package org.eclipse.gmf.graphdef.editor.edit.policies;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gef.commands.Command;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;

import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;

import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;

import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;

public class GMFGraphBaseItemSemanticEditPolicy extends SemanticEditPolicy {

    protected Command getSemanticCommand (IEditCommandRequest request) {
        IEditCommandRequest completedRequest = completeRequest (request);
        Object editHelperContext = completedRequest.getEditHelperContext ();
        if (editHelperContext instanceof View) {
            editHelperContext = ((View) editHelperContext).getElement ();
        }
        IElementType elementType = ElementTypeRegistry.getInstance ().getElementType (editHelperContext);
        if (elementType == ElementTypeRegistry.getInstance ().getType ("org.eclipse.gmf.runtime.emf.type.core.default")) {
            GMFGraphDiagramEditorPlugin.getInstance ().logInfo ("Failed to get element type for " + editHelperContext);
            elementType = null;
        }
        Command semanticHelperCommand = null;
        if (elementType != null) {
            ICommand semanticCommand = elementType.getEditCommand (completedRequest);
            if (semanticCommand != null) {
                semanticHelperCommand = new EtoolsProxyCommand (semanticCommand);
            }
        }
        Command semanticPolicyCommand = getSemanticCommandSwitch (completedRequest);
        if (semanticPolicyCommand == null) {
            if (semanticHelperCommand == null) {
                return null;
            } else {
                semanticPolicyCommand = semanticHelperCommand;
            }
        } else {
            if (semanticHelperCommand != null) {
                semanticPolicyCommand = semanticPolicyCommand.chain (semanticHelperCommand);
            }
        }
        boolean shouldProceed = true;
        if (completedRequest instanceof DestroyRequest) {
            shouldProceed = shouldProceed ((DestroyRequest) completedRequest);
        }
        if (shouldProceed) {
            if (completedRequest instanceof DestroyRequest) {
                Command deleteViewCommand = new EtoolsProxyCommand (new DeleteCommand (((IGraphicalEditPart) getHost ()).getEditingDomain (), (View) getHost ().getModel ()));
                semanticPolicyCommand = semanticPolicyCommand.chain (deleteViewCommand);
            }
            return semanticPolicyCommand;
        }
        return null;
    }

    protected Command getSemanticCommandSwitch (IEditCommandRequest req) {
        if (req instanceof CreateRelationshipRequest) {
            return getCreateRelationshipCommand ((CreateRelationshipRequest) req);
        } else if (req instanceof CreateElementRequest) {
            return getCreateCommand ((CreateElementRequest) req);
        } else if (req instanceof ConfigureRequest) {
            return getConfigureCommand ((ConfigureRequest) req);
        } else if (req instanceof DestroyElementRequest) {
            return getDestroyElementCommand ((DestroyElementRequest) req);
        } else if (req instanceof DestroyReferenceRequest) {
            return getDestroyReferenceCommand ((DestroyReferenceRequest) req);
        } else if (req instanceof DuplicateElementsRequest) {
            return getDuplicateCommand ((DuplicateElementsRequest) req);
        } else if (req instanceof GetEditContextRequest) {
            return getEditContextCommand ((GetEditContextRequest) req);
        } else if (req instanceof MoveRequest) {
            return getMoveCommand ((MoveRequest) req);
        } else if (req instanceof ReorientReferenceRelationshipRequest) {
            return getReorientReferenceRelationshipCommand ((ReorientReferenceRelationshipRequest) req);
        } else if (req instanceof ReorientRelationshipRequest) {
            return getReorientRelationshipCommand ((ReorientRelationshipRequest) req);
        } else if (req instanceof SetRequest) {
            return getSetCommand ((SetRequest) req);
        }

        return null;
    }

    protected Command getConfigureCommand (ConfigureRequest req) {
        return null;
    }

    protected Command getCreateRelationshipCommand (CreateRelationshipRequest req) {
        return null;
    }

    protected Command getCreateCommand (CreateElementRequest req) {
        return null;
    }

    protected Command getSetCommand (SetRequest req) {
        return null;
    }

    protected Command getEditContextCommand (GetEditContextRequest req) {
        return null;
    }

    protected Command getDestroyElementCommand (DestroyElementRequest req) {
        return null;
    }

    protected Command getDestroyReferenceCommand (DestroyReferenceRequest req) {
        return null;
    }

    protected Command getDuplicateCommand (DuplicateElementsRequest req) {
        return null;
    }

    protected Command getMoveCommand (MoveRequest req) {
        return null;
    }

    protected Command getReorientReferenceRelationshipCommand (ReorientReferenceRelationshipRequest req) {
        return null;
    }

    protected Command getReorientRelationshipCommand (ReorientRelationshipRequest req) {
        return null;
    }

    protected Command getMSLWrapper (ICommand cmd) {
        TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost ()).getEditingDomain ();
        CompositeTransactionalCommand modelCmd = new CompositeTransactionalCommand (editingDomain, cmd.getLabel ());
        modelCmd.compose (cmd);
        return new EtoolsProxyCommand (modelCmd);
    }

    protected EObject getSemanticElement () {
        return ViewUtil.resolveSemanticElement ((View) getHost ().getModel ());
    }

    protected EObject getRelationshipContainer (EObject element, EClass containerClass, IElementType relationshipType) {
        for (; element != null; element = element.eContainer ()) {
            if (containerClass.isSuperTypeOf (element.eClass ())) {
                return element;
            }
        }
        return null;
    }

}

