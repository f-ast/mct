package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.CompartmentLayoutKind;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.GenCompartment;

import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

import org.eclipse.gmf.codegen.gmfgen.GenNode;

import org.eclipse.gmf.codegen.gmfgen.Viewmap;

public class GenCompartmentImpl extends GenChildContainerImpl implements GenCompartment {
    protected static final String TITLE_EDEFAULT = null;
    protected String title = TITLE_EDEFAULT;
    protected static final boolean CAN_COLLAPSE_EDEFAULT = true;
    protected boolean canCollapse = CAN_COLLAPSE_EDEFAULT;
    protected static final boolean HIDE_IF_EMPTY_EDEFAULT = true;
    protected boolean hideIfEmpty = HIDE_IF_EMPTY_EDEFAULT;
    protected static final boolean NEEDS_TITLE_EDEFAULT = true;
    protected boolean needsTitle = NEEDS_TITLE_EDEFAULT;
    protected static final CompartmentLayoutKind LAYOUT_KIND_EDEFAULT = CompartmentLayoutKind.BORDER_LITERAL;
    protected CompartmentLayoutKind layoutKind = LAYOUT_KIND_EDEFAULT;

    protected GenCompartmentImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFGenPackage.eINSTANCE.getGenCompartment ();
    }

    public String getTitle () {
        return title;
    }

    public void setTitle (String newTitle) {
        String oldTitle = title;
        title = newTitle;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__TITLE, oldTitle, title));

    }

    public boolean isCanCollapse () {
        return canCollapse;
    }

    public void setCanCollapse (boolean newCanCollapse) {
        boolean oldCanCollapse = canCollapse;
        canCollapse = newCanCollapse;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE, oldCanCollapse, canCollapse));

    }

    public boolean isHideIfEmpty () {
        return hideIfEmpty;
    }

    public void setHideIfEmpty (boolean newHideIfEmpty) {
        boolean oldHideIfEmpty = hideIfEmpty;
        hideIfEmpty = newHideIfEmpty;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY, oldHideIfEmpty, hideIfEmpty));

    }

    public boolean isNeedsTitle () {
        return needsTitle;
    }

    public void setNeedsTitle (boolean newNeedsTitle) {
        boolean oldNeedsTitle = needsTitle;
        needsTitle = newNeedsTitle;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE, oldNeedsTitle, needsTitle));

    }

    public CompartmentLayoutKind getLayoutKind () {
        return layoutKind;
    }

    public void setLayoutKind (CompartmentLayoutKind newLayoutKind) {
        CompartmentLayoutKind oldLayoutKind = layoutKind;
        layoutKind = newLayoutKind == null ? LAYOUT_KIND_EDEFAULT : newLayoutKind;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__LAYOUT_KIND, oldLayoutKind, layoutKind));

    }

    public GenNode getNode () {
        if (eContainerFeatureID != GMFGenPackage.GEN_COMPARTMENT__NODE) return null;

        return (GenNode) eContainer;
    }

    public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFGenPackage.GEN_COMPARTMENT__CHILD_NODES :
                    return ((InternalEList) getChildNodes ()).basicAdd (otherEnd, msgs);
                case GMFGenPackage.GEN_COMPARTMENT__NODE :
                    if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);

                    return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_COMPARTMENT__NODE, msgs);
                default :
                    return eDynamicInverseAdd (otherEnd, featureID, baseClass, msgs);
            }
        }
        if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);

        return eBasicSetContainer (otherEnd, featureID, msgs);
    }

    public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
        if (featureID >= 0) {
            switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
                case GMFGenPackage.GEN_COMPARTMENT__VIEWMAP :
                    return basicSetViewmap (null, msgs);
                case GMFGenPackage.GEN_COMPARTMENT__CHILD_NODES :
                    return ((InternalEList) getChildNodes ()).basicRemove (otherEnd, msgs);
                case GMFGenPackage.GEN_COMPARTMENT__NODE :
                    return eBasicSetContainer (null, GMFGenPackage.GEN_COMPARTMENT__NODE, msgs);
                default :
                    return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
            }
        }
        return eBasicSetContainer (null, featureID, msgs);
    }

    public NotificationChain eBasicRemoveFromContainer (NotificationChain msgs) {
        if (eContainerFeatureID >= 0) {
            switch (eContainerFeatureID) {
                case GMFGenPackage.GEN_COMPARTMENT__NODE :
                    return eContainer.eInverseRemove (this, GMFGenPackage.GEN_NODE__COMPARTMENTS, GenNode.class, msgs);
                default :
                    return eDynamicBasicRemoveFromContainer (msgs);
            }
        }
        return eContainer.eInverseRemove (this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
    }

    public Object eGet (EStructuralFeature eFeature, boolean resolve) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM_RUN_TIME_CLASS :
                if (resolve) return getDiagramRunTimeClass ();

                return basicGetDiagramRunTimeClass ();
            case GMFGenPackage.GEN_COMPARTMENT__VISUAL_ID :
                return new Integer (getVisualID ());
            case GMFGenPackage.GEN_COMPARTMENT__EDIT_PART_CLASS_NAME :
                return getEditPartClassName ();
            case GMFGenPackage.GEN_COMPARTMENT__NOTATION_VIEW_FACTORY_CLASS_NAME :
                return getNotationViewFactoryClassName ();
            case GMFGenPackage.GEN_COMPARTMENT__VIEWMAP :
                return getViewmap ();
            case GMFGenPackage.GEN_COMPARTMENT__CHILD_NODES :
                return getChildNodes ();
            case GMFGenPackage.GEN_COMPARTMENT__TITLE :
                return getTitle ();
            case GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE :
                return isCanCollapse () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY :
                return isHideIfEmpty () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE :
                return isNeedsTitle () ? Boolean.TRUE : Boolean.FALSE;
            case GMFGenPackage.GEN_COMPARTMENT__LAYOUT_KIND :
                return getLayoutKind ();
            case GMFGenPackage.GEN_COMPARTMENT__NODE :
                return getNode ();
        }
        return eDynamicGet (eFeature, resolve);
    }

    public void eSet (EStructuralFeature eFeature, Object newValue) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM_RUN_TIME_CLASS :
                setDiagramRunTimeClass ((GenClass) newValue);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__VISUAL_ID :
                setVisualID (((Integer) newValue).intValue ());
                return;
            case GMFGenPackage.GEN_COMPARTMENT__EDIT_PART_CLASS_NAME :
                setEditPartClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__NOTATION_VIEW_FACTORY_CLASS_NAME :
                setNotationViewFactoryClassName ((String) newValue);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__VIEWMAP :
                setViewmap ((Viewmap) newValue);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__CHILD_NODES :
                getChildNodes ().clear ();
                getChildNodes ().addAll ((Collection) newValue);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__TITLE :
                setTitle ((String) newValue);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE :
                setCanCollapse (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY :
                setHideIfEmpty (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE :
                setNeedsTitle (((Boolean) newValue).booleanValue ());
                return;
            case GMFGenPackage.GEN_COMPARTMENT__LAYOUT_KIND :
                setLayoutKind ((CompartmentLayoutKind) newValue);
                return;
        }
        eDynamicSet (eFeature, newValue);
    }

    public void eUnset (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM_RUN_TIME_CLASS :
                setDiagramRunTimeClass ((GenClass) null);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__VISUAL_ID :
                setVisualID (VISUAL_ID_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__EDIT_PART_CLASS_NAME :
                setEditPartClassName (EDIT_PART_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__NOTATION_VIEW_FACTORY_CLASS_NAME :
                setNotationViewFactoryClassName (NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__VIEWMAP :
                setViewmap ((Viewmap) null);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__CHILD_NODES :
                getChildNodes ().clear ();
                return;
            case GMFGenPackage.GEN_COMPARTMENT__TITLE :
                setTitle (TITLE_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE :
                setCanCollapse (CAN_COLLAPSE_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY :
                setHideIfEmpty (HIDE_IF_EMPTY_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE :
                setNeedsTitle (NEEDS_TITLE_EDEFAULT);
                return;
            case GMFGenPackage.GEN_COMPARTMENT__LAYOUT_KIND :
                setLayoutKind (LAYOUT_KIND_EDEFAULT);
                return;
        }
        eDynamicUnset (eFeature);
    }

    public boolean eIsSet (EStructuralFeature eFeature) {
        switch (eDerivedStructuralFeatureID (eFeature)) {
            case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM_RUN_TIME_CLASS :
                return diagramRunTimeClass != null;
            case GMFGenPackage.GEN_COMPARTMENT__VISUAL_ID :
                return visualID != VISUAL_ID_EDEFAULT;
            case GMFGenPackage.GEN_COMPARTMENT__EDIT_PART_CLASS_NAME :
                return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : ! EDIT_PART_CLASS_NAME_EDEFAULT.equals (editPartClassName);
            case GMFGenPackage.GEN_COMPARTMENT__NOTATION_VIEW_FACTORY_CLASS_NAME :
                return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : ! NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals (notationViewFactoryClassName);
            case GMFGenPackage.GEN_COMPARTMENT__VIEWMAP :
                return viewmap != null;
            case GMFGenPackage.GEN_COMPARTMENT__CHILD_NODES :
                return childNodes != null && ! childNodes.isEmpty ();
            case GMFGenPackage.GEN_COMPARTMENT__TITLE :
                return TITLE_EDEFAULT == null ? title != null : ! TITLE_EDEFAULT.equals (title);
            case GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE :
                return canCollapse != CAN_COLLAPSE_EDEFAULT;
            case GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY :
                return hideIfEmpty != HIDE_IF_EMPTY_EDEFAULT;
            case GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE :
                return needsTitle != NEEDS_TITLE_EDEFAULT;
            case GMFGenPackage.GEN_COMPARTMENT__LAYOUT_KIND :
                return layoutKind != LAYOUT_KIND_EDEFAULT;
            case GMFGenPackage.GEN_COMPARTMENT__NODE :
                return getNode () != null;
        }
        return eDynamicIsSet (eFeature);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (title: ");
        result.append (title);
        result.append (", canCollapse: ");
        result.append (canCollapse);
        result.append (", hideIfEmpty: ");
        result.append (hideIfEmpty);
        result.append (", needsTitle: ");
        result.append (needsTitle);
        result.append (", layoutKind: ");
        result.append (layoutKind);
        result.append (')');
        return result.toString ();
    }

    public String getClassNamePrefix () {
        if (getTitle () == null) {
            return "GenContainer$" + hashCode ();
        }
        char [] chars = getTitle ().toCharArray ();
        for (int i = 0;
        i < chars.length; i ++) {
            if (i == 0) {
                if (! Character.isJavaIdentifierStart (chars [i])) {
                    chars [i] = '_';
                }
            } else {
                if (! Character.isJavaIdentifierPart (chars [i])) {
                    chars [i] = '_';
                }
            }
        }
        return new String (chars);
    }

    public String getClassNameSuffux () {
        return "Container";
    }

    public GenDiagram getDiagram () {
        return getNode ().getDiagram ();
    }

    public String getUniqueIdentifier () {
        return getClassNamePrefix () + "_" + getVisualID ();
    }

}

