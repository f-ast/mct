package org.eclipse.gmf.codegen.gmfgen.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.codegen.gmfgen.DefaultSizeAttributes;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

import org.eclipse.gmf.codegen.gmfgen.presentation.EditorPlugin;

public class DefaultSizeAttributesItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public DefaultSizeAttributesItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addWidthPropertyDescriptor (object);
            addHeightPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addWidthPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_DefaultSizeAttributes_width_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_DefaultSizeAttributes_width_feature", "_UI_DefaultSizeAttributes_type"), GMFGenPackage.eINSTANCE.getDefaultSizeAttributes_Width (), true, ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE, null, null));
    }

    protected void addHeightPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_DefaultSizeAttributes_height_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_DefaultSizeAttributes_height_feature", "_UI_DefaultSizeAttributes_type"), GMFGenPackage.eINSTANCE.getDefaultSizeAttributes_Height (), true, ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE, null, null));
    }

    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/DefaultSizeAttributes"));
    }

    public String getText (Object object) {
        DefaultSizeAttributes defaultSizeAttributes = (DefaultSizeAttributes) object;
        return getString ("_UI_DefaultSizeAttributes_type") + " " + defaultSizeAttributes.getWidth ();
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (DefaultSizeAttributes.class)) {
            case GMFGenPackage.DEFAULT_SIZE_ATTRIBUTES__WIDTH :
            case GMFGenPackage.DEFAULT_SIZE_ATTRIBUTES__HEIGHT :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
    }

    public ResourceLocator getResourceLocator () {
        return EditorPlugin.INSTANCE;
    }

}

