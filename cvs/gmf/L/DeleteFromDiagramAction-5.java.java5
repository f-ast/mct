package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.Collections;

import java.util.Iterator;

import java.util.List;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.Request;

import org.eclipse.gef.RequestConstants;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.requests.GroupRequest;

import org.eclipse.ui.ISharedImages;

import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.ui.PlatformUI;

import org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction;

import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramActionsResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;

import org.eclipse.gmf.runtime.notation.View;

public class DeleteFromDiagramAction extends DiagramAction {

    public DeleteFromDiagramAction (IWorkbenchPart part) {
        super (part);
    }

    public DeleteFromDiagramAction (IWorkbenchPage workbenchPage) {
        super (workbenchPage);
    }

    public void init () {
        super.init ();
        setId (ActionIds.ACTION_DELETE_FROM_DIAGRAM);
        setText (DiagramActionsResourceManager.getI18NString ("DeleteFromDiagram.ActionLabelText"));
        setToolTipText (DiagramActionsResourceManager.getI18NString ("DeleteFromDiagram.ActionToolTipText"));
        ISharedImages workbenchImages = PlatformUI.getWorkbench ().getSharedImages ();
        setHoverImageDescriptor (workbenchImages.getImageDescriptor (ISharedImages.IMG_TOOL_DELETE));
        setImageDescriptor (workbenchImages.getImageDescriptor (ISharedImages.IMG_TOOL_DELETE));
        setDisabledImageDescriptor (workbenchImages.getImageDescriptor (ISharedImages.IMG_TOOL_DELETE_DISABLED));
    }

    protected boolean isSelectionListener () {
        return true;
    }

    protected Request createTargetRequest () {
        GroupRequest deleteReq = new GroupRequest (RequestConstants.REQ_DELETE);
        return deleteReq;
    }

    protected Command getCommand () {
        CompoundCommand deleteCC = new CompoundCommand (getLabel ());
        List objects = createOperationSet ();
        if (isCanonical (objects)) {
            return null;
        }
        for (Iterator iter = objects.iterator ();
        iter.hasNext ();) {
            EditPart editPart = (EditPart) iter.next ();
            deleteCC.add (editPart.getCommand (getTargetRequest ()));
        }
        return deleteCC;
    }

    protected List createOperationSet () {
        List selection = getSelectedObjects ();
        if (selection.isEmpty () || ! (selection.get (0) instanceof IGraphicalEditPart)) return Collections.EMPTY_LIST;

        return selection;
    }

    private boolean isCanonical (List selectedItems) {
        if (selectedItems.isEmpty ()) {
            return false;
        }
        for (Iterator i = selectedItems.iterator ();
        i.hasNext ();) {
            Object selectedObject = i.next ();
            if (! (selectedObject instanceof IGraphicalEditPart)) {
                continue;
            }
            IGraphicalEditPart gep = (IGraphicalEditPart) selectedObject;
            Object model = gep.getModel ();
            if (! (model instanceof View)) {
                continue;
            }
            if (((View) model).getElement () == null) {
                continue;
            }
            if (selectedObject instanceof ConnectionEditPart) {
                ConnectionEditPart ePart = (ConnectionEditPart) selectedObject;
                EditPart sEditPart = ePart.getSource ();
                if (isCanonical (sEditPart)) return true;

            } else {
                if (isCanonical (gep)) return true;

            }
        }
        return false;
    }

    private boolean isCanonical (EditPart gep) {
        if (gep instanceof IGraphicalEditPart) {
            return isCanonical ((IGraphicalEditPart) gep);
        }
        return false;
    }

    private boolean isCanonical (IGraphicalEditPart gep) {
        EditPart parent = gep.getParent ();
        if (parent instanceof IGraphicalEditPart) {
            CanonicalEditPolicy cep = (CanonicalEditPolicy) parent.getEditPolicy (EditPolicyRoles.CANONICAL_ROLE);
            if (cep != null) {
                if (cep.isEnabled ()) return true;

            }
        }
        return false;
    }

}

