package org.eclipse.gmf.runtime.diagram.core.listener;

import java.util.Collection;

import java.util.HashSet;

import java.util.Iterator;

import java.util.Set;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.transaction.ResourceSetChangeEvent;

public class NotificationUtil {

    public static boolean isSlotModified (Notification notification) {
        return notification.getEventType () == Notification.SET || notification.getEventType () == Notification.UNSET;
    }

    public static boolean isElementAddedToSlot (Notification notification) {
        return notification.getEventType () == Notification.ADD || notification.getEventType () == Notification.ADD_MANY;
    }

    public static boolean isElementRemovedFromSlot (Notification notification) {
        return notification.getEventType () == Notification.REMOVE || notification.getEventType () == Notification.REMOVE_MANY;
    }

    public static boolean isMove (Notification notification) {
        return notification.getEventType () == Notification.MOVE;
    }

    public static boolean isCustomNotification (Notification notification) {
        if (notification.getEventType () < 0 || notification.getEventType () >= Notification.EVENT_TYPE_COUNT) return true;

        return false;
    }

    public static Set getDeletedObjects (ResourceSetChangeEvent event) {
        HashSet deletedObjects = new HashSet ();
        for (Iterator i = event.getNotifications ().iterator ();
        i.hasNext ();) {
            Notification notification = (Notification) i.next ();
            int eventType = notification.getEventType ();
            if ((eventType == Notification.REMOVE_MANY) || (eventType == Notification.REMOVE)) {
                Object feature = notification.getFeature ();
                if (feature instanceof EReference && ((EReference) feature).isContainment ()) {
                    if (eventType == Notification.REMOVE_MANY) {
                        for (Iterator iter = ((Collection) notification.getOldValue ()).iterator ();
                        iter.hasNext ();) {
                            EObject removedObject = (EObject) iter.next ();
                            if (removedObject.eResource () == null) {
                                deletedObjects.add (removedObject);
                            }
                        }
                    } else if (((EObject) notification.getOldValue ()).eResource () == null) {
                        deletedObjects.add (notification.getOldValue ());
                    }

                }
            }
        }
        return deletedObjects;
    }

    public static Set getAddedObjects (ResourceSetChangeEvent event) {
        HashSet addedObjects = new HashSet ();
        for (Iterator i = event.getNotifications ().iterator ();
        i.hasNext ();) {
            Notification notification = (Notification) i.next ();
            int eventType = notification.getEventType ();
            if ((eventType == Notification.ADD_MANY) || (eventType == Notification.ADD)) {
                Object feature = notification.getFeature ();
                if (feature instanceof EReference && ((EReference) feature).isContainment ()) {
                    if (eventType == Notification.ADD_MANY) {
                        for (Iterator iter = ((Collection) notification.getNewValue ()).iterator ();
                        iter.hasNext ();) {
                            addedObjects.add (iter.next ());
                        }
                    } else {
                        addedObjects.add (notification.getNewValue ());
                    }
                }
            }
        }
        return addedObjects;
    }

}

