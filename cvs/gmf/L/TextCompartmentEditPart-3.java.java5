package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.beans.PropertyChangeEvent;

import java.util.Collections;

import java.util.List;

import org.eclipse.draw2d.FigureUtilities;

import org.eclipse.draw2d.IFigure;

import org.eclipse.draw2d.Label;

import org.eclipse.draw2d.PositionConstants;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.AccessibleEditPart;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.Request;

import org.eclipse.gef.requests.DirectEditRequest;

import org.eclipse.gef.tools.CellEditorLocator;

import org.eclipse.gef.tools.DirectEditManager;

import org.eclipse.jface.text.contentassist.IContentAssistProcessor;

import org.eclipse.jface.viewers.CellEditor;

import org.eclipse.jface.viewers.ICellEditorValidator;

import org.eclipse.swt.SWT;

import org.eclipse.swt.accessibility.AccessibleEvent;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.widgets.Text;

import org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint;

import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;

import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;

import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;

import org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions;

import org.eclipse.gmf.runtime.common.ui.services.parser.ParserService;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;

import org.eclipse.gmf.runtime.diagram.core.listener.PresentationListener;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;

import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;

import org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;

import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;

import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

import org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser;

import org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter;

import org.eclipse.gmf.runtime.gef.ui.internal.requests.DirectEditRequestWrapper;

import org.eclipse.gmf.runtime.gef.ui.parts.TextCellEditorEx;

import org.eclipse.gmf.runtime.gef.ui.parts.WrapTextCellEditor;

import org.eclipse.gmf.runtime.notation.FontStyle;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

public class TextCompartmentEditPart extends CompartmentEditPart {
    public class TextCellEditorLocator implements CellEditorLocator {

        public void relocate (CellEditor celleditor) {
            Text text = (Text) celleditor.getControl ();
            Rectangle rect = getLabel ().getTextBounds ().getCopy ();
            getLabel ().translateToAbsolute (rect);
            if (getLabel ().isTextWrapped () && getLabel ().getText ().length () > 0) rect.setSize (new Dimension (text.computeSize (rect.width, SWT.DEFAULT)));
            else {
                int avr = FigureUtilities.getFontMetrics (text.getFont ()).getAverageCharWidth ();
                rect.setSize (new Dimension (text.computeSize (SWT.DEFAULT, SWT.DEFAULT)).expand (avr * 2, 0));
            }
            if (! rect.equals (new Rectangle (text.getBounds ()))) text.setBounds (rect.x, rect.y, rect.width, rect.height);

        }

    }

    private DirectEditManager manager;
    protected IParser parser;
    private ParserOptions parserOptions;
    private List parserElements = null;
    private int numIcons = 0;
    private Label toolTipLabel = new Label ();

    public TextCompartmentEditPart (View view) {
        super (view);
    }

    protected void createDefaultEditPolicies () {
        super.createDefaultEditPolicies ();
        installEditPolicy (EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy ());
        removeEditPolicy (EditPolicyRoles.CREATION_ROLE);
    }

    protected IFigure createFigure () {
        return createWrapLabel ();
    }

    protected WrapLabel createWrapLabel () {
        WrapLabel label = new WrapLabel ("");
        label.setLabelAlignment (PositionConstants.TOP);
        label.setTextAlignment (PositionConstants.TOP);
        return label;
    }

    public IFigure getFigure () {
        return super.getFigure ();
    }

    public WrapLabel getLabel () {
        return (WrapLabel) getFigure ();
    }

    protected Image getLabelIcon (int index) {
        return null;
    }

    protected String getLabelText () {
        EObject element = resolveSemanticElement ();
        return (element == null) ? null : (getParser () == null) ? null : getParser ().getPrintString (new EObjectAdapter (element), getParserOptions ().intValue ());
    }

    public String getEditText () {
        EObject element = resolveSemanticElement ();
        return (element == null) ? "" : getParser ().getEditString (new EObjectAdapter (element), getParserOptions ().intValue ());
    }

    public IContentAssistProcessor getCompletionProcessor () {
        EObject element = resolveSemanticElement ();
        if (element != null) {
            return getParser ().getCompletionProcessor (new EObjectAdapter (element));
        }
        return null;
    }

    private boolean canParse () {
        return getEditText () != null;
    }

    public ICellEditorValidator getEditTextValidator () {
        return new ICellEditorValidator () {

            public String isValid (final Object value) {
                if (value instanceof String) {
                    final EObject element = resolveSemanticElement ();
                    final IParserEditStatus isValid [] = {null};
                    final IParser theParser = getParser ();
                    MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {

                        public Object run () {
                            isValid [0] = theParser.isValidEditString (new EObjectAdapter (element), (String) value);
                            return null;
                        }

                    }

                    );
                    return isValid [0].getCode () == ParserEditStatus.EDITABLE ? null : isValid [0].getMessage ();
                }
                return null;
            }

        }

        ;
    }

    public final ParserOptions getParserOptions () {
        if (parserOptions == null) parserOptions = buildParserOptions ();

        return parserOptions;
    }

    protected ParserOptions buildParserOptions () {
        return ParserOptions.NONE;
    }

    protected final void refreshParserOptions () {
        parserOptions = buildParserOptions ();
    }

    protected boolean isAffectingParserOptions (PropertyChangeEvent evt) {
        return false;
    }

    protected IFigure getLabelToolTip () {
        String text = getToolTipText ();
        if (text != null && text.length () > 0) {
            toolTipLabel.setText (text);
            return toolTipLabel;
        }
        return null;
    }

    protected String getToolTipText () {
        return null;
    }

    protected boolean isEditable () {
        EObject element = resolveSemanticElement ();
        if (element != null && canParse ()) {
            return true;
        }
        return false;
    }

    protected void performDirectEdit () {
        getManager ().show ();
    }

    protected void performDirectEdit (Point eventLocation) {
        if (getManager ().getClass () == TextDirectEditManager.class) {
            ((TextDirectEditManager) getManager ()).show (eventLocation.getSWTPoint ());
        }
    }

    private void performDirectEdit (char initialCharacter) {
        if (getManager () instanceof TextDirectEditManager) {
            ((TextDirectEditManager) getManager ()).show (initialCharacter);
        } else {
            performDirectEdit ();
        }
    }

    protected void performDirectEditRequest (Request request) {
        final Request theRequest = request;
        MEditingDomainGetter.getMEditingDomain ((View) getModel ()).runAsRead (new MRunnable () {

            public Object run () {
                if (isActive () && isEditable ()) {
                    if (theRequest instanceof DirectEditRequestWrapper) {
                        char initialCharacter = ((DirectEditRequestWrapper) theRequest).getInitialCharacter ();
                        performDirectEdit (initialCharacter);
                    } else if ((theRequest instanceof DirectEditRequest) && (getEditText ().equals (getLabelText ()))) {
                        DirectEditRequest editRequest = (DirectEditRequest) theRequest;
                        performDirectEdit (editRequest.getLocation ());
                    } else {
                        performDirectEdit ();
                    }

                }
                return null;
            }

        }

        );
    }

    protected void handleNotificationEvent (NotificationEvent event) {
        if (getParser () != null && getParser ().isAffectingEvent (event.getNotification (), getParserOptions ().intValue ())) {
            refreshLabel ();
            return;
        }
        if (getParser () instanceof ISemanticParser) {
            ISemanticParser modelParser = (ISemanticParser) getParser ();
            if (modelParser.areSemanticElementsAffected (null, event.getNotification ())) {
                removeSemanticListeners ();
                if (resolveSemanticElement () != null) addSemanticListeners ();

                refreshLabel ();
                return;
            }
        }
        super.handleNotificationEvent (event);
    }

    protected void handlePropertyChangeEvent (PropertyChangeEvent evt) {
        if (evt.getPropertyName ().equals (Properties.ID_FONTCOLOR)) {
            Integer c = (Integer) evt.getNewValue ();
            setFontColor (PresentationResourceManager.getInstance ().getColor (c));
        } else if (evt.getPropertyName ().equals (Properties.ID_FONTUNDERLINE)) refreshUnderline ();
        else if (evt.getPropertyName ().equals (Properties.ID_FONTSTRIKETHROUGH)) refreshStrikeThrough ();
        else if (isAffectingParserOptions (evt)) {
            refreshParserOptions ();
            refreshLabel ();
        } else super.handlePropertyChangeEvent (evt);

    }

    protected void refreshVisuals () {
        super.refreshVisuals ();
        refreshParserOptions ();
        refreshLabel ();
        refreshUnderline ();
        refreshStrikeThrough ();
        refreshFontColor ();
    }

    protected void setFontColor (Color color) {
        getLabel ().setForegroundColor (color);
    }

    protected void addNotationalListeners () {
        super.addNotationalListeners ();
        addListenerFilter ("PrimaryView", this, ViewUtil.getPropertyChangeNotifier (getPrimaryView ()));
    }

    protected void addSemanticListeners () {
        if (getParser () instanceof ISemanticParser) {
            EObject semanticElement = resolveSemanticElement ();
            parserElements = ((ISemanticParser) getParser ()).getSemanticElementsBeingParsed (semanticElement);
            for (int i = 0;
            i < parserElements.size (); i ++) addListenerFilter ("SemanticModel" + i, this, PresentationListener.getNotifier ((EObject) parserElements.get (i)));

        } else super.addSemanticListeners ();

    }

    protected void removeNotationalListeners () {
        super.removeNotationalListeners ();
        removeListenerFilter ("PrimaryView");
    }

    protected void removeSemanticListeners () {
        if (parserElements != null) {
            for (int i = 0;
            i < parserElements.size (); i ++) removeListenerFilter ("SemanticModel" + i);

        } else super.removeSemanticListeners ();

    }

    public int getNumIcons () {
        return numIcons;
    }

    public void setNumIcons (int numIcons) {
        this.numIcons = numIcons;
    }

    protected List getModelChildren () {
        return Collections.EMPTY_LIST;
    }

    public IParser getParser () {
        if (parser == null) {
            String parserHint = ((View) getModel ()).getType ();
            EObject element = resolveSemanticElement ();
            if (element != null) {
                ParserHintAdapter hintAdapter = new ParserHintAdapter (element, parserHint);
                parser = ParserService.getInstance ().getParser (hintAdapter);
            }
        }
        return parser;
    }

    protected void refreshLabel () {
        getLabel ().setText (getLabelText ());
        for (int i = 0;
        i < numIcons; i ++) getLabel ().setIcon (getLabelIcon (i), i);

        getLabel ().setToolTip (getLabelToolTip ());
    }

    protected void refreshUnderline () {
        FontStyle style = (FontStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getFontStyle ());
        if (style != null) getLabel ().setTextUnderline (style.isUnderline ());

    }

    protected void refreshStrikeThrough () {
        FontStyle style = (FontStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getFontStyle ());
        if (style != null) getLabel ().setTextStrikeThrough (style.isStrikeThrough ());

    }

    protected AccessibleEditPart getAccessibleEditPart () {
        if (accessibleEP == null) accessibleEP = new AccessibleGraphicalEditPart () {

            public void getName (AccessibleEvent e) {
                IFigure fig = getFigure ();
                if (fig instanceof WrapLabel) {
                    e.result = ((WrapLabel) fig).getText ();
                }
            }

        }

        ;

        return accessibleEP;
    }

    public IGraphicalEditPart getChildBySemanticHint (String semanticHint) {
        return null;
    }

    protected DirectEditManager getManager () {
        if (manager == null) setManager (new TextDirectEditManager (this, getLabel ().isTextWrapped () ? WrapTextCellEditor.class : TextCellEditorEx.class, new TextCellEditorLocator ()));

        return manager;
    }

    protected void setManager (DirectEditManager manager) {
        this.manager = manager;
    }

    public View getPrimaryChildView () {
        if (getModel () != null) {
            View view = (View) getModel ();
            return ViewUtil.getChildBySemanticHint (view, CommonParserHint.DESCRIPTION);
        }
        return null;
    }

}

