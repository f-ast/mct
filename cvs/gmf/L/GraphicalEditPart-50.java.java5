package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.ArrayList;

import java.util.Collection;

import java.util.Collections;

import java.util.HashMap;

import java.util.HashSet;

import java.util.Iterator;

import java.util.List;

import java.util.ListIterator;

import java.util.Map;

import java.util.Set;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.draw2d.IFigure;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.transaction.RunnableWithResult;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.emf.transaction.util.TransactionUtil;

import org.eclipse.gef.AccessibleEditPart;

import org.eclipse.gef.DragTracker;

import org.eclipse.gef.EditDomain;

import org.eclipse.gef.EditPart;

import org.eclipse.gef.EditPartViewer;

import org.eclipse.gef.EditPolicy;

import org.eclipse.gef.Request;

import org.eclipse.gef.RequestConstants;

import org.eclipse.gef.RootEditPart;

import org.eclipse.gef.SnapToHelper;

import org.eclipse.gef.commands.Command;

import org.eclipse.gef.commands.CompoundCommand;

import org.eclipse.gef.commands.UnexecutableCommand;

import org.eclipse.gef.editparts.AbstractGraphicalEditPart;

import org.eclipse.gef.requests.CreateConnectionRequest;

import org.eclipse.gef.requests.DropRequest;

import org.eclipse.gef.requests.GroupRequest;

import org.eclipse.gef.requests.ReconnectRequest;

import org.eclipse.gef.requests.TargetRequest;

import org.eclipse.gmf.runtime.common.core.util.IAdaptableSelection;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.services.action.filter.ActionFilterService;

import org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint;

import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;

import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DecorationEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.PropertyHandlerEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.internal.commands.ToggleCanonicalModeCommand;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.DummyEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.IEditableEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.SanpToHelperUtil;

import org.eclipse.gmf.runtime.diagram.ui.internal.services.editpolicy.EditPolicyService;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;

import org.eclipse.gmf.runtime.diagram.ui.label.ILabelDelegate;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditDomain;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;

import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest;

import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;

import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;

import org.eclipse.gmf.runtime.diagram.ui.util.EditPartUtil;

import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;

import org.eclipse.gmf.runtime.gef.ui.internal.editpolicies.GraphicalEditPolicyEx;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.FillStyle;

import org.eclipse.gmf.runtime.notation.FontStyle;

import org.eclipse.gmf.runtime.notation.LineStyle;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.NotationFactory;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.jface.preference.PreferenceConverter;

import org.eclipse.jface.resource.DeviceResourceException;

import org.eclipse.jface.resource.FontDescriptor;

import org.eclipse.jface.resource.JFaceResources;

import org.eclipse.jface.resource.ResourceManager;

import org.eclipse.swt.SWT;

import org.eclipse.swt.accessibility.AccessibleEvent;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.Font;

import org.eclipse.swt.graphics.FontData;

import org.eclipse.ui.IActionFilter;

public abstract class GraphicalEditPart extends AbstractGraphicalEditPart implements IGraphicalEditPart, IAdaptableSelection, NotificationListener {
    private Map listenerFilters;
    protected AccessibleEditPart accessibleEP;
    protected String elementGuid;
    private boolean isEditable = true;
    private TransactionalEditingDomain editingDomain;
    private FontData cachedFontData;

    public GraphicalEditPart (EObject model) {
        setModel (model);
    }

    public void activate () {
        if (isActive ()) {
            return;
        }
        addNotationalListeners ();
        EObject semanticElement;
        EObject semanticProxy;
        if (hasNotationView ()) {
            semanticProxy = ((View) super.getModel ()).getElement ();
            if ((semanticProxy == null) || semanticProxy.eIsProxy ()) {
                semanticElement = null;
            } else {
                semanticElement = semanticProxy;
            }
        } else {
            semanticProxy = (EObject) basicGetModel ();
            if ((semanticProxy != null) && semanticProxy.eIsProxy ()) {
                semanticElement = EMFCoreUtil.resolve (getEditingDomain (), semanticProxy);
            } else {
                semanticElement = semanticProxy;
            }
        }
        if (semanticElement != null) addSemanticListeners ();
        else if (semanticProxy != null) {
            addListenerFilter ("SemanticProxy", this, semanticProxy);
        }

        GraphicalEditPart.super.activate ();
    }

    protected void addListenerFilter (String filterId, NotificationListener listener, EObject element) {
        if (element == null) return;

        DiagramEventBroker diagramEventBroker = getDiagramEventBroker ();
        if (diagramEventBroker != null) {
            assert filterId != null;
            assert listener != null;
            if (listenerFilters == null) listenerFilters = new HashMap ();

            diagramEventBroker.addNotificationListener (element, listener);
            listenerFilters.put (filterId.intern (), new Object [] {element, listener});
        }
    }

    protected void addListenerFilter (String filterId, NotificationListener listener, EObject element, EStructuralFeature feature) {
        if (element == null) return;

        DiagramEventBroker diagramEventBroker = getDiagramEventBroker ();
        if (diagramEventBroker != null) {
            assert filterId != null;
            assert listener != null;
            if (listenerFilters == null) listenerFilters = new HashMap ();

            diagramEventBroker.addNotificationListener (element, feature, listener);
            listenerFilters.put (filterId.intern (), new Object [] {element, feature, listener});
        }
    }

    final protected org.eclipse.gef.ConnectionEditPart createConnection (Object connectionView) {
        return (org.eclipse.gef.ConnectionEditPart) createChild (connectionView);
    }

    final protected void createEditPolicies () {
        createDefaultEditPolicies ();
        EditPolicyService.getInstance ().createEditPolicies (this);
    }

    protected void createDefaultEditPolicies () {
        installEditPolicy (EditPolicyRoles.SEMANTIC_ROLE, new SemanticEditPolicy ());
        installEditPolicy (EditPolicyRoles.PROPERTY_HANDLER_ROLE, new PropertyHandlerEditPolicy ());
        installEditPolicy (EditPolicyRoles.DECORATION_ROLE, new DecorationEditPolicy ());
    }

    public void deactivate () {
        if (! isActive ()) {
            return;
        }
        removeNotationalListeners ();
        removeSemanticListeners ();
        if (listenerFilters != null) {
            for (Iterator i = listenerFilters.keySet ().iterator ();
            i.hasNext ();) {
                Object [] obj = (Object []) listenerFilters.get (i.next ());
                if (obj.length > 2) {
                    getDiagramEventBroker ().removeNotificationListener ((EObject) obj [0], (EStructuralFeature) obj [1], (NotificationListener) obj [2]);
                } else {
                    getDiagramEventBroker ().removeNotificationListener ((EObject) obj [0], (NotificationListener) obj [1]);
                }
            }
        }
        super.deactivate ();
    }

    public void removeNotify () {
        View view = getNotationView ();
        if (view != null && ! view.isVisible ()) {
            setConnectionsVisibility (false);
        }
        super.removeNotify ();
        if (cachedFontData != null) {
            getResourceManager ().destroyFont (FontDescriptor.createFrom (cachedFontData));
            cachedFontData = null;
        }
    }

    protected void executeCommand (Command command) {
        getViewer ().getEditDomain ().getCommandStack ().execute (command);
    }

    final protected Object basicGetModel () {
        return super.getModel ();
    }

    public Object getAdapter (Class key) {
        if (key == IActionFilter.class) {
            return ActionFilterService.getInstance ();
        }
        if (View.class.isAssignableFrom (key)) {
            Object _model = getModel ();
            if (key.isInstance (_model)) return _model;
            else return null;

        }
        if (key == SnapToHelper.class) {
            return SanpToHelperUtil.getSnapHelper (this);
        }
        Object model = basicGetModel ();
        if (model != null && EObject.class.isAssignableFrom (key)) {
            EObject semanticObject = null;
            if (hasNotationView ()) {
                semanticObject = ViewUtil.resolveSemanticElement ((View) model);
            } else {
                EObject element = (EObject) model;
                if (element.eIsProxy ()) {
                    semanticObject = EMFCoreUtil.resolve (getEditingDomain (), element);
                }
            }
            if ((semanticObject != null) && key.isInstance (semanticObject)) {
                return semanticObject;
            } else if (key.isInstance (model)) {
                return model;
            }

        }
        return super.getAdapter (key);
    }

    public IGraphicalEditPart getChildBySemanticHintOnPrimaryView (String semanticHint) {
        View primaryView = getPrimaryView ();
        View childView = ViewUtil.getChildBySemanticHint (primaryView, semanticHint);
        if (childView != null) return (IGraphicalEditPart) getViewer ().getEditPartRegistry ().get (childView);

        return null;
    }

    public IGraphicalEditPart getChildBySemanticHint (String semanticHint) {
        View view;
        if (hasNotationView () && (view = (View) super.getModel ()) != null) {
            view = ViewUtil.getChildBySemanticHint (view, semanticHint);
            if (view != null) {
                IGraphicalEditPart ep = (IGraphicalEditPart) getViewer ().getEditPartRegistry ().get (view);
                if (ep == null) {
                    ep = new DummyEditPart (view);
                }
                return ep;
            }
        }
        return null;
    }

    public View getChildViewBySemanticHint (String semanticHint) {
        View view;
        if (hasNotationView () && (view = (View) super.getModel ()) != null) {
            return ViewUtil.getChildBySemanticHint (view, semanticHint);
        }
        return null;
    }

    private static volatile int GETCOMMAND_RECURSIVE_COUNT = 0;
    private static Set _disableCanonicalEditPolicyList = new HashSet ();

    public Command getCommand (Request _request) {
        if (! isEditModeEnabled ()) {
            if (RequestConstants.REQ_OPEN.equals (_request.getType ())) {
            } else {
                return UnexecutableCommand.INSTANCE;
            }
        }
        Command cmd = null;
        try {
            GETCOMMAND_RECURSIVE_COUNT ++;
            final Request request = _request;
            try {
                cmd = (Command) getEditingDomain ().runExclusive (new RunnableWithResult.Impl () {

                    public void run () {
                        setResult (GraphicalEditPart.super.getCommand (request));
                    }

                }

                );
            } catch (InterruptedException e) {
                Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "getCommand", e);
                Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "getCommand", e);
            }
            if (cmd != null) {
                _disableCanonicalEditPolicyList.addAll (disableCanonicalFor (_request));
            }
            GETCOMMAND_RECURSIVE_COUNT --;
            if (GETCOMMAND_RECURSIVE_COUNT == 0) {
                if (cmd != null && ! _disableCanonicalEditPolicyList.isEmpty ()) {
                    CompoundCommand cc = new CompoundCommand ();
                    cc.setLabel (cmd.getLabel ());
                    ToggleCanonicalModeCommand tcmd = ToggleCanonicalModeCommand.getToggleCanonicalModeCommand (_disableCanonicalEditPolicyList, false);
                    cc.add (tcmd);
                    cc.add (cmd);
                    ToggleCanonicalModeCommand tcmd2 = ToggleCanonicalModeCommand.getToggleCanonicalModeCommand (tcmd, true);
                    if (tcmd2 != null) {
                        tcmd2.setDomain (getEditingDomain ());
                    }
                    cc.add (tcmd2);
                    _disableCanonicalEditPolicyList.clear ();
                    return cc.unwrap ();
                }
            }
        } catch (RuntimeException t) {
            GETCOMMAND_RECURSIVE_COUNT = 0;
            throw t;
        }
        return cmd;
    }

    protected Collection disableCanonicalFor (final Request request) {
        Set hosts = new HashSet ();
        if ((request instanceof EditCommandRequestWrapper) || request instanceof TargetRequest || request instanceof DropRequest) {
            hosts.add (this);
            hosts.add (getParent ());
        }
        if ((request instanceof ReconnectRequest)) {
            ReconnectRequest reconnect = (ReconnectRequest) request;
            hosts.add (this);
            hosts.add (getParent ());
            if (reconnect.getTarget () != null) {
                EditPart target = reconnect.getTarget ();
                addEditPartAndParent (hosts, target);
            }
            if (reconnect.getConnectionEditPart () != null) {
                org.eclipse.gef.ConnectionEditPart connectionEditPart = reconnect.getConnectionEditPart ();
                if (connectionEditPart.getSource () != null) {
                    EditPart srcEP = connectionEditPart.getSource ();
                    addEditPartAndParent (hosts, srcEP);
                }
                if (connectionEditPart.getTarget () != null) {
                    EditPart trgEP = connectionEditPart.getTarget ();
                    addEditPartAndParent (hosts, trgEP);
                }
            }
        }
        if ((request instanceof CreateConnectionRequest)) {
            CreateConnectionRequest ccvr = (CreateConnectionRequest) request;
            hosts.add (this);
            hosts.add (getParent ());
            if (ccvr.getSourceEditPart () != null) {
                hosts.add (ccvr.getSourceEditPart ());
                hosts.add (ccvr.getSourceEditPart ().getParent ());
            }
            if (ccvr.getTargetEditPart () != null) {
                hosts.add (ccvr.getTargetEditPart ());
                hosts.add (ccvr.getTargetEditPart ().getParent ());
            }
        }
        if ((request instanceof GroupRequest)) {
            List parts = ((GroupRequest) request).getEditParts ();
            hosts.add (this);
            hosts.add (getParent ());
            Iterator editparts = parts == null ? Collections.EMPTY_LIST.iterator () : parts.iterator ();
            while (editparts.hasNext ()) {
                EditPart ep = (EditPart) editparts.next ();
                addEditPartAndParent (hosts, ep);
            }
        }
        if (this instanceof IBorderItemEditPart) {
            if ((request instanceof CreateConnectionViewRequest)) {
                CreateConnectionViewRequest ccvr = (CreateConnectionViewRequest) request;
                if (ccvr.getSourceEditPart () instanceof IBorderItemEditPart) {
                    hosts.add (ccvr.getSourceEditPart ().getParent ().getParent ());
                }
                if (ccvr.getTargetEditPart () instanceof IBorderItemEditPart) {
                    hosts.add (ccvr.getTargetEditPart ().getParent ().getParent ());
                }
            }
        }
        return hosts;
    }

    private void addEditPartAndParent (Set hosts, EditPart editPart) {
        hosts.add (editPart);
        hosts.add (editPart.getParent ());
    }

    protected IFigure getContentPaneFor (IGraphicalEditPart editPart) {
        return getContentPane ();
    }

    protected Diagram getDiagramView () {
        return (Diagram) getRoot ().getContents ().getModel ();
    }

    public final View getPrimaryView () {
        for (EditPart parent = this;
        parent != null; parent = parent.getParent ()) if (parent instanceof IPrimaryEditPart && parent.getModel () instanceof View) return (View) parent.getModel ();

        return null;
    }

    protected EditDomain getEditDomain () {
        EditDomain result = null;
        try {
            result = getRoot ().getViewer ().getEditDomain ();
        } catch (NullPointerException nullPointerException) {
            return null;
        }
        return result;
    }

    public IDiagramEditDomain getDiagramEditDomain () {
        return (IDiagramEditDomain) getEditDomain ();
    }

    protected List getModelChildren () {
        Object model = getModel ();
        if (model != null && model instanceof View) {
            return new ArrayList (((View) model).getVisibleChildren ());
        }
        return Collections.EMPTY_LIST;
    }

    public Object getStructuralFeatureValue (EStructuralFeature feature) {
        if (hasNotationView ()) return ViewUtil.getPropertyValue ((View) super.getModel (), feature, feature.getEContainingClass ());
        else return null;

    }

    public EObject resolveSemanticElement () {
        EObject semanticElement = null;
        Object basicModel = basicGetModel ();
        if (hasNotationView ()) {
            semanticElement = ((View) basicModel).getElement ();
        } else if (basicModel instanceof EObject) {
            semanticElement = (EObject) basicModel;
        }

        if (semanticElement == null) {
            return null;
        }
        if (! semanticElement.eIsProxy ()) {
            return semanticElement;
        }
        try {
            return (EObject) getEditingDomain ().runExclusive (new RunnableWithResult.Impl () {

                public void run () {
                    Object model = getModel ();
                    if (model instanceof View) {
                        setResult (ViewUtil.resolveSemanticElement ((View) getModel ()));
                    } else if (model instanceof EObject) {
                        EObject element = (EObject) model;
                        if (element.eIsProxy ()) setResult (EMFCoreUtil.resolve (getEditingDomain (), element));
                        else setResult (element);

                    }

                }

            }

            );
        } catch (InterruptedException e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "resolveSemanticElement", e);
            Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "resolveSemanticElement", e);
            return null;
        }
    }

    public TopGraphicEditPart getTopGraphicEditPart () {
        EditPart editPart = this;
        while (editPart instanceof IGraphicalEditPart) {
            if (editPart instanceof TopGraphicEditPart) return (TopGraphicEditPart) editPart;

            editPart = editPart.getParent ();
        }
        return null;
    }

    public View getNotationView () {
        Object model = getModel ();
        if (model instanceof View) return (View) model;

        return null;
    }

    protected void reactivateSemanticModel () {
        removeSemanticListeners ();
        if (resolveSemanticElement () != null) addSemanticListeners ();

    }

    public EditPart findEditPart (EditPart epBegin, EObject theElement) {
        if (theElement == null) {
            return null;
        }
        EditPart epStart = null;
        if (epBegin == null) {
            epStart = this;
        } else {
            epStart = epBegin;
        }
        final View view = (View) ((IAdaptable) epStart).getAdapter (View.class);
        if (view != null) {
            EObject el = ViewUtil.resolveSemanticElement (view);
            if ((el != null) && el.equals (theElement)) {
                return epStart;
            }
        }
        ListIterator childLI = epStart.getChildren ().listIterator ();
        while (childLI.hasNext ()) {
            EditPart epChild = (EditPart) childLI.next ();
            EditPart elementEP = findEditPart (epChild, theElement);
            if (elementEP != null) {
                return elementEP;
            }
        }
        return null;
    }

    public void refresh () {
        try {
            getEditingDomain ().runExclusive (new Runnable () {

                public void run () {
                    EditPolicyIterator i = getEditPolicyIterator ();
                    while (i.hasNext ()) {
                        EditPolicy policy = i.next ();
                        if (policy instanceof GraphicalEditPolicyEx) {
                            ((GraphicalEditPolicyEx) policy).refresh ();
                        }
                    }
                    GraphicalEditPart.super.refresh ();
                }

            }

            );
        } catch (InterruptedException e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "refresh", e);
            Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "refresh", e);
        }
    }

    protected void refreshBackgroundColor () {
        FillStyle style = (FillStyle) getPrimaryView ().getStyle (NotationPackage.Literals.FILL_STYLE);
        if (style != null) {
            setBackgroundColor (DiagramColorRegistry.getInstance ().getColor (new Integer (style.getFillColor ())));
        }
    }

    protected void refreshFont () {
        FontStyle style = (FontStyle) getPrimaryView ().getStyle (NotationPackage.Literals.FONT_STYLE);
        if (style != null) {
            setFont (new FontData (style.getFontName (), style.getFontHeight (), (style.isBold () ? SWT.BOLD : SWT.NORMAL) | (style.isItalic () ? SWT.ITALIC : SWT.NORMAL)));
        }
    }

    protected void refreshFontColor () {
        FontStyle style = (FontStyle) getPrimaryView ().getStyle (NotationPackage.Literals.FONT_STYLE);
        if (style != null) {
            setFontColor (DiagramColorRegistry.getInstance ().getColor (new Integer (style.getFontColor ())));
        }
    }

    protected void refreshForegroundColor () {
        LineStyle style = (LineStyle) getPrimaryView ().getStyle (NotationPackage.Literals.LINE_STYLE);
        if (style != null) {
            setForegroundColor (DiagramColorRegistry.getInstance ().getColor (new Integer (style.getLineColor ())));
        }
    }

    protected void refreshVisibility () {
        Object model = null;
        EditPart ep = this;
        while (! (model instanceof View) && ep != null) {
            model = ep.getModel ();
            ep = ep.getParent ();
        }
        if (model instanceof View) setVisibility (((View) model).isVisible ());

    }

    protected void refreshVisuals () {
        super.refreshVisuals ();
        refreshVisibility ();
    }

    protected void removeListenerFilter (String filterId) {
        if (listenerFilters == null) return;

        Object [] objects = (Object []) listenerFilters.remove (filterId);
        if (objects == null) return;

        if (objects.length > 2) {
            getDiagramEventBroker ().removeNotificationListener ((EObject) objects [0], (EStructuralFeature) objects [1], (NotificationListener) objects [2]);
        } else {
            getDiagramEventBroker ().removeNotificationListener ((EObject) objects [0], (NotificationListener) objects [1]);
        }
    }

    protected void setBackgroundColor (Color color) {
        getFigure ().setBackgroundColor (color);
    }

    protected void setFont (FontData fontData) {
        if (cachedFontData != null && cachedFontData.equals (fontData)) {
            return;
        }
        try {
            Font newFont = getResourceManager ().createFont (FontDescriptor.createFrom (fontData));
            getFigure ().setFont (newFont);
            getFigure ().repaint ();
            if (cachedFontData != null) {
                getResourceManager ().destroyFont (FontDescriptor.createFrom (cachedFontData));
            }
            cachedFontData = fontData;
        } catch (DeviceResourceException e) {
            Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "setFont", e);
            Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "setFont", e);
        }
    }

    protected void setFontColor (Color color) {
    }

    protected void setForegroundColor (Color color) {
        getFigure ().setForegroundColor (color);
    }

    public void setStructuralFeatureValue (EStructuralFeature feature, Object value) {
        if (hasNotationView () && (feature != null)) {
            ViewUtil.setPropertyValue ((View) super.getModel (), feature, feature.getEContainingClass (), value);
        }
    }

    protected void setVisibility (boolean vis) {
        if (! vis && getSelected () != SELECTED_NONE) getViewer ().deselect (this);

        IFigure _figure = getFigure ();
        if (_figure.isVisible () == vis) {
            return;
        }
        setConnectionsVisibility (vis);
        _figure.setVisible (vis);
        _figure.revalidate ();
    }

    protected void setConnectionsVisibility (boolean visibility) {
        List _srcConnections = getSourceConnections ();
        for (Iterator iter = _srcConnections.iterator ();
        iter.hasNext ();) {
            ConnectionEditPart connection = (ConnectionEditPart) iter.next ();
            if (connection.getFigure ().isVisible () != visibility) connection.setVisibility (visibility);

        }
        List _targetConnections = getTargetConnections ();
        for (Iterator iter = _targetConnections.iterator ();
        iter.hasNext ();) {
            ConnectionEditPart connection = (ConnectionEditPart) iter.next ();
            if (connection.getFigure ().isVisible () != visibility) connection.setVisibility (visibility);

        }
    }

    protected void addNotationalListeners () {
        if (hasNotationView ()) {
            addListenerFilter ("View", this, (View) getModel ());
        }
    }

    protected void addSemanticListeners () {
        addListenerFilter ("SemanticElement", this, resolveSemanticElement ());
    }

    protected void removeNotationalListeners () {
        removeListenerFilter ("View");
    }

    protected void removeSemanticListeners () {
        removeListenerFilter ("SemanticElement");
    }

    public void performRequest (Request request) {
        if (! isEditModeEnabled ()) {
            if (RequestConstants.REQ_OPEN.equals (request.getType ())) {
            } else {
                return;
            }
        }
        if (RequestConstants.REQ_DIRECT_EDIT == request.getType ()) {
            performDirectEditRequest (request);
        } else {
            EditPart targetEditPart = getTargetEditPart (request);
            if (targetEditPart != null) {
                Command command = targetEditPart.getCommand (request);
                if (command != null) {
                    getDiagramEditDomain ().getDiagramCommandStack ().execute (command);
                    return;
                }
            }
        }
    }

    protected void performDirectEditRequest (Request request) {
    }

    protected AccessibleEditPart getAccessibleEditPart () {
        if (accessibleEP == null) accessibleEP = new AccessibleGraphicalEditPart () {

            private String getSemanticName () {
                EObject semanticElement = resolveSemanticElement ();
                if (semanticElement != null) {
                    String name = semanticElement.getClass ().getName ();
                    int startIndex = name.lastIndexOf ('.') + 1;
                    int endIndex = name.lastIndexOf ("Impl");
                    return name.substring (startIndex, endIndex);
                }
                return null;
            }

            public void getName (AccessibleEvent e) {
                IGraphicalEditPart childEP = getChildBySemanticHint (CommonParserHint.NAME);
                if (childEP == null) {
                    childEP = getChildBySemanticHint (CommonParserHint.DESCRIPTION);
                }
                if (childEP != null) {
                    ILabelDelegate label = (ILabelDelegate) childEP.getAdapter (ILabelDelegate.class);
                    if (label != null) {
                        e.result = label.getText ();
                    }
                } else {
                    e.result = getSemanticName ();
                }
            }

        }

        ;

        return accessibleEP;
    }

    protected void registerModel () {
        EditPartViewer viewer = getViewer ();
        if (hasNotationView ()) {
            super.registerModel ();
        } else {
            viewer.getEditPartRegistry ().put (basicGetModel (), this);
        }
        EObject ref = null;
        if (hasNotationView ()) ref = getNotationView ().getElement ();
        else ref = (EObject) basicGetModel ();

        if (ref == null) {
            return;
        }
        elementGuid = EMFCoreUtil.getProxyID (ref);
        ((IDiagramGraphicalViewer) viewer).registerEditPartForElement (elementGuid, this);
    }

    protected void unregisterModel () {
        EditPartViewer viewer = getViewer ();
        if (hasNotationView ()) super.unregisterModel ();
        else {
            Map registry = viewer.getEditPartRegistry ();
            if (registry.get (basicGetModel ()) == this) registry.remove (basicGetModel ());

        }
        if (elementGuid == null) {
            return;
        }
        ((IDiagramGraphicalViewer) viewer).unregisterEditPartForElement (elementGuid, this);
    }

    protected final void refreshChild (GraphicalEditPart child) {
        removeChild (child);
        refreshChildren ();
    }

    protected final void refreshSourceConnection (ConnectionEditPart conn) {
        removeSourceConnection (conn);
        refreshSourceConnections ();
    }

    protected final void refreshTargetConnection (ConnectionEditPart conn) {
        removeTargetConnection (conn);
        refreshTargetConnections ();
    }

    protected final void handleMajorSemanticChange () {
        if (getParent () instanceof GraphicalEditPart) ((GraphicalEditPart) getParent ()).refreshChild (this);
        else if (getParent () instanceof ConnectionEditPart) ((ConnectionEditPart) getParent ()).refreshChild (this);

    }

    public DragTracker getDragTracker (Request request) {
        return new DragEditPartsTrackerEx (this);
    }

    public boolean isCanonical () {
        CanonicalEditPolicy policy = (CanonicalEditPolicy) getEditPolicy (EditPolicyRoles.CANONICAL_ROLE);
        return policy == null ? false : policy.isActive ();
    }

    public boolean isSelectable () {
        return getFigure ().isShowing ();
    }

    public void disableEditMode () {
        if (! isEditModeEnabled ()) {
            return;
        }
        List l = getSourceConnections ();
        int size = l.size ();
        for (int i = 0;
        i < size; i ++) {
            Object obj = l.get (i);
            if (obj instanceof IEditableEditPart) {
                ((IEditableEditPart) obj).disableEditMode ();
            }
        }
        List c = getChildren ();
        size = c.size ();
        for (int i = 0;
        i < size; i ++) {
            Object obj = c.get (i);
            if (obj instanceof IEditableEditPart) {
                ((IEditableEditPart) obj).disableEditMode ();
            }
        }
        isEditable = false;
    }

    protected void addChild (EditPart child, int index) {
        super.addChild (child, index);
        if (child instanceof GraphicalEditPart) {
            GraphicalEditPart gEP = (GraphicalEditPart) child;
            boolean editMode = isEditModeEnabled ();
            if (editMode != gEP.isEditModeEnabled ()) {
                if (editMode) gEP.enableEditMode ();
                else gEP.disableEditMode ();

            }
        }
    }

    public void enableEditMode () {
        if (isEditModeEnabled ()) {
            return;
        }
        isEditable = true;
        List c = getChildren ();
        int size = c.size ();
        for (int i = 0;
        i < size; i ++) {
            Object obj = c.get (i);
            if (obj instanceof IEditableEditPart) {
                ((IEditableEditPart) obj).enableEditMode ();
            }
        }
        List l = getSourceConnections ();
        size = l.size ();
        for (int i = 0;
        i < size; i ++) {
            Object obj = l.get (i);
            if (obj instanceof IEditableEditPart) {
                ((IEditableEditPart) obj).enableEditMode ();
            }
        }
    }

    public boolean isEditModeEnabled () {
        if (EditPartUtil.isWriteTransactionInProgress (this, true, true)) return false;

        return isEditable;
    }

    public void showSourceFeedback (Request request) {
        if (! isEditModeEnabled ()) {
            return;
        }
        super.showSourceFeedback (request);
    }

    public void showTargetFeedback (Request request) {
        if (! isEditModeEnabled ()) {
            return;
        }
        super.showTargetFeedback (request);
    }

    public void eraseSourceFeedback (Request request) {
        if (! isEditModeEnabled ()) {
            return;
        }
        super.eraseSourceFeedback (request);
    }

    public void eraseTargetFeedback (Request request) {
        if (! isEditModeEnabled ()) {
            return;
        }
        super.eraseTargetFeedback (request);
    }

    public EditPart getPrimaryChildEditPart () {
        if (getChildren ().size () > 0) return (EditPart) getChildren ().get (0);

        return null;
    }

    public PreferencesHint getDiagramPreferencesHint () {
        RootEditPart root = getRoot ();
        if (root instanceof IDiagramPreferenceSupport) {
            return ((IDiagramPreferenceSupport) root).getPreferencesHint ();
        }
        return PreferencesHint.USE_DEFAULTS;
    }

    public void notifyChanged (Notification notification) {
        if (isActive ()) {
            handleNotificationEvent (notification);
        }
    }

    public Command transactionAboutToCommit (Notification notification) {
        return null;
    }

    protected void handleNotificationEvent (Notification event) {
        if (NotationPackage.Literals.VIEW__PERSISTED_CHILDREN.equals (event.getFeature ()) || NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN.equals (event.getFeature ())) {
            refreshChildren ();
        } else if (NotationPackage.Literals.VIEW__VISIBLE.equals (event.getFeature ())) {
            Object notifier = event.getNotifier ();
            if (notifier == getModel ()) refreshVisibility ();
            else {
                if (! (event.getNotifier () instanceof Edge)) refreshChildren ();

            }
        } else if (NotationPackage.Literals.VIEW__ELEMENT.equals (event.getFeature ())) {
            handleMajorSemanticChange ();
        }

    }

    protected IMapMode getMapMode () {
        RootEditPart root = getRoot ();
        if (root instanceof DiagramRootEditPart) {
            DiagramRootEditPart dgrmRoot = (DiagramRootEditPart) root;
            return dgrmRoot.getMapMode ();
        }
        return MapModeUtil.getMapMode ();
    }

    public boolean hasNotationView () {
        return true;
    }

    public Object getModel () {
        if (hasNotationView ()) {
            return super.getModel ();
        } else {
            Object _model = basicGetModel ();
            Node node = NotationFactory.eINSTANCE.createNode ();
            ;
            node.setElement ((EObject) _model);
            return node;
        }
    }

    public TransactionalEditingDomain getEditingDomain () {
        if (editingDomain == null) {
            editingDomain = TransactionUtil.getEditingDomain (getModel ());
            if (editingDomain == null) {
                editingDomain = TransactionUtil.getEditingDomain (getDiagramView ());
            }
        }
        return editingDomain;
    }

    protected IFigure createFigure () {
        return null;
    }

    public void setModel (Object model) {
        editingDomain = null;
        super.setModel (model);
    }

    private DiagramEventBroker getDiagramEventBroker () {
        TransactionalEditingDomain theEditingDomain = getEditingDomain ();
        if (theEditingDomain != null) {
            return DiagramEventBroker.getInstance (theEditingDomain);
        }
        return null;
    }

    public RootEditPart getRoot () {
        if (getParent () != null) {
            return super.getRoot ();
        }
        return null;
    }

    public Object getPreferredValue (EStructuralFeature feature) {
        Object preferenceStore = getDiagramPreferencesHint ().getPreferenceStore ();
        if (preferenceStore instanceof IPreferenceStore) {
            if (feature == NotationPackage.eINSTANCE.getLineStyle_LineColor ()) {
                return FigureUtilities.RGBToInteger (PreferenceConverter.getColor ((IPreferenceStore) preferenceStore, IPreferenceConstants.PREF_LINE_COLOR));
            } else if (feature == NotationPackage.eINSTANCE.getFontStyle_FontColor ()) {
                return FigureUtilities.RGBToInteger (PreferenceConverter.getColor ((IPreferenceStore) preferenceStore, IPreferenceConstants.PREF_FONT_COLOR));
            } else if (feature == NotationPackage.eINSTANCE.getFillStyle_FillColor ()) {
                return FigureUtilities.RGBToInteger (PreferenceConverter.getColor ((IPreferenceStore) preferenceStore, IPreferenceConstants.PREF_FILL_COLOR));
            }

        }
        return getStructuralFeatureValue (feature);
    }

    protected ResourceManager getResourceManager () {
        EditPartViewer viewer = getViewer ();
        if (viewer instanceof DiagramGraphicalViewer) {
            return ((DiagramGraphicalViewer) viewer).getResourceManager ();
        }
        return JFaceResources.getResources ();
    }

}

