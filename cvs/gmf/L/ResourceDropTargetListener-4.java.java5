package org.eclipse.gmf.runtime.common.ui.services.dnd.ide.drop;

import java.util.Iterator;

import java.util.List;

import org.eclipse.core.resources.IResource;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.jface.util.LocalSelectionTransfer;

import org.eclipse.jface.viewers.ISelection;

import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.jface.viewers.StructuredViewer;

import org.eclipse.swt.dnd.DND;

import org.eclipse.swt.dnd.DropTargetEvent;

import org.eclipse.swt.dnd.FileTransfer;

import org.eclipse.swt.dnd.TransferData;

import org.eclipse.ui.views.navigator.NavigatorDropAdapter;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.common.ui.services.dnd.core.ITransferAgent;

import org.eclipse.gmf.runtime.common.ui.services.dnd.core.TransferId;

import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetContext;

import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetEvent;

import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetListener;

import org.eclipse.gmf.runtime.common.ui.services.dnd.ide.core.IDETransferId;

public class ResourceDropTargetListener extends NavigatorDropAdapter implements IDropTargetListener {

    public ResourceDropTargetListener (StructuredViewer viewer) {
        super (viewer);
    }

    public ICommand getExecutableContext (DropTargetEvent event) {
        return null;
    }

    public boolean canSupport (IDropTargetContext context, IDropTargetEvent currentEvent, ITransferAgent currentAgent) {
        Object target = context.getCurrentTarget ();
        return (target instanceof IResource) || ((target instanceof IAdaptable) && ((IAdaptable) target).getAdapter (IResource.class) != null);
    }

    public void setFeedback (DropTargetEvent event) {
        if (FileTransfer.getInstance ().isSupportedType (event.currentDataType)) if ((event.operations & DND.DROP_COPY) != 0) {
            event.detail = DND.DROP_COPY;
        } else {
            event.detail = DND.DROP_NONE;
        }

    }

    public String [] getSupportingTransferIds () {
        return new String [] {IDETransferId.NAV_SELECTION_TRANSFER, TransferId.FILE_TRANSFER};
    }

    public void dropAccept (DropTargetEvent event) {
        Object target = getCurrentTarget ();
        if (! (target instanceof IResource)) {
            if (target instanceof IAdaptable) {
                target = ((IAdaptable) target).getAdapter (IResource.class);
            }
        }
        if (! validateDrop (target, event.detail, event.currentDataType)) {
            event.detail = DND.DROP_NONE;
        }
    }

    public boolean validateDrop (Object target, int dragOperation, TransferData transferType) {
        Object adaptedTarget = target;
        if (! (adaptedTarget instanceof IResource)) {
            if (adaptedTarget instanceof IAdaptable) {
                adaptedTarget = ((IAdaptable) target).getAdapter (IResource.class);
            }
        }
        if (LocalSelectionTransfer.getTransfer ().isSupportedType (transferType)) {
            ISelection selection = LocalSelectionTransfer.getTransfer ().getSelection ();
            if (selection instanceof IStructuredSelection) {
                List selectionList = ((IStructuredSelection) selection).toList ();
                Iterator i = selectionList.iterator ();
                while (i.hasNext ()) {
                    if (! (i.next () instanceof IResource)) {
                        return false;
                    }
                }
            }
        }
        return super.validateDrop (adaptedTarget, dragOperation, transferType);
    }

    protected Object getCurrentTarget () {
        Object target = super.getCurrentTarget ();
        if (! (target instanceof IResource)) {
            if (target instanceof IAdaptable) {
                target = ((IAdaptable) target).getAdapter (IResource.class);
            }
        }
        return target;
    }

}

