package org.eclipse.gmf.runtime.diagram.ui.providers.internal.parsers;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.gmf.runtime.common.core.command.ICommand;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;

import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;

import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;

import org.eclipse.gmf.runtime.diagram.core.commands.SetPropertyCommand;

import org.eclipse.gmf.runtime.diagram.core.util.ViewType;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;

import org.eclipse.gmf.runtime.notation.DescriptionStyle;

import org.eclipse.gmf.runtime.notation.NotationPackage;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.text.contentassist.IContentAssistProcessor;

public class DescriptionParser implements IParser {
    static protected IParser instance = null;
    static final String DESC_DEFAULT_STR = StringStatics.BLANK;

    protected DescriptionParser () {
        super ();
    }

    static public IParser getInstance () {
        if (instance == null) {
            instance = new DescriptionParser ();
        }
        return instance;
    }

    public String getEditString (IAdaptable adapter, int flags) {
        return getPrintString (adapter, flags);
    }

    public ICommand getParseCommand (IAdaptable adapter, String newString, int flags) {
        return new SetPropertyCommand (adapter, Properties.ID_DESCRIPTION, ViewType.TEXT, newString);
    }

    public String getPrintString (IAdaptable adapter, int flags) {
        final View view = (View) adapter.getAdapter (View.class);
        DescriptionStyle style = (DescriptionStyle) view.getStyle (NotationPackage.eINSTANCE.getDescriptionStyle ());
        if (style != null) {
            String descString = style.getDescription ();
            if (descString == null || descString.length () == 0) descString = DESC_DEFAULT_STR;

            return descString;
        }
        return StringStatics.BLANK;
    }

    public boolean isAffectingEvent (Object event, int flags) {
        if (event instanceof Notification) {
            Object feature = ((Notification) event).getFeature ();
            if (feature == NotationPackage.eINSTANCE.getDescriptionStyle_Description ()) {
                return true;
            }
        }
        return false;
    }

    public IParserEditStatus isValidEditString (IAdaptable element, String editString) {
        return ParserEditStatus.EDITABLE_STATUS;
    }

    public IContentAssistProcessor getCompletionProcessor (IAdaptable element) {
        return null;
    }

}

