package org.eclipse.gmf.runtime.diagram.ui.printing.internal.printpreview;

import java.util.ArrayList;

import java.util.List;

import javax.print.PrintService;

import javax.print.PrintServiceLookup;

import org.eclipse.core.runtime.Assert;

import org.eclipse.draw2d.Graphics;

import org.eclipse.draw2d.SWTGraphics;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gef.LayerConstants;

import org.eclipse.gef.RootEditPart;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.common.core.util.Trace;

import org.eclipse.gmf.runtime.common.ui.action.actions.IPrintActionHelper;

import org.eclipse.gmf.runtime.common.ui.util.WindowUtil;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editparts.IDiagramPreferenceSupport;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.PageBreakEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.figures.PageBreaksFigure;

import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageInfoHelper;

import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageInfoHelper.PageMargins;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.DiagramPrintingDebugOptions;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.DiagramPrintingPlugin;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.DiagramPrintingStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.l10n.DiagramUIPrintingMessages;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.l10n.DiagramUIPrintingPluginImages;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.util.HeaderAndFooterHelper;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.util.PrintHelperUtil;

import org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.MapModeGraphics;

import org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScaledGraphics;

import org.eclipse.gmf.runtime.draw2d.ui.internal.mapmode.DiagramMapModeUtil;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.jface.dialogs.Dialog;

import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.swt.SWT;

import org.eclipse.swt.SWTError;

import org.eclipse.swt.events.SelectionAdapter;

import org.eclipse.swt.events.SelectionEvent;

import org.eclipse.swt.events.SelectionListener;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.graphics.GC;

import org.eclipse.swt.graphics.Image;

import org.eclipse.swt.graphics.Point;

import org.eclipse.swt.layout.GridData;

import org.eclipse.swt.layout.GridLayout;

import org.eclipse.swt.widgets.Combo;

import org.eclipse.swt.widgets.Composite;

import org.eclipse.swt.widgets.Control;

import org.eclipse.swt.widgets.Display;

import org.eclipse.swt.widgets.Group;

import org.eclipse.swt.widgets.Label;

import org.eclipse.swt.widgets.Menu;

import org.eclipse.swt.widgets.MenuItem;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.swt.widgets.Text;

import org.eclipse.swt.widgets.ToolBar;

import org.eclipse.swt.widgets.ToolItem;

import org.eclipse.ui.IEditorPart;

import org.eclipse.ui.PlatformUI;

public class PrintPreviewHelper {
    protected IPrintActionHelper printActionHelper;
    protected int userX = 0;
    protected int userY = 0;
    protected int numberOfRowsToDisplay = 2;
    protected int numberOfColumnsToDisplay = 2;
    protected DiagramEditPart diagramEditPart;
    protected Rectangle pageBreakBounds;
    protected Composite body;
    protected Composite composite;
    protected int buttonBarHeight;
    protected Shell shell;
    private Shell tempShell;
    protected ToolItem printTool;
    protected boolean enablePrinting = true;
    protected ToolItem pagesTool;
    protected ToolItem leftTool;
    protected ToolItem rightTool;
    protected ToolItem upTool;
    protected ToolItem downTool;
    protected ToolItem closeTool;
    private List imageList = new ArrayList ();
    protected static final int BORDER_SIZE = 20;
    private static final Color BACKGROUND_COLOR = new Color (Display.getDefault (), 124, 124, 124);
    protected Image printImage;
    protected Image disabledPrintImage;
    protected Image pageImage;
    protected Image leftImage;
    protected Image disabledLeftImage;
    protected Image rightImage;
    protected Image disabledRightImage;
    protected Image upImage;
    protected Image disabledUpImage;
    protected Image downImage;
    protected Image disabledDownImage;
    protected Image closeImage;
    protected double userScale = 1;
    private boolean fitToPage = false;
    private int [] zoomLevels = {25, 50, 75, 100, 150, 200, 250, 300, 400};
    private static final String FIT_TO_PAGES = DiagramUIPrintingMessages.PrintPreview_FitToPage_ButtonText;

    protected void initializeToolbarImages () {
        printImage = DiagramUIPrintingPluginImages.DESC_PRINT.createImage ();
        disabledPrintImage = DiagramUIPrintingPluginImages.DESC_PRINT_DISABLED.createImage ();
        pageImage = DiagramUIPrintingPluginImages.DESC_PAGE.createImage ();
        leftImage = DiagramUIPrintingPluginImages.DESC_LEFT.createImage ();
        disabledLeftImage = DiagramUIPrintingPluginImages.DESC_LEFT_DISABLED.createImage ();
        rightImage = DiagramUIPrintingPluginImages.DESC_RIGHT.createImage ();
        disabledRightImage = DiagramUIPrintingPluginImages.DESC_RIGHT_DISABLED.createImage ();
        upImage = DiagramUIPrintingPluginImages.DESC_UP.createImage ();
        disabledUpImage = DiagramUIPrintingPluginImages.DESC_UP_DISABLED.createImage ();
        downImage = DiagramUIPrintingPluginImages.DESC_DOWN.createImage ();
        disabledDownImage = DiagramUIPrintingPluginImages.DESC_DOWN_DISABLED.createImage ();
        closeImage = DiagramUIPrintingPluginImages.DESC_CLOSE.createImage ();
    }

    public void enablePrinting (boolean enablePrinting) {
        this.enablePrinting = enablePrinting;
    }

    public void doPrintPreview (IPrintActionHelper prActionHelper) {
        this.printActionHelper = prActionHelper;
        if (! fitToPage) {
            setUserScale (PrintHelperUtil.getScale ());
        }
        if (getDiagramEditorPart () == null) {
            MessageDialog.openInformation (PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell (), DiagramUIPrintingMessages.PrintPreview_Title, DiagramUIPrintingMessages.PrintPreview_NotEnabled);
            return;
        }
        if (! isPrinterInstalled ()) {
            WindowUtil.doMessageBox (DiagramUIPrintingMessages.PrintPreview_NoPrinterInstalled, DiagramUIPrintingMessages.PrintPreview_Title, SWT.ICON_ERROR, PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell ());
            return;
        }
        initializeToolbarImages ();
        initializeMapMode ();
        diagramEditPart = null;
        pageBreakBounds = null;
        userX = 0;
        userY = 0;
        if (getTotalNumberOfRows () == 1 && getTotalNumberOfColumns () == 1) {
            numberOfRowsToDisplay = 1;
            numberOfColumnsToDisplay = 1;
        } else if (getTotalNumberOfRows () == 1) {
            numberOfRowsToDisplay = 1;
            numberOfColumnsToDisplay = 2;
        } else {
            numberOfRowsToDisplay = 2;
            numberOfColumnsToDisplay = 2;
        }

        Display display = Display.getDefault ();
        int style = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell ().getStyle ();
        if ((style & SWT.MIRRORED) != 0) {
            shell = new Shell (display, SWT.APPLICATION_MODAL | SWT.TITLE | SWT.CLOSE | SWT.BORDER | SWT.RIGHT_TO_LEFT);
        } else shell = new Shell (display, SWT.APPLICATION_MODAL | SWT.TITLE | SWT.CLOSE | SWT.BORDER);

        shell.setSize (PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell ().getSize ());
        shell.setText (DiagramUIPrintingMessages.PrintPreview_Title);
        shell.setLocation (PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell ().getLocation ());
        shell.setLayout (new GridLayout (1, true));
        ToolBar bar = new ToolBar (shell, SWT.FLAT | SWT.HORIZONTAL);
        printTool = new ToolItem (bar, SWT.NULL);
        printTool.setToolTipText (DiagramUIPrintingMessages.PrintPreview_PrintToolItem);
        printTool.setImage (printImage);
        printTool.setDisabledImage (disabledPrintImage);
        printTool.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                Assert.isNotNull (printActionHelper);
                printActionHelper.doPrint (PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getActivePage ().getActivePart ());
                shell.setActive ();
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        if (printActionHelper == null || ! enablePrinting) {
            printTool.setEnabled (false);
        }
        new ToolItem (bar, SWT.SEPARATOR);
        pagesTool = new ToolItem (bar, SWT.DROP_DOWN);
        pagesTool.setToolTipText (DiagramUIPrintingMessages.PrintPreview_PagesToolItem);
        pagesTool.setImage (pageImage);
        pagesTool.addSelectionListener (new SelectionAdapter () {
            private Menu menu = null;

            private void updatePreview (int newNumberOfColumnsToDisplay, int newNumberOfRowsToDisplay) {
                numberOfRowsToDisplay = newNumberOfRowsToDisplay;
                numberOfColumnsToDisplay = newNumberOfColumnsToDisplay;
                if (userX + numberOfColumnsToDisplay > getTotalNumberOfColumns ()) {
                    userX = getTotalNumberOfColumns () - numberOfColumnsToDisplay;
                    if (userX < 0) userX = 0;

                }
                if (userY + numberOfRowsToDisplay > getTotalNumberOfRows ()) {
                    userY = getTotalNumberOfRows () - numberOfRowsToDisplay;
                    if (userY < 0) userY = 0;

                }
                refreshComposite ();
            }

            public void widgetSelected (SelectionEvent event) {
                if (menu == null) {
                    menu = new Menu (shell);
                    MenuItem menuItem = new MenuItem (menu, SWT.NONE);
                    menuItem.setText (DiagramUIPrintingMessages.PrintPreview_1Up);
                    menuItem.addSelectionListener (new SelectionAdapter () {

                        public void widgetSelected (SelectionEvent e) {
                            updatePreview (1, 1);
                        }

                    }

                    );
                    menuItem = new MenuItem (menu, SWT.NONE);
                    menuItem.setText (DiagramUIPrintingMessages.PrintPreview_2Up);
                    menuItem.addSelectionListener (new SelectionAdapter () {

                        public void widgetSelected (SelectionEvent e) {
                            updatePreview (2, 1);
                        }

                    }

                    );
                    menuItem = new MenuItem (menu, SWT.NONE);
                    menuItem.setText (DiagramUIPrintingMessages.PrintPreview_4Up);
                    menuItem.addSelectionListener (new SelectionAdapter () {

                        public void widgetSelected (SelectionEvent e) {
                            updatePreview (2, 2);
                        }

                    }

                    );
                }
                final ToolItem toolItem = (ToolItem) event.widget;
                final ToolBar toolBar = toolItem.getParent ();
                org.eclipse.swt.graphics.Rectangle toolItemBounds = toolItem.getBounds ();
                Point point = toolBar.toDisplay (new Point (toolItemBounds.x, toolItemBounds.y));
                menu.setLocation (point.x, point.y + toolItemBounds.height);
                setMenuVisible (true);
            }

            private void setMenuVisible (boolean visible) {
                menu.setVisible (visible);
            }

        }

        );
        new ToolItem (bar, SWT.SEPARATOR);
        leftTool = new ToolItem (bar, SWT.NULL);
        if ((style & SWT.MIRRORED) != 0) {
            leftTool.setToolTipText (DiagramUIPrintingMessages.PrintPreview_RightToolItem);
            leftTool.setImage (rightImage);
            leftTool.setDisabledImage (disabledRightImage);
        } else {
            leftTool.setToolTipText (DiagramUIPrintingMessages.PrintPreview_LeftToolItem);
            leftTool.setImage (leftImage);
            leftTool.setDisabledImage (disabledLeftImage);
        }
        leftTool.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                if (userX > 0) {
                    userX --;
                    refreshComposite ();
                }
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        rightTool = new ToolItem (bar, SWT.NULL);
        if ((style & SWT.MIRRORED) != 0) {
            rightTool.setToolTipText (DiagramUIPrintingMessages.PrintPreview_LeftToolItem);
            rightTool.setImage (leftImage);
            rightTool.setDisabledImage (disabledLeftImage);
        } else {
            rightTool.setToolTipText (DiagramUIPrintingMessages.PrintPreview_RightToolItem);
            rightTool.setImage (rightImage);
            rightTool.setDisabledImage (disabledRightImage);
        }
        rightTool.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                if (! (userX + numberOfColumnsToDisplay + 1 > getTotalNumberOfColumns ())) {
                    userX ++;
                    refreshComposite ();
                }
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        upTool = new ToolItem (bar, SWT.NULL);
        upTool.setToolTipText (DiagramUIPrintingMessages.PrintPreview_UpToolItem);
        upTool.setImage (upImage);
        upTool.setDisabledImage (disabledUpImage);
        upTool.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                if (userY > 0) {
                    userY --;
                    refreshComposite ();
                }
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        downTool = new ToolItem (bar, SWT.NULL);
        downTool.setToolTipText (DiagramUIPrintingMessages.PrintPreview_DownToolItem);
        downTool.setImage (downImage);
        downTool.setDisabledImage (disabledDownImage);
        downTool.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                if (! (userY + numberOfRowsToDisplay + 1 > getTotalNumberOfRows ())) {
                    userY ++;
                    refreshComposite ();
                }
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        new ToolItem (bar, SWT.SEPARATOR);
        ToolItem separator = new ToolItem (bar, SWT.SEPARATOR);
        final Combo zoomCombo = new Combo (bar, SWT.DROP_DOWN);
        zoomCombo.add (FIT_TO_PAGES);
        for (int i = 0;
        i < zoomLevels.length; i ++) {
            zoomCombo.add (getDisplayScale (zoomLevels [i]));
        }
        if (this.fitToPage) {
            zoomCombo.setText (FIT_TO_PAGES);
            zoomCombo.select (0);
        } else {
            zoomCombo.setText (getDisplayScale (PrintHelperUtil.getScale ()));
        }
        zoomCombo.addSelectionListener (new SelectionAdapter () {

            private void doZoom (Combo combo) {
                String scaleFactor = combo.getText ();
                int percentageIndex = scaleFactor.indexOf ("%");
                if (percentageIndex > 0) {
                    scaleFactor = scaleFactor.substring (0, percentageIndex);
                }
                int scalePercentage = Integer.parseInt (scaleFactor);
                setPercentScaling (scalePercentage);
                refreshComposite ();
                combo.setText (getDisplayScale (scalePercentage));
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                doZoom ((Combo) e.getSource ());
            }

            public void widgetSelected (SelectionEvent e) {
                String selectedString = ((Combo) e.getSource ()).getText ();
                if (FIT_TO_PAGES.compareToIgnoreCase (selectedString) == 0) {
                    FitToPagesDialog fitToPages = new FitToPagesDialog (shell);
                    if (fitToPages.open () == Dialog.OK) {
                        int pagesWide = fitToPages.getPagesWide ();
                        int pagesTall = fitToPages.getPagesTall ();
                        PrintHelperUtil.setScaleToWidth (pagesWide);
                        PrintHelperUtil.setScaleToHeight (pagesTall);
                        setFitToPage (pagesWide, pagesTall);
                        refreshComposite ();
                    }
                } else {
                    doZoom ((Combo) e.getSource ());
                }
            }

        }

        );
        zoomCombo.pack ();
        separator.setWidth (zoomCombo.getSize ().x);
        separator.setControl (zoomCombo);
        new ToolItem (bar, SWT.SEPARATOR);
        closeTool = new ToolItem (bar, SWT.NULL);
        closeTool.setToolTipText (DiagramUIPrintingMessages.PrintPreview_CloseToolItem);
        closeTool.setImage (closeImage);
        closeTool.addSelectionListener (new SelectionListener () {

            public void widgetSelected (SelectionEvent e) {
                dispose ();
                shell.close ();
                shell.dispose ();
            }

            public void widgetDefaultSelected (SelectionEvent e) {
                widgetSelected (e);
            }

        }

        );
        buttonBarHeight = bar.getBounds ().height - bar.getBounds ().y;
        bar.setBounds (0, 0, shell.getSize ().x, buttonBarHeight);
        body = new Composite (shell, SWT.NULL);
        body.setLayout (new GridLayout (1, true));
        body.setLayoutData (new GridData (GridData.FILL_BOTH));
        body.setBackground (BACKGROUND_COLOR);
        composite = new Composite (body, SWT.NULL);
        composite.setLayoutData (new GridData (SWT.CENTER, SWT.CENTER, true, true));
        refreshComposite ();
        shell.open ();
        while (! shell.isDisposed ()) {
            if (! display.readAndDispatch ()) display.sleep ();

        }
        dispose ();
        shell.dispose ();
    }

    private IMapMode mm;

    public PrintPreviewHelper () {
    }

    protected IMapMode getMapMode () {
        return mm;
    }

    private void initializeMapMode () {
        DiagramEditor diagramEditor = getDiagramEditorPart ();
        assert diagramEditor != null;
        IDiagramGraphicalViewer viewer = diagramEditor.getDiagramGraphicalViewer ();
        if (viewer != null) {
            RootEditPart rootEP = viewer.getRootEditPart ();
            if (rootEP instanceof DiagramRootEditPart) {
                this.mm = ((DiagramRootEditPart) rootEP).getMapMode ();
                ;
                return;
            }
        }
        this.mm = MapModeUtil.getMapMode ();
    }

    private int getTotalNumberOfRows () {
        float numRows = ((float) (getBounds ().height * userScale)) / PageInfoHelper.getPageSize (getPreferenceStore (), true, getMapMode ()).y;
        return Math.max (1, (int) Math.ceil (numRows));
    }

    private DiagramEditor getDiagramEditorPart () {
        IEditorPart editorPart = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getActivePage ().getActiveEditor ();
        if (! (editorPart instanceof DiagramEditor)) {
            return null;
        }
        DiagramEditor diagramEditorPart = (DiagramEditor) editorPart;
        return diagramEditorPart;
    }

    protected Rectangle getDiagramBounds () {
        return PageInfoHelper.getChildrenBounds (getDiagramEditPart (), null);
    }

    protected Rectangle getPageBreakBounds () {
        if (pageBreakBounds == null) {
            pageBreakBounds = PrintHelperUtil.getPageBreakBounds (getDiagramEditPart (), true).getCopy ();
        }
        return pageBreakBounds;
    }

    protected Rectangle getBounds () {
        return (getPageBreakBounds () == null) ? getDiagramBounds () : getPageBreakBounds ();
    }

    protected DiagramEditPart getDiagramEditPart () {
        if (diagramEditPart == null) {
            diagramEditPart = getDiagramEditorPart ().getDiagramEditPart ();
        }
        if (diagramEditPart == null) {
            Diagram diagram = getDiagramEditorPart ().getDiagram ();
            PreferencesHint preferencesHint = getPreferencesHint (getDiagramEditorPart ());
            diagramEditPart = PrintHelperUtil.createDiagramEditPart (diagram, preferencesHint, getTempShell ());
            PrintHelperUtil.initializePreferences (diagramEditPart, preferencesHint);
        }
        return diagramEditPart;
    }

    private Shell getTempShell () {
        if (tempShell == null) {
            tempShell = new Shell ();
        }
        return tempShell;
    }

    protected PreferencesHint getPreferencesHint (IEditorPart editorPart) {
        if (editorPart instanceof IDiagramWorkbenchPart) {
            RootEditPart rootEP = ((IDiagramWorkbenchPart) editorPart).getDiagramGraphicalViewer ().getRootEditPart ();
            if (rootEP instanceof IDiagramPreferenceSupport) {
                return ((IDiagramPreferenceSupport) rootEP).getPreferencesHint ();
            }
        }
        return PreferencesHint.USE_DEFAULTS;
    }

    private int getTotalNumberOfColumns () {
        float numCols = ((float) (getBounds ().width * userScale)) / PageInfoHelper.getPageSize (getPreferenceStore (), true, getMapMode ()).x;
        return Math.max (1, (int) Math.ceil (numCols));
    }

    protected boolean isPrinterInstalled () {
        try {
            PrintService [] printServices = PrintServiceLookup.lookupPrintServices (null, null);
            return printServices.length > 0;
        } catch (SWTError e) {
            Trace.catching (DiagramPrintingPlugin.getInstance (), DiagramPrintingDebugOptions.EXCEPTIONS_CATCHING, PrintPreviewHelper.class, "isPrinterInstalled", e);
            if (e.code == SWT.ERROR_NO_HANDLES) {
                return false;
            }
            Log.error (DiagramPrintingPlugin.getInstance (), DiagramPrintingStatusCodes.GENERAL_UI_FAILURE, "Failed to make instance of Printer object", e);
            Trace.throwing (DiagramPrintingPlugin.getInstance (), DiagramPrintingDebugOptions.EXCEPTIONS_CATCHING, PrintPreviewHelper.class, "isPrinterInstalled", e);
            throw e;
        }
    }

    private void disposeImages () {
        while (imageList.size () > 0) {
            Assert.isTrue (imageList.get (0) instanceof Image);
            if (! ((Image) imageList.get (0)).isDisposed ()) ((Image) imageList.get (0)).dispose ();

            imageList.remove (0);
        }
    }

    private void refreshComposite () {
        updateCompositeForNumberOfColumns (numberOfRowsToDisplay, numberOfColumnsToDisplay);
        updateLeftRightUpDownButtonsForToolbar ();
    }

    private void updateCompositeForNumberOfColumns (int numberOfRows, int numberOfColumns) {
        Assert.isNotNull (shell);
        Assert.isNotNull (composite);
        WindowUtil.disposeChildren (composite);
        disposeImages ();
        composite.setLayout (null);
        composite.pack ();
        composite.setLayout (new GridLayout (numberOfColumns, true));
        int imageHeight = (shell.getSize ().y - buttonBarHeight - BORDER_SIZE - BORDER_SIZE - BORDER_SIZE - ((numberOfRows - 1) * BORDER_SIZE)) / numberOfRows;
        int imageWidth = (shell.getSize ().x - BORDER_SIZE - BORDER_SIZE - ((numberOfColumns - 1) * BORDER_SIZE)) / numberOfColumns;
        org.eclipse.draw2d.geometry.Point pageSize = PageInfoHelper.getPageSize (getPreferenceStore (), false, getMapMode ());
        Assert.isNotNull (pageSize);
        float printerRatio = ((float) pageSize.x) / ((float) pageSize.y);
        if (imageHeight * printerRatio < imageWidth) {
            imageWidth = (int) (imageHeight * printerRatio);
        } else if (imageWidth * (1 / printerRatio) < imageHeight) {
            imageHeight = (int) (imageWidth * (1.0f / printerRatio));
        }

        PageMargins margins = PageInfoHelper.getPageMargins (getPreferenceStore (), getMapMode ());
        if (! (imageHeight <= 4 || imageWidth <= 4)) {
            float scale = (imageHeight / (float) pageSize.y) / (float) DiagramMapModeUtil.getScale (getMapMode ());
            scale *= userScale;
            margins.left /= userScale;
            margins.right /= userScale;
            margins.bottom /= userScale;
            margins.top /= userScale;
            for (int i = 0;
            i < numberOfRows; i ++) {
                for (int j = 0;
                j < numberOfColumns; j ++) {
                    Label label = new Label (composite, SWT.NULL);
                    Image pageImg = makeImage (imageWidth, imageHeight, i, j, scale, margins);
                    label.setImage (pageImg);
                    imageList.add (pageImg);
                }
            }
        }
        composite.pack ();
        org.eclipse.swt.graphics.Rectangle compositeBounds = composite.getBounds ();
        compositeBounds.x = (shell.getSize ().x - BORDER_SIZE - compositeBounds.width) / 2;
        compositeBounds.y = (shell.getSize ().y - buttonBarHeight - BORDER_SIZE - BORDER_SIZE - BORDER_SIZE - compositeBounds.height) / 2;
        composite.setBounds (compositeBounds);
    }

    protected void updateLeftRightUpDownButtonsForToolbar () {
        if (userX == 0) {
            leftTool.setEnabled (false);
        } else {
            leftTool.setEnabled (true);
        }
        if (userX + numberOfColumnsToDisplay + 1 > getTotalNumberOfColumns ()) {
            rightTool.setEnabled (false);
        } else {
            rightTool.setEnabled (true);
        }
        if (userY == 0) {
            upTool.setEnabled (false);
        } else {
            upTool.setEnabled (true);
        }
        if (userY + numberOfRowsToDisplay + 1 > getTotalNumberOfRows ()) {
            downTool.setEnabled (false);
        } else {
            downTool.setEnabled (true);
        }
    }

    protected Image makeImage (int imageWidth, int imageHeight, int row, int col, float scale, PageMargins margins) {
        Image image = new Image (Display.getDefault (), imageWidth, imageHeight);
        GC gc = null;
        if ((shell.getStyle () & SWT.MIRRORED) != 0) {
            gc = new GC (image, SWT.RIGHT_TO_LEFT);
        } else gc = new GC (image);

        SWTGraphics sg = new SWTGraphics (gc);
        ScaledGraphics g1 = new ScaledGraphics (sg);
        MapModeGraphics mmg = createMapModeGraphics (g1);
        gc.setFont (mmg.getFont ());
        drawPage (mmg, gc, scale, row, col, margins);
        gc.dispose ();
        return image;
    }

    protected void drawPage (Graphics g, GC gc, float scale, int row, int col, PageMargins margins) {
        org.eclipse.draw2d.geometry.Point pageSize = PageInfoHelper.getPageSize (getPreferenceStore (), false, getMapMode ());
        g.pushState ();
        Rectangle bounds = getBounds ();
        if (PrintHelperUtil.getScaleToWidth () == 1 && PrintHelperUtil.getScaleToHeight () == 1 && fitToPage) {
            bounds = getDiagramEditPart ().getChildrenBounds ();
        }
        int scaledPageSizeWidth = (int) (pageSize.x / userScale);
        int scaledPageSizeHeight = (int) (pageSize.y / userScale);
        int translateX = - bounds.x - (scaledPageSizeWidth * (col + userX)) + (margins.left * (col + userX + 1)) + (margins.right * (col + userX));
        int translateY = - bounds.y - (scaledPageSizeHeight * (row + userY)) + (margins.top * (row + userY + 1)) + (margins.bottom * (row + userY));
        if (doesPageExist (1 + userX + col, 1 + userY + row)) {
            g.pushState ();
            g.scale (scale);
            String headerOrFooter = HeaderAndFooterHelper.makeHeaderOrFooterString (WorkspaceViewerProperties.HEADER_PREFIX, 1 + userY + row, 1 + userX + col, getDiagramEditPart ());
            g.drawText (headerOrFooter, (pageSize.x - getMapMode ().DPtoLP (gc.textExtent (headerOrFooter).x)) / 2, getMapMode ().DPtoLP (HeaderAndFooterHelper.TOP_MARGIN_DP));
            headerOrFooter = HeaderAndFooterHelper.makeHeaderOrFooterString (WorkspaceViewerProperties.FOOTER_PREFIX, 1 + userY + row, 1 + userX + col, getDiagramEditPart ());
            g.drawText (headerOrFooter, (pageSize.x - getMapMode ().DPtoLP (gc.textExtent (headerOrFooter).x)) / 2, pageSize.y - getMapMode ().DPtoLP (HeaderAndFooterHelper.BOTTOM_MARGIN_DP));
            g.popState ();
        }
        g.scale (scale);
        g.translate (translateX, translateY);
        Rectangle clip = new Rectangle ((scaledPageSizeWidth - margins.left - margins.right) * (col + userX) + bounds.x, (scaledPageSizeHeight - margins.top - margins.bottom) * (row + userY) + bounds.y, scaledPageSizeWidth - margins.left - margins.right, scaledPageSizeHeight - margins.top - margins.bottom);
        g.clipRect (clip);
        getDiagramEditPart ().getLayer (LayerConstants.PRINTABLE_LAYERS).paint (g);
        g.popState ();
    }

    private boolean doesPageExist (int x, int y) {
        return x > 0 && y > 0 && x <= getTotalNumberOfColumns () && y <= getTotalNumberOfRows ();
    }

    private void safeDisposeImage (Image image) {
        if (image != null && ! image.isDisposed ()) image.dispose ();

    }

    protected void dispose () {
        disposeImages ();
        safeDisposeImage (printImage);
        safeDisposeImage (disabledPrintImage);
        safeDisposeImage (pageImage);
        safeDisposeImage (leftImage);
        safeDisposeImage (disabledLeftImage);
        safeDisposeImage (rightImage);
        safeDisposeImage (disabledRightImage);
        safeDisposeImage (upImage);
        safeDisposeImage (disabledUpImage);
        safeDisposeImage (downImage);
        safeDisposeImage (disabledDownImage);
        safeDisposeImage (closeImage);
        if (tempShell != null) {
            tempShell.dispose ();
            tempShell = null;
        }
    }

    private IPreferenceStore getWorkspaceViewerPreferenceStore () {
        assert getDiagramEditPart ().getViewer () instanceof DiagramGraphicalViewer;
        return ((DiagramGraphicalViewer) getDiagramEditPart ().getViewer ()).getWorkspaceViewerPreferenceStore ();
    }

    private IPreferenceStore getGlobalPreferenceStore () {
        return (IPreferenceStore) getDiagramEditPart ().getDiagramPreferencesHint ().getPreferenceStore ();
    }

    private IPreferenceStore getPreferenceStore () {
        if (getWorkspaceViewerPreferenceStore ().getBoolean (WorkspaceViewerProperties.PREF_USE_WORKSPACE_SETTINGS)) return getGlobalPreferenceStore ();
        else return getWorkspaceViewerPreferenceStore ();

    }

    protected MapModeGraphics createMapModeGraphics (ScaledGraphics scaledGraphics) {
        return new MapModeGraphics (scaledGraphics, getMapMode ());
    }

    private void setUserScale (int scale) {
        userScale = scale / 100f;
        PrintHelperUtil.setScale (scale);
    }

    private String getDisplayScale (int scale) {
        return String.valueOf (scale) + "%";
    }

    protected org.eclipse.draw2d.geometry.Point getPageCount (DiagramEditPart dgrmEP, Rectangle figureBounds, org.eclipse.draw2d.geometry.Point pageSize, boolean applyUserScale) {
        RootEditPart rootEditPart = dgrmEP.getRoot ();
        if (rootEditPart instanceof DiagramRootEditPart) {
            DiagramRootEditPart diagramRootEditPart = (DiagramRootEditPart) rootEditPart;
            PageBreakEditPart pageBreakEditPart = diagramRootEditPart.getPageBreakEditPart ();
            double fNumCols = ((PageBreaksFigure) pageBreakEditPart.getFigure ()).getPageCount ().y * (applyUserScale ? userScale : 1);
            double fNumRows = ((PageBreaksFigure) pageBreakEditPart.getFigure ()).getPageCount ().x * (applyUserScale ? userScale : 1);
            int numCols = (int) Math.ceil (fNumCols);
            int numRows = (int) Math.ceil (fNumRows);
            return new org.eclipse.draw2d.geometry.Point (numCols, numRows);
        } else {
            double fNumRows = (figureBounds.height * (applyUserScale ? userScale : 1)) / pageSize.y;
            int numRows = (int) Math.ceil (fNumRows);
            double fNumCols = (figureBounds.width * (applyUserScale ? userScale : 1)) / pageSize.x;
            int numCols = (int) Math.ceil (fNumCols);
            return new org.eclipse.draw2d.geometry.Point (numCols, numRows);
        }
    }

    public void setPercentScaling (int userScale) {
        fitToPage = false;
        setUserScale (userScale);
    }

    public void setFitToPage (int width, int height) {
        fitToPage = true;
        initializeMapMode ();
        Rectangle figureBounds = PrintHelperUtil.getPageBreakBounds (getDiagramEditPart (), true);
        org.eclipse.draw2d.geometry.Point pageBounds = PageInfoHelper.getPageSize (getPreferenceStore (), getMapMode ());
        org.eclipse.draw2d.geometry.Point pageCount = getPageCount (getDiagramEditPart (), figureBounds, pageBounds, false);
        int numCols = pageCount.x;
        int numRows = pageCount.y;
        float actualWidth = 0;
        float actualHeight = 0;
        if (height == 1 && width == 1) {
            figureBounds = getDiagramEditPart ().getChildrenBounds ();
            actualWidth = figureBounds.width;
            actualHeight = figureBounds.height;
        } else {
            actualWidth = numCols * pageBounds.x;
            actualHeight = numRows * pageBounds.y;
        }
        int totalHeight = (height * pageBounds.y);
        int totalWidth = (width * pageBounds.x);
        int vScale = (int) ((totalHeight * 100) / actualHeight);
        int hScale = (int) ((totalWidth * 100) / actualWidth);
        userScale = Math.min (hScale, vScale) / 100f;
    }

    private class FitToPagesDialog extends Dialog {
        private Text textWide;
        private Text textTall;
        private int pagesWide = 0;
        private int pagesTall = 0;

        public FitToPagesDialog (Shell parent) {
            super (parent);
        }

        protected void configureShell (Shell newShell) {
            super.configureShell (newShell);
            newShell.setText (DiagramUIPrintingMessages.PrintPreview_FitToPage_DialogTitle);
        }

        Label label (Composite parent, String text) {
            Label result = new Label (parent, SWT.NONE);
            result.setText (text);
            return result;
        }

        GridData getLayoutData (Control control) {
            GridData result = (GridData) control.getLayoutData ();
            if (result == null) {
                result = new GridData ();
                control.setLayoutData (result);
            }
            return result;
        }

        Control layoutHorizontalIndent (Control control, int inset) {
            GridData data = getLayoutData (control);
            data.horizontalIndent = inset;
            return control;
        }

        Control layoutAlignRight (Control control) {
            GridData data = getLayoutData (control);
            data.horizontalAlignment = SWT.END;
            data.grabExcessHorizontalSpace = false;
            return control;
        }

        Control layoutWidth (Control control, int dlus) {
            if (dlus > 0) {
                GridData data = getLayoutData (control);
                data.widthHint = convertHorizontalDLUsToPixels (dlus);
            }
            return control;
        }

        Control layoutFillHorizontal (Control control, boolean grab) {
            GridData data = getLayoutData (control);
            data.horizontalAlignment = SWT.FILL;
            data.grabExcessHorizontalSpace = grab;
            return control;
        }

        Text text (Composite parent, int width) {
            Text result = new Text (parent, SWT.SINGLE | SWT.BORDER);
            layoutFillHorizontal (result, false);
            layoutWidth (result, width);
            return result;
        }

        Control layoutFillBoth (Control control) {
            GridData data = getLayoutData (control);
            data.horizontalAlignment = SWT.FILL;
            data.grabExcessHorizontalSpace = true;
            data.verticalAlignment = SWT.FILL;
            data.grabExcessVerticalSpace = true;
            return control;
        }

        Group group (Composite parent, String text) {
            Group result = new Group (parent, SWT.NONE);
            result.setText (text);
            layoutFillBoth (result);
            return result;
        }

        Composite layout (Composite composite, int columns) {
            GridLayout g = new GridLayout (columns, false);
            g.marginLeft = 6;
            g.marginRight = 6;
            g.marginTop = 6;
            g.marginBottom = 3;
            composite.setLayout (g);
            return composite;
        }

        protected Control createDialogArea (Composite parent) {
            Composite composite = new Composite (parent, SWT.NONE);
            layout (composite, 1);
            Composite scaleGroup = group (composite, DiagramUIPrintingMessages.JPSPrintDialog_Scaling);
            layout (scaleGroup, 5);
            layoutHorizontalIndent (layoutAlignRight (label (scaleGroup, DiagramUIPrintingMessages.JPSPrintDialog_PagesWide)), 15);
            textWide = text (scaleGroup, 20);
            textWide.setText (String.valueOf (PrintHelperUtil.getScaleToWidth ()));
            layoutHorizontalIndent (layoutAlignRight (label (scaleGroup, DiagramUIPrintingMessages.JPSPrintDialog_PagesTall)), 15);
            textTall = text (scaleGroup, 20);
            textTall.setText (String.valueOf (PrintHelperUtil.getScaleToHeight ()));
            return composite;
        }

        public int getPagesWide () {
            return pagesWide;
        }

        public int getPagesTall () {
            return pagesTall;
        }

        @Override
        protected void okPressed () {
            pagesWide = Integer.parseInt (textWide.getText ());
            pagesTall = Integer.parseInt (textTall.getText ());
            super.okPressed ();
        }

    }

}

