package org.eclipse.gmf.runtime.diagram.core.providers;

import java.lang.reflect.Constructor;

import java.lang.reflect.Method;

import java.util.HashMap;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.core.runtime.IStatus;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;

import org.eclipse.gmf.runtime.common.core.service.IOperation;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.diagram.core.internal.DiagramPlugin;

import org.eclipse.gmf.runtime.diagram.core.internal.DiagramStatusCodes;

import org.eclipse.gmf.runtime.diagram.core.internal.l10n.DiagramCoreMessages;

import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateDiagramViewOperation;

import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateEdgeViewOperation;

import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateNodeViewOperation;

import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateViewForKindOperation;

import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateViewOperation;

import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;

import org.eclipse.gmf.runtime.emf.core.util.ProxyUtil;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;

import org.eclipse.gmf.runtime.notation.Diagram;

import org.eclipse.gmf.runtime.notation.Edge;

import org.eclipse.gmf.runtime.notation.Node;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.osgi.util.NLS;

public class AbstractViewProvider extends AbstractProvider implements IViewProvider {
    private static String viewCreationMethodName = "createView";
    private static String diagramCreationMethodName = "createDiagram";
    static protected class ClassToCreationMethodMap extends HashMap {

        public void addMethod (Class clazz, Method method) {
            if (get (clazz) == null) put (clazz, method);

        }

        public Method getCreationMethod (Class clazz) {
            return (Method) get (clazz);
        }

    }

    public static ClassToCreationMethodMap classToCreateMethod = new ClassToCreationMethodMap ();

    public final boolean provides (IOperation operation) {
        if (operation instanceof CreateViewForKindOperation) return provides ((CreateViewForKindOperation) operation);

        assert operation instanceof CreateViewOperation : "operation is not CreateViewOperation in AbstractViewProvider";
        if (operation instanceof CreateDiagramViewOperation) return provides ((CreateDiagramViewOperation) operation);
        else if (operation instanceof CreateEdgeViewOperation) return provides ((CreateEdgeViewOperation) operation);
        else if (operation instanceof CreateNodeViewOperation) return provides ((CreateNodeViewOperation) operation);

        return false;
    }

    public final Diagram createDiagram (IAdaptable contextElement, String diagramKind, PreferencesHint preferencesHint) {
        return (Diagram) createNewView (getDiagramViewClass (contextElement, diagramKind), new Object [] {contextElement, diagramKind, preferencesHint});
    }

    public final Edge createEdge (IAdaptable semanticAdapter, View containerView, String semanticHint, int index, boolean persisted, PreferencesHint preferencesHint) {
        return (Edge) createNewView (getEdgeViewClass (semanticAdapter, containerView, semanticHint), new Object [] {semanticAdapter, containerView, semanticHint, new Integer (index), Boolean.valueOf (persisted), preferencesHint});
    }

    public final Node createNode (IAdaptable semanticAdapter, View containerView, String semanticHint, int index, boolean persisted, PreferencesHint preferencesHint) {
        return (Node) createNewView (getNodeViewClass (semanticAdapter, containerView, semanticHint), new Object [] {semanticAdapter, containerView, semanticHint, new Integer (index), Boolean.valueOf (persisted), preferencesHint});
    }

    protected boolean provides (CreateViewForKindOperation op) {
        if (op.getViewKind () == Node.class) return getNodeViewClass (op.getSemanticAdapter (), op.getContainerView (), op.getSemanticHint ()) != null;

        if (op.getViewKind () == Edge.class) return getEdgeViewClass (op.getSemanticAdapter (), op.getContainerView (), op.getSemanticHint ()) != null;

        return true;
    }

    protected boolean provides (CreateDiagramViewOperation operation) {
        return getDiagramViewClass (operation.getSemanticAdapter (), operation.getSemanticHint ()) != null;
    }

    protected boolean provides (CreateEdgeViewOperation operation) {
        return (getEdgeViewClass (operation.getSemanticAdapter (), operation.getContainerView (), operation.getSemanticHint ()) != null);
    }

    protected boolean provides (CreateNodeViewOperation operation) {
        return (getNodeViewClass (operation.getSemanticAdapter (), operation.getContainerView (), operation.getSemanticHint ()) != null);
    }

    protected Class getDiagramViewClass (IAdaptable semanticAdapter, String diagramKind) {
        return null;
    }

    protected Class getEdgeViewClass (IAdaptable semanticAdapter, View containerView, String semanticHint) {
        return null;
    }

    protected Class getNodeViewClass (IAdaptable semanticAdapter, View containerView, String semanticHint) {
        return null;
    }

    private View createNewView (Class viewClass, Object [] constructorParams) {
        try {
            assert null != viewClass : "Null viewClass in AbstractProvider";
            assert null != constructorParams : "Null constructorParams in AbstractProvider";
            Constructor constructor = getFactoryConstructor (viewClass);
            if (constructor == null) {
                Log.error (DiagramPlugin.getInstance (), DiagramStatusCodes.SERVICE_FAILURE, "View (" + viewClass + ") is missing a proper creation Factory");
                return null;
            }
            Object factory = constructor.newInstance (null);
            Method method = getCreationMethod (viewClass, constructorParams);
            if (method == null) {
                Log.error (DiagramPlugin.getInstance (), DiagramStatusCodes.SERVICE_FAILURE, "View (" + viewClass + ") is missing a proper creation Factory");
                return null;
            }
            return (View) method.invoke (factory, constructorParams);
        } catch (Throwable e) {
            String eMsg = NLS.bind (DiagramCoreMessages.AbstractViewProvider_create_view_failed_ERROR_, viewClass.getName ());
            Log.warning (DiagramPlugin.getInstance (), IStatus.WARNING, eMsg, e);
            return null;
        }
    }

    private Constructor getFactoryConstructor (Class viewClass) {
        if (viewClass != null) {
            Constructor [] ctors = viewClass.getConstructors ();
            for (int i = 0;
            i < ctors.length; i ++) {
                if (ctors [i].getParameterTypes ().length == 0) {
                    return ctors [i];
                }
            }
        }
        return null;
    }

    private Method getCreationMethod (Class viewClass, Object [] params) {
        if (viewClass != null) {
            Method method = classToCreateMethod.getCreationMethod (viewClass);
            if (method != null) return method;

            Method [] methods = viewClass.getMethods ();
            for (int i = 0;
            i < methods.length; i ++) {
                method = methods [i];
                String methodName = method.getName ();
                if (methodName.equals (viewCreationMethodName) || methodName.equals (diagramCreationMethodName)) {
                    classToCreateMethod.addMethod (viewClass, method);
                    return method;
                }
            }
        }
        return null;
    }

    protected EClass getSemanticEClass (IAdaptable semanticAdapter) {
        if (semanticAdapter == null) return null;

        EObject eObject = (EObject) semanticAdapter.getAdapter (EObject.class);
        if (eObject != null) return ProxyUtil.getProxyClass (eObject);

        IElementType type = (IElementType) semanticAdapter.getAdapter (IElementType.class);
        if (type != null) return type.getEClass ();

        return null;
    }

    protected EObject getSemanticElement (IAdaptable semanticAdapter) {
        if (semanticAdapter == null) return null;

        EObject eObject = (EObject) semanticAdapter.getAdapter (EObject.class);
        if (eObject != null) return ProxyUtil.resolve (MEditingDomainGetter.getMEditingDomain (eObject), eObject);

        return null;
    }

    protected EObject getSemanticElement (IAdaptable semanticAdapter, MEditingDomain domain) {
        if (semanticAdapter == null) return null;

        EObject eObject = (EObject) semanticAdapter.getAdapter (EObject.class);
        if (eObject != null) return ProxyUtil.resolve (domain, eObject);

        return null;
    }

}

