package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.mappings.GMFMapPackage;

import org.eclipse.gmf.mappings.Language;

import org.eclipse.gmf.mappings.ValueExpression;

public class ValueExpressionImpl extends EObjectImpl implements ValueExpression {
    protected static final String BODY_EDEFAULT = null;
    protected String body = BODY_EDEFAULT;
    protected static final Language LANGUAGE_EDEFAULT = Language.OCL_LITERAL;
    protected Language language = LANGUAGE_EDEFAULT;
    protected static final String LANG_NAME_EDEFAULT = null;

    protected ValueExpressionImpl () {
        super ();
    }

    protected EClass eStaticClass () {
        return GMFMapPackage.eINSTANCE.getValueExpression ();
    }

    public String getBody () {
        return body;
    }

    public void setBody (String newBody) {
        String oldBody = body;
        body = newBody;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.VALUE_EXPRESSION__BODY, oldBody, body));

    }

    public Language getLanguage () {
        return language;
    }

    public void setLanguage (Language newLanguage) {
        Language oldLanguage = language;
        language = newLanguage == null ? LANGUAGE_EDEFAULT : newLanguage;
        if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFMapPackage.VALUE_EXPRESSION__LANGUAGE, oldLanguage, language));

    }

    public String getLangName () {
        Language langEnum = getLanguage ();
        return (langEnum != null) ? langEnum.getName () : "";
    }

    public Object eGet (int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case GMFMapPackage.VALUE_EXPRESSION__BODY :
                return getBody ();
            case GMFMapPackage.VALUE_EXPRESSION__LANGUAGE :
                return getLanguage ();
            case GMFMapPackage.VALUE_EXPRESSION__LANG_NAME :
                return getLangName ();
        }
        return super.eGet (featureID, resolve, coreType);
    }

    public void eSet (int featureID, Object newValue) {
        switch (featureID) {
            case GMFMapPackage.VALUE_EXPRESSION__BODY :
                setBody ((String) newValue);
                return;
            case GMFMapPackage.VALUE_EXPRESSION__LANGUAGE :
                setLanguage ((Language) newValue);
                return;
        }
        super.eSet (featureID, newValue);
    }

    public void eUnset (int featureID) {
        switch (featureID) {
            case GMFMapPackage.VALUE_EXPRESSION__BODY :
                setBody (BODY_EDEFAULT);
                return;
            case GMFMapPackage.VALUE_EXPRESSION__LANGUAGE :
                setLanguage (LANGUAGE_EDEFAULT);
                return;
        }
        super.eUnset (featureID);
    }

    public boolean eIsSet (int featureID) {
        switch (featureID) {
            case GMFMapPackage.VALUE_EXPRESSION__BODY :
                return BODY_EDEFAULT == null ? body != null : ! BODY_EDEFAULT.equals (body);
            case GMFMapPackage.VALUE_EXPRESSION__LANGUAGE :
                return language != LANGUAGE_EDEFAULT;
            case GMFMapPackage.VALUE_EXPRESSION__LANG_NAME :
                return LANG_NAME_EDEFAULT == null ? getLangName () != null : ! LANG_NAME_EDEFAULT.equals (getLangName ());
        }
        return super.eIsSet (featureID);
    }

    public String toString () {
        if (eIsProxy ()) return super.toString ();

        StringBuffer result = new StringBuffer (super.toString ());
        result.append (" (body: ");
        result.append (body);
        result.append (", language: ");
        result.append (language);
        result.append (')');
        return result.toString ();
    }

}

