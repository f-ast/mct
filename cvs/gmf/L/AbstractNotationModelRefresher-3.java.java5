package org.eclipse.gmf.runtime.lite.edit.parts.update.canonical;

import java.util.Iterator;

import org.eclipse.emf.common.command.Command;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.transaction.NotificationFilter;

import org.eclipse.emf.transaction.ResourceSetChangeEvent;

import org.eclipse.emf.transaction.ResourceSetListenerImpl;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand;

import org.eclipse.gmf.runtime.notation.View;

public abstract class AbstractNotationModelRefresher extends ResourceSetListenerImpl implements INotationModelRefresher {
    private NotificationFilter myFilter;
    private TransactionalEditingDomain myEditingDomain;

    public AbstractNotationModelRefresher () {
        myFilter = createFilter ();
    }

    public final View getView () {
        return getHost ();
    }

    public void install (TransactionalEditingDomain editingDomain) {
        if (this.myEditingDomain != null && ! this.myEditingDomain.equals (editingDomain)) {
            throw new IllegalStateException ("Already listening to another editing domain");
        }
        this.myEditingDomain = editingDomain;
        this.myEditingDomain.addResourceSetListener (this);
    }

    public boolean isInstalled () {
        return myEditingDomain != null;
    }

    public void uninstall () {
        if (isInstalled ()) {
            myEditingDomain.removeResourceSetListener (this);
            myEditingDomain = null;
        }
    }

    public boolean isPrecommitOnly () {
        return true;
    }

    public Command transactionAboutToCommit (ResourceSetChangeEvent event) {
        if (shouldHandleNotification (event)) {
            return buildRefreshNotationModelCommand ();
        }
        return null;
    }

    public NotificationFilter getFilter () {
        return myFilter;
    }

    public abstract Command buildRefreshNotationModelCommand ();

    private boolean shouldHandleNotification (ResourceSetChangeEvent event) {
        if (getHost () == null || getHost ().getElement () == null) {
            return false;
        }
        for (Iterator it = event.getNotifications ().iterator ();
        it.hasNext ();) {
            Notification next = (Notification) it.next ();
            if (shouldHandleNotification (next)) {
                return true;
            }
        }
        return false;
    }

    protected boolean shouldHandleNotification (Notification nofitication) {
        return true;
    }

    protected int getVisualID (View view) {
        try {
            return Integer.parseInt (view.getType ());
        } catch (NumberFormatException e) {
            return - 1;
        }
    }

    protected abstract CreateNotationalElementCommand getCreateNotationalElementCommand (ElementDescriptor descriptor);

    protected abstract NotificationFilter createFilter ();

    protected abstract boolean shouldCreateView (ElementDescriptor descriptor);

    protected abstract View getHost ();

}

