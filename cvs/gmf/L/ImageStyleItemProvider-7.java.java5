package org.eclipse.gmf.runtime.notation.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.runtime.notation.ImageStyle;

import org.eclipse.gmf.runtime.notation.NotationEditPlugin;

import org.eclipse.gmf.runtime.notation.NotationFactory;

import org.eclipse.gmf.runtime.notation.NotationPackage;

public class ImageStyleItemProvider extends NotationObjectItemProvider implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public ImageStyleItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
            addAntiAliasPropertyDescriptor (object);
            addMaintainAspectRatioPropertyDescriptor (object);
        }
        return itemPropertyDescriptors;
    }

    protected void addAntiAliasPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_ImageStyle_antiAlias_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_ImageStyle_antiAlias_feature", "_UI_ImageStyle_type"), NotationPackage.Literals.IMAGE_STYLE__ANTI_ALIAS, true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    protected void addMaintainAspectRatioPropertyDescriptor (Object object) {
        itemPropertyDescriptors.add (createItemPropertyDescriptor (((ComposeableAdapterFactory) adapterFactory).getRootAdapterFactory (), getResourceLocator (), getString ("_UI_ImageStyle_maintainAspectRatio_feature"), getString ("_UI_PropertyDescriptor_description", "_UI_ImageStyle_maintainAspectRatio_feature", "_UI_ImageStyle_type"), NotationPackage.Literals.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO, true, false, false, ItemPropertyDescriptor.GENERIC_VALUE_IMAGE, null, null));
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (NotationPackage.Literals.IMAGE_STYLE__CROP_BOUND);
        }
        return childrenFeatures;
    }

    protected EStructuralFeature getChildFeature (Object object, Object child) {
        return super.getChildFeature (object, child);
    }

    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/ImageStyle"));
    }

    public String getText (Object object) {
        Object labelValue = ((EObject) object).eGet (NotationPackage.Literals.NOTATION_OBJECT__UUID);
        String label = labelValue == null ? null : labelValue.toString ();
        return label == null || label.length () == 0 ? getString ("_UI_ImageStyle_type") : getString ("_UI_ImageStyle_type") + " " + label;
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (ImageStyle.class)) {
            case NotationPackage.IMAGE_STYLE__ANTI_ALIAS :
            case NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), false, true));
                return;
            case NotationPackage.IMAGE_STYLE__CROP_BOUND :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (NotationPackage.Literals.IMAGE_STYLE__CROP_BOUND, NotationFactory.eINSTANCE.createBounds ()));
    }

}

