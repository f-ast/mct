package org.eclipse.gmf.mappings.provider;

import java.util.Collection;

import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;

import org.eclipse.emf.edit.provider.IItemLabelProvider;

import org.eclipse.emf.edit.provider.IItemPropertySource;

import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;

import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.emf.edit.provider.ItemProviderAdapter;

import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.mappings.FeatureSeqInitializer;

import org.eclipse.gmf.mappings.GMFMapFactory;

import org.eclipse.gmf.mappings.GMFMapPackage;

public class FeatureSeqInitializerItemProvider extends ItemProviderAdapter implements IEditingDomainItemProvider, IStructuredItemContentProvider, ITreeItemContentProvider, IItemLabelProvider, IItemPropertySource {

    public FeatureSeqInitializerItemProvider (AdapterFactory adapterFactory) {
        super (adapterFactory);
    }

    public List getPropertyDescriptors (Object object) {
        if (itemPropertyDescriptors == null) {
            super.getPropertyDescriptors (object);
        }
        return itemPropertyDescriptors;
    }

    public Collection getChildrenFeatures (Object object) {
        if (childrenFeatures == null) {
            super.getChildrenFeatures (object);
            childrenFeatures.add (GMFMapPackage.eINSTANCE.getFeatureSeqInitializer_Initializers ());
        }
        return childrenFeatures;
    }

    public Object getImage (Object object) {
        return overlayImage (object, getResourceLocator ().getImage ("full/obj16/FeatureSeqInitializer"));
    }

    public String getText (Object object) {
        return getString ("_UI_FeatureSeqInitializer_type");
    }

    public void notifyChanged (Notification notification) {
        updateChildren (notification);
        switch (notification.getFeatureID (FeatureSeqInitializer.class)) {
            case GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS :
                fireNotifyChanged (new ViewerNotification (notification, notification.getNotifier (), true, false));
                return;
        }
        super.notifyChanged (notification);
    }

    protected void collectNewChildDescriptors (Collection newChildDescriptors, Object object) {
        super.collectNewChildDescriptors (newChildDescriptors, object);
        newChildDescriptors.add (createChildParameter (GMFMapPackage.eINSTANCE.getFeatureSeqInitializer_Initializers (), GMFMapFactory.eINSTANCE.createFeatureValueSpec ()));
    }

    public ResourceLocator getResourceLocator () {
        return GMFMapEditPlugin.INSTANCE;
    }

}

