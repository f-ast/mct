package org.eclipse.gmf.runtime.diagram.ui.editparts;

import org.eclipse.draw2d.FreeformLayer;

import org.eclipse.draw2d.FreeformLayeredPane;

import org.eclipse.draw2d.LayeredPane;

import org.eclipse.draw2d.ScalableFigure;

import org.eclipse.draw2d.ScalableFreeformLayeredPane;

import org.eclipse.draw2d.Viewport;

import org.eclipse.draw2d.geometry.Dimension;

import org.eclipse.draw2d.geometry.Point;

import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.draw2d.geometry.Translatable;

import org.eclipse.gef.Request;

import org.eclipse.gef.SnapToGeometry;

import org.eclipse.gef.SnapToGrid;

import org.eclipse.gef.editparts.GridLayer;

import org.eclipse.gef.editparts.ScalableFreeformRootEditPart;

import org.eclipse.gef.editparts.ZoomListener;

import org.eclipse.gef.editparts.ZoomManager;

import org.eclipse.gef.rulers.RulerProvider;

import org.eclipse.gmf.runtime.common.core.util.Log;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;

import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.GridLayerEx;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.PageBreakEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ZoomableEditPart;

import org.eclipse.gmf.runtime.diagram.ui.internal.figures.PageBreaksFigure;

import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageInfoHelper;

import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;

import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.DiagramRuler;

import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;

import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;

import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;

import org.eclipse.gmf.runtime.diagram.ui.util.MeasurementUnitHelper;

import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.ConnectionLayerEx;

import org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScaledGraphics;

import org.eclipse.gmf.runtime.draw2d.ui.internal.mapmode.IMapModeHolder;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;

import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeTypes;

import org.eclipse.gmf.runtime.gef.ui.internal.editparts.AnimatableZoomManager;

import org.eclipse.gmf.runtime.notation.MeasurementUnit;

import org.eclipse.jface.preference.IPreferenceStore;

import org.eclipse.jface.util.IPropertyChangeListener;

import org.eclipse.swt.SWT;

import org.eclipse.swt.graphics.Color;

import org.eclipse.swt.widgets.Display;

public class DiagramRootEditPart extends ScalableFreeformRootEditPart implements ZoomableEditPart, IDiagramPreferenceSupport {
    private WrapperMapMode mm;
    private class WrapperMapMode implements IMapModeHolder {

        public WrapperMapMode () {
            super ();
        }

        IMapMode containedMM = MapModeTypes.DEFAULT_MM;

        public void setContainedMapMode (IMapMode mm) {
            this.containedMM = mm;
        }

        public int DPtoLP (int deviceUnit) {
            return containedMM.DPtoLP (deviceUnit);
        }

        public Translatable DPtoLP (Translatable t) {
            return containedMM.DPtoLP (t);
        }

        public int LPtoDP (int logicalUnit) {
            return containedMM.LPtoDP (logicalUnit);
        }

        public Translatable LPtoDP (Translatable t) {
            return containedMM.LPtoDP (t);
        }

        public IMapMode getMapMode () {
            return containedMM;
        }

    }

    public DiagramRootEditPart () {
        super ();
    }

    public DiagramRootEditPart (MeasurementUnit mu) {
        super ();
        if (getMapMode () != null) mm.setContainedMapMode (MeasurementUnitHelper.getMapMode (mu));

    }

    class FeedbackLayer extends FreeformLayer {

        FeedbackLayer () {
            setEnabled (false);
        }

    }

    private class PreferenceStoreListener implements IPropertyChangeListener {

        public void propertyChange (org.eclipse.jface.util.PropertyChangeEvent event) {
            handlePreferenceStorePropertyChanged (event);
        }

    }

    static protected class DiagramScalableFreeformLayeredPane extends org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScalableFreeformLayeredPane implements ZoomListener {

        public DiagramScalableFreeformLayeredPane (IMapMode mm) {
            super (mm);
        }

        public void zoomChanged (double zoom) {
            ScaledGraphics.resetFontCache ();
        }

    }

    private DiagramRuler verticalRuler, horizontalRuler;
    private AnimatableZoomManager zoomManager;
    private double [] zoomLevels = {.05, .1, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 4};
    private PageBreakEditPart pageBreakEditPart;
    private PreferenceStoreListener listener = new PreferenceStoreListener ();
    private ScalableFreeformLayeredPane layers;
    private PreferencesHint preferencesHint = PreferencesHint.USE_DEFAULTS;
    private int printableLayerIndex;
    private GridLayer gridLayer;

    private void initPreferenceStoreListener () {
        IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
        preferenceStore.addPropertyChangeListener (listener);
    }

    private void removePreferenceStoreListener () {
        IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
        preferenceStore.removePropertyChangeListener (listener);
        listener = null;
    }

    final public static String PAGE_BREAKS_LAYER = "Page Breaks Layer";
    final public static String DECORATION_PRINTABLE_LAYER = "Decoration Printable Layer";
    final public static String DECORATION_UNPRINTABLE_LAYER = "Decoration Unprintable Layer";

    protected LayeredPane createPrintableLayers () {
        FreeformLayeredPane layeredPane = new FreeformLayeredPane ();
        layeredPane.add (new FreeformLayer (), PRIMARY_LAYER);
        layeredPane.add (new ConnectionLayerEx (), CONNECTION_LAYER);
        layeredPane.add (new FreeformLayer (), DECORATION_PRINTABLE_LAYER);
        return layeredPane;
    }

    protected void moveGridLayer (boolean inFront) {
        if (layers.getChildren ().indexOf (gridLayer) > printableLayerIndex && (! inFront)) {
            layers.remove (gridLayer);
            layers.add (gridLayer, GRID_LAYER, printableLayerIndex);
        } else if (layers.getChildren ().indexOf (gridLayer) <= printableLayerIndex && inFront) {
            layers.remove (gridLayer);
            layers.add (gridLayer, GRID_LAYER, printableLayerIndex + 1);
        }

    }

    protected ScalableFreeformLayeredPane createScaledLayers () {
        layers = createScalableFreeformLayeredPane ();
        layers.add (new FreeformLayer (), PAGE_BREAKS_LAYER);
        printableLayerIndex = layers.getChildren ().size ();
        layers.add (getPrintableLayers (), PRINTABLE_LAYERS);
        gridLayer = createGridLayer ();
        layers.add (gridLayer, GRID_LAYER);
        layers.add (new FreeformLayer (), DECORATION_UNPRINTABLE_LAYER);
        return layers;
    }

    protected ScalableFreeformLayeredPane createScalableFreeformLayeredPane () {
        return new DiagramScalableFreeformLayeredPane (getMapMode ());
    }

    public ZoomManager getZoomManager () {
        if (zoomManager == null) {
            zoomManager = new AnimatableZoomManager ((ScalableFigure) getScaledLayers (), ((Viewport) getFigure ()));
            zoomManager.setZoomLevels (zoomLevels);
            refreshEnableZoomAnimation (zoomManager);
        }
        return zoomManager;
    }

    public void zoomTo (double zoom, Point center) {
        zoomManager.zoomTo (zoom, center);
    }

    public void zoomTo (Rectangle rect) {
        zoomManager.zoomTo (rect);
    }

    public void zoomIn () {
        zoomManager.zoomIn ();
    }

    public void zoomIn (Point center) {
        zoomManager.zoomTo (zoomManager.getNextZoomLevel (), center);
    }

    public void zoomOut () {
        zoomManager.zoomOut ();
    }

    public void zoomOut (Point center) {
        zoomManager.zoomTo (zoomManager.getPreviousZoomLevel (), center);
    }

    protected IPreferenceStore getWorkspaceViewerPreferences () {
        if (getViewer () == null) return null;

        return ((DiagramGraphicalViewer) getViewer ()).getWorkspaceViewerPreferenceStore ();
    }

    public double getGridSpacing () {
        double gridSpacing = 0;
        if (getWorkspaceViewerPreferences () != null) gridSpacing = getWorkspaceViewerPreferences ().getDouble (WorkspaceViewerProperties.GRIDSPACING);

        if (gridSpacing == 0) {
            IPreferenceStore pluginStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
            gridSpacing = pluginStore.getDouble (IPreferenceConstants.PREF_GRID_SPACING);
        }
        return gridSpacing;
    }

    public void setGridStyle (int style) {
        if (gridLayer instanceof GridLayerEx) {
            ((GridLayerEx) gridLayer).setLineStyle (style);
        }
        gridLayer.repaint ();
    }

    public void setGridColor (Integer rgbValue) {
        gridLayer.setForegroundColor (DiagramColorRegistry.getInstance ().getColor (rgbValue));
    }

    public void setGridSpacing (double gridSpacing) {
        int rulerUnits = RulerProvider.UNIT_INCHES;
        if (getWorkspaceViewerPreferences () != null) rulerUnits = getWorkspaceViewerPreferences ().getInt (WorkspaceViewerProperties.RULERUNIT);

        double dotsPerInch = Display.getDefault ().getDPI ().x;
        int spacingInPixels = 0;
        switch (rulerUnits) {
            case RulerProvider.UNIT_INCHES :
                spacingInPixels = (int) Math.round (dotsPerInch * gridSpacing);
                break;
            case RulerProvider.UNIT_CENTIMETERS :
                spacingInPixels = (int) Math.round (dotsPerInch * gridSpacing / 2.54);
                break;
            default :
                spacingInPixels = (int) gridSpacing;
        }
        int spacing = getMapMode ().DPtoLP (spacingInPixels);
        getViewer ().setProperty (SnapToGrid.PROPERTY_GRID_SPACING, new Dimension (spacing, spacing));
    }

    public PageBreakEditPart getPageBreakEditPart () {
        if (pageBreakEditPart == null) {
            pageBreakEditPart = new PageBreakEditPart ();
            pageBreakEditPart.setParent (this);
        }
        return pageBreakEditPart;
    }

    protected void refreshPageBreaks () {
        if (getWorkspaceViewerPreferences ().getBoolean (WorkspaceViewerProperties.VIEWPAGEBREAKS)) showPageBreaks ();
        else hidePageBreaks ();

    }

    private void showPageBreaks () {
        getLayer (PAGE_BREAKS_LAYER).add (getPageBreakEditPart ().getFigure ());
        Point p = new Point (getWorkspaceViewerPreferences ().getInt (WorkspaceViewerProperties.PAGEBREAK_X), getWorkspaceViewerPreferences ().getInt (WorkspaceViewerProperties.PAGEBREAK_Y));
        getPageBreakEditPart ().set (p, PageInfoHelper.getChildrenBounds ((DiagramEditPart) getContents (), PageBreaksFigure.class));
    }

    private void hidePageBreaks () {
        if (getLayer (PAGE_BREAKS_LAYER).getChildren ().contains (getPageBreakEditPart ().getFigure ())) {
            getLayer (PAGE_BREAKS_LAYER).remove (getPageBreakEditPart ().getFigure ());
            getPageBreakEditPart ().updatePreferenceStore ();
        }
    }

    private void handlePreferenceStorePropertyChanged (org.eclipse.jface.util.PropertyChangeEvent event) {
        if (WorkspaceViewerProperties.VIEWPAGEBREAKS.equals (event.getProperty ())) {
            refreshPageBreaks ();
        } else if (isPageSizeChange (event.getProperty ())) {
            getPageBreakEditPart ().calculatePageBreakFigureBounds (false);
            refreshPageBreaks ();
        } else if (WorkspaceViewerProperties.VIEWGRID.equals (event.getProperty ())) {
            getViewer ().setProperty (SnapToGrid.PROPERTY_GRID_VISIBLE, event.getNewValue ());
        } else if (WorkspaceViewerProperties.SNAPTOGRID.equals (event.getProperty ())) {
            getViewer ().setProperty (SnapToGeometry.PROPERTY_SNAP_ENABLED, event.getNewValue ());
        } else if (WorkspaceViewerProperties.GRIDORDER.equals (event.getProperty ())) {
            moveGridLayer (((Boolean) event.getNewValue ()).booleanValue ());
        } else if (WorkspaceViewerProperties.GRIDSPACING.equals (event.getProperty ())) {
            Double spacing = (Double) event.getNewValue ();
            setGridSpacing (spacing.doubleValue ());
        } else if (WorkspaceViewerProperties.VIEWRULERS.equals (event.getProperty ())) {
            getViewer ().setProperty (RulerProvider.PROPERTY_RULER_VISIBILITY, event.getNewValue ());
        } else if (WorkspaceViewerProperties.RULERUNIT.equals (event.getProperty ())) {
            Object newValue = event.getNewValue ();
            int rulerUnits;
            if (newValue.getClass () == Integer.class) {
                rulerUnits = ((Integer) newValue).intValue ();
                setRulers (rulerUnits);
            } else if (newValue.getClass () == String.class) {
                try {
                    rulerUnits = Integer.parseInt ((String) newValue);
                    setRulers (rulerUnits);
                } catch (NumberFormatException e) {
                    Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.RESOURCE_FAILURE, e.toString ());
                }
            } else {
                Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.RESOURCE_FAILURE, newValue.getClass ().getName ());
            }

            Boolean oldValue = (Boolean) getViewer ().getProperty (RulerProvider.PROPERTY_RULER_VISIBILITY);
            getViewer ().setProperty (RulerProvider.PROPERTY_RULER_VISIBILITY, Boolean.FALSE);
            getViewer ().setProperty (RulerProvider.PROPERTY_RULER_VISIBILITY, oldValue);
            double spacing = getGridSpacing ();
            setGridSpacing (spacing);
        } else if (WorkspaceViewerProperties.GRIDLINECOLOR.equals (event.getProperty ())) {
            Integer newValue = (Integer) event.getNewValue ();
            setGridColor (newValue);
        } else if (WorkspaceViewerProperties.GRIDLINESTYLE.equals (event.getProperty ())) {
            Integer newValue = (Integer) event.getNewValue ();
            setGridStyle (newValue.intValue ());
        } else if (event.getProperty ().equals (IPreferenceConstants.PREF_ENABLE_ANIMATED_ZOOM)) {
            refreshEnableZoomAnimation (getZoomManager ());
        } else if (event.getProperty ().equals (IPreferenceConstants.PREF_ENABLE_ANTIALIAS)) {
            refreshEnableAntiAlias ();
        }

    }

    private void setRulers (int rulerUnits) {
        if (getVerticalRuler () != null) {
            getVerticalRuler ().setUnit (rulerUnits);
        } else {
            setVerticalRuler (new DiagramRuler (false, rulerUnits, null));
        }
        if (getHorizontalRuler () != null) {
            getHorizontalRuler ().setUnit (rulerUnits);
        } else {
            setHorizontalRuler (new DiagramRuler (true, rulerUnits, null));
        }
    }

    private void refreshEnableZoomAnimation (ZoomManager zoomMangr) {
        IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
        boolean animatedZoom = preferenceStore.getBoolean (IPreferenceConstants.PREF_ENABLE_ANIMATED_ZOOM);
        zoomMangr.setZoomAnimationStyle (animatedZoom ? ZoomManager.ANIMATE_ZOOM_IN_OUT : ZoomManager.ANIMATE_NEVER);
    }

    public void refreshVisuals () {
        refreshEnableAntiAlias ();
    }

    protected void refreshEnableAntiAlias () {
        IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
        boolean antiAlias = preferenceStore.getBoolean (IPreferenceConstants.PREF_ENABLE_ANTIALIAS);
        if (getLayers () instanceof org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScalableFreeformLayeredPane) ((org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScalableFreeformLayeredPane) layers).setAntiAlias (antiAlias);

    }

    protected void refreshRulerUnits () {
        if (getWorkspaceViewerPreferences () != null) setRulers (getWorkspaceViewerPreferences ().getInt (WorkspaceViewerProperties.RULERUNIT));

    }

    public void performRequest (Request request) {
        if (request.getType ().equals (RequestConstants.REQ_RECALCULATE_PAGEBREAKS)) {
            getPageBreakEditPart ().calculatePageBreakFigureBounds ();
        }
    }

    public void activate () {
        super.activate ();
        if (getWorkspaceViewerPreferences () != null) getWorkspaceViewerPreferences ().addPropertyChangeListener (listener);

        initPreferenceStoreListener ();
        ScalableFreeformLayeredPane pane = getLayers ();
        refreshEnableAntiAlias ();
        initWorkspaceViewerProperties ();
        refreshRulerUnits ();
        if (pane instanceof ZoomListener) {
            getZoomManager ().addZoomListener ((ZoomListener) pane);
        }
    }

    private static final int LIGHT_GRAY_RGB = 12632256;

    private void initWorkspaceViewerProperties () {
        IPreferenceStore wsPrefStore = getWorkspaceViewerPreferences ();
        if (wsPrefStore != null) {
            if (! wsPrefStore.contains (WorkspaceViewerProperties.GRIDORDER)) {
                wsPrefStore.setValue (WorkspaceViewerProperties.GRIDORDER, true);
            } else {
                moveGridLayer (wsPrefStore.getBoolean (WorkspaceViewerProperties.GRIDORDER));
            }
            if (! wsPrefStore.contains (WorkspaceViewerProperties.GRIDLINECOLOR)) {
                wsPrefStore.setValue (WorkspaceViewerProperties.GRIDLINECOLOR, LIGHT_GRAY_RGB);
            } else {
                setGridColor (new Integer (wsPrefStore.getInt (WorkspaceViewerProperties.GRIDLINECOLOR)));
            }
            if (! wsPrefStore.contains (WorkspaceViewerProperties.GRIDLINESTYLE)) {
                wsPrefStore.setValue (WorkspaceViewerProperties.GRIDLINESTYLE, SWT.LINE_CUSTOM);
            } else {
                setGridStyle (wsPrefStore.getInt (WorkspaceViewerProperties.GRIDLINESTYLE));
            }
            if ((! wsPrefStore.contains (WorkspaceViewerProperties.RULERUNIT)) || (! wsPrefStore.contains (WorkspaceViewerProperties.GRIDSPACING))) {
                IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint ().getPreferenceStore ();
                wsPrefStore.setValue (WorkspaceViewerProperties.RULERUNIT, 999);
                wsPrefStore.setValue (WorkspaceViewerProperties.RULERUNIT, preferenceStore.getInt (IPreferenceConstants.PREF_RULER_UNITS));
                wsPrefStore.setValue (WorkspaceViewerProperties.GRIDSPACING, preferenceStore.getDouble (IPreferenceConstants.PREF_GRID_SPACING));
            }
        }
    }

    public void deactivate () {
        if (getPageBreakEditPart () != null) getPageBreakEditPart ().updatePreferenceStore ();

        if (getWorkspaceViewerPreferences () != null) getWorkspaceViewerPreferences ().removePropertyChangeListener (listener);

        removePreferenceStoreListener ();
        ScalableFreeformLayeredPane pane = getLayers ();
        if (pane instanceof ZoomListener) {
            getZoomManager ().removeZoomListener ((ZoomListener) pane);
        }
        super.deactivate ();
    }

    private boolean isPageSizeChange (String s) {
        if (WorkspaceViewerProperties.PREF_MARGIN_TOP.equals (s) || WorkspaceViewerProperties.PREF_MARGIN_LEFT.equals (s) || WorkspaceViewerProperties.PREF_MARGIN_RIGHT.equals (s) || WorkspaceViewerProperties.PREF_MARGIN_BOTTOM.equals (s) || WorkspaceViewerProperties.PREF_PAGE_SIZE.equals (s) || WorkspaceViewerProperties.PREF_USE_LANDSCAPE.equals (s) || WorkspaceViewerProperties.PREF_USE_PORTRAIT.equals (s) || WorkspaceViewerProperties.PREF_PAGE_HEIGHT.equals (s) || WorkspaceViewerProperties.PREF_PAGE_WIDTH.equals (s) || WorkspaceViewerProperties.PREF_USE_DIAGRAM_SETTINGS.equals (s)) return true;
        else return false;

    }

    protected ScalableFreeformLayeredPane getLayers () {
        return layers;
    }

    protected void setLayers (ScalableFreeformLayeredPane layers) {
        this.layers = layers;
    }

    public void setPreferencesHint (PreferencesHint preferenceHint) {
        this.preferencesHint = preferenceHint;
    }

    public PreferencesHint getPreferencesHint () {
        return preferencesHint;
    }

    final public IMapMode getMapMode () {
        if (mm == null) mm = new WrapperMapMode ();

        return mm;
    }

    public DiagramRuler getHorizontalRuler () {
        return horizontalRuler;
    }

    private void setHorizontalRuler (DiagramRuler horizontalRuler) {
        this.horizontalRuler = horizontalRuler;
    }

    public DiagramRuler getVerticalRuler () {
        return verticalRuler;
    }

    private void setVerticalRuler (DiagramRuler verticalRuler) {
        this.verticalRuler = verticalRuler;
    }

    protected GridLayer createGridLayer () {
        return new GridLayerEx ();
    }

    protected GridLayer createGridLayer (int r, int g, int b) {
        return new GridLayerEx (new Color (null, r, g, b));
    }

}

