head	1.9;
access;
symbols
	v20081020-0700:1.9
	v20080722-1827:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080507-1326:1.9
	v20080503-1740:1.8
	v20080425-1959:1.6
	v20080407-2250:1.6
	v20080407-1545:1.6
	v20080331-1625:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080114-2222:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.9
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.8;
commitid	3e924820f4604567;

1.8
date	2008.05.03.19.12.26;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	20d0481cb9174567;

1.7
date	2008.05.03.18.33.02;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	1c13481cafcc4567;

1.6
date	2008.04.07.19.37.20;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	2da847fa77ee4567;

1.5
date	2007.05.17.16.26.49;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71d9464c82444567;

1.4
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.17.20.27.55;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.runtime.notation.LineStyle;
import org.eclipse.gmf.runtime.notation.NotationPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Line Style</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.LineStyleImpl#getLineColor <em>Line Color</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.LineStyleImpl#getLineWidth <em>Line Width</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy %partners
 */
public class LineStyleImpl extends NotationEObjectImpl implements LineStyle {
    /**
	 * The default value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineColor()
	 * @@generated
	 * @@ordered
	 */
	protected static final int LINE_COLOR_EDEFAULT = 11579568;

    /**
	 * The cached value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineColor()
	 * @@generated
	 * @@ordered
	 */
	protected int lineColor = LINE_COLOR_EDEFAULT;

    /**
	 * The default value of the '{@@link #getLineWidth() <em>Line Width</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineWidth()
	 * @@generated
	 * @@ordered
	 */
	protected static final int LINE_WIDTH_EDEFAULT = -1;

				/**
	 * The cached value of the '{@@link #getLineWidth() <em>Line Width</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineWidth()
	 * @@generated
	 * @@ordered
	 */
	protected int lineWidth = LINE_WIDTH_EDEFAULT;

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected LineStyleImpl() {
		super();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.LINE_STYLE;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getLineColor() {
		return lineColor;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLineColor(int newLineColor) {
		int oldLineColor = lineColor;
		lineColor = newLineColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.LINE_STYLE__LINE_COLOR, oldLineColor, lineColor));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getLineWidth() {
		return lineWidth;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLineWidth(int newLineWidth) {
		int oldLineWidth = lineWidth;
		lineWidth = newLineWidth;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.LINE_STYLE__LINE_WIDTH, oldLineWidth, lineWidth));
	}

				/**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.LINE_STYLE__LINE_COLOR:
				return new Integer(getLineColor());
			case NotationPackage.LINE_STYLE__LINE_WIDTH:
				return new Integer(getLineWidth());
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.LINE_STYLE__LINE_COLOR:
				setLineColor(((Integer)newValue).intValue());
				return;
			case NotationPackage.LINE_STYLE__LINE_WIDTH:
				setLineWidth(((Integer)newValue).intValue());
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.LINE_STYLE__LINE_COLOR:
				setLineColor(LINE_COLOR_EDEFAULT);
				return;
			case NotationPackage.LINE_STYLE__LINE_WIDTH:
				setLineWidth(LINE_WIDTH_EDEFAULT);
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.LINE_STYLE__LINE_COLOR:
				return lineColor != LINE_COLOR_EDEFAULT;
			case NotationPackage.LINE_STYLE__LINE_WIDTH:
				return lineWidth != LINE_WIDTH_EDEFAULT;
		}
		return eDynamicIsSet(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (lineColor: "); //$NON-NLS-1$
		result.append(lineColor);
		result.append(", lineWidth: "); //$NON-NLS-1$
		result.append(lineWidth);
		result.append(')');
		return result.toString();
	}

} //LineStyleImpl
@


1.8
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d37 1
a37 1
public class LineStyleImpl extends NotationObjectImpl implements LineStyle {
a144 2
			case NotationPackage.LINE_STYLE__UUID:
				return getUUID();
a159 3
			case NotationPackage.LINE_STYLE__UUID:
				setUUID((byte[])newValue);
				return;
a176 3
			case NotationPackage.LINE_STYLE__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a193 2
			case NotationPackage.LINE_STYLE__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
@


1.7
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d66 1
a66 1
	protected static final int LINE_WIDTH_EDEFAULT = 1;
@


1.6
log
@[225137] gmf-head ahunter 080407 Line styles notation enhancement
@
text
@a16 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d37 1
a37 1
public class LineStyleImpl extends FlatEObjectImpl implements LineStyle {
d145 2
d162 3
d182 3
d202 2
@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
d29 1
d60 20
d120 21
d148 2
d164 3
d181 3
d197 2
d214 2
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d39 2
a40 2
     * The default value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
     * <!-- begin-user-doc -->
d42 4
a45 4
     * @@see #getLineColor()
     * @@generated
     * @@ordered
     */
d49 2
a50 2
     * The cached value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
     * <!-- begin-user-doc -->
d52 4
a55 4
     * @@see #getLineColor()
     * @@generated
     * @@ordered
     */
d59 1
a59 1
     * <!-- begin-user-doc -->
d61 2
a62 2
     * @@generated
     */
d64 2
a65 2
        super();
    }
d68 1
a68 1
     * <!-- begin-user-doc -->
d70 2
a71 2
     * @@generated
     */
d73 2
a74 2
        return NotationPackage.Literals.LINE_STYLE;
    }
d77 1
a77 1
     * <!-- begin-user-doc -->
d79 2
a80 2
     * @@generated
     */
d82 2
a83 2
        return lineColor;
    }
d86 1
a86 1
     * <!-- begin-user-doc -->
d88 2
a89 2
     * @@generated
     */
d91 5
a95 5
        int oldLineColor = lineColor;
        lineColor = newLineColor;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.LINE_STYLE__LINE_COLOR, oldLineColor, lineColor));
    }
d98 1
a98 1
     * <!-- begin-user-doc -->
d100 2
a101 2
     * @@generated
     */
d103 6
a108 6
        switch (featureID) {
            case NotationPackage.LINE_STYLE__LINE_COLOR:
                return new Integer(getLineColor());
        }
        return eDynamicGet(featureID, resolve, coreType);
    }
d111 1
a111 1
     * <!-- begin-user-doc -->
d113 2
a114 2
     * @@generated
     */
d116 7
a122 7
        switch (featureID) {
            case NotationPackage.LINE_STYLE__LINE_COLOR:
                setLineColor(((Integer)newValue).intValue());
                return;
        }
        eDynamicSet(featureID, newValue);
    }
d125 1
a125 1
     * <!-- begin-user-doc -->
d127 2
a128 2
     * @@generated
     */
d130 7
a136 7
        switch (featureID) {
            case NotationPackage.LINE_STYLE__LINE_COLOR:
                setLineColor(LINE_COLOR_EDEFAULT);
                return;
        }
        eDynamicUnset(featureID);
    }
d139 1
a139 1
     * <!-- begin-user-doc -->
d141 2
a142 2
     * @@generated
     */
d144 6
a149 6
        switch (featureID) {
            case NotationPackage.LINE_STYLE__LINE_COLOR:
                return lineColor != LINE_COLOR_EDEFAULT;
        }
        return eDynamicIsSet(featureID);
    }
d152 1
a152 1
     * <!-- begin-user-doc -->
d154 2
a155 2
     * @@generated
     */
d157 1
a157 1
        if (eIsProxy()) return super.toString();
d159 6
a164 6
        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (lineColor: "); //$NON-NLS-1$
        result.append(lineColor);
        result.append(')');
        return result.toString();
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d17 1
a17 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
d37 1
a37 1
public class LineStyleImpl extends EObjectImpl implements LineStyle {
d107 1
a107 1
        return super.eGet(featureID, resolve, coreType);
d121 1
a121 1
        super.eSet(featureID, newValue);
d135 1
a135 1
        super.eUnset(featureID);
d148 1
a148 1
        return super.eIsSet(featureID);
@


1.3.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@d17 1
a17 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d37 1
a37 1
public class LineStyleImpl extends FlatEObjectImpl implements LineStyle {
d107 1
a107 1
        return eDynamicGet(featureID, resolve, coreType);
d121 1
a121 1
        eDynamicSet(featureID, newValue);
d135 1
a135 1
        eDynamicUnset(featureID);
d148 1
a148 1
        return eDynamicIsSet(featureID);
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a15 1
import org.eclipse.emf.ecore.EStructuralFeature;
a17 1

d38 8
a45 8
	/**
	 * The default value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineColor()
	 * @@generated
	 * @@ordered
	 */
d48 8
a55 8
	/**
	 * The cached value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineColor()
	 * @@generated
	 * @@ordered
	 */
d58 2
a59 2
	/**
	 * <!-- begin-user-doc -->
d61 2
a62 2
	 * @@generated
	 */
d64 2
a65 2
		super();
	}
d67 2
a68 2
	/**
	 * <!-- begin-user-doc -->
d70 2
a71 2
	 * @@generated
	 */
d73 2
a74 2
		return NotationPackage.eINSTANCE.getLineStyle();
	}
d76 2
a77 2
	/**
	 * <!-- begin-user-doc -->
d79 2
a80 2
	 * @@generated
	 */
d82 2
a83 2
		return lineColor;
	}
d85 2
a86 2
	/**
	 * <!-- begin-user-doc -->
d88 2
a89 2
	 * @@generated
	 */
d91 59
a149 59
		int oldLineColor = lineColor;
		lineColor = newLineColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.LINE_STYLE__LINE_COLOR, oldLineColor, lineColor));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.LINE_STYLE__LINE_COLOR:
				return new Integer(getLineColor());
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.LINE_STYLE__LINE_COLOR:
				setLineColor(((Integer)newValue).intValue());
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.LINE_STYLE__LINE_COLOR:
				setLineColor(LINE_COLOR_EDEFAULT);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.LINE_STYLE__LINE_COLOR:
				return lineColor != LINE_COLOR_EDEFAULT;
		}
		return eDynamicIsSet(eFeature);
	}
d151 2
a152 2
	/**
	 * <!-- begin-user-doc -->
d154 2
a155 2
	 * @@generated
	 */
d157 1
a157 1
		if (eIsProxy()) return super.toString();
d159 6
a164 6
		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (lineColor: "); //$NON-NLS-1$
		result.append(lineColor);
		result.append(')');
		return result.toString();
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

