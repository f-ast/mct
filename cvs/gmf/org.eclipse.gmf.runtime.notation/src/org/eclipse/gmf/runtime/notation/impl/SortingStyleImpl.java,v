head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080507-1326:1.7
	v20080503-1740:1.6
	v20080425-1959:1.5
	v20080407-2250:1.5
	v20080407-1545:1.5
	v20080331-1625:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080114-2222:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	3e924820f4604567;

1.6
date	2008.05.03.18.33.02;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	1c13481cafcc4567;

1.5
date	2007.05.17.16.26.49;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71d9464c82444567;

1.4
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.17.20.27.55;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.Sorting;
import org.eclipse.gmf.runtime.notation.SortingDirection;
import org.eclipse.gmf.runtime.notation.SortingStyle;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sorting Style</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.SortingStyleImpl#getSorting <em>Sorting</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.SortingStyleImpl#getSortingKeys <em>Sorting Keys</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.SortingStyleImpl#getSortedObjects <em>Sorted Objects</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy %partners
 */
public class SortingStyleImpl extends NotationEObjectImpl implements SortingStyle {
    /**
	 * The default value of the '{@@link #getSorting() <em>Sorting</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSorting()
	 * @@generated
	 * @@ordered
	 */
	protected static final Sorting SORTING_EDEFAULT = Sorting.NONE_LITERAL;

    /**
	 * The offset of the flags representing the value of the '{@@link #getSorting() <em>Sorting</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int SORTING_EFLAG_OFFSET = 8;

				/**
	 * The flags representing the default value of the '{@@link #getSorting() <em>Sorting</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int SORTING_EFLAG_DEFAULT = Sorting.VALUES.indexOf(SORTING_EDEFAULT) << SORTING_EFLAG_OFFSET;

				/**
	 * The array of enumeration values for '{@@link Sorting Sorting}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	private static final Sorting[] SORTING_EFLAG_VALUES = (Sorting[])Sorting.VALUES.toArray(new Sorting[Sorting.VALUES.size()]);

				/**
	 * The flags representing the value of the '{@@link #getSorting() <em>Sorting</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSorting()
	 * @@generated
	 * @@ordered
	 */
	protected static final int SORTING_EFLAG = 0x3 << SORTING_EFLAG_OFFSET;

				/**
	 * The default value of the '{@@link #getSortingKeys() <em>Sorting Keys</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSortingKeys()
	 * @@generated NOT
	 * @@ordered
	 */
	protected static final Map SORTING_KEYS_EDEFAULT = Collections.EMPTY_MAP;

    /**
	 * The cached value of the '{@@link #getSortingKeys() <em>Sorting Keys</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSortingKeys()
	 * @@generated
	 * @@ordered
	 */
	protected Map sortingKeys = SORTING_KEYS_EDEFAULT;

    /**
	 * The cached value of the '{@@link #getSortedObjects() <em>Sorted Objects</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSortedObjects()
	 * @@generated
	 * @@ordered
	 */
	protected EList sortedObjects;

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected SortingStyleImpl() {
		super();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.SORTING_STYLE;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Sorting getSorting() {
		return SORTING_EFLAG_VALUES[(eFlags & SORTING_EFLAG) >>> SORTING_EFLAG_OFFSET];
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setSorting(Sorting newSorting) {
		Sorting oldSorting = SORTING_EFLAG_VALUES[(eFlags & SORTING_EFLAG) >>> SORTING_EFLAG_OFFSET];
		if (newSorting == null) newSorting = SORTING_EDEFAULT;
		eFlags = eFlags & ~SORTING_EFLAG | Sorting.VALUES.indexOf(newSorting) << SORTING_EFLAG_OFFSET;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SORTING_STYLE__SORTING, oldSorting, newSorting));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public Map getSortingKeys() {
		return Collections.unmodifiableMap(sortingKeys);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public void setSortingKeys(Map newSortingKeys) {
		Map oldSortingKeys = sortingKeys;

		if (newSortingKeys == null )
			throw new NullPointerException("the 'newSortingKeys' parameter is null"); //$NON-NLS-1$
		else if (newSortingKeys.isEmpty())
			sortingKeys = SORTING_KEYS_EDEFAULT;
		else {
			Map tempMap = new LinkedHashMap(newSortingKeys.size());
			for (Iterator i = newSortingKeys.keySet().iterator(); i.hasNext();) {
				Object key = i.next();
				if (!(key instanceof String))
					throw new IllegalArgumentException("One or more keys in the map is not of type java.lang.String"); //$NON-NLS-1$
				Object value = newSortingKeys.get(key);
				if (!(value instanceof SortingDirection))
					throw new IllegalArgumentException("One or more values in the map is not of type org.eclipse.gmf.runtime.notation.SortingDirection"); //$NON-NLS-1$
				tempMap.put(key, value);
			}
			sortingKeys = tempMap;
		}
		
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SORTING_STYLE__SORTING_KEYS, oldSortingKeys, sortingKeys));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList getSortedObjects() {
		if (sortedObjects == null) {
			sortedObjects = new EObjectResolvingEList(EObject.class, this, NotationPackage.SORTING_STYLE__SORTED_OBJECTS);
		}
		return sortedObjects;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.SORTING_STYLE__SORTING:
				return getSorting();
			case NotationPackage.SORTING_STYLE__SORTING_KEYS:
				return getSortingKeys();
			case NotationPackage.SORTING_STYLE__SORTED_OBJECTS:
				return getSortedObjects();
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.SORTING_STYLE__SORTING:
				setSorting((Sorting)newValue);
				return;
			case NotationPackage.SORTING_STYLE__SORTING_KEYS:
				setSortingKeys((Map)newValue);
				return;
			case NotationPackage.SORTING_STYLE__SORTED_OBJECTS:
				getSortedObjects().clear();
				getSortedObjects().addAll((Collection)newValue);
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.SORTING_STYLE__SORTING:
				setSorting(SORTING_EDEFAULT);
				return;
			case NotationPackage.SORTING_STYLE__SORTING_KEYS:
				setSortingKeys(SORTING_KEYS_EDEFAULT);
				return;
			case NotationPackage.SORTING_STYLE__SORTED_OBJECTS:
				getSortedObjects().clear();
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.SORTING_STYLE__SORTING:
				return (eFlags & SORTING_EFLAG) != SORTING_EFLAG_DEFAULT;
			case NotationPackage.SORTING_STYLE__SORTING_KEYS:
				return SORTING_KEYS_EDEFAULT == null ? sortingKeys != null : !SORTING_KEYS_EDEFAULT.equals(sortingKeys);
			case NotationPackage.SORTING_STYLE__SORTED_OBJECTS:
				return sortedObjects != null && !sortedObjects.isEmpty();
		}
		return eDynamicIsSet(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (sorting: "); //$NON-NLS-1$
		result.append(SORTING_EFLAG_VALUES[(eFlags & SORTING_EFLAG) >>> SORTING_EFLAG_OFFSET]);
		result.append(", sortingKeys: "); //$NON-NLS-1$
		result.append(sortingKeys);
		result.append(')');
		return result.toString();
	}

} //SortingStyleImpl
@


1.6
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d49 1
a49 1
public class SortingStyleImpl extends NotationObjectImpl implements SortingStyle {
d61 28
a88 1
	 * The cached value of the '{@@link #getSorting() <em>Sorting</em>}' attribute.
d95 1
a95 1
	protected Sorting sorting = SORTING_EDEFAULT;
d97 1
a97 1
	/**
d151 1
a151 1
		return sorting;
d160 3
a162 2
		Sorting oldSorting = sorting;
		sorting = newSorting == null ? SORTING_EDEFAULT : newSorting;
d164 1
a164 1
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SORTING_STYLE__SORTING, oldSorting, sorting));
a224 2
			case NotationPackage.SORTING_STYLE__UUID:
				return getUUID();
a241 3
			case NotationPackage.SORTING_STYLE__UUID:
				setUUID((byte[])newValue);
				return;
a262 3
			case NotationPackage.SORTING_STYLE__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a282 2
			case NotationPackage.SORTING_STYLE__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
d284 1
a284 1
				return sorting != SORTING_EDEFAULT;
d303 1
a303 1
		result.append(sorting);
@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@a24 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d49 1
a49 1
public class SortingStyleImpl extends FlatEObjectImpl implements SortingStyle {
d197 2
d216 3
d240 3
d263 2
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d52 2
a53 2
     * The default value of the '{@@link #getSorting() <em>Sorting</em>}' attribute.
     * <!-- begin-user-doc -->
d55 4
a58 4
     * @@see #getSorting()
     * @@generated
     * @@ordered
     */
d62 2
a63 2
     * The cached value of the '{@@link #getSorting() <em>Sorting</em>}' attribute.
     * <!-- begin-user-doc -->
d65 4
a68 4
     * @@see #getSorting()
     * @@generated
     * @@ordered
     */
d82 2
a83 2
     * The cached value of the '{@@link #getSortingKeys() <em>Sorting Keys</em>}' attribute.
     * <!-- begin-user-doc -->
d85 4
a88 4
     * @@see #getSortingKeys()
     * @@generated
     * @@ordered
     */
d92 2
a93 2
     * The cached value of the '{@@link #getSortedObjects() <em>Sorted Objects</em>}' reference list.
     * <!-- begin-user-doc -->
d95 5
a99 5
     * @@see #getSortedObjects()
     * @@generated
     * @@ordered
     */
	protected EList sortedObjects = null;
d102 1
a102 1
     * <!-- begin-user-doc -->
d104 2
a105 2
     * @@generated
     */
d107 2
a108 2
        super();
    }
d111 1
a111 1
     * <!-- begin-user-doc -->
d113 2
a114 2
     * @@generated
     */
d116 2
a117 2
        return NotationPackage.Literals.SORTING_STYLE;
    }
d120 1
a120 1
     * <!-- begin-user-doc -->
d122 2
a123 2
     * @@generated
     */
d125 2
a126 2
        return sorting;
    }
d129 1
a129 1
     * <!-- begin-user-doc -->
d131 2
a132 2
     * @@generated
     */
d134 5
a138 5
        Sorting oldSorting = sorting;
        sorting = newSorting == null ? SORTING_EDEFAULT : newSorting;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SORTING_STYLE__SORTING, oldSorting, sorting));
    }
d180 1
a180 1
     * <!-- begin-user-doc -->
d182 2
a183 2
     * @@generated
     */
d185 5
a189 5
        if (sortedObjects == null) {
            sortedObjects = new EObjectResolvingEList(EObject.class, this, NotationPackage.SORTING_STYLE__SORTED_OBJECTS);
        }
        return sortedObjects;
    }
d192 1
a192 1
     * <!-- begin-user-doc -->
d194 2
a195 2
     * @@generated
     */
d197 10
a206 10
        switch (featureID) {
            case NotationPackage.SORTING_STYLE__SORTING:
                return getSorting();
            case NotationPackage.SORTING_STYLE__SORTING_KEYS:
                return getSortingKeys();
            case NotationPackage.SORTING_STYLE__SORTED_OBJECTS:
                return getSortedObjects();
        }
        return eDynamicGet(featureID, resolve, coreType);
    }
d209 1
a209 1
     * <!-- begin-user-doc -->
d211 2
a212 2
     * @@generated
     */
d214 14
a227 14
        switch (featureID) {
            case NotationPackage.SORTING_STYLE__SORTING:
                setSorting((Sorting)newValue);
                return;
            case NotationPackage.SORTING_STYLE__SORTING_KEYS:
                setSortingKeys((Map)newValue);
                return;
            case NotationPackage.SORTING_STYLE__SORTED_OBJECTS:
                getSortedObjects().clear();
                getSortedObjects().addAll((Collection)newValue);
                return;
        }
        eDynamicSet(featureID, newValue);
    }
d230 1
a230 1
     * <!-- begin-user-doc -->
d232 2
a233 2
     * @@generated
     */
d235 13
a247 13
        switch (featureID) {
            case NotationPackage.SORTING_STYLE__SORTING:
                setSorting(SORTING_EDEFAULT);
                return;
            case NotationPackage.SORTING_STYLE__SORTING_KEYS:
                setSortingKeys(SORTING_KEYS_EDEFAULT);
                return;
            case NotationPackage.SORTING_STYLE__SORTED_OBJECTS:
                getSortedObjects().clear();
                return;
        }
        eDynamicUnset(featureID);
    }
d250 1
a250 1
     * <!-- begin-user-doc -->
d252 2
a253 2
     * @@generated
     */
d255 10
a264 10
        switch (featureID) {
            case NotationPackage.SORTING_STYLE__SORTING:
                return sorting != SORTING_EDEFAULT;
            case NotationPackage.SORTING_STYLE__SORTING_KEYS:
                return SORTING_KEYS_EDEFAULT == null ? sortingKeys != null : !SORTING_KEYS_EDEFAULT.equals(sortingKeys);
            case NotationPackage.SORTING_STYLE__SORTED_OBJECTS:
                return sortedObjects != null && !sortedObjects.isEmpty();
        }
        return eDynamicIsSet(featureID);
    }
d267 1
a267 1
     * <!-- begin-user-doc -->
d269 2
a270 2
     * @@generated
     */
d272 1
a272 1
        if (eIsProxy()) return super.toString();
d274 8
a281 8
        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (sorting: "); //$NON-NLS-1$
        result.append(sorting);
        result.append(", sortingKeys: "); //$NON-NLS-1$
        result.append(sortingKeys);
        result.append(')');
        return result.toString();
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d25 1
a25 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
d50 1
a50 1
public class SortingStyleImpl extends EObjectImpl implements SortingStyle {
d205 1
a205 1
        return super.eGet(featureID, resolve, coreType);
d226 1
a226 1
        super.eSet(featureID, newValue);
d246 1
a246 1
        super.eUnset(featureID);
d263 1
a263 1
        return super.eIsSet(featureID);
@


1.3.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@d25 1
a25 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d50 1
a50 1
public class SortingStyleImpl extends FlatEObjectImpl implements SortingStyle {
d205 1
a205 1
        return eDynamicGet(featureID, resolve, coreType);
d226 1
a226 1
        eDynamicSet(featureID, newValue);
d246 1
a246 1
        eDynamicUnset(featureID);
d263 1
a263 1
        return eDynamicIsSet(featureID);
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a23 1
import org.eclipse.emf.ecore.EStructuralFeature;
a26 1

d51 8
a58 8
	/**
	 * The default value of the '{@@link #getSorting() <em>Sorting</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSorting()
	 * @@generated
	 * @@ordered
	 */
d61 8
a68 8
	/**
	 * The cached value of the '{@@link #getSorting() <em>Sorting</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSorting()
	 * @@generated
	 * @@ordered
	 */
d81 8
a88 8
	/**
	 * The cached value of the '{@@link #getSortingKeys() <em>Sorting Keys</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSortingKeys()
	 * @@generated
	 * @@ordered
	 */
d91 8
a98 8
	/**
	 * The cached value of the '{@@link #getSortedObjects() <em>Sorted Objects</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSortedObjects()
	 * @@generated
	 * @@ordered
	 */
d101 2
a102 2
	/**
	 * <!-- begin-user-doc -->
d104 2
a105 2
	 * @@generated
	 */
d107 2
a108 2
		super();
	}
d110 2
a111 2
	/**
	 * <!-- begin-user-doc -->
d113 2
a114 2
	 * @@generated
	 */
d116 2
a117 2
		return NotationPackage.eINSTANCE.getSortingStyle();
	}
d119 2
a120 2
	/**
	 * <!-- begin-user-doc -->
d122 2
a123 2
	 * @@generated
	 */
d125 2
a126 2
		return sorting;
	}
d128 2
a129 2
	/**
	 * <!-- begin-user-doc -->
d131 2
a132 2
	 * @@generated
	 */
d134 5
a138 5
		Sorting oldSorting = sorting;
		sorting = newSorting == null ? SORTING_EDEFAULT : newSorting;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SORTING_STYLE__SORTING, oldSorting, sorting));
	}
d179 2
a180 2
	/**
	 * <!-- begin-user-doc -->
d182 2
a183 2
	 * @@generated
	 */
d185 80
a264 63
		if (sortedObjects == null) {
			sortedObjects = new EObjectResolvingEList(EObject.class, this, NotationPackage.SORTING_STYLE__SORTED_OBJECTS);
		}
		return sortedObjects;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.SORTING_STYLE__SORTING:
				return getSorting();
			case NotationPackage.SORTING_STYLE__SORTING_KEYS:
				return getSortingKeys();
			case NotationPackage.SORTING_STYLE__SORTED_OBJECTS:
				return getSortedObjects();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.SORTING_STYLE__SORTING:
				setSorting((Sorting)newValue);
				return;
			case NotationPackage.SORTING_STYLE__SORTING_KEYS:
				setSortingKeys((Map)newValue);
				return;
			case NotationPackage.SORTING_STYLE__SORTED_OBJECTS:
				getSortedObjects().clear();
				getSortedObjects().addAll((Collection)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.SORTING_STYLE__SORTING:
				setSorting(SORTING_EDEFAULT);
				return;
			case NotationPackage.SORTING_STYLE__SORTING_KEYS:
				setSortingKeys(SORTING_KEYS_EDEFAULT);
				return;
			case NotationPackage.SORTING_STYLE__SORTED_OBJECTS:
				getSortedObjects().clear();
				return;
		}
		eDynamicUnset(eFeature);
	}
d266 2
a267 2
	/**
	 * <!-- begin-user-doc -->
d269 2
a270 19
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.SORTING_STYLE__SORTING:
				return sorting != SORTING_EDEFAULT;
			case NotationPackage.SORTING_STYLE__SORTING_KEYS:
				return SORTING_KEYS_EDEFAULT == null ? sortingKeys != null : !SORTING_KEYS_EDEFAULT.equals(sortingKeys);
			case NotationPackage.SORTING_STYLE__SORTED_OBJECTS:
				return sortedObjects != null && !sortedObjects.isEmpty();
		}
		return eDynamicIsSet(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d272 1
a272 1
		if (eIsProxy()) return super.toString();
d274 8
a281 8
		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (sorting: "); //$NON-NLS-1$
		result.append(sorting);
		result.append(", sortingKeys: "); //$NON-NLS-1$
		result.append(sortingKeys);
		result.append(')');
		return result.toString();
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

