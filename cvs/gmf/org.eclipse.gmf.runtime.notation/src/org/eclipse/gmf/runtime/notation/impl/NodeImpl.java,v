head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080507-1326:1.7
	v20080503-1740:1.6
	v20080425-1959:1.5
	v20080407-2250:1.5
	v20080407-1545:1.5
	v20080331-1625:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080114-2222:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	3e924820f4604567;

1.6
date	2008.05.03.18.33.02;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	1c13481cafcc4567;

1.5
date	2007.05.17.16.26.49;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71d9464c82444567;

1.4
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.17.20.27.54;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.runtime.notation.LayoutConstraint;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.NodeImpl#getLayoutConstraint <em>Layout Constraint</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy %partners
 */
public class NodeImpl extends ViewImpl implements Node {
    /**
	 * The cached value of the '{@@link #getLayoutConstraint() <em>Layout Constraint</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLayoutConstraint()
	 * @@generated
	 * @@ordered
	 */
	protected LayoutConstraint layoutConstraint;

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected NodeImpl() {
		super();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.NODE;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LayoutConstraint getLayoutConstraint() {
		return layoutConstraint;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetLayoutConstraint(LayoutConstraint newLayoutConstraint, NotificationChain msgs) {
		LayoutConstraint oldLayoutConstraint = layoutConstraint;
		layoutConstraint = newLayoutConstraint;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NotationPackage.NODE__LAYOUT_CONSTRAINT, oldLayoutConstraint, newLayoutConstraint);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLayoutConstraint(LayoutConstraint newLayoutConstraint) {
		if (newLayoutConstraint != layoutConstraint) {
			NotificationChain msgs = null;
			if (layoutConstraint != null)
				msgs = ((InternalEObject)layoutConstraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NotationPackage.NODE__LAYOUT_CONSTRAINT, null, msgs);
			if (newLayoutConstraint != null)
				msgs = ((InternalEObject)newLayoutConstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NotationPackage.NODE__LAYOUT_CONSTRAINT, null, msgs);
			msgs = basicSetLayoutConstraint(newLayoutConstraint, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.NODE__LAYOUT_CONSTRAINT, newLayoutConstraint, newLayoutConstraint));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public LayoutConstraint createLayoutConstraint(EClass eClass) {
		LayoutConstraint newLayoutConstraint = (LayoutConstraint) eClass.getEPackage().getEFactoryInstance().create(eClass);
		setLayoutConstraint(newLayoutConstraint);
		return newLayoutConstraint;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case NotationPackage.NODE__EANNOTATIONS:
				return ((InternalEList)getEAnnotations()).basicRemove(otherEnd, msgs);
			case NotationPackage.NODE__SOURCE_EDGES:
				return ((InternalEList)getSourceEdges()).basicRemove(otherEnd, msgs);
			case NotationPackage.NODE__TARGET_EDGES:
				return ((InternalEList)getTargetEdges()).basicRemove(otherEnd, msgs);
			case NotationPackage.NODE__PERSISTED_CHILDREN:
				return ((InternalEList)getPersistedChildren()).basicRemove(otherEnd, msgs);
			case NotationPackage.NODE__STYLES:
				return ((InternalEList)getStyles()).basicRemove(otherEnd, msgs);
			case NotationPackage.NODE__TRANSIENT_CHILDREN:
				return ((InternalEList)getTransientChildren()).basicRemove(otherEnd, msgs);
			case NotationPackage.NODE__LAYOUT_CONSTRAINT:
				return basicSetLayoutConstraint(null, msgs);
		}
		return eDynamicInverseRemove(otherEnd, featureID, msgs);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.NODE__EANNOTATIONS:
				return getEAnnotations();
			case NotationPackage.NODE__VISIBLE:
				return isVisible() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.NODE__TYPE:
				return getType();
			case NotationPackage.NODE__MUTABLE:
				return isMutable() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.NODE__SOURCE_EDGES:
				return getSourceEdges();
			case NotationPackage.NODE__TARGET_EDGES:
				return getTargetEdges();
			case NotationPackage.NODE__PERSISTED_CHILDREN:
				return getPersistedChildren();
			case NotationPackage.NODE__STYLES:
				return getStyles();
			case NotationPackage.NODE__ELEMENT:
				if (resolve) return getElement();
				return basicGetElement();
			case NotationPackage.NODE__DIAGRAM:
				if (resolve) return getDiagram();
				return basicGetDiagram();
			case NotationPackage.NODE__TRANSIENT_CHILDREN:
				return getTransientChildren();
			case NotationPackage.NODE__LAYOUT_CONSTRAINT:
				return getLayoutConstraint();
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.NODE__EANNOTATIONS:
				getEAnnotations().clear();
				getEAnnotations().addAll((Collection)newValue);
				return;
			case NotationPackage.NODE__VISIBLE:
				setVisible(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.NODE__TYPE:
				setType((String)newValue);
				return;
			case NotationPackage.NODE__MUTABLE:
				setMutable(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.NODE__SOURCE_EDGES:
				getSourceEdges().clear();
				getSourceEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.NODE__TARGET_EDGES:
				getTargetEdges().clear();
				getTargetEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.NODE__PERSISTED_CHILDREN:
				getPersistedChildren().clear();
				getPersistedChildren().addAll((Collection)newValue);
				return;
			case NotationPackage.NODE__STYLES:
				getStyles().clear();
				getStyles().addAll((Collection)newValue);
				return;
			case NotationPackage.NODE__ELEMENT:
				setElement((EObject)newValue);
				return;
			case NotationPackage.NODE__TRANSIENT_CHILDREN:
				getTransientChildren().clear();
				getTransientChildren().addAll((Collection)newValue);
				return;
			case NotationPackage.NODE__LAYOUT_CONSTRAINT:
				setLayoutConstraint((LayoutConstraint)newValue);
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.NODE__EANNOTATIONS:
				getEAnnotations().clear();
				return;
			case NotationPackage.NODE__VISIBLE:
				setVisible(VISIBLE_EDEFAULT);
				return;
			case NotationPackage.NODE__TYPE:
				setType(TYPE_EDEFAULT);
				return;
			case NotationPackage.NODE__MUTABLE:
				setMutable(MUTABLE_EDEFAULT);
				return;
			case NotationPackage.NODE__SOURCE_EDGES:
				getSourceEdges().clear();
				return;
			case NotationPackage.NODE__TARGET_EDGES:
				getTargetEdges().clear();
				return;
			case NotationPackage.NODE__PERSISTED_CHILDREN:
				getPersistedChildren().clear();
				return;
			case NotationPackage.NODE__STYLES:
				getStyles().clear();
				return;
			case NotationPackage.NODE__ELEMENT:
				unsetElement();
				return;
			case NotationPackage.NODE__TRANSIENT_CHILDREN:
				getTransientChildren().clear();
				return;
			case NotationPackage.NODE__LAYOUT_CONSTRAINT:
				setLayoutConstraint((LayoutConstraint)null);
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.NODE__EANNOTATIONS:
				return eAnnotations != null && !eAnnotations.isEmpty();
			case NotationPackage.NODE__VISIBLE:
				return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
			case NotationPackage.NODE__TYPE:
				return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
			case NotationPackage.NODE__MUTABLE:
				return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
			case NotationPackage.NODE__SOURCE_EDGES:
				return sourceEdges != null && !sourceEdges.isEmpty();
			case NotationPackage.NODE__TARGET_EDGES:
				return targetEdges != null && !targetEdges.isEmpty();
			case NotationPackage.NODE__PERSISTED_CHILDREN:
				return persistedChildren != null && !persistedChildren.isEmpty();
			case NotationPackage.NODE__STYLES:
				return styles != null && !styles.isEmpty();
			case NotationPackage.NODE__ELEMENT:
				return isSetElement();
			case NotationPackage.NODE__DIAGRAM:
				return basicGetDiagram() != null;
			case NotationPackage.NODE__TRANSIENT_CHILDREN:
				return transientChildren != null && !transientChildren.isEmpty();
			case NotationPackage.NODE__LAYOUT_CONSTRAINT:
				return layoutConstraint != null;
		}
		return eDynamicIsSet(featureID);
	}

} //NodeImpl
@


1.6
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@a158 2
			case NotationPackage.NODE__UUID:
				return getUUID();
a197 3
			case NotationPackage.NODE__UUID:
				setUUID((byte[])newValue);
				return;
a246 3
			case NotationPackage.NODE__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a289 2
			case NotationPackage.NODE__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@d159 2
d200 3
d252 3
d298 2
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d45 2
a46 2
     * The cached value of the '{@@link #getLayoutConstraint() <em>Layout Constraint</em>}' containment reference.
     * <!-- begin-user-doc -->
d48 5
a52 5
     * @@see #getLayoutConstraint()
     * @@generated
     * @@ordered
     */
	protected LayoutConstraint layoutConstraint = null;
d55 1
a55 1
     * <!-- begin-user-doc -->
d57 2
a58 2
     * @@generated
     */
d60 2
a61 2
        super();
    }
d64 1
a64 1
     * <!-- begin-user-doc -->
d66 2
a67 2
     * @@generated
     */
d69 2
a70 2
        return NotationPackage.Literals.NODE;
    }
d73 1
a73 1
     * <!-- begin-user-doc -->
d75 2
a76 2
     * @@generated
     */
d78 2
a79 2
        return layoutConstraint;
    }
d82 1
a82 1
     * <!-- begin-user-doc -->
d84 2
a85 2
     * @@generated
     */
d87 8
a94 8
        LayoutConstraint oldLayoutConstraint = layoutConstraint;
        layoutConstraint = newLayoutConstraint;
        if (eNotificationRequired()) {
            ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NotationPackage.NODE__LAYOUT_CONSTRAINT, oldLayoutConstraint, newLayoutConstraint);
            if (msgs == null) msgs = notification; else msgs.add(notification);
        }
        return msgs;
    }
d97 1
a97 1
     * <!-- begin-user-doc -->
d99 2
a100 2
     * @@generated
     */
d102 12
a113 12
        if (newLayoutConstraint != layoutConstraint) {
            NotificationChain msgs = null;
            if (layoutConstraint != null)
                msgs = ((InternalEObject)layoutConstraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NotationPackage.NODE__LAYOUT_CONSTRAINT, null, msgs);
            if (newLayoutConstraint != null)
                msgs = ((InternalEObject)newLayoutConstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NotationPackage.NODE__LAYOUT_CONSTRAINT, null, msgs);
            msgs = basicSetLayoutConstraint(newLayoutConstraint, msgs);
            if (msgs != null) msgs.dispatch();
        }
        else if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.NODE__LAYOUT_CONSTRAINT, newLayoutConstraint, newLayoutConstraint));
    }
d126 1
a126 1
     * <!-- begin-user-doc -->
d128 2
a129 2
     * @@generated
     */
d131 18
a148 18
        switch (featureID) {
            case NotationPackage.NODE__EANNOTATIONS:
                return ((InternalEList)getEAnnotations()).basicRemove(otherEnd, msgs);
            case NotationPackage.NODE__SOURCE_EDGES:
                return ((InternalEList)getSourceEdges()).basicRemove(otherEnd, msgs);
            case NotationPackage.NODE__TARGET_EDGES:
                return ((InternalEList)getTargetEdges()).basicRemove(otherEnd, msgs);
            case NotationPackage.NODE__PERSISTED_CHILDREN:
                return ((InternalEList)getPersistedChildren()).basicRemove(otherEnd, msgs);
            case NotationPackage.NODE__STYLES:
                return ((InternalEList)getStyles()).basicRemove(otherEnd, msgs);
            case NotationPackage.NODE__TRANSIENT_CHILDREN:
                return ((InternalEList)getTransientChildren()).basicRemove(otherEnd, msgs);
            case NotationPackage.NODE__LAYOUT_CONSTRAINT:
                return basicSetLayoutConstraint(null, msgs);
        }
        return eDynamicInverseRemove(otherEnd, featureID, msgs);
    }
d151 1
a151 1
     * <!-- begin-user-doc -->
d153 2
a154 2
     * @@generated
     */
d156 30
a185 30
        switch (featureID) {
            case NotationPackage.NODE__EANNOTATIONS:
                return getEAnnotations();
            case NotationPackage.NODE__VISIBLE:
                return isVisible() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.NODE__TYPE:
                return getType();
            case NotationPackage.NODE__MUTABLE:
                return isMutable() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.NODE__SOURCE_EDGES:
                return getSourceEdges();
            case NotationPackage.NODE__TARGET_EDGES:
                return getTargetEdges();
            case NotationPackage.NODE__PERSISTED_CHILDREN:
                return getPersistedChildren();
            case NotationPackage.NODE__STYLES:
                return getStyles();
            case NotationPackage.NODE__ELEMENT:
                if (resolve) return getElement();
                return basicGetElement();
            case NotationPackage.NODE__DIAGRAM:
                if (resolve) return getDiagram();
                return basicGetDiagram();
            case NotationPackage.NODE__TRANSIENT_CHILDREN:
                return getTransientChildren();
            case NotationPackage.NODE__LAYOUT_CONSTRAINT:
                return getLayoutConstraint();
        }
        return eDynamicGet(featureID, resolve, coreType);
    }
d188 1
a188 1
     * <!-- begin-user-doc -->
d190 2
a191 2
     * @@generated
     */
d193 43
a235 43
        switch (featureID) {
            case NotationPackage.NODE__EANNOTATIONS:
                getEAnnotations().clear();
                getEAnnotations().addAll((Collection)newValue);
                return;
            case NotationPackage.NODE__VISIBLE:
                setVisible(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.NODE__TYPE:
                setType((String)newValue);
                return;
            case NotationPackage.NODE__MUTABLE:
                setMutable(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.NODE__SOURCE_EDGES:
                getSourceEdges().clear();
                getSourceEdges().addAll((Collection)newValue);
                return;
            case NotationPackage.NODE__TARGET_EDGES:
                getTargetEdges().clear();
                getTargetEdges().addAll((Collection)newValue);
                return;
            case NotationPackage.NODE__PERSISTED_CHILDREN:
                getPersistedChildren().clear();
                getPersistedChildren().addAll((Collection)newValue);
                return;
            case NotationPackage.NODE__STYLES:
                getStyles().clear();
                getStyles().addAll((Collection)newValue);
                return;
            case NotationPackage.NODE__ELEMENT:
                setElement((EObject)newValue);
                return;
            case NotationPackage.NODE__TRANSIENT_CHILDREN:
                getTransientChildren().clear();
                getTransientChildren().addAll((Collection)newValue);
                return;
            case NotationPackage.NODE__LAYOUT_CONSTRAINT:
                setLayoutConstraint((LayoutConstraint)newValue);
                return;
        }
        eDynamicSet(featureID, newValue);
    }
d238 1
a238 1
     * <!-- begin-user-doc -->
d240 2
a241 2
     * @@generated
     */
d243 37
a279 37
        switch (featureID) {
            case NotationPackage.NODE__EANNOTATIONS:
                getEAnnotations().clear();
                return;
            case NotationPackage.NODE__VISIBLE:
                setVisible(VISIBLE_EDEFAULT);
                return;
            case NotationPackage.NODE__TYPE:
                setType(TYPE_EDEFAULT);
                return;
            case NotationPackage.NODE__MUTABLE:
                setMutable(MUTABLE_EDEFAULT);
                return;
            case NotationPackage.NODE__SOURCE_EDGES:
                getSourceEdges().clear();
                return;
            case NotationPackage.NODE__TARGET_EDGES:
                getTargetEdges().clear();
                return;
            case NotationPackage.NODE__PERSISTED_CHILDREN:
                getPersistedChildren().clear();
                return;
            case NotationPackage.NODE__STYLES:
                getStyles().clear();
                return;
            case NotationPackage.NODE__ELEMENT:
                unsetElement();
                return;
            case NotationPackage.NODE__TRANSIENT_CHILDREN:
                getTransientChildren().clear();
                return;
            case NotationPackage.NODE__LAYOUT_CONSTRAINT:
                setLayoutConstraint((LayoutConstraint)null);
                return;
        }
        eDynamicUnset(featureID);
    }
d282 1
a282 1
     * <!-- begin-user-doc -->
d284 2
a285 2
     * @@generated
     */
d287 28
a314 28
        switch (featureID) {
            case NotationPackage.NODE__EANNOTATIONS:
                return eAnnotations != null && !eAnnotations.isEmpty();
            case NotationPackage.NODE__VISIBLE:
                return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
            case NotationPackage.NODE__TYPE:
                return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
            case NotationPackage.NODE__MUTABLE:
                return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
            case NotationPackage.NODE__SOURCE_EDGES:
                return sourceEdges != null && !sourceEdges.isEmpty();
            case NotationPackage.NODE__TARGET_EDGES:
                return targetEdges != null && !targetEdges.isEmpty();
            case NotationPackage.NODE__PERSISTED_CHILDREN:
                return persistedChildren != null && !persistedChildren.isEmpty();
            case NotationPackage.NODE__STYLES:
                return styles != null && !styles.isEmpty();
            case NotationPackage.NODE__ELEMENT:
                return isSetElement();
            case NotationPackage.NODE__DIAGRAM:
                return basicGetDiagram() != null;
            case NotationPackage.NODE__TRANSIENT_CHILDREN:
                return transientChildren != null && !transientChildren.isEmpty();
            case NotationPackage.NODE__LAYOUT_CONSTRAINT:
                return layoutConstraint != null;
        }
        return eDynamicIsSet(featureID);
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d14 2
d19 1
d22 1
d132 12
d147 1
a147 1
        return super.eInverseRemove(otherEnd, featureID, msgs);
d157 24
d184 1
a184 1
        return super.eGet(featureID, resolve, coreType);
d194 36
d234 1
a234 1
        super.eSet(featureID, newValue);
d244 30
d278 1
a278 1
        super.eUnset(featureID);
d288 22
d313 1
a313 1
        return super.eIsSet(featureID);
@


1.3.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@a13 2
import java.util.Collection;

a16 1
import org.eclipse.emf.ecore.EObject;
a18 1
import org.eclipse.emf.ecore.util.InternalEList;
a127 12
            case NotationPackage.NODE__EANNOTATIONS:
                return ((InternalEList)getEAnnotations()).basicRemove(otherEnd, msgs);
            case NotationPackage.NODE__SOURCE_EDGES:
                return ((InternalEList)getSourceEdges()).basicRemove(otherEnd, msgs);
            case NotationPackage.NODE__TARGET_EDGES:
                return ((InternalEList)getTargetEdges()).basicRemove(otherEnd, msgs);
            case NotationPackage.NODE__PERSISTED_CHILDREN:
                return ((InternalEList)getPersistedChildren()).basicRemove(otherEnd, msgs);
            case NotationPackage.NODE__STYLES:
                return ((InternalEList)getStyles()).basicRemove(otherEnd, msgs);
            case NotationPackage.NODE__TRANSIENT_CHILDREN:
                return ((InternalEList)getTransientChildren()).basicRemove(otherEnd, msgs);
d131 1
a131 1
        return eDynamicInverseRemove(otherEnd, featureID, msgs);
a140 24
            case NotationPackage.NODE__EANNOTATIONS:
                return getEAnnotations();
            case NotationPackage.NODE__VISIBLE:
                return isVisible() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.NODE__TYPE:
                return getType();
            case NotationPackage.NODE__MUTABLE:
                return isMutable() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.NODE__SOURCE_EDGES:
                return getSourceEdges();
            case NotationPackage.NODE__TARGET_EDGES:
                return getTargetEdges();
            case NotationPackage.NODE__PERSISTED_CHILDREN:
                return getPersistedChildren();
            case NotationPackage.NODE__STYLES:
                return getStyles();
            case NotationPackage.NODE__ELEMENT:
                if (resolve) return getElement();
                return basicGetElement();
            case NotationPackage.NODE__DIAGRAM:
                if (resolve) return getDiagram();
                return basicGetDiagram();
            case NotationPackage.NODE__TRANSIENT_CHILDREN:
                return getTransientChildren();
d144 1
a144 1
        return eDynamicGet(featureID, resolve, coreType);
a153 36
            case NotationPackage.NODE__EANNOTATIONS:
                getEAnnotations().clear();
                getEAnnotations().addAll((Collection)newValue);
                return;
            case NotationPackage.NODE__VISIBLE:
                setVisible(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.NODE__TYPE:
                setType((String)newValue);
                return;
            case NotationPackage.NODE__MUTABLE:
                setMutable(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.NODE__SOURCE_EDGES:
                getSourceEdges().clear();
                getSourceEdges().addAll((Collection)newValue);
                return;
            case NotationPackage.NODE__TARGET_EDGES:
                getTargetEdges().clear();
                getTargetEdges().addAll((Collection)newValue);
                return;
            case NotationPackage.NODE__PERSISTED_CHILDREN:
                getPersistedChildren().clear();
                getPersistedChildren().addAll((Collection)newValue);
                return;
            case NotationPackage.NODE__STYLES:
                getStyles().clear();
                getStyles().addAll((Collection)newValue);
                return;
            case NotationPackage.NODE__ELEMENT:
                setElement((EObject)newValue);
                return;
            case NotationPackage.NODE__TRANSIENT_CHILDREN:
                getTransientChildren().clear();
                getTransientChildren().addAll((Collection)newValue);
                return;
d158 1
a158 1
        eDynamicSet(featureID, newValue);
a167 30
            case NotationPackage.NODE__EANNOTATIONS:
                getEAnnotations().clear();
                return;
            case NotationPackage.NODE__VISIBLE:
                setVisible(VISIBLE_EDEFAULT);
                return;
            case NotationPackage.NODE__TYPE:
                setType(TYPE_EDEFAULT);
                return;
            case NotationPackage.NODE__MUTABLE:
                setMutable(MUTABLE_EDEFAULT);
                return;
            case NotationPackage.NODE__SOURCE_EDGES:
                getSourceEdges().clear();
                return;
            case NotationPackage.NODE__TARGET_EDGES:
                getTargetEdges().clear();
                return;
            case NotationPackage.NODE__PERSISTED_CHILDREN:
                getPersistedChildren().clear();
                return;
            case NotationPackage.NODE__STYLES:
                getStyles().clear();
                return;
            case NotationPackage.NODE__ELEMENT:
                unsetElement();
                return;
            case NotationPackage.NODE__TRANSIENT_CHILDREN:
                getTransientChildren().clear();
                return;
d172 1
a172 1
        eDynamicUnset(featureID);
a181 22
            case NotationPackage.NODE__EANNOTATIONS:
                return eAnnotations != null && !eAnnotations.isEmpty();
            case NotationPackage.NODE__VISIBLE:
                return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
            case NotationPackage.NODE__TYPE:
                return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
            case NotationPackage.NODE__MUTABLE:
                return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
            case NotationPackage.NODE__SOURCE_EDGES:
                return sourceEdges != null && !sourceEdges.isEmpty();
            case NotationPackage.NODE__TARGET_EDGES:
                return targetEdges != null && !targetEdges.isEmpty();
            case NotationPackage.NODE__PERSISTED_CHILDREN:
                return persistedChildren != null && !persistedChildren.isEmpty();
            case NotationPackage.NODE__STYLES:
                return styles != null && !styles.isEmpty();
            case NotationPackage.NODE__ELEMENT:
                return isSetElement();
            case NotationPackage.NODE__DIAGRAM:
                return basicGetDiagram() != null;
            case NotationPackage.NODE__TRANSIENT_CHILDREN:
                return transientChildren != null && !transientChildren.isEmpty();
d185 1
a185 1
        return eDynamicIsSet(featureID);
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a13 2
import java.util.Collection;

a16 2
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
a18 2
import org.eclipse.emf.ecore.util.InternalEList;

d40 8
a47 8
	/**
	 * The cached value of the '{@@link #getLayoutConstraint() <em>Layout Constraint</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLayoutConstraint()
	 * @@generated
	 * @@ordered
	 */
d50 2
a51 2
	/**
	 * <!-- begin-user-doc -->
d53 2
a54 2
	 * @@generated
	 */
d56 2
a57 2
		super();
	}
d59 2
a60 2
	/**
	 * <!-- begin-user-doc -->
d62 2
a63 2
	 * @@generated
	 */
d65 2
a66 2
		return NotationPackage.eINSTANCE.getNode();
	}
d68 2
a69 2
	/**
	 * <!-- begin-user-doc -->
d71 2
a72 2
	 * @@generated
	 */
d74 2
a75 2
		return layoutConstraint;
	}
d77 2
a78 2
	/**
	 * <!-- begin-user-doc -->
d80 2
a81 2
	 * @@generated
	 */
d83 8
a90 8
		LayoutConstraint oldLayoutConstraint = layoutConstraint;
		layoutConstraint = newLayoutConstraint;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NotationPackage.NODE__LAYOUT_CONSTRAINT, oldLayoutConstraint, newLayoutConstraint);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}
d92 2
a93 2
	/**
	 * <!-- begin-user-doc -->
d95 2
a96 2
	 * @@generated
	 */
d98 12
a109 12
		if (newLayoutConstraint != layoutConstraint) {
			NotificationChain msgs = null;
			if (layoutConstraint != null)
				msgs = ((InternalEObject)layoutConstraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NotationPackage.NODE__LAYOUT_CONSTRAINT, null, msgs);
			if (newLayoutConstraint != null)
				msgs = ((InternalEObject)newLayoutConstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NotationPackage.NODE__LAYOUT_CONSTRAINT, null, msgs);
			msgs = basicSetLayoutConstraint(newLayoutConstraint, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.NODE__LAYOUT_CONSTRAINT, newLayoutConstraint, newLayoutConstraint));
	}
d121 66
a186 217
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case NotationPackage.NODE__EANNOTATIONS:
					return ((InternalEList)getEAnnotations()).basicAdd(otherEnd, msgs);
				case NotationPackage.NODE__SOURCE_EDGES:
					return ((InternalEList)getSourceEdges()).basicAdd(otherEnd, msgs);
				case NotationPackage.NODE__TARGET_EDGES:
					return ((InternalEList)getTargetEdges()).basicAdd(otherEnd, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
		}
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case NotationPackage.NODE__EANNOTATIONS:
					return ((InternalEList)getEAnnotations()).basicRemove(otherEnd, msgs);
				case NotationPackage.NODE__SOURCE_EDGES:
					return ((InternalEList)getSourceEdges()).basicRemove(otherEnd, msgs);
				case NotationPackage.NODE__TARGET_EDGES:
					return ((InternalEList)getTargetEdges()).basicRemove(otherEnd, msgs);
				case NotationPackage.NODE__PERSISTED_CHILDREN:
					return ((InternalEList)getPersistedChildren()).basicRemove(otherEnd, msgs);
				case NotationPackage.NODE__STYLES:
					return ((InternalEList)getStyles()).basicRemove(otherEnd, msgs);
				case NotationPackage.NODE__TRANSIENT_CHILDREN:
					return ((InternalEList)getTransientChildren()).basicRemove(otherEnd, msgs);
				case NotationPackage.NODE__LAYOUT_CONSTRAINT:
					return basicSetLayoutConstraint(null, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
		}
		return eBasicSetContainer(null, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.NODE__EANNOTATIONS:
				return getEAnnotations();
			case NotationPackage.NODE__VISIBLE:
				return isVisible() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.NODE__TYPE:
				return getType();
			case NotationPackage.NODE__MUTABLE:
				return isMutable() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.NODE__SOURCE_EDGES:
				return getSourceEdges();
			case NotationPackage.NODE__TARGET_EDGES:
				return getTargetEdges();
			case NotationPackage.NODE__PERSISTED_CHILDREN:
				return getPersistedChildren();
			case NotationPackage.NODE__STYLES:
				return getStyles();
			case NotationPackage.NODE__ELEMENT:
				if (resolve) return getElement();
				return basicGetElement();
			case NotationPackage.NODE__DIAGRAM:
				if (resolve) return getDiagram();
				return basicGetDiagram();
			case NotationPackage.NODE__TRANSIENT_CHILDREN:
				return getTransientChildren();
			case NotationPackage.NODE__LAYOUT_CONSTRAINT:
				return getLayoutConstraint();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.NODE__EANNOTATIONS:
				getEAnnotations().clear();
				getEAnnotations().addAll((Collection)newValue);
				return;
			case NotationPackage.NODE__VISIBLE:
				setVisible(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.NODE__TYPE:
				setType((String)newValue);
				return;
			case NotationPackage.NODE__MUTABLE:
				setMutable(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.NODE__SOURCE_EDGES:
				getSourceEdges().clear();
				getSourceEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.NODE__TARGET_EDGES:
				getTargetEdges().clear();
				getTargetEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.NODE__PERSISTED_CHILDREN:
				getPersistedChildren().clear();
				getPersistedChildren().addAll((Collection)newValue);
				return;
			case NotationPackage.NODE__STYLES:
				getStyles().clear();
				getStyles().addAll((Collection)newValue);
				return;
			case NotationPackage.NODE__ELEMENT:
				setElement((EObject)newValue);
				return;
			case NotationPackage.NODE__TRANSIENT_CHILDREN:
				getTransientChildren().clear();
				getTransientChildren().addAll((Collection)newValue);
				return;
			case NotationPackage.NODE__LAYOUT_CONSTRAINT:
				setLayoutConstraint((LayoutConstraint)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.NODE__EANNOTATIONS:
				getEAnnotations().clear();
				return;
			case NotationPackage.NODE__VISIBLE:
				setVisible(VISIBLE_EDEFAULT);
				return;
			case NotationPackage.NODE__TYPE:
				setType(TYPE_EDEFAULT);
				return;
			case NotationPackage.NODE__MUTABLE:
				setMutable(MUTABLE_EDEFAULT);
				return;
			case NotationPackage.NODE__SOURCE_EDGES:
				getSourceEdges().clear();
				return;
			case NotationPackage.NODE__TARGET_EDGES:
				getTargetEdges().clear();
				return;
			case NotationPackage.NODE__PERSISTED_CHILDREN:
				getPersistedChildren().clear();
				return;
			case NotationPackage.NODE__STYLES:
				getStyles().clear();
				return;
			case NotationPackage.NODE__ELEMENT:
				unsetElement();
				return;
			case NotationPackage.NODE__TRANSIENT_CHILDREN:
				getTransientChildren().clear();
				return;
			case NotationPackage.NODE__LAYOUT_CONSTRAINT:
				setLayoutConstraint((LayoutConstraint)null);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.NODE__EANNOTATIONS:
				return eAnnotations != null && !eAnnotations.isEmpty();
			case NotationPackage.NODE__VISIBLE:
				return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
			case NotationPackage.NODE__TYPE:
				return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
			case NotationPackage.NODE__MUTABLE:
				return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
			case NotationPackage.NODE__SOURCE_EDGES:
				return sourceEdges != null && !sourceEdges.isEmpty();
			case NotationPackage.NODE__TARGET_EDGES:
				return targetEdges != null && !targetEdges.isEmpty();
			case NotationPackage.NODE__PERSISTED_CHILDREN:
				return persistedChildren != null && !persistedChildren.isEmpty();
			case NotationPackage.NODE__STYLES:
				return styles != null && !styles.isEmpty();
			case NotationPackage.NODE__ELEMENT:
				return isSetElement();
			case NotationPackage.NODE__DIAGRAM:
				return basicGetDiagram() != null;
			case NotationPackage.NODE__TRANSIENT_CHILDREN:
				return transientChildren != null && !transientChildren.isEmpty();
			case NotationPackage.NODE__LAYOUT_CONSTRAINT:
				return layoutConstraint != null;
		}
		return eDynamicIsSet(eFeature);
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

