head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080507-1326:1.7
	v20080503-1740:1.6
	v20080425-1959:1.5
	v20080407-2250:1.5
	v20080407-1545:1.5
	v20080331-1625:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080114-2222:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	3e924820f4604567;

1.6
date	2008.05.03.18.33.03;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	1c13481cafcc4567;

1.5
date	2007.05.17.16.26.50;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71d9464c82444567;

1.4
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.17.20.27.55;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.gmf.runtime.notation.Filtering;
import org.eclipse.gmf.runtime.notation.FilteringStyle;
import org.eclipse.gmf.runtime.notation.NotationPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Filtering Style</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.FilteringStyleImpl#getFiltering <em>Filtering</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.FilteringStyleImpl#getFilteringKeys <em>Filtering Keys</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.FilteringStyleImpl#getFilteredObjects <em>Filtered Objects</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy org.eclipse.gmf.runtime.notation.*
 */
public class FilteringStyleImpl extends NotationEObjectImpl implements FilteringStyle {
    /**
	 * The default value of the '{@@link #getFiltering() <em>Filtering</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFiltering()
	 * @@generated
	 * @@ordered
	 */
	protected static final Filtering FILTERING_EDEFAULT = Filtering.NONE_LITERAL;

    /**
	 * The offset of the flags representing the value of the '{@@link #getFiltering() <em>Filtering</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int FILTERING_EFLAG_OFFSET = 8;

				/**
	 * The flags representing the default value of the '{@@link #getFiltering() <em>Filtering</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int FILTERING_EFLAG_DEFAULT = Filtering.VALUES.indexOf(FILTERING_EDEFAULT) << FILTERING_EFLAG_OFFSET;

				/**
	 * The array of enumeration values for '{@@link Filtering Filtering}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	private static final Filtering[] FILTERING_EFLAG_VALUES = (Filtering[])Filtering.VALUES.toArray(new Filtering[Filtering.VALUES.size()]);

				/**
	 * The flags representing the value of the '{@@link #getFiltering() <em>Filtering</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFiltering()
	 * @@generated
	 * @@ordered
	 */
	protected static final int FILTERING_EFLAG = 0x3 << FILTERING_EFLAG_OFFSET;

				/**
	 * The default value of the '{@@link #getFilteringKeys() <em>Filtering Keys</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFilteringKeys()
	 * @@generated NOT
	 * @@ordered
	 */
	protected static final List FILTERING_KEYS_EDEFAULT = Collections.EMPTY_LIST;

    /**
	 * The cached value of the '{@@link #getFilteringKeys() <em>Filtering Keys</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFilteringKeys()
	 * @@generated
	 * @@ordered
	 */
	protected List filteringKeys = FILTERING_KEYS_EDEFAULT;

    /**
	 * The cached value of the '{@@link #getFilteredObjects() <em>Filtered Objects</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFilteredObjects()
	 * @@generated
	 * @@ordered
	 */
	protected EList filteredObjects;

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected FilteringStyleImpl() {
		super();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.FILTERING_STYLE;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Filtering getFiltering() {
		return FILTERING_EFLAG_VALUES[(eFlags & FILTERING_EFLAG) >>> FILTERING_EFLAG_OFFSET];
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setFiltering(Filtering newFiltering) {
		Filtering oldFiltering = FILTERING_EFLAG_VALUES[(eFlags & FILTERING_EFLAG) >>> FILTERING_EFLAG_OFFSET];
		if (newFiltering == null) newFiltering = FILTERING_EDEFAULT;
		eFlags = eFlags & ~FILTERING_EFLAG | Filtering.VALUES.indexOf(newFiltering) << FILTERING_EFLAG_OFFSET;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FILTERING_STYLE__FILTERING, oldFiltering, newFiltering));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public List getFilteringKeys() {
		return Collections.unmodifiableList(filteringKeys);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public void setFilteringKeys(List newFilteringKeys) {
		List oldFilteringKeys = filteringKeys;

		if (newFilteringKeys == null )
			throw new NullPointerException("the 'newFilteringKeys' parameter is null"); //$NON-NLS-1$
		else if (newFilteringKeys.isEmpty())
			filteringKeys = FILTERING_KEYS_EDEFAULT;
		else {
			List tempList = new ArrayList(newFilteringKeys.size());
			for (Iterator i = newFilteringKeys.iterator(); i.hasNext();) {
				Object key = i.next();
				if (!(key instanceof String))
					throw new IllegalArgumentException("One or more objects in the list is not of type java.lang.String"); //$NON-NLS-1$
				tempList.add(key);
			}
			filteringKeys = tempList;
		}
		
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FILTERING_STYLE__FILTERING_KEYS, oldFilteringKeys, filteringKeys));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList getFilteredObjects() {
		if (filteredObjects == null) {
			filteredObjects = new EObjectResolvingEList(EObject.class, this, NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS);
		}
		return filteredObjects;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.FILTERING_STYLE__FILTERING:
				return getFiltering();
			case NotationPackage.FILTERING_STYLE__FILTERING_KEYS:
				return getFilteringKeys();
			case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS:
				return getFilteredObjects();
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.FILTERING_STYLE__FILTERING:
				setFiltering((Filtering)newValue);
				return;
			case NotationPackage.FILTERING_STYLE__FILTERING_KEYS:
				setFilteringKeys((List)newValue);
				return;
			case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS:
				getFilteredObjects().clear();
				getFilteredObjects().addAll((Collection)newValue);
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.FILTERING_STYLE__FILTERING:
				setFiltering(FILTERING_EDEFAULT);
				return;
			case NotationPackage.FILTERING_STYLE__FILTERING_KEYS:
				setFilteringKeys(FILTERING_KEYS_EDEFAULT);
				return;
			case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS:
				getFilteredObjects().clear();
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.FILTERING_STYLE__FILTERING:
				return (eFlags & FILTERING_EFLAG) != FILTERING_EFLAG_DEFAULT;
			case NotationPackage.FILTERING_STYLE__FILTERING_KEYS:
				return FILTERING_KEYS_EDEFAULT == null ? filteringKeys != null : !FILTERING_KEYS_EDEFAULT.equals(filteringKeys);
			case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS:
				return filteredObjects != null && !filteredObjects.isEmpty();
		}
		return eDynamicIsSet(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (filtering: "); //$NON-NLS-1$
		result.append(FILTERING_EFLAG_VALUES[(eFlags & FILTERING_EFLAG) >>> FILTERING_EFLAG_OFFSET]);
		result.append(", filteringKeys: "); //$NON-NLS-1$
		result.append(filteringKeys);
		result.append(')');
		return result.toString();
	}

} //FilteringStyleImpl
@


1.6
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d48 1
a48 1
public class FilteringStyleImpl extends NotationObjectImpl implements FilteringStyle {
d60 28
a87 1
	 * The cached value of the '{@@link #getFiltering() <em>Filtering</em>}' attribute.
d94 1
a94 1
	protected Filtering filtering = FILTERING_EDEFAULT;
d96 1
a96 1
	/**
d150 1
a150 1
		return filtering;
d159 3
a161 2
		Filtering oldFiltering = filtering;
		filtering = newFiltering == null ? FILTERING_EDEFAULT : newFiltering;
d163 1
a163 1
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FILTERING_STYLE__FILTERING, oldFiltering, filtering));
a220 2
			case NotationPackage.FILTERING_STYLE__UUID:
				return getUUID();
a237 3
			case NotationPackage.FILTERING_STYLE__UUID:
				setUUID((byte[])newValue);
				return;
a258 3
			case NotationPackage.FILTERING_STYLE__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a278 2
			case NotationPackage.FILTERING_STYLE__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
d280 1
a280 1
				return filtering != FILTERING_EDEFAULT;
d299 1
a299 1
		result.append(filtering);
@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@a24 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d48 1
a48 1
public class FilteringStyleImpl extends FlatEObjectImpl implements FilteringStyle {
d193 2
d212 3
d236 3
d259 2
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d51 2
a52 2
     * The default value of the '{@@link #getFiltering() <em>Filtering</em>}' attribute.
     * <!-- begin-user-doc -->
d54 4
a57 4
     * @@see #getFiltering()
     * @@generated
     * @@ordered
     */
d61 2
a62 2
     * The cached value of the '{@@link #getFiltering() <em>Filtering</em>}' attribute.
     * <!-- begin-user-doc -->
d64 4
a67 4
     * @@see #getFiltering()
     * @@generated
     * @@ordered
     */
d81 2
a82 2
     * The cached value of the '{@@link #getFilteringKeys() <em>Filtering Keys</em>}' attribute.
     * <!-- begin-user-doc -->
d84 4
a87 4
     * @@see #getFilteringKeys()
     * @@generated
     * @@ordered
     */
d91 2
a92 2
     * The cached value of the '{@@link #getFilteredObjects() <em>Filtered Objects</em>}' reference list.
     * <!-- begin-user-doc -->
d94 5
a98 5
     * @@see #getFilteredObjects()
     * @@generated
     * @@ordered
     */
	protected EList filteredObjects = null;
d101 1
a101 1
     * <!-- begin-user-doc -->
d103 2
a104 2
     * @@generated
     */
d106 2
a107 2
        super();
    }
d110 1
a110 1
     * <!-- begin-user-doc -->
d112 2
a113 2
     * @@generated
     */
d115 2
a116 2
        return NotationPackage.Literals.FILTERING_STYLE;
    }
d119 1
a119 1
     * <!-- begin-user-doc -->
d121 2
a122 2
     * @@generated
     */
d124 2
a125 2
        return filtering;
    }
d128 1
a128 1
     * <!-- begin-user-doc -->
d130 2
a131 2
     * @@generated
     */
d133 5
a137 5
        Filtering oldFiltering = filtering;
        filtering = newFiltering == null ? FILTERING_EDEFAULT : newFiltering;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FILTERING_STYLE__FILTERING, oldFiltering, filtering));
    }
d176 1
a176 1
     * <!-- begin-user-doc -->
d178 2
a179 2
     * @@generated
     */
d181 5
a185 5
        if (filteredObjects == null) {
            filteredObjects = new EObjectResolvingEList(EObject.class, this, NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS);
        }
        return filteredObjects;
    }
d188 1
a188 1
     * <!-- begin-user-doc -->
d190 2
a191 2
     * @@generated
     */
d193 10
a202 10
        switch (featureID) {
            case NotationPackage.FILTERING_STYLE__FILTERING:
                return getFiltering();
            case NotationPackage.FILTERING_STYLE__FILTERING_KEYS:
                return getFilteringKeys();
            case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS:
                return getFilteredObjects();
        }
        return eDynamicGet(featureID, resolve, coreType);
    }
d205 1
a205 1
     * <!-- begin-user-doc -->
d207 2
a208 2
     * @@generated
     */
d210 14
a223 14
        switch (featureID) {
            case NotationPackage.FILTERING_STYLE__FILTERING:
                setFiltering((Filtering)newValue);
                return;
            case NotationPackage.FILTERING_STYLE__FILTERING_KEYS:
                setFilteringKeys((List)newValue);
                return;
            case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS:
                getFilteredObjects().clear();
                getFilteredObjects().addAll((Collection)newValue);
                return;
        }
        eDynamicSet(featureID, newValue);
    }
d226 1
a226 1
     * <!-- begin-user-doc -->
d228 2
a229 2
     * @@generated
     */
d231 13
a243 13
        switch (featureID) {
            case NotationPackage.FILTERING_STYLE__FILTERING:
                setFiltering(FILTERING_EDEFAULT);
                return;
            case NotationPackage.FILTERING_STYLE__FILTERING_KEYS:
                setFilteringKeys(FILTERING_KEYS_EDEFAULT);
                return;
            case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS:
                getFilteredObjects().clear();
                return;
        }
        eDynamicUnset(featureID);
    }
d246 1
a246 1
     * <!-- begin-user-doc -->
d248 2
a249 2
     * @@generated
     */
d251 10
a260 10
        switch (featureID) {
            case NotationPackage.FILTERING_STYLE__FILTERING:
                return filtering != FILTERING_EDEFAULT;
            case NotationPackage.FILTERING_STYLE__FILTERING_KEYS:
                return FILTERING_KEYS_EDEFAULT == null ? filteringKeys != null : !FILTERING_KEYS_EDEFAULT.equals(filteringKeys);
            case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS:
                return filteredObjects != null && !filteredObjects.isEmpty();
        }
        return eDynamicIsSet(featureID);
    }
d263 1
a263 1
     * <!-- begin-user-doc -->
d265 2
a266 2
     * @@generated
     */
d268 1
a268 1
        if (eIsProxy()) return super.toString();
d270 8
a277 8
        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (filtering: "); //$NON-NLS-1$
        result.append(filtering);
        result.append(", filteringKeys: "); //$NON-NLS-1$
        result.append(filteringKeys);
        result.append(')');
        return result.toString();
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d25 1
a25 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
d49 1
a49 1
public class FilteringStyleImpl extends EObjectImpl implements FilteringStyle {
d201 1
a201 1
        return super.eGet(featureID, resolve, coreType);
d222 1
a222 1
        super.eSet(featureID, newValue);
d242 1
a242 1
        super.eUnset(featureID);
d259 1
a259 1
        return super.eIsSet(featureID);
@


1.3.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@d25 1
a25 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d49 1
a49 1
public class FilteringStyleImpl extends FlatEObjectImpl implements FilteringStyle {
d201 1
a201 1
        return eDynamicGet(featureID, resolve, coreType);
d222 1
a222 1
        eDynamicSet(featureID, newValue);
d242 1
a242 1
        eDynamicUnset(featureID);
d259 1
a259 1
        return eDynamicIsSet(featureID);
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a23 1
import org.eclipse.emf.ecore.EStructuralFeature;
a26 1

d50 8
a57 8
	/**
	 * The default value of the '{@@link #getFiltering() <em>Filtering</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFiltering()
	 * @@generated
	 * @@ordered
	 */
d60 8
a67 8
	/**
	 * The cached value of the '{@@link #getFiltering() <em>Filtering</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFiltering()
	 * @@generated
	 * @@ordered
	 */
d80 8
a87 8
	/**
	 * The cached value of the '{@@link #getFilteringKeys() <em>Filtering Keys</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFilteringKeys()
	 * @@generated
	 * @@ordered
	 */
d90 8
a97 8
	/**
	 * The cached value of the '{@@link #getFilteredObjects() <em>Filtered Objects</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFilteredObjects()
	 * @@generated
	 * @@ordered
	 */
d100 2
a101 2
	/**
	 * <!-- begin-user-doc -->
d103 2
a104 2
	 * @@generated
	 */
d106 2
a107 2
		super();
	}
d109 2
a110 2
	/**
	 * <!-- begin-user-doc -->
d112 2
a113 2
	 * @@generated
	 */
d115 2
a116 2
		return NotationPackage.eINSTANCE.getFilteringStyle();
	}
d118 2
a119 2
	/**
	 * <!-- begin-user-doc -->
d121 2
a122 2
	 * @@generated
	 */
d124 2
a125 2
		return filtering;
	}
d127 2
a128 2
	/**
	 * <!-- begin-user-doc -->
d130 2
a131 2
	 * @@generated
	 */
d133 5
a137 5
		Filtering oldFiltering = filtering;
		filtering = newFiltering == null ? FILTERING_EDEFAULT : newFiltering;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FILTERING_STYLE__FILTERING, oldFiltering, filtering));
	}
d175 2
a176 2
	/**
	 * <!-- begin-user-doc -->
d178 2
a179 2
	 * @@generated
	 */
d181 80
a260 63
		if (filteredObjects == null) {
			filteredObjects = new EObjectResolvingEList(EObject.class, this, NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS);
		}
		return filteredObjects;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.FILTERING_STYLE__FILTERING:
				return getFiltering();
			case NotationPackage.FILTERING_STYLE__FILTERING_KEYS:
				return getFilteringKeys();
			case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS:
				return getFilteredObjects();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.FILTERING_STYLE__FILTERING:
				setFiltering((Filtering)newValue);
				return;
			case NotationPackage.FILTERING_STYLE__FILTERING_KEYS:
				setFilteringKeys((List)newValue);
				return;
			case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS:
				getFilteredObjects().clear();
				getFilteredObjects().addAll((Collection)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.FILTERING_STYLE__FILTERING:
				setFiltering(FILTERING_EDEFAULT);
				return;
			case NotationPackage.FILTERING_STYLE__FILTERING_KEYS:
				setFilteringKeys(FILTERING_KEYS_EDEFAULT);
				return;
			case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS:
				getFilteredObjects().clear();
				return;
		}
		eDynamicUnset(eFeature);
	}
d262 2
a263 2
	/**
	 * <!-- begin-user-doc -->
d265 2
a266 19
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.FILTERING_STYLE__FILTERING:
				return filtering != FILTERING_EDEFAULT;
			case NotationPackage.FILTERING_STYLE__FILTERING_KEYS:
				return FILTERING_KEYS_EDEFAULT == null ? filteringKeys != null : !FILTERING_KEYS_EDEFAULT.equals(filteringKeys);
			case NotationPackage.FILTERING_STYLE__FILTERED_OBJECTS:
				return filteredObjects != null && !filteredObjects.isEmpty();
		}
		return eDynamicIsSet(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d268 1
a268 1
		if (eIsProxy()) return super.toString();
d270 8
a277 8
		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (filtering: "); //$NON-NLS-1$
		result.append(filtering);
		result.append(", filteringKeys: "); //$NON-NLS-1$
		result.append(filteringKeys);
		result.append(')');
		return result.toString();
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

