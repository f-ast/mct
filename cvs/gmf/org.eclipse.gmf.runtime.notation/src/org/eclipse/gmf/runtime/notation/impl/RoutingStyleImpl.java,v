head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080507-1326:1.7
	v20080503-1740:1.6
	v20080425-1959:1.5
	v20080407-2250:1.5
	v20080407-1545:1.5
	v20080331-1625:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080114-2222:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	3e924820f4604567;

1.6
date	2008.05.03.18.33.02;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	1c13481cafcc4567;

1.5
date	2007.05.17.16.26.50;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71d9464c82444567;

1.4
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.17.20.27.55;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.runtime.notation.JumpLinkStatus;
import org.eclipse.gmf.runtime.notation.JumpLinkType;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.Routing;
import org.eclipse.gmf.runtime.notation.RoutingStyle;
import org.eclipse.gmf.runtime.notation.Smoothness;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Routing Style</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.RoutingStyleImpl#getRouting <em>Routing</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.RoutingStyleImpl#getSmoothness <em>Smoothness</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.RoutingStyleImpl#isAvoidObstructions <em>Avoid Obstructions</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.RoutingStyleImpl#isClosestDistance <em>Closest Distance</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.RoutingStyleImpl#getJumpLinkStatus <em>Jump Link Status</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.RoutingStyleImpl#getJumpLinkType <em>Jump Link Type</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.RoutingStyleImpl#isJumpLinksReverse <em>Jump Links Reverse</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy org.eclipse.gmf.runtime.notation.*
 */
public class RoutingStyleImpl extends NotationEObjectImpl implements RoutingStyle {
    /**
	 * The default value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getRouting()
	 * @@generated
	 * @@ordered
	 */
	protected static final Routing ROUTING_EDEFAULT = Routing.MANUAL_LITERAL;

    /**
	 * The offset of the flags representing the value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int ROUTING_EFLAG_OFFSET = 8;

				/**
	 * The flags representing the default value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int ROUTING_EFLAG_DEFAULT = Routing.VALUES.indexOf(ROUTING_EDEFAULT) << ROUTING_EFLAG_OFFSET;

				/**
	 * The array of enumeration values for '{@@link Routing Routing}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	private static final Routing[] ROUTING_EFLAG_VALUES = (Routing[])Routing.VALUES.toArray(new Routing[Routing.VALUES.size()]);

				/**
	 * The flags representing the value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getRouting()
	 * @@generated
	 * @@ordered
	 */
	protected static final int ROUTING_EFLAG = 0x3 << ROUTING_EFLAG_OFFSET;

				/**
	 * The default value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSmoothness()
	 * @@generated
	 * @@ordered
	 */
	protected static final Smoothness SMOOTHNESS_EDEFAULT = Smoothness.NONE_LITERAL;

    /**
	 * The offset of the flags representing the value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int SMOOTHNESS_EFLAG_OFFSET = 10;

				/**
	 * The flags representing the default value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int SMOOTHNESS_EFLAG_DEFAULT = Smoothness.VALUES.indexOf(SMOOTHNESS_EDEFAULT) << SMOOTHNESS_EFLAG_OFFSET;

				/**
	 * The array of enumeration values for '{@@link Smoothness Smoothness}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	private static final Smoothness[] SMOOTHNESS_EFLAG_VALUES = (Smoothness[])Smoothness.VALUES.toArray(new Smoothness[Smoothness.VALUES.size()]);

				/**
	 * The flags representing the value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSmoothness()
	 * @@generated
	 * @@ordered
	 */
	protected static final int SMOOTHNESS_EFLAG = 0x3 << SMOOTHNESS_EFLAG_OFFSET;

				/**
	 * The default value of the '{@@link #isAvoidObstructions() <em>Avoid Obstructions</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isAvoidObstructions()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean AVOID_OBSTRUCTIONS_EDEFAULT = false;

    /**
	 * The flag representing the value of the '{@@link #isAvoidObstructions() <em>Avoid Obstructions</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isAvoidObstructions()
	 * @@generated
	 * @@ordered
	 */
	protected static final int AVOID_OBSTRUCTIONS_EFLAG = 1 << 12;

    /**
	 * The default value of the '{@@link #isClosestDistance() <em>Closest Distance</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isClosestDistance()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean CLOSEST_DISTANCE_EDEFAULT = false;

    /**
	 * The flag representing the value of the '{@@link #isClosestDistance() <em>Closest Distance</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isClosestDistance()
	 * @@generated
	 * @@ordered
	 */
	protected static final int CLOSEST_DISTANCE_EFLAG = 1 << 13;

    /**
	 * The default value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkStatus()
	 * @@generated
	 * @@ordered
	 */
	protected static final JumpLinkStatus JUMP_LINK_STATUS_EDEFAULT = JumpLinkStatus.NONE_LITERAL;

    /**
	 * The offset of the flags representing the value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINK_STATUS_EFLAG_OFFSET = 14;

				/**
	 * The flags representing the default value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINK_STATUS_EFLAG_DEFAULT = JumpLinkStatus.VALUES.indexOf(JUMP_LINK_STATUS_EDEFAULT) << JUMP_LINK_STATUS_EFLAG_OFFSET;

				/**
	 * The array of enumeration values for '{@@link JumpLinkStatus Jump Link Status}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	private static final JumpLinkStatus[] JUMP_LINK_STATUS_EFLAG_VALUES = (JumpLinkStatus[])JumpLinkStatus.VALUES.toArray(new JumpLinkStatus[JumpLinkStatus.VALUES.size()]);

				/**
	 * The flags representing the value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkStatus()
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINK_STATUS_EFLAG = 0x3 << JUMP_LINK_STATUS_EFLAG_OFFSET;

				/**
	 * The default value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkType()
	 * @@generated
	 * @@ordered
	 */
	protected static final JumpLinkType JUMP_LINK_TYPE_EDEFAULT = JumpLinkType.SEMICIRCLE_LITERAL;

    /**
	 * The offset of the flags representing the value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINK_TYPE_EFLAG_OFFSET = 16;

				/**
	 * The flags representing the default value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINK_TYPE_EFLAG_DEFAULT = JumpLinkType.VALUES.indexOf(JUMP_LINK_TYPE_EDEFAULT) << JUMP_LINK_TYPE_EFLAG_OFFSET;

				/**
	 * The array of enumeration values for '{@@link JumpLinkType Jump Link Type}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	private static final JumpLinkType[] JUMP_LINK_TYPE_EFLAG_VALUES = (JumpLinkType[])JumpLinkType.VALUES.toArray(new JumpLinkType[JumpLinkType.VALUES.size()]);

				/**
	 * The flags representing the value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkType()
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINK_TYPE_EFLAG = 0x3 << JUMP_LINK_TYPE_EFLAG_OFFSET;

				/**
	 * The default value of the '{@@link #isJumpLinksReverse() <em>Jump Links Reverse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isJumpLinksReverse()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean JUMP_LINKS_REVERSE_EDEFAULT = false;

    /**
	 * The flag representing the value of the '{@@link #isJumpLinksReverse() <em>Jump Links Reverse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isJumpLinksReverse()
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINKS_REVERSE_EFLAG = 1 << 18;

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected RoutingStyleImpl() {
		super();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.ROUTING_STYLE;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Routing getRouting() {
		return ROUTING_EFLAG_VALUES[(eFlags & ROUTING_EFLAG) >>> ROUTING_EFLAG_OFFSET];
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setRouting(Routing newRouting) {
		Routing oldRouting = ROUTING_EFLAG_VALUES[(eFlags & ROUTING_EFLAG) >>> ROUTING_EFLAG_OFFSET];
		if (newRouting == null) newRouting = ROUTING_EDEFAULT;
		eFlags = eFlags & ~ROUTING_EFLAG | Routing.VALUES.indexOf(newRouting) << ROUTING_EFLAG_OFFSET;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__ROUTING, oldRouting, newRouting));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Smoothness getSmoothness() {
		return SMOOTHNESS_EFLAG_VALUES[(eFlags & SMOOTHNESS_EFLAG) >>> SMOOTHNESS_EFLAG_OFFSET];
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setSmoothness(Smoothness newSmoothness) {
		Smoothness oldSmoothness = SMOOTHNESS_EFLAG_VALUES[(eFlags & SMOOTHNESS_EFLAG) >>> SMOOTHNESS_EFLAG_OFFSET];
		if (newSmoothness == null) newSmoothness = SMOOTHNESS_EDEFAULT;
		eFlags = eFlags & ~SMOOTHNESS_EFLAG | Smoothness.VALUES.indexOf(newSmoothness) << SMOOTHNESS_EFLAG_OFFSET;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__SMOOTHNESS, oldSmoothness, newSmoothness));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isAvoidObstructions() {
		return (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setAvoidObstructions(boolean newAvoidObstructions) {
		boolean oldAvoidObstructions = (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
		if (newAvoidObstructions) eFlags |= AVOID_OBSTRUCTIONS_EFLAG; else eFlags &= ~AVOID_OBSTRUCTIONS_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS, oldAvoidObstructions, newAvoidObstructions));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isClosestDistance() {
		return (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setClosestDistance(boolean newClosestDistance) {
		boolean oldClosestDistance = (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
		if (newClosestDistance) eFlags |= CLOSEST_DISTANCE_EFLAG; else eFlags &= ~CLOSEST_DISTANCE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE, oldClosestDistance, newClosestDistance));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public JumpLinkStatus getJumpLinkStatus() {
		return JUMP_LINK_STATUS_EFLAG_VALUES[(eFlags & JUMP_LINK_STATUS_EFLAG) >>> JUMP_LINK_STATUS_EFLAG_OFFSET];
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setJumpLinkStatus(JumpLinkStatus newJumpLinkStatus) {
		JumpLinkStatus oldJumpLinkStatus = JUMP_LINK_STATUS_EFLAG_VALUES[(eFlags & JUMP_LINK_STATUS_EFLAG) >>> JUMP_LINK_STATUS_EFLAG_OFFSET];
		if (newJumpLinkStatus == null) newJumpLinkStatus = JUMP_LINK_STATUS_EDEFAULT;
		eFlags = eFlags & ~JUMP_LINK_STATUS_EFLAG | JumpLinkStatus.VALUES.indexOf(newJumpLinkStatus) << JUMP_LINK_STATUS_EFLAG_OFFSET;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS, oldJumpLinkStatus, newJumpLinkStatus));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public JumpLinkType getJumpLinkType() {
		return JUMP_LINK_TYPE_EFLAG_VALUES[(eFlags & JUMP_LINK_TYPE_EFLAG) >>> JUMP_LINK_TYPE_EFLAG_OFFSET];
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setJumpLinkType(JumpLinkType newJumpLinkType) {
		JumpLinkType oldJumpLinkType = JUMP_LINK_TYPE_EFLAG_VALUES[(eFlags & JUMP_LINK_TYPE_EFLAG) >>> JUMP_LINK_TYPE_EFLAG_OFFSET];
		if (newJumpLinkType == null) newJumpLinkType = JUMP_LINK_TYPE_EDEFAULT;
		eFlags = eFlags & ~JUMP_LINK_TYPE_EFLAG | JumpLinkType.VALUES.indexOf(newJumpLinkType) << JUMP_LINK_TYPE_EFLAG_OFFSET;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE, oldJumpLinkType, newJumpLinkType));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isJumpLinksReverse() {
		return (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setJumpLinksReverse(boolean newJumpLinksReverse) {
		boolean oldJumpLinksReverse = (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
		if (newJumpLinksReverse) eFlags |= JUMP_LINKS_REVERSE_EFLAG; else eFlags &= ~JUMP_LINKS_REVERSE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE, oldJumpLinksReverse, newJumpLinksReverse));
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.ROUTING_STYLE__ROUTING:
				return getRouting();
			case NotationPackage.ROUTING_STYLE__SMOOTHNESS:
				return getSmoothness();
			case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS:
				return isAvoidObstructions() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE:
				return isClosestDistance() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS:
				return getJumpLinkStatus();
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE:
				return getJumpLinkType();
			case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE:
				return isJumpLinksReverse() ? Boolean.TRUE : Boolean.FALSE;
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.ROUTING_STYLE__ROUTING:
				setRouting((Routing)newValue);
				return;
			case NotationPackage.ROUTING_STYLE__SMOOTHNESS:
				setSmoothness((Smoothness)newValue);
				return;
			case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS:
				setAvoidObstructions(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE:
				setClosestDistance(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS:
				setJumpLinkStatus((JumpLinkStatus)newValue);
				return;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE:
				setJumpLinkType((JumpLinkType)newValue);
				return;
			case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE:
				setJumpLinksReverse(((Boolean)newValue).booleanValue());
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.ROUTING_STYLE__ROUTING:
				setRouting(ROUTING_EDEFAULT);
				return;
			case NotationPackage.ROUTING_STYLE__SMOOTHNESS:
				setSmoothness(SMOOTHNESS_EDEFAULT);
				return;
			case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS:
				setAvoidObstructions(AVOID_OBSTRUCTIONS_EDEFAULT);
				return;
			case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE:
				setClosestDistance(CLOSEST_DISTANCE_EDEFAULT);
				return;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS:
				setJumpLinkStatus(JUMP_LINK_STATUS_EDEFAULT);
				return;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE:
				setJumpLinkType(JUMP_LINK_TYPE_EDEFAULT);
				return;
			case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE:
				setJumpLinksReverse(JUMP_LINKS_REVERSE_EDEFAULT);
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.ROUTING_STYLE__ROUTING:
				return (eFlags & ROUTING_EFLAG) != ROUTING_EFLAG_DEFAULT;
			case NotationPackage.ROUTING_STYLE__SMOOTHNESS:
				return (eFlags & SMOOTHNESS_EFLAG) != SMOOTHNESS_EFLAG_DEFAULT;
			case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS:
				return ((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0) != AVOID_OBSTRUCTIONS_EDEFAULT;
			case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE:
				return ((eFlags & CLOSEST_DISTANCE_EFLAG) != 0) != CLOSEST_DISTANCE_EDEFAULT;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS:
				return (eFlags & JUMP_LINK_STATUS_EFLAG) != JUMP_LINK_STATUS_EFLAG_DEFAULT;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE:
				return (eFlags & JUMP_LINK_TYPE_EFLAG) != JUMP_LINK_TYPE_EFLAG_DEFAULT;
			case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE:
				return ((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0) != JUMP_LINKS_REVERSE_EDEFAULT;
		}
		return eDynamicIsSet(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (routing: "); //$NON-NLS-1$
		result.append(ROUTING_EFLAG_VALUES[(eFlags & ROUTING_EFLAG) >>> ROUTING_EFLAG_OFFSET]);
		result.append(", smoothness: "); //$NON-NLS-1$
		result.append(SMOOTHNESS_EFLAG_VALUES[(eFlags & SMOOTHNESS_EFLAG) >>> SMOOTHNESS_EFLAG_OFFSET]);
		result.append(", avoidObstructions: "); //$NON-NLS-1$
		result.append((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0);
		result.append(", closestDistance: "); //$NON-NLS-1$
		result.append((eFlags & CLOSEST_DISTANCE_EFLAG) != 0);
		result.append(", jumpLinkStatus: "); //$NON-NLS-1$
		result.append(JUMP_LINK_STATUS_EFLAG_VALUES[(eFlags & JUMP_LINK_STATUS_EFLAG) >>> JUMP_LINK_STATUS_EFLAG_OFFSET]);
		result.append(", jumpLinkType: "); //$NON-NLS-1$
		result.append(JUMP_LINK_TYPE_EFLAG_VALUES[(eFlags & JUMP_LINK_TYPE_EFLAG) >>> JUMP_LINK_TYPE_EFLAG_OFFSET]);
		result.append(", jumpLinksReverse: "); //$NON-NLS-1$
		result.append((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0);
		result.append(')');
		return result.toString();
	}

} //RoutingStyleImpl
@


1.6
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d46 1
a46 1
public class RoutingStyleImpl extends NotationObjectImpl implements RoutingStyle {
d58 28
a85 1
	 * The cached value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
d92 1
a92 1
	protected Routing routing = ROUTING_EDEFAULT;
d94 1
a94 1
    /**
d105 28
a132 1
	 * The cached value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
d139 1
a139 1
	protected Smoothness smoothness = SMOOTHNESS_EDEFAULT;
d141 1
a141 1
    /**
d159 1
a159 1
	protected static final int AVOID_OBSTRUCTIONS_EFLAG = 1 << 8;
d179 1
a179 1
	protected static final int CLOSEST_DISTANCE_EFLAG = 1 << 9;
d192 28
a219 1
	 * The cached value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
d226 1
a226 1
	protected JumpLinkStatus jumpLinkStatus = JUMP_LINK_STATUS_EDEFAULT;
d228 1
a228 1
    /**
d239 28
a266 1
	 * The cached value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
d273 1
a273 1
	protected JumpLinkType jumpLinkType = JUMP_LINK_TYPE_EDEFAULT;
d275 1
a275 1
    /**
d293 1
a293 1
	protected static final int JUMP_LINKS_REVERSE_EFLAG = 1 << 10;
d319 1
a319 1
		return routing;
d328 3
a330 2
		Routing oldRouting = routing;
		routing = newRouting == null ? ROUTING_EDEFAULT : newRouting;
d332 1
a332 1
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__ROUTING, oldRouting, routing));
d341 1
a341 1
		return smoothness;
d350 3
a352 2
		Smoothness oldSmoothness = smoothness;
		smoothness = newSmoothness == null ? SMOOTHNESS_EDEFAULT : newSmoothness;
d354 1
a354 1
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__SMOOTHNESS, oldSmoothness, smoothness));
d405 1
a405 1
		return jumpLinkStatus;
d414 3
a416 2
		JumpLinkStatus oldJumpLinkStatus = jumpLinkStatus;
		jumpLinkStatus = newJumpLinkStatus == null ? JUMP_LINK_STATUS_EDEFAULT : newJumpLinkStatus;
d418 1
a418 1
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS, oldJumpLinkStatus, jumpLinkStatus));
d427 1
a427 1
		return jumpLinkType;
d436 3
a438 2
		JumpLinkType oldJumpLinkType = jumpLinkType;
		jumpLinkType = newJumpLinkType == null ? JUMP_LINK_TYPE_EDEFAULT : newJumpLinkType;
d440 1
a440 1
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE, oldJumpLinkType, jumpLinkType));
a470 2
			case NotationPackage.ROUTING_STYLE__UUID:
				return getUUID();
a495 3
			case NotationPackage.ROUTING_STYLE__UUID:
				setUUID((byte[])newValue);
				return;
a527 3
			case NotationPackage.ROUTING_STYLE__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a559 2
			case NotationPackage.ROUTING_STYLE__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
d561 1
a561 1
				return routing != ROUTING_EDEFAULT;
d563 1
a563 1
				return smoothness != SMOOTHNESS_EDEFAULT;
d569 1
a569 1
				return jumpLinkStatus != JUMP_LINK_STATUS_EDEFAULT;
d571 1
a571 1
				return jumpLinkType != JUMP_LINK_TYPE_EDEFAULT;
d588 1
a588 1
		result.append(routing);
d590 1
a590 1
		result.append(smoothness);
d596 1
a596 1
		result.append(jumpLinkStatus);
d598 1
a598 1
		result.append(jumpLinkType);
@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@a16 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d46 1
a46 1
public class RoutingStyleImpl extends FlatEObjectImpl implements RoutingStyle {
d359 2
d386 3
d421 3
d456 2
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d49 2
a50 2
     * The default value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
     * <!-- begin-user-doc -->
d52 4
a55 4
     * @@see #getRouting()
     * @@generated
     * @@ordered
     */
d59 2
a60 2
     * The cached value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
     * <!-- begin-user-doc -->
d62 4
a65 4
     * @@see #getRouting()
     * @@generated
     * @@ordered
     */
d69 2
a70 2
     * The default value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
     * <!-- begin-user-doc -->
d72 4
a75 4
     * @@see #getSmoothness()
     * @@generated
     * @@ordered
     */
d79 2
a80 2
     * The cached value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
     * <!-- begin-user-doc -->
d82 4
a85 4
     * @@see #getSmoothness()
     * @@generated
     * @@ordered
     */
d89 2
a90 2
     * The default value of the '{@@link #isAvoidObstructions() <em>Avoid Obstructions</em>}' attribute.
     * <!-- begin-user-doc -->
d92 4
a95 4
     * @@see #isAvoidObstructions()
     * @@generated
     * @@ordered
     */
d99 2
a100 2
     * The flag representing the value of the '{@@link #isAvoidObstructions() <em>Avoid Obstructions</em>}' attribute.
     * <!-- begin-user-doc -->
d102 4
a105 4
     * @@see #isAvoidObstructions()
     * @@generated
     * @@ordered
     */
d109 2
a110 2
     * The default value of the '{@@link #isClosestDistance() <em>Closest Distance</em>}' attribute.
     * <!-- begin-user-doc -->
d112 4
a115 4
     * @@see #isClosestDistance()
     * @@generated
     * @@ordered
     */
d119 2
a120 2
     * The flag representing the value of the '{@@link #isClosestDistance() <em>Closest Distance</em>}' attribute.
     * <!-- begin-user-doc -->
d122 4
a125 4
     * @@see #isClosestDistance()
     * @@generated
     * @@ordered
     */
d129 2
a130 2
     * The default value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
     * <!-- begin-user-doc -->
d132 4
a135 4
     * @@see #getJumpLinkStatus()
     * @@generated
     * @@ordered
     */
d139 2
a140 2
     * The cached value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
     * <!-- begin-user-doc -->
d142 4
a145 4
     * @@see #getJumpLinkStatus()
     * @@generated
     * @@ordered
     */
d149 2
a150 2
     * The default value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
     * <!-- begin-user-doc -->
d152 4
a155 4
     * @@see #getJumpLinkType()
     * @@generated
     * @@ordered
     */
d159 2
a160 2
     * The cached value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
     * <!-- begin-user-doc -->
d162 4
a165 4
     * @@see #getJumpLinkType()
     * @@generated
     * @@ordered
     */
d169 2
a170 2
     * The default value of the '{@@link #isJumpLinksReverse() <em>Jump Links Reverse</em>}' attribute.
     * <!-- begin-user-doc -->
d172 4
a175 4
     * @@see #isJumpLinksReverse()
     * @@generated
     * @@ordered
     */
d179 2
a180 2
     * The flag representing the value of the '{@@link #isJumpLinksReverse() <em>Jump Links Reverse</em>}' attribute.
     * <!-- begin-user-doc -->
d182 4
a185 4
     * @@see #isJumpLinksReverse()
     * @@generated
     * @@ordered
     */
d189 1
a189 1
     * <!-- begin-user-doc -->
d191 2
a192 2
     * @@generated
     */
d194 2
a195 2
        super();
    }
d198 1
a198 1
     * <!-- begin-user-doc -->
d200 2
a201 2
     * @@generated
     */
d203 2
a204 2
        return NotationPackage.Literals.ROUTING_STYLE;
    }
d207 1
a207 1
     * <!-- begin-user-doc -->
d209 2
a210 2
     * @@generated
     */
d212 2
a213 2
        return routing;
    }
d216 1
a216 1
     * <!-- begin-user-doc -->
d218 2
a219 2
     * @@generated
     */
d221 5
a225 5
        Routing oldRouting = routing;
        routing = newRouting == null ? ROUTING_EDEFAULT : newRouting;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__ROUTING, oldRouting, routing));
    }
d228 1
a228 1
     * <!-- begin-user-doc -->
d230 2
a231 2
     * @@generated
     */
d233 2
a234 2
        return smoothness;
    }
d237 1
a237 1
     * <!-- begin-user-doc -->
d239 2
a240 2
     * @@generated
     */
d242 5
a246 5
        Smoothness oldSmoothness = smoothness;
        smoothness = newSmoothness == null ? SMOOTHNESS_EDEFAULT : newSmoothness;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__SMOOTHNESS, oldSmoothness, smoothness));
    }
d249 1
a249 1
     * <!-- begin-user-doc -->
d251 2
a252 2
     * @@generated
     */
d254 2
a255 2
        return (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
    }
d258 1
a258 1
     * <!-- begin-user-doc -->
d260 2
a261 2
     * @@generated
     */
d263 5
a267 5
        boolean oldAvoidObstructions = (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
        if (newAvoidObstructions) eFlags |= AVOID_OBSTRUCTIONS_EFLAG; else eFlags &= ~AVOID_OBSTRUCTIONS_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS, oldAvoidObstructions, newAvoidObstructions));
    }
d270 1
a270 1
     * <!-- begin-user-doc -->
d272 2
a273 2
     * @@generated
     */
d275 2
a276 2
        return (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
    }
d279 1
a279 1
     * <!-- begin-user-doc -->
d281 2
a282 2
     * @@generated
     */
d284 5
a288 5
        boolean oldClosestDistance = (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
        if (newClosestDistance) eFlags |= CLOSEST_DISTANCE_EFLAG; else eFlags &= ~CLOSEST_DISTANCE_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE, oldClosestDistance, newClosestDistance));
    }
d291 1
a291 1
     * <!-- begin-user-doc -->
d293 2
a294 2
     * @@generated
     */
d296 2
a297 2
        return jumpLinkStatus;
    }
d300 1
a300 1
     * <!-- begin-user-doc -->
d302 2
a303 2
     * @@generated
     */
d305 5
a309 5
        JumpLinkStatus oldJumpLinkStatus = jumpLinkStatus;
        jumpLinkStatus = newJumpLinkStatus == null ? JUMP_LINK_STATUS_EDEFAULT : newJumpLinkStatus;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS, oldJumpLinkStatus, jumpLinkStatus));
    }
d312 1
a312 1
     * <!-- begin-user-doc -->
d314 2
a315 2
     * @@generated
     */
d317 2
a318 2
        return jumpLinkType;
    }
d321 1
a321 1
     * <!-- begin-user-doc -->
d323 2
a324 2
     * @@generated
     */
d326 5
a330 5
        JumpLinkType oldJumpLinkType = jumpLinkType;
        jumpLinkType = newJumpLinkType == null ? JUMP_LINK_TYPE_EDEFAULT : newJumpLinkType;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE, oldJumpLinkType, jumpLinkType));
    }
d333 1
a333 1
     * <!-- begin-user-doc -->
d335 2
a336 2
     * @@generated
     */
d338 2
a339 2
        return (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
    }
d342 1
a342 1
     * <!-- begin-user-doc -->
d344 2
a345 2
     * @@generated
     */
d347 5
a351 5
        boolean oldJumpLinksReverse = (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
        if (newJumpLinksReverse) eFlags |= JUMP_LINKS_REVERSE_EFLAG; else eFlags &= ~JUMP_LINKS_REVERSE_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE, oldJumpLinksReverse, newJumpLinksReverse));
    }
d354 1
a354 1
     * <!-- begin-user-doc -->
d356 2
a357 2
     * @@generated
     */
d359 18
a376 18
        switch (featureID) {
            case NotationPackage.ROUTING_STYLE__ROUTING:
                return getRouting();
            case NotationPackage.ROUTING_STYLE__SMOOTHNESS:
                return getSmoothness();
            case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS:
                return isAvoidObstructions() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE:
                return isClosestDistance() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS:
                return getJumpLinkStatus();
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE:
                return getJumpLinkType();
            case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE:
                return isJumpLinksReverse() ? Boolean.TRUE : Boolean.FALSE;
        }
        return eDynamicGet(featureID, resolve, coreType);
    }
d379 1
a379 1
     * <!-- begin-user-doc -->
d381 2
a382 2
     * @@generated
     */
d384 25
a408 25
        switch (featureID) {
            case NotationPackage.ROUTING_STYLE__ROUTING:
                setRouting((Routing)newValue);
                return;
            case NotationPackage.ROUTING_STYLE__SMOOTHNESS:
                setSmoothness((Smoothness)newValue);
                return;
            case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS:
                setAvoidObstructions(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE:
                setClosestDistance(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS:
                setJumpLinkStatus((JumpLinkStatus)newValue);
                return;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE:
                setJumpLinkType((JumpLinkType)newValue);
                return;
            case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE:
                setJumpLinksReverse(((Boolean)newValue).booleanValue());
                return;
        }
        eDynamicSet(featureID, newValue);
    }
d411 1
a411 1
     * <!-- begin-user-doc -->
d413 2
a414 2
     * @@generated
     */
d416 25
a440 25
        switch (featureID) {
            case NotationPackage.ROUTING_STYLE__ROUTING:
                setRouting(ROUTING_EDEFAULT);
                return;
            case NotationPackage.ROUTING_STYLE__SMOOTHNESS:
                setSmoothness(SMOOTHNESS_EDEFAULT);
                return;
            case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS:
                setAvoidObstructions(AVOID_OBSTRUCTIONS_EDEFAULT);
                return;
            case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE:
                setClosestDistance(CLOSEST_DISTANCE_EDEFAULT);
                return;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS:
                setJumpLinkStatus(JUMP_LINK_STATUS_EDEFAULT);
                return;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE:
                setJumpLinkType(JUMP_LINK_TYPE_EDEFAULT);
                return;
            case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE:
                setJumpLinksReverse(JUMP_LINKS_REVERSE_EDEFAULT);
                return;
        }
        eDynamicUnset(featureID);
    }
d443 1
a443 1
     * <!-- begin-user-doc -->
d445 2
a446 2
     * @@generated
     */
d448 18
a465 18
        switch (featureID) {
            case NotationPackage.ROUTING_STYLE__ROUTING:
                return routing != ROUTING_EDEFAULT;
            case NotationPackage.ROUTING_STYLE__SMOOTHNESS:
                return smoothness != SMOOTHNESS_EDEFAULT;
            case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS:
                return ((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0) != AVOID_OBSTRUCTIONS_EDEFAULT;
            case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE:
                return ((eFlags & CLOSEST_DISTANCE_EFLAG) != 0) != CLOSEST_DISTANCE_EDEFAULT;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS:
                return jumpLinkStatus != JUMP_LINK_STATUS_EDEFAULT;
            case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE:
                return jumpLinkType != JUMP_LINK_TYPE_EDEFAULT;
            case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE:
                return ((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0) != JUMP_LINKS_REVERSE_EDEFAULT;
        }
        return eDynamicIsSet(featureID);
    }
d468 1
a468 1
     * <!-- begin-user-doc -->
d470 2
a471 2
     * @@generated
     */
d473 1
a473 1
        if (eIsProxy()) return super.toString();
d475 18
a492 18
        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (routing: "); //$NON-NLS-1$
        result.append(routing);
        result.append(", smoothness: "); //$NON-NLS-1$
        result.append(smoothness);
        result.append(", avoidObstructions: "); //$NON-NLS-1$
        result.append((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0);
        result.append(", closestDistance: "); //$NON-NLS-1$
        result.append((eFlags & CLOSEST_DISTANCE_EFLAG) != 0);
        result.append(", jumpLinkStatus: "); //$NON-NLS-1$
        result.append(jumpLinkStatus);
        result.append(", jumpLinkType: "); //$NON-NLS-1$
        result.append(jumpLinkType);
        result.append(", jumpLinksReverse: "); //$NON-NLS-1$
        result.append((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0);
        result.append(')');
        return result.toString();
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d17 1
a17 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
d47 1
a47 1
public class RoutingStyleImpl extends EObjectImpl implements RoutingStyle {
d375 1
a375 1
        return super.eGet(featureID, resolve, coreType);
d407 1
a407 1
        super.eSet(featureID, newValue);
d439 1
a439 1
        super.eUnset(featureID);
d464 1
a464 1
        return super.eIsSet(featureID);
@


1.3.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@d17 1
a17 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d47 1
a47 1
public class RoutingStyleImpl extends FlatEObjectImpl implements RoutingStyle {
d375 1
a375 1
        return eDynamicGet(featureID, resolve, coreType);
d407 1
a407 1
        eDynamicSet(featureID, newValue);
d439 1
a439 1
        eDynamicUnset(featureID);
d464 1
a464 1
        return eDynamicIsSet(featureID);
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a15 1
import org.eclipse.emf.ecore.EStructuralFeature;
a17 1

d48 8
a55 8
	/**
	 * The default value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getRouting()
	 * @@generated
	 * @@ordered
	 */
d58 8
a65 8
	/**
	 * The cached value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getRouting()
	 * @@generated
	 * @@ordered
	 */
d68 8
a75 8
	/**
	 * The default value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSmoothness()
	 * @@generated
	 * @@ordered
	 */
d78 8
a85 8
	/**
	 * The cached value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSmoothness()
	 * @@generated
	 * @@ordered
	 */
d88 8
a95 8
	/**
	 * The default value of the '{@@link #isAvoidObstructions() <em>Avoid Obstructions</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isAvoidObstructions()
	 * @@generated
	 * @@ordered
	 */
d98 8
a105 8
	/**
	 * The flag representing the value of the '{@@link #isAvoidObstructions() <em>Avoid Obstructions</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isAvoidObstructions()
	 * @@generated
	 * @@ordered
	 */
d108 8
a115 8
	/**
	 * The default value of the '{@@link #isClosestDistance() <em>Closest Distance</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isClosestDistance()
	 * @@generated
	 * @@ordered
	 */
d118 8
a125 8
	/**
	 * The flag representing the value of the '{@@link #isClosestDistance() <em>Closest Distance</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isClosestDistance()
	 * @@generated
	 * @@ordered
	 */
d128 8
a135 8
	/**
	 * The default value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkStatus()
	 * @@generated
	 * @@ordered
	 */
d138 8
a145 8
	/**
	 * The cached value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkStatus()
	 * @@generated
	 * @@ordered
	 */
d148 8
a155 8
	/**
	 * The default value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkType()
	 * @@generated
	 * @@ordered
	 */
d158 8
a165 8
	/**
	 * The cached value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkType()
	 * @@generated
	 * @@ordered
	 */
d168 8
a175 8
	/**
	 * The default value of the '{@@link #isJumpLinksReverse() <em>Jump Links Reverse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isJumpLinksReverse()
	 * @@generated
	 * @@ordered
	 */
d178 8
a185 8
	/**
	 * The flag representing the value of the '{@@link #isJumpLinksReverse() <em>Jump Links Reverse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isJumpLinksReverse()
	 * @@generated
	 * @@ordered
	 */
d188 2
a189 2
	/**
	 * <!-- begin-user-doc -->
d191 2
a192 2
	 * @@generated
	 */
d194 2
a195 2
		super();
	}
d197 2
a198 2
	/**
	 * <!-- begin-user-doc -->
d200 2
a201 2
	 * @@generated
	 */
d203 2
a204 2
		return NotationPackage.eINSTANCE.getRoutingStyle();
	}
d206 2
a207 2
	/**
	 * <!-- begin-user-doc -->
d209 2
a210 2
	 * @@generated
	 */
d212 2
a213 2
		return routing;
	}
d215 2
a216 2
	/**
	 * <!-- begin-user-doc -->
d218 2
a219 2
	 * @@generated
	 */
d221 5
a225 5
		Routing oldRouting = routing;
		routing = newRouting == null ? ROUTING_EDEFAULT : newRouting;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__ROUTING, oldRouting, routing));
	}
d227 2
a228 2
	/**
	 * <!-- begin-user-doc -->
d230 2
a231 2
	 * @@generated
	 */
d233 2
a234 2
		return smoothness;
	}
d236 2
a237 2
	/**
	 * <!-- begin-user-doc -->
d239 2
a240 2
	 * @@generated
	 */
d242 5
a246 5
		Smoothness oldSmoothness = smoothness;
		smoothness = newSmoothness == null ? SMOOTHNESS_EDEFAULT : newSmoothness;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__SMOOTHNESS, oldSmoothness, smoothness));
	}
d248 2
a249 2
	/**
	 * <!-- begin-user-doc -->
d251 2
a252 2
	 * @@generated
	 */
d254 2
a255 2
		return (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
	}
d257 2
a258 2
	/**
	 * <!-- begin-user-doc -->
d260 2
a261 2
	 * @@generated
	 */
d263 5
a267 5
		boolean oldAvoidObstructions = (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
		if (newAvoidObstructions) eFlags |= AVOID_OBSTRUCTIONS_EFLAG; else eFlags &= ~AVOID_OBSTRUCTIONS_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS, oldAvoidObstructions, newAvoidObstructions));
	}
d269 2
a270 2
	/**
	 * <!-- begin-user-doc -->
d272 2
a273 2
	 * @@generated
	 */
d275 2
a276 2
		return (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
	}
d278 2
a279 2
	/**
	 * <!-- begin-user-doc -->
d281 2
a282 2
	 * @@generated
	 */
d284 5
a288 5
		boolean oldClosestDistance = (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
		if (newClosestDistance) eFlags |= CLOSEST_DISTANCE_EFLAG; else eFlags &= ~CLOSEST_DISTANCE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE, oldClosestDistance, newClosestDistance));
	}
d290 2
a291 2
	/**
	 * <!-- begin-user-doc -->
d293 2
a294 2
	 * @@generated
	 */
d296 2
a297 2
		return jumpLinkStatus;
	}
d299 2
a300 2
	/**
	 * <!-- begin-user-doc -->
d302 2
a303 2
	 * @@generated
	 */
d305 5
a309 5
		JumpLinkStatus oldJumpLinkStatus = jumpLinkStatus;
		jumpLinkStatus = newJumpLinkStatus == null ? JUMP_LINK_STATUS_EDEFAULT : newJumpLinkStatus;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS, oldJumpLinkStatus, jumpLinkStatus));
	}
d311 2
a312 2
	/**
	 * <!-- begin-user-doc -->
d314 2
a315 2
	 * @@generated
	 */
d317 2
a318 2
		return jumpLinkType;
	}
d320 2
a321 2
	/**
	 * <!-- begin-user-doc -->
d323 2
a324 2
	 * @@generated
	 */
d326 5
a330 5
		JumpLinkType oldJumpLinkType = jumpLinkType;
		jumpLinkType = newJumpLinkType == null ? JUMP_LINK_TYPE_EDEFAULT : newJumpLinkType;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE, oldJumpLinkType, jumpLinkType));
	}
d332 2
a333 2
	/**
	 * <!-- begin-user-doc -->
d335 2
a336 2
	 * @@generated
	 */
d338 2
a339 2
		return (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
	}
d341 2
a342 2
	/**
	 * <!-- begin-user-doc -->
d344 2
a345 2
	 * @@generated
	 */
d347 119
a465 119
		boolean oldJumpLinksReverse = (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
		if (newJumpLinksReverse) eFlags |= JUMP_LINKS_REVERSE_EFLAG; else eFlags &= ~JUMP_LINKS_REVERSE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE, oldJumpLinksReverse, newJumpLinksReverse));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.ROUTING_STYLE__ROUTING:
				return getRouting();
			case NotationPackage.ROUTING_STYLE__SMOOTHNESS:
				return getSmoothness();
			case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS:
				return isAvoidObstructions() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE:
				return isClosestDistance() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS:
				return getJumpLinkStatus();
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE:
				return getJumpLinkType();
			case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE:
				return isJumpLinksReverse() ? Boolean.TRUE : Boolean.FALSE;
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.ROUTING_STYLE__ROUTING:
				setRouting((Routing)newValue);
				return;
			case NotationPackage.ROUTING_STYLE__SMOOTHNESS:
				setSmoothness((Smoothness)newValue);
				return;
			case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS:
				setAvoidObstructions(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE:
				setClosestDistance(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS:
				setJumpLinkStatus((JumpLinkStatus)newValue);
				return;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE:
				setJumpLinkType((JumpLinkType)newValue);
				return;
			case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE:
				setJumpLinksReverse(((Boolean)newValue).booleanValue());
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.ROUTING_STYLE__ROUTING:
				setRouting(ROUTING_EDEFAULT);
				return;
			case NotationPackage.ROUTING_STYLE__SMOOTHNESS:
				setSmoothness(SMOOTHNESS_EDEFAULT);
				return;
			case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS:
				setAvoidObstructions(AVOID_OBSTRUCTIONS_EDEFAULT);
				return;
			case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE:
				setClosestDistance(CLOSEST_DISTANCE_EDEFAULT);
				return;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS:
				setJumpLinkStatus(JUMP_LINK_STATUS_EDEFAULT);
				return;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE:
				setJumpLinkType(JUMP_LINK_TYPE_EDEFAULT);
				return;
			case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE:
				setJumpLinksReverse(JUMP_LINKS_REVERSE_EDEFAULT);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.ROUTING_STYLE__ROUTING:
				return routing != ROUTING_EDEFAULT;
			case NotationPackage.ROUTING_STYLE__SMOOTHNESS:
				return smoothness != SMOOTHNESS_EDEFAULT;
			case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS:
				return ((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0) != AVOID_OBSTRUCTIONS_EDEFAULT;
			case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE:
				return ((eFlags & CLOSEST_DISTANCE_EFLAG) != 0) != CLOSEST_DISTANCE_EDEFAULT;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS:
				return jumpLinkStatus != JUMP_LINK_STATUS_EDEFAULT;
			case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE:
				return jumpLinkType != JUMP_LINK_TYPE_EDEFAULT;
			case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE:
				return ((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0) != JUMP_LINKS_REVERSE_EDEFAULT;
		}
		return eDynamicIsSet(eFeature);
	}
d467 2
a468 2
	/**
	 * <!-- begin-user-doc -->
d470 2
a471 2
	 * @@generated
	 */
d473 1
a473 1
		if (eIsProxy()) return super.toString();
d475 18
a492 18
		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (routing: "); //$NON-NLS-1$
		result.append(routing);
		result.append(", smoothness: "); //$NON-NLS-1$
		result.append(smoothness);
		result.append(", avoidObstructions: "); //$NON-NLS-1$
		result.append((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0);
		result.append(", closestDistance: "); //$NON-NLS-1$
		result.append((eFlags & CLOSEST_DISTANCE_EFLAG) != 0);
		result.append(", jumpLinkStatus: "); //$NON-NLS-1$
		result.append(jumpLinkStatus);
		result.append(", jumpLinkType: "); //$NON-NLS-1$
		result.append(jumpLinkType);
		result.append(", jumpLinksReverse: "); //$NON-NLS-1$
		result.append((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0);
		result.append(')');
		return result.toString();
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

