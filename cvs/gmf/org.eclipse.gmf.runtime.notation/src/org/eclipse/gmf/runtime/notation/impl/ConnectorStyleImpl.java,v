head	1.10;
access;
symbols
	v20081020-0700:1.10
	v20080722-1827:1.10
	v20080716-1600:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080507-1326:1.10
	v20080503-1740:1.8
	v20080425-1959:1.6
	v20080407-2250:1.6
	v20080407-1545:1.6
	v20080331-1625:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080114-2222:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.10
date	2008.05.07.01.04.47;	author ahunter;	state Exp;
branches;
next	1.9;
commitid	72e74821002b4567;

1.9
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.8;
commitid	3e924820f4604567;

1.8
date	2008.05.03.19.12.26;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	20d0481cb9174567;

1.7
date	2008.05.03.18.33.02;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	1c13481cafcc4567;

1.6
date	2008.04.07.19.37.20;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	2da847fa77ee4567;

1.5
date	2007.05.17.16.26.50;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71d9464c82444567;

1.4
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.17.20.27.55;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.10
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.gmf.runtime.notation.ConnectorStyle;
import org.eclipse.gmf.runtime.notation.JumpLinkStatus;
import org.eclipse.gmf.runtime.notation.JumpLinkType;
import org.eclipse.gmf.runtime.notation.LineStyle;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.Routing;
import org.eclipse.gmf.runtime.notation.RoutingStyle;
import org.eclipse.gmf.runtime.notation.Smoothness;
import org.eclipse.gmf.runtime.notation.Style;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Connector Style</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ConnectorStyleImpl#getRouting <em>Routing</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ConnectorStyleImpl#getSmoothness <em>Smoothness</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ConnectorStyleImpl#isAvoidObstructions <em>Avoid Obstructions</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ConnectorStyleImpl#isClosestDistance <em>Closest Distance</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ConnectorStyleImpl#getJumpLinkStatus <em>Jump Link Status</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ConnectorStyleImpl#getJumpLinkType <em>Jump Link Type</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ConnectorStyleImpl#isJumpLinksReverse <em>Jump Links Reverse</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ConnectorStyleImpl#getLineColor <em>Line Color</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ConnectorStyleImpl#getLineWidth <em>Line Width</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy %partners
 */
public class ConnectorStyleImpl extends NotationEObjectImpl implements ConnectorStyle {
    /**
	 * The default value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getRouting()
	 * @@generated
	 * @@ordered
	 */
	protected static final Routing ROUTING_EDEFAULT = Routing.MANUAL_LITERAL;

	/**
	 * The offset of the flags representing the value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int ROUTING_EFLAG_OFFSET = 8;

				/**
	 * The flags representing the default value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int ROUTING_EFLAG_DEFAULT = Routing.VALUES.indexOf(ROUTING_EDEFAULT) << ROUTING_EFLAG_OFFSET;

				/**
	 * The array of enumeration values for '{@@link Routing Routing}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	private static final Routing[] ROUTING_EFLAG_VALUES = (Routing[])Routing.VALUES.toArray(new Routing[Routing.VALUES.size()]);

				/**
	 * The flags representing the value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getRouting()
	 * @@generated
	 * @@ordered
	 */
	protected static final int ROUTING_EFLAG = 0x3 << ROUTING_EFLAG_OFFSET;

	/**
	 * The default value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSmoothness()
	 * @@generated
	 * @@ordered
	 */
	protected static final Smoothness SMOOTHNESS_EDEFAULT = Smoothness.NONE_LITERAL;

	/**
	 * The offset of the flags representing the value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int SMOOTHNESS_EFLAG_OFFSET = 10;

	/**
	 * The flags representing the default value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int SMOOTHNESS_EFLAG_DEFAULT = Smoothness.VALUES.indexOf(SMOOTHNESS_EDEFAULT) << SMOOTHNESS_EFLAG_OFFSET;

	/**
	 * The array of enumeration values for '{@@link Smoothness Smoothness}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	private static final Smoothness[] SMOOTHNESS_EFLAG_VALUES = (Smoothness[])Smoothness.VALUES.toArray(new Smoothness[Smoothness.VALUES.size()]);

	/**
	 * The flags representing the value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSmoothness()
	 * @@generated
	 * @@ordered
	 */
	protected static final int SMOOTHNESS_EFLAG = 0x3 << SMOOTHNESS_EFLAG_OFFSET;

	/**
	 * The default value of the '{@@link #isAvoidObstructions() <em>Avoid Obstructions</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isAvoidObstructions()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean AVOID_OBSTRUCTIONS_EDEFAULT = false;

	/**
	 * The flag representing the value of the '{@@link #isAvoidObstructions() <em>Avoid Obstructions</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isAvoidObstructions()
	 * @@generated
	 * @@ordered
	 */
	protected static final int AVOID_OBSTRUCTIONS_EFLAG = 1 << 12;

	/**
	 * The default value of the '{@@link #isClosestDistance() <em>Closest Distance</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isClosestDistance()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean CLOSEST_DISTANCE_EDEFAULT = false;

	/**
	 * The flag representing the value of the '{@@link #isClosestDistance() <em>Closest Distance</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isClosestDistance()
	 * @@generated
	 * @@ordered
	 */
	protected static final int CLOSEST_DISTANCE_EFLAG = 1 << 13;

	/**
	 * The default value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkStatus()
	 * @@generated
	 * @@ordered
	 */
	protected static final JumpLinkStatus JUMP_LINK_STATUS_EDEFAULT = JumpLinkStatus.NONE_LITERAL;

	/**
	 * The offset of the flags representing the value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINK_STATUS_EFLAG_OFFSET = 14;

	/**
	 * The flags representing the default value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINK_STATUS_EFLAG_DEFAULT = JumpLinkStatus.VALUES.indexOf(JUMP_LINK_STATUS_EDEFAULT) << JUMP_LINK_STATUS_EFLAG_OFFSET;

	/**
	 * The array of enumeration values for '{@@link JumpLinkStatus Jump Link Status}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	private static final JumpLinkStatus[] JUMP_LINK_STATUS_EFLAG_VALUES = (JumpLinkStatus[])JumpLinkStatus.VALUES.toArray(new JumpLinkStatus[JumpLinkStatus.VALUES.size()]);

	/**
	 * The flags representing the value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkStatus()
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINK_STATUS_EFLAG = 0x3 << JUMP_LINK_STATUS_EFLAG_OFFSET;

	/**
	 * The default value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkType()
	 * @@generated
	 * @@ordered
	 */
	protected static final JumpLinkType JUMP_LINK_TYPE_EDEFAULT = JumpLinkType.SEMICIRCLE_LITERAL;

	/**
	 * The offset of the flags representing the value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINK_TYPE_EFLAG_OFFSET = 16;

	/**
	 * The flags representing the default value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINK_TYPE_EFLAG_DEFAULT = JumpLinkType.VALUES.indexOf(JUMP_LINK_TYPE_EDEFAULT) << JUMP_LINK_TYPE_EFLAG_OFFSET;

	/**
	 * The array of enumeration values for '{@@link JumpLinkType Jump Link Type}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	private static final JumpLinkType[] JUMP_LINK_TYPE_EFLAG_VALUES = (JumpLinkType[])JumpLinkType.VALUES.toArray(new JumpLinkType[JumpLinkType.VALUES.size()]);

	/**
	 * The flags representing the value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkType()
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINK_TYPE_EFLAG = 0x3 << JUMP_LINK_TYPE_EFLAG_OFFSET;

	/**
	 * The default value of the '{@@link #isJumpLinksReverse() <em>Jump Links Reverse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isJumpLinksReverse()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean JUMP_LINKS_REVERSE_EDEFAULT = false;

	/**
	 * The flag representing the value of the '{@@link #isJumpLinksReverse() <em>Jump Links Reverse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isJumpLinksReverse()
	 * @@generated
	 * @@ordered
	 */
	protected static final int JUMP_LINKS_REVERSE_EFLAG = 1 << 18;

				/**
	 * The default value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineColor()
	 * @@generated
	 * @@ordered
	 */
	protected static final int LINE_COLOR_EDEFAULT = 11579568;

    /**
	 * The cached value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineColor()
	 * @@generated
	 * @@ordered
	 */
	protected int lineColor = LINE_COLOR_EDEFAULT;

    /**
	 * The default value of the '{@@link #getLineWidth() <em>Line Width</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineWidth()
	 * @@generated
	 * @@ordered
	 */
	protected static final int LINE_WIDTH_EDEFAULT = -1;

				/**
	 * The cached value of the '{@@link #getLineWidth() <em>Line Width</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineWidth()
	 * @@generated
	 * @@ordered
	 */
	protected int lineWidth = LINE_WIDTH_EDEFAULT;

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ConnectorStyleImpl() {
		super();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.CONNECTOR_STYLE;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Routing getRouting() {
		return ROUTING_EFLAG_VALUES[(eFlags & ROUTING_EFLAG) >>> ROUTING_EFLAG_OFFSET];
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setRouting(Routing newRouting) {
		Routing oldRouting = ROUTING_EFLAG_VALUES[(eFlags & ROUTING_EFLAG) >>> ROUTING_EFLAG_OFFSET];
		if (newRouting == null) newRouting = ROUTING_EDEFAULT;
		eFlags = eFlags & ~ROUTING_EFLAG | Routing.VALUES.indexOf(newRouting) << ROUTING_EFLAG_OFFSET;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__ROUTING, oldRouting, newRouting));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Smoothness getSmoothness() {
		return SMOOTHNESS_EFLAG_VALUES[(eFlags & SMOOTHNESS_EFLAG) >>> SMOOTHNESS_EFLAG_OFFSET];
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setSmoothness(Smoothness newSmoothness) {
		Smoothness oldSmoothness = SMOOTHNESS_EFLAG_VALUES[(eFlags & SMOOTHNESS_EFLAG) >>> SMOOTHNESS_EFLAG_OFFSET];
		if (newSmoothness == null) newSmoothness = SMOOTHNESS_EDEFAULT;
		eFlags = eFlags & ~SMOOTHNESS_EFLAG | Smoothness.VALUES.indexOf(newSmoothness) << SMOOTHNESS_EFLAG_OFFSET;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__SMOOTHNESS, oldSmoothness, newSmoothness));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isAvoidObstructions() {
		return (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setAvoidObstructions(boolean newAvoidObstructions) {
		boolean oldAvoidObstructions = (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
		if (newAvoidObstructions) eFlags |= AVOID_OBSTRUCTIONS_EFLAG; else eFlags &= ~AVOID_OBSTRUCTIONS_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS, oldAvoidObstructions, newAvoidObstructions));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isClosestDistance() {
		return (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setClosestDistance(boolean newClosestDistance) {
		boolean oldClosestDistance = (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
		if (newClosestDistance) eFlags |= CLOSEST_DISTANCE_EFLAG; else eFlags &= ~CLOSEST_DISTANCE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE, oldClosestDistance, newClosestDistance));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public JumpLinkStatus getJumpLinkStatus() {
		return JUMP_LINK_STATUS_EFLAG_VALUES[(eFlags & JUMP_LINK_STATUS_EFLAG) >>> JUMP_LINK_STATUS_EFLAG_OFFSET];
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setJumpLinkStatus(JumpLinkStatus newJumpLinkStatus) {
		JumpLinkStatus oldJumpLinkStatus = JUMP_LINK_STATUS_EFLAG_VALUES[(eFlags & JUMP_LINK_STATUS_EFLAG) >>> JUMP_LINK_STATUS_EFLAG_OFFSET];
		if (newJumpLinkStatus == null) newJumpLinkStatus = JUMP_LINK_STATUS_EDEFAULT;
		eFlags = eFlags & ~JUMP_LINK_STATUS_EFLAG | JumpLinkStatus.VALUES.indexOf(newJumpLinkStatus) << JUMP_LINK_STATUS_EFLAG_OFFSET;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS, oldJumpLinkStatus, newJumpLinkStatus));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public JumpLinkType getJumpLinkType() {
		return JUMP_LINK_TYPE_EFLAG_VALUES[(eFlags & JUMP_LINK_TYPE_EFLAG) >>> JUMP_LINK_TYPE_EFLAG_OFFSET];
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setJumpLinkType(JumpLinkType newJumpLinkType) {
		JumpLinkType oldJumpLinkType = JUMP_LINK_TYPE_EFLAG_VALUES[(eFlags & JUMP_LINK_TYPE_EFLAG) >>> JUMP_LINK_TYPE_EFLAG_OFFSET];
		if (newJumpLinkType == null) newJumpLinkType = JUMP_LINK_TYPE_EDEFAULT;
		eFlags = eFlags & ~JUMP_LINK_TYPE_EFLAG | JumpLinkType.VALUES.indexOf(newJumpLinkType) << JUMP_LINK_TYPE_EFLAG_OFFSET;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE, oldJumpLinkType, newJumpLinkType));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isJumpLinksReverse() {
		return (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setJumpLinksReverse(boolean newJumpLinksReverse) {
		boolean oldJumpLinksReverse = (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
		if (newJumpLinksReverse) eFlags |= JUMP_LINKS_REVERSE_EFLAG; else eFlags &= ~JUMP_LINKS_REVERSE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE, oldJumpLinksReverse, newJumpLinksReverse));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getLineColor() {
		return lineColor;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLineColor(int newLineColor) {
		int oldLineColor = lineColor;
		lineColor = newLineColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__LINE_COLOR, oldLineColor, lineColor));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getLineWidth() {
		return lineWidth;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLineWidth(int newLineWidth) {
		int oldLineWidth = lineWidth;
		lineWidth = newLineWidth;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__LINE_WIDTH, oldLineWidth, lineWidth));
	}

				/**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.CONNECTOR_STYLE__ROUTING:
				return getRouting();
			case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS:
				return getSmoothness();
			case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS:
				return isAvoidObstructions() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE:
				return isClosestDistance() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS:
				return getJumpLinkStatus();
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE:
				return getJumpLinkType();
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE:
				return isJumpLinksReverse() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.CONNECTOR_STYLE__LINE_COLOR:
				return new Integer(getLineColor());
			case NotationPackage.CONNECTOR_STYLE__LINE_WIDTH:
				return new Integer(getLineWidth());
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.CONNECTOR_STYLE__ROUTING:
				setRouting((Routing)newValue);
				return;
			case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS:
				setSmoothness((Smoothness)newValue);
				return;
			case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS:
				setAvoidObstructions(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE:
				setClosestDistance(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS:
				setJumpLinkStatus((JumpLinkStatus)newValue);
				return;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE:
				setJumpLinkType((JumpLinkType)newValue);
				return;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE:
				setJumpLinksReverse(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.CONNECTOR_STYLE__LINE_COLOR:
				setLineColor(((Integer)newValue).intValue());
				return;
			case NotationPackage.CONNECTOR_STYLE__LINE_WIDTH:
				setLineWidth(((Integer)newValue).intValue());
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.CONNECTOR_STYLE__ROUTING:
				setRouting(ROUTING_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS:
				setSmoothness(SMOOTHNESS_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS:
				setAvoidObstructions(AVOID_OBSTRUCTIONS_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE:
				setClosestDistance(CLOSEST_DISTANCE_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS:
				setJumpLinkStatus(JUMP_LINK_STATUS_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE:
				setJumpLinkType(JUMP_LINK_TYPE_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE:
				setJumpLinksReverse(JUMP_LINKS_REVERSE_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__LINE_COLOR:
				setLineColor(LINE_COLOR_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__LINE_WIDTH:
				setLineWidth(LINE_WIDTH_EDEFAULT);
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.CONNECTOR_STYLE__ROUTING:
				return (eFlags & ROUTING_EFLAG) != ROUTING_EFLAG_DEFAULT;
			case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS:
				return (eFlags & SMOOTHNESS_EFLAG) != SMOOTHNESS_EFLAG_DEFAULT;
			case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS:
				return ((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0) != AVOID_OBSTRUCTIONS_EDEFAULT;
			case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE:
				return ((eFlags & CLOSEST_DISTANCE_EFLAG) != 0) != CLOSEST_DISTANCE_EDEFAULT;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS:
				return (eFlags & JUMP_LINK_STATUS_EFLAG) != JUMP_LINK_STATUS_EFLAG_DEFAULT;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE:
				return (eFlags & JUMP_LINK_TYPE_EFLAG) != JUMP_LINK_TYPE_EFLAG_DEFAULT;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE:
				return ((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0) != JUMP_LINKS_REVERSE_EDEFAULT;
			case NotationPackage.CONNECTOR_STYLE__LINE_COLOR:
				return lineColor != LINE_COLOR_EDEFAULT;
			case NotationPackage.CONNECTOR_STYLE__LINE_WIDTH:
				return lineWidth != LINE_WIDTH_EDEFAULT;
		}
		return eDynamicIsSet(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int eBaseStructuralFeatureID(int derivedFeatureID, Class baseClass) {
		if (baseClass == Style.class) {
			switch (derivedFeatureID) {
				default: return -1;
			}
		}
		if (baseClass == RoutingStyle.class) {
			switch (derivedFeatureID) {
				case NotationPackage.CONNECTOR_STYLE__ROUTING: return NotationPackage.ROUTING_STYLE__ROUTING;
				case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS: return NotationPackage.ROUTING_STYLE__SMOOTHNESS;
				case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS: return NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS;
				case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE: return NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE;
				case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS: return NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS;
				case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE: return NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE;
				case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE: return NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE;
				default: return -1;
			}
		}
		if (baseClass == LineStyle.class) {
			switch (derivedFeatureID) {
				case NotationPackage.CONNECTOR_STYLE__LINE_COLOR: return NotationPackage.LINE_STYLE__LINE_COLOR;
				case NotationPackage.CONNECTOR_STYLE__LINE_WIDTH: return NotationPackage.LINE_STYLE__LINE_WIDTH;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int eDerivedStructuralFeatureID(int baseFeatureID, Class baseClass) {
		if (baseClass == Style.class) {
			switch (baseFeatureID) {
				default: return -1;
			}
		}
		if (baseClass == RoutingStyle.class) {
			switch (baseFeatureID) {
				case NotationPackage.ROUTING_STYLE__ROUTING: return NotationPackage.CONNECTOR_STYLE__ROUTING;
				case NotationPackage.ROUTING_STYLE__SMOOTHNESS: return NotationPackage.CONNECTOR_STYLE__SMOOTHNESS;
				case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS: return NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS;
				case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE: return NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE;
				case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS: return NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS;
				case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE: return NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE;
				case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE: return NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE;
				default: return -1;
			}
		}
		if (baseClass == LineStyle.class) {
			switch (baseFeatureID) {
				case NotationPackage.LINE_STYLE__LINE_COLOR: return NotationPackage.CONNECTOR_STYLE__LINE_COLOR;
				case NotationPackage.LINE_STYLE__LINE_WIDTH: return NotationPackage.CONNECTOR_STYLE__LINE_WIDTH;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (routing: "); //$NON-NLS-1$
		result.append(ROUTING_EFLAG_VALUES[(eFlags & ROUTING_EFLAG) >>> ROUTING_EFLAG_OFFSET]);
		result.append(", smoothness: "); //$NON-NLS-1$
		result.append(SMOOTHNESS_EFLAG_VALUES[(eFlags & SMOOTHNESS_EFLAG) >>> SMOOTHNESS_EFLAG_OFFSET]);
		result.append(", avoidObstructions: "); //$NON-NLS-1$
		result.append((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0);
		result.append(", closestDistance: "); //$NON-NLS-1$
		result.append((eFlags & CLOSEST_DISTANCE_EFLAG) != 0);
		result.append(", jumpLinkStatus: "); //$NON-NLS-1$
		result.append(JUMP_LINK_STATUS_EFLAG_VALUES[(eFlags & JUMP_LINK_STATUS_EFLAG) >>> JUMP_LINK_STATUS_EFLAG_OFFSET]);
		result.append(", jumpLinkType: "); //$NON-NLS-1$
		result.append(JUMP_LINK_TYPE_EFLAG_VALUES[(eFlags & JUMP_LINK_TYPE_EFLAG) >>> JUMP_LINK_TYPE_EFLAG_OFFSET]);
		result.append(", jumpLinksReverse: "); //$NON-NLS-1$
		result.append((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0);
		result.append(", lineColor: "); //$NON-NLS-1$
		result.append(lineColor);
		result.append(", lineWidth: "); //$NON-NLS-1$
		result.append(lineWidth);
		result.append(')');
		return result.toString();
	}

} //ConnectorStyleImpl
@


1.9
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@a21 1
import org.eclipse.gmf.runtime.notation.NotationObject;
d52 1
a52 1
public class ConnectorStyleImpl extends EObjectImpl implements ConnectorStyle {
@


1.8
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@a35 1
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ConnectorStyleImpl#getUUID <em>UUID</em>}</li>
d55 1
a55 1
	 * The default value of the '{@@link #getUUID() <em>UUID</em>}' attribute.
d58 1
a58 1
	 * @@see #getUUID()
d62 1
a62 1
	protected static final byte[] UUID_EDEFAULT = null;
d65 1
a65 1
	 * The cached value of the '{@@link #getUUID() <em>UUID</em>}' attribute.
a67 1
	 * @@see #getUUID()
d71 1
a71 1
	protected byte[] uUID = UUID_EDEFAULT;
d74 10
a83 1
	 * The default value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
a85 1
	 * @@see #getRouting()
d89 1
a89 1
	protected static final Routing ROUTING_EDEFAULT = Routing.MANUAL_LITERAL;
d91 2
a92 2
	/**
	 * The cached value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
d99 1
a99 1
	protected Routing routing = ROUTING_EDEFAULT;
d112 28
a139 1
	 * The cached value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
d146 1
a146 1
	protected Smoothness smoothness = SMOOTHNESS_EDEFAULT;
d166 1
a166 1
	protected static final int AVOID_OBSTRUCTIONS_EFLAG = 1 << 8;
d186 1
a186 1
	protected static final int CLOSEST_DISTANCE_EFLAG = 1 << 9;
d199 28
a226 1
	 * The cached value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
d233 1
a233 1
	protected JumpLinkStatus jumpLinkStatus = JUMP_LINK_STATUS_EDEFAULT;
d246 28
a273 1
	 * The cached value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
d280 1
a280 1
	protected JumpLinkType jumpLinkType = JUMP_LINK_TYPE_EDEFAULT;
d300 1
a300 1
	protected static final int JUMP_LINKS_REVERSE_EFLAG = 1 << 10;
a364 21
	public byte[] getUUID() {
		return uUID;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setUUID(byte[] newUUID) {
		byte[] oldUUID = uUID;
		uUID = newUUID;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__UUID, oldUUID, uUID));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d366 1
a366 1
		return routing;
d375 3
a377 2
		Routing oldRouting = routing;
		routing = newRouting == null ? ROUTING_EDEFAULT : newRouting;
d379 1
a379 1
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__ROUTING, oldRouting, routing));
d388 1
a388 1
		return smoothness;
d397 3
a399 2
		Smoothness oldSmoothness = smoothness;
		smoothness = newSmoothness == null ? SMOOTHNESS_EDEFAULT : newSmoothness;
d401 1
a401 1
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__SMOOTHNESS, oldSmoothness, smoothness));
d452 1
a452 1
		return jumpLinkStatus;
d461 3
a463 2
		JumpLinkStatus oldJumpLinkStatus = jumpLinkStatus;
		jumpLinkStatus = newJumpLinkStatus == null ? JUMP_LINK_STATUS_EDEFAULT : newJumpLinkStatus;
d465 1
a465 1
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS, oldJumpLinkStatus, jumpLinkStatus));
d474 1
a474 1
		return jumpLinkType;
d483 3
a485 2
		JumpLinkType oldJumpLinkType = jumpLinkType;
		jumpLinkType = newJumpLinkType == null ? JUMP_LINK_TYPE_EDEFAULT : newJumpLinkType;
d487 1
a487 1
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE, oldJumpLinkType, jumpLinkType));
a559 2
			case NotationPackage.CONNECTOR_STYLE__UUID:
				return getUUID();
a588 3
			case NotationPackage.CONNECTOR_STYLE__UUID:
				setUUID((byte[])newValue);
				return;
a626 3
			case NotationPackage.CONNECTOR_STYLE__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a664 2
			case NotationPackage.CONNECTOR_STYLE__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
d666 1
a666 1
				return routing != ROUTING_EDEFAULT;
d668 1
a668 1
				return smoothness != SMOOTHNESS_EDEFAULT;
d674 1
a674 1
				return jumpLinkStatus != JUMP_LINK_STATUS_EDEFAULT;
d676 1
a676 1
				return jumpLinkType != JUMP_LINK_TYPE_EDEFAULT;
a692 6
		if (baseClass == NotationObject.class) {
			switch (derivedFeatureID) {
				case NotationPackage.CONNECTOR_STYLE__UUID: return NotationPackage.NOTATION_OBJECT__UUID;
				default: return -1;
			}
		}
a725 6
		if (baseClass == NotationObject.class) {
			switch (baseFeatureID) {
				case NotationPackage.NOTATION_OBJECT__UUID: return NotationPackage.CONNECTOR_STYLE__UUID;
				default: return -1;
			}
		}
d762 2
a763 4
		result.append(" (uUID: "); //$NON-NLS-1$
		result.append(uUID);
		result.append(", routing: "); //$NON-NLS-1$
		result.append(routing);
d765 1
a765 1
		result.append(smoothness);
d771 1
a771 1
		result.append(jumpLinkStatus);
d773 1
a773 1
		result.append(jumpLinkType);
@


1.7
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d243 1
a243 1
	protected static final int LINE_WIDTH_EDEFAULT = 1;
@


1.6
log
@[225137] gmf-head ahunter 080407 Line styles notation enhancement
@
text
@d22 1
d36 1
d56 20
d278 21
d490 2
d521 3
d562 3
d603 2
d633 6
d672 6
d714 3
a716 1
		result.append(" (routing: "); //$NON-NLS-1$
@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
d43 1
d214 20
d421 21
d463 2
d500 3
d538 3
d568 2
d600 1
d633 1
d665 2
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d17 1
a17 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d51 1
a51 1
public class ConnectorStyleImpl extends FlatEObjectImpl implements ConnectorStyle {
d53 2
a54 2
     * The default value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
     * <!-- begin-user-doc -->
d56 4
a59 4
     * @@see #getRouting()
     * @@generated
     * @@ordered
     */
d62 8
a69 8
    /**
     * The cached value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getRouting()
     * @@generated
     * @@ordered
     */
d72 8
a79 8
    /**
     * The default value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getSmoothness()
     * @@generated
     * @@ordered
     */
d82 8
a89 8
    /**
     * The cached value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getSmoothness()
     * @@generated
     * @@ordered
     */
d92 8
a99 8
    /**
     * The default value of the '{@@link #isAvoidObstructions() <em>Avoid Obstructions</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isAvoidObstructions()
     * @@generated
     * @@ordered
     */
d102 8
a109 8
    /**
     * The flag representing the value of the '{@@link #isAvoidObstructions() <em>Avoid Obstructions</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isAvoidObstructions()
     * @@generated
     * @@ordered
     */
d112 8
a119 8
    /**
     * The default value of the '{@@link #isClosestDistance() <em>Closest Distance</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isClosestDistance()
     * @@generated
     * @@ordered
     */
d122 8
a129 8
    /**
     * The flag representing the value of the '{@@link #isClosestDistance() <em>Closest Distance</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isClosestDistance()
     * @@generated
     * @@ordered
     */
d132 8
a139 8
    /**
     * The default value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getJumpLinkStatus()
     * @@generated
     * @@ordered
     */
d142 8
a149 8
    /**
     * The cached value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getJumpLinkStatus()
     * @@generated
     * @@ordered
     */
d152 8
a159 8
    /**
     * The default value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getJumpLinkType()
     * @@generated
     * @@ordered
     */
d162 8
a169 8
    /**
     * The cached value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getJumpLinkType()
     * @@generated
     * @@ordered
     */
d172 8
a179 8
    /**
     * The default value of the '{@@link #isJumpLinksReverse() <em>Jump Links Reverse</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isJumpLinksReverse()
     * @@generated
     * @@ordered
     */
d182 8
a189 8
    /**
     * The flag representing the value of the '{@@link #isJumpLinksReverse() <em>Jump Links Reverse</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isJumpLinksReverse()
     * @@generated
     * @@ordered
     */
d192 8
a199 8
    /**
     * The default value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getLineColor()
     * @@generated
     * @@ordered
     */
d203 2
a204 2
     * The cached value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
     * <!-- begin-user-doc -->
d206 4
a209 4
     * @@see #getLineColor()
     * @@generated
     * @@ordered
     */
d213 1
a213 1
     * <!-- begin-user-doc -->
d215 2
a216 2
     * @@generated
     */
d218 2
a219 2
        super();
    }
d222 1
a222 1
     * <!-- begin-user-doc -->
d224 2
a225 2
     * @@generated
     */
d227 2
a228 2
        return NotationPackage.Literals.CONNECTOR_STYLE;
    }
d231 1
a231 1
     * <!-- begin-user-doc -->
d233 2
a234 2
     * @@generated
     */
d236 2
a237 2
        return routing;
    }
d239 2
a240 2
    /**
     * <!-- begin-user-doc -->
d242 2
a243 2
     * @@generated
     */
d245 5
a249 5
        Routing oldRouting = routing;
        routing = newRouting == null ? ROUTING_EDEFAULT : newRouting;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__ROUTING, oldRouting, routing));
    }
d251 2
a252 2
    /**
     * <!-- begin-user-doc -->
d254 2
a255 2
     * @@generated
     */
d257 2
a258 2
        return smoothness;
    }
d260 2
a261 2
    /**
     * <!-- begin-user-doc -->
d263 2
a264 2
     * @@generated
     */
d266 5
a270 5
        Smoothness oldSmoothness = smoothness;
        smoothness = newSmoothness == null ? SMOOTHNESS_EDEFAULT : newSmoothness;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__SMOOTHNESS, oldSmoothness, smoothness));
    }
d272 2
a273 2
    /**
     * <!-- begin-user-doc -->
d275 2
a276 2
     * @@generated
     */
d278 2
a279 2
        return (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
    }
d281 2
a282 2
    /**
     * <!-- begin-user-doc -->
d284 2
a285 2
     * @@generated
     */
d287 5
a291 5
        boolean oldAvoidObstructions = (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
        if (newAvoidObstructions) eFlags |= AVOID_OBSTRUCTIONS_EFLAG; else eFlags &= ~AVOID_OBSTRUCTIONS_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS, oldAvoidObstructions, newAvoidObstructions));
    }
d293 2
a294 2
    /**
     * <!-- begin-user-doc -->
d296 2
a297 2
     * @@generated
     */
d299 2
a300 2
        return (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
    }
d302 2
a303 2
    /**
     * <!-- begin-user-doc -->
d305 2
a306 2
     * @@generated
     */
d308 5
a312 5
        boolean oldClosestDistance = (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
        if (newClosestDistance) eFlags |= CLOSEST_DISTANCE_EFLAG; else eFlags &= ~CLOSEST_DISTANCE_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE, oldClosestDistance, newClosestDistance));
    }
d314 2
a315 2
    /**
     * <!-- begin-user-doc -->
d317 2
a318 2
     * @@generated
     */
d320 2
a321 2
        return jumpLinkStatus;
    }
d323 2
a324 2
    /**
     * <!-- begin-user-doc -->
d326 2
a327 2
     * @@generated
     */
d329 5
a333 5
        JumpLinkStatus oldJumpLinkStatus = jumpLinkStatus;
        jumpLinkStatus = newJumpLinkStatus == null ? JUMP_LINK_STATUS_EDEFAULT : newJumpLinkStatus;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS, oldJumpLinkStatus, jumpLinkStatus));
    }
d335 2
a336 2
    /**
     * <!-- begin-user-doc -->
d338 2
a339 2
     * @@generated
     */
d341 2
a342 2
        return jumpLinkType;
    }
d344 2
a345 2
    /**
     * <!-- begin-user-doc -->
d347 2
a348 2
     * @@generated
     */
d350 5
a354 5
        JumpLinkType oldJumpLinkType = jumpLinkType;
        jumpLinkType = newJumpLinkType == null ? JUMP_LINK_TYPE_EDEFAULT : newJumpLinkType;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE, oldJumpLinkType, jumpLinkType));
    }
d356 2
a357 2
    /**
     * <!-- begin-user-doc -->
d359 2
a360 2
     * @@generated
     */
d362 2
a363 2
        return (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
    }
d365 2
a366 2
    /**
     * <!-- begin-user-doc -->
d368 2
a369 2
     * @@generated
     */
d371 5
a375 5
        boolean oldJumpLinksReverse = (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
        if (newJumpLinksReverse) eFlags |= JUMP_LINKS_REVERSE_EFLAG; else eFlags &= ~JUMP_LINKS_REVERSE_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE, oldJumpLinksReverse, newJumpLinksReverse));
    }
d377 2
a378 2
    /**
     * <!-- begin-user-doc -->
d380 2
a381 2
     * @@generated
     */
d383 2
a384 2
        return lineColor;
    }
d387 1
a387 1
     * <!-- begin-user-doc -->
d389 2
a390 2
     * @@generated
     */
d392 5
a396 5
        int oldLineColor = lineColor;
        lineColor = newLineColor;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__LINE_COLOR, oldLineColor, lineColor));
    }
d399 1
a399 1
     * <!-- begin-user-doc -->
d401 2
a402 2
     * @@generated
     */
d404 20
a423 20
        switch (featureID) {
            case NotationPackage.CONNECTOR_STYLE__ROUTING:
                return getRouting();
            case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS:
                return getSmoothness();
            case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS:
                return isAvoidObstructions() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE:
                return isClosestDistance() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS:
                return getJumpLinkStatus();
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE:
                return getJumpLinkType();
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE:
                return isJumpLinksReverse() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.CONNECTOR_STYLE__LINE_COLOR:
                return new Integer(getLineColor());
        }
        return eDynamicGet(featureID, resolve, coreType);
    }
d426 1
a426 1
     * <!-- begin-user-doc -->
d428 2
a429 2
     * @@generated
     */
d431 28
a458 28
        switch (featureID) {
            case NotationPackage.CONNECTOR_STYLE__ROUTING:
                setRouting((Routing)newValue);
                return;
            case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS:
                setSmoothness((Smoothness)newValue);
                return;
            case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS:
                setAvoidObstructions(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE:
                setClosestDistance(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS:
                setJumpLinkStatus((JumpLinkStatus)newValue);
                return;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE:
                setJumpLinkType((JumpLinkType)newValue);
                return;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE:
                setJumpLinksReverse(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.CONNECTOR_STYLE__LINE_COLOR:
                setLineColor(((Integer)newValue).intValue());
                return;
        }
        eDynamicSet(featureID, newValue);
    }
d461 1
a461 1
     * <!-- begin-user-doc -->
d463 2
a464 2
     * @@generated
     */
d466 28
a493 28
        switch (featureID) {
            case NotationPackage.CONNECTOR_STYLE__ROUTING:
                setRouting(ROUTING_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS:
                setSmoothness(SMOOTHNESS_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS:
                setAvoidObstructions(AVOID_OBSTRUCTIONS_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE:
                setClosestDistance(CLOSEST_DISTANCE_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS:
                setJumpLinkStatus(JUMP_LINK_STATUS_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE:
                setJumpLinkType(JUMP_LINK_TYPE_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE:
                setJumpLinksReverse(JUMP_LINKS_REVERSE_EDEFAULT);
                return;
            case NotationPackage.CONNECTOR_STYLE__LINE_COLOR:
                setLineColor(LINE_COLOR_EDEFAULT);
                return;
        }
        eDynamicUnset(featureID);
    }
d496 1
a496 1
     * <!-- begin-user-doc -->
d498 2
a499 2
     * @@generated
     */
d501 20
a520 20
        switch (featureID) {
            case NotationPackage.CONNECTOR_STYLE__ROUTING:
                return routing != ROUTING_EDEFAULT;
            case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS:
                return smoothness != SMOOTHNESS_EDEFAULT;
            case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS:
                return ((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0) != AVOID_OBSTRUCTIONS_EDEFAULT;
            case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE:
                return ((eFlags & CLOSEST_DISTANCE_EFLAG) != 0) != CLOSEST_DISTANCE_EDEFAULT;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS:
                return jumpLinkStatus != JUMP_LINK_STATUS_EDEFAULT;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE:
                return jumpLinkType != JUMP_LINK_TYPE_EDEFAULT;
            case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE:
                return ((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0) != JUMP_LINKS_REVERSE_EDEFAULT;
            case NotationPackage.CONNECTOR_STYLE__LINE_COLOR:
                return lineColor != LINE_COLOR_EDEFAULT;
        }
        return eDynamicIsSet(featureID);
    }
d523 1
a523 1
     * <!-- begin-user-doc -->
d525 2
a526 2
     * @@generated
     */
d528 25
a552 25
        if (baseClass == Style.class) {
            switch (derivedFeatureID) {
                default: return -1;
            }
        }
        if (baseClass == RoutingStyle.class) {
            switch (derivedFeatureID) {
                case NotationPackage.CONNECTOR_STYLE__ROUTING: return NotationPackage.ROUTING_STYLE__ROUTING;
                case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS: return NotationPackage.ROUTING_STYLE__SMOOTHNESS;
                case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS: return NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS;
                case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE: return NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE;
                case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS: return NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS;
                case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE: return NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE;
                case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE: return NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE;
                default: return -1;
            }
        }
        if (baseClass == LineStyle.class) {
            switch (derivedFeatureID) {
                case NotationPackage.CONNECTOR_STYLE__LINE_COLOR: return NotationPackage.LINE_STYLE__LINE_COLOR;
                default: return -1;
            }
        }
        return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
    }
d555 1
a555 1
     * <!-- begin-user-doc -->
d557 2
a558 2
     * @@generated
     */
d560 25
a584 25
        if (baseClass == Style.class) {
            switch (baseFeatureID) {
                default: return -1;
            }
        }
        if (baseClass == RoutingStyle.class) {
            switch (baseFeatureID) {
                case NotationPackage.ROUTING_STYLE__ROUTING: return NotationPackage.CONNECTOR_STYLE__ROUTING;
                case NotationPackage.ROUTING_STYLE__SMOOTHNESS: return NotationPackage.CONNECTOR_STYLE__SMOOTHNESS;
                case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS: return NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS;
                case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE: return NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE;
                case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS: return NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS;
                case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE: return NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE;
                case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE: return NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE;
                default: return -1;
            }
        }
        if (baseClass == LineStyle.class) {
            switch (baseFeatureID) {
                case NotationPackage.LINE_STYLE__LINE_COLOR: return NotationPackage.CONNECTOR_STYLE__LINE_COLOR;
                default: return -1;
            }
        }
        return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
    }
d587 1
a587 1
     * <!-- begin-user-doc -->
d589 2
a590 2
     * @@generated
     */
d592 1
a592 1
        if (eIsProxy()) return super.toString();
d594 20
a613 20
        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (routing: "); //$NON-NLS-1$
        result.append(routing);
        result.append(", smoothness: "); //$NON-NLS-1$
        result.append(smoothness);
        result.append(", avoidObstructions: "); //$NON-NLS-1$
        result.append((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0);
        result.append(", closestDistance: "); //$NON-NLS-1$
        result.append((eFlags & CLOSEST_DISTANCE_EFLAG) != 0);
        result.append(", jumpLinkStatus: "); //$NON-NLS-1$
        result.append(jumpLinkStatus);
        result.append(", jumpLinkType: "); //$NON-NLS-1$
        result.append(jumpLinkType);
        result.append(", jumpLinksReverse: "); //$NON-NLS-1$
        result.append((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0);
        result.append(", lineColor: "); //$NON-NLS-1$
        result.append(lineColor);
        result.append(')');
        return result.toString();
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d17 1
a17 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
d51 1
a51 1
public class ConnectorStyleImpl extends EObjectImpl implements ConnectorStyle {
d422 1
a422 1
        return super.eGet(featureID, resolve, coreType);
d457 1
a457 1
        super.eSet(featureID, newValue);
d492 1
a492 1
        super.eUnset(featureID);
d519 1
a519 1
        return super.eIsSet(featureID);
@


1.3.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@d17 1
a17 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d51 1
a51 1
public class ConnectorStyleImpl extends FlatEObjectImpl implements ConnectorStyle {
d422 1
a422 1
        return eDynamicGet(featureID, resolve, coreType);
d457 1
a457 1
        eDynamicSet(featureID, newValue);
d492 1
a492 1
        eDynamicUnset(featureID);
d519 1
a519 1
        return eDynamicIsSet(featureID);
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a15 1
import org.eclipse.emf.ecore.EStructuralFeature;
a17 1

d52 8
a59 8
	/**
	 * The default value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getRouting()
	 * @@generated
	 * @@ordered
	 */
d62 8
a69 8
	/**
	 * The cached value of the '{@@link #getRouting() <em>Routing</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getRouting()
	 * @@generated
	 * @@ordered
	 */
d72 8
a79 8
	/**
	 * The default value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSmoothness()
	 * @@generated
	 * @@ordered
	 */
d82 8
a89 8
	/**
	 * The cached value of the '{@@link #getSmoothness() <em>Smoothness</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSmoothness()
	 * @@generated
	 * @@ordered
	 */
d92 8
a99 8
	/**
	 * The default value of the '{@@link #isAvoidObstructions() <em>Avoid Obstructions</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isAvoidObstructions()
	 * @@generated
	 * @@ordered
	 */
d102 8
a109 8
	/**
	 * The flag representing the value of the '{@@link #isAvoidObstructions() <em>Avoid Obstructions</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isAvoidObstructions()
	 * @@generated
	 * @@ordered
	 */
d112 8
a119 8
	/**
	 * The default value of the '{@@link #isClosestDistance() <em>Closest Distance</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isClosestDistance()
	 * @@generated
	 * @@ordered
	 */
d122 8
a129 8
	/**
	 * The flag representing the value of the '{@@link #isClosestDistance() <em>Closest Distance</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isClosestDistance()
	 * @@generated
	 * @@ordered
	 */
d132 8
a139 8
	/**
	 * The default value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkStatus()
	 * @@generated
	 * @@ordered
	 */
d142 8
a149 8
	/**
	 * The cached value of the '{@@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkStatus()
	 * @@generated
	 * @@ordered
	 */
d152 8
a159 8
	/**
	 * The default value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkType()
	 * @@generated
	 * @@ordered
	 */
d162 8
a169 8
	/**
	 * The cached value of the '{@@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getJumpLinkType()
	 * @@generated
	 * @@ordered
	 */
d172 8
a179 8
	/**
	 * The default value of the '{@@link #isJumpLinksReverse() <em>Jump Links Reverse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isJumpLinksReverse()
	 * @@generated
	 * @@ordered
	 */
d182 8
a189 8
	/**
	 * The flag representing the value of the '{@@link #isJumpLinksReverse() <em>Jump Links Reverse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isJumpLinksReverse()
	 * @@generated
	 * @@ordered
	 */
d192 8
a199 8
	/**
	 * The default value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineColor()
	 * @@generated
	 * @@ordered
	 */
d202 8
a209 8
	/**
	 * The cached value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineColor()
	 * @@generated
	 * @@ordered
	 */
d212 2
a213 2
	/**
	 * <!-- begin-user-doc -->
d215 2
a216 2
	 * @@generated
	 */
d218 2
a219 2
		super();
	}
d221 2
a222 2
	/**
	 * <!-- begin-user-doc -->
d224 2
a225 2
	 * @@generated
	 */
d227 2
a228 2
		return NotationPackage.eINSTANCE.getConnectorStyle();
	}
d230 2
a231 2
	/**
	 * <!-- begin-user-doc -->
d233 2
a234 2
	 * @@generated
	 */
d236 2
a237 2
		return routing;
	}
d239 2
a240 2
	/**
	 * <!-- begin-user-doc -->
d242 2
a243 2
	 * @@generated
	 */
d245 5
a249 5
		Routing oldRouting = routing;
		routing = newRouting == null ? ROUTING_EDEFAULT : newRouting;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__ROUTING, oldRouting, routing));
	}
d251 2
a252 2
	/**
	 * <!-- begin-user-doc -->
d254 2
a255 2
	 * @@generated
	 */
d257 2
a258 2
		return smoothness;
	}
d260 2
a261 2
	/**
	 * <!-- begin-user-doc -->
d263 2
a264 2
	 * @@generated
	 */
d266 5
a270 5
		Smoothness oldSmoothness = smoothness;
		smoothness = newSmoothness == null ? SMOOTHNESS_EDEFAULT : newSmoothness;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__SMOOTHNESS, oldSmoothness, smoothness));
	}
d272 2
a273 2
	/**
	 * <!-- begin-user-doc -->
d275 2
a276 2
	 * @@generated
	 */
d278 2
a279 2
		return (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
	}
d281 2
a282 2
	/**
	 * <!-- begin-user-doc -->
d284 2
a285 2
	 * @@generated
	 */
d287 5
a291 5
		boolean oldAvoidObstructions = (eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0;
		if (newAvoidObstructions) eFlags |= AVOID_OBSTRUCTIONS_EFLAG; else eFlags &= ~AVOID_OBSTRUCTIONS_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS, oldAvoidObstructions, newAvoidObstructions));
	}
d293 2
a294 2
	/**
	 * <!-- begin-user-doc -->
d296 2
a297 2
	 * @@generated
	 */
d299 2
a300 2
		return (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
	}
d302 2
a303 2
	/**
	 * <!-- begin-user-doc -->
d305 2
a306 2
	 * @@generated
	 */
d308 5
a312 5
		boolean oldClosestDistance = (eFlags & CLOSEST_DISTANCE_EFLAG) != 0;
		if (newClosestDistance) eFlags |= CLOSEST_DISTANCE_EFLAG; else eFlags &= ~CLOSEST_DISTANCE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE, oldClosestDistance, newClosestDistance));
	}
d314 2
a315 2
	/**
	 * <!-- begin-user-doc -->
d317 2
a318 2
	 * @@generated
	 */
d320 2
a321 2
		return jumpLinkStatus;
	}
d323 2
a324 2
	/**
	 * <!-- begin-user-doc -->
d326 2
a327 2
	 * @@generated
	 */
d329 5
a333 5
		JumpLinkStatus oldJumpLinkStatus = jumpLinkStatus;
		jumpLinkStatus = newJumpLinkStatus == null ? JUMP_LINK_STATUS_EDEFAULT : newJumpLinkStatus;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS, oldJumpLinkStatus, jumpLinkStatus));
	}
d335 2
a336 2
	/**
	 * <!-- begin-user-doc -->
d338 2
a339 2
	 * @@generated
	 */
d341 2
a342 2
		return jumpLinkType;
	}
d344 2
a345 2
	/**
	 * <!-- begin-user-doc -->
d347 2
a348 2
	 * @@generated
	 */
d350 5
a354 5
		JumpLinkType oldJumpLinkType = jumpLinkType;
		jumpLinkType = newJumpLinkType == null ? JUMP_LINK_TYPE_EDEFAULT : newJumpLinkType;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE, oldJumpLinkType, jumpLinkType));
	}
d356 2
a357 2
	/**
	 * <!-- begin-user-doc -->
d359 2
a360 2
	 * @@generated
	 */
d362 2
a363 2
		return (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
	}
d365 2
a366 2
	/**
	 * <!-- begin-user-doc -->
d368 2
a369 2
	 * @@generated
	 */
d371 5
a375 5
		boolean oldJumpLinksReverse = (eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0;
		if (newJumpLinksReverse) eFlags |= JUMP_LINKS_REVERSE_EFLAG; else eFlags &= ~JUMP_LINKS_REVERSE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE, oldJumpLinksReverse, newJumpLinksReverse));
	}
d377 2
a378 2
	/**
	 * <!-- begin-user-doc -->
d380 2
a381 2
	 * @@generated
	 */
d383 2
a384 2
		return lineColor;
	}
d386 2
a387 2
	/**
	 * <!-- begin-user-doc -->
d389 2
a390 2
	 * @@generated
	 */
d392 129
a520 129
		int oldLineColor = lineColor;
		lineColor = newLineColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__LINE_COLOR, oldLineColor, lineColor));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.CONNECTOR_STYLE__ROUTING:
				return getRouting();
			case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS:
				return getSmoothness();
			case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS:
				return isAvoidObstructions() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE:
				return isClosestDistance() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS:
				return getJumpLinkStatus();
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE:
				return getJumpLinkType();
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE:
				return isJumpLinksReverse() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.CONNECTOR_STYLE__LINE_COLOR:
				return new Integer(getLineColor());
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.CONNECTOR_STYLE__ROUTING:
				setRouting((Routing)newValue);
				return;
			case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS:
				setSmoothness((Smoothness)newValue);
				return;
			case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS:
				setAvoidObstructions(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE:
				setClosestDistance(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS:
				setJumpLinkStatus((JumpLinkStatus)newValue);
				return;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE:
				setJumpLinkType((JumpLinkType)newValue);
				return;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE:
				setJumpLinksReverse(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.CONNECTOR_STYLE__LINE_COLOR:
				setLineColor(((Integer)newValue).intValue());
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.CONNECTOR_STYLE__ROUTING:
				setRouting(ROUTING_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS:
				setSmoothness(SMOOTHNESS_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS:
				setAvoidObstructions(AVOID_OBSTRUCTIONS_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE:
				setClosestDistance(CLOSEST_DISTANCE_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS:
				setJumpLinkStatus(JUMP_LINK_STATUS_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE:
				setJumpLinkType(JUMP_LINK_TYPE_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE:
				setJumpLinksReverse(JUMP_LINKS_REVERSE_EDEFAULT);
				return;
			case NotationPackage.CONNECTOR_STYLE__LINE_COLOR:
				setLineColor(LINE_COLOR_EDEFAULT);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.CONNECTOR_STYLE__ROUTING:
				return routing != ROUTING_EDEFAULT;
			case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS:
				return smoothness != SMOOTHNESS_EDEFAULT;
			case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS:
				return ((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0) != AVOID_OBSTRUCTIONS_EDEFAULT;
			case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE:
				return ((eFlags & CLOSEST_DISTANCE_EFLAG) != 0) != CLOSEST_DISTANCE_EDEFAULT;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS:
				return jumpLinkStatus != JUMP_LINK_STATUS_EDEFAULT;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE:
				return jumpLinkType != JUMP_LINK_TYPE_EDEFAULT;
			case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE:
				return ((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0) != JUMP_LINKS_REVERSE_EDEFAULT;
			case NotationPackage.CONNECTOR_STYLE__LINE_COLOR:
				return lineColor != LINE_COLOR_EDEFAULT;
		}
		return eDynamicIsSet(eFeature);
	}
d522 2
a523 2
	/**
	 * <!-- begin-user-doc -->
d525 2
a526 2
	 * @@generated
	 */
d528 25
a552 25
		if (baseClass == Style.class) {
			switch (derivedFeatureID) {
				default: return -1;
			}
		}
		if (baseClass == RoutingStyle.class) {
			switch (derivedFeatureID) {
				case NotationPackage.CONNECTOR_STYLE__ROUTING: return NotationPackage.ROUTING_STYLE__ROUTING;
				case NotationPackage.CONNECTOR_STYLE__SMOOTHNESS: return NotationPackage.ROUTING_STYLE__SMOOTHNESS;
				case NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS: return NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS;
				case NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE: return NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE;
				case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS: return NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS;
				case NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE: return NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE;
				case NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE: return NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE;
				default: return -1;
			}
		}
		if (baseClass == LineStyle.class) {
			switch (derivedFeatureID) {
				case NotationPackage.CONNECTOR_STYLE__LINE_COLOR: return NotationPackage.LINE_STYLE__LINE_COLOR;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}
d554 2
a555 2
	/**
	 * <!-- begin-user-doc -->
d557 2
a558 2
	 * @@generated
	 */
d560 25
a584 25
		if (baseClass == Style.class) {
			switch (baseFeatureID) {
				default: return -1;
			}
		}
		if (baseClass == RoutingStyle.class) {
			switch (baseFeatureID) {
				case NotationPackage.ROUTING_STYLE__ROUTING: return NotationPackage.CONNECTOR_STYLE__ROUTING;
				case NotationPackage.ROUTING_STYLE__SMOOTHNESS: return NotationPackage.CONNECTOR_STYLE__SMOOTHNESS;
				case NotationPackage.ROUTING_STYLE__AVOID_OBSTRUCTIONS: return NotationPackage.CONNECTOR_STYLE__AVOID_OBSTRUCTIONS;
				case NotationPackage.ROUTING_STYLE__CLOSEST_DISTANCE: return NotationPackage.CONNECTOR_STYLE__CLOSEST_DISTANCE;
				case NotationPackage.ROUTING_STYLE__JUMP_LINK_STATUS: return NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS;
				case NotationPackage.ROUTING_STYLE__JUMP_LINK_TYPE: return NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE;
				case NotationPackage.ROUTING_STYLE__JUMP_LINKS_REVERSE: return NotationPackage.CONNECTOR_STYLE__JUMP_LINKS_REVERSE;
				default: return -1;
			}
		}
		if (baseClass == LineStyle.class) {
			switch (baseFeatureID) {
				case NotationPackage.LINE_STYLE__LINE_COLOR: return NotationPackage.CONNECTOR_STYLE__LINE_COLOR;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}
d586 2
a587 2
	/**
	 * <!-- begin-user-doc -->
d589 2
a590 2
	 * @@generated
	 */
d592 1
a592 1
		if (eIsProxy()) return super.toString();
d594 20
a613 20
		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (routing: "); //$NON-NLS-1$
		result.append(routing);
		result.append(", smoothness: "); //$NON-NLS-1$
		result.append(smoothness);
		result.append(", avoidObstructions: "); //$NON-NLS-1$
		result.append((eFlags & AVOID_OBSTRUCTIONS_EFLAG) != 0);
		result.append(", closestDistance: "); //$NON-NLS-1$
		result.append((eFlags & CLOSEST_DISTANCE_EFLAG) != 0);
		result.append(", jumpLinkStatus: "); //$NON-NLS-1$
		result.append(jumpLinkStatus);
		result.append(", jumpLinkType: "); //$NON-NLS-1$
		result.append(jumpLinkType);
		result.append(", jumpLinksReverse: "); //$NON-NLS-1$
		result.append((eFlags & JUMP_LINKS_REVERSE_EFLAG) != 0);
		result.append(", lineColor: "); //$NON-NLS-1$
		result.append(lineColor);
		result.append(')');
		return result.toString();
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

