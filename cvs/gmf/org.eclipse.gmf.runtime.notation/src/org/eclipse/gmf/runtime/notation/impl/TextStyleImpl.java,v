head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080722-1827:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080507-1326:1.3
	v20080503-1740:1.2
	v20080425-1959:1.1
	v20080407-2250:1.1
	v20080407-1545:1.1
	v20080331-1625:1.1
	v20080328-1605:1.1;
locks; strict;
comment	@# @;


1.3
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.2;
commitid	3e924820f4604567;

1.2
date	2008.05.03.18.33.03;	author ahunter;	state Exp;
branches;
next	1.1;
commitid	1c13481cafcc4567;

1.1
date	2008.03.27.21.11.11;	author ahunter;	state Exp;
branches;
next	;
commitid	3a1947ec0d6e4567;


desc
@@


1.3
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/
package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.TextAlignment;
import org.eclipse.gmf.runtime.notation.TextStyle;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Text Style</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.TextStyleImpl#getTextAlignment <em>Text Alignment</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class TextStyleImpl extends NotationEObjectImpl implements TextStyle {
	/**
	 * The default value of the '{@@link #getTextAlignment() <em>Text Alignment</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTextAlignment()
	 * @@generated
	 * @@ordered
	 */
	protected static final TextAlignment TEXT_ALIGNMENT_EDEFAULT = TextAlignment.LEFT_LITERAL;

	/**
	 * The offset of the flags representing the value of the '{@@link #getTextAlignment() <em>Text Alignment</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int TEXT_ALIGNMENT_EFLAG_OFFSET = 8;

	/**
	 * The flags representing the default value of the '{@@link #getTextAlignment() <em>Text Alignment</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int TEXT_ALIGNMENT_EFLAG_DEFAULT = TextAlignment.VALUES.indexOf(TEXT_ALIGNMENT_EDEFAULT) << TEXT_ALIGNMENT_EFLAG_OFFSET;

	/**
	 * The array of enumeration values for '{@@link TextAlignment Text Alignment}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	private static final TextAlignment[] TEXT_ALIGNMENT_EFLAG_VALUES = (TextAlignment[])TextAlignment.VALUES.toArray(new TextAlignment[TextAlignment.VALUES.size()]);

	/**
	 * The flags representing the value of the '{@@link #getTextAlignment() <em>Text Alignment</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTextAlignment()
	 * @@generated
	 * @@ordered
	 */
	protected static final int TEXT_ALIGNMENT_EFLAG = 0x3 << TEXT_ALIGNMENT_EFLAG_OFFSET;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected TextStyleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.TEXT_STYLE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public TextAlignment getTextAlignment() {
		return TEXT_ALIGNMENT_EFLAG_VALUES[(eFlags & TEXT_ALIGNMENT_EFLAG) >>> TEXT_ALIGNMENT_EFLAG_OFFSET];
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setTextAlignment(TextAlignment newTextAlignment) {
		TextAlignment oldTextAlignment = TEXT_ALIGNMENT_EFLAG_VALUES[(eFlags & TEXT_ALIGNMENT_EFLAG) >>> TEXT_ALIGNMENT_EFLAG_OFFSET];
		if (newTextAlignment == null) newTextAlignment = TEXT_ALIGNMENT_EDEFAULT;
		eFlags = eFlags & ~TEXT_ALIGNMENT_EFLAG | TextAlignment.VALUES.indexOf(newTextAlignment) << TEXT_ALIGNMENT_EFLAG_OFFSET;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.TEXT_STYLE__TEXT_ALIGNMENT, oldTextAlignment, newTextAlignment));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.TEXT_STYLE__TEXT_ALIGNMENT:
				return getTextAlignment();
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.TEXT_STYLE__TEXT_ALIGNMENT:
				setTextAlignment((TextAlignment)newValue);
				return;
		}
		eDynamicSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.TEXT_STYLE__TEXT_ALIGNMENT:
				setTextAlignment(TEXT_ALIGNMENT_EDEFAULT);
				return;
		}
		eDynamicUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.TEXT_STYLE__TEXT_ALIGNMENT:
				return (eFlags & TEXT_ALIGNMENT_EFLAG) != TEXT_ALIGNMENT_EFLAG_DEFAULT;
		}
		return eDynamicIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (textAlignment: "); //$NON-NLS-1$
		result.append(TEXT_ALIGNMENT_EFLAG_VALUES[(eFlags & TEXT_ALIGNMENT_EFLAG) >>> TEXT_ALIGNMENT_EFLAG_OFFSET]);
		result.append(')');
		return result.toString();
	}

} //TextStyleImpl
@


1.2
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d33 1
a33 1
public class TextStyleImpl extends NotationObjectImpl implements TextStyle {
d45 28
a72 1
	 * The cached value of the '{@@link #getTextAlignment() <em>Text Alignment</em>}' attribute.
d79 1
a79 1
	protected TextAlignment textAlignment = TEXT_ALIGNMENT_EDEFAULT;
d105 1
a105 1
		return textAlignment;
d114 3
a116 2
		TextAlignment oldTextAlignment = textAlignment;
		textAlignment = newTextAlignment == null ? TEXT_ALIGNMENT_EDEFAULT : newTextAlignment;
d118 1
a118 1
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.TEXT_STYLE__TEXT_ALIGNMENT, oldTextAlignment, textAlignment));
a127 2
			case NotationPackage.TEXT_STYLE__UUID:
				return getUUID();
a140 3
			case NotationPackage.TEXT_STYLE__UUID:
				setUUID((byte[])newValue);
				return;
a154 3
			case NotationPackage.TEXT_STYLE__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a168 2
			case NotationPackage.TEXT_STYLE__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
d170 1
a170 1
				return textAlignment != TEXT_ALIGNMENT_EDEFAULT;
d185 1
a185 1
		result.append(textAlignment);
@


1.1
log
@[224473] gmf-head ahunter 080327 Text alignment enhancement
@
text
@a13 1

a14 1

a15 2
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;

d33 1
a33 1
public class TextStyleImpl extends FlatEObjectImpl implements TextStyle {
d100 2
d115 3
d132 3
d149 2
@

