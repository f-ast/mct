head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080722-1827:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080507-1326:1.3
	v20080503-1740:1.2
	v20080425-1959:1.1
	v20080407-2250:1.1
	v20080407-1545:1.1;
locks; strict;
comment	@# @;


1.3
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.2;
commitid	3e924820f4604567;

1.2
date	2008.05.03.18.33.03;	author ahunter;	state Exp;
branches;
next	1.1;
commitid	1c13481cafcc4567;

1.1
date	2008.04.07.19.37.20;	author ahunter;	state Exp;
branches;
next	;
commitid	2da847fa77ee4567;


desc
@@


1.3
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/
package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;

import org.eclipse.gmf.runtime.notation.LineType;
import org.eclipse.gmf.runtime.notation.LineTypeStyle;
import org.eclipse.gmf.runtime.notation.NotationPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Line Type Style</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.LineTypeStyleImpl#getLineType <em>Line Type</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class LineTypeStyleImpl extends NotationEObjectImpl implements LineTypeStyle {
	/**
	 * The default value of the '{@@link #getLineType() <em>Line Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineType()
	 * @@generated
	 * @@ordered
	 */
	protected static final LineType LINE_TYPE_EDEFAULT = LineType.SOLID_LITERAL;

	/**
	 * The offset of the flags representing the value of the '{@@link #getLineType() <em>Line Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int LINE_TYPE_EFLAG_OFFSET = 8;

	/**
	 * The flags representing the default value of the '{@@link #getLineType() <em>Line Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int LINE_TYPE_EFLAG_DEFAULT = LineType.VALUES.indexOf(LINE_TYPE_EDEFAULT) << LINE_TYPE_EFLAG_OFFSET;

	/**
	 * The array of enumeration values for '{@@link LineType Line Type}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	private static final LineType[] LINE_TYPE_EFLAG_VALUES = (LineType[])LineType.VALUES.toArray(new LineType[LineType.VALUES.size()]);

	/**
	 * The flags representing the value of the '{@@link #getLineType() <em>Line Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineType()
	 * @@generated
	 * @@ordered
	 */
	protected static final int LINE_TYPE_EFLAG = 0x7 << LINE_TYPE_EFLAG_OFFSET;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected LineTypeStyleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.LINE_TYPE_STYLE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LineType getLineType() {
		return LINE_TYPE_EFLAG_VALUES[(eFlags & LINE_TYPE_EFLAG) >>> LINE_TYPE_EFLAG_OFFSET];
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLineType(LineType newLineType) {
		LineType oldLineType = LINE_TYPE_EFLAG_VALUES[(eFlags & LINE_TYPE_EFLAG) >>> LINE_TYPE_EFLAG_OFFSET];
		if (newLineType == null) newLineType = LINE_TYPE_EDEFAULT;
		eFlags = eFlags & ~LINE_TYPE_EFLAG | LineType.VALUES.indexOf(newLineType) << LINE_TYPE_EFLAG_OFFSET;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.LINE_TYPE_STYLE__LINE_TYPE, oldLineType, newLineType));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.LINE_TYPE_STYLE__LINE_TYPE:
				return getLineType();
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.LINE_TYPE_STYLE__LINE_TYPE:
				setLineType((LineType)newValue);
				return;
		}
		eDynamicSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.LINE_TYPE_STYLE__LINE_TYPE:
				setLineType(LINE_TYPE_EDEFAULT);
				return;
		}
		eDynamicUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.LINE_TYPE_STYLE__LINE_TYPE:
				return (eFlags & LINE_TYPE_EFLAG) != LINE_TYPE_EFLAG_DEFAULT;
		}
		return eDynamicIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (lineType: "); //$NON-NLS-1$
		result.append(LINE_TYPE_EFLAG_VALUES[(eFlags & LINE_TYPE_EFLAG) >>> LINE_TYPE_EFLAG_OFFSET]);
		result.append(')');
		return result.toString();
	}

} //LineTypeStyleImpl
@


1.2
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d37 1
a37 1
public class LineTypeStyleImpl extends NotationObjectImpl implements LineTypeStyle {
d49 28
a76 1
	 * The cached value of the '{@@link #getLineType() <em>Line Type</em>}' attribute.
d83 1
a83 1
	protected LineType lineType = LINE_TYPE_EDEFAULT;
d109 1
a109 1
		return lineType;
d118 3
a120 2
		LineType oldLineType = lineType;
		lineType = newLineType == null ? LINE_TYPE_EDEFAULT : newLineType;
d122 1
a122 1
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.LINE_TYPE_STYLE__LINE_TYPE, oldLineType, lineType));
a131 2
			case NotationPackage.LINE_TYPE_STYLE__UUID:
				return getUUID();
a144 3
			case NotationPackage.LINE_TYPE_STYLE__UUID:
				setUUID((byte[])newValue);
				return;
a158 3
			case NotationPackage.LINE_TYPE_STYLE__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a172 2
			case NotationPackage.LINE_TYPE_STYLE__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
d174 1
a174 1
				return lineType != LINE_TYPE_EDEFAULT;
d189 1
a189 1
		result.append(lineType);
@


1.1
log
@[225137] gmf-head ahunter 080407 Line styles notation enhancement
@
text
@d37 1
a37 1
public class LineTypeStyleImpl extends FlatEObjectImpl implements LineTypeStyle {
d104 2
d119 3
d136 3
d153 2
@

