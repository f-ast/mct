head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080507-1326:1.7
	v20080503-1740:1.6
	v20080425-1959:1.5
	v20080407-2250:1.5
	v20080407-1545:1.5
	v20080331-1625:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080114-2222:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	3e924820f4604567;

1.6
date	2008.05.03.18.33.02;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	1c13481cafcc4567;

1.5
date	2007.05.17.16.26.49;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71d9464c82444567;

1.4
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.17.20.27.55;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.runtime.notation.Bounds;
import org.eclipse.gmf.runtime.notation.ImageStyle;
import org.eclipse.gmf.runtime.notation.NotationPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Image Style</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ImageStyleImpl#getAntiAlias <em>Anti Alias</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ImageStyleImpl#getMaintainAspectRatio <em>Maintain Aspect Ratio</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ImageStyleImpl#getCropBound <em>Crop Bound</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy org.eclipse.gmf.runtime.notation.*
 */
public class ImageStyleImpl extends NotationEObjectImpl implements ImageStyle {
    /**
	 * The default value of the '{@@link #getAntiAlias() <em>Anti Alias</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAntiAlias()
	 * @@generated
	 * @@ordered
	 */
	protected static final Boolean ANTI_ALIAS_EDEFAULT = Boolean.TRUE;

    /**
	 * The cached value of the '{@@link #getAntiAlias() <em>Anti Alias</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAntiAlias()
	 * @@generated
	 * @@ordered
	 */
	protected Boolean antiAlias = ANTI_ALIAS_EDEFAULT;

				/**
	 * The default value of the '{@@link #getMaintainAspectRatio() <em>Maintain Aspect Ratio</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMaintainAspectRatio()
	 * @@generated
	 * @@ordered
	 */
	protected static final Boolean MAINTAIN_ASPECT_RATIO_EDEFAULT = Boolean.TRUE;

    /**
	 * The cached value of the '{@@link #getMaintainAspectRatio() <em>Maintain Aspect Ratio</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMaintainAspectRatio()
	 * @@generated
	 * @@ordered
	 */
	protected Boolean maintainAspectRatio = MAINTAIN_ASPECT_RATIO_EDEFAULT;

				/**
	 * The cached value of the '{@@link #getCropBound() <em>Crop Bound</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getCropBound()
	 * @@generated
	 * @@ordered
	 */
	protected Bounds cropBound;

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ImageStyleImpl() {
		super();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.IMAGE_STYLE;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Boolean getAntiAlias() {
		return antiAlias;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setAntiAlias(Boolean newAntiAlias) {
		Boolean oldAntiAlias = antiAlias;
		antiAlias = newAntiAlias;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.IMAGE_STYLE__ANTI_ALIAS, oldAntiAlias, antiAlias));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Boolean getMaintainAspectRatio() {
		return maintainAspectRatio;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setMaintainAspectRatio(Boolean newMaintainAspectRatio) {
		Boolean oldMaintainAspectRatio = maintainAspectRatio;
		maintainAspectRatio = newMaintainAspectRatio;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO, oldMaintainAspectRatio, maintainAspectRatio));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Bounds getCropBound() {
		return cropBound;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetCropBound(Bounds newCropBound, NotificationChain msgs) {
		Bounds oldCropBound = cropBound;
		cropBound = newCropBound;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NotationPackage.IMAGE_STYLE__CROP_BOUND, oldCropBound, newCropBound);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setCropBound(Bounds newCropBound) {
		if (newCropBound != cropBound) {
			NotificationChain msgs = null;
			if (cropBound != null)
				msgs = ((InternalEObject)cropBound).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NotationPackage.IMAGE_STYLE__CROP_BOUND, null, msgs);
			if (newCropBound != null)
				msgs = ((InternalEObject)newCropBound).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NotationPackage.IMAGE_STYLE__CROP_BOUND, null, msgs);
			msgs = basicSetCropBound(newCropBound, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.IMAGE_STYLE__CROP_BOUND, newCropBound, newCropBound));
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case NotationPackage.IMAGE_STYLE__CROP_BOUND:
				return basicSetCropBound(null, msgs);
		}
		return eDynamicInverseRemove(otherEnd, featureID, msgs);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.IMAGE_STYLE__ANTI_ALIAS:
				return getAntiAlias();
			case NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO:
				return getMaintainAspectRatio();
			case NotationPackage.IMAGE_STYLE__CROP_BOUND:
				return getCropBound();
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.IMAGE_STYLE__ANTI_ALIAS:
				setAntiAlias((Boolean)newValue);
				return;
			case NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO:
				setMaintainAspectRatio((Boolean)newValue);
				return;
			case NotationPackage.IMAGE_STYLE__CROP_BOUND:
				setCropBound((Bounds)newValue);
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.IMAGE_STYLE__ANTI_ALIAS:
				setAntiAlias(ANTI_ALIAS_EDEFAULT);
				return;
			case NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO:
				setMaintainAspectRatio(MAINTAIN_ASPECT_RATIO_EDEFAULT);
				return;
			case NotationPackage.IMAGE_STYLE__CROP_BOUND:
				setCropBound((Bounds)null);
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.IMAGE_STYLE__ANTI_ALIAS:
				return ANTI_ALIAS_EDEFAULT == null ? antiAlias != null : !ANTI_ALIAS_EDEFAULT.equals(antiAlias);
			case NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO:
				return MAINTAIN_ASPECT_RATIO_EDEFAULT == null ? maintainAspectRatio != null : !MAINTAIN_ASPECT_RATIO_EDEFAULT.equals(maintainAspectRatio);
			case NotationPackage.IMAGE_STYLE__CROP_BOUND:
				return cropBound != null;
		}
		return eDynamicIsSet(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (antiAlias: "); //$NON-NLS-1$
		result.append(antiAlias);
		result.append(", maintainAspectRatio: "); //$NON-NLS-1$
		result.append(maintainAspectRatio);
		result.append(')');
		return result.toString();
	}

} //ImageStyleImpl
@


1.6
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d41 1
a41 1
public class ImageStyleImpl extends NotationObjectImpl implements ImageStyle {
a214 2
			case NotationPackage.IMAGE_STYLE__UUID:
				return getUUID();
a231 3
			case NotationPackage.IMAGE_STYLE__UUID:
				setUUID((byte[])newValue);
				return;
a251 3
			case NotationPackage.IMAGE_STYLE__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a271 2
			case NotationPackage.IMAGE_STYLE__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@a18 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d41 1
a41 1
public class ImageStyleImpl extends FlatEObjectImpl implements ImageStyle {
d215 2
d234 3
d257 3
d280 2
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d44 2
a45 2
     * The default value of the '{@@link #getAntiAlias() <em>Anti Alias</em>}' attribute.
     * <!-- begin-user-doc -->
d47 4
a50 4
     * @@see #getAntiAlias()
     * @@generated
     * @@ordered
     */
d54 2
a55 2
     * The cached value of the '{@@link #getAntiAlias() <em>Anti Alias</em>}' attribute.
     * <!-- begin-user-doc -->
d57 4
a60 4
     * @@see #getAntiAlias()
     * @@generated
     * @@ordered
     */
d63 8
a70 8
    /**
     * The default value of the '{@@link #getMaintainAspectRatio() <em>Maintain Aspect Ratio</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getMaintainAspectRatio()
     * @@generated
     * @@ordered
     */
d74 2
a75 2
     * The cached value of the '{@@link #getMaintainAspectRatio() <em>Maintain Aspect Ratio</em>}' attribute.
     * <!-- begin-user-doc -->
d77 4
a80 4
     * @@see #getMaintainAspectRatio()
     * @@generated
     * @@ordered
     */
d83 3
a85 3
    /**
     * The cached value of the '{@@link #getCropBound() <em>Crop Bound</em>}' containment reference.
     * <!-- begin-user-doc -->
d87 5
a91 5
     * @@see #getCropBound()
     * @@generated
     * @@ordered
     */
	protected Bounds cropBound = null;
d94 1
a94 1
     * <!-- begin-user-doc -->
d96 2
a97 2
     * @@generated
     */
d99 2
a100 2
        super();
    }
d103 1
a103 1
     * <!-- begin-user-doc -->
d105 2
a106 2
     * @@generated
     */
d108 2
a109 2
        return NotationPackage.Literals.IMAGE_STYLE;
    }
d112 1
a112 1
     * <!-- begin-user-doc -->
d114 2
a115 2
     * @@generated
     */
d117 2
a118 2
        return antiAlias;
    }
d120 2
a121 2
    /**
     * <!-- begin-user-doc -->
d123 2
a124 2
     * @@generated
     */
d126 5
a130 5
        Boolean oldAntiAlias = antiAlias;
        antiAlias = newAntiAlias;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.IMAGE_STYLE__ANTI_ALIAS, oldAntiAlias, antiAlias));
    }
d132 2
a133 2
    /**
     * <!-- begin-user-doc -->
d135 2
a136 2
     * @@generated
     */
d138 2
a139 2
        return maintainAspectRatio;
    }
d141 2
a142 2
    /**
     * <!-- begin-user-doc -->
d144 2
a145 2
     * @@generated
     */
d147 5
a151 5
        Boolean oldMaintainAspectRatio = maintainAspectRatio;
        maintainAspectRatio = newMaintainAspectRatio;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO, oldMaintainAspectRatio, maintainAspectRatio));
    }
d153 2
a154 2
    /**
     * <!-- begin-user-doc -->
d156 2
a157 2
     * @@generated
     */
d159 2
a160 2
        return cropBound;
    }
d163 1
a163 1
     * <!-- begin-user-doc -->
d165 2
a166 2
     * @@generated
     */
d168 8
a175 8
        Bounds oldCropBound = cropBound;
        cropBound = newCropBound;
        if (eNotificationRequired()) {
            ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NotationPackage.IMAGE_STYLE__CROP_BOUND, oldCropBound, newCropBound);
            if (msgs == null) msgs = notification; else msgs.add(notification);
        }
        return msgs;
    }
d178 1
a178 1
     * <!-- begin-user-doc -->
d180 2
a181 2
     * @@generated
     */
d183 12
a194 12
        if (newCropBound != cropBound) {
            NotificationChain msgs = null;
            if (cropBound != null)
                msgs = ((InternalEObject)cropBound).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NotationPackage.IMAGE_STYLE__CROP_BOUND, null, msgs);
            if (newCropBound != null)
                msgs = ((InternalEObject)newCropBound).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NotationPackage.IMAGE_STYLE__CROP_BOUND, null, msgs);
            msgs = basicSetCropBound(newCropBound, msgs);
            if (msgs != null) msgs.dispatch();
        }
        else if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.IMAGE_STYLE__CROP_BOUND, newCropBound, newCropBound));
    }
d197 1
a197 1
     * <!-- begin-user-doc -->
d199 2
a200 2
     * @@generated
     */
d202 6
a207 6
        switch (featureID) {
            case NotationPackage.IMAGE_STYLE__CROP_BOUND:
                return basicSetCropBound(null, msgs);
        }
        return eDynamicInverseRemove(otherEnd, featureID, msgs);
    }
d210 1
a210 1
     * <!-- begin-user-doc -->
d212 2
a213 2
     * @@generated
     */
d215 10
a224 10
        switch (featureID) {
            case NotationPackage.IMAGE_STYLE__ANTI_ALIAS:
                return getAntiAlias();
            case NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO:
                return getMaintainAspectRatio();
            case NotationPackage.IMAGE_STYLE__CROP_BOUND:
                return getCropBound();
        }
        return eDynamicGet(featureID, resolve, coreType);
    }
d227 1
a227 1
     * <!-- begin-user-doc -->
d229 2
a230 2
     * @@generated
     */
d232 13
a244 13
        switch (featureID) {
            case NotationPackage.IMAGE_STYLE__ANTI_ALIAS:
                setAntiAlias((Boolean)newValue);
                return;
            case NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO:
                setMaintainAspectRatio((Boolean)newValue);
                return;
            case NotationPackage.IMAGE_STYLE__CROP_BOUND:
                setCropBound((Bounds)newValue);
                return;
        }
        eDynamicSet(featureID, newValue);
    }
d247 1
a247 1
     * <!-- begin-user-doc -->
d249 2
a250 2
     * @@generated
     */
d252 13
a264 13
        switch (featureID) {
            case NotationPackage.IMAGE_STYLE__ANTI_ALIAS:
                setAntiAlias(ANTI_ALIAS_EDEFAULT);
                return;
            case NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO:
                setMaintainAspectRatio(MAINTAIN_ASPECT_RATIO_EDEFAULT);
                return;
            case NotationPackage.IMAGE_STYLE__CROP_BOUND:
                setCropBound((Bounds)null);
                return;
        }
        eDynamicUnset(featureID);
    }
d267 1
a267 1
     * <!-- begin-user-doc -->
d269 2
a270 2
     * @@generated
     */
d272 10
a281 10
        switch (featureID) {
            case NotationPackage.IMAGE_STYLE__ANTI_ALIAS:
                return ANTI_ALIAS_EDEFAULT == null ? antiAlias != null : !ANTI_ALIAS_EDEFAULT.equals(antiAlias);
            case NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO:
                return MAINTAIN_ASPECT_RATIO_EDEFAULT == null ? maintainAspectRatio != null : !MAINTAIN_ASPECT_RATIO_EDEFAULT.equals(maintainAspectRatio);
            case NotationPackage.IMAGE_STYLE__CROP_BOUND:
                return cropBound != null;
        }
        return eDynamicIsSet(featureID);
    }
d284 1
a284 1
     * <!-- begin-user-doc -->
d286 2
a287 2
     * @@generated
     */
d289 1
a289 1
        if (eIsProxy()) return super.toString();
d291 8
a298 8
        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (antiAlias: "); //$NON-NLS-1$
        result.append(antiAlias);
        result.append(", maintainAspectRatio: "); //$NON-NLS-1$
        result.append(maintainAspectRatio);
        result.append(')');
        return result.toString();
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d19 1
a19 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
d42 1
a42 1
public class ImageStyleImpl extends EObjectImpl implements ImageStyle {
d206 1
a206 1
        return super.eInverseRemove(otherEnd, featureID, msgs);
d223 1
a223 1
        return super.eGet(featureID, resolve, coreType);
d243 1
a243 1
        super.eSet(featureID, newValue);
d263 1
a263 1
        super.eUnset(featureID);
d280 1
a280 1
        return super.eIsSet(featureID);
@


1.3.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@d19 1
a19 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d42 1
a42 1
public class ImageStyleImpl extends FlatEObjectImpl implements ImageStyle {
d206 1
a206 1
        return eDynamicInverseRemove(otherEnd, featureID, msgs);
d223 1
a223 1
        return eDynamicGet(featureID, resolve, coreType);
d243 1
a243 1
        eDynamicSet(featureID, newValue);
d263 1
a263 1
        eDynamicUnset(featureID);
d280 1
a280 1
        return eDynamicIsSet(featureID);
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a16 1
import org.eclipse.emf.ecore.EStructuralFeature;
a19 1

d43 8
a50 8
	/**
	 * The default value of the '{@@link #getAntiAlias() <em>Anti Alias</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAntiAlias()
	 * @@generated
	 * @@ordered
	 */
d53 8
a60 8
	/**
	 * The cached value of the '{@@link #getAntiAlias() <em>Anti Alias</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAntiAlias()
	 * @@generated
	 * @@ordered
	 */
d63 8
a70 8
	/**
	 * The default value of the '{@@link #getMaintainAspectRatio() <em>Maintain Aspect Ratio</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMaintainAspectRatio()
	 * @@generated
	 * @@ordered
	 */
d73 8
a80 8
	/**
	 * The cached value of the '{@@link #getMaintainAspectRatio() <em>Maintain Aspect Ratio</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMaintainAspectRatio()
	 * @@generated
	 * @@ordered
	 */
d83 8
a90 8
	/**
	 * The cached value of the '{@@link #getCropBound() <em>Crop Bound</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getCropBound()
	 * @@generated
	 * @@ordered
	 */
d93 2
a94 2
	/**
	 * <!-- begin-user-doc -->
d96 2
a97 2
	 * @@generated
	 */
d99 2
a100 2
		super();
	}
d102 2
a103 2
	/**
	 * <!-- begin-user-doc -->
d105 2
a106 2
	 * @@generated
	 */
d108 2
a109 2
		return NotationPackage.eINSTANCE.getImageStyle();
	}
d111 2
a112 2
	/**
	 * <!-- begin-user-doc -->
d114 2
a115 2
	 * @@generated
	 */
d117 2
a118 2
		return antiAlias;
	}
d120 2
a121 2
	/**
	 * <!-- begin-user-doc -->
d123 2
a124 2
	 * @@generated
	 */
d126 5
a130 5
		Boolean oldAntiAlias = antiAlias;
		antiAlias = newAntiAlias;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.IMAGE_STYLE__ANTI_ALIAS, oldAntiAlias, antiAlias));
	}
d132 2
a133 2
	/**
	 * <!-- begin-user-doc -->
d135 2
a136 2
	 * @@generated
	 */
d138 2
a139 2
		return maintainAspectRatio;
	}
d141 2
a142 2
	/**
	 * <!-- begin-user-doc -->
d144 2
a145 2
	 * @@generated
	 */
d147 5
a151 5
		Boolean oldMaintainAspectRatio = maintainAspectRatio;
		maintainAspectRatio = newMaintainAspectRatio;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO, oldMaintainAspectRatio, maintainAspectRatio));
	}
d153 2
a154 2
	/**
	 * <!-- begin-user-doc -->
d156 2
a157 2
	 * @@generated
	 */
d159 2
a160 2
		return cropBound;
	}
d162 2
a163 2
	/**
	 * <!-- begin-user-doc -->
d165 2
a166 2
	 * @@generated
	 */
d168 8
a175 8
		Bounds oldCropBound = cropBound;
		cropBound = newCropBound;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NotationPackage.IMAGE_STYLE__CROP_BOUND, oldCropBound, newCropBound);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}
d177 2
a178 2
	/**
	 * <!-- begin-user-doc -->
d180 2
a181 2
	 * @@generated
	 */
d183 99
a281 103
		if (newCropBound != cropBound) {
			NotificationChain msgs = null;
			if (cropBound != null)
				msgs = ((InternalEObject)cropBound).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NotationPackage.IMAGE_STYLE__CROP_BOUND, null, msgs);
			if (newCropBound != null)
				msgs = ((InternalEObject)newCropBound).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NotationPackage.IMAGE_STYLE__CROP_BOUND, null, msgs);
			msgs = basicSetCropBound(newCropBound, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.IMAGE_STYLE__CROP_BOUND, newCropBound, newCropBound));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case NotationPackage.IMAGE_STYLE__CROP_BOUND:
					return basicSetCropBound(null, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
		}
		return eBasicSetContainer(null, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.IMAGE_STYLE__ANTI_ALIAS:
				return getAntiAlias();
			case NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO:
				return getMaintainAspectRatio();
			case NotationPackage.IMAGE_STYLE__CROP_BOUND:
				return getCropBound();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.IMAGE_STYLE__ANTI_ALIAS:
				setAntiAlias((Boolean)newValue);
				return;
			case NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO:
				setMaintainAspectRatio((Boolean)newValue);
				return;
			case NotationPackage.IMAGE_STYLE__CROP_BOUND:
				setCropBound((Bounds)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.IMAGE_STYLE__ANTI_ALIAS:
				setAntiAlias(ANTI_ALIAS_EDEFAULT);
				return;
			case NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO:
				setMaintainAspectRatio(MAINTAIN_ASPECT_RATIO_EDEFAULT);
				return;
			case NotationPackage.IMAGE_STYLE__CROP_BOUND:
				setCropBound((Bounds)null);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.IMAGE_STYLE__ANTI_ALIAS:
				return ANTI_ALIAS_EDEFAULT == null ? antiAlias != null : !ANTI_ALIAS_EDEFAULT.equals(antiAlias);
			case NotationPackage.IMAGE_STYLE__MAINTAIN_ASPECT_RATIO:
				return MAINTAIN_ASPECT_RATIO_EDEFAULT == null ? maintainAspectRatio != null : !MAINTAIN_ASPECT_RATIO_EDEFAULT.equals(maintainAspectRatio);
			case NotationPackage.IMAGE_STYLE__CROP_BOUND:
				return cropBound != null;
		}
		return eDynamicIsSet(eFeature);
	}
d283 2
a284 2
	/**
	 * <!-- begin-user-doc -->
d286 2
a287 2
	 * @@generated
	 */
d289 1
a289 1
		if (eIsProxy()) return super.toString();
d291 8
a298 8
		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (antiAlias: "); //$NON-NLS-1$
		result.append(antiAlias);
		result.append(", maintainAspectRatio: "); //$NON-NLS-1$
		result.append(maintainAspectRatio);
		result.append(')');
		return result.toString();
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

