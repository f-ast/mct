head	1.9;
access;
symbols
	v20081020-0700:1.9
	v20080722-1827:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080507-1326:1.9
	v20080503-1740:1.7
	v20080425-1959:1.6
	v20080407-2250:1.6
	v20080407-1545:1.6
	v20080331-1625:1.6
	v20080328-1605:1.6
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20080114-2222:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20071112-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070518-1300:1.6
	v20070403-1500:1.5
	v20070330-1300:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061013-1330:1.5
	v20060919-0800:1.4.2.2
	M1_20:1.4
	v20060728-0500:1.4.2.1
	v20060721-1130:1.4.2.1
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060519-0800:1.4
	I20060505-1400:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.9
date	2008.05.07.01.04.47;	author ahunter;	state Exp;
branches;
next	1.8;
commitid	72e74821002b4567;

1.8
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	3e924820f4604567;

1.7
date	2008.05.03.18.33.03;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	1c13481cafcc4567;

1.6
date	2007.05.17.16.26.50;	author aboyko;	state Exp;
branches;
next	1.5;
commitid	71d9464c82444567;

1.5
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.12.14.19.22.01;	author mmostafa;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.07.17.20.27.54;	author ahunter;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.ECollections;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.EModelElementImpl;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EContentsEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectWithInverseEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.NamedStyle;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.Style;
import org.eclipse.gmf.runtime.notation.View;

/**
 * <!-- begin-user-doc --> An implementation of the model object '<em><b>View</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#isVisible <em>Visible</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getType <em>Type</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#isMutable <em>Mutable</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getSourceEdges <em>Source Edges</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getTargetEdges <em>Target Edges</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getPersistedChildren <em>Persisted Children</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getStyles <em>Styles</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getElement <em>Element</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getDiagram <em>Diagram</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getTransientChildren <em>Transient Children</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy org.eclipse.gmf.runtime.notation.*
 */
public abstract class ViewImpl
    extends EModelElementImpl
    implements View {

    /**
	 * The default value of the '{@@link #isVisible() <em>Visible</em>}' attribute.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #isVisible()
	 * @@generated
	 * @@ordered
	 */
    protected static final boolean VISIBLE_EDEFAULT = true;

    /**
	 * The flag representing the value of the '{@@link #isVisible() <em>Visible</em>}' attribute.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #isVisible()
	 * @@generated
	 * @@ordered
	 */
    protected static final int VISIBLE_EFLAG = 1 << 8;

    /**
	 * The default value of the '{@@link #getType() <em>Type</em>}' attribute.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #getType()
	 * @@generated
	 * @@ordered
	 */
    protected static final String TYPE_EDEFAULT = ""; //$NON-NLS-1$

    /**
	 * The cached value of the '{@@link #getType() <em>Type</em>}' attribute.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #getType()
	 * @@generated
	 * @@ordered
	 */
    protected String type = TYPE_EDEFAULT;

    /**
	 * The default value of the '{@@link #isMutable() <em>Mutable</em>}' attribute.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #isMutable()
	 * @@generated
	 * @@ordered
	 */
    protected static final boolean MUTABLE_EDEFAULT = false;

    /**
	 * The flag representing the value of the '{@@link #isMutable() <em>Mutable</em>}' attribute.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #isMutable()
	 * @@generated
	 * @@ordered
	 */
    protected static final int MUTABLE_EFLAG = 1 << 9;

    /**
	 * The cached value of the '{@@link #getSourceEdges() <em>Source Edges</em>}' reference list.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #getSourceEdges()
	 * @@generated
	 * @@ordered
	 */
    protected EList sourceEdges;

    /**
	 * The cached value of the '{@@link #getTargetEdges() <em>Target Edges</em>}' reference list.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #getTargetEdges()
	 * @@generated
	 * @@ordered
	 */
    protected EList targetEdges;

    /**
	 * The cached value of the '{@@link #getPersistedChildren() <em>Persisted Children</em>}' containment reference list.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #getPersistedChildren()
	 * @@generated
	 * @@ordered
	 */
    protected EList persistedChildren;

    /**
	 * The cached value of the '{@@link #getStyles() <em>Styles</em>}' containment reference list.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #getStyles()
	 * @@generated
	 * @@ordered
	 */
    protected EList styles;

    /**
	 * The cached value of the '{@@link #getElement() <em>Element</em>}' reference.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #getElement()
	 * @@generated
	 * @@ordered
	 */
    protected EObject element;

    /**
	 * The flag representing whether the Element reference has been set.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int ELEMENT_ESETFLAG = 1 << 10;

				/**
	 * The cached value of the '{@@link #getTransientChildren() <em>Transient Children</em>}' containment reference list.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #getTransientChildren()
	 * @@generated
	 * @@ordered
	 */
    protected EList transientChildren;

    // EATM
    // private EContentsEList allChildren = null;

    protected static final EStructuralFeature[] childrenFeatures = new EStructuralFeature[] {
        NotationPackage.Literals.VIEW__PERSISTED_CHILDREN,
        NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN};

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    protected ViewImpl() {
		super();
		eFlags |= VISIBLE_EFLAG;
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    protected EClass eStaticClass() {
		return NotationPackage.Literals.VIEW;
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean isVisible() {
		return (eFlags & VISIBLE_EFLAG) != 0;
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public void setVisible(boolean newVisible) {
		boolean oldVisible = (eFlags & VISIBLE_EFLAG) != 0;
		if (newVisible) eFlags |= VISIBLE_EFLAG; else eFlags &= ~VISIBLE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.VIEW__VISIBLE, oldVisible, newVisible));
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public String getType() {
		return type;
	}

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @@generated NOT
     */
    public void setType(String newType) {
        String oldType = type;
        type = (newType == null) ? null
            : newType.intern();
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET,
                NotationPackage.VIEW__TYPE, oldType, type));
    }

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean isMutable() {
		return (eFlags & MUTABLE_EFLAG) != 0;
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public void setMutable(boolean newMutable) {
		boolean oldMutable = (eFlags & MUTABLE_EFLAG) != 0;
		if (newMutable) eFlags |= MUTABLE_EFLAG; else eFlags &= ~MUTABLE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.VIEW__MUTABLE, oldMutable, newMutable));
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public EList getSourceEdges() {
		if (sourceEdges == null) {
			sourceEdges = new EObjectWithInverseEList(Edge.class, this, NotationPackage.VIEW__SOURCE_EDGES, NotationPackage.EDGE__SOURCE);
		}
		return sourceEdges;
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public EList getTargetEdges() {
		if (targetEdges == null) {
			targetEdges = new EObjectWithInverseEList(Edge.class, this, NotationPackage.VIEW__TARGET_EDGES, NotationPackage.EDGE__TARGET);
		}
		return targetEdges;
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public EList getPersistedChildren() {
		if (persistedChildren == null) {
			persistedChildren = new EObjectContainmentEList(Node.class, this, NotationPackage.VIEW__PERSISTED_CHILDREN);
		}
		return persistedChildren;
	}

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public EList getChildren() {
        return new EContentsEList(this, childrenFeatures);
        // if (allChildren == null) {
        //     allChildren = new EContentsEList(this, childrenFeatures);
        // }
        // return allChildren;
    }

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public EList getStyles() {
		if (styles == null) {
			styles = new EObjectContainmentEList(Style.class, this, NotationPackage.VIEW__STYLES);
		}
		return styles;
	}

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @@generated NOT
     */
    public EObject getElement() {
        if (!isSetElement()) {
            EObject container = eContainer();
            if (container instanceof View) {
                View view = (View) container;
                element = view.getElement();
            }
        }
        if (element != null && element.eIsProxy()) {
            EObject oldElement = element;
            element = eResolveProxy((InternalEObject) element);
            if (element != oldElement) {
                if (eNotificationRequired())
                    eNotify(new ENotificationImpl(this, Notification.RESOLVE,
                        NotationPackage.VIEW__ELEMENT, oldElement, element));
            }
        }

        return element;
    }

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public EObject basicGetElement() {
		return element;
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public void setElement(EObject newElement) {
		EObject oldElement = element;
		element = newElement;
		boolean oldElementESet = (eFlags & ELEMENT_ESETFLAG) != 0;
		eFlags |= ELEMENT_ESETFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.VIEW__ELEMENT, oldElement, element, !oldElementESet));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void unsetElement() {
		EObject oldElement = element;
		boolean oldElementESet = (eFlags & ELEMENT_ESETFLAG) != 0;
		element = null;
		eFlags &= ~ELEMENT_ESETFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.UNSET, NotationPackage.VIEW__ELEMENT, oldElement, null, oldElementESet));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isSetElement() {
		return (eFlags & ELEMENT_ESETFLAG) != 0;
	}

				/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public Diagram getDiagram() {
		Diagram diagram = basicGetDiagram();
		return diagram != null && diagram.eIsProxy() ? (Diagram)eResolveProxy((InternalEObject)diagram) : diagram;
	}

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public Diagram basicGetDiagram() {
        for (EObject parent = this; parent != null; parent = parent
            .eContainer())
            if (NotationPackage.Literals.DIAGRAM.isSuperTypeOf(
                parent.eClass()))
                return (Diagram) parent;
        return null;
    }

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public EList getTransientChildren() {
		if (transientChildren == null) {
			transientChildren = new EObjectContainmentEList(Node.class, this, NotationPackage.VIEW__TRANSIENT_CHILDREN);
		}
		return transientChildren;
	}

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public Style getStyle(EClass eClass) {
        if (eClass != null
            && eIsSet(NotationPackage.Literals.VIEW__STYLES)) {
            for (Iterator i = getStyles().iterator(); i.hasNext();) {
                Style style = (Style) i.next();
                if (style.eClass() == eClass || eClass.isInstance(style))
                    return style;
            }
        }
        return null;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public Node createChild(EClass eClass) {
        Node newChild = (Node) eClass.getEPackage().getEFactoryInstance()
            .create(eClass);
        getPersistedChildren().add(newChild);
        return newChild;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public Style createStyle(EClass eClass) {
        Style newStyle = (Style) eClass.getEPackage().getEFactoryInstance()
            .create(eClass);
        getStyles().add(newStyle);
        return newStyle;
    }

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public NamedStyle getNamedStyle(EClass eClass, String name) {
        if (eClass != null
                && eIsSet(NotationPackage.Literals.VIEW__STYLES)
                && NotationPackage.eINSTANCE.getNamedStyle().isSuperTypeOf(eClass)) {
                for (Iterator i = getStyles().iterator(); i.hasNext();) {
                    Style style = (Style) i.next();
                    if (style.eClass() == eClass || eClass.isInstance(style))
                        if (style.eGet(NotationPackage.eINSTANCE.getNamedStyle_Name()).equals(name))
                        	return (NamedStyle)style;
                }
            }
            return null;
	}

				/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case NotationPackage.VIEW__EANNOTATIONS:
				return ((InternalEList)getEAnnotations()).basicAdd(otherEnd, msgs);
			case NotationPackage.VIEW__SOURCE_EDGES:
				return ((InternalEList)getSourceEdges()).basicAdd(otherEnd, msgs);
			case NotationPackage.VIEW__TARGET_EDGES:
				return ((InternalEList)getTargetEdges()).basicAdd(otherEnd, msgs);
		}
		return eDynamicInverseAdd(otherEnd, featureID, msgs);
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case NotationPackage.VIEW__EANNOTATIONS:
				return ((InternalEList)getEAnnotations()).basicRemove(otherEnd, msgs);
			case NotationPackage.VIEW__SOURCE_EDGES:
				return ((InternalEList)getSourceEdges()).basicRemove(otherEnd, msgs);
			case NotationPackage.VIEW__TARGET_EDGES:
				return ((InternalEList)getTargetEdges()).basicRemove(otherEnd, msgs);
			case NotationPackage.VIEW__PERSISTED_CHILDREN:
				return ((InternalEList)getPersistedChildren()).basicRemove(otherEnd, msgs);
			case NotationPackage.VIEW__STYLES:
				return ((InternalEList)getStyles()).basicRemove(otherEnd, msgs);
			case NotationPackage.VIEW__TRANSIENT_CHILDREN:
				return ((InternalEList)getTransientChildren()).basicRemove(otherEnd, msgs);
		}
		return eDynamicInverseRemove(otherEnd, featureID, msgs);
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.VIEW__EANNOTATIONS:
				return getEAnnotations();
			case NotationPackage.VIEW__VISIBLE:
				return isVisible() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.VIEW__TYPE:
				return getType();
			case NotationPackage.VIEW__MUTABLE:
				return isMutable() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.VIEW__SOURCE_EDGES:
				return getSourceEdges();
			case NotationPackage.VIEW__TARGET_EDGES:
				return getTargetEdges();
			case NotationPackage.VIEW__PERSISTED_CHILDREN:
				return getPersistedChildren();
			case NotationPackage.VIEW__STYLES:
				return getStyles();
			case NotationPackage.VIEW__ELEMENT:
				if (resolve) return getElement();
				return basicGetElement();
			case NotationPackage.VIEW__DIAGRAM:
				if (resolve) return getDiagram();
				return basicGetDiagram();
			case NotationPackage.VIEW__TRANSIENT_CHILDREN:
				return getTransientChildren();
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.VIEW__EANNOTATIONS:
				getEAnnotations().clear();
				getEAnnotations().addAll((Collection)newValue);
				return;
			case NotationPackage.VIEW__VISIBLE:
				setVisible(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.VIEW__TYPE:
				setType((String)newValue);
				return;
			case NotationPackage.VIEW__MUTABLE:
				setMutable(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.VIEW__SOURCE_EDGES:
				getSourceEdges().clear();
				getSourceEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.VIEW__TARGET_EDGES:
				getTargetEdges().clear();
				getTargetEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.VIEW__PERSISTED_CHILDREN:
				getPersistedChildren().clear();
				getPersistedChildren().addAll((Collection)newValue);
				return;
			case NotationPackage.VIEW__STYLES:
				getStyles().clear();
				getStyles().addAll((Collection)newValue);
				return;
			case NotationPackage.VIEW__ELEMENT:
				setElement((EObject)newValue);
				return;
			case NotationPackage.VIEW__TRANSIENT_CHILDREN:
				getTransientChildren().clear();
				getTransientChildren().addAll((Collection)newValue);
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.VIEW__EANNOTATIONS:
				getEAnnotations().clear();
				return;
			case NotationPackage.VIEW__VISIBLE:
				setVisible(VISIBLE_EDEFAULT);
				return;
			case NotationPackage.VIEW__TYPE:
				setType(TYPE_EDEFAULT);
				return;
			case NotationPackage.VIEW__MUTABLE:
				setMutable(MUTABLE_EDEFAULT);
				return;
			case NotationPackage.VIEW__SOURCE_EDGES:
				getSourceEdges().clear();
				return;
			case NotationPackage.VIEW__TARGET_EDGES:
				getTargetEdges().clear();
				return;
			case NotationPackage.VIEW__PERSISTED_CHILDREN:
				getPersistedChildren().clear();
				return;
			case NotationPackage.VIEW__STYLES:
				getStyles().clear();
				return;
			case NotationPackage.VIEW__ELEMENT:
				unsetElement();
				return;
			case NotationPackage.VIEW__TRANSIENT_CHILDREN:
				getTransientChildren().clear();
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.VIEW__EANNOTATIONS:
				return eAnnotations != null && !eAnnotations.isEmpty();
			case NotationPackage.VIEW__VISIBLE:
				return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
			case NotationPackage.VIEW__TYPE:
				return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
			case NotationPackage.VIEW__MUTABLE:
				return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
			case NotationPackage.VIEW__SOURCE_EDGES:
				return sourceEdges != null && !sourceEdges.isEmpty();
			case NotationPackage.VIEW__TARGET_EDGES:
				return targetEdges != null && !targetEdges.isEmpty();
			case NotationPackage.VIEW__PERSISTED_CHILDREN:
				return persistedChildren != null && !persistedChildren.isEmpty();
			case NotationPackage.VIEW__STYLES:
				return styles != null && !styles.isEmpty();
			case NotationPackage.VIEW__ELEMENT:
				return isSetElement();
			case NotationPackage.VIEW__DIAGRAM:
				return basicGetDiagram() != null;
			case NotationPackage.VIEW__TRANSIENT_CHILDREN:
				return transientChildren != null && !transientChildren.isEmpty();
		}
		return eDynamicIsSet(featureID);
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (visible: "); //$NON-NLS-1$
		result.append((eFlags & VISIBLE_EFLAG) != 0);
		result.append(", type: "); //$NON-NLS-1$
		result.append(type);
		result.append(", mutable: "); //$NON-NLS-1$
		result.append((eFlags & MUTABLE_EFLAG) != 0);
		result.append(')');
		return result.toString();
	}

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void persistChildren() {
        if (transientChildren != null && transientChildren.size() > 0) {
            getPersistedChildren().addAll(transientChildren);
        }
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void insertChild(View child) {
        persistChildren();
        getPersistedChildren().add(child);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void insertChildAt(View child, int index) {
        persistChildren();
        if (getPersistedChildren().size() >= index) {
            getPersistedChildren().add(index, child);
        }
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void insertChild(View child, boolean persisted) {
        List children = null;
        if (persisted)
            children = getPersistedChildren();
        else
            children = getTransientChildren();
        children.add(child);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void removeChild(View child) {
        if (child.eContainingFeature() == NotationPackage.Literals
            .VIEW__TRANSIENT_CHILDREN) {
            if (transientChildren != null && transientChildren.size() > 0) {
                transientChildren.remove(child);
            }
        } else if (child.eContainingFeature() == NotationPackage.Literals
            .VIEW__PERSISTED_CHILDREN) {
            if (persistedChildren != null && persistedChildren.size() > 0) {
                persistedChildren.remove(child);
            }
        }
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void persist() {
        EStructuralFeature eContaingFeature = eContainingFeature();
        if (eContainer != null && eContaingFeature != null
            && eContainer instanceof View && eContaingFeature.isTransient()) {
            View vContainer = (View) eContainer;
            vContainer.persistChildren();
        }
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public EList getVisibleChildren() {
        if ((persistedChildren == null || persistedChildren.isEmpty())
            && (transientChildren == null || transientChildren.isEmpty())) {
            return ECollections.EMPTY_ELIST;
        }

        List _children = new ArrayList();
        if (persistedChildren != null && persistedChildren.size() > 0) {
            for (Iterator iter = persistedChildren.iterator(); iter
                .hasNext();) {
                View view = (View) iter.next();
                if (view.isVisible())
                    _children.add(view);
            }
        }

        if (transientChildren != null && transientChildren.size() > 0) {
            for (Iterator iter = transientChildren.iterator(); iter
                .hasNext();) {
                View view = (View) iter.next();
                if (view.isVisible())
                    _children.add(view);
            }
        }       
        
        return new BasicEList.UnmodifiableEList(_children.size(), _children
            .toArray());
    }

} // ViewImpl
@


1.8
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@a31 1
import org.eclipse.emf.ecore.util.ECrossReferenceEList;
a38 1
import org.eclipse.gmf.runtime.notation.NotationObject;
a70 42
  protected URI eProxyURI;

  @@Override
  protected EPropertiesHolder eProperties()
  {
    if (eProperties == null)
    {
      eProperties = new EPropertiesHolderBaseImpl() {};
    }
    return eProperties;
  }

  @@Override
  public boolean eIsProxy()
  {
    return eProxyURI != null;
  }
  
  @@Override
  public URI eProxyURI()
  {
    return eProxyURI;
  }

  @@Override
  public void eSetProxyURI(URI uri)
  {
    eProxyURI = uri;
  }

  @@Override
  public EList<EObject> eContents()
  {
    return EContentsEList.createEContentsEList(this);
  }

  @@Override
  public EList<EObject> eCrossReferences()
  {
    return ECrossReferenceEList.createECrossReferenceEList(this);
  }
  
@


1.7
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@a50 1
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getUUID <em>UUID</em>}</li>
d73 1
a73 21
  /**
	 * The default value of the '{@@link #getUUID() <em>UUID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getUUID()
	 * @@generated
	 * @@ordered
	 */
	protected static final byte[] UUID_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getUUID() <em>UUID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getUUID()
	 * @@generated
	 * @@ordered
	 */
	protected byte[] uUID = UUID_EDEFAULT;

		protected URI eProxyURI;
a256 21
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public byte[] getUUID() {
		return uUID;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setUUID(byte[] newUUID) {
		byte[] oldUUID = uUID;
		uUID = newUUID;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.VIEW__UUID, oldUUID, uUID));
	}

				/**
a572 2
			case NotationPackage.VIEW__UUID:
				return getUUID();
a608 3
			case NotationPackage.VIEW__UUID:
				setUUID((byte[])newValue);
				return;
a653 3
			case NotationPackage.VIEW__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a692 2
			case NotationPackage.VIEW__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
a717 30
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int eBaseStructuralFeatureID(int derivedFeatureID, Class baseClass) {
		if (baseClass == NotationObject.class) {
			switch (derivedFeatureID) {
				case NotationPackage.VIEW__UUID: return NotationPackage.NOTATION_OBJECT__UUID;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int eDerivedStructuralFeatureID(int baseFeatureID, Class baseClass) {
		if (baseClass == NotationObject.class) {
			switch (baseFeatureID) {
				case NotationPackage.NOTATION_OBJECT__UUID: return NotationPackage.VIEW__UUID;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}

				/**
d725 1
a725 3
		result.append(" (uUID: "); //$NON-NLS-1$
		result.append(uUID);
		result.append(", visible: "); //$NON-NLS-1$
@


1.6
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@d24 1
d32 1
d40 1
d51 1
d74 62
d253 2
a254 1
    private EContentsEList allChildren = null;
d278 21
d395 5
a399 4
        if (allChildren == null) {
            allChildren = new EContentsEList(this, childrenFeatures);
        }
        return allChildren;
d615 2
d653 3
d701 3
d743 2
d770 30
d807 3
a809 1
		result.append(" (visible: "); //$NON-NLS-1$
@


1.5
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d36 1
d48 10
a57 10
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#isVisible <em>Visible</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getType <em>Type</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#isMutable <em>Mutable</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getSourceEdges <em>Source Edges</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getTargetEdges <em>Target Edges</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getPersistedChildren <em>Persisted Children</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getStyles <em>Styles</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getElement <em>Element</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getDiagram <em>Diagram</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getTransientChildren <em>Transient Children</em>}</li>
d60 1
a60 1
 * 
d71 6
a76 6
     * The default value of the '{@@link #isVisible() <em>Visible</em>}' attribute.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #isVisible()
     * @@generated
     * @@ordered
     */
d80 6
a85 6
     * The flag representing the value of the '{@@link #isVisible() <em>Visible</em>}' attribute.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #isVisible()
     * @@generated
     * @@ordered
     */
d89 6
a94 6
     * The default value of the '{@@link #getType() <em>Type</em>}' attribute.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getType()
     * @@generated
     * @@ordered
     */
d98 6
a103 6
     * The cached value of the '{@@link #getType() <em>Type</em>}' attribute.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getType()
     * @@generated
     * @@ordered
     */
d107 6
a112 6
     * The default value of the '{@@link #isMutable() <em>Mutable</em>}' attribute.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #isMutable()
     * @@generated
     * @@ordered
     */
d116 6
a121 6
     * The flag representing the value of the '{@@link #isMutable() <em>Mutable</em>}' attribute.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #isMutable()
     * @@generated
     * @@ordered
     */
d125 61
a185 61
     * The cached value of the '{@@link #getSourceEdges() <em>Source Edges</em>}' reference list.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getSourceEdges()
     * @@generated
     * @@ordered
     */
    protected EList sourceEdges = null;

    /**
     * The cached value of the '{@@link #getTargetEdges() <em>Target Edges</em>}' reference list.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getTargetEdges()
     * @@generated
     * @@ordered
     */
    protected EList targetEdges = null;

    /**
     * The cached value of the '{@@link #getPersistedChildren() <em>Persisted Children</em>}' containment reference list.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getPersistedChildren()
     * @@generated
     * @@ordered
     */
    protected EList persistedChildren = null;

    /**
     * The cached value of the '{@@link #getStyles() <em>Styles</em>}' containment reference list.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getStyles()
     * @@generated
     * @@ordered
     */
    protected EList styles = null;

    /**
     * The cached value of the '{@@link #getElement() <em>Element</em>}' reference.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getElement()
     * @@generated
     * @@ordered
     */
    protected EObject element = null;

    /**
     * The flag representing whether the Element reference has been set. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @@generated
     * @@ordered
     */
    protected static final int ELEMENT_ESETFLAG = 1 << 10;

    /**
     * The cached value of the '{@@link #getTransientChildren() <em>Transient Children</em>}' containment reference list.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getTransientChildren()
     * @@generated
     * @@ordered
     */
    protected EList transientChildren = null;
d194 3
a196 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d198 3
a200 3
        super();
        eFlags |= VISIBLE_EFLAG;
    }
d203 3
a205 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d207 2
a208 2
        return NotationPackage.Literals.VIEW;
    }
d211 3
a213 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d215 2
a216 2
        return (eFlags & VISIBLE_EFLAG) != 0;
    }
d219 3
a221 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d223 5
a227 5
        boolean oldVisible = (eFlags & VISIBLE_EFLAG) != 0;
        if (newVisible) eFlags |= VISIBLE_EFLAG; else eFlags &= ~VISIBLE_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.VIEW__VISIBLE, oldVisible, newVisible));
    }
d230 3
a232 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d234 2
a235 2
        return type;
    }
d252 3
a254 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d256 2
a257 2
        return (eFlags & MUTABLE_EFLAG) != 0;
    }
d260 3
a262 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d264 5
a268 5
        boolean oldMutable = (eFlags & MUTABLE_EFLAG) != 0;
        if (newMutable) eFlags |= MUTABLE_EFLAG; else eFlags &= ~MUTABLE_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.VIEW__MUTABLE, oldMutable, newMutable));
    }
d271 3
a273 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d275 5
a279 5
        if (sourceEdges == null) {
            sourceEdges = new EObjectWithInverseEList(Edge.class, this, NotationPackage.VIEW__SOURCE_EDGES, NotationPackage.EDGE__SOURCE);
        }
        return sourceEdges;
    }
d282 3
a284 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d286 5
a290 5
        if (targetEdges == null) {
            targetEdges = new EObjectWithInverseEList(Edge.class, this, NotationPackage.VIEW__TARGET_EDGES, NotationPackage.EDGE__TARGET);
        }
        return targetEdges;
    }
d293 3
a295 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d297 5
a301 5
        if (persistedChildren == null) {
            persistedChildren = new EObjectContainmentEList(Node.class, this, NotationPackage.VIEW__PERSISTED_CHILDREN);
        }
        return persistedChildren;
    }
d314 3
a316 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d318 5
a322 5
        if (styles == null) {
            styles = new EObjectContainmentEList(Style.class, this, NotationPackage.VIEW__STYLES);
        }
        return styles;
    }
d351 3
a353 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d355 2
a356 2
        return element;
    }
d359 3
a361 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d363 35
a397 33
        EObject oldElement = element;
        element = newElement;
        boolean oldElementESet = (eFlags & ELEMENT_ESETFLAG) != 0;
        eFlags |= ELEMENT_ESETFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.VIEW__ELEMENT, oldElement, element, !oldElementESet));
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
    public void unsetElement() {
        EObject oldElement = element;
        boolean oldElementESet = (eFlags & ELEMENT_ESETFLAG) != 0;
        element = null;
        eFlags &= ~ELEMENT_ESETFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.UNSET, NotationPackage.VIEW__ELEMENT, oldElement, null, oldElementESet));
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
    public boolean isSetElement() {
        return (eFlags & ELEMENT_ESETFLAG) != 0;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d399 3
a401 3
        Diagram diagram = basicGetDiagram();
        return diagram != null && diagram.eIsProxy() ? (Diagram)eResolveProxy((InternalEObject)diagram) : diagram;
    }
d416 3
a418 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d420 5
a424 5
        if (transientChildren == null) {
            transientChildren = new EObjectContainmentEList(Node.class, this, NotationPackage.VIEW__TRANSIENT_CHILDREN);
        }
        return transientChildren;
    }
d462 22
a483 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d485 10
a494 10
        switch (featureID) {
            case NotationPackage.VIEW__EANNOTATIONS:
                return ((InternalEList)getEAnnotations()).basicAdd(otherEnd, msgs);
            case NotationPackage.VIEW__SOURCE_EDGES:
                return ((InternalEList)getSourceEdges()).basicAdd(otherEnd, msgs);
            case NotationPackage.VIEW__TARGET_EDGES:
                return ((InternalEList)getTargetEdges()).basicAdd(otherEnd, msgs);
        }
        return eDynamicInverseAdd(otherEnd, featureID, msgs);
    }
d497 3
a499 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d501 21
a521 21
        switch (featureID) {
            case NotationPackage.VIEW__EANNOTATIONS:
                return ((InternalEList)getEAnnotations()).basicRemove(otherEnd, msgs);
            case NotationPackage.VIEW__SOURCE_EDGES:
                return ((InternalEList)getSourceEdges()).basicRemove(otherEnd, msgs);
            case NotationPackage.VIEW__TARGET_EDGES:
                return ((InternalEList)getTargetEdges()).basicRemove(otherEnd, msgs);
            case NotationPackage.VIEW__PERSISTED_CHILDREN:
                return ((InternalEList)getPersistedChildren()).basicRemove(otherEnd, msgs);
            case NotationPackage.VIEW__STYLES:
                return ((InternalEList)getStyles()).basicRemove(otherEnd, msgs);
            case NotationPackage.VIEW__TRANSIENT_CHILDREN:
                return ((InternalEList)getTransientChildren()).basicRemove(otherEnd, msgs);
        }
        return eDynamicInverseRemove(otherEnd, featureID, msgs);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d523 33
a555 33
        switch (featureID) {
            case NotationPackage.VIEW__EANNOTATIONS:
                return getEAnnotations();
            case NotationPackage.VIEW__VISIBLE:
                return isVisible() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.VIEW__TYPE:
                return getType();
            case NotationPackage.VIEW__MUTABLE:
                return isMutable() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.VIEW__SOURCE_EDGES:
                return getSourceEdges();
            case NotationPackage.VIEW__TARGET_EDGES:
                return getTargetEdges();
            case NotationPackage.VIEW__PERSISTED_CHILDREN:
                return getPersistedChildren();
            case NotationPackage.VIEW__STYLES:
                return getStyles();
            case NotationPackage.VIEW__ELEMENT:
                if (resolve) return getElement();
                return basicGetElement();
            case NotationPackage.VIEW__DIAGRAM:
                if (resolve) return getDiagram();
                return basicGetDiagram();
            case NotationPackage.VIEW__TRANSIENT_CHILDREN:
                return getTransientChildren();
        }
        return eDynamicGet(featureID, resolve, coreType);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d557 45
a601 45
        switch (featureID) {
            case NotationPackage.VIEW__EANNOTATIONS:
                getEAnnotations().clear();
                getEAnnotations().addAll((Collection)newValue);
                return;
            case NotationPackage.VIEW__VISIBLE:
                setVisible(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.VIEW__TYPE:
                setType((String)newValue);
                return;
            case NotationPackage.VIEW__MUTABLE:
                setMutable(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.VIEW__SOURCE_EDGES:
                getSourceEdges().clear();
                getSourceEdges().addAll((Collection)newValue);
                return;
            case NotationPackage.VIEW__TARGET_EDGES:
                getTargetEdges().clear();
                getTargetEdges().addAll((Collection)newValue);
                return;
            case NotationPackage.VIEW__PERSISTED_CHILDREN:
                getPersistedChildren().clear();
                getPersistedChildren().addAll((Collection)newValue);
                return;
            case NotationPackage.VIEW__STYLES:
                getStyles().clear();
                getStyles().addAll((Collection)newValue);
                return;
            case NotationPackage.VIEW__ELEMENT:
                setElement((EObject)newValue);
                return;
            case NotationPackage.VIEW__TRANSIENT_CHILDREN:
                getTransientChildren().clear();
                getTransientChildren().addAll((Collection)newValue);
                return;
        }
        eDynamicSet(featureID, newValue);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d603 39
a641 39
        switch (featureID) {
            case NotationPackage.VIEW__EANNOTATIONS:
                getEAnnotations().clear();
                return;
            case NotationPackage.VIEW__VISIBLE:
                setVisible(VISIBLE_EDEFAULT);
                return;
            case NotationPackage.VIEW__TYPE:
                setType(TYPE_EDEFAULT);
                return;
            case NotationPackage.VIEW__MUTABLE:
                setMutable(MUTABLE_EDEFAULT);
                return;
            case NotationPackage.VIEW__SOURCE_EDGES:
                getSourceEdges().clear();
                return;
            case NotationPackage.VIEW__TARGET_EDGES:
                getTargetEdges().clear();
                return;
            case NotationPackage.VIEW__PERSISTED_CHILDREN:
                getPersistedChildren().clear();
                return;
            case NotationPackage.VIEW__STYLES:
                getStyles().clear();
                return;
            case NotationPackage.VIEW__ELEMENT:
                unsetElement();
                return;
            case NotationPackage.VIEW__TRANSIENT_CHILDREN:
                getTransientChildren().clear();
                return;
        }
        eDynamicUnset(featureID);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d643 31
a673 31
        switch (featureID) {
            case NotationPackage.VIEW__EANNOTATIONS:
                return eAnnotations != null && !eAnnotations.isEmpty();
            case NotationPackage.VIEW__VISIBLE:
                return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
            case NotationPackage.VIEW__TYPE:
                return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
            case NotationPackage.VIEW__MUTABLE:
                return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
            case NotationPackage.VIEW__SOURCE_EDGES:
                return sourceEdges != null && !sourceEdges.isEmpty();
            case NotationPackage.VIEW__TARGET_EDGES:
                return targetEdges != null && !targetEdges.isEmpty();
            case NotationPackage.VIEW__PERSISTED_CHILDREN:
                return persistedChildren != null && !persistedChildren.isEmpty();
            case NotationPackage.VIEW__STYLES:
                return styles != null && !styles.isEmpty();
            case NotationPackage.VIEW__ELEMENT:
                return isSetElement();
            case NotationPackage.VIEW__DIAGRAM:
                return basicGetDiagram() != null;
            case NotationPackage.VIEW__TRANSIENT_CHILDREN:
                return transientChildren != null && !transientChildren.isEmpty();
        }
        return eDynamicIsSet(featureID);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d675 1
a675 1
        if (eIsProxy()) return super.toString();
d677 10
a686 10
        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (visible: "); //$NON-NLS-1$
        result.append((eFlags & VISIBLE_EFLAG) != 0);
        result.append(", type: "); //$NON-NLS-1$
        result.append(type);
        result.append(", mutable: "); //$NON-NLS-1$
        result.append((eFlags & MUTABLE_EFLAG) != 0);
        result.append(')');
        return result.toString();
    }
@


1.4
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d22 1
d42 1
a42 2
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>View</b></em>'.
d47 10
a56 10
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#isVisible <em>Visible</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getType <em>Type</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#isMutable <em>Mutable</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getSourceEdges <em>Source Edges</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getTargetEdges <em>Target Edges</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getPersistedChildren <em>Persisted Children</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getStyles <em>Styles</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getElement <em>Element</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getDiagram <em>Diagram</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getTransientChildren <em>Transient Children</em>}</li>
d59 1
a59 1
 *
d65 4
a68 1
public abstract class ViewImpl extends EModelElementImpl implements View {
d71 1
a71 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d76 1
a76 1
	protected static final boolean VISIBLE_EDEFAULT = true;
d80 1
a80 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d85 1
a85 1
	protected static final int VISIBLE_EFLAG = 1 << 8;
d89 1
a89 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d94 1
a94 1
	protected static final String TYPE_EDEFAULT = ""; //$NON-NLS-1$
d98 1
a98 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d103 1
a103 1
	protected String type = TYPE_EDEFAULT;
d107 1
a107 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d112 1
a112 1
	protected static final boolean MUTABLE_EDEFAULT = false;
d116 1
a116 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d121 1
a121 1
	protected static final int MUTABLE_EFLAG = 1 << 9;
d125 1
a125 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d130 1
a130 1
	protected EList sourceEdges = null;
d134 1
a134 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d139 1
a139 1
	protected EList targetEdges = null;
d143 1
a143 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d148 1
a148 1
	protected EList persistedChildren = null;
d152 1
a152 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d157 1
a157 1
	protected EList styles = null;
d161 1
a161 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d166 1
a166 1
	protected EObject element = null;
d169 3
a171 3
     * The flag representing whether the Element reference has been set.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d175 1
a175 1
	protected static final int ELEMENT_ESETFLAG = 1 << 10;
d179 1
a179 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d184 7
a190 3
	protected EList transientChildren = null;
	
	private EContentsEList allChildren = null;
d193 1
a193 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d196 1
a196 1
	protected ViewImpl() {
d202 1
a202 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d205 1
a205 1
	protected EClass eStaticClass() {
d210 1
a210 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d213 1
a213 1
	public boolean isVisible() {
d218 1
a218 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d221 1
a221 1
	public void setVisible(boolean newVisible) {
d229 1
a229 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d232 1
a232 1
	public String getType() {
d236 13
a248 12
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public void setType(String newType) {
		String oldType = type;
		type = (newType == null)?null:newType.intern();
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.VIEW__TYPE, oldType, type));
	}

d251 1
a251 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d254 1
a254 1
	public boolean isMutable() {
d259 1
a259 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d262 1
a262 1
	public void setMutable(boolean newMutable) {
d270 1
a270 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d273 1
a273 1
	public EList getSourceEdges() {
d281 1
a281 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d284 1
a284 1
	public EList getTargetEdges() {
d292 1
a292 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d295 1
a295 1
	public EList getPersistedChildren() {
d302 9
a310 13
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public EList getChildren() {
		if (allChildren == null){
			allChildren =  new EContentsEList(this, 
				new EStructuralFeature[] {
					NotationPackage.eINSTANCE.getView_PersistedChildren(),
					NotationPackage.eINSTANCE.getView_TransientChildren()});
		}
		return allChildren;
	}
d313 1
a313 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d316 1
a316 1
	public EList getStyles() {
d323 25
a347 24
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EObject getElement() {
		if (!isSetElement()){
			EObject container = eContainer();
			if (container instanceof View){
				View view = (View)container;
				element = view.getElement();
			}
		}
		if (element != null && element.eIsProxy()) {
			EObject oldElement = element;
			element = eResolveProxy((InternalEObject)element);
			if (element != oldElement) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, NotationPackage.VIEW__ELEMENT, oldElement, element));
			}
		}
		
		return element;
	}
d350 1
a350 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d353 1
a353 1
	public EObject basicGetElement() {
d358 1
a358 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d361 1
a361 1
	public void setElement(EObject newElement) {
d371 1
a371 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d374 1
a374 1
	public void unsetElement() {
d384 1
a384 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d387 1
a387 1
	public boolean isSetElement() {
d392 1
a392 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d395 1
a395 1
	public Diagram getDiagram() {
d400 11
a410 10
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public Diagram basicGetDiagram() {
		for (EObject parent = this; parent != null; parent = parent.eContainer())
			if (NotationPackage.eINSTANCE.getDiagram().isSuperTypeOf(parent.eClass()))
				return (Diagram) parent;
		return null;
	}
d413 1
a413 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d416 1
a416 1
	public EList getTransientChildren() {
d423 14
a436 34
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public Style getStyle(EClass eClass) {
		if (eClass != null && eIsSet(NotationPackage.eINSTANCE.getView_Styles())) {
			for (Iterator i = getStyles().iterator(); i.hasNext();) {
				Style style = (Style) i.next();
				if (style.eClass() == eClass || eClass.isInstance(style))
					return style;
			}
		}
		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public Node createChild(EClass eClass) {
		Node newChild = (Node) eClass.getEPackage().getEFactoryInstance().create(eClass);
		getPersistedChildren().add(newChild);
		return newChild;
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public Style createStyle(EClass eClass) {
		Style newStyle = (Style) eClass.getEPackage().getEFactoryInstance().create(eClass);
		getStyles().add(newStyle);
		return newStyle;
	}
d439 21
a459 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d464 2
d471 1
a471 1
        return super.eInverseAdd(otherEnd, featureID, msgs);
d475 1
a475 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d480 2
d493 1
a493 1
        return super.eInverseRemove(otherEnd, featureID, msgs);
d497 1
a497 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d502 2
d527 1
a527 1
        return super.eGet(featureID, resolve, coreType);
d531 1
a531 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d536 4
d573 1
a573 1
        super.eSet(featureID, newValue);
d577 1
a577 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d582 3
d613 1
a613 1
        super.eUnset(featureID);
d617 1
a617 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d622 2
d645 1
a645 1
        return super.eIsSet(featureID);
d649 1
a649 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d652 1
a652 1
	public String toString() {
d666 99
a764 105
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public void persistChildren(){
		if (transientChildren!=null &&
			transientChildren.size()>0){
			getPersistedChildren().addAll(transientChildren);
		}
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public void insertChild(View child){
		persistChildren();
		getPersistedChildren().add(child);
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public void insertChildAt(View child, int index){
		persistChildren();
		if (getPersistedChildren().size()>=index){
			getPersistedChildren().add(index,child);
		}
	}
	
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public void insertChild(View child,boolean persisted){
		List children = null;
		if (persisted)
			children = getPersistedChildren();
		else
			children = getTransientChildren();
		children.add(child);	
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public void removeChild(View child){
		if (child.eContainingFeature() == 
			NotationPackage.eINSTANCE.getView_TransientChildren()){
			if (transientChildren!=null && 
			    transientChildren.size()>0){
				transientChildren.remove(child);
			}
		} else if (child.eContainingFeature() == 
			NotationPackage.eINSTANCE.getView_PersistedChildren()){
			if (persistedChildren!=null && 
				persistedChildren.size()>0){
				persistedChildren.remove(child);
			}
		}
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public void persist(){
		EStructuralFeature eContaingFeature = eContainingFeature();
		if (eContainer!=null &&
			eContaingFeature!=null &&
			eContainer instanceof View &&
			eContaingFeature.isTransient()){
			View vContainer = (View)eContainer;
			vContainer.persistChildren();
		}
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public EList getVisibleChildren() {
		List _children = new ArrayList();	
		if (persistedChildren!=null &&
			persistedChildren.size()>0){
			for (Iterator iter = getPersistedChildren().iterator(); iter.hasNext();) {
				View view = (View) iter.next();
				if (view.isVisible())
					_children.add(view);
				}
		}
		
		if (transientChildren!=null&&
			transientChildren.size()>0){
			for (Iterator iter = getTransientChildren().iterator(); iter.hasNext();) {
				View view = (View) iter.next();
				if (view.isVisible())
					_children.add(view);
				}
		}
		return new BasicEList.UnmodifiableEList(_children.size(), _children.toArray());
	}
d766 1
a766 1
} //ViewImpl
@


1.4.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@a21 1
import org.eclipse.emf.common.util.ECollections;
d41 2
a42 1
 * <!-- begin-user-doc --> An implementation of the model object '<em><b>View</b></em>'.
d47 10
a56 10
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#isVisible <em>Visible</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getType <em>Type</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#isMutable <em>Mutable</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getSourceEdges <em>Source Edges</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getTargetEdges <em>Target Edges</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getPersistedChildren <em>Persisted Children</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getStyles <em>Styles</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getElement <em>Element</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getDiagram <em>Diagram</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getTransientChildren <em>Transient Children</em>}</li>
d59 1
a59 1
 * 
d65 1
a65 4
public abstract class ViewImpl
    extends EModelElementImpl
    implements View {

d68 2
a69 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d74 1
a74 1
    protected static final boolean VISIBLE_EDEFAULT = true;
d78 2
a79 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d84 1
a84 1
    protected static final int VISIBLE_EFLAG = 1 << 8;
d88 2
a89 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d94 1
a94 1
    protected static final String TYPE_EDEFAULT = ""; //$NON-NLS-1$
d98 2
a99 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d104 1
a104 1
    protected String type = TYPE_EDEFAULT;
d108 2
a109 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d114 1
a114 1
    protected static final boolean MUTABLE_EDEFAULT = false;
d118 2
a119 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d124 1
a124 1
    protected static final int MUTABLE_EFLAG = 1 << 9;
d128 2
a129 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d134 1
a134 1
    protected EList sourceEdges = null;
d138 2
a139 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d144 1
a144 1
    protected EList targetEdges = null;
d148 2
a149 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d154 1
a154 1
    protected EList persistedChildren = null;
d158 2
a159 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d164 1
a164 1
    protected EList styles = null;
d168 2
a169 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d174 1
a174 1
    protected EObject element = null;
d177 3
a179 3
     * The flag representing whether the Element reference has been set. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
d183 1
a183 1
    protected static final int ELEMENT_ESETFLAG = 1 << 10;
d187 2
a188 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d193 3
a195 7
    protected EList transientChildren = null;

    private EContentsEList allChildren = null;

    protected static final EStructuralFeature[] childrenFeatures = new EStructuralFeature[] {
        NotationPackage.Literals.VIEW__PERSISTED_CHILDREN,
        NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN};
d198 2
a199 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d202 1
a202 1
    protected ViewImpl() {
d208 2
a209 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d212 1
a212 1
    protected EClass eStaticClass() {
d217 2
a218 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d221 1
a221 1
    public boolean isVisible() {
d226 2
a227 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d230 1
a230 1
    public void setVisible(boolean newVisible) {
d238 2
a239 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d242 1
a242 1
    public String getType() {
d246 12
a257 13
    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @@generated NOT
     */
    public void setType(String newType) {
        String oldType = type;
        type = (newType == null) ? null
            : newType.intern();
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET,
                NotationPackage.VIEW__TYPE, oldType, type));
    }
d260 2
a261 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d264 1
a264 1
    public boolean isMutable() {
d269 2
a270 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d273 1
a273 1
    public void setMutable(boolean newMutable) {
d281 2
a282 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d285 1
a285 1
    public EList getSourceEdges() {
d293 2
a294 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d297 1
a297 1
    public EList getTargetEdges() {
d305 2
a306 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d309 1
a309 1
    public EList getPersistedChildren() {
d316 13
a328 9
    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public EList getChildren() {
        if (allChildren == null) {
            allChildren = new EContentsEList(this, childrenFeatures);
        }
        return allChildren;
    }
d331 2
a332 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d335 1
a335 1
    public EList getStyles() {
d342 24
a365 25
    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @@generated NOT
     */
    public EObject getElement() {
        if (!isSetElement()) {
            EObject container = eContainer();
            if (container instanceof View) {
                View view = (View) container;
                element = view.getElement();
            }
        }
        if (element != null && element.eIsProxy()) {
            EObject oldElement = element;
            element = eResolveProxy((InternalEObject) element);
            if (element != oldElement) {
                if (eNotificationRequired())
                    eNotify(new ENotificationImpl(this, Notification.RESOLVE,
                        NotationPackage.VIEW__ELEMENT, oldElement, element));
            }
        }

        return element;
    }
d368 2
a369 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d372 1
a372 1
    public EObject basicGetElement() {
d377 2
a378 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d381 1
a381 1
    public void setElement(EObject newElement) {
d391 2
a392 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d395 1
a395 1
    public void unsetElement() {
d405 2
a406 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d409 1
a409 1
    public boolean isSetElement() {
d414 2
a415 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d418 1
a418 1
    public Diagram getDiagram() {
d423 10
a432 11
    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public Diagram basicGetDiagram() {
        for (EObject parent = this; parent != null; parent = parent
            .eContainer())
            if (NotationPackage.Literals.DIAGRAM.isSuperTypeOf(
                parent.eClass()))
                return (Diagram) parent;
        return null;
    }
d435 2
a436 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d439 1
a439 1
    public EList getTransientChildren() {
d446 34
a479 14
    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public Style getStyle(EClass eClass) {
        if (eClass != null
            && eIsSet(NotationPackage.Literals.VIEW__STYLES)) {
            for (Iterator i = getStyles().iterator(); i.hasNext();) {
                Style style = (Style) i.next();
                if (style.eClass() == eClass || eClass.isInstance(style))
                    return style;
            }
        }
        return null;
    }
d482 2
a483 21
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public Node createChild(EClass eClass) {
        Node newChild = (Node) eClass.getEPackage().getEFactoryInstance()
            .create(eClass);
        getPersistedChildren().add(newChild);
        return newChild;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public Style createStyle(EClass eClass) {
        Style newStyle = (Style) eClass.getEPackage().getEFactoryInstance()
            .create(eClass);
        getStyles().add(newStyle);
        return newStyle;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
a487 2
            case NotationPackage.VIEW__EANNOTATIONS:
                return ((InternalEList)getEAnnotations()).basicAdd(otherEnd, msgs);
d493 1
a493 1
        return eDynamicInverseAdd(otherEnd, featureID, msgs);
d497 2
a498 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
a502 2
            case NotationPackage.VIEW__EANNOTATIONS:
                return ((InternalEList)getEAnnotations()).basicRemove(otherEnd, msgs);
d514 1
a514 1
        return eDynamicInverseRemove(otherEnd, featureID, msgs);
d518 2
a519 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
a523 2
            case NotationPackage.VIEW__EANNOTATIONS:
                return getEAnnotations();
d547 1
a547 1
        return eDynamicGet(featureID, resolve, coreType);
d551 2
a552 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
a556 4
            case NotationPackage.VIEW__EANNOTATIONS:
                getEAnnotations().clear();
                getEAnnotations().addAll((Collection)newValue);
                return;
d590 1
a590 1
        eDynamicSet(featureID, newValue);
d594 2
a595 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
a599 3
            case NotationPackage.VIEW__EANNOTATIONS:
                getEAnnotations().clear();
                return;
d628 1
a628 1
        eDynamicUnset(featureID);
d632 2
a633 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
a637 2
            case NotationPackage.VIEW__EANNOTATIONS:
                return eAnnotations != null && !eAnnotations.isEmpty();
d659 1
a659 1
        return eDynamicIsSet(featureID);
d663 2
a664 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d667 1
a667 1
    public String toString() {
d681 105
a785 99
    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void persistChildren() {
        if (transientChildren != null && transientChildren.size() > 0) {
            getPersistedChildren().addAll(transientChildren);
        }
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void insertChild(View child) {
        persistChildren();
        getPersistedChildren().add(child);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void insertChildAt(View child, int index) {
        persistChildren();
        if (getPersistedChildren().size() >= index) {
            getPersistedChildren().add(index, child);
        }
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void insertChild(View child, boolean persisted) {
        List children = null;
        if (persisted)
            children = getPersistedChildren();
        else
            children = getTransientChildren();
        children.add(child);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void removeChild(View child) {
        if (child.eContainingFeature() == NotationPackage.Literals
            .VIEW__TRANSIENT_CHILDREN) {
            if (transientChildren != null && transientChildren.size() > 0) {
                transientChildren.remove(child);
            }
        } else if (child.eContainingFeature() == NotationPackage.Literals
            .VIEW__PERSISTED_CHILDREN) {
            if (persistedChildren != null && persistedChildren.size() > 0) {
                persistedChildren.remove(child);
            }
        }
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void persist() {
        EStructuralFeature eContaingFeature = eContainingFeature();
        if (eContainer != null && eContaingFeature != null
            && eContainer instanceof View && eContaingFeature.isTransient()) {
            View vContainer = (View) eContainer;
            vContainer.persistChildren();
        }
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public EList getVisibleChildren() {
        if ((persistedChildren == null || persistedChildren.isEmpty())
            && (transientChildren == null || transientChildren.isEmpty())) {
            return ECollections.EMPTY_ELIST;
        }

        List _children = new ArrayList();
        if (persistedChildren != null && persistedChildren.size() > 0) {
            for (Iterator iter = persistedChildren.iterator(); iter
                .hasNext();) {
                View view = (View) iter.next();
                if (view.isVisible())
                    _children.add(view);
            }
        }

        if (transientChildren != null && transientChildren.size() > 0) {
            for (Iterator iter = transientChildren.iterator(); iter
                .hasNext();) {
                View view = (View) iter.next();
                if (view.isVisible())
                    _children.add(view);
            }
        }       
        
        return new BasicEList.UnmodifiableEList(_children.size(), _children
            .toArray());
    }
d787 1
a787 1
} // ViewImpl
@


1.4.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.3
log
@111894  gmf-head mmostafa 051201 Improve memory consumption of opened notation diagram
@
text
@a32 1

d66 8
a73 8
	/**
	 * The default value of the '{@@link #isVisible() <em>Visible</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isVisible()
	 * @@generated
	 * @@ordered
	 */
d76 8
a83 8
	/**
	 * The flag representing the value of the '{@@link #isVisible() <em>Visible</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isVisible()
	 * @@generated
	 * @@ordered
	 */
d86 8
a93 8
	/**
	 * The default value of the '{@@link #getType() <em>Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getType()
	 * @@generated
	 * @@ordered
	 */
d96 8
a103 8
	/**
	 * The cached value of the '{@@link #getType() <em>Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getType()
	 * @@generated
	 * @@ordered
	 */
d106 8
a113 8
	/**
	 * The default value of the '{@@link #isMutable() <em>Mutable</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isMutable()
	 * @@generated
	 * @@ordered
	 */
d116 8
a123 8
	/**
	 * The flag representing the value of the '{@@link #isMutable() <em>Mutable</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isMutable()
	 * @@generated
	 * @@ordered
	 */
d126 8
a133 8
	/**
	 * The cached value of the '{@@link #getSourceEdges() <em>Source Edges</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSourceEdges()
	 * @@generated
	 * @@ordered
	 */
d136 8
a143 8
	/**
	 * The cached value of the '{@@link #getTargetEdges() <em>Target Edges</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTargetEdges()
	 * @@generated
	 * @@ordered
	 */
d146 8
a153 8
	/**
	 * The cached value of the '{@@link #getPersistedChildren() <em>Persisted Children</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getPersistedChildren()
	 * @@generated
	 * @@ordered
	 */
d156 8
a163 8
	/**
	 * The cached value of the '{@@link #getStyles() <em>Styles</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getStyles()
	 * @@generated
	 * @@ordered
	 */
d166 8
a173 8
	/**
	 * The cached value of the '{@@link #getElement() <em>Element</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getElement()
	 * @@generated
	 * @@ordered
	 */
d176 7
a182 7
	/**
	 * The flag representing whether the Element reference has been set.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
d185 8
a192 8
	/**
	 * The cached value of the '{@@link #getTransientChildren() <em>Transient Children</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTransientChildren()
	 * @@generated
	 * @@ordered
	 */
d197 2
a198 2
	/**
	 * <!-- begin-user-doc -->
d200 2
a201 2
	 * @@generated
	 */
d203 3
a205 3
		super();
		eFlags |= VISIBLE_EFLAG;
	}
d207 2
a208 2
	/**
	 * <!-- begin-user-doc -->
d210 2
a211 2
	 * @@generated
	 */
d213 2
a214 2
		return NotationPackage.eINSTANCE.getView();
	}
d216 2
a217 2
	/**
	 * <!-- begin-user-doc -->
d219 2
a220 2
	 * @@generated
	 */
d222 2
a223 2
		return (eFlags & VISIBLE_EFLAG) != 0;
	}
d225 2
a226 2
	/**
	 * <!-- begin-user-doc -->
d228 2
a229 2
	 * @@generated
	 */
d231 5
a235 5
		boolean oldVisible = (eFlags & VISIBLE_EFLAG) != 0;
		if (newVisible) eFlags |= VISIBLE_EFLAG; else eFlags &= ~VISIBLE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.VIEW__VISIBLE, oldVisible, newVisible));
	}
d237 2
a238 2
	/**
	 * <!-- begin-user-doc -->
d240 2
a241 2
	 * @@generated
	 */
d243 2
a244 2
		return type;
	}
d259 2
a260 2
	/**
	 * <!-- begin-user-doc -->
d262 2
a263 2
	 * @@generated
	 */
d265 2
a266 2
		return (eFlags & MUTABLE_EFLAG) != 0;
	}
d268 2
a269 2
	/**
	 * <!-- begin-user-doc -->
d271 2
a272 2
	 * @@generated
	 */
d274 5
a278 5
		boolean oldMutable = (eFlags & MUTABLE_EFLAG) != 0;
		if (newMutable) eFlags |= MUTABLE_EFLAG; else eFlags &= ~MUTABLE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.VIEW__MUTABLE, oldMutable, newMutable));
	}
d280 2
a281 2
	/**
	 * <!-- begin-user-doc -->
d283 2
a284 2
	 * @@generated
	 */
d286 5
a290 5
		if (sourceEdges == null) {
			sourceEdges = new EObjectWithInverseEList(Edge.class, this, NotationPackage.VIEW__SOURCE_EDGES, NotationPackage.EDGE__SOURCE);
		}
		return sourceEdges;
	}
d292 2
a293 2
	/**
	 * <!-- begin-user-doc -->
d295 2
a296 2
	 * @@generated
	 */
d298 5
a302 5
		if (targetEdges == null) {
			targetEdges = new EObjectWithInverseEList(Edge.class, this, NotationPackage.VIEW__TARGET_EDGES, NotationPackage.EDGE__TARGET);
		}
		return targetEdges;
	}
d304 2
a305 2
	/**
	 * <!-- begin-user-doc -->
d307 2
a308 2
	 * @@generated
	 */
d310 5
a314 5
		if (persistedChildren == null) {
			persistedChildren = new EObjectContainmentEList(Node.class, this, NotationPackage.VIEW__PERSISTED_CHILDREN);
		}
		return persistedChildren;
	}
d330 2
a331 2
	/**
	 * <!-- begin-user-doc -->
d333 2
a334 2
	 * @@generated
	 */
d336 5
a340 5
		if (styles == null) {
			styles = new EObjectContainmentEList(Style.class, this, NotationPackage.VIEW__STYLES);
		}
		return styles;
	}
d367 2
a368 2
	/**
	 * <!-- begin-user-doc -->
d370 2
a371 2
	 * @@generated
	 */
d373 2
a374 2
		return element;
	}
d376 2
a377 2
	/**
	 * <!-- begin-user-doc -->
d379 2
a380 2
	 * @@generated
	 */
d382 7
a388 7
		EObject oldElement = element;
		element = newElement;
		boolean oldElementESet = (eFlags & ELEMENT_ESETFLAG) != 0;
		eFlags |= ELEMENT_ESETFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.VIEW__ELEMENT, oldElement, element, !oldElementESet));
	}
d390 2
a391 2
	/**
	 * <!-- begin-user-doc -->
d393 2
a394 2
	 * @@generated
	 */
d396 7
a402 7
		EObject oldElement = element;
		boolean oldElementESet = (eFlags & ELEMENT_ESETFLAG) != 0;
		element = null;
		eFlags &= ~ELEMENT_ESETFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.UNSET, NotationPackage.VIEW__ELEMENT, oldElement, null, oldElementESet));
	}
d404 2
a405 2
	/**
	 * <!-- begin-user-doc -->
d407 2
a408 2
	 * @@generated
	 */
d410 2
a411 2
		return (eFlags & ELEMENT_ESETFLAG) != 0;
	}
d413 2
a414 2
	/**
	 * <!-- begin-user-doc -->
d416 2
a417 2
	 * @@generated
	 */
d419 3
a421 3
		Diagram diagram = basicGetDiagram();
		return diagram == null ? null : (Diagram)eResolveProxy((InternalEObject)diagram);
	}
d429 1
a429 1
			if (parent.eClass() == NotationPackage.eINSTANCE.getDiagram())
d434 2
a435 2
	/**
	 * <!-- begin-user-doc -->
d437 2
a438 2
	 * @@generated
	 */
d440 5
a444 5
		if (transientChildren == null) {
			transientChildren = new EObjectContainmentEList(Node.class, this, NotationPackage.VIEW__TRANSIENT_CHILDREN);
		}
		return transientChildren;
	}
d481 180
a660 205
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case NotationPackage.VIEW__EANNOTATIONS:
					return ((InternalEList)getEAnnotations()).basicAdd(otherEnd, msgs);
				case NotationPackage.VIEW__SOURCE_EDGES:
					return ((InternalEList)getSourceEdges()).basicAdd(otherEnd, msgs);
				case NotationPackage.VIEW__TARGET_EDGES:
					return ((InternalEList)getTargetEdges()).basicAdd(otherEnd, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
		}
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case NotationPackage.VIEW__EANNOTATIONS:
					return ((InternalEList)getEAnnotations()).basicRemove(otherEnd, msgs);
				case NotationPackage.VIEW__SOURCE_EDGES:
					return ((InternalEList)getSourceEdges()).basicRemove(otherEnd, msgs);
				case NotationPackage.VIEW__TARGET_EDGES:
					return ((InternalEList)getTargetEdges()).basicRemove(otherEnd, msgs);
				case NotationPackage.VIEW__PERSISTED_CHILDREN:
					return ((InternalEList)getPersistedChildren()).basicRemove(otherEnd, msgs);
				case NotationPackage.VIEW__STYLES:
					return ((InternalEList)getStyles()).basicRemove(otherEnd, msgs);
				case NotationPackage.VIEW__TRANSIENT_CHILDREN:
					return ((InternalEList)getTransientChildren()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
		}
		return eBasicSetContainer(null, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.VIEW__EANNOTATIONS:
				return getEAnnotations();
			case NotationPackage.VIEW__VISIBLE:
				return isVisible() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.VIEW__TYPE:
				return getType();
			case NotationPackage.VIEW__MUTABLE:
				return isMutable() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.VIEW__SOURCE_EDGES:
				return getSourceEdges();
			case NotationPackage.VIEW__TARGET_EDGES:
				return getTargetEdges();
			case NotationPackage.VIEW__PERSISTED_CHILDREN:
				return getPersistedChildren();
			case NotationPackage.VIEW__STYLES:
				return getStyles();
			case NotationPackage.VIEW__ELEMENT:
				if (resolve) return getElement();
				return basicGetElement();
			case NotationPackage.VIEW__DIAGRAM:
				if (resolve) return getDiagram();
				return basicGetDiagram();
			case NotationPackage.VIEW__TRANSIENT_CHILDREN:
				return getTransientChildren();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.VIEW__EANNOTATIONS:
				getEAnnotations().clear();
				getEAnnotations().addAll((Collection)newValue);
				return;
			case NotationPackage.VIEW__VISIBLE:
				setVisible(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.VIEW__TYPE:
				setType((String)newValue);
				return;
			case NotationPackage.VIEW__MUTABLE:
				setMutable(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.VIEW__SOURCE_EDGES:
				getSourceEdges().clear();
				getSourceEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.VIEW__TARGET_EDGES:
				getTargetEdges().clear();
				getTargetEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.VIEW__PERSISTED_CHILDREN:
				getPersistedChildren().clear();
				getPersistedChildren().addAll((Collection)newValue);
				return;
			case NotationPackage.VIEW__STYLES:
				getStyles().clear();
				getStyles().addAll((Collection)newValue);
				return;
			case NotationPackage.VIEW__ELEMENT:
				setElement((EObject)newValue);
				return;
			case NotationPackage.VIEW__TRANSIENT_CHILDREN:
				getTransientChildren().clear();
				getTransientChildren().addAll((Collection)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.VIEW__EANNOTATIONS:
				getEAnnotations().clear();
				return;
			case NotationPackage.VIEW__VISIBLE:
				setVisible(VISIBLE_EDEFAULT);
				return;
			case NotationPackage.VIEW__TYPE:
				setType(TYPE_EDEFAULT);
				return;
			case NotationPackage.VIEW__MUTABLE:
				setMutable(MUTABLE_EDEFAULT);
				return;
			case NotationPackage.VIEW__SOURCE_EDGES:
				getSourceEdges().clear();
				return;
			case NotationPackage.VIEW__TARGET_EDGES:
				getTargetEdges().clear();
				return;
			case NotationPackage.VIEW__PERSISTED_CHILDREN:
				getPersistedChildren().clear();
				return;
			case NotationPackage.VIEW__STYLES:
				getStyles().clear();
				return;
			case NotationPackage.VIEW__ELEMENT:
				unsetElement();
				return;
			case NotationPackage.VIEW__TRANSIENT_CHILDREN:
				getTransientChildren().clear();
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.VIEW__EANNOTATIONS:
				return eAnnotations != null && !eAnnotations.isEmpty();
			case NotationPackage.VIEW__VISIBLE:
				return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
			case NotationPackage.VIEW__TYPE:
				return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
			case NotationPackage.VIEW__MUTABLE:
				return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
			case NotationPackage.VIEW__SOURCE_EDGES:
				return sourceEdges != null && !sourceEdges.isEmpty();
			case NotationPackage.VIEW__TARGET_EDGES:
				return targetEdges != null && !targetEdges.isEmpty();
			case NotationPackage.VIEW__PERSISTED_CHILDREN:
				return persistedChildren != null && !persistedChildren.isEmpty();
			case NotationPackage.VIEW__STYLES:
				return styles != null && !styles.isEmpty();
			case NotationPackage.VIEW__ELEMENT:
				return isSetElement();
			case NotationPackage.VIEW__DIAGRAM:
				return basicGetDiagram() != null;
			case NotationPackage.VIEW__TRANSIENT_CHILDREN:
				return transientChildren != null && !transientChildren.isEmpty();
		}
		return eDynamicIsSet(eFeature);
	}
d662 2
a663 2
	/**
	 * <!-- begin-user-doc -->
d665 2
a666 2
	 * @@generated
	 */
d668 1
a668 1
		if (eIsProxy()) return super.toString();
d670 10
a679 10
		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (visible: "); //$NON-NLS-1$
		result.append((eFlags & VISIBLE_EFLAG) != 0);
		result.append(", type: "); //$NON-NLS-1$
		result.append(type);
		result.append(", mutable: "); //$NON-NLS-1$
		result.append((eFlags & MUTABLE_EFLAG) != 0);
		result.append(')');
		return result.toString();
	}
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d29 1
d195 2
d322 5
a326 4
		List children = new ArrayList();	
		if (persistedChildren!=null &&
			persistedChildren.size()>0){
			children.addAll(getPersistedChildren());
d328 1
a328 7
		
		if (transientChildren!=null&&
			transientChildren.size()>0){
			children.addAll(getTransientChildren());
		}
		
		return new BasicEList.UnmodifiableEList(children.size(), children.toArray());
d786 27
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

