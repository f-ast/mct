head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080507-1326:1.7
	v20080503-1740:1.6
	v20080425-1959:1.5
	v20080407-2250:1.5
	v20080407-1545:1.5
	v20080331-1625:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080114-2222:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	3e924820f4604567;

1.6
date	2008.05.03.18.33.02;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	1c13481cafcc4567;

1.5
date	2007.05.17.16.26.50;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71d9464c82444567;

1.4
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.17.20.27.55;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EMap;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EcoreEMap;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.runtime.notation.Guide;
import org.eclipse.gmf.runtime.notation.NotationPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Guide</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.GuideImpl#getPosition <em>Position</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.GuideImpl#getNodeMap <em>Node Map</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy org.eclipse.gmf.runtime.notation.*
 */
public class GuideImpl extends NotationEObjectImpl implements Guide {
    /**
	 * The default value of the '{@@link #getPosition() <em>Position</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getPosition()
	 * @@generated
	 * @@ordered
	 */
	protected static final int POSITION_EDEFAULT = 0;

    /**
	 * The cached value of the '{@@link #getPosition() <em>Position</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getPosition()
	 * @@generated
	 * @@ordered
	 */
	protected int position = POSITION_EDEFAULT;

    /**
	 * The cached value of the '{@@link #getNodeMap() <em>Node Map</em>}' map.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNodeMap()
	 * @@generated
	 * @@ordered
	 */
	protected EMap nodeMap;

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GuideImpl() {
		super();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.GUIDE;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getPosition() {
		return position;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setPosition(int newPosition) {
		int oldPosition = position;
		position = newPosition;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.GUIDE__POSITION, oldPosition, position));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EMap getNodeMap() {
		if (nodeMap == null) {
			nodeMap = new EcoreEMap(NotationPackage.Literals.NODE_ENTRY, NodeEntryImpl.class, this, NotationPackage.GUIDE__NODE_MAP);
		}
		return nodeMap;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case NotationPackage.GUIDE__NODE_MAP:
				return ((InternalEList)getNodeMap()).basicRemove(otherEnd, msgs);
		}
		return eDynamicInverseRemove(otherEnd, featureID, msgs);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.GUIDE__POSITION:
				return new Integer(getPosition());
			case NotationPackage.GUIDE__NODE_MAP:
				if (coreType) return getNodeMap();
				else return getNodeMap().map();
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.GUIDE__POSITION:
				setPosition(((Integer)newValue).intValue());
				return;
			case NotationPackage.GUIDE__NODE_MAP:
				((EStructuralFeature.Setting)getNodeMap()).set(newValue);
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.GUIDE__POSITION:
				setPosition(POSITION_EDEFAULT);
				return;
			case NotationPackage.GUIDE__NODE_MAP:
				getNodeMap().clear();
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.GUIDE__POSITION:
				return position != POSITION_EDEFAULT;
			case NotationPackage.GUIDE__NODE_MAP:
				return nodeMap != null && !nodeMap.isEmpty();
		}
		return eDynamicIsSet(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (position: "); //$NON-NLS-1$
		result.append(position);
		result.append(')');
		return result.toString();
	}

} //GuideImpl
@


1.6
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d43 1
a43 1
public class GuideImpl extends NotationObjectImpl implements Guide {
a144 2
			case NotationPackage.GUIDE__UUID:
				return getUUID();
a160 3
			case NotationPackage.GUIDE__UUID:
				setUUID((byte[])newValue);
				return;
a177 3
			case NotationPackage.GUIDE__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a194 2
			case NotationPackage.GUIDE__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@a20 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d43 1
a43 1
public class GuideImpl extends FlatEObjectImpl implements Guide {
d145 2
d163 3
d183 3
d203 2
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d46 2
a47 2
     * The default value of the '{@@link #getPosition() <em>Position</em>}' attribute.
     * <!-- begin-user-doc -->
d49 4
a52 4
     * @@see #getPosition()
     * @@generated
     * @@ordered
     */
d56 2
a57 2
     * The cached value of the '{@@link #getPosition() <em>Position</em>}' attribute.
     * <!-- begin-user-doc -->
d59 4
a62 4
     * @@see #getPosition()
     * @@generated
     * @@ordered
     */
d66 2
a67 2
     * The cached value of the '{@@link #getNodeMap() <em>Node Map</em>}' map.
     * <!-- begin-user-doc -->
d69 5
a73 5
     * @@see #getNodeMap()
     * @@generated
     * @@ordered
     */
	protected EMap nodeMap = null;
d76 1
a76 1
     * <!-- begin-user-doc -->
d78 2
a79 2
     * @@generated
     */
d81 2
a82 2
        super();
    }
d85 1
a85 1
     * <!-- begin-user-doc -->
d87 2
a88 2
     * @@generated
     */
d90 2
a91 2
        return NotationPackage.Literals.GUIDE;
    }
d94 1
a94 1
     * <!-- begin-user-doc -->
d96 2
a97 2
     * @@generated
     */
d99 2
a100 2
        return position;
    }
d103 1
a103 1
     * <!-- begin-user-doc -->
d105 2
a106 2
     * @@generated
     */
d108 5
a112 5
        int oldPosition = position;
        position = newPosition;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.GUIDE__POSITION, oldPosition, position));
    }
d115 1
a115 1
     * <!-- begin-user-doc -->
d117 2
a118 2
     * @@generated
     */
d120 5
a124 5
        if (nodeMap == null) {
            nodeMap = new EcoreEMap(NotationPackage.Literals.NODE_ENTRY, NodeEntryImpl.class, this, NotationPackage.GUIDE__NODE_MAP);
        }
        return nodeMap;
    }
d127 1
a127 1
     * <!-- begin-user-doc -->
d129 2
a130 2
     * @@generated
     */
d132 6
a137 6
        switch (featureID) {
            case NotationPackage.GUIDE__NODE_MAP:
                return ((InternalEList)getNodeMap()).basicRemove(otherEnd, msgs);
        }
        return eDynamicInverseRemove(otherEnd, featureID, msgs);
    }
d140 1
a140 1
     * <!-- begin-user-doc -->
d142 2
a143 2
     * @@generated
     */
d145 9
a153 9
        switch (featureID) {
            case NotationPackage.GUIDE__POSITION:
                return new Integer(getPosition());
            case NotationPackage.GUIDE__NODE_MAP:
                if (coreType) return getNodeMap();
                else return getNodeMap().map();
        }
        return eDynamicGet(featureID, resolve, coreType);
    }
d156 1
a156 1
     * <!-- begin-user-doc -->
d158 2
a159 2
     * @@generated
     */
d161 10
a170 10
        switch (featureID) {
            case NotationPackage.GUIDE__POSITION:
                setPosition(((Integer)newValue).intValue());
                return;
            case NotationPackage.GUIDE__NODE_MAP:
                ((EStructuralFeature.Setting)getNodeMap()).set(newValue);
                return;
        }
        eDynamicSet(featureID, newValue);
    }
d173 1
a173 1
     * <!-- begin-user-doc -->
d175 2
a176 2
     * @@generated
     */
d178 10
a187 10
        switch (featureID) {
            case NotationPackage.GUIDE__POSITION:
                setPosition(POSITION_EDEFAULT);
                return;
            case NotationPackage.GUIDE__NODE_MAP:
                getNodeMap().clear();
                return;
        }
        eDynamicUnset(featureID);
    }
d190 1
a190 1
     * <!-- begin-user-doc -->
d192 2
a193 2
     * @@generated
     */
d195 8
a202 8
        switch (featureID) {
            case NotationPackage.GUIDE__POSITION:
                return position != POSITION_EDEFAULT;
            case NotationPackage.GUIDE__NODE_MAP:
                return nodeMap != null && !nodeMap.isEmpty();
        }
        return eDynamicIsSet(featureID);
    }
d205 1
a205 1
     * <!-- begin-user-doc -->
d207 2
a208 2
     * @@generated
     */
d210 1
a210 1
        if (eIsProxy()) return super.toString();
d212 6
a217 6
        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (position: "); //$NON-NLS-1$
        result.append(position);
        result.append(')');
        return result.toString();
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d21 1
a21 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
d44 1
a44 1
public class GuideImpl extends EObjectImpl implements Guide {
d136 1
a136 1
        return super.eInverseRemove(otherEnd, featureID, msgs);
d152 1
a152 1
        return super.eGet(featureID, resolve, coreType);
d169 1
a169 1
        super.eSet(featureID, newValue);
d186 1
a186 1
        super.eUnset(featureID);
d201 1
a201 1
        return super.eIsSet(featureID);
@


1.3.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@d21 1
a21 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d44 1
a44 1
public class GuideImpl extends FlatEObjectImpl implements Guide {
d136 1
a136 1
        return eDynamicInverseRemove(otherEnd, featureID, msgs);
d152 1
a152 1
        return eDynamicGet(featureID, resolve, coreType);
d169 1
a169 1
        eDynamicSet(featureID, newValue);
d186 1
a186 1
        eDynamicUnset(featureID);
d201 1
a201 1
        return eDynamicIsSet(featureID);
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a13 2
import java.util.Collection;

a23 1

d45 8
a52 8
	/**
	 * The default value of the '{@@link #getPosition() <em>Position</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getPosition()
	 * @@generated
	 * @@ordered
	 */
d55 8
a62 8
	/**
	 * The cached value of the '{@@link #getPosition() <em>Position</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getPosition()
	 * @@generated
	 * @@ordered
	 */
d65 8
a72 8
	/**
	 * The cached value of the '{@@link #getNodeMap() <em>Node Map</em>}' map.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNodeMap()
	 * @@generated
	 * @@ordered
	 */
d75 2
a76 2
	/**
	 * <!-- begin-user-doc -->
d78 2
a79 2
	 * @@generated
	 */
d81 2
a82 2
		super();
	}
d84 2
a85 2
	/**
	 * <!-- begin-user-doc -->
d87 2
a88 2
	 * @@generated
	 */
d90 2
a91 2
		return NotationPackage.eINSTANCE.getGuide();
	}
d93 2
a94 2
	/**
	 * <!-- begin-user-doc -->
d96 2
a97 2
	 * @@generated
	 */
d99 2
a100 2
		return position;
	}
d102 2
a103 2
	/**
	 * <!-- begin-user-doc -->
d105 2
a106 2
	 * @@generated
	 */
d108 5
a112 5
		int oldPosition = position;
		position = newPosition;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.GUIDE__POSITION, oldPosition, position));
	}
d114 2
a115 2
	/**
	 * <!-- begin-user-doc -->
d117 2
a118 2
	 * @@generated
	 */
d120 83
a202 87
		if (nodeMap == null) {
			nodeMap = new EcoreEMap(NotationPackage.eINSTANCE.getNodeEntry(), NodeEntryImpl.class, this, NotationPackage.GUIDE__NODE_MAP);
		}
		return nodeMap;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case NotationPackage.GUIDE__NODE_MAP:
					return ((InternalEList)getNodeMap()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
		}
		return eBasicSetContainer(null, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.GUIDE__POSITION:
				return new Integer(getPosition());
			case NotationPackage.GUIDE__NODE_MAP:
				return getNodeMap();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.GUIDE__POSITION:
				setPosition(((Integer)newValue).intValue());
				return;
			case NotationPackage.GUIDE__NODE_MAP:
				getNodeMap().clear();
				getNodeMap().addAll((Collection)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.GUIDE__POSITION:
				setPosition(POSITION_EDEFAULT);
				return;
			case NotationPackage.GUIDE__NODE_MAP:
				getNodeMap().clear();
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.GUIDE__POSITION:
				return position != POSITION_EDEFAULT;
			case NotationPackage.GUIDE__NODE_MAP:
				return nodeMap != null && !nodeMap.isEmpty();
		}
		return eDynamicIsSet(eFeature);
	}
d204 2
a205 2
	/**
	 * <!-- begin-user-doc -->
d207 2
a208 2
	 * @@generated
	 */
d210 1
a210 1
		if (eIsProxy()) return super.toString();
d212 6
a217 6
		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (position: "); //$NON-NLS-1$
		result.append(position);
		result.append(')');
		return result.toString();
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

