head	1.12;
access;
symbols
	v20081020-0700:1.12
	v20080722-1827:1.12
	v20080716-1600:1.12
	v20080716-1642:1.12
	R2_1_maintenance:1.12.0.2
	Root_R2_1_maintenance:1.12
	R2_1_0:1.12
	v20080507-1326:1.12
	v20080503-1740:1.10
	v20080425-1959:1.8
	v20080407-2250:1.8
	v20080407-1545:1.8
	v20080331-1625:1.7
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080114-2222:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.12
date	2008.05.07.01.04.47;	author ahunter;	state Exp;
branches;
next	1.11;
commitid	72e74821002b4567;

1.11
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.10;
commitid	3e924820f4604567;

1.10
date	2008.05.03.19.12.26;	author ahunter;	state Exp;
branches;
next	1.9;
commitid	20d0481cb9174567;

1.9
date	2008.05.03.18.33.02;	author ahunter;	state Exp;
branches;
next	1.8;
commitid	1c13481cafcc4567;

1.8
date	2008.04.07.19.37.20;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	2da847fa77ee4567;

1.7
date	2008.03.31.19.40.07;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	a5247f13e174567;

1.6
date	2008.03.28.22.00.02;	author ldamus;	state Exp;
branches;
next	1.5;
commitid	aed47ed6a624567;

1.5
date	2007.05.17.16.26.49;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71d9464c82444567;

1.4
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.17.20.27.55;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.12
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.gmf.runtime.notation.DescriptionStyle;
import org.eclipse.gmf.runtime.notation.FillStyle;
import org.eclipse.gmf.runtime.notation.FontStyle;
import org.eclipse.gmf.runtime.notation.LineStyle;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.ShapeStyle;
import org.eclipse.gmf.runtime.notation.Style;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Shape Style</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ShapeStyleImpl#getFontColor <em>Font Color</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ShapeStyleImpl#getFontName <em>Font Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ShapeStyleImpl#getFontHeight <em>Font Height</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ShapeStyleImpl#isBold <em>Bold</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ShapeStyleImpl#isItalic <em>Italic</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ShapeStyleImpl#isUnderline <em>Underline</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ShapeStyleImpl#isStrikeThrough <em>Strike Through</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ShapeStyleImpl#getDescription <em>Description</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ShapeStyleImpl#getFillColor <em>Fill Color</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ShapeStyleImpl#getLineColor <em>Line Color</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ShapeStyleImpl#getLineWidth <em>Line Width</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy %partners
 */
public class ShapeStyleImpl extends NotationEObjectImpl implements ShapeStyle {
    /**
	 * The default value of the '{@@link #getFontColor() <em>Font Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontColor()
	 * @@generated
	 * @@ordered
	 */
	protected static final int FONT_COLOR_EDEFAULT = 0;

	/**
	 * The cached value of the '{@@link #getFontColor() <em>Font Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontColor()
	 * @@generated
	 * @@ordered
	 */
	protected int fontColor = FONT_COLOR_EDEFAULT;

	/**
	 * The default value of the '{@@link #getFontName() <em>Font Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String FONT_NAME_EDEFAULT = "Tahoma"; //$NON-NLS-1$

	/**
	 * The cached value of the '{@@link #getFontName() <em>Font Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontName()
	 * @@generated
	 * @@ordered
	 */
	protected String fontName = FONT_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getFontHeight() <em>Font Height</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontHeight()
	 * @@generated
	 * @@ordered
	 */
	protected static final int FONT_HEIGHT_EDEFAULT = 9;

	/**
	 * The cached value of the '{@@link #getFontHeight() <em>Font Height</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontHeight()
	 * @@generated
	 * @@ordered
	 */
	protected int fontHeight = FONT_HEIGHT_EDEFAULT;

	/**
	 * The default value of the '{@@link #isBold() <em>Bold</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isBold()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean BOLD_EDEFAULT = false;

	/**
	 * The flag representing the value of the '{@@link #isBold() <em>Bold</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isBold()
	 * @@generated
	 * @@ordered
	 */
	protected static final int BOLD_EFLAG = 1 << 8;

	/**
	 * The default value of the '{@@link #isItalic() <em>Italic</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isItalic()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean ITALIC_EDEFAULT = false;

	/**
	 * The flag representing the value of the '{@@link #isItalic() <em>Italic</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isItalic()
	 * @@generated
	 * @@ordered
	 */
	protected static final int ITALIC_EFLAG = 1 << 9;

	/**
	 * The default value of the '{@@link #isUnderline() <em>Underline</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isUnderline()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean UNDERLINE_EDEFAULT = false;

	/**
	 * The flag representing the value of the '{@@link #isUnderline() <em>Underline</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isUnderline()
	 * @@generated
	 * @@ordered
	 */
	protected static final int UNDERLINE_EFLAG = 1 << 10;

	/**
	 * The default value of the '{@@link #isStrikeThrough() <em>Strike Through</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isStrikeThrough()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean STRIKE_THROUGH_EDEFAULT = false;

	/**
	 * The flag representing the value of the '{@@link #isStrikeThrough() <em>Strike Through</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isStrikeThrough()
	 * @@generated
	 * @@ordered
	 */
	protected static final int STRIKE_THROUGH_EFLAG = 1 << 11;

	/**
	 * The default value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
	protected static final String DESCRIPTION_EDEFAULT = ""; //$NON-NLS-1$

	/**
	 * The cached value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
	protected String description = DESCRIPTION_EDEFAULT;

				/**
	 * The default value of the '{@@link #getFillColor() <em>Fill Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFillColor()
	 * @@generated
	 * @@ordered
	 */
	protected static final int FILL_COLOR_EDEFAULT = 16777215;

    /**
	 * The cached value of the '{@@link #getFillColor() <em>Fill Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFillColor()
	 * @@generated
	 * @@ordered
	 */
	protected int fillColor = FILL_COLOR_EDEFAULT;

    /**
	 * The default value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineColor()
	 * @@generated
	 * @@ordered
	 */
	protected static final int LINE_COLOR_EDEFAULT = 11579568;

    /**
	 * The cached value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineColor()
	 * @@generated
	 * @@ordered
	 */
	protected int lineColor = LINE_COLOR_EDEFAULT;

    /**
	 * The default value of the '{@@link #getLineWidth() <em>Line Width</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineWidth()
	 * @@generated
	 * @@ordered
	 */
	protected static final int LINE_WIDTH_EDEFAULT = -1;

				/**
	 * The cached value of the '{@@link #getLineWidth() <em>Line Width</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineWidth()
	 * @@generated
	 * @@ordered
	 */
	protected int lineWidth = LINE_WIDTH_EDEFAULT;

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ShapeStyleImpl() {
		super();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.SHAPE_STYLE;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getFontColor() {
		return fontColor;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setFontColor(int newFontColor) {
		int oldFontColor = fontColor;
		fontColor = newFontColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__FONT_COLOR, oldFontColor, fontColor));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getFontName() {
		return fontName;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setFontNameGen(String newFontName) {
		String oldFontName = fontName;
		fontName = newFontName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__FONT_NAME, oldFontName, fontName));
	}
	
	public void setFontName(String newFontName) {
        setFontNameGen(newFontName == null ? newFontName : newFontName.intern());
    }

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getFontHeight() {
		return fontHeight;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setFontHeight(int newFontHeight) {
		int oldFontHeight = fontHeight;
		fontHeight = newFontHeight;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__FONT_HEIGHT, oldFontHeight, fontHeight));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isBold() {
		return (eFlags & BOLD_EFLAG) != 0;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setBold(boolean newBold) {
		boolean oldBold = (eFlags & BOLD_EFLAG) != 0;
		if (newBold) eFlags |= BOLD_EFLAG; else eFlags &= ~BOLD_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__BOLD, oldBold, newBold));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isItalic() {
		return (eFlags & ITALIC_EFLAG) != 0;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setItalic(boolean newItalic) {
		boolean oldItalic = (eFlags & ITALIC_EFLAG) != 0;
		if (newItalic) eFlags |= ITALIC_EFLAG; else eFlags &= ~ITALIC_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__ITALIC, oldItalic, newItalic));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isUnderline() {
		return (eFlags & UNDERLINE_EFLAG) != 0;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setUnderline(boolean newUnderline) {
		boolean oldUnderline = (eFlags & UNDERLINE_EFLAG) != 0;
		if (newUnderline) eFlags |= UNDERLINE_EFLAG; else eFlags &= ~UNDERLINE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__UNDERLINE, oldUnderline, newUnderline));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isStrikeThrough() {
		return (eFlags & STRIKE_THROUGH_EFLAG) != 0;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setStrikeThrough(boolean newStrikeThrough) {
		boolean oldStrikeThrough = (eFlags & STRIKE_THROUGH_EFLAG) != 0;
		if (newStrikeThrough) eFlags |= STRIKE_THROUGH_EFLAG; else eFlags &= ~STRIKE_THROUGH_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__STRIKE_THROUGH, oldStrikeThrough, newStrikeThrough));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getDescription() {
		return description;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDescription(String newDescription) {
		String oldDescription = description;
		description = newDescription;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__DESCRIPTION, oldDescription, description));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getFillColor() {
		return fillColor;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setFillColor(int newFillColor) {
		int oldFillColor = fillColor;
		fillColor = newFillColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__FILL_COLOR, oldFillColor, fillColor));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getLineColor() {
		return lineColor;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLineColor(int newLineColor) {
		int oldLineColor = lineColor;
		lineColor = newLineColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__LINE_COLOR, oldLineColor, lineColor));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getLineWidth() {
		return lineWidth;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLineWidth(int newLineWidth) {
		int oldLineWidth = lineWidth;
		lineWidth = newLineWidth;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__LINE_WIDTH, oldLineWidth, lineWidth));
	}

				/**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.SHAPE_STYLE__FONT_COLOR:
				return new Integer(getFontColor());
			case NotationPackage.SHAPE_STYLE__FONT_NAME:
				return getFontName();
			case NotationPackage.SHAPE_STYLE__FONT_HEIGHT:
				return new Integer(getFontHeight());
			case NotationPackage.SHAPE_STYLE__BOLD:
				return isBold() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.SHAPE_STYLE__ITALIC:
				return isItalic() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.SHAPE_STYLE__UNDERLINE:
				return isUnderline() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH:
				return isStrikeThrough() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.SHAPE_STYLE__DESCRIPTION:
				return getDescription();
			case NotationPackage.SHAPE_STYLE__FILL_COLOR:
				return new Integer(getFillColor());
			case NotationPackage.SHAPE_STYLE__LINE_COLOR:
				return new Integer(getLineColor());
			case NotationPackage.SHAPE_STYLE__LINE_WIDTH:
				return new Integer(getLineWidth());
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.SHAPE_STYLE__FONT_COLOR:
				setFontColor(((Integer)newValue).intValue());
				return;
			case NotationPackage.SHAPE_STYLE__FONT_NAME:
				setFontName((String)newValue);
				return;
			case NotationPackage.SHAPE_STYLE__FONT_HEIGHT:
				setFontHeight(((Integer)newValue).intValue());
				return;
			case NotationPackage.SHAPE_STYLE__BOLD:
				setBold(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.SHAPE_STYLE__ITALIC:
				setItalic(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.SHAPE_STYLE__UNDERLINE:
				setUnderline(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH:
				setStrikeThrough(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.SHAPE_STYLE__DESCRIPTION:
				setDescription((String)newValue);
				return;
			case NotationPackage.SHAPE_STYLE__FILL_COLOR:
				setFillColor(((Integer)newValue).intValue());
				return;
			case NotationPackage.SHAPE_STYLE__LINE_COLOR:
				setLineColor(((Integer)newValue).intValue());
				return;
			case NotationPackage.SHAPE_STYLE__LINE_WIDTH:
				setLineWidth(((Integer)newValue).intValue());
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.SHAPE_STYLE__FONT_COLOR:
				setFontColor(FONT_COLOR_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__FONT_NAME:
				setFontName(FONT_NAME_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__FONT_HEIGHT:
				setFontHeight(FONT_HEIGHT_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__BOLD:
				setBold(BOLD_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__ITALIC:
				setItalic(ITALIC_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__UNDERLINE:
				setUnderline(UNDERLINE_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH:
				setStrikeThrough(STRIKE_THROUGH_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__DESCRIPTION:
				setDescription(DESCRIPTION_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__FILL_COLOR:
				setFillColor(FILL_COLOR_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__LINE_COLOR:
				setLineColor(LINE_COLOR_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__LINE_WIDTH:
				setLineWidth(LINE_WIDTH_EDEFAULT);
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.SHAPE_STYLE__FONT_COLOR:
				return fontColor != FONT_COLOR_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__FONT_NAME:
				return FONT_NAME_EDEFAULT == null ? fontName != null : !FONT_NAME_EDEFAULT.equals(fontName);
			case NotationPackage.SHAPE_STYLE__FONT_HEIGHT:
				return fontHeight != FONT_HEIGHT_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__BOLD:
				return ((eFlags & BOLD_EFLAG) != 0) != BOLD_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__ITALIC:
				return ((eFlags & ITALIC_EFLAG) != 0) != ITALIC_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__UNDERLINE:
				return ((eFlags & UNDERLINE_EFLAG) != 0) != UNDERLINE_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH:
				return ((eFlags & STRIKE_THROUGH_EFLAG) != 0) != STRIKE_THROUGH_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__DESCRIPTION:
				return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
			case NotationPackage.SHAPE_STYLE__FILL_COLOR:
				return fillColor != FILL_COLOR_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__LINE_COLOR:
				return lineColor != LINE_COLOR_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__LINE_WIDTH:
				return lineWidth != LINE_WIDTH_EDEFAULT;
		}
		return eDynamicIsSet(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int eBaseStructuralFeatureID(int derivedFeatureID, Class baseClass) {
		if (baseClass == Style.class) {
			switch (derivedFeatureID) {
				default: return -1;
			}
		}
		if (baseClass == FontStyle.class) {
			switch (derivedFeatureID) {
				case NotationPackage.SHAPE_STYLE__FONT_COLOR: return NotationPackage.FONT_STYLE__FONT_COLOR;
				case NotationPackage.SHAPE_STYLE__FONT_NAME: return NotationPackage.FONT_STYLE__FONT_NAME;
				case NotationPackage.SHAPE_STYLE__FONT_HEIGHT: return NotationPackage.FONT_STYLE__FONT_HEIGHT;
				case NotationPackage.SHAPE_STYLE__BOLD: return NotationPackage.FONT_STYLE__BOLD;
				case NotationPackage.SHAPE_STYLE__ITALIC: return NotationPackage.FONT_STYLE__ITALIC;
				case NotationPackage.SHAPE_STYLE__UNDERLINE: return NotationPackage.FONT_STYLE__UNDERLINE;
				case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH: return NotationPackage.FONT_STYLE__STRIKE_THROUGH;
				default: return -1;
			}
		}
		if (baseClass == DescriptionStyle.class) {
			switch (derivedFeatureID) {
				case NotationPackage.SHAPE_STYLE__DESCRIPTION: return NotationPackage.DESCRIPTION_STYLE__DESCRIPTION;
				default: return -1;
			}
		}
		if (baseClass == FillStyle.class) {
			switch (derivedFeatureID) {
				case NotationPackage.SHAPE_STYLE__FILL_COLOR: return NotationPackage.FILL_STYLE__FILL_COLOR;
				default: return -1;
			}
		}
		if (baseClass == LineStyle.class) {
			switch (derivedFeatureID) {
				case NotationPackage.SHAPE_STYLE__LINE_COLOR: return NotationPackage.LINE_STYLE__LINE_COLOR;
				case NotationPackage.SHAPE_STYLE__LINE_WIDTH: return NotationPackage.LINE_STYLE__LINE_WIDTH;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int eDerivedStructuralFeatureID(int baseFeatureID, Class baseClass) {
		if (baseClass == Style.class) {
			switch (baseFeatureID) {
				default: return -1;
			}
		}
		if (baseClass == FontStyle.class) {
			switch (baseFeatureID) {
				case NotationPackage.FONT_STYLE__FONT_COLOR: return NotationPackage.SHAPE_STYLE__FONT_COLOR;
				case NotationPackage.FONT_STYLE__FONT_NAME: return NotationPackage.SHAPE_STYLE__FONT_NAME;
				case NotationPackage.FONT_STYLE__FONT_HEIGHT: return NotationPackage.SHAPE_STYLE__FONT_HEIGHT;
				case NotationPackage.FONT_STYLE__BOLD: return NotationPackage.SHAPE_STYLE__BOLD;
				case NotationPackage.FONT_STYLE__ITALIC: return NotationPackage.SHAPE_STYLE__ITALIC;
				case NotationPackage.FONT_STYLE__UNDERLINE: return NotationPackage.SHAPE_STYLE__UNDERLINE;
				case NotationPackage.FONT_STYLE__STRIKE_THROUGH: return NotationPackage.SHAPE_STYLE__STRIKE_THROUGH;
				default: return -1;
			}
		}
		if (baseClass == DescriptionStyle.class) {
			switch (baseFeatureID) {
				case NotationPackage.DESCRIPTION_STYLE__DESCRIPTION: return NotationPackage.SHAPE_STYLE__DESCRIPTION;
				default: return -1;
			}
		}
		if (baseClass == FillStyle.class) {
			switch (baseFeatureID) {
				case NotationPackage.FILL_STYLE__FILL_COLOR: return NotationPackage.SHAPE_STYLE__FILL_COLOR;
				default: return -1;
			}
		}
		if (baseClass == LineStyle.class) {
			switch (baseFeatureID) {
				case NotationPackage.LINE_STYLE__LINE_COLOR: return NotationPackage.SHAPE_STYLE__LINE_COLOR;
				case NotationPackage.LINE_STYLE__LINE_WIDTH: return NotationPackage.SHAPE_STYLE__LINE_WIDTH;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (fontColor: "); //$NON-NLS-1$
		result.append(fontColor);
		result.append(", fontName: "); //$NON-NLS-1$
		result.append(fontName);
		result.append(", fontHeight: "); //$NON-NLS-1$
		result.append(fontHeight);
		result.append(", bold: "); //$NON-NLS-1$
		result.append((eFlags & BOLD_EFLAG) != 0);
		result.append(", italic: "); //$NON-NLS-1$
		result.append((eFlags & ITALIC_EFLAG) != 0);
		result.append(", underline: "); //$NON-NLS-1$
		result.append((eFlags & UNDERLINE_EFLAG) != 0);
		result.append(", strikeThrough: "); //$NON-NLS-1$
		result.append((eFlags & STRIKE_THROUGH_EFLAG) != 0);
		result.append(", description: "); //$NON-NLS-1$
		result.append(description);
		result.append(", fillColor: "); //$NON-NLS-1$
		result.append(fillColor);
		result.append(", lineColor: "); //$NON-NLS-1$
		result.append(lineColor);
		result.append(", lineWidth: "); //$NON-NLS-1$
		result.append(lineWidth);
		result.append(')');
		return result.toString();
	}

} //ShapeStyleImpl
@


1.11
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@a21 1
import org.eclipse.gmf.runtime.notation.NotationObject;
d52 1
a52 1
public class ShapeStyleImpl extends EObjectImpl implements ShapeStyle {
@


1.10
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@a33 1
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.ShapeStyleImpl#getUUID <em>UUID</em>}</li>
a54 20
	 * The default value of the '{@@link #getUUID() <em>UUID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getUUID()
	 * @@generated
	 * @@ordered
	 */
	protected static final byte[] UUID_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getUUID() <em>UUID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getUUID()
	 * @@generated
	 * @@ordered
	 */
	protected byte[] uUID = UUID_EDEFAULT;

				/**
a296 21
	public byte[] getUUID() {
		return uUID;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setUUID(byte[] newUUID) {
		byte[] oldUUID = uUID;
		uUID = newUUID;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__UUID, oldUUID, uUID));
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a533 2
			case NotationPackage.SHAPE_STYLE__UUID:
				return getUUID();
a566 3
			case NotationPackage.SHAPE_STYLE__UUID:
				setUUID((byte[])newValue);
				return;
a610 3
			case NotationPackage.SHAPE_STYLE__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a654 2
			case NotationPackage.SHAPE_STYLE__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
a686 6
		if (baseClass == NotationObject.class) {
			switch (derivedFeatureID) {
				case NotationPackage.SHAPE_STYLE__UUID: return NotationPackage.NOTATION_OBJECT__UUID;
				default: return -1;
			}
		}
a731 6
		if (baseClass == NotationObject.class) {
			switch (baseFeatureID) {
				case NotationPackage.NOTATION_OBJECT__UUID: return NotationPackage.SHAPE_STYLE__UUID;
				default: return -1;
			}
		}
d780 1
a780 3
		result.append(" (uUID: "); //$NON-NLS-1$
		result.append(uUID);
		result.append(", fontColor: "); //$NON-NLS-1$
@


1.9
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d283 1
a283 1
	protected static final int LINE_WIDTH_EDEFAULT = 1;
@


1.8
log
@[225137] gmf-head ahunter 080407 Line styles notation enhancement
@
text
@d22 1
d34 1
d56 20
d318 21
d576 2
d611 3
d658 3
d705 2
d739 6
d790 6
d844 3
a846 1
		result.append(" (fontColor: "); //$NON-NLS-1$
@


1.7
log
@[224694] gmf_head ldamus 080328 Font name strings are duplicated in instances of ShapeStyleImpl
@
text
@d43 1
d254 20
d507 21
d553 2
d596 3
d640 3
d674 2
d718 1
d763 1
d799 2
@


1.6
log
@[224694] gmf_head ldamus 080328 Font name strings are duplicated in instances of ShapeStyleImpl
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@d305 1
a305 1
	public void setFontName(String newFontName) {
d311 4
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d17 1
a17 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d51 1
a51 1
public class ShapeStyleImpl extends FlatEObjectImpl implements ShapeStyle {
d53 2
a54 2
     * The default value of the '{@@link #getFontColor() <em>Font Color</em>}' attribute.
     * <!-- begin-user-doc -->
d56 4
a59 4
     * @@see #getFontColor()
     * @@generated
     * @@ordered
     */
d62 8
a69 8
    /**
     * The cached value of the '{@@link #getFontColor() <em>Font Color</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getFontColor()
     * @@generated
     * @@ordered
     */
d72 8
a79 8
    /**
     * The default value of the '{@@link #getFontName() <em>Font Name</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getFontName()
     * @@generated
     * @@ordered
     */
d82 8
a89 8
    /**
     * The cached value of the '{@@link #getFontName() <em>Font Name</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getFontName()
     * @@generated
     * @@ordered
     */
d92 8
a99 8
    /**
     * The default value of the '{@@link #getFontHeight() <em>Font Height</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getFontHeight()
     * @@generated
     * @@ordered
     */
d102 8
a109 8
    /**
     * The cached value of the '{@@link #getFontHeight() <em>Font Height</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getFontHeight()
     * @@generated
     * @@ordered
     */
d112 8
a119 8
    /**
     * The default value of the '{@@link #isBold() <em>Bold</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isBold()
     * @@generated
     * @@ordered
     */
d122 8
a129 8
    /**
     * The flag representing the value of the '{@@link #isBold() <em>Bold</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isBold()
     * @@generated
     * @@ordered
     */
d132 8
a139 8
    /**
     * The default value of the '{@@link #isItalic() <em>Italic</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isItalic()
     * @@generated
     * @@ordered
     */
d142 8
a149 8
    /**
     * The flag representing the value of the '{@@link #isItalic() <em>Italic</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isItalic()
     * @@generated
     * @@ordered
     */
d152 8
a159 8
    /**
     * The default value of the '{@@link #isUnderline() <em>Underline</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isUnderline()
     * @@generated
     * @@ordered
     */
d162 8
a169 8
    /**
     * The flag representing the value of the '{@@link #isUnderline() <em>Underline</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isUnderline()
     * @@generated
     * @@ordered
     */
d172 8
a179 8
    /**
     * The default value of the '{@@link #isStrikeThrough() <em>Strike Through</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isStrikeThrough()
     * @@generated
     * @@ordered
     */
d182 8
a189 8
    /**
     * The flag representing the value of the '{@@link #isStrikeThrough() <em>Strike Through</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #isStrikeThrough()
     * @@generated
     * @@ordered
     */
d192 8
a199 8
    /**
     * The default value of the '{@@link #getDescription() <em>Description</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getDescription()
     * @@generated
     * @@ordered
     */
d202 8
a209 8
    /**
     * The cached value of the '{@@link #getDescription() <em>Description</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getDescription()
     * @@generated
     * @@ordered
     */
d212 8
a219 8
    /**
     * The default value of the '{@@link #getFillColor() <em>Fill Color</em>}' attribute.
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@see #getFillColor()
     * @@generated
     * @@ordered
     */
d223 2
a224 2
     * The cached value of the '{@@link #getFillColor() <em>Fill Color</em>}' attribute.
     * <!-- begin-user-doc -->
d226 4
a229 4
     * @@see #getFillColor()
     * @@generated
     * @@ordered
     */
d233 2
a234 2
     * The default value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
     * <!-- begin-user-doc -->
d236 4
a239 4
     * @@see #getLineColor()
     * @@generated
     * @@ordered
     */
d243 2
a244 2
     * The cached value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
     * <!-- begin-user-doc -->
d246 4
a249 4
     * @@see #getLineColor()
     * @@generated
     * @@ordered
     */
d253 1
a253 1
     * <!-- begin-user-doc -->
d255 2
a256 2
     * @@generated
     */
d258 2
a259 2
        super();
    }
d262 1
a262 1
     * <!-- begin-user-doc -->
d264 2
a265 2
     * @@generated
     */
d267 2
a268 2
        return NotationPackage.Literals.SHAPE_STYLE;
    }
d271 22
a292 1
     * <!-- begin-user-doc -->
d294 2
a295 2
     * @@generated
     */
d297 2
a298 2
        return fontName;
    }
d300 2
a301 2
    /**
     * <!-- begin-user-doc -->
d303 2
a304 2
     * @@generated
     */
d306 5
a310 5
        String oldFontName = fontName;
        fontName = newFontName;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__FONT_NAME, oldFontName, fontName));
    }
d312 2
a313 2
    /**
     * <!-- begin-user-doc -->
d315 2
a316 2
     * @@generated
     */
d318 2
a319 2
        return fontHeight;
    }
d321 2
a322 2
    /**
     * <!-- begin-user-doc -->
d324 2
a325 2
     * @@generated
     */
d327 5
a331 5
        int oldFontHeight = fontHeight;
        fontHeight = newFontHeight;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__FONT_HEIGHT, oldFontHeight, fontHeight));
    }
d333 2
a334 2
    /**
     * <!-- begin-user-doc -->
d336 2
a337 2
     * @@generated
     */
d339 2
a340 2
        return (eFlags & BOLD_EFLAG) != 0;
    }
d342 2
a343 2
    /**
     * <!-- begin-user-doc -->
d345 2
a346 2
     * @@generated
     */
d348 5
a352 5
        boolean oldBold = (eFlags & BOLD_EFLAG) != 0;
        if (newBold) eFlags |= BOLD_EFLAG; else eFlags &= ~BOLD_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__BOLD, oldBold, newBold));
    }
d354 2
a355 2
    /**
     * <!-- begin-user-doc -->
d357 2
a358 2
     * @@generated
     */
d360 2
a361 2
        return (eFlags & ITALIC_EFLAG) != 0;
    }
d363 2
a364 2
    /**
     * <!-- begin-user-doc -->
d366 2
a367 2
     * @@generated
     */
d369 5
a373 5
        boolean oldItalic = (eFlags & ITALIC_EFLAG) != 0;
        if (newItalic) eFlags |= ITALIC_EFLAG; else eFlags &= ~ITALIC_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__ITALIC, oldItalic, newItalic));
    }
d375 2
a376 2
    /**
     * <!-- begin-user-doc -->
d378 2
a379 2
     * @@generated
     */
d381 2
a382 2
        return (eFlags & UNDERLINE_EFLAG) != 0;
    }
d384 2
a385 2
    /**
     * <!-- begin-user-doc -->
d387 2
a388 2
     * @@generated
     */
d390 5
a394 5
        boolean oldUnderline = (eFlags & UNDERLINE_EFLAG) != 0;
        if (newUnderline) eFlags |= UNDERLINE_EFLAG; else eFlags &= ~UNDERLINE_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__UNDERLINE, oldUnderline, newUnderline));
    }
d396 2
a397 2
    /**
     * <!-- begin-user-doc -->
d399 2
a400 2
     * @@generated
     */
d402 2
a403 2
        return (eFlags & STRIKE_THROUGH_EFLAG) != 0;
    }
d405 2
a406 2
    /**
     * <!-- begin-user-doc -->
d408 2
a409 2
     * @@generated
     */
d411 5
a415 5
        boolean oldStrikeThrough = (eFlags & STRIKE_THROUGH_EFLAG) != 0;
        if (newStrikeThrough) eFlags |= STRIKE_THROUGH_EFLAG; else eFlags &= ~STRIKE_THROUGH_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__STRIKE_THROUGH, oldStrikeThrough, newStrikeThrough));
    }
d417 2
a418 2
    /**
     * <!-- begin-user-doc -->
d420 2
a421 23
     * @@generated
     */
	public int getFontColor() {
        return fontColor;
    }

    /**
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@generated
     */
	public void setFontColor(int newFontColor) {
        int oldFontColor = fontColor;
        fontColor = newFontColor;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__FONT_COLOR, oldFontColor, fontColor));
    }

    /**
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@generated
     */
d423 2
a424 2
        return description;
    }
d426 2
a427 2
    /**
     * <!-- begin-user-doc -->
d429 2
a430 2
     * @@generated
     */
d432 5
a436 5
        String oldDescription = description;
        description = newDescription;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__DESCRIPTION, oldDescription, description));
    }
d438 2
a439 2
    /**
     * <!-- begin-user-doc -->
d441 2
a442 2
     * @@generated
     */
d444 2
a445 2
        return fillColor;
    }
d448 1
a448 1
     * <!-- begin-user-doc -->
d450 2
a451 2
     * @@generated
     */
d453 5
a457 5
        int oldFillColor = fillColor;
        fillColor = newFillColor;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__FILL_COLOR, oldFillColor, fillColor));
    }
d460 1
a460 1
     * <!-- begin-user-doc -->
d462 2
a463 2
     * @@generated
     */
d465 2
a466 2
        return lineColor;
    }
d469 1
a469 1
     * <!-- begin-user-doc -->
d471 2
a472 2
     * @@generated
     */
d474 5
a478 5
        int oldLineColor = lineColor;
        lineColor = newLineColor;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__LINE_COLOR, oldLineColor, lineColor));
    }
d481 1
a481 1
     * <!-- begin-user-doc -->
d483 2
a484 2
     * @@generated
     */
d486 24
a509 24
        switch (featureID) {
            case NotationPackage.SHAPE_STYLE__FONT_COLOR:
                return new Integer(getFontColor());
            case NotationPackage.SHAPE_STYLE__FONT_NAME:
                return getFontName();
            case NotationPackage.SHAPE_STYLE__FONT_HEIGHT:
                return new Integer(getFontHeight());
            case NotationPackage.SHAPE_STYLE__BOLD:
                return isBold() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.SHAPE_STYLE__ITALIC:
                return isItalic() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.SHAPE_STYLE__UNDERLINE:
                return isUnderline() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH:
                return isStrikeThrough() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.SHAPE_STYLE__DESCRIPTION:
                return getDescription();
            case NotationPackage.SHAPE_STYLE__FILL_COLOR:
                return new Integer(getFillColor());
            case NotationPackage.SHAPE_STYLE__LINE_COLOR:
                return new Integer(getLineColor());
        }
        return eDynamicGet(featureID, resolve, coreType);
    }
d512 1
a512 1
     * <!-- begin-user-doc -->
d514 2
a515 2
     * @@generated
     */
d517 34
a550 34
        switch (featureID) {
            case NotationPackage.SHAPE_STYLE__FONT_COLOR:
                setFontColor(((Integer)newValue).intValue());
                return;
            case NotationPackage.SHAPE_STYLE__FONT_NAME:
                setFontName((String)newValue);
                return;
            case NotationPackage.SHAPE_STYLE__FONT_HEIGHT:
                setFontHeight(((Integer)newValue).intValue());
                return;
            case NotationPackage.SHAPE_STYLE__BOLD:
                setBold(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.SHAPE_STYLE__ITALIC:
                setItalic(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.SHAPE_STYLE__UNDERLINE:
                setUnderline(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH:
                setStrikeThrough(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.SHAPE_STYLE__DESCRIPTION:
                setDescription((String)newValue);
                return;
            case NotationPackage.SHAPE_STYLE__FILL_COLOR:
                setFillColor(((Integer)newValue).intValue());
                return;
            case NotationPackage.SHAPE_STYLE__LINE_COLOR:
                setLineColor(((Integer)newValue).intValue());
                return;
        }
        eDynamicSet(featureID, newValue);
    }
d553 1
a553 1
     * <!-- begin-user-doc -->
d555 2
a556 2
     * @@generated
     */
d558 34
a591 34
        switch (featureID) {
            case NotationPackage.SHAPE_STYLE__FONT_COLOR:
                setFontColor(FONT_COLOR_EDEFAULT);
                return;
            case NotationPackage.SHAPE_STYLE__FONT_NAME:
                setFontName(FONT_NAME_EDEFAULT);
                return;
            case NotationPackage.SHAPE_STYLE__FONT_HEIGHT:
                setFontHeight(FONT_HEIGHT_EDEFAULT);
                return;
            case NotationPackage.SHAPE_STYLE__BOLD:
                setBold(BOLD_EDEFAULT);
                return;
            case NotationPackage.SHAPE_STYLE__ITALIC:
                setItalic(ITALIC_EDEFAULT);
                return;
            case NotationPackage.SHAPE_STYLE__UNDERLINE:
                setUnderline(UNDERLINE_EDEFAULT);
                return;
            case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH:
                setStrikeThrough(STRIKE_THROUGH_EDEFAULT);
                return;
            case NotationPackage.SHAPE_STYLE__DESCRIPTION:
                setDescription(DESCRIPTION_EDEFAULT);
                return;
            case NotationPackage.SHAPE_STYLE__FILL_COLOR:
                setFillColor(FILL_COLOR_EDEFAULT);
                return;
            case NotationPackage.SHAPE_STYLE__LINE_COLOR:
                setLineColor(LINE_COLOR_EDEFAULT);
                return;
        }
        eDynamicUnset(featureID);
    }
d594 1
a594 1
     * <!-- begin-user-doc -->
d596 2
a597 2
     * @@generated
     */
d599 24
a622 24
        switch (featureID) {
            case NotationPackage.SHAPE_STYLE__FONT_COLOR:
                return fontColor != FONT_COLOR_EDEFAULT;
            case NotationPackage.SHAPE_STYLE__FONT_NAME:
                return FONT_NAME_EDEFAULT == null ? fontName != null : !FONT_NAME_EDEFAULT.equals(fontName);
            case NotationPackage.SHAPE_STYLE__FONT_HEIGHT:
                return fontHeight != FONT_HEIGHT_EDEFAULT;
            case NotationPackage.SHAPE_STYLE__BOLD:
                return ((eFlags & BOLD_EFLAG) != 0) != BOLD_EDEFAULT;
            case NotationPackage.SHAPE_STYLE__ITALIC:
                return ((eFlags & ITALIC_EFLAG) != 0) != ITALIC_EDEFAULT;
            case NotationPackage.SHAPE_STYLE__UNDERLINE:
                return ((eFlags & UNDERLINE_EFLAG) != 0) != UNDERLINE_EDEFAULT;
            case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH:
                return ((eFlags & STRIKE_THROUGH_EFLAG) != 0) != STRIKE_THROUGH_EDEFAULT;
            case NotationPackage.SHAPE_STYLE__DESCRIPTION:
                return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
            case NotationPackage.SHAPE_STYLE__FILL_COLOR:
                return fillColor != FILL_COLOR_EDEFAULT;
            case NotationPackage.SHAPE_STYLE__LINE_COLOR:
                return lineColor != LINE_COLOR_EDEFAULT;
        }
        return eDynamicIsSet(featureID);
    }
d625 1
a625 1
     * <!-- begin-user-doc -->
d627 2
a628 2
     * @@generated
     */
d630 37
a666 37
        if (baseClass == Style.class) {
            switch (derivedFeatureID) {
                default: return -1;
            }
        }
        if (baseClass == FontStyle.class) {
            switch (derivedFeatureID) {
                case NotationPackage.SHAPE_STYLE__FONT_COLOR: return NotationPackage.FONT_STYLE__FONT_COLOR;
                case NotationPackage.SHAPE_STYLE__FONT_NAME: return NotationPackage.FONT_STYLE__FONT_NAME;
                case NotationPackage.SHAPE_STYLE__FONT_HEIGHT: return NotationPackage.FONT_STYLE__FONT_HEIGHT;
                case NotationPackage.SHAPE_STYLE__BOLD: return NotationPackage.FONT_STYLE__BOLD;
                case NotationPackage.SHAPE_STYLE__ITALIC: return NotationPackage.FONT_STYLE__ITALIC;
                case NotationPackage.SHAPE_STYLE__UNDERLINE: return NotationPackage.FONT_STYLE__UNDERLINE;
                case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH: return NotationPackage.FONT_STYLE__STRIKE_THROUGH;
                default: return -1;
            }
        }
        if (baseClass == DescriptionStyle.class) {
            switch (derivedFeatureID) {
                case NotationPackage.SHAPE_STYLE__DESCRIPTION: return NotationPackage.DESCRIPTION_STYLE__DESCRIPTION;
                default: return -1;
            }
        }
        if (baseClass == FillStyle.class) {
            switch (derivedFeatureID) {
                case NotationPackage.SHAPE_STYLE__FILL_COLOR: return NotationPackage.FILL_STYLE__FILL_COLOR;
                default: return -1;
            }
        }
        if (baseClass == LineStyle.class) {
            switch (derivedFeatureID) {
                case NotationPackage.SHAPE_STYLE__LINE_COLOR: return NotationPackage.LINE_STYLE__LINE_COLOR;
                default: return -1;
            }
        }
        return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
    }
d669 1
a669 1
     * <!-- begin-user-doc -->
d671 2
a672 2
     * @@generated
     */
d674 37
a710 37
        if (baseClass == Style.class) {
            switch (baseFeatureID) {
                default: return -1;
            }
        }
        if (baseClass == FontStyle.class) {
            switch (baseFeatureID) {
                case NotationPackage.FONT_STYLE__FONT_COLOR: return NotationPackage.SHAPE_STYLE__FONT_COLOR;
                case NotationPackage.FONT_STYLE__FONT_NAME: return NotationPackage.SHAPE_STYLE__FONT_NAME;
                case NotationPackage.FONT_STYLE__FONT_HEIGHT: return NotationPackage.SHAPE_STYLE__FONT_HEIGHT;
                case NotationPackage.FONT_STYLE__BOLD: return NotationPackage.SHAPE_STYLE__BOLD;
                case NotationPackage.FONT_STYLE__ITALIC: return NotationPackage.SHAPE_STYLE__ITALIC;
                case NotationPackage.FONT_STYLE__UNDERLINE: return NotationPackage.SHAPE_STYLE__UNDERLINE;
                case NotationPackage.FONT_STYLE__STRIKE_THROUGH: return NotationPackage.SHAPE_STYLE__STRIKE_THROUGH;
                default: return -1;
            }
        }
        if (baseClass == DescriptionStyle.class) {
            switch (baseFeatureID) {
                case NotationPackage.DESCRIPTION_STYLE__DESCRIPTION: return NotationPackage.SHAPE_STYLE__DESCRIPTION;
                default: return -1;
            }
        }
        if (baseClass == FillStyle.class) {
            switch (baseFeatureID) {
                case NotationPackage.FILL_STYLE__FILL_COLOR: return NotationPackage.SHAPE_STYLE__FILL_COLOR;
                default: return -1;
            }
        }
        if (baseClass == LineStyle.class) {
            switch (baseFeatureID) {
                case NotationPackage.LINE_STYLE__LINE_COLOR: return NotationPackage.SHAPE_STYLE__LINE_COLOR;
                default: return -1;
            }
        }
        return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
    }
d713 1
a713 1
     * <!-- begin-user-doc -->
d715 2
a716 2
     * @@generated
     */
d718 1
a718 1
        if (eIsProxy()) return super.toString();
d720 24
a743 24
        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (fontColor: "); //$NON-NLS-1$
        result.append(fontColor);
        result.append(", fontName: "); //$NON-NLS-1$
        result.append(fontName);
        result.append(", fontHeight: "); //$NON-NLS-1$
        result.append(fontHeight);
        result.append(", bold: "); //$NON-NLS-1$
        result.append((eFlags & BOLD_EFLAG) != 0);
        result.append(", italic: "); //$NON-NLS-1$
        result.append((eFlags & ITALIC_EFLAG) != 0);
        result.append(", underline: "); //$NON-NLS-1$
        result.append((eFlags & UNDERLINE_EFLAG) != 0);
        result.append(", strikeThrough: "); //$NON-NLS-1$
        result.append((eFlags & STRIKE_THROUGH_EFLAG) != 0);
        result.append(", description: "); //$NON-NLS-1$
        result.append(description);
        result.append(", fillColor: "); //$NON-NLS-1$
        result.append(fillColor);
        result.append(", lineColor: "); //$NON-NLS-1$
        result.append(lineColor);
        result.append(')');
        return result.toString();
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d17 1
a17 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
d51 1
a51 1
public class ShapeStyleImpl extends EObjectImpl implements ShapeStyle {
d508 1
a508 1
        return super.eGet(featureID, resolve, coreType);
d549 1
a549 1
        super.eSet(featureID, newValue);
d590 1
a590 1
        super.eUnset(featureID);
d621 1
a621 1
        return super.eIsSet(featureID);
@


1.3.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@d17 1
a17 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d51 1
a51 1
public class ShapeStyleImpl extends FlatEObjectImpl implements ShapeStyle {
d508 1
a508 1
        return eDynamicGet(featureID, resolve, coreType);
d549 1
a549 1
        eDynamicSet(featureID, newValue);
d590 1
a590 1
        eDynamicUnset(featureID);
d621 1
a621 1
        return eDynamicIsSet(featureID);
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a15 1
import org.eclipse.emf.ecore.EStructuralFeature;
a17 1

d52 8
a59 8
	/**
	 * The default value of the '{@@link #getFontColor() <em>Font Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontColor()
	 * @@generated
	 * @@ordered
	 */
d62 8
a69 8
	/**
	 * The cached value of the '{@@link #getFontColor() <em>Font Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontColor()
	 * @@generated
	 * @@ordered
	 */
d72 8
a79 8
	/**
	 * The default value of the '{@@link #getFontName() <em>Font Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontName()
	 * @@generated
	 * @@ordered
	 */
d82 8
a89 8
	/**
	 * The cached value of the '{@@link #getFontName() <em>Font Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontName()
	 * @@generated
	 * @@ordered
	 */
d92 8
a99 8
	/**
	 * The default value of the '{@@link #getFontHeight() <em>Font Height</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontHeight()
	 * @@generated
	 * @@ordered
	 */
d102 8
a109 8
	/**
	 * The cached value of the '{@@link #getFontHeight() <em>Font Height</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontHeight()
	 * @@generated
	 * @@ordered
	 */
d112 8
a119 8
	/**
	 * The default value of the '{@@link #isBold() <em>Bold</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isBold()
	 * @@generated
	 * @@ordered
	 */
d122 8
a129 8
	/**
	 * The flag representing the value of the '{@@link #isBold() <em>Bold</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isBold()
	 * @@generated
	 * @@ordered
	 */
d132 8
a139 8
	/**
	 * The default value of the '{@@link #isItalic() <em>Italic</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isItalic()
	 * @@generated
	 * @@ordered
	 */
d142 8
a149 8
	/**
	 * The flag representing the value of the '{@@link #isItalic() <em>Italic</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isItalic()
	 * @@generated
	 * @@ordered
	 */
d152 8
a159 8
	/**
	 * The default value of the '{@@link #isUnderline() <em>Underline</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isUnderline()
	 * @@generated
	 * @@ordered
	 */
d162 8
a169 8
	/**
	 * The flag representing the value of the '{@@link #isUnderline() <em>Underline</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isUnderline()
	 * @@generated
	 * @@ordered
	 */
d172 8
a179 8
	/**
	 * The default value of the '{@@link #isStrikeThrough() <em>Strike Through</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isStrikeThrough()
	 * @@generated
	 * @@ordered
	 */
d182 8
a189 8
	/**
	 * The flag representing the value of the '{@@link #isStrikeThrough() <em>Strike Through</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isStrikeThrough()
	 * @@generated
	 * @@ordered
	 */
d192 8
a199 8
	/**
	 * The default value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
d202 8
a209 8
	/**
	 * The cached value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
d212 8
a219 8
	/**
	 * The default value of the '{@@link #getFillColor() <em>Fill Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFillColor()
	 * @@generated
	 * @@ordered
	 */
d222 8
a229 8
	/**
	 * The cached value of the '{@@link #getFillColor() <em>Fill Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFillColor()
	 * @@generated
	 * @@ordered
	 */
d232 8
a239 8
	/**
	 * The default value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineColor()
	 * @@generated
	 * @@ordered
	 */
d242 8
a249 8
	/**
	 * The cached value of the '{@@link #getLineColor() <em>Line Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLineColor()
	 * @@generated
	 * @@ordered
	 */
d252 2
a253 2
	/**
	 * <!-- begin-user-doc -->
d255 2
a256 2
	 * @@generated
	 */
d258 2
a259 2
		super();
	}
d261 2
a262 2
	/**
	 * <!-- begin-user-doc -->
d264 2
a265 2
	 * @@generated
	 */
d267 2
a268 2
		return NotationPackage.eINSTANCE.getShapeStyle();
	}
d270 2
a271 2
	/**
	 * <!-- begin-user-doc -->
d273 2
a274 2
	 * @@generated
	 */
d276 2
a277 2
		return fontName;
	}
d279 2
a280 2
	/**
	 * <!-- begin-user-doc -->
d282 2
a283 2
	 * @@generated
	 */
d285 5
a289 5
		String oldFontName = fontName;
		fontName = newFontName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__FONT_NAME, oldFontName, fontName));
	}
d291 2
a292 2
	/**
	 * <!-- begin-user-doc -->
d294 2
a295 2
	 * @@generated
	 */
d297 2
a298 2
		return fontHeight;
	}
d300 2
a301 2
	/**
	 * <!-- begin-user-doc -->
d303 2
a304 2
	 * @@generated
	 */
d306 5
a310 5
		int oldFontHeight = fontHeight;
		fontHeight = newFontHeight;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__FONT_HEIGHT, oldFontHeight, fontHeight));
	}
d312 2
a313 2
	/**
	 * <!-- begin-user-doc -->
d315 2
a316 2
	 * @@generated
	 */
d318 2
a319 2
		return (eFlags & BOLD_EFLAG) != 0;
	}
d321 2
a322 2
	/**
	 * <!-- begin-user-doc -->
d324 2
a325 2
	 * @@generated
	 */
d327 5
a331 5
		boolean oldBold = (eFlags & BOLD_EFLAG) != 0;
		if (newBold) eFlags |= BOLD_EFLAG; else eFlags &= ~BOLD_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__BOLD, oldBold, newBold));
	}
d333 2
a334 2
	/**
	 * <!-- begin-user-doc -->
d336 2
a337 2
	 * @@generated
	 */
d339 2
a340 2
		return (eFlags & ITALIC_EFLAG) != 0;
	}
d342 2
a343 2
	/**
	 * <!-- begin-user-doc -->
d345 2
a346 2
	 * @@generated
	 */
d348 5
a352 5
		boolean oldItalic = (eFlags & ITALIC_EFLAG) != 0;
		if (newItalic) eFlags |= ITALIC_EFLAG; else eFlags &= ~ITALIC_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__ITALIC, oldItalic, newItalic));
	}
d354 2
a355 2
	/**
	 * <!-- begin-user-doc -->
d357 2
a358 2
	 * @@generated
	 */
d360 2
a361 2
		return (eFlags & UNDERLINE_EFLAG) != 0;
	}
d363 2
a364 2
	/**
	 * <!-- begin-user-doc -->
d366 2
a367 2
	 * @@generated
	 */
d369 5
a373 5
		boolean oldUnderline = (eFlags & UNDERLINE_EFLAG) != 0;
		if (newUnderline) eFlags |= UNDERLINE_EFLAG; else eFlags &= ~UNDERLINE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__UNDERLINE, oldUnderline, newUnderline));
	}
d375 2
a376 2
	/**
	 * <!-- begin-user-doc -->
d378 2
a379 2
	 * @@generated
	 */
d381 2
a382 2
		return (eFlags & STRIKE_THROUGH_EFLAG) != 0;
	}
d384 2
a385 2
	/**
	 * <!-- begin-user-doc -->
d387 2
a388 2
	 * @@generated
	 */
d390 5
a394 5
		boolean oldStrikeThrough = (eFlags & STRIKE_THROUGH_EFLAG) != 0;
		if (newStrikeThrough) eFlags |= STRIKE_THROUGH_EFLAG; else eFlags &= ~STRIKE_THROUGH_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__STRIKE_THROUGH, oldStrikeThrough, newStrikeThrough));
	}
d396 2
a397 2
	/**
	 * <!-- begin-user-doc -->
d399 2
a400 2
	 * @@generated
	 */
d402 2
a403 2
		return fontColor;
	}
d405 2
a406 2
	/**
	 * <!-- begin-user-doc -->
d408 2
a409 2
	 * @@generated
	 */
d411 5
a415 5
		int oldFontColor = fontColor;
		fontColor = newFontColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__FONT_COLOR, oldFontColor, fontColor));
	}
d417 2
a418 2
	/**
	 * <!-- begin-user-doc -->
d420 2
a421 2
	 * @@generated
	 */
d423 2
a424 2
		return description;
	}
d426 2
a427 2
	/**
	 * <!-- begin-user-doc -->
d429 2
a430 2
	 * @@generated
	 */
d432 5
a436 5
		String oldDescription = description;
		description = newDescription;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__DESCRIPTION, oldDescription, description));
	}
d438 2
a439 2
	/**
	 * <!-- begin-user-doc -->
d441 2
a442 2
	 * @@generated
	 */
d444 2
a445 2
		return fillColor;
	}
d447 2
a448 2
	/**
	 * <!-- begin-user-doc -->
d450 2
a451 2
	 * @@generated
	 */
d453 5
a457 5
		int oldFillColor = fillColor;
		fillColor = newFillColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__FILL_COLOR, oldFillColor, fillColor));
	}
d459 2
a460 2
	/**
	 * <!-- begin-user-doc -->
d462 2
a463 2
	 * @@generated
	 */
d465 2
a466 2
		return lineColor;
	}
d468 2
a469 2
	/**
	 * <!-- begin-user-doc -->
d471 2
a472 2
	 * @@generated
	 */
d474 149
a622 149
		int oldLineColor = lineColor;
		lineColor = newLineColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.SHAPE_STYLE__LINE_COLOR, oldLineColor, lineColor));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.SHAPE_STYLE__FONT_COLOR:
				return new Integer(getFontColor());
			case NotationPackage.SHAPE_STYLE__FONT_NAME:
				return getFontName();
			case NotationPackage.SHAPE_STYLE__FONT_HEIGHT:
				return new Integer(getFontHeight());
			case NotationPackage.SHAPE_STYLE__BOLD:
				return isBold() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.SHAPE_STYLE__ITALIC:
				return isItalic() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.SHAPE_STYLE__UNDERLINE:
				return isUnderline() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH:
				return isStrikeThrough() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.SHAPE_STYLE__DESCRIPTION:
				return getDescription();
			case NotationPackage.SHAPE_STYLE__FILL_COLOR:
				return new Integer(getFillColor());
			case NotationPackage.SHAPE_STYLE__LINE_COLOR:
				return new Integer(getLineColor());
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.SHAPE_STYLE__FONT_COLOR:
				setFontColor(((Integer)newValue).intValue());
				return;
			case NotationPackage.SHAPE_STYLE__FONT_NAME:
				setFontName((String)newValue);
				return;
			case NotationPackage.SHAPE_STYLE__FONT_HEIGHT:
				setFontHeight(((Integer)newValue).intValue());
				return;
			case NotationPackage.SHAPE_STYLE__BOLD:
				setBold(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.SHAPE_STYLE__ITALIC:
				setItalic(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.SHAPE_STYLE__UNDERLINE:
				setUnderline(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH:
				setStrikeThrough(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.SHAPE_STYLE__DESCRIPTION:
				setDescription((String)newValue);
				return;
			case NotationPackage.SHAPE_STYLE__FILL_COLOR:
				setFillColor(((Integer)newValue).intValue());
				return;
			case NotationPackage.SHAPE_STYLE__LINE_COLOR:
				setLineColor(((Integer)newValue).intValue());
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.SHAPE_STYLE__FONT_COLOR:
				setFontColor(FONT_COLOR_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__FONT_NAME:
				setFontName(FONT_NAME_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__FONT_HEIGHT:
				setFontHeight(FONT_HEIGHT_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__BOLD:
				setBold(BOLD_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__ITALIC:
				setItalic(ITALIC_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__UNDERLINE:
				setUnderline(UNDERLINE_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH:
				setStrikeThrough(STRIKE_THROUGH_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__DESCRIPTION:
				setDescription(DESCRIPTION_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__FILL_COLOR:
				setFillColor(FILL_COLOR_EDEFAULT);
				return;
			case NotationPackage.SHAPE_STYLE__LINE_COLOR:
				setLineColor(LINE_COLOR_EDEFAULT);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.SHAPE_STYLE__FONT_COLOR:
				return fontColor != FONT_COLOR_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__FONT_NAME:
				return FONT_NAME_EDEFAULT == null ? fontName != null : !FONT_NAME_EDEFAULT.equals(fontName);
			case NotationPackage.SHAPE_STYLE__FONT_HEIGHT:
				return fontHeight != FONT_HEIGHT_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__BOLD:
				return ((eFlags & BOLD_EFLAG) != 0) != BOLD_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__ITALIC:
				return ((eFlags & ITALIC_EFLAG) != 0) != ITALIC_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__UNDERLINE:
				return ((eFlags & UNDERLINE_EFLAG) != 0) != UNDERLINE_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH:
				return ((eFlags & STRIKE_THROUGH_EFLAG) != 0) != STRIKE_THROUGH_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__DESCRIPTION:
				return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
			case NotationPackage.SHAPE_STYLE__FILL_COLOR:
				return fillColor != FILL_COLOR_EDEFAULT;
			case NotationPackage.SHAPE_STYLE__LINE_COLOR:
				return lineColor != LINE_COLOR_EDEFAULT;
		}
		return eDynamicIsSet(eFeature);
	}
d624 2
a625 2
	/**
	 * <!-- begin-user-doc -->
d627 2
a628 2
	 * @@generated
	 */
d630 37
a666 37
		if (baseClass == Style.class) {
			switch (derivedFeatureID) {
				default: return -1;
			}
		}
		if (baseClass == FontStyle.class) {
			switch (derivedFeatureID) {
				case NotationPackage.SHAPE_STYLE__FONT_COLOR: return NotationPackage.FONT_STYLE__FONT_COLOR;
				case NotationPackage.SHAPE_STYLE__FONT_NAME: return NotationPackage.FONT_STYLE__FONT_NAME;
				case NotationPackage.SHAPE_STYLE__FONT_HEIGHT: return NotationPackage.FONT_STYLE__FONT_HEIGHT;
				case NotationPackage.SHAPE_STYLE__BOLD: return NotationPackage.FONT_STYLE__BOLD;
				case NotationPackage.SHAPE_STYLE__ITALIC: return NotationPackage.FONT_STYLE__ITALIC;
				case NotationPackage.SHAPE_STYLE__UNDERLINE: return NotationPackage.FONT_STYLE__UNDERLINE;
				case NotationPackage.SHAPE_STYLE__STRIKE_THROUGH: return NotationPackage.FONT_STYLE__STRIKE_THROUGH;
				default: return -1;
			}
		}
		if (baseClass == DescriptionStyle.class) {
			switch (derivedFeatureID) {
				case NotationPackage.SHAPE_STYLE__DESCRIPTION: return NotationPackage.DESCRIPTION_STYLE__DESCRIPTION;
				default: return -1;
			}
		}
		if (baseClass == FillStyle.class) {
			switch (derivedFeatureID) {
				case NotationPackage.SHAPE_STYLE__FILL_COLOR: return NotationPackage.FILL_STYLE__FILL_COLOR;
				default: return -1;
			}
		}
		if (baseClass == LineStyle.class) {
			switch (derivedFeatureID) {
				case NotationPackage.SHAPE_STYLE__LINE_COLOR: return NotationPackage.LINE_STYLE__LINE_COLOR;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}
d668 2
a669 2
	/**
	 * <!-- begin-user-doc -->
d671 2
a672 2
	 * @@generated
	 */
d674 37
a710 37
		if (baseClass == Style.class) {
			switch (baseFeatureID) {
				default: return -1;
			}
		}
		if (baseClass == FontStyle.class) {
			switch (baseFeatureID) {
				case NotationPackage.FONT_STYLE__FONT_COLOR: return NotationPackage.SHAPE_STYLE__FONT_COLOR;
				case NotationPackage.FONT_STYLE__FONT_NAME: return NotationPackage.SHAPE_STYLE__FONT_NAME;
				case NotationPackage.FONT_STYLE__FONT_HEIGHT: return NotationPackage.SHAPE_STYLE__FONT_HEIGHT;
				case NotationPackage.FONT_STYLE__BOLD: return NotationPackage.SHAPE_STYLE__BOLD;
				case NotationPackage.FONT_STYLE__ITALIC: return NotationPackage.SHAPE_STYLE__ITALIC;
				case NotationPackage.FONT_STYLE__UNDERLINE: return NotationPackage.SHAPE_STYLE__UNDERLINE;
				case NotationPackage.FONT_STYLE__STRIKE_THROUGH: return NotationPackage.SHAPE_STYLE__STRIKE_THROUGH;
				default: return -1;
			}
		}
		if (baseClass == DescriptionStyle.class) {
			switch (baseFeatureID) {
				case NotationPackage.DESCRIPTION_STYLE__DESCRIPTION: return NotationPackage.SHAPE_STYLE__DESCRIPTION;
				default: return -1;
			}
		}
		if (baseClass == FillStyle.class) {
			switch (baseFeatureID) {
				case NotationPackage.FILL_STYLE__FILL_COLOR: return NotationPackage.SHAPE_STYLE__FILL_COLOR;
				default: return -1;
			}
		}
		if (baseClass == LineStyle.class) {
			switch (baseFeatureID) {
				case NotationPackage.LINE_STYLE__LINE_COLOR: return NotationPackage.SHAPE_STYLE__LINE_COLOR;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}
d712 2
a713 2
	/**
	 * <!-- begin-user-doc -->
d715 2
a716 2
	 * @@generated
	 */
d718 1
a718 1
		if (eIsProxy()) return super.toString();
d720 24
a743 24
		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (fontColor: "); //$NON-NLS-1$
		result.append(fontColor);
		result.append(", fontName: "); //$NON-NLS-1$
		result.append(fontName);
		result.append(", fontHeight: "); //$NON-NLS-1$
		result.append(fontHeight);
		result.append(", bold: "); //$NON-NLS-1$
		result.append((eFlags & BOLD_EFLAG) != 0);
		result.append(", italic: "); //$NON-NLS-1$
		result.append((eFlags & ITALIC_EFLAG) != 0);
		result.append(", underline: "); //$NON-NLS-1$
		result.append((eFlags & UNDERLINE_EFLAG) != 0);
		result.append(", strikeThrough: "); //$NON-NLS-1$
		result.append((eFlags & STRIKE_THROUGH_EFLAG) != 0);
		result.append(", description: "); //$NON-NLS-1$
		result.append(description);
		result.append(", fillColor: "); //$NON-NLS-1$
		result.append(fillColor);
		result.append(", lineColor: "); //$NON-NLS-1$
		result.append(lineColor);
		result.append(')');
		return result.toString();
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

