head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080507-1326:1.7
	v20080503-1740:1.6
	v20080425-1959:1.5
	v20080407-2250:1.5
	v20080407-1545:1.5
	v20080331-1625:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080114-2222:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	3e924820f4604567;

1.6
date	2008.05.03.18.33.03;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	1c13481cafcc4567;

1.5
date	2007.05.17.16.26.50;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71d9464c82444567;

1.4
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.17.20.27.55;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.runtime.notation.FontStyle;
import org.eclipse.gmf.runtime.notation.NotationPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Font Style</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.FontStyleImpl#getFontColor <em>Font Color</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.FontStyleImpl#getFontName <em>Font Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.FontStyleImpl#getFontHeight <em>Font Height</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.FontStyleImpl#isBold <em>Bold</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.FontStyleImpl#isItalic <em>Italic</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.FontStyleImpl#isUnderline <em>Underline</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.FontStyleImpl#isStrikeThrough <em>Strike Through</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy %partners
 */
public class FontStyleImpl extends NotationEObjectImpl implements FontStyle {
    /**
	 * The default value of the '{@@link #getFontColor() <em>Font Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontColor()
	 * @@generated
	 * @@ordered
	 */
	protected static final int FONT_COLOR_EDEFAULT = 0;

    /**
	 * The cached value of the '{@@link #getFontColor() <em>Font Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontColor()
	 * @@generated
	 * @@ordered
	 */
	protected int fontColor = FONT_COLOR_EDEFAULT;

    /**
	 * The default value of the '{@@link #getFontName() <em>Font Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String FONT_NAME_EDEFAULT = "Tahoma"; //$NON-NLS-1$

    /**
	 * The cached value of the '{@@link #getFontName() <em>Font Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontName()
	 * @@generated
	 * @@ordered
	 */
	protected String fontName = FONT_NAME_EDEFAULT;

    /**
	 * The default value of the '{@@link #getFontHeight() <em>Font Height</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontHeight()
	 * @@generated
	 * @@ordered
	 */
	protected static final int FONT_HEIGHT_EDEFAULT = 9;

    /**
	 * The cached value of the '{@@link #getFontHeight() <em>Font Height</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontHeight()
	 * @@generated
	 * @@ordered
	 */
	protected int fontHeight = FONT_HEIGHT_EDEFAULT;

    /**
	 * The default value of the '{@@link #isBold() <em>Bold</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isBold()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean BOLD_EDEFAULT = false;

    /**
	 * The flag representing the value of the '{@@link #isBold() <em>Bold</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isBold()
	 * @@generated
	 * @@ordered
	 */
	protected static final int BOLD_EFLAG = 1 << 8;

    /**
	 * The default value of the '{@@link #isItalic() <em>Italic</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isItalic()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean ITALIC_EDEFAULT = false;

    /**
	 * The flag representing the value of the '{@@link #isItalic() <em>Italic</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isItalic()
	 * @@generated
	 * @@ordered
	 */
	protected static final int ITALIC_EFLAG = 1 << 9;

    /**
	 * The default value of the '{@@link #isUnderline() <em>Underline</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isUnderline()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean UNDERLINE_EDEFAULT = false;

    /**
	 * The flag representing the value of the '{@@link #isUnderline() <em>Underline</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isUnderline()
	 * @@generated
	 * @@ordered
	 */
	protected static final int UNDERLINE_EFLAG = 1 << 10;

    /**
	 * The default value of the '{@@link #isStrikeThrough() <em>Strike Through</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isStrikeThrough()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean STRIKE_THROUGH_EDEFAULT = false;

    /**
	 * The flag representing the value of the '{@@link #isStrikeThrough() <em>Strike Through</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isStrikeThrough()
	 * @@generated
	 * @@ordered
	 */
	protected static final int STRIKE_THROUGH_EFLAG = 1 << 11;

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected FontStyleImpl() {
		super();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.FONT_STYLE;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getFontName() {
		return fontName;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public void setFontName(String newFontName) {
		String oldFontName = fontName;
		fontName = (newFontName == null)?null:newFontName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__FONT_NAME, oldFontName, fontName));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getFontHeight() {
		return fontHeight;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setFontHeight(int newFontHeight) {
		int oldFontHeight = fontHeight;
		fontHeight = newFontHeight;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__FONT_HEIGHT, oldFontHeight, fontHeight));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isBold() {
		return (eFlags & BOLD_EFLAG) != 0;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setBold(boolean newBold) {
		boolean oldBold = (eFlags & BOLD_EFLAG) != 0;
		if (newBold) eFlags |= BOLD_EFLAG; else eFlags &= ~BOLD_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__BOLD, oldBold, newBold));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isItalic() {
		return (eFlags & ITALIC_EFLAG) != 0;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setItalic(boolean newItalic) {
		boolean oldItalic = (eFlags & ITALIC_EFLAG) != 0;
		if (newItalic) eFlags |= ITALIC_EFLAG; else eFlags &= ~ITALIC_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__ITALIC, oldItalic, newItalic));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isUnderline() {
		return (eFlags & UNDERLINE_EFLAG) != 0;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setUnderline(boolean newUnderline) {
		boolean oldUnderline = (eFlags & UNDERLINE_EFLAG) != 0;
		if (newUnderline) eFlags |= UNDERLINE_EFLAG; else eFlags &= ~UNDERLINE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__UNDERLINE, oldUnderline, newUnderline));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isStrikeThrough() {
		return (eFlags & STRIKE_THROUGH_EFLAG) != 0;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setStrikeThrough(boolean newStrikeThrough) {
		boolean oldStrikeThrough = (eFlags & STRIKE_THROUGH_EFLAG) != 0;
		if (newStrikeThrough) eFlags |= STRIKE_THROUGH_EFLAG; else eFlags &= ~STRIKE_THROUGH_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__STRIKE_THROUGH, oldStrikeThrough, newStrikeThrough));
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.FONT_STYLE__FONT_COLOR:
				return new Integer(getFontColor());
			case NotationPackage.FONT_STYLE__FONT_NAME:
				return getFontName();
			case NotationPackage.FONT_STYLE__FONT_HEIGHT:
				return new Integer(getFontHeight());
			case NotationPackage.FONT_STYLE__BOLD:
				return isBold() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.FONT_STYLE__ITALIC:
				return isItalic() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.FONT_STYLE__UNDERLINE:
				return isUnderline() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.FONT_STYLE__STRIKE_THROUGH:
				return isStrikeThrough() ? Boolean.TRUE : Boolean.FALSE;
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.FONT_STYLE__FONT_COLOR:
				setFontColor(((Integer)newValue).intValue());
				return;
			case NotationPackage.FONT_STYLE__FONT_NAME:
				setFontName((String)newValue);
				return;
			case NotationPackage.FONT_STYLE__FONT_HEIGHT:
				setFontHeight(((Integer)newValue).intValue());
				return;
			case NotationPackage.FONT_STYLE__BOLD:
				setBold(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.FONT_STYLE__ITALIC:
				setItalic(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.FONT_STYLE__UNDERLINE:
				setUnderline(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.FONT_STYLE__STRIKE_THROUGH:
				setStrikeThrough(((Boolean)newValue).booleanValue());
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.FONT_STYLE__FONT_COLOR:
				setFontColor(FONT_COLOR_EDEFAULT);
				return;
			case NotationPackage.FONT_STYLE__FONT_NAME:
				setFontName(FONT_NAME_EDEFAULT);
				return;
			case NotationPackage.FONT_STYLE__FONT_HEIGHT:
				setFontHeight(FONT_HEIGHT_EDEFAULT);
				return;
			case NotationPackage.FONT_STYLE__BOLD:
				setBold(BOLD_EDEFAULT);
				return;
			case NotationPackage.FONT_STYLE__ITALIC:
				setItalic(ITALIC_EDEFAULT);
				return;
			case NotationPackage.FONT_STYLE__UNDERLINE:
				setUnderline(UNDERLINE_EDEFAULT);
				return;
			case NotationPackage.FONT_STYLE__STRIKE_THROUGH:
				setStrikeThrough(STRIKE_THROUGH_EDEFAULT);
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.FONT_STYLE__FONT_COLOR:
				return fontColor != FONT_COLOR_EDEFAULT;
			case NotationPackage.FONT_STYLE__FONT_NAME:
				return FONT_NAME_EDEFAULT == null ? fontName != null : !FONT_NAME_EDEFAULT.equals(fontName);
			case NotationPackage.FONT_STYLE__FONT_HEIGHT:
				return fontHeight != FONT_HEIGHT_EDEFAULT;
			case NotationPackage.FONT_STYLE__BOLD:
				return ((eFlags & BOLD_EFLAG) != 0) != BOLD_EDEFAULT;
			case NotationPackage.FONT_STYLE__ITALIC:
				return ((eFlags & ITALIC_EFLAG) != 0) != ITALIC_EDEFAULT;
			case NotationPackage.FONT_STYLE__UNDERLINE:
				return ((eFlags & UNDERLINE_EFLAG) != 0) != UNDERLINE_EDEFAULT;
			case NotationPackage.FONT_STYLE__STRIKE_THROUGH:
				return ((eFlags & STRIKE_THROUGH_EFLAG) != 0) != STRIKE_THROUGH_EDEFAULT;
		}
		return eDynamicIsSet(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getFontColor() {
		return fontColor;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setFontColor(int newFontColor) {
		int oldFontColor = fontColor;
		fontColor = newFontColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__FONT_COLOR, oldFontColor, fontColor));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (fontColor: "); //$NON-NLS-1$
		result.append(fontColor);
		result.append(", fontName: "); //$NON-NLS-1$
		result.append(fontName);
		result.append(", fontHeight: "); //$NON-NLS-1$
		result.append(fontHeight);
		result.append(", bold: "); //$NON-NLS-1$
		result.append((eFlags & BOLD_EFLAG) != 0);
		result.append(", italic: "); //$NON-NLS-1$
		result.append((eFlags & ITALIC_EFLAG) != 0);
		result.append(", underline: "); //$NON-NLS-1$
		result.append((eFlags & UNDERLINE_EFLAG) != 0);
		result.append(", strikeThrough: "); //$NON-NLS-1$
		result.append((eFlags & STRIKE_THROUGH_EFLAG) != 0);
		result.append(')');
		return result.toString();
	}

} //FontStyleImpl
@


1.6
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d42 1
a42 1
public class FontStyleImpl extends NotationObjectImpl implements FontStyle {
a333 2
			case NotationPackage.FONT_STYLE__UUID:
				return getUUID();
a358 3
			case NotationPackage.FONT_STYLE__UUID:
				setUUID((byte[])newValue);
				return;
a390 3
			case NotationPackage.FONT_STYLE__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a422 2
			case NotationPackage.FONT_STYLE__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@a16 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d42 1
a42 1
public class FontStyleImpl extends FlatEObjectImpl implements FontStyle {
d334 2
d361 3
d396 3
d431 2
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d45 2
a46 2
     * The default value of the '{@@link #getFontColor() <em>Font Color</em>}' attribute.
     * <!-- begin-user-doc -->
d48 4
a51 4
     * @@see #getFontColor()
     * @@generated
     * @@ordered
     */
d55 2
a56 2
     * The cached value of the '{@@link #getFontColor() <em>Font Color</em>}' attribute.
     * <!-- begin-user-doc -->
d58 4
a61 4
     * @@see #getFontColor()
     * @@generated
     * @@ordered
     */
d65 2
a66 2
     * The default value of the '{@@link #getFontName() <em>Font Name</em>}' attribute.
     * <!-- begin-user-doc -->
d68 4
a71 4
     * @@see #getFontName()
     * @@generated
     * @@ordered
     */
d75 2
a76 2
     * The cached value of the '{@@link #getFontName() <em>Font Name</em>}' attribute.
     * <!-- begin-user-doc -->
d78 4
a81 4
     * @@see #getFontName()
     * @@generated
     * @@ordered
     */
d85 2
a86 2
     * The default value of the '{@@link #getFontHeight() <em>Font Height</em>}' attribute.
     * <!-- begin-user-doc -->
d88 4
a91 4
     * @@see #getFontHeight()
     * @@generated
     * @@ordered
     */
d95 2
a96 2
     * The cached value of the '{@@link #getFontHeight() <em>Font Height</em>}' attribute.
     * <!-- begin-user-doc -->
d98 4
a101 4
     * @@see #getFontHeight()
     * @@generated
     * @@ordered
     */
d105 2
a106 2
     * The default value of the '{@@link #isBold() <em>Bold</em>}' attribute.
     * <!-- begin-user-doc -->
d108 4
a111 4
     * @@see #isBold()
     * @@generated
     * @@ordered
     */
d115 2
a116 2
     * The flag representing the value of the '{@@link #isBold() <em>Bold</em>}' attribute.
     * <!-- begin-user-doc -->
d118 4
a121 4
     * @@see #isBold()
     * @@generated
     * @@ordered
     */
d125 2
a126 2
     * The default value of the '{@@link #isItalic() <em>Italic</em>}' attribute.
     * <!-- begin-user-doc -->
d128 4
a131 4
     * @@see #isItalic()
     * @@generated
     * @@ordered
     */
d135 2
a136 2
     * The flag representing the value of the '{@@link #isItalic() <em>Italic</em>}' attribute.
     * <!-- begin-user-doc -->
d138 4
a141 4
     * @@see #isItalic()
     * @@generated
     * @@ordered
     */
d145 2
a146 2
     * The default value of the '{@@link #isUnderline() <em>Underline</em>}' attribute.
     * <!-- begin-user-doc -->
d148 4
a151 4
     * @@see #isUnderline()
     * @@generated
     * @@ordered
     */
d155 2
a156 2
     * The flag representing the value of the '{@@link #isUnderline() <em>Underline</em>}' attribute.
     * <!-- begin-user-doc -->
d158 4
a161 4
     * @@see #isUnderline()
     * @@generated
     * @@ordered
     */
d165 2
a166 2
     * The default value of the '{@@link #isStrikeThrough() <em>Strike Through</em>}' attribute.
     * <!-- begin-user-doc -->
d168 4
a171 4
     * @@see #isStrikeThrough()
     * @@generated
     * @@ordered
     */
d175 2
a176 2
     * The flag representing the value of the '{@@link #isStrikeThrough() <em>Strike Through</em>}' attribute.
     * <!-- begin-user-doc -->
d178 4
a181 4
     * @@see #isStrikeThrough()
     * @@generated
     * @@ordered
     */
d185 1
a185 1
     * <!-- begin-user-doc -->
d187 2
a188 2
     * @@generated
     */
d190 2
a191 2
        super();
    }
d194 1
a194 1
     * <!-- begin-user-doc -->
d196 2
a197 2
     * @@generated
     */
d199 2
a200 2
        return NotationPackage.Literals.FONT_STYLE;
    }
d203 1
a203 1
     * <!-- begin-user-doc -->
d205 2
a206 2
     * @@generated
     */
d208 2
a209 2
        return fontName;
    }
d224 1
a224 1
     * <!-- begin-user-doc -->
d226 2
a227 2
     * @@generated
     */
d229 2
a230 2
        return fontHeight;
    }
d233 1
a233 1
     * <!-- begin-user-doc -->
d235 2
a236 2
     * @@generated
     */
d238 5
a242 5
        int oldFontHeight = fontHeight;
        fontHeight = newFontHeight;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__FONT_HEIGHT, oldFontHeight, fontHeight));
    }
d245 1
a245 1
     * <!-- begin-user-doc -->
d247 2
a248 2
     * @@generated
     */
d250 2
a251 2
        return (eFlags & BOLD_EFLAG) != 0;
    }
d254 1
a254 1
     * <!-- begin-user-doc -->
d256 2
a257 2
     * @@generated
     */
d259 5
a263 5
        boolean oldBold = (eFlags & BOLD_EFLAG) != 0;
        if (newBold) eFlags |= BOLD_EFLAG; else eFlags &= ~BOLD_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__BOLD, oldBold, newBold));
    }
d266 1
a266 1
     * <!-- begin-user-doc -->
d268 2
a269 2
     * @@generated
     */
d271 2
a272 2
        return (eFlags & ITALIC_EFLAG) != 0;
    }
d275 1
a275 1
     * <!-- begin-user-doc -->
d277 2
a278 2
     * @@generated
     */
d280 5
a284 5
        boolean oldItalic = (eFlags & ITALIC_EFLAG) != 0;
        if (newItalic) eFlags |= ITALIC_EFLAG; else eFlags &= ~ITALIC_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__ITALIC, oldItalic, newItalic));
    }
d287 1
a287 1
     * <!-- begin-user-doc -->
d289 2
a290 2
     * @@generated
     */
d292 2
a293 2
        return (eFlags & UNDERLINE_EFLAG) != 0;
    }
d296 1
a296 1
     * <!-- begin-user-doc -->
d298 2
a299 2
     * @@generated
     */
d301 5
a305 5
        boolean oldUnderline = (eFlags & UNDERLINE_EFLAG) != 0;
        if (newUnderline) eFlags |= UNDERLINE_EFLAG; else eFlags &= ~UNDERLINE_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__UNDERLINE, oldUnderline, newUnderline));
    }
d308 1
a308 1
     * <!-- begin-user-doc -->
d310 2
a311 2
     * @@generated
     */
d313 2
a314 2
        return (eFlags & STRIKE_THROUGH_EFLAG) != 0;
    }
d317 1
a317 1
     * <!-- begin-user-doc -->
d319 2
a320 2
     * @@generated
     */
d322 5
a326 5
        boolean oldStrikeThrough = (eFlags & STRIKE_THROUGH_EFLAG) != 0;
        if (newStrikeThrough) eFlags |= STRIKE_THROUGH_EFLAG; else eFlags &= ~STRIKE_THROUGH_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__STRIKE_THROUGH, oldStrikeThrough, newStrikeThrough));
    }
d329 1
a329 1
     * <!-- begin-user-doc -->
d331 2
a332 2
     * @@generated
     */
d334 18
a351 18
        switch (featureID) {
            case NotationPackage.FONT_STYLE__FONT_COLOR:
                return new Integer(getFontColor());
            case NotationPackage.FONT_STYLE__FONT_NAME:
                return getFontName();
            case NotationPackage.FONT_STYLE__FONT_HEIGHT:
                return new Integer(getFontHeight());
            case NotationPackage.FONT_STYLE__BOLD:
                return isBold() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.FONT_STYLE__ITALIC:
                return isItalic() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.FONT_STYLE__UNDERLINE:
                return isUnderline() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.FONT_STYLE__STRIKE_THROUGH:
                return isStrikeThrough() ? Boolean.TRUE : Boolean.FALSE;
        }
        return eDynamicGet(featureID, resolve, coreType);
    }
d354 1
a354 1
     * <!-- begin-user-doc -->
d356 2
a357 2
     * @@generated
     */
d359 25
a383 25
        switch (featureID) {
            case NotationPackage.FONT_STYLE__FONT_COLOR:
                setFontColor(((Integer)newValue).intValue());
                return;
            case NotationPackage.FONT_STYLE__FONT_NAME:
                setFontName((String)newValue);
                return;
            case NotationPackage.FONT_STYLE__FONT_HEIGHT:
                setFontHeight(((Integer)newValue).intValue());
                return;
            case NotationPackage.FONT_STYLE__BOLD:
                setBold(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.FONT_STYLE__ITALIC:
                setItalic(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.FONT_STYLE__UNDERLINE:
                setUnderline(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.FONT_STYLE__STRIKE_THROUGH:
                setStrikeThrough(((Boolean)newValue).booleanValue());
                return;
        }
        eDynamicSet(featureID, newValue);
    }
d386 1
a386 1
     * <!-- begin-user-doc -->
d388 2
a389 2
     * @@generated
     */
d391 25
a415 25
        switch (featureID) {
            case NotationPackage.FONT_STYLE__FONT_COLOR:
                setFontColor(FONT_COLOR_EDEFAULT);
                return;
            case NotationPackage.FONT_STYLE__FONT_NAME:
                setFontName(FONT_NAME_EDEFAULT);
                return;
            case NotationPackage.FONT_STYLE__FONT_HEIGHT:
                setFontHeight(FONT_HEIGHT_EDEFAULT);
                return;
            case NotationPackage.FONT_STYLE__BOLD:
                setBold(BOLD_EDEFAULT);
                return;
            case NotationPackage.FONT_STYLE__ITALIC:
                setItalic(ITALIC_EDEFAULT);
                return;
            case NotationPackage.FONT_STYLE__UNDERLINE:
                setUnderline(UNDERLINE_EDEFAULT);
                return;
            case NotationPackage.FONT_STYLE__STRIKE_THROUGH:
                setStrikeThrough(STRIKE_THROUGH_EDEFAULT);
                return;
        }
        eDynamicUnset(featureID);
    }
d418 1
a418 1
     * <!-- begin-user-doc -->
d420 2
a421 2
     * @@generated
     */
d423 18
a440 18
        switch (featureID) {
            case NotationPackage.FONT_STYLE__FONT_COLOR:
                return fontColor != FONT_COLOR_EDEFAULT;
            case NotationPackage.FONT_STYLE__FONT_NAME:
                return FONT_NAME_EDEFAULT == null ? fontName != null : !FONT_NAME_EDEFAULT.equals(fontName);
            case NotationPackage.FONT_STYLE__FONT_HEIGHT:
                return fontHeight != FONT_HEIGHT_EDEFAULT;
            case NotationPackage.FONT_STYLE__BOLD:
                return ((eFlags & BOLD_EFLAG) != 0) != BOLD_EDEFAULT;
            case NotationPackage.FONT_STYLE__ITALIC:
                return ((eFlags & ITALIC_EFLAG) != 0) != ITALIC_EDEFAULT;
            case NotationPackage.FONT_STYLE__UNDERLINE:
                return ((eFlags & UNDERLINE_EFLAG) != 0) != UNDERLINE_EDEFAULT;
            case NotationPackage.FONT_STYLE__STRIKE_THROUGH:
                return ((eFlags & STRIKE_THROUGH_EFLAG) != 0) != STRIKE_THROUGH_EDEFAULT;
        }
        return eDynamicIsSet(featureID);
    }
d443 1
a443 1
     * <!-- begin-user-doc -->
d445 2
a446 2
     * @@generated
     */
d448 2
a449 2
        return fontColor;
    }
d452 1
a452 1
     * <!-- begin-user-doc -->
d454 2
a455 2
     * @@generated
     */
d457 5
a461 5
        int oldFontColor = fontColor;
        fontColor = newFontColor;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__FONT_COLOR, oldFontColor, fontColor));
    }
d464 1
a464 1
     * <!-- begin-user-doc -->
d466 2
a467 2
     * @@generated
     */
d469 1
a469 1
        if (eIsProxy()) return super.toString();
d471 18
a488 18
        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (fontColor: "); //$NON-NLS-1$
        result.append(fontColor);
        result.append(", fontName: "); //$NON-NLS-1$
        result.append(fontName);
        result.append(", fontHeight: "); //$NON-NLS-1$
        result.append(fontHeight);
        result.append(", bold: "); //$NON-NLS-1$
        result.append((eFlags & BOLD_EFLAG) != 0);
        result.append(", italic: "); //$NON-NLS-1$
        result.append((eFlags & ITALIC_EFLAG) != 0);
        result.append(", underline: "); //$NON-NLS-1$
        result.append((eFlags & UNDERLINE_EFLAG) != 0);
        result.append(", strikeThrough: "); //$NON-NLS-1$
        result.append((eFlags & STRIKE_THROUGH_EFLAG) != 0);
        result.append(')');
        return result.toString();
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d17 1
a17 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
d43 1
a43 1
public class FontStyleImpl extends EObjectImpl implements FontStyle {
d350 1
a350 1
        return super.eGet(featureID, resolve, coreType);
d382 1
a382 1
        super.eSet(featureID, newValue);
d414 1
a414 1
        super.eUnset(featureID);
d439 1
a439 1
        return super.eIsSet(featureID);
@


1.3.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@d17 1
a17 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d43 1
a43 1
public class FontStyleImpl extends FlatEObjectImpl implements FontStyle {
d350 1
a350 1
        return eDynamicGet(featureID, resolve, coreType);
d382 1
a382 1
        eDynamicSet(featureID, newValue);
d414 1
a414 1
        eDynamicUnset(featureID);
d439 1
a439 1
        return eDynamicIsSet(featureID);
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a15 1
import org.eclipse.emf.ecore.EStructuralFeature;
a17 1

d44 8
a51 8
	/**
	 * The default value of the '{@@link #getFontColor() <em>Font Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontColor()
	 * @@generated
	 * @@ordered
	 */
d54 8
a61 8
	/**
	 * The cached value of the '{@@link #getFontColor() <em>Font Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontColor()
	 * @@generated
	 * @@ordered
	 */
d64 8
a71 8
	/**
	 * The default value of the '{@@link #getFontName() <em>Font Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontName()
	 * @@generated
	 * @@ordered
	 */
d74 8
a81 8
	/**
	 * The cached value of the '{@@link #getFontName() <em>Font Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontName()
	 * @@generated
	 * @@ordered
	 */
d84 8
a91 8
	/**
	 * The default value of the '{@@link #getFontHeight() <em>Font Height</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontHeight()
	 * @@generated
	 * @@ordered
	 */
d94 8
a101 8
	/**
	 * The cached value of the '{@@link #getFontHeight() <em>Font Height</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFontHeight()
	 * @@generated
	 * @@ordered
	 */
d104 8
a111 8
	/**
	 * The default value of the '{@@link #isBold() <em>Bold</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isBold()
	 * @@generated
	 * @@ordered
	 */
d114 8
a121 8
	/**
	 * The flag representing the value of the '{@@link #isBold() <em>Bold</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isBold()
	 * @@generated
	 * @@ordered
	 */
d124 8
a131 8
	/**
	 * The default value of the '{@@link #isItalic() <em>Italic</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isItalic()
	 * @@generated
	 * @@ordered
	 */
d134 8
a141 8
	/**
	 * The flag representing the value of the '{@@link #isItalic() <em>Italic</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isItalic()
	 * @@generated
	 * @@ordered
	 */
d144 8
a151 8
	/**
	 * The default value of the '{@@link #isUnderline() <em>Underline</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isUnderline()
	 * @@generated
	 * @@ordered
	 */
d154 8
a161 8
	/**
	 * The flag representing the value of the '{@@link #isUnderline() <em>Underline</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isUnderline()
	 * @@generated
	 * @@ordered
	 */
d164 8
a171 8
	/**
	 * The default value of the '{@@link #isStrikeThrough() <em>Strike Through</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isStrikeThrough()
	 * @@generated
	 * @@ordered
	 */
d174 8
a181 8
	/**
	 * The flag representing the value of the '{@@link #isStrikeThrough() <em>Strike Through</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isStrikeThrough()
	 * @@generated
	 * @@ordered
	 */
d184 2
a185 2
	/**
	 * <!-- begin-user-doc -->
d187 2
a188 2
	 * @@generated
	 */
d190 2
a191 2
		super();
	}
d193 2
a194 2
	/**
	 * <!-- begin-user-doc -->
d196 2
a197 2
	 * @@generated
	 */
d199 2
a200 2
		return NotationPackage.eINSTANCE.getFontStyle();
	}
d202 2
a203 2
	/**
	 * <!-- begin-user-doc -->
d205 2
a206 2
	 * @@generated
	 */
d208 2
a209 2
		return fontName;
	}
d223 2
a224 2
	/**
	 * <!-- begin-user-doc -->
d226 2
a227 2
	 * @@generated
	 */
d229 2
a230 2
		return fontHeight;
	}
d232 2
a233 2
	/**
	 * <!-- begin-user-doc -->
d235 2
a236 2
	 * @@generated
	 */
d238 5
a242 5
		int oldFontHeight = fontHeight;
		fontHeight = newFontHeight;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__FONT_HEIGHT, oldFontHeight, fontHeight));
	}
d244 2
a245 2
	/**
	 * <!-- begin-user-doc -->
d247 2
a248 2
	 * @@generated
	 */
d250 2
a251 2
		return (eFlags & BOLD_EFLAG) != 0;
	}
d253 2
a254 2
	/**
	 * <!-- begin-user-doc -->
d256 2
a257 2
	 * @@generated
	 */
d259 5
a263 5
		boolean oldBold = (eFlags & BOLD_EFLAG) != 0;
		if (newBold) eFlags |= BOLD_EFLAG; else eFlags &= ~BOLD_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__BOLD, oldBold, newBold));
	}
d265 2
a266 2
	/**
	 * <!-- begin-user-doc -->
d268 2
a269 2
	 * @@generated
	 */
d271 2
a272 2
		return (eFlags & ITALIC_EFLAG) != 0;
	}
d274 2
a275 2
	/**
	 * <!-- begin-user-doc -->
d277 2
a278 2
	 * @@generated
	 */
d280 5
a284 5
		boolean oldItalic = (eFlags & ITALIC_EFLAG) != 0;
		if (newItalic) eFlags |= ITALIC_EFLAG; else eFlags &= ~ITALIC_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__ITALIC, oldItalic, newItalic));
	}
d286 2
a287 2
	/**
	 * <!-- begin-user-doc -->
d289 2
a290 2
	 * @@generated
	 */
d292 2
a293 2
		return (eFlags & UNDERLINE_EFLAG) != 0;
	}
d295 2
a296 2
	/**
	 * <!-- begin-user-doc -->
d298 2
a299 2
	 * @@generated
	 */
d301 5
a305 5
		boolean oldUnderline = (eFlags & UNDERLINE_EFLAG) != 0;
		if (newUnderline) eFlags |= UNDERLINE_EFLAG; else eFlags &= ~UNDERLINE_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__UNDERLINE, oldUnderline, newUnderline));
	}
d307 2
a308 2
	/**
	 * <!-- begin-user-doc -->
d310 2
a311 2
	 * @@generated
	 */
d313 2
a314 2
		return (eFlags & STRIKE_THROUGH_EFLAG) != 0;
	}
d316 2
a317 2
	/**
	 * <!-- begin-user-doc -->
d319 2
a320 2
	 * @@generated
	 */
d322 119
a440 5
		boolean oldStrikeThrough = (eFlags & STRIKE_THROUGH_EFLAG) != 0;
		if (newStrikeThrough) eFlags |= STRIKE_THROUGH_EFLAG; else eFlags &= ~STRIKE_THROUGH_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__STRIKE_THROUGH, oldStrikeThrough, newStrikeThrough));
	}
d442 2
a443 2
	/**
	 * <!-- begin-user-doc -->
d445 2
a446 2
	 * @@generated
	 */
d448 2
a449 2
		return fontColor;
	}
d451 2
a452 2
	/**
	 * <!-- begin-user-doc -->
d454 2
a455 2
	 * @@generated
	 */
d457 5
a461 5
		int oldFontColor = fontColor;
		fontColor = newFontColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.FONT_STYLE__FONT_COLOR, oldFontColor, fontColor));
	}
d463 2
a464 2
	/**
	 * <!-- begin-user-doc -->
d466 2
a467 116
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.FONT_STYLE__FONT_COLOR:
				return new Integer(getFontColor());
			case NotationPackage.FONT_STYLE__FONT_NAME:
				return getFontName();
			case NotationPackage.FONT_STYLE__FONT_HEIGHT:
				return new Integer(getFontHeight());
			case NotationPackage.FONT_STYLE__BOLD:
				return isBold() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.FONT_STYLE__ITALIC:
				return isItalic() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.FONT_STYLE__UNDERLINE:
				return isUnderline() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.FONT_STYLE__STRIKE_THROUGH:
				return isStrikeThrough() ? Boolean.TRUE : Boolean.FALSE;
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.FONT_STYLE__FONT_COLOR:
				setFontColor(((Integer)newValue).intValue());
				return;
			case NotationPackage.FONT_STYLE__FONT_NAME:
				setFontName((String)newValue);
				return;
			case NotationPackage.FONT_STYLE__FONT_HEIGHT:
				setFontHeight(((Integer)newValue).intValue());
				return;
			case NotationPackage.FONT_STYLE__BOLD:
				setBold(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.FONT_STYLE__ITALIC:
				setItalic(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.FONT_STYLE__UNDERLINE:
				setUnderline(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.FONT_STYLE__STRIKE_THROUGH:
				setStrikeThrough(((Boolean)newValue).booleanValue());
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.FONT_STYLE__FONT_COLOR:
				setFontColor(FONT_COLOR_EDEFAULT);
				return;
			case NotationPackage.FONT_STYLE__FONT_NAME:
				setFontName(FONT_NAME_EDEFAULT);
				return;
			case NotationPackage.FONT_STYLE__FONT_HEIGHT:
				setFontHeight(FONT_HEIGHT_EDEFAULT);
				return;
			case NotationPackage.FONT_STYLE__BOLD:
				setBold(BOLD_EDEFAULT);
				return;
			case NotationPackage.FONT_STYLE__ITALIC:
				setItalic(ITALIC_EDEFAULT);
				return;
			case NotationPackage.FONT_STYLE__UNDERLINE:
				setUnderline(UNDERLINE_EDEFAULT);
				return;
			case NotationPackage.FONT_STYLE__STRIKE_THROUGH:
				setStrikeThrough(STRIKE_THROUGH_EDEFAULT);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.FONT_STYLE__FONT_COLOR:
				return fontColor != FONT_COLOR_EDEFAULT;
			case NotationPackage.FONT_STYLE__FONT_NAME:
				return FONT_NAME_EDEFAULT == null ? fontName != null : !FONT_NAME_EDEFAULT.equals(fontName);
			case NotationPackage.FONT_STYLE__FONT_HEIGHT:
				return fontHeight != FONT_HEIGHT_EDEFAULT;
			case NotationPackage.FONT_STYLE__BOLD:
				return ((eFlags & BOLD_EFLAG) != 0) != BOLD_EDEFAULT;
			case NotationPackage.FONT_STYLE__ITALIC:
				return ((eFlags & ITALIC_EFLAG) != 0) != ITALIC_EDEFAULT;
			case NotationPackage.FONT_STYLE__UNDERLINE:
				return ((eFlags & UNDERLINE_EFLAG) != 0) != UNDERLINE_EDEFAULT;
			case NotationPackage.FONT_STYLE__STRIKE_THROUGH:
				return ((eFlags & STRIKE_THROUGH_EFLAG) != 0) != STRIKE_THROUGH_EDEFAULT;
		}
		return eDynamicIsSet(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d469 1
a469 1
		if (eIsProxy()) return super.toString();
d471 18
a488 18
		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (fontColor: "); //$NON-NLS-1$
		result.append(fontColor);
		result.append(", fontName: "); //$NON-NLS-1$
		result.append(fontName);
		result.append(", fontHeight: "); //$NON-NLS-1$
		result.append(fontHeight);
		result.append(", bold: "); //$NON-NLS-1$
		result.append((eFlags & BOLD_EFLAG) != 0);
		result.append(", italic: "); //$NON-NLS-1$
		result.append((eFlags & ITALIC_EFLAG) != 0);
		result.append(", underline: "); //$NON-NLS-1$
		result.append((eFlags & UNDERLINE_EFLAG) != 0);
		result.append(", strikeThrough: "); //$NON-NLS-1$
		result.append((eFlags & STRIKE_THROUGH_EFLAG) != 0);
		result.append(')');
		return result.toString();
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

