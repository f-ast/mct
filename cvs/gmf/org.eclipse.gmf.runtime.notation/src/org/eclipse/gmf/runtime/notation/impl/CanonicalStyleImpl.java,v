head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080507-1326:1.7
	v20080503-1740:1.6
	v20080425-1959:1.5
	v20080407-2250:1.5
	v20080407-1545:1.5
	v20080331-1625:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080114-2222:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	3e924820f4604567;

1.6
date	2008.05.03.18.33.02;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	1c13481cafcc4567;

1.5
date	2007.05.17.16.26.50;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71d9464c82444567;

1.4
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.17.20.27.55;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.runtime.notation.CanonicalStyle;
import org.eclipse.gmf.runtime.notation.NotationPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Canonical Style</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.CanonicalStyleImpl#isCanonical <em>Canonical</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy org.eclipse.gmf.runtime.notation.*
 */
public class CanonicalStyleImpl extends NotationEObjectImpl implements CanonicalStyle {
    /**
	 * The default value of the '{@@link #isCanonical() <em>Canonical</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isCanonical()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean CANONICAL_EDEFAULT = true;

    /**
	 * The flag representing the value of the '{@@link #isCanonical() <em>Canonical</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isCanonical()
	 * @@generated
	 * @@ordered
	 */
	protected static final int CANONICAL_EFLAG = 1 << 8;

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected CanonicalStyleImpl() {
		super();
		eFlags |= CANONICAL_EFLAG;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.CANONICAL_STYLE;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isCanonical() {
		return (eFlags & CANONICAL_EFLAG) != 0;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setCanonical(boolean newCanonical) {
		boolean oldCanonical = (eFlags & CANONICAL_EFLAG) != 0;
		if (newCanonical) eFlags |= CANONICAL_EFLAG; else eFlags &= ~CANONICAL_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CANONICAL_STYLE__CANONICAL, oldCanonical, newCanonical));
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.CANONICAL_STYLE__CANONICAL:
				return isCanonical() ? Boolean.TRUE : Boolean.FALSE;
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.CANONICAL_STYLE__CANONICAL:
				setCanonical(((Boolean)newValue).booleanValue());
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.CANONICAL_STYLE__CANONICAL:
				setCanonical(CANONICAL_EDEFAULT);
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.CANONICAL_STYLE__CANONICAL:
				return ((eFlags & CANONICAL_EFLAG) != 0) != CANONICAL_EDEFAULT;
		}
		return eDynamicIsSet(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (canonical: "); //$NON-NLS-1$
		result.append((eFlags & CANONICAL_EFLAG) != 0);
		result.append(')');
		return result.toString();
	}

} //CanonicalStyleImpl
@


1.6
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d36 1
a36 1
public class CanonicalStyleImpl extends NotationObjectImpl implements CanonicalStyle {
a103 2
			case NotationPackage.CANONICAL_STYLE__UUID:
				return getUUID();
a116 3
			case NotationPackage.CANONICAL_STYLE__UUID:
				setUUID((byte[])newValue);
				return;
a130 3
			case NotationPackage.CANONICAL_STYLE__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a144 2
			case NotationPackage.CANONICAL_STYLE__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@a16 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d36 1
a36 1
public class CanonicalStyleImpl extends FlatEObjectImpl implements CanonicalStyle {
d104 2
d119 3
d136 3
d153 2
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d39 2
a40 2
     * The default value of the '{@@link #isCanonical() <em>Canonical</em>}' attribute.
     * <!-- begin-user-doc -->
d42 4
a45 4
     * @@see #isCanonical()
     * @@generated
     * @@ordered
     */
d49 2
a50 2
     * The flag representing the value of the '{@@link #isCanonical() <em>Canonical</em>}' attribute.
     * <!-- begin-user-doc -->
d52 4
a55 4
     * @@see #isCanonical()
     * @@generated
     * @@ordered
     */
d59 1
a59 1
     * <!-- begin-user-doc -->
d61 2
a62 2
     * @@generated
     */
d64 3
a66 3
        super();
        eFlags |= CANONICAL_EFLAG;
    }
d69 1
a69 1
     * <!-- begin-user-doc -->
d71 2
a72 2
     * @@generated
     */
d74 2
a75 2
        return NotationPackage.Literals.CANONICAL_STYLE;
    }
d78 1
a78 1
     * <!-- begin-user-doc -->
d80 2
a81 2
     * @@generated
     */
d83 2
a84 2
        return (eFlags & CANONICAL_EFLAG) != 0;
    }
d87 1
a87 1
     * <!-- begin-user-doc -->
d89 2
a90 2
     * @@generated
     */
d92 5
a96 5
        boolean oldCanonical = (eFlags & CANONICAL_EFLAG) != 0;
        if (newCanonical) eFlags |= CANONICAL_EFLAG; else eFlags &= ~CANONICAL_EFLAG;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CANONICAL_STYLE__CANONICAL, oldCanonical, newCanonical));
    }
d99 1
a99 1
     * <!-- begin-user-doc -->
d101 2
a102 2
     * @@generated
     */
d104 6
a109 6
        switch (featureID) {
            case NotationPackage.CANONICAL_STYLE__CANONICAL:
                return isCanonical() ? Boolean.TRUE : Boolean.FALSE;
        }
        return eDynamicGet(featureID, resolve, coreType);
    }
d112 1
a112 1
     * <!-- begin-user-doc -->
d114 2
a115 2
     * @@generated
     */
d117 7
a123 7
        switch (featureID) {
            case NotationPackage.CANONICAL_STYLE__CANONICAL:
                setCanonical(((Boolean)newValue).booleanValue());
                return;
        }
        eDynamicSet(featureID, newValue);
    }
d126 1
a126 1
     * <!-- begin-user-doc -->
d128 2
a129 2
     * @@generated
     */
d131 7
a137 7
        switch (featureID) {
            case NotationPackage.CANONICAL_STYLE__CANONICAL:
                setCanonical(CANONICAL_EDEFAULT);
                return;
        }
        eDynamicUnset(featureID);
    }
d140 1
a140 1
     * <!-- begin-user-doc -->
d142 2
a143 2
     * @@generated
     */
d145 6
a150 6
        switch (featureID) {
            case NotationPackage.CANONICAL_STYLE__CANONICAL:
                return ((eFlags & CANONICAL_EFLAG) != 0) != CANONICAL_EDEFAULT;
        }
        return eDynamicIsSet(featureID);
    }
d153 1
a153 1
     * <!-- begin-user-doc -->
d155 2
a156 2
     * @@generated
     */
d158 1
a158 1
        if (eIsProxy()) return super.toString();
d160 6
a165 6
        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (canonical: "); //$NON-NLS-1$
        result.append((eFlags & CANONICAL_EFLAG) != 0);
        result.append(')');
        return result.toString();
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d17 1
a17 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
d37 1
a37 1
public class CanonicalStyleImpl extends EObjectImpl implements CanonicalStyle {
d108 1
a108 1
        return super.eGet(featureID, resolve, coreType);
d122 1
a122 1
        super.eSet(featureID, newValue);
d136 1
a136 1
        super.eUnset(featureID);
d149 1
a149 1
        return super.eIsSet(featureID);
@


1.3.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@d17 1
a17 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d37 1
a37 1
public class CanonicalStyleImpl extends FlatEObjectImpl implements CanonicalStyle {
d108 1
a108 1
        return eDynamicGet(featureID, resolve, coreType);
d122 1
a122 1
        eDynamicSet(featureID, newValue);
d136 1
a136 1
        eDynamicUnset(featureID);
d149 1
a149 1
        return eDynamicIsSet(featureID);
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a15 1
import org.eclipse.emf.ecore.EStructuralFeature;
a17 1

d38 8
a45 8
	/**
	 * The default value of the '{@@link #isCanonical() <em>Canonical</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isCanonical()
	 * @@generated
	 * @@ordered
	 */
d48 8
a55 8
	/**
	 * The flag representing the value of the '{@@link #isCanonical() <em>Canonical</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isCanonical()
	 * @@generated
	 * @@ordered
	 */
d58 2
a59 2
	/**
	 * <!-- begin-user-doc -->
d61 2
a62 2
	 * @@generated
	 */
d64 3
a66 3
		super();
		eFlags |= CANONICAL_EFLAG;
	}
d68 2
a69 2
	/**
	 * <!-- begin-user-doc -->
d71 2
a72 2
	 * @@generated
	 */
d74 2
a75 2
		return NotationPackage.eINSTANCE.getCanonicalStyle();
	}
d77 2
a78 2
	/**
	 * <!-- begin-user-doc -->
d80 2
a81 2
	 * @@generated
	 */
d83 2
a84 2
		return (eFlags & CANONICAL_EFLAG) != 0;
	}
d86 2
a87 2
	/**
	 * <!-- begin-user-doc -->
d89 2
a90 2
	 * @@generated
	 */
d92 59
a150 59
		boolean oldCanonical = (eFlags & CANONICAL_EFLAG) != 0;
		if (newCanonical) eFlags |= CANONICAL_EFLAG; else eFlags &= ~CANONICAL_EFLAG;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CANONICAL_STYLE__CANONICAL, oldCanonical, newCanonical));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.CANONICAL_STYLE__CANONICAL:
				return isCanonical() ? Boolean.TRUE : Boolean.FALSE;
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.CANONICAL_STYLE__CANONICAL:
				setCanonical(((Boolean)newValue).booleanValue());
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.CANONICAL_STYLE__CANONICAL:
				setCanonical(CANONICAL_EDEFAULT);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.CANONICAL_STYLE__CANONICAL:
				return ((eFlags & CANONICAL_EFLAG) != 0) != CANONICAL_EDEFAULT;
		}
		return eDynamicIsSet(eFeature);
	}
d152 2
a153 2
	/**
	 * <!-- begin-user-doc -->
d155 2
a156 2
	 * @@generated
	 */
d158 1
a158 1
		if (eIsProxy()) return super.toString();
d160 6
a165 6
		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (canonical: "); //$NON-NLS-1$
		result.append((eFlags & CANONICAL_EFLAG) != 0);
		result.append(')');
		return result.toString();
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

