head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080722-1827:1.5
	v20080716-1600:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080507-1326:1.5
	v20080503-1740:1.5
	v20080425-1959:1.5
	v20080407-2250:1.5
	v20080407-1545:1.5
	v20080331-1625:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080114-2222:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.1
	M1_20:1.3
	v20060728-0500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2007.05.17.16.26.50;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71d9464c82444567;

1.4
date	2006.10.03.15.07.27;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.28;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.09.13.16.48.17;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.AbstractEnumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Sorting Direction</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @@see org.eclipse.gmf.runtime.notation.NotationPackage#getSortingDirection()
 * @@model
 * @@generated
 */
/*
 * @@canBeSeenBy %partners
 */
public final class SortingDirection extends AbstractEnumerator {
    /**
	 * The '<em><b>Ascending</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #ASCENDING_LITERAL
	 * @@model name="Ascending"
	 * @@generated
	 * @@ordered
	 */
	public static final int ASCENDING = 0;

    /**
	 * The '<em><b>Descending</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #DESCENDING_LITERAL
	 * @@model name="Descending"
	 * @@generated
	 * @@ordered
	 */
	public static final int DESCENDING = 1;

    /**
	 * The '<em><b>Ascending</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #ASCENDING
	 * @@generated
	 * @@ordered
	 */
	public static final SortingDirection ASCENDING_LITERAL = new SortingDirection(ASCENDING, "Ascending", "Ascending"); //$NON-NLS-2$//$NON-NLS-1$

    /**
	 * The '<em><b>Descending</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #DESCENDING
	 * @@generated
	 * @@ordered
	 */
	public static final SortingDirection DESCENDING_LITERAL = new SortingDirection(DESCENDING, "Descending", "Descending"); //$NON-NLS-2$//$NON-NLS-1$

    /**
	 * An array of all the '<em><b>Sorting Direction</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private static final SortingDirection[] VALUES_ARRAY =
        new SortingDirection[] {
			ASCENDING_LITERAL,
			DESCENDING_LITERAL,
		};

    /**
	 * A public read-only list of all the '<em><b>Sorting Direction</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static final List VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

    /**
	 * Returns the '<em><b>Sorting Direction</b></em>' literal with the specified literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static SortingDirection get(String literal) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			SortingDirection result = VALUES_ARRAY[i];
			if (result.toString().equals(literal)) {
				return result;
			}
		}
		return null;
	}

    /**
	 * Returns the '<em><b>Sorting Direction</b></em>' literal with the specified name.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public static SortingDirection getByName(String name) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			SortingDirection result = VALUES_ARRAY[i];
			if (result.getName().equals(name)) {
				return result;
			}
		}
		return null;
	}

    /**
	 * Returns the '<em><b>Sorting Direction</b></em>' literal with the specified integer value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static SortingDirection get(int value) {
		switch (value) {
			case ASCENDING: return ASCENDING_LITERAL;
			case DESCENDING: return DESCENDING_LITERAL;
		}
		return null;
	}

    /**
	 * Only this class can construct instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    private SortingDirection(int value, String name, String literal) {
		super(value, name, literal);
	}

} //SortingDirection
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d34 2
a35 2
     * The '<em><b>Ascending</b></em>' literal value.
     * <!-- begin-user-doc -->
d37 5
a41 5
     * @@see #ASCENDING_LITERAL
     * @@model name="Ascending"
     * @@generated
     * @@ordered
     */
d45 2
a46 2
     * The '<em><b>Descending</b></em>' literal value.
     * <!-- begin-user-doc -->
d48 5
a52 5
     * @@see #DESCENDING_LITERAL
     * @@model name="Descending"
     * @@generated
     * @@ordered
     */
d56 2
a57 2
     * The '<em><b>Ascending</b></em>' literal object.
     * <!-- begin-user-doc -->
d59 4
a62 4
     * @@see #ASCENDING
     * @@generated
     * @@ordered
     */
d66 2
a67 2
     * The '<em><b>Descending</b></em>' literal object.
     * <!-- begin-user-doc -->
d69 4
a72 4
     * @@see #DESCENDING
     * @@generated
     * @@ordered
     */
d76 2
a77 2
     * An array of all the '<em><b>Sorting Direction</b></em>' enumerators.
     * <!-- begin-user-doc -->
d79 2
a80 2
     * @@generated
     */
d83 3
a85 3
            ASCENDING_LITERAL,
            DESCENDING_LITERAL,
        };
d88 2
a89 2
     * A public read-only list of all the '<em><b>Sorting Direction</b></em>' enumerators.
     * <!-- begin-user-doc -->
d91 2
a92 2
     * @@generated
     */
d96 2
a97 2
     * Returns the '<em><b>Sorting Direction</b></em>' literal with the specified literal value.
     * <!-- begin-user-doc -->
d99 2
a100 2
     * @@generated
     */
d102 8
a109 8
        for (int i = 0; i < VALUES_ARRAY.length; ++i) {
            SortingDirection result = VALUES_ARRAY[i];
            if (result.toString().equals(literal)) {
                return result;
            }
        }
        return null;
    }
d112 2
a113 2
     * Returns the '<em><b>Sorting Direction</b></em>' literal with the specified name.
     * <!-- begin-user-doc -->
d115 2
a116 2
     * @@generated
     */
d118 8
a125 8
        for (int i = 0; i < VALUES_ARRAY.length; ++i) {
            SortingDirection result = VALUES_ARRAY[i];
            if (result.getName().equals(name)) {
                return result;
            }
        }
        return null;
    }
d128 2
a129 2
     * Returns the '<em><b>Sorting Direction</b></em>' literal with the specified integer value.
     * <!-- begin-user-doc -->
d131 2
a132 2
     * @@generated
     */
d134 6
a139 6
        switch (value) {
            case ASCENDING: return ASCENDING_LITERAL;
            case DESCENDING: return DESCENDING_LITERAL;
        }
        return null;	
    }
d142 2
a143 2
     * Only this class can construct instances.
     * <!-- begin-user-doc -->
d145 2
a146 2
     * @@generated
     */
d148 2
a149 2
        super(value, name, literal);
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
@


1.3.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d33 9
a41 9
	/**
	 * The '<em><b>Ascending</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #ASCENDING_LITERAL
	 * @@model name="Ascending"
	 * @@generated
	 * @@ordered
	 */
d44 9
a52 9
	/**
	 * The '<em><b>Descending</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #DESCENDING_LITERAL
	 * @@model name="Descending"
	 * @@generated
	 * @@ordered
	 */
d55 23
a77 23
	/**
	 * The '<em><b>Ascending</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #ASCENDING
	 * @@generated
	 * @@ordered
	 */
	public static final SortingDirection ASCENDING_LITERAL = new SortingDirection(ASCENDING, "Ascending"); //$NON-NLS-1$

	/**
	 * The '<em><b>Descending</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #DESCENDING
	 * @@generated
	 * @@ordered
	 */
	public static final SortingDirection DESCENDING_LITERAL = new SortingDirection(DESCENDING, "Descending"); //$NON-NLS-1$

	/**
	 * An array of all the '<em><b>Sorting Direction</b></em>' enumerators.
	 * <!-- begin-user-doc -->
d79 2
a80 2
	 * @@generated
	 */
d82 8
a89 8
		new SortingDirection[] {
			ASCENDING_LITERAL,
			DESCENDING_LITERAL,
		};

	/**
	 * A public read-only list of all the '<em><b>Sorting Direction</b></em>' enumerators.
	 * <!-- begin-user-doc -->
d91 2
a92 2
	 * @@generated
	 */
d95 35
a129 19
	/**
	 * Returns the '<em><b>Sorting Direction</b></em>' literal with the specified name.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static SortingDirection get(String name) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			SortingDirection result = VALUES_ARRAY[i];
			if (result.toString().equals(name)) {
				return result;
			}
		}
		return null;
	}

	/**
	 * Returns the '<em><b>Sorting Direction</b></em>' literal with the specified value.
	 * <!-- begin-user-doc -->
d131 2
a132 2
	 * @@generated
	 */
d134 16
a149 16
		switch (value) {
			case ASCENDING: return ASCENDING_LITERAL;
			case DESCENDING: return DESCENDING_LITERAL;
		}
		return null;	
	}

	/**
	 * Only this class can construct instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private SortingDirection(int value, String name) {
		super(value, name);
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

