head	1.11;
access;
symbols
	v20081020-0700:1.11
	v20080722-1827:1.11
	v20080716-1600:1.11
	v20080716-1642:1.11
	R2_1_maintenance:1.11.0.2
	Root_R2_1_maintenance:1.11
	R2_1_0:1.11
	v20080507-1326:1.11
	v20080503-1740:1.10
	v20080425-1959:1.9
	v20080407-2250:1.9
	v20080407-1545:1.9
	v20080331-1625:1.9
	v20080328-1605:1.9
	v20080222-1200:1.9
	v20080215-1500:1.9
	v20080114-2222:1.8.2.1
	v20071130-1111:1.9
	v20071124-0000:1.8.2.1
	v20071112-0000:1.9
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070601-1400:1.8
	v20070525-1500:1.8
	v20070518-1300:1.8
	v20070403-1500:1.7
	v20070330-1300:1.7
	M4_20:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061013-1330:1.7
	v20060919-0800:1.6.2.2
	M1_20:1.6
	v20060728-0500:1.6.2.1
	v20060721-1130:1.6.2.1
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060531-1730:1.6
	v20060519-0800:1.6
	I20060505-1400:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.11
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.10;
commitid	3e924820f4604567;

1.10
date	2008.05.03.18.33.02;	author ahunter;	state Exp;
branches;
next	1.9;
commitid	1c13481cafcc4567;

1.9
date	2007.11.12.15.48.56;	author crevells;	state Exp;
branches;
next	1.8;
commitid	2727473875e74567;

1.8
date	2007.05.17.16.26.50;	author aboyko;	state Exp;
branches
	1.8.2.1;
next	1.7;
commitid	71d9464c82444567;

1.7
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.09.20.50.11;	author mmostafa;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.27.20.22.48;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.14.21.33.18;	author mmostafa;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.07.17.20.27.55;	author ahunter;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;

1.8.2.1
date	2007.11.12.15.49.39;	author crevells;	state Exp;
branches;
next	;
commitid	bf0473876124567;


desc
@@


1.11
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EContentsEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.MeasurementUnit;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

/**
 * <!-- begin-user-doc --> An implementation of the model object '<em><b>Diagram</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.DiagramImpl#getName <em>Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.DiagramImpl#getMeasurementUnit <em>Measurement Unit</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.DiagramImpl#getPersistedEdges <em>Persisted Edges</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.DiagramImpl#getTransientEdges <em>Transient Edges</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy %partners
 */
public class DiagramImpl
    extends ViewImpl
    implements Diagram {

    /**
	 * The default value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
    protected static final String NAME_EDEFAULT = ""; //$NON-NLS-1$

    /**
	 * The cached value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
    protected String name = NAME_EDEFAULT;

    /**
	 * The default value of the '{@@link #getMeasurementUnit() <em>Measurement Unit</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMeasurementUnit()
	 * @@generated
	 * @@ordered
	 */
	protected static final MeasurementUnit MEASUREMENT_UNIT_EDEFAULT = MeasurementUnit.HIMETRIC_LITERAL;

				/**
	 * The cached value of the '{@@link #getMeasurementUnit() <em>Measurement Unit</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMeasurementUnit()
	 * @@generated
	 * @@ordered
	 */
	protected MeasurementUnit measurementUnit = MEASUREMENT_UNIT_EDEFAULT;

				/**
	 * The flag representing whether the Measurement Unit attribute has been set.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int MEASUREMENT_UNIT_ESETFLAG = 1 << 11;

				/**
	 * The cached value of the '{@@link #getPersistedEdges() <em>Persisted Edges</em>}' containment reference list.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #getPersistedEdges()
	 * @@generated
	 * @@ordered
	 */
    protected EList persistedEdges;

    /**
	 * The cached value of the '{@@link #getTransientEdges() <em>Transient Edges</em>}' containment reference list.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@see #getTransientEdges()
	 * @@generated
	 * @@ordered
	 */
    protected EList transientEdges;

    private EContentsEList allEdges = null;

    protected static final EStructuralFeature[] edgesFeatures = new EStructuralFeature[] {
        NotationPackage.Literals.DIAGRAM__PERSISTED_EDGES,
        NotationPackage.Literals.DIAGRAM__TRANSIENT_EDGES};

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    protected DiagramImpl() {
		super();
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    protected EClass eStaticClass() {
		return NotationPackage.Literals.DIAGRAM;
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public String getName() {
		return name;
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.DIAGRAM__NAME, oldName, name));
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public MeasurementUnit getMeasurementUnit() {
		return measurementUnit;
	}

				/**
     * <!-- begin-user-doc --> Set the Measurement Unit for this Diagram, the
     * Measure ment unit can be set only once, the set method will not set the
     * value if it was already set <!-- end-user-doc -->
     */
    public void setMeasurementUnit(MeasurementUnit newMeasurementUnit) {
        if (!isSetMeasurementUnit()) {
            MeasurementUnit oldMeasurementUnit = measurementUnit;
            measurementUnit = newMeasurementUnit == null ? MEASUREMENT_UNIT_EDEFAULT
                : newMeasurementUnit;
            boolean oldMeasurementUnitESet = (eFlags & MEASUREMENT_UNIT_ESETFLAG) != 0;
            eFlags |= MEASUREMENT_UNIT_ESETFLAG;
            if (eNotificationRequired())
                eNotify(new ENotificationImpl(this, Notification.SET,
                    NotationPackage.DIAGRAM__MEASUREMENT_UNIT,
                    oldMeasurementUnit, measurementUnit,
                    !oldMeasurementUnitESet));
        } else
            throw new UnsupportedOperationException();
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void unsetMeasurementUnit() {
        throw new UnsupportedOperationException();
    }

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isSetMeasurementUnit() {
		return (eFlags & MEASUREMENT_UNIT_ESETFLAG) != 0;
	}

				/**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public EList getEdges() {
        if (allEdges == null) {
            allEdges = new EContentsEList(this, edgesFeatures);
        }
        return allEdges;
    }

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public EList getPersistedEdges() {
		if (persistedEdges == null) {
			persistedEdges = new EObjectContainmentEList(Edge.class, this, NotationPackage.DIAGRAM__PERSISTED_EDGES);
		}
		return persistedEdges;
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public EList getTransientEdges() {
		if (transientEdges == null) {
			transientEdges = new EObjectContainmentEList(Edge.class, this, NotationPackage.DIAGRAM__TRANSIENT_EDGES);
		}
		return transientEdges;
	}

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public Edge createEdge(EClass eClass) {
        Edge newEdge = (Edge) eClass.getEPackage().getEFactoryInstance()
            .create(eClass);
        getPersistedEdges().add(newEdge);
        return newEdge;
    }

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case NotationPackage.DIAGRAM__EANNOTATIONS:
				return ((InternalEList)getEAnnotations()).basicRemove(otherEnd, msgs);
			case NotationPackage.DIAGRAM__SOURCE_EDGES:
				return ((InternalEList)getSourceEdges()).basicRemove(otherEnd, msgs);
			case NotationPackage.DIAGRAM__TARGET_EDGES:
				return ((InternalEList)getTargetEdges()).basicRemove(otherEnd, msgs);
			case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
				return ((InternalEList)getPersistedChildren()).basicRemove(otherEnd, msgs);
			case NotationPackage.DIAGRAM__STYLES:
				return ((InternalEList)getStyles()).basicRemove(otherEnd, msgs);
			case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
				return ((InternalEList)getTransientChildren()).basicRemove(otherEnd, msgs);
			case NotationPackage.DIAGRAM__PERSISTED_EDGES:
				return ((InternalEList)getPersistedEdges()).basicRemove(otherEnd, msgs);
			case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
				return ((InternalEList)getTransientEdges()).basicRemove(otherEnd, msgs);
		}
		return eDynamicInverseRemove(otherEnd, featureID, msgs);
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.DIAGRAM__EANNOTATIONS:
				return getEAnnotations();
			case NotationPackage.DIAGRAM__VISIBLE:
				return isVisible() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.DIAGRAM__TYPE:
				return getType();
			case NotationPackage.DIAGRAM__MUTABLE:
				return isMutable() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.DIAGRAM__SOURCE_EDGES:
				return getSourceEdges();
			case NotationPackage.DIAGRAM__TARGET_EDGES:
				return getTargetEdges();
			case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
				return getPersistedChildren();
			case NotationPackage.DIAGRAM__STYLES:
				return getStyles();
			case NotationPackage.DIAGRAM__ELEMENT:
				if (resolve) return getElement();
				return basicGetElement();
			case NotationPackage.DIAGRAM__DIAGRAM:
				if (resolve) return getDiagram();
				return basicGetDiagram();
			case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
				return getTransientChildren();
			case NotationPackage.DIAGRAM__NAME:
				return getName();
			case NotationPackage.DIAGRAM__MEASUREMENT_UNIT:
				return getMeasurementUnit();
			case NotationPackage.DIAGRAM__PERSISTED_EDGES:
				return getPersistedEdges();
			case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
				return getTransientEdges();
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.DIAGRAM__EANNOTATIONS:
				getEAnnotations().clear();
				getEAnnotations().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__VISIBLE:
				setVisible(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.DIAGRAM__TYPE:
				setType((String)newValue);
				return;
			case NotationPackage.DIAGRAM__MUTABLE:
				setMutable(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.DIAGRAM__SOURCE_EDGES:
				getSourceEdges().clear();
				getSourceEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__TARGET_EDGES:
				getTargetEdges().clear();
				getTargetEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
				getPersistedChildren().clear();
				getPersistedChildren().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__STYLES:
				getStyles().clear();
				getStyles().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__ELEMENT:
				setElement((EObject)newValue);
				return;
			case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
				getTransientChildren().clear();
				getTransientChildren().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__NAME:
				setName((String)newValue);
				return;
			case NotationPackage.DIAGRAM__MEASUREMENT_UNIT:
				setMeasurementUnit((MeasurementUnit)newValue);
				return;
			case NotationPackage.DIAGRAM__PERSISTED_EDGES:
				getPersistedEdges().clear();
				getPersistedEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
				getTransientEdges().clear();
				getTransientEdges().addAll((Collection)newValue);
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.DIAGRAM__EANNOTATIONS:
				getEAnnotations().clear();
				return;
			case NotationPackage.DIAGRAM__VISIBLE:
				setVisible(VISIBLE_EDEFAULT);
				return;
			case NotationPackage.DIAGRAM__TYPE:
				setType(TYPE_EDEFAULT);
				return;
			case NotationPackage.DIAGRAM__MUTABLE:
				setMutable(MUTABLE_EDEFAULT);
				return;
			case NotationPackage.DIAGRAM__SOURCE_EDGES:
				getSourceEdges().clear();
				return;
			case NotationPackage.DIAGRAM__TARGET_EDGES:
				getTargetEdges().clear();
				return;
			case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
				getPersistedChildren().clear();
				return;
			case NotationPackage.DIAGRAM__STYLES:
				getStyles().clear();
				return;
			case NotationPackage.DIAGRAM__ELEMENT:
				unsetElement();
				return;
			case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
				getTransientChildren().clear();
				return;
			case NotationPackage.DIAGRAM__NAME:
				setName(NAME_EDEFAULT);
				return;
			case NotationPackage.DIAGRAM__MEASUREMENT_UNIT:
				unsetMeasurementUnit();
				return;
			case NotationPackage.DIAGRAM__PERSISTED_EDGES:
				getPersistedEdges().clear();
				return;
			case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
				getTransientEdges().clear();
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.DIAGRAM__EANNOTATIONS:
				return eAnnotations != null && !eAnnotations.isEmpty();
			case NotationPackage.DIAGRAM__VISIBLE:
				return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
			case NotationPackage.DIAGRAM__TYPE:
				return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
			case NotationPackage.DIAGRAM__MUTABLE:
				return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
			case NotationPackage.DIAGRAM__SOURCE_EDGES:
				return sourceEdges != null && !sourceEdges.isEmpty();
			case NotationPackage.DIAGRAM__TARGET_EDGES:
				return targetEdges != null && !targetEdges.isEmpty();
			case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
				return persistedChildren != null && !persistedChildren.isEmpty();
			case NotationPackage.DIAGRAM__STYLES:
				return styles != null && !styles.isEmpty();
			case NotationPackage.DIAGRAM__ELEMENT:
				return isSetElement();
			case NotationPackage.DIAGRAM__DIAGRAM:
				return basicGetDiagram() != null;
			case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
				return transientChildren != null && !transientChildren.isEmpty();
			case NotationPackage.DIAGRAM__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case NotationPackage.DIAGRAM__MEASUREMENT_UNIT:
				return isSetMeasurementUnit();
			case NotationPackage.DIAGRAM__PERSISTED_EDGES:
				return persistedEdges != null && !persistedEdges.isEmpty();
			case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
				return transientEdges != null && !transientEdges.isEmpty();
		}
		return eDynamicIsSet(featureID);
	}

    /**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @@generated
	 */
    public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (name: "); //$NON-NLS-1$
		result.append(name);
		result.append(", measurementUnit: "); //$NON-NLS-1$
		if ((eFlags & MEASUREMENT_UNIT_ESETFLAG) != 0) result.append(measurementUnit); else result.append("<unset>"); //$NON-NLS-1$
		result.append(')');
		return result.toString();
	}

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void insertEdge(Edge edge) {
        persistEdges();
        getPersistedEdges().add(edge);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void insertEdgeAt(Edge edge, int index) {
        persistEdges();
        if (getPersistedEdges().size() >= index) {
            getPersistedEdges().add(index, edge);
        }
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void insertEdge(Edge edge, boolean persisted) {
        List edges = null;
        if (persisted)
            edges = getPersistedEdges();
        else
            edges = getTransientEdges();
        edges.add(edge);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void persistEdges() {
        if (transientEdges != null && transientEdges.size() > 0) {
            List edges = new ArrayList(transientEdges);
            getPersistedEdges().addAll(transientEdges);
            for (Iterator iterator = edges.iterator(); iterator.hasNext();) {
                Edge edge = (Edge) iterator.next();
                View sourceView = edge.getSource();
                View targetView = edge.getTarget();
                if (sourceView != null)
                    persistCompleteHierarchy(sourceView);
                if (targetView != null)
                    persistCompleteHierarchy(targetView);
            }
        }
    }

    /**
     * Persist the view passed in and all its parent views if they are
     * transient.
     * 
     * @@param view
     *            the view to persist
     */
    private void persistCompleteHierarchy(View view) {
        view.persist();
        EObject container = view.eContainer();
        while (container instanceof View) {
            // if already persisted, quit
            EStructuralFeature sFeature = container.eContainingFeature();
            if (sFeature != null && !sFeature.isTransient()) {
                break;
            }

            ((View) container).persist();
            container = container.eContainer();
        }
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void removeEdge(Edge edge) {
        if (edge.eContainingFeature() == NotationPackage.Literals
            .DIAGRAM__TRANSIENT_EDGES) {
            if (transientEdges != null && transientEdges.size() > 0) {
                transientEdges.remove(edge);
            }
        } else if (edge.eContainingFeature() == NotationPackage.Literals
                .DIAGRAM__PERSISTED_EDGES) {
            if (persistedEdges != null && persistedEdges.size() > 0) {
                persistedEdges.remove(edge);
            }
        }

    }

} // DiagramImpl
@


1.10
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@a285 2
			case NotationPackage.DIAGRAM__UUID:
				return getUUID();
a329 3
			case NotationPackage.DIAGRAM__UUID:
				setUUID((byte[])newValue);
				return;
a388 3
			case NotationPackage.DIAGRAM__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a439 2
			case NotationPackage.DIAGRAM__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
@


1.9
log
@[209358] gmf_head crevells 071112 DiagramImpl.persistEdges does not guarantee parent hierarchy of source/target is persisted
@
text
@d286 2
d332 3
d394 3
d448 2
@


1.8
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
d530 1
a530 1
                    sourceView.persist();
d532 1
a532 1
                    targetView.persist();
d538 22
@


1.8.2.1
log
@[209358] gmf_R2_0_maintenance crevells 071112 DiagramImpl.persistEdges does not guarantee parent hierarchy of source/target is persisted
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2007 IBM Corporation and others.
d530 1
a530 1
                    persistCompleteHierarchy(sourceView);
d532 1
a532 1
                    persistCompleteHierarchy(targetView);
a537 22
     * Persist the view passed in and all its parent views if they are
     * transient.
     * 
     * @@param view
     *            the view to persist
     */
    private void persistCompleteHierarchy(View view) {
        view.persist();
        EObject container = view.eContainer();
        while (container instanceof View) {
            // if already persisted, quit
            EStructuralFeature sFeature = container.eContainingFeature();
            if (sFeature != null && !sFeature.isTransient()) {
                break;
            }

            ((View) container).persist();
            container = container.eContainer();
        }
    }

    /**
@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d42 4
a45 3
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.DiagramImpl#getName <em>Name</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.DiagramImpl#getPersistedEdges <em>Persisted Edges</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.DiagramImpl#getTransientEdges <em>Transient Edges</em>}</li>
d48 1
a48 1
 * 
d59 6
a64 6
     * The default value of the '{@@link #getName() <em>Name</em>}' attribute.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getName()
     * @@generated
     * @@ordered
     */
d68 6
a73 6
     * The cached value of the '{@@link #getName() <em>Name</em>}' attribute.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getName()
     * @@generated
     * @@ordered
     */
d77 45
a121 42
     * The default value of the '{@@link #getMeasurementUnit() <em>Measurement Unit</em>}' attribute.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getMeasurementUnit()
     * @@generated
     * @@ordered
     */
    protected static final MeasurementUnit MEASUREMENT_UNIT_EDEFAULT = MeasurementUnit.HIMETRIC_LITERAL;

    /**
     * The cached value of the '{@@link #getMeasurementUnit() <em>Measurement Unit</em>}' attribute.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getMeasurementUnit()
     * @@generated
     * @@ordered
     */
    protected MeasurementUnit measurementUnit = MEASUREMENT_UNIT_EDEFAULT;

    /**
     * The flag representing whether the Measurement Unit attribute has been set.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     * @@ordered
     */
    protected static final int MEASUREMENT_UNIT_ESETFLAG = 1 << 11;

    /**
     * The cached value of the '{@@link #getPersistedEdges() <em>Persisted Edges</em>}' containment reference list.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getPersistedEdges()
     * @@generated
     * @@ordered
     */
    protected EList persistedEdges = null;

    /**
     * The cached value of the '{@@link #getTransientEdges() <em>Transient Edges</em>}' containment reference list.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@see #getTransientEdges()
     * @@generated
     * @@ordered
     */
    protected EList transientEdges = null;
d130 3
a132 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d134 2
a135 2
        super();
    }
d138 3
a140 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d142 2
a143 2
        return NotationPackage.Literals.DIAGRAM;
    }
d146 3
a148 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d150 2
a151 2
        return name;
    }
d154 3
a156 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d158 14
a171 13
        String oldName = name;
        name = newName;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.DIAGRAM__NAME, oldName, name));
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
    public MeasurementUnit getMeasurementUnit() {
        return measurementUnit;
    }
d173 1
a173 1
    /**
d202 7
a208 6
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
    public boolean isSetMeasurementUnit() {
        return (eFlags & MEASUREMENT_UNIT_ESETFLAG) != 0;
    }
d210 1
a210 1
    /**
d221 3
a223 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d225 5
a229 5
        if (persistedEdges == null) {
            persistedEdges = new EObjectContainmentEList(Edge.class, this, NotationPackage.DIAGRAM__PERSISTED_EDGES);
        }
        return persistedEdges;
    }
d232 3
a234 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d236 5
a240 5
        if (transientEdges == null) {
            transientEdges = new EObjectContainmentEList(Edge.class, this, NotationPackage.DIAGRAM__TRANSIENT_EDGES);
        }
        return transientEdges;
    }
d253 3
a255 3
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d257 25
a281 25
        switch (featureID) {
            case NotationPackage.DIAGRAM__EANNOTATIONS:
                return ((InternalEList)getEAnnotations()).basicRemove(otherEnd, msgs);
            case NotationPackage.DIAGRAM__SOURCE_EDGES:
                return ((InternalEList)getSourceEdges()).basicRemove(otherEnd, msgs);
            case NotationPackage.DIAGRAM__TARGET_EDGES:
                return ((InternalEList)getTargetEdges()).basicRemove(otherEnd, msgs);
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
                return ((InternalEList)getPersistedChildren()).basicRemove(otherEnd, msgs);
            case NotationPackage.DIAGRAM__STYLES:
                return ((InternalEList)getStyles()).basicRemove(otherEnd, msgs);
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
                return ((InternalEList)getTransientChildren()).basicRemove(otherEnd, msgs);
            case NotationPackage.DIAGRAM__PERSISTED_EDGES:
                return ((InternalEList)getPersistedEdges()).basicRemove(otherEnd, msgs);
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
                return ((InternalEList)getTransientEdges()).basicRemove(otherEnd, msgs);
        }
        return eDynamicInverseRemove(otherEnd, featureID, msgs);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d283 41
a323 41
        switch (featureID) {
            case NotationPackage.DIAGRAM__EANNOTATIONS:
                return getEAnnotations();
            case NotationPackage.DIAGRAM__VISIBLE:
                return isVisible() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.DIAGRAM__TYPE:
                return getType();
            case NotationPackage.DIAGRAM__MUTABLE:
                return isMutable() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.DIAGRAM__SOURCE_EDGES:
                return getSourceEdges();
            case NotationPackage.DIAGRAM__TARGET_EDGES:
                return getTargetEdges();
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
                return getPersistedChildren();
            case NotationPackage.DIAGRAM__STYLES:
                return getStyles();
            case NotationPackage.DIAGRAM__ELEMENT:
                if (resolve) return getElement();
                return basicGetElement();
            case NotationPackage.DIAGRAM__DIAGRAM:
                if (resolve) return getDiagram();
                return basicGetDiagram();
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
                return getTransientChildren();
            case NotationPackage.DIAGRAM__NAME:
                return getName();
            case NotationPackage.DIAGRAM__MEASUREMENT_UNIT:
                return getMeasurementUnit();
            case NotationPackage.DIAGRAM__PERSISTED_EDGES:
                return getPersistedEdges();
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
                return getTransientEdges();
        }
        return eDynamicGet(featureID, resolve, coreType);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d325 59
a383 59
        switch (featureID) {
            case NotationPackage.DIAGRAM__EANNOTATIONS:
                getEAnnotations().clear();
                getEAnnotations().addAll((Collection)newValue);
                return;
            case NotationPackage.DIAGRAM__VISIBLE:
                setVisible(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.DIAGRAM__TYPE:
                setType((String)newValue);
                return;
            case NotationPackage.DIAGRAM__MUTABLE:
                setMutable(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.DIAGRAM__SOURCE_EDGES:
                getSourceEdges().clear();
                getSourceEdges().addAll((Collection)newValue);
                return;
            case NotationPackage.DIAGRAM__TARGET_EDGES:
                getTargetEdges().clear();
                getTargetEdges().addAll((Collection)newValue);
                return;
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
                getPersistedChildren().clear();
                getPersistedChildren().addAll((Collection)newValue);
                return;
            case NotationPackage.DIAGRAM__STYLES:
                getStyles().clear();
                getStyles().addAll((Collection)newValue);
                return;
            case NotationPackage.DIAGRAM__ELEMENT:
                setElement((EObject)newValue);
                return;
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
                getTransientChildren().clear();
                getTransientChildren().addAll((Collection)newValue);
                return;
            case NotationPackage.DIAGRAM__NAME:
                setName((String)newValue);
                return;
            case NotationPackage.DIAGRAM__MEASUREMENT_UNIT:
                setMeasurementUnit((MeasurementUnit)newValue);
                return;
            case NotationPackage.DIAGRAM__PERSISTED_EDGES:
                getPersistedEdges().clear();
                getPersistedEdges().addAll((Collection)newValue);
                return;
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
                getTransientEdges().clear();
                getTransientEdges().addAll((Collection)newValue);
                return;
        }
        eDynamicSet(featureID, newValue);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d385 51
a435 51
        switch (featureID) {
            case NotationPackage.DIAGRAM__EANNOTATIONS:
                getEAnnotations().clear();
                return;
            case NotationPackage.DIAGRAM__VISIBLE:
                setVisible(VISIBLE_EDEFAULT);
                return;
            case NotationPackage.DIAGRAM__TYPE:
                setType(TYPE_EDEFAULT);
                return;
            case NotationPackage.DIAGRAM__MUTABLE:
                setMutable(MUTABLE_EDEFAULT);
                return;
            case NotationPackage.DIAGRAM__SOURCE_EDGES:
                getSourceEdges().clear();
                return;
            case NotationPackage.DIAGRAM__TARGET_EDGES:
                getTargetEdges().clear();
                return;
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
                getPersistedChildren().clear();
                return;
            case NotationPackage.DIAGRAM__STYLES:
                getStyles().clear();
                return;
            case NotationPackage.DIAGRAM__ELEMENT:
                unsetElement();
                return;
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
                getTransientChildren().clear();
                return;
            case NotationPackage.DIAGRAM__NAME:
                setName(NAME_EDEFAULT);
                return;
            case NotationPackage.DIAGRAM__MEASUREMENT_UNIT:
                unsetMeasurementUnit();
                return;
            case NotationPackage.DIAGRAM__PERSISTED_EDGES:
                getPersistedEdges().clear();
                return;
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
                getTransientEdges().clear();
                return;
        }
        eDynamicUnset(featureID);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d437 39
a475 39
        switch (featureID) {
            case NotationPackage.DIAGRAM__EANNOTATIONS:
                return eAnnotations != null && !eAnnotations.isEmpty();
            case NotationPackage.DIAGRAM__VISIBLE:
                return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
            case NotationPackage.DIAGRAM__TYPE:
                return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
            case NotationPackage.DIAGRAM__MUTABLE:
                return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
            case NotationPackage.DIAGRAM__SOURCE_EDGES:
                return sourceEdges != null && !sourceEdges.isEmpty();
            case NotationPackage.DIAGRAM__TARGET_EDGES:
                return targetEdges != null && !targetEdges.isEmpty();
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
                return persistedChildren != null && !persistedChildren.isEmpty();
            case NotationPackage.DIAGRAM__STYLES:
                return styles != null && !styles.isEmpty();
            case NotationPackage.DIAGRAM__ELEMENT:
                return isSetElement();
            case NotationPackage.DIAGRAM__DIAGRAM:
                return basicGetDiagram() != null;
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
                return transientChildren != null && !transientChildren.isEmpty();
            case NotationPackage.DIAGRAM__NAME:
                return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
            case NotationPackage.DIAGRAM__MEASUREMENT_UNIT:
                return isSetMeasurementUnit();
            case NotationPackage.DIAGRAM__PERSISTED_EDGES:
                return persistedEdges != null && !persistedEdges.isEmpty();
            case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
                return transientEdges != null && !transientEdges.isEmpty();
        }
        return eDynamicIsSet(featureID);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @@generated
     */
d477 1
a477 1
        if (eIsProxy()) return super.toString();
d479 8
a486 8
        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (name: "); //$NON-NLS-1$
        result.append(name);
        result.append(", measurementUnit: "); //$NON-NLS-1$
        if ((eFlags & MEASUREMENT_UNIT_ESETFLAG) != 0) result.append(measurementUnit); else result.append("<unset>"); //$NON-NLS-1$
        result.append(')');
        return result.toString();
    }
@


1.6
log
@bugzilla 128977 gmf-head mmostafa 060309 Adopt transaction API in diagram event broker API and CanonicalEditPolicy API
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d23 1
d37 1
a37 2
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Diagram</b></em>'.
d42 3
a44 3
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.DiagramImpl#getName <em>Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.DiagramImpl#getPersistedEdges <em>Persisted Edges</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.DiagramImpl#getTransientEdges <em>Transient Edges</em>}</li>
d47 1
a47 1
 *
d53 4
a56 1
public class DiagramImpl extends ViewImpl implements Diagram {
d59 1
a59 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d64 1
a64 1
	protected static final String NAME_EDEFAULT = ""; //$NON-NLS-1$
d68 1
a68 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d73 1
a73 1
	protected String name = NAME_EDEFAULT;
d77 1
a77 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d82 1
a82 1
	protected static final MeasurementUnit MEASUREMENT_UNIT_EDEFAULT = MeasurementUnit.HIMETRIC_LITERAL;
d86 1
a86 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d91 1
a91 1
	protected MeasurementUnit measurementUnit = MEASUREMENT_UNIT_EDEFAULT;
d95 1
a95 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d103 1
a103 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d108 1
a108 1
	protected EList persistedEdges = null;
d112 1
a112 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d117 1
a117 2
	protected EList transientEdges = null;
	
d119 5
a123 1
	private EContentsEList allEdges = null;
d126 1
a126 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d129 1
a129 1
	protected DiagramImpl() {
d134 1
a134 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d137 1
a137 1
	protected EClass eStaticClass() {
d142 1
a142 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d145 1
a145 1
	public String getName() {
d150 1
a150 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d153 1
a153 1
	public void setName(String newName) {
d161 1
a161 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d164 1
a164 1
	public MeasurementUnit getMeasurementUnit() {
d169 3
a171 4
     * <!-- begin-user-doc -->
     * Set the Measurement Unit for this Diagram, the Measure ment unit can be set only 
     * once, the set method will not set the value if it was already set
     * <!-- end-user-doc -->
d174 1
a174 1
        if (!isSetMeasurementUnit()){
d176 2
a177 1
            measurementUnit = newMeasurementUnit == null ? MEASUREMENT_UNIT_EDEFAULT : newMeasurementUnit;
d181 4
a184 1
                eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.DIAGRAM__MEASUREMENT_UNIT, oldMeasurementUnit, measurementUnit, !oldMeasurementUnitESet));
d190 1
a190 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d197 1
a197 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d204 9
a212 13
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public EList getEdges() {
		if (allEdges == null){
			allEdges =  new EContentsEList(this, 
				new EStructuralFeature[] {
					NotationPackage.eINSTANCE.getDiagram_PersistedEdges(),
					NotationPackage.eINSTANCE.getDiagram_TransientEdges()});
		}
		return allEdges;
	}
d215 1
a215 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d218 1
a218 1
	public EList getPersistedEdges() {
d226 1
a226 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d229 1
a229 1
	public EList getTransientEdges() {
d236 9
a244 9
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public Edge createEdge(EClass eClass) {
		Edge newEdge = (Edge) eClass.getEPackage().getEFactoryInstance().create(eClass);
		getPersistedEdges().add(newEdge);
		return newEdge;
	}
d247 1
a247 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d252 12
d269 1
a269 1
        return super.eInverseRemove(otherEnd, featureID, msgs);
d273 1
a273 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d278 24
d311 1
a311 1
        return super.eGet(featureID, resolve, coreType);
d315 1
a315 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d320 36
d371 1
a371 1
        super.eSet(featureID, newValue);
d375 1
a375 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d380 30
d423 1
a423 1
        super.eUnset(featureID);
d427 1
a427 2
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
d432 22
d463 1
a463 1
        return super.eIsSet(featureID);
d467 1
a467 2
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d470 1
a470 1
	public String toString() {
d482 66
a547 76
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public void insertEdge(Edge edge){
		persistEdges();
		getPersistedEdges().add(edge);
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public void insertEdgeAt(Edge edge, int index){
		persistEdges();
		if (getPersistedEdges().size()>=index){
			getPersistedEdges().add(index,edge);
		}
	}
	
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public void insertEdge(Edge edge,boolean persisted){
		List edges = null;
		if (persisted)
			edges = getPersistedEdges();
		else
			edges = getTransientEdges();
		edges.add(edge);	
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public void persistEdges(){
		if (transientEdges!=null &&
			transientEdges.size()>0){
			List edges = new ArrayList(transientEdges);
			getPersistedEdges().addAll(transientEdges);
			for (Iterator iterator = edges.iterator();
				 iterator.hasNext();){
				Edge edge = (Edge)iterator.next();
				View sourceView = edge.getSource();
				View targetView = edge.getTarget();
				if (sourceView!=null)
					sourceView.persist();
				if (targetView!=null)
					targetView.persist();
			}
		}
	}
	
	 /**
	  * <!-- begin-user-doc -->
	  * <!-- end-user-doc -->
	  */
	  public void removeEdge(Edge edge){
	  	if (edge.eContainingFeature() == 
			NotationPackage.eINSTANCE.getDiagram_TransientEdges()){
			if (transientEdges!=null && 
			    transientEdges.size()>0){
				transientEdges.remove(edge);
			}
		} else if (edge.eContainingFeature() == 
			NotationPackage.eINSTANCE.getDiagram_PersistedEdges()){
			if (persistedEdges!=null && 
				persistedEdges.size()>0){
				persistedEdges.remove(edge);
			}
		}
	  	
	  }
d549 1
a549 1
} //DiagramImpl
@


1.6.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@a22 1
import org.eclipse.emf.ecore.EObject;
d36 2
a37 1
 * <!-- begin-user-doc --> An implementation of the model object '<em><b>Diagram</b></em>'.
d42 3
a44 3
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.DiagramImpl#getName <em>Name</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.DiagramImpl#getPersistedEdges <em>Persisted Edges</em>}</li>
 * <li>{@@link org.eclipse.gmf.runtime.notation.impl.DiagramImpl#getTransientEdges <em>Transient Edges</em>}</li>
d47 1
a47 1
 * 
d53 1
a53 4
public class DiagramImpl
    extends ViewImpl
    implements Diagram {

d56 2
a57 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d62 1
a62 1
    protected static final String NAME_EDEFAULT = ""; //$NON-NLS-1$
d66 2
a67 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d72 1
a72 1
    protected String name = NAME_EDEFAULT;
d76 2
a77 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d82 1
a82 1
    protected static final MeasurementUnit MEASUREMENT_UNIT_EDEFAULT = MeasurementUnit.HIMETRIC_LITERAL;
d86 2
a87 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d92 1
a92 1
    protected MeasurementUnit measurementUnit = MEASUREMENT_UNIT_EDEFAULT;
d96 2
a97 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d105 2
a106 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d111 1
a111 1
    protected EList persistedEdges = null;
d115 2
a116 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d121 2
a122 3
    protected EList transientEdges = null;

    private EContentsEList allEdges = null;
d124 1
a124 3
    protected static final EStructuralFeature[] edgesFeatures = new EStructuralFeature[] {
        NotationPackage.Literals.DIAGRAM__PERSISTED_EDGES,
        NotationPackage.Literals.DIAGRAM__TRANSIENT_EDGES};
d127 2
a128 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d131 1
a131 1
    protected DiagramImpl() {
d136 2
a137 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d140 1
a140 1
    protected EClass eStaticClass() {
d145 2
a146 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d149 1
a149 1
    public String getName() {
d154 2
a155 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d158 1
a158 1
    public void setName(String newName) {
d166 2
a167 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d170 1
a170 1
    public MeasurementUnit getMeasurementUnit() {
d175 4
a178 3
     * <!-- begin-user-doc --> Set the Measurement Unit for this Diagram, the
     * Measure ment unit can be set only once, the set method will not set the
     * value if it was already set <!-- end-user-doc -->
d181 1
a181 1
        if (!isSetMeasurementUnit()) {
d183 1
a183 2
            measurementUnit = newMeasurementUnit == null ? MEASUREMENT_UNIT_EDEFAULT
                : newMeasurementUnit;
d187 1
a187 4
                eNotify(new ENotificationImpl(this, Notification.SET,
                    NotationPackage.DIAGRAM__MEASUREMENT_UNIT,
                    oldMeasurementUnit, measurementUnit,
                    !oldMeasurementUnitESet));
d193 2
a194 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d201 2
a202 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d209 13
a221 9
    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public EList getEdges() {
        if (allEdges == null) {
            allEdges = new EContentsEList(this, edgesFeatures);
        }
        return allEdges;
    }
d224 2
a225 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d228 1
a228 1
    public EList getPersistedEdges() {
d236 2
a237 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d240 1
a240 1
    public EList getTransientEdges() {
d247 9
a255 9
    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public Edge createEdge(EClass eClass) {
        Edge newEdge = (Edge) eClass.getEPackage().getEFactoryInstance()
            .create(eClass);
        getPersistedEdges().add(newEdge);
        return newEdge;
    }
d258 2
a259 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
a263 12
            case NotationPackage.DIAGRAM__EANNOTATIONS:
                return ((InternalEList)getEAnnotations()).basicRemove(otherEnd, msgs);
            case NotationPackage.DIAGRAM__SOURCE_EDGES:
                return ((InternalEList)getSourceEdges()).basicRemove(otherEnd, msgs);
            case NotationPackage.DIAGRAM__TARGET_EDGES:
                return ((InternalEList)getTargetEdges()).basicRemove(otherEnd, msgs);
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
                return ((InternalEList)getPersistedChildren()).basicRemove(otherEnd, msgs);
            case NotationPackage.DIAGRAM__STYLES:
                return ((InternalEList)getStyles()).basicRemove(otherEnd, msgs);
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
                return ((InternalEList)getTransientChildren()).basicRemove(otherEnd, msgs);
d269 1
a269 1
        return eDynamicInverseRemove(otherEnd, featureID, msgs);
d273 2
a274 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
a278 24
            case NotationPackage.DIAGRAM__EANNOTATIONS:
                return getEAnnotations();
            case NotationPackage.DIAGRAM__VISIBLE:
                return isVisible() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.DIAGRAM__TYPE:
                return getType();
            case NotationPackage.DIAGRAM__MUTABLE:
                return isMutable() ? Boolean.TRUE : Boolean.FALSE;
            case NotationPackage.DIAGRAM__SOURCE_EDGES:
                return getSourceEdges();
            case NotationPackage.DIAGRAM__TARGET_EDGES:
                return getTargetEdges();
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
                return getPersistedChildren();
            case NotationPackage.DIAGRAM__STYLES:
                return getStyles();
            case NotationPackage.DIAGRAM__ELEMENT:
                if (resolve) return getElement();
                return basicGetElement();
            case NotationPackage.DIAGRAM__DIAGRAM:
                if (resolve) return getDiagram();
                return basicGetDiagram();
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
                return getTransientChildren();
d288 1
a288 1
        return eDynamicGet(featureID, resolve, coreType);
d292 2
a293 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
a297 36
            case NotationPackage.DIAGRAM__EANNOTATIONS:
                getEAnnotations().clear();
                getEAnnotations().addAll((Collection)newValue);
                return;
            case NotationPackage.DIAGRAM__VISIBLE:
                setVisible(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.DIAGRAM__TYPE:
                setType((String)newValue);
                return;
            case NotationPackage.DIAGRAM__MUTABLE:
                setMutable(((Boolean)newValue).booleanValue());
                return;
            case NotationPackage.DIAGRAM__SOURCE_EDGES:
                getSourceEdges().clear();
                getSourceEdges().addAll((Collection)newValue);
                return;
            case NotationPackage.DIAGRAM__TARGET_EDGES:
                getTargetEdges().clear();
                getTargetEdges().addAll((Collection)newValue);
                return;
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
                getPersistedChildren().clear();
                getPersistedChildren().addAll((Collection)newValue);
                return;
            case NotationPackage.DIAGRAM__STYLES:
                getStyles().clear();
                getStyles().addAll((Collection)newValue);
                return;
            case NotationPackage.DIAGRAM__ELEMENT:
                setElement((EObject)newValue);
                return;
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
                getTransientChildren().clear();
                getTransientChildren().addAll((Collection)newValue);
                return;
d313 1
a313 1
        eDynamicSet(featureID, newValue);
d317 2
a318 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
a322 30
            case NotationPackage.DIAGRAM__EANNOTATIONS:
                getEAnnotations().clear();
                return;
            case NotationPackage.DIAGRAM__VISIBLE:
                setVisible(VISIBLE_EDEFAULT);
                return;
            case NotationPackage.DIAGRAM__TYPE:
                setType(TYPE_EDEFAULT);
                return;
            case NotationPackage.DIAGRAM__MUTABLE:
                setMutable(MUTABLE_EDEFAULT);
                return;
            case NotationPackage.DIAGRAM__SOURCE_EDGES:
                getSourceEdges().clear();
                return;
            case NotationPackage.DIAGRAM__TARGET_EDGES:
                getTargetEdges().clear();
                return;
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
                getPersistedChildren().clear();
                return;
            case NotationPackage.DIAGRAM__STYLES:
                getStyles().clear();
                return;
            case NotationPackage.DIAGRAM__ELEMENT:
                unsetElement();
                return;
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
                getTransientChildren().clear();
                return;
d336 1
a336 1
        eDynamicUnset(featureID);
d340 2
a341 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
a345 22
            case NotationPackage.DIAGRAM__EANNOTATIONS:
                return eAnnotations != null && !eAnnotations.isEmpty();
            case NotationPackage.DIAGRAM__VISIBLE:
                return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
            case NotationPackage.DIAGRAM__TYPE:
                return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
            case NotationPackage.DIAGRAM__MUTABLE:
                return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
            case NotationPackage.DIAGRAM__SOURCE_EDGES:
                return sourceEdges != null && !sourceEdges.isEmpty();
            case NotationPackage.DIAGRAM__TARGET_EDGES:
                return targetEdges != null && !targetEdges.isEmpty();
            case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
                return persistedChildren != null && !persistedChildren.isEmpty();
            case NotationPackage.DIAGRAM__STYLES:
                return styles != null && !styles.isEmpty();
            case NotationPackage.DIAGRAM__ELEMENT:
                return isSetElement();
            case NotationPackage.DIAGRAM__DIAGRAM:
                return basicGetDiagram() != null;
            case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
                return transientChildren != null && !transientChildren.isEmpty();
d355 1
a355 1
        return eDynamicIsSet(featureID);
d359 2
a360 1
     * <!-- begin-user-doc --> <!-- end-user-doc -->
d363 1
a363 1
    public String toString() {
d375 76
a450 66
    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void insertEdge(Edge edge) {
        persistEdges();
        getPersistedEdges().add(edge);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void insertEdgeAt(Edge edge, int index) {
        persistEdges();
        if (getPersistedEdges().size() >= index) {
            getPersistedEdges().add(index, edge);
        }
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void insertEdge(Edge edge, boolean persisted) {
        List edges = null;
        if (persisted)
            edges = getPersistedEdges();
        else
            edges = getTransientEdges();
        edges.add(edge);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void persistEdges() {
        if (transientEdges != null && transientEdges.size() > 0) {
            List edges = new ArrayList(transientEdges);
            getPersistedEdges().addAll(transientEdges);
            for (Iterator iterator = edges.iterator(); iterator.hasNext();) {
                Edge edge = (Edge) iterator.next();
                View sourceView = edge.getSource();
                View targetView = edge.getTarget();
                if (sourceView != null)
                    sourceView.persist();
                if (targetView != null)
                    targetView.persist();
            }
        }
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     */
    public void removeEdge(Edge edge) {
        if (edge.eContainingFeature() == NotationPackage.Literals
            .DIAGRAM__TRANSIENT_EDGES) {
            if (transientEdges != null && transientEdges.size() > 0) {
                transientEdges.remove(edge);
            }
        } else if (edge.eContainingFeature() == NotationPackage.Literals
                .DIAGRAM__PERSISTED_EDGES) {
            if (persistedEdges != null && persistedEdges.size() > 0) {
                persistedEdges.remove(edge);
            }
        }

    }
d452 1
a452 1
} // DiagramImpl
@


1.6.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.5
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d253 1
a253 1
		getEdges().add(newEdge);
@


1.4
log
@bugzilla 116224 gmf-head sshaw 060119 Notation meta-model support for coordinate systems
@
text
@a22 1
import org.eclipse.emf.ecore.EObject;
d54 8
a61 8
	/**
	 * The default value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
d64 8
a71 8
	/**
	 * The cached value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
d74 8
a81 8
	/**
	 * The default value of the '{@@link #getMeasurementUnit() <em>Measurement Unit</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMeasurementUnit()
	 * @@generated
	 * @@ordered
	 */
d84 8
a91 8
	/**
	 * The cached value of the '{@@link #getMeasurementUnit() <em>Measurement Unit</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMeasurementUnit()
	 * @@generated
	 * @@ordered
	 */
d94 17
a110 8
	/**
	 * The cached value of the '{@@link #getPersistedEdges() <em>Persisted Edges</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getPersistedEdges()
	 * @@generated
	 * @@ordered
	 */
d113 8
a120 8
	/**
	 * The cached value of the '{@@link #getTransientEdges() <em>Transient Edges</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTransientEdges()
	 * @@generated
	 * @@ordered
	 */
d126 2
a127 2
	/**
	 * <!-- begin-user-doc -->
d129 2
a130 2
	 * @@generated
	 */
d132 2
a133 2
		super();
	}
d135 2
a136 2
	/**
	 * <!-- begin-user-doc -->
d138 2
a139 2
	 * @@generated
	 */
d141 2
a142 2
		return NotationPackage.eINSTANCE.getDiagram();
	}
d144 2
a145 2
	/**
	 * <!-- begin-user-doc -->
d147 2
a148 2
	 * @@generated
	 */
d150 2
a151 2
		return name;
	}
d153 2
a154 2
	/**
	 * <!-- begin-user-doc -->
d156 2
a157 2
	 * @@generated
	 */
d159 5
a163 5
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.DIAGRAM__NAME, oldName, name));
	}
d165 2
a166 2
	/**
	 * <!-- begin-user-doc -->
d168 2
a169 2
	 * @@generated
	 */
d171 2
a172 2
		return measurementUnit;
	}
d174 34
a207 15
	private boolean measurementUnitInitialized = false;
	
	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.notation.Diagram#initializeMeasurementUnit(org.eclipse.gmf.runtime.notation.MeasurementUnit)
	 */
	public boolean initializeMeasurementUnit(MeasurementUnit mu) {
		if (!measurementUnitInitialized) {
			measurementUnit = mu;
			measurementUnitInitialized = true;
			return true;
		}
		
		return false;
	}
d223 2
a224 2
	/**
	 * <!-- begin-user-doc -->
d226 2
a227 2
	 * @@generated
	 */
d229 5
a233 5
		if (persistedEdges == null) {
			persistedEdges = new EObjectContainmentEList(Edge.class, this, NotationPackage.DIAGRAM__PERSISTED_EDGES);
		}
		return persistedEdges;
	}
d235 2
a236 2
	/**
	 * <!-- begin-user-doc -->
d238 2
a239 2
	 * @@generated
	 */
d241 5
a245 5
		if (transientEdges == null) {
			transientEdges = new EObjectContainmentEList(Edge.class, this, NotationPackage.DIAGRAM__TRANSIENT_EDGES);
		}
		return transientEdges;
	}
d257 100
a356 245
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case NotationPackage.DIAGRAM__EANNOTATIONS:
					return ((InternalEList)getEAnnotations()).basicAdd(otherEnd, msgs);
				case NotationPackage.DIAGRAM__SOURCE_EDGES:
					return ((InternalEList)getSourceEdges()).basicAdd(otherEnd, msgs);
				case NotationPackage.DIAGRAM__TARGET_EDGES:
					return ((InternalEList)getTargetEdges()).basicAdd(otherEnd, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
		}
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case NotationPackage.DIAGRAM__EANNOTATIONS:
					return ((InternalEList)getEAnnotations()).basicRemove(otherEnd, msgs);
				case NotationPackage.DIAGRAM__SOURCE_EDGES:
					return ((InternalEList)getSourceEdges()).basicRemove(otherEnd, msgs);
				case NotationPackage.DIAGRAM__TARGET_EDGES:
					return ((InternalEList)getTargetEdges()).basicRemove(otherEnd, msgs);
				case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
					return ((InternalEList)getPersistedChildren()).basicRemove(otherEnd, msgs);
				case NotationPackage.DIAGRAM__STYLES:
					return ((InternalEList)getStyles()).basicRemove(otherEnd, msgs);
				case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
					return ((InternalEList)getTransientChildren()).basicRemove(otherEnd, msgs);
				case NotationPackage.DIAGRAM__PERSISTED_EDGES:
					return ((InternalEList)getPersistedEdges()).basicRemove(otherEnd, msgs);
				case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
					return ((InternalEList)getTransientEdges()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
		}
		return eBasicSetContainer(null, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.DIAGRAM__EANNOTATIONS:
				return getEAnnotations();
			case NotationPackage.DIAGRAM__VISIBLE:
				return isVisible() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.DIAGRAM__TYPE:
				return getType();
			case NotationPackage.DIAGRAM__MUTABLE:
				return isMutable() ? Boolean.TRUE : Boolean.FALSE;
			case NotationPackage.DIAGRAM__SOURCE_EDGES:
				return getSourceEdges();
			case NotationPackage.DIAGRAM__TARGET_EDGES:
				return getTargetEdges();
			case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
				return getPersistedChildren();
			case NotationPackage.DIAGRAM__STYLES:
				return getStyles();
			case NotationPackage.DIAGRAM__ELEMENT:
				if (resolve) return getElement();
				return basicGetElement();
			case NotationPackage.DIAGRAM__DIAGRAM:
				if (resolve) return getDiagram();
				return basicGetDiagram();
			case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
				return getTransientChildren();
			case NotationPackage.DIAGRAM__NAME:
				return getName();
			case NotationPackage.DIAGRAM__MEASUREMENT_UNIT:
				return getMeasurementUnit();
			case NotationPackage.DIAGRAM__PERSISTED_EDGES:
				return getPersistedEdges();
			case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
				return getTransientEdges();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.DIAGRAM__EANNOTATIONS:
				getEAnnotations().clear();
				getEAnnotations().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__VISIBLE:
				setVisible(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.DIAGRAM__TYPE:
				setType((String)newValue);
				return;
			case NotationPackage.DIAGRAM__MUTABLE:
				setMutable(((Boolean)newValue).booleanValue());
				return;
			case NotationPackage.DIAGRAM__SOURCE_EDGES:
				getSourceEdges().clear();
				getSourceEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__TARGET_EDGES:
				getTargetEdges().clear();
				getTargetEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
				getPersistedChildren().clear();
				getPersistedChildren().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__STYLES:
				getStyles().clear();
				getStyles().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__ELEMENT:
				setElement((EObject)newValue);
				return;
			case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
				getTransientChildren().clear();
				getTransientChildren().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__NAME:
				setName((String)newValue);
				return;
			case NotationPackage.DIAGRAM__PERSISTED_EDGES:
				getPersistedEdges().clear();
				getPersistedEdges().addAll((Collection)newValue);
				return;
			case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
				getTransientEdges().clear();
				getTransientEdges().addAll((Collection)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.DIAGRAM__EANNOTATIONS:
				getEAnnotations().clear();
				return;
			case NotationPackage.DIAGRAM__VISIBLE:
				setVisible(VISIBLE_EDEFAULT);
				return;
			case NotationPackage.DIAGRAM__TYPE:
				setType(TYPE_EDEFAULT);
				return;
			case NotationPackage.DIAGRAM__MUTABLE:
				setMutable(MUTABLE_EDEFAULT);
				return;
			case NotationPackage.DIAGRAM__SOURCE_EDGES:
				getSourceEdges().clear();
				return;
			case NotationPackage.DIAGRAM__TARGET_EDGES:
				getTargetEdges().clear();
				return;
			case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
				getPersistedChildren().clear();
				return;
			case NotationPackage.DIAGRAM__STYLES:
				getStyles().clear();
				return;
			case NotationPackage.DIAGRAM__ELEMENT:
				unsetElement();
				return;
			case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
				getTransientChildren().clear();
				return;
			case NotationPackage.DIAGRAM__NAME:
				setName(NAME_EDEFAULT);
				return;
			case NotationPackage.DIAGRAM__PERSISTED_EDGES:
				getPersistedEdges().clear();
				return;
			case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
				getTransientEdges().clear();
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.DIAGRAM__EANNOTATIONS:
				return eAnnotations != null && !eAnnotations.isEmpty();
			case NotationPackage.DIAGRAM__VISIBLE:
				return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
			case NotationPackage.DIAGRAM__TYPE:
				return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
			case NotationPackage.DIAGRAM__MUTABLE:
				return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
			case NotationPackage.DIAGRAM__SOURCE_EDGES:
				return sourceEdges != null && !sourceEdges.isEmpty();
			case NotationPackage.DIAGRAM__TARGET_EDGES:
				return targetEdges != null && !targetEdges.isEmpty();
			case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
				return persistedChildren != null && !persistedChildren.isEmpty();
			case NotationPackage.DIAGRAM__STYLES:
				return styles != null && !styles.isEmpty();
			case NotationPackage.DIAGRAM__ELEMENT:
				return isSetElement();
			case NotationPackage.DIAGRAM__DIAGRAM:
				return basicGetDiagram() != null;
			case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
				return transientChildren != null && !transientChildren.isEmpty();
			case NotationPackage.DIAGRAM__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case NotationPackage.DIAGRAM__MEASUREMENT_UNIT:
				return measurementUnit != MEASUREMENT_UNIT_EDEFAULT;
			case NotationPackage.DIAGRAM__PERSISTED_EDGES:
				return persistedEdges != null && !persistedEdges.isEmpty();
			case NotationPackage.DIAGRAM__TRANSIENT_EDGES:
				return transientEdges != null && !transientEdges.isEmpty();
		}
		return eDynamicIsSet(eFeature);
	}
d358 2
a359 2
	/**
	 * <!-- begin-user-doc -->
d361 2
a362 2
	 * @@generated
	 */
d364 1
a364 1
		if (eIsProxy()) return super.toString();
d366 8
a373 8
		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (name: "); //$NON-NLS-1$
		result.append(name);
		result.append(", measurementUnit: "); //$NON-NLS-1$
		result.append(measurementUnit);
		result.append(')');
		return result.toString();
	}
@


1.3
log
@111894  gmf-head mmostafa 051201 Improve memory consumption of opened notation diagram
@
text
@d32 1
d76 20
d160 25
d317 2
d466 2
d487 2
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a20 1
import org.eclipse.emf.common.util.BasicEList;
d27 1
a29 1

d93 3
d141 5
a145 9
		List edges = new ArrayList();	
		if (persistedEdges!=null &&
			persistedEdges.size()>0){
			edges.addAll(getPersistedEdges());
		}
		
		if (transientEdges!=null&&
			transientEdges.size()>0){
			edges.addAll(getTransientEdges());
d147 1
a147 2
		
		return new BasicEList.UnmodifiableEList(edges.size(), edges.toArray());
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

