head	1.14;
access;
symbols
	v20081020-0700:1.14
	v20080722-1827:1.14
	v20080716-1600:1.14
	v20080716-1642:1.14
	R2_1_maintenance:1.14.0.2
	Root_R2_1_maintenance:1.14
	R2_1_0:1.14
	v20080507-1326:1.14
	v20080503-1740:1.12
	v20080425-1959:1.11
	v20080407-2250:1.11
	v20080407-1545:1.11
	v20080331-1625:1.10
	v20080328-1605:1.10
	v20080222-1200:1.9
	v20080215-1500:1.9
	v20080114-2222:1.9
	v20071130-1111:1.9
	v20071124-0000:1.9
	v20071112-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070518-1300:1.9
	v20070403-1500:1.8
	v20070330-1300:1.8
	M4_20:1.8
	v20061214-0000:1.8
	M3_20:1.8
	v20061013-1330:1.8
	v20060919-0800:1.7.2.2
	M1_20:1.7
	v20060728-0500:1.7.2.1
	v20060721-1130:1.7.2.1
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1200:1.7
	v20060531-1730:1.7
	v20060519-0800:1.7
	I20060505-1400:1.7
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.7
	I20060407-1200:1.7
	I20060331-1000:1.7
	I20060324-0300:1.7
	I20060317-1300:1.7
	I20060317-1200:1.7
	I20060316-1300:1.7
	I20060309-1300:1.7
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.7
	I20060216-1945:1.7
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.14
date	2008.05.07.01.04.47;	author ahunter;	state Exp;
branches;
next	1.13;
commitid	72e74821002b4567;

1.13
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.12;
commitid	3e924820f4604567;

1.12
date	2008.05.03.18.33.02;	author ahunter;	state Exp;
branches;
next	1.11;
commitid	1c13481cafcc4567;

1.11
date	2008.04.07.19.37.20;	author ahunter;	state Exp;
branches;
next	1.10;
commitid	2da847fa77ee4567;

1.10
date	2008.03.27.21.11.11;	author ahunter;	state Exp;
branches;
next	1.9;
commitid	3a1947ec0d6e4567;

1.9
date	2007.05.17.16.26.50;	author aboyko;	state Exp;
branches;
next	1.8;
commitid	71d9464c82444567;

1.8
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.01.27.20.22.48;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.17.18.12.23;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.11.17.01.22;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.06.20.26.00;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.7.2.1
date	2006.07.17.20.27.55;	author ahunter;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.14
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.impl.EFactoryImpl;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.eclipse.gmf.runtime.notation.Alignment;
import org.eclipse.gmf.runtime.notation.ArrowStyle;
import org.eclipse.gmf.runtime.notation.ArrowType;
import org.eclipse.gmf.runtime.notation.BooleanListValueStyle;
import org.eclipse.gmf.runtime.notation.BooleanValueStyle;
import org.eclipse.gmf.runtime.notation.Bounds;
import org.eclipse.gmf.runtime.notation.ByteArrayValueStyle;
import org.eclipse.gmf.runtime.notation.CanonicalStyle;
import org.eclipse.gmf.runtime.notation.ConnectorStyle;
import org.eclipse.gmf.runtime.notation.DataTypeStyle;
import org.eclipse.gmf.runtime.notation.DescriptionStyle;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.DiagramLinkStyle;
import org.eclipse.gmf.runtime.notation.DiagramStyle;
import org.eclipse.gmf.runtime.notation.DoubleListValueStyle;
import org.eclipse.gmf.runtime.notation.DoubleValueStyle;
import org.eclipse.gmf.runtime.notation.DrawerStyle;
import org.eclipse.gmf.runtime.notation.EObjectListValueStyle;
import org.eclipse.gmf.runtime.notation.EObjectValueStyle;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.FillStyle;
import org.eclipse.gmf.runtime.notation.Filtering;
import org.eclipse.gmf.runtime.notation.FilteringStyle;
import org.eclipse.gmf.runtime.notation.FontStyle;
import org.eclipse.gmf.runtime.notation.Guide;
import org.eclipse.gmf.runtime.notation.GuideStyle;
import org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle;
import org.eclipse.gmf.runtime.notation.IdentityAnchor;
import org.eclipse.gmf.runtime.notation.Image;
import org.eclipse.gmf.runtime.notation.ImageBufferStyle;
import org.eclipse.gmf.runtime.notation.ImageStyle;
import org.eclipse.gmf.runtime.notation.IntListValueStyle;
import org.eclipse.gmf.runtime.notation.IntValueStyle;
import org.eclipse.gmf.runtime.notation.JumpLinkStatus;
import org.eclipse.gmf.runtime.notation.JumpLinkType;
import org.eclipse.gmf.runtime.notation.LineStyle;
import org.eclipse.gmf.runtime.notation.LineType;
import org.eclipse.gmf.runtime.notation.LineTypeStyle;
import org.eclipse.gmf.runtime.notation.ListValueStyle;
import org.eclipse.gmf.runtime.notation.Location;
import org.eclipse.gmf.runtime.notation.MeasurementUnit;
import org.eclipse.gmf.runtime.notation.MultiDiagramLinkStyle;
import org.eclipse.gmf.runtime.notation.NamedStyle;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationFactory;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.PageStyle;
import org.eclipse.gmf.runtime.notation.PropertiesSetStyle;
import org.eclipse.gmf.runtime.notation.PropertyValue;
import org.eclipse.gmf.runtime.notation.Ratio;
import org.eclipse.gmf.runtime.notation.RelativeBendpoints;
import org.eclipse.gmf.runtime.notation.Routing;
import org.eclipse.gmf.runtime.notation.RoutingStyle;
import org.eclipse.gmf.runtime.notation.ShapeStyle;
import org.eclipse.gmf.runtime.notation.SingleValueStyle;
import org.eclipse.gmf.runtime.notation.Size;
import org.eclipse.gmf.runtime.notation.Smoothness;
import org.eclipse.gmf.runtime.notation.Sorting;
import org.eclipse.gmf.runtime.notation.SortingDirection;
import org.eclipse.gmf.runtime.notation.SortingStyle;
import org.eclipse.gmf.runtime.notation.StringListValueStyle;
import org.eclipse.gmf.runtime.notation.StringValueStyle;
import org.eclipse.gmf.runtime.notation.TextAlignment;
import org.eclipse.gmf.runtime.notation.TextStyle;
import org.eclipse.gmf.runtime.notation.TitleStyle;
import org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @@generated
 */
/*
 * @@canBeSeenBy %partners
 */
public class NotationFactoryImpl extends EFactoryImpl implements NotationFactory {
    /**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public static NotationFactory init() {
		try {
			NotationFactory theNotationFactory = (NotationFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/runtime/1.0.1/notation"); //$NON-NLS-1$ 
			if (theNotationFactory != null) {
				return theNotationFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new NotationFactoryImpl();
	}

    /**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotationFactoryImpl() {
		super();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case NotationPackage.EDGE: return createEdge();
			case NotationPackage.NODE: return createNode();
			case NotationPackage.FILL_STYLE: return createFillStyle();
			case NotationPackage.LINE_STYLE: return createLineStyle();
			case NotationPackage.FONT_STYLE: return createFontStyle();
			case NotationPackage.TITLE_STYLE: return createTitleStyle();
			case NotationPackage.SORTING_STYLE: return createSortingStyle();
			case NotationPackage.DESCRIPTION_STYLE: return createDescriptionStyle();
			case NotationPackage.SIZE: return createSize();
			case NotationPackage.LOCATION: return createLocation();
			case NotationPackage.BOUNDS: return createBounds();
			case NotationPackage.RATIO: return createRatio();
			case NotationPackage.IDENTITY_ANCHOR: return createIdentityAnchor();
			case NotationPackage.ROUTING_STYLE: return createRoutingStyle();
			case NotationPackage.RELATIVE_BENDPOINTS: return createRelativeBendpoints();
			case NotationPackage.DIAGRAM: return createDiagram();
			case NotationPackage.IMAGE: return createImage();
			case NotationPackage.CANONICAL_STYLE: return createCanonicalStyle();
			case NotationPackage.SHAPE_STYLE: return createShapeStyle();
			case NotationPackage.CONNECTOR_STYLE: return createConnectorStyle();
			case NotationPackage.PAGE_STYLE: return createPageStyle();
			case NotationPackage.DRAWER_STYLE: return createDrawerStyle();
			case NotationPackage.GUIDE_STYLE: return createGuideStyle();
			case NotationPackage.GUIDE: return createGuide();
			case NotationPackage.NODE_ENTRY: return (EObject)createNodeEntry();
			case NotationPackage.FILTERING_STYLE: return createFilteringStyle();
			case NotationPackage.DIAGRAM_STYLE: return createDiagramStyle();
			case NotationPackage.IMAGE_STYLE: return createImageStyle();
			case NotationPackage.IMAGE_BUFFER_STYLE: return createImageBufferStyle();
			case NotationPackage.PROPERTIES_SET_STYLE: return createPropertiesSetStyle();
			case NotationPackage.STRING_TO_PROPERTY_VALUE_MAP_ENTRY: return (EObject)createStringToPropertyValueMapEntry();
			case NotationPackage.PROPERTY_VALUE: return createPropertyValue();
			case NotationPackage.SINGLE_VALUE_STYLE: return createSingleValueStyle();
			case NotationPackage.LIST_VALUE_STYLE: return createListValueStyle();
			case NotationPackage.NAMED_STYLE: return createNamedStyle();
			case NotationPackage.DATA_TYPE_STYLE: return createDataTypeStyle();
			case NotationPackage.INT_VALUE_STYLE: return createIntValueStyle();
			case NotationPackage.INT_LIST_VALUE_STYLE: return createIntListValueStyle();
			case NotationPackage.BOOLEAN_VALUE_STYLE: return createBooleanValueStyle();
			case NotationPackage.DOUBLE_VALUE_STYLE: return createDoubleValueStyle();
			case NotationPackage.DOUBLE_LIST_VALUE_STYLE: return createDoubleListValueStyle();
			case NotationPackage.STRING_VALUE_STYLE: return createStringValueStyle();
			case NotationPackage.STRING_LIST_VALUE_STYLE: return createStringListValueStyle();
			case NotationPackage.EOBJECT_VALUE_STYLE: return createEObjectValueStyle();
			case NotationPackage.EOBJECT_LIST_VALUE_STYLE: return createEObjectListValueStyle();
			case NotationPackage.BYTE_ARRAY_VALUE_STYLE: return createByteArrayValueStyle();
			case NotationPackage.BOOLEAN_LIST_VALUE_STYLE: return createBooleanListValueStyle();
			case NotationPackage.HINTED_DIAGRAM_LINK_STYLE: return createHintedDiagramLinkStyle();
			case NotationPackage.DIAGRAM_LINK_STYLE: return createDiagramLinkStyle();
			case NotationPackage.MULTI_DIAGRAM_LINK_STYLE: return createMultiDiagramLinkStyle();
			case NotationPackage.TEXT_STYLE: return createTextStyle();
			case NotationPackage.LINE_TYPE_STYLE: return createLineTypeStyle();
			case NotationPackage.ARROW_STYLE: return createArrowStyle();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier"); //$NON-NLS-1$ //$NON-NLS-2$
		}
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object createFromString(EDataType eDataType, String initialValue) {
		switch (eDataType.getClassifierID()) {
			case NotationPackage.SORTING:
				return createSortingFromString(eDataType, initialValue);
			case NotationPackage.FILTERING:
				return createFilteringFromString(eDataType, initialValue);
			case NotationPackage.ROUTING:
				return createRoutingFromString(eDataType, initialValue);
			case NotationPackage.SMOOTHNESS:
				return createSmoothnessFromString(eDataType, initialValue);
			case NotationPackage.JUMP_LINK_STATUS:
				return createJumpLinkStatusFromString(eDataType, initialValue);
			case NotationPackage.JUMP_LINK_TYPE:
				return createJumpLinkTypeFromString(eDataType, initialValue);
			case NotationPackage.ALIGNMENT:
				return createAlignmentFromString(eDataType, initialValue);
			case NotationPackage.SORTING_DIRECTION:
				return createSortingDirectionFromString(eDataType, initialValue);
			case NotationPackage.MEASUREMENT_UNIT:
				return createMeasurementUnitFromString(eDataType, initialValue);
			case NotationPackage.TEXT_ALIGNMENT:
				return createTextAlignmentFromString(eDataType, initialValue);
			case NotationPackage.LINE_TYPE:
				return createLineTypeFromString(eDataType, initialValue);
			case NotationPackage.ARROW_TYPE:
				return createArrowTypeFromString(eDataType, initialValue);
			case NotationPackage.RELATIVE_BENDPOINT_LIST:
				return createRelativeBendpointListFromString(eDataType, initialValue);
			case NotationPackage.FILTER_KEY_LIST:
				return createFilterKeyListFromString(eDataType, initialValue);
			case NotationPackage.SORT_KEY_MAP:
				return createSortKeyMapFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier"); //$NON-NLS-1$ //$NON-NLS-2$
		}
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertToString(EDataType eDataType, Object instanceValue) {
		switch (eDataType.getClassifierID()) {
			case NotationPackage.SORTING:
				return convertSortingToString(eDataType, instanceValue);
			case NotationPackage.FILTERING:
				return convertFilteringToString(eDataType, instanceValue);
			case NotationPackage.ROUTING:
				return convertRoutingToString(eDataType, instanceValue);
			case NotationPackage.SMOOTHNESS:
				return convertSmoothnessToString(eDataType, instanceValue);
			case NotationPackage.JUMP_LINK_STATUS:
				return convertJumpLinkStatusToString(eDataType, instanceValue);
			case NotationPackage.JUMP_LINK_TYPE:
				return convertJumpLinkTypeToString(eDataType, instanceValue);
			case NotationPackage.ALIGNMENT:
				return convertAlignmentToString(eDataType, instanceValue);
			case NotationPackage.SORTING_DIRECTION:
				return convertSortingDirectionToString(eDataType, instanceValue);
			case NotationPackage.MEASUREMENT_UNIT:
				return convertMeasurementUnitToString(eDataType, instanceValue);
			case NotationPackage.TEXT_ALIGNMENT:
				return convertTextAlignmentToString(eDataType, instanceValue);
			case NotationPackage.LINE_TYPE:
				return convertLineTypeToString(eDataType, instanceValue);
			case NotationPackage.ARROW_TYPE:
				return convertArrowTypeToString(eDataType, instanceValue);
			case NotationPackage.RELATIVE_BENDPOINT_LIST:
				return convertRelativeBendpointListToString(eDataType, instanceValue);
			case NotationPackage.FILTER_KEY_LIST:
				return convertFilterKeyListToString(eDataType, instanceValue);
			case NotationPackage.SORT_KEY_MAP:
				return convertSortKeyMapToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier"); //$NON-NLS-1$ //$NON-NLS-2$
		}
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Edge createEdge() {
		EdgeImpl edge = new EdgeImpl();
		return edge;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Node createNode() {
		NodeImpl node = new NodeImpl();
		return node;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FillStyle createFillStyle() {
		FillStyleImpl fillStyle = new FillStyleImpl();
		return fillStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LineStyle createLineStyle() {
		LineStyleImpl lineStyle = new LineStyleImpl();
		return lineStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FontStyle createFontStyle() {
		FontStyleImpl fontStyle = new FontStyleImpl();
		return fontStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public TitleStyle createTitleStyle() {
		TitleStyleImpl titleStyle = new TitleStyleImpl();
		return titleStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public SortingStyle createSortingStyle() {
		SortingStyleImpl sortingStyle = new SortingStyleImpl();
		return sortingStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DescriptionStyle createDescriptionStyle() {
		DescriptionStyleImpl descriptionStyle = new DescriptionStyleImpl();
		return descriptionStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Size createSize() {
		SizeImpl size = new SizeImpl();
		return size;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Location createLocation() {
		LocationImpl location = new LocationImpl();
		return location;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Bounds createBounds() {
		BoundsImpl bounds = new BoundsImpl();
		return bounds;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Ratio createRatio() {
		RatioImpl ratio = new RatioImpl();
		return ratio;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public IdentityAnchor createIdentityAnchor() {
		IdentityAnchorImpl identityAnchor = new IdentityAnchorImpl();
		return identityAnchor;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public RoutingStyle createRoutingStyle() {
		RoutingStyleImpl routingStyle = new RoutingStyleImpl();
		return routingStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public RelativeBendpoints createRelativeBendpoints() {
		RelativeBendpointsImpl relativeBendpoints = new RelativeBendpointsImpl();
		return relativeBendpoints;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CanonicalStyle createCanonicalStyle() {
		CanonicalStyleImpl canonicalStyle = new CanonicalStyleImpl();
		return canonicalStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ShapeStyle createShapeStyle() {
		ShapeStyleImpl shapeStyle = new ShapeStyleImpl();
		return shapeStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ConnectorStyle createConnectorStyle() {
		ConnectorStyleImpl connectorStyle = new ConnectorStyleImpl();
		return connectorStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Diagram createDiagram() {
		DiagramImpl diagram = new DiagramImpl();
		return diagram;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Image createImage() {
		ImageImpl image = new ImageImpl();
		return image;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public PageStyle createPageStyle() {
		PageStyleImpl pageStyle = new PageStyleImpl();
		return pageStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DrawerStyle createDrawerStyle() {
		DrawerStyleImpl drawerStyle = new DrawerStyleImpl();
		return drawerStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GuideStyle createGuideStyle() {
		GuideStyleImpl guideStyle = new GuideStyleImpl();
		return guideStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Guide createGuide() {
		GuideImpl guide = new GuideImpl();
		return guide;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Map.Entry createNodeEntry() {
		NodeEntryImpl nodeEntry = new NodeEntryImpl();
		return nodeEntry;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FilteringStyle createFilteringStyle() {
		FilteringStyleImpl filteringStyle = new FilteringStyleImpl();
		return filteringStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DiagramStyle createDiagramStyle() {
		DiagramStyleImpl diagramStyle = new DiagramStyleImpl();
		return diagramStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ImageStyle createImageStyle() {
		ImageStyleImpl imageStyle = new ImageStyleImpl();
		return imageStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ImageBufferStyle createImageBufferStyle() {
		ImageBufferStyleImpl imageBufferStyle = new ImageBufferStyleImpl();
		return imageBufferStyle;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public PropertiesSetStyle createPropertiesSetStyle() {
		PropertiesSetStyleImpl propertiesSetStyle = new PropertiesSetStyleImpl();
		return propertiesSetStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Map.Entry createStringToPropertyValueMapEntry() {
		StringToPropertyValueMapEntryImpl stringToPropertyValueMapEntry = new StringToPropertyValueMapEntryImpl();
		return stringToPropertyValueMapEntry;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public PropertyValue createPropertyValue() {
		PropertyValueImpl propertyValue = new PropertyValueImpl();
		return propertyValue;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public SingleValueStyle createSingleValueStyle() {
		SingleValueStyleImpl singleValueStyle = new SingleValueStyleImpl();
		return singleValueStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ListValueStyle createListValueStyle() {
		ListValueStyleImpl listValueStyle = new ListValueStyleImpl();
		return listValueStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NamedStyle createNamedStyle() {
		NamedStyleImpl namedStyle = new NamedStyleImpl();
		return namedStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DataTypeStyle createDataTypeStyle() {
		DataTypeStyleImpl dataTypeStyle = new DataTypeStyleImpl();
		return dataTypeStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public IntValueStyle createIntValueStyle() {
		IntValueStyleImpl intValueStyle = new IntValueStyleImpl();
		return intValueStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public IntListValueStyle createIntListValueStyle() {
		IntListValueStyleImpl intListValueStyle = new IntListValueStyleImpl();
		return intListValueStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public BooleanValueStyle createBooleanValueStyle() {
		BooleanValueStyleImpl booleanValueStyle = new BooleanValueStyleImpl();
		return booleanValueStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DoubleValueStyle createDoubleValueStyle() {
		DoubleValueStyleImpl doubleValueStyle = new DoubleValueStyleImpl();
		return doubleValueStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DoubleListValueStyle createDoubleListValueStyle() {
		DoubleListValueStyleImpl doubleListValueStyle = new DoubleListValueStyleImpl();
		return doubleListValueStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public StringValueStyle createStringValueStyle() {
		StringValueStyleImpl stringValueStyle = new StringValueStyleImpl();
		return stringValueStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public StringListValueStyle createStringListValueStyle() {
		StringListValueStyleImpl stringListValueStyle = new StringListValueStyleImpl();
		return stringListValueStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EObjectValueStyle createEObjectValueStyle() {
		EObjectValueStyleImpl eObjectValueStyle = new EObjectValueStyleImpl();
		return eObjectValueStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EObjectListValueStyle createEObjectListValueStyle() {
		EObjectListValueStyleImpl eObjectListValueStyle = new EObjectListValueStyleImpl();
		return eObjectListValueStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ByteArrayValueStyle createByteArrayValueStyle() {
		ByteArrayValueStyleImpl byteArrayValueStyle = new ByteArrayValueStyleImpl();
		return byteArrayValueStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public BooleanListValueStyle createBooleanListValueStyle() {
		BooleanListValueStyleImpl booleanListValueStyle = new BooleanListValueStyleImpl();
		return booleanListValueStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public HintedDiagramLinkStyle createHintedDiagramLinkStyle() {
		HintedDiagramLinkStyleImpl hintedDiagramLinkStyle = new HintedDiagramLinkStyleImpl();
		return hintedDiagramLinkStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DiagramLinkStyle createDiagramLinkStyle() {
		DiagramLinkStyleImpl diagramLinkStyle = new DiagramLinkStyleImpl();
		return diagramLinkStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public MultiDiagramLinkStyle createMultiDiagramLinkStyle() {
		MultiDiagramLinkStyleImpl multiDiagramLinkStyle = new MultiDiagramLinkStyleImpl();
		return multiDiagramLinkStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public TextStyle createTextStyle() {
		TextStyleImpl textStyle = new TextStyleImpl();
		return textStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LineTypeStyle createLineTypeStyle() {
		LineTypeStyleImpl lineTypeStyle = new LineTypeStyleImpl();
		return lineTypeStyle;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ArrowStyle createArrowStyle() {
		ArrowStyleImpl arrowStyle = new ArrowStyleImpl();
		return arrowStyle;
	}

				/**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Sorting createSortingFromString(EDataType eDataType, String initialValue) {
		Sorting result = Sorting.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		return result;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public String convertSortingToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Filtering createFilteringFromString(EDataType eDataType, String initialValue) {
		Filtering result = Filtering.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		return result;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public String convertFilteringToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Routing createRoutingFromString(EDataType eDataType, String initialValue) {
		Routing result = Routing.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		return result;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public String convertRoutingToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Smoothness createSmoothnessFromString(EDataType eDataType, String initialValue) {
		Smoothness result = Smoothness.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		return result;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public String convertSmoothnessToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public JumpLinkStatus createJumpLinkStatusFromString(EDataType eDataType, String initialValue) {
		JumpLinkStatus result = JumpLinkStatus.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		return result;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public String convertJumpLinkStatusToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public JumpLinkType createJumpLinkTypeFromString(EDataType eDataType, String initialValue) {
		JumpLinkType result = JumpLinkType.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		return result;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public String convertJumpLinkTypeToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Alignment createAlignmentFromString(EDataType eDataType, String initialValue) {
		Alignment result = Alignment.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		return result;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public String convertAlignmentToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public SortingDirection createSortingDirectionFromString(EDataType eDataType, String initialValue) {
		SortingDirection result = SortingDirection.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		return result;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public String convertSortingDirectionToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public MeasurementUnit createMeasurementUnitFromString(EDataType eDataType, String initialValue) {
		MeasurementUnit result = MeasurementUnit.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		return result;
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public String convertMeasurementUnitToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public TextAlignment createTextAlignmentFromString(EDataType eDataType, String initialValue) {
		TextAlignment result = TextAlignment.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		return result;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertTextAlignmentToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LineType createLineTypeFromString(EDataType eDataType, String initialValue) {
		LineType result = LineType.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		return result;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertLineTypeToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ArrowType createArrowTypeFromString(EDataType eDataType, String initialValue) {
		ArrowType result = ArrowType.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
		return result;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertArrowTypeToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public List createRelativeBendpointListFromString(EDataType eDataType, String initialValue) {
		StringTokenizer st = new StringTokenizer(initialValue, "$"); //$NON-NLS-1$
		List newList = new ArrayList(st.countTokens());
		while (st.hasMoreTokens())
			newList.add(new RelativeBendpoint(st.nextToken().trim()));
		return newList;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String convertRelativeBendpointListToString(EDataType eDataType, Object instanceValue) {
		StringBuffer sb = new StringBuffer();
		for (Iterator i = ((List)instanceValue).iterator(); i.hasNext();) {
			RelativeBendpoint point = (RelativeBendpoint) i.next();
			if (sb.length() != 0) sb.append('$');
			sb.append(point.convertToString());
		}
		return sb.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public List createFilterKeyListFromString(EDataType eDataType, String initialValue) {
		StringTokenizer st = new StringTokenizer(initialValue, ","); //$NON-NLS-1$
		List newList = new ArrayList(st.countTokens());
		while (st.hasMoreTokens())
			newList.add(st.nextToken().trim());
		return newList;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String convertFilterKeyListToString(EDataType eDataType, Object instanceValue) {
		StringBuffer sb = new StringBuffer();
		for (Iterator i = ((List)instanceValue).iterator(); i.hasNext();) {
			String key = (String) i.next();
			if (sb.length() != 0) sb.append(',');
			sb.append(key);
		}
		return sb.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public Map createSortKeyMapFromString(EDataType eDataType, String initialValue) {
		StringTokenizer st = new StringTokenizer(initialValue, ","); //$NON-NLS-1$
		Map newMap = new LinkedHashMap(st.countTokens());
		String s;
		int i;
		while (st.hasMoreTokens()) {
			s = st.nextToken().trim();
			i = s.indexOf(':');
			newMap.put(s.substring(0, i).trim(), SortingDirection.get(s.substring(i+1).trim()));
		}
		return newMap;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String convertSortKeyMapToString(EDataType eDataType, Object instanceValue) {
		StringBuffer sb = new StringBuffer();
		Map keyMap = (Map) instanceValue;
		for (Iterator i = keyMap.keySet().iterator(); i.hasNext();) {
			String key = (String) i.next();
			SortingDirection direction = (SortingDirection) keyMap.get(key);
			if (sb.length() != 0) sb.append(',');
			sb.append(key + ":" + direction.getName()); //$NON-NLS-1$
		}
		return sb.toString();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotationPackage getNotationPackage() {
		return (NotationPackage)getEPackage();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@deprecated
	 * @@generated
	 */
	public static NotationPackage getPackage() {
		return NotationPackage.eINSTANCE;
	}

} //NotationFactoryImpl
@


1.13
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@d27 65
a91 1
import org.eclipse.gmf.runtime.notation.*;
a92 1
import org.eclipse.gmf.runtime.notation.util.StringPacker;
a1141 2
	
	protected StringPacker stringPacker = new StringPacker();
d1143 1
a1143 23
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public byte[] createUUIDFromString(EDataType eDataType, String initialValue) {
		// TODO: Ed's more efficient algorithm: https://bugs.eclipse.org/206267
		return stringPacker.getByteArray(initialValue);
		//return initialValue.getBytes();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String convertUUIDToString(EDataType eDataType, Object instanceValue) {
		// TODO: Ed's more efficient algorithm: https://bugs.eclipse.org/206267
		return stringPacker.getString((byte[]) instanceValue);
		//return new String((byte[]) instanceValue);
	}

				/**
@


1.12
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@a171 2
			case NotationPackage.UUID:
				return createUUIDFromString(eDataType, initialValue);
a213 2
			case NotationPackage.UUID:
				return convertUUIDToString(eDataType, instanceValue);
@


1.11
log
@[225137] gmf-head ahunter 080407 Line styles notation enhancement
@
text
@a27 39
import org.eclipse.gmf.runtime.notation.Alignment;
import org.eclipse.gmf.runtime.notation.Bounds;
import org.eclipse.gmf.runtime.notation.CanonicalStyle;
import org.eclipse.gmf.runtime.notation.ConnectorStyle;
import org.eclipse.gmf.runtime.notation.DescriptionStyle;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.DiagramStyle;
import org.eclipse.gmf.runtime.notation.DrawerStyle;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.FillStyle;
import org.eclipse.gmf.runtime.notation.Filtering;
import org.eclipse.gmf.runtime.notation.FilteringStyle;
import org.eclipse.gmf.runtime.notation.FontStyle;
import org.eclipse.gmf.runtime.notation.Guide;
import org.eclipse.gmf.runtime.notation.GuideStyle;
import org.eclipse.gmf.runtime.notation.IdentityAnchor;
import org.eclipse.gmf.runtime.notation.Image;
import org.eclipse.gmf.runtime.notation.ImageBufferStyle;
import org.eclipse.gmf.runtime.notation.ImageStyle;
import org.eclipse.gmf.runtime.notation.JumpLinkStatus;
import org.eclipse.gmf.runtime.notation.JumpLinkType;
import org.eclipse.gmf.runtime.notation.LineStyle;
import org.eclipse.gmf.runtime.notation.Location;
import org.eclipse.gmf.runtime.notation.MeasurementUnit;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationFactory;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.PageStyle;
import org.eclipse.gmf.runtime.notation.Ratio;
import org.eclipse.gmf.runtime.notation.RelativeBendpoints;
import org.eclipse.gmf.runtime.notation.Routing;
import org.eclipse.gmf.runtime.notation.RoutingStyle;
import org.eclipse.gmf.runtime.notation.ShapeStyle;
import org.eclipse.gmf.runtime.notation.Size;
import org.eclipse.gmf.runtime.notation.Smoothness;
import org.eclipse.gmf.runtime.notation.Sorting;
import org.eclipse.gmf.runtime.notation.SortingDirection;
import org.eclipse.gmf.runtime.notation.SortingStyle;
import org.eclipse.gmf.runtime.notation.TitleStyle;
d29 1
d172 2
d216 2
d1083 2
d1086 23
a1108 1
    /**
@


1.10
log
@[224473] gmf-head ahunter 080327 Text alignment enhancement
@
text
@d166 2
d200 4
d242 4
d769 20
d990 40
@


1.9
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
d165 1
d196 2
d234 2
d749 10
d940 20
@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d27 1
d80 2
a81 2
     * Creates the default factory implementation.
     * <!-- begin-user-doc -->
d83 2
a84 2
     * @@generated
     */
d86 11
a96 11
        try {
            NotationFactory theNotationFactory = (NotationFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/runtime/1.0.0/notation"); //$NON-NLS-1$ 
            if (theNotationFactory != null) {
                return theNotationFactory;
            }
        }
        catch (Exception exception) {
            EcorePlugin.INSTANCE.log(exception);
        }
        return new NotationFactoryImpl();
    }
d99 2
a100 2
     * Creates an instance of the factory.
     * <!-- begin-user-doc -->
d102 2
a103 2
     * @@generated
     */
d105 2
a106 2
        super();
    }
d109 1
a109 1
     * <!-- begin-user-doc -->
d111 2
a112 2
     * @@generated
     */
d114 55
a168 34
        switch (eClass.getClassifierID()) {
            case NotationPackage.EDGE: return createEdge();
            case NotationPackage.NODE: return createNode();
            case NotationPackage.FILL_STYLE: return createFillStyle();
            case NotationPackage.LINE_STYLE: return createLineStyle();
            case NotationPackage.FONT_STYLE: return createFontStyle();
            case NotationPackage.TITLE_STYLE: return createTitleStyle();
            case NotationPackage.SORTING_STYLE: return createSortingStyle();
            case NotationPackage.DESCRIPTION_STYLE: return createDescriptionStyle();
            case NotationPackage.SIZE: return createSize();
            case NotationPackage.LOCATION: return createLocation();
            case NotationPackage.BOUNDS: return createBounds();
            case NotationPackage.RATIO: return createRatio();
            case NotationPackage.IDENTITY_ANCHOR: return createIdentityAnchor();
            case NotationPackage.ROUTING_STYLE: return createRoutingStyle();
            case NotationPackage.RELATIVE_BENDPOINTS: return createRelativeBendpoints();
            case NotationPackage.DIAGRAM: return createDiagram();
            case NotationPackage.IMAGE: return createImage();
            case NotationPackage.CANONICAL_STYLE: return createCanonicalStyle();
            case NotationPackage.SHAPE_STYLE: return createShapeStyle();
            case NotationPackage.CONNECTOR_STYLE: return createConnectorStyle();
            case NotationPackage.PAGE_STYLE: return createPageStyle();
            case NotationPackage.DRAWER_STYLE: return createDrawerStyle();
            case NotationPackage.GUIDE_STYLE: return createGuideStyle();
            case NotationPackage.GUIDE: return createGuide();
            case NotationPackage.NODE_ENTRY: return (EObject)createNodeEntry();
            case NotationPackage.FILTERING_STYLE: return createFilteringStyle();
            case NotationPackage.DIAGRAM_STYLE: return createDiagramStyle();
            case NotationPackage.IMAGE_STYLE: return createImageStyle();
            case NotationPackage.IMAGE_BUFFER_STYLE: return createImageBufferStyle();
            default:
                throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier"); //$NON-NLS-1$ //$NON-NLS-2$
        }
    }
d171 1
a171 1
     * <!-- begin-user-doc -->
d173 2
a174 2
     * @@generated
     */
d176 29
a204 29
        switch (eDataType.getClassifierID()) {
            case NotationPackage.SORTING:
                return createSortingFromString(eDataType, initialValue);
            case NotationPackage.FILTERING:
                return createFilteringFromString(eDataType, initialValue);
            case NotationPackage.ROUTING:
                return createRoutingFromString(eDataType, initialValue);
            case NotationPackage.SMOOTHNESS:
                return createSmoothnessFromString(eDataType, initialValue);
            case NotationPackage.JUMP_LINK_STATUS:
                return createJumpLinkStatusFromString(eDataType, initialValue);
            case NotationPackage.JUMP_LINK_TYPE:
                return createJumpLinkTypeFromString(eDataType, initialValue);
            case NotationPackage.ALIGNMENT:
                return createAlignmentFromString(eDataType, initialValue);
            case NotationPackage.SORTING_DIRECTION:
                return createSortingDirectionFromString(eDataType, initialValue);
            case NotationPackage.MEASUREMENT_UNIT:
                return createMeasurementUnitFromString(eDataType, initialValue);
            case NotationPackage.RELATIVE_BENDPOINT_LIST:
                return createRelativeBendpointListFromString(eDataType, initialValue);
            case NotationPackage.FILTER_KEY_LIST:
                return createFilterKeyListFromString(eDataType, initialValue);
            case NotationPackage.SORT_KEY_MAP:
                return createSortKeyMapFromString(eDataType, initialValue);
            default:
                throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier"); //$NON-NLS-1$ //$NON-NLS-2$
        }
    }
d207 1
a207 1
     * <!-- begin-user-doc -->
d209 2
a210 2
     * @@generated
     */
d212 29
a240 29
        switch (eDataType.getClassifierID()) {
            case NotationPackage.SORTING:
                return convertSortingToString(eDataType, instanceValue);
            case NotationPackage.FILTERING:
                return convertFilteringToString(eDataType, instanceValue);
            case NotationPackage.ROUTING:
                return convertRoutingToString(eDataType, instanceValue);
            case NotationPackage.SMOOTHNESS:
                return convertSmoothnessToString(eDataType, instanceValue);
            case NotationPackage.JUMP_LINK_STATUS:
                return convertJumpLinkStatusToString(eDataType, instanceValue);
            case NotationPackage.JUMP_LINK_TYPE:
                return convertJumpLinkTypeToString(eDataType, instanceValue);
            case NotationPackage.ALIGNMENT:
                return convertAlignmentToString(eDataType, instanceValue);
            case NotationPackage.SORTING_DIRECTION:
                return convertSortingDirectionToString(eDataType, instanceValue);
            case NotationPackage.MEASUREMENT_UNIT:
                return convertMeasurementUnitToString(eDataType, instanceValue);
            case NotationPackage.RELATIVE_BENDPOINT_LIST:
                return convertRelativeBendpointListToString(eDataType, instanceValue);
            case NotationPackage.FILTER_KEY_LIST:
                return convertFilterKeyListToString(eDataType, instanceValue);
            case NotationPackage.SORT_KEY_MAP:
                return convertSortKeyMapToString(eDataType, instanceValue);
            default:
                throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier"); //$NON-NLS-1$ //$NON-NLS-2$
        }
    }
d243 1
a243 1
     * <!-- begin-user-doc -->
d245 2
a246 2
     * @@generated
     */
d248 3
a250 3
        EdgeImpl edge = new EdgeImpl();
        return edge;
    }
d253 1
a253 1
     * <!-- begin-user-doc -->
d255 2
a256 2
     * @@generated
     */
d258 3
a260 3
        NodeImpl node = new NodeImpl();
        return node;
    }
d263 1
a263 1
     * <!-- begin-user-doc -->
d265 2
a266 2
     * @@generated
     */
d268 3
a270 3
        FillStyleImpl fillStyle = new FillStyleImpl();
        return fillStyle;
    }
d273 1
a273 1
     * <!-- begin-user-doc -->
d275 2
a276 2
     * @@generated
     */
d278 3
a280 3
        LineStyleImpl lineStyle = new LineStyleImpl();
        return lineStyle;
    }
d283 1
a283 1
     * <!-- begin-user-doc -->
d285 2
a286 2
     * @@generated
     */
d288 3
a290 3
        FontStyleImpl fontStyle = new FontStyleImpl();
        return fontStyle;
    }
d293 1
a293 1
     * <!-- begin-user-doc -->
d295 2
a296 2
     * @@generated
     */
d298 3
a300 3
        TitleStyleImpl titleStyle = new TitleStyleImpl();
        return titleStyle;
    }
d303 1
a303 1
     * <!-- begin-user-doc -->
d305 2
a306 2
     * @@generated
     */
d308 3
a310 3
        SortingStyleImpl sortingStyle = new SortingStyleImpl();
        return sortingStyle;
    }
d313 1
a313 1
     * <!-- begin-user-doc -->
d315 2
a316 2
     * @@generated
     */
d318 3
a320 3
        DescriptionStyleImpl descriptionStyle = new DescriptionStyleImpl();
        return descriptionStyle;
    }
d323 1
a323 1
     * <!-- begin-user-doc -->
d325 2
a326 2
     * @@generated
     */
d328 3
a330 3
        SizeImpl size = new SizeImpl();
        return size;
    }
d333 1
a333 1
     * <!-- begin-user-doc -->
d335 2
a336 2
     * @@generated
     */
d338 3
a340 3
        LocationImpl location = new LocationImpl();
        return location;
    }
d343 1
a343 1
     * <!-- begin-user-doc -->
d345 2
a346 2
     * @@generated
     */
d348 3
a350 3
        BoundsImpl bounds = new BoundsImpl();
        return bounds;
    }
d353 1
a353 1
     * <!-- begin-user-doc -->
d355 2
a356 2
     * @@generated
     */
d358 3
a360 3
        RatioImpl ratio = new RatioImpl();
        return ratio;
    }
d363 1
a363 1
     * <!-- begin-user-doc -->
d365 2
a366 2
     * @@generated
     */
d368 3
a370 3
        IdentityAnchorImpl identityAnchor = new IdentityAnchorImpl();
        return identityAnchor;
    }
d373 1
a373 1
     * <!-- begin-user-doc -->
d375 2
a376 2
     * @@generated
     */
d378 3
a380 3
        RoutingStyleImpl routingStyle = new RoutingStyleImpl();
        return routingStyle;
    }
d383 1
a383 1
     * <!-- begin-user-doc -->
d385 2
a386 2
     * @@generated
     */
d388 3
a390 3
        RelativeBendpointsImpl relativeBendpoints = new RelativeBendpointsImpl();
        return relativeBendpoints;
    }
d393 1
a393 1
     * <!-- begin-user-doc -->
d395 2
a396 2
     * @@generated
     */
d398 3
a400 3
        CanonicalStyleImpl canonicalStyle = new CanonicalStyleImpl();
        return canonicalStyle;
    }
d403 1
a403 1
     * <!-- begin-user-doc -->
d405 2
a406 2
     * @@generated
     */
d408 3
a410 3
        ShapeStyleImpl shapeStyle = new ShapeStyleImpl();
        return shapeStyle;
    }
d413 1
a413 1
     * <!-- begin-user-doc -->
d415 2
a416 2
     * @@generated
     */
d418 3
a420 3
        ConnectorStyleImpl connectorStyle = new ConnectorStyleImpl();
        return connectorStyle;
    }
d423 1
a423 1
     * <!-- begin-user-doc -->
d425 2
a426 2
     * @@generated
     */
d428 3
a430 3
        DiagramImpl diagram = new DiagramImpl();
        return diagram;
    }
d433 1
a433 1
     * <!-- begin-user-doc -->
d435 2
a436 2
     * @@generated
     */
d438 3
a440 3
        ImageImpl image = new ImageImpl();
        return image;
    }
d443 1
a443 1
     * <!-- begin-user-doc -->
d445 2
a446 2
     * @@generated
     */
d448 3
a450 3
        PageStyleImpl pageStyle = new PageStyleImpl();
        return pageStyle;
    }
d453 1
a453 1
     * <!-- begin-user-doc -->
d455 2
a456 2
     * @@generated
     */
d458 3
a460 3
        DrawerStyleImpl drawerStyle = new DrawerStyleImpl();
        return drawerStyle;
    }
d463 1
a463 1
     * <!-- begin-user-doc -->
d465 2
a466 2
     * @@generated
     */
d468 3
a470 3
        GuideStyleImpl guideStyle = new GuideStyleImpl();
        return guideStyle;
    }
d473 1
a473 1
     * <!-- begin-user-doc -->
d475 2
a476 2
     * @@generated
     */
d478 3
a480 3
        GuideImpl guide = new GuideImpl();
        return guide;
    }
d483 1
a483 1
     * <!-- begin-user-doc -->
d485 2
a486 2
     * @@generated
     */
d488 3
a490 3
        NodeEntryImpl nodeEntry = new NodeEntryImpl();
        return nodeEntry;
    }
d493 1
a493 1
     * <!-- begin-user-doc -->
d495 2
a496 2
     * @@generated
     */
d498 3
a500 3
        FilteringStyleImpl filteringStyle = new FilteringStyleImpl();
        return filteringStyle;
    }
d503 1
a503 1
     * <!-- begin-user-doc -->
d505 2
a506 2
     * @@generated
     */
d508 3
a510 3
        DiagramStyleImpl diagramStyle = new DiagramStyleImpl();
        return diagramStyle;
    }
d513 1
a513 1
     * <!-- begin-user-doc -->
d515 2
a516 2
     * @@generated
     */
d518 3
a520 3
        ImageStyleImpl imageStyle = new ImageStyleImpl();
        return imageStyle;
    }
d523 1
a523 1
     * <!-- begin-user-doc -->
d525 2
a526 2
     * @@generated
     */
d528 3
a530 3
        ImageBufferStyleImpl imageBufferStyle = new ImageBufferStyleImpl();
        return imageBufferStyle;
    }
d533 211
a743 1
     * <!-- begin-user-doc -->
d745 2
a746 2
     * @@generated
     */
d748 4
a751 4
        Sorting result = Sorting.get(initialValue);
        if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        return result;
    }
d754 1
a754 1
     * <!-- begin-user-doc -->
d756 2
a757 2
     * @@generated
     */
d759 2
a760 2
        return instanceValue == null ? null : instanceValue.toString();
    }
d763 1
a763 1
     * <!-- begin-user-doc -->
d765 2
a766 2
     * @@generated
     */
d768 4
a771 4
        Filtering result = Filtering.get(initialValue);
        if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        return result;
    }
d774 1
a774 1
     * <!-- begin-user-doc -->
d776 2
a777 2
     * @@generated
     */
d779 2
a780 2
        return instanceValue == null ? null : instanceValue.toString();
    }
d783 1
a783 1
     * <!-- begin-user-doc -->
d785 2
a786 2
     * @@generated
     */
d788 4
a791 4
        Routing result = Routing.get(initialValue);
        if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        return result;
    }
d794 1
a794 1
     * <!-- begin-user-doc -->
d796 2
a797 2
     * @@generated
     */
d799 2
a800 2
        return instanceValue == null ? null : instanceValue.toString();
    }
d803 1
a803 1
     * <!-- begin-user-doc -->
d805 2
a806 2
     * @@generated
     */
d808 4
a811 4
        Smoothness result = Smoothness.get(initialValue);
        if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        return result;
    }
d814 1
a814 1
     * <!-- begin-user-doc -->
d816 2
a817 2
     * @@generated
     */
d819 2
a820 2
        return instanceValue == null ? null : instanceValue.toString();
    }
d823 1
a823 1
     * <!-- begin-user-doc -->
d825 2
a826 2
     * @@generated
     */
d828 4
a831 4
        JumpLinkStatus result = JumpLinkStatus.get(initialValue);
        if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        return result;
    }
d834 1
a834 1
     * <!-- begin-user-doc -->
d836 2
a837 2
     * @@generated
     */
d839 2
a840 2
        return instanceValue == null ? null : instanceValue.toString();
    }
d843 1
a843 1
     * <!-- begin-user-doc -->
d845 2
a846 2
     * @@generated
     */
d848 4
a851 4
        JumpLinkType result = JumpLinkType.get(initialValue);
        if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        return result;
    }
d854 1
a854 1
     * <!-- begin-user-doc -->
d856 2
a857 2
     * @@generated
     */
d859 2
a860 2
        return instanceValue == null ? null : instanceValue.toString();
    }
d863 1
a863 1
     * <!-- begin-user-doc -->
d865 2
a866 2
     * @@generated
     */
d868 4
a871 4
        Alignment result = Alignment.get(initialValue);
        if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        return result;
    }
d874 1
a874 1
     * <!-- begin-user-doc -->
d876 2
a877 2
     * @@generated
     */
d879 2
a880 2
        return instanceValue == null ? null : instanceValue.toString();
    }
d883 1
a883 1
     * <!-- begin-user-doc -->
d885 2
a886 2
     * @@generated
     */
d888 4
a891 4
        SortingDirection result = SortingDirection.get(initialValue);
        if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        return result;
    }
d894 1
a894 1
     * <!-- begin-user-doc -->
d896 2
a897 2
     * @@generated
     */
d899 2
a900 2
        return instanceValue == null ? null : instanceValue.toString();
    }
d903 1
a903 1
     * <!-- begin-user-doc -->
d905 2
a906 2
     * @@generated
     */
d908 4
a911 4
        MeasurementUnit result = MeasurementUnit.get(initialValue);
        if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        return result;
    }
d914 1
a914 1
     * <!-- begin-user-doc -->
d916 2
a917 2
     * @@generated
     */
d919 2
a920 2
        return instanceValue == null ? null : instanceValue.toString();
    }
d1014 1
a1014 1
     * <!-- begin-user-doc -->
d1016 2
a1017 2
     * @@generated
     */
d1019 2
a1020 2
        return (NotationPackage)getEPackage();
    }
d1023 1
a1023 1
     * <!-- begin-user-doc -->
d1025 3
a1027 3
     * @@deprecated
     * @@generated
     */
d1029 2
a1030 2
        return NotationPackage.eINSTANCE;
    }
@


1.7
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
a24 1

a25 1

a26 3

import org.eclipse.gmf.runtime.notation.*;

d50 1
@


1.7.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@d25 1
d27 1
d29 3
a54 1
import org.eclipse.gmf.runtime.notation.MeasurementUnit;
@


1.7.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.6
log
@bugzilla 116224 gmf-head sshaw 060119 Notation meta-model support for coordinate systems
@
text
@d24 2
d28 2
d82 22
a103 3
	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
d105 2
a106 2
	 * @@generated
	 */
d108 2
a109 2
		super();
	}
d111 2
a112 2
	/**
	 * <!-- begin-user-doc -->
d114 2
a115 2
	 * @@generated
	 */
d117 34
a150 34
		switch (eClass.getClassifierID()) {
			case NotationPackage.EDGE: return createEdge();
			case NotationPackage.NODE: return createNode();
			case NotationPackage.FILL_STYLE: return createFillStyle();
			case NotationPackage.LINE_STYLE: return createLineStyle();
			case NotationPackage.FONT_STYLE: return createFontStyle();
			case NotationPackage.TITLE_STYLE: return createTitleStyle();
			case NotationPackage.SORTING_STYLE: return createSortingStyle();
			case NotationPackage.DESCRIPTION_STYLE: return createDescriptionStyle();
			case NotationPackage.SIZE: return createSize();
			case NotationPackage.LOCATION: return createLocation();
			case NotationPackage.BOUNDS: return createBounds();
			case NotationPackage.RATIO: return createRatio();
			case NotationPackage.IDENTITY_ANCHOR: return createIdentityAnchor();
			case NotationPackage.ROUTING_STYLE: return createRoutingStyle();
			case NotationPackage.RELATIVE_BENDPOINTS: return createRelativeBendpoints();
			case NotationPackage.DIAGRAM: return createDiagram();
			case NotationPackage.IMAGE: return createImage();
			case NotationPackage.CANONICAL_STYLE: return createCanonicalStyle();
			case NotationPackage.SHAPE_STYLE: return createShapeStyle();
			case NotationPackage.CONNECTOR_STYLE: return createConnectorStyle();
			case NotationPackage.PAGE_STYLE: return createPageStyle();
			case NotationPackage.DRAWER_STYLE: return createDrawerStyle();
			case NotationPackage.GUIDE_STYLE: return createGuideStyle();
			case NotationPackage.GUIDE: return createGuide();
			case NotationPackage.NODE_ENTRY: return (EObject)createNodeEntry();
			case NotationPackage.FILTERING_STYLE: return createFilteringStyle();
			case NotationPackage.DIAGRAM_STYLE: return createDiagramStyle();
			case NotationPackage.IMAGE_STYLE: return createImageStyle();
			case NotationPackage.IMAGE_BUFFER_STYLE: return createImageBufferStyle();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier"); //$NON-NLS-1$ //$NON-NLS-2$
		}
	}
d152 2
a153 2
	/**
	 * <!-- begin-user-doc -->
d155 2
a156 2
	 * @@generated
	 */
d158 29
a186 56
		switch (eDataType.getClassifierID()) {
			case NotationPackage.SORTING: {
				Sorting result = Sorting.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				return result;
			}
			case NotationPackage.FILTERING: {
				Filtering result = Filtering.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				return result;
			}
			case NotationPackage.ROUTING: {
				Routing result = Routing.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				return result;
			}
			case NotationPackage.SMOOTHNESS: {
				Smoothness result = Smoothness.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				return result;
			}
			case NotationPackage.JUMP_LINK_STATUS: {
				JumpLinkStatus result = JumpLinkStatus.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				return result;
			}
			case NotationPackage.JUMP_LINK_TYPE: {
				JumpLinkType result = JumpLinkType.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				return result;
			}
			case NotationPackage.ALIGNMENT: {
				Alignment result = Alignment.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				return result;
			}
			case NotationPackage.SORTING_DIRECTION: {
				SortingDirection result = SortingDirection.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				return result;
			}
			case NotationPackage.MEASUREMENT_UNIT: {
				MeasurementUnit result = MeasurementUnit.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				return result;
			}
			case NotationPackage.RELATIVE_BENDPOINT_LIST:
				return createRelativeBendpointListFromString(eDataType, initialValue);
			case NotationPackage.FILTER_KEY_LIST:
				return createFilterKeyListFromString(eDataType, initialValue);
			case NotationPackage.SORT_KEY_MAP:
				return createSortKeyMapFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier"); //$NON-NLS-1$ //$NON-NLS-2$
		}
	}
d188 2
a189 2
	/**
	 * <!-- begin-user-doc -->
d191 2
a192 2
	 * @@generated
	 */
d194 29
a222 29
		switch (eDataType.getClassifierID()) {
			case NotationPackage.SORTING:
				return instanceValue == null ? null : instanceValue.toString();
			case NotationPackage.FILTERING:
				return instanceValue == null ? null : instanceValue.toString();
			case NotationPackage.ROUTING:
				return instanceValue == null ? null : instanceValue.toString();
			case NotationPackage.SMOOTHNESS:
				return instanceValue == null ? null : instanceValue.toString();
			case NotationPackage.JUMP_LINK_STATUS:
				return instanceValue == null ? null : instanceValue.toString();
			case NotationPackage.JUMP_LINK_TYPE:
				return instanceValue == null ? null : instanceValue.toString();
			case NotationPackage.ALIGNMENT:
				return instanceValue == null ? null : instanceValue.toString();
			case NotationPackage.SORTING_DIRECTION:
				return instanceValue == null ? null : instanceValue.toString();
			case NotationPackage.MEASUREMENT_UNIT:
				return instanceValue == null ? null : instanceValue.toString();
			case NotationPackage.RELATIVE_BENDPOINT_LIST:
				return convertRelativeBendpointListToString(eDataType, instanceValue);
			case NotationPackage.FILTER_KEY_LIST:
				return convertFilterKeyListToString(eDataType, instanceValue);
			case NotationPackage.SORT_KEY_MAP:
				return convertSortKeyMapToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier"); //$NON-NLS-1$ //$NON-NLS-2$
		}
	}
d224 2
a225 2
	/**
	 * <!-- begin-user-doc -->
d227 2
a228 2
	 * @@generated
	 */
d230 3
a232 3
		EdgeImpl edge = new EdgeImpl();
		return edge;
	}
d234 2
a235 2
	/**
	 * <!-- begin-user-doc -->
d237 2
a238 2
	 * @@generated
	 */
d240 3
a242 3
		NodeImpl node = new NodeImpl();
		return node;
	}
d244 2
a245 2
	/**
	 * <!-- begin-user-doc -->
d247 2
a248 2
	 * @@generated
	 */
d250 3
a252 3
		FillStyleImpl fillStyle = new FillStyleImpl();
		return fillStyle;
	}
d254 2
a255 2
	/**
	 * <!-- begin-user-doc -->
d257 2
a258 2
	 * @@generated
	 */
d260 3
a262 3
		LineStyleImpl lineStyle = new LineStyleImpl();
		return lineStyle;
	}
d264 2
a265 2
	/**
	 * <!-- begin-user-doc -->
d267 2
a268 2
	 * @@generated
	 */
d270 3
a272 3
		FontStyleImpl fontStyle = new FontStyleImpl();
		return fontStyle;
	}
d274 2
a275 2
	/**
	 * <!-- begin-user-doc -->
d277 2
a278 2
	 * @@generated
	 */
d280 3
a282 3
		TitleStyleImpl titleStyle = new TitleStyleImpl();
		return titleStyle;
	}
d284 2
a285 2
	/**
	 * <!-- begin-user-doc -->
d287 2
a288 2
	 * @@generated
	 */
d290 3
a292 3
		SortingStyleImpl sortingStyle = new SortingStyleImpl();
		return sortingStyle;
	}
d294 2
a295 2
	/**
	 * <!-- begin-user-doc -->
d297 2
a298 2
	 * @@generated
	 */
d300 3
a302 3
		DescriptionStyleImpl descriptionStyle = new DescriptionStyleImpl();
		return descriptionStyle;
	}
d304 2
a305 2
	/**
	 * <!-- begin-user-doc -->
d307 2
a308 2
	 * @@generated
	 */
d310 3
a312 3
		SizeImpl size = new SizeImpl();
		return size;
	}
d314 2
a315 2
	/**
	 * <!-- begin-user-doc -->
d317 2
a318 2
	 * @@generated
	 */
d320 3
a322 3
		LocationImpl location = new LocationImpl();
		return location;
	}
d324 2
a325 2
	/**
	 * <!-- begin-user-doc -->
d327 2
a328 2
	 * @@generated
	 */
d330 3
a332 3
		BoundsImpl bounds = new BoundsImpl();
		return bounds;
	}
d334 2
a335 2
	/**
	 * <!-- begin-user-doc -->
d337 2
a338 2
	 * @@generated
	 */
d340 3
a342 3
		RatioImpl ratio = new RatioImpl();
		return ratio;
	}
d344 2
a345 2
	/**
	 * <!-- begin-user-doc -->
d347 2
a348 2
	 * @@generated
	 */
d350 3
a352 3
		IdentityAnchorImpl identityAnchor = new IdentityAnchorImpl();
		return identityAnchor;
	}
d354 2
a355 2
	/**
	 * <!-- begin-user-doc -->
d357 2
a358 2
	 * @@generated
	 */
d360 3
a362 3
		RoutingStyleImpl routingStyle = new RoutingStyleImpl();
		return routingStyle;
	}
d364 2
a365 2
	/**
	 * <!-- begin-user-doc -->
d367 2
a368 2
	 * @@generated
	 */
d370 3
a372 3
		RelativeBendpointsImpl relativeBendpoints = new RelativeBendpointsImpl();
		return relativeBendpoints;
	}
d374 2
a375 2
	/**
	 * <!-- begin-user-doc -->
d377 2
a378 2
	 * @@generated
	 */
d380 3
a382 3
		CanonicalStyleImpl canonicalStyle = new CanonicalStyleImpl();
		return canonicalStyle;
	}
d384 2
a385 2
	/**
	 * <!-- begin-user-doc -->
d387 2
a388 2
	 * @@generated
	 */
d390 3
a392 3
		ShapeStyleImpl shapeStyle = new ShapeStyleImpl();
		return shapeStyle;
	}
d394 2
a395 2
	/**
	 * <!-- begin-user-doc -->
d397 2
a398 2
	 * @@generated
	 */
d400 3
a402 3
		ConnectorStyleImpl connectorStyle = new ConnectorStyleImpl();
		return connectorStyle;
	}
d404 2
a405 2
	/**
	 * <!-- begin-user-doc -->
d407 2
a408 2
	 * @@generated
	 */
d410 3
a412 3
		DiagramImpl diagram = new DiagramImpl();
		return diagram;
	}
d414 2
a415 2
	/**
	 * <!-- begin-user-doc -->
d417 2
a418 2
	 * @@generated
	 */
d420 3
a422 3
		ImageImpl image = new ImageImpl();
		return image;
	}
d424 2
a425 2
	/**
	 * <!-- begin-user-doc -->
d427 2
a428 2
	 * @@generated
	 */
d430 3
a432 3
		PageStyleImpl pageStyle = new PageStyleImpl();
		return pageStyle;
	}
d434 2
a435 2
	/**
	 * <!-- begin-user-doc -->
d437 2
a438 2
	 * @@generated
	 */
d440 3
a442 3
		DrawerStyleImpl drawerStyle = new DrawerStyleImpl();
		return drawerStyle;
	}
d444 2
a445 2
	/**
	 * <!-- begin-user-doc -->
d447 2
a448 2
	 * @@generated
	 */
d450 3
a452 3
		GuideStyleImpl guideStyle = new GuideStyleImpl();
		return guideStyle;
	}
d454 2
a455 2
	/**
	 * <!-- begin-user-doc -->
d457 2
a458 2
	 * @@generated
	 */
d460 3
a462 3
		GuideImpl guide = new GuideImpl();
		return guide;
	}
d464 2
a465 2
	/**
	 * <!-- begin-user-doc -->
d467 2
a468 2
	 * @@generated
	 */
d470 3
a472 3
		NodeEntryImpl nodeEntry = new NodeEntryImpl();
		return nodeEntry;
	}
d474 2
a475 2
	/**
	 * <!-- begin-user-doc -->
d477 2
a478 2
	 * @@generated
	 */
d480 3
a482 3
		FilteringStyleImpl filteringStyle = new FilteringStyleImpl();
		return filteringStyle;
	}
d484 2
a485 2
	/**
	 * <!-- begin-user-doc -->
d487 2
a488 2
	 * @@generated
	 */
d490 3
a492 3
		DiagramStyleImpl diagramStyle = new DiagramStyleImpl();
		return diagramStyle;
	}
d494 2
a495 2
	/**
	 * <!-- begin-user-doc -->
d497 2
a498 2
	 * @@generated
	 */
d500 3
a502 3
		ImageStyleImpl imageStyle = new ImageStyleImpl();
		return imageStyle;
	}
d504 2
a505 2
	/**
	 * <!-- begin-user-doc -->
d507 2
a508 2
	 * @@generated
	 */
d510 183
a692 3
		ImageBufferStyleImpl imageBufferStyle = new ImageBufferStyleImpl();
		return imageBufferStyle;
	}
d785 2
a786 2
	/**
	 * <!-- begin-user-doc -->
d788 2
a789 2
	 * @@generated
	 */
d791 2
a792 2
		return (NotationPackage)getEPackage();
	}
d794 2
a795 2
	/**
	 * <!-- begin-user-doc -->
d797 3
a799 3
	 * @@deprecated
	 * @@generated
	 */
d801 2
a802 2
		return NotationPackage.eINSTANCE;
	}
@


1.5
log
@bugzilla 110316 gmf-head sshaw 060117 Compiler warning count should be 0 - runtime diagram laye...
@
text
@d26 2
d176 5
d215 2
@


1.4
log
@Delivered: bugzilla 111770 gmf_head sshaw 060111 Odd Notation model URI
@
text
@a25 2
import org.eclipse.gmf.runtime.notation.*;

@


1.3
log
@Bugzilla 110317 gmf_head etworkow 051006 Compiler warning count should be 0 - runtime foundation layer components
@
text
@d26 2
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a25 2
import org.eclipse.gmf.runtime.notation.*;

@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

