head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080722-1827:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080507-1326:1.4
	v20080503-1740:1.4
	v20080425-1959:1.4
	v20080407-2250:1.4
	v20080407-1545:1.4
	v20080331-1625:1.4
	v20080328-1605:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20080114-2222:1.4
	v20071130-1111:1.4
	v20071124-0000:1.4
	v20071112-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070518-1300:1.3
	v20070403-1500:1.2
	v20070330-1300:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060728-0500:1.2
	v20060721-1130:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060519-0800:1.2
	I20060505-1400:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.1
	I20060202-1415:1.1
	I20060129-1145:1.1;
locks; strict;
comment	@# @;


1.4
date	2007.06.18.16.52.43;	author ahunter;	state Exp;
branches;
next	1.3;
commitid	57914676b85b4567;

1.3
date	2007.05.17.16.26.50;	author aboyko;	state Exp;
branches;
next	1.2;
commitid	71d9464c82444567;

1.2
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.27.20.22.48;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@gmf_head ahunter 070617 Update Copyright for files changed in 2007 for GMF 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2006, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/
package org.eclipse.gmf.runtime.notation;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.AbstractEnumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Measurement Unit</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @@see org.eclipse.gmf.runtime.notation.NotationPackage#getMeasurementUnit()
 * @@model
 * @@generated
 */
public final class MeasurementUnit extends AbstractEnumerator {
    /**
	 * The '<em><b>Himetric</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>Himetric</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #HIMETRIC_LITERAL
	 * @@model name="Himetric"
	 * @@generated
	 * @@ordered
	 */
	public static final int HIMETRIC = 0;

    /**
	 * The '<em><b>Pixel</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>Pixel</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #PIXEL_LITERAL
	 * @@model name="Pixel"
	 * @@generated
	 * @@ordered
	 */
	public static final int PIXEL = 1;

    /**
	 * The '<em><b>Himetric</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #HIMETRIC
	 * @@generated
	 * @@ordered
	 */
	public static final MeasurementUnit HIMETRIC_LITERAL = new MeasurementUnit(HIMETRIC, "Himetric", "Himetric"); //$NON-NLS-2$//$NON-NLS-1$

    /**
	 * The '<em><b>Pixel</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #PIXEL
	 * @@generated
	 * @@ordered
	 */
	public static final MeasurementUnit PIXEL_LITERAL = new MeasurementUnit(PIXEL, "Pixel", "Pixel"); //$NON-NLS-2$//$NON-NLS-1$

    /**
	 * An array of all the '<em><b>Measurement Unit</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private static final MeasurementUnit[] VALUES_ARRAY =
        new MeasurementUnit[] {
			HIMETRIC_LITERAL,
			PIXEL_LITERAL,
		};

    /**
	 * A public read-only list of all the '<em><b>Measurement Unit</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static final List VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

    /**
	 * Returns the '<em><b>Measurement Unit</b></em>' literal with the specified literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static MeasurementUnit get(String literal) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			MeasurementUnit result = VALUES_ARRAY[i];
			if (result.toString().equals(literal)) {
				return result;
			}
		}
		return null;
	}

    /**
	 * Returns the '<em><b>Measurement Unit</b></em>' literal with the specified name.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public static MeasurementUnit getByName(String name) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			MeasurementUnit result = VALUES_ARRAY[i];
			if (result.getName().equals(name)) {
				return result;
			}
		}
		return null;
	}

    /**
	 * Returns the '<em><b>Measurement Unit</b></em>' literal with the specified integer value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static MeasurementUnit get(int value) {
		switch (value) {
			case HIMETRIC: return HIMETRIC_LITERAL;
			case PIXEL: return PIXEL_LITERAL;
		}
		return null;
	}

    /**
	 * Only this class can construct instances.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    private MeasurementUnit(int value, String name, String literal) {
		super(value, name, literal);
	}

} //MeasurementUnit
@


1.3
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@d1 6
a6 3
/**
 * <copyright>
 * </copyright>
d8 3
a10 2
 * $Id: MeasurementUnit.java,v 1.2 2006/02/07 15:22:13 mmostafa Exp $
 */
@


1.2
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d5 1
a5 1
 * $Id: MeasurementUnit.java,v 1.1 2006/01/27 20:22:48 sshaw Exp $
d26 2
a27 2
     * The '<em><b>Himetric</b></em>' literal value.
     * <!-- begin-user-doc -->
d33 5
a37 5
     * @@see #HIMETRIC_LITERAL
     * @@model name="Himetric"
     * @@generated
     * @@ordered
     */
d41 2
a42 2
     * The '<em><b>Pixel</b></em>' literal value.
     * <!-- begin-user-doc -->
d48 5
a52 5
     * @@see #PIXEL_LITERAL
     * @@model name="Pixel"
     * @@generated
     * @@ordered
     */
d56 2
a57 2
     * The '<em><b>Himetric</b></em>' literal object.
     * <!-- begin-user-doc -->
d59 4
a62 4
     * @@see #HIMETRIC
     * @@generated
     * @@ordered
     */
d66 2
a67 2
     * The '<em><b>Pixel</b></em>' literal object.
     * <!-- begin-user-doc -->
d69 4
a72 4
     * @@see #PIXEL
     * @@generated
     * @@ordered
     */
d76 2
a77 2
     * An array of all the '<em><b>Measurement Unit</b></em>' enumerators.
     * <!-- begin-user-doc -->
d79 2
a80 2
     * @@generated
     */
d83 3
a85 3
            HIMETRIC_LITERAL,
            PIXEL_LITERAL,
        };
d88 2
a89 2
     * A public read-only list of all the '<em><b>Measurement Unit</b></em>' enumerators.
     * <!-- begin-user-doc -->
d91 2
a92 2
     * @@generated
     */
d96 2
a97 2
     * Returns the '<em><b>Measurement Unit</b></em>' literal with the specified literal value.
     * <!-- begin-user-doc -->
d99 2
a100 2
     * @@generated
     */
d102 8
a109 8
        for (int i = 0; i < VALUES_ARRAY.length; ++i) {
            MeasurementUnit result = VALUES_ARRAY[i];
            if (result.toString().equals(literal)) {
                return result;
            }
        }
        return null;
    }
d112 2
a113 2
     * Returns the '<em><b>Measurement Unit</b></em>' literal with the specified name.
     * <!-- begin-user-doc -->
d115 2
a116 2
     * @@generated
     */
d118 8
a125 8
        for (int i = 0; i < VALUES_ARRAY.length; ++i) {
            MeasurementUnit result = VALUES_ARRAY[i];
            if (result.getName().equals(name)) {
                return result;
            }
        }
        return null;
    }
d128 2
a129 2
     * Returns the '<em><b>Measurement Unit</b></em>' literal with the specified integer value.
     * <!-- begin-user-doc -->
d131 2
a132 2
     * @@generated
     */
d134 6
a139 6
        switch (value) {
            case HIMETRIC: return HIMETRIC_LITERAL;
            case PIXEL: return PIXEL_LITERAL;
        }
        return null;	
    }
d142 2
a143 2
     * Only this class can construct instances.
     * <!-- begin-user-doc -->
d145 2
a146 2
     * @@generated
     */
d148 2
a149 2
        super(value, name, literal);
    }
@


1.1
log
@bugzilla 116224 gmf-head sshaw 060119 Notation meta-model support for coordinate systems
@
text
@d5 1
a5 1
 * $Id$
d25 3
a27 3
	/**
	 * The '<em><b>Himetric</b></em>' literal value.
	 * <!-- begin-user-doc -->
d33 5
a37 5
	 * @@see #HIMETRIC_LITERAL
	 * @@model name="Himetric"
	 * @@generated
	 * @@ordered
	 */
d40 3
a42 3
	/**
	 * The '<em><b>Pixel</b></em>' literal value.
	 * <!-- begin-user-doc -->
d48 5
a52 5
	 * @@see #PIXEL_LITERAL
	 * @@model name="Pixel"
	 * @@generated
	 * @@ordered
	 */
d55 23
a77 23
	/**
	 * The '<em><b>Himetric</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #HIMETRIC
	 * @@generated
	 * @@ordered
	 */
	public static final MeasurementUnit HIMETRIC_LITERAL = new MeasurementUnit(HIMETRIC, "Himetric"); //$NON-NLS-1$

	/**
	 * The '<em><b>Pixel</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #PIXEL
	 * @@generated
	 * @@ordered
	 */
	public static final MeasurementUnit PIXEL_LITERAL = new MeasurementUnit(PIXEL, "Pixel"); //$NON-NLS-1$

	/**
	 * An array of all the '<em><b>Measurement Unit</b></em>' enumerators.
	 * <!-- begin-user-doc -->
d79 2
a80 2
	 * @@generated
	 */
d82 8
a89 8
		new MeasurementUnit[] {
			HIMETRIC_LITERAL,
			PIXEL_LITERAL,
		};

	/**
	 * A public read-only list of all the '<em><b>Measurement Unit</b></em>' enumerators.
	 * <!-- begin-user-doc -->
d91 2
a92 2
	 * @@generated
	 */
d95 35
a129 19
	/**
	 * Returns the '<em><b>Measurement Unit</b></em>' literal with the specified name.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static MeasurementUnit get(String name) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			MeasurementUnit result = VALUES_ARRAY[i];
			if (result.toString().equals(name)) {
				return result;
			}
		}
		return null;
	}

	/**
	 * Returns the '<em><b>Measurement Unit</b></em>' literal with the specified value.
	 * <!-- begin-user-doc -->
d131 2
a132 2
	 * @@generated
	 */
d134 16
a149 16
		switch (value) {
			case HIMETRIC: return HIMETRIC_LITERAL;
			case PIXEL: return PIXEL_LITERAL;
		}
		return null;	
	}

	/**
	 * Only this class can construct instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private MeasurementUnit(int value, String name) {
		super(value, name);
	}
@

