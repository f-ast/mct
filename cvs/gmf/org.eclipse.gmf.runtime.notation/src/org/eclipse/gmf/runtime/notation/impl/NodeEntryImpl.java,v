head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080507-1326:1.7
	v20080503-1740:1.6
	v20080425-1959:1.5
	v20080407-2250:1.5
	v20080407-1545:1.5
	v20080331-1625:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080114-2222:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2008.05.07.00.14.41;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	3e924820f4604567;

1.6
date	2008.05.03.18.33.03;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	1c13481cafcc4567;

1.5
date	2007.05.17.16.26.50;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71d9464c82444567;

1.4
date	2006.10.03.15.07.26;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.22.13;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.26;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.17.20.27.55;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.48.16;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.BasicEMap;
import org.eclipse.emf.common.util.EMap;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.runtime.notation.Alignment;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node Entry</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.NodeEntryImpl#getTypedValue <em>Value</em>}</li>
 *   <li>{@@link org.eclipse.gmf.runtime.notation.impl.NodeEntryImpl#getTypedKey <em>Key</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
/*
 * @@canBeSeenBy org.eclipse.gmf.runtime.notation.*
 */
public class NodeEntryImpl extends NotationEObjectImpl implements BasicEMap.Entry {
    /**
	 * The default value of the '{@@link #getTypedValue() <em>Value</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTypedValue()
	 * @@generated
	 * @@ordered
	 */
	protected static final Alignment VALUE_EDEFAULT = Alignment.CENTER_LITERAL;

    /**
	 * The offset of the flags representing the value of the '{@@link #getTypedValue() <em>Value</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int VALUE_EFLAG_OFFSET = 8;

				/**
	 * The flags representing the default value of the '{@@link #getTypedValue() <em>Value</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	protected static final int VALUE_EFLAG_DEFAULT = Alignment.VALUES.indexOf(VALUE_EDEFAULT) << VALUE_EFLAG_OFFSET;

				/**
	 * The array of enumeration values for '{@@link Alignment Alignment}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 * @@ordered
	 */
	private static final Alignment[] VALUE_EFLAG_VALUES = (Alignment[])Alignment.VALUES.toArray(new Alignment[Alignment.VALUES.size()]);

				/**
	 * The flags representing the value of the '{@@link #getTypedValue() <em>Value</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTypedValue()
	 * @@generated
	 * @@ordered
	 */
	protected static final int VALUE_EFLAG = 0x7 << VALUE_EFLAG_OFFSET;

				/**
	 * The cached value of the '{@@link #getTypedKey() <em>Key</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTypedKey()
	 * @@generated
	 * @@ordered
	 */
	protected Node key;

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected NodeEntryImpl() {
		super();
		eFlags |= VALUE_EFLAG_DEFAULT;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return NotationPackage.Literals.NODE_ENTRY;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Alignment getTypedValue() {
		return VALUE_EFLAG_VALUES[(eFlags & VALUE_EFLAG) >>> VALUE_EFLAG_OFFSET];
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setTypedValue(Alignment newValue) {
		Alignment oldValue = VALUE_EFLAG_VALUES[(eFlags & VALUE_EFLAG) >>> VALUE_EFLAG_OFFSET];
		if (newValue == null) newValue = VALUE_EDEFAULT;
		eFlags = eFlags & ~VALUE_EFLAG | Alignment.VALUES.indexOf(newValue) << VALUE_EFLAG_OFFSET;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.NODE_ENTRY__VALUE, oldValue, newValue));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public Node getTypedKey() {
		if (key != null && key.eIsProxy()) {
			EObject oldKey = key;
			key = (Node)eResolveProxy((InternalEObject)key);
			if (key != oldKey) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, NotationPackage.NODE_ENTRY__KEY, oldKey, key));
			}
		}
		return key;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Node basicGetTypedKey() {
		return key;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public void setTypedKey(Node newKey) {
		Node oldKey = key;
		key = newKey;
		
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.NODE_ENTRY__KEY, oldKey, key));
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NotationPackage.NODE_ENTRY__VALUE:
				return getTypedValue();
			case NotationPackage.NODE_ENTRY__KEY:
				if (resolve) return getTypedKey();
				return basicGetTypedKey();
		}
		return eDynamicGet(featureID, resolve, coreType);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NotationPackage.NODE_ENTRY__VALUE:
				setTypedValue((Alignment)newValue);
				return;
			case NotationPackage.NODE_ENTRY__KEY:
				setTypedKey((Node)newValue);
				return;
		}
		eDynamicSet(featureID, newValue);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public void eUnset(int featureID) {
		switch (featureID) {
			case NotationPackage.NODE_ENTRY__VALUE:
				setTypedValue(VALUE_EDEFAULT);
				return;
			case NotationPackage.NODE_ENTRY__KEY:
				setTypedKey((Node)null);
				return;
		}
		eDynamicUnset(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @@generated
	 */
    public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NotationPackage.NODE_ENTRY__VALUE:
				return (eFlags & VALUE_EFLAG) != VALUE_EFLAG_DEFAULT;
			case NotationPackage.NODE_ENTRY__KEY:
				return key != null;
		}
		return eDynamicIsSet(featureID);
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (value: "); //$NON-NLS-1$
		result.append(VALUE_EFLAG_VALUES[(eFlags & VALUE_EFLAG) >>> VALUE_EFLAG_OFFSET]);
		result.append(')');
		return result.toString();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected int hash = -1;

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getHash() {
		if (hash == -1) {
			Object theKey = getKey();
			hash = (theKey == null ? 0 : theKey.hashCode());
		}
		return hash;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setHash(int hash) {
		this.hash = hash;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object getKey() {
		return getTypedKey();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setKey(Object key) {
		setTypedKey((Node)key);
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object getValue() {
		return getTypedValue();
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object setValue(Object value) {
		Object oldValue = getValue();
		setTypedValue((Alignment)value);
		return oldValue;
	}

				/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EMap getEMap() {
		EObject container = eContainer();
		return container == null ? null : (EMap)container.eGet(eContainmentFeature());
	}

} //NodeEntryImpl
@


1.6
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d42 1
a42 1
public class NodeEntryImpl extends NotationObjectImpl implements BasicEMap.Entry {
d54 28
a81 1
	 * The cached value of the '{@@link #getTypedValue() <em>Value</em>}' attribute.
d88 1
a88 1
	protected Alignment value = VALUE_EDEFAULT;
d90 1
a90 1
    /**
d107 1
d125 1
a125 1
		return value;
d134 3
a136 2
		Alignment oldValue = value;
		value = newValue == null ? VALUE_EDEFAULT : newValue;
d138 1
a138 1
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.NODE_ENTRY__VALUE, oldValue, value));
a186 2
			case NotationPackage.NODE_ENTRY__UUID:
				return getUUID();
a202 3
			case NotationPackage.NODE_ENTRY__UUID:
				setUUID((byte[])newValue);
				return;
a219 3
			case NotationPackage.NODE_ENTRY__UUID:
				setUUID(UUID_EDEFAULT);
				return;
a236 2
			case NotationPackage.NODE_ENTRY__UUID:
				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
d238 1
a238 1
				return value != VALUE_EDEFAULT;
d255 1
a255 1
		result.append(value);
@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@a20 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d42 1
a42 1
public class NodeEntryImpl extends FlatEObjectImpl implements BasicEMap.Entry {
d158 2
d176 3
d196 3
d216 2
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d45 2
a46 2
     * The default value of the '{@@link #getTypedValue() <em>Value</em>}' attribute.
     * <!-- begin-user-doc -->
d48 4
a51 4
     * @@see #getTypedValue()
     * @@generated
     * @@ordered
     */
d55 2
a56 2
     * The cached value of the '{@@link #getTypedValue() <em>Value</em>}' attribute.
     * <!-- begin-user-doc -->
d58 4
a61 4
     * @@see #getTypedValue()
     * @@generated
     * @@ordered
     */
d65 2
a66 2
     * The cached value of the '{@@link #getTypedKey() <em>Key</em>}' reference.
     * <!-- begin-user-doc -->
d68 5
a72 5
     * @@see #getTypedKey()
     * @@generated
     * @@ordered
     */
	protected Node key = null;
d75 1
a75 1
     * <!-- begin-user-doc -->
d77 2
a78 2
     * @@generated
     */
d80 2
a81 2
        super();
    }
d84 1
a84 1
     * <!-- begin-user-doc -->
d86 2
a87 2
     * @@generated
     */
d89 23
a111 2
        return NotationPackage.Literals.NODE_ENTRY;
    }
d131 1
a131 1
     * <!-- begin-user-doc -->
d133 2
a134 2
     * @@generated
     */
d136 2
a137 2
        return key;
    }
d139 1
a139 1
	/**
d153 1
a153 1
     * <!-- begin-user-doc -->
d155 2
a156 2
     * @@generated
     */
d158 9
a166 9
        switch (featureID) {
            case NotationPackage.NODE_ENTRY__VALUE:
                return getTypedValue();
            case NotationPackage.NODE_ENTRY__KEY:
                if (resolve) return getTypedKey();
                return basicGetTypedKey();
        }
        return eDynamicGet(featureID, resolve, coreType);
    }
d169 1
a169 1
     * <!-- begin-user-doc -->
d171 2
a172 2
     * @@generated
     */
d174 10
a183 10
        switch (featureID) {
            case NotationPackage.NODE_ENTRY__VALUE:
                setTypedValue((Alignment)newValue);
                return;
            case NotationPackage.NODE_ENTRY__KEY:
                setTypedKey((Node)newValue);
                return;
        }
        eDynamicSet(featureID, newValue);
    }
d186 1
a186 1
     * <!-- begin-user-doc -->
d188 2
a189 2
     * @@generated
     */
d191 10
a200 10
        switch (featureID) {
            case NotationPackage.NODE_ENTRY__VALUE:
                setTypedValue(VALUE_EDEFAULT);
                return;
            case NotationPackage.NODE_ENTRY__KEY:
                setTypedKey((Node)null);
                return;
        }
        eDynamicUnset(featureID);
    }
d203 1
a203 1
     * <!-- begin-user-doc -->
d205 2
a206 2
     * @@generated
     */
d208 8
a215 8
        switch (featureID) {
            case NotationPackage.NODE_ENTRY__VALUE:
                return value != VALUE_EDEFAULT;
            case NotationPackage.NODE_ENTRY__KEY:
                return key != null;
        }
        return eDynamicIsSet(featureID);
    }
d218 1
a218 1
     * <!-- begin-user-doc -->
d220 2
a221 23
     * @@generated
     */
	public Alignment getTypedValue() {
        return value;
    }

    /**
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@generated
     */
	public void setTypedValue(Alignment newValue) {
        Alignment oldValue = value;
        value = newValue == null ? VALUE_EDEFAULT : newValue;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.NODE_ENTRY__VALUE, oldValue, value));
    }

    /**
     * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
     * @@generated
     */
d223 1
a223 1
        if (eIsProxy()) return super.toString();
d225 6
a230 6
        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (value: "); //$NON-NLS-1$
        result.append(value);
        result.append(')');
        return result.toString();
    }
d233 1
a233 1
     * <!-- begin-user-doc -->
d235 2
a236 2
     * @@generated
     */
d239 2
a240 2
    /**
     * <!-- begin-user-doc -->
d242 2
a243 2
     * @@generated
     */
d245 6
a250 6
        if (hash == -1) {
            Object theKey = getKey();
            hash = (theKey == null ? 0 : theKey.hashCode());
        }
        return hash;
    }
d252 2
a253 2
    /**
     * <!-- begin-user-doc -->
d255 2
a256 2
     * @@generated
     */
d258 2
a259 2
        this.hash = hash;
    }
d261 2
a262 2
    /**
     * <!-- begin-user-doc -->
d264 2
a265 2
     * @@generated
     */
d267 2
a268 2
        return getTypedKey();
    }
d271 1
a271 1
     * <!-- begin-user-doc -->
d273 2
a274 2
     * @@generated
     */
d276 2
a277 2
        setTypedKey((Node)key);
    }
d279 2
a280 2
    /**
     * <!-- begin-user-doc -->
d282 2
a283 2
     * @@generated
     */
d285 2
a286 2
        return getTypedValue();
    }
d289 1
a289 1
     * <!-- begin-user-doc -->
d291 2
a292 2
     * @@generated
     */
d294 4
a297 4
        Object oldValue = getValue();
        setTypedValue((Alignment)value);
        return oldValue;
    }
d299 2
a300 2
    /**
     * <!-- begin-user-doc -->
d302 2
a303 2
     * @@generated
     */
d305 3
a307 3
        EObject container = eContainer();
        return container == null ? null : (EMap)container.eGet(eContainmentFeature());
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d21 1
a21 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
d43 1
a43 1
public class NodeEntryImpl extends EObjectImpl implements BasicEMap.Entry {
d144 1
a144 1
        return super.eGet(featureID, resolve, coreType);
d161 1
a161 1
        super.eSet(featureID, newValue);
d178 1
a178 1
        super.eUnset(featureID);
d193 1
a193 1
        return super.eIsSet(featureID);
@


1.3.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@d21 1
a21 1
import org.eclipse.emf.ecore.impl.FlatEObjectImpl;
d43 1
a43 1
public class NodeEntryImpl extends FlatEObjectImpl implements BasicEMap.Entry {
d144 1
a144 1
        return eDynamicGet(featureID, resolve, coreType);
d161 1
a161 1
        eDynamicSet(featureID, newValue);
d178 1
a178 1
        eDynamicUnset(featureID);
d193 1
a193 1
        return eDynamicIsSet(featureID);
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a18 1
import org.eclipse.emf.ecore.EStructuralFeature;
a21 1

d44 8
a51 8
	/**
	 * The default value of the '{@@link #getTypedValue() <em>Value</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTypedValue()
	 * @@generated
	 * @@ordered
	 */
d54 8
a61 8
	/**
	 * The cached value of the '{@@link #getTypedValue() <em>Value</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTypedValue()
	 * @@generated
	 * @@ordered
	 */
d64 8
a71 8
	/**
	 * The cached value of the '{@@link #getTypedKey() <em>Key</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTypedKey()
	 * @@generated
	 * @@ordered
	 */
d74 2
a75 2
	/**
	 * <!-- begin-user-doc -->
d77 2
a78 2
	 * @@generated
	 */
d80 2
a81 2
		super();
	}
d83 2
a84 2
	/**
	 * <!-- begin-user-doc -->
d86 2
a87 2
	 * @@generated
	 */
d89 2
a90 2
		return NotationPackage.eINSTANCE.getNodeEntry();
	}
d109 2
a110 2
	/**
	 * <!-- begin-user-doc -->
d112 2
a113 2
	 * @@generated
	 */
d115 2
a116 2
		return key;
	}
d131 67
a197 2
	/**
	 * <!-- begin-user-doc -->
d199 2
a200 2
	 * @@generated
	 */
d202 2
a203 2
		return value;
	}
d205 2
a206 2
	/**
	 * <!-- begin-user-doc -->
d208 2
a209 2
	 * @@generated
	 */
d211 5
a215 38
		Alignment oldValue = value;
		value = newValue == null ? VALUE_EDEFAULT : newValue;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.NODE_ENTRY__VALUE, oldValue, value));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.NODE_ENTRY__VALUE:
				return getTypedValue();
			case NotationPackage.NODE_ENTRY__KEY:
				if (resolve) return getTypedKey();
				return basicGetTypedKey();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.NODE_ENTRY__VALUE:
				setTypedValue((Alignment)newValue);
				return;
			case NotationPackage.NODE_ENTRY__KEY:
				setTypedKey((Node)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}
d217 2
a218 2
	/**
	 * <!-- begin-user-doc -->
d220 2
a221 34
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.NODE_ENTRY__VALUE:
				setTypedValue(VALUE_EDEFAULT);
				return;
			case NotationPackage.NODE_ENTRY__KEY:
				setTypedKey((Node)null);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case NotationPackage.NODE_ENTRY__VALUE:
				return value != VALUE_EDEFAULT;
			case NotationPackage.NODE_ENTRY__KEY:
				return key != null;
		}
		return eDynamicIsSet(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d223 1
a223 1
		if (eIsProxy()) return super.toString();
d225 6
a230 6
		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (value: "); //$NON-NLS-1$
		result.append(value);
		result.append(')');
		return result.toString();
	}
d232 2
a233 2
	/**
	 * <!-- begin-user-doc -->
d235 2
a236 2
	 * @@generated
	 */
d239 2
a240 2
	/**
	 * <!-- begin-user-doc -->
d242 2
a243 2
	 * @@generated
	 */
d245 6
a250 6
		if (hash == -1) {
			Object theKey = getKey();
			hash = (theKey == null ? 0 : theKey.hashCode());
		}
		return hash;
	}
d252 2
a253 2
	/**
	 * <!-- begin-user-doc -->
d255 2
a256 2
	 * @@generated
	 */
d258 2
a259 2
		this.hash = hash;
	}
d261 2
a262 2
	/**
	 * <!-- begin-user-doc -->
d264 2
a265 2
	 * @@generated
	 */
d267 2
a268 2
		return getTypedKey();
	}
d270 2
a271 2
	/**
	 * <!-- begin-user-doc -->
d273 2
a274 2
	 * @@generated
	 */
d276 2
a277 2
		setTypedKey((Node)key);
	}
d279 2
a280 2
	/**
	 * <!-- begin-user-doc -->
d282 2
a283 2
	 * @@generated
	 */
d285 2
a286 2
		return getTypedValue();
	}
d288 2
a289 2
	/**
	 * <!-- begin-user-doc -->
d291 2
a292 2
	 * @@generated
	 */
d294 4
a297 4
		Object oldValue = getValue();
		setTypedValue((Alignment)value);
		return oldValue;
	}
d299 2
a300 2
	/**
	 * <!-- begin-user-doc -->
d302 2
a303 2
	 * @@generated
	 */
d305 3
a307 3
		EObject container = eContainer();
		return container == null ? null : (EMap)container.eGet(eContainmentFeature());
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

