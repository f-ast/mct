head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080813-1510:1.4
	v20080811-1546:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080503-1740:1.4
	v20080425-1959:1.4
	v20080328-1605:1.4
	v20080222-1200:1.4
	v20080114-1111:1.4
	v20080107-1111:1.4
	v20071222-1111:1.4
	v20071214-1111:1.4
	v20071130-1111:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.1
	v20060907-1100:1.3
	M1_20:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.4
date	2006.10.03.15.06.36;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.18.20.51.28;	author cmahoney;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.27.28;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.54;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.09.13.16.46.15;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.gef.ui.internal.figures;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Locator;
import org.eclipse.draw2d.PositionConstants;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.handles.HandleBounds;

/**
 * This locator places the figure relative to the reference figure's edge 
 * (where the reference figure's edge is the same as where the resize/move
 * handles would be placed).  
 * There are three options available for controlling where the figure is 
 * placed:
 * <ol>
 * <li>direction - A direction to place the figure relative to the reference
 * figure as defined in {@@link PositionConstants}
 * <li>margin - The margin is the space between the reference figure's edge 
 * and the figure.  A positive margin will place the figure outside the
 * reference figure, a negative margin will place the figure inside the 
 * reference figure.
 * </ol>
 * 
 * NOTE: This locator uses the size of the figure to calculate where it should
 * be placed.  Therefore it may be necessary to explicitly set this figure's
 * size.
 * 
 * @@author cmahoney
 */
public class RelativeToBorderLocator implements Locator {

	/** the margin to leave by the edge of the parent figure */
	private int margin;

	/** the direction */
	protected int direction;

	/** the parent figure */
	protected IFigure reference;
	
	/**
	 * Constructor for <code>RelativeToBorderLocator</code>.
	 * 
	 * @@param reference the parent figure
	 * @@param direction A direction to place the figure relative to the reference
	 * figure as defined in {@@link PositionConstants}
	 * @@param margin The margin is the space between the reference figure's edge 
	 * and the figure.  A positive margin will place the figure outside the
	 * reference figure, a negative margin will place the figure inside the 
	 * reference figure.
	 */
	public RelativeToBorderLocator(
		IFigure reference,
		int direction,
		int margin) {
			
		this.reference = reference;
		this.direction = direction;
		this.margin = margin;
	}

	/**
	 * Puts the figure either inside or outside the parent edge (where the edge 
	 * is the same as where the resize/move handles would be placed),
	 * identified by the direction, with a margin.
	 * 
	 * @@see org.eclipse.draw2d.Locator#relocate(org.eclipse.draw2d.IFigure)
	 */
	public void relocate(IFigure target) {
		Rectangle bounds =
			reference instanceof HandleBounds
				? ((HandleBounds) reference).getHandleBounds().getCopy()
				: reference.getBounds().getCopy();	

		reference.translateToAbsolute(bounds);
		target.translateToRelative(bounds);

		int width = target.getBounds().width;
		int halfWidth = width / 2;

		int height = target.getBounds().height;
		int halfHeight = height / 2;

		if (direction == PositionConstants.CENTER) {

			Dimension shift = new Dimension(-halfWidth, -halfHeight);
			target.setLocation(bounds.getCenter().getTranslated(shift));

		} else if (margin < 0) {

			if (direction == PositionConstants.NORTH_WEST) {

				Dimension shift = new Dimension(-margin, -margin);
				target.setLocation(bounds.getTopLeft().getTranslated(shift));

			} else if (direction == PositionConstants.NORTH) {

				Dimension shift = new Dimension(-halfWidth, -margin);
				target.setLocation(bounds.getTop().getTranslated(shift));

			} else if (direction == PositionConstants.NORTH_EAST) {

				Dimension shift = new Dimension(-(width + -margin), -margin);
				target.setLocation(bounds.getTopRight().getTranslated(shift));

			} else if (direction == PositionConstants.SOUTH_WEST) {

				Dimension shift = new Dimension(-margin, -(height + -margin));
				target.setLocation(bounds.getBottomLeft().getTranslated(shift));

			} else if (direction == PositionConstants.SOUTH) {

				Dimension shift = new Dimension(-halfWidth, -(height + -margin));
				target.setLocation(bounds.getBottom().getTranslated(shift));

			} else if (direction == PositionConstants.SOUTH_EAST) {

				Dimension shift = new Dimension(-(width + -margin),
					-(height + -margin));
				target
					.setLocation(bounds.getBottomRight().getTranslated(shift));

			} else if (direction == PositionConstants.WEST) {

				Dimension shift = new Dimension(-margin, -halfHeight);
				target.setLocation(bounds.getLeft().getTranslated(shift));

			} else if (direction == PositionConstants.EAST) {

				Dimension shift = new Dimension(-(width + -margin), -halfHeight);
				target.setLocation(bounds.getRight().getTranslated(shift));

			}
		} else {

			if (direction == PositionConstants.NORTH_WEST) {

				Dimension shift =
					new Dimension(- (width + margin), - (height + margin));
				target.setLocation(bounds.getTopLeft().getTranslated(shift));

			} else if (direction == PositionConstants.NORTH) {

				Dimension shift =
					new Dimension(-halfWidth, - (height + margin));
				target.setLocation(bounds.getTop().getTranslated(shift));

			} else if (direction == PositionConstants.NORTH_EAST) {

				Dimension shift = new Dimension(margin, - (height + margin));
				target.setLocation(bounds.getTopRight().getTranslated(shift));

			} else if (direction == PositionConstants.SOUTH_WEST) {

				Dimension shift = new Dimension(- (width + margin), margin);
				target.setLocation(bounds.getBottomLeft().getTranslated(shift));

			} else if (direction == PositionConstants.SOUTH) {

				Dimension shift = new Dimension(-halfWidth, margin);
				target.setLocation(bounds.getBottom().getTranslated(shift));

			} else if (direction == PositionConstants.SOUTH_EAST) {

				Dimension shift = new Dimension(margin, margin);
				target.setLocation(
					bounds.getBottomRight().getTranslated(shift));

			} else if (direction == PositionConstants.WEST) {

				Dimension shift =
					new Dimension(- (width + margin), -halfHeight);
				target.setLocation(bounds.getLeft().getTranslated(shift));

			} else if (direction == PositionConstants.EAST) {

				Dimension shift = new Dimension(margin, -halfHeight);
				target.setLocation(bounds.getRight().getTranslated(shift));

			}
		}
	}

}
@


1.3
log
@Bugzilla#109422 gmf_head cmahoney 060418 Remove deprecated API
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
@


1.3.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d48 1
a48 1
	private int direction;
d51 1
a51 1
	private IFigure reference;
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

