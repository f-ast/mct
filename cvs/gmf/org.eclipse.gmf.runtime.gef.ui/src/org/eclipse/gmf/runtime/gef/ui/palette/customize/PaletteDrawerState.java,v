head	1.1;
access;
symbols
	v20081020-0700:1.1
	v20080813-1510:1.1
	v20080811-1546:1.1
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.2
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080503-1740:1.1
	v20080425-1959:1.1
	v20080328-1605:1.1
	v20080222-1200:1.1
	v20080114-1111:1.1
	v20080107-1111:1.1
	v20071222-1111:1.1;
locks; strict;
comment	@# @;


1.1
date	2007.12.20.22.47.40;	author crevells;	state Exp;
branches;
next	;
commitid	3e2f476af10c4567;


desc
@@


1.1
log
@[114117] gmf_head crevells 071220 [Palette] Expose the customize palette capability from GEF
@
text
@/******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.gef.ui.palette.customize;

import org.eclipse.gef.palette.PaletteDrawer;
import org.eclipse.ui.IMemento;

/**
 * Used to store, rollback, and apply palette customizations of a palette
 * drawer.
 * 
 * @@since 2.1
 * @@author crevells
 */
public class PaletteDrawerState
    extends PaletteEntryState {

    private static final String INITIAL_STATE_KEY = "initialState"; //$NON-NLS-1$

    int initialState;

    public PaletteDrawerState(PaletteDrawer drawer) {
        super(drawer);
    }

    public void storeState() {
        super.storeState();
        initialState = ((PaletteDrawer) getPaletteEntry()).getInitialState();
    }

    public void rollback() {
        super.rollback();
        ((PaletteDrawer) getPaletteEntry()).setInitialState(initialState);
    }

    public void storeChangesInMemento(IMemento memento) {
        super.storeChangesInMemento(memento);

        PaletteDrawer drawer = ((PaletteDrawer) getPaletteEntry());
        if (initialState != drawer.getInitialState()) {
            memento.putInteger(INITIAL_STATE_KEY, drawer.getInitialState());
        }
    }

    public void applyChangesFromMemento(IMemento entryMemento) {
        super.applyChangesFromMemento(entryMemento);

        Integer iValue = entryMemento.getInteger(INITIAL_STATE_KEY);
        if (iValue != null) {
            ((PaletteDrawer) getPaletteEntry()).setInitialState(iValue);
        }
    }
}
@
