head	1.2;
access;
symbols
	v20081020-0700:1.2
	v20080813-1510:1.2
	v20080811-1546:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.2
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080503-1740:1.2
	v20080425-1959:1.2
	v20080328-1605:1.2
	v20080222-1200:1.2
	v20080114-1111:1.2
	v20080107-1111:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.1;
locks; strict;
comment	@# @;


1.2
date	2007.12.10.21.43.57;	author ahunter;	state Exp;
branches;
next	1.1;
commitid	67b6475db31d4567;

1.1
date	2007.11.23.14.11.41;	author crevells;	state Exp;
branches;
next	;
commitid	9214746df9d4567;


desc
@@


1.2
log
@[194282] gmf_head carson_li 071210 [RulersGrid] Useability: diagram arrange all should snap to grid if snap to grid is on
@
text
@/*******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

package org.eclipse.gmf.runtime.gef.ui.internal.handles;

import org.eclipse.draw2d.BendpointLocator;
import org.eclipse.draw2d.Locator;

import org.eclipse.gef.ConnectionEditPart;
import org.eclipse.gef.DragTracker;
import org.eclipse.gef.RequestConstants;
import org.eclipse.gef.handles.BendpointMoveHandle;
import org.eclipse.gmf.runtime.gef.ui.internal.tools.ConnectionBendpointTrackerEx;

/**
 * A BendpointHandle that is used to move an existing bendpoint.
 * 
 * @@author carson_li
 */
public class BendpointMoveHandleEx extends BendpointMoveHandle {

	/**
	 * Creates a new BendpointMoveHandle, sets its owner to <code>owner</code>
	 * and its index to <code>index</code>, and sets its locator to a new
	 * {@@link BendpointLocator}.
	 * 
	 * @@param owner
	 *            the ConnectionEditPart owner
	 * @@param index
	 *            the index
	 */
	public BendpointMoveHandleEx(ConnectionEditPart owner, int index) {
		super(owner, index);
	}

	/**
	 * Creates a new BendpointMoveHandle, sets its owner to <code>owner</code>
	 * and its index to <code>index</code>, and sets its locator to a new
	 * {@@link BendpointLocator} with the given <code>locatorIndex</code>.
	 * 
	 * @@param owner
	 *            the ConnectionEditPart owner
	 * @@param index
	 *            the index
	 * @@param locatorIndex
	 *            the index to use for the locator
	 */
	public BendpointMoveHandleEx(ConnectionEditPart owner, int index,
			int locatorIndex) {
		super(owner, index, locatorIndex);
	}

	/**
	 * Creates a new BendpointMoveHandle and sets its owner to
	 * <code>owner</code>, sets its index to <code>index</code>, and sets
	 * its locator to <code>locator</code>.
	 * 
	 * @@param owner
	 *            the ConnectionEditPart owner
	 * @@param index
	 *            the index
	 * @@param locator
	 *            the Locator
	 */
	public BendpointMoveHandleEx(ConnectionEditPart owner, int index,
			Locator locator) {
		super(owner, index, locator);
	}

	/**
	 * Creates and returns a new {@@link ConnectionBendpointTrackerEx}.
	 * 
	 * @@return the new ConnectionBendpointTrackerEx
	 */
	protected DragTracker createDragTracker() {
		ConnectionBendpointTrackerEx tracker;
		tracker = new ConnectionBendpointTrackerEx(
				(ConnectionEditPart) getOwner(), getIndex());
		tracker.setType(RequestConstants.REQ_MOVE_BENDPOINT);
		tracker.setDefaultCursor(getCursor());
		return tracker;
	}

}
@


1.1
log
@[194282] gmf_head crevells 071123 [RulersGrid] Useability: diagram arrange all
should snap to grid if snap to grid is on
Contributed by:  Carson Li
@
text
@d25 2
d30 61
a90 53
/**
 * Creates a new BendpointMoveHandle.
 */
public BendpointMoveHandleEx() { }

/**
 * Creates a new BendpointMoveHandle, sets its owner to <code>owner</code>
 * and its index to <code>index</code>, and sets its locator to a new
 * {@@link BendpointLocator}.
 * @@param owner the ConnectionEditPart owner
 * @@param index the index
 */
public BendpointMoveHandleEx(ConnectionEditPart owner, int index) {
	super (owner, index);
}

/**
 * Creates a new BendpointMoveHandle, sets its owner to <code>owner</code>
 * and its index to <code>index</code>, and sets its locator to a new
 * {@@link BendpointLocator} with the given <code>locatorIndex</code>.
 * @@param owner the ConnectionEditPart owner
 * @@param index the index
 * @@param locatorIndex the index to use for the locator
 */
public BendpointMoveHandleEx(ConnectionEditPart owner, int index, int locatorIndex) {
	super (owner, index, locatorIndex);
}

/**
 * Creates a new BendpointMoveHandle and sets its owner to <code>owner</code>,
 * sets its index to <code>index</code>, and sets its locator to 
 * <code>locator</code>.
 * @@param owner the ConnectionEditPart owner
 * @@param index the index
 * @@param locator the Locator
 */
public BendpointMoveHandleEx(ConnectionEditPart owner, int index, Locator locator) {
	super (owner, index, locator);
}

/**
 * Creates and returns a new {@@link ConnectionBendpointTrackerEx}.
 * @@return the new ConnectionBendpointTrackerEx
 */
protected DragTracker createDragTracker() {
	ConnectionBendpointTrackerEx tracker;
	tracker = new ConnectionBendpointTrackerEx(
		(ConnectionEditPart)getOwner(),
		getIndex());
	tracker.setType(RequestConstants.REQ_MOVE_BENDPOINT);
	tracker.setDefaultCursor(getCursor());	
	return tracker;
}
@

