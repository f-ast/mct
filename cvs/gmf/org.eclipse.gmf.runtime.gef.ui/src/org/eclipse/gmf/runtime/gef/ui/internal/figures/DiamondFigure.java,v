head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080813-1510:1.3
	v20080811-1546:1.3
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.6
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080503-1740:1.3
	v20080425-1959:1.3
	v20080328-1605:1.3
	v20080222-1200:1.3
	v20080114-1111:1.3
	v20080107-1111:1.3
	v20071222-1111:1.3
	v20071214-1111:1.3
	v20071130-1111:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070330-1300:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20060919-0800:1.3
	v20060907-1100:1.3
	M1_20:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.3
date	2005.11.04.21.27.55;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.28;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.54;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2003 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.gef.ui.internal.figures;

import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.PointList;
import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.draw2d.ui.figures.IPolygonAnchorableFigure;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;


/**
 * Draws a diamond figure.
 * @@author mmuszyns
 * @@canBeSeenBy %level0
 */
public class DiamondFigure extends NodeFigure implements IPolygonAnchorableFigure{

	/** 
	 * Create an instance.
	 * @@param dim the preferred size.
	 */
	public DiamondFigure( Dimension dim ) { 
		setPreferredSize(dim);
	}
	
	/**
	 * paints the object flow figure: a rectangular shape.
	 * @@param graphics
	 */
	protected void paintFigure(Graphics graphics) {
		Rectangle r = new Rectangle();
		PointList pointList = new PointList();

		r.x = bounds.x;
		r.y = bounds.y;
		r.width = bounds.width - 1;
		r.height = bounds.height - 1;
		pointList.removeAllPoints();
		pointList.addPoint(r.x + r.width / 2, r.y);
		pointList.addPoint(r.x + r.width, r.y + r.height / 2);
		pointList.addPoint(r.x + r.width / 2, r.y + r.height);
		pointList.addPoint(r.x, r.y + r.height / 2);
		graphics.fillPolygon(pointList);
		graphics.drawPolygon(pointList);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.figures.IPolygonAnchorableFigure#getPolygonPoints()
	 */
	public PointList getPolygonPoints() {
		PointList ptList = new PointList();
		ptList.addPoint(new Point(getBounds().x+getBounds().width/2, getBounds().y));
		ptList.addPoint(new Point(getBounds().x+getBounds().width, getBounds().y+getBounds().height/2));
		ptList.addPoint(new Point(getBounds().x+getBounds().width/2, getBounds().y+getBounds().height));
		ptList.addPoint(new Point(getBounds().x, getBounds().y+getBounds().height/2));
		ptList.addPoint(new Point(getBounds().x+getBounds().width/2, getBounds().y));
		return ptList;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure#getSlidableAnchorArea()
	 */
	protected double getSlidableAnchorArea() {
		return 0.7;
	}
}
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a30 11
	private static final int PREF_SIZE = 1058;

	/** 
	 * Create an instance.  This constructor sets the default preferred size
	 * to [1058,1058] in HiMetric coordinates. 
	 * Same as calling <code>DiamondFigure(new Dimension(1058, 1058))</code>.
	 */
	public DiamondFigure() { 
		this(new Dimension(PREF_SIZE, PREF_SIZE));
	}

@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

