head	1.10;
access;
symbols
	v20081020-0700:1.10
	v20080813-1510:1.9.2.1
	v20080811-1546:1.10
	v20080722-1827:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080503-1740:1.9
	v20080425-1959:1.8
	v20080328-1605:1.8
	v20080222-1200:1.8
	v20080114-1111:1.8
	v20080107-1111:1.7
	v20071222-1111:1.5
	v20071214-1111:1.5
	v20071130-1111:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.4
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070330-1300:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061013-1330:1.5
	v20060919-0800:1.5
	v20060907-1100:1.5
	M1_20:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060531-1730:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.2
	I20051201-1800:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.10
date	2008.08.11.19.45.39;	author ahunter;	state Exp;
branches;
next	1.9;
commitid	6b7348a096e34567;

1.9
date	2008.05.03.20.56.17;	author ahunter;	state Exp;
branches
	1.9.2.1;
next	1.8;
commitid	6071481cd1714567;

1.8
date	2008.01.10.23.02.29;	author aboyko;	state Exp;
branches;
next	1.7;
commitid	6a7b4786a4054567;

1.7
date	2008.01.03.17.43.00;	author aboyko;	state Exp;
branches;
next	1.6;
commitid	328e477d1ea34567;

1.6
date	2008.01.02.20.07.00;	author aboyko;	state Exp;
branches;
next	1.5;
commitid	5aa3477beee34567;

1.5
date	2006.04.21.21.14.50;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.17.22.54.08;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.08.22.53.37;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.28;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.44;	author sshaw;	state Exp;
branches;
next	;

1.9.2.1
date	2008.08.11.19.40.56;	author ahunter;	state Exp;
branches;
next	;
commitid	3d5648a095c84567;


desc
@@


1.10
log
@[243187] gmf-head ahunter 080811 Default line width -1 may cause problems on Linux
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.gef.ui.figures;

import java.util.Hashtable;
import java.util.Iterator;

import org.eclipse.draw2d.ConnectionAnchor;
import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.geometry.Insets;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.PointList;
import org.eclipse.draw2d.geometry.PrecisionPoint;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.handles.HandleBounds;
import org.eclipse.gmf.runtime.draw2d.ui.figures.BaseSlidableAnchor;
import org.eclipse.gmf.runtime.draw2d.ui.figures.IAnchorableFigure;
import org.eclipse.gmf.runtime.draw2d.ui.figures.IPolygonAnchorableFigure;
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.TransparentBorder;

/**
 * Base class that most shape figures should extend from to gain default connection anchor behavior.
 * 
 * @@author melaasar
 */
public class NodeFigure 
	extends Figure
		implements HandleBounds, IAnchorableFigure, IPolygonAnchorableFigure {

	private Hashtable connectionAnchors;
	
	/** 
	 * The width of this shape's outline. (a field from GEF Shape). Must be
	 * greater than zero. 
	 * TODO: NodeFigure should have extended org.eclipse.draw2d.Shape
	 */
	private int lineWidth = 1;
	
	/**
	 * The line style to be used for this shape's outline. 
	 * TODO: NodeFigure should have extended org.eclipse.draw2d.Shape
	 */
	private int lineStyle = Graphics.LINE_SOLID;
	
	/**
	 * <code>String</code> that is the identifier for the default anchor
	 */
	static public final String szAnchor = ""; //$NON-NLS-1$

	/** 
	 * Constructor - sets the default colors for all node figures.
	 */
	public NodeFigure() {
		// empty constructor
	}

	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.gef.handles.HandleBounds#getHandleBounds()
	 */
	public Rectangle getHandleBounds() {
		Insets insets = new Insets(0, 0, 0, 0);
		if (getBorder() instanceof TransparentBorder) {
			insets =
				((TransparentBorder) getBorder()).getTransparentInsets(this);
		}
        
		// Ignore the insets when placing the handles
		return new Rectangle(
				getBounds().x + insets.left,
				getBounds().y + insets.top,
				getBounds().width - (insets.right + insets.left),
				getBounds().height - (insets.bottom + insets.top));
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.figures.IAnchorableFigure#getConnectionAnchor(java.lang.String)
	 */
	public ConnectionAnchor getConnectionAnchor(String terminal) {

		ConnectionAnchor connectAnchor =
			(ConnectionAnchor) getConnectionAnchors().get(terminal);
		if (connectAnchor == null) {
			if (terminal.equals(szAnchor)) {
				// get a new one - this figure doesn't support static anchors
				connectAnchor = createDefaultAnchor();
				getConnectionAnchors().put(terminal,connectAnchor);
			}
			else {
				connectAnchor = createAnchor(SlidableAnchor.parseTerminalString(terminal));
			}
		}

		return connectAnchor;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.figures.IAnchorableFigure#getConnectionAnchorTerminal(org.eclipse.draw2d.ConnectionAnchor)
	 */
	public String getConnectionAnchorTerminal(ConnectionAnchor c) {
		if (c instanceof SlidableAnchor) {
			return ((SlidableAnchor) c).getTerminal();
		}
		if (getConnectionAnchors().containsValue(c)) {
			Iterator iter = getConnectionAnchors().keySet().iterator();
			String key;
			while (iter.hasNext()) {
				key = (String) iter.next();
				if (getConnectionAnchors().get(key).equals(c))
					return key;
			}
		}
		getConnectionAnchor(szAnchor);
		return szAnchor;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.figures.IAnchorableFigure#getSourceConnectionAnchorAt(org.eclipse.draw2d.geometry.Point)
	 */
	public ConnectionAnchor getSourceConnectionAnchorAt(Point p) {
		return createConnectionAnchor(p);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.figures.IAnchorableFigure#getTargetConnectionAnchorAt(org.eclipse.draw2d.geometry.Point)
	 */
	public ConnectionAnchor getTargetConnectionAnchorAt(Point p) {
		return createConnectionAnchor(p);
	}

	/**
	 * Returns a new anchor for this node figure.
	 * 
	 * @@param p <code>Point</code> on the figure that gives a hint which anchor to return.
	 * @@return <code>ConnectionAnchor</code> reference to an anchor associated with the 
	 * given point on the figure.
	 */
	protected ConnectionAnchor createConnectionAnchor(Point p) {
		if (p == null) {
			return getConnectionAnchor(szAnchor);
		}
		else {
			Point temp = p.getCopy();
			translateToRelative(temp);
			PrecisionPoint pt = BaseSlidableAnchor.getAnchorRelativeLocation(temp, getBounds());
			if (isDefaultAnchorArea(pt))
				return getConnectionAnchor(szAnchor);
			return createAnchor(pt);
		}
	} 
	
	/**
	 * Checks whether the <PrecisionPoint> p which is a candidate for a relative reference
	 * for the <Code>SlidableAnchor</Code> belongs to the area where the default anchor
	 * must be created
	 * 
	 * @@param p
	 * @@return <code>boolean</code> <code>true</code> if <PrecisionPoint> belongs to the area where the default anchor must be 
	 * created, <code>false</code> otherwise
	 */
	protected boolean isDefaultAnchorArea(PrecisionPoint p) {
		return p.preciseX >= getSlidableAnchorArea()/2 && p.preciseX <= 1 - getSlidableAnchorArea()/2 &&
			p.preciseY >= getSlidableAnchorArea()/2 && p.preciseY <= 1 - getSlidableAnchorArea()/2;
	}

	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.draw2d.Figure#paintFigure(org.eclipse.draw2d.Graphics)
	 */
	protected void paintFigure(Graphics graphics) {
		if (isOpaque() && getBorder() != null) {
			Rectangle tempRect = new Rectangle(getBounds());
			tempRect.crop(getBorder().getInsets(this));
			graphics.fillRectangle(tempRect);
			return;
		}

		super.paintFigure(graphics);
	}
	

	/**
	 * Returns the connectionAnchors.
	 * @@return Hashtable
	 */
	protected Hashtable getConnectionAnchors() {
		if (connectionAnchors == null)
			connectionAnchors = new Hashtable(1);
		return connectionAnchors;
	}
		

	/**
	 * Specifies how large the area of the figure's bounds where <Code>SlidableAnchor</Code>
	 * will be created. The result number: 0<=result<=1
	 * 
	 * @@return  the size of the area of the figure's bounds
	 */
	protected double getSlidableAnchorArea() {
		return 0.5;
	}
	
	/**
	 * Creates the default Slidable anchor with a reference point at the center
	 * of the figure's bounds
	 * 
	 * @@return - default SlidableAnchor, relative reference the center of the figure
	 */
	protected ConnectionAnchor createDefaultAnchor() {
		return new SlidableAnchor(this);
	}
	
	/**
	 * Creates a slidable anchor at the specified point (from the ratio of the
	 * reference's coordinates and bounds of the figure
	 * 
	 * @@param p - relative reference for the <Code>SlidableAnchor</Code>
	 * @@return a <code>SlidableAnchor</code> for this figure with relative reference at p
	 */
	protected ConnectionAnchor createAnchor(PrecisionPoint p) {
		if (p==null)
			// If the old terminal for the connection anchor cannot be resolved (by SlidableAnchor) a null
			// PrecisionPoint will passed in - this is handled here
			return createDefaultAnchor();
		return new SlidableAnchor(this, p);
	}

	/**
	 * @@return <code>String</code> that is the identifier for the default anchor
	 */
	public static String getDefaultAnchorID() {
		return szAnchor;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.figures.IPolygonAnchorableFigure#getPolygonPoints()
	 */
	public PointList getPolygonPoints() {
		PointList points = new PointList(5);
		Rectangle anchorableRectangle = getHandleBounds();
		points.addPoint(anchorableRectangle.x, anchorableRectangle.y);
		points.addPoint(anchorableRectangle.x + anchorableRectangle.width,
				anchorableRectangle.y);
		points.addPoint(anchorableRectangle.x + anchorableRectangle.width,
				anchorableRectangle.y + anchorableRectangle.height);
		points.addPoint(anchorableRectangle.x, anchorableRectangle.y
				+ anchorableRectangle.height);
		points.addPoint(anchorableRectangle.x, anchorableRectangle.y);
		return points;
	}

	/**
	 * Returns the line style used to outline this shape.
	 * @@return the line style
	 * @@since 2.1
	 */
	public int getLineStyle() {
		return lineStyle;
	}

	/**
	 * Returns the line width of this shape's outline.
	 * @@return the line width
	 * @@since 2.1
	 */
	public int getLineWidth() {
		return lineWidth;
	}

	/**
	 * Sets the line width to be used to outline the shape.
	 *
	 * @@param w the new width
	 * @@since 2.1
	 */
	public void setLineWidth(int w) {
		if ((lineWidth == w) || (w < 0))
			return;
		lineWidth = w;
		repaint();
	}

	/**
	 * Sets the style of line to be used by this shape.
	 *
	 * @@param s the new line style
	 * @@since 2.1
	 */
	public void setLineStyle(int s) {
		if (lineStyle == s) 
			return;
		lineStyle = s;
		repaint();
	}

}
@


1.9
log
@[225137] gmf-head ahunter 080503 Line styles enhancement
@
text
@d43 2
a44 1
	 * The width of this shape's outline. (a field from GEF Shape).
d287 1
a287 1
		if (lineWidth == w) 
@


1.9.2.1
log
@[243187] gmf_R2_1_maintenance ahunter 080811 Default line width -1 may cause problems on Linux
@
text
@d43 1
a43 2
	 * The width of this shape's outline. (a field from GEF Shape). Must be
	 * greater than zero. 
d286 1
a286 1
		if ((lineWidth == w) || (w < 0))
@


1.8
log
@Commit back [194482] gmf_head aboyko 080102 [Connections] Unexpected behavior while moving the end point of a rectilinear connection
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003, 2006 IBM Corporation and others.
d42 12
d259 46
a304 2
	}	
	
@


1.7
log
@Roll back fix to bug 194482 (to be committed in M5)
@
text
@d22 1
d28 1
d38 1
a38 1
		implements HandleBounds, IAnchorableFigure {
d231 18
@


1.6
log
@[194482] gmf_head aboyko 080102 [Connections] Unexpected behavior while moving the end point of a rectilinear connection
@
text
@a21 1
import org.eclipse.draw2d.geometry.PointList;
a26 1
import org.eclipse.gmf.runtime.draw2d.ui.figures.IPolygonAnchorableFigure;
d36 1
a36 1
		implements HandleBounds, IAnchorableFigure, IPolygonAnchorableFigure {
a228 18

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.figures.IPolygonAnchorableFigure#getPolygonPoints()
	 */
	public PointList getPolygonPoints() {
		PointList points = new PointList(5);
		Rectangle anchorableRectangle = getHandleBounds();
		points.addPoint(anchorableRectangle.x, anchorableRectangle.y);
		points.addPoint(anchorableRectangle.x + anchorableRectangle.width,
				anchorableRectangle.y);
		points.addPoint(anchorableRectangle.x + anchorableRectangle.width,
				anchorableRectangle.y + anchorableRectangle.height);
		points.addPoint(anchorableRectangle.x, anchorableRectangle.y
				+ anchorableRectangle.height);
		points.addPoint(anchorableRectangle.x, anchorableRectangle.y);
		return points;
	}	
	
@


1.5
log
@bugzilla 137787 gmf-head sshaw 060421 API propogation for SlidableAnchor's getLocation()
@
text
@d22 1
d28 1
d38 1
a38 1
		implements HandleBounds, IAnchorableFigure {
d231 18
@


1.4
log
@bugzilla 119691 gmf-head sshaw 060217 Adding a note to a note attachment does not connect to middle of connection
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d25 1
a26 1
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.BaseSlidableAnchor;
@


1.3
log
@bugzilla 120017 gmf-head sshaw 051208 Redundant classes for managing connection retargetting
@
text
@d26 1
d140 1
a140 1
			PrecisionPoint pt = getAnchorRelativeLocation(temp);
d187 1
a187 34
	/**
	 * Calculates the relative location of the reference point with respect to the bounds
	 * of the figure. If point p is not inside of the figure's bounds then the point
	 * is mapped on the bounds and the point relative location is calculated 
	 * 
	 * @@param p the <code>Point</code> that is relative coordinates of the point
	 * @@return <Code>PrecisionPoint</Code>, i.e. the relative reference for
	 * <Code>SlidableAnchor</Code>
	 */
	protected PrecisionPoint getAnchorRelativeLocation(Point p) {
		PrecisionPoint relLocation;
		Point temp = new Point(p);
		if (p.x < getBounds().x || p.x > getBounds().x + getBounds().width
			|| p.y < getBounds().y || p.y > getBounds().y + getBounds().height) {
			if (p.x < getBounds().x || p.x > getBounds().x + getBounds().width) {
				temp.x = p.x < getBounds().x ? getBounds().x
					: getBounds().x + getBounds().width;
			}
			if (p.y < getBounds().y || p.y > getBounds().y + getBounds().height) {
				temp.y = p.y < getBounds().y ? getBounds().y
					: getBounds().y + getBounds().height;
			}
			relLocation = new PrecisionPoint((double) (temp.x - getBounds().x)
				/ getBounds().width, (double) (temp.y - getBounds().y)
				/ getBounds().height);
		} else {

		relLocation = new PrecisionPoint((double) (temp.x - getBounds().x)
				/ getBounds().width, (double) (temp.y - getBounds().y)
				/ getBounds().height);
		}
		return relLocation;
	}
	
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d25 1
a25 1

d35 1
a35 1
		implements HandleBounds {
d70 2
a71 5
	/**
	 * Given a string identifier, return the associated anchor for that identifier
	 * 
	 * @@param terminal <code>String</code> identifier associated with the anchor
	 * @@return <code>ConnectionAnchor</code> that is associated with the given string.
d91 2
a92 7
	/**
	 * Dynamically allocates a new anchor if needed.  Otherwise, recycles old anchors
	 * no longer in use.
	 * 
	 * @@param c the <code>ConnectionAnchor</code> reference to an anchor associated with the 
	 * given point on the figure
	 * @@return a <code>String</code> that represents the anchor identifier.
d111 2
a112 6
	/** 
	 * Gets the source connection anchor at a given point on the figure.
	 * 
	 * @@param p <code>Point</code> on the figure that gives a hint which anchor to return.
	 * @@return a <code>ConnectionAnchor</code> reference to an anchor associated with the given 
	 * point on the figure.
d118 2
a119 6
	/** 
	 * Gets the target connection anchor at a given point on the figure.
	 * 
	 * @@param p <code>Point</code> on the figure that gives a hint which anchor to return.
	 * @@return <code>ConnectionAnchor</code> reference to an anchor associated with the 
	 * given point on the figure.
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

