head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080813-1510:1.4
	v20080811-1546:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080503-1740:1.4
	v20080425-1959:1.4
	v20080328-1605:1.4
	v20080222-1200:1.4
	v20080114-1111:1.4
	v20080107-1111:1.4
	v20071222-1111:1.4
	v20071214-1111:1.4
	v20071130-1111:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.1
	v20060907-1100:1.3.2.1
	M1_20:1.3
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3.2.1
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.4
date	2006.10.03.15.06.36;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.12.22.25.28;	author sshaw;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.27.28;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.54;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.11.17.52.10;	author cmahoney;	state Exp;
branches;
next	;


desc
@@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.gef.ui.internal.editparts;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.draw2d.ScalableFigure;
import org.eclipse.draw2d.Viewport;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.editparts.ZoomListener;
import org.eclipse.gef.editparts.ZoomManager;

import org.eclipse.gmf.runtime.draw2d.ui.geometry.LineSeg;
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.AnimationModel;


/**
 * @@author sshaw
 *
 * Overriden to fully support animated zoom.
 */
public class AnimatableZoomManager
	extends ZoomManager {

	private int zoomAnimationStyle = ANIMATE_NEVER;
	private List animationListeners = new ArrayList();

	/**
	 * @@return Returns the zoomAnimationStyle.
	 */
	public int getZoomAnimationStyle() {
		return zoomAnimationStyle;
	}
	
	/**
	 * @@param pane
	 * @@param viewport
	 */
	public AnimatableZoomManager(ScalableFigure pane, Viewport viewport) {
		super(pane, viewport);
	}

	/**
	 * Sets which zoom methods get animated.
	 * 
	 * @@param style the style bits determining the zoom methods to be animated.
	 */
	public void setZoomAnimationStyle(int style) {
		zoomAnimationStyle = style;
	}
	
	/**
	 * Adds the given ZoomListener to this ZoomManager's list of listeners.
	 * @@param listener the ZoomListener to be added
	 */
	public void addZoomListener(ZoomListener listener) {
		super.addZoomListener(listener);
		if (listener instanceof AnimatedZoomListener) {
			animationListeners.add(listener);
		}
	}
	
	/**
	 * Notifies listeners that the animated zoom has started.
	 */
	protected void fireAnimatedZoomStarted() {
		Iterator iter = animationListeners.iterator();
		while (iter.hasNext())
			((AnimatedZoomListener)iter.next()).animatedZoomStarted();
	}
	
	/**
	 * Notifies listeners that the animated zoom has ended.
	 */
	protected void fireAnimatedZoomEnded() {
		Iterator iter = animationListeners.iterator();
		while (iter.hasNext())
			((AnimatedZoomListener)iter.next()).animatedZoomEnded();
	}
	
	/**
	 * Allows implementators to zoom to a certain level centered around a given point.
	 * 
	 * @@param zoom <code>double</code> value where 1.0 represents 100%.
	 * @@param center <code>Point</code> around which the zoom will be centered in absolute coordinates
	 */
	public void zoomTo(double zoom, Point center) {
		Point centerRel = center.getCopy();
		getScalableFigure().translateToRelative(centerRel);
		primSetZoom(zoom, centerRel);
	}
	
	/**
	 * Allows implementors to zoom into or out to a rectangular area.
	 * 
	 * @@param rect <code>Rectangle</code> that the edit part will zoom into our out to in 
	 * absolute coordinates.
	 */
	public void zoomTo(Rectangle rect) {
		Dimension available = getViewport().getClientArea().getSize();
		Dimension desired = rect.getSize();

		double scaleX = available.width * getZoom() / desired.width;
		double scaleY = available.height * getZoom() / desired.height;
		
		double zoom = Math.min(getMaxZoom(), Math.max(getMinZoom(), Math.min(scaleX, scaleY)));
		zoomTo(zoom, rect.getCenter());
	}
	
	private static final int DURATION_INCREMENT = 400;

	/**
	 * Sets the zoom level to the given value.  Min-max range check is not done.
	 * 
	 * @@param zoom the new zoom level
	 */
	protected void primSetZoom(double zoom) {
		Point center = getViewport().getClientArea().getCenter();
		primSetZoom(zoom, center);
	}
	
	/**
	 * Calculate the animation duration based on the number of zoom increments being traversed.
	 * 
	 * @@param zoom
	 * @@return <code>AnimationModel</code> that is appropriate for the zoom difference between requested and the
	 * current zoom level.
	 */
	private AnimationModel calculateAnimationModel(double zoom) {
        double dmod = Math.pow(zoom / getZoom(),(double)1/8);
		int steps = (int)Math.round(dmod > 1 ? dmod : 1/dmod);
		
		int duration = Math.max(DURATION_INCREMENT, steps * DURATION_INCREMENT);
		AnimationModel animationModel = new AnimationModel(duration, true);
		animationModel.animationStarted();
		return animationModel;
	}
	
	/**
	 * Sets the zoom level to the given value.  Min-max range check is not done.
	 * 
	 * @@param zoom the new zoom level
	 */
	private void primSetZoom(double zoom, Point finalCenterAbs) {
		primAnimateSetZoom(zoom, finalCenterAbs, 
				getZoomAnimationStyle() == ANIMATE_ZOOM_IN_OUT ? calculateAnimationModel(zoom) : null);
	}

	/**
	 * Performs the zoom with animation.
	 * 
	 * @@param zoom
	 * @@param finalCenter
	 * @@param animationModel
	 */
	private void primAnimateSetZoom(double zoom, Point finalCenter, AnimationModel animationModel) {
		
		double initialZoom = getZoom();
		double finalZoom = zoom;
		
		Point finalCenterRel = finalCenter.getCopy();
		Point originalViewLocation = getViewport().getViewLocation();
		Dimension centerDiff = originalViewLocation.getDifference(getViewport().getClientArea().getCenter());
		Point finalViewLocation = finalCenterRel.scale(finalZoom / initialZoom).getTranslated(centerDiff);
		LineSeg scrollVector = new LineSeg(originalViewLocation, finalViewLocation);
		
		float progress = 1.0f;
		if (animationModel != null) {
			animationModel.animationStarted();
			progress = animationModel.getProgress();
		}
		boolean finished = false;
		
		fireAnimatedZoomStarted();
		
		while(!finished) {
			
			if (animationModel == null || animationModel.isFinished())
				finished = true;
			
			double currentZoom = initialZoom + ((finalZoom - initialZoom) * progress);
			
			super.primSetZoom(currentZoom);
			
			Point currentViewLocation = scrollVector.locatePoint(progress, 0, LineSeg.Sign.POSITIVE);
			setViewLocation(currentViewLocation);	
			
			getViewport().getUpdateManager().performUpdate();
			
			if (animationModel != null)
				progress = animationModel.getProgress();
		}
		
		fireAnimatedZoomEnded();
	}
}
@


1.3
log
@bugzilla 111210 gmf-head sshaw 051012 Running out of SWT handles / Excessive GDI handles
@
text
@d143 2
a144 2
		double dmod = zoom / getZoom();
		int steps = (int)Math.round(dmod > 0 ? dmod : 1/dmod);
@


1.3.2.1
log
@Bugzilla#142751 gmf_R1_0_maintenance cmahoney 060711 Zoom animation can take 32 seconds to complete
Contributed by: Syed Atif Ali
@
text
@d143 2
a144 2
        double dmod = Math.pow(zoom / getZoom(),(double)1/8);
		int steps = (int)Math.round(dmod > 1 ? dmod : 1/dmod);
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d14 4
d23 1
d39 1
d66 29
d187 2
d190 1
d206 2
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

