head	1.12;
access;
symbols
	v20080911-1728:1.12
	v20080222-1200:1.11
	v20071108-0000:1.11
	v20071003-0000:1.11
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.2
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.10
	v20070601-1400:1.10
	v20070330-1300:1.10
	v20060316-0600:1.10
	v20070208-1800:1.9
	v20070202-0200:1.6.2.5
	M4_20:1.7
	v20061218-1500:1.6.2.2
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.6.2.2
	v20061020-1000:1.6.2.2
	v20061013-1330:1.7
	v20060919-0800:1.6.2.2
	M1_20:1.6
	v20060721-1130:1.6.2.1
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060531-1730:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.12
date	2008.03.07.16.51.35;	author ahunter;	state dead;
branches;
next	1.11;
commitid	29ec47d172944567;

1.11
date	2007.09.21.15.39.47;	author aboyko;	state Exp;
branches;
next	1.10;
commitid	57d046f3e5c24567;

1.10
date	2007.03.13.17.43.54;	author crevells;	state Exp;
branches;
next	1.9;
commitid	58a45f6e2d94567;

1.9
date	2007.01.26.21.35.19;	author aboyko;	state Exp;
branches;
next	1.8;
commitid	5e1345ba74164567;

1.8
date	2007.01.12.17.09.06;	author mmostafa;	state Exp;
branches;
next	1.7;
commitid	7ebf45a7c0b14567;

1.7
date	2006.10.03.15.03.03;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.07.19.38.01;	author cmahoney;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.01.20.22.10.04;	author cmahoney;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.08.16.02.34;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.28.04;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.48.06;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.50;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.07.17.19.47.19;	author cmahoney;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2006.09.13.16.43.42;	author ahunter;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2007.01.26.21.49.58;	author aboyko;	state Exp;
branches;
next	1.6.2.4;
commitid	561245ba77864567;

1.6.2.4
date	2007.02.01.15.39.48;	author ahunter;	state Exp;
branches;
next	1.6.2.5;
commitid	183c45c209c44567;

1.6.2.5
date	2007.02.01.15.44.29;	author ahunter;	state Exp;
branches;
next	;
commitid	1eff45c20adc4567;


desc
@@


1.12
log
@[196834] gmf-head jbruck 080307 [Printing] Multi-platform Diagram Printing
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.printing.internal.util;

import java.io.File;

import org.eclipse.core.runtime.IPath;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.RootEditPart;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.OffscreenEditPartFactory;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.PageBreakEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.figures.PageBreaksFigure;
import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageInfoHelper;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;
import org.eclipse.gmf.runtime.diagram.ui.util.DiagramEditorUtil;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferenceStore;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

/**
 * Helper to assist in making an offscreen diagram suitable for printing or
 * previewing.
 * 
 * @@author wdiu, Wayne Diu
 */
public class PrintHelper {
	/**
     * Creates a <code>DiagramEditPart</code> given the <code>Diagram</code>
     * without opening an editor.
     * 
	 * @@param diagram the <code>Diagram</code>
	 * @@param preferencesHint the preferences hint to use for intiializing the
	 * preferences of the root edit part
	 * @@return the new populated <code>DiagramEditPart</code>
     * @@deprecated Please use
     *             {@@link #createDiagramEditPart(Diagram, PreferencesHint, Shell)}
     *             instead as this method does not dispose the new Shell that it
     *             creates.
     */
	public static DiagramEditPart createDiagramEditPart(Diagram diagram,
            PreferencesHint preferencesHint) {
			
            DiagramEditPart diagramEditPart =  OffscreenEditPartFactory.getInstance().createDiagramEditPart(
            diagram, new Shell(), preferencesHint);
            // since some of the diagram updates are ASync we need to give the 
            // inter-thread messages a chance to get processed processed before we
            // continue; check bugzilla 170332
            while (Display.getDefault().readAndDispatch ()){
                // nothing special to do 
            }
             return diagramEditPart;
        }
    
    /**
     * Creates a <code>DiagramEditPart</code> given the <code>Diagram</code>
     * without opening an editor.
     * 
     * @@param diagram the <code>Diagram</code>
     * @@param preferencesHint the preferences hint to use for intiializing the
     * preferences of the root edit part
     * @@return the new populated <code>DiagramEditPart</code>
     */
    public static DiagramEditPart createDiagramEditPart(Diagram diagram,
        PreferencesHint preferencesHint, Shell shell) {
        DiagramEditPart diagramEditPart = OffscreenEditPartFactory.getInstance().createDiagramEditPart(
                diagram, shell, preferencesHint);
        // since some of the diagram updates are ASync we need to give the 
        // inter-thread messages a chance to get processed before we
        // continue; check bugzilla 170332
        while (Display.getDefault().readAndDispatch ()){
            // nothing special to do 
        }
         return diagramEditPart;
    }
	
	/**
	 * Initialize the preferences for a diagram edit part, specifically
	 * including page breaks and margins.
	 * 
	 * Typically, the diagram edit part is created using
	 * createDiagramEditPart() and the diagram edit part is passed in as the
	 * first parameter of this method.
	 * 
	 * @@param diagramEditPart the DiagramEditPart to pass in 
	 * @@param preferencesHint the preferences hint to use for intiializing the preferences
	 * 
	 * @@return true if the preferences could be loaded, false if they weren't
	 * loaded and defaults had to be used instead
	 */
	public static boolean initializePreferences(DiagramEditPart diagramEditPart, PreferencesHint preferencesHint) {
		assert diagramEditPart.getViewer() instanceof DiagramGraphicalViewer;
		
		DiagramGraphicalViewer viewer = (DiagramGraphicalViewer)diagramEditPart.getViewer();

		boolean loadedPreferences = true;

		IPreferenceStore fPreferences = getPreferenceStoreForDiagram(diagramEditPart);
		
		if (fPreferences == null) {
			loadedPreferences = false;
			//leave at default x and y
			PreferenceStore defaults = new PreferenceStore();
			DiagramEditor.addDefaultPreferences(defaults, preferencesHint);

			fPreferences = getWorkspacePreferenceStore(preferencesHint);
		} else if (!fPreferences
			.getBoolean(WorkspaceViewerProperties.PREF_USE_DIAGRAM_SETTINGS)) {
			//if we aren't supposed to use the diagram settings, switch to the
			//workspace settings

			//we have to use the page break x and y settings from the diagram
			int x = fPreferences.getInt(WorkspaceViewerProperties.PAGEBREAK_X), y = fPreferences
				.getInt(WorkspaceViewerProperties.PAGEBREAK_Y);

			//minor performance optimization, use the existing
			//preferences from the workspace instead of making a new one
			fPreferences = getWorkspacePreferenceStore(preferencesHint);
			fPreferences.setValue(WorkspaceViewerProperties.PAGEBREAK_X, x);
			fPreferences.setValue(WorkspaceViewerProperties.PAGEBREAK_Y, y);
		}

		viewer.hookWorkspacePreferenceStore(fPreferences);

		diagramEditPart.refreshPageBreaks();
		
		return loadedPreferences;
	}

	/**
	 * Returns the workspace viewer <code>PreferenceStore</code> for a given diagram edit part.
	 * 
	 * @@param diagramEP the DiagramEditPart to obtain the preference store for
	 * 
	 * @@return the <code>PreferenceStore</code> for the given diagram edit part
	 * Could return null if it couldn't be loaded 
	 */
	private static IPreferenceStore getPreferenceStoreForDiagram(DiagramEditPart diagramEP) {
		// Try to load it
		String id = ViewUtil.getIdStr(diagramEP.getDiagramView());

		//try and get preferences from the open diagrams first
		//loadedPreferences will be set to true only if the preferences could
		// be
		//successfully loaded
		IPreferenceStore fPreferences = loadPreferencesFromOpenDiagram(id);
		if (fPreferences != null) {
			//loadPreferencesFromOpenDiagram will have set preferences
			return fPreferences;
		}

		IPath path = DiagramUIPlugin.getInstance().getStateLocation();

		String fileName = path.toString() + "/" + id;//$NON-NLS-1$
		java.io.File file = new File(fileName);
		fPreferences = new PreferenceStore(fileName);
		if (file.exists()) {
			// Load it
			try {
				((PreferenceStore) fPreferences).load();

				return fPreferences;
			} catch (Exception e) {
				return null;
			}
		}
		return null; //fPreferences couldn't be loaded
	}
	
	/**
	 * Load the preferences from an open diagram that has the given guid.
	 * 
	 * @@param id guid of the open diagram to load the preferences for 
	 */
	private static IPreferenceStore loadPreferencesFromOpenDiagram(String id) {

		DiagramEditor diagramEditor = DiagramEditorUtil.findOpenedDiagramEditorForID(id);
		if (diagramEditor != null) {
			IDiagramGraphicalViewer viewer = diagramEditor
					.getDiagramGraphicalViewer();
			if (diagramEditor.getDiagramEditPart().getRoot() instanceof DiagramRootEditPart) {
				PageBreakEditPart pageBreakEditPart = ((DiagramRootEditPart) diagramEditor
						.getDiagramEditPart().getRoot()).getPageBreakEditPart();
				pageBreakEditPart.resize(diagramEditor.getDiagramEditPart()
						.getChildrenBounds());
				pageBreakEditPart.updatePreferenceStore();
			}
			if (viewer instanceof DiagramGraphicalViewer) {
				DiagramGraphicalViewer diagramGraphicalViewer = (DiagramGraphicalViewer) viewer;

				// preferences loaded
				return diagramGraphicalViewer
						.getWorkspaceViewerPreferenceStore();
			}
		}

		// no matching guid found
		return null;
	}
	
	/**
	 * Return the preference store for the given PreferenceHint
	 * @@param preferencesHint to return the preference store for.
	 * 
	 * @@return preference store for the given PreferenceHint
	 */
	private static IPreferenceStore getWorkspacePreferenceStore(PreferencesHint preferencesHint) {
		return (IPreferenceStore) preferencesHint.getPreferenceStore();
	}
	
	/**
	 * Returns the page break bounds on the diagram. If the bounds cannot be
	 * found the diagram bounds is returned.
	 * 
	 * @@param dgrmEP the diagram edit part to return the page break bounds for
	 * @@param loadedPreferences true if preferences were previously loaded,
	 * false if they couldn't be.  For consistency when printing, we have to
	 * treat page breaks differently depending on whether preferences were
	 * successfully loaded or not.
	 * 
	 * @@return Rectangle with the page break bounds for the given diagram edit
	 * part. If the page break bounds cannot be found the diagram bounds
	 * Rectangle is returned.
	 */
	public static Rectangle getPageBreakBounds(DiagramEditPart dgrmEP, boolean loadedPreferences) {
		
		Rectangle pageBreakBounds = null;
		assert dgrmEP.getViewer() instanceof DiagramGraphicalViewer;
        
        
        //get the preferences in use...
        IPreferenceStore fPreferences = ((DiagramGraphicalViewer)dgrmEP.getViewer()).getWorkspaceViewerPreferenceStore();
        
        if (fPreferences.getBoolean(WorkspaceViewerProperties.PREF_USE_WORKSPACE_SETTINGS)) {
            
            //get workspace settings...
            if (dgrmEP.getDiagramPreferencesHint().getPreferenceStore() != null)
                fPreferences = (IPreferenceStore)dgrmEP.getDiagramPreferencesHint().getPreferenceStore(); 
        }
        
		RootEditPart rootEditPart = dgrmEP.getRoot();
		if (rootEditPart instanceof DiagramRootEditPart) {
			DiagramRootEditPart diagramRootEditPart = (DiagramRootEditPart) rootEditPart;
			PageBreakEditPart pageBreakEditPart = diagramRootEditPart
				.getPageBreakEditPart();

			if (pageBreakEditPart != null) {
				//resize must be called. Otherwise you get the 64 x 32 default
				pageBreakEditPart.resize(dgrmEP.getChildrenBounds());

				if (loadedPreferences) {
					//if preferences were loaded, we'll always do this for
					//consistency when printing.
					//this is necessary when printing using workspace
					//preferences, which is "if (getWorkspacePreferenceStore()
					//== fPreferences)"

					//if preferences were not loaded, we do not set the figure
					//location. we'll just leave them at defaults.
					org.eclipse.draw2d.geometry.Point p = new org.eclipse.draw2d.geometry.Point(
						fPreferences
							.getInt(WorkspaceViewerProperties.PAGEBREAK_X),
						fPreferences
							.getInt(WorkspaceViewerProperties.PAGEBREAK_Y));
					pageBreakEditPart.set(p, PageInfoHelper.getChildrenBounds(
						(DiagramEditPart) diagramRootEditPart.getContents(),
						PageBreaksFigure.class));
				}

				pageBreakBounds = pageBreakEditPart.getFigure().getBounds();
			} else {
				pageBreakBounds = dgrmEP.getFigure().getBounds();
			}
		}

		return pageBreakBounds;
	}	
}@


1.11
log
@[160731] gmf_HEAD aboyko 070921 [Printing] Compartments are printed incorrectly
@
text
@@


1.10
log
@[170493] gmf_head crevells 070313 GMF Layout service getLayoutNode() does not dispose of off-screen shells
@
text
@a14 2
import java.util.Iterator;
import java.util.List;
a18 1
import org.eclipse.gmf.runtime.common.ui.services.editor.EditorService;
d32 1
d61 1
d84 2
a85 2
        DiagramEditPart diagramEditPart =  OffscreenEditPartFactory.getInstance().createDiagramEditPart(
            diagram, shell, preferencesHint);
d87 1
a87 1
        // inter-thread messages a chance to get processed processed before we
d195 13
a207 26
		List diagramEditors = EditorService.getInstance()
			.getRegisteredEditorParts();
		Iterator it = diagramEditors.iterator();
		while (it.hasNext()) {
			Object obj = it.next();
			if (obj instanceof DiagramEditor) {
				DiagramEditor diagramEditor = (DiagramEditor) obj;

				//diagram edit part and view should not be null for an open
				// diagram
				if (id.equals(ViewUtil.getIdStr(diagramEditor
					.getDiagramEditPart().getDiagramView()))) {
					IDiagramGraphicalViewer viewer = diagramEditor
						.getDiagramGraphicalViewer();
					if (diagramEditor.getDiagramEditPart().getRoot() instanceof DiagramRootEditPart) {
						PageBreakEditPart pageBreakEditPart = ((DiagramRootEditPart)diagramEditor.getDiagramEditPart().getRoot()).getPageBreakEditPart();
						pageBreakEditPart.resize(diagramEditor.getDiagramEditPart().getChildrenBounds());
						pageBreakEditPart.updatePreferenceStore();
					}
					if (viewer instanceof DiagramGraphicalViewer) {
						DiagramGraphicalViewer diagramGraphicalViewer = (DiagramGraphicalViewer) viewer;

						//preferences loaded
						return diagramGraphicalViewer
							.getWorkspaceViewerPreferenceStore();
					}
d209 3
a211 3
					//id was equal, but we couldn't load it, so don't continue
					return null;
				}
d215 1
a215 1
		//no matching guid found
d218 1
a218 1

@


1.9
log
@[171428] gmf_head aboyko 070126 Print Preview and page breaks on the diagram are different
@
text
@d49 3
a51 3
	 * Creates a <code>DiagramEditPart</code> given the <code>Diagram</code>
	 * without opening an editor.
	 * 
d56 5
a60 1
	 */
d63 22
d86 1
a86 1
            diagram, new Shell(), preferencesHint);
d93 1
a93 1
        return diagramEditPart;
@


1.8
log
@[170332]  gmf_head gmf_head mmostafa 070112 Dangling connectors from undersized Shapes are printed
@
text
@d184 5
@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
d38 1
d59 1
a59 1
        return OffscreenEditPartFactory.getInstance().createDiagramEditPart(
d61 7
@


1.6
log
@Bugzilla#130770 gmf_head cmahoney 060307 CopyToImageUtil.createDiagramEditPart() does not set workspaces preferences or start the diagram event broker
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d222 12
a233 3
		DiagramGraphicalViewer viewer = (DiagramGraphicalViewer)dgrmEP.getViewer();
		IPreferenceStore fPreferences = viewer.getWorkspaceViewerPreferenceStore();
		
@


1.6.2.1
log
@Bugzilla#144771 gmf_R1_0_maintenance cmahoney 060717 Different diagrams do not appear in "Select Diagrams" list
Contributed by: Syed Atif Ali
@
text
@d222 3
a224 12
        
        
        //get the preferences in use...
        IPreferenceStore fPreferences = ((DiagramGraphicalViewer)dgrmEP.getViewer()).getWorkspaceViewerPreferenceStore();
        
        if (fPreferences.getBoolean(WorkspaceViewerProperties.PREF_USE_WORKSPACE_SETTINGS)) {
            
            //get workspace settings...
            if (dgrmEP.getDiagramPreferencesHint().getPreferenceStore() != null)
                fPreferences = (IPreferenceStore)dgrmEP.getDiagramPreferencesHint().getPreferenceStore(); 
        }
        
@


1.6.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.6.2.3
log
@[171428] gmf_R1_maintenance aboyko 070126 Print Preview and page breaks on the diagram are different
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2007 IBM Corporation and others.
a175 5
					if (diagramEditor.getDiagramEditPart().getRoot() instanceof DiagramRootEditPart) {
						PageBreakEditPart pageBreakEditPart = ((DiagramRootEditPart)diagramEditor.getDiagramEditPart().getRoot()).getPageBreakEditPart();
						pageBreakEditPart.resize(diagramEditor.getDiagramEditPart().getChildrenBounds());
						pageBreakEditPart.updatePreferenceStore();
					}
@


1.6.2.4
log
@[170332]  gmf_R1_0_maintenance mmostafa 070112 Dangling connectors from undersized Shapes are printed
@
text
@a37 1
import org.eclipse.swt.widgets.Display;
d58 1
a58 1
        DiagramEditPart diagramEditPart =  OffscreenEditPartFactory.getInstance().createDiagramEditPart(
a59 7
        // since some of the diagram updates are ASync we need to give the 
        // inter-thread messages a chance to get processed processed before we
        // continue; check bugzilla 170332
        while (Display.getDefault().readAndDispatch ()){
            // nothing special to do 
        }
        return diagramEditPart;
a180 5
					if (diagramEditor.getDiagramEditPart().getRoot() instanceof DiagramRootEditPart) {
						PageBreakEditPart pageBreakEditPart = ((DiagramRootEditPart)diagramEditor.getDiagramEditPart().getRoot()).getPageBreakEditPart();
						pageBreakEditPart.resize(diagramEditor.getDiagramEditPart().getChildrenBounds());
						pageBreakEditPart.updatePreferenceStore();
					}
@


1.6.2.5
log
@[170332]  gmf_R1_0_maintenance mmostafa 070112 Dangling connectors from undersized Shapes are printed
@
text
@d189 5
@


1.5
log
@Bugzilla#123313 gmf_head cmahoney 060120 Making DiagramUIPlugin, DiagramUIStatusCodes, and DiagramUIDebugOptions internal
@
text
@a20 4
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferenceStore;
import org.eclipse.swt.widgets.Shell;

d23 2
a24 1
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.IDiagramPreferenceSupport;
a31 2
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditDomain;
a34 2
import org.eclipse.gmf.runtime.diagram.ui.services.editpart.EditPartService;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
d36 3
d56 5
a60 26
	public static DiagramEditPart createDiagramEditPart(Diagram diagram, PreferencesHint preferencesHint) {

		Shell shell = new Shell();
		DiagramGraphicalViewer viewer = new DiagramGraphicalViewer();
		viewer.createControl(shell);

		DiagramEditDomain editDomain = new DiagramEditDomain(null);
		editDomain.setCommandStack(new DiagramCommandStack(editDomain));

		viewer.setEditDomain(editDomain);

		RootEditPart rootEP = EditPartService.getInstance()
			.createRootEditPart(diagram);
		if (rootEP instanceof IDiagramPreferenceSupport && preferencesHint != null) {
			((IDiagramPreferenceSupport) rootEP)
				.setPreferencesHint(preferencesHint);
		}
		viewer.setRootEditPart(rootEP);
		
		viewer.setEditPartFactory(EditPartService.getInstance());

		viewer.setContents(diagram);
		viewer.flush();

		return (DiagramEditPart) viewer.getContents();
	}
@


1.4
log
@bugzilla 112788 gmf-head sshaw 051108 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d72 1
a72 1
			.createRootEditPart();
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d40 1
a40 1
import com.ibm.xtools.notation.Diagram;
@

