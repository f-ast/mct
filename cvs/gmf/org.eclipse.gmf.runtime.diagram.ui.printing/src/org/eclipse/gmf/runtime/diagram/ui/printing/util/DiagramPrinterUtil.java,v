head	1.8;
access;
symbols
	v20081020-0700:1.8
	v20080911-1728:1.8
	v20080911-1506:1.8
	v20080722-1827:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080501-1739:1.8
	v20080425-1959:1.8
	v20080407-2250:1.7
	v20080407-0930:1.7
	v20080404-1111:1.7
	v20080328-1605:1.7
	v20080322-0000:1.7
	v20080222-1200:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070601-1400:1.6
	v20070330-1300:1.6
	v20060316-0600:1.6
	v20070208-1800:1.6
	v20070202-0200:1.4.2.2
	M4_20:1.6
	v20061218-1500:1.4.2.2
	v20061214-0000:1.6
	M3_20:1.5
	v20061117-0800:1.5
	v20061027-1200:1.4.2.2
	v20061020-1000:1.4.2.1
	v20061013-1330:1.5
	v20060919-0800:1.4.2.1
	M1_20:1.4
	v20060721-1130:1.4.2.1
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051201-1800:1.4
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.8
date	2008.04.24.14.45.40;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	6ec548109d134567;

1.7
date	2008.03.07.16.51.33;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	29ec47d172944567;

1.6
date	2006.11.23.21.11.22;	author mmostafa;	state Exp;
branches;
next	1.5;
commitid	279845660e7a4567;

1.5
date	2006.10.03.15.03.03;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.25.19.38.16;	author cmahoney;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.09.12.21.28.04;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.48.06;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.56;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.07.17.19.53.22;	author cmahoney;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2006.10.26.15.17.35;	author mmostafa;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[227373] gmf-head jbruck 080424 [Printing] Combined commit for Bug 228057 , Bug 227796 , Bug 227006 and Bug 227373
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.printing.util;

import java.util.Map;

import org.eclipse.gmf.runtime.diagram.ui.printing.internal.util.SWTDiagramPrinter;
import org.eclipse.gmf.runtime.diagram.ui.printing.internal.util.SWTDiagramPrinterHelper;
import org.eclipse.ui.IEditorPart;

/**
 * Utility for using the DiagramPrinter to print diagrams after displaying
 * a print dialog box to the user.  Diagrams are printed using the
 * DiagramPrinter and respect the settings chosen by the user in the print
 * dialog. 
 * 
 * This class now delegates its functionality to helpers that isolate out the 
 * printing via SWT printing. 
 * 
 * 
 * @@author wdiu, Wayne Diu
 */
public class DiagramPrinterUtil {

	/**
	 * Opens up the print diagrams dialog, allows the user to choose the
	 * settings, and prints.
	 * 
	 * @@param editorPart
	 *            current editor part
	 * @@param diagramMap
	 *            map of String names to Diagram objects. Should be initialized
	 *            by caller of this method. String names will show up in the
	 *            print dialog that allows the user to choose which diagrams to
	 *            print from a list.
	 * @@param diagramPrinter
	 *            the diagram printer that does the work of actually printing the diagrams
	 */
	public static void printWithSettings(IEditorPart editorPart,
			Map diagramMap, SWTDiagramPrinter diagramPrinter) {

		SWTDiagramPrinterHelper.getDiagramPrinterHelper().printWithSettings(
				editorPart, diagramMap, diagramPrinter);
	}
}@


1.7
log
@[196834] gmf-head jbruck 080307 [Printing] Multi-platform Diagram Printing
@
text
@a28 1
 * This class is subject to change/deprecation in phase 2 of the printing enhancements.
@


1.6
log
@[134767]  gmf_head mmostafa 061123 Printing: Fit to page makes the diagram too small
@
text
@d2 1
a2 1
 * Copyright (c) 2004,2006 IBM Corporation and others.
a13 4
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
d16 2
a17 22
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.printing.IPrintHelper;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupPageType;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;
import org.eclipse.gmf.runtime.diagram.ui.printing.actions.DefaultPrintActionHelper;
import org.eclipse.gmf.runtime.diagram.ui.printing.internal.DiagramPrintingDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.printing.internal.DiagramPrintingPlugin;
import org.eclipse.gmf.runtime.diagram.ui.printing.internal.DiagramPrintingStatusCodes;
import org.eclipse.gmf.runtime.diagram.ui.printing.internal.l10n.DiagramUIPrintingMessages;
import org.eclipse.gmf.runtime.diagram.ui.printing.internal.util.DiagramPrinter;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.util.Assert;
import org.eclipse.swt.printing.Printer;
import org.eclipse.swt.printing.PrinterData;
import org.eclipse.swt.widgets.Display;
a19 2
import com.ibm.icu.text.NumberFormat;

d26 5
a35 29
	 * Prints a diagram with the settings from the helper onto the printer
	 * 
	 * @@param diagramPrinter
	 *            the diagram printer that does the work of actually printing the diagrams
	 * @@param helper
	 *            IPrintHelper with the user's choice of settings
	 */
	private static void printDiagrams(DiagramPrinter diagramPrinter,
			IPrintHelper helper) {
        
        if (helper.getDlgPrintRangePages()) {
            diagramPrinter.setPrintRangePageSelection(true);
            diagramPrinter.setPrintRangePages(helper.getDlgPagesFrom(), helper.getDlgPagesTo());
            diagramPrinter.setFitToPage(false);
        }
        
		if (helper.getDlgScalePercent() == -1) {
            diagramPrinter.setColumns(helper.getDlgScaleFitToM());
			diagramPrinter.setRows(helper.getDlgScaleFitToN());
            diagramPrinter.setFitToPage(true);
		} else {
			diagramPrinter.setScaledPercent(helper.getDlgScalePercent());
            diagramPrinter.setFitToPage(false);
		}

		diagramPrinter.run();
	}

	/**
d50 1
a50 186
			Map diagramMap, DiagramPrinter diagramPrinter) {
		
		List diagramNames;
		PrinterData printerData;
		IPrintHelper helper;
        IPreferenceStore pref = null;

		try {
			Class printhelperClass = Class
				.forName(IPrintHelper.PRINT_HELPER_CLASS_NAME);
			helper = (IPrintHelper) printhelperClass.newInstance();
			diagramNames = new ArrayList(diagramMap.keySet());
            
            //get the preferences store currently in use...
            
            if (editorPart instanceof IDiagramWorkbenchPart) {
                
                IDiagramGraphicalViewer viewer = ((IDiagramWorkbenchPart)editorPart).getDiagramGraphicalViewer();
                if (viewer instanceof DiagramGraphicalViewer) {
                    
                    //default to diagram settings...
                    pref = ((DiagramGraphicalViewer) viewer)
                        .getWorkspaceViewerPreferenceStore();
                    
                    if (pref.getBoolean(WorkspaceViewerProperties.PREF_USE_WORKSPACE_SETTINGS)) {
                        
                        //get workspace settings...
                        if (((IDiagramWorkbenchPart)editorPart).getDiagramEditPart().
                                getDiagramPreferencesHint().getPreferenceStore() != null)
                            pref = (IPreferenceStore)((IDiagramWorkbenchPart)editorPart).getDiagramEditPart().
                                getDiagramPreferencesHint().getPreferenceStore(); 
                    }
                }
            }
            
            //set the preferences for the print dialog...
            if (pref != null) {
                
                //the orientation...
                helper.setDlgOrientation(pref.getBoolean(WorkspaceViewerProperties.PREF_USE_LANDSCAPE));
                
                //the paper size...
                PageSetupPageType storedPageType = PageSetupPageType.LETTER; //default value
                String strPageType = pref.getString(WorkspaceViewerProperties.PREF_PAGE_SIZE);
                for (int i=0; i<PageSetupPageType.pages.length; i++) {
                    if (strPageType.startsWith(PageSetupPageType.pages[i].getName())) {
                        storedPageType = PageSetupPageType.pages[i];
                        break;
                    }
                }
                
                if (storedPageType.getIndex() == PageSetupPageType.USER_DEFINED.getIndex()) { //user defined size
                    //get the width and height...
                    
                    NumberFormat fNumberFormat = NumberFormat.getNumberInstance();;
                    String strWidth = pref.getString(WorkspaceViewerProperties.PREF_PAGE_WIDTH);
                    String strHeight= pref.getString(WorkspaceViewerProperties.PREF_PAGE_HEIGHT);
                    double width = 0, height = 0;
                    
                    try {
                        Number num = fNumberFormat.parse(strWidth);
                        width = num.doubleValue() / 0.0394d; //convert from inches to mm
                        
                        num = fNumberFormat.parse(strHeight);
                        height = num.doubleValue() / 0.0394d;
                        
                        helper.setDlgPaperSize(PageSetupPageType.USER_DEFINED.getIndex(), width, height);
                    } 
                    catch (ParseException e) {
                        Log.warning(
                            DiagramPrintingPlugin.getInstance(),
                            DiagramPrintingStatusCodes.IGNORED_EXCEPTION_WARNING,
                            e.getMessage(),
                            e);
                    }
                }
                else
                    helper.setDlgPaperSize(storedPageType.getIndex(), 0, 0);

            }
            
			printerData = helper.openPrintDlg(diagramNames);
		}
		catch (Throwable e) {
			//if there's a problem with the fragment, try doing the default
			//this is better than nothing
			Trace.catching(
				DiagramPrintingPlugin.getInstance(),
				DiagramPrintingDebugOptions.EXCEPTIONS_CATCHING,
				DiagramPrinterUtil.class,
				e.getMessage(),
				e);
			Log.warning(
				DiagramPrintingPlugin.getInstance(),
				DiagramPrintingStatusCodes.RESOURCE_FAILURE,
				e.getMessage(),
				e);

			if (MessageDialog.openQuestion(Display.getDefault().getActiveShell(), DiagramUIPrintingMessages.DiagramPrinterUtil_DLLErrorTitle, 
				DiagramUIPrintingMessages.DiagramPrinterUtil_DLLErrorMessage_part1
				+"\n" //$NON-NLS-1$
				+DiagramUIPrintingMessages.DiagramPrinterUtil_DLLErrorMessage_part2
				+"\n" //$NON-NLS-1$
				+DiagramUIPrintingMessages.DiagramPrinterUtil_DLLErrorMessage_part3
				+"\n\n" //$NON-NLS-1$
				+DiagramUIPrintingMessages.DiagramPrinterUtil_DLLErrorMessage_part4)) { 
					DefaultPrintActionHelper.doRun(editorPart, diagramPrinter);
				}

			//do not continue
			return;
		}
		
		Assert.isNotNull(diagramNames);
		Assert.isNotNull(helper);

		if (printerData != null) { //ok pressed

			//uncomment this code for debug information
			/*if (helper.getDlgDiagramPrintRangeAll()) {
			    Trace.trace(ModelerPlugin.getInstance(), "All diagrams");
			} else if (helper.getDlgDiagramPrintRangeCurrent()) {
			    Trace.trace(ModelerPlugin.getInstance(), "Current diagram");
			} else if (helper.getDlgDiagramPrintRangeSelection()) {
			    Trace.trace(ModelerPlugin.getInstance(), "Selected diagrams");
			}
			
			if (helper.getDlgScalePercent() != -1) {
			    Trace.trace(ModelerPlugin.getInstance(), 
			        "Scale to " + helper.getDlgScalePercent() + " percent");
			} else {
			    Trace.trace(ModelerPlugin.getInstance(), 
			        "Scale to "
			            + helper.getDlgScaleFitToM()
			            + "x"
			            + helper.getDlgScaleFitToN()
			            + " pages");
			}
			
			if (helper.getDlgPrintRangeAll()) {
			    Trace.trace(ModelerPlugin.getInstance(), "All");
			}
			if (helper.getDlgPrintRangePages()) {
			    Trace.trace(ModelerPlugin.getInstance(), 
			        "Pages " + helper.getDlgPagesFrom() + " to " + helper.getDlgPagesTo());
			}
			
			Trace.trace(ModelerPlugin.getInstance(), helper.getDlgNumberOfCopies() + " copies");
			
			if (helper.getDlgCollate()) {
			    Trace.trace(ModelerPlugin.getInstance(), "Collate");
			} else {
			    Trace.trace(ModelerPlugin.getInstance(), "Do not collate");
			}*/
			
			final Printer printer = new Printer(printerData);
			
			diagramPrinter.setPrinter(printer);
			diagramPrinter.setDisplayDPI(Display.getDefault().getDPI());

			if (helper.getDlgDiagramPrintRangeCurrent()) {
				DiagramEditPart dgrmEP = ((IDiagramWorkbenchPart) editorPart).getDiagramEditPart();
				assert dgrmEP != null;
				diagramPrinter.setDiagrams(Collections.singletonList(dgrmEP.getDiagramView().getDiagram()));
			} else if (helper.getDlgDiagramPrintRangeAll()) {
				diagramPrinter.setDiagrams(diagramMap.values());
			} else if (helper.getDlgDiagramPrintRangeSelection()) {
				Object obj;
				List list = new ArrayList();
				for (int i = 0; i < diagramNames.size(); i++) {
					//is the diagram selected?
					//we are only printing the selected ones
					if (helper.isDlgDiagramSelected(i)) {
						obj = diagramMap.get(diagramNames.get(i));
						Assert.isTrue(obj instanceof Diagram);

						list.add(obj);
					}
				}
				diagramPrinter.setDiagrams(list);
			}
				
			printDiagrams(diagramPrinter, helper);

			printer.dispose();
		}
d52 2
@


1.5
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d70 1
d76 1
d79 1
@


1.4
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d14 1
d24 4
d37 1
d44 2
d66 6
a71 1

d73 2
a74 2
			diagramPrinter.setRows(helper.getDlgScaleFitToM());
			diagramPrinter.setColumns(helper.getDlgScaleFitToN());
d102 2
a103 1
		
d109 69
@


1.4.2.1
log
@Bugzilla#144448 gmf_R1_0_maintenance cmahoney 060717 Page Setup settings are not used when printing
Contributed by: Syed Atif Ali
@
text
@d2 1
a2 1
 * Copyright (c) 2004,2006 IBM Corporation and others.
a13 1
import java.text.ParseException;
a22 4
import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupPageType;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;
a31 1
import org.eclipse.jface.preference.IPreferenceStore;
a37 2
import com.ibm.icu.text.NumberFormat;

d58 1
a58 6
        
        if (helper.getDlgPrintRangePages()) {
            diagramPrinter.setPrintRangePageSelection(true);
            diagramPrinter.setPrintRangePages(helper.getDlgPagesFrom(), helper.getDlgPagesTo());
        }
        
d60 2
a61 2
            diagramPrinter.setColumns(helper.getDlgScaleFitToM());
			diagramPrinter.setRows(helper.getDlgScaleFitToN());
d89 1
a89 2
        IPreferenceStore pref = null;

a94 69
            
            //get the preferences store currently in use...
            
            if (editorPart instanceof IDiagramWorkbenchPart) {
                
                IDiagramGraphicalViewer viewer = ((IDiagramWorkbenchPart)editorPart).getDiagramGraphicalViewer();
                if (viewer instanceof DiagramGraphicalViewer) {
                    
                    //default to diagram settings...
                    pref = ((DiagramGraphicalViewer) viewer)
                        .getWorkspaceViewerPreferenceStore();
                    
                    if (pref.getBoolean(WorkspaceViewerProperties.PREF_USE_WORKSPACE_SETTINGS)) {
                        
                        //get workspace settings...
                        if (((IDiagramWorkbenchPart)editorPart).getDiagramEditPart().
                                getDiagramPreferencesHint().getPreferenceStore() != null)
                            pref = (IPreferenceStore)((IDiagramWorkbenchPart)editorPart).getDiagramEditPart().
                                getDiagramPreferencesHint().getPreferenceStore(); 
                    }
                }
            }
            
            //set the preferences for the print dialog...
            if (pref != null) {
                
                //the orientation...
                helper.setDlgOrientation(pref.getBoolean(WorkspaceViewerProperties.PREF_USE_LANDSCAPE));
                
                //the paper size...
                PageSetupPageType storedPageType = PageSetupPageType.LETTER; //default value
                String strPageType = pref.getString(WorkspaceViewerProperties.PREF_PAGE_SIZE);
                for (int i=0; i<PageSetupPageType.pages.length; i++) {
                    if (strPageType.startsWith(PageSetupPageType.pages[i].getName())) {
                        storedPageType = PageSetupPageType.pages[i];
                        break;
                    }
                }
                
                if (storedPageType.getIndex() == PageSetupPageType.USER_DEFINED.getIndex()) { //user defined size
                    //get the width and height...
                    
                    NumberFormat fNumberFormat = NumberFormat.getNumberInstance();;
                    String strWidth = pref.getString(WorkspaceViewerProperties.PREF_PAGE_WIDTH);
                    String strHeight= pref.getString(WorkspaceViewerProperties.PREF_PAGE_HEIGHT);
                    double width = 0, height = 0;
                    
                    try {
                        Number num = fNumberFormat.parse(strWidth);
                        width = num.doubleValue() / 0.0394d; //convert from inches to mm
                        
                        num = fNumberFormat.parse(strHeight);
                        height = num.doubleValue() / 0.0394d;
                        
                        helper.setDlgPaperSize(PageSetupPageType.USER_DEFINED.getIndex(), width, height);
                    } 
                    catch (ParseException e) {
                        Log.warning(
                            DiagramPrintingPlugin.getInstance(),
                            DiagramPrintingStatusCodes.IGNORED_EXCEPTION_WARNING,
                            e.getMessage(),
                            e);
                    }
                }
                else
                    helper.setDlgPaperSize(storedPageType.getIndex(), 0, 0);

            }
            
@


1.4.2.2
log
@[134767] gmf  gmf_R1_0_maintenace mmostafa 061026 Printing: Fit to page makes the diagram too small
@
text
@a69 1
            diagramPrinter.setFitToPage(false);
a74 1
            diagramPrinter.setFitToPage(true);
a76 1
            diagramPrinter.setFitToPage(false);
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a18 7
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.util.Assert;
import org.eclipse.swt.printing.Printer;
import org.eclipse.swt.printing.PrinterData;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.IEditorPart;

d28 1
a28 1
import org.eclipse.gmf.runtime.diagram.ui.printing.internal.l10n.DiagramPrintingResourceManager;
d31 6
d112 2
a113 2
			if (MessageDialog.openQuestion(Display.getDefault().getActiveShell(), DiagramPrintingResourceManager.getI18NString("DiagramPrinterUtil.DLLErrorTitle"), //$NON-NLS-1$
				DiagramPrintingResourceManager.getI18NString("DiagramPrinterUtil.DLLErrorMessage.part1") //$NON-NLS-1$
d115 1
a115 1
				+DiagramPrintingResourceManager.getI18NString("DiagramPrinterUtil.DLLErrorMessage.part2") //$NON-NLS-1$
d117 1
a117 1
				+DiagramPrintingResourceManager.getI18NString("DiagramPrinterUtil.DLLErrorMessage.part3") //$NON-NLS-1$
d119 1
a119 1
				+DiagramPrintingResourceManager.getI18NString("DiagramPrinterUtil.DLLErrorMessage.part4"))) { //$NON-NLS-1$
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d35 1
a35 1
import com.ibm.xtools.notation.Diagram;
@

