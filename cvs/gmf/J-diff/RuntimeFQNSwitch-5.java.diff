13a14
> import java.util.Arrays;
18,21d18
< import org.eclipse.gmf.common.codegen.ImportAssistant;
< import org.eclipse.gmf.gmfgraph.BorderLayout;
< import org.eclipse.gmf.gmfgraph.CustomClass;
< import org.eclipse.gmf.gmfgraph.Ellipse;
23c20
< import org.eclipse.gmf.gmfgraph.FlowLayout;
---
> import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
27,30d23
< import org.eclipse.gmf.gmfgraph.LabeledContainer;
< import org.eclipse.gmf.gmfgraph.Polygon;
< import org.eclipse.gmf.gmfgraph.PolygonDecoration;
< import org.eclipse.gmf.gmfgraph.Polyline;
32,37d24
< import org.eclipse.gmf.gmfgraph.PolylineDecoration;
< import org.eclipse.gmf.gmfgraph.Rectangle;
< import org.eclipse.gmf.gmfgraph.RoundedRectangle;
< import org.eclipse.gmf.gmfgraph.StackLayout;
< import org.eclipse.gmf.gmfgraph.XYLayout;
< import org.eclipse.gmf.gmfgraph.XYLayoutData;
39a27
>  * FQNSwitch to use with figures utilizing power of GMF Runtime
41d28
<  *
43c30
< public class RuntimeFQNSwitch extends GMFGraphSwitch implements FigureQualifiedNameSwitch {
---
> public class RuntimeFQNSwitch extends PureGEFFigureQualifiedNameSwitch {
45,58c32,33
< 	public String get(EObject gmfgraphObject) {
< 		return (String) doSwitch(gmfgraphObject);
< 	}
< 
< 	public String get(EObject gmfgraphObject, ImportAssistant importManager) {
< 		return importManager.getImportedName(get(gmfgraphObject));
< 	}
< 
< 	public String[] getDependencies(FigureGallery gallery) {
< 		return (String[]) caseFigureGallery(gallery);
< 	}
< 
< 	public Object caseFigureGallery(FigureGallery gallery) {
< 		final String pluginBasicDraw2d = "org.eclipse.draw2d"; //$NON-NLS-1$
---
> 	protected void collectDependencies(FigureGallery gallery, UniqueEList result) {
> 		super.collectDependencies(gallery, result);
60,62c35,36
< 		UniqueEList rv = new UniqueEList();
< 		if (usesDraw2dFigures(gallery)) {
< 			rv.add(pluginBasicDraw2d);
---
> 		if (usesEClassWithID(gallery, new int[] {GMFGraphPackage.POLYLINE_CONNECTION, GMFGraphPackage.LABEL})) {
> 			result.add(pluginRuntimeDraw2d);
64,70d37
< 		if (usesPolylineConnections(gallery)) {
< 			rv.add(pluginRuntimeDraw2d);
< 		}
< 		if (gallery.getImplementationBundle() != null){
< 			rv.add(gallery.getImplementationBundle());
< 		}
< 		return rv.toArray(new String[rv.size()]);
73c40,43
< 	private boolean usesPolylineConnections(FigureGallery gallery) {
---
> 	private boolean usesEClassWithID(FigureGallery gallery, int[] ids) {
> 		// Perhaps, EcoreUtil.getAllContents(gallery, false) would be better - 
> 		// - e.g. if eClass().getClassifierID() works for proxies?
> 		Arrays.sort(ids);
75,76c45,47
< 			// XXX switch eClass().getClassifierID()?
< 			if (it.next() instanceof PolylineConnection) {
---
> 			Object next = it.next();
> 			assert next instanceof EObject;
> 			if (Arrays.binarySearch(ids, ((EObject) next).eClass().getClassifierID()) >= 0) {
83,91d53
< 	private boolean usesDraw2dFigures(FigureGallery gallery) {
< 		// assume draw2d always used
< 		return !gallery.getFigures().isEmpty();
< 	}
< 
< 	public Object caseCustomClass(CustomClass object) {
< 		return object.getQualifiedClassName();
< 	}
< 
100,117c62,63
< 	public Object caseFlowLayout(FlowLayout object) {
< 		return object.isForceSingleLine() ? "org.eclipse.draw2d.ToolbarLayout" : "org.eclipse.draw2d.FlowLayout";
< 	}
< 	
< 	public Object caseXYLayout(XYLayout object) {
< 		return "org.eclipse.draw2d.XYLayout";
< 	}
< 	
< 	public Object caseXYLayoutData(XYLayoutData object) {
< 		return "org.eclipse.draw2d.geometry.Rectangle";
< 	}
< 	
< 	public Object caseStackLayout(StackLayout object) {
< 		return "org.eclipse.draw2d.StackLayout";
< 	}
< 
< 	public Object caseBorderLayout(BorderLayout object) {
< 		return "org.eclipse.draw2d.BorderLayout";
---
> 	public Object casePolylineConnection(PolylineConnection object) {
> 		return "org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx"; //$NON-NLS-1$
121,157c67
< 		return "org.eclipse.draw2d.Label"; //$NON-NLS-1$
< 	}
< 
< 	public Object caseLabeledContainer(LabeledContainer object) {
< 		return "org.eclipse.draw2d.LabeledContainer"; //$NON-NLS-1$
< 	}
< 
< 	public Object caseRectangle(Rectangle object) {
< 		return "org.eclipse.draw2d.RectangleFigure"; //$NON-NLS-1$
< 	}
< 
< 	public Object caseRoundedRectangle(RoundedRectangle object) {
< 		return "org.eclipse.draw2d.RoundedRectangle"; //$NON-NLS-1$
< 	}
< 
< 	public Object caseEllipse(Ellipse object) {
< 		return "org.eclipse.draw2d.Ellipse"; //$NON-NLS-1$
< 	}
< 
< 	public Object casePolygon(Polygon object) {
< 		return "org.eclipse.draw2d.Polygon"; //$NON-NLS-1$
< 	}
< 
< 	public Object casePolygonDecoration(PolygonDecoration object) {
< 		return "org.eclipse.draw2d.PolygonDecoration"; //$NON-NLS-1$
< 	}
< 
< 	public Object casePolyline(Polyline object) {
< 		return "org.eclipse.draw2d.Polyline"; //$NON-NLS-1$
< 	}
< 
< 	public Object casePolylineDecoration(PolylineDecoration object) {
< 		return "org.eclipse.draw2d.PolylineDecoration"; //$NON-NLS-1$
< 	}
< 
< 	public Object casePolylineConnection(PolylineConnection object) {
< 		return "org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx"; //$NON-NLS-1$
---
> 		return "org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"; //$NON-NLS-1$
