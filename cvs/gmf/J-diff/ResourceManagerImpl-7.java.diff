13a14,15
> import java.util.Map;
> import java.util.TreeMap;
21a24,25
> 	private final Map<String, XtendResource> cachedXtend = new TreeMap<String, XtendResource>();
> 	private final Map<String, XpandResource> cachedXpand = new TreeMap<String, XpandResource>();
25a30,32
> 			if (hasCachedXtend(fullyQualifiedName)) {
> 				return cachedXtend.get(fullyQualifiedName);
> 			}
28c35,40
< 			return loadXtendResource(r, fullyQualifiedName);
---
> 			final XtendResource loaded = loadXtendResource(r, fullyQualifiedName);
> 			assert loaded != null; // this is the contract of loadXtendResource
> 			if (shouldCache()) {
> 				cachedXtend.put(fullyQualifiedName, loaded);
> 			}
> 			return loaded;
47a60,62
> 			if (hasCachedXpand(fullyQualifiedName)) {
> 				return cachedXpand.get(fullyQualifiedName);
> 			}
50c65,70
< 			return loadXpandResource(r, fullyQualifiedName);
---
> 			final XpandResource loaded = loadXpandResource(r, fullyQualifiedName);
> 			assert loaded != null; // this is the contract of loadXpandResource
> 			if (shouldCache()) {
> 				cachedXpand.put(fullyQualifiedName, loaded);
> 			}
> 			return loaded;
112a133,151
> 
> 	protected abstract boolean shouldCache();
> 
> 	protected final boolean hasCachedXpand(String fullyQualifiedName) {
> 		return shouldCache() && cachedXpand.containsKey(fullyQualifiedName);
> 	}
> 	protected final boolean hasCachedXtend(String fullyQualifiedName) {
> 		return shouldCache() && cachedXtend.containsKey(fullyQualifiedName);
> 	}
> 	protected final void forgetCachedXpand(String fullyQualifiedName) {
> 		cachedXpand.remove(fullyQualifiedName);
> 	}
> 	protected final void forgetCachedXtend(String fullyQualifiedName) {
> 		cachedXtend.remove(fullyQualifiedName);
> 	}
> 	protected final void forgetAll() {
> 		cachedXpand.clear();
> 		cachedXtend.clear();
> 	}
