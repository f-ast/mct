15a16
> import org.eclipse.draw2d.ColorConstants;
49,50c50
< 	private RenderingListenerImpl renderingListener = new RenderingListenerImpl(
< 		this);
---
> 	private RenderingListenerImpl renderingListener = new RenderingListenerImpl();
52c52
< 	static private class RenderingListenerImpl
---
> 	private class RenderingListenerImpl
55,57c55
< 		private ScalableImageFigure fig;
< 
< 		public RenderingListenerImpl(ScalableImageFigure fig) {
---
> 		public RenderingListenerImpl() {
59d56
< 			this.fig = fig;
62,63c59,60
< 		/**
< 		 * @return <code>IFigure</code> that the listener wraps
---
> 		/* (non-Javadoc)
> 		 * @see org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderingListener#paintFigureWhileRendering(org.eclipse.draw2d.Graphics)
65,66c62,63
< 		public ScalableImageFigure getFigure() {
< 			return fig;
---
> 		public void paintFigureWhileRendering(Graphics g) {
> 			ScalableImageFigure.this.paintFigureWhileRendering(g);
75,77c72,74
< 			if (getFigure().getParent() != null) {
< 				getFigure().setRenderedImage(rndImg);
< 				getFigure().repaint();
---
> 			if (ScalableImageFigure.this.getParent() != null) {
> 				ScalableImageFigure.this.setRenderedImage(rndImg);
> 				ScalableImageFigure.this.repaint();
80a78,84
> 		/**
> 		 * @return <code>IFigure</code> that the listener wraps
> 		 */
> 		public ScalableImageFigure getFigure() {
> 			return ScalableImageFigure.this;
> 		}
> 		
101c105
< 			return getFigure().hashCode();
---
> 			return ScalableImageFigure.this.hashCode();
327a332,353
> 	/**
> 	 * If the rendering is occuring on a separate thread, this method is a hook to draw a temporary
> 	 * image onto the drawing surface.
> 	 * 
> 	 * @param g the <code>Graphics</code> object to paint the temporary image to
> 	 */
> 	protected void paintFigureWhileRendering(Graphics g) {
> 		Rectangle area = getClientArea().getCopy();
> 		
> 		g.pushState();
> 		g.setBackgroundColor(ColorConstants.white);
> 		g.fillRectangle(area.x, area.y, area.width - 1, area.height - 1);
> 		g.setForegroundColor(ColorConstants.red);
> 		g.drawRectangle(area.x, area.y, area.width - 1, area.height - 1);
> 		g.setLineStyle(SWT.LINE_DOT);
> 		g.drawLine(area.x, area.y, area.x + area.width, area.y
> 			+ area.height);
> 		g.drawLine(area.x + area.width, area.y, area.x, area.y
> 			+ area.height);
> 		g.popState();
> 	}
> 	
