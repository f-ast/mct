20d19
< import org.eclipse.emf.ecore.EAttribute;
23d21
< import org.eclipse.emf.ecore.EDataType;
30d27
< import org.eclipse.emf.ecore.resource.Resource;
47,49d43
< 	private Map<EClass, Map<String, EStructuralFeature>> myTracedHierarchyFeatures = new HashMap<EClass, Map<String, EStructuralFeature>>();
< 	private Map<EClass, Map<String, EStructuralFeature>> myTracedHierarchyAttributes = new HashMap<EClass, Map<String, EStructuralFeature>>();
< 	private Resource myResource;
68,102c62
< 	private void registerRenamedAttribute(EClass eClass, String oldName, EStructuralFeature newStructuralFeature) {
< 		Map<String, EStructuralFeature> renamedAttributes = myRenamedAttributes.get(eClass);
< 		if (renamedAttributes == null) {
< 			renamedAttributes = new HashMap<String, EStructuralFeature>();
< 		}
< 		renamedAttributes.put(oldName, newStructuralFeature);
< 		registerRenamedAttributes(eClass, renamedAttributes);
< 	}
< 	
< 	/**
< 	 * Traced feature is a feature you use through the hierarchy as a marker, catching it in setValue and notifying of
< 	 * whether migration has happened or not
< 	 */
< 	public void registerTracedFeatureForHierarchy(EClass eClass, String xmlName, EStructuralFeature tracerFeature) {
< 		registerTracedElementForHierarchy(eClass, xmlName, tracerFeature);
< 		registerTracedAttributeForHierarchy(eClass, xmlName, tracerFeature);
< 	}
< 	
< 	public void registerTracedAttributeForHierarchy(EClass eClass, String xmlName, EStructuralFeature tracerFeature) {
< 		Map<String, EStructuralFeature> tracedFeatures = myTracedHierarchyAttributes.get(eClass);
< 		if (tracedFeatures == null) {
< 			myTracedHierarchyAttributes.put(eClass, tracedFeatures = new HashMap<String, EStructuralFeature>());
< 		}
< 		tracedFeatures.put(xmlName, tracerFeature);
< 	}
< 	
< 	private void registerTracedElementForHierarchy(EClass eClass, String xmlName, EStructuralFeature tracerFeature) {
< 		Map<String, EStructuralFeature> tracedFeatures = myTracedHierarchyFeatures.get(eClass);
< 		if (tracedFeatures == null) {
< 			myTracedHierarchyFeatures.put(eClass, tracedFeatures = new HashMap<String, EStructuralFeature>());
< 		}
< 		tracedFeatures.put(xmlName, tracerFeature);
< 	}
< 	
< 	public boolean isAttributeDeleted(EClass clazz, String name) {
---
> 	private boolean isAttributeDeleted(EClass clazz, String name) {
121,140d80
< 	public EStructuralFeature getTracedParentFeatureFor(EClass clazz, String name) {
< 	    Map<String, EStructuralFeature> tracings = myTracedHierarchyFeatures.get(clazz);
< 	    EStructuralFeature result = tracings != null ? tracings.get(name) : null;
< 		for (Iterator<EClass> it=clazz.getEAllSuperTypes().iterator(); result == null && it.hasNext();) {
< 			EClass nextParent = it.next();
< 			result = getTracedParentFeatureFor(nextParent, name);
< 		}
< 		return result;
< 	}
< 	
< 	public EStructuralFeature getTracedParentAttributeFor(EClass clazz, String name) {
< 	    Map<String, EStructuralFeature> tracings = myTracedHierarchyAttributes.get(clazz);
< 	    EStructuralFeature result = tracings != null ? tracings.get(name) : null;
< 		for (Iterator<EClass> it=clazz.getEAllSuperTypes().iterator(); result == null && it.hasNext();) {
< 			EClass nextParent = it.next();
< 			result = getTracedParentAttributeFor(nextParent, name);
< 		}
< 		return result;
< 	}
< 	
158,165d97
< 		} else if (isElement && (rename = getTracedParentFeatureFor(eClass, name)) != null) {
< 			result = rename;
< 			// if somebody has provided a feature to trace, it is his own business to notify us of whether 
< 			// a migration is required and has happened, cause it is not necessary that anything has been actually changed.
< 		} else if (!isElement && (rename = getTracedParentAttributeFor(eClass, name)) != null) {
< 			result = rename;
< 			// if somebody has provided a feature to trace, it is his own business to notify us of whether 
< 			// a migration is required and has happened, cause it is not necessary that anything has been actually changed.
184,187d115
< 	public EObject createObject(EFactory factory, EClassifier type) {
< 		return null;
< 	}
< 	
191,197d118
< 	public void processObject(EObject result) {
< 	}
< 
< 	public boolean setManyReference(EObject object, EStructuralFeature feature, Object[] values) {
< 		return false;
< 	}
< 	
220,243d140
< 	protected static EAttribute createNewAttribute(String name, EDataType eType, boolean isMany) {
< 		return createNewAttribute(name, eType, isMany, false);
< 	}
< 	
< 	protected static EAttribute createNewAttribute(String name, EDataType eType, boolean isMany, boolean isObligatory) {
< 		EAttribute attr = EcoreFactory.eINSTANCE.createEAttribute();
< 		attr.setName(name);
< 		attr.setEType(eType);
< 		attr.setLowerBound(isObligatory ? 1 : 0);
< 		attr.setUpperBound(isMany ? -1 : 1);
< 		return attr;
< 	}
< 
< 	public void setResource(Resource resource) {
< 		myResource = resource;
< 	}
< 	
< 	protected Resource getResource() {
< 		return myResource;
< 	}
< 
< 	public void postLoad(){
< 	}
< 
