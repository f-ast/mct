23,24c23,24
< import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;
< import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
---
> import org.eclipse.gef.commands.CompoundCommand;
> import org.eclipse.gef.commands.UnexecutableCommand;
33d32
< import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
945,953d943
< 	 * Applies changes to all pages in the dialog
< 	 */
< 	public boolean performOk() {
< 		if (sortChanged || filterChanged)
< 			performApply();
< 		return true;
< 	}
< 
< 	/**
958d947
< 		if (pageType == CHILD_PAGE) {
969,1011d957
< 		} else if (pageType == ROOT_PAGE) {
< 
< 			PreferenceManager preferenceManager =
< 				((SortFilterDialog) getContainer()).getPreferenceManager();
< 			Iterator nodes =
< 				preferenceManager
< 					.getElements(PreferenceManager.PRE_ORDER)
< 					.iterator();
< 			SortFilterRootPreferenceNode rootNode = null;
< 			CompositeTransactionalCommand cc = new CompositeTransactionalCommand(
<                 editPart.getEditingDomain(),
<                 DiagramUIMessages.Command_SortFilterCommand);
<             while (nodes.hasNext()) {
< 				PreferenceNode node = (PreferenceNode) nodes.next();
< 				SortFilterPage page = (SortFilterPage) node.getPage();
< 				if (page == this) {
< 					rootNode = (SortFilterRootPreferenceNode) node;
< 					continue;
< 				}
< 
< 				// We must build the page if it is already not done because each
< 				// page
< 				// in the dialog knows how to filter itself.
< 				((SortFilterDialog) rootNode.getPreferenceDialog()).showPage(
< 					node);
< 
< 				// We set the child's filter criteria to the root's
< 				// criteria if the child is using the same filtering criteria.
< 				if (compareFilters(page.getFilterList())) {
< 					page.setFilterCriteria(filters.getItems());
< 					page.setCriteria(filterList.getItems());
< 					page.filterItemsFromList();
< 				}
< 				
< 				
< 				//page.performApply();
< 				
< 				cc.compose(new CommandProxy(page.getApplyCommand()));
< 			}
< 			
< 			editPart.getRoot().getViewer().getEditDomain().getCommandStack()
< 				.execute(new ICommandProxy(cc));
< 		}
1019a966
> 		if (pageType == CHILD_PAGE) {
1060a1008,1043
> 		} else if (pageType == ROOT_PAGE) {
> 			PreferenceManager preferenceManager =
> 				((SortFilterDialog) getContainer()).getPreferenceManager();
> 			Iterator nodes =
> 				preferenceManager
> 					.getElements(PreferenceManager.PRE_ORDER)
> 					.iterator();
> 			SortFilterRootPreferenceNode rootNode = null;
> 			CompoundCommand cc = new CompoundCommand(
> 	            DiagramUIMessages.Command_SortFilterCommand);
> 	        while (nodes.hasNext()) {
> 				PreferenceNode node = (PreferenceNode) nodes.next();
> 				SortFilterPage page = (SortFilterPage) node.getPage();
> 				if (page == this) {
> 					rootNode = (SortFilterRootPreferenceNode) node;
> 					continue;
> 				}
> 	
> 				// We must build the page if it is already not done because each
> 				// page
> 				// in the dialog knows how to filter itself.
> 				((SortFilterDialog) rootNode.getPreferenceDialog()).showPage(
> 					node);
> 	
> 				// We set the child's filter criteria to the root's
> 				// criteria if the child is using the same filtering criteria.
> 				if (compareFilters(page.getFilterList())) {
> 					page.setFilterCriteria(filters.getItems());
> 					page.setCriteria(filterList.getItems());
> 					page.filterItemsFromList();
> 				}				
> 				cc.add(page.getApplyCommand());
> 			}
> 	        return cc;
> 		}
> 		return UnexecutableCommand.INSTANCE;
1409a1393,1404
> 	/**
> 	 * Creates the command that needs to be executed for this page when "Ok" is
> 	 * pressed. It's different from {@link #getApplyCommand()}, because it checks
> 	 * whether the page is dirty or not.
> 	 * @return <code>Command</code> to be executed per this page
> 	 */
> 	public Command getCommand() {
> 		if (filterChanged || sortChanged)
> 			return getApplyCommand();
> 		return null;
> 	}
> 	
