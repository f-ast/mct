27a28
> import org.eclipse.gmf.gmfgraph.DiagramLabel;
32a34
> import org.eclipse.gmf.gmfgraph.Label;
46a49
> import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelEditPart;
52a56,58
> import org.eclipse.gmf.graphdef.editor.edit.parts.Label2EditPart;
> import org.eclipse.gmf.graphdef.editor.edit.parts.Label3EditPart;
> import org.eclipse.gmf.graphdef.editor.edit.parts.LabelEditPart;
154a161,163
> 			if (visualID == Label2EditPart.VISUAL_ID) {
> 				result.add(new GMFGraphNodeDescriptor(childElement, visualID));
> 			}
190a200,203
> 			if (visualID == LabelEditPart.VISUAL_ID) {
> 				result.add(new GMFGraphNodeDescriptor(childElement, visualID));
> 				continue;
> 			}
226a240,243
> 			if (visualID == LabelEditPart.VISUAL_ID) {
> 				result.add(new GMFGraphNodeDescriptor(childElement, visualID));
> 				continue;
> 			}
262a280,283
> 			if (visualID == LabelEditPart.VISUAL_ID) {
> 				result.add(new GMFGraphNodeDescriptor(childElement, visualID));
> 				continue;
> 			}
298a320,323
> 			if (visualID == LabelEditPart.VISUAL_ID) {
> 				result.add(new GMFGraphNodeDescriptor(childElement, visualID));
> 				continue;
> 			}
374a400,403
> 			if (visualID == LabelEditPart.VISUAL_ID) {
> 				result.add(new GMFGraphNodeDescriptor(childElement, visualID));
> 				continue;
> 			}
410a440,443
> 			if (visualID == LabelEditPart.VISUAL_ID) {
> 				result.add(new GMFGraphNodeDescriptor(childElement, visualID));
> 				continue;
> 			}
486a520,523
> 			if (visualID == LabelEditPart.VISUAL_ID) {
> 				result.add(new GMFGraphNodeDescriptor(childElement, visualID));
> 				continue;
> 			}
522a560,563
> 			if (visualID == LabelEditPart.VISUAL_ID) {
> 				result.add(new GMFGraphNodeDescriptor(childElement, visualID));
> 				continue;
> 			}
558a600,603
> 			if (visualID == LabelEditPart.VISUAL_ID) {
> 				result.add(new GMFGraphNodeDescriptor(childElement, visualID));
> 				continue;
> 			}
646a692,695
> 			if (visualID == Label3EditPart.VISUAL_ID) {
> 				result.add(new GMFGraphNodeDescriptor(childElement, visualID));
> 				continue;
> 			}
691a741,748
> 		for (Iterator it = modelElement.getLabels().iterator(); it.hasNext();) {
> 			DiagramLabel childElement = (DiagramLabel) it.next();
> 			int visualID = GMFGraphVisualIDRegistry.getNodeVisualID(view, childElement);
> 			if (visualID == DiagramLabelEditPart.VISUAL_ID) {
> 				result.add(new GMFGraphNodeDescriptor(childElement, visualID));
> 				continue;
> 			}
> 		}
709a767,768
> 		case DiagramLabelEditPart.VISUAL_ID:
> 			return getDiagramLabel_2009ContainedLinks(view);
725a785,786
> 		case LabelEditPart.VISUAL_ID:
> 			return getLabel_3026ContainedLinks(view);
733a795,796
> 		case Label2EditPart.VISUAL_ID:
> 			return getLabel_3027ContainedLinks(view);
743a807,808
> 		case Label3EditPart.VISUAL_ID:
> 			return getLabel_3028ContainedLinks(view);
762a828,829
> 		case DiagramLabelEditPart.VISUAL_ID:
> 			return getDiagramLabel_2009IncomingLinks(view);
778a846,847
> 		case LabelEditPart.VISUAL_ID:
> 			return getLabel_3026IncomingLinks(view);
786a856,857
> 		case Label2EditPart.VISUAL_ID:
> 			return getLabel_3027IncomingLinks(view);
796a868,869
> 		case Label3EditPart.VISUAL_ID:
> 			return getLabel_3028IncomingLinks(view);
815a889,890
> 		case DiagramLabelEditPart.VISUAL_ID:
> 			return getDiagramLabel_2009OutgoingLinks(view);
831a907,908
> 		case LabelEditPart.VISUAL_ID:
> 			return getLabel_3026OutgoingLinks(view);
839a917,918
> 		case Label2EditPart.VISUAL_ID:
> 			return getLabel_3027OutgoingLinks(view);
849a929,930
> 		case Label3EditPart.VISUAL_ID:
> 			return getLabel_3028OutgoingLinks(view);
904a986,997
> 	public static List getDiagramLabel_2009ContainedLinks(View view) {
> 		DiagramLabel modelElement = (DiagramLabel) view.getElement();
> 		List result = new LinkedList();
> 		result.addAll(getOutgoingFeatureModelFacetLinks_DiagramLabel_Accessor_4004(modelElement));
> 		result.addAll(getOutgoingFeatureModelFacetLinks_Node_ContentPane_4006(modelElement));
> 		result.addAll(getOutgoingFeatureModelFacetLinks_DiagramElement_Figure_4005(modelElement));
> 		return result;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
963a1057,1063
> 	public static List getLabel_3026ContainedLinks(View view) {
> 		return Collections.EMPTY_LIST;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
991a1092,1098
> 	public static List getLabel_3027ContainedLinks(View view) {
> 		return Collections.EMPTY_LIST;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
1026a1134,1140
> 	public static List getLabel_3028ContainedLinks(View view) {
> 		return Collections.EMPTY_LIST;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
1061a1176,1182
> 	public static List getDiagramLabel_2009IncomingLinks(View view) {
> 		return Collections.EMPTY_LIST;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
1145a1267,1277
> 	public static List getLabel_3026IncomingLinks(View view) {
> 		Label modelElement = (Label) view.getElement();
> 		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
> 		List result = new LinkedList();
> 		result.addAll(getIncomingTypeModelFacetLinks_ChildAccess_4002(modelElement, crossReferences));
> 		return result;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
1189a1322,1332
> 	public static List getLabel_3027IncomingLinks(View view) {
> 		Label modelElement = (Label) view.getElement();
> 		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
> 		List result = new LinkedList();
> 		result.addAll(getIncomingTypeModelFacetLinks_ChildAccess_4002(modelElement, crossReferences));
> 		return result;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
1244a1388,1398
> 	public static List getLabel_3028IncomingLinks(View view) {
> 		Label modelElement = (Label) view.getElement();
> 		Map crossReferences = EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
> 		List result = new LinkedList();
> 		result.addAll(getIncomingTypeModelFacetLinks_ChildAccess_4002(modelElement, crossReferences));
> 		return result;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
1296a1451,1462
> 	public static List getDiagramLabel_2009OutgoingLinks(View view) {
> 		DiagramLabel modelElement = (DiagramLabel) view.getElement();
> 		List result = new LinkedList();
> 		result.addAll(getOutgoingFeatureModelFacetLinks_DiagramLabel_Accessor_4004(modelElement));
> 		result.addAll(getOutgoingFeatureModelFacetLinks_Node_ContentPane_4006(modelElement));
> 		result.addAll(getOutgoingFeatureModelFacetLinks_DiagramElement_Figure_4005(modelElement));
> 		return result;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
1355a1522,1528
> 	public static List getLabel_3026OutgoingLinks(View view) {
> 		return Collections.EMPTY_LIST;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
1383a1557,1563
> 	public static List getLabel_3027OutgoingLinks(View view) {
> 		return Collections.EMPTY_LIST;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
1418a1599,1605
> 	public static List getLabel_3028OutgoingLinks(View view) {
> 		return Collections.EMPTY_LIST;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
1543a1731,1743
> 	private static Collection getOutgoingFeatureModelFacetLinks_DiagramLabel_Accessor_4004(DiagramLabel source) {
> 		Collection result = new LinkedList();
> 		ChildAccess destination = source.getAccessor();
> 		if (destination == null) {
> 			return result;
> 		}
> 		result.add(new GMFGraphLinkDescriptor(source, destination, GMFGraphElementTypes.DiagramLabelAccessor_4004, DiagramLabelAccessorEditPart.VISUAL_ID));
> 		return result;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
