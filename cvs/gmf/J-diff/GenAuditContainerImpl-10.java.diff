9d8
< import java.util.ArrayList;
11,16d9
< import java.util.HashMap;
< import java.util.HashSet;
< import java.util.Iterator;
< import java.util.List;
< import java.util.Map;
< import java.util.Set;
20d12
< import org.eclipse.emf.common.util.BasicEList;
25,26c17,20
< import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
< import org.eclipse.emf.ecore.util.EcoreUtil;
---
> import org.eclipse.emf.ecore.impl.EObjectImpl;
> 
> import org.eclipse.emf.ecore.util.EObjectResolvingEList;
> import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;
27a22
> 
29a25,26
> import org.eclipse.gmf.codegen.gmfgen.GenAuditRoot;
> 
31,35d27
< import org.eclipse.gmf.codegen.gmfgen.GenDiagramElementTarget;
< import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
< import org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider;
< import org.eclipse.gmf.codegen.gmfgen.GenNotationElementTarget;
< import org.eclipse.gmf.codegen.gmfgen.GenRuleTarget;
43a36
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditContainerImpl#getRoot <em>Root</em>}</li>
47c40
<  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditContainerImpl#getParentContainer <em>Parent Container</em>}</li>
---
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditContainerImpl#getPath <em>Path</em>}</li>
49d41
<  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditContainerImpl#getChildContainers <em>Child Containers</em>}</li>
55c47
< public class GenAuditContainerImpl extends GenRuleContainerBaseImpl implements GenAuditContainer {
---
> public class GenAuditContainerImpl extends EObjectImpl implements GenAuditContainer {
117c109
< 	 * The cached value of the '{@link #getAudits() <em>Audits</em>}' containment reference list.
---
> 	 * The cached value of the '{@link #getPath() <em>Path</em>}' reference list.
120c112
< 	 * @see #getAudits()
---
> 	 * @see #getPath()
124c116
< 	protected EList audits = null;
---
> 	protected EList path = null;
127c119
< 	 * The cached value of the '{@link #getChildContainers() <em>Child Containers</em>}' containment reference list.
---
> 	 * The cached value of the '{@link #getAudits() <em>Audits</em>}' reference list.
130c122
< 	 * @see #getChildContainers()
---
> 	 * @see #getAudits()
134c126
< 	protected EList childContainers = null;
---
> 	protected EList audits = null;
159,175c151,153
< 	public EList getAudits() {
< 		if (audits == null) {
< 			audits = new EObjectContainmentWithInverseEList(GenAuditRule.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GMFGenPackage.GEN_AUDIT_RULE__CONTAINER);
< 		}
< 		return audits;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public EList getChildContainers() {
< 		if (childContainers == null) {
< 			childContainers = new EObjectContainmentWithInverseEList(GenAuditContainer.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS, GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER);
< 		}
< 		return childContainers;
---
> 	public GenAuditRoot getRoot() {
> 		if (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT) return null;
> 		return (GenAuditRoot)eContainer();
246,306d223
< 	public GenAuditContainer getParentContainer() {
< 		if (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER) return null;
< 		return (GenAuditContainer)eContainer();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public NotificationChain basicSetParentContainer(GenAuditContainer newParentContainer, NotificationChain msgs) {
< 		msgs = eBasicSetContainer((InternalEObject)newParentContainer, GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER, msgs);
< 		return msgs;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public void setParentContainer(GenAuditContainer newParentContainer) {
< 		if (newParentContainer != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER && newParentContainer != null)) {
< 			if (EcoreUtil.isAncestor(this, newParentContainer))
< 				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
< 			NotificationChain msgs = null;
< 			if (eInternalContainer() != null)
< 				msgs = eBasicRemoveFromContainer(msgs);
< 			if (newParentContainer != null)
< 				msgs = ((InternalEObject)newParentContainer).eInverseAdd(this, GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS, GenAuditContainer.class, msgs);
< 			msgs = basicSetParentContainer(newParentContainer, msgs);
< 			if (msgs != null) msgs.dispatch();
< 		}
< 		else if (eNotificationRequired())
< 			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER, newParentContainer, newParentContainer));
< 	}
< 
< 		/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public EList getAllAuditRules() {
< 		return getAllRulesInContainer(this, new BasicEList());
< 	}
< 	
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public EList getAllAuditContainers() {
< 		EList containerList = new BasicEList();
< 		containerList.add(this);
< 		return getAllChildContainers(this, containerList);
< 	}
< 		
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
308,336c225,226
< 		GenAuditContainer parent = this;
< 		EList elements = new BasicEList();
< 		while(parent != null) {
< 			elements.add(0, parent);
< 			parent = parent.getParentContainer();
< 		}
< 		return elements;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public Map getAllRulesToTargetContextMap() {
< 		HashMap ctx2ruleMap = new HashMap();
< 		EList allRules = getAllAuditRules();
< 		for (Iterator it = allRules.iterator(); it.hasNext();) {
< 			GenAuditRule nextRule = (GenAuditRule) it.next();
< 			String key = (nextRule.getTarget() != null) ? nextRule.getTarget().getClientContextID() : null;
< 			if(key != null) {
< 				List rulesInCtx = null;
< 				if(ctx2ruleMap.containsKey(key)) {
< 					rulesInCtx = (List)ctx2ruleMap.get(key);
< 				} else {
< 					rulesInCtx = new BasicEList();
< 					ctx2ruleMap.put(key, rulesInCtx);
< 				}
< 				rulesInCtx.add(nextRule);
---
> 		if (path == null) {
> 			path = new EObjectResolvingEList(GenAuditContainer.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__PATH);
338,339c228
< 		}
< 		return ctx2ruleMap;
---
> 		return path;
345,417c234
< 	 * @generated NOT
< 	 */
< 	public EList getAllTargetedModelPackages() {
< 		Set packages = new HashSet();
< 		EList allRules = getAllAuditRules();
< 		for (Iterator it = allRules.iterator(); it.hasNext();) {
< 			GenAuditRule nextRule = (GenAuditRule) it.next();
< 			if(nextRule.getTarget() != null && nextRule.getTarget().getTargetClass() != null) {
< 				packages.add(nextRule.getTarget().getTargetClass().getGenPackage());
< 			}
< 		}
< 		return new BasicEList(packages);
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public boolean hasDiagramElementRule() {
< 		EList rules = getAllAuditRules();
< 		for (Iterator it = rules.iterator(); it.hasNext();) {
< 			GenAuditRule nextRule = (GenAuditRule) it.next();
< 			GenRuleTarget target = nextRule.getTarget(); 
< 			if(target instanceof GenDiagramElementTarget ||
< 				target instanceof GenNotationElementTarget) {
< 				return true; 
< 			}
< 		}
< 		return false;
< 	}
< 	
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */	
< 	public List getAllContextSelectorsLocalClassNames() {
< 		HashSet<String> classNames = new HashSet<String>();
< 		EList allRules = getAllAuditRules();
< 		for (Iterator it = allRules.iterator(); it.hasNext();) {
< 			String nextClassName = ((GenAuditRule) it.next()).getContextSelectorLocalClassName();
< 			if(nextClassName != null) {
< 				classNames.add(nextClassName);
< 			}			
< 		}
< 		return new ArrayList<String>(classNames);
< 	}
< 	
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public List getAllRequiredConstraintAdaptersLocalClassNames() {
< 		HashSet<String> classNames = new HashSet<String>();
< 		EList allRules = getAllAuditRules();
< 		for (Iterator it = allRules.iterator(); it.hasNext();) {
< 			GenAuditRule nextAudit = (GenAuditRule) it.next();
< 			if(nextAudit.isRequiresConstraintAdapter()) {
< 				String nextClassName = nextAudit.getConstraintAdapterLocalClassName();
< 				if(nextClassName != null) {
< 					classNames.add(nextClassName);
< 				}
< 			}
< 		}
< 		return new ArrayList<String>(classNames);
< 	}
< 	
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
---
> 	 * @generated
419,430c236,238
< 	public List getAllJavaLangAudits() {
< 		List<GenAuditRule> audits = new ArrayList<GenAuditRule>();
< 		if(getEditor() == null || getEditor().getExpressionProviders() == null) {
< 			return audits;
< 		}
< 		GenExpressionProviderContainer exprProviders = getEditor().getExpressionProviders();
< 		for (Iterator it = getAllAuditRules().iterator(); it.hasNext();) {
< 			GenAuditRule nextAudit = (GenAuditRule) it.next();
< 			if(nextAudit.getRule() != null && 
< 				exprProviders.getProvider(nextAudit.getRule()) instanceof GenJavaExpressionProvider) {
< 				audits.add(nextAudit);
< 			}
---
> 	public EList getAudits() {
> 		if (audits == null) {
> 			audits = new EObjectWithInverseResolvingEList(GenAuditRule.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GMFGenPackage.GEN_AUDIT_RULE__CATEGORY);
442c250
< 			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
---
> 			case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT:
445c253
< 				return basicSetParentContainer((GenAuditContainer)otherEnd, msgs);
---
> 				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT, msgs);
448,449d255
< 			case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS:
< 				return ((InternalEList)getChildContainers()).basicAdd(otherEnd, msgs);
461,462c267,268
< 			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
< 				return basicSetParentContainer(null, msgs);
---
> 			case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT:
> 				return eBasicSetContainer(null, GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT, msgs);
465,466d270
< 			case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS:
< 				return ((InternalEList)getChildContainers()).basicRemove(otherEnd, msgs);
478,479c282,283
< 			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
< 				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS, GenAuditContainer.class, msgs);
---
> 			case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT:
> 				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_AUDIT_ROOT__CATEGORIES, GenAuditRoot.class, msgs);
490a295,296
> 			case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT:
> 				return getRoot();
497,498c303,304
< 			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
< 				return getParentContainer();
---
> 			case GMFGenPackage.GEN_AUDIT_CONTAINER__PATH:
> 				return getPath();
501,502d306
< 			case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS:
< 				return getChildContainers();
523,524c327,329
< 			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
< 				setParentContainer((GenAuditContainer)newValue);
---
> 			case GMFGenPackage.GEN_AUDIT_CONTAINER__PATH:
> 				getPath().clear();
> 				getPath().addAll((Collection)newValue);
530,533d334
< 			case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS:
< 				getChildContainers().clear();
< 				getChildContainers().addAll((Collection)newValue);
< 				return;
554,555c355,356
< 			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
< 				setParentContainer((GenAuditContainer)null);
---
> 			case GMFGenPackage.GEN_AUDIT_CONTAINER__PATH:
> 				getPath().clear();
560,562d360
< 			case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS:
< 				getChildContainers().clear();
< 				return;
573a372,373
> 			case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT:
> 				return getRoot() != null;
580,581c380,381
< 			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
< 				return getParentContainer() != null;
---
> 			case GMFGenPackage.GEN_AUDIT_CONTAINER__PATH:
> 				return path != null && !path.isEmpty();
584,585d383
< 			case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS:
< 				return childContainers != null && !childContainers.isEmpty();
609,625d406
< 	private static EList getAllRulesInContainer(GenAuditContainer container, EList rules) {
< 		rules.addAll(container.getAudits());
< 		for (Iterator it = container.getChildContainers().iterator(); it.hasNext();) {
< 			GenAuditContainer nextContainer = (GenAuditContainer) it.next();
< 			getAllRulesInContainer(nextContainer, rules);
< 		}
< 		return rules;
< 	}
< 	
< 	private static EList getAllChildContainers(GenAuditContainer container, EList containers) {
< 		containers.addAll(container.getChildContainers());
< 		for (Iterator it = container.getChildContainers().iterator(); it.hasNext();) {
< 			GenAuditContainer nextContainer = (GenAuditContainer) it.next();
< 			getAllChildContainers(nextContainer, containers);
< 		}
< 		return containers;
< 	}
