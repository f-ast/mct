23d22
< 
30d28
< import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateConnectorViewOperation;
31a30
> import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateEdgeViewOperation;
46,48c45,47
<  * Implements of the <code>IViewProvider</code> interface.  
<  * This implementations invokes the approrpiate factory method by inspecting the supplied
<  * operation and provides the actual view creation functionality.
---
>  * Implements of the <code>IViewProvider</code> interface. This
>  * implementations invokes the approrpiate factory method by inspecting the
>  * supplied operation and provides the actual view creation functionality.
50c49,50
< public class AbstractViewProvider extends AbstractProvider
---
> public class AbstractViewProvider
> 	extends AbstractProvider
53a54
> 
56c57,59
< 	static protected class ClassToCreationMethodMap extends HashMap{
---
> 	static protected class ClassToCreationMethodMap
> 		extends HashMap {
> 
67,68c70
< 	public static ClassToCreationMethodMap classToCreateMethod =
< 		new ClassToCreationMethodMap();
---
> 	public static ClassToCreationMethodMap classToCreateMethod = new ClassToCreationMethodMap();
71,72c73,76
< 	 * Determines whether this view provider can provide for the required operation
< 	 * It inspects the type of view operation and calls the corresponding <code>provides</code> method.
---
> 	 * Determines whether this view provider can provide for the required
> 	 * operation It inspects the type of view operation and calls the
> 	 * corresponding <code>provides</code> method.
> 	 * 
86,87c90,91
< 		else if (operation instanceof CreateConnectorViewOperation)
< 			return provides((CreateConnectorViewOperation) operation);
---
> 		else if (operation instanceof CreateEdgeViewOperation)
> 			return provides((CreateEdgeViewOperation) operation);
93,94c97
< 	public final Diagram createDiagram(
< 			IAdaptable contextElement,
---
> 	public final Diagram createDiagram(IAdaptable contextElement,
96,101c99,100
< 		return (Diagram) createNewView(
< 					getDiagramViewClass(
< 						contextElement, diagramKind),
< 					new Object[] {
< 						contextElement,
< 						diagramKind,
---
> 		return (Diagram) createNewView(getDiagramViewClass(contextElement,
> 			diagramKind), new Object[] {contextElement, diagramKind,
105,109c104,105
< 	public final Edge createEdge(
< 		IAdaptable semanticAdapter,
< 		View containerView,
< 		String semanticHint,
< 		int index,
---
> 	public final Edge createEdge(IAdaptable semanticAdapter,
> 			View containerView, String semanticHint, int index,
112,123c108,111
< 		return (Edge)createNewView(
< 			getConnectorViewClass(
< 				semanticAdapter,
< 				containerView,
< 				semanticHint),
< 			new Object[] {
< 				semanticAdapter,
< 				containerView,
< 				semanticHint,
< 				new Integer(index),
< 				Boolean.valueOf(persisted),
< 				preferencesHint});
---
> 		return (Edge) createNewView(getEdgeViewClass(semanticAdapter,
> 			containerView, semanticHint), new Object[] {semanticAdapter,
> 			containerView, semanticHint, new Integer(index),
> 			Boolean.valueOf(persisted), preferencesHint});
126,130c114,115
< 	public final Node createNode(
< 			IAdaptable semanticAdapter,
< 			View containerView,
< 			String semanticHint,
< 			int index,
---
> 	public final Node createNode(IAdaptable semanticAdapter,
> 			View containerView, String semanticHint, int index,
133,144c118,121
< 			return (Node)createNewView(
< 				getNodeViewClass(
< 					semanticAdapter,
< 					containerView,
< 					semanticHint),
< 				new Object[] {
< 					semanticAdapter,
< 					containerView,
< 					semanticHint,
< 					new Integer(index),
< 					Boolean.valueOf(persisted),
< 					preferencesHint});
---
> 		return (Node) createNewView(getNodeViewClass(semanticAdapter,
> 			containerView, semanticHint), new Object[] {semanticAdapter,
> 			containerView, semanticHint, new Integer(index),
> 			Boolean.valueOf(persisted), preferencesHint});
148,149c125,129
< 	 * Determines whether this provider can provide for the specified view creation operation
< 	 * @param operation Contains a semantic kind and a containerView
---
> 	 * Determines whether this provider can provide for the specified view
> 	 * creation operation
> 	 * 
> 	 * @param operation
> 	 *            Contains a semantic kind and a containerView
154c134,135
< 			return getNodeViewClass(op.getSemanticAdapter(), op.getContainerView(), op.getSemanticHint()) != null;
---
> 			return getNodeViewClass(op.getSemanticAdapter(), op
> 				.getContainerView(), op.getSemanticHint()) != null;
156c137,138
< 			return getConnectorViewClass(op.getSemanticAdapter(), op.getContainerView(), op.getSemanticHint()) != null;
---
> 			return getEdgeViewClass(op.getSemanticAdapter(), op
> 				.getContainerView(), op.getSemanticHint()) != null;
161c143,145
< 	 * Determines whether this provider can provide for the specified diagram view operation
---
> 	 * Determines whether this provider can provide for the specified diagram
> 	 * view operation
> 	 * 
166c150,151
< 		return getDiagramViewClass(operation.getSemanticAdapter(), operation.getSemanticHint()) != null;
---
> 		return getDiagramViewClass(operation.getSemanticAdapter(), operation
> 			.getSemanticHint()) != null;
170c155,157
< 	 * Determines whether this provider can provide for the specified connector view operation
---
> 	 * Determines whether this provider can provide for the specified edge view
> 	 * operation
> 	 * 
174,180c161,163
< 	protected boolean provides(CreateConnectorViewOperation operation) {
< 		return (
< 				getConnectorViewClass(
< 					operation.getSemanticAdapter(),
< 					operation.getContainerView(),
< 					operation.getSemanticHint())
< 					!= null);
---
> 	protected boolean provides(CreateEdgeViewOperation operation) {
> 		return (getEdgeViewClass(operation.getSemanticAdapter(), operation
> 			.getContainerView(), operation.getSemanticHint()) != null);
184c167,169
< 	 * Determines whether this provider can provide for the specified node view operation
---
> 	 * Determines whether this provider can provide for the specified node view
> 	 * operation
> 	 * 
189,194c174,175
< 		return (
< 				getNodeViewClass(
< 					operation.getSemanticAdapter(),
< 					operation.getContainerView(),
< 					operation.getSemanticHint())
< 					!= null);
---
> 		return (getNodeViewClass(operation.getSemanticAdapter(), operation
> 			.getContainerView(), operation.getSemanticHint()) != null);
199c180,182
< 	 * @param semanticAdapter TODO
---
> 	 * 
> 	 * @param semanticAdapter
> 	 *            TODO
203c186,187
< 	protected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {
---
> 	protected Class getDiagramViewClass(IAdaptable semanticAdapter,
> 			String diagramKind) {
208c192,193
< 	 * Returns the connector view class to instantiate based on the passed params
---
> 	 * Returns the edge view class to instantiate based on the passed params
> 	 * 
214,217c199,200
< 	protected Class getConnectorViewClass(
< 		IAdaptable semanticAdapter,
< 		View containerView,
< 		String semanticHint) {
---
> 	protected Class getEdgeViewClass(IAdaptable semanticAdapter,
> 			View containerView, String semanticHint) {
222a206
> 	 * 
228,231c212,213
< 	protected Class getNodeViewClass(
< 		IAdaptable semanticAdapter,
< 		View containerView,
< 		String semanticHint) {
---
> 	protected Class getNodeViewClass(IAdaptable semanticAdapter,
> 			View containerView, String semanticHint) {
237c219,221
< 	 * @param constructorParams the view's constructor parameters.
---
> 	 * 
> 	 * @param constructorParams
> 	 *            the view's constructor parameters.
246c230,234
< 				Log.error(DiagramPlugin.getInstance(), DiagramStatusCodes.SERVICE_FAILURE, "View (" + viewClass + ") is missing a proper creation Factory");  //$NON-NLS-1$//$NON-NLS-2$
---
> 				Log
> 					.error(
> 						DiagramPlugin.getInstance(),
> 						DiagramStatusCodes.SERVICE_FAILURE,
> 						"View (" + viewClass + ") is missing a proper creation Factory"); //$NON-NLS-1$//$NON-NLS-2$
253c241,245
< 				Log.error(DiagramPlugin.getInstance(), DiagramStatusCodes.SERVICE_FAILURE, "View (" + viewClass + ") is missing a proper creation Factory");  //$NON-NLS-1$//$NON-NLS-2$
---
> 				Log
> 					.error(
> 						DiagramPlugin.getInstance(),
> 						DiagramStatusCodes.SERVICE_FAILURE,
> 						"View (" + viewClass + ") is missing a proper creation Factory"); //$NON-NLS-1$//$NON-NLS-2$
258,259c250,252
< 			String eMsg = MessageFormat.format(  
< 				DiagramResourceManager.getInstance().getString("AbstractViewProvider.create.view.failed_ERROR_"),//$NON-NLS-1$
---
> 			String eMsg = MessageFormat.format(DiagramResourceManager
> 				.getInstance().getString(
> 					"AbstractViewProvider.create.view.failed_ERROR_"),//$NON-NLS-1$
285,286c278
< 			Method[] methods = 
< 				viewClass.getMethods();
---
> 			Method[] methods = viewClass.getMethods();
290,291c282,283
< 				if (methodName.equals(viewCreationMethodName)||
< 					methodName.equals(diagramCreationMethodName)) {
---
> 				if (methodName.equals(viewCreationMethodName)
> 					|| methodName.equals(diagramCreationMethodName)) {
301a294
> 	 * 
311c304,305
< 		IElementType type = (IElementType) semanticAdapter.getAdapter(IElementType.class);
---
> 		IElementType type = (IElementType) semanticAdapter
> 			.getAdapter(IElementType.class);
318a313
> 	 * 
327,328c322,323
< 			return ProxyUtil.resolve(MEditingDomainGetter.getMEditingDomain(eObject),
< 				eObject);
---
> 			return ProxyUtil.resolve(MEditingDomainGetter
> 				.getMEditingDomain(eObject), eObject);
333a329
> 	 * 
337c333,334
< 	protected EObject getSemanticElement(IAdaptable semanticAdapter, MEditingDomain domain) {
---
> 	protected EObject getSemanticElement(IAdaptable semanticAdapter,
> 			MEditingDomain domain) {
