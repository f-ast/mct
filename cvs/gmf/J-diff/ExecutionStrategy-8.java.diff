2c2
<  * Copyright (c) 2002, 2005 IBM Corporation and others.
---
>  * Copyright (c) 2002, 2006 IBM Corporation and others.
19,21d18
< import org.eclipse.core.runtime.IStatus;
< import org.eclipse.gmf.runtime.common.core.internal.CommonCorePlugin;
< import org.eclipse.gmf.runtime.common.core.internal.CommonCoreStatusCodes;
24d20
< import org.eclipse.gmf.runtime.common.core.util.Log;
93c89
< 				if (safeProvides(descriptor, operation)) {
---
> 				if (Service.safeProvides(descriptor, operation)) {
136c132
< 				if (safeProvides(descriptor, operation)) {
---
> 				if (Service.safeProvides(descriptor, operation)) {
259c255
< 			if (safeProvides(descriptor, operation)) {
---
> 			if (Service.safeProvides(descriptor, operation)) {
297,340d292
< 	
< 	/**
< 	 * Safely calls a provider's provides() method.
< 	 * 
< 	 * The provider must not be null.
< 	 * 
< 	 * Returns true if there were no exceptions thrown and the provides() method
< 	 * returns true.  Returns false if an exception was thrown or the provides()
< 	 * method returns false.
< 	 * 
< 	 * An entry is added to the log if the provider threw an exception.  
< 	 * 
< 	 * @param provider to safely execute the provides() method
< 	 * @param operation passed into the provider's provides() method
< 	 * @return true if there were no exceptions thrown and the provides() method
< 	 * returns true.  Returns false if an exception was thrown or the provides()
< 	 * method returns false.
< 	 */
< 	private static boolean safeProvides(IProvider provider, IOperation operation) {
< 		assert provider != null;
< 		
< 		try {
< 			return provider.provides(operation);
< 		}
< 		catch (Exception e) {
< 			
< 			List ignoredProviders = Service.getIgnoredProviders();
< 			String providerClassName = provider.getClass().getName();
< 			
< 			if (!ignoredProviders.contains(providerClassName)) {
< 				// remember the ignored provider so that the error is only logged once per provider
< 				ignoredProviders.add(providerClassName);
< 				
< 				Log.log(
< 					CommonCorePlugin.getDefault(),
< 					IStatus.ERROR,
< 					CommonCoreStatusCodes.SERVICE_FAILURE,
< 					"Ignoring provider " + provider + " since it threw an exception in the provides() method",  //$NON-NLS-1$ //$NON-NLS-2$
< 					e);
< 			}
< 			return false;
< 		}
< 		
< 	}	
