226c226
<         Set deletedObjects = getDeletedObjects(event);
---
>         Set deletedObjects = NotificationUtil.getDeletedObjects(event);
242c242
<                 if (deletedObjects.contains(notification.getNotifier()) && !isDestroyEvent(notification))
---
>                 if (deletedObjects.contains(notification.getNotifier())) {
243a244
>                 }
254c255
<         Set deletedObjects = getDeletedObjects(event);
---
>         Set deletedObjects = NotificationUtil.getDeletedObjects(event);
269c270
< 				if (deletedObjects.contains(notification.getNotifier())  && !isDestroyEvent(notification))
---
> 				if (deletedObjects.contains(notification.getNotifier())) {
270a272,273
>                 }
>                 
276,285d278
<     private Set getDeletedObjects(ResourceSetChangeEvent event) {
<         HashSet deletedObjects = new HashSet();
<         // first collect the "destroyed" objects
<         for (Iterator i = event.getNotifications().iterator(); i.hasNext();) {
<             Notification notification = (Notification) i.next();
<             if (isDestroyEvent(notification))
<                 deletedObjects.add(notification.getNotifier());
<         }
<         return deletedObjects;
<     }
287,300d279
< 	/**
< 	 * Returns true if this notification is the equivalent of what used to be a
< 	 * destroy event. Assumes the notifier is an <code>EObject</code>.
< 	 * 
< 	 * @param notification
< 	 * @return
< 	 */
< 	private boolean isDestroyEvent(Notification notification) {		
<         return false;
<         // TODO:  FIX THIS!
< //		return (notification.getEventType() == Notification.REMOVE || notification
< //			.getEventType() == Notification.REMOVE_MANY)
< //			&& ((EObject) notification.getNotifier()).eContainer() == null;
< 	}
