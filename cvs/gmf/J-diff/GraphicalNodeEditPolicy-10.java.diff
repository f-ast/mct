15d14
< import java.util.HashMap;
18d16
< import java.util.Map;
35,38d32
< import org.eclipse.jface.preference.IPreferenceStore;
< import org.eclipse.jface.util.Assert;
< import org.eclipse.swt.widgets.Display;
< 
46a41
> import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
56a52
> import org.eclipse.gmf.runtime.diagram.ui.internal.requests.CreateViewRequestFactory;
65d60
< import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
68d62
< import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantService;
70a65
> import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantService;
75a71,73
> import org.eclipse.jface.preference.IPreferenceStore;
> import org.eclipse.jface.util.Assert;
> import org.eclipse.swt.widgets.Display;
84c82
<  * @author mmostafa
---
>  * @author mmostafa, cmahoney
88a87
> 	
97a97,179
> 	/**
> 	 * Gets a command that pops up a menu which allows the user to select which
> 	 * type of connection to be created and then creates the connection. This
> 	 * command uses
> 	 * {@link #getCommandForMenuSelection(Object, CreateConnectionRequest)} on
> 	 * the connection chosen to get the creation command.
> 	 * 
> 	 * @author cmahoney
> 	 */
> 	protected class PromptAndCreateConnectionCommand
> 		extends CreateOrSelectElementCommand {
> 
> 		/**
> 		 * Cache the request because it needs to be passed to
> 		 * {@link #getCommandForMenuSelection(Object, CreateConnectionRequest)}.
> 		 */
> 		private CreateConnectionRequest request;
> 
> 		/**
> 		 * Creates a new instance.
> 		 * 
> 		 * @param content
> 		 *            The list of items making up the content of the popup menu.
> 		 * @param request
> 		 *            The relevant create connection request.
> 		 */
> 		public PromptAndCreateConnectionCommand(List content,
> 				CreateConnectionRequest request) {
> 			super(CREATE_CONNECTION_COMMAND_LABEL, Display.getCurrent()
> 				.getActiveShell(), content);
> 			this.request = request;
> 		}
> 
> 		/**
> 		 * The command to create the connection that may need to be
> 		 * undone/redone.
> 		 */
> 		private Command createCommand;
> 
> 		/**
> 		 * Pops up the dialog with the content provided, gets the command to be
> 		 * executed based on the user selection, and then executes the command.
> 		 */
> 		protected CommandResult doExecute(IProgressMonitor progressMonitor) {
> 			CommandResult cmdResult = super.doExecute(progressMonitor);
> 			if (!cmdResult.getStatus().isOK()) {
> 				return cmdResult;
> 			}
> 
> 			Command cmd = getConnectionCompleteCommand(
> 				cmdResult.getReturnValue(), getRequest());
> 			Assert.isTrue(cmd != null && cmd.canExecute());
> 			cmd.execute();
> 			createCommand = cmd;
> 
> 			return newOKCommandResult();
> 		}
> 
> 		protected CommandResult doUndo() {
> 			if (createCommand != null) {
> 				createCommand.undo();
> 			}
> 			return super.doUndo();
> 		}
> 
> 		protected CommandResult doRedo() {
> 			if (createCommand != null) {
> 				createCommand.redo();
> 			}
> 			return super.doRedo();
> 		}
> 
> 		/**
> 		 * Gets the request.
> 		 * 
> 		 * @return Returns the request.
> 		 */
> 		private CreateConnectionRequest getRequest() {
> 			return request;
> 		}
> 
> 	}
> 	
606c688
< 	 * relationship (if applicable) for a unspecified type request. This command
---
> 	 * relationship (if applicable) for an unspecified type request. This command
608c690
< 	 * relationship to be created.
---
> 	 * connection to be created.
621,628c703
< 		List allRequests = request.getAllRequests();
< 		if (allRequests.isEmpty()) {
< 			return null;
< 		}
< 		IGraphicalEditPart sourceEP = (IGraphicalEditPart) ((CreateConnectionRequest) allRequests
< 			.get(0)).getSourceEditPart();
< 		IGraphicalEditPart targetEP = (IGraphicalEditPart) ((CreateConnectionRequest) allRequests
< 			.get(0)).getTargetEditPart();
---
> 		List menuContent = getConnectionMenuContent(request);
630,647c705,711
< 		List relTypes = request.useModelingAssistantService() ? ModelingAssistantService
< 			.getInstance().getRelTypesOnSourceAndTarget(sourceEP, targetEP)
< 			: request.getElementTypes();
< 
< 		final Map connectionCmds = new HashMap();
< 		List validRelTypes = new ArrayList();
< 		for (Iterator iter = relTypes.iterator(); iter.hasNext();) {
< 			IElementType type = (IElementType) iter.next();
< 			Request createConnectionRequest = request
< 				.getRequestForType(type);
< 			if (createConnectionRequest != null) {
< 				Command individualCmd = getHost().getCommand(
< 					createConnectionRequest);
< 
< 				if (individualCmd != null && individualCmd.canExecute()) {
< 					connectionCmds.put(type, individualCmd);
< 					validRelTypes.add(type);
< 				}
---
> 		if (menuContent.isEmpty()) {
> 			return null;
> 		} else if (menuContent.size() == 1) {
> 			return getConnectionCompleteCommand(menuContent.get(0), request);
> 		} else {
> 			return new EtoolsProxyCommand(getPromptAndCreateConnectionCommand(
> 				menuContent, request));
651,657c715,728
< 		if (connectionCmds.isEmpty()) {
< 			return null;
< 		} else if (connectionCmds.size() == 1) {
< 			return (Command) connectionCmds.values().toArray()[0];
< 		} else {
< 			CreateOrSelectElementCommand selectAndCreateConnectionCmd = new CreateOrSelectElementCommand(
< 				CREATE_CONNECTION_COMMAND_LABEL, Display.getCurrent().getActiveShell(), validRelTypes) {
---
> 	/**
> 	 * Gets a command that pops up a menu which allows the user to select which
> 	 * type of connection to be created and then creates the connection.
> 	 * 
> 	 * @param content
> 	 *            The list of items making up the content of the popup menu.
> 	 * @param request
> 	 *            The relevant create connection request.
> 	 * @return the command to popup up the menu and create the connection
> 	 */
> 	protected ICommand getPromptAndCreateConnectionCommand(List content,
> 			CreateConnectionRequest request) {
> 		return new PromptAndCreateConnectionCommand(content, request);
> 	}
660c731,741
< 				 * My command to undo/redo.
---
> 	 * Gets the command to create a connection based on the request and the
> 	 * connection identifier. This method is called after the user has selected
> 	 * the connection to be created when presented with a popup.
> 	 * @see #getPromptAndCreateConnectionCommand(List, CreateConnectionRequest)
> 	 * 
> 	 * @param connectionType
> 	 *            the connection type as specified in
> 	 *            {@link #getConnectionMenuContent(CreateConnectionRequest)}
> 	 * @param request
> 	 *            the request, identifying the source and target
> 	 * @return the command to create the connection
662c743,753
< 				private Command undoCommand;
---
> 	protected Command getConnectionCompleteCommand(Object connectionType,
> 			CreateConnectionRequest request) {
> 		if (connectionType instanceof IElementType) {
> 			if (request instanceof CreateUnspecifiedTypeConnectionRequest) {
> 				return getHost().getCommand(
> 					((CreateUnspecifiedTypeConnectionRequest) request)
> 						.getRequestForType((IElementType) connectionType));
> 			}
> 		}
> 		return null;
> 	}
665,667c756,768
< 				 * Execute the command that prompts the user with the popup
< 				 * menu, then executes the command prepared for the relationship
< 				 * type that the user selected.
---
> 	 * Gets a list of all the connector items that will represent the connector
> 	 * choices and will appear in the popup menu. This method will get the
> 	 * connector content if the given request is a
> 	 * <code>CreateUnspecifiedTypeConnectionRequest</code> using the types it
> 	 * holds or the types retrieved from the Modeling Assistant Service.
> 	 * 
> 	 * <p>
> 	 * If a subclass wishes to provide additional element types they should
> 	 * consider providing these in a Modeling Assistant Provider. If a subclass
> 	 * wishes to provide connector choices that are not elements types they may
> 	 * provide them here, in this case, the label provider for
> 	 * {@link PromptAndCreateConnectionCommand} may need to customized.
> 	 * </p>
669c770
< 				 * @see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doExecute(org.eclipse.core.runtime.IProgressMonitor)
---
> 	 * @return the list of connector items to appear in the popup menu
671,675c772,778
< 				protected CommandResult doExecute(
< 						IProgressMonitor progressMonitor) {
< 					CommandResult cmdResult = super.doExecute(progressMonitor);
< 					if (!cmdResult.getStatus().isOK()) {
< 						return cmdResult;
---
> 	protected List getConnectionMenuContent(CreateConnectionRequest request) {
> 		List validRelTypes = new ArrayList();
> 		if (request instanceof CreateUnspecifiedTypeConnectionRequest) {
> 			CreateUnspecifiedTypeConnectionRequest unspecifiedRequest = (CreateUnspecifiedTypeConnectionRequest) request;
> 			List allRequests = unspecifiedRequest.getAllRequests();
> 			if (allRequests.isEmpty()) {
> 				return null;
676a780,783
> 			IGraphicalEditPart sourceEP = (IGraphicalEditPart) ((CreateConnectionRequest) allRequests
> 				.get(0)).getSourceEditPart();
> 			IGraphicalEditPart targetEP = (IGraphicalEditPart) ((CreateConnectionRequest) allRequests
> 				.get(0)).getTargetEditPart();
678,679c785,787
< 					IElementType relationshipType = (IElementType) cmdResult
< 						.getReturnValue();
---
> 			List allRelTypes = unspecifiedRequest.useModelingAssistantService() ? ModelingAssistantService
> 				.getInstance().getRelTypesOnSourceAndTarget(sourceEP, targetEP)
> 				: unspecifiedRequest.getElementTypes();
681,684c789,790
< 					Command cmd = (Command) connectionCmds.get(relationshipType);
< 					Assert.isTrue(cmd != null && cmd.canExecute());
< 					cmd.execute();
< 					undoCommand = cmd;
---
> 			for (Iterator iter = allRelTypes.iterator(); iter.hasNext();) {
> 				IElementType type = (IElementType) iter.next();
686,687c792
< 					return newOKCommandResult();
< 				}
---
> 				Command individualCmd = null;
689,693c794,823
< 				protected CommandResult doUndo() {
< 					if (undoCommand != null) {
< 						undoCommand.undo();
< 					}
< 					return super.doUndo();
---
> 				Request createConnectionRequest = unspecifiedRequest
> 					.getRequestForType(type);
> 				if (createConnectionRequest != null) {
> 					individualCmd = getHost().getCommand(
> 						createConnectionRequest);
> 				} else {
> 					// This type may not have been given when the connection
> 					// creation occurred. In this case, use the deferred
> 					// connection creation mechanism.
> 
> 					// First, setup the request to initialize the connection
> 					// start command.
> 					CreateConnectionViewRequest connectionRequest = CreateViewRequestFactory
> 						.getCreateConnectionRequest(type,
> 							((IGraphicalEditPart) getHost())
> 								.getDiagramPreferencesHint());
> 					connectionRequest.setSourceEditPart(null);
> 					connectionRequest.setTargetEditPart(sourceEP);
> 					connectionRequest
> 						.setType(RequestConstants.REQ_CONNECTION_START);
> 					sourceEP.getCommand(connectionRequest);
> 
> 					// Now, setup the request in preparation to get the
> 					// connection end
> 					// command.
> 					connectionRequest.setSourceEditPart(sourceEP);
> 					connectionRequest.setTargetEditPart(targetEP);
> 					connectionRequest
> 						.setType(RequestConstants.REQ_CONNECTION_END);
> 					individualCmd = targetEP.getCommand(connectionRequest);
696,698c826,827
< 				protected CommandResult doRedo() {
< 					if (undoCommand != null) {
< 						undoCommand.redo();
---
> 				if (individualCmd != null && individualCmd.canExecute()) {
> 					validRelTypes.add(type);
700d828
< 					return super.doRedo();
703,706d830
< 			};
< 			
< 
< 			return new EtoolsProxyCommand(selectAndCreateConnectionCmd);
707a832
> 		return validRelTypes;
