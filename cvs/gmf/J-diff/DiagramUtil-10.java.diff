14d13
< import java.util.ArrayList;
17,18d15
< import java.util.ListIterator;
< import java.util.Map;
21d17
< import org.eclipse.draw2d.geometry.Dimension;
23,29d18
< import org.eclipse.gef.GraphicalEditPart;
< import org.eclipse.jface.util.Assert;
< import org.eclipse.ui.IEditorPart;
< import org.eclipse.ui.IWorkbenchWindow;
< import org.eclipse.ui.PlatformUI;
< 
< import org.eclipse.gmf.runtime.common.core.util.ObjectAdapter;
32a22,23
> import org.eclipse.gmf.runtime.diagram.core.util.ViewType;
> import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
34,35d24
< import org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.LayoutNode;
< import org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.LayoutService;
39c28
< import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
---
> import org.eclipse.gmf.runtime.diagram.ui.services.layout.LayoutService;
46c35,38
< 
---
> import org.eclipse.jface.util.Assert;
> import org.eclipse.ui.IEditorPart;
> import org.eclipse.ui.IWorkbenchWindow;
> import org.eclipse.ui.PlatformUI;
59,60c51,54
< 	 * @param context The diagram element context
< 	 * @param kind diagram kind, check {@link ViewType} for predefined values
---
> 	 * @param context
> 	 *            The diagram element context
> 	 * @param kind
> 	 *            diagram kind, check {@link ViewType} for predefined values
68,69c62,65
< 	public static Diagram createDiagram(EObject context, String kind, PreferencesHint preferencesHint) {
< 		IAdaptable viewModel = (context != null) ? new EObjectAdapter(context) : null;
---
> 	public static Diagram createDiagram(EObject context, String kind,
> 			PreferencesHint preferencesHint) {
> 		IAdaptable viewModel = (context != null) ? new EObjectAdapter(context)
> 				: null;
71c67,68
< 		return ViewService.getInstance().createDiagram(viewModel, viewType, preferencesHint);
---
> 		return ViewService.getInstance().createDiagram(viewModel, viewType,
> 				preferencesHint);
75c72,73
< 	 * Creates a node for a given eObject and with a given type and inserts it into a given container
---
> 	 * Creates a node for a given eObject and with a given type and inserts it
> 	 * into a given container
77,79c75,81
< 	 * @param container The node view container
< 	 * @param eObject The node view object context
< 	 * @param type The node view type, check {@link ViewType} for predefined values
---
> 	 * @param container
> 	 *            The node view container
> 	 * @param eObject
> 	 *            The node view object context
> 	 * @param type
> 	 *            The node view type, check {@link ViewType} for predefined
> 	 *            values
87c89,90
< 	public static Node createNode(View container, EObject eObject, String type, PreferencesHint preferencesHint) {
---
> 	public static Node createNode(View container, EObject eObject, String type,
> 			PreferencesHint preferencesHint) {
89c92,93
< 		IAdaptable viewModel = (eObject != null) ? new EObjectAdapter(eObject) : null;
---
> 		IAdaptable viewModel = (eObject != null) ? new EObjectAdapter(eObject)
> 				: null;
91c95,96
< 		View view = ViewService.getInstance().createNode(viewModel, container, viewType, ViewUtil.APPEND, preferencesHint);
---
> 		View view = ViewService.getInstance().createNode(viewModel, container,
> 				viewType, ViewUtil.APPEND, preferencesHint);
96c101,102
< 	 * Creates an edge for a given eObject and with a given type in the given diagram
---
> 	 * Creates an edge for a given eObject and with a given type in the given
> 	 * diagram
98,100c104,110
< 	 * @param diagram The container diagram 
< 	 * @param eObject The edge view object context
< 	 * @param type The edge view type, check {@link ViewType} for predefined values
---
> 	 * @param diagram
> 	 *            The container diagram
> 	 * @param eObject
> 	 *            The edge view object context
> 	 * @param type
> 	 *            The edge view type, check {@link ViewType} for predefined
> 	 *            values
108c118,119
< 	public static Edge createEdge(Diagram diagram, EObject eObject, String type, PreferencesHint preferencesHint) {
---
> 	public static Edge createEdge(Diagram diagram, EObject eObject,
> 			String type, PreferencesHint preferencesHint) {
110c121,122
< 		IAdaptable viewModel = (eObject != null) ? new EObjectAdapter(eObject) : null;
---
> 		IAdaptable viewModel = (eObject != null) ? new EObjectAdapter(eObject)
> 				: null;
112c124,125
< 		View view = ViewService.getInstance().createEdge(viewModel, diagram, viewType, ViewUtil.APPEND, preferencesHint);
---
> 		View view = ViewService.getInstance().createEdge(viewModel, diagram,
> 				viewType, ViewUtil.APPEND, preferencesHint);
117c130,131
< 	 * Creates an edge for a given eObject and with a given type and connects it between a given source and a given target
---
> 	 * Creates an edge for a given eObject and with a given type and connects it
> 	 * between a given source and a given target
119,122c133,141
< 	 * @param source The edge's source view
< 	 * @param target The edge's target view
< 	 * @param eObject The edge view object context
< 	 * @param type The edge view type, check {@link ViewType} for predefined values
---
> 	 * @param source
> 	 *            The edge's source view
> 	 * @param target
> 	 *            The edge's target view
> 	 * @param eObject
> 	 *            The edge view object context
> 	 * @param type
> 	 *            The edge view type, check {@link ViewType} for predefined
> 	 *            values
130c149,150
< 	public static Edge createEdge(View source, View target, EObject eObject, String type, PreferencesHint preferencesHint) {
---
> 	public static Edge createEdge(View source, View target, EObject eObject,
> 			String type, PreferencesHint preferencesHint) {
135c155,156
< 		Edge edge = createEdge(source.getDiagram(), eObject, type, preferencesHint);
---
> 		Edge edge = createEdge(source.getDiagram(), eObject, type,
> 				preferencesHint);
146c167,168
< 	 * @param view The view to be destroyed
---
> 	 * @param view
> 	 *            The view to be destroyed
154c176,178
< 	 * @param diagram The diagram to be opened
---
> 	 * 
> 	 * @param diagram
> 	 *            The diagram to be opened
164c188,189
< 	 * @param node Node to get the layout node equivalent from
---
> 	 * @param node
> 	 *            Node to get the layout node equivalent from
168a194,196
> 	 * @deprecated use
> 	 *             {@link org.eclipse.gmf.runtime.diagram.ui.services.layout.LayoutService#getLayoutNode(Node)}
> 	 *             Will be removed on December 16th / 2005
171,205c199
< 		if (null == node) {
< 			throw new NullPointerException("Argument 'node' is null"); //$NON-NLS-1$
< 		}
< 		
< 		Diagram diagram = node.getDiagram(); 
< 		DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance().createDiagramEditPart(diagram);
< 		Map registry = diagramEP.getViewer().getEditPartRegistry();
< 		GraphicalEditPart gep = (GraphicalEditPart)registry.get(node);
< 		Dimension size = gep.getFigure().getBounds().getSize();
< 		
< 		return new LayoutNode(node, size.width, size.height);
< 	}
< 	
< 	private static void checkValidNodes(List nodes) {
< 		if (null == nodes) {
< 			throw new NullPointerException("Argument 'nodes' is null"); //$NON-NLS-1$
< 		}
< 		if (nodes.size() == 0) {
< 			throw new IllegalArgumentException("Argument 'nodes' is empty"); //$NON-NLS-1$
< 		}
< 				
< 		ListIterator li = nodes.listIterator();
< 		EObject parent = null;
< 		while (li.hasNext()) {
< 			Object next = li.next();
< 			if (!(next instanceof Node))
< 				throw new IllegalArgumentException("Argument 'nodes' contains objects which aren't of type 'Node'"); //$NON-NLS-1$
< 			Node node = (Node)next;
< 			
< 			if (parent == null)
< 				parent =  ViewUtil.getContainerView(node);
< 			else
< 				if (ViewUtil.getContainerView(node) != parent)
< 					throw new IllegalArgumentException("Argument 'nodes' contains objects which have a different parent containment"); //$NON-NLS-1$
< 		} 
---
> 		return LayoutService.getInstance().getLayoutNode(node);
209,210c203,206
< 	 * @param diagramEP	the diagram edit part to use
< 	 * @param nodes List of <code>Node</code> objects 
---
> 	 * @param diagramEP
> 	 *            the diagram edit part to use
> 	 * @param nodes
> 	 *            List of <code>Node</code> objects
211a208,210
> 	 * @deprecated use
> 	 *             {@link org.eclipse.gmf.runtime.diagram.ui.services.layout.LayoutService#getLayoutNodes(DiagramEditPart, List)}
> 	 *             Will be removed on December 16th / 2005
214,232c213
< 		checkValidNodes(nodes);
< 		
< 		if (diagramEP == null){
< 			Diagram diagram = ((Node)nodes.get(0)).getDiagram(); 
< 			diagramEP = OffscreenEditPartFactory.getInstance().createDiagramEditPart(diagram);
< 		}
< 		Map registry = diagramEP.getViewer().getEditPartRegistry();
< 		
< 		List layoutNodes = new ArrayList(nodes.size());
< 		ListIterator li = nodes.listIterator();
< 		while (li.hasNext()) {
< 			Node node = (Node)li.next();
< 			GraphicalEditPart gep = (GraphicalEditPart)registry.get(node);
< 			Dimension size = gep.getFigure().getBounds().getSize();
< 			
< 			layoutNodes.add(new LayoutNode(node,size.width, size.height));
< 		}
< 		
< 		return layoutNodes;
---
> 		return LayoutService.getInstance().getLayoutNodes(diagramEP, nodes);
238,240c219,226
< 	 * @param view View object that is the container whose children will be laid out.
< 	 * @param hint String representing a hint for what kind of layout will be applied.  Value can be one of
< 	 * <code>org.eclipse.gmf.runtime.diagram.ui.services.layout.ILayoutNodesProvider.DEFAULT_LAYOUT</code> or 
---
> 	 * @param view
> 	 *            View object that is the container whose children will be laid
> 	 *            out.
> 	 * @param hint
> 	 *            String representing a hint for what kind of layout will be
> 	 *            applied. Value can be one of
> 	 *            <code>org.eclipse.gmf.runtime.diagram.ui.services.layout.ILayoutNodesProvider.DEFAULT_LAYOUT</code>
> 	 *            or
244,245c230,236
< 	 * @throws NullPointerException <code>View</code> is <code>null</code>
< 	 * @throws NullPointerException <code>hint</code> is <code>null</code>
---
> 	 * @throws NullPointerException
> 	 *             <code>View</code> is <code>null</code>
> 	 * @throws NullPointerException
> 	 *             <code>hint</code> is <code>null</code>
> 	 * @deprecated use
> 	 *             {@link org.eclipse.gmf.runtime.diagram.ui.services.layout.LayoutService#layout(View, String)}
> 	 *             Will be removed on December 16th / 2005
248,263c239
< 		if (null == view) {
< 			throw new NullPointerException("Argument 'view' is null"); //$NON-NLS-1$
< 		}
< 		if (null == hint) {
< 			throw new NullPointerException("Argument 'hint' is null"); //$NON-NLS-1$
< 		}
< 				
< 		Diagram diagram = view.getDiagram();
< 		DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance().createDiagramEditPart(diagram);
< 		
< 		List hints = new ArrayList(2);
< 		hints.add(hint);
< 		hints.add(diagramEP);
< 		IAdaptable layoutHint = new ObjectAdapter(hints);
< 		final Runnable layoutRun =  LayoutService.getInstance().layoutNodes(getLayoutNodes(diagramEP,view.getChildren()), false, layoutHint);
< 		layoutRun.run();
---
> 		LayoutService.getInstance().layout(view, hint);
269,270c245,249
< 	 * @param nodes List of Node objects
< 	 * @param hint String representing a hint for what kind of layout will be applied.  Value can be one of
---
> 	 * @param nodes
> 	 *            List of Node objects
> 	 * @param hint
> 	 *            String representing a hint for what kind of layout will be
> 	 *            applied. Value can be one of
275,279c254,268
< 	 * @throws NullPointerException  <code>nodes</code> is <code>null</code>
< 	 * @throws IllegalArgumentException nodes is an empty list
< 	 * @throws NullPointerException  <code>hint</code> is <code>null</code>
< 	 * @throws IllegalArgumentException Argument <code>nodes</code> contains objects which aren't of type <code>Node</code>
< 	 * @throws IllegalArgumentException Argument <code>nodes</code> contains objects which have a different parent containment
---
> 	 * @throws NullPointerException
> 	 *             <code>nodes</code> is <code>null</code>
> 	 * @throws IllegalArgumentException
> 	 *             nodes is an empty list
> 	 * @throws NullPointerException
> 	 *             <code>hint</code> is <code>null</code>
> 	 * @throws IllegalArgumentException
> 	 *             Argument <code>nodes</code> contains objects which aren't
> 	 *             of type <code>Node</code>
> 	 * @throws IllegalArgumentException
> 	 *             Argument <code>nodes</code> contains objects which have a
> 	 *             different parent containment
> 	 * @deprecated use
> 	 *             {@link org.eclipse.gmf.runtime.diagram.ui.services.layout.LayoutService#layout(List, String)}
> 	 *             Will be removed on December 16th / 2005
282,285c271
< 		checkValidNodes(nodes);
< 		
< 		if (null == hint) {
< 			throw new NullPointerException("Argument 'hint' is null"); //$NON-NLS-1$
---
> 		LayoutService.getInstance().layoutNodes(nodes, true, hint);
288,301d273
< 		Node nodeFirst = (Node)nodes.get(0);
< 		Diagram diagram = nodeFirst.getDiagram();
< 		DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance().createDiagramEditPart(diagram);
< 		
< 		List hints = new ArrayList(2);
< 		hints.add(hint);
< 		hints.add(diagramEP);
< 		IAdaptable layoutHint = new ObjectAdapter(hints);
< 		final Runnable layoutRun =  LayoutService.getInstance().layoutNodes(getLayoutNodes(diagramEP,nodes), true, layoutHint);
< 		layoutRun.run();
< 	}
< 
< 
< 	
303,304c275,277
< 	 * Rerturns an open editor for the given diagram in the given workbench window
< 	 * if the window is null, the active window in the platform is considered
---
> 	 * Rerturns an open editor for the given diagram in the given workbench
> 	 * window if the window is null, the active window in the platform is
> 	 * considered
306,307c279,282
< 	 * @param diagram The given diagram
< 	 * @param window The given window (or null to mean the active one)
---
> 	 * @param diagram
> 	 *            The given diagram
> 	 * @param window
> 	 *            The given window (or null to mean the active one)
310c285,286
< 	public static IDiagramWorkbenchPart getOpenedDiagramEditor(Diagram diagram, IWorkbenchWindow window) {
---
> 	public static IDiagramWorkbenchPart getOpenedDiagramEditor(Diagram diagram,
> 			IWorkbenchWindow window) {
