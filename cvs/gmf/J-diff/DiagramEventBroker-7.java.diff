2c2
<  * Copyright (c) 2002, 2005 IBM Corporation and others.
---
>  * Copyright (c) 2002, 2005, 2006 IBM Corporation and others.
13a14
> import java.lang.ref.WeakReference;
24a26,27
> import org.eclipse.emf.common.command.Command;
> import org.eclipse.emf.common.command.CompoundCommand;
30,33c33,35
< import org.eclipse.gmf.runtime.common.core.util.Trace;
< import org.eclipse.gmf.runtime.diagram.core.internal.DiagramDebugOptions;
< import org.eclipse.gmf.runtime.diagram.core.internal.DiagramPlugin;
< import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
---
> import org.eclipse.emf.transaction.ResourceSetChangeEvent;
> import org.eclipse.emf.transaction.ResourceSetListenerImpl;
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
35,38d36
< import org.eclipse.gmf.runtime.emf.core.EventTypes;
< import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;
< import org.eclipse.gmf.runtime.emf.core.edit.MFilter;
< import org.eclipse.gmf.runtime.emf.core.edit.MUniversalListener;
41a40
> 
46c45
<  * @author melaasar, mmostafa
---
>  * @author melaasar, mmostafa, cmahoney
48,49c47
< public class DiagramEventBroker
< 	extends MUniversalListener {
---
> public class DiagramEventBroker extends ResourceSetListenerImpl {
54c52,55
< 	private final NotifierToKeyToListenersSetMap listeners = new NotifierToKeyToListenersSetMap();
---
> 	private final NotifierToKeyToListenersSetMap preListeners = new NotifierToKeyToListenersSetMap();
> 	private final NotifierToKeyToListenersSetMap postListeners = new NotifierToKeyToListenersSetMap();
> 	
> 	private static final Map instanceMap = new WeakHashMap();
169,170c170,171
< 	 * Start listening to the model server. {@link MFilter.WildCard} is the
< 	 * default filter by this listener.
---
> 	 * Creates a <code>DiagramEventBroker</code> that listens to all
> 	 * <code>EObject </code> notifications for the given editing domain.
172,176c173,174
< 	public void startListening() {
< 		Trace.trace(DiagramPlugin.getInstance(), DiagramDebugOptions.EVENTS,
< 			this + "#startListening()"); //$NON-NLS-1$
< 		setFilter(new MFilter.NotifierType(EObject.class, false));
< 		super.startListening();
---
> 	private DiagramEventBroker() {
> 		super(NotificationFilter.createNotifierTypeFilter(EObject.class));
179,183c177,191
< 	/** Stop listening to Model Server */
< 	public void stopListening() {
< 		Trace.trace(DiagramPlugin.getInstance(), DiagramDebugOptions.EVENTS,
< 			this + "#stopListening()"); //$NON-NLS-1$
< 		super.stopListening();
---
> 	/**
> 	 * Gets the diagmam event broker instance for the editing domain passed in.
> 	 * There is one diagram event broker per editing domain.
> 	 * 
> 	 * @param editingDomain
> 	 * @return Returns the diagram event broker.
> 	 */
> 	public static DiagramEventBroker getInstance(
> 			TransactionalEditingDomain editingDomain) {
> 		WeakReference reference = (WeakReference) instanceMap
> 			.get(editingDomain);
> 		if (reference != null) {
> 			return (DiagramEventBroker) reference.get();
> 		}
> 		return null;
187,188c195,198
< 	 * Model Server event callback method. This method will redirect the events
< 	 * to their respective event type handler
---
>      * Creates a new diagram event broker instance for the editing domain passed
>      * in only if the editing domain does not already have a diagram event
>      * broker. There is one diagram event broker per editing domain. Adds the
>      * diagram event broker instance as a listener to the editing domain.
190,191c200
< 	 * @see #handleElementEvent(Notification)
< 	 * @see #handleResourceEvent(Notification)
---
>      * @param editingDomain
193,194c202,211
< 	public final void onEvent(List events) {
< 		List eventArray = new ArrayList(events);
---
> 	public static void startListening(
> 			TransactionalEditingDomain editingDomain) {
> 		DiagramEventBroker diagramEventBroker = getInstance(editingDomain);
> 		if (diagramEventBroker == null) {
> 			diagramEventBroker = new DiagramEventBroker();
> 			editingDomain.addResourceSetListener(diagramEventBroker);
> 			instanceMap.put(editingDomain,
> 				new WeakReference(diagramEventBroker));
> 		}
> 	}
196,205c213,237
< 		// if the events contain "uncreated" objects, remove all events related
< 		// to those
< 		// objects from the event list (except the "uncreate" events themselves)
< 		HashSet deletedObjects = new HashSet();
< 		// first collect the "destroyed" objects
< 		for (Iterator i = eventArray.iterator(); i.hasNext();) {
< 			Notification event = (Notification) i.next();
< 			if (event.getEventType() == EventTypes.UNCREATE
< 				|| event.getEventType() == EventTypes.DESTROY)
< 				deletedObjects.add(event.getNotifier());
---
>     /**
>      * @param editingDomain
>      */
>     public static void stopListening(
>             TransactionalEditingDomain editingDomain) {
>         DiagramEventBroker diagramEventBroker = getInstance(editingDomain);
>         if (diagramEventBroker != null) {
>             editingDomain.removeResourceSetListener(diagramEventBroker);
>             instanceMap.remove(editingDomain);
>         }
>     }
>     
>     public Command transactionAboutToCommit(ResourceSetChangeEvent event) {
>         Set deletedObjects = getDeletedObjects(event);
>  
>         CompoundCommand cc = new CompoundCommand();
>         for (Iterator i = event.getNotifications().iterator(); i.hasNext();) {
>             final Notification notification = (Notification) i.next();
>             Object eventFeature = notification.getFeature();
> 
>             // ignore touch event if it is not a resolve event,and ignore the mutable feature
>             // events
>             if ((notification.isTouch() && notification.getEventType() != Notification.RESOLVE)||
>                  NotationPackage.eINSTANCE.getView_Mutable().equals(eventFeature)){
>                  continue;
208,210c240,258
< 		for (Iterator i = eventArray.iterator(); i.hasNext();) {
< 			Notification event = (Notification) i.next();
< 			Object eventFeature = event.getFeature();
---
>             Object notifier = notification.getNotifier();
>             if (notifier instanceof EObject) {
>                 if (deletedObjects.contains(notification.getNotifier()) && !isDestroyEvent(notification))
>                     continue;
>                 Command cmd = handleTransactionAboutToCommitEvent(notification);
>                 if (cmd != null) {
>                     cc.append(cmd);
>                 }
>             }
>         }
>         return cc.isEmpty() ? null : cc;
>     }
> 
> 	public void resourceSetChanged(ResourceSetChangeEvent event) {
>         Set deletedObjects = getDeletedObjects(event);
> 
> 		for (Iterator i = event.getNotifications().iterator(); i.hasNext();) {
> 			final Notification notification = (Notification) i.next();
> 			Object eventFeature = notification.getFeature();
214c262
< 			if ((event.isTouch() && event.getEventType() != Notification.RESOLVE)||
---
> 			if ((notification.isTouch() && notification.getEventType() != Notification.RESOLVE)||
219c267
< 			Object notifier = event.getNotifier();
---
> 			Object notifier = notification.getNotifier();
221,224c269
< 				if (deletedObjects.contains(event.getNotifier())
< 					&& event.getEventType() != EventTypes.UNCREATE
< 					&& event.getEventType() != EventTypes.DESTROY
< 					&& event.getEventType() != EventTypes.UNRESOLVE)
---
> 				if (deletedObjects.contains(notification.getNotifier())  && !isDestroyEvent(notification))
226c271,282
< 				handleElementEvent(event);
---
> 				handleElementEvent(notification);
> 			}
> 		}
> 	}
>     
>     private Set getDeletedObjects(ResourceSetChangeEvent event) {
>         HashSet deletedObjects = new HashSet();
>         // first collect the "destroyed" objects
>         for (Iterator i = event.getNotifications().iterator(); i.hasNext();) {
>             Notification notification = (Notification) i.next();
>             if (isDestroyEvent(notification))
>                 deletedObjects.add(notification.getNotifier());
227a284
>         return deletedObjects;
228a286,297
> 
> 	/**
> 	 * Returns true if this notification is the equivalent of what used to be a
> 	 * destroy event. Assumes the notifier is an <code>EObject</code>.
> 	 * 
> 	 * @param notification
> 	 * @return
> 	 */
> 	private boolean isDestroyEvent(Notification notification) {		
> 		return (notification.getEventType() == Notification.REMOVE || notification
> 			.getEventType() == Notification.REMOVE_MANY)
> 			&& ((EObject) notification.getNotifier()).eContainer() == null;
240,241c309,310
< 	protected void fireNotification(Notification event) {
< 		Collection listenerList = getInterestedNotificationListeners(event);
---
> 	private void fireNotification(Notification event) {
> 		Collection listenerList = getInterestedNotificationListeners(event, false);
254a324,361
> 	private Command fireTransactionAboutToCommit(Notification event) {
> 		Collection listenerList = getInterestedNotificationListeners(event,
> 			true);
> 		if (!listenerList.isEmpty()) {
> 			List listenersSnapShot = new ArrayList(listenerList);
> 			if (!listenerList.isEmpty()) {
> 				CompoundCommand cc = new CompoundCommand();
> 				for (Iterator listenerIT = listenersSnapShot.iterator(); listenerIT
> 					.hasNext();) {
> 					NotificationPreCommitListener listener = (NotificationPreCommitListener) listenerIT
> 						.next();
> 					Command cmd = listener.transactionAboutToCommit(event);
> 					if (cmd != null) {
> 						cc.append(cmd);
> 					}
> 				}
> 				return cc.isEmpty() ? null
> 					: cc;
> 			}
> 		}
> 		return null;
> 	}
> 
> 	/**
> 	 * Add the supplied <tt>listener</tt> to the listener list.
> 	 * 
> 	 * @param target
> 	 *            the traget to listen to
> 	 * @param listener
> 	 *            the listener
> 	 */
> 	public final void addNotificationListener(EObject target,
> 			NotificationPreCommitListener listener) {
> 		if (target != null) {
> 			preListeners.addListener(target, LISTEN_TO_ALL_FEATURES, listener);
> 		}
> 	}
> 
266c373
< 			listeners.addListener(target, LISTEN_TO_ALL_FEATURES, listener);
---
> 			postListeners.addListener(target, LISTEN_TO_ALL_FEATURES, listener);
280a388,403
> 			EStructuralFeature key, NotificationPreCommitListener listener) {
> 		if (target != null) {
> 			preListeners.addListener(target, key, listener);
> 		}
> 	}	
> 	/**
> 	 * Add the supplied <tt>listener</tt> to the listener list.
> 	 * 
> 	 * @param target
> 	 *            the traget to listen to
> 	 * @param key
> 	 *            the key for the listener
> 	 * @param listener
> 	 *            the listener
> 	 */
> 	public final void addNotificationListener(EObject target,
283c406,421
< 			listeners.addListener(target, key, listener);
---
> 			postListeners.addListener(target, key, listener);
> 		}
> 	}
> 
> 	/**
> 	 * remove the supplied <tt>listener</tt> from the listener list.
> 	 * 
> 	 * @param target
> 	 *            the traget to listen to
> 	 * @param listener
> 	 *            the listener
> 	 */
> 	public final void removeNotificationListener(EObject target,
> 			NotificationPreCommitListener listener) {
> 		if (target != null) {
> 			preListeners.removeListener(target, LISTEN_TO_ALL_FEATURES, listener);
298c436
< 			listeners.removeListener(target, LISTEN_TO_ALL_FEATURES, listener);
---
> 			postListeners.removeListener(target, LISTEN_TO_ALL_FEATURES, listener);
313c451
< 			NotificationListener listener) {
---
> 			NotificationPreCommitListener listener) {
315c453
< 			listeners.removeListener(target, key, listener);
---
> 			preListeners.removeListener(target, key, listener);
318a457,472
> 	/**
> 	 * remove the supplied <tt>listener</tt> from the listener list.
> 	 * 
> 	 * @param target
> 	 *            the traget to listen to
> 	 * @param key
> 	 *            the key for the listener
> 	 * @param listener
> 	 *            the listener
> 	 */
> 	public final void removeNotificationListener(EObject target, Object key,
> 			NotificationListener listener) {
> 		if (target != null) {
> 			postListeners.removeListener(target, key, listener);
> 		}
> 	}
321c475,482
< 			stopListening();
---
> 			for (Iterator iter = instanceMap.keySet().iterator(); iter
> 				.hasNext();) {
> 				TransactionalEditingDomain editingDomain = (TransactionalEditingDomain) iter
> 					.next();
> 				editingDomain
> 					.removeResourceSetListener((DiagramEventBroker) ((WeakReference) instanceMap
> 						.get(editingDomain)).get());
> 			}
327c488,490
< 	protected Set getNotificationListeners(Object notifier) {
---
> 	private Set getNotificationListeners(Object notifier, boolean preCommit) {
> 		NotifierToKeyToListenersSetMap listeners = preCommit ? preListeners
> 			: postListeners;
331c494,502
< 	protected Set getNotificationListeners(Object notifier, Object key) {
---
> 
> 	/**
> 	 * @param notifier
> 	 * @param key
> 	 * @param preCommit
> 	 * @return
> 	 */
> 	private Set getNotificationListeners(Object notifier, Object key, boolean preCommit) {
> 		NotifierToKeyToListenersSetMap listeners = preCommit ? preListeners : postListeners;
349,401d519
< 	/** SLOT_MODIFIED filter. */
< 	public final static MFilter SLOT_MODIFIED = new MFilter.And(
< 		new MFilter.NotifierType(EObject.class, false), new MFilter.And(
< 			new MFilter.EventType(EventTypes.SET), new MFilter.EventType(
< 				EventTypes.UNSET)));
< 
< 	/** ELEMENT_INSERTED_INTO_SLOT filter. */
< 	public final static MFilter ELEMENT_INSERTED_INTO_SLOT = new MFilter.And(
< 		new MFilter.NotifierType(EObject.class, false), new MFilter.Or(
< 			new MFilter.EventType(EventTypes.ADD), new MFilter.EventType(
< 				EventTypes.ADD_MANY)));
< 
< 	/** ELEMENT_REMOVED_FROM_SLOT filter. */
< 	public final static MFilter ELEMENT_REMOVED_FROM_SLOT = new MFilter.And(
< 		new MFilter.NotifierType(EObject.class, false), new MFilter.Or(
< 			new MFilter.EventType(EventTypes.REMOVE), new MFilter.EventType(
< 				EventTypes.REMOVE_MANY)));
< 
< 	/** ELEMENT_CREATED filter. */
< 	public final static MFilter ELEMENT_CREATED = new MFilter.And(
< 		new MFilter.NotifierType(EObject.class, false), new MFilter.EventType(
< 			EventTypes.CREATE));
< 
< 	/** ELEMENT_UNCREATED filter */
< 	public final static MFilter ELEMENT_UNCREATED = new MFilter.And(
< 		new MFilter.NotifierType(EObject.class, false), new MFilter.EventType(
< 			EventTypes.UNCREATE));
< 
< 	/** ELEMENT_DELETED filter. */
< 	public final static MFilter ELEMENT_DELETED = new MFilter.And(
< 		new MFilter.NotifierType(EObject.class, false), new MFilter.EventType(
< 			EventTypes.DESTROY));
< 
< 	/** ELEMENT_UNDELETED filter. */
< 	public final static MFilter ELEMENT_UNDELETED = new MFilter.And(
< 		new MFilter.NotifierType(EObject.class, false), new MFilter.EventType(
< 			EventTypes.UNDESTROY));
< 
< 	/** The DiagramEventBroker singleton */
< 	private static DiagramEventBroker instance;
< 
< 	/**
< 	 * gives access to the <code>DiagramEventBroker</code> singleton
< 	 * 
< 	 * @return the <code>DiagramEventBroker</code> singleton
< 	 */
< 	public static DiagramEventBroker getInstance() {
< 		if (instance == null) {
< 			instance = new DiagramEventBroker();
< 		}
< 		return instance;
< 	}
< 
410c528
< 	protected Set getInterestedNotificationListeners(Notification event) {
---
> 	private Set getInterestedNotificationListeners(Notification event, boolean preCommit) {
414c532
< 			.getFeature());
---
> 			.getFeature(), preCommit);
423c541
< 				listenerSet.addAll(getNotificationListeners(notifier.eContainer()));
---
> 				listenerSet.addAll(getNotificationListeners(notifier.eContainer(), preCommit));
426c544
< 			addListenersOfNotifier(listenerSet, notifier.eContainer(), event);
---
> 			addListenersOfNotifier(listenerSet, notifier.eContainer(), event, preCommit);
431c549
< 			addListenersOfNotifier(listenerSet, notifier, event);
---
> 			addListenersOfNotifier(listenerSet, notifier, event, preCommit);
444c562
< 			Notification event) {
---
> 			Notification event, boolean preCommit) {
447c565
< 				.getFeature());
---
> 				.getFeature(), preCommit);
468,472c586,603
< 	protected void handleElementEvent(Notification event) {
< 		MEditingDomain doamin = null;
< 		if (!event.isTouch()
< 			&& !(doamin = MEditingDomainGetter.getMEditingDomain(event))
< 				.isUndoNotification(event) && !doamin.isRedoNotification(event)) {
---
> 	private Command handleTransactionAboutToCommitEvent(Notification event) {
> 		EObject element = (EObject) event.getNotifier();
> 		if (element != null) {
> 			return fireTransactionAboutToCommit(event);
> 		}
> 
> 		return null;
> 	}
> 
> 	/**
> 	 * Forwards the event to all interested listeners.
> 	 * 
> 	 * @param event
> 	 *            the event to handle
> 	 */
> 	private void handleElementEvent(Notification event) {
> 		
> 		if (!event.isTouch()) {
482a614
> 
487a620
> 
