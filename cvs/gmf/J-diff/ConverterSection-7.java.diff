35a36
> import org.eclipse.emf.ecore.resource.ResourceSet;
37c38,39
< import org.eclipse.gmf.gmfgraph.Figure;
---
> import org.eclipse.gmf.gmfgraph.Canvas;
> import org.eclipse.gmf.gmfgraph.DiagramElement;
62c64,65
< 	public static final String OPTION_OUTPUT_RESOURCE_FULL_PATH = SECTION_ID + ".outputResource";
---
> 	public static final String OPTION_OUTPUT_GALLERY_FULL_PATH = SECTION_ID + ".outputGallery";
> 	public static final String OPTION_OUTPUT_DIAGRAM_ELEMENTS_FULL_PATH = SECTION_ID + ".outputDiagramElements";
67c70,71
< 	private final CachedInputValidationState myCachedInputValidationState;
---
> 	private FileNameOption myOutputDiagramElementsPathOption;
> 	private final InputValidationState myCachedInputValidationState;
74c78
< 		myOutputGalleryPathOption = addFileNameOption(true, OPTION_OUTPUT_RESOURCE_FULL_PATH, "Create Figure Gallery", "", THE_ONLY_PAGE_INDEX);
---
> 		myOutputGalleryPathOption = addFileNameOption(true, OPTION_OUTPUT_GALLERY_FULL_PATH, "Create Figure Gallery", "", THE_ONLY_PAGE_INDEX);
75a80,81
> 		myOutputDiagramElementsPathOption = addFileNameOption(true, OPTION_OUTPUT_DIAGRAM_ELEMENTS_FULL_PATH, "Mirror diagram elements", "", THE_ONLY_PAGE_INDEX);
> 		myOutputDiagramElementsPathOption.setRequired(false);
77c83
< 		myCachedInputValidationState = new CachedInputValidationState();
---
> 		myCachedInputValidationState = new InputValidationState(myOutputGalleryPathOption, myOutputDiagramElementsPathOption);
88,89d93
< 		validateOptions(myInputPathOption);
< 		validateOptions(myOutputGalleryPathOption);
98,99c102,104
< 		Resource resource = loadResource(myInputPathOption.getText());
< 		FigureGallery[] figures = findFigures(resource);
---
> 		Resource input = loadResource(myInputPathOption.getText());
> 		FigureGallery[] figures = findFigures(input);
> 		assert(figures.length > 0);
107a113,116
> 			if (!generator.getRunStatus().isOK()){
> 				throw new CoreException(generator.getRunStatus());
> 			}
> 			createSeparateResources(generator.getGenerationInfo(), input);
118c127
< 			resource.unload();
---
> 			input.unload();
120,121d128
< 		if (!generator.getRunStatus().isOK()){
< 			throw new CoreException(generator.getRunStatus());
123c130,146
< 		createFigureGallery(generator.getGenerationInfo());
---
> 	
> 	private void createSeparateResources(StandaloneGenerator.GenerationInfo info, Resource input) throws CoreException {
> 		if (shouldGenerate(myOutputGalleryPathOption)){
> 			String figureGalleryPath = myOutputGalleryPathOption.getText();
> 			ResourceSet separateResourceSet = new ResourceSetImpl();
> 			StandaloneGalleryConverter converter = new StandaloneGalleryConverter(info);
> 			
> 			Resource galleryResource = separateResourceSet.createResource(URI.createFileURI(figureGalleryPath));
> 			galleryResource.getContents().add(converter.convertFigureGallery());
> 			
> 			Resource diagramElementsResource = null;
> 			if (shouldGenerate(myOutputDiagramElementsPathOption)){
> 				Canvas mirror = converter.mirrorDiagramElements(Collections.singleton(input));
> 				if (mirror != null){
> 					diagramElementsResource = separateResourceSet.createResource(URI.createFileURI(myOutputDiagramElementsPathOption.getText()));
> 					diagramElementsResource.getContents().add(mirror);
> 				}
126,130d148
< 	private void createFigureGallery(StandaloneGenerator.GenerationInfo info) throws CoreException {
< 		if (!myOutputGalleryPathOption.isEmpty()){
< 			String path = myOutputGalleryPathOption.getText();
< 			Resource galleryResource = new ResourceSetImpl().createResource(URI.createFileURI(path));
< 			galleryResource.getContents().add(new StandaloneGalleryConverter().convertFigureGallery(info));
132a151,153
> 				if (diagramElementsResource != null){
> 					diagramElementsResource.save(null);
> 				}
134,136c155
< 				throw new CoreException(new Status(//
< 						IStatus.ERROR, MY_PLUGIN_ID, 0, e.getMessage(), e
< 				));
---
> 				throw new CoreException(new Status(IStatus.ERROR, MY_PLUGIN_ID, 0, e.getMessage(), e));
140a160,163
> 	private boolean shouldGenerate(FileNameOption option){
> 		return option.isEnabled() && !option.isEmpty();
> 	}
> 	
194,202c217,219
< 		if (!validatePackageName()){
< 			return;
< 		}
< 		if (!validateInputPath()){
< 			return;
< 		}
< 		if (!validateOutputGalleryPath()){
< 			return;
< 		}
---
> 		if (validateInputPath() && validatePackageName() &&  
> 			validateOutputOption(myOutputDiagramElementsPathOption) && 
> 			validateOutputOption(myOutputGalleryPathOption)){   
204a222
> 	}
283a302,303
> 			myOutputDiagramElementsPathOption.setEnabled(false);
> 			myOutputGalleryPathOption.setEnabled(false);
289,290c309
< 			getTheOnlyPage().setPageComplete(false);
< 			getTheOnlyPage().setErrorMessage(myCachedInputValidationState.getErrorMessage());
---
> 			flagError(myCachedInputValidationState.getErrorMessage());
296,297c315,322
< 	private boolean validateOutputGalleryPath() {
< 		if (myOutputGalleryPathOption.isEmpty()){
---
> 	private boolean validateOutputOption(FileNameOption option) {
> 		if (!option.isEnabled()){
> 			return false;
> 		}
> 		if (!validateMirrorDiagramWithoutFigureGallery()){
> 			return false;
> 		}
> 		if (option.isEmpty()){
301c326,340
< 		String path = myOutputGalleryPathOption.getText();
---
> 		String path = option.getText();
> 		return validatePath(path);
> 	}
> 
> 	private boolean validateMirrorDiagramWithoutFigureGallery(){
> 		if (!myOutputDiagramElementsPathOption.isEmpty()){
> 			if (myOutputGalleryPathOption.isEmpty() || myOutputDiagramElementsPathOption.getText().equals(myOutputGalleryPathOption.getText())){
> 				flagError("In order to mirror diagram elements you have to generate separate figure gallery");
> 				return false;
> 			}
> 		}
> 		return true;
> 	}
> 	
> 	private boolean validatePath(String path){
303c342
< 			URI.createFileURI(path);
---
> 			return URI.createFileURI(path) != null; 
305,307c344
< 			String message = MessageFormat.format("Path {0} is invalid", new Object[] {path});
< 			getTheOnlyPage().setPageComplete(false);
< 			getTheOnlyPage().setErrorMessage(message);
---
> 			flagError(MessageFormat.format("Path {0} is invalid", new Object[] {path}));
310d346
< 		return true;
316a353,357
> 	private void flagError(String message){
> 		getTheOnlyPage().setPageComplete(false);
> 		getTheOnlyPage().setErrorMessage(message);
> 	}
> 	
327c368
< 	private static class CachedInputValidationState {
---
> 	private static class InputValidationState {
329d369
< 		private boolean myCachedIsValid;
330a371,379
> 		private boolean myHasDiagramElement;
> 		private boolean myHasFigure;
> 		private final FileNameOption myDiagramElementsOption;
> 		private final FileNameOption myGalleryOption;
> 		
> 		public InputValidationState(FileNameOption galleryOption, FileNameOption diagramElementsOption){
> 			myGalleryOption = galleryOption;
> 			myDiagramElementsOption = diagramElementsOption;
> 		}
334c383,386
< 				myCachedIsValid = validateInputPath(path); 
---
> 				myCachedPath = path;
> 				validateInputPath(path);
> 				myGalleryOption.setEnabled(myHasFigure);
> 				myDiagramElementsOption.setEnabled(myHasDiagramElement);
339c391
< 			return myCachedIsValid;
---
> 			return myHasFigure;
346,356c398,400
< 		private boolean hasAtLeastOneFigure(Resource resource){
< 			for (TreeIterator contents = resource.getAllContents(); contents.hasNext();){
< 				EObject next = (EObject) contents.next();
< 				if (next instanceof Figure){
< 					return true;
< 				}
< 			}
< 			return false;
< 		}
< 		
< 		private boolean validateInputPath(String path) {
---
> 		private void validateInputPath(String path) {
> 			myHasDiagramElement = false;
> 			myHasFigure = false;
357a402
> 
360c405
< 				return false;
---
> 				return;
364d408
< 			boolean isValid = resource != null && hasAtLeastOneFigure(resource);
366c410
< 				resource.unload();
---
> 				classifyContents(resource);
368c412,413
< 			if (!isValid){
---
> 			
> 			if (!myHasFigure){
370d414
< 				return false;
372c416,437
< 			return true;
---
> 		}
> 
> 		private void classifyContents(Resource resource){
> 			myHasDiagramElement = false;
> 			myHasFigure = false;
> 			for (TreeIterator contents = resource.getAllContents(); contents.hasNext();){
> 				EObject next = (EObject) contents.next();
> 				if (next instanceof FigureGallery){
> 					if (!myHasFigure){
> 						FigureGallery nextGallery = (FigureGallery) next;
> 						myHasFigure = !nextGallery.getFigures().isEmpty();
> 					}
> 					contents.prune();
> 				}
> 				if (next instanceof DiagramElement){
> 					myHasDiagramElement = true;
> 					contents.prune();
> 				}
> 				if (myHasDiagramElement && myHasFigure){
> 					break;
> 				}
> 			}
