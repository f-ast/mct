12d11
< 
15a15
> import org.eclipse.draw2d.geometry.Dimension;
17d16
< import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
20,21c19,20
< import org.eclipse.swt.graphics.Image;
< 
---
> import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderHelper;
> import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderingListener;
29c28,29
< public class RenderedScaledGraphics extends org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScaledGraphics 
---
> public class RenderedScaledGraphics
> 	extends org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScaledGraphics
31a32,43
> 	boolean allowDelayRender = false;
> 	Dimension maximumRenderSize = null;
> 
> 	/*
> 	 * (non-Javadoc)
> 	 * 
> 	 * @see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#allowDelayRender()
> 	 */
> 	public boolean shouldAllowDelayRender() {
> 		return allowDelayRender;
> 	}
> 
34c46,48
< 	 * @param g the base graphics object
---
> 	 * 
> 	 * @param g
> 	 *            the base graphics object
36a51,61
> 		this(g, false, null);
> 	}
> 
> 	/**
> 	 * Constructs a new ScaledGraphics based on the given Graphics object.
> 	 * 
> 	 * @param g
> 	 *            the base graphics object
> 	 * @param allowDelayRender
> 	 */
> 	public RenderedScaledGraphics(Graphics g, boolean allowDelayRender, Dimension maximumRenderSize) {
37a63,64
> 		this.allowDelayRender = allowDelayRender;
> 		this.maximumRenderSize = maximumRenderSize;
39a67,68
> 	private double scale = 1.0;
> 
42c71,72
< 	 * @see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#drawRenderedImage(org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage, int, int, int, int)
---
> 	 * 
> 	 * @see org.eclipse.draw2d.Graphics#scale(double)
44,61c74,76
< 	public RenderedImage drawRenderedImage(RenderedImage srcImage, int x, int y, int width, int height) {
< 		if (getGraphics() instanceof DrawableRenderedImage) {
< 			Rectangle r = zoomRect(x, y, width, height);
< 			return ((DrawableRenderedImage)getGraphics()).drawRenderedImage(srcImage, r.x, r.y, r.width, r.height);
< 		}
< 		else {
< 			Rectangle r = zoomRect(x, y, width, height);
< 			RenderInfo info = srcImage.getRenderInfo();
< 			info.setValues(r.width, r.height, 
< 							info.getFillColor(), info.getOutlineColor(), 
< 							info.shouldMaintainAspectRatio(), info.shouldAntiAlias());
< 			
< 			RenderedImage img = srcImage.getNewRenderedImage(info);
< 			
< 			Image swtImg = img.getSWTImage();
< 			if (swtImg!=null)
< 				getGraphics().drawImage(swtImg, r.x, r.y + r.height - swtImg.getBounds().height);
< 			return img;
---
> 	public void scale(double amount) {
> 		scale = amount;
> 		super.scale(amount);
62a78,97
> 
> 	/*
> 	 * (non-Javadoc)
> 	 * 
> 	 * @see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#drawRenderedImage(org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage,
> 	 *      org.eclipse.draw2d.geometry.Rectangle,
> 	 *      org.eclipse.gmf.runtime.draw2d.ui.render.RenderingListener)
> 	 */
> 	public RenderedImage drawRenderedImage(RenderedImage srcImage,
> 			Rectangle rect, RenderingListener listener) {
> 		return RenderHelper.getInstance(scale, true, shouldAllowDelayRender(), getMaximumRenderSize())
> 			.drawRenderedImage(getGraphics(), srcImage, rect, listener);
> 	}
> 
> 	/* (non-Javadoc)
> 	 * @see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#getMaximumRenderSize()
> 	 */
> 	public Dimension getMaximumRenderSize() {
> 		// TODO Auto-generated method stub
> 		return maximumRenderSize;
