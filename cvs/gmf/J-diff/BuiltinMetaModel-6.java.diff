438a439,441
> 		subStringOp = opf.createReflective(String.class, "substring", int.class);
> 		subStringOp.metaOp.setName("subString");
> 		stringOps.add(subStringOp);
582c585
< 		collectionOps.add(new InternalOperation<Collection>(opf.create("add", collectionTypes.getCollectionType(ecorePkg.getEJavaObject()), ecorePkg.getEJavaObject())) {
---
> 		collectionOps.add(new InternalOperation<Collection>(opf.create("add", CollectionTypesSupport.COLLECTION_OF_OBJECT, ecorePkg.getEJavaObject())) {
588a592,598
> 		collectionOps.add(new InternalOperation<Collection>(opf.create("addAll", CollectionTypesSupport.COLLECTION_OF_OBJECT, CollectionTypesSupport.COLLECTION_OF_OBJECT)) {
> 			@Override
> 			public Object evaluate(Collection target, Object[] params) {
> 				target.addAll((Collection) params[0]);
> 				return target;
> 			}
> 		});
595c605
< 		collectionOps.add(new InternalOperation<Collection>(opf.create("union", collectionTypes.getSetType(ecorePkg.getEJavaObject()), collectionTypes.getCollectionType(ecorePkg.getEJavaObject()))) {
---
> 		collectionOps.add(new InternalOperation<Collection>(opf.create("union", CollectionTypesSupport.COLLECTION_OF_OBJECT, CollectionTypesSupport.COLLECTION_OF_OBJECT)) {
603c613
< 		collectionOps.add(new InternalOperation<Collection>(opf.create("intersect", collectionTypes.getSetType(ecorePkg.getEJavaObject()), collectionTypes.getCollectionType(ecorePkg.getEJavaObject()))) {
---
> 		collectionOps.add(new InternalOperation<Collection>(opf.create("intersect", CollectionTypesSupport.COLLECTION_OF_OBJECT, CollectionTypesSupport.COLLECTION_OF_OBJECT)) {
611c621
< 		collectionOps.add(new InternalOperation<Collection>(opf.create("without", collectionTypes.getSetType(ecorePkg.getEJavaObject()), collectionTypes.getCollectionType(ecorePkg.getEJavaObject()))) {
---
> 		collectionOps.add(new InternalOperation<Collection>(opf.create("without", CollectionTypesSupport.COLLECTION_OF_OBJECT, CollectionTypesSupport.COLLECTION_OF_OBJECT)) {
619c629
< 		collectionOps.add(new InternalOperation<Collection>(opf.create("toSet", collectionTypes.getSetType(ecorePkg.getEJavaObject()))) {
---
> 		collectionOps.add(new InternalOperation<Collection>(opf.create("toSet", CollectionTypesSupport.SET_OF_OBJECT)) {
625c635
< 		collectionOps.add(new InternalOperation<Collection>(opf.create("toList", collectionTypes.getListType(ecorePkg.getEJavaObject()))) {
---
> 		collectionOps.add(new InternalOperation<Collection>(opf.create("toList", CollectionTypesSupport.LIST_OF_OBJECT)) {
637c647
< 		collectionOps.add(new InternalOperation<Collection>(opf.create("containsAll", ecorePkg.getEBoolean(), collectionTypes.getCollectionType(ecorePkg.getEJavaObject()))) {
---
> 		collectionOps.add(new InternalOperation<Collection>(opf.create("containsAll", ecorePkg.getEBoolean(), CollectionTypesSupport.COLLECTION_OF_OBJECT)) {
