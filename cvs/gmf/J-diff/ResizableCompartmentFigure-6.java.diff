75c75
< 	protected AnimatableScrollPane scrollPane;
---
> 	protected ScrollPane scrollPane;
143c143
<         add(scrollPane = createScrollpane(mm));
---
>         add(scrollPane = createScrollPane(mm));
154c154
<      * @deprecated use {@link ResizableCompartmentFigure#createScrollpane(IMapMode)} instead
---
>      * @deprecated use {@link ResizableCompartmentFigure#createScrollPane(IMapMode)} instead
167a168
>      * @deprecated use {@link ResizableCompartmentFigure#createScrollPane(IMapMode)} instead
186c187,200
<         return scrollPane;
---
>         return (AnimatableScrollPane)scrollPane;
>     }
>     
>     /**
>      * Creates the animatable scroll pane
>      * 
>      * @param mm the <code>IMapMode</code> that is used to initialize the
>      * default values of of the scrollpane contained inside the figure.  This is
>      * necessary since the figure is not attached at construction time and consequently
>      * can't get access to the owned IMapMode in the parent containment hierarchy.
>      * @return <code>ScrollPane</code>
>      */
>     protected ScrollPane createScrollPane(IMapMode mm) {
>         return createScrollpane(mm);
209c223,225
< 		scrollPane.expand();
---
>         if (scrollPane instanceof AnimatableScrollPane) {
>             ((AnimatableScrollPane)scrollPane).expand();
>         }
217c233,235
< 		scrollPane.collapse();
---
>         if (scrollPane instanceof AnimatableScrollPane) {
>             ((AnimatableScrollPane)scrollPane).collapse();
>         }
223c241,243
< 		scrollPane.setExpanded(true);
---
>         if (scrollPane instanceof AnimatableScrollPane) {
>             ((AnimatableScrollPane)scrollPane).setExpanded(true);
>         }
231c251,253
< 		scrollPane.setExpanded(false);
---
>         if (scrollPane instanceof AnimatableScrollPane) {
>             ((AnimatableScrollPane)scrollPane).setExpanded(false);
>         }
287c309
< 	public final AnimatableScrollPane getScrollPane() {
---
> 	public final ScrollPane getScrollPane() {
297c319,323
< 		return getScrollPane().isExpanded();
---
>         if (scrollPane instanceof AnimatableScrollPane) {
>             return ((AnimatableScrollPane)scrollPane).isExpanded();
>         }
>         
> 		return true;
