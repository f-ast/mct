26d25
< import org.eclipse.core.runtime.Platform;
37a37
> import org.eclipse.gef.EditPartViewer;
68d67
< import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.DefaultEditableEditPart;
71d69
< import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramFontRegistry;
73a72
> import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;
75a75
> import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
79a80
> import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
92a94,99
> import org.eclipse.jface.preference.IPreferenceStore;
> import org.eclipse.jface.preference.PreferenceConverter;
> import org.eclipse.jface.resource.DeviceResourceException;
> import org.eclipse.jface.resource.FontDescriptor;
> import org.eclipse.jface.resource.JFaceResources;
> import org.eclipse.jface.resource.ResourceManager;
99d105
< import org.eclipse.swt.widgets.Display;
120,121c126,129
< 	/** Used for handling the editable status of the edit part */
< 	private final IEditableEditPart editableEditPart;
---
>     /**
>      * Flag to indicate if the edit part is in edit mode
>      */
>     private boolean isEditable = true;
128a137,142
>      * Cache the font data when a font is created so that it can be
>      * disposed later.
>      */
>     private FontData cachedFontData;
>     
>     /**
136d149
< 		this.editableEditPart = new DefaultEditableEditPart(this);
146,149c159,168
< 		EObject semanticProxy = null;
< 		if (hasNotationView())
< 			semanticProxy = ((View) getModel()).getElement();
< 		else
---
>         EObject semanticElement;
>         EObject semanticProxy;
>         if (hasNotationView()) {
>             semanticProxy = ((View) super.getModel()).getElement();
>             if ((semanticProxy==null)||semanticProxy.eIsProxy()) {
>                 semanticElement = null;
>             } else {
>                 semanticElement = semanticProxy;
>             }
>         } else {
151,152c170,176
< 		
< 		EObject semanticElement = EMFCoreUtil.resolve(getEditingDomain(), semanticProxy);
---
>             if ((semanticProxy!=null) && semanticProxy.eIsProxy()) {
>                 semanticElement = EMFCoreUtil.resolve(getEditingDomain(),
>                     semanticProxy);
>             } else {
>                 semanticElement = semanticProxy;
>             }
>         }
271a296,306
>     public void removeNotify() {
>         super.removeNotify();
>         
>         if (cachedFontData != null) {
>             getResourceManager().destroyFont(
>                 FontDescriptor.createFrom(cachedFontData));
>             cachedFontData = null;
>         }
> 
>     }
> 
290d324
< 		Object model = basicGetModel();
300a335,336
>             else
>                 return null;
302a339
>         Object model = basicGetModel();     
316c353
< 			if (key.isInstance(semanticObject)) {
---
>             if ((semanticObject!=null) && key.isInstance(semanticObject)) {
326,329c363
< 		Object adapter = super.getAdapter(key);
< 		if (adapter != null)
< 			return adapter;
< 		return Platform.getAdapterManager().getAdapter(this, key);
---
>         return super.getAdapter(key);
356,357c390,392
< 		if (getModel()!=null){
< 			View view = ViewUtil.getChildBySemanticHint((View)getModel(),semanticHint);
---
>         View view;
>         if (hasNotationView() && (view = (View) super.getModel()) != null) {
>             view = ViewUtil.getChildBySemanticHint(view,semanticHint);
379,380c414,416
< 		if (getModel()!=null){
< 			return ViewUtil.getChildBySemanticHint((View)getModel(),semanticHint);
---
>         View view;
>         if (hasNotationView() && (view = (View) super.getModel()) != null) {
>             return ViewUtil.getChildBySemanticHint(view, semanticHint);
442c478,482
< 					cc.add( ToggleCanonicalModeCommand.getToggleCanonicalModeCommand(tcmd, true));
---
>                     ToggleCanonicalModeCommand tcmd2 = ToggleCanonicalModeCommand.getToggleCanonicalModeCommand(tcmd, true);
>                     if (tcmd2 != null) {
>                         tcmd2.setDomain(getEditingDomain());
>                     }
>                     cc.add( tcmd2 );
586,590c626
< 		EditDomain editDomain = getEditDomain();
< 		if (editDomain != null) {
< 			return (IDiagramEditDomain) editDomain;
< 		}
< 		return null;
---
>         return (IDiagramEditDomain) getEditDomain();
613c649,650
< 			return ViewUtil.getStructuralFeatureValue((View) getModel(),feature);
---
>             return ViewUtil.getPropertyValue((View) super.getModel(), feature,
>                 feature.getEContainingClass());
624a662,676
>         EObject semanticElement = null;
>         Object basicModel = basicGetModel();
>         if (hasNotationView()) {
>             semanticElement = ((View) basicModel).getElement();
>         } else if (basicModel instanceof EObject) {
>             semanticElement = (EObject) basicModel;
>         }
>         if (semanticElement == null) {
>             return null;
>         }
> 
>         if (!semanticElement.eIsProxy()) {
>             return semanticElement;
>         }
> 
637c689,690
< 								setResult(EMFCoreUtil.resolve(getEditingDomain(), element));
---
>                                 setResult(EMFCoreUtil.resolve(
>                                     getEditingDomain(), element));
762c815
< 		FillStyle style = (FillStyle)getPrimaryView().getStyle(NotationPackage.eINSTANCE.getFillStyle());
---
>         FillStyle style = (FillStyle)getPrimaryView().getStyle(NotationPackage.Literals.FILL_STYLE);
770c823
< 		FontStyle style = (FontStyle) getPrimaryView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
---
>         FontStyle style = (FontStyle) getPrimaryView().getStyle(NotationPackage.Literals.FONT_STYLE);
782c835
< 		FontStyle style = (FontStyle)  getPrimaryView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
---
>         FontStyle style = (FontStyle)  getPrimaryView().getStyle(NotationPackage.Literals.FONT_STYLE);
790c843
< 		LineStyle style = (LineStyle)  getPrimaryView().getStyle(NotationPackage.eINSTANCE.getLineStyle());
---
>         LineStyle style = (LineStyle)  getPrimaryView().getStyle(NotationPackage.Literals.LINE_STYLE);
822c875
< 		Object[] objects = (Object[]) listenerFilters.get(filterId);
---
>         Object[] objects = (Object[]) listenerFilters.remove(filterId);
833c886
< 		listenerFilters.remove(filterId);
---
>         
856,858c909,912
<         Font newFont = DiagramFontRegistry.getInstance().getFont(
< 				Display.getDefault(),
<             fontData);
---
>          if (cachedFontData != null && cachedFontData.equals(fontData)) {
>             // the font was previously set and has not changed; do nothing.
>             return;
>         }
860c914,916
<         if (!newFont.equals(getFigure().getFont())) {
---
>         try {
>             Font newFont = getResourceManager().createFont(
>                 FontDescriptor.createFrom(fontData));
862a919,930
> 
>             if (cachedFontData != null) {
>                 getResourceManager().destroyFont(
>                     FontDescriptor.createFrom(cachedFontData));
>             }
>             cachedFontData = fontData;
>         } catch (DeviceResourceException e) {
>             Trace.catching(DiagramUIPlugin.getInstance(),
>                 DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
>                 "setFont", e); //$NON-NLS-1$
>             Log.error(DiagramUIPlugin.getInstance(),
>                 DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "setFont", e); //$NON-NLS-1$
889,890c957,960
< 		if (hasNotationView())
< 			ViewUtil.setStructuralFeatureValue((View) getModel(), feature, value);
---
>         if (hasNotationView() && (feature != null)) {
>             ViewUtil.setPropertyValue((View) super.getModel(), feature, feature
>                 .getEContainingClass(), value);
>         }
1024a1095
>         EditPartViewer viewer = getViewer();
1028c1099
< 			getViewer().getEditPartRegistry().put(basicGetModel(), this);
---
>             viewer.getEditPartRegistry().put(basicGetModel(), this);
1042c1113
< 		((IDiagramGraphicalViewer) getViewer()).registerEditPartForElement(
---
>         ((IDiagramGraphicalViewer) viewer).registerEditPartForElement(
1048a1120
>         EditPartViewer viewer = getViewer();
1052c1124
< 			Map registry = getViewer().getEditPartRegistry();
---
>             Map registry = viewer.getEditPartRegistry();
1061c1133
< 		((IDiagramGraphicalViewer) getViewer()).unregisterEditPartForElement(
---
>         ((IDiagramGraphicalViewer) viewer).unregisterEditPartForElement(
1113c1185
< 	public final boolean isCanonical() {
---
>     public boolean isCanonical() {
1130c1202,1224
< 		this.editableEditPart.disableEditMode();		
---
>         if (!isEditModeEnabled()) {
>             return;
>         }
> 
>         List l = getSourceConnections();
>         int size = l.size();
>         for (int i = 0; i < size; i++) {
>             Object obj = l.get(i);
>             if (obj instanceof IEditableEditPart) {
>                 ((IEditableEditPart) obj).disableEditMode();
>             }
>         }
> 
>         List c = getChildren();
>         size = c.size();
>         for (int i = 0; i < size; i++) {
>             Object obj = c.get(i);
>             if (obj instanceof IEditableEditPart) {
>                 ((IEditableEditPart) obj).disableEditMode();
>             }
>         }
> 
>         isEditable = false;
1137c1231,1253
< 		this.editableEditPart.enableEditMode();
---
>         if (isEditModeEnabled()) {
>             return;
>         }
> 
>         isEditable = true;
> 
>         List c = getChildren();
>         int size = c.size();
>         for (int i = 0; i < size; i++) {
>             Object obj = c.get(i);
>             if (obj instanceof IEditableEditPart) {
>                 ((IEditableEditPart) obj).enableEditMode();
>             }
>         }
> 
>         List l = getSourceConnections();
>         size = l.size();
>         for (int i = 0; i < size; i++) {
>             Object obj = l.get(i);
>             if (obj instanceof IEditableEditPart) {
>                 ((IEditableEditPart) obj).enableEditMode();
>             }
>         }
1148,1149c1264
< 		
< 		return this.editableEditPart.isEditModeEnabled();
---
>         return isEditable;
1209,1210c1324,1326
< 		if (getRoot() instanceof IDiagramPreferenceSupport) {
< 			return ((IDiagramPreferenceSupport) getRoot()).getPreferencesHint();
---
>         RootEditPart root = getRoot();
>         if (root instanceof IDiagramPreferenceSupport) {
>             return ((IDiagramPreferenceSupport) root).getPreferencesHint();
1241,1242c1357,1358
< 		if (NotationPackage.eINSTANCE.getView_PersistedChildren().equals(event.getFeature())||
< 				NotationPackage.eINSTANCE.getView_TransientChildren().equals(event.getFeature())) {
---
>         if (NotationPackage.Literals.VIEW__PERSISTED_CHILDREN.equals(event.getFeature())||
>                 NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN.equals(event.getFeature())) {
1244c1360
< 		}else if (NotationPackage.eINSTANCE.getView_Visible().equals(event.getFeature())) {
---
>         }else if (NotationPackage.Literals.VIEW__VISIBLE.equals(event.getFeature())) {
1252c1368
< 		else if (NotationPackage.eINSTANCE.getView_Element().equals(event.getFeature())) {
---
>         else if (NotationPackage.Literals.VIEW__ELEMENT.equals(event.getFeature())) {
1261c1377
< 	final protected IMapMode getMapMode() {
---
>      protected IMapMode getMapMode() {
1312a1429,1439
>     protected IFigure createFigure() {
>         // TODO Auto-generated method stub
>         return null;
>     }
> 
>     public void setModel(Object model) {
>         // reset the editing domain cache
>         editingDomain = null;
>         super.setModel(model);
>     }
> 
1332a1460,1504
>     
>    public Object getPreferredValue(EStructuralFeature feature) {
>         Object preferenceStore = getDiagramPreferencesHint()
>             .getPreferenceStore();
>         if (preferenceStore instanceof IPreferenceStore) {
>             if (feature == NotationPackage.eINSTANCE.getLineStyle_LineColor()) {
>                 
>                 return FigureUtilities.RGBToInteger(PreferenceConverter
>                     .getColor((IPreferenceStore) preferenceStore,
>                         IPreferenceConstants.PREF_LINE_COLOR));
>                 
>             } else if (feature == NotationPackage.eINSTANCE
>                 .getFontStyle_FontColor()) {
>                 
>                 return FigureUtilities.RGBToInteger(PreferenceConverter
>                     .getColor((IPreferenceStore) preferenceStore,
>                         IPreferenceConstants.PREF_FONT_COLOR));
>                 
>             } else if (feature == NotationPackage.eINSTANCE
>                 .getFillStyle_FillColor()) {
>                 
>                 return FigureUtilities.RGBToInteger(PreferenceConverter
>                     .getColor((IPreferenceStore) preferenceStore,
>                         IPreferenceConstants.PREF_FILL_COLOR));
>                 
>             }
>         }
> 
>         return getStructuralFeatureValue(feature);
>     }    
>     /**
>      * Gets the resource manager to remember the resources allocated for this
>      * graphical viewer. All resources will be disposed when the graphical
>      * viewer is closed if they have not already been disposed.
>      * 
>      * @return the resource manager
>      */
>     protected ResourceManager getResourceManager() {
>         EditPartViewer viewer = getViewer();
>         if (viewer instanceof DiagramGraphicalViewer) {
>             return ((DiagramGraphicalViewer) viewer).getResourceManager();
>         }
>         return JFaceResources.getResources();
>     }    
>     
