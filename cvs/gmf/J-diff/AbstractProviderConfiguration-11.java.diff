2c2
<  * Copyright (c) 2002, 2005 IBM Corporation and others.
---
>  * Copyright (c) 2002, 2006 IBM Corporation and others.
17a18
> import java.util.Dictionary;
107a109,112
>      * A map to hold the bundle to exception list
>      */
>     private static Map bundleToExceptionsSetMap = new HashMap();	
> 	/**
399a405,406
>         protected String dataForIntialize = NULL;
> 		
464a472,483
>             dataForIntialize = string;
> 		}
>         
>         protected boolean isInitialized(){
>             return (dataForIntialize==null);
>         }
> 
>         protected void initialize() {
>             //check if already initialized
>             if (isInitialized())
>                 return;
>             try {
466c485
< 			string = parseName(string.trim());
---
>                 dataForIntialize = parseName(dataForIntialize.trim());
468c487
< 			string = parseParameterList(string.trim());
---
>                 dataForIntialize = parseParameterList(dataForIntialize.trim());
522,523c541,542
< 			if (string.length() != 0) {
< 				if (string.charAt(0) != '.')
---
>     			if (dataForIntialize.length() != 0) {
>     				if (dataForIntialize.charAt(0) != '.')
525c544
< 				next = new MethodDescriptor(string.substring(1).trim());
---
>     				next = new MethodDescriptor(dataForIntialize.substring(1).trim());
529a549,551
>             }finally{
>                 dataForIntialize = null;
>             }
720a743
>         
755a779,786
>             dataForIntialize = string;
> 		}
>         
>         public void initialize() {
>             // check if already initialized
>             if (isInitialized())
>                 return;
>             try {
757c788
< 			string = parsePluginID(string.trim());
---
>                 dataForIntialize = parsePluginID(dataForIntialize.trim());
759c790
< 			string = parseClassName(string.trim());
---
>                 dataForIntialize = parseClassName(dataForIntialize.trim());
761c792
< 			string = parseName(string.trim());
---
>                 dataForIntialize = parseName(dataForIntialize.trim());
763c794
< 			string = parseParameterList(string.trim());
---
>                 dataForIntialize = parseParameterList(dataForIntialize.trim());
825,826c856,857
< 			if (string.length() != 0) {
< 				if (string.charAt(0) != '.')
---
>     			if (dataForIntialize.length() != 0) {
>     				if (dataForIntialize.charAt(0) != '.')
828c859
< 				setNext(new MethodDescriptor(string.substring(1).trim()));
---
>     				setNext(new MethodDescriptor(dataForIntialize.substring(1).trim()));
832a864,866
>             }finally{
>                 dataForIntialize = null;
>             }
1176c1210
< 					Bundle bundle = getPluginBundle(pluginId);
---
> 					Bundle bundle = basicGetPluginBundle(pluginId);
1177a1212,1216
>                         // never load the class if the bundle is not active other wise
>                         // we will cause the plugin to load
>                         // unless the class is in the exception list
>                         int state = bundle.getState();
>                         if ( state == org.osgi.framework.Bundle.ACTIVE || isInExceptionList(bundle,className)){
1179a1219,1222
>                             if (state == org.osgi.framework.Bundle.ACTIVE){
>                                 bundleToExceptionsSetMap.remove(bundle);
>                             }
>                         }
1191a1235,1269
> 	private static boolean isInExceptionList(Bundle bundle, String className) {
>         String packageName = className.substring(0,className.lastIndexOf('.'));
>         Set exceptionSet = (Set)bundleToExceptionsSetMap.get(bundle);
>         if (exceptionSet==null){
>             Dictionary dict = bundle.getHeaders();
>             String value = (String)dict.get("Eclipse-LazyStart"); //$NON-NLS-1$
>             if (value!=null){
>                 int index  = value.indexOf("exceptions"); //$NON-NLS-1$
>                 if (index!=-1){
>                     try {
>                         int start = value.indexOf('"',index+1);
>                         int end = value.indexOf('"',start+1);
>                         String exceptions = value.substring(start+1,end);
>                         exceptionSet = new HashSet(2);
>                         StringTokenizer tokenizer = new StringTokenizer(exceptions, ","); //$NON-NLS-1$
>                         while (tokenizer.hasMoreTokens()) {
>                             exceptionSet.add(tokenizer.nextToken().trim());
>                         }
>                     }catch(IndexOutOfBoundsException exception){
>                         // this means the MF did not follow the documented format for the exceptions list
>                         // so i'll consider it empty
>                         exceptionSet = Collections.EMPTY_SET;
>                     }
>                     
>                 }else{
>                     exceptionSet = Collections.EMPTY_SET;
>                 }
>             }else{
>                 exceptionSet = Collections.EMPTY_SET;
>             }
>             bundleToExceptionsSetMap.put(bundle, exceptionSet);
>         }
>         return exceptionSet.contains(packageName);
>     }
> 
1201c1279
< 		Bundle bundle = Platform.getBundle(pluginId);
---
> 		Bundle bundle = basicGetPluginBundle(pluginId);
1206a1285,1288
>     private static Bundle basicGetPluginBundle(String pluginId) {
>         return Platform.getBundle(pluginId);   
>     }
> 
1334a1417,1419
>             if (!methodDescriptor.isInitialized()){
>                 methodDescriptor.initialize();
>             }
1369a1455,1457
>             if (!methodDescriptor.isInitialized()){
>                 methodDescriptor.initialize();
>             }
