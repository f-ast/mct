18a19,21
> import org.eclipse.core.runtime.IStatus;
> import org.eclipse.gmf.runtime.common.core.internal.CommonCorePlugin;
> import org.eclipse.gmf.runtime.common.core.internal.CommonCoreStatusCodes;
20a24
> import org.eclipse.gmf.runtime.common.core.util.Log;
86c90
< 				if (descriptor.provides(operation)) {
---
> 				if (safeProvides(descriptor, operation)) {
126c130
< 				if (descriptor.provides(operation)) {
---
> 				if (safeProvides(descriptor, operation)) {
243c247
< 			if (descriptor.provides(operation)) {
---
> 			if (safeProvides(descriptor, operation)) {
280a285,319
> 	
> 	/**
> 	 * Safely calls a provider's provides() method.
> 	 * 
> 	 * The provider must not be null.
> 	 * 
> 	 * Returns true if there were no exceptions thrown and the provides() method
> 	 * returns true.  Returns false if an exception was thrown or the provides()
> 	 * method returns false.
> 	 * 
> 	 * An entry is added to the log if the provider threw an exception.  
> 	 * 
> 	 * @param provider to safely execute the provides() method
> 	 * @param operation passed into the provider's provides() method
> 	 * @return true if there were no exceptions thrown and the provides() method
> 	 * returns true.  Returns false if an exception was thrown or the provides()
> 	 * method returns false.
> 	 */
> 	private static boolean safeProvides(IProvider provider, IOperation operation) {
> 		assert provider != null;
> 		
> 		try {
> 			return provider.provides(operation);
> 		}
> 		catch (Exception e) {
> 			Log.log(
> 				CommonCorePlugin.getDefault(),
> 				IStatus.ERROR,
> 				CommonCoreStatusCodes.SERVICE_FAILURE,
> 				"Ignoring provider " + provider + " since it threw an exception in the provides() method",  //$NON-NLS-1$ //$NON-NLS-2$
> 				e);
> 			return false;
> 		}
> 		
> 	}	
