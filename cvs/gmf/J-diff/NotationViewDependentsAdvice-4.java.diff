14a15,18
> import java.util.HashSet;
> import java.util.Iterator;
> import java.util.Map;
> import java.util.Set;
17a22,24
> import org.eclipse.emf.ecore.EStructuralFeature.Setting;
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
> import org.eclipse.emf.transaction.util.TransactionUtil;
20c27
< import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
---
> import org.eclipse.gmf.runtime.emf.core.util.CrossReferenceAdapter;
22a30
> import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;
39,41d46
< 	protected ICommand getBeforeDestroyDependentsCommand(DestroyDependentsRequest request) {
< 		EObject destructee = request.getElementToDestroy();
< 		ICommand result = null;
43c48,53
< 		// handle views referencing a semantic element being destroyed
---
> 	public ICommand getBeforeEditCommand(IEditCommandRequest request) {
> 		if (request instanceof DestroyDependentsRequest) {
> 			return getBeforeDestroyDependentsCommand((DestroyDependentsRequest) request);
> 		}
> 		return null;
> 	}
45,47c55,57
<         Collection semanticReferencers = EMFCoreUtil.getReferencers(
<                 destructee,
<                 new EReference[] {NotationPackage.Literals.VIEW__ELEMENT});
---
> 	public ICommand getAfterEditCommand(IEditCommandRequest request) {		
> 		return null;
> 	}
49,51c59,60
<         result = CompositeCommand.compose(
<         		result,
<         		request.getDestroyDependentsCommand(semanticReferencers));
---
> 	protected ICommand getBeforeDestroyDependentsCommand(
> 			DestroyDependentsRequest request) {
52a62,65
> 		EObject destructee = request.getElementToDestroy();
> 		CrossReferenceAdapter crossReferenceAdapter = getCrossReferenceAdapter(request, destructee);
> 		ICommand result = getDestroyDependentsCommand(destructee, request,
> 				NotationPackage.Literals.VIEW__ELEMENT, crossReferenceAdapter);
54d66
<         
56,63c68,69
<             Collection nodeEntryKeys = EMFCoreUtil.getReferencers(
<             		destructee,
<             		new EReference[] {NotationPackage.Literals.NODE_ENTRY__KEY});
< 
<             result = CompositeCommand.compose(
<             		result,
<             		request.getDestroyDependentsCommand(nodeEntryKeys));
<         }
---
> 			result = CompositeCommand.compose(result, getDestroyDependentsCommand(destructee, request,
> 				NotationPackage.Literals.NODE_ENTRY__KEY, crossReferenceAdapter));
66d71
<         
70,76c75,83
<             result = CompositeCommand.compose(
<             		result,
<             		request.getDestroyDependentsCommand(view.getSourceEdges()));
<         	
<             result = CompositeCommand.compose(
<             		result,
<             		request.getDestroyDependentsCommand(view.getTargetEdges()));
---
> 				if (view.eIsSet(NotationPackage.Literals.VIEW__SOURCE_EDGES)) {
> 					result = CompositeCommand.compose(result, request
> 						.getDestroyDependentsCommand(view.getSourceEdges()));
> 				}
> 				if (view.eIsSet(NotationPackage.Literals.VIEW__TARGET_EDGES)) {
> 					result = CompositeCommand.compose(result, request
> 						.getDestroyDependentsCommand(view.getTargetEdges()));
> 				}
> 			}			
78d84
<         
80a87,140
> 	
> 	private CrossReferenceAdapter getCrossReferenceAdapter(
> 			DestroyDependentsRequest request, EObject destructee) {
> 		
> 		CrossReferenceAdapter crossReferenceAdapter = null;
> 		Map cacheMaps = (Map) request.getParameter("Cache_Maps");//$NON-NLS-1$ RequestCacheEntries.Cache_Maps
> 		if (cacheMaps != null) {
> 			crossReferenceAdapter = (CrossReferenceAdapter) cacheMaps
> 					.get("CrossRefAdapter");//$NON-NLS-1$ RequestCacheEntries.CrossRefAdapter
> 		}
> 
> 		if (crossReferenceAdapter == null) {
> 			crossReferenceAdapter = CrossReferenceAdapter
> 					.getExistingCrossReferenceAdapter(destructee);
> 			if (crossReferenceAdapter == null) {
> 				TransactionalEditingDomain domain = TransactionUtil
> 						.getEditingDomain(destructee);
> 				if (domain != null) {
> 					crossReferenceAdapter = CrossReferenceAdapter
> 							.getCrossReferenceAdapter(domain.getResourceSet());
> 				}
> 			}
> 		}
> 		return crossReferenceAdapter;
> 	}
> 	
> 	
> 	private ICommand getDestroyDependentsCommand(EObject destructee,
> 			DestroyDependentsRequest request, EReference eRef, CrossReferenceAdapter crossReferenceAdapter) {
> 		
> 		if (crossReferenceAdapter != null) {
> 			Collection revRefs = crossReferenceAdapter
> 				.getNonNavigableInverseReferences(destructee);
> 			if (revRefs.isEmpty() == false) {
> 				Set set = null;
> 				Iterator it = revRefs.iterator();
> 				while (it.hasNext()) {
> 					Setting setting = (Setting) it.next();
> 					if (setting.getEStructuralFeature() == eRef) {
> 						if (set == null) {
> 							set = new HashSet();
> 						}
> 						set.add(setting.getEObject());
> 					}
> 				}
> 
> 				if (set != null) {
> 					return request.getDestroyDependentsCommand(set);
> 				}
> 			}
> 		}
> 
> 		return null;
> 	}
