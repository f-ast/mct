17d16
< import java.util.HashSet;
19d17
< import java.util.Set;
24d21
< import org.eclipse.emf.ecore.util.EcoreUtil;
30c27
< import org.eclipse.gmf.common.codegen.ImportAssistant;
---
> import org.eclipse.gmf.gmfgraph.ChildAccess;
36a34
> import org.eclipse.gmf.gmfgraph.FigureDescriptor;
38c36
< import org.eclipse.gmf.gmfgraph.FigureHandle;
---
> import org.eclipse.gmf.gmfgraph.RealFigure;
47d44
< import org.eclipse.gmf.internal.common.codegen.NullImportAssistant;
50d46
<  * Stateful. Don't reuse.
57d52
< 	private final Set<Figure> processedFigures;
66,67c61
< 		processedFigures = new HashSet<Figure>();
< 		figureGenerator = new FigureGenerator(runtimeToken, mapModeCodeGenStrategy, null, true, dynamicFigureTemplates);
---
> 		figureGenerator = new FigureGenerator(runtimeToken, null, mapModeCodeGenStrategy, null, true, dynamicFigureTemplates);
69a64
> 	@Override
74c69
< 		final Viewmap viewmap = createViewmap(node.getNodeFigure());
---
> 		final Viewmap viewmap = createViewmap(node.getFigure());
80a76
> 	@Override
85c81
< 		return createViewmap(link.getConnectionFigure());
---
> 		return createViewmap(link.getFigure());
88,90c84,92
< 	public Viewmap create(DiagramLabel label) {
< 		if (label.getFigure() == null) {
< 			return super.create(label);
---
> 	@Override
> 	public Viewmap create(DiagramLabel diagramLabel) {
> 		if (diagramLabel.getFigure() == null) {
> 			return super.create(diagramLabel);
> 		}
> 		if (diagramLabel.getAccessor() == null) {
> 			return createViewmap(diagramLabel.getFigure());
> 		} else {
> 			return createViewmap(diagramLabel.getFigure(), diagramLabel.getAccessor());
92d93
< 		return createViewmap(label.getFigure());
94a96
> 	@Override
96,97c98
< 		FigureHandle handle = compartment.getFigure();
< 		if (handle == null){
---
> 		if (compartment.getFigure() == null){
99a101
> 		if (compartment.getAccessor() == null) {
100a103,105
> 		} else {
> 			return createViewmap(compartment.getFigure(), compartment.getAccessor());
> 		}
103c108
< 	private Viewmap createFigureViewmap(Figure figure) {
---
> 	private Viewmap createViewmap(FigureDescriptor figureDescriptor) {
105,116c110,114
< 		if (EcoreUtil.isAncestor(processedFigures, figure.getParent())) {
< 			// we generated code for parent, thus (if figure generation logic not changed)
< 			// all inner figures were generated as well (with accessors), thus, everything
< 			// we need here is just reference one
< 			ParentAssignedViewmap v = GMFGenFactory.eINSTANCE.createParentAssignedViewmap();
< 			// XXX yet another assumption - getter name
< 			// FIXME introduce feedback to FigureGenerator to let us know exact names
< 			v.setGetterName(NamingStrategy.INSTANCE.getChildFigureGetterName(figure));
< 			v.setFigureQualifiedClassName(fqnSwitch.get(figure));
< 			result = v;
< 		} else {
< 			if (isBareInstance(figure)) {
---
> 		if (figureDescriptor.getActualFigure() == null) {
> 			throw new NullPointerException();
> 		}
> 		final Figure figure = figureDescriptor.getActualFigure();
> 		if (figure instanceof RealFigure && isBareInstance((RealFigure) figure)) {
118c116
< 				v.setFigureQualifiedClassName(fqnSwitch.get(figure));
---
> 			v.setFigureQualifiedClassName(figureGenerator.fqnSwitch(figure));
123,125c121,122
< 				ImportAssistant importManager = new NullImportAssistant(null, CodeGenUtil.validJavaIdentifier(figure.getName())); 
< 				v.setClassBody(figureGenerator.go(figure, importManager));
< 				v.setClassName(importManager.getCompilationUnitName());
---
> 			v.setClassBody(figureGenerator.go(figureDescriptor));
> 			v.setClassName(getCompilationUnitName(figureDescriptor));
128,132c125,126
< 		}
< 		if (false == result instanceof ParentAssignedViewmap) {
< 			setupPluginDependencies(result, figure);
< 		} // otherwise, dependencies are already there
< 		processedFigures.add(figure);
---
> 		setupPluginDependencies(result, figureDescriptor.getActualFigure());
> 		setupStyleAttributes(result, figureDescriptor.getActualFigure());
136,146c130,137
< 	private Viewmap createViewmap(FigureHandle figure) {
< 		Viewmap result;
< 		if (figure instanceof Figure) {
< 			result = createFigureViewmap((Figure) figure);
< 		} else if (figure instanceof FigureAccessor) {
< 			result = createFigureAccessorViewmap((FigureAccessor) figure);
< 		} else {
< 			throw new IllegalStateException();
< 		}
< 		setupStyleAttributes(result, figure);
< 		return result;
---
> 	private Viewmap createViewmap(FigureDescriptor owner, ChildAccess labelAccess) {
> 		ParentAssignedViewmap v = GMFGenFactory.eINSTANCE.createParentAssignedViewmap();
> 		// XXX yet another assumption - getter name
> 		// FIXME introduce feedback to FigureGenerator to let us know exact names
> 		v.setGetterName(NamingStrategy.getChildFigureGetterName(labelAccess));
> 		v.setFigureQualifiedClassName(figureGenerator.fqnSwitch(labelAccess.getFigure()));
> 		setupStyleAttributes(v, labelAccess.getFigure());
> 		return v;
148a140
> 	// XXX needs review
153c145
< 			v.setFigureQualifiedClassName(figureAccess.getTypedFigure().getQualifiedClassName());
---
> 			v.setFigureQualifiedClassName(figureGenerator.fqnSwitch(figureAccess.getTypedFigure()));
169,170c161,162
< 			if (next instanceof Figure){
< 				current = next;
---
> 			if (next == null){
> 				return null;
174c166,167
< 				return null;
---
> 				current = next;
> 			}
176a170,173
> 
> 	private static String getCompilationUnitName(FigureDescriptor fd) {
> 		// XXX either use Util.ext or have some template to invoke
> 		return CodeGenUtil.validJavaIdentifier(CodeGenUtil.capName(fd.getName()));
179c176
< 	private static boolean isBareInstance(Figure figure){
---
> 	private static boolean isBareInstance(RealFigure figure) {
184,187c181,182
< 		featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getIdentity_Name());
< 		featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getFigure_Children());
< 		featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getFigureMarker_Parent());
< 		featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getFigureHandle_ReferencingElements());
---
> 		featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getRealFigure_Name());
> 		featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getRealFigure_Children());
189d183
< 			featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getCustomClass_BundleName());
