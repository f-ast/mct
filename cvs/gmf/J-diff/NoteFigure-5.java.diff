16a17
> import org.eclipse.draw2d.geometry.Insets;
19d19
< 
21c21
< import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
---
> import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;
37a38,43
> 	private boolean diagrsamLinkMode = false;;
> 
> 
> 	private boolean withDanglingCorner = true;
> 	private int lineWidth = 1;  
> 
39c45
< 	 * ther clip height constant
---
> 	 * the clip height constant in device coordinates
41c47
< 	static public final int CLIP_HEIGHT = MapMode.DPtoLP(12);
---
> 	static public final int CLIP_HEIGHT_DP = 12;
44c50
< 	 * the margin constant 
---
> 	 * the margin constant in device coordinates
46c52
< 	static public final int MARGIN = MapMode.DPtoLP(5);
---
> 	static public final int MARGIN_DP = 5;
49c55
< 	 * the clip margin constant
---
> 	 * the clip margin constant in device coordinates
51,55c57
< 	static public final int CLIP_MARGIN = MapMode.DPtoLP(14);
< 	static private final int clipHeight = CLIP_HEIGHT;
< 	static private final int clipWidth = CLIP_HEIGHT + MapMode.DPtoLP(1);
< 	private static final int DEFAULT_NOTE_WIDTH  = MapMode.DPtoLP(100);
< 	private static final int DEFAULT_NOTE_HEIGHT = MapMode.DPtoLP(56);
---
> 	static public final int CLIP_MARGIN_DP = 14;
57c59,63
< 	private boolean diagrsamLinkMode = false;;
---
> 	/**
> 	 * @deprecated Clients should map <code>MARGIN_DP</code> to logical coordinates using the <code>IMapMode</code>
> 	 * object retrieve from @link{GraphicalEditPart#getMapMode()} or @link{MapModeUtil.getMapMode(IFigure)}
> 	 */
> 	public static final int MARGIN = MapModeUtil.getMapMode().DPtoLP(5);
58a65,69
> 	/**
> 	 * @deprecated Clients should map <code>CLIP_HEIGHT_DP</code> to logical coordinates using the <code>IMapMode</code>
> 	 * object retrieve from @link{GraphicalEditPart#getMapMode()} or @link{MapModeUtil.getMapMode(IFigure)}
> 	 */
> 	static public final int CLIP_HEIGHT = MapModeUtil.getMapMode().DPtoLP(12);
60,61c71,75
< 	private boolean withDanglingCorner = true;
< 	private int lineWidth = 1;  
---
> 	/**
> 	 * @deprecated Clients should map <code>CLIP_HEIGHT_DP</code> to logical coordinates using the <code>IMapMode</code>
> 	 * object retrieve from @link{GraphicalEditPart#getMapMode()} or @link{MapModeUtil.getMapMode(IFigure)}
> 	 */
> 	static public final int CLIP_MARGIN = MapModeUtil.getMapMode().DPtoLP(14);
64c78,80
< 	 * constructor
---
> 	 * Constructor
> 	 * 
> 	 * @deprecated use @link(NoteFigure(int width, int height, Insets insets)) instead
67c83,98
< 		setDefaultSize(new Dimension(DEFAULT_NOTE_WIDTH, DEFAULT_NOTE_HEIGHT));
---
> 		this(MapModeUtil.getMapMode().DPtoLP(100), MapModeUtil.getMapMode().DPtoLP(56), 
> 			new Insets(MapModeUtil.getMapMode().DPtoLP(MARGIN_DP), 
> 						MapModeUtil.getMapMode().DPtoLP(MARGIN_DP), 
> 						MapModeUtil.getMapMode().DPtoLP(MARGIN_DP), 
> 						MapModeUtil.getMapMode().DPtoLP(CLIP_MARGIN_DP)));
> 	}
> 	
> 	/**
> 	 * Constructor
> 	 * 
> 	 * @param width <code>int</code> value that is the default width in logical units
> 	 * @param height <code>int</code> value that is the default height in logical units
> 	 * @param insets <code>Insets</code> that is the empty margin inside the note figure in logical units
> 	 */
> 	public NoteFigure(int width, int height, Insets insets) {
> 		super(width, height);
69,73c100
< 			new MarginBorder(
< 				NoteFigure.MARGIN,
< 				NoteFigure.MARGIN,
< 				NoteFigure.MARGIN,
< 				NoteFigure.CLIP_MARGIN));
---
> 			new MarginBorder(insets.top, insets.left, insets.bottom, insets.right));
77c104
< 		layout.setSpacing(MapMode.DPtoLP(5));
---
> 		layout.setSpacing(insets.top);
80a108,115
> 	private int getClipHeight() {
> 		return MapModeUtil.getMapMode(this).DPtoLP(12);
> 	}
> 	
> 	private int getClipWidth() {
> 		return getClipHeight() + MapModeUtil.getMapMode(this).DPtoLP(1);
> 	}
> 	
88a124
> 		
91,92c127,128
< 			p.addPoint(r.x + r.width - clipWidth, r.y);
< 			p.addPoint(r.x + r.width - 1, r.y + clipHeight);
---
> 			p.addPoint(r.x + r.width - getClipWidth(), r.y);
> 			p.addPoint(r.x + r.width - 1, r.y + getClipHeight());
113,115c149,151
< 				corner.addPoint(r.x + r.width - clipWidth, r.y);
< 				corner.addPoint(r.x + r.width - clipWidth, r.y + clipHeight);
< 				corner.addPoint(r.x + r.width, r.y + clipHeight);
---
> 				corner.addPoint(r.x + r.width - getClipWidth(), r.y);
> 				corner.addPoint(r.x + r.width - getClipWidth(), r.y + getClipHeight());
> 				corner.addPoint(r.x + r.width, r.y + getClipHeight());
