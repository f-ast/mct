28a29
> import org.eclipse.emf.ecore.util.EContentsEList;
194a196,197
> 	private EContentsEList allChildren = null;
> 
319,327c322,326
< 		List children = new ArrayList();	
< 		if (persistedChildren!=null &&
< 			persistedChildren.size()>0){
< 			children.addAll(getPersistedChildren());
< 		}
< 		
< 		if (transientChildren!=null&&
< 			transientChildren.size()>0){
< 			children.addAll(getTransientChildren());
---
> 		if (allChildren == null){
> 			allChildren =  new EContentsEList(this, 
> 				new EStructuralFeature[] {
> 					NotationPackage.eINSTANCE.getView_PersistedChildren(),
> 					NotationPackage.eINSTANCE.getView_TransientChildren()});
329,330c328
< 		
< 		return new BasicEList.UnmodifiableEList(children.size(), children.toArray());
---
> 		return allChildren;
787a786,812
> 	
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 */
> 	public EList getVisibleChildren() {
> 		List _children = new ArrayList();	
> 		if (persistedChildren!=null &&
> 			persistedChildren.size()>0){
> 			for (Iterator iter = getPersistedChildren().iterator(); iter.hasNext();) {
> 				View view = (View) iter.next();
> 				if (view.isVisible())
> 					_children.add(view);
> 				}
> 		}
> 		
> 		if (transientChildren!=null&&
> 			transientChildren.size()>0){
> 			for (Iterator iter = getTransientChildren().iterator(); iter.hasNext();) {
> 				View view = (View) iter.next();
> 				if (view.isVisible())
> 					_children.add(view);
> 				}
> 		}
> 		return new BasicEList.UnmodifiableEList(_children.size(), _children.toArray());
> 	}
> 
