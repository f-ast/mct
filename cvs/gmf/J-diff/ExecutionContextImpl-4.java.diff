61c61
<         this (resourceManager, (Map<String, Variable>) null);
---
>         this (resourceManager, (Collection<Variable>) null);
64c64
<     public ExecutionContextImpl(ResourceManager resourceManager, Map<String, Variable> globalVars) {
---
>     public ExecutionContextImpl(ResourceManager resourceManager, Collection<Variable> globalVars) {
68c68
<     public ExecutionContextImpl(ResourceManager resourceManager, ResourceMarker resource, Map<String, Variable> variables, Map<String, Variable> globalVars) {
---
>     public ExecutionContextImpl(ResourceManager resourceManager, ResourceMarker resource, Collection<Variable> variables, Collection<Variable> globalVars) {
72c72,74
< 			this.variables.putAll(variables);
---
> 			for (Variable v : variables) {
> 				this.variables.put(v.getName(), v);
> 			}
75c77,79
< 			this.globalVars.putAll (globalVars);
---
>         	for (Variable v : globalVars) {
>         		this.globalVars.put(v.getName(), v);
>         	}
78a83,90
>     // copy constuctor
>     protected ExecutionContextImpl(ExecutionContextImpl original) {
>     	this.resourceManager = original.resourceManager;
>     	this.currentResource = original.currentResource;
>     	this.variables.putAll(original.variables);
>     	this.globalVars.putAll(original.globalVars);
>     }
> 
224c236
<         return new ExecutionContextImpl (resourceManager, currentResource, variables, globalVars);
---
>         return new ExecutionContextImpl(this);
235,236c247,252
<     public Map<String, Variable> getVisibleVariables() {
<         return Collections.unmodifiableMap(variables);
---
>     public Collection<Variable> getVisibleVariables() {
>         return Collections.unmodifiableCollection(variables.values());
>     }
> 
>     public Collection<Variable> getGlobalVariables() {
>         return Collections.unmodifiableCollection(globalVars.values());
239,240c255,256
<     public Map<String, Variable> getGlobalVariables () {
<         return Collections.unmodifiableMap(globalVars);
---
>     public Variable getGlobalVariable(String name) {
>     	return globalVars.get(name);
244c260
< 	public ExecutionContext cloneWithVariable(final Variable v) {
---
> 	public ExecutionContext cloneWithVariable(final Variable... vars) {
245a262
>         for (Variable v : vars) {
246a264
>         }
250a269,273
>     public ExecutionContext cloneWithVariable(Collection<Variable> v) {
>     	return cloneWithVariable(v.toArray(new Variable[v.size()]));
>     }
> 
>     @SuppressWarnings("unchecked")
