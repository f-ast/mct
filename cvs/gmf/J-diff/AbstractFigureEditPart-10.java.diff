28a29
> import org.eclipse.gmf.gmfgraph.BasicFont;
30a32,33
> import org.eclipse.gmf.gmfgraph.Color;
> import org.eclipse.gmf.gmfgraph.ConstantColor;
32a36
> import org.eclipse.gmf.gmfgraph.Font;
39a44
> import org.eclipse.gmf.gmfgraph.RGBColor;
50a56
> import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;
51a58
> import org.eclipse.jface.resource.FontDescriptor;
52a60,61
> import org.eclipse.swt.graphics.FontData;
> import org.eclipse.swt.graphics.RGB;
57a67,157
> 	private static Integer getGridDataAlignment(Alignment alignment) {
> 		switch (alignment.getValue()) {
> 		case Alignment.BEGINNING:
> 			return GridData.BEGINNING;
> 		case Alignment.END:
> 			return GridData.END;
> 		case Alignment.CENTER:
> 			return GridData.CENTER;
> 		case Alignment.FILL:
> 			return GridData.FILL;
> 		}
> 		return null;
> 	}
> 
> 	private static int getFlowLayoutAllignment(Alignment alignment, boolean isToolbar) {
> 		switch (alignment.getValue()) {
> 		case Alignment.BEGINNING:
> 			return isToolbar ? ToolbarLayout.ALIGN_TOPLEFT : org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP;
> 		case Alignment.END:
> 			return isToolbar ? ToolbarLayout.ALIGN_BOTTOMRIGHT : org.eclipse.draw2d.FlowLayout.ALIGN_RIGHTBOTTOM;
> 		}
> 		return isToolbar ? ToolbarLayout.ALIGN_CENTER : org.eclipse.draw2d.FlowLayout.ALIGN_CENTER;
> 	}
> 
> 	protected static int getLineStyle(LineKind lineKind) {
> 		switch (lineKind.getValue()) {
> 		case LineKind.LINE_DASH: {
> 			return Graphics.LINE_DASH;
> 		}
> 		case LineKind.LINE_DOT: {
> 			return Graphics.LINE_DOT;
> 		}
> 		case LineKind.LINE_DASHDOT: {
> 			return Graphics.LINE_DASHDOT;
> 		}
> 		case LineKind.LINE_DASHDOTDOT: {
> 			return Graphics.LINE_DASHDOTDOT;
> 		}
> 		case LineKind.LINE_CUSTOM: {
> 			return Graphics.LINE_CUSTOM;
> 		}
> 		default: {
> 			return Graphics.LINE_SOLID;
> 		}
> 		}
> 	}
> 
> 	protected static org.eclipse.swt.graphics.Color getColor(Color modelColor) {
> 		if (modelColor instanceof ConstantColor) {
> 			ConstantColor constantColor = (ConstantColor) modelColor;
> 			switch (constantColor.getValue()) {
> 			case BLACK_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.black;
> 			case BLUE_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.blue;
> 			case CYAN_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.cyan;
> 			case DARK_BLUE_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.darkBlue;
> 			case DARK_GRAY_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.darkGray;
> 			case DARK_GREEN_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.darkGreen;
> 			case GRAY_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.gray;
> 			case GREEN_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.green;
> 			case LIGHT_BLUE_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.lightBlue;
> 			case LIGHT_GRAY_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.lightGray;
> 			case LIGHT_GREEN_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.lightGreen;
> 			case ORANGE_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.orange;
> 			case RED_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.red;
> 			case WHITE_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.white;
> 			case YELLOW_LITERAL:
> 				return org.eclipse.draw2d.ColorConstants.yellow;
> 			}
> 		} else if (modelColor instanceof RGBColor) {
> 			RGBColor rgbColor = (RGBColor) modelColor;
> 			return DiagramColorRegistry.getInstance().getColor(new RGB(rgbColor.getRed(), rgbColor.getGreen(), rgbColor.getBlue()));
> 		}
> 		return null;
> 	}
> 
> 	private FontData myCachedFontData;
> 
157,181d256
< 	// ModelData transformers
< 	private int getDraw2dAllignment(Alignment alignment, boolean isToolbar) {
< 		switch (alignment.getValue()) {
< 		case Alignment.BEGINNING:
< 			return isToolbar ? ToolbarLayout.ALIGN_TOPLEFT : org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP;
< 		case Alignment.END:
< 			return isToolbar ? ToolbarLayout.ALIGN_BOTTOMRIGHT : org.eclipse.draw2d.FlowLayout.ALIGN_RIGHTBOTTOM;
< 		}
< 		return isToolbar ? ToolbarLayout.ALIGN_CENTER : org.eclipse.draw2d.FlowLayout.ALIGN_CENTER;
< 	}
< 
< 	private Integer getGridDataAlignment(Alignment alignment) {
< 		switch (alignment.getValue()) {
< 		case Alignment.BEGINNING:
< 			return GridData.BEGINNING;
< 		case Alignment.END:
< 			return GridData.END;
< 		case Alignment.CENTER:
< 			return GridData.CENTER;
< 		case Alignment.FILL:
< 			return GridData.FILL;
< 		}
< 		return null;
< 	}
< 
198c273
< 				layoutManager.setMinorAlignment(getDraw2dAllignment(flowLayout.getMinorAlignment(), flowLayout.isForceSingleLine()));
---
> 				layoutManager.setMinorAlignment(getFlowLayoutAllignment(flowLayout.getMinorAlignment(), flowLayout.isForceSingleLine()));
205,206c280,281
< 				layoutManager.setMinorAlignment(getDraw2dAllignment(flowLayout.getMinorAlignment(), flowLayout.isForceSingleLine()));
< 				layoutManager.setMajorAlignment(getDraw2dAllignment(flowLayout.getMajorAlignment(), flowLayout.isForceSingleLine()));
---
> 				layoutManager.setMinorAlignment(getFlowLayoutAllignment(flowLayout.getMinorAlignment(), flowLayout.isForceSingleLine()));
> 				layoutManager.setMajorAlignment(getFlowLayoutAllignment(flowLayout.getMajorAlignment(), flowLayout.isForceSingleLine()));
249,252c324,325
< 	protected static int getLineStyle(LineKind lineKind) {
< 		switch (lineKind.getValue()) {
< 		case LineKind.LINE_DASH: {
< 			return Graphics.LINE_DASH;
---
> 	protected org.eclipse.draw2d.geometry.Dimension getCornerDimensions(int width, int height) {
> 		return new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(width), getMapMode().DPtoLP(height));
254,255c327,333
< 		case LineKind.LINE_DOT: {
< 			return Graphics.LINE_DOT;
---
> 
> 	// TODO: Either use this method or remove it.
> 	protected PointList getPointList(Collection template) {
> 		PointList result = new PointList();
> 		for (Iterator it = template.iterator(); it.hasNext();) {
> 			Point nextPoint = (Point) it.next();
> 			result.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(nextPoint.getX()), getMapMode().DPtoLP(nextPoint.getY())));
257,258c335
< 		case LineKind.LINE_DASHDOT: {
< 			return Graphics.LINE_DASHDOT;
---
> 		return result;
260,261c337,339
< 		case LineKind.LINE_DASHDOTDOT: {
< 			return Graphics.LINE_DASHDOTDOT;
---
> 
> 	protected org.eclipse.draw2d.geometry.Dimension getDraw2dDimension(Dimension dimension) {
> 		return new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(dimension.getDx()), getMapMode().DPtoLP(dimension.getDy()));
263,264c341,343
< 		case LineKind.LINE_CUSTOM: {
< 			return Graphics.LINE_CUSTOM;
---
> 
> 	protected org.eclipse.draw2d.geometry.Point getDraw2DPoint(Point point) {
> 		return new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(point.getX()), getMapMode().DPtoLP(point.getY()));
266,267c345,348
< 		default: {
< 			return Graphics.LINE_SOLID;
---
> 
> 	protected void refreshLayoutData() {
> 		if (!hasParentFigure()) {
> 			return;
268a350,352
> 		Object layoutConstraint = getLayoutConstraint();
> 		if (layoutConstraint != null) {
> 			getFigure().getParent().setConstraint(getFigure(), layoutConstraint);
272,273c356,360
< 	protected org.eclipse.draw2d.geometry.Dimension getCornerDimensions(int width, int height) {
< 		return new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(width), getMapMode().DPtoLP(height));
---
> 	/**
> 	 * Parent figure == null if this method was called from setFigure() one.
> 	 */
> 	private boolean hasParentFigure() {
> 		return getFigure().getParent() != null;
276,280c363,413
< 	protected PointList getPointList(Collection template) {
< 		PointList result = new PointList();
< 		for (Iterator it = template.iterator(); it.hasNext();) {
< 			Point nextPoint = (Point) it.next();
< 			result.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(nextPoint.getX()), getMapMode().DPtoLP(nextPoint.getY())));
---
> 	protected void refreshLayoutManager() {
> 		if (!hasParentFigure()) {
> 			return;
> 		}
> 		handleMajorSemanticChange();
> 	}
> 
> 	protected Shape getShape() {
> 		View view = getNotationView();
> 		if (view != null && view.getElement() instanceof Shape) {
> 			return (Shape) view.getElement();
> 		}
> 		return null;
> 	}
> 
> 	/**
> 	 * Using this custom implementation instead of calling super.setFont()
> 	 * because we have to support unsetting font operation (setFont(null)).
> 	 * 
> 	 * TODO: getNodeFigure used here instead of getPrimaryShape() - better 
> 	 * use getPrimaryShape().
> 	 */
> 	protected void refreshFont() {
> 		Font modelFont = getShape().getFont();
> 		if (modelFont instanceof BasicFont) {
> 			BasicFont basicFont = (BasicFont) modelFont;
> 			int fontStyle = SWT.NONE;
> 			switch (basicFont.getStyle()) {
> 			case BOLD_LITERAL:
> 				fontStyle = SWT.BOLD;
> 				break;
> 			case ITALIC_LITERAL:
> 				fontStyle = SWT.ITALIC;
> 				break;
> 			}
> 			if (basicFont.getFaceName() == null) {
> 				return;
> 			}
> 			FontData fontData = new FontData(basicFont.getFaceName(), basicFont.getHeight(), fontStyle);
> 			if (myCachedFontData != null && myCachedFontData.equals(fontData)) {
> 				return;
> 			}
> 			org.eclipse.swt.graphics.Font font = getResourceManager().createFont(FontDescriptor.createFrom(fontData));
> 			getNodeFigure().setFont(font);
> 			getNodeFigure().repaint();
> 			if (myCachedFontData != null) {
> 				getResourceManager().destroyFont(FontDescriptor.createFrom(myCachedFontData));
> 			}
> 		} else {
> 			getNodeFigure().setFont(null);
> 			getNodeFigure().repaint();
282d414
< 		return result;
350,388d481
< 	protected org.eclipse.draw2d.geometry.Dimension getDraw2dDimension(Dimension dimension) {
< 		return new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(dimension.getDx()), getMapMode().DPtoLP(dimension.getDy()));
< 	}
< 
< 	protected org.eclipse.draw2d.geometry.Point getDraw2DPoint(Point point) {
< 		return new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(point.getX()), getMapMode().DPtoLP(point.getY()));
< 	}
< 
< 	protected void refreshLayoutData() {
< 		if (!hasParentFigure()) {
< 			return;
< 		}
< 		Object layoutConstraint = getLayoutConstraint();
< 		if (layoutConstraint != null) {
< 			getFigure().getParent().setConstraint(getFigure(), layoutConstraint);
< 		}
< 	}
< 
< 	/**
< 	 * Parent figure == null if this method was called from setFigure() one.
< 	 */
< 	private boolean hasParentFigure() {
< 		return getFigure().getParent() != null;
< 	}
< 
< 	protected void refreshLayoutManager() {
< 		if (!hasParentFigure()) {
< 			return;
< 		}
< 		handleMajorSemanticChange();
< 	}
< 
< 	protected Shape getShape() {
< 		View view = getNotationView();
< 		if (view != null && view.getElement() instanceof Shape) {
< 			return (Shape) view.getElement();
< 		}
< 		return null;
< 	}
