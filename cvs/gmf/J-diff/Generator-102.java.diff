14d13
< import java.lang.ref.SoftReference;
19d17
< import java.util.Map;
24d21
< import org.eclipse.emf.common.util.URI;
65c62
< 	private CodegenEmitters myEmitters;
---
> 	private final CodegenEmitters myEmitters;
67,69c64,65
< 	private static Map/*<URI, SoftReference>*/ myCachedURI2EmitterMap = new HashMap();
< 
< 	public Generator(GenEditorGenerator genModel) {
---
> 	public Generator(GenEditorGenerator genModel, CodegenEmitters emitters) {
> 		assert genModel != null && emitters != null;
72,84c68
< 		URI resourceURI = myEditorGen.eResource().getURI();
< 		if (myEditorGen.isDynamicTemplates()) {
< 			myCachedURI2EmitterMap.remove(resourceURI);
< 		}
< 		CodegenEmitters old = myCachedURI2EmitterMap.containsKey(resourceURI) ? (CodegenEmitters) ((SoftReference) myCachedURI2EmitterMap.get(resourceURI)).get() : null;
< 		if (old == null) {
< 			myEmitters = new CodegenEmitters(!myEditorGen.isDynamicTemplates(), myEditorGen.getTemplateDirectory());
< 			if (!myEditorGen.isDynamicTemplates()) {
< 				myCachedURI2EmitterMap.put(resourceURI, new SoftReference(myEmitters));
< 			}
< 		} else {
< 			myEmitters = old;
< 		}
---
> 		myEmitters = emitters;
964,965c948,949
< 		private final HashMap/*<EClass, Integer>*/ myCounters = new HashMap();
< 		private final HashMap/*<EClass, Integer>*/ myCache = new HashMap();
---
> 		private final HashMap<EClass, Integer> myCounters = new HashMap<EClass, Integer>();
> 		private final HashMap<EClass, Integer> myCache = new HashMap<EClass, Integer>();
982a967
> 		@SuppressWarnings("unchecked")
989c974
< 			LinkedList/*<EClass>*/ checkQueue = new LinkedList();
---
> 			LinkedList<EClass> checkQueue = new LinkedList<EClass>();
992c977
< 				Object key = checkQueue.removeFirst();
---
> 				EClass key = checkQueue.removeFirst();
994c979
< 					final Integer value = (Integer) myCounters.get(key);
---
> 					final Integer value = myCounters.get(key);
999c984
< 					checkQueue.addAll(((EClass) key).getESuperTypes());
---
> 					checkQueue.addAll(key.getESuperTypes());
1007c992
< 			return (Integer) myCache.get(nextKey);
---
> 			return myCache.get(nextKey);
