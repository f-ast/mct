2c2
<  * Copyright (c) 2002, 2007 IBM Corporation and others.
---
>  * Copyright (c) 2002, 2008 IBM Corporation and others.
13a14
> import java.util.ArrayList;
14a16
> import java.util.List;
15a18
> import org.eclipse.draw2d.XYLayout;
25a29,30
> import org.eclipse.gef.commands.Command;
> import org.eclipse.gef.commands.CompoundCommand;
26a32
> import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;
32a39,40
> import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
> import org.eclipse.gmf.runtime.diagram.ui.requests.ArrangeRequest;
35a44
> import org.eclipse.osgi.internal.resolver.ComputeNodeOrder;
44a54,96
>      * A <code>ContainerEditPolicy</code> for a <code>ShapeEditPart</code>.
>      * 
>      * @since 2.1
>      */
>     protected static class ShapeContainerEditPolicy
>         extends ContainerEditPolicy {
> 
>         protected Command getArrangeCommand(ArrangeRequest request) {
>             if (ActionIds.ACTION_ARRANGE_SELECTION.equals(request.getType())
>                 || ActionIds.ACTION_TOOLBAR_ARRANGE_SELECTION.equals(request
>                     .getType())) {
>                 List parts = request.getPartsToArrange();
>                 if (parts.size() == 1 && parts.contains(getHost())) {
>                     // Create arrange commands for the compartments within this shape.
>                     CompoundCommand cc = new CompoundCommand();
>                     for (Iterator iterator = getHost().getChildren().iterator(); iterator
>                         .hasNext();) {
>                         Object childEP = iterator.next();
>                         if (childEP instanceof CompartmentEditPart
>                             && ((CompartmentEditPart) childEP).getContentPane()
>                                 .getLayoutManager() instanceof XYLayout) {
>                             ArrangeRequest newRequest = createRequest(request,
>                                 ((CompartmentEditPart) childEP).getChildren());
>                             cc.add(super.getArrangeCommand(newRequest));
>                         }
>                     }
>                     return cc;
>                 }
>             }
>             return super.getArrangeCommand(request);
>         }
> 
>         private ArrangeRequest createRequest(ArrangeRequest request,
>                 List partsToArrange) {
>             ArrangeRequest newRequest = new ArrangeRequest((String) request
>                 .getType(), request.getLayoutType());
>             newRequest.setExtendedData(request.getExtendedData());
>             newRequest.setPartsToArrange(partsToArrange);
>             return newRequest;
>         }
>     }
>     
> 	/**
55c107
< 		installEditPolicy(EditPolicy.CONTAINER_ROLE, new ContainerEditPolicy());
---
> 		installEditPolicy(EditPolicy.CONTAINER_ROLE, new ShapeContainerEditPolicy());
