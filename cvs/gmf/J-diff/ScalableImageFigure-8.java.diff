19a20
> import org.eclipse.gmf.runtime.draw2d.ui.internal.mapmode.DiagramMapModeUtil;
24c25,26
< import org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage;
---
> import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderHelper;
> import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderingListener;
30c32
< 
---
> import org.eclipse.swt.graphics.RGB;
33,34c35,37
<  * An implementation of {@link org.eclipse.draw2d.ImageFigure} that allows scaling the 
<  * underlying image to the containing Figure's bounds, rather then being fixed to the image size.
---
>  * An implementation of {@link org.eclipse.draw2d.ImageFigure} that allows
>  * scaling the underlying image to the containing Figure's bounds, rather then
>  * being fixed to the image size.
36c39,42
<  * <p>Any image that can be implemented inside the RenderedImage interface can be supported.</p>
---
>  * <p>
>  * Any image that can be implemented inside the RenderedImage interface can be
>  * supported.
>  * </p>
40c46,104
< public class ScalableImageFigure extends ImageFigure {
---
> public class ScalableImageFigure
> 	extends ImageFigure {
> 
> 	private RenderingListenerImpl renderingListener = new RenderingListenerImpl(
> 		this);
> 
> 	static private class RenderingListenerImpl
> 		implements RenderingListener {
> 
> 		private ScalableImageFigure fig;
> 
> 		public RenderingListenerImpl(ScalableImageFigure fig) {
> 			super();
> 			this.fig = fig;
> 		}
> 
> 		/**
> 		 * @return <code>IFigure</code> that the listener wraps
> 		 */
> 		public ScalableImageFigure getFigure() {
> 			return fig;
> 		}
> 
> 		/*
> 		 * (non-Javadoc)
> 		 * 
> 		 * @see org.eclipse.gmf.runtime.draw2d.ui.render.RenderingListener#imageRendered(org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage)
> 		 */
> 		public void imageRendered(RenderedImage rndImg) {
> 			if (getFigure().getParent() != null) {
> 				getFigure().setRenderedImage(rndImg);
> 				getFigure().repaint();
> 			}
> 		}
> 
> 		/*
> 		 * (non-Javadoc)
> 		 * 
> 		 * @see java.lang.Object#equals(java.lang.Object)
> 		 */
> 		public boolean equals(Object obj) {
> 			if (obj instanceof RenderingListenerImpl) {
> 				return ((RenderingListenerImpl) obj).getFigure().equals(
> 					getFigure());
> 			}
> 
> 			return false;
> 		}
> 
> 		/*
> 		 * (non-Javadoc)
> 		 * 
> 		 * @see java.lang.Object#hashCode()
> 		 */
> 		public int hashCode() {
> 			return getFigure().hashCode();
> 		}
> 
> 	}
45,46c109
< 	private static final int
< 		FLAG_USE_DEFAULT_IMAGESIZE = MAX_FLAG << 1,
---
> 	private static final int FLAG_USE_DEFAULT_IMAGESIZE = MAX_FLAG << 1,
51,54c114
< 	/** The original <code>RenderedImage</code> at 100% device coordinate size */
<     private RenderedImage origRenderedImage = null;
<     
<     /** The cached <code>RenderedImage</code> that was last painted to the graphics context */
---
> 	/** The last rendered <code>RenderedImage</code> */
58c118,119
< 	 * Accessor to determine if the rendered image will be anti-aliased (if possible).
---
> 	 * Accessor to determine if the rendered image will be anti-aliased (if
> 	 * possible).
60c121,122
< 	 * @return <code>boolean</code> <code>true</code> if anti aliasing is on, <code>false</code> otherwise.
---
> 	 * @return <code>boolean</code> <code>true</code> if anti aliasing is
> 	 *         on, <code>false</code> otherwise.
67c129,130
< 	 * Sets a property to determine if the rendered image will be anti-aliased (if possible).
---
> 	 * Sets a property to determine if the rendered image will be anti-aliased
> 	 * (if possible).
69,70c132,134
< 	 * @param antiAlias <code>boolean</code> <code>true</code> if anti-aliasing is to be turned on, 
< 	 * <code>false</code> otherwise
---
> 	 * @param antiAlias
> 	 *            <code>boolean</code> <code>true</code> if anti-aliasing is
> 	 *            to be turned on, <code>false</code> otherwise
78,79c142,143
< 	 * Accessor to determine if the rendered image will respect the original aspect 
< 	 * ratio of the default image when resized.
---
> 	 * Accessor to determine if the rendered image will respect the original
> 	 * aspect ratio of the default image when resized.
81c145,146
< 	 * @return <code>boolean</code> <code>true</code> if maintain aspect ratio is on, <code>false</code> otherwise.
---
> 	 * @return <code>boolean</code> <code>true</code> if maintain aspect
> 	 *         ratio is on, <code>false</code> otherwise.
88,89c153,154
< 	 * Sets a property to determine if the rendered image will respect the original aspect 
< 	 * ratio of the default image when resized.
---
> 	 * Sets a property to determine if the rendered image will respect the
> 	 * original aspect ratio of the default image when resized.
91,92c156,158
< 	 * @param maintainAspectRatio <code>boolean</code> <code>true</code> if maintain aspect ratio is to be turned on, 
< 	 * <code>false</code> otherwise
---
> 	 * @param maintainAspectRatio
> 	 *            <code>boolean</code> <code>true</code> if maintain aspect
> 	 *            ratio is to be turned on, <code>false</code> otherwise
100c166,167
< 	 * @param img the <code>Image</code> to render
---
> 	 * @param img
> 	 *            the <code>Image</code> to render
109c176,177
< 		this.origRenderedImage = RenderedImageFactory.getInstance(byteOS.toByteArray());
---
> 		this.lastRenderedImage = RenderedImageFactory.getInstance(byteOS
> 			.toByteArray());
127c195,197
< 	 * @param renderedImage the <code>RenderedImage</code> that is used for rendering the image.
---
> 	 * @param renderedImage
> 	 *            the <code>RenderedImage</code> that is used for rendering
> 	 *            the image.
136,140c206,216
< 	 * @param renderedImage the <code>RenderedImage</code> that is used for rendering the image.
< 	 * @param useDefaultImageSize <code>boolean</code> indicating whether to initialize the preferred size 
< 	 * with the default image size.  Otherwise, a set default will be used instead.
< 	 * @param useOriginalColors <code>boolean</code> indicating whether to use the original colors of the
< 	 * <code>RenderedImage</code> or to replace black with outline color and white with the fill color.
---
> 	 * @param renderedImage
> 	 *            the <code>RenderedImage</code> that is used for rendering
> 	 *            the image.
> 	 * @param useDefaultImageSize
> 	 *            <code>boolean</code> indicating whether to initialize the
> 	 *            preferred size with the default image size. Otherwise, a set
> 	 *            default will be used instead.
> 	 * @param useOriginalColors
> 	 *            <code>boolean</code> indicating whether to use the original
> 	 *            colors of the <code>RenderedImage</code> or to replace black
> 	 *            with outline color and white with the fill color.
143,144c219,221
< 				boolean useDefaultImageSize, boolean useOriginalColors, boolean antiAlias) {
< 		origRenderedImage = renderedImage;
---
> 			boolean useDefaultImageSize, boolean useOriginalColors,
> 			boolean antiAlias) {
> 		lastRenderedImage = renderedImage;
154,155c231,234
< 	 * @param w the preferred width of the image
< 	 * @param h the preferred height of the image
---
> 	 * @param w
> 	 *            the preferred width of the image
> 	 * @param h
> 	 *            the preferred height of the image
162,164c241,243
< 	 * Returns the size set specified by setPreferredImageSize() or 
< 	 * the size specified by the image. In the case of meta-images
< 	 * a preferred size of 32x32 is returned. 
---
> 	 * Returns the size set specified by setPreferredImageSize() or the size
> 	 * specified by the image. In the case of meta-images a preferred size of
> 	 * 32x32 is returned.
168,170d246
< 			if (getImage() == null)
< 				return preferredSize;
< 			
180,182c256,261
< 						org.eclipse.swt.graphics.Rectangle imgRect = swtImage.getBounds();
< 						preferredSize.width = MapModeUtil.getMapMode(this).DPtoLP(imgRect.width);
< 						preferredSize.height = MapModeUtil.getMapMode(this).DPtoLP(imgRect.height);
---
> 						org.eclipse.swt.graphics.Rectangle imgRect = swtImage
> 							.getBounds();
> 						preferredSize.width = MapModeUtil.getMapMode(this)
> 							.DPtoLP(imgRect.width);
> 						preferredSize.height = MapModeUtil.getMapMode(this)
> 							.DPtoLP(imgRect.height);
190,191c269,271
< 	
< 	/* (non-Javadoc)
---
> 	/*
> 	 * (non-Javadoc)
> 	 * 
203c283,284
< 	 * Override to return an image that is scaled to fit the bounds of the figure.
---
> 	 * Override to return an image that is scaled to fit the bounds of the
> 	 * figure.
213c294,295
< 	 * Gets the <code>RenderedImage</code> that is the for the specified <code>Dimension</code>
---
> 	 * Gets the <code>RenderedImage</code> that is the for the specified
> 	 * <code>Dimension</code>
219,221c301,304
< 		RenderInfo newRenderInfo =
< 			RenderedImageFactory.createInfo(
< 				dim.width,
---
> 		Color fill = getBackgroundColor();
> 		Color outline = getForegroundColor();
> 		RenderInfo newRenderInfo = getRenderedImage().getRenderInfo();
> 		newRenderInfo.setValues(dim.width,
223,224d305
< 				useOriginalColors() ? null : translateSWTColorToAWTColor(getBackgroundColor()),
< 				useOriginalColors() ? null : translateSWTColorToAWTColor(getForegroundColor()),
226c307,311
< 				isAntiAlias()); // antialias
---
> 			isAntiAlias(),
> 			useOriginalColors() ? (RGB)null
> 				: new RGB(fill.getRed(), fill.getGreen(), fill.getBlue()),
> 			useOriginalColors() ? (RGB)null
> 				: new RGB(outline.getRed(), outline.getGreen(), outline.getBlue())); // antialias
228c313,314
< 		RenderedImage newRenderedImage = getRenderedImage().getNewRenderedImage(newRenderInfo);
---
> 		RenderedImage newRenderedImage = getRenderedImage()
> 			.getNewRenderedImage(newRenderInfo);
231d316
< 
233,235c318,322
< 	 * @return a <code>boolean</code> <code>true</code> if the original colors of the image should be used for
< 	 * rendering, or <code>false</code> indicates that black and white colors can replaced by the specified outline
< 	 * and fill colors respectively of the <code>RenderInfo</code>.
---
> 	 * @return a <code>boolean</code> <code>true</code> if the original
> 	 *         colors of the image should be used for rendering, or
> 	 *         <code>false</code> indicates that black and white colors can
> 	 *         replaced by the specified outline and fill colors respectively of
> 	 *         the <code>RenderInfo</code>.
242a330
> 	 * 
246d333
< 		int x, y;
249,270c336,339
< 		y = (area.height - getBounds().height) / 2 + area.y;
< 		x = (area.width - getBounds().width) / 2 + area.x;		
< 		
< 		if (graphics instanceof DrawableRenderedImage) {
<            	lastRenderedImage = ((DrawableRenderedImage) graphics).drawRenderedImage(getRenderedImage(new Dimension(getBounds().width, getBounds().height)),
<                        x, y, getBounds().width, getBounds().height);
<            	assert lastRenderedImage != null;
< 		} else { 
< 			graphics.drawImage(getRenderedImage().getSWTImage(), x, y); 
<         }
< 	}	
< 	
<     /**
<      * Returns the corresponding java.awt.Color given an org.eclipse.swt.graphics.Color
<      * 
<      * @param swtColor to be translated
<      * @return the corresponding java.awt.Color
<      */    
<     private java.awt.Color translateSWTColorToAWTColor(Color swtColor) {
< 		return (swtColor == null) ? null
< 			: new java.awt.Color(swtColor.getRed(), swtColor.getGreen(),
< 				swtColor.getBlue());
---
> 		setRenderedImage(RenderHelper.getInstance(
> 			DiagramMapModeUtil.getScale(MapModeUtil.getMapMode(this)), false,
> 			false, null).drawRenderedImage(graphics, getRenderedImage(), area,
> 			renderingListener));
274c343,344
< 	 * Gets the <code>RenderedImage</code> that is being displayed by this figure.
---
> 	 * Gets the <code>RenderedImage</code> that is being displayed by this
> 	 * figure.
276c346,347
< 	 * @return <code>RenderedImage</code> that is being displayed by this figure.
---
> 	 * @return <code>RenderedImage</code> that is being displayed by this
> 	 *         figure.
279c350
< 		return origRenderedImage;
---
> 		return lastRenderedImage;
283c354,355
< 	 * Sets the <code>RenderedImage</code> that is to be displayed by this figure
---
> 	 * Sets the <code>RenderedImage</code> that is to be displayed by this
> 	 * figure
285c357,359
< 	 * @param the <code>RenderedImage</code> that is to being displayed by this figure
---
> 	 * @param the
> 	 *            <code>RenderedImage</code> that is to being displayed by
> 	 *            this figure
288c362
< 		this.origRenderedImage = renderedImage;
---
> 		this.lastRenderedImage = renderedImage;
