13a14
> import java.awt.geom.Rectangle2D;
18a20
> import org.apache.batik.transcoder.TranscoderInput;
25a28,81
> 	private Document document;
> 	private int canvasWidth = -1, canvasHeight = -1;
> 	private Rectangle2D canvasAOI;
> 
> 	public SimpleImageTranscoder(Document document) {
> 		this.document = document;
> 	}
> 
> 	public final Document getDocument() {
> 		return document;
> 	}
> 
> 	public final int getCanvasWidth() {
> 		return canvasWidth;
> 	}
> 
> 	public final int getCanvasHeight() {
> 		return canvasHeight;
> 	}
> 
> 	public void setCanvasSize(int width, int height) {
> 		if (this.canvasWidth == width && this.canvasHeight == height) {
> 			return;
> 		}
> 		this.canvasWidth = width;
> 		this.canvasHeight = height;
> 		contentChanged();
> 	}
> 
> 	public final Rectangle2D getCanvasAreaOfInterest() {
> 		if (canvasAOI == null) {
> 			return null;
> 		}
> 		Rectangle2D result = new Rectangle2D.Float();
> 		result.setRect(canvasAOI);
> 		return result;
> 	}
> 
> 	public void setCanvasAreaOfInterest(Rectangle2D value) {
> 		if (value == null) {
> 			if (canvasAOI == null) {
> 				return;
> 			}
> 			canvasAOI = null;
> 			contentChanged();
> 			return;
> 		}
> 		if (value.equals(canvasAOI)) {
> 			return;
> 		}
> 		canvasAOI = new Rectangle2D.Float();
> 		canvasAOI.setRect(value);
> 		contentChanged();
> 	}
31,32c87,91
< 	public BridgeContext initCSSEngine(final Document d) {
< 		SVGOMDocument sd = (SVGOMDocument) d;
---
> 	public BridgeContext initCSSEngine() {
> 		if (this.document == null) {
> 			return null;
> 		}
> 		SVGOMDocument sd = (SVGOMDocument) this.document;
40,41c99,100
< 				BridgeContextEx.this.setDocument(d);
< 				BridgeContextEx.this.initializeDocument(d);
---
> 				BridgeContextEx.this.setDocument(SimpleImageTranscoder.this.document);
> 				BridgeContextEx.this.initializeDocument(SimpleImageTranscoder.this.document);
47c106,139
< 	public BufferedImage getBufferedImage() {
---
> 	public void contentChanged() {
> 		bufferedImage = null;
> 	}
> 
> 	private void updateImage() {
> 		if (document == null) {
> 			return;
> 		}
> 		try {
> 			if (canvasWidth >= 0) {
> 				addTranscodingHint(ImageTranscoder.KEY_WIDTH, new Float(canvasWidth));
> 			} else {
> 				removeTranscodingHint(ImageTranscoder.KEY_WIDTH);
> 			}
> 			if (canvasHeight >= 0) {
> 				addTranscodingHint(ImageTranscoder.KEY_HEIGHT, new Float(canvasHeight));
> 			} else {
> 				removeTranscodingHint(ImageTranscoder.KEY_HEIGHT);
> 			}
> 			if (canvasAOI != null) {
> 				addTranscodingHint(ImageTranscoder.KEY_AOI, canvasAOI);
> 			} else {
> 				removeTranscodingHint(ImageTranscoder.KEY_AOI);
> 			}
> 			transcode(new TranscoderInput(document), new TranscoderOutput());
> 		} catch (TranscoderException e) {
> 			Activator.logError("Error transcoding SVG image", e);
> 		}
> 	}
> 
> 	public final BufferedImage getBufferedImage() {
> 		if (bufferedImage == null) {
> 			updateImage();
> 		}
52c144
< 	public BufferedImage createImage(int width, int height) {
---
> 	public final BufferedImage createImage(int width, int height) {
57c149
< 	public void writeImage(BufferedImage img, TranscoderOutput output) throws TranscoderException {
---
> 	public final void writeImage(BufferedImage img, TranscoderOutput output) throws TranscoderException {
