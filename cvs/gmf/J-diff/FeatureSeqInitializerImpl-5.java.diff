10a11
> import org.eclipse.emf.common.notify.Notification;
14a16
> import org.eclipse.emf.ecore.impl.ENotificationImpl;
16c18,19
< import org.eclipse.emf.ecore.util.EObjectContainmentEList;
---
> import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
> import org.eclipse.emf.ecore.util.EcoreUtil;
20a24
> import org.eclipse.gmf.mappings.MappingEntry;
28a33
>  *   <li>{@link org.eclipse.gmf.mappings.impl.FeatureSeqInitializerImpl#getMappingEntry <em>Mapping Entry</em>}</li>
68a74,104
> 	public MappingEntry getMappingEntry() {
> 		if (eContainerFeatureID != GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY) return null;
> 		return (MappingEntry)eContainer();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public void setMappingEntry(MappingEntry newMappingEntry) {
> 		if (newMappingEntry != eInternalContainer() || (eContainerFeatureID != GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY && newMappingEntry != null)) {
> 			if (EcoreUtil.isAncestor(this, newMappingEntry))
> 				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
> 			NotificationChain msgs = null;
> 			if (eInternalContainer() != null)
> 				msgs = eBasicRemoveFromContainer(msgs);
> 			if (newMappingEntry != null)
> 				msgs = ((InternalEObject)newMappingEntry).eInverseAdd(this, GMFMapPackage.MAPPING_ENTRY__DOMAIN_INITIALIZER, MappingEntry.class, msgs);
> 			msgs = eBasicSetContainer((InternalEObject)newMappingEntry, GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY, msgs);
> 			if (msgs != null) msgs.dispatch();
> 		}
> 		else if (eNotificationRequired())
> 			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY, newMappingEntry, newMappingEntry));
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
71c107
< 			initializers = new EObjectContainmentEList(FeatureValueSpec.class, this, GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS);
---
> 			initializers = new EObjectContainmentWithInverseEList(FeatureValueSpec.class, this, GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS, GMFMapPackage.FEATURE_VALUE_SPEC__FEATURE_SEQ_INITIALIZER);
80a117,133
> 	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
> 		switch (featureID) {
> 			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
> 				if (eInternalContainer() != null)
> 					msgs = eBasicRemoveFromContainer(msgs);
> 				return eBasicSetContainer(otherEnd, GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY, msgs);
> 			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS:
> 				return ((InternalEList)getInitializers()).basicAdd(otherEnd, msgs);
> 		}
> 		return super.eInverseAdd(otherEnd, featureID, msgs);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
82a136,137
> 			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
> 				return eBasicSetContainer(null, GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY, msgs);
93a149,161
> 	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
> 		switch (eContainerFeatureID) {
> 			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
> 				return eInternalContainer().eInverseRemove(this, GMFMapPackage.MAPPING_ENTRY__DOMAIN_INITIALIZER, MappingEntry.class, msgs);
> 		}
> 		return super.eBasicRemoveFromContainerFeature(msgs);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
95a164,165
> 			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
> 				return getMappingEntry();
108a179,181
> 			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
> 				setMappingEntry((MappingEntry)newValue);
> 				return;
123a197,199
> 			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
> 				setMappingEntry((MappingEntry)null);
> 				return;
137a214,215
> 			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
> 				return getMappingEntry() != null;
