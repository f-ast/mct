11d10
< import org.eclipse.emf.common.notify.Notification;
13d11
< import org.eclipse.emf.common.util.EList;
19,20d16
< import org.eclipse.emf.ecore.impl.ENotificationImpl;
< import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
23,24d18
< import org.eclipse.gmf.mappings.AbstractNodeMapping;
< import org.eclipse.gmf.mappings.ChildNodeMapping;
35,44d28
<  * The following features are implemented:
<  * <ul>
<  *   <li>{@link org.eclipse.gmf.mappings.impl.NodeMappingImpl#getDiagramNode <em>Diagram Node</em>}</li>
<  *   <li>{@link org.eclipse.gmf.mappings.impl.NodeMappingImpl#getDomainMetaElement <em>Domain Meta Element</em>}</li>
<  *   <li>{@link org.eclipse.gmf.mappings.impl.NodeMappingImpl#getDomainSpecialization <em>Domain Specialization</em>}</li>
<  *   <li>{@link org.eclipse.gmf.mappings.impl.NodeMappingImpl#getDomainInitializer <em>Domain Initializer</em>}</li>
<  *   <li>{@link org.eclipse.gmf.mappings.impl.NodeMappingImpl#getContainmentFeature <em>Containment Feature</em>}</li>
<  *   <li>{@link org.eclipse.gmf.mappings.impl.NodeMappingImpl#getEditFeature <em>Edit Feature</em>}</li>
<  *   <li>{@link org.eclipse.gmf.mappings.impl.NodeMappingImpl#getChildMappings <em>Child Mappings</em>}</li>
<  * </ul>
49,119c33
< public class NodeMappingImpl extends MappingEntryImpl implements NodeMapping {
< 	/**
< 	 * The cached value of the '{@link #getDiagramNode() <em>Diagram Node</em>}' reference.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @see #getDiagramNode()
< 	 * @generated
< 	 * @ordered
< 	 */
< 	protected Node diagramNode = null;
< 
< 	/**
< 	 * The cached value of the '{@link #getDomainMetaElement() <em>Domain Meta Element</em>}' reference.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @see #getDomainMetaElement()
< 	 * @generated
< 	 * @ordered
< 	 */
< 	protected EClass domainMetaElement = null;
< 
< 	/**
< 	 * The cached value of the '{@link #getDomainSpecialization() <em>Domain Specialization</em>}' containment reference.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @see #getDomainSpecialization()
< 	 * @generated
< 	 * @ordered
< 	 */
< 	protected Constraint domainSpecialization = null;
< 
< 	/**
< 	 * The cached value of the '{@link #getDomainInitializer() <em>Domain Initializer</em>}' containment reference.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @see #getDomainInitializer()
< 	 * @generated
< 	 * @ordered
< 	 */
< 	protected ElementInitializer domainInitializer = null;
< 
< 	/**
< 	 * The cached value of the '{@link #getContainmentFeature() <em>Containment Feature</em>}' reference.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @see #getContainmentFeature()
< 	 * @generated
< 	 * @ordered
< 	 */
< 	protected EReference containmentFeature = null;
< 
< 	/**
< 	 * The cached value of the '{@link #getEditFeature() <em>Edit Feature</em>}' reference.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @see #getEditFeature()
< 	 * @generated
< 	 * @ordered
< 	 */
< 	protected EAttribute editFeature = null;
< 
< 	/**
< 	 * The cached value of the '{@link #getChildMappings() <em>Child Mappings</em>}' containment reference list.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @see #getChildMappings()
< 	 * @generated
< 	 * @ordered
< 	 */
< 	protected EList childMappings = null;
< 
---
> public class NodeMappingImpl extends AbstractNodeMappingImpl implements NodeMapping {
143,392d56
< 	public Node getDiagramNode() {
< 		if (diagramNode != null && diagramNode.eIsProxy()) {
< 			Node oldDiagramNode = diagramNode;
< 			diagramNode = (Node)eResolveProxy((InternalEObject)diagramNode);
< 			if (diagramNode != oldDiagramNode) {
< 				if (eNotificationRequired())
< 					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE, oldDiagramNode, diagramNode));
< 			}
< 		}
< 		return diagramNode;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public Node basicGetDiagramNode() {
< 		return diagramNode;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public void setDiagramNode(Node newDiagramNode) {
< 		Node oldDiagramNode = diagramNode;
< 		diagramNode = newDiagramNode;
< 		if (eNotificationRequired())
< 			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE, oldDiagramNode, diagramNode));
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public EClass getDomainMetaElement() {
< 		if (domainMetaElement != null && domainMetaElement.eIsProxy()) {
< 			EClass oldDomainMetaElement = domainMetaElement;
< 			domainMetaElement = (EClass)eResolveProxy((InternalEObject)domainMetaElement);
< 			if (domainMetaElement != oldDomainMetaElement) {
< 				if (eNotificationRequired())
< 					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFMapPackage.NODE_MAPPING__DOMAIN_META_ELEMENT, oldDomainMetaElement, domainMetaElement));
< 			}
< 		}
< 		return domainMetaElement;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public EClass basicGetDomainMetaElement() {
< 		return domainMetaElement;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public void setDomainMetaElement(EClass newDomainMetaElement) {
< 		EClass oldDomainMetaElement = domainMetaElement;
< 		domainMetaElement = newDomainMetaElement;
< 		if (eNotificationRequired())
< 			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.NODE_MAPPING__DOMAIN_META_ELEMENT, oldDomainMetaElement, domainMetaElement));
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public Constraint getDomainSpecialization() {
< 		return domainSpecialization;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public NotificationChain basicSetDomainSpecialization(Constraint newDomainSpecialization, NotificationChain msgs) {
< 		Constraint oldDomainSpecialization = domainSpecialization;
< 		domainSpecialization = newDomainSpecialization;
< 		if (eNotificationRequired()) {
< 			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION, oldDomainSpecialization, newDomainSpecialization);
< 			if (msgs == null) msgs = notification; else msgs.add(notification);
< 		}
< 		return msgs;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public void setDomainSpecialization(Constraint newDomainSpecialization) {
< 		if (newDomainSpecialization != domainSpecialization) {
< 			NotificationChain msgs = null;
< 			if (domainSpecialization != null)
< 				msgs = ((InternalEObject)domainSpecialization).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION, null, msgs);
< 			if (newDomainSpecialization != null)
< 				msgs = ((InternalEObject)newDomainSpecialization).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION, null, msgs);
< 			msgs = basicSetDomainSpecialization(newDomainSpecialization, msgs);
< 			if (msgs != null) msgs.dispatch();
< 		}
< 		else if (eNotificationRequired())
< 			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION, newDomainSpecialization, newDomainSpecialization));
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public ElementInitializer getDomainInitializer() {
< 		return domainInitializer;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public NotificationChain basicSetDomainInitializer(ElementInitializer newDomainInitializer, NotificationChain msgs) {
< 		ElementInitializer oldDomainInitializer = domainInitializer;
< 		domainInitializer = newDomainInitializer;
< 		if (eNotificationRequired()) {
< 			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER, oldDomainInitializer, newDomainInitializer);
< 			if (msgs == null) msgs = notification; else msgs.add(notification);
< 		}
< 		return msgs;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public void setDomainInitializer(ElementInitializer newDomainInitializer) {
< 		if (newDomainInitializer != domainInitializer) {
< 			NotificationChain msgs = null;
< 			if (domainInitializer != null)
< 				msgs = ((InternalEObject)domainInitializer).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER, null, msgs);
< 			if (newDomainInitializer != null)
< 				msgs = ((InternalEObject)newDomainInitializer).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER, null, msgs);
< 			msgs = basicSetDomainInitializer(newDomainInitializer, msgs);
< 			if (msgs != null) msgs.dispatch();
< 		}
< 		else if (eNotificationRequired())
< 			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER, newDomainInitializer, newDomainInitializer));
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public EReference getContainmentFeature() {
< 		if (containmentFeature != null && containmentFeature.eIsProxy()) {
< 			EReference oldContainmentFeature = containmentFeature;
< 			containmentFeature = (EReference)eResolveProxy((InternalEObject)containmentFeature);
< 			if (containmentFeature != oldContainmentFeature) {
< 				if (eNotificationRequired())
< 					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFMapPackage.NODE_MAPPING__CONTAINMENT_FEATURE, oldContainmentFeature, containmentFeature));
< 			}
< 		}
< 		return containmentFeature;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public EReference basicGetContainmentFeature() {
< 		return containmentFeature;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public void setContainmentFeature(EReference newContainmentFeature) {
< 		EReference oldContainmentFeature = containmentFeature;
< 		containmentFeature = newContainmentFeature;
< 		if (eNotificationRequired())
< 			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.NODE_MAPPING__CONTAINMENT_FEATURE, oldContainmentFeature, containmentFeature));
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public EAttribute getEditFeature() {
< 		if (editFeature != null && editFeature.eIsProxy()) {
< 			EAttribute oldEditFeature = editFeature;
< 			editFeature = (EAttribute)eResolveProxy((InternalEObject)editFeature);
< 			if (editFeature != oldEditFeature) {
< 				if (eNotificationRequired())
< 					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFMapPackage.NODE_MAPPING__EDIT_FEATURE, oldEditFeature, editFeature));
< 			}
< 		}
< 		return editFeature;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public EAttribute basicGetEditFeature() {
< 		return editFeature;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public void setEditFeature(EAttribute newEditFeature) {
< 		EAttribute oldEditFeature = editFeature;
< 		editFeature = newEditFeature;
< 		if (eNotificationRequired())
< 			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.NODE_MAPPING__EDIT_FEATURE, oldEditFeature, editFeature));
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public EList getChildMappings() {
< 		if (childMappings == null) {
< 			childMappings = new EObjectContainmentWithInverseEList(ChildNodeMapping.class, this, GMFMapPackage.NODE_MAPPING__CHILD_MAPPINGS, GMFMapPackage.CHILD_NODE_MAPPING__PARENT_NODE);
< 		}
< 		return childMappings;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
547,588d210
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public int eBaseStructuralFeatureID(int derivedFeatureID, Class baseClass) {
< 		if (baseClass == AbstractNodeMapping.class) {
< 			switch (derivedFeatureID) {
< 				case GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE: return GMFMapPackage.ABSTRACT_NODE_MAPPING__DIAGRAM_NODE;
< 				case GMFMapPackage.NODE_MAPPING__DOMAIN_META_ELEMENT: return GMFMapPackage.ABSTRACT_NODE_MAPPING__DOMAIN_META_ELEMENT;
< 				case GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION: return GMFMapPackage.ABSTRACT_NODE_MAPPING__DOMAIN_SPECIALIZATION;
< 				case GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER: return GMFMapPackage.ABSTRACT_NODE_MAPPING__DOMAIN_INITIALIZER;
< 				case GMFMapPackage.NODE_MAPPING__CONTAINMENT_FEATURE: return GMFMapPackage.ABSTRACT_NODE_MAPPING__CONTAINMENT_FEATURE;
< 				case GMFMapPackage.NODE_MAPPING__EDIT_FEATURE: return GMFMapPackage.ABSTRACT_NODE_MAPPING__EDIT_FEATURE;
< 				case GMFMapPackage.NODE_MAPPING__CHILD_MAPPINGS: return GMFMapPackage.ABSTRACT_NODE_MAPPING__CHILD_MAPPINGS;
< 				default: return -1;
< 			}
< 		}
< 		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public int eDerivedStructuralFeatureID(int baseFeatureID, Class baseClass) {
< 		if (baseClass == AbstractNodeMapping.class) {
< 			switch (baseFeatureID) {
< 				case GMFMapPackage.ABSTRACT_NODE_MAPPING__DIAGRAM_NODE: return GMFMapPackage.NODE_MAPPING__DIAGRAM_NODE;
< 				case GMFMapPackage.ABSTRACT_NODE_MAPPING__DOMAIN_META_ELEMENT: return GMFMapPackage.NODE_MAPPING__DOMAIN_META_ELEMENT;
< 				case GMFMapPackage.ABSTRACT_NODE_MAPPING__DOMAIN_SPECIALIZATION: return GMFMapPackage.NODE_MAPPING__DOMAIN_SPECIALIZATION;
< 				case GMFMapPackage.ABSTRACT_NODE_MAPPING__DOMAIN_INITIALIZER: return GMFMapPackage.NODE_MAPPING__DOMAIN_INITIALIZER;
< 				case GMFMapPackage.ABSTRACT_NODE_MAPPING__CONTAINMENT_FEATURE: return GMFMapPackage.NODE_MAPPING__CONTAINMENT_FEATURE;
< 				case GMFMapPackage.ABSTRACT_NODE_MAPPING__EDIT_FEATURE: return GMFMapPackage.NODE_MAPPING__EDIT_FEATURE;
< 				case GMFMapPackage.ABSTRACT_NODE_MAPPING__CHILD_MAPPINGS: return GMFMapPackage.NODE_MAPPING__CHILD_MAPPINGS;
< 				default: return -1;
< 			}
< 		}
< 		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
< 	}
< 
