14,15d13
< import java.beans.PropertyChangeEvent;
< import java.beans.PropertyChangeListener;
31a30
> import org.eclipse.emf.common.notify.Notification;
53c52
< import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;
---
> import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
55d53
< import org.eclipse.gmf.runtime.diagram.core.listener.PropertyChangeNotifier;
65a64
> import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
70d68
< import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
92c90
<  * @author melaasar
---
>  * @author melaasar,mmostafa
98c96
< 	implements IGraphicalEditPart, PropertyChangeListener, IAdaptableSelection {
---
> 	implements IGraphicalEditPart, IAdaptableSelection, NotificationListener {
159c157
< 	protected void addListenerFilter(String filterId,
---
> 	/*protected void addListenerFilter(String filterId,
169c167
< 	}
---
> 	}*/
182c180
< 			PropertyChangeListener listener,
---
> 			NotificationListener listener,
190c188
< 		PresentationListener.getInstance().addPropertyChangeListener(element,listener);
---
> 		PresentationListener.getInstance().addNotificationListener(element,listener);
205c203
< 			PropertyChangeListener listener,
---
> 			NotificationListener listener,
214c212
< 		PresentationListener.getInstance().addPropertyChangeListener(element,listener);
---
> 		PresentationListener.getInstance().addNotificationListener(element,listener);
260c258
< 						removePropertyChangeListener((EObject)obj[0],(EStructuralFeature) obj[1],(PropertyChangeListener) obj[2]);
---
> 						removeNotificationListener((EObject)obj[0],(EStructuralFeature) obj[1],(NotificationListener) obj[2]);
262,265c260
< 					if (obj[0] instanceof PropertyChangeNotifier)
< 						((PropertyChangeNotifier) obj[0]).removePropertyChangeListener((PropertyChangeListener) obj[1]);
< 					else
< 						PresentationListener.getInstance().removePropertyChangeListener((EObject) obj[0],(PropertyChangeListener) obj[1]);
---
> 					PresentationListener.getInstance().removeNotificationListener((EObject) obj[0],(NotificationListener) obj[1]);
589,627d583
< 	 * Handles the passed property changed event only if the editpart's view is
< 	 * not deleted.
< 	 */
< 	public final void propertyChange(PropertyChangeEvent event) {
< 		if (isActive())
< 			handlePropertyChangeEvent(event);
< 	}
< 
< 	/**
< 	 * Handles the property changed event
< 	 * 
< 	 * @param event
< 	 *            the property changed event
< 	 */
< 	protected void handlePropertyChangeEvent(PropertyChangeEvent event) {
< 		if (Properties.ID_PERSISTED_CHILDREN.equals(event.getPropertyName())||
< 			Properties.ID_TRANSIENT_CHILDREN.equals(event.getPropertyName())) {
< 			refreshChildren();
< 		}
< 		else if (Properties.ID_ISVISIBLE.equals(event.getPropertyName())) {
< 			refreshVisibility();
< 		}
< 		else if (Properties.ID_SEMANTICREF.equals(event.getPropertyName())) {
< 			handleMajorSemanticChange();
< 		} else if (event instanceof NotificationEvent) {
< 			handleNotificationEvent((NotificationEvent) event);
< 		}
< 	}
< 
< 	/**
< 	 * Handles the supplied notification event.
< 	 * 
< 	 * @param e event to handle
< 	 */
< 	protected void handleNotificationEvent(NotificationEvent e) {
< 		// for children to override
< 	}
< 
< 	/**
758c714
< 				removePropertyChangeListener((EObject) objects[0],
---
> 				removeNotificationListener((EObject) objects[0],
760c716
< 											 (PropertyChangeListener) objects[2]);
---
> 											 (NotificationListener) objects[2]);
762,767c718
< 			if (objects[0] instanceof PropertyChangeNotifier){
< 				((PropertyChangeNotifier) objects[0])
< 				  .removePropertyChangeListener((PropertyChangeListener) objects[1]);
< 			} else {
< 				PresentationListener.getInstance().removePropertyChangeListener((EObject) objects[0],(PropertyChangeListener) objects[1]);
< 			}
---
> 			PresentationListener.getInstance().removeNotificationListener((EObject) objects[0],(NotificationListener) objects[1]);
1192a1144,1168
> 	public void notifyChanged(Notification notification) {
> 		if (isActive()){
> 			handleNotificationEvent(notification);
> 		}
> 	}
> 
> 	/**
> 	 * Handles the property changed event
> 	 * 
> 	 * @param event
> 	 *            the property changed event
> 	 */
> 	protected void handleNotificationEvent(Notification event) {
> 		if (NotationPackage.eINSTANCE.getView_PersistedChildren().equals(event.getFeature())||
> 				NotationPackage.eINSTANCE.getView_TransientChildren().equals(event.getFeature())) {
> 			refreshChildren();
> 		}
> 		else if (NotationPackage.eINSTANCE.getView_Visible().equals(event.getFeature())) {
> 			refreshVisibility();
> 		}
> 		else if (NotationPackage.eINSTANCE.getView_Element().equals(event.getFeature())) {
> 			handleMajorSemanticChange();
> 		} 
> 	}
> 
