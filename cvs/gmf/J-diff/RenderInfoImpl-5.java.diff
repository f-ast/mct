14,15d13
< import java.awt.Color;
< 
17c15
< 
---
> import org.eclipse.swt.graphics.RGB;
26c24,25
< public final class RenderInfoImpl implements RenderInfo {
---
> class RenderInfoImpl
> 	implements RenderInfo {
28a28
> 
29a30
> 
30a32
> 
32,33c34,37
< 	private Color fill;
< 	private Color outline;
---
> 
> 	private RGB fill = null;
> 
> 	private RGB outline = null;
36,37c40
< 	* getWidth
< 	* Accessor method to return the width of the rendered image.
---
> 	 * getWidth Accessor method to return the width of the rendered image.
46,47c49
< 	 * getHeight
< 	 * Accessor method to return the height of the rendered image.
---
> 	 * getHeight Accessor method to return the height of the rendered image.
56,57c58,59
< 	 * shouldMaintainAspectRatio
< 	 * Accessor method to return whether or not the aspect ratio is maintained.
---
> 	 * shouldMaintainAspectRatio Accessor method to return whether or not the
> 	 * aspect ratio is maintained.
59c61,62
< 	 * @return boolean true if aspect ratio of original vector file is maintained, false otherwise.
---
> 	 * @return boolean true if aspect ratio of original vector file is
> 	 *         maintained, false otherwise.
65c68,70
< 	/* (non-Javadoc)
---
> 	/*
> 	 * (non-Javadoc)
> 	 * 
72c77,115
< 	/* (non-Javadoc)
---
> 	/*
> 	 * (non-Javadoc)
> 	 * 
> 	 * @see org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo#getBackgroundColor()
> 	 */
> 	public RGB getBackgroundColor() {
> 		if (fill == null)
> 			return null;
> 		return new RGB(fill.red, fill.green, fill.blue);
> 	}
> 
> 	/*
> 	 * (non-Javadoc)
> 	 * 
> 	 * @see org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo#getForegroundColor()
> 	 */
> 	public RGB getForegroundColor() {
> 		if (outline == null)
> 			return null;
> 		return new RGB(outline.red, outline.green, outline.blue);
> 	}
> 
> 	/* 
> 	 * (non-Javadoc)
> 	 * @see org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo#setValues(int, int, boolean, boolean, org.eclipse.swt.graphics.RGB, org.eclipse.swt.graphics.RGB)
> 	 */
> 	public void setValues(int width, int height,
> 			boolean maintainAspectRatio, boolean antialias, RGB fill, RGB outline) {
> 		this.width = width;
> 		this.height = height;
> 		this.fill = fill == null ? null : new RGB(fill.red, fill.green, fill.blue);
> 		this.outline = outline == null ? null : new RGB(outline.red, outline.green, outline.blue);
> 		this.maintainAspectRatio = maintainAspectRatio;
> 		this.antialias = antialias;
> 	}
> 
> 	/*
> 	 * (non-Javadoc)
> 	 * 
75,76c118,121
< 	public Color getFillColor() {
< 		return fill;
---
> 	public java.awt.Color getFillColor() {
> 		if (fill != null)
> 			return new java.awt.Color(fill.red, fill.green, fill.blue);
> 		return null;
79c124,126
< 	/* (non-Javadoc)
---
> 	/*
> 	 * (non-Javadoc)
> 	 * 
82,83c129,132
< 	public Color getOutlineColor() {
< 		return outline;
---
> 	public java.awt.Color getOutlineColor() {
> 		if (outline != null)
> 			return new java.awt.Color(outline.red, outline.green, outline.blue);
> 		return null;
86,87c135,139
< 	/* (non-Javadoc)
< 	 * @see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderInfo#setValues(int, int, boolean)
---
> 	/*
> 	 * (non-Javadoc)
> 	 * 
> 	 * @see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderInfo#setValues(int,
> 	 *      int, boolean)
89,93c141,142
< 	public void setValues(
< 		int width,
< 		int height,
< 		Color fill, Color outline,
< 		boolean maintainAspectRatio,
---
> 	public void setValues(int width, int height, java.awt.Color fill,
> 			java.awt.Color outline, boolean maintainAspectRatio,
97,98c146,147
< 		this.fill = fill;
< 		this.outline = outline;
---
> 		this.fill = fill == null ? null : new RGB(fill.getRed(), fill.getGreen(), fill.getBlue());
> 		this.outline = outline == null ? null : new RGB(outline.getRed(), outline.getGreen(), outline.getBlue());
125,126c174,175
< 		this.fill = info.getFillColor();
< 		this.outline = info.getOutlineColor();
---
> 		this.fill = info.getBackgroundColor();
> 		this.outline = info.getForegroundColor();
165,167c214,216
< 				&& shouldMaintainAspectRatio()
< 					== info.shouldMaintainAspectRatio()
< 				&& shouldAntiAlias() == info.shouldAntiAlias())) {
---
> 				&& shouldMaintainAspectRatio() == info
> 					.shouldMaintainAspectRatio() && shouldAntiAlias() == info
> 				.shouldAntiAlias())) {
169,170c218,219
< 			if (getFillColor() == null)	{
< 				if (info.getFillColor() != null)
---
> 			if (getBackgroundColor() == null) {
> 				if (info.getBackgroundColor() != null)
172,173c221
< 			}
< 			else if (!getFillColor().equals(info.getFillColor()))
---
> 			} else if (!getBackgroundColor().equals(info.getBackgroundColor()))
176,177c224,225
< 			if (getOutlineColor() == null) {
< 				if (info.getOutlineColor() != null)
---
> 			if (getForegroundColor() == null) {
> 				if (info.getForegroundColor() != null)
179,180c227
< 			}
< 			else if (!getOutlineColor().equals(info.getOutlineColor()))
---
> 			} else if (!getForegroundColor().equals(info.getForegroundColor()))
