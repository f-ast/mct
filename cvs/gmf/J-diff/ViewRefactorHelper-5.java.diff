22a23
> import org.eclipse.emf.ecore.EClass;
219,220c220
< 		newView.setVisible(oldView.isVisible());
< 		copyViewStyles(oldView, newView);
---
> 		copyViewAppearance(oldView, newView, new ArrayList());
226a227,250
> 	 * Copies the appearance of the old view to the new view.  Typically this means copying the visibility
> 	 * and the styles of the root and it's children.
> 	 * 
> 	 * @param oldView The old view to copy style features from
> 	 * @param newView The new view to copy style features to
> 	 * @param excludeStyles the <code>List</code> of <code>Style.eClass</code> types to exclude
> 	 * from the copy operation.
> 	 */
> 	public void copyViewAppearance(View oldView, View newView, final List excludeStyles) {
> 		newView.setVisible(oldView.isVisible());
> 		copyViewStyles(oldView, newView, excludeStyles);
> 		
> 		for (Iterator j = new ArrayList(oldView.getPersistedChildren()).iterator(); j.hasNext();) {
> 			Node oldChildNode = (Node) j.next();
> 			if (oldView.getElement() == oldChildNode.getElement() && oldChildNode.getType() != null) {
> 				Node newChildNode = (Node) ViewUtil.getChildBySemanticHint(newView, oldChildNode.getType());
> 				if (newChildNode != null) {
> 					copyViewAppearance(oldChildNode, newChildNode, excludeStyles);
> 				}
> 			}
> 		}
> 	}
> 	
> 	/**
232a257,268
> 		copyViewStyles(oldView, newView, new ArrayList());
> 	}
> 	
> 	/**
> 	 * Copies the style features of the old view to the new view
> 	 * 
> 	 * @param oldView The old view to copy style features from
> 	 * @param newView The new view to copy style features to
> 	 * @param excludeStyles the <code>List</code> of <code>Style.eClass</code> types to exclude
> 	 * from the copy operation.
> 	 */
> 	protected void copyViewStyles(View oldView, View newView, final List excludeStyles) {
243a280,284
> 				
> 				EClass containingStyleEClass = feature.getEContainingClass();
> 				if (excludeStyles.contains(containingStyleEClass))
> 					continue;
> 				
