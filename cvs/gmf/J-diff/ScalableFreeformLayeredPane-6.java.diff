17a18
> import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
20,21d20
< import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
< 
30c29
< 	extends org.eclipse.draw2d.ScalableFreeformLayeredPane {
---
> 	extends org.eclipse.draw2d.ScalableFreeformLayeredPane implements IMapMode {
32a32,45
> 	private IMapMode mm;
> 	
> 	/**
> 	 * @return <code>IMapMode</code> that is used to map coordinate coordinates
> 	 * from device to logical.
> 	 */
> 	protected IMapMode getMapMode() {
> 		return mm;
> 	}
> 
> 	public ScalableFreeformLayeredPane(IMapMode mm) {
> 		super();
> 		this.mm = mm;
> 	}
90c103
< 		MapModeGraphics gMM = new MapModeGraphics(graphics);
---
> 		MapModeGraphics gMM = new MapModeGraphics(graphics, getMapMode());
100c113
<     	MapMode.translateToLP(rect);
---
>     	getMapMode().DPtoLP(rect);
109c122
<     	MapMode.translateToDP(t);
---
>     	getMapMode().LPtoDP(t);
117c130,162
<     	MapMode.translateToLP(t);
---
>     	getMapMode().DPtoLP(t);
>     }
> 
> 	/* 
> 	 * (non-Javadoc)
> 	 * @see org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode#DPtoLP(int)
> 	 */
> 	public int DPtoLP(int deviceUnit) {
> 		return getMapMode().DPtoLP(deviceUnit);
> 	}
> 
> 	/* 
> 	 * (non-Javadoc)
> 	 * @see org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode#DPtoLP(org.eclipse.draw2d.geometry.Translatable)
> 	 */
> 	public Translatable DPtoLP(Translatable t) {
> 		return getMapMode().DPtoLP(t);
> 	}
> 
> 	/* 
> 	 * (non-Javadoc)
> 	 * @see org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode#LPtoDP(int)
> 	 */
> 	public int LPtoDP(int logicalUnit) {
> 		return getMapMode().LPtoDP(logicalUnit);
> 	}
> 
> 	/* 
> 	 * (non-Javadoc)
> 	 * @see org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode#LPtoDP(org.eclipse.draw2d.geometry.Translatable)
> 	 */
> 	public Translatable LPtoDP(Translatable t) {
> 		return getMapMode().LPtoDP(t);
