42c42
< import org.eclipse.emf.ocl.parser.EcoreEnvironment;
---
> 
47a48,49
> import org.eclipse.ocl.ecore.EcoreEnvironmentFactory;
> 
157a160,165
> 	// Remark: Backward compatibility for String expression as qualified name of EClassifier
> 	// With MDT OCL, TypeLiteral expression can be used, having the its referred type as
> 	// the result of OCL expression evaluation
> 	// TODO - Can be replaced by <code>ExpressionContextProvider</code> as soon as definitions in GMF models 
> 	// using OCL to define contexts do not use qualified name (String)
> 	//       @constraintsMeta(def="context", ocl="'ecore::EDoubleObject'") => @constraintsMeta(def="context", ocl="ecore::EDoubleObject")	
177,180c185
< 						nameSeq.remove(typeName.length - 1);
< 						EPackage ePackage = EcoreEnvironment.findPackage(nameSeq, registry);
< 						if(ePackage != null) {
< 							EClassifier contextClassifier = ePackage.getEClassifier(typeName[typeName.length - 1]);
---
> 						EClassifier contextClassifier = new EcoreEnvironmentFactory(registry).createEnvironment().lookupClassifier(nameSeq);
186d190
< 			}
514,517d517
< 	public static EClassifier emfToOclType(EClassifier type) {
< 		return EcoreEnvironment.getOCLType(type);
< 	}
< 	
