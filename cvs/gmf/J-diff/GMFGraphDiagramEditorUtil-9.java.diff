2c2
<  * Copyright (c) 2006 Borland Software Corporation and others.
---
>  *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
14,15d13
< import java.io.InputStream;
< import java.lang.reflect.InvocationTargetException;
17a16,17
> import java.util.HashMap;
> import java.util.Iterator;
18a19,20
> import java.util.Map;
> import java.util.Set;
22a25,27
> import org.eclipse.core.resources.IResource;
> import org.eclipse.core.resources.ResourcesPlugin;
> import org.eclipse.core.runtime.CoreException;
25a31,32
> import org.eclipse.core.runtime.NullProgressMonitor;
> import org.eclipse.core.runtime.Path;
27c34
< import org.eclipse.emf.common.util.URI;
---
> import org.eclipse.emf.ecore.EObject;
29c36,43
< import org.eclipse.emf.ecore.resource.ResourceSet;
---
> import org.eclipse.emf.ecore.xmi.XMIResource;
> import org.eclipse.emf.ecore.xmi.XMLResource;
> import org.eclipse.emf.edit.ui.util.EditUIUtil;
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
> import org.eclipse.gef.EditPart;
> import org.eclipse.gmf.gmfgraph.Canvas;
> import org.eclipse.gmf.gmfgraph.GMFGraphFactory;
> import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;
32,33c46,50
< import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorUtil;
< import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;
---
> import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
> import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
> import org.eclipse.gmf.runtime.diagram.ui.editparts.IPrimaryEditPart;
> import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;
> import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;
35a53
> import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
37,48c55,56
< import org.eclipse.jface.operation.IRunnableContext;
< import org.eclipse.jface.operation.IRunnableWithProgress;
< import org.eclipse.swt.widgets.Shell;
< import org.eclipse.ui.IWorkbenchWindow;
< import org.eclipse.emf.transaction.TransactionalEditingDomain;
< import java.util.HashMap;
< import java.util.Map;
< 
< import org.eclipse.core.runtime.CoreException;
< import org.eclipse.core.runtime.Path;
< 
< import org.eclipse.emf.ecore.EObject;
---
> import org.eclipse.gmf.runtime.notation.View;
> import org.eclipse.ui.PartInitException;
50c58,61
< import org.eclipse.emf.ecore.xmi.XMIResource;
---
> /**
>  * @generated
>  */
> public class GMFGraphDiagramEditorUtil {
52,53c63,68
< import org.eclipse.gmf.gmfgraph.Canvas;
< import org.eclipse.gmf.gmfgraph.GMFGraphFactory;
---
> 	/**
> 	 * @generated
> 	 */
> 	public static boolean openDiagram(Resource diagram) throws PartInitException {
> 		return EditUIUtil.openEditor((EObject) diagram.getContents().get(0));
> 	}
58c73,83
< public class GMFGraphDiagramEditorUtil extends IDEEditorUtil {
---
> 	private static void setCharset(org.eclipse.emf.common.util.URI uri) {
> 		IFile file = getFile(uri);
> 		if (file == null) {
> 			return;
> 		}
> 		try {
> 			file.setCharset("UTF-8", new NullProgressMonitor()); //$NON-NLS-1$
> 		} catch (CoreException e) {
> 			GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to set charset for file " + file.getFullPath(), e); //$NON-NLS-1$
> 		}
> 	}
63,67c88,93
< 	public static final IFile createAndOpenDiagram(DiagramFileCreator diagramFileCreator, IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window,
< 			IProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {
< 		IFile diagramFile = GMFGraphDiagramEditorUtil.createNewDiagramFile(diagramFileCreator, containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);
< 		if (diagramFile != null && openEditor) {
< 			IDEEditorUtil.openDiagram(diagramFile, window, saveDiagram, progressMonitor);
---
> 	public static IFile getFile(org.eclipse.emf.common.util.URI uri) {
> 		if (uri.toString().startsWith("platform:/resource")) { //$NON-NLS-1$
> 			String path = uri.toString().substring("platform:/resource".length()); //$NON-NLS-1$
> 			IResource workspaceResource = ResourcesPlugin.getWorkspace().getRoot().findMember(new Path(path));
> 			if (workspaceResource instanceof IFile) {
> 				return (IFile) workspaceResource;
69c95,103
< 		return diagramFile;
---
> 		}
> 		return null;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	public static boolean exists(IPath path) {
> 		return ResourcesPlugin.getWorkspace().getRoot().exists(path);
73d106
< 	 * <p>
75d107
< 	 * </p>
77d108
< 	 * @return the created file resource, or <code>null</code> if the file was not created
79,80c110
< 	public static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator, IPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell,
< 			IProgressMonitor progressMonitor) {
---
> 	public static Resource createDiagram(org.eclipse.emf.common.util.URI diagramURI, org.eclipse.emf.common.util.URI modelURI, IProgressMonitor progressMonitor) {
82,101c112,116
< 		ResourceSet resourceSet = editingDomain.getResourceSet();
< 		progressMonitor.beginTask("Creating diagram and model files", 4); //$NON-NLS-1$
< 		final IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1);
< 		final IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell, new IRunnableContext() {
< 
< 			public void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {
< 				runnable.run(subProgressMonitor);
< 			}
< 		});
< 		final Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));
< 		List affectedFiles = new ArrayList();
< 		affectedFiles.add(diagramFile);
< 
< 		IPath modelFileRelativePath = diagramFile.getFullPath().removeFileExtension().addFileExtension("gmfgraph"); //$NON-NLS-1$
< 		IFile modelFile = diagramFile.getParent().getFile(new Path(modelFileRelativePath.lastSegment()));
< 		final Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFile.getFullPath().toString()));
< 		affectedFiles.add(modelFile);
< 
< 		final String kindParam = kind;
< 		AbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, "Creating diagram and model", affectedFiles) { //$NON-NLS-1$
---
> 		progressMonitor.beginTask("Creating diagram and model files", 3);
> 		final Resource diagramResource = editingDomain.getResourceSet().createResource(diagramURI);
> 		final Resource modelResource = editingDomain.getResourceSet().createResource(modelURI);
> 		final String diagramName = diagramURI.lastSegment();
> 		AbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, "Creating diagram and model", Collections.EMPTY_LIST) { //$NON-NLS-1$
105,106c120,122
< 				modelResource.getContents().add(createInitialRoot(model));
< 				Diagram diagram = ViewService.createDiagram(model, kindParam, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
---
> 				attachModelToResource(model, modelResource);
> 
> 				Diagram diagram = ViewService.createDiagram(model, CanvasEditPart.MODEL_ID, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
109c125
< 					diagram.setName(diagramFile.getName());
---
> 					diagram.setName(diagramName);
111a128
> 
116c133
< 					diagramResource.save(Collections.EMPTY_MAP);
---
> 					diagramResource.save(options);
124d140
< 
130,142c146,148
< 
< 		try {
< 			modelFile.setCharset("UTF-8", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$
< 		} catch (CoreException e) {
< 			GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to set charset for model file", e); //$NON-NLS-1$
< 		}
< 		try {
< 			diagramFile.setCharset("UTF-8", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$
< 		} catch (CoreException e) {
< 			GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to set charset for diagram file", e); //$NON-NLS-1$
< 		}
< 
< 		return diagramFile;
---
> 		setCharset(modelURI);
> 		setCharset(diagramURI);
> 		return diagramResource;
155a162,171
> 	 * Store model element in the resource.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	private static void attachModelToResource(Canvas model, Resource resource) {
> 		resource.getContents().add(model);
> 	}
> 
> 	/**
158,159c174,188
< 	private static EObject createInitialRoot(Canvas model) {
< 		return model;
---
> 	public static void selectElementsInDiagram(IDiagramWorkbenchPart diagramPart, List/*EditPart*/editParts) {
> 		diagramPart.getDiagramGraphicalViewer().deselectAll();
> 
> 		EditPart firstPrimary = null;
> 		for (Iterator it = editParts.iterator(); it.hasNext();) {
> 			EditPart nextPart = (EditPart) it.next();
> 			diagramPart.getDiagramGraphicalViewer().appendSelection(nextPart);
> 			if (firstPrimary == null && nextPart instanceof IPrimaryEditPart) {
> 				firstPrimary = nextPart;
> 			}
> 		}
> 
> 		if (!editParts.isEmpty()) {
> 			diagramPart.getDiagramGraphicalViewer().reveal(firstPrimary != null ? firstPrimary : (EditPart) editParts.get(0));
> 		}
160a190,339
> 
> 	/**
> 	 * @generated
> 	 */
> 	private static int findElementsInDiagramByID(DiagramEditPart diagramPart, EObject element, List editPartCollector) {
> 		IDiagramGraphicalViewer viewer = (IDiagramGraphicalViewer) diagramPart.getViewer();
> 		final int intialNumOfEditParts = editPartCollector.size();
> 
> 		if (element instanceof View) { // support notation element lookup
> 			EditPart editPart = (EditPart) viewer.getEditPartRegistry().get(element);
> 			if (editPart != null) {
> 				editPartCollector.add(editPart);
> 				return 1;
> 			}
> 		}
> 
> 		String elementID = EMFCoreUtil.getProxyID(element);
> 		List associatedParts = viewer.findEditPartsForElement(elementID, IGraphicalEditPart.class);
> 		// perform the possible hierarchy disjoint -> take the top-most parts only
> 		for (Iterator editPartIt = associatedParts.iterator(); editPartIt.hasNext();) {
> 			EditPart nextPart = (EditPart) editPartIt.next();
> 			EditPart parentPart = nextPart.getParent();
> 			while (parentPart != null && !associatedParts.contains(parentPart)) {
> 				parentPart = parentPart.getParent();
> 			}
> 			if (parentPart == null) {
> 				editPartCollector.add(nextPart);
> 			}
> 		}
> 
> 		if (intialNumOfEditParts == editPartCollector.size()) {
> 			if (!associatedParts.isEmpty()) {
> 				editPartCollector.add(associatedParts.iterator().next());
> 			} else {
> 				if (element.eContainer() != null) {
> 					return findElementsInDiagramByID(diagramPart, element.eContainer(), editPartCollector);
> 				}
> 			}
> 		}
> 		return editPartCollector.size() - intialNumOfEditParts;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	public static View findView(DiagramEditPart diagramEditPart, EObject targetElement, LazyElement2ViewMap lazyElement2ViewMap) {
> 		boolean hasStructuralURI = false;
> 		if (targetElement.eResource() instanceof XMLResource) {
> 			hasStructuralURI = ((XMLResource) targetElement.eResource()).getID(targetElement) == null;
> 		}
> 
> 		View view = null;
> 		if (hasStructuralURI && !lazyElement2ViewMap.getElement2ViewMap().isEmpty()) {
> 			view = (View) lazyElement2ViewMap.getElement2ViewMap().get(targetElement);
> 		} else if (findElementsInDiagramByID(diagramEditPart, targetElement, lazyElement2ViewMap.editPartTmpHolder) > 0) {
> 			EditPart editPart = (EditPart) lazyElement2ViewMap.editPartTmpHolder.get(0);
> 			lazyElement2ViewMap.editPartTmpHolder.clear();
> 			view = editPart.getModel() instanceof View ? (View) editPart.getModel() : null;
> 		}
> 
> 		return (view == null) ? diagramEditPart.getDiagramView() : view;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	public static class LazyElement2ViewMap {
> 
> 		/**
> 		 * @generated
> 		 */
> 		private Map element2ViewMap;
> 
> 		/**
> 		 * @generated
> 		 */
> 		private View scope;
> 
> 		/**
> 		 * @generated
> 		 */
> 		private Set elementSet;
> 
> 		/**
> 		 * @generated
> 		 */
> 		public final List editPartTmpHolder = new ArrayList();
> 
> 		/**
> 		 * @generated
> 		 */
> 		public LazyElement2ViewMap(View scope, Set elements) {
> 			this.scope = scope;
> 			this.elementSet = elements;
> 		}
> 
> 		/**
> 		 * @generated
> 		 */
> 		public final Map getElement2ViewMap() {
> 			if (element2ViewMap == null) {
> 				element2ViewMap = new HashMap();
> 				// map possible notation elements to itself as these can't be found by view.getElement()
> 				for (Iterator it = elementSet.iterator(); it.hasNext();) {
> 					EObject element = (EObject) it.next();
> 					if (element instanceof View) {
> 						View view = (View) element;
> 						if (view.getDiagram() == scope.getDiagram()) {
> 							element2ViewMap.put(element, element); // take only those that part of our diagram
> 						}
> 					}
> 				}
> 
> 				buildElement2ViewMap(scope, element2ViewMap, elementSet);
> 			}
> 			return element2ViewMap;
> 		}
> 
> 		/**
> 		 * @generated
> 		 */
> 		static Map buildElement2ViewMap(View parentView, Map element2ViewMap, Set elements) {
> 			if (elements.size() == element2ViewMap.size())
> 				return element2ViewMap;
> 
> 			if (parentView.isSetElement() && !element2ViewMap.containsKey(parentView.getElement()) && elements.contains(parentView.getElement())) {
> 				element2ViewMap.put(parentView.getElement(), parentView);
> 				if (elements.size() == element2ViewMap.size())
> 					return element2ViewMap;
> 			}
> 
> 			for (Iterator it = parentView.getChildren().iterator(); it.hasNext();) {
> 				buildElement2ViewMap((View) it.next(), element2ViewMap, elements);
> 				if (elements.size() == element2ViewMap.size())
> 					return element2ViewMap;
> 			}
> 			for (Iterator it = parentView.getSourceEdges().iterator(); it.hasNext();) {
> 				buildElement2ViewMap((View) it.next(), element2ViewMap, elements);
> 				if (elements.size() == element2ViewMap.size())
> 					return element2ViewMap;
> 			}
> 			for (Iterator it = parentView.getSourceEdges().iterator(); it.hasNext();) {
> 				buildElement2ViewMap((View) it.next(), element2ViewMap, elements);
> 				if (elements.size() == element2ViewMap.size())
> 					return element2ViewMap;
> 			}
> 			return element2ViewMap;
> 		}
> 	} //LazyElement2ViewMap	
> 
