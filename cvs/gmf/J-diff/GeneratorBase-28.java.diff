328,329c328,333
< 					copyImports(cu, declaredImports, new SubProgressMonitor(pm, 1));
< 					getImportsPostrocessor().organizeImports(cu, new SubProgressMonitor(pm, 1));
---
>                     //Since we do organizeImports prior to merge, we must ensure imports added manually are known to OrganizeImportsProcessor
>                     String[] declaredImportsAsStrings = new String[declaredImports.length];
>                     for (int i=0; i<declaredImports.length; i++) {
>                         declaredImportsAsStrings[i] = declaredImports[i].getElementName();
>                     }
> 					getImportsPostrocessor().organizeImports(cu, declaredImportsAsStrings, new SubProgressMonitor(pm, 1));
345c349
< 				getImportsPostrocessor().organizeImports(cu, new SubProgressMonitor(pm, 1));
---
> 				getImportsPostrocessor().organizeImports(cu, null, new SubProgressMonitor(pm, 1));
363,385d366
< 	/*
< 	 * Since we do organizeImports prior to merge, we must ensure
< 	 * imports added manually are known to OrganizeImportsProcessor
< 	 */
< 	private static void copyImports(ICompilationUnit cu, IImportDeclaration[] importsToCopy, IProgressMonitor progress) throws JavaModelException {
< 		if (importsToCopy == null || importsToCopy.length == 0) {
< 			return;
< 		}
< 		progress.beginTask(null, importsToCopy.length + 1);
< 		final String[] imports = new String[importsToCopy.length];
< 		final int[] flags = new int[imports.length];
< 		for (int i = 0; i < importsToCopy.length; i++) {
< 			imports[i] = importsToCopy[i].getElementName();
< 			flags[i] = importsToCopy[i].getFlags();
< 		}
< 		// ensure resource is in sync with buffer (otherwize NPE from CreateElementInCUOperation) 
< 		cu.save(new SubProgressMonitor(progress, 1), true);
< 		for (int i = 0; i < imports.length; i++) {
< 			cu.createImport(imports[i], null, flags[i], new SubProgressMonitor(progress, 1));
< 		}
< 		progress.done();
< 	}
< 
