64c64
< 			calculatePageBreakFigureBounds();
---
> 			calculatePageBreakFigureBounds(true, bounds.getSize());
70a71,79
> 			updatePageCount(width, height);			
> 			
> 			getPageBreaksFigure().setLocation(location);
> 			
> 			
> 		}	
> 	}
> 
> 	private void updatePageCount(int width, int height) {
81d89
< 			getPageBreaksFigure().setLocation(location);
82a91
> 	}
83a93,103
> 	/**
> 	 * Calculates the size of the page breaks figure and the
> 	 * number of rows and columns based on the print page size.
> 	 * This method updates the page breaks figure bounds directly.
> 	 * 
> 	 * @param center true to center the page breaks figure,
> 	 * false to not center it.
> 	 */
> 	public void calculatePageBreakFigureBounds(boolean center) {
> 		calculatePageBreakFigureBounds(center, diagramBounds.getSize());
> 	}
84a105,126
> 	/**
> 	 * Calculates the size of the page breaks figure and the
> 	 * number of rows and columns based on the print page size.
> 	 * This method will also center the page breaks figure.
> 	 */
> 	public void calculatePageBreakFigureBounds() {
> 		calculatePageBreakFigureBounds(true, diagramBounds.getSize());
> 	}	
> 	
> 	/**
> 	 * Calculates the size of the page breaks figure and the
> 	 * number of rows and columns based on the print page size.
> 	 * This method updates the page breaks figure bounds directly.
> 	 * 
> 	 * @param center true to center the page breaks figure,
> 	 * false to not center it.
> 	 */
> 	private void calculatePageBreakFigureBounds(boolean center, Dimension bounds) {
> 		updatePageCount(bounds.width, bounds.height);
> 		
> 		if (center) {
> 			centerPageBreaksFigure();
86,87d127
< 		//diagramBounds = bounds;
< 		//calculatePageBreakFigureSize();	
116,151d155
< 	 * Calculates the size of the page breaks figure and the
< 	 * number of rows and columns based on the print page size.
< 	 * This method updates the page breaks figure bounds directly.
< 	 * 
< 	 * @param center true to center the page breaks figure,
< 	 * false to not center it.
< 	 */
< 	public void calculatePageBreakFigureBounds(boolean center) {
< 		Point printerPageSize = getPageSize();
< 		float numCols = ((float) diagramBounds.width) / printerPageSize.x;
< 		int cols = Math.max(1, (int) Math.ceil(numCols));
< 		float numRows = ((float) diagramBounds.height) / printerPageSize.y;
< 		int rows = Math.max(1, (int) Math.ceil(numRows));
< 
< 		int xInc = printerPageSize.x * cols;
< 		int yInc = printerPageSize.y * rows;
< 
< 		getPageBreaksFigure().setSize(new Dimension(xInc, yInc));
< 		getPageBreaksFigure().setPageCount(rows, cols);
< 		if (center) {
< 			centerPageBreaksFigure();
< 			//setSize won't affect x and y, just width and height
< 			updatePreferenceStore();
< 		}
< 	}
< 	
< 	/**
< 	 * Calculates the size of the page breaks figure and the
< 	 * number of rows and columns based on the print page size.
< 	 * This method will also center the page breaks figure.
< 	 */
< 	public void calculatePageBreakFigureBounds() {
< 		calculatePageBreakFigureBounds(true);
< 	}	
< 	
< 	/**
366d369
< //		this.pageBreakBounds = getPageBreaksFigure().getBounds();
373c376
< 	private void updatePreferenceStore() {
---
> 	public void updatePreferenceStore() {
