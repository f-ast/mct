750c750
<             // Rule 89:  template ::= $Empty
---
>             // Rule 89:  template ::= emptyTemplate
758c758
<             // Rule 90:  template ::= lgOpt commentTextPairAny imports extensionImports defineOrAroundSeq
---
>             // Rule 92:  template ::= LG commentTextPairAny imports extensionImports defineOrAroundSeq
760c760
<             case 90: {
---
>             case 92: {
780c780
<             // Rule 91:  defineOrAroundSeq ::= define TEXT commentTextPairAny defineOrAroundSuffix
---
>             // Rule 93:  defineOrAroundSeq ::= define TEXT commentTextPairAny defineOrAroundSuffix
782c782
<             case 91: {
---
>             case 93: {
791c791
<             // Rule 92:  defineOrAroundSeq ::= around TEXT commentTextPairAny defineOrAroundSuffix
---
>             // Rule 94:  defineOrAroundSeq ::= around TEXT commentTextPairAny defineOrAroundSuffix
793c793
<             case 92: {
---
>             case 94: {
802c802
<             // Rule 93:  defineOrAroundSuffix ::= $Empty
---
>             // Rule 95:  defineOrAroundSuffix ::= $Empty
804c804
<             case 93: {
---
>             case 95: {
810c810
<             // Rule 99:  imports ::= $Empty
---
>             // Rule 101:  imports ::= $Empty
812c812
<             case 99: {
---
>             case 101: {
818c818
<             // Rule 100:  imports ::= anImport imports
---
>             // Rule 102:  imports ::= anImport imports
820c820
<             case 100: {
---
>             case 102: {
829c829
<             // Rule 101:  anImport ::= IMPORT STRING TEXT commentTextPairAny
---
>             // Rule 103:  anImport ::= IMPORT STRING TEXT commentTextPairAny
831c831
<             case 101: {
---
>             case 103: {
837c837
<             // Rule 102:  extensionImports ::= $Empty
---
>             // Rule 104:  extensionImports ::= $Empty
839c839
<             case 102: {
---
>             case 104: {
845c845
<             // Rule 103:  extensionImports ::= anExtensionImport extensionImports
---
>             // Rule 105:  extensionImports ::= anExtensionImport extensionImports
847c847
<             case 103: {
---
>             case 105: {
856c856
<             // Rule 104:  anExtensionImport ::= EXTENSION simpleType TEXT commentTextPairAny
---
>             // Rule 106:  anExtensionImport ::= EXTENSION simpleType TEXT commentTextPairAny
858c858
<             case 104: {
---
>             case 106: {
864c864
<             // Rule 105:  around ::= AROUND pointcut FOR type sequence ENDAROUND
---
>             // Rule 107:  around ::= AROUND pointcut FOR type sequence ENDAROUND
866c866
<             case 105: {
---
>             case 107: {
872c872
<             // Rule 106:  around ::= AROUND pointcut LPAREN declaredParameterList RPAREN FOR type sequence ENDAROUND
---
>             // Rule 108:  around ::= AROUND pointcut LPAREN declaredParameterList RPAREN FOR type sequence ENDAROUND
874c874
<             case 106: {
---
>             case 108: {
880c880
<             // Rule 107:  around ::= AROUND pointcut LPAREN declaredParameterList COMMA MULTI RPAREN FOR type sequence ENDAROUND
---
>             // Rule 109:  around ::= AROUND pointcut LPAREN declaredParameterList COMMA MULTI RPAREN FOR type sequence ENDAROUND
882c882
<             case 107: {
---
>             case 109: {
888c888
<             // Rule 108:  around ::= AROUND pointcut LPAREN MULTI RPAREN FOR type sequence ENDAROUND
---
>             // Rule 110:  around ::= AROUND pointcut LPAREN MULTI RPAREN FOR type sequence ENDAROUND
890c890
<             case 108: {
---
>             case 110: {
896c896
<             // Rule 109:  pointcut ::= MULTI pointcutSuffix
---
>             // Rule 111:  pointcut ::= MULTI pointcutSuffix
898c898
<             case 109: {
---
>             case 111: {
908c908
<             // Rule 110:  pointcut ::= IDENT pointcutSuffix
---
>             // Rule 112:  pointcut ::= IDENT pointcutSuffix
910c910
<             case 110: {
---
>             case 112: {
920c920
<             // Rule 111:  pointcutSuffix ::= $Empty
---
>             // Rule 113:  pointcutSuffix ::= $Empty
922c922
<             case 111: {
---
>             case 113: {
928c928
<             // Rule 113:  pointcutSuffix ::= DCOLON pointcutSuffix
---
>             // Rule 115:  pointcutSuffix ::= DCOLON pointcutSuffix
930c930
<             case 113: {
---
>             case 115: {
940c940
<             // Rule 114:  define ::= DEFINE IDENT FOR type sequence ENDDEFINE
---
>             // Rule 116:  define ::= DEFINE IDENT FOR type sequence ENDDEFINE
942c942
<             case 114: {
---
>             case 116: {
948c948
<             // Rule 115:  define ::= DEFINE IDENT LPAREN declaredParameterList RPAREN FOR type sequence ENDDEFINE
---
>             // Rule 117:  define ::= DEFINE IDENT LPAREN declaredParameterList RPAREN FOR type sequence ENDDEFINE
950c950
<             case 115: {
---
>             case 117: {
956c956
<             // Rule 116:  sequence ::= text sequenceSuffix
---
>             // Rule 118:  sequence ::= text sequenceSuffix
958c958
<             case 116: {
---
>             case 118: {
967c967
<             // Rule 117:  sequenceSuffix ::= $Empty
---
>             // Rule 119:  sequenceSuffix ::= $Empty
969c969
<             case 117: {
---
>             case 119: {
975c975
<             // Rule 118:  sequenceSuffix ::= statement text sequenceSuffix
---
>             // Rule 120:  sequenceSuffix ::= statement text sequenceSuffix
977c977
<             case 118: {
---
>             case 120: {
987c987
<             // Rule 125:  text ::= minusOpt TEXT textSuffix
---
>             // Rule 127:  text ::= minusOpt TEXT textSuffix
989c989
<             case 125: {
---
>             case 127: {
998c998
<             // Rule 126:  textSuffix ::= $Empty
---
>             // Rule 128:  textSuffix ::= $Empty
1000c1000
<             case 126: {
---
>             case 128: {
1006c1006
<             // Rule 127:  textSuffix ::= minusOpt TEXT textSuffix
---
>             // Rule 129:  textSuffix ::= minusOpt TEXT textSuffix
1008c1008
<             case 127: {
---
>             case 129: {
1017c1017
<             // Rule 128:  minusOpt ::= $Empty
---
>             // Rule 130:  minusOpt ::= $Empty
1019c1019
<             case 128: {
---
>             case 130: {
1025c1025
<             // Rule 129:  minusOpt ::= MINUS
---
>             // Rule 131:  minusOpt ::= MINUS
1027c1027
<             case 129: {
---
>             case 131: {
1033c1033
<             // Rule 133:  errorStatement ::= ERROR expression
---
>             // Rule 135:  errorStatement ::= ERROR expression
1035c1035
<             case 133: {
---
>             case 135: {
1041c1041
<             // Rule 134:  expandStatement ::= EXPAND definitionName parameterListOpt
---
>             // Rule 136:  expandStatement ::= EXPAND definitionName parameterListOpt
1043c1043
<             case 134: {
---
>             case 136: {
1049c1049
<             // Rule 135:  expandStatement ::= EXPAND definitionName parameterListOpt FOR expression
---
>             // Rule 137:  expandStatement ::= EXPAND definitionName parameterListOpt FOR expression
1051c1051
<             case 135: {
---
>             case 137: {
1057c1057
<             // Rule 136:  expandStatement ::= EXPAND definitionName parameterListOpt FOREACH expression separatorOpt
---
>             // Rule 138:  expandStatement ::= EXPAND definitionName parameterListOpt FOREACH expression separatorOpt
1059c1059
<             case 136: {
---
>             case 138: {
1065c1065
<             // Rule 137:  parameterListOpt ::= $Empty
---
>             // Rule 139:  parameterListOpt ::= $Empty
1067c1067
<             case 137: {
---
>             case 139: {
1073c1073
<             // Rule 138:  parameterListOpt ::= LPAREN parameterList RPAREN
---
>             // Rule 140:  parameterListOpt ::= LPAREN parameterList RPAREN
1075c1075
<             case 138: {
---
>             case 140: {
1081c1081
<             // Rule 140:  expressionStmt ::= expression
---
>             // Rule 142:  expressionStmt ::= expression
1083c1083
<             case 140: {
---
>             case 142: {
1089c1089
<             // Rule 141:  fileStatement ::= FILE expression identOpt sequence ENDFILE
---
>             // Rule 143:  fileStatement ::= FILE expression identOpt sequence ENDFILE
1091c1091
<             case 141: {
---
>             case 143: {
1097c1097
<             // Rule 142:  identOpt ::= $Empty
---
>             // Rule 144:  identOpt ::= $Empty
1099c1099
<             case 142: {
---
>             case 144: {
1105c1105
<             // Rule 143:  identOpt ::= IDENT
---
>             // Rule 145:  identOpt ::= IDENT
1107c1107
<             case 143: {
---
>             case 145: {
1113c1113
<             // Rule 144:  foreachStatement ::= FOREACH expression AS IDENT iteratorOpt separatorOpt sequence ENDFOREACH
---
>             // Rule 146:  foreachStatement ::= FOREACH expression AS IDENT iteratorOpt separatorOpt sequence ENDFOREACH
1115c1115
<             case 144: {
---
>             case 146: {
1121c1121
<             // Rule 145:  iteratorOpt ::= $Empty
---
>             // Rule 147:  iteratorOpt ::= $Empty
1123c1123
<             case 145: {
---
>             case 147: {
1129c1129
<             // Rule 146:  iteratorOpt ::= ITERATOR IDENT
---
>             // Rule 148:  iteratorOpt ::= ITERATOR IDENT
1131c1131
<             case 146: {
---
>             case 148: {
1137c1137
<             // Rule 147:  separatorOpt ::= $Empty
---
>             // Rule 149:  separatorOpt ::= $Empty
1139c1139
<             case 147: {
---
>             case 149: {
1145c1145
<             // Rule 148:  separatorOpt ::= SEPARATOR expression
---
>             // Rule 150:  separatorOpt ::= SEPARATOR expression
1147c1147
<             case 148: {
---
>             case 150: {
1153c1153
<             // Rule 149:  ifStatement ::= IF expression sequence elseifAny elseOpt ENDIF
---
>             // Rule 151:  ifStatement ::= IF expression sequence elseifAny elseOpt ENDIF
1155c1155
<             case 149: {
---
>             case 151: {
1175c1175
<             // Rule 150:  elseifAny ::= $Empty
---
>             // Rule 152:  elseifAny ::= $Empty
1177c1177
<             case 150: {
---
>             case 152: {
1183c1183
<             // Rule 151:  elseifAny ::= ELSEIF expression sequence elseifAny
---
>             // Rule 153:  elseifAny ::= ELSEIF expression sequence elseifAny
1185c1185
<             case 151: {
---
>             case 153: {
1194c1194
<             // Rule 152:  elseOpt ::= $Empty
---
>             // Rule 154:  elseOpt ::= $Empty
1196c1196
<             case 152: {
---
>             case 154: {
1202c1202
<             // Rule 153:  elseOpt ::= ELSE sequence
---
>             // Rule 155:  elseOpt ::= ELSE sequence
1204c1204
<             case 153: {
---
>             case 155: {
1210c1210
<             // Rule 154:  letStatement ::= LET expression AS IDENT sequence ENDLET
---
>             // Rule 156:  letStatement ::= LET expression AS IDENT sequence ENDLET
1212c1212
<             case 154: {
---
>             case 156: {
1218c1218
<             // Rule 155:  protectStatement ::= PROTECT CSTART expression CEND expression ID expression disabledOpt sequence ENDPROTECT
---
>             // Rule 157:  protectStatement ::= PROTECT CSTART expression CEND expression ID expression disabledOpt sequence ENDPROTECT
1220c1220
<             case 155: {
---
>             case 157: {
1226c1226
<             // Rule 156:  disabledOpt ::= $Empty
---
>             // Rule 158:  disabledOpt ::= $Empty
1228c1228
<             case 156: {
---
>             case 158: {
1234c1234
<             // Rule 157:  disabledOpt ::= DISABLE
---
>             // Rule 159:  disabledOpt ::= DISABLE
1236c1236
<             case 157: {
---
>             case 159: {
