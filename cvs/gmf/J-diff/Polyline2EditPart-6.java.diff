3a4
> import java.util.Collection;
8d8
< 
14d13
< 
15a15
> import org.eclipse.draw2d.Graphics;
20c20
< 
---
> import org.eclipse.draw2d.geometry.Rectangle;
22c22
< 
---
> import org.eclipse.emf.ecore.EObject;
24d23
< 
26d24
< 
29d26
< 
32d28
< 
38,40d33
< import org.eclipse.gmf.gmfgraph.Layout;
< import org.eclipse.gmf.gmfgraph.LayoutData;
< import org.eclipse.gmf.gmfgraph.LineKind;
45d37
< 
50d41
< 
52d42
< 
54d43
< 
57d45
< 
61d48
< 
63d49
< 
66d51
< 
126c111
< 		final NotificationListener layoutListener = new NotificationListener() {
---
> 		final NotificationListener Layoutable_LayoutData_PropertiesListener = new NotificationListener() {
129,130c114,134
< 				Layout layout = (Layout) notification.getNotifier();
< 				layoutPropertyChanged(layout);
---
> 				layoutDataChanged(modelElement.getLayoutData());
> 			}
> 		};
> 		if (modelElement.getLayoutData() != null) {
> 			addListenerFilter("Layoutable_LayoutData_PropertiesListener", Layoutable_LayoutData_PropertiesListener, modelElement.getLayoutData());
> 		}
> 		addListenerFilter("Layoutable_LayoutData_Listener", new NotificationListener() {
> 
> 			public void notifyChanged(Notification notification) {
> 				removeListenerFilter("Layoutable_LayoutData_PropertiesListener");
> 				if (modelElement.getLayoutData() != null) {
> 					addListenerFilter("Layoutable_LayoutData_PropertiesListener", Layoutable_LayoutData_PropertiesListener, modelElement.getLayoutData());
> 				}
> 				layoutDataChanged(modelElement.getLayoutData());
> 			}
> 		}, modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData());
> 
> 		final NotificationListener Layoutable_Layout_PropertiesListener = new NotificationListener() {
> 
> 			public void notifyChanged(Notification notification) {
> 				layoutChanged(modelElement.getLayout());
134c138
< 			addListenerFilter("LayoutPropertiesListener", layoutListener, modelElement.getLayout());
---
> 			addListenerFilter("Layoutable_Layout_PropertiesListener", Layoutable_Layout_PropertiesListener, modelElement.getLayout());
136c140
< 		addListenerFilter("ModelElementLayoutListener", new NotificationListener() {
---
> 		addListenerFilter("Layoutable_Layout_Listener", new NotificationListener() {
139,142c143,145
< 				Layout newLayout = (Layout) notification.getNewValue();
< 				removeListenerFilter("LayoutPropertiesListener");
< 				if (newLayout != null) {
< 					addListenerFilter("LayoutPropertiesListener", layoutListener, newLayout);
---
> 				removeListenerFilter("Layoutable_Layout_PropertiesListener");
> 				if (modelElement.getLayout() != null) {
> 					addListenerFilter("Layoutable_Layout_PropertiesListener", Layoutable_Layout_PropertiesListener, modelElement.getLayout());
144c147
< 				layoutChanged(newLayout, true);
---
> 				layoutChanged(modelElement.getLayout());
148c151
< 		final NotificationListener layoutDataListener = new NotificationListener() {
---
> 		addListenerFilter("Shape_Outline_Listener", new NotificationListener() {
151c154
< 				layoutDataPropertyChanged();
---
> 				myFigure.setOutline(modelElement.isOutline());
153,155c156,161
< 		};
< 		if (modelElement.getLayoutData() != null) {
< 			addListenerFilter("LayoutDataPropertiesListener", layoutDataListener, modelElement.getLayoutData());
---
> 		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_Outline());
> 
> 		addListenerFilter("Shape_Fill_Listener", new NotificationListener() {
> 
> 			public void notifyChanged(Notification notification) {
> 				myFigure.setFill(modelElement.isFill());
157c163,165
< 		addListenerFilter("ModelElementLayoutDataListener", new NotificationListener() {
---
> 		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_Fill());
> 
> 		addListenerFilter("Shape_LineWidth_Listener", new NotificationListener() {
160,163c168
< 				LayoutData newLayoutData = (LayoutData) notification.getNewValue();
< 				removeListenerFilter("LayoutDataPropertiesListener");
< 				if (newLayoutData != null) {
< 					addListenerFilter("LayoutDataPropertiesListener", layoutDataListener, newLayoutData);
---
> 				myFigure.setLineWidth(modelElement.getLineWidth());
165c170,175
< 				layoutDataChanged();
---
> 		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_LineWidth());
> 
> 		addListenerFilter("Shape_LineKind_Listener", new NotificationListener() {
> 
> 			public void notifyChanged(Notification notification) {
> 				myFigure.setLineStyle(getLineStyle(modelElement.getLineKind()));
167c177
< 		}, modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData());
---
> 		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_LineKind());
169c179
< 		addListenerFilter("ModelElementPropertiesListener", new NotificationListener() {
---
> 		addListenerFilter("Shape_XorFill_Listener", new NotificationListener() {
172,176c182
< 				switch (notification.getFeatureID(Polyline.class)) {
< 				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.POLYLINE__OUTLINE: {
< 					boolean value = modelElement.isOutline();
< 					myFigure.setOutline(value);
< 					break;
---
> 				myFigure.setFillXOR(modelElement.isXorFill());
178,181c184,189
< 				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.POLYLINE__FILL: {
< 					boolean value = modelElement.isFill();
< 					myFigure.setFill(value);
< 					break;
---
> 		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_XorFill());
> 
> 		addListenerFilter("Shape_XorOutline_Listener", new NotificationListener() {
> 
> 			public void notifyChanged(Notification notification) {
> 				myFigure.setOutlineXOR(modelElement.isXorOutline());
183,186c191,196
< 				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.POLYLINE__LINE_WIDTH: {
< 					int value = modelElement.getLineWidth();
< 					myFigure.setLineWidth(value);
< 					break;
---
> 		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_XorOutline());
> 
> 		final NotificationListener Polyline_Template_PropertiesListener = new NotificationListener() {
> 
> 			public void notifyChanged(Notification notification) {
> 				myFigure.setPoints(getPointList(modelElement.getTemplate()));
188,194c198,200
< 				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.POLYLINE__LINE_KIND: {
< 					LineKind value = modelElement.getLineKind();
< 					myFigure.setLineStyle("LINE_DASH".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASH : "LINE_DOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DOT
< 							: "LINE_DASHDOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOT
< 									: "LINE_DASHDOTDOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOTDOT
< 											: "LINE_CUSTOM".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_CUSTOM : org.eclipse.draw2d.Graphics.LINE_SOLID);
< 					break;
---
> 		};
> 		for (int i = 0; i < modelElement.getTemplate().size(); i++) {
> 			addListenerFilter("Polyline_Template_PropertiesListener#" + i, Polyline_Template_PropertiesListener, (EObject) modelElement.getTemplate().get(i));
196,199c202,209
< 				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.POLYLINE__XOR_FILL: {
< 					boolean value = modelElement.isXorFill();
< 					myFigure.setFillXOR(value);
< 					break;
---
> 		addListenerFilter("Polyline_Template_Listener", new NotificationListener() {
> 
> 			public void notifyChanged(Notification notification) {
> 				int listSize = modelElement.getTemplate().size();
> 				if (notification.getOldValue() instanceof Collection) {
> 					listSize += ((Collection) notification.getOldValue()).size();
> 				} else {
> 					listSize++;
201,204c211,212
< 				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.POLYLINE__XOR_OUTLINE: {
< 					boolean value = modelElement.isXorOutline();
< 					myFigure.setOutlineXOR(value);
< 					break;
---
> 				for (int i = 0; i < listSize; i++) {
> 					removeListenerFilter("Polyline_Template_PropertiesListener#" + i);
205a214,215
> 				for (int i = 0; i < modelElement.getTemplate().size(); i++) {
> 					addListenerFilter("Polyline_Template_PropertiesListener#" + i, Polyline_Template_PropertiesListener, (EObject) modelElement.getTemplate().get(i));
207c217
< 				myFigure.repaint();
---
> 				myFigure.setPoints(getPointList(modelElement.getTemplate()));
209c219
< 		}, modelElement);
---
> 		}, modelElement, GMFGraphPackage.eINSTANCE.getPolyline_Template());
457,458c467,470
< 				boolean value = modelElement.isOutline();
< 				myFigure.setOutline(value);
---
> 				layoutDataChanged(modelElement.getLayoutData());
> 			}
> 			{
> 				layoutChanged(modelElement.getLayout());
461,462c473
< 				boolean value = modelElement.isFill();
< 				myFigure.setFill(value);
---
> 				myFigure.setOutline(modelElement.isOutline());
465,466c476
< 				int value = modelElement.getLineWidth();
< 				myFigure.setLineWidth(value);
---
> 				myFigure.setFill(modelElement.isFill());
469,472c479
< 				LineKind value = modelElement.getLineKind();
< 				myFigure.setLineStyle("LINE_DASH".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASH : "LINE_DOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DOT
< 						: "LINE_DASHDOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOT : "LINE_DASHDOTDOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOTDOT
< 								: "LINE_CUSTOM".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_CUSTOM : org.eclipse.draw2d.Graphics.LINE_SOLID);
---
> 				myFigure.setLineWidth(modelElement.getLineWidth());
475,476c482
< 				boolean value = modelElement.isXorFill();
< 				myFigure.setFillXOR(value);
---
> 				myFigure.setLineStyle(getLineStyle(modelElement.getLineKind()));
479,480c485,491
< 				boolean value = modelElement.isXorOutline();
< 				myFigure.setOutlineXOR(value);
---
> 				myFigure.setFillXOR(modelElement.isXorFill());
> 			}
> 			{
> 				myFigure.setOutlineXOR(modelElement.isXorOutline());
> 			}
> 			{
> 				myFigure.setPoints(getPointList(modelElement.getTemplate()));
482d492
< 			layoutChanged(modelElement.getLayout(), false);
585a596,597
> 		private Rectangle myBounds;
> 
599a612,657
> 		protected void outlineShape(Graphics g) {
> 			Rectangle bounds = getBounds();
> 			g.translate(bounds.x, bounds.y);
> 			super.outlineShape(g);
> 			g.translate(-bounds.x, -bounds.y);
> 		}
> 
> 		public Rectangle getBounds() {
> 			if (myBounds == null) {
> 				myBounds = new Rectangle(0, 0, 0, 0);
> 			}
> 			return myBounds;
> 		}
> 
> 		public void primTranslate(int dx, int dy) {
> 			getBounds().x += dx;
> 			getBounds().y += dy;
> 			if (useLocalCoordinates()) {
> 				fireCoordinateSystemChanged();
> 				return;
> 			}
> 		}
> 
> 		public void setBounds(Rectangle rect) {
> 			boolean resize = (rect.width != getBounds().width) || (rect.height != getBounds().height), translate = (rect.x != getBounds().x) || (rect.y != getBounds().y);
> 
> 			if ((resize || translate) && isVisible())
> 				erase();
> 			if (translate) {
> 				int dx = rect.x - getBounds().x;
> 				int dy = rect.y - getBounds().y;
> 				primTranslate(dx, dy);
> 			}
> 
> 			getBounds().width = rect.width;
> 			getBounds().height = rect.height;
> 
> 			if (translate || resize) {
> 				if (resize)
> 					invalidate();
> 				fireFigureMoved();
> 				repaint();
> 			}
> 
> 		}
> 
