15d14
< import java.util.Iterator;
17a17
> import org.eclipse.emf.ecore.EClass;
19a20,25
> import org.eclipse.emf.ecore.EEnumLiteral;
> import org.eclipse.emf.ecore.EObject;
> import org.eclipse.emf.ecore.EOperation;
> import org.eclipse.emf.ecore.EPackage;
> import org.eclipse.emf.ecore.EParameter;
> import org.eclipse.emf.ecore.EStructuralFeature;
21,40d26
< import org.eclipse.emf.ocl.expressions.CollectionItem;
< import org.eclipse.emf.ocl.expressions.CollectionLiteralExp;
< import org.eclipse.emf.ocl.expressions.CollectionLiteralPart;
< import org.eclipse.emf.ocl.expressions.ExpressionsFactory;
< import org.eclipse.emf.ocl.expressions.OCLExpression;
< import org.eclipse.emf.ocl.expressions.TypeExp;
< import org.eclipse.emf.ocl.expressions.Variable;
< import org.eclipse.emf.ocl.expressions.util.ExpressionsUtil;
< import org.eclipse.emf.ocl.parser.EcoreEnvironment;
< import org.eclipse.emf.ocl.parser.EcoreEnvironmentFactory;
< import org.eclipse.emf.ocl.parser.Environment;
< import org.eclipse.emf.ocl.parser.EnvironmentFactory;
< import org.eclipse.emf.ocl.parser.ParserException;
< import org.eclipse.emf.ocl.parser.SemanticException;
< import org.eclipse.emf.ocl.query.Query;
< import org.eclipse.emf.ocl.query.QueryFactory;
< import org.eclipse.emf.ocl.types.CollectionType;
< import org.eclipse.emf.ocl.types.TypeType;
< import org.eclipse.emf.ocl.types.impl.TypeUtil;
< import org.eclipse.emf.ocl.types.util.Types;
50a37,48
> import org.eclipse.ocl.Environment;
> import org.eclipse.ocl.ParserException;
> import org.eclipse.ocl.Query;
> import org.eclipse.ocl.ecore.CallOperationAction;
> import org.eclipse.ocl.ecore.CollectionType;
> import org.eclipse.ocl.ecore.Constraint;
> import org.eclipse.ocl.ecore.EcoreEnvironment;
> import org.eclipse.ocl.ecore.EcoreEnvironmentFactory;
> import org.eclipse.ocl.ecore.SendSignalAction;
> import org.eclipse.ocl.ecore.TypeType;
> import org.eclipse.ocl.expressions.ExpressionsFactory;
> import org.eclipse.ocl.expressions.Variable;
58c56,58
< 	private Query query;
---
> 	private Query<EClassifier, EClass, EObject> query;
> 	private Environment<EPackage, EClassifier, EOperation, EStructuralFeature, EEnumLiteral, EParameter, EObject, 
> 				CallOperationAction, SendSignalAction, Constraint, EClass, EObject> env;
64,69c64,70
< 			if(extEnv == null) {
< 				this.query = QueryFactory.eINSTANCE.createQuery(body, context);
< 			} else {
< 				EnvironmentFactory factory = extEnv.getImportRegistry() == null ?
< 						EnvironmentFactory.ECORE_INSTANCE : new EcoreEnvironmentFactory(extEnv.getImportRegistry());
< 				Environment env = factory.createClassifierContext(context);
---
> 			EcoreEnvironmentFactory factory = EcoreEnvironmentFactory.INSTANCE;
> 			org.eclipse.ocl.ecore.OCL ocl = null;			
> 			
> 			if(extEnv != null) {
> 				if(extEnv.getImportRegistry() != null) { 					
> 					factory = new EcoreEnvironmentFactory(extEnv.getImportRegistry());
> 				}
71,72c72,75
< 				for (Iterator it = extEnv.getVariableNames().iterator(); it.hasNext();) {
< 					String varName = (String)it.next();
---
> 				ocl = org.eclipse.ocl.ecore.OCL.newInstance(factory);
> 				this.env = ocl.getEnvironment(); 
> 				
> 				for(String varName : extEnv.getVariableNames()) {
75c78
< 					Variable varDecl = ExpressionsFactory.eINSTANCE.createVariable();
---
> 					Variable<EClassifier, EParameter> varDecl = ExpressionsFactory.eINSTANCE.createVariable();
78c81
< 					env.addElement(varDecl.getName(), varDecl, false);
---
> 					env.addElement(varDecl.getName(), varDecl, true);
80,81c83,85
< 				OCLExpression oclExpression = ExpressionsUtil.createQuery(env, body, true);
< 				this.query = QueryFactory.eINSTANCE.createQuery(oclExpression);
---
> 			} else {
> 				ocl = org.eclipse.ocl.ecore.OCL.newInstance(EcoreEnvironmentFactory.INSTANCE);
> 				this.env = (EcoreEnvironment)ocl.getEnvironment();				
82a87,91
> 
> 			org.eclipse.ocl.ecore.OCL.Helper helper = ocl.createOCLHelper();
> 			helper.setContext(context);			
> 			this.query = ocl.createQuery(helper.createQuery(body));
> 			
105c114,118
< 		EClassifier oclType = EcoreEnvironment.getOCLType(ecoreType);
---
> 		if(env == null) {
> 			return false;
> 		}
> 		
> 		EClassifier oclType =  env.getUMLReflection().getOCLType(ecoreType);
113c126,129
< 		EClassifier oclType = EcoreEnvironment.getOCLType(typedElement);
---
> 		if(env == null || typedElement.getEType() == null) {
> 			return false;
> 		}
> 		EClassifier oclType = env.getUMLReflection().getOCLType(typedElement);
129c145,151
< 		// TODO - add custom variables !!!
---
> 		if(query != null) {
> 			query.getEvaluationEnvironment().clear();			
> 			for (String varName : extEnvironment.getVariableNames()) {
> 				query.getEvaluationEnvironment().add(varName, extEnvironment.getValueOf(varName));
> 			}
> 		}
> 
133,134c155,156
< 	private static Object filterOCLInvalid(Object object) {
< 		return object == Types.OCL_INVALID ? null : object;
---
> 	private Object filterOCLInvalid(Object object) {
> 		return (env != null && object == env.getOCLStandardLibrary().getOclInvalid()) ? null : object;
137c159
< 	boolean isOclConformantTo(EClassifier anotherOclType) {
---
> 	private boolean isOclConformantTo(EClassifier anotherOclType) {
158c180
< 		// handle OCL TypeType meta-types
---
> 		// handle OCL TypeType
160,163c182
< 			// There is no way of getting the reffered type directly from the TypeType
< 			// Handle only, TypeExp here as there should be no other use-case producing TypeType 
< 			// except for the type literal.			
< 			EClassifier thisRefferedClassifier = getReferredType(query.getExpression());	
---
> 			EClassifier thisRefferedClassifier = ((TypeType)thisOclType).getReferredType();	
186,216d204
< 	static EClassifier getReferredType(OCLExpression oclExpression) {
< 		EClassifier referredType = null;
< 		if(oclExpression instanceof TypeExp) {
< 			// There is no way of getting the reffered type directly from the TypeType
< 			// Handle only, TypeExp here as there should be no other use-case producing TypeType 
< 			// except for the type literal.
< 			referredType = ((TypeExp)oclExpression).getReferredType();
< 		} else if(oclExpression instanceof CollectionLiteralExp) {
< 			for (Iterator it = ((CollectionLiteralExp)oclExpression).getPart().iterator(); it.hasNext();) {
< 				CollectionLiteralPart nextPart = (CollectionLiteralPart) it.next();
< 				
< 				if(nextPart.getType() instanceof TypeType && nextPart instanceof CollectionItem) {
< 					EClassifier nextType = getReferredType(((CollectionItem)nextPart).getItem());
< 					if(referredType == null) {
< 						referredType = nextType;
< 					} else {
< 						try {
< 							if(nextType != null) {
< 								referredType = TypeUtil.commonSuperType(referredType, nextType);
< 							}
< 						} catch (SemanticException e) {
< 							// Should never happen as the OCL expression should have been successfully parsed
< 							assert false;
< 							return null;
< 						}
< 					}
< 				}
< 			}
< 		}
< 		return referredType;
< 	}
