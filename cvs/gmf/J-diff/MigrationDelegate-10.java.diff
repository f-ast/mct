16a17
> import java.util.List;
19a21,23
> import org.eclipse.emf.ecore.EClass;
> import org.eclipse.emf.ecore.EClassifier;
> import org.eclipse.emf.ecore.EFactory;
20a25
> import org.eclipse.emf.ecore.EPackage;
23d27
< import org.eclipse.emf.ecore.EcorePackage;
25d28
< import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;
27,35d29
< import org.eclipse.gmf.codegen.gmfgen.GenAuditContainer;
< import org.eclipse.gmf.codegen.gmfgen.GenAuditContext;
< import org.eclipse.gmf.codegen.gmfgen.GenAuditRoot;
< import org.eclipse.gmf.codegen.gmfgen.GenAuditRule;
< import org.eclipse.gmf.codegen.gmfgen.GenAuditable;
< import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
< import org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter;
< import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
< import org.eclipse.gmf.codegen.gmfgen.GenPlugin;
37a32,35
> /**
>  * Migration from old, 2005-styled GMF models to instances of dynamic 2006 model 
>  * (should be updated further to normal 2008 using CustomCopier)
>  */
44,48c42,44
< 	private GenAuditContainer myRootContainer;
< 	private Map<GenExpressionInterpreter, Collection<String>> myRequiredPlugins;
< 	private GenExpressionProviderContainer myProvidersContainer;
< 	private EAttribute myGenAuditRule_ContextSelectorLocalClassName;
< 	private Map<GenAuditRule, String> myAuditContexts;
---
> 	private EObject myRootContainer;
> 	private LinkedHashMap<EObject, Collection<String>> myRequiredPlugins;
> 	private EObject myProvidersContainer;
52a49,84
> 	private EPackage gmfgen2006 = get2006GenModelPackage();
> 	private EFactory factory2006 = gmfgen2006.getEFactoryInstance();
> 	private GMFGenPackage gmfgen2008 = GMFGenPackage.eINSTANCE;
> 
> 	private EClassifier class_editorCandies = gmfgen2006.getEClassifier(gmfgen2008.getEditorCandies().getName());
> 	private EClassifier class_providerClassNames = gmfgen2006.getEClassifier(gmfgen2008.getProviderClassNames().getName());
> 	private EClassifier class_editPartCandies = gmfgen2006.getEClassifier(gmfgen2008.getEditPartCandies().getName());
> 	private EClassifier class_typeLinkModelFacet = gmfgen2006.getEClassifier(gmfgen2008.getTypeLinkModelFacet().getName());
> 	private EClass class_genPlugin = (EClass) gmfgen2006.getEClassifier(gmfgen2008.getGenPlugin().getName());
> 	private EClass class_genExpressionInterpreter = (EClass) gmfgen2006.getEClassifier(gmfgen2008.getGenExpressionInterpreter().getName());
> 	private EClass class_featureLabelModelFacet = (EClass) gmfgen2006.getEClassifier(gmfgen2008.getFeatureLabelModelFacet().getName());
> 	private EClass class_genAuditRule = (EClass) gmfgen2006.getEClassifier(gmfgen2008.getGenAuditRule().getName());
> 	private EClass class_genAuditContainer = (EClass) gmfgen2006.getEClassifier(gmfgen2008.getGenAuditContainer().getName());
> 	private EClass class_genAuditRoot = (EClass) gmfgen2006.getEClassifier(gmfgen2008.getGenAuditRoot().getName());
> 	private EClass class_genFeatureValueSpec = (EClass) gmfgen2006.getEClassifier(gmfgen2008.getGenFeatureValueSpec().getName());
> 	private EClass class_genExpressionProviderBase = (EClass) gmfgen2006.getEClassifier(gmfgen2008.getGenExpressionProviderBase().getName());
> 	private EClass class_genExpressionProviderContainer = (EClass) gmfgen2006.getEClassifier(gmfgen2008.getGenExpressionProviderContainer().getName());
> 	private EClass class_genEditorGenerator = (EClass) gmfgen2006.getEClassifier(gmfgen2008.getGenEditorGenerator().getName());
> 
> 	private EStructuralFeature feature_genExpressionProviderBase_container = class_genExpressionProviderBase.getEStructuralFeature(gmfgen2008.getGenExpressionProviderBase_Container().getName());
> 	private EStructuralFeature feature_genExpressionProviderContainer_providers = class_genExpressionProviderContainer.getEStructuralFeature(gmfgen2008.getGenExpressionProviderContainer_Providers().getName());
> 	private EStructuralFeature feature_genExpressionProviderContainer_editorGen = class_genExpressionProviderContainer.getEStructuralFeature(gmfgen2008.getGenExpressionProviderContainer_EditorGen().getName());
> 	private EStructuralFeature feature_genEditorGenerator_expressionProviders = class_genEditorGenerator.getEStructuralFeature(gmfgen2008.getGenEditorGenerator_ExpressionProviders().getName());
> 	private EStructuralFeature feature_genEditorGenerator_plugin = class_genEditorGenerator.getEStructuralFeature(gmfgen2008.getGenEditorGenerator_Plugin().getName());
> 	private EStructuralFeature feature_genPlugin_requiredPlugins = class_genPlugin.getEStructuralFeature(gmfgen2008.getGenPlugin_RequiredPlugins().getName());
> 	private EStructuralFeature feature_featureLabelModelFacet_metaFeatures = class_featureLabelModelFacet.getEStructuralFeature(gmfgen2008.getFeatureLabelModelFacet_MetaFeatures().getName());
> 	private EStructuralFeature feature_genAuditContainer_path = class_genAuditContainer.getEStructuralFeature(gmfgen2008.getGenAuditContainer_Path().getName());
> 	private EStructuralFeature feature_genAuditContainer_id = class_genAuditContainer.getEStructuralFeature(gmfgen2008.getGenAuditContainer_Id().getName());
> 	private EStructuralFeature feature_genAuditContainer_name = class_genAuditContainer.getEStructuralFeature(gmfgen2008.getGenAuditContainer_Name().getName());
> 	private EStructuralFeature feature_genAuditContainer_description = class_genAuditContainer.getEStructuralFeature(gmfgen2008.getGenAuditContainer_Description().getName());
> 	private EStructuralFeature feature_genAuditContainer_audits = class_genAuditContainer.getEStructuralFeature(gmfgen2008.getGenAuditContainer_Audits().getName());
> 	private EStructuralFeature feature_genAuditContainer_root = class_genAuditContainer.getEStructuralFeature(gmfgen2008.getGenAuditContainer_Root().getName());
> 	private EStructuralFeature feature_genAuditRoot_categories = class_genAuditRoot.getEStructuralFeature(gmfgen2008.getGenAuditRoot_Categories().getName());
> 	private EStructuralFeature feature_genAuditRoot_rules = class_genAuditRoot.getEStructuralFeature(gmfgen2008.getGenAuditRoot_Rules().getName());
> 	private EStructuralFeature feature_genAuditRule_category = class_genAuditRule.getEStructuralFeature(gmfgen2008.getGenAuditRule_Category().getName());
> 
54c86
< 		registerDeletedAttributes(GMFGenPackage.eINSTANCE.getEditorCandies(),
---
> 		registerDeletedAttributes(class_editorCandies,
58c90
< 		registerDeletedAttributes(GMFGenPackage.eINSTANCE.getProviderClassNames(), 
---
> 		registerDeletedAttributes(class_providerClassNames, 
67c99
< 		registerDeletedAttributes(GMFGenPackage.eINSTANCE.getEditPartCandies(), 
---
> 		registerDeletedAttributes(class_editPartCandies, 
71c103
< 		registerDeletedAttributes(GMFGenPackage.eINSTANCE.getTypeLinkModelFacet(), "createCommandClassName"); //$NON-NLS-1$
---
> 		registerDeletedAttributes(class_typeLinkModelFacet, "createCommandClassName"); //$NON-NLS-1$
74,75c106,107
< 			renamings.put("requiredPluginIDs", GMFGenPackage.eINSTANCE.getGenPlugin_RequiredPlugins()); //$NON-NLS-1$
< 			registerRenamedAttributes(GMFGenPackage.eINSTANCE.getGenExpressionInterpreter(), renamings);
---
> 			renamings.put("requiredPluginIDs", feature_genPlugin_requiredPlugins); //$NON-NLS-1$
> 			registerRenamedAttributes(class_genExpressionInterpreter, renamings);
79,80c111,112
< 			renamings.put("metaFeature", GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet_MetaFeatures()); //$NON-NLS-1$
< 			registerRenamedAttributes(GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet(), renamings);
---
> 			renamings.put("metaFeature", feature_featureLabelModelFacet_metaFeatures); //$NON-NLS-1$
> 			registerRenamedAttributes(class_featureLabelModelFacet, renamings);
82,83c114,115
< 		registerRenamedType("CompositeFeatureLabelModelFacet", GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet()); //$NON-NLS-1$
< 		myGenAuditContainer_ChildContainers = createNewReference("childContainers", GMFGenPackage.eINSTANCE.getGenAuditContainer(), true); //$NON-NLS-1$
---
> 		registerRenamedType("CompositeFeatureLabelModelFacet", class_featureLabelModelFacet); //$NON-NLS-1$
> 		myGenAuditContainer_ChildContainers = createNewReference("childContainers", class_genAuditContainer, true); //$NON-NLS-1$
87c119
< 			registerRenamedAttributes(GMFGenPackage.eINSTANCE.getGenAuditContainer(), renamings);
---
> 			registerRenamedAttributes(class_genAuditContainer, renamings);
89,92c121,124
< 		myGenAuditRoot_Id = (EAttribute) EcoreUtil.copy(GMFGenPackage.eINSTANCE.getGenAuditContainer_Id());
< 		myGenAuditRoot_Name = (EAttribute) EcoreUtil.copy(GMFGenPackage.eINSTANCE.getGenAuditContainer_Name());
< 		myGenAuditRoot_Description = (EAttribute) EcoreUtil.copy(GMFGenPackage.eINSTANCE.getGenAuditContainer_Description());
< 		myGenAuditRoot_Audits = createNewReference("audits", GMFGenPackage.eINSTANCE.getGenAuditRule(), true); //$NON-NLS-1$
---
> 		myGenAuditRoot_Id = (EAttribute) EcoreUtil.copy(gmfgen2008.getGenAuditContainer_Id());
> 		myGenAuditRoot_Name = (EAttribute) EcoreUtil.copy(gmfgen2008.getGenAuditContainer_Name());
> 		myGenAuditRoot_Description = (EAttribute) EcoreUtil.copy(gmfgen2008.getGenAuditContainer_Description());
> 		myGenAuditRoot_Audits = createNewReference("audits", class_genAuditRule, true); //$NON-NLS-1$
100c132
< 			registerRenamedAttributes(GMFGenPackage.eINSTANCE.getGenAuditRoot(), renamings);
---
> 			registerRenamedAttributes(class_genAuditRoot, renamings);
102,104d133
< 
< 		myGenAuditRule_ContextSelectorLocalClassName = createNewAttribute("contextSelectorLocalClassName", EcorePackage.eINSTANCE.getEString(), false);
< 		registerRenamedAttribute(GMFGenPackage.eINSTANCE.getGenAuditRule(), myGenAuditRule_ContextSelectorLocalClassName.getName(), myGenAuditRule_ContextSelectorLocalClassName);
106c135
< 		registerNarrowedAbstractType("GenFeatureInitializer", GMFGenPackage.eINSTANCE.getGenFeatureValueSpec()); //$NON-NLS-1$
---
> 		registerNarrowedAbstractType("GenFeatureInitializer", class_genFeatureValueSpec); //$NON-NLS-1$
111d139
< 		myAuditContexts = null;
113a142
> 	@SuppressWarnings("unchecked")
116,117c145,148
< 		if (GMFGenPackage.eINSTANCE.getGenPlugin_RequiredPlugins().equals(feature) && object instanceof GenExpressionInterpreter) {
< 			GenExpressionInterpreter expressionInterpreter = (GenExpressionInterpreter) object;
---
> 		if (!gmfgen2006.equals(object.eClass().getEPackage())) {
> 			return super.setValue(object, feature, value, position);
> 		}
> 		if (feature_genPlugin_requiredPlugins.equals(feature) && class_genExpressionInterpreter.isInstance(object)) {
119c150
< 			saveRequiredPlugin(expressionInterpreter, requiredPlugin);
---
> 			saveRequiredPlugin(object, requiredPlugin);
121c152
< 			GenAuditRoot root = (GenAuditRoot) object;
---
> 			EObject root = object;
123,124c154,155
< 			GenAuditContainer rootContainer = getOrCreateRootContainerOnce(root);
< 			rootContainer.setId(id);
---
> 			EObject rootContainer = getOrCreateRootContainerOnce(root);
> 			rootContainer.eSet(feature_genAuditContainer_id, id);
127c158
< 			GenAuditRoot root = (GenAuditRoot) object;
---
> 			EObject root = object;
129,130c160,161
< 			GenAuditContainer rootContainer = getOrCreateRootContainerOnce(root);
< 			rootContainer.setName(name);
---
> 			EObject rootContainer = getOrCreateRootContainerOnce(root);
> 			rootContainer.eSet(feature_genAuditContainer_name, name);
133c164
< 			GenAuditRoot root = (GenAuditRoot) object;
---
> 			EObject root = object;
135,136c166,167
< 			GenAuditContainer rootContainer = getOrCreateRootContainerOnce(root);
< 			rootContainer.setDescription(description);
---
> 			EObject rootContainer = getOrCreateRootContainerOnce(root);
> 			rootContainer.eSet(feature_genAuditContainer_description, description);
138,140c169,171
< 		} else if (myGenAuditContainer_ChildContainers.equals(feature) && object instanceof GenAuditRoot) {
< 			GenAuditRoot root = (GenAuditRoot)object;
< 			GenAuditContainer container = (GenAuditContainer)value;
---
> 		} else if (myGenAuditContainer_ChildContainers.equals(feature) && class_genAuditRoot.isInstance(object)) {
> 			EObject root = object;
> 			EObject container = (EObject)value;
142c173
< 				container.getPath().add(myRootContainer);
---
> 				((List<EObject>)container.eGet(feature_genAuditContainer_path)).add(myRootContainer);
144c175
< 			root.getCategories().add(container);
---
> 			((List<EObject>)root.eGet(feature_genAuditRoot_categories)).add(container);
146,148c177,179
< 		} else if (myGenAuditRoot_Audits.equals(feature) && object instanceof GenAuditRoot) {
< 			GenAuditRoot root = (GenAuditRoot)object;
< 			GenAuditRule rule = (GenAuditRule)value;
---
> 		} else if (myGenAuditRoot_Audits.equals(feature) && class_genAuditRoot.isInstance(object)) {
> 			EObject root = object;
> 			EObject rule = (EObject)value;
150c181
< 				rule.setCategory(myRootContainer);
---
> 				rule.eSet(feature_genAuditRule_category, myRootContainer);
153,159c184,190
< 			root.getRules().add(rule);
< 		} else if (myGenAuditContainer_ChildContainers.equals(feature) && object instanceof GenAuditContainer) {
< 			GenAuditContainer parent = (GenAuditContainer)object;
< 			GenAuditContainer container = (GenAuditContainer)value;
< 			container.getPath().addAll(parent.getPath());
< 			container.getPath().add(parent);
< 			getOrCreateRoot(parent).getCategories().add(container);
---
> 			((List<EObject>)root.eGet(feature_genAuditRoot_rules)).add(rule);
> 		} else if (myGenAuditContainer_ChildContainers.equals(feature) && class_genAuditContainer.isInstance(object)) {
> 			EObject parent = object;
> 			EObject container = (EObject)value;
> 			((List<EObject>)container.eGet(feature_genAuditContainer_path)).addAll(((List<EObject>)parent.eGet(feature_genAuditContainer_path)));
> 			((List<EObject>)container.eGet(feature_genAuditContainer_path)).add(parent);
> 			((List<EObject>)getOrCreateRoot(parent).eGet(feature_genAuditRoot_categories)).add(container);
161,169c192,196
< 		} else if (GMFGenPackage.eINSTANCE.getGenAuditContainer_Audits().equals(feature) && object instanceof GenAuditContainer) {
< 			GenAuditContainer container = (GenAuditContainer)object;
< 			GenAuditRule rule = (GenAuditRule)value;
< 			rule.setCategory(container);
< 			getOrCreateRoot(container).getRules().add(rule);
< 		} else if (myGenAuditRule_ContextSelectorLocalClassName.equals(feature)) {
< 			GenAuditRule rule = (GenAuditRule) object;
< 			String className = (String) value;
< 			saveAuditContext(rule, className);
---
> 		} else if (feature_genAuditContainer_audits.equals(feature) && class_genAuditContainer.isInstance(object)) {
> 			EObject container = object;
> 			EObject rule = (EObject)value;
> 			rule.eSet(feature_genAuditRule_category, container);
> 			((List<EObject>)getOrCreateRoot(container).eGet(feature_genAuditRoot_rules)).add(rule);
177,188c204
< 	private void saveAuditContext(GenAuditRule rule, String className) {
< 		if (myAuditContexts == null) {
< 			myAuditContexts = new LinkedHashMap<GenAuditRule, String>();
< 		}
< 		myAuditContexts.put(rule, className);
< 	}
< 	
< 	private Map<GenAuditRule, String> getSavedAuditContexts() {
< 		return myAuditContexts;
< 	}
< 
< 	private void saveRequiredPlugin(GenExpressionInterpreter expressionProvider, String requiredPlugin) {
---
> 	private void saveRequiredPlugin(EObject expressionProvider, String requiredPlugin) {
190c206
< 			myRequiredPlugins = new LinkedHashMap<GenExpressionInterpreter, Collection<String>>();
---
> 			myRequiredPlugins = new LinkedHashMap<EObject, Collection<String>>();
200c216
< 	private Map<GenExpressionInterpreter, Collection<String>> getSavedRequiredPlugins() {
---
> 	private Map<EObject, Collection<String>> getSavedRequiredPlugins() {
203a220
> 	@SuppressWarnings("unchecked")
207,208c224,225
< 			for (GenExpressionInterpreter expressionProvider : getSavedRequiredPlugins().keySet()) {
< 				GenExpressionProviderContainer container = expressionProvider.getContainer();
---
> 			for (EObject expressionProvider : getSavedRequiredPlugins().keySet()) {
> 				EObject container = (EObject) expressionProvider.eGet(feature_genExpressionProviderBase_container);
211c228
< 					container.getProviders().add(expressionProvider);
---
> 					((List<EObject>)container.eGet(feature_genExpressionProviderContainer_providers)).add(expressionProvider);
213c230
< 				GenEditorGenerator editor = container.getEditorGen();
---
> 				EObject editor = (EObject) container.eGet(feature_genExpressionProviderContainer_editorGen);
215,217c232,234
< 					editor = GMFGenFactory.eINSTANCE.createGenEditorGenerator();
< 					container.eResource().getContents().add(editor);
< 					editor.setExpressionProviders(container);
---
> 					editor = factory2006.create(class_genEditorGenerator);
> 					container.eResource().getContents().add(editor); //XXX!!!
> 					editor.eSet(feature_genEditorGenerator_expressionProviders, container);
219c236
< 				GenPlugin plugin = editor.getPlugin();
---
> 				EObject plugin = (EObject) editor.eGet(feature_genEditorGenerator_plugin);
221,222c238,239
< 					plugin = GMFGenFactory.eINSTANCE.createGenPlugin();
< 					editor.setPlugin(plugin);
---
> 					plugin = factory2006.create(class_genPlugin);
> 					editor.eSet(feature_genEditorGenerator_plugin, plugin);
224c241
< 				plugin.getRequiredPlugins().addAll(getSavedRequiredPlugins().get(expressionProvider));
---
> 				((List<String>)plugin.eGet(feature_genPlugin_requiredPlugins)).addAll(getSavedRequiredPlugins().get(expressionProvider));
229,262d245
< 		if (getSavedAuditContexts() != null) {
< 			for (GenAuditRule rule : getSavedAuditContexts().keySet()) {
< 				GenAuditRoot root = getOrCreateRoot(rule);
< 				String className = getSavedAuditContexts().get(rule);
< 				GenAuditContext context = getOrCreateContext(root, className);
< 				GenAuditable target = rule.getTarget();
< 				if (target != null) {
< 					target.setContextSelector(context);
< 					fireMigrationApplied(true);
< 				}
< 			}
< 			getSavedAuditContexts().clear();
< 		}
< 	}
< 	
< 	private GenAuditContext getOrCreateContext(GenAuditRoot root, String className) {
< 		GenAuditContext context = null;
< 		for (GenAuditContext next : root.getClientContexts()) {
< 			String explicit = next.getClassName();
< 			if (className.equals(explicit) || (explicit == null && className.equals(next.getId()))) {
< 				context = next;
< 				break;
< 			}
< 		}
< 		if (context == null) {
< 			context = GMFGenFactory.eINSTANCE.createGenAuditContext();
< 			String id = generateUnique(root, className);
< 			context.setId(id);
< 			if (!id.equals(className)) {
< 				context.setClassName(className);
< 			}
< 			root.getClientContexts().add(context);
< 		}
< 		return context;
265,282c248
< 	private String generateUnique(GenAuditRoot root, String defaultId) {
< 		String id = defaultId;
< 		int i = 0;
< 		boolean haveSuchId = false;
< 		do {
< 			haveSuchId = false;
< 			for (GenAuditContext next : root.getClientContexts()) {
< 				if (id.equals(next.getId())) {
< 					haveSuchId = true;
< 					id = defaultId + (++i);
< 					break;
< 				}
< 			}
< 		} while (haveSuchId);
< 		return id;
< 	}
< 
< 	private GenExpressionProviderContainer getOrCreateParenlessProvidersContainerOnce(GenExpressionInterpreter expressionProvider) {
---
> 	private EObject getOrCreateParenlessProvidersContainerOnce(EObject expressionProvider) {
284c250
< 			myProvidersContainer = GMFGenFactory.eINSTANCE.createGenExpressionProviderContainer();
---
> 			myProvidersContainer = factory2006.create(class_genExpressionProviderContainer);
290c256,257
< 	private GenAuditContainer getOrCreateRootContainerOnce(GenAuditRoot root) {
---
> 	@SuppressWarnings("unchecked")
> 	private EObject getOrCreateRootContainerOnce(EObject root) {
292,293c259,260
< 			myRootContainer = GMFGenFactory.eINSTANCE.createGenAuditContainer();
< 			root.getCategories().add(myRootContainer);
---
> 			myRootContainer = factory2006.create(class_genAuditContainer);
> 			((List<EObject>) root.eGet(feature_genAuditRoot_categories)).add(myRootContainer);
298,299c265,267
< 	private GenAuditRoot getOrCreateRoot(GenAuditContainer auditContainer) {
< 		GenAuditRoot result = auditContainer.getRoot();
---
> 	@SuppressWarnings("unchecked")
> 	private EObject getOrCreateRoot(EObject auditContainer) {
> 		EObject result = (EObject) auditContainer.eGet(feature_genAuditContainer_root);
302,311c270
< 			result.getCategories().add(auditContainer);
< 		}
< 		return result;
< 	}
< 
< 	private GenAuditRoot getOrCreateRoot(GenAuditRule auditRule) {
< 		GenAuditRoot result = auditRule.getRoot();
< 		if (result == null) {
< 			result = createRoot(auditRule);
< 			result.getRules().add(auditRule);
---
> 			((List<EObject>) result.eGet(feature_genAuditRoot_categories)).add(auditContainer);
316,317c275,276
< 	private GenAuditRoot createRoot(EObject child) {
< 		GenAuditRoot result = GMFGenFactory.eINSTANCE.createGenAuditRoot();
---
> 	private EObject createRoot(EObject child) {
> 		EObject result = factory2006.create(class_genAuditRoot);
323a283,305
> 
> 	/**
> 	 * Allows us to use dynamic 2006 factory to create all instances,
> 	 * i.e. factory of {@link #get2006GenModelPackage()} package.
> 	 */
> 	public String getURI(String prefix, String uri) {
> 		if (is2005GenModel(prefix, uri)) {
> 			return get2006GenModelURI();
> 		}
> 		return super.getURI(prefix, uri);
> 	}
> 	
> 	static boolean is2005GenModel(String prefix, String uri) {
> 		return "gmfgen".equals(prefix) && ("http://www.eclipse.org/gmf/2005/GenModel".equals(uri) || "http://www.eclipse.org/gmf/2005/GenModel/2.0".equals(uri)); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
> 	}
> 	
> 	static String get2006GenModelURI() {
> 		return "http://www.eclipse.org/gmf/2006/GenModel"; //$NON-NLS-1$
> 	}
> 
> 	private EPackage get2006GenModelPackage() {
> 		return EPackage.Registry.INSTANCE.getEPackage(get2006GenModelURI());
> 	}
