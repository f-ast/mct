2c2
<  * Copyright (c) 2005 IBM Corporation and others.
---
>  * Copyright (c) 2005, 2006 IBM Corporation and others.
21a22,23
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
> import org.eclipse.emf.transaction.util.TransactionUtil;
40c42,43
< public class MoveRequest extends AbstractEditCommandRequest {
---
> public class MoveRequest
>     extends AbstractEditCommandRequest {
60a64,65
>      * @param editingDomain
>      *            the editing domain in which I am requesting to make model
68c73,74
< 	public MoveRequest(EObject targetContainer, EReference targetFeature,
---
>     public MoveRequest(TransactionalEditingDomain editingDomain,
>             EObject targetContainer, EReference targetFeature,
71c77
< 		super();
---
>         super(editingDomain);
80a87,88
>      * @param editingDomain
>      *            the editing domain in which I am requesting to make model
86c94,95
< 	public MoveRequest(EObject targetContainer, EObject elementToMove) {
---
>     public MoveRequest(TransactionalEditingDomain editingDomain,
>             EObject targetContainer, EObject elementToMove) {
88c97
< 		this(targetContainer, null, elementToMove);
---
>         this(editingDomain, targetContainer, null, elementToMove);
101a111,112
>      * @param editingDomain
>      *            the editing domain in which I am requesting to make model
107c118,119
< 	public MoveRequest(EObject targetContainer, List elementsToMove) {
---
>     public MoveRequest(TransactionalEditingDomain editingDomain,
>             EObject targetContainer, List elementsToMove) {
109c121
< 		super();
---
>         super(editingDomain);
121a134,135
>      * @param editingDomain
>      *            the editing domain in which I am requesting to make model
128c142,143
< 	public MoveRequest(EObject targetContainer, Map elementsToMove) {
---
>     public MoveRequest(TransactionalEditingDomain editingDomain,
>             EObject targetContainer, Map elementsToMove) {
130c145
< 		super();
---
>         super(editingDomain);
135a151,226
>      * Constructs a new request to move a model element from one container to
>      * another. The editing domain is derived from the
>      * <code>targetContainer</code>.
>      * 
>      * @param targetContainer
>      *            the target container
>      * @param targetFeature
>      *            the target feature
>      * @param elementToMove
>      *            the element to be moved
>      */
>     public MoveRequest(EObject targetContainer, EReference targetFeature,
>             EObject elementToMove) {
> 
>         this(TransactionUtil.getEditingDomain(targetContainer),
>             targetContainer, targetFeature, elementToMove);
>     }
> 
>     /**
>      * Constructs a new request to move a model element from one container to
>      * another. The editing domain is derived from the
>      * <code>targetContainer</code>.
>      * 
>      * @param targetContainer
>      *            the target container
>      * @param elementToMove
>      *            the element to be moved.
>      */
>     public MoveRequest(EObject targetContainer, EObject elementToMove) {
> 
>         this(TransactionUtil.getEditingDomain(targetContainer),
>             targetContainer, null, elementToMove);
>     }
> 
>     /**
>      * Constructs a new request to move a collection of model element into a new
>      * container. The features in the target used to contain the moved elements
>      * will be derived as follows:
>      * <UL>
>      * <LI>If the feature fomerly containing the moved element exists in the
>      * target element, it will be used.</LI>
>      * <LI>Otherwise, the first feature in the target that can contain the
>      * moved element will be used.</LI>
>      * </UL>
>      * <P>
>      * The editing domain is derived from the <code>targetContainer</code>.
>      * 
>      * @param targetContainer
>      *            the target container
>      * @param elementsToMove
>      *            the list of <code>EObjects</code> to be moved.
>      */
>     public MoveRequest(EObject targetContainer, List elementsToMove) {
> 
>         this(TransactionUtil.getEditingDomain(targetContainer),
>             targetContainer, elementsToMove);
>     }
> 
>     /**
>      * Constructs a new request to move a collection of model element into
>      * specific features of a new container. The editing domain is derived from
>      * the <code>targetContainer</code>.
>      * 
>      * @param targetContainer
>      *            the target container
>      * @param elementsToMove
>      *            the map of <code>EObjects</code> to <code>EReference</code>
>      *            features to be moved.
>      */
>     public MoveRequest(EObject targetContainer, Map elementsToMove) {
> 
>         this(TransactionUtil.getEditingDomain(targetContainer),
>             targetContainer, elementsToMove);
>     }
> 
>     /**
