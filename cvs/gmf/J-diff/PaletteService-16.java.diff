13a14
> import java.util.ArrayList;
18a20
> import org.eclipse.core.runtime.Assert;
41d42
< import org.eclipse.jface.util.Assert;
190a192,196
>         
>         // Remove any palette containers (drawers or stacks that do not have any
>         // tool entries).
>         removeEmptyContainers(root);
>         
192a199
> 
324a332,366
>     /**
>      * A recursive method that removes all empty children palette containers and
>      * checks if there is at least one tool entry in this palette container
>      * 
>      * @param container
>      *            a palette container
>      * @return true if there is at least one tool entry in this palette
>      *         container; false otherwise
>      */
>     private boolean removeEmptyContainers(PaletteContainer container) {
>         List childrenToRemove = new ArrayList();
>         boolean containsToolEntries = false;
>         for (Iterator iter = container.getChildren().iterator(); iter.hasNext();) {
>             PaletteEntry entry = (PaletteEntry) iter.next();
>             if (entry instanceof PaletteSeparator) {
>                 // ignore separators
>                 continue;
>             } else if (entry instanceof PaletteContainer) {
>                 if (removeEmptyContainers((PaletteContainer) entry)) {
>                     containsToolEntries = true;
>                 } else {
>                     childrenToRemove.add(entry);
>                 }
>             } else {
>                 // some sort of tool entry
>                 containsToolEntries = true;
>             }
>         }
> 
>         for (Iterator iter = childrenToRemove.iterator(); iter.hasNext();) {
>             container.remove((PaletteEntry) iter.next());
>         }
>         return containsToolEntries;
>     }
> 	
