18d17
< import java.util.LinkedList;
34,35c33,34
< import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;
< import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart;
---
> import org.eclipse.gmf.runtime.diagram.ui.editparts.IPrimaryEditPart;
> import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ISurfaceEditPart;
92,116d90
< 	 * This method searches an edit part for a child that is a border item edit part
< 	 * @param parent part needed to search
< 	 * @return list of border item edit parts that are direct children of the parent
< 	 */
< 	private List getBorderItemEditParts(EditPart parent) {
< 		List list = new LinkedList();
< 		
< 		
< 		Iterator iter = parent.getChildren().iterator();
< 		while(iter.hasNext()) {
< 			EditPart child = (EditPart)iter.next();
< 			if( child instanceof BorderItemEditPart ) {
< 				list.add(child);
< 				list.addAll(child.getChildren());
< 			}
< 			list.addAll( getBorderItemEditParts(child) );
< 		}
< 		
< 		if( list.isEmpty() )
< 			return Collections.EMPTY_LIST;
< 		
< 		return list;
< 	}
< 
< 	/**
127,138c101,103
< 		if (editpart instanceof DiagramEditPart
< 			|| editpart instanceof ShapeCompartmentEditPart
< 			|| editpart instanceof ListCompartmentEditPart) {
< 			
< 			List list = new LinkedList();
< 
< 			Iterator iter = editpart.getChildren().iterator();
< 			while( iter.hasNext() ) {
< 				EditPart child = (EditPart)iter.next();
< 				list.add( child );
< 				if (!(editpart instanceof DiagramEditPart))
< 					list.addAll( getBorderItemEditParts( child ) );
---
> 		List retval = new ArrayList();
> 		getSelectableNodesInside(editpart, true, retval);
> 		return retval;
141,142c106,113
< 			return list;
< 		}
---
> 	/**
> 	 * Determines the candidate list of node editparts for selection
> 	 * 
> 	 * @param editpart
> 	 * @param topLevel <code>boolean</code> is this the initial entry point into the recursive method.
> 	 * @param retval <code>List</code> to modify
> 	 */
> 	private void getSelectableNodesInside(EditPart editpart, boolean topLevel, List retval) {
143a115,119
> 		if ( editpart instanceof ISurfaceEditPart) {
> 			getSelectableChildrenNodes(editpart, retval);
> 		}
> 		else if (editpart instanceof IPrimaryEditPart) {
> 			if (topLevel) {
149,150c125
< 				List list = new ArrayList();
< 				list.addAll(getSelectableNodes(source));
---
> 						getSelectableNodesInside(source, true, retval);
152,153c127,137
< 					list.addAll(getSelectableNodes(target));
< 				return list;
---
> 							getSelectableNodesInside(target, true, retval);
> 					}
> 				}
> 				else
> 					getSelectableNodesInside(editpart.getParent(), true, retval);
> 			}
> 			else {
> 				if (editpart.isSelectable())
> 					retval.add(editpart);
> 				getSelectableChildrenNodes(editpart, retval);
> 			}
157c141,164
< 		return getSelectableNodes(editpart.getParent());
---
> 	private void getSelectableChildrenNodes(EditPart editpart, List retval) {
> 		Iterator iter = editpart.getChildren().iterator();
> 		while( iter.hasNext() ) {
> 			EditPart child = (EditPart)iter.next();
> 			getSelectableNodesInside(child, false, retval);
> 		}
> 	}
> 
> 	/**
> 	 * This method searches an edit part for a child that is a border item edit part
> 	 * @param parent part needed to search
> 	 * @param set to be modified of border item edit parts that are direct children of the parent
> 	 */
> 	private void getBorderItemEditParts(EditPart parent, Set retval) {
> 		
> 		Iterator iter = parent.getChildren().iterator();
> 		while(iter.hasNext()) {
> 			EditPart child = (EditPart)iter.next();
> 			if( child instanceof BorderItemEditPart ) {
> 				retval.add(child);
> 				retval.addAll(child.getChildren());
> 			}
> 			getBorderItemEditParts(child, retval);
> 		}
173c180
< 			connnectableEditParts.addAll(getBorderItemEditParts((EditPart)li.next()));
---
> 			getBorderItemEditParts((EditPart)li.next(), connnectableEditParts);
