2c2
<  * Copyright (c) 2005 IBM Corporation and others.
---
>  * Copyright (c) 2005, 2006 IBM Corporation and others.
25a26
> import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
39a41,42
> import org.eclipse.swt.accessibility.AccessibleAdapter;
> import org.eclipse.swt.accessibility.AccessibleEvent;
236a240,244
>         fontBoldButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
>             public void getName(AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontStyle_Bold;
>             }
>         });
240a249,253
>         fontItalicButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
>             public void getName(AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontStyle_Italic;
>             }
>         });
260c273,277
< 
---
>         fontColorButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
>             public void getName(AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontColor;
>             }
>         });
272c289,293
< 
---
>         lineColorButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
>             public void getName(AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_LineColor;
>             }
>         });
282c303,307
< 
---
> 		fillColorButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
>             public void getName(AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FillColor;
>             }
>         });
342,343c367,368
< 	 *            the image to draw overlay on the button after the new
< 	 *            color is set
---
>      *            the image to draw overlay on the button after the new color is
>      *            set
344a370,372
>      * @deprecated The preference is not being retrieved from the correct
>      *             preference store so it is not needed, use the other
>      *             <code>changeColor</code> method.
349a378,399
>         return changeColor(event, button, propertyId, commandName,
>             imageDescriptor);
>     }
>     
>     /**
>      * @param event -
>      *            selection event
>      * @param button -
>      *            event source
>      * @param propertyId -
>      *            id of the property
>      * @param commandName -
>      *            name of the command
>      * @param imageDescriptor -
>      *            the image to draw overlay on the button after the new color is
>      *            set
>      * @return - new RGB color, or null if none selected
>      */
>     protected RGB changeColor(SelectionEvent event, Button button,
>             final String propertyId, String commandName,
>             ImageDescriptor imageDescriptor) {
> 
351c401
< 			.getShell(), preferenceId, IDialogConstants.BUTTON_BAR_HEIGHT);
---
>             .getShell(), IDialogConstants.BUTTON_BAR_HEIGHT);
356,357d405
< 		if (popup.getSelectedColor() != null) {
< 			final RGB color = popup.getSelectedColor();
359c407,409
< 			// Update model in response to user
---
>         if (popup.getSelectedColor() == null && !popup.useDefaultColor()) {
>             return null;
>         }
361c411,417
< 			if (color != null) {
---
>         // selectedColor should be null if we are to use the default color
>         final RGB selectedColor = popup.getSelectedColor();
> 
>         final EStructuralFeature feature = (EStructuralFeature) PackageUtil
>             .getElement(propertyId);
> 
>         // Update model in response to user
365a422,423
>         RGB colorToReturn = selectedColor;
> 
367,370c425,444
< 					final IGraphicalEditPart ep = (IGraphicalEditPart) it
< 						.next();
< 					commands.add(createCommand(commandName, ((View) ep
< 						.getModel()).eResource(), new Runnable() {
---
>             final IGraphicalEditPart ep = (IGraphicalEditPart) it.next();
> 
>             RGB color = selectedColor;
>             if (popup.useDefaultColor()) {
>                 Object preferredValue = ep.getPreferredValue(feature);
>                 if (preferredValue instanceof Integer) {
>                     color = FigureUtilities
>                         .integerToRGB((Integer) preferredValue);
>                 }
>             }
>                 
>             // If we are using default colors, we want to return the color of the first selected element to be consistent
>             if (colorToReturn == null) {
>                 colorToReturn = color;
>             }
> 
>             if (color != null) {
>                 final RGB finalColor = color; // need a final variable
>                commands.add(createCommand(commandName, ((View) ep.getModel())
>                     .eResource(), new Runnable() {
373c447,448
< 							ENamedElement element = PackageUtil.getElement(propertyId);
---
>                         ENamedElement element = PackageUtil
>                             .getElement(propertyId);
375,376c450,451
< 								ep.setStructuralFeatureValue((EStructuralFeature)PackageUtil.getElement(propertyId), FigureUtilities
< 									.RGBToInteger(color));
---
>                             ep.setStructuralFeatureValue(feature,
>                                 FigureUtilities.RGBToInteger(finalColor));
387,388c462
< 
< 			return color;
---
>         return colorToReturn;
390d463
< 		return null;
392d464
< 	}
441d512
< 		getSingleInput().refresh();
