13a14,16
> import org.eclipse.emf.common.util.BasicDiagnostic;
> import org.eclipse.emf.common.util.Diagnostic;
> 
15a19,20
> import org.eclipse.emf.common.notify.Notification;
> 
17a23
> import org.eclipse.emf.common.ui.editor.ProblemEditorPart;
44a51,53
> import org.eclipse.emf.common.ui.MarkerHelper;
> import org.eclipse.emf.edit.ui.util.EditUIMarkerHelper;
> 
50a60,62
> import org.eclipse.emf.ecore.util.EcoreUtil;
> import org.eclipse.emf.ecore.util.EContentAdapter;
> 
61a74,76
> import java.util.Map;
> import java.util.LinkedHashMap;
> 
126a142,143
> import org.eclipse.ui.PartInitException;
> 
298a316,324
> 	 * The MarkerHelper is responsible for creating workspace resource markers presented
> 	 * in Eclipse's Problems View.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected MarkerHelper markerHelper = new EditUIMarkerHelper();
> 
> 	/**
339c365
< 	Collection removedResources = new ArrayList();
---
> 	protected Collection removedResources = new ArrayList();
345c371
< 	Collection changedResources = new ArrayList();
---
> 	protected Collection changedResources = new ArrayList();
351c377,422
< 	Collection savedResources = new ArrayList();
---
> 	protected Collection savedResources = new ArrayList();
> 
> 	/**
> 	 * Map to store the diagnostic associated with a resource.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected Map resourceToDiagnosticMap = new LinkedHashMap();
> 
> 	/**
> 	 * Controls whether the problem indication should be updated.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected boolean updateProblemIndication = true;
> 
> 	/**
> 	 * Adapter used to update the problem indication when resources are demanded loaded.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected EContentAdapter problemIndicationAdapter = new EContentAdapter() {
> 		public void notifyChanged(Notification notification) {
> 			if (notification.getNotifier() instanceof Resource) {
> 				switch (notification.getFeatureID(Resource.class)) {
> 				case Resource.RESOURCE__IS_LOADED:
> 				case Resource.RESOURCE__ERRORS:
> 				case Resource.RESOURCE__WARNINGS: {
> 					Resource resource = (Resource) notification.getNotifier();
> 					Diagnostic diagnostic = analyzeResourceProblems((Resource) notification.getNotifier(), null);
> 					if (diagnostic.getSeverity() != Diagnostic.OK) {
> 						resourceToDiagnosticMap.put(resource, diagnostic);
> 					} else {
> 						resourceToDiagnosticMap.remove(resource);
> 					}
> 					updateProblemIndication();
> 				}
> 				}
> 			} else {
> 				super.notifyChanged(notification);
> 			}
> 		}
> 	};
470a542
> 			updateProblemIndication = false;
477a550,602
> 						if (!resourceToDiagnosticMap.containsKey(resource)) {
> 							resourceToDiagnosticMap.put(resource, analyzeResourceProblems(resource, exception));
> 						}
> 					}
> 				}
> 			}
> 			updateProblemIndication = true;
> 			updateProblemIndication();
> 		}
> 	}
> 
> 	/**
> 	 * Updates the problems indication with the information described in the specified diagnostic.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected void updateProblemIndication() {
> 		if (updateProblemIndication) {
> 			BasicDiagnostic diagnostic = new BasicDiagnostic(Diagnostic.OK, "org.eclipse.gmf.tooldef.edit", 0, null, new Object[] { editingDomain.getResourceSet() });
> 			for (Iterator i = resourceToDiagnosticMap.values().iterator(); i.hasNext();) {
> 				Diagnostic childDiagnostic = (Diagnostic) i.next();
> 				if (childDiagnostic.getSeverity() != Diagnostic.OK) {
> 					diagnostic.add(childDiagnostic);
> 				}
> 			}
> 
> 			int lastEditorPage = getPageCount() - 1;
> 			if (lastEditorPage >= 0 && getEditor(lastEditorPage) instanceof ProblemEditorPart) {
> 				((ProblemEditorPart) getEditor(lastEditorPage)).setDiagnostic(diagnostic);
> 				if (diagnostic.getSeverity() != Diagnostic.OK) {
> 					setActivePage(lastEditorPage);
> 				}
> 			} else if (diagnostic.getSeverity() != Diagnostic.OK) {
> 				ProblemEditorPart problemEditorPart = new ProblemEditorPart();
> 				problemEditorPart.setDiagnostic(diagnostic);
> 				problemEditorPart.setMarkerHelper(markerHelper);
> 				try {
> 					addPage(getPageCount(), problemEditorPart, getEditorInput());
> 					lastEditorPage++;
> 					setPageText(lastEditorPage, problemEditorPart.getPartName());
> 					setActivePage(lastEditorPage);
> 				} catch (PartInitException exception) {
> 					GMFToolEditPlugin.INSTANCE.log(exception);
> 				}
> 			}
> 
> 			if (markerHelper.hasMarkers(editingDomain.getResourceSet())) {
> 				markerHelper.deleteMarkers(editingDomain.getResourceSet());
> 				if (diagnostic.getSeverity() != Diagnostic.OK) {
> 					try {
> 						markerHelper.createMarkers(diagnostic);
> 					} catch (CoreException exception) {
721c846
< 		// I assume that the input is a file object.
---
> 		// Assumes that the input is a file object.
724c849,852
< 
---
> 		URI resourceURI = URI.createPlatformResourceURI(modelFile.getFile().getFullPath().toString());
> 		;
> 		Exception exception = null;
> 		Resource resource = null;
728,730c856,885
< 			editingDomain.loadResource(URI.createPlatformResourceURI(modelFile.getFile().getFullPath().toString()).toString());
< 		} catch (Exception exception) {
< 			GMFToolEditPlugin.INSTANCE.log(exception);
---
> 			resource = editingDomain.getResourceSet().getResource(resourceURI, true);
> 		} catch (Exception e) {
> 			exception = e;
> 			resource = editingDomain.getResourceSet().getResource(resourceURI, false);
> 		}
> 
> 		Diagnostic diagnostic = analyzeResourceProblems(resource, exception);
> 		if (diagnostic.getSeverity() != Diagnostic.OK) {
> 			resourceToDiagnosticMap.put(resource, analyzeResourceProblems(resource, exception));
> 		}
> 		editingDomain.getResourceSet().eAdapters().add(problemIndicationAdapter);
> 	}
> 
> 	/**
> 	 * Returns a dignostic describing the errors and warnings listed in the resource
> 	 * and the specified exception (if any).
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public Diagnostic analyzeResourceProblems(Resource resource, Exception exception) {
> 		if (!resource.getErrors().isEmpty() || !resource.getWarnings().isEmpty()) {
> 			BasicDiagnostic basicDiagnostic = new BasicDiagnostic(Diagnostic.ERROR, "org.eclipse.gmf.tooldef.edit", 0, getString("_UI_CreateModelError_message", resource.getURI()),
> 					new Object[] { exception == null ? (Object) resource : exception });
> 			basicDiagnostic.merge(EcoreUtil.computeDiagnostic(resource, true));
> 			return basicDiagnostic;
> 		} else if (exception != null) {
> 			return new BasicDiagnostic(Diagnostic.ERROR, "org.eclipse.gmf.tooldef.edit", 0, getString("_UI_CreateModelError_message", resource.getURI()), new Object[] { exception });
> 		} else {
> 			return Diagnostic.OK_INSTANCE;
744a900,902
> 		// Only creates the other pages if there is something that can be edited
> 		//
> 		if (!getEditingDomain().getResourceSet().getResources().isEmpty() && !((Resource) getEditingDomain().getResourceSet().getResources().get(0)).getContents().isEmpty()) {
933a1092
> 		}
934a1094,1096
> 		// Ensures that this editor will only display the page's tab
> 		// area if there are more than one page
> 		//		
945a1108,1109
> 
> 		updateProblemIndication();
1146d1309
< 				try {
1152a1316
> 						try {
1154a1319,1320
> 						} catch (Exception exception) {
> 							resourceToDiagnosticMap.put(resource, analyzeResourceProblems(resource, exception));
1158,1159d1323
< 				} catch (Exception exception) {
< 					GMFToolEditPlugin.INSTANCE.log(exception);
1163a1328
> 		updateProblemIndication = false;
1177a1343,1345
> 		updateProblemIndication = true;
> 
> 		updateProblemIndication();
1197d1364
< 
