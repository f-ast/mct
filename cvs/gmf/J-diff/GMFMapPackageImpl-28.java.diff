18a19,20
> import org.eclipse.gmf.mappings.Auditable;
> import org.eclipse.gmf.mappings.AuditedMetricTarget;
34a37
> import org.eclipse.gmf.mappings.Measurable;
35a39,40
> import org.eclipse.gmf.mappings.MetricContainer;
> import org.eclipse.gmf.mappings.MetricRule;
41d45
< import org.eclipse.gmf.mappings.RuleTarget;
221c225
< 	private EClass ruleTargetEClass = null;
---
> 	private EClass domainElementTargetEClass = null;
228c232
< 	private EClass domainElementTargetEClass = null;
---
> 	private EClass diagramElementTargetEClass = null;
235c239
< 	private EClass diagramElementTargetEClass = null;
---
> 	private EClass notationElementTargetEClass = null;
242c246,274
< 	private EClass notationElementTargetEClass = null;
---
> 	private EClass metricContainerEClass = null;
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	private EClass metricRuleEClass = null;
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	private EClass auditedMetricTargetEClass = null;
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	private EClass auditableEClass = null;
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	private EClass measurableEClass = null;
786a819,827
> 	public EReference getMapping_Metrics() {
> 		return (EReference)mappingEClass.getEStructuralFeatures().get(5);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
1066,1067c1107,1108
< 	public EAttribute getAuditRule_Name() {
< 		return (EAttribute)auditRuleEClass.getEStructuralFeatures().get(2);
---
> 	public EReference getAuditRule_Target() {
> 		return (EReference)auditRuleEClass.getEStructuralFeatures().get(2);
1102,1110d1142
< 	public EAttribute getAuditRule_Description() {
< 		return (EAttribute)auditRuleEClass.getEStructuralFeatures().get(6);
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
1112c1144
< 		return (EReference)auditRuleEClass.getEStructuralFeatures().get(7);
---
> 		return (EReference)auditRuleEClass.getEStructuralFeatures().get(6);
1129,1139c1161,1162
< 	public EReference getRuleBase_Target() {
< 		return (EReference)ruleBaseEClass.getEStructuralFeatures().get(0);
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public EClass getRuleTarget() {
< 		return ruleTargetEClass;
---
> 	public EAttribute getRuleBase_Name() {
> 		return (EAttribute)ruleBaseEClass.getEStructuralFeatures().get(0);
1147,1148c1170,1171
< 	public EReference getRuleTarget_Rule() {
< 		return (EReference)ruleTargetEClass.getEStructuralFeatures().get(0);
---
> 	public EAttribute getRuleBase_Description() {
> 		return (EAttribute)ruleBaseEClass.getEStructuralFeatures().get(1);
1209a1233,1331
> 	public EClass getMetricContainer() {
> 		return metricContainerEClass;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EReference getMetricContainer_Metrics() {
> 		return (EReference)metricContainerEClass.getEStructuralFeatures().get(0);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EClass getMetricRule() {
> 		return metricRuleEClass;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EAttribute getMetricRule_Key() {
> 		return (EAttribute)metricRuleEClass.getEStructuralFeatures().get(0);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EReference getMetricRule_Rule() {
> 		return (EReference)metricRuleEClass.getEStructuralFeatures().get(1);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EReference getMetricRule_Target() {
> 		return (EReference)metricRuleEClass.getEStructuralFeatures().get(2);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EReference getMetricRule_Container() {
> 		return (EReference)metricRuleEClass.getEStructuralFeatures().get(3);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EClass getAuditedMetricTarget() {
> 		return auditedMetricTargetEClass;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EReference getAuditedMetricTarget_Metric() {
> 		return (EReference)auditedMetricTargetEClass.getEStructuralFeatures().get(0);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EClass getAuditable() {
> 		return auditableEClass;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EClass getMeasurable() {
> 		return measurableEClass;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
1247a1370
> 		createEReference(mappingEClass, MAPPING__METRICS);
1343c1466,1467
< 		createEReference(ruleBaseEClass, RULE_BASE__TARGET);
---
> 		createEAttribute(ruleBaseEClass, RULE_BASE__NAME);
> 		createEAttribute(ruleBaseEClass, RULE_BASE__DESCRIPTION);
1348c1472
< 		createEAttribute(auditRuleEClass, AUDIT_RULE__NAME);
---
> 		createEReference(auditRuleEClass, AUDIT_RULE__TARGET);
1352d1475
< 		createEAttribute(auditRuleEClass, AUDIT_RULE__DESCRIPTION);
1355,1357d1477
< 		ruleTargetEClass = createEClass(RULE_TARGET);
< 		createEReference(ruleTargetEClass, RULE_TARGET__RULE);
< 
1366a1487,1502
> 		metricContainerEClass = createEClass(METRIC_CONTAINER);
> 		createEReference(metricContainerEClass, METRIC_CONTAINER__METRICS);
> 
> 		metricRuleEClass = createEClass(METRIC_RULE);
> 		createEAttribute(metricRuleEClass, METRIC_RULE__KEY);
> 		createEReference(metricRuleEClass, METRIC_RULE__RULE);
> 		createEReference(metricRuleEClass, METRIC_RULE__TARGET);
> 		createEReference(metricRuleEClass, METRIC_RULE__CONTAINER);
> 
> 		auditedMetricTargetEClass = createEClass(AUDITED_METRIC_TARGET);
> 		createEReference(auditedMetricTargetEClass, AUDITED_METRIC_TARGET__METRIC);
> 
> 		auditableEClass = createEClass(AUDITABLE);
> 
> 		measurableEClass = createEClass(MEASURABLE);
> 
1415,1417c1551,1558
< 		domainElementTargetEClass.getESuperTypes().add(this.getRuleTarget());
< 		diagramElementTargetEClass.getESuperTypes().add(this.getRuleTarget());
< 		notationElementTargetEClass.getESuperTypes().add(this.getRuleTarget());
---
> 		domainElementTargetEClass.getESuperTypes().add(this.getAuditable());
> 		domainElementTargetEClass.getESuperTypes().add(this.getMeasurable());
> 		diagramElementTargetEClass.getESuperTypes().add(this.getAuditable());
> 		diagramElementTargetEClass.getESuperTypes().add(this.getMeasurable());
> 		notationElementTargetEClass.getESuperTypes().add(this.getAuditable());
> 		notationElementTargetEClass.getESuperTypes().add(this.getMeasurable());
> 		metricRuleEClass.getESuperTypes().add(this.getRuleBase());
> 		auditedMetricTargetEClass.getESuperTypes().add(this.getAuditable());
1425a1567
> 		initEReference(getMapping_Metrics(), this.getMetricContainer(), null, "metrics", null, 0, 1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
1525c1667,1668
< 		initEReference(getRuleBase_Target(), this.getRuleTarget(), this.getRuleTarget_Rule(), "target", null, 1, 1, RuleBase.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
---
> 		initEAttribute(getRuleBase_Name(), ecorePackage.getEString(), "name", null, 0, 1, RuleBase.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
> 		initEAttribute(getRuleBase_Description(), ecorePackage.getEString(), "description", null, 0, 1, RuleBase.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
1530c1673
< 		initEAttribute(getAuditRule_Name(), ecorePackage.getEString(), "name", null, 0, 1, AuditRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
---
> 		initEReference(getAuditRule_Target(), this.getAuditable(), null, "target", null, 1, 1, AuditRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
1534d1676
< 		initEAttribute(getAuditRule_Description(), ecorePackage.getEString(), "description", null, 0, 1, AuditRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
1537,1539d1678
< 		initEClass(ruleTargetEClass, RuleTarget.class, "RuleTarget", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
< 		initEReference(getRuleTarget_Rule(), this.getRuleBase(), this.getRuleBase_Target(), "rule", null, 1, 1, RuleTarget.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
< 
1548a1688,1703
> 		initEClass(metricContainerEClass, MetricContainer.class, "MetricContainer", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
> 		initEReference(getMetricContainer_Metrics(), this.getMetricRule(), this.getMetricRule_Container(), "metrics", null, 1, -1, MetricContainer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
> 
> 		initEClass(metricRuleEClass, MetricRule.class, "MetricRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
> 		initEAttribute(getMetricRule_Key(), ecorePackage.getEString(), "key", null, 1, 1, MetricRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
> 		initEReference(getMetricRule_Rule(), this.getValueExpression(), null, "rule", null, 1, 1, MetricRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
> 		initEReference(getMetricRule_Target(), this.getMeasurable(), null, "target", null, 1, 1, MetricRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
> 		initEReference(getMetricRule_Container(), this.getMetricContainer(), this.getMetricContainer_Metrics(), "container", null, 1, 1, MetricRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
> 
> 		initEClass(auditedMetricTargetEClass, AuditedMetricTarget.class, "AuditedMetricTarget", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
> 		initEReference(getAuditedMetricTarget_Metric(), this.getMetricRule(), null, "metric", null, 1, 1, AuditedMetricTarget.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
> 
> 		initEClass(auditableEClass, Auditable.class, "Auditable", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
> 
> 		initEClass(measurableEClass, Measurable.class, "Measurable", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
> 
1680a1836,1842
> 		addAnnotation
> 		  (getMetricRule_Rule(), 
> 		   source, 
> 		   new String[] {
> 			 "def", "context",
> 			 "ocl", "target.getContext()"
> 		   });						
