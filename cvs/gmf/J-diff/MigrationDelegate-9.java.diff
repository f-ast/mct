2c2
<  * Copyright (c) 2007 Borland Software Corporation
---
>  * Copyright (c) 2007, 2008 Borland Software Corporation
22a23
> import org.eclipse.emf.ecore.EcorePackage;
26a28
> import org.eclipse.gmf.codegen.gmfgen.GenAuditContext;
28a31
> import org.eclipse.gmf.codegen.gmfgen.GenAuditable;
43a47,48
> 	private EAttribute myGenAuditRule_ContextSelectorLocalClassName;
> 	private Map<GenAuditRule, String> myAuditContexts;
98c103,104
< 		//registerNarrowReferenceType(GMFGenPackage.eINSTANCE.getGenFeatureSeqInitializer_Initializers(), GMFGenPackage.eINSTANCE.getGenFeatureValueSpec());
---
> 		myGenAuditRule_ContextSelectorLocalClassName = createNewAttribute("contextSelectorLocalClassName", EcorePackage.eINSTANCE.getEString(), false);
> 		registerRenamedAttribute(GMFGenPackage.eINSTANCE.getGenAuditRule(), myGenAuditRule_ContextSelectorLocalClassName.getName(), myGenAuditRule_ContextSelectorLocalClassName);
104a111
> 		myAuditContexts = null;
158a166,169
> 		} else if (myGenAuditRule_ContextSelectorLocalClassName.equals(feature)) {
> 			GenAuditRule rule = (GenAuditRule) object;
> 			String className = (String) value;
> 			saveAuditContext(rule, className);
165a177,187
> 	private void saveAuditContext(GenAuditRule rule, String className) {
> 		if (myAuditContexts == null) {
> 			myAuditContexts = new LinkedHashMap<GenAuditRule, String>();
> 		}
> 		myAuditContexts.put(rule, className);
> 	}
> 	
> 	private Map<GenAuditRule, String> getSavedAuditContexts() {
> 		return myAuditContexts;
> 	}
> 
184,186c206
< 		if (getSavedRequiredPlugins() == null) {
< 			return;
< 		}
---
> 		if (getSavedRequiredPlugins() != null) {
208a229,280
> 		if (getSavedAuditContexts() != null) {
> 			for (GenAuditRule rule : getSavedAuditContexts().keySet()) {
> 				GenAuditRoot root = getOrCreateRoot(rule);
> 				String className = getSavedAuditContexts().get(rule);
> 				GenAuditContext context = getOrCreateContext(root, className);
> 				GenAuditable target = rule.getTarget();
> 				if (target != null) {
> 					target.setContextSelector(context);
> 					fireMigrationApplied(true);
> 				}
> 			}
> 			getSavedAuditContexts().clear();
> 		}
> 	}
> 	
> 	private GenAuditContext getOrCreateContext(GenAuditRoot root, String className) {
> 		GenAuditContext context = null;
> 		for (GenAuditContext next : root.getClientContexts()) {
> 			String explicit = next.getClassName();
> 			if (className.equals(explicit) || (explicit == null && className.equals(next.getId()))) {
> 				context = next;
> 				break;
> 			}
> 		}
> 		if (context == null) {
> 			context = GMFGenFactory.eINSTANCE.createGenAuditContext();
> 			String id = generateUnique(root, className);
> 			context.setId(id);
> 			if (!id.equals(className)) {
> 				context.setClassName(className);
> 			}
> 			root.getClientContexts().add(context);
> 		}
> 		return context;
> 	}
> 
> 	private String generateUnique(GenAuditRoot root, String defaultId) {
> 		String id = defaultId;
> 		int i = 0;
> 		boolean haveSuchId = false;
> 		do {
> 			haveSuchId = false;
> 			for (GenAuditContext next : root.getClientContexts()) {
> 				if (id.equals(next.getId())) {
> 					haveSuchId = true;
> 					id = defaultId + (++i);
> 					break;
> 				}
> 			}
> 		} while (haveSuchId);
> 		return id;
> 	}
229,233c301
< 			result = GMFGenFactory.eINSTANCE.createGenAuditRoot();
< 			if (auditContainer.eContainer() == null) {
< 				auditContainer.eResource().getContents().add(result);
< 				fireMigrationApplied(true);
< 			}
---
> 			result = createRoot(auditContainer);
237a306,323
> 
> 	private GenAuditRoot getOrCreateRoot(GenAuditRule auditRule) {
> 		GenAuditRoot result = auditRule.getRoot();
> 		if (result == null) {
> 			result = createRoot(auditRule);
> 			result.getRules().add(auditRule);
> 		}
> 		return result;
> 	}
> 
> 	private GenAuditRoot createRoot(EObject child) {
> 		GenAuditRoot result = GMFGenFactory.eINSTANCE.createGenAuditRoot();
> 		if (child.eContainer() == null) {
> 			child.eResource().getContents().add(result);
> 			fireMigrationApplied(true);
> 		}
> 		return result;
> 	}
