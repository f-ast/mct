14d13
< import java.text.MessageFormat;
19a19,21
> import org.eclipse.gmf.runtime.common.core.util.StringStatics;
> import org.eclipse.gmf.runtime.common.ui.dialogs.PropertiesDialog;
> import org.eclipse.gmf.runtime.common.ui.services.properties.PropertiesService;
22,23d23
< import org.eclipse.jface.viewers.DialogCellEditor;
< import org.eclipse.jface.viewers.ISelectionProvider;
25,32d24
< import org.eclipse.swt.events.KeyAdapter;
< import org.eclipse.swt.events.KeyEvent;
< import org.eclipse.swt.events.ModifyEvent;
< import org.eclipse.swt.events.ModifyListener;
< import org.eclipse.swt.events.MouseAdapter;
< import org.eclipse.swt.events.MouseEvent;
< import org.eclipse.swt.events.TraverseEvent;
< import org.eclipse.swt.events.TraverseListener;
36d27
< import org.eclipse.ui.dialogs.PropertyDialogAction;
41,44d31
< import org.eclipse.gmf.runtime.common.core.util.StringStatics;
< import org.eclipse.gmf.runtime.common.ui.dialogs.PropertiesDialog;
< import org.eclipse.gmf.runtime.common.ui.services.properties.PropertiesService;
< 
48c35
<  * a property page, and a text widget for editing directly.
---
>  * a property page.
52,89c39
< public class PropertyPageCellEditor extends DialogCellEditor {
< 
< 	/**
< 	 * The text widget
< 	 */
< 	private Text text;
< 
< 	/**
< 	 * My modify listener for modifications to the text
< 	 */
< 	private ModifyListener modifyListener;
< 
< 	/**
< 	 * Flag which is <code>true</code> if there is a selection in the text
< 	 * widget, <code>false</code> otherwise. Used to notify that the
< 	 * copy/paste menu item enablement has changed
< 	 */
< 	private boolean isSelection = false;
< 
< 	/**
< 	 * Flag which is <code>true</code> if the text is deletable, 
< 	 * <code>false</code> otherwise. Used to notify that the
< 	 * delete menu item enablement has changed
< 	 */
< 	private boolean isDeleteable = false;
< 
< 	/**
< 	 * Flag which is <code>true</code> if the text is selectable, 
< 	 * <code>false</code> otherwise. Used to notify that the
< 	 * select all menu item enablement has changed
< 	 */
< 	private boolean isSelectable = false;
< 
< 	/**
< 	 * My selection provider which provides a selection to the
< 	 * {@link PropertyDialogAction}
< 	 */
< 	ISelectionProvider selectionProvider;
---
> public class PropertyPageCellEditor extends MultiButtonCellEditor {
97,101d46
< 	 * The value of this cell editor; initially <code>null</code>.
< 	 */
< 	private Object value = null;
< 
< 	/**
142,212d86
< 	 * Creates a text widget in the cell editor
< 	 * 
< 	 * @see org.eclipse.jface.viewers.DialogCellEditor#createContents(Composite)
< 	 */
< 	protected Control createContents(Composite cell) {
< 		setText(new Text(cell, getStyle()));
< 
< 		// Add a key listener to the text widget
< 		text.addKeyListener(new KeyAdapter() {
< 
< 			// On key pressed, check the menu item enablement
< 			public void keyPressed(KeyEvent e) {
< 				keyReleaseOccured(e);
< 				if ((getControl() == null) || getControl().isDisposed())
< 					return;
< 				checkSelection();
< 				checkDeleteable();
< 				checkSelectable();
< 			}
< 		});
< 
< 		// Add a traverse listener to the text widget
< 		text.addTraverseListener(new TraverseListener() {
< 
< 			// On key traversed, disable the escape and return operations
< 			public void keyTraversed(TraverseEvent e) {
< 				if (e.detail == SWT.TRAVERSE_ESCAPE
< 					|| e.detail == SWT.TRAVERSE_RETURN) {
< 					e.doit = false;
< 				}
< 			}
< 		});
< 
< 		// Add a mouse listener to the text widget
< 		text.addMouseListener(new MouseAdapter() {
< 
< 			// On mouse up, check the menu item enablement
< 			public void mouseUp(MouseEvent e) {
< 				checkSelection();
< 				checkDeleteable();
< 				checkSelectable();
< 			}
< 		});
< 
< 		text.setFont(cell.getFont());
< 		text.setBackground(cell.getBackground());
< 		text.setText(StringStatics.BLANK);
< 		text.addModifyListener(getModifyListener());
< 
< 		return getText();
< 	}
< 
< 	/**
< 	 * Updates the contents of the text field with <code>aValue</code>.
< 	 * 
< 	 * @see org.eclipse.jface.viewers.DialogCellEditor#updateContents(Object)
< 	 */
< 	protected void updateContents(Object aValue) {
< 
< 		if (getText() == null) {
< 			return;
< 		}
< 
< 		String aText = StringStatics.BLANK;
< 		if (aValue != null) {
< 			aText = aValue.toString();
< 		}
< 		getText().setText(aText);
< 	}
< 
< 	/**
318,456c192
< 		return text;
< 	}
< 
< 	/**
< 	 * Sets the text widget
< 	 * @param text The text widget to set
< 	 */
< 	private void setText(Text text) {
< 		this.text = text;
< 	}
< 
< 	/**
< 	 * Notifies that this cell editor has focus. Put focus on my text widget
< 	 * and calculate the the menu item enablement.
< 	 */
< 	protected void doSetFocus() {
< 		if (getText() != null) {
< 			getText().selectAll();
< 			getText().setFocus();
< 			checkSelection();
< 			checkDeleteable();
< 			checkSelectable();
< 		}
< 	}
< 
< 	/**
< 	 * Gets the text value in my text widget
< 	 * 
< 	 * @return The text in my text widget
< 	 */
< 	protected Object doGetValue() {
< 		String aText = getText().getText();
< 
< 		// handle value from collection editor dialog
< 		if (value instanceof ElementValue) {
< 			((ElementValue) value).setValue(aText);
< 			return value;
< 		}
< 
< 		return aText;
< 	}
< 
< 	/**
< 	 * Sets the text value in my text widget. <code>value</code> must be
< 	 * a <code>String</code>.
< 	 *
< 	 * @param aValue a text string (type <code>String</code>)
< 	 */
< 	protected void doSetValue(Object aValue) {
< 		this.value = aValue;
< 
< 		assert null != getText();
< 		getText().removeModifyListener(getModifyListener());
< 		getText().setText(aValue.toString());
< 		getText().addModifyListener(getModifyListener());
< 	}
< 
< 	/**
< 	 * Returns my modify listener.
< 	 * 
< 	 * @return my modify listener
< 	 */
< 	private ModifyListener getModifyListener() {
< 		if (modifyListener == null) {
< 			modifyListener = new ModifyListener() {
< 				public void modifyText(ModifyEvent e) {
< 					editOccured(e);
< 				}
< 			};
< 		}
< 		return modifyListener;
< 	}
< 
< 	/**
< 	 * Processes a modify event that occurred in my text widget.
< 	 * Performs validation and sets the error message
< 	 * accordingly, and then reports a change using <code>fireEditorValueChanged</code>.
< 	 *
< 	 * @param e The modify event
< 	 */
< 	protected void editOccured(ModifyEvent e) {
< 
< 		String aValue = text.getText();
< 		if (aValue == null) {
< 			aValue = StringStatics.BLANK;
< 		}
< 		Object typedValue = aValue;
< 		boolean oldValidState = isValueValid();
< 		boolean newValidState = isCorrect(typedValue);
< 		if (typedValue == null && newValidState) {
< 			assert (false) : "Validator isn't limiting the cell editor's type range"; //$NON-NLS-1$
< 		}
< 		if (!newValidState) {
< 			// try to insert the current value into the error message.
< 			setErrorMessage(
< 				MessageFormat.format(
< 					getErrorMessage(),
< 					new Object[] { aValue }));
< 		}
< 		valueChanged(oldValidState, newValidState);
< 	}
< 
< 	/**
< 	 * Checks to see if the "deleteable" state (can delete/
< 	 * nothing to delete) has changed and if so fire an
< 	 * enablement changed notification.
< 	 */
< 	private void checkDeleteable() {
< 		boolean oldIsDeleteable = isDeleteable;
< 		isDeleteable = isDeleteEnabled();
< 		if (oldIsDeleteable != isDeleteable) {
< 			fireEnablementChanged(DELETE);
< 		}
< 	}
< 
< 	/**
< 	 * Checks to see if the "selectable" state (can select)
< 	 * has changed and if so fire an enablement changed notification.
< 	 */
< 	private void checkSelectable() {
< 		boolean oldIsSelectable = isSelectable;
< 		isSelectable = isSelectAllEnabled();
< 		if (oldIsSelectable != isSelectable) {
< 			fireEnablementChanged(SELECT_ALL);
< 		}
< 	}
< 
< 	/**
< 	 * Checks to see if the selection state (selection /
< 	 * no selection) has changed and if so fire an
< 	 * enablement changed notification.
< 	 */
< 	private void checkSelection() {
< 		boolean oldIsSelection = isSelection;
< 		isSelection = text.getSelectionCount() > 0;
< 		if (oldIsSelection != isSelection) {
< 			fireEnablementChanged(COPY);
< 			fireEnablementChanged(CUT);
< 		}
---
> 		return null;
466d201
< 		if (text == null || text.isDisposed())
468d202
< 		return text.getSelectionCount() > 0;
478d211
< 		if (text == null || text.isDisposed())
480d212
< 		return text.getSelectionCount() > 0;
490d221
< 		if (text == null || text.isDisposed())
492,493d222
< 		return text.getSelectionCount() > 0
< 			|| text.getCaretPosition() < text.getCharCount();
503d231
< 		if (text == null || text.isDisposed())
505d232
< 		return true;
515d241
< 		if (text == null || text.isDisposed())
517d242
< 		return true;
527d251
< 		if (text == null || text.isDisposed())
529d252
< 		return text.getCharCount() > 0;
536d258
< 		text.copy();
543,546c265
< 		text.cut();
< 		checkSelection();
< 		checkDeleteable();
< 		checkSelectable();
---
>         /* not suppoerted */
554,566c273
< 		if (text.getSelectionCount() > 0)
< 			text.insert(StringStatics.BLANK);
< 		else {
< 			// remove the next character
< 			int pos = text.getCaretPosition();
< 			if (pos < text.getCharCount()) {
< 				text.setSelection(pos, pos + 1);
< 				text.insert(StringStatics.BLANK);
< 			}
< 		}
< 		checkSelection();
< 		checkDeleteable();
< 		checkSelectable();
---
>         /* not suppoerted */
573,576c280
< 		text.paste();
< 		checkSelection();
< 		checkDeleteable();
< 		checkSelectable();
---
>         /* not suppoerted */
583,585c287
< 		text.selectAll();
< 		checkSelection();
< 		checkDeleteable();
---
>         /* not suppoerted */
593c295,309
< 		return value;
---
> 		return super.doGetValue();
> 	}
> 
>     /**
>      * @see org.eclipse.gmf.runtime.common.ui.services.properties.extended.MultiButtonCellEditor#initButtons()
>      */
>     protected void initButtons() {
>         // 'set' button
>         IPropertyAction setAction = new IPropertyAction() {
> 
>             public Object execute(Control owner) {
>                 return openDialogBox(owner);
>             }
>         };
>         addButton("...", setAction); //$NON-NLS-1$
