16a17
> import org.eclipse.draw2d.PositionConstants;
24a26
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.PrecisionPointList;
34c36
< 	extends AbstractConnectionAnchor {
---
> 	extends AbstractConnectionAnchor implements OrthogonalConnectionAnchor {
40c42
< 	// The connection anchor refrence point (sometimes the same as anchor location)
---
> 	// The connection anchor reference point (sometimes the same as anchor location)
113c115
< 		Rectangle rBox = getBox();
---
> 		PrecisionRectangle rBox = new PrecisionRectangle(getBox());
116,118c118,120
< 		return new Point(Math.round(relativeReference.preciseX * rBox.width
< 			+ rBox.x), Math.round(relativeReference.preciseY
< 			* rBox.height + rBox.y));
---
> 		return new PrecisionPoint(relativeReference.preciseX * rBox.preciseWidth
> 				+ rBox.preciseX, relativeReference.preciseY * rBox.preciseHeight
> 				+ rBox.preciseY);
139c141
< 	static private int STRAIGHT_LINE_TOLERANCE = 10;
---
> 	static private int STRAIGHT_LINE_TOLERANCE = 3;
146,155c148
< 		Point foreignReference = reference.getCopy();
< 		Point ownReference = getReferencePoint().getCopy();
< 		
< 		ownReference = normalizeToStraightlineTolerance(foreignReference, ownReference, STRAIGHT_LINE_TOLERANCE);
< 		
< 		Point location = getLocation(ownReference, foreignReference);
< 		if (location == null || 
< 			getBox().expand(1, 1).contains(foreignReference) &&
< 			!getBox().shrink(1, 1).contains(foreignReference))
< 			location = getLocation(getBox().getCenter(), foreignReference);
---
> 		Point ownReference = normalizeToStraightlineTolerance(reference, getReferencePoint(), STRAIGHT_LINE_TOLERANCE);
156a150,152
> 		Point location = getLocation(ownReference, reference);
> 		if (location == null) {
> 			location = getLocation(new PrecisionPoint(getBox().getCenter()), reference);
159a156
> 		}
179,191c176,186
< 		Point normalizedReference = ownReference.getCopy();
< 		if (Math.abs(foreignReference.x - ownReference.x) < tolerance || 
< 			Math.abs(foreignReference.y - ownReference.y) < tolerance) {
< 			LineSeg lineSeg = new LineSeg(ownReference, foreignReference);
< 				
< 			normalizedReference = lineSeg.perpIntersect(ownReference.x, ownReference.y);
< 			
< 			// account for possible rounding errors and ensure the
< 			// resulting line is straight
< 			if (Math.abs(normalizedReference.x - foreignReference.x) < Math.abs(normalizedReference.y - foreignReference.y))
< 				normalizedReference.x = foreignReference.x;
< 			else
< 				normalizedReference.y = foreignReference.y;
---
> 		PrecisionPoint preciseOwnReference = new PrecisionPoint(ownReference);
> 		PrecisionPoint normalizedReference = (PrecisionPoint)preciseOwnReference.getCopy();
> 		PrecisionPoint preciseForeignReference = new PrecisionPoint(foreignReference);
> 		if (Math.abs(preciseForeignReference.preciseX - preciseOwnReference.preciseX) < tolerance) {
> 			normalizedReference.preciseX = preciseForeignReference.preciseX;
> 			normalizedReference.updateInts();
> 			return normalizedReference;
> 		}
> 		if (Math.abs(preciseForeignReference.preciseY - preciseOwnReference.preciseY) < tolerance) {
> 			normalizedReference.preciseY = preciseForeignReference.preciseY;
> 			normalizedReference.updateInts();
222c217
< 			PointList polyList = ((IPolygonAnchorableFigure) getOwner()).getPolygonPoints();
---
> 			PrecisionPointList polyList = new PrecisionPointList(((IPolygonAnchorableFigure) getOwner()).getPolygonPoints());
226,232c221,227
< 		Rectangle rBox = getBox();
< 		PointList ptList = new PointList();
< 		ptList.addPoint(rBox.getTopLeft());
< 		ptList.addPoint(rBox.getTopRight());
< 		ptList.addPoint(rBox.getBottomRight());
< 		ptList.addPoint(rBox.getBottomLeft());
< 		ptList.addPoint(rBox.getTopLeft());
---
> 		PrecisionRectangle r = new PrecisionRectangle(getBox());
> 		PrecisionPointList ptList = new PrecisionPointList(5);
> 		ptList.addPoint(new PrecisionPoint(r.preciseX, r.preciseY));
> 		ptList.addPoint(new PrecisionPoint(r.preciseX + r.preciseWidth, r.preciseY));
> 		ptList.addPoint(new PrecisionPoint(r.preciseX + r.preciseWidth, r.preciseY + r.preciseHeight));
> 		ptList.addPoint(new PrecisionPoint(r.preciseX, r.preciseY + r.preciseHeight));
> 		ptList.addPoint(new PrecisionPoint(r.preciseX, r.preciseY));
278,279c273,274
<             .getPoints().getBounds().getCopy()
<             : getOwner().getBounds().getCopy();
---
>             .getPoints().getBounds()
>             : getOwner().getBounds();
313a309,345
> 	public Point getOrthogonalLocation(Point orthoReference) {
> 		PrecisionPoint ownReference = new PrecisionPoint(getReferencePoint());
> //		PrecisionRectangle bounds = new PrecisionRectangle(getBox());
> 		PrecisionRectangle bounds = new PrecisionRectangle(FigureUtilities.getAnchorableFigureBounds(getOwner()));
> 		getOwner().translateToAbsolute(bounds);
> 		bounds.expand(0.000001, 0.000001);
> 		PrecisionPoint preciseOrthoReference = new PrecisionPoint(orthoReference);
> 		int orientation = PositionConstants.NONE;
> 		if (preciseOrthoReference.preciseX >= bounds.preciseX && preciseOrthoReference.preciseX <= bounds.preciseX + bounds.preciseWidth) {
> 			ownReference.preciseX = preciseOrthoReference.preciseX;
> 			orientation = PositionConstants.VERTICAL;
> 		} else if (preciseOrthoReference.preciseY >= bounds.preciseY && preciseOrthoReference.preciseY <= bounds.preciseY + bounds.preciseHeight) {
> 			ownReference.preciseY = preciseOrthoReference.preciseY;
> 			orientation = PositionConstants.HORIZONTAL;
> 		}
> 		ownReference.updateInts();
> 		
> 		Point location = getLocation(ownReference, preciseOrthoReference);
> 		if (location == null) {
> 			location = getLocation(orthoReference);
> 			orientation = PositionConstants.NONE;
> 		}
> 		
> 		if (orientation != PositionConstants.NONE) {
> 			PrecisionPoint loc = new PrecisionPoint(location);
> 			if (orientation == PositionConstants.VERTICAL) {
> 				loc.preciseX = preciseOrthoReference.preciseX;
> 			} else {
> 				loc.preciseY = preciseOrthoReference.preciseY;
> 			}
> 			loc.updateInts();
> 			location = loc;
> 		}
> 		
> 		return location;
> 	}
> 
