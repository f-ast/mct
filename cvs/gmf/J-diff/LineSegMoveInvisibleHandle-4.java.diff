14a15,17
> import org.eclipse.gef.DragTracker;
> import org.eclipse.gef.RequestConstants;
> import org.eclipse.gef.tools.ConnectionBendpointTracker;
41a45,68
> 	/**
> 	 * Creates and returns a new {@link ConnectionBendpointTracker}.
> 	 * @return the new ConnectionBendpointTracker
> 	 */
> 	protected DragTracker createDragTracker() {
> 		ConnectionBendpointTracker tracker;
> 		tracker = new ConnectionBendpointTracker(
> 			(ConnectionEditPart)getOwner(),
> 			getIndex()) {
> 			
> 			/**
> 			 * Called once the drag has been interpreted.  This is where the real work of the drag is
> 			 * carried out.  By default, the current command is executed.
> 			 */
> 			protected void performDrag() {
> 				setCurrentCommand(getCommand());
> 				executeCurrentCommand();
> 			}
> 		};
> 		tracker.setType(RequestConstants.REQ_CREATE_BENDPOINT);
> 		tracker.setDefaultCursor(getCursor());
> 		return tracker;
> 	}
> 
