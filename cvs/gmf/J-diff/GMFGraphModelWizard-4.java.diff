9,12d8
< 
< import java.util.ArrayList;
< import java.util.Collection;
< import java.util.Collections;
14,15d9
< import java.util.Iterator;
< import java.util.List;
17,18d10
< import java.util.MissingResourceException;
< import java.util.StringTokenizer;
29,30d20
< import org.eclipse.emf.ecore.EClass;
< import org.eclipse.emf.ecore.EClassifier;
37d26
< import org.eclipse.gmf.gmfgraph.GMFGraphFactory;
45,53d33
< import org.eclipse.jface.wizard.WizardPage;
< import org.eclipse.swt.SWT;
< import org.eclipse.swt.events.ModifyEvent;
< import org.eclipse.swt.events.ModifyListener;
< import org.eclipse.swt.layout.GridData;
< import org.eclipse.swt.layout.GridLayout;
< import org.eclipse.swt.widgets.Combo;
< import org.eclipse.swt.widgets.Composite;
< import org.eclipse.swt.widgets.Label;
65d44
< 
70c49
<  * @generated
---
>  * @generated NOT
73,87d51
< 	/**
< 	 * This caches an instance of the model package.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	protected GMFGraphPackage gmfGraphPackage = GMFGraphPackage.eINSTANCE;
< 
< 	/**
< 	 * This caches an instance of the model factory.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	protected GMFGraphFactory gmfGraphFactory = gmfGraphPackage.getGMFGraphFactory();
98,105d61
< 	 * This is the initial object creation page.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	protected GMFGraphModelWizardInitialObjectCreationPage initialObjectCreationPage;
< 
< 	/**
122,129d77
< 	 * Caches the names of the types that can be created as the root object.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	protected List initialObjectNames;
< 
< 	/**
143,165d90
< 	 * Returns the names of the types that can be created as the root object.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	protected Collection getInitialObjectNames() {
< 		if (initialObjectNames == null) {
< 			initialObjectNames = new ArrayList();
< 			for (Iterator classifiers = gmfGraphPackage.getEClassifiers().iterator(); classifiers.hasNext(); ) {
< 				EClassifier eClassifier = (EClassifier)classifiers.next();
< 				if (eClassifier instanceof EClass) {
< 					EClass eClass = (EClass)eClassifier;
< 					if (!eClass.isAbstract()) {
< 						initialObjectNames.add(eClass.getName());
< 					}
< 				}
< 			}
< 			Collections.sort(initialObjectNames, java.text.Collator.getInstance());
< 		}
< 		return initialObjectNames;
< 	}
< 
< 	/**
172c97
< 		return gmfGraphFactory.createCanvas();
---
> 		return GMFGraphPackage.eINSTANCE.getGMFGraphFactory().createCanvas();
183,184d107
< 			// Remember the file.
< 			//
185a109,116
> 			createModelFile(modelFile);
> 			return openEditor(modelFile);
> 		}
> 		catch (Exception exception) {
> 			GMFGraphEditPlugin.INSTANCE.log(exception);
> 			return false;
> 		}
> 	}
187,188c118
< 			// Do the work within an operation.
< 			//
---
> 	protected void createModelFile(final IFile modelFile) throws Exception {
227a158,160
> 	}
> 
> 	protected boolean openEditor(IFile modelFile) {
258,262d190
< 		catch (Exception exception) {
< 			GMFGraphEditPlugin.INSTANCE.log(exception);
< 			return false;
< 		}
< 	}
317,525d244
< 	 * This is the page where the type of object to create is selected.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public class GMFGraphModelWizardInitialObjectCreationPage extends WizardPage {
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		protected Combo initialObjectField;
< 
< 		/**
< 		 * @generated
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 */
< 		protected List encodings;
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		protected Combo encodingField;
< 
< 		/**
< 		 * Pass in the selection.
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		public GMFGraphModelWizardInitialObjectCreationPage(String pageId) {
< 			super(pageId);
< 		}
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		public void createControl(Composite parent) {
< 			Composite composite = new Composite(parent, SWT.NONE);
< 			{
< 				GridLayout layout = new GridLayout();
< 				layout.numColumns = 1;
< 				layout.verticalSpacing = 12;
< 				composite.setLayout(layout);
< 
< 				GridData data = new GridData();
< 				data.verticalAlignment = GridData.FILL;
< 				data.grabExcessVerticalSpace = true;
< 				data.horizontalAlignment = GridData.FILL;
< 				composite.setLayoutData(data);
< 			}
< 
< 			Label containerLabel = new Label(composite, SWT.LEFT);
< 			{
< 				containerLabel.setText(GMFGraphEditPlugin.INSTANCE.getString("_UI_ModelObject"));
< 
< 				GridData data = new GridData();
< 				data.horizontalAlignment = GridData.FILL;
< 				containerLabel.setLayoutData(data);
< 			}
< 
< 			initialObjectField = new Combo(composite, SWT.BORDER);
< 			{
< 				GridData data = new GridData();
< 				data.horizontalAlignment = GridData.FILL;
< 				data.grabExcessHorizontalSpace = true;
< 				initialObjectField.setLayoutData(data);
< 			}
< 
< 			for (Iterator i = getInitialObjectNames().iterator(); i.hasNext(); ) {
< 				initialObjectField.add(getLabel((String)i.next()));
< 			}
< 
< 			if (initialObjectField.getItemCount() == 1) {
< 				initialObjectField.select(0);
< 			}
< 			initialObjectField.addModifyListener(validator);
< 
< 			Label encodingLabel = new Label(composite, SWT.LEFT);
< 			{
< 				encodingLabel.setText(GMFGraphEditPlugin.INSTANCE.getString("_UI_XMLEncoding"));
< 
< 				GridData data = new GridData();
< 				data.horizontalAlignment = GridData.FILL;
< 				encodingLabel.setLayoutData(data);
< 			}
< 			encodingField = new Combo(composite, SWT.BORDER);
< 			{
< 				GridData data = new GridData();
< 				data.horizontalAlignment = GridData.FILL;
< 				data.grabExcessHorizontalSpace = true;
< 				encodingField.setLayoutData(data);
< 			}
< 
< 			for (Iterator i = getEncodings().iterator(); i.hasNext(); ) {
< 				encodingField.add((String)i.next());
< 			}
< 
< 			encodingField.select(0);
< 			encodingField.addModifyListener(validator);
< 
< 			setPageComplete(validatePage());
< 			setControl(composite);
< 		}
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		protected ModifyListener validator =
< 			new ModifyListener() {
< 				public void modifyText(ModifyEvent e) {
< 					setPageComplete(validatePage());
< 				}
< 			};
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		protected boolean validatePage() {
< 			return getInitialObjectName() != null && getEncodings().contains(encodingField.getText());
< 		}
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		public void setVisible(boolean visible) {
< 			super.setVisible(visible);
< 			if (visible) {
< 				if (initialObjectField.getItemCount() == 1) {
< 					initialObjectField.clearSelection();
< 					encodingField.setFocus();
< 				}
< 				else {
< 					encodingField.clearSelection();
< 					initialObjectField.setFocus();
< 				}
< 			}
< 		}
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		public String getInitialObjectName() {
< 			String label = initialObjectField.getText();
< 
< 			for (Iterator i = getInitialObjectNames().iterator(); i.hasNext(); ) {
< 				String name = (String)i.next();
< 				if (getLabel(name).equals(label)) {
< 					return name;
< 				}
< 			}
< 			return null;
< 		}
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		public String getEncoding() {
< 			return encodingField.getText();
< 		}
< 
< 		/**
< 		 * Returns the label for the specified type name.
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		protected String getLabel(String typeName) {
< 			try {
< 				return GMFGraphEditPlugin.INSTANCE.getString("_UI_" + typeName + "_type");
< 			}
< 			catch(MissingResourceException mre) {
< 				GMFGraphEditPlugin.INSTANCE.log(mre);
< 			}
< 			return typeName;
< 		}
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		protected Collection getEncodings() {
< 			if (encodings == null) {
< 				encodings = new ArrayList();
< 				for (StringTokenizer stringTokenizer = new StringTokenizer(GMFGraphEditPlugin.INSTANCE.getString("_UI_XMLEncodingChoices")); stringTokenizer.hasMoreTokens(); ) {
< 					encodings.add(stringTokenizer.nextToken());
< 				}
< 			}
< 			return encodings;
< 		}
< 	}
< 
< 	/**
584d302
< 
