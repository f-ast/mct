29,30d28
< import org.osgi.framework.Bundle;
< 
33a32
> import org.osgi.framework.Bundle;
852,854d850
< 			Bundle bundle = getPluginBundle(parameterPluginID);
< 			if(bundle==null)
< 				return Object.class;
856c852,855
< 			return loadClass(parameterClassName, bundle);
---
> 			Class clazz = loadClass(parameterClassName,parameterPluginID);
> 			if(clazz==null)
> 				clazz =  Object.class;
> 			return clazz;
1144,1149c1143,1149
< 	protected static Class loadClass(
< 		String className,
< 		Bundle bundle) {
< 			/*
< 			WeakReference ref = (WeakReference) successLookupTable.get(className);
< 			Class found = (ref != null) ? (Class) ref.get() : null;
---
> 	 /*protected static Class loadClass(String className, Bundle bundle) {
> 		try {
> 			return bundle.loadClass(className);
> 		} catch (ClassNotFoundException e) {
> 			return null;
> 		}
> 	}*/
1150a1151,1169
> 	/**
> 	 * A utility method to load a class using its name and a given class loader.
> 	 * 
> 	 * @param className
> 	 *            The class name
> 	 * @param bundle
> 	 *            The class loader
> 	 * @return The loaded class or <code>null</code> if could not be loaded
> 	 */
> 	protected static Class loadClass(String className, String pluginId) {
> 		StringBuffer keyStringBuf = new StringBuffer(className.length()
> 			+ pluginId.length() + 2); // 2 is for . and extra.
> 		keyStringBuf.append(pluginId);
> 		keyStringBuf.append('.');
> 		keyStringBuf.append(className);
> 		String keyString = keyStringBuf.toString();
> 		WeakReference ref = (WeakReference) successLookupTable.get(keyString);
> 		Class found = (ref != null) ? (Class) ref.get()
> 			: null;
1153,1155c1172,1173
< 					successLookupTable.remove(className);
< 				Collection classNames = (Collection)failureLookupTable.get(bundle);
< 				if (classNames == null || !classNames.contains(className)) {
---
> 				successLookupTable.remove(keyString);
> 			if (!failureLookupTable.contains(keyString)) {
1156a1175,1176
> 					Bundle bundle = getPluginBundle(pluginId);
> 					if (bundle!=null){
1158,1162c1178,1180
< 						successLookupTable.put(className, new WeakReference(found));
< 					} catch (ClassNotFoundException e) {
< 						if (classNames == null) {
< 							classNames = new ArrayList();
< 							failureLookupTable.put(bundle, classNames);
---
> 						successLookupTable.put(keyString, new WeakReference(found));
> 					}else{
> 						failureLookupTable.add(keyString);
1164c1182,1183
< 						classNames.add(className);
---
> 				} catch (ClassNotFoundException e) {
> 					failureLookupTable.add(keyString);
1169,1174d1187
< */		
< 		try {
< 			return bundle.loadClass(className);
< 		} catch (ClassNotFoundException e) {
< 			return null;
< 		}
1176a1190
> 	
1299,1329c1313
< 			StringBuffer keyStringBuf = new StringBuffer(className.length() + pluginId.length() + 2); // 2 is for . and extra.
< 			keyStringBuf.append(pluginId);
< 			keyStringBuf.append('.');
< 			keyStringBuf.append(className);
< 			String keyString = keyStringBuf.toString();
< 			
< 			// Return null if this failed before
< 			if(failureLookupTable.contains(keyString))
< 				return null;
< 			
< 			// Check to see if this key string is in the success table.
< 			WeakReference loadedClassRef = (WeakReference)successLookupTable.get(keyString);
< 			Class theClass = null;
< 			if(loadedClassRef != null)
< 				theClass = (Class)loadedClassRef.get();
< 			
< 			if(theClass == null) {
< 				Bundle bundle = (pluginId != null) 
< 						? getPluginBundle(pluginId)
< 						: null;
< 						
< 				if (bundle == null)
< 					return null;
< 				theClass = loadClass(className, bundle);
< 				
< 				if(theClass != null)
< 					successLookupTable.put(keyString, new WeakReference(theClass));
< 				else
< 					failureLookupTable.add(keyString);
< 			}
< 			
---
> 			Class theClass = loadClass(className,pluginId);
1414,1416d1397
< 		Bundle bundle = getPluginBundle(staticMethodDescriptor.getPluginID());
< 		if (bundle == null)
< 			return null;
1418c1399,1401
< 								   bundle);
---
> 									staticMethodDescriptor.getPluginID());
> 		if (theClass==null)
> 			return null;
