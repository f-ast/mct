2c2
<  * Copyright (c) 2004 IBM Corporation and others.
---
>  * Copyright (c) 2004, 2006 IBM Corporation and others.
13a14,16
> import org.eclipse.core.runtime.IAdaptable;
> import org.eclipse.draw2d.IFigure;
> import org.eclipse.draw2d.Locator;
16,17d18
< import org.eclipse.gmf.runtime.diagram.ui.internal.services.decorator.IDecoratorTargetBase;
< 
36c37,76
< 	extends IDecoratorTargetBase {
---
> 	extends IAdaptable {
>     
>   /**
>    * Enumeration of directions for the location of shape decorations.
>    */
>     public class Direction {
> 
>         private Direction() {
>             super();
>         }
>         
>         /** Center */
>         public static final Direction CENTER = new Direction();
> 
>         /** North */
>         public static final Direction NORTH = new Direction();
> 
>         /** South */
>         public static final Direction SOUTH = new Direction();
> 
>         /** West */
>         public static final Direction WEST = new Direction();
> 
>         /** East */
>         public static final Direction EAST = new Direction();
> 
>         /** North-East */
>         public static final Direction NORTH_EAST = new Direction();
> 
>         /** North-West */
>         public static final Direction NORTH_WEST = new Direction();
> 
>         /** South-East */
>         public static final Direction SOUTH_EAST = new Direction();
> 
>         /** South-West */
>         public static final Direction SOUTH_WEST = new Direction();
>     
>     }
>     
96a137,193
>     /**
>      * Adds a figure as a decoration on a shape.
>      * 
>      * @param figure
>      *            the figure to be used as the decoration
>      * @param direction
>      *            The direction relative to the shape to place the
>      *            decoration.
>      * @param margin
>      *            The margin is the space, in himetric units, between the
>      *            shape's edge and the decoration. A positive margin will
>      *            place the figure outside the shape, a negative margin will
>      *            place the decoration inside the shape.
>      * @param isVolatile
>      *            True if this decoration is volatile (i.e. not to be
>      *            included in the printed output of a diagram); false
>      *            otherwise.
>      * @return The decoration object, which is needed to later remove the
>      *         decoration.
>      */
>     public IDecoration addShapeDecoration(IFigure figure,
>             Direction direction, int margin, boolean isVolatile);
> 
>     /**
>      * Adds a figure as a decoration on a connection.
>      * 
>      * @param figure
>      *            the figure to be used as the decoration
>      * @param percentageFromSource
>      *            The percentage of the connection length away from the
>      *            source end (range is from 0 to 100) where the decoration
>      *            should be positioned.
>      * @param isVolatile
>      *            True if this decoration is volatile (i.e. not to be
>      *            included in the printed output of a diagram); false
>      *            otherwise.
>      * @return The decoration object, which is needed to later remove the
>      *         decoration.
>      */
>     public IDecoration addConnectionDecoration(IFigure figure,
>             int percentageFromSource, boolean isVolatile);
>     /**
>      * Adds a figure as a decoration on a shape or connection.
>      * 
>      * @param figure
>      *            the figure to be used as the decoration
>      * @param locator
>      *            The locator to be used to position the decoration
>      * @param isVolatile
>      *            True if this decoration is volatile (i.e. not to be
>      *            included in the printed output of a diagram); false
>      *            otherwise.
>      * @return The decoration object, which is needed to later remove the
>      *         decoration.
>      */
>     public IDecoration addDecoration(IFigure figure, Locator locator,
>             boolean isVolatile);
