2664a2665,2666
> 		// http://www.eclipse.org/gmf/2005/constraints/meta
> 		createMetaAnnotations();
2676c2678
< 		  (genDiagramEClass, 
---
> 		  (this, 
2679c2681,2682
< 			 "constraints", "http://www.eclipse.org/gmf/2005/constraints"
---
> 			 "constraints", "http://www.eclipse.org/gmf/2005/constraints",
> 			 "meta", "http://www.eclipse.org/gmf/2005/constraints/meta"
2691a2695,2700
> 		  (this, 
> 		   source, 
> 		   new String[] {
> 			 "import", "platform:/resource/org.eclipse.gmf.runtime.notation/model/notation.ecore"
> 		   });		
> 		addAnnotation
2695c2704
< 			 "ocl", "nodes->forAll(n : GenNode | self.links->forAll(l : GenLink | l.domainMetaClass <> n.domainMetaClass))"
---
> 			 "ocl", "nodes->forAll(n : GenNode | self.links->forAll(l : GenLink | l.oclAsType(TypeLinkModelFacet).metaClass <> n.getDomainMetaClass()))"
2701c2710
< 			 "ocl", "super.domainNameFeature.eClass == domainMetaClass"
---
> 			 "ocl", "let c: ecore::EClass = diagramRunTimeClass.ecoreClass.oclAsType(ecore::EClass) in c = notation::Node or c.eAllSuperTypes->includes(notation::Node)"
2704c2713,2731
< 		  (genNodeEClass, 
---
> 		  (genLinkEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "let c: ecore::EClass = diagramRunTimeClass.ecoreClass.oclAsType(ecore::EClass) in c = notation::Edge or c.eAllSuperTypes->includes(notation::Edge)"
> 		   });								
> 		addAnnotation
> 		  (genNodeLabelEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "modelFacet.metaFeature.ecoreFeature.eContainingClass.isSuperTypeOf(node.getDomainMetaClass().ecoreClass)"
> 		   });			
> 		addAnnotation
> 		  (genLinkLabelEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "let tl: TypeLinkModelFacet = link.modelFacet.oclAsType(TypeLinkModelFacet) in tl.oclIsUndefined() or modelFacet.metaFeature.ecoreFeature.eContainingClass.isSuperTypeOf(tl.metaClass.ecoreClass)"
> 		   });						
> 		addAnnotation
> 		  (getTypeModelFacet_ContainmentMetaFeature(), 
2707c2734
< 			 "ocl", "diagramRunTimeClass.eCoreClass.eAllSuperTypes->includes(diagramrt.DiagramNode)"
---
> 			 "ocl", "containmentMetaFeature.ecoreFeature.oclAsType(ecore::EReference).containment"
2713c2740
< 			 "ocl", "containmentMetaFeature.isContainment"
---
> 			 "ocl", "containmentMetaFeature.ecoreFeature.oclAsType(ecore::EReference).eReferenceType.isSuperTypeOf(metaClass.ecoreClass)"
2719c2746
< 			 "ocl", "sourceMetaFeature.eContainingClass \'equals to\' or \'superclass of\' super.metaClass"
---
> 			 "ocl", "sourceMetaFeature.oclIsUndefined() or sourceMetaFeature.ecoreFeature.oclAsType(ecore::EReference).eReferenceType.isSuperTypeOf(metaClass.ecoreClass)"
2725c2752,2781
< 			 "ocl", "targetMetaFeature.eContainingClass \'equals to\' or \'superclass of\' super.metaClass"
---
> 			 "ocl", "targetMetaFeature.genClass.ecoreClass.isSuperTypeOf(metaClass.ecoreClass)"
> 		   });																										
> 		addAnnotation
> 		  (getGenFeatureSeqInitializer_Initializers(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "initializers.feature->forAll(f| f.ecoreFeature.eContainingClass.isSuperTypeOf(typeModelFacet.metaClass.ecoreClass))"
> 		   });								
> 		addAnnotation
> 		  (genLinkConstraintsEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not sourceEnd.oclIsUndefined() or not targetEnd.oclIsUndefined()"
> 		   });											
> 	}
> 
> 	/**
> 	 * Initializes the annotations for <b>http://www.eclipse.org/gmf/2005/constraints/meta</b>.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected void createMetaAnnotations() {
> 		String source = "http://www.eclipse.org/gmf/2005/constraints/meta";																																											
> 		addAnnotation
> 		  (getTypeModelFacet_ModelElementSelector(), 
> 		   source, 
> 		   new String[] {
> 			 "def", "context",
> 			 "ocl", "metaClass.ecoreClass"
2728c2784
< 		  (genFeatureSeqInitializerEClass, 
---
> 		  (valueExpressionEClass, 
2731c2787,2812
< 			 "ocl", "initializers.feature.genClass.ecoreClass->asSet()->size() = 1 -- common ECore class"
---
> 			 "def", "ValueSpec"
> 		   });			
> 		addAnnotation
> 		  (getValueExpression_Body(), 
> 		   source, 
> 		   new String[] {
> 			 "def", "body"
> 		   });			
> 		addAnnotation
> 		  (getValueExpression_Language(), 
> 		   source, 
> 		   new String[] {
> 			 "def", "lang"
> 		   });			
> 		addAnnotation
> 		  (modelElementSelectorEClass, 
> 		   source, 
> 		   new String[] {
> 			 "def", "Constraint"
> 		   });										
> 		addAnnotation
> 		  (getGenFeatureSeqInitializer_Initializers(), 
> 		   source, 
> 		   new String[] {
> 			 "def", "context",
> 			 "ocl", "typeModelFacet.metaClass.ecoreClass"
2737c2818,2855
< 			 "ocl", "self.feature.ecoreFeature.eType = self.body->evaluate().eType"
---
> 			 "def", "ValueSpec"
> 		   });		
> 		addAnnotation
> 		  (genFeatureValueSpecEClass, 
> 		   source, 
> 		   new String[] {
> 			 "def", "type",
> 			 "ocl", "feature.ecoreFeature"
> 		   });												
> 		addAnnotation
> 		  (getGenLinkConstraints_SourceEnd(), 
> 		   source, 
> 		   new String[] {
> 			 "def", "context",
> 			 "ocl", "getSourceEndContextClass().ecoreClass"
> 		   });		
> 		addAnnotation
> 		  (getGenLinkConstraints_SourceEnd(), 
> 		   source, 
> 		   new String[] {
> 			 "def", "variable",
> 			 "name", "oppositeEnd",
> 			 "type.ocl", "getTargetEndContextClass().ecoreClass"
> 		   });			
> 		addAnnotation
> 		  (getGenLinkConstraints_TargetEnd(), 
> 		   source, 
> 		   new String[] {
> 			 "def", "context",
> 			 "ocl", "getTargetEndContextClass().ecoreClass"
> 		   });		
> 		addAnnotation
> 		  (getGenLinkConstraints_TargetEnd(), 
> 		   source, 
> 		   new String[] {
> 			 "def", "variable",
> 			 "name", "oppositeEnd",
> 			 "type.ocl", "getSourceEndContextClass().ecoreClass"
