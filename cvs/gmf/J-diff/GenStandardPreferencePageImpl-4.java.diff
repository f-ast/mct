10d9
< 
12d10
< 
14d11
< 
26a24
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.GenStandardPreferencePageImpl#getClassName <em>Class Name</em>}</li>
53a52,71
> 	 * The default value of the '{@link #getClassName() <em>Class Name</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @see #getClassName()
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected static final String CLASS_NAME_EDEFAULT = null;
> 
> 	/**
> 	 * The cached value of the '{@link #getClassName() <em>Class Name</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @see #getClassName()
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected String className = CLASS_NAME_EDEFAULT;
> 
> 	/**
92a111,161
> 	/* (non-Javadoc)
> 	 * @see org.eclipse.gmf.codegen.gmfgen.impl.GenPreferencePageImpl#getQualifiedClassName()
> 	 */
> 	@Override
> 	public String getQualifiedClassName() {
> 		if (getDiagram() == null || GenCommonBaseImpl.isEmpty(getDiagram().getPreferencesPackageName())) {
> 			return getClassName();
> 		}
> 		// no custom page for Pathmaps at the moment
> 		if (getKind() == StandardPreferencePages.PATHMAPS_LITERAL) {
> 			return "org.eclipse.gmf.runtime.emf.ui.preferences.PathmapsPreferencePage";
> 		}
> 		return getDiagram().getPreferencesPackageName() + '.' + getClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public String getClassNameGen() {
> 		return className;
> 	}
> 
> 	public String getClassName() {
> 		if (!GenCommonBaseImpl.isEmpty(getClassNameGen())) {
> 			return getClassNameGen();
> 		}
> 		switch (getKind()) {
> 		case GENERAL_LITERAL : return "DiagramGeneralPreferencePage"; //$NON-NLS-1$
> 		case APPEARANCE_LITERAL : return "DiagramAppearancePreferencePage"; //$NON-NLS-1$
> 		case CONNECTIONS_LITERAL : return "DiagramConnectionsPreferencePage"; //$NON-NLS-1$
> 		case PRINTING_LITERAL : return "DiagramPrintingPreferencePage"; //$NON-NLS-1$
> 		case RULERS_AND_GRID_LITERAL : return "DiagramRulersAndGridPreferencePage"; //$NON-NLS-1$
> 		case PATHMAPS_LITERAL : return "PathmapsPreferencePage"; //$NON-NLS-1$
> 		}
> 		throw new IllegalStateException();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public void setClassName(String newClassName) {
> 		String oldClassName = className;
> 		className = newClassName;
> 		if (eNotificationRequired())
> 			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME, oldClassName, className));
> 	}
> 
102a172,173
> 			case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME:
> 				return getClassName();
117a189,191
> 			case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME:
> 				setClassName((String)newValue);
> 				return;
132a207,209
> 			case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME:
> 				setClassName(CLASS_NAME_EDEFAULT);
> 				return;
146a224,225
> 			case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME:
> 				return CLASS_NAME_EDEFAULT == null ? className != null : !CLASS_NAME_EDEFAULT.equals(className);
162a242,243
> 		result.append(", className: ");
> 		result.append(className);
