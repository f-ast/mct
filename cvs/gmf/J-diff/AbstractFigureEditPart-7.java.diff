22d21
< import org.eclipse.draw2d.StackLayout;
24d22
< import org.eclipse.draw2d.XYLayout;
32a31
> import org.eclipse.gmf.gmfgraph.Dimension;
39d37
< import org.eclipse.gmf.gmfgraph.Layoutable;
42a41,43
> import org.eclipse.gmf.gmfgraph.Shape;
> import org.eclipse.gmf.gmfgraph.StackLayout;
> import org.eclipse.gmf.gmfgraph.XYLayout;
53a55
> 
60,62c62,64
< 	public Object getLayoutConstraint() {
< 		Layoutable layoutable = (Layoutable) ((View) getModel()).getElement();
< 		if (layoutable == null || layoutable.getLayoutData() == null) {
---
> 	private Object getLayoutConstraint() {
> 		Shape shape = getShape();
> 		if (shape == null || shape.getLayoutData() == null) {
65c67
< 		LayoutData layoutData = layoutable.getLayoutData();
---
> 		LayoutData layoutData = shape.getLayoutData();
117c119
< 			if (xyLayoutData.getTopLeft() != null) {
---
> 			if (xyLayoutData.getTopLeft() != null && xyLayoutData.getSize() != null) {
119,120d120
< 			}
< 			if (xyLayoutData.getSize() != null) {
147c147
< 		} else if (layoutManager instanceof XYLayout) {
---
> 		} else if (layoutManager instanceof org.eclipse.draw2d.XYLayout) {
158,164c158
< 	 * This method will be called then new LayoutData object was associated with
< 	 * this model element.
< 	 * 
< 	 * All the layout constraints (LayoutData objects) are actually stored in
< 	 * model, so just calling <code>handleMajorSemanticChange()</code> to
< 	 * re-create this EditPart and reload all the LayoutDatas from model
< 	 * 
---
> 	 * Blocking refresh of figure if it was not finally created.
166,168c160,161
< 	protected void layoutDataChanged(LayoutData layoutData) {
< 		if (isFigureRefreshAllowed()) {
< 			handleMajorSemanticChange();
---
> 	private boolean isFigureRefreshAllowed() {
> 		return figure != null && figure.getParent() != null;
169a163,172
> 
> 	// ModelData transformers
> 	private int getDraw2dAllignment(Alignment alignment, boolean isToolbar) {
> 		switch (alignment.getValue()) {
> 		case Alignment.BEGINNING:
> 			return isToolbar ? ToolbarLayout.ALIGN_TOPLEFT : org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP;
> 		case Alignment.END:
> 			return isToolbar ? ToolbarLayout.ALIGN_BOTTOMRIGHT : org.eclipse.draw2d.FlowLayout.ALIGN_RIGHTBOTTOM;
> 		}
> 		return isToolbar ? ToolbarLayout.ALIGN_CENTER : org.eclipse.draw2d.FlowLayout.ALIGN_CENTER;
172,182c175,186
< 	/**
< 	 * This method will be called then layout was changed in model. The same
< 	 * method will be called to initialize layout on creating figure.
< 	 * 
< 	 * The only one way to change layout is to change corresponding model
< 	 * element now.
< 	 */
< 	protected void layoutChanged(Layout layout) {
< 		if (layout == null) {
< 			setFigureLayoutManager(null);
< 			return;
---
> 	private Integer getGridDataAlignment(Alignment alignment) {
> 		switch (alignment.getValue()) {
> 		case Alignment.BEGINNING:
> 			return GridData.BEGINNING;
> 		case Alignment.END:
> 			return GridData.END;
> 		case Alignment.CENTER:
> 			return GridData.CENTER;
> 		case Alignment.FILL:
> 			return GridData.FILL;
> 		}
> 		return null;
185,186c189,190
< 		switch (layout.eClass().getClassifierID()) {
< 		case GMFGraphPackage.BORDER_LAYOUT: {
---
> 	protected LayoutManager getLayoutManager(Layout layout) {
> 		if (layout instanceof BorderLayout) {
188,194c192
< 			org.eclipse.draw2d.BorderLayout layoutManager;
< 			if (getFigureLayoutManager() instanceof org.eclipse.draw2d.BorderLayout) {
< 				layoutManager = (org.eclipse.draw2d.BorderLayout) getFigureLayoutManager();
< 			} else {
< 				layoutManager = new org.eclipse.draw2d.BorderLayout();
< 				setFigureLayoutManager(layoutManager);
< 			}
---
> 			org.eclipse.draw2d.BorderLayout layoutManager = new org.eclipse.draw2d.BorderLayout();
199,203c197
< 			break;
< 		}
< 		case GMFGraphPackage.CUSTOM_LAYOUT: {
< 			// TODO: implement custom layout
< 			break;
---
> 			return layoutManager;
205c199,200
< 		case GMFGraphPackage.FLOW_LAYOUT: {
---
> 		
> 		if (layout instanceof FlowLayout) {
208,214c203
< 				ToolbarLayout layoutManager;
< 				if (getFigureLayoutManager() instanceof ToolbarLayout) {
< 					layoutManager = (ToolbarLayout) getFigureLayoutManager();
< 				} else {
< 					layoutManager = new ToolbarLayout();
< 					setFigureLayoutManager(layoutManager);
< 				}
---
> 				ToolbarLayout layoutManager = new ToolbarLayout();
218a208
> 				return layoutManager;
220,226c210
< 				org.eclipse.draw2d.FlowLayout layoutManager;
< 				if (getFigureLayoutManager() instanceof org.eclipse.draw2d.FlowLayout) {
< 					layoutManager = (org.eclipse.draw2d.FlowLayout) getFigureLayoutManager();
< 				} else {
< 					layoutManager = new org.eclipse.draw2d.FlowLayout();
< 					setFigureLayoutManager(layoutManager);
< 				}
---
> 				org.eclipse.draw2d.FlowLayout layoutManager = new org.eclipse.draw2d.FlowLayout();
232a217
> 				return layoutManager;
234d218
< 			break;
236c220,221
< 		case GMFGraphPackage.GRID_LAYOUT: {
---
> 		
> 		if (layout instanceof GridLayout) {
238,244c223
< 			org.eclipse.draw2d.GridLayout layoutManager;
< 			if (getFigureLayoutManager() instanceof org.eclipse.draw2d.GridLayout) {
< 				layoutManager = (org.eclipse.draw2d.GridLayout) getFigureLayoutManager();
< 			} else {
< 				layoutManager = new org.eclipse.draw2d.GridLayout();
< 				setFigureLayoutManager(layoutManager);
< 			}
---
> 			org.eclipse.draw2d.GridLayout layoutManager = new org.eclipse.draw2d.GridLayout();
263,280c242
< 			break;
< 		}
< 		case GMFGraphPackage.STACK_LAYOUT: {
< 			if (false == getFigureLayoutManager() instanceof StackLayout) {
< 				setFigureLayoutManager(new StackLayout());
< 			}
< 			break;
< 		}
< 		case GMFGraphPackage.XY_LAYOUT: {
< 			if (false == getFigureLayoutManager() instanceof XYLayout) {
< 				setFigureLayoutManager(new XYLayout());
< 			}
< 			break;
< 		}
< 		}
< 		if (isFigureRefreshAllowed()) {
< 			handleMajorSemanticChange();
< 		}
---
> 			return layoutManager;
283,287c245,246
< 	/**
< 	 * Blocking refresh of figure if it was not finally created.
< 	 */
< 	private boolean isFigureRefreshAllowed() {
< 		return figure != null;
---
> 		if (layout instanceof StackLayout) {
> 			return new org.eclipse.draw2d.StackLayout();
290,302c249,250
< 	protected abstract LayoutManager getFigureLayoutManager();
< 
< 	protected abstract void setFigureLayoutManager(LayoutManager layoutManager);
< 
< 	// ModelData transformers
< 	private int getDraw2dAllignment(Alignment alignment, boolean isToolbar) {
< 		switch (alignment.getValue()) {
< 		case Alignment.BEGINNING:
< 			return isToolbar ? ToolbarLayout.ALIGN_TOPLEFT : org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP;
< 		case Alignment.END:
< 			return isToolbar ? ToolbarLayout.ALIGN_BOTTOMRIGHT : org.eclipse.draw2d.FlowLayout.ALIGN_RIGHTBOTTOM;
< 		}
< 		return isToolbar ? ToolbarLayout.ALIGN_CENTER : org.eclipse.draw2d.FlowLayout.ALIGN_CENTER;
---
> 		if (layout instanceof XYLayout) {
> 			return new org.eclipse.draw2d.XYLayout();
305,315d252
< 	private Integer getGridDataAlignment(Alignment alignment) {
< 		switch (alignment.getValue()) {
< 		case Alignment.BEGINNING:
< 			return GridData.BEGINNING;
< 		case Alignment.END:
< 			return GridData.END;
< 		case Alignment.CENTER:
< 			return GridData.CENTER;
< 		case Alignment.FILL:
< 			return GridData.FILL;
< 		}
319c256
< 	protected int getLineStyle(LineKind lineKind) {
---
> 	protected static int getLineStyle(LineKind lineKind) {
341a279,282
> 	protected org.eclipse.draw2d.geometry.Dimension getCornerDimensions(int width, int height) {
> 		return new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(width), getMapMode().DPtoLP(height));
> 	}
> 
354c295,296
< 		// override default connection handles behavior, that could be installed by parent
---
> 		// override default connection handles behavior, that could be installed
> 		// by parent
379a322
> 
392a336
> 
393a338
> 
410a356,381
> 
> 	protected org.eclipse.draw2d.geometry.Dimension getDraw2dDimension(Dimension dimension) {
> 		return new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(dimension.getDx()), getMapMode().DPtoLP(dimension.getDy()));
> 	}
> 
> 	protected org.eclipse.draw2d.geometry.Point getDraw2DPoint(Point point) {
> 		return new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(point.getX()), getMapMode().DPtoLP(point.getY()));
> 	}
> 
> 	protected void refreshLayoutData() {
> 		if (!isFigureRefreshAllowed()) {
> 			return;
> 		}
> 		Object layoutConstraint = getLayoutConstraint();
> 		if (layoutConstraint != null) {
> 			getFigure().getParent().setConstraint(getFigure(), layoutConstraint);
> 		}
> 	}
> 
> 	protected Shape getShape() {
> 		View view = getNotationView();
> 		if (view != null && view.getElement() instanceof Shape) {
> 			return (Shape) view.getElement();
> 		}
> 		return null;
> 	}
