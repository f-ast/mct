17d16
< import java.util.Dictionary;
19d17
< import java.util.Hashtable;
34d31
< import org.eclipse.emf.ecore.ENamedElement;
36a34
> import org.eclipse.emf.transaction.RunnableWithResult;
57a56,57
> import org.eclipse.gmf.runtime.common.core.util.Log;
> import org.eclipse.gmf.runtime.common.core.util.Trace;
59d58
< import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
69a69,71
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
90,93c92
< import org.eclipse.gmf.runtime.emf.core.EventTypes;
< import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
< import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;
< import org.eclipse.gmf.runtime.emf.core.util.ProxyUtil;
---
> import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
138a138,142
>      * Cache the editing domain after it is retrieved.
>      */
>     private TransactionalEditingDomain editingDomain;
> 
> 	/**
176,177c180
< 		EObject semanticElement = ProxyUtil.resolve(MEditingDomainGetter
< 			.getMEditingDomain((View) getModel()), semanticProxy);
---
> 		EObject semanticElement = EMFCoreUtil.resolve(getEditingDomain(), semanticProxy);
209c212
< 		DiagramEventBroker.getInstance().addNotificationListener(element,
---
> 		getDiagramEventBroker().addNotificationListener(element,
237c240
< 		DiagramEventBroker.getInstance().addNotificationListener(element,
---
> 		getDiagramEventBroker().addNotificationListener(element,
311,313c314,315
< 					DiagramEventBroker.getInstance()
< 						.removeNotificationListener((EObject) obj[0],
< 							(EStructuralFeature) obj[1],
---
> 					getDiagramEventBroker().removeNotificationListener(
> 						(EObject) obj[0], (EStructuralFeature) obj[1],
316,318c318,319
< 					DiagramEventBroker.getInstance()
< 						.removeNotificationListener((EObject) obj[0],
< 							(NotificationListener) obj[1]);
---
> 					getDiagramEventBroker().removeNotificationListener(
> 						(EObject) obj[0], (NotificationListener) obj[1]);
524,525c525,527
< 		Command cmd = (Command) MEditingDomainGetter.getMEditingDomain(
< 			(View) getModel()).runAsRead(new MRunnable() {
---
> 		try {
> 			Command cmd = (Command) TransactionUtil.getEditingDomain(
> 				(View) getModel()).runExclusive(new RunnableWithResult.Impl() {
527,528c529,530
< 			public Object run() {
< 				return ConnectionEditPart.super.getCommand(request);
---
> 				public void run() {
> 					setResult(ConnectionEditPart.super.getCommand(request));
529a532
> 
531a535,543
> 		} catch (InterruptedException e) {
> 			Trace.catching(DiagramUIPlugin.getInstance(),
> 				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
> 				"getCommand", e); //$NON-NLS-1$
> 			Log.error(DiagramUIPlugin.getInstance(),
> 				DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
> 				"getCommand", e); //$NON-NLS-1$
> 			return null;
> 		}
615,616c627,629
< 		return (EObject) MEditingDomainGetter.getMEditingDomain(
< 			(View) getModel()).runAsRead(new MRunnable() {
---
> 		try {
> 			return (EObject) TransactionUtil.getEditingDomain(
> 				(View) getModel()).runExclusive(new RunnableWithResult.Impl() {
618,619c631,632
< 			public Object run() {
< 				return ViewUtil.resolveSemanticElement((View) getModel());
---
> 				public void run() {
> 					setResult(ViewUtil.resolveSemanticElement((View) getModel()));
621a635,644
> 		} catch (InterruptedException e) {
> 			Trace.catching(DiagramUIPlugin.getInstance(),
> 				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
> 				"resolveSemanticElement", e); //$NON-NLS-1$
> 			Log.error(DiagramUIPlugin.getInstance(),
> 				DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
> 				"resolveSemanticElement", e); //$NON-NLS-1$
> 			return null;
> 		}
> 
768c791
< 			DiagramEventBroker.getInstance().removeNotificationListener(
---
> 			DiagramEventBroker.getInstance(getEditingDomain()).removeNotificationListener(
772c795
< 			DiagramEventBroker.getInstance().removeNotificationListener(
---
> 			getDiagramEventBroker().removeNotificationListener(
877,901d899
< 	 * Return a Map of all the appearance property ids supported by the edit
< 	 * part and its children.
< 	 * 
< 	 * Each entry in the map is the factory hint of the edit part as key and a
< 	 * dictionary of appearance properties as values. The edit parts are the
< 	 * receiver itself and it's children.
< 	 * 
< 	 * For example, the connectable shape edit part with name, attribute,
< 	 * operation and shape compartments will return a map where: 1 entry:
< 	 * connectable shape factory hint -> dictionary: Properties.ID_FONT -> font
< 	 * data Properties.ID_FONTCOLOR -> font color Properties.ID_LINECOLOR ->
< 	 * line color Properties.ID_FILLCOLOR -> fill color 2d entry: attribute
< 	 * compartment hint -> dictionary(empty) 3d entry: operation compartment
< 	 * hint -> dictionary(empty) 4d entry: shape compartment hint ->
< 	 * dictionary(empty)
< 	 * 
< 	 * @return Map
< 	 */
< 	public Map getAppearancePropertiesMap() {
< 		Map properties = new HashMap();
< 		fillAppearancePropertiesMap(properties);
< 		return properties;
< 	}
< 
< 	/**
937,939c935,938
< 		if (getSource() != null && getTarget() != null)
< 			MEditingDomainGetter.getMEditingDomain((View) getModel())
< 				.runAsRead(new MRunnable() {
---
> 		if (getSource() != null && getTarget() != null) {
> 			try {
> 				TransactionUtil.getEditingDomain((View) getModel())
> 					.runExclusive(new Runnable() {
941c940
< 					public Object run() {
---
> 						public void run() {
950d948
< 						return null;
952a951,959
> 			} catch (InterruptedException e) {
> 				Trace.catching(DiagramUIPlugin.getInstance(),
> 					DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
> 					"refresh", e); //$NON-NLS-1$
> 				Log.error(DiagramUIPlugin.getInstance(),
> 					DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
> 					"refresh", e); //$NON-NLS-1$
> 			}
> 		}
1182,1212d1188
< 	/*
< 	 * (non-Javadoc)
< 	 * 
< 	 * @see org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart#fillAppearancePropertiesMap(java.util.Map)
< 	 */
< 	public void fillAppearancePropertiesMap(Map properties) {
< 
< 		if (getAppearancePropertyIDs().length > 0) {
< 			// only if there are any appearance properties
< 			final Dictionary local_properties = new Hashtable();
< 			for (int i = 0; i < getAppearancePropertyIDs().length; i++) {
< 				String prob = getAppearancePropertyIDs()[i];
< 				ENamedElement element = MetaModelUtil.getElement(prob);
< 				if (element instanceof EStructuralFeature
< 					&& ViewUtil.isPropertySupported((View) getModel(), prob)) {
< 					local_properties
< 						.put(
< 							getAppearancePropertyIDs()[i],
< 							getStructuralFeatureValue((EStructuralFeature) element));
< 				}
< 			}
< 			properties.put(((View) getModel()).getType(), local_properties);
< 		}
< 
< 		Iterator iterator = getChildren().iterator();
< 		while (iterator.hasNext()) {
< 			IGraphicalEditPart child = (IGraphicalEditPart) iterator.next();
< 			child.fillAppearancePropertiesMap(properties);
< 		}
< 	}
< 
1258,1259c1234,1236
< 		EditPart primaryChildEditPart = (EditPart) MEditingDomainGetter
< 			.getMEditingDomain((View) getModel()).runAsRead(new MRunnable() {
---
> 		try {
> 			EditPart primaryChildEditPart = (EditPart) getEditingDomain()
> 				.runExclusive(new RunnableWithResult.Impl() {
1261,1262c1238,1239
< 				public Object run() {
< 					return getPrimaryChildEditPart();
---
> 						public void run() {
> 							setResult(getPrimaryChildEditPart());
1267a1245,1254
> 
> 		} catch (InterruptedException e) {
> 			Trace.catching(DiagramUIPlugin.getInstance(),
> 				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
> 				"performDirectEditRequest", e); //$NON-NLS-1$
> 			Log.error(DiagramUIPlugin.getInstance(),
> 				DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
> 				"performDirectEditRequest", e); //$NON-NLS-1$
> 		}
> 
1288c1275
< 		elementGuid = ProxyUtil.getProxyID(ref);
---
> 		elementGuid = EMFCoreUtil.getProxyID(ref);
1491,1494d1477
< 
< 		else if (event.getEventType() == EventTypes.UNRESOLVE
< 			&& event.getNotifier() == ((View) getModel()).getElement())
< 			handleMajorSemanticChange();
1512c1495
<      * Derives my editing domain from my diagram view element. Subclasses may
---
>      * Derives my editing domain from my diagram element. Subclasses may
1515,1516c1498,1515
<     public TransactionalEditingDomain getEditingDomain() {
<         return TransactionUtil.getEditingDomain(getDiagramView());
---
>     public final TransactionalEditingDomain getEditingDomain() {
>         if (editingDomain == null) {
>             editingDomain = TransactionUtil.getEditingDomain(getDiagramView());
>         }
>         return editingDomain;
>     } 	
>     
> 	/**
> 	 * Gets the diagram event broker from the editing domain.
> 	 * 
> 	 * @return the diagram event broker
> 	 */
> 	private DiagramEventBroker getDiagramEventBroker() {
>         TransactionalEditingDomain theEditingDomain = getEditingDomain();
>         if (theEditingDomain != null) {
>             return DiagramEventBroker.getInstance(theEditingDomain);
>         }
>         return null;
