31a32
> import org.eclipse.emf.ecore.EStructuralFeature;
37,39d37
< import org.eclipse.jface.util.Assert;
< import org.eclipse.swt.widgets.Display;
< 
47a46
> import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
55d53
< import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
62a61,62
> import org.eclipse.jface.util.Assert;
> import org.eclipse.swt.widgets.Display;
586,587c586
< 			addListenerFilter(SEMANTIC_FILTER_ID, this, PresentationListener
< 					.getNotifier(semanticHost));
---
> 			addListenerFilter(SEMANTIC_FILTER_ID, this, semanticHost);
589c588,591
< 			addListenerFilter("NotationListener_Visibility", this, PresentationListener.getNotifier(((View)getHost().getModel()),NotationPackage.eINSTANCE.getView_Visible()));//$NON-NLS-1$
---
> 			addListenerFilter("NotationListener_Visibility", //$NON-NLS-1$
> 							  this,
> 							  (View)getHost().getModel(),
> 							  NotationPackage.eINSTANCE.getView_Visible());//$NON-NLS-1$
704a707,771
> 	 * Adds a listener filter by adding the given listener to a passed notifier.
> 	 * The supplied <tt>listener</tt> will not be added to there is already a listener
> 	 * registered against the supplied <tt>filterId</tt>
> 	 * 
> 	 * @param filterId A unique filter id (within the same editpart instance)
> 	 * @param listener A listener instance
> 	 * @param notifier An element notifer to add the listener to
> 	 * @return <tt>true</tt> if the listener was added, otherwise <tt>false</tt>
> 	 * @throws NullPointerException if either <tt>filterId</tt> or <tt>listner</tt> parameters are <tt>null</tt>.
> 	 */
> 	protected boolean addListenerFilter(
> 		String filterId,
> 		PropertyChangeListener listener,
> 		EObject element) {
> 		if ( filterId == null || listener == null ) {
> 			throw new NullPointerException();
> 		}
> 
> 		if (element != null) {
> 			if (_listenerFilters == null)
> 				_listenerFilters = new HashMap();
> 			
> 			if ( !_listenerFilters.containsKey(filterId)) {
> 				PresentationListener.getInstance().addPropertyChangeListener(element,listener);
> 				_listenerFilters.put(filterId, new Object[] { element, listener });
> 				return true;
> 			}
> 		}
> 		return false;
> 	}
> 	
> 	/**
> 	 * Adds a listener filter by adding the given listener to a passed notifier.
> 	 * The supplied <tt>listener</tt> will not be added to there is already a listener
> 	 * registered against the supplied <tt>filterId</tt>
> 	 * 
> 	 * @param filterId A unique filter id (within the same editpart instance)
> 	 * @param listener A listener instance
> 	 * @param notifier An element notifer to add the listener to
> 	 * @return <tt>true</tt> if the listener was added, otherwise <tt>false</tt>
> 	 * @throws NullPointerException if either <tt>filterId</tt> or <tt>listner</tt> parameters are <tt>null</tt>.
> 	 */
> 	protected boolean addListenerFilter(
> 		String filterId,
> 		PropertyChangeListener listener,
> 		EObject element,
> 		EStructuralFeature feature) {
> 		if ( filterId == null || listener == null ) {
> 			throw new NullPointerException();
> 		}
> 
> 		if (element != null) {
> 			if (_listenerFilters == null)
> 				_listenerFilters = new HashMap();
> 			
> 			if ( !_listenerFilters.containsKey(filterId)) {
> 				PresentationListener.getInstance().addPropertyChangeListener(element,feature,listener);
> 				_listenerFilters.put(filterId, new Object[] { element,feature, listener });
> 				return true;
> 			}
> 		}
> 		return false;
> 	}
> 	
> 	/**
713a781,785
> 		if (objects.length>2){
> 			PresentationListener.getInstance().removePropertyChangeListener(
> 				(EObject)objects[0],(EStructuralFeature)objects[1],(PropertyChangeListener) objects[2]);
> 		}else {
> 			if (objects[0] instanceof PropertyChangeNotifier){
715a788,793
> 			} else{
> 				PresentationListener.getInstance().removePropertyChangeListener(
> 					(EObject)objects[0],(PropertyChangeListener) objects[1]);
> 			}
> 		}
> 		
