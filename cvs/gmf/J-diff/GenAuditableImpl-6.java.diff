12a13,14
> import org.eclipse.emf.common.notify.Notification;
> import org.eclipse.emf.common.notify.NotificationChain;
14a17,18
> import org.eclipse.emf.ecore.InternalEObject;
> import org.eclipse.emf.ecore.impl.ENotificationImpl;
16a21
> import org.eclipse.gmf.codegen.gmfgen.GenAuditContext;
23a29,32
>  * The following features are implemented:
>  * <ul>
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditableImpl#getContextSelector <em>Context Selector</em>}</li>
>  * </ul>
29a39,48
> 	 * The cached value of the '{@link #getContextSelector() <em>Context Selector</em>}' reference.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @see #getContextSelector()
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected GenAuditContext contextSelector;
> 
> 	/**
50a70,129
> 	 * @generated
> 	 */
> 	public GenAuditContext getContextSelector() {
> 		if (contextSelector != null && contextSelector.eIsProxy()) {
> 			InternalEObject oldContextSelector = (InternalEObject)contextSelector;
> 			contextSelector = (GenAuditContext)eResolveProxy(oldContextSelector);
> 			if (contextSelector != oldContextSelector) {
> 				if (eNotificationRequired())
> 					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR, oldContextSelector, contextSelector));
> 			}
> 		}
> 		return contextSelector;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public GenAuditContext basicGetContextSelector() {
> 		return contextSelector;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public NotificationChain basicSetContextSelector(GenAuditContext newContextSelector, NotificationChain msgs) {
> 		GenAuditContext oldContextSelector = contextSelector;
> 		contextSelector = newContextSelector;
> 		if (eNotificationRequired()) {
> 			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR, oldContextSelector, newContextSelector);
> 			if (msgs == null) msgs = notification; else msgs.add(notification);
> 		}
> 		return msgs;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public void setContextSelector(GenAuditContext newContextSelector) {
> 		if (newContextSelector != contextSelector) {
> 			NotificationChain msgs = null;
> 			if (contextSelector != null)
> 				msgs = ((InternalEObject)contextSelector).eInverseRemove(this, GMFGenPackage.GEN_AUDIT_CONTEXT__RULE_TARGETS, GenAuditContext.class, msgs);
> 			if (newContextSelector != null)
> 				msgs = ((InternalEObject)newContextSelector).eInverseAdd(this, GMFGenPackage.GEN_AUDIT_CONTEXT__RULE_TARGETS, GenAuditContext.class, msgs);
> 			msgs = basicSetContextSelector(newContextSelector, msgs);
> 			if (msgs != null) msgs.dispatch();
> 		}
> 		else if (eNotificationRequired())
> 			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR, newContextSelector, newContextSelector));
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
58c137
< 	 * @generated NOT
---
> 	 * @generated
60,62c139,145
< 	public GenClass getTargetClass() {
< 		if(getContext() instanceof GenClass) {
< 			return (GenClass)getContext(); 
---
> 	@Override
> 	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
> 		switch (featureID) {
> 			case GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR:
> 				if (contextSelector != null)
> 					msgs = ((InternalEObject)contextSelector).eInverseRemove(this, GMFGenPackage.GEN_AUDIT_CONTEXT__RULE_TARGETS, GenAuditContext.class, msgs);
> 				return basicSetContextSelector((GenAuditContext)otherEnd, msgs);
64c147,220
< 		return null;
---
> 		return super.eInverseAdd(otherEnd, featureID, msgs);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	@Override
> 	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
> 		switch (featureID) {
> 			case GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR:
> 				return basicSetContextSelector(null, msgs);
> 		}
> 		return super.eInverseRemove(otherEnd, featureID, msgs);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	@Override
> 	public Object eGet(int featureID, boolean resolve, boolean coreType) {
> 		switch (featureID) {
> 			case GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR:
> 				if (resolve) return getContextSelector();
> 				return basicGetContextSelector();
> 		}
> 		return super.eGet(featureID, resolve, coreType);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	@Override
> 	public void eSet(int featureID, Object newValue) {
> 		switch (featureID) {
> 			case GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR:
> 				setContextSelector((GenAuditContext)newValue);
> 				return;
> 		}
> 		super.eSet(featureID, newValue);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	@Override
> 	public void eUnset(int featureID) {
> 		switch (featureID) {
> 			case GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR:
> 				setContextSelector((GenAuditContext)null);
> 				return;
> 		}
> 		super.eUnset(featureID);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	@Override
> 	public boolean eIsSet(int featureID) {
> 		switch (featureID) {
> 			case GMFGenPackage.GEN_AUDITABLE__CONTEXT_SELECTOR:
> 				return contextSelector != null;
> 		}
> 		return super.eIsSet(featureID);
72,73c228,232
< 	public String getClientContextID() {
< 		return "DefaultCtx"; //$NON-NLS-1$ 
---
> 	public GenClass getTargetClass() {
> 		if(getContext() instanceof GenClass) {
> 			return (GenClass)getContext(); 
> 		}
> 		return null;
