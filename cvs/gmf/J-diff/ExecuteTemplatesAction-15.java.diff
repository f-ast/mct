23d22
< import org.eclipse.emf.ecore.resource.Resource;
30a30
> import org.eclipse.gmf.internal.common.migrate.ModelLoadHelper;
67c67,71
< 			loadGenModel();
---
> 			IStatus loadStatus = loadGenModel();
> 			if(!canProcessGMFGenModel(loadStatus, action)) {
> 				return;
> 			}
> 			
101a106,132
> 	 * Checks if loaded gmfgen model can be processed further.<p>
> 	 * Note: Must be called after {@link #loadGenModel()}.
> 	 * @param loadStatus the result status of loading the gmfgen model
> 	 * @param action the action in execution
> 	 * @return <code>true</code> if gmfgen model is available with OK status or in case of load problems,
> 	 * 		user decided to proceed, <code>false</code> otherwise.
> 	 */
> 	private boolean canProcessGMFGenModel(IStatus loadStatus, IAction action) {
> 		if(!loadStatus.isOK()) {
> 			String[] buttons = new String[] {IDialogConstants.PROCEED_LABEL, IDialogConstants.CANCEL_LABEL };
> 			int[] buttonIDs = new int[] {IDialogConstants.PROCEED_ID, IDialogConstants.CANCEL_ID };
> 			if(myGenModel == null) {
> 				// we cannot proceed further as there is no gmfgen, allow only cancel
> 				buttons = new String[] { buttons[1] };
> 				buttonIDs = new int[] { buttonIDs[1] };
> 			}
> 			ErrorDialogEx dlg = new ErrorDialogEx(getShell(), action.getText(), 
> 					CodeGenUIPlugin.getBundleString("generatecode.badsrc"), //$NON-NLS-1$ 
> 					loadStatus, buttons, buttonIDs, 0);			
> 			if (dlg.open() == IDialogConstants.CANCEL_ID) {
> 				return false;
> 			}
> 		}
> 		return true;
> 	}	
> 	
> 	/**
142c173
< 	private void loadGenModel() {
---
> 	private IStatus loadGenModel() {
145,146c176,177
< 		Resource srcRes = srcResSet.getResource(selected, true);
< 		Object root = srcRes.getContents().get(0);
---
> 		ModelLoadHelper loadHelper = new ModelLoadHelper(srcResSet, selected);
> 		Object root = loadHelper.getContentsRoot();
154a186
> 		return loadHelper.getStatus();
