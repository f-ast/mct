32a33
> import org.eclipse.gef.commands.CompoundCommand;
54a56
> import org.eclipse.gmf.runtime.diagram.ui.internal.commands.SnapCommand;
55a58
> import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;
59a63,64
> import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;
> import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;
74a80,82
> import org.eclipse.jface.preference.IPreferenceStore;
> import org.eclipse.ui.IWorkbenchPart;
> import org.eclipse.ui.PlatformUI;
278a287
> 			request.setPartsToArrange(editparts);
308a318,333
> 		boolean isSnap = true;
> 		
> 		IWorkbenchPart activePart = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
> 		if (activePart != null){
> 		     IDiagramWorkbenchPart editor = (IDiagramWorkbenchPart) activePart;
> 		     if (editor != null){
> 		    	   DiagramGraphicalViewer viewer = (DiagramGraphicalViewer) editor.getDiagramGraphicalViewer();
> 		           IPreferenceStore preferenceStore = viewer.getWorkspaceViewerPreferenceStore();	
> 		           isSnap = preferenceStore.getBoolean(WorkspaceViewerProperties.SNAPTOGRID);
> 		     }
> 		}        
>      
>         //the snapCommand still invokes proper calculations if snap to grid is turned off, this additional check
>         //is intended to make the code more appear more logical		
> 				
> 		CompoundCommand cmd = new CompoundCommand();		
310c335
< 			return ((IInternalLayoutRunnable)layoutRun).getCommand();
---
> 			cmd.add(((IInternalLayoutRunnable) layoutRun).getCommand());		
315,316c340
<             
< 			return new ICommandProxy(new AbstractTransactionalCommand(editingDomain, "", null) {//$NON-NLS-1$
---
>             cmd.add(new ICommandProxy(new AbstractTransactionalCommand(editingDomain, "", null) {//$NON-NLS-1$
323c347,350
< 			});
---
> 			}));     
> 		}		
> 		if (isSnap) {
> 			cmd.add(getSnapCommand(request));
324a352
> 		return cmd;
435a464,481
> 	private Command getSnapCommand(Request request){
> 			
> 		List editparts = null;
> 		if (request instanceof GroupRequest){			
> 			editparts =  ((GroupRequest)request).getEditParts();
> 		}	
> 		else if (request instanceof ArrangeRequest){
> 			editparts = ((ArrangeRequest)request).getPartsToArrange();
> 		}
> 		
> 		TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost())
> 				.getEditingDomain();
> 		if (editparts != null){
> 			return new ICommandProxy(new SnapCommand(editingDomain, editparts));
> 		}		
> 		return null;
> 	}
> 	
444a491,494
> 		if (RequestConstants.REQ_SNAP_TO_GRID.equals(request.getType())){
> 			return getSnapCommand(request);
> 		}
> 		
511a562
> 				|| RequestConstants.REQ_SNAP_TO_GRID.equals(request.getType())
