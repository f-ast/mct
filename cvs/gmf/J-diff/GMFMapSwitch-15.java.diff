13,15d12
< import org.eclipse.gmf.mappings.*;
< 
< import org.eclipse.gmf.mappings.AbstractNodeMapping;
20c17
< import org.eclipse.gmf.mappings.ChildNodeMapping;
---
> import org.eclipse.gmf.mappings.ChildReference;
26a24
> import org.eclipse.gmf.mappings.LabelMapping;
31a30
> import org.eclipse.gmf.mappings.NeedsContainment;
32a32
> import org.eclipse.gmf.mappings.NodeReference;
33a34
> import org.eclipse.gmf.mappings.TopNodeReference;
122,128c123,148
< 			case GMFMapPackage.ABSTRACT_NODE_MAPPING: {
< 				AbstractNodeMapping abstractNodeMapping = (AbstractNodeMapping)theEObject;
< 				Object result = caseAbstractNodeMapping(abstractNodeMapping);
< 				if (result == null) result = caseMappingEntry(abstractNodeMapping);
< 				if (result == null) result = caseMenuOwner(abstractNodeMapping);
< 				if (result == null) result = caseToolOwner(abstractNodeMapping);
< 				if (result == null) result = caseAppearanceSteward(abstractNodeMapping);
---
> 			case GMFMapPackage.NEEDS_CONTAINMENT: {
> 				NeedsContainment needsContainment = (NeedsContainment)theEObject;
> 				Object result = caseNeedsContainment(needsContainment);
> 				if (result == null) result = defaultCase(theEObject);
> 				return result;
> 			}
> 			case GMFMapPackage.NODE_REFERENCE: {
> 				NodeReference nodeReference = (NodeReference)theEObject;
> 				Object result = caseNodeReference(nodeReference);
> 				if (result == null) result = caseNeedsContainment(nodeReference);
> 				if (result == null) result = defaultCase(theEObject);
> 				return result;
> 			}
> 			case GMFMapPackage.CHILD_REFERENCE: {
> 				ChildReference childReference = (ChildReference)theEObject;
> 				Object result = caseChildReference(childReference);
> 				if (result == null) result = caseNodeReference(childReference);
> 				if (result == null) result = caseNeedsContainment(childReference);
> 				if (result == null) result = defaultCase(theEObject);
> 				return result;
> 			}
> 			case GMFMapPackage.TOP_NODE_REFERENCE: {
> 				TopNodeReference topNodeReference = (TopNodeReference)theEObject;
> 				Object result = caseTopNodeReference(topNodeReference);
> 				if (result == null) result = caseNodeReference(topNodeReference);
> 				if (result == null) result = caseNeedsContainment(topNodeReference);
135d154
< 				if (result == null) result = caseAbstractNodeMapping(nodeMapping);
143,153d161
< 			case GMFMapPackage.CHILD_NODE_MAPPING: {
< 				ChildNodeMapping childNodeMapping = (ChildNodeMapping)theEObject;
< 				Object result = caseChildNodeMapping(childNodeMapping);
< 				if (result == null) result = caseAbstractNodeMapping(childNodeMapping);
< 				if (result == null) result = caseMappingEntry(childNodeMapping);
< 				if (result == null) result = caseMenuOwner(childNodeMapping);
< 				if (result == null) result = caseToolOwner(childNodeMapping);
< 				if (result == null) result = caseAppearanceSteward(childNodeMapping);
< 				if (result == null) result = defaultCase(theEObject);
< 				return result;
< 			}
163a172
> 				if (result == null) result = caseNeedsContainment(linkMapping);
256c265
< 	 * Returns the result of interpretting the object as an instance of '<em>Abstract Node Mapping</em>'.
---
> 	 * Returns the result of interpretting the object as an instance of '<em>Mapping Entry</em>'.
262c271
< 	 * @return the result of interpretting the object as an instance of '<em>Abstract Node Mapping</em>'.
---
> 	 * @return the result of interpretting the object as an instance of '<em>Mapping Entry</em>'.
266c275
< 	public Object caseAbstractNodeMapping(AbstractNodeMapping object) {
---
> 	public Object caseMappingEntry(MappingEntry object) {
271c280
< 	 * Returns the result of interpretting the object as an instance of '<em>Mapping Entry</em>'.
---
> 	 * Returns the result of interpretting the object as an instance of '<em>Needs Containment</em>'.
277c286
< 	 * @return the result of interpretting the object as an instance of '<em>Mapping Entry</em>'.
---
> 	 * @return the result of interpretting the object as an instance of '<em>Needs Containment</em>'.
281c290
< 	public Object caseMappingEntry(MappingEntry object) {
---
> 	public Object caseNeedsContainment(NeedsContainment object) {
286c295
< 	 * Returns the result of interpretting the object as an instance of '<em>Node Mapping</em>'.
---
> 	 * Returns the result of interpretting the object as an instance of '<em>Node Reference</em>'.
292c301
< 	 * @return the result of interpretting the object as an instance of '<em>Node Mapping</em>'.
---
> 	 * @return the result of interpretting the object as an instance of '<em>Node Reference</em>'.
296c305
< 	public Object caseNodeMapping(NodeMapping object) {
---
> 	public Object caseNodeReference(NodeReference object) {
301c310
< 	 * Returns the result of interpretting the object as an instance of '<em>Child Node Mapping</em>'.
---
> 	 * Returns the result of interpretting the object as an instance of '<em>Child Reference</em>'.
307c316
< 	 * @return the result of interpretting the object as an instance of '<em>Child Node Mapping</em>'.
---
> 	 * @return the result of interpretting the object as an instance of '<em>Child Reference</em>'.
311c320,350
< 	public Object caseChildNodeMapping(ChildNodeMapping object) {
---
> 	public Object caseChildReference(ChildReference object) {
> 		return null;
> 	}
> 
> 	/**
> 	 * Returns the result of interpretting the object as an instance of '<em>Top Node Reference</em>'.
> 	 * <!-- begin-user-doc -->
> 	 * This implementation returns null;
> 	 * returning a non-null result will terminate the switch.
> 	 * <!-- end-user-doc -->
> 	 * @param object the target of the switch.
> 	 * @return the result of interpretting the object as an instance of '<em>Top Node Reference</em>'.
> 	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
> 	 * @generated
> 	 */
> 	public Object caseTopNodeReference(TopNodeReference object) {
> 		return null;
> 	}
> 
> 	/**
> 	 * Returns the result of interpretting the object as an instance of '<em>Node Mapping</em>'.
> 	 * <!-- begin-user-doc -->
> 	 * This implementation returns null;
> 	 * returning a non-null result will terminate the switch.
> 	 * <!-- end-user-doc -->
> 	 * @param object the target of the switch.
> 	 * @return the result of interpretting the object as an instance of '<em>Node Mapping</em>'.
> 	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
> 	 * @generated
> 	 */
> 	public Object caseNodeMapping(NodeMapping object) {
