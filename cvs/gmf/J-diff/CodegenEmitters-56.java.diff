13a14
> import java.lang.reflect.InvocationTargetException;
14a16,18
> import java.util.ArrayList;
> import java.util.Collections;
> import java.util.List;
15a20
> import org.eclipse.core.runtime.IProgressMonitor;
48d52
< import org.eclipse.gmf.codegen.templates.editor.PaletteFactoryGenerator;
111a116
> import org.eclipse.gmf.common.codegen.ImportAssistant;
124a130,137
> import org.eclipse.gmf.internal.xpand.BufferOutput;
> import org.eclipse.gmf.internal.xpand.ResourceManager;
> import org.eclipse.gmf.internal.xpand.XpandFacade;
> import org.eclipse.gmf.internal.xpand.expression.Variable;
> import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;
> import org.eclipse.gmf.internal.xpand.model.XpandExecutionContextImpl;
> import org.eclipse.gmf.internal.xpand.util.BundleResourceManager;
> import org.eclipse.gmf.internal.xpand.util.ContextFactory;
136a150
> 	private ResourceManager myResourceManager;
147a162
> 		final URL baseURL = getTemplatesBundle().getEntry("/templates/"); //$NON-NLS-1$
151c166
< 				getTemplatesBundle().getEntry("/templates/").toString() //$NON-NLS-1$
---
> 				baseURL.toString()
154a170,171
> 
> 		myResourceManager = new BundleResourceManager(baseURL);
223d239
< 		put(tr, "/editor/PaletteFactory.javajet", PaletteFactoryGenerator.class);
523c539
< 		return retrieve(PaletteFactoryGenerator.class);
---
> 		return new XpandTextEmitter(myResourceManager, "xpt::editor::palette::PaletteFactory::Factory");
700a717,758
> 
> 	private static class XpandTextEmitter implements TextEmitter {
> 		private final ResourceManager myResourceManager;
> 		private final String myTemplateFQN;
> 
> 		public XpandTextEmitter(ResourceManager manager, String templateFQN) {
> 			myResourceManager = manager;
> 			myTemplateFQN = templateFQN;
> 		}
> 
> 		public String generate(IProgressMonitor monitor, Object[] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
> 			StringBuilder result = new StringBuilder();
> 			new XpandFacade(createContext(result)).evaluate(myTemplateFQN, extractTarget(arguments), extractArguments(arguments));
> 			return result.toString();
> 		}
> 
> 		protected Object extractTarget(Object[] arguments) {
> 			assert arguments != null && arguments.length > 0;
> 			return arguments[0];
> 		}
> 
> 		protected Object[] extractArguments(Object[] arguments) {
> 			assert arguments != null && arguments.length > 0;
> 			ArrayList<Object> res = new ArrayList<Object>(arguments.length);
> 			// strip first one off, assume it's target
> 			for (int i = 1; i < arguments.length; i++) {
> 				if (false == arguments[i] instanceof ImportAssistant) {
> 					// strip assistant off
> 					res.add(arguments[i]);
> 				}
> 			}
> 			return res.toArray();
> 		}
> 
> 		private XpandExecutionContext createContext(StringBuilder result) {
> 			final BufferOutput output = new BufferOutput(result);
> 			final List<Variable> globals = Collections.emptyList();
> 			final XpandExecutionContext xpandContext = ContextFactory.createXpandContext(myResourceManager, output, globals);
> 			((XpandExecutionContextImpl) xpandContext).setContextClassLoader(getClass().getClassLoader());
> 			return xpandContext;
> 		}
> 	}
