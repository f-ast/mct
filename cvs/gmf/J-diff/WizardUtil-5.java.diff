15a16,18
> import org.eclipse.core.resources.ResourcesPlugin;
> import org.eclipse.core.runtime.Path;
> import org.eclipse.emf.common.util.URI;
16a20
> import org.eclipse.emf.ecore.EObject;
17a22,23
> import org.eclipse.gmf.gmfgraph.provider.GMFGraphEditPlugin;
> import org.eclipse.jface.dialogs.MessageDialog;
19a26
> import org.eclipse.jface.viewers.StructuredSelection;
24a32,33
> import org.eclipse.ui.PlatformUI;
> import org.eclipse.ui.internal.UIPlugin;
62a72,81
> 	public static String getCapName(EObject element) {
> 		if (element instanceof EClass) {
> 			return WizardUtil.getCapName((EClass) element);
> 		} else if (element instanceof EStructuralFeature) {
> 			return WizardUtil.getCapName((EStructuralFeature) element);
> 		} else {
> 			return null;
> 		}
> 	}
> 
71a91,138
> 	public static void openEditor(URI uri) {
> 		IFile modelFile = null;
> 		String fileName = uri.toFileString();
> 		if (fileName != null) {
> 			modelFile = ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(fileName));
> 		}
> 		if (uri.toString().startsWith("platform:/resource")) {
> 			String path = uri.toString().substring("platform:/resources".length());
> 			IResource workspaceResource = ResourcesPlugin.getWorkspace().getRoot().findMember(new Path(path));
> 			if (workspaceResource instanceof IFile) {
> 				modelFile = (IFile) workspaceResource;
> 			}
> 		}
> 		if (modelFile != null) {
> 			openEditor(modelFile);
> 		}
> 	}
> 
> 	public static boolean openEditor(IFile modelFile) {
> 		IWorkbench workbench = PlatformUI.getWorkbench();
> 
> 		// Select the new file resource in the current view.
> 		//
> 		IWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow();
> 		IWorkbenchPage page = workbenchWindow.getActivePage();
> 		final IWorkbenchPart activePart = page.getActivePart();
> 		if (activePart instanceof ISetSelectionTarget) {
> 			final ISelection targetSelection = new StructuredSelection(modelFile);
> 			workbenchWindow.getShell().getDisplay().asyncExec(new Runnable() {
> 
> 				public void run() {
> 					((ISetSelectionTarget) activePart).selectReveal(targetSelection);
> 				}
> 			});
> 		}
> 
> 		// Open an editor on the new file.
> 		//
> 		try {
> 			page.openEditor(new FileEditorInput(modelFile), workbench.getEditorRegistry().getDefaultEditor(modelFile.getFullPath().toString()).getId());
> 		} catch (PartInitException exception) {
> 			MessageDialog.openError(workbenchWindow.getShell(), "Unable to open editor for " + modelFile, exception.getMessage());
> 			return false;
> 		}
> 
> 		return true;
> 	}
> 
