11a12
> import org.eclipse.draw2d.FigureUtilities;
12a14
> import org.eclipse.draw2d.geometry.Rectangle;
15a18,24
> import org.eclipse.gmf.runtime.common.ui.contentassist.ContentAssistantHelper;
> import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;
> import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;
> import org.eclipse.gmf.runtime.draw2d.ui.internal.l10n.Draw2dResourceManager;
> import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
> import org.eclipse.gmf.runtime.gef.ui.internal.parts.TextCellEditorEx;
> import org.eclipse.gmf.runtime.gef.ui.internal.parts.WrapTextCellEditor;
32,38d40
< import org.eclipse.gmf.runtime.common.ui.contentassist.ContentAssistantHelper;
< import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;
< import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;
< import org.eclipse.gmf.runtime.draw2d.ui.internal.l10n.Draw2dResourceManager;
< import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
< import org.eclipse.gmf.runtime.gef.ui.parts.TextCellEditorEx;
< 
64a67,104
> 	
> 	/**
> 	 * the text cell editor locator
> 	 * @author mmostafa
> 	 *
> 	 */
> 	static private class TextCellEditorLocator implements CellEditorLocator {
> 
> 		private WrapLabel wrapLabel;
> 		
> 		public TextCellEditorLocator(WrapLabel wrapLabel) {
> 			super();
> 			this.wrapLabel = wrapLabel;
> 		}
> 
> 		
> 		public WrapLabel getWrapLabel() {
> 			return wrapLabel;
> 		}
> 
> 		public void relocate(CellEditor celleditor) {
> 			Text text = (Text) celleditor.getControl();
> 			Rectangle rect = getWrapLabel().getTextBounds().getCopy();
> 			getWrapLabel().translateToAbsolute(rect);
> 			
> 			if (getWrapLabel().isTextWrapped() && getWrapLabel().getText().length() > 0)
> 				rect.setSize(new Dimension(text.computeSize(rect.width, SWT.DEFAULT)));
> 			else {
> 				int avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();
> 				rect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr*2, 0));
> 			}
> 
> 			if (!rect.equals(new Rectangle(text.getBounds())))
> 				text.setBounds(rect.x, rect.y, rect.width, rect.height);
> 		}
> 
> 	}
> 	
66a107,117
> 	 * 
> 	 * @param source <code>GraphicalEditPart</code> to support direct edit of.  The figure of
> 	 * the <code>source</code> edit part must be of type <code>WrapLabel</code>.
> 	 */
> 	public TextDirectEditManager(GraphicalEditPart source) {
> 
> 		super(source, getTextCellEditorClass(source),
> 				new TextCellEditorLocator((WrapLabel)source.getFigure()));
> 	}
> 
> 	/**
71,73c122
< 	public TextDirectEditManager(GraphicalEditPart source, Class editorType,
< 			CellEditorLocator locator) {
< 
---
> 	public TextDirectEditManager(GraphicalEditPart source, Class editorType, CellEditorLocator locator) {
76a126,136
> 	private static Class getTextCellEditorClass(GraphicalEditPart source){
> 		assert source.getFigure() instanceof WrapLabel;
> 		
> 		WrapLabel wrapLabel = (WrapLabel)source.getFigure();
> 		if (wrapLabel.isTextWrapped())
> 			return WrapTextCellEditor.class;
> 		
> 		return TextCellEditorEx.class;
> 	}
> 	
> 
