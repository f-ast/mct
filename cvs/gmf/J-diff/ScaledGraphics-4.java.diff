24a25
> import org.eclipse.gmf.runtime.draw2d.ui.internal.l10n.Draw2dResourceManager;
34,35d34
< import org.eclipse.gmf.runtime.draw2d.ui.internal.l10n.Draw2dResourceManager;
< 
44a44
>  * See also bugzilla #111454
46a47,49
> /**
>  * A Graphics object able to scale all operations based on the current scale factor.
>  */
48c51,82
< 	extends Graphics {
---
> 	extends Graphics
> {
> 
> private static class FontHeightCache {
> 	Font font;
> 	int height;
> }
> 
> static class FontKey {
> 	Font font;
> 	int height;
> 	protected FontKey() {/* empty constructor */ }
> 	protected FontKey(Font font, int height) {
> 		this.font = font;
> 		this.height = height;
> 	}
> 	
> 	public boolean equals(Object obj) {
> 		return (((FontKey)obj).font.equals(font) 
> 				&& ((FontKey)obj).height == height);
> 	}
> 
> 	public int hashCode() {
> 		return font.hashCode() ^ height;
> 	}
> 
> 	protected void setValues(Font font, int height) {
> 		this.font = font;
> 		this.height = height;
> 	}
> }
> 
53d86
< 		private double zoom;
57a91
> 	private double zoom; 
62,64c96
< 		protected State() {
< 			// Empty block
< 		}
---
> 	protected State() {/* empty constructor */}
102,143c134,135
< 	static class FontKey {
< 		Font font;
< 		int height;
< 		
< 		/**
< 		 * Default constructor
< 		 */
< 		protected FontKey() {
< 			// Empty block
< 		}
< 		
< 		/**
< 		 * Constructor
< 		 * 
< 		 * @param font the <code>Font</code> to be stored in the key
< 		 * @param height the height of the font
< 		 */
< 		protected FontKey(Font font, int height) {
< 			this.font = font;
< 			this.height = height;
< 		}
< 		
< 		public boolean equals(Object obj) {
< 			return (((FontKey)obj).font.equals(font) 
< 					&& ((FontKey)obj).height == height);
< 		}
< 
< 		public int hashCode() {
< 			return font.hashCode() ^ height;
< 		}
< 
< 		/**
< 		 * Sets the values that the key utilizes to calculate the hash value.
< 		 * 
< 		 * @param font the <code>Font</code> to be stored in the key
< 		 * @param height the height of the font
< 		 */
< 		protected void setValues(Font font, int height) {
< 			this.font = font;
< 			this.height = height;
< 		}
< 	}
---
> private static int[][] intArrayCache = new int[8][];
> private final Rectangle tempRECT = new Rectangle();
145,147c137,139
< 	private static class FontHeightCache {
< 		Font font;
< 		int height;
---
> static {
> 	for (int i = 0; i < intArrayCache.length; i++)
> 		intArrayCache[i] = new int[i + 1];
150c142,144
< 	private static final Rectangle TEMP = new Rectangle();
---
> private boolean allowText = true;
> //private static final Point PT = new Point();
> //private Map fontCache = new HashMap();
152,154c146,148
< 
< 	private FontHeightCache localCache = new FontHeightCache();
< 	private FontHeightCache targetCache = new FontHeightCache();
---
> private FontKey fontKey = new FontKey();
> private double fractionalX;
> private double fractionalY;
155a150
> private FontHeightCache localCache = new FontHeightCache();
158,160d152
< 	private double fractionalX;
< 	private double fractionalY;
< 	double zoom = 1.0;
163,165c155
< 	private FontKey fontKey = new FontKey();
< 	private boolean allowText = true;
< 	private static int[][] intArrayCache = new int[8][];
---
> private FontHeightCache targetCache = new FontHeightCache();
167,170c157
< 	static {
< 		for (int i = 0; i < intArrayCache.length; i++)
< 			intArrayCache[i] = new int[i + 1];
< 	}
---
> double zoom = 1.0;
186a174,177
> Font createFont(FontData data) {
> 	return new Font(Display.getCurrent(), data);
> }
> 
205,217d195
< 	/** @see Graphics#fillArc(int, int, int, int, int, int) */
< 	public void fillArc(int x, int y, int w, int h, int offset, int sweep) {
< 		Rectangle z = zoomFillRect(x, y, w, h);
< 		if (z.isEmpty() || sweep == 0)
< 			return;
< 		graphics.fillArc(z, offset, sweep);
< 	}
< 
< 	/** @see Graphics#fillGradient(int, int, int, int, boolean) */
< 	public void fillGradient(int x, int y, int w, int h, boolean vertical) {
< 		graphics.fillGradient(zoomFillRect(x, y, w, h), vertical);
< 	}
< 
257,259c235,238
< 	/** @see Graphics#fillOval(int, int, int, int) */
< 	public void fillOval(int x, int y, int w, int h) {
< 		graphics.fillOval(zoomFillRect(x, y, w, h));
---
> /** @see Graphics#drawPoint(int, int) */
> public void drawPoint(int x, int y) {
> 	graphics.drawPoint((int)Math.floor(x * zoom + fractionalX),
> 			(int)Math.floor(y * zoom + fractionalY));
274,290d252
< 	/** @see Graphics#drawPoint(int, int) */
< 	public void drawPoint(int x, int y) {
< 		graphics.drawPoint((int)Math.floor(x * zoom + fractionalX),(int)Math.floor(y * zoom + fractionalY));
< 	}
< 
< 	/**
< 	 * @see Graphics#fillPolygon(int[])
< 	 */
< 	public void fillPolygon(int[] points) {
< 		graphics.fillPolygon(zoomPointList(points));
< 	}
< 
< 	/** @see Graphics#fillPolygon(PointList) */
< 	public void fillPolygon(PointList points) {
< 		graphics.fillPolygon(zoomPointList(points.toIntArray()));
< 	}
< 
308,312d269
< 	/** @see Graphics#fillRectangle(int, int, int, int) */
< 	public void fillRectangle(int x, int y, int w, int h) {
< 		graphics.fillRectangle(zoomFillRect(x, y, w, h));
< 	}
< 
320,326d276
< 	/** @see Graphics#fillRoundRectangle(Rectangle, int, int) */
< 	public void fillRoundRectangle(Rectangle r, int arcWidth, int arcHeight) {
< 		graphics.fillRoundRectangle(zoomFillRect(r.x, r.y, r.width, r.height),
< 			(int)(arcWidth * zoom),
< 			(int)(arcHeight * zoom));
< 	}
< 
333,338d282
< 	/** @see Graphics#fillString(String, int, int) */
< 	public void fillString(String s, int x, int y) {
< 		if (allowText)
< 			graphics.fillString(s, zoomTextPoint(x, y));
< 	}
< 
346c290
< 	 * @see org.eclipse.draw2d.Graphics#drawText(java.lang.String, int, int, int)
---
>  * @see Graphics#drawText(String, int, int, int)
365a310,357
> /** @see Graphics#fillArc(int, int, int, int, int, int) */
> public void fillArc(int x, int y, int w, int h, int offset, int sweep) {
> 	Rectangle z = zoomFillRect(x, y, w, h);
> 	if (z.isEmpty() || sweep == 0)
> 		return;
> 	graphics.fillArc(z, offset, sweep);
> }
> 
> /** @see Graphics#fillGradient(int, int, int, int, boolean) */
> public void fillGradient(int x, int y, int w, int h, boolean vertical) {
> 	graphics.fillGradient(zoomFillRect(x, y, w, h), vertical);
> }
> 
> /** @see Graphics#fillOval(int, int, int, int) */
> public void fillOval(int x, int y, int w, int h) {
> 	graphics.fillOval(zoomFillRect(x, y, w, h));
> }
> 
> /**
>  * @see Graphics#fillPolygon(int[])
>  */
> public void fillPolygon(int[] points) {
> 	graphics.fillPolygon(zoomPointList(points));
> }
> 
> /** @see Graphics#fillPolygon(PointList) */
> public void fillPolygon(PointList points) {
> 	graphics.fillPolygon(zoomPointList(points.toIntArray()));
> }
> 
> /** @see Graphics#fillRectangle(int, int, int, int) */
> public void fillRectangle(int x, int y, int w, int h) {
> 	graphics.fillRectangle(zoomFillRect(x, y, w, h));
> }
> 
> /** @see Graphics#fillRoundRectangle(Rectangle, int, int) */
> public void fillRoundRectangle(Rectangle r, int arcWidth, int arcHeight) {
> 	graphics.fillRoundRectangle(zoomFillRect(r.x, r.y, r.width, r.height),
> 		(int)(arcWidth * zoom),
> 		(int)(arcHeight * zoom));
> }
> 
> /** @see Graphics#fillString(String, int, int) */
> public void fillString(String s, int x, int y) {
> 	if (allowText)
> 		graphics.fillString(s, zoomTextPoint(x, y));
> }
> 
371a364,384
> /**
>  * @see Graphics#getAbsoluteScale()
>  */
> public double getAbsoluteScale() {
> 	return zoom * graphics.getAbsoluteScale();
> }
> 
> /**
>  * @see Graphics#getAlpha()
>  */
> public int getAlpha() {
> 	return graphics.getAlpha();
> }
> 
> /**
>  * @see Graphics#getAntialias()
>  */
> public int getAntialias() {
> 	return graphics.getAntialias();
> }
> 
376a390,404
> Font getCachedFont(FontKey key) {
> 	FontData data = key.font.getFontData()[0];		
> 	data.setHeight(key.height);
> 	return Draw2dResourceManager.getInstance().getFont(Display.getCurrent(), data);
> }
> 
> FontData getCachedFontData(Font f) {
> 	FontData data = (FontData)fontDataCache.get(f);
> 	if (data != null)
> 		return data;
> 	data = getLocalFont().getFontData()[0];
> 	fontDataCache.put(f, data);
> 	return data;
> }
> 
394a423,429
> /**
>  * @see Graphics#getFillRule()
>  */
> public int getFillRule() {
> 	return graphics.getFillRule();
> }
> 
409a445,465
> /**
>  * @see Graphics#getInterpolation()
>  */
> public int getInterpolation() {
> 	return graphics.getInterpolation();
> }
> 
> /**
>  * @see Graphics#getLineCap()
>  */
> public int getLineCap() {
> 	return graphics.getLineCap();
> }
> 
> /**
>  * @see Graphics#getLineJoin()
>  */
> public int getLineJoin() {
> 	return graphics.getLineJoin();
> }
> 
429c485
< 	 * @see org.eclipse.draw2d.Graphics#getAbsoluteScale()
---
>  * @see Graphics#getTextAntialias()
431,432c487,488
< 	public double getAbsoluteScale() {
< 		return zoom * graphics.getAbsoluteScale();
---
> public int getTextAntialias() {
> 	return graphics.getTextAntialias();
481,501c537,541
< 	void setScale(double value) {
< 		if (zoom == value)
< 			return;
< 		this.zoom = value;
< 		graphics.setFont(zoomFont(getLocalFont()));
< 		graphics.setLineWidth(zoomLineWidth(localLineWidth));
< 	}
< 
< 	Font getCachedFont(FontKey key) {
< 		FontData data = key.font.getFontData()[0];		
< 		data.setHeight(key.height);
< 		return Draw2dResourceManager.getInstance().getFont(Display.getCurrent(), data);
< 	}
< 	
< 	FontData getCachedFontData(Font f) {
< 		FontData data = (FontData)fontDataCache.get(f);
< 		if (data != null)
< 			return data;
< 		data = getLocalFont().getFontData()[0];
< 		fontDataCache.put(f, data);
< 		return data;
---
> /**
>  * @see Graphics#setAlpha(int)
>  */
> public void setAlpha(int alpha) {
> 	graphics.setAlpha(alpha);
504,505c544,548
< 	Font createFont(FontData data) {
< 		return new Font(Display.getCurrent(), data);
---
> /**
>  * @see Graphics#setAntialias(int)
>  */
> public void setAntialias(int value) {
> 	graphics.setAntialias(value);
517a561,567
> /**
>  * @see Graphics#setFillRule(int)
>  */
> public void setFillRule(int rule) {
> 	graphics.setFillRule(rule);
> }
> 
527a578,605
> /**
>  * @see org.eclipse.draw2d.Graphics#setInterpolation(int)
>  */
> public void setInterpolation(int interpolation) {
> 	graphics.setInterpolation(interpolation);
> }
> 
> /**
>  * @see Graphics#setLineCap(int)
>  */
> public void setLineCap(int cap) {
> 	graphics.setLineCap(cap);
> }
> 
> /**
>  * @see Graphics#setLineDash(int[])
>  */
> public void setLineDash(int[] dash) {
> 	graphics.setLineDash(dash);
> }
> 
> /**
>  * @see Graphics#setLineJoin(int)
>  */
> public void setLineJoin(int join) {
> 	graphics.setLineJoin(join);
> }
> 
547a626,640
> void setScale(double value) {
> 	if (zoom == value)
> 		return;
> 	this.zoom = value;
> 	graphics.setFont(zoomFont(getLocalFont()));
> 	graphics.setLineWidth(zoomLineWidth(localLineWidth));
> }
> 
> /**
>  * @see Graphics#setTextAntialias(int)
>  */
> public void setTextAntialias(int value) {
> 	graphics.setTextAntialias(value);
> }	
> 
563a657,729
> private Rectangle zoomClipRect(Rectangle r) {
> 	tempRECT.x = (int)(Math.floor(r.x * zoom + fractionalX));
> 	tempRECT.y = (int)(Math.floor(r.y * zoom + fractionalY));
> 	tempRECT.width = (int)(Math.ceil(((r.x + r.width) * zoom + fractionalX))) - tempRECT.x;
> 	tempRECT.height = (int)(Math.ceil(((r.y + r.height) * zoom + fractionalY))) - tempRECT.y;
> 	return tempRECT;
> }
> 
> private Rectangle zoomFillRect(int x, int y, int w, int h) {
> 	tempRECT.x = (int)(Math.floor((x * zoom + fractionalX)));
> 	tempRECT.y = (int)(Math.floor((y * zoom + fractionalY)));
> 	tempRECT.width = (int)(Math.floor(((x + w - 1) * zoom + fractionalX))) - tempRECT.x + 1;
> 	tempRECT.height = (int)(Math.floor(((y + h - 1) * zoom + fractionalY))) - tempRECT.y + 1;
> 	return tempRECT;
> }
> 
> Font zoomFont(Font f) {
> 	if (f == null)
> 		f = Display.getCurrent().getSystemFont();
> 	FontData data = getCachedFontData(f);
> 	int zoomedFontHeight = zoomFontHeight(data.getHeight());
> 	allowText = zoomedFontHeight > 0;
> 	fontKey.setValues(f, zoomedFontHeight);
> 	return getCachedFont(fontKey);
> }
> 
> int zoomFontHeight(int height) {
> 	return (int)(zoom * height);
> }
> 
> int zoomLineWidth(int w) {
> 	return w;
> }
> 
> private int[] zoomPointList(int[] points) {
> 	int[] scaled = null;
> 
> 	// Look in cache for a integer array with the same length as 'points'
> 	for (int i = 0; i < intArrayCache.length; i++) {
> 		if (intArrayCache[i].length == points.length) {
> 			scaled = intArrayCache[i];
> 			
> 			// Move this integer array up one notch in the array
> 			if (i != 0) {
> 				int[] temp = intArrayCache[i - 1];
> 				intArrayCache[i - 1] = scaled;
> 				intArrayCache[i] = temp;	
> 			}
> 		}
> 	}
> 	
> 	// If no match is found, take the one that is last and resize it.
> 	if (scaled == null) {
> 		intArrayCache[intArrayCache.length - 1] = new int[points.length];
> 		scaled = intArrayCache[intArrayCache.length - 1];
> 	}
> 	
> 	// Scale the points
> 	for (int i = 0; (i + 1) < points.length; i += 2) {
> 		scaled[i] = (int)(Math.floor((points[i] * zoom + fractionalX)));
> 		scaled[i + 1] = (int)(Math.floor((points[i + 1] * zoom + fractionalY)));
> 	}
> 	return scaled;
> }	
> 
> protected Rectangle zoomRect(int x, int y, int w, int h) {
> 	tempRECT.x = (int)(Math.floor(x * zoom + fractionalX));
> 	tempRECT.y = (int)(Math.floor(y * zoom + fractionalY));
> 	tempRECT.width = (int)(Math.floor(((x + w) * zoom + fractionalX))) - tempRECT.x;
> 	tempRECT.height = (int)(Math.floor(((y + h) * zoom + fractionalY))) - tempRECT.y;
> 	return tempRECT;
> }
> 
608c774
< 	private Point zoomTextPoint(int x, int y) {
---
> Point zoomTextPoint(int x, int y) {
625,626d790
< 	private int[] zoomPointList(int[] points) {
< 		int[] scaled = null;
628,675c792,793
< 		// Look in cache for a integer array with the same length as 'points'
< 		for (int i = 0; i < intArrayCache.length; i++) {
< 			if (intArrayCache[i].length == points.length) {
< 				scaled = intArrayCache[i];
< 				
< 				// Move this integer array up one notch in the array
< 				if (i != 0) {
< 					int[] temp = intArrayCache[i - 1];
< 					intArrayCache[i - 1] = scaled;
< 					intArrayCache[i] = temp;	
< 				}
< 			}
< 		}
< 		
< 		// If no match is found, take the one that is last and resize it.
< 		if (scaled == null) {
< 			intArrayCache[intArrayCache.length - 1] = new int[points.length];
< 			scaled = intArrayCache[intArrayCache.length - 1];
< 		}
< 		
< 		// Scale the points
< 		for (int i = 0; (i + 1) < points.length; i+= 2) {
< 			scaled[i] = (int)(Math.floor((points[i] * zoom + fractionalX)));
< 			scaled[i + 1] = (int)(Math.floor((points[i + 1] * zoom + fractionalY)));
< 		}
< 		return scaled;
< 	}
< 
< 	private Rectangle zoomFillRect(int x, int y, int w, int h) {
< 		TEMP.x = (int)(Math.floor((x * zoom + fractionalX)));
< 		TEMP.y = (int)(Math.floor((y * zoom + fractionalY)));
< 		TEMP.width = (int)(Math.floor(((x + w - 1) * zoom + fractionalX))) - TEMP.x + 1;
< 		TEMP.height = (int)(Math.floor(((y + h - 1) * zoom + fractionalY))) - TEMP.y + 1;
< 		return TEMP;
< 	}
< 
< 	Font zoomFont(Font f) {
< 		if (f == null)
< 			f = Display.getCurrent().getSystemFont();
< 		FontData data = getCachedFontData(f);
< 		int zoomedFontHeight = zoomFontHeight(data.getHeight());
< 		allowText = zoomedFontHeight > 0;
< 		fontKey.setValues(f, zoomedFontHeight);
< 		return getCachedFont(fontKey);
< 	}
< 
< 	int zoomFontHeight(int height) {
< 		return (int)(zoom * height);
---
> protected Graphics getGraphics() {
> 	return graphics;
678,712d795
< 	private Rectangle zoomClipRect(Rectangle r) {
< 		TEMP.x = (int)(Math.floor(r.x * zoom + fractionalX));
< 		TEMP.y = (int)(Math.floor(r.y * zoom + fractionalY));
< 		TEMP.width = (int)(Math.ceil(((r.x + r.width) * zoom + fractionalX))) - TEMP.x;
< 		TEMP.height = (int)(Math.ceil(((r.y + r.height) * zoom + fractionalY))) - TEMP.y;
< 		return TEMP;
< 	}
< 
< 	private Rectangle zoomRect(int x, int y, int w, int h) {
< 		TEMP.x = (int)(Math.floor(x * zoom + fractionalX));
< 		TEMP.y = (int)(Math.floor(y * zoom + fractionalY));
< 		TEMP.width = (int)(Math.floor(((x + w) * zoom + fractionalX))) - TEMP.x;
< 		TEMP.height = (int)(Math.floor(((y + h) * zoom + fractionalY))) - TEMP.y;
< 		return TEMP;
< 	}
< 
< //	private Rectangle zoomRect(Rectangle r) {
< //		TEMP.x = (int)(Math.floor((r.x * zoom + fractionalX)));
< //		TEMP.y = (int)(Math.floor((r.y * zoom + fractionalY)));
< //		TEMP.width = (int)(Math.floor((r.right() * zoom + fractionalX))) - TEMP.x;
< //		TEMP.height = (int)(Math.floor((r.bottom() * zoom + fractionalY))) - TEMP.y;
< //		return TEMP;
< //	}
< 
< 	int zoomLineWidth(int w) {
< 		return w;
< 	}
< 	
< 	/* 
< 	 * (non-Javadoc)
< 	 * @see org.eclipse.draw2d.Graphics#setLineDash(int[])
< 	 */
< 	public void setLineDash(int[] dash) {
< 		graphics.setLineDash(dash);
< 	}
