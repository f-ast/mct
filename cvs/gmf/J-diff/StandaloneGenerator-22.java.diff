23,24c23
< import org.eclipse.gmf.common.codegen.ImportAssistant;
< import org.eclipse.gmf.gmfgraph.Figure;
---
> import org.eclipse.gmf.gmfgraph.FigureDescriptor;
41c40
< 	private final Map<String, Figure> myCallbackFigures = new LinkedHashMap<String, Figure>(); 
---
> 	private final Map<String, FigureDescriptor> myCallbackFigures = new LinkedHashMap<String, FigureDescriptor>(); 
128c127
< 		public String visitFigure(Figure f) throws InterruptedException;
---
> 		public String visitFigure(FigureDescriptor f) throws InterruptedException;
151c150
< 		myFigureGenerator = new FigureGenerator(config.getRuntimeToken(), strategy, accessor, false, dynamicTemplates);
---
> 		myFigureGenerator = new FigureGenerator(config.getRuntimeToken(), getPackageName(), strategy, accessor, false, dynamicTemplates);
201c200
< 			public String visitFigure(Figure f) throws InterruptedException {
---
> 			public String visitFigure(FigureDescriptor f) throws InterruptedException {
207,212c206,214
< 	private String visitFigure(Figure figure) throws InterruptedException {
< 		final ImportAssistant importAssistant = new ImportUtil(getPackageName(), CodeGenUtil.validJavaIdentifier(figure.getName()));
< 		Object[] args = new Object[] { figure, importAssistant };
< 		doGenerateJavaClass(myFigureGenerator, getPackageName(), importAssistant.getCompilationUnitName(), args);
< 		final String qualifiedName = composeFQN(getPackageName(), importAssistant.getCompilationUnitName());
< 		myCallbackFigures.put(qualifiedName, figure);
---
> 	private String visitFigure(FigureDescriptor figureDescriptor) throws InterruptedException {
> 		// XXX either use compilationUnitName from Util.ext or pass cu name as template argument
> 		if (figureDescriptor.getName() == null) {
> 			throw new IllegalArgumentException("FigureDescriptor needs a name");
> 		}
> 		final String compilationUnitName = CodeGenUtil.validJavaIdentifier(CodeGenUtil.capName(figureDescriptor.getName()));  
> 		doGenerateJavaClass(myFigureGenerator, getPackageName(), compilationUnitName, figureDescriptor);
> 		final String qualifiedName = composeFQN(getPackageName(), compilationUnitName);
> 		myCallbackFigures.put(qualifiedName, figureDescriptor);
