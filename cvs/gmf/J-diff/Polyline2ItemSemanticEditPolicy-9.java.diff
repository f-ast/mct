12a13,14
> import java.util.Iterator;
> import org.eclipse.emf.ecore.EAnnotation;
14a17
> import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
16a20
> import org.eclipse.gmf.graphdef.editor.edit.commands.PointCreateCommand;
17a22,23
> import org.eclipse.gmf.graphdef.editor.edit.parts.PointEditPart;
> import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
19a26
> import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
22a30,31
> import org.eclipse.gmf.runtime.notation.Node;
> import org.eclipse.gmf.runtime.notation.View;
31a41,53
> 	protected Command getCreateCommand(CreateElementRequest req) {
> 		if (GMFGraphElementTypes.Point_3022 == req.getElementType()) {
> 			if (req.getContainmentFeature() == null) {
> 				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getPolyline_Template());
> 			}
> 			return getGEFWrapper(new PointCreateCommand(req));
> 		}
> 		return super.getCreateCommand(req);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
33a56
> 		addDestroyChildNodesCommand(cc);
41a65,83
> 	protected void addDestroyChildNodesCommand(CompoundCommand cmd) {
> 		View view = (View) getHost().getModel();
> 		EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
> 		if (annotation != null) {
> 			return;
> 		}
> 		for (Iterator it = view.getChildren().iterator(); it.hasNext();) {
> 			Node node = (Node) it.next();
> 			switch (GMFGraphVisualIDRegistry.getVisualID(node)) {
> 			case PointEditPart.VISUAL_ID:
> 				cmd.add(getDestroyElementCommand(node));
> 				break;
> 			}
> 		}
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
