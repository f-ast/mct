40a41
> import org.eclipse.swt.accessibility.ACC;
56c57,58
< import org.eclipse.swt.widgets.Label;
---
> import org.eclipse.swt.widgets.ToolBar;
> import org.eclipse.swt.widgets.ToolItem;
90c92
< 	protected Button fillColorButton;
---
> 	protected ToolItem fillColorButton;
100c102
< 	private Button fontBoldButton;
---
> 	private ToolBar toolBar;
102c104,106
< 	private Button fontItalicButton;
---
> 	private ToolItem fontBoldButton;
> 
> 	private ToolItem fontItalicButton;
107c111
< 	protected Button fontColorButton;
---
> 	protected ToolItem fontColorButton;
109c113
<     protected Button lineColorButton;
---
>     protected ToolItem lineColorButton;
230c234
< 		Composite toolBar = new Composite(parent, SWT.SHADOW_NONE);
---
> 	    toolBar = new ToolBar(parent, SWT.FLAT);
234,249c238
< 		fontBoldButton = new Button(toolBar, SWT.TOGGLE);
< 		fontBoldButton.setImage(DiagramUIPropertiesImages.get(DiagramUIPropertiesImages.IMG_BOLD));
<         fontBoldButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
<             public void getName(AccessibleEvent e) {
<                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontStyle_Bold;
<             }
<         });
< 	
< 		
< 		fontItalicButton = new Button(toolBar, SWT.TOGGLE );
< 		fontItalicButton.setImage(DiagramUIPropertiesImages.get(DiagramUIPropertiesImages.IMG_ITALIC));
<         fontItalicButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
<             public void getName(AccessibleEvent e) {
<                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontStyle_Italic;
<             }
<         });
---
> 		fontBoldButton = new ToolItem(toolBar, SWT.CHECK);
250a240
> 		fontBoldButton.setImage(DiagramUIPropertiesImages.get(DiagramUIPropertiesImages.IMG_BOLD));
252d241
< 
256a246
> 		fontBoldButton.setToolTipText(DiagramUIMessages.FontStyleAction_bold_tooltip);		
257a248,250
> 		fontItalicButton = new ToolItem(toolBar, SWT.CHECK );
> 		fontItalicButton.setImage(DiagramUIPropertiesImages.get(DiagramUIPropertiesImages.IMG_ITALIC));
> 		fontItalicButton.setToolTipText(DiagramUIMessages.PropertyDescriptorFactory_FontStyle_Italic);
259d251
< 
265,267c257
< 		new Label(toolBar, SWT.LEFT);
< 
< 		fontColorButton = new Button(toolBar, SWT.PUSH);
---
> 		fontColorButton = new ToolItem(toolBar, SWT.DROP_DOWN);
269,273c259
<         fontColorButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
<             public void getName(AccessibleEvent e) {
<                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontColor;
<             }
<         });
---
> 		fontColorButton.setToolTipText(DiagramUIMessages.PropertyDescriptorFactory_FontColor);
275d260
< 
281,283c266
< 		new Label(toolBar, SWT.LEFT);
< 
< 		lineColorButton = new Button(toolBar, SWT.PUSH);
---
> 		lineColorButton = new ToolItem(toolBar,  SWT.DROP_DOWN);
285,289c268
<         lineColorButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
<             public void getName(AccessibleEvent e) {
<                 e.result = DiagramUIMessages.PropertyDescriptorFactory_LineColor;
<             }
<         });
---
> 		lineColorButton.setToolTipText(DiagramUIMessages.PropertyDescriptorFactory_LineColor);
291d269
< 
297c275
< 		fillColorButton = new Button(toolBar, SWT.PUSH);
---
> 		fillColorButton = new ToolItem(toolBar,  SWT.DROP_DOWN);
299c277,280
< 		fillColorButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
---
> 		fillColorButton.setToolTipText(DiagramUIMessages.PropertyDescriptorFactory_FillColor);
> 		fillColorButton.setEnabled(false);
> 		
> 		toolBar.getAccessible().addAccessibleListener(new AccessibleAdapter() {	
301c282,290
<                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FillColor;
---
> 				if (e.childID != ACC.CHILDID_SELF) {
> 					ToolItem item = toolBar.getItem(e.childID);
> 					if (item != null) {
> 						String toolTip = item.getToolTipText();
> 						if (toolTip != null) {
> 							e.result = toolTip;
> 						}
> 					}
> 				}
304,305d292
< 		fillColorButton.setEnabled(false);
< 
377a365,392
>      * @param toolItem -
>      *            event source
>      * @param preferenceId -
>      *            id of the preference of the default color value for that
>      *            property
>      * @param propertyId -
>      *            id of the property
>      * @param commandName -
>      *            name of the command
>      * @param imageDescriptor -
>      *            the image to draw overlay on the button after the new color is
>      *            set
>      * @return - new RGB color, or null if none selected
>      * @deprecated The preference is not being retrieved from the correct
>      *             preference store so it is not needed, use the other
>      *             <code>changeColor</code> method.
>      */
>     protected RGB changeColor(SelectionEvent event, ToolItem toolItem,
>             String preferenceId, final String propertyId, String commandName,
>             ImageDescriptor imageDescriptor) {
> 
>         return  changeColor(event, toolItem, propertyId, commandName,
>             imageDescriptor);
>     }
>     
>     /**
>      * @param event -
>      *            selection event
457a473,554
>      * @param event -
>      *            selection event
>      * @param toolItem -
>      *            event source
>      * @param propertyId -
>      *            id of the property
>      * @param commandName -
>      *            name of the command
>      * @param imageDescriptor -
>      *            the image to draw overlay on the button after the new color is
>      *            set
>      * @return - new RGB color, or null if none selected
>      */
>     protected RGB changeColor(SelectionEvent event, ToolItem toolItem,
>             final String propertyId, String commandName,
>             ImageDescriptor imageDescriptor) {
> 
>         ColorPalettePopup popup = new ColorPalettePopup(toolItem.getParent()
>             .getShell(), IDialogConstants.BUTTON_BAR_HEIGHT);        
>         popup.setPreviousColor(previousColor);
>         Rectangle r = toolItem.getBounds();
>         Point location = toolItem.getParent().toDisplay(r.x, r.y);
>         popup.open(new Point(location.x, location.y + r.height));        
>         if (popup.getSelectedColor() == null && !popup.useDefaultColor()) {
>             return null;
>         }        
>         // selectedColor should be null if we are to use the default color
>         final RGB selectedColor = popup.getSelectedColor();
> 
>         final EStructuralFeature feature = (EStructuralFeature) PackageUtil
>             .getElement(propertyId);
> 
>         // Update model in response to user
> 
>         List commands = new ArrayList();
>         Iterator it = getInputIterator();
> 
>         RGB colorToReturn = selectedColor;
>         RGB color = selectedColor;
>         while (it.hasNext()) {
>             final IGraphicalEditPart ep = (IGraphicalEditPart) it.next();
> 
>             color = selectedColor;
>             if (popup.useDefaultColor()) {
>                 Object preferredValue = ep.getPreferredValue(feature);
>                 if (preferredValue instanceof Integer) {
>                     color = FigureUtilities
>                         .integerToRGB((Integer) preferredValue);
>                 }
>             }
>                 
>             // If we are using default colors, we want to return the color of the first selected element to be consistent
>             if (colorToReturn == null) {
>                 colorToReturn = color;
>             }
> 
>             if (color != null) {
>                 final RGB finalColor = color; // need a final variable
>                commands.add(createCommand(commandName, ((View) ep.getModel())
>                     .eResource(), new Runnable() {
> 
>                     public void run() {
>                         ENamedElement element = PackageUtil
>                             .getElement(propertyId);
>                         if (element instanceof EStructuralFeature)
>                             ep.setStructuralFeatureValue(feature,
>                                 FigureUtilities.RGBToInteger(finalColor));
>                     }
>                 }));
>             }
>         }
>         if (!commands.isEmpty()){
> 	        executeAsCompositeCommand(commandName, commands);
>     	    Image overlyedImage = new ColorOverlayImageDescriptor(
>             imageDescriptor.getImageData(), color).createImage();
>         	disposeImage(toolItem.getImage());
>         	toolItem.setImage(overlyedImage);
> 	    }
>         return colorToReturn;
>     }
>     
> 	/**
