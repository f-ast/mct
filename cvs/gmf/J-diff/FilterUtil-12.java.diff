36d35
< import org.eclipse.gmf.mappings.LabelMapping;
52,53c51,52
< 	public static <T> List<T> filterByResourceSet(Collection<T> eClasses, ResourceSet resourceSet) {
< 		return sort(getValidEClassesFrom(eClasses, resourceSet));
---
> 	public static <T extends EObject> List<T> filterByResourceSet(Collection<T> eClasses, ResourceSet resourceSet) {
> 		return sort(filterValidEObjectsFrom(eClasses, resourceSet));
56c55
< 	public static List filterByContainmentFeature(Collection eClasses, MappingEntry mappingEntry) {
---
> 	public static List<EClass> filterByContainmentFeature(Collection<EClass> eClasses, MappingEntry mappingEntry) {
71c70
< 		return sort(getSubtypesOf(getValidEClassesFrom(eClasses, mappingEntry.eResource().getResourceSet()), superType));
---
> 		return sort(getSubtypesOf(filterValidEObjectsFrom(eClasses, mappingEntry.eResource().getResourceSet()), superType));
74c73
< 	public static List filterByContainerMetaclass(Collection eReferences, LinkMapping mappingEntry) {
---
> 	public static List<EStructuralFeature> filterByContainerMetaclass(Collection<EStructuralFeature> eReferences, MappingEntry mappingEntry) {
79,89c78
< 	public static List filterByContainerMetaclass(Collection eAttributes, LabelMapping labelMapping) {
< 		EClass containerMetaClass = labelMapping.getMapEntry().getDomainMetaElement();
< 		return sort(getEStructuralFeaturesOf(eAttributes, containerMetaClass));
< 	}
< 	
< 	public static List filterByContainerMetaclass(Collection eAttributes, MappingEntry mappingEntry) {
< 		EClass containerMetaClass = mappingEntry.getDomainMetaElement();
< 		return sort(getEStructuralFeaturesOf(eAttributes, containerMetaClass));
< 	}
< 
< 	public static List filterByContainerMetaclass(Collection eReferences, NodeReference nodeReference, boolean containmentOnly) {
---
> 	public static List<EReference> filterByContainerMetaclass(Collection<EReference> eReferences, NodeReference nodeReference, boolean containmentOnly) {
103,105c92
< 		// XXX hmm, outcome from getEStructuralFeaturesOf passed to getEReferences - 
< 		// neither implementation filters out elements of other types. just assumes and casts 
< 		List fromHierarchy = sort(getEReferences(getEStructuralFeaturesOf(eReferences, containerMetaClass), containmentOnly));
---
> 		List<EReference> fromHierarchy = sort(getEReferences(getEStructuralFeaturesOf(eReferences, containerMetaClass), containmentOnly));
110,111c97,98
< 		List targetsToChild = sort(getEReferences(getEReferencesOfType(eReferences, targetMetaClass), containmentOnly));
< 		for (Iterator it = targetsToChild.iterator(); it.hasNext();) {
---
> 		List<EReference> targetsToChild = sort(getEReferences(getEReferencesOfType(eReferences, targetMetaClass), containmentOnly));
> 		for (Iterator<EReference> it = targetsToChild.iterator(); it.hasNext();) {
116c103
< 		ArrayList rv = new ArrayList(fromHierarchy.size() + targetsToChild.size());
---
> 		ArrayList<EReference> rv = new ArrayList<EReference>(fromHierarchy.size() + targetsToChild.size());
122c109
< 	public static List filterByReferenceType(Collection eReferences, LinkMapping linkMapping) {
---
> 	public static List<EReference> filterByReferenceType(Collection<EReference> eReferences, LinkMapping linkMapping) {
127c114
< 	public static Collection filterByNodeMapping(Collection childReferences, CompartmentMapping mapping) {
---
> 	public static Collection<EObject> filterByNodeMapping(Collection<EObject> childReferences, CompartmentMapping mapping) {
131c118
< 	public static Collection filterByNodeMapping(Collection compartments, ChildReference childReference) {
---
> 	public static Collection<EObject> filterByNodeMapping(Collection<EObject> compartments, ChildReference childReference) {
135c122
< 	public static Collection filterBySuperClasses(Collection instances, Class[] classes) {
---
> 	public static Collection<?> filterBySuperClasses(Collection<?> instances, Class<?>[] classes) {
159,160c146,147
< 				for (Iterator it = eClasses.iterator(); it.hasNext();) {
< 					EClass nextEClass = (EClass) it.next();
---
> 				for (Iterator<EClass> it = eClasses.iterator(); it.hasNext();) {
> 					EClass nextEClass = it.next();
174c161
< 	private static Collection getSubtypesOf(Collection eClasses, EClass superType) {
---
> 	private static Collection<EClass> getSubtypesOf(Collection<EClass> eClasses, EClass superType) {
178,179c165,166
< 		for (Iterator it = eClasses.iterator(); it.hasNext();) {
< 			EClass nextEClass = (EClass) it.next();
---
> 		for (Iterator<EClass> it = eClasses.iterator(); it.hasNext();) {
> 			EClass nextEClass = it.next();
187c174
< 	private static Collection getEReferences(Collection eReferences, boolean containmentOnly) {
---
> 	private static Collection<EReference> getEReferences(Collection<EReference> eReferences, boolean containmentOnly) {
191,192c178,179
< 		for (Iterator it = eReferences.iterator(); it.hasNext();) {
< 			EReference nextReference = (EReference) it.next();
---
> 		for (Iterator<EReference> it = eReferences.iterator(); it.hasNext();) {
> 			EReference nextReference = it.next();
200,201c187,188
< 	private static Collection getEStructuralFeaturesOf(Collection structuralFeatures, EClass featureContainerEClass) {
< 		Collection result = getValidEStructuralFeatures(structuralFeatures);
---
> 	private static <T extends EStructuralFeature> Collection<T> getEStructuralFeaturesOf(Collection<T> structuralFeatures, EClass featureContainerEClass) {
> 		Collection<T> result = getValidEStructuralFeatures(structuralFeatures);
205,206c192,193
< 		for (Iterator it = result.iterator(); it.hasNext();) {
< 			EStructuralFeature nextFeature = (EStructuralFeature) it.next();
---
> 		for (Iterator<T> it = result.iterator(); it.hasNext();) {
> 			EStructuralFeature nextFeature = it.next();
214,215c201,202
< 	private static Collection getEReferencesOfType(Collection references, EClass referenceType) {
< 		Collection result = getValidEStructuralFeatures(references);
---
> 	private static Collection<EReference> getEReferencesOfType(Collection<EReference> references, EClass referenceType) {
> 		Collection<EReference> result = getValidEStructuralFeatures(references);
219,220c206,207
< 		for (Iterator it = result.iterator(); it.hasNext();) {
< 			EReference nextFeature = (EReference) it.next();
---
> 		for (Iterator<EReference> it = result.iterator(); it.hasNext();) {
> 			EReference nextFeature = it.next();
228,231c215,218
< 	private static Collection<EStructuralFeature> getValidEStructuralFeatures(Collection structuralFeatures) {
< 		Collection result = getValidEObjects(structuralFeatures);
< 		for (Iterator it = result.iterator(); it.hasNext();) {
< 			EStructuralFeature nextFeature = (EStructuralFeature) it.next();
---
> 	private static <T extends EStructuralFeature> Collection<T> getValidEStructuralFeatures(Collection<T> structuralFeatures) {
> 		Collection<T> result = getValidEObjects(structuralFeatures);
> 		for (Iterator<T> it = result.iterator(); it.hasNext();) {
> 			EStructuralFeature nextFeature = it.next();
239,242c226,229
< 	private static <T> Collection<T> getValidEClassesFrom(Collection<T> eClasses, ResourceSet resourceSet) {
< 		Collection result = getValidEObjects(eClasses);
< 		for (Iterator it = result.iterator(); it.hasNext();) {
< 			EClass nextEClass = (EClass) it.next();
---
> 	private static <T extends EObject> Collection<T> filterValidEObjectsFrom(Collection<T> eClasses, ResourceSet resourceSet) {
> 		Collection<T> result = getValidEObjects(eClasses);
> 		for (Iterator<T> it = result.iterator(); it.hasNext();) {
> 			EObject nextEClass = it.next();
253,256c240,242
< 	private static Collection<EObject> getValidEObjects(Collection<?> eObjects) {
< 		LinkedList<EObject> result = new LinkedList<EObject>();
< 		for (Iterator it = eObjects.iterator(); it.hasNext();) {
< 			EObject nextEObject = (EObject) it.next();
---
> 	private static <T extends EObject> Collection<T> getValidEObjects(Collection<T> eObjects) {
> 		LinkedList<T> result = new LinkedList<T>();
> 		for (T nextEObject : eObjects) {
265,268c251,253
< 	private static Collection getChildrenOf(Collection elements, EObject container, boolean addNull) {
< 		List result = new ArrayList();
< 		for (Iterator it = elements.iterator(); it.hasNext();) {
< 			EObject nextEObject = (EObject) it.next();
---
> 	private static <T extends EObject> Collection<T> getChildrenOf(Collection<T> elements, EObject container, boolean addNull) {
> 		LinkedList<T> result = new LinkedList<T>();
> 		for (T nextEObject : elements) {
276,279c261,263
< 	private static Collection getSubClassesOf(Collection instances, Class[] classes) {
< 		List result = new ArrayList();
< 		for (Iterator it = instances.iterator(); it.hasNext();) {
< 			Object nextInstance = it.next();
---
> 	private static Collection<?> getSubClassesOf(Collection<?> instances, Class<?>[] classes) {
> 		LinkedList<Object> result = new LinkedList<Object>();
> 		for (Object nextInstance : instances) {
