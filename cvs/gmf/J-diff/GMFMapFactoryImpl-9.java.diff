9a10
> import org.eclipse.emf.ecore.EDataType;
10a12
> import org.eclipse.emf.ecore.EPackage;
12,13c14,16
< import org.eclipse.gmf.mappings.*;
< 
---
> import org.eclipse.emf.ecore.plugin.EcorePlugin;
> import org.eclipse.gmf.mappings.AuditContainer;
> import org.eclipse.gmf.mappings.AuditRule;
15a19
> import org.eclipse.gmf.mappings.CompartmentMapping;
26a31
> import org.eclipse.gmf.mappings.Severity;
37a43,61
> 	 * Creates the default factory implementation.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public static GMFMapFactory init() {
> 		try {
> 			GMFMapFactory theGMFMapFactory = (GMFMapFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/2005/mappings"); 
> 			if (theGMFMapFactory != null) {
> 				return theGMFMapFactory;
> 			}
> 		}
> 		catch (Exception exception) {
> 			EcorePlugin.INSTANCE.log(exception);
> 		}
> 		return new GMFMapFactoryImpl();
> 	}
> 
> 	/**
67a92,93
> 			case GMFMapPackage.AUDIT_CONTAINER: return createAuditContainer();
> 			case GMFMapPackage.AUDIT_RULE: return createAuditRule();
77a104,131
> 	public Object createFromString(EDataType eDataType, String initialValue) {
> 		switch (eDataType.getClassifierID()) {
> 			case GMFMapPackage.SEVERITY:
> 				return createSeverityFromString(eDataType, initialValue);
> 			default:
> 				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
> 		}
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public String convertToString(EDataType eDataType, Object instanceValue) {
> 		switch (eDataType.getClassifierID()) {
> 			case GMFMapPackage.SEVERITY:
> 				return convertSeverityToString(eDataType, instanceValue);
> 			default:
> 				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
> 		}
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
217a272,311
> 	public AuditContainer createAuditContainer() {
> 		AuditContainerImpl auditContainer = new AuditContainerImpl();
> 		return auditContainer;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public AuditRule createAuditRule() {
> 		AuditRuleImpl auditRule = new AuditRuleImpl();
> 		return auditRule;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public Severity createSeverityFromString(EDataType eDataType, String initialValue) {
> 		Severity result = Severity.get(initialValue);
> 		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
> 		return result;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public String convertSeverityToString(EDataType eDataType, Object instanceValue) {
> 		return instanceValue == null ? null : instanceValue.toString();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
