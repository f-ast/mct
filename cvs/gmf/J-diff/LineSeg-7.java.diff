15a16,17
> import org.eclipse.draw2d.geometry.PrecisionPoint;
> import org.eclipse.draw2d.geometry.PrecisionRectangle;
98,99c100,101
< 		origin = new Point(ptStart);
< 		terminus = new Point(ptEnd);
---
> 		origin = ptStart.getCopy();
> 		terminus = ptEnd.getCopy();
193c195
< 		return new Point(origin);
---
> 		return origin.getCopy();
202c204
< 		return new Point(terminus);
---
> 		return terminus.getCopy();
211c213
< 		this.origin = new Point(origin);
---
> 		this.origin = origin.getCopy();
220c222
< 		this.terminus = new Point(terminus);
---
> 		this.terminus = terminus.getCopy();
352,353c354,360
< 		Point theOrigin = getOrigin();
< 		Point theTerminus = getTerminus();
---
> 		/*
> 		 * We need perform the calculations in double numbers to avoid possible integer
> 		 * overflows in Point#getDistance2() method
> 		 */
> 		double lengthOfSegment = Math.sqrt((origin.x - terminus.x)*(origin.x - terminus.x) + (origin.y - terminus.y)*(origin.y - terminus.y));
> 		double lengthFromOriginToPoint = Math.sqrt((origin.x - aPoint.x)*(origin.x - aPoint.x) + (origin.y - aPoint.y)*(origin.y - aPoint.y));
> 		double lengthFromTerminusToPoint = Math.sqrt((terminus.x - aPoint.x)*(terminus.x - aPoint.x) + (terminus.y - aPoint.y)*(terminus.y - aPoint.y));
355,357c362
< 		return (
< 			theOrigin.getDistance(aPoint) + aPoint.getDistance(theTerminus)
< 				<= length() + tolerance);
---
> 		return lengthFromTerminusToPoint + lengthFromOriginToPoint - lengthOfSegment <= tolerance;
797c802,805
< 		return getLineEquation(origin.x, origin.y, terminus.x, terminus.y);
---
> 		PrecisionPoint preciseOrigin = new PrecisionPoint(origin);
> 		PrecisionPoint preciseTerminus = new PrecisionPoint(terminus);
> 		return getLineEquation(preciseOrigin.preciseX, preciseOrigin.preciseY,
> 				preciseTerminus.preciseX, preciseTerminus.preciseY);
812c820
< 		PointList intersections = new PointList();
---
> 		PrecisionPointList intersections = new PrecisionPointList();
828,829c836,837
< 				intersections.addPoint(new Point(line.getOrigin().getCopy()));
< 				intersections.addPoint(new Point(line.getTerminus().getCopy()));
---
> 				intersections.addPoint(line.getOrigin().getCopy());
> 				intersections.addPoint(line.getTerminus().getCopy());
833c841
< 			intersections.addPoint(new Point(Math.round((c1*b2-b1*c2)/det), Math.round((a1*c2-c1*a2)/det)));
---
> 			intersections.addPoint(new PrecisionPoint((c1*b2-b1*c2)/det, (a1*c2-c1*a2)/det));
845,846c853,857
< 		PointList intersections = new PointList();
< 		if (ellipseBounds.width == 0 || ellipseBounds.height == 0)
---
> 		PointList intersections = new PrecisionPointList();
> 		PrecisionPoint preciseOrigin = new PrecisionPoint(origin);
> 		PrecisionPoint preciseTerminus = new PrecisionPoint(terminus);
> 		PrecisionRectangle preciseEllipseBounds = new PrecisionRectangle(ellipseBounds);
> 		if (preciseEllipseBounds.preciseWidth == 0 || preciseEllipseBounds.preciseHeight == 0)
848,852c859,865
< 		double xl1 = getOrigin().x - ellipseBounds.getCenter().x;
< 		double xl2 = getTerminus().x - ellipseBounds.getCenter().x;
< 		double yl1 = getOrigin().y - ellipseBounds.getCenter().y;
< 		double yl2 = getTerminus().y - ellipseBounds.getCenter().y;
< 		double [] equation = getLineEquation(xl1, yl1, xl2, yl2);
---
> 		PrecisionPoint ellipsePreciseCenter = new PrecisionPoint(
> 				preciseEllipseBounds.getCenter());
> 		double xl1 = preciseOrigin.preciseX - ellipsePreciseCenter.preciseX;
> 		double xl2 = preciseTerminus.preciseX - ellipsePreciseCenter.preciseX;
> 		double yl1 = preciseOrigin.preciseY - ellipsePreciseCenter.preciseY;
> 		double yl2 = preciseTerminus.preciseY - ellipsePreciseCenter.preciseY;
> 		double [] equation = LineSeg.getLineEquation(xl1, yl1, xl2, yl2);
860,861c873,874
< 		double w = ellipseBounds.width;
< 		double h = ellipseBounds.height;
---
> 		double w = preciseEllipseBounds.preciseWidth;
> 		double h = preciseEllipseBounds.preciseHeight;
863c876
< 		// Ellipse with a cneter at the origin has an equation:
---
> 		// Ellipse with a center at the origin has an equation:
877,878c890,891
< 			intersections.addPoint(new Point(Math.round(x+ellipseBounds.getCenter().x), Math.round(Math.sqrt(y)+ellipseBounds.getCenter().y)));
< 			intersections.addPoint(new Point(Math.round(x+ellipseBounds.getCenter().x), Math.round(-Math.sqrt(y)+ellipseBounds.getCenter().y)));
---
> 			intersections.addPoint(new PrecisionPoint(x+ellipsePreciseCenter.preciseX, Math.sqrt(y)+ellipsePreciseCenter.preciseY));
> 			intersections.addPoint(new PrecisionPoint(x+ellipsePreciseCenter.preciseX, -Math.sqrt(y)+ellipsePreciseCenter.preciseY));
894,895c907,908
< 			intersections.addPoint(new Point(Math.round(x1+ellipseBounds.getCenter().x), Math.round((c-a*x1)/b+ellipseBounds.getCenter().y)));
< 			intersections.addPoint(new Point(Math.round(x2+ellipseBounds.getCenter().x), Math.round((c-a*x2)/b+ellipseBounds.getCenter().y)));
---
> 			intersections.addPoint(new PrecisionPoint(x1+ellipsePreciseCenter.preciseX, (c-a*x1)/b+ellipsePreciseCenter.preciseY));
> 			intersections.addPoint(new PrecisionPoint(x2+ellipsePreciseCenter.preciseX, (c-a*x2)/b+ellipsePreciseCenter.preciseY));
912,917c925
< 		double temp[] = getEquation();
< 		double a = temp[0];
< 		double b = temp[1];
< 		double c = temp[2];
< 		PointList intersections = new PointList();
< 
---
> 		PointList intersections = new PrecisionPointList();
919,922c927,928
< 			if (a*points.getPoint(0).x+b*points.getPoint(0).y==c) {
< 				intersections.addPoint(points.getPoint(0).getCopy());
< 			}
< 			return intersections;
---
> 			if (containsPoint(points.getFirstPoint(), DEFAULT_INTERSECTION_TOLERANCE)) {
> 				intersections.addPoint(points.getFirstPoint());
924c930
< 		
---
> 		} else {	
926,927c932,933
< 			LineSeg line = new LineSeg(points.getPoint(i).getCopy(), points.getPoint(i+1).getCopy());
< 			PointList currentIntersections = getLinesIntersections(line);
---
> 				LineSeg seg = new LineSeg(points.getPoint(i), points.getPoint(i+1));
> 				PointList currentIntersections = getLinesIntersections(seg);
930c936
< 				if (line.containsPoint(intersection,DEFAULT_INTERSECTION_TOLERANCE))
---
> 					if (seg.containsPoint(intersection, DEFAULT_INTERSECTION_TOLERANCE)) {
933a940,941
> 			}
> 		}
953a962
> 	
