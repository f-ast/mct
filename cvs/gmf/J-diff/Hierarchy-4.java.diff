33c33
< 	private final List/*<EReference>*/ myRefs;
---
> 	private final List<EReference> myRefs;
35,37c35,37
< 	private final Map/*<EClass, Set<EClass>>*/ myResult;
< 	private Set myAccessibleLeaves;
< 	private Set myAccessibleClasses = new HashSet();
---
> 	private final Map<EClass, Set<EClass>> myResult;
> 	private Set<EClass> myAccessibleLeaves;
> 	private Set<EClass> myAccessibleClasses = new HashSet<EClass>();
41c41
< 	private Set myAccessibleLinkClasses = new HashSet();
---
> 	private Set<EClass> myAccessibleLinkClasses = new HashSet<EClass>();
45c45,46
< 	private Set/*<EReference>*/ myLinkClassContainmentRefs = new HashSet();
---
> 	private Set<EReference> myLinkClassContainmentRefs = new HashSet<EReference>();
> 
54c55
< 	public Hierarchy(List/*<EReference>*/ eRefs, EClass diagramContainer, EPackage domainModel) {
---
> 	public Hierarchy(List<EReference> eRefs, EClass diagramContainer, EPackage domainModel) {
58c59
< 		myResult = new HashMap();
---
> 		myResult = new HashMap<EClass, Set<EClass>>();
61c62
< 			myResult.put(element.getEReferenceType(), new HashSet());
---
> 			myResult.put(element.getEReferenceType(), new HashSet<EClass>());
64a66
> 	@SuppressWarnings("unchecked")
68a71
> 	@SuppressWarnings("unchecked")
91c94
< 		ArrayList compatible = new ArrayList();
---
> 		ArrayList<EReference> compatible = new ArrayList<EReference>();
103c106
< 			EReference r = (EReference) compatible.get(i);
---
> 			EReference r = compatible.get(i);
109c112
< 		return (EReference) compatible.get(0);
---
> 		return compatible.get(0);
142,143c145,146
< 		Set nonLeaves = new HashSet();
< 		final HashSet leavesSet = new HashSet();
---
> 		Set<EClass> nonLeaves = new HashSet<EClass>();
> 		final HashSet<EClass> leavesSet = new HashSet<EClass>();
148,150c151,152
< 				for (Iterator it2 = myResult.entrySet().iterator(); it2.hasNext();) {
< 					Map.Entry entry = (Map.Entry) it2.next();
< 					EClass element = (EClass) entry.getKey();
---
> 				for (Map.Entry<EClass, Set<EClass>> entry : myResult.entrySet()) {
> 					final EClass element = entry.getKey();
152c154
< 						((Set) entry.getValue()).add(eClass);
---
> 						entry.getValue().add(eClass);
175,178c177,179
< 	public Set/*<EClass>*/ getAllClasses() {
< 		HashSet rv = new HashSet();
< 		for (Iterator it = myResult.values().iterator(); it.hasNext();) {
< 			Set next = (Set) it.next();
---
> 	public Set<EClass> getAllClasses() {
> 		HashSet<EClass> rv = new HashSet<EClass>();
> 		for (Set<EClass> next : myResult.values()) {
184c185
< 	public Set/*<EClass>*/ getAccessibleClasses() {
---
> 	public Set<EClass> getAccessibleClasses() {
188c189
< 	public Set/*<EClass>*/ getAccessibleLinkClasses() {
---
> 	public Set<EClass> getAccessibleLinkClasses() {
192c193
< 	public Set/*<EReference>*/ getAccessibleReferences() {
---
> 	public Set<EReference> getAccessibleReferences() {
196,197c197,198
< 	public Set/*<EReference>*/ getAccessibleReferences(Iterator/*<EClass>*/ iter) {
< 		HashSet rv = new HashSet();
---
> 	public Set<EReference> getAccessibleReferences(Iterator<EClass> iter) {
> 		HashSet<EReference> rv = new HashSet<EReference>();
199c200
< 			EClass element = (EClass) iter.next();
---
> 			EClass element = iter.next();
