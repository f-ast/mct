11a12
> import org.eclipse.emf.ecore.EOperation;
15a17
> import org.eclipse.gmf.gmfgraph.AlignmentFacet;
171a174,180
> 	private EClass alignmentFacetEClass = null;
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
853a863,880
> 	public EClass getAlignmentFacet() {
> 		return alignmentFacetEClass;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EAttribute getAlignmentFacet_Alignment() {
> 		return (EAttribute)alignmentFacetEClass.getEStructuralFeatures().get(0);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
2120a2148,2150
> 		alignmentFacetEClass = createEClass(ALIGNMENT_FACET);
> 		createEAttribute(alignmentFacetEClass, ALIGNMENT_FACET__ALIGNMENT);
> 
2338a2369
> 		alignmentFacetEClass.getESuperTypes().add(this.getVisualFacet());
2405a2437,2439
> 		EOperation op = addEOperation(diagramElementEClass, this.getVisualFacet(), "find", 0, 1);
> 		addEParameter(op, ecorePackage.getEJavaClass(), "facetClass", 0, 1);
> 
2424a2459,2461
> 		initEClass(alignmentFacetEClass, AlignmentFacet.class, "AlignmentFacet", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
> 		initEAttribute(getAlignmentFacet_Alignment(), this.getAlignment(), "alignment", null, 0, 1, AlignmentFacet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
> 
