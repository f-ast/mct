13,15c13,14
< import java.util.ArrayList;
< import java.util.Arrays;
< import java.util.Collection;
---
> import java.util.HashMap;
> import java.util.Map;
17a17
> import org.eclipse.emf.ecore.EAttribute;
19c19,22
< import org.eclipse.gmf.internal.common.migrate.MigrationHelperDelegateImpl;
---
> import org.eclipse.emf.ecore.EReference;
> import org.eclipse.emf.ecore.EStructuralFeature;
> import org.eclipse.emf.ecore.util.EcoreUtil;
> import org.eclipse.gmf.internal.common.migrate.MigrationDelegateImpl;
20a24
> import org.eclipse.gmf.mappings.GMFMapFactory;
25,27c29,33
< class MigrationDelegate extends MigrationHelperDelegateImpl {
< 	private Collection<FeatureLabelMapping> myFeatureLabelMappings;
< 	private Collection<String> myBackwardSupportedURIs;
---
> class MigrationDelegate extends MigrationDelegateImpl {
> 	private Map<LabelMapping, FeatureLabelMapping> myLabelMappingMigrations;
> 	private EAttribute myLabelMapping_ViewPattern;
> 	private EAttribute myLabelMapping_EditPattern;
> 	private EReference myLabelMapping_Features;
33,35c39,56
< 		registerNarrowReferenceType(GMFMapPackage.eINSTANCE.getFeatureSeqInitializer_Initializers(), GMFMapPackage.eINSTANCE.getFeatureValueSpec());
< 		registerNarrowReferenceType(GMFMapPackage.eINSTANCE.getMappingEntry_LabelMappings(), GMFMapPackage.eINSTANCE.getFeatureLabelMapping());
< 		myFeatureLabelMappings = null;
---
> 		//registerNarrowReferenceType(GMFMapPackage.eINSTANCE.getFeatureSeqInitializer_Initializers(), GMFMapPackage.eINSTANCE.getFeatureValueSpec());
> 		// -->
> 		registerNarrowedAbstractType("FeatureInitializer", GMFMapPackage.eINSTANCE.getFeatureValueSpec());
> 		
> 		//registerNarrowReferenceType(GMFMapPackage.eINSTANCE.getMappingEntry_LabelMappings(), GMFMapPackage.eINSTANCE.getFeatureLabelMapping());
> 		// -->
> 		myLabelMapping_Features = (EReference) EcoreUtil.copy(GMFMapPackage.eINSTANCE.getFeatureLabelMapping_Features());
> 		myLabelMapping_ViewPattern = (EAttribute) EcoreUtil.copy(GMFMapPackage.eINSTANCE.getFeatureLabelMapping_ViewPattern());
> 		myLabelMapping_EditPattern = (EAttribute) EcoreUtil.copy(GMFMapPackage.eINSTANCE.getFeatureLabelMapping_EditPattern());
> 		{
> 			Map<String, EStructuralFeature> renamings = new HashMap<String, EStructuralFeature>();
> 			renamings.put(myLabelMapping_ViewPattern.getName(), myLabelMapping_ViewPattern);
> 			renamings.put(myLabelMapping_EditPattern.getName(), myLabelMapping_EditPattern);
> 			renamings.put(myLabelMapping_Features.getName(), myLabelMapping_Features);
> 			registerRenamedAttributes(GMFMapPackage.eINSTANCE.getLabelMapping(), renamings);
> 		}
> 		
> 		myLabelMappingMigrations = null;
39,40c60,99
< 	public boolean isOldVersionDetected(String uriString) {
< 		return !getMetamodelNsURI().equals(uriString) && getBackwardSupportedURIs().contains(uriString);
---
> 	public boolean setValue(EObject object, EStructuralFeature feature, Object value, int position) {
> 		if (myLabelMapping_ViewPattern.equals(feature)) {
> 			LabelMapping mapping = (LabelMapping) object;
> 			String viewPattern = (String) value;
> 			FeatureLabelMapping migratedMapping = saveFeatureLabelMappingFor(mapping);
> 			migratedMapping.setViewPattern(viewPattern);
> 			fireMigrationApplied(true);
> 		} else if (myLabelMapping_EditPattern.equals(feature)) {
> 			LabelMapping mapping = (LabelMapping) object;
> 			String editPattern = (String) value;
> 			FeatureLabelMapping migratedMapping = saveFeatureLabelMappingFor(mapping);
> 			migratedMapping.setViewPattern(editPattern);
> 			fireMigrationApplied(true);
> 		} else if (myLabelMapping_Features.equals(feature)) {
> 			LabelMapping mapping = (LabelMapping) object;
> 			EAttribute attribute = (EAttribute) value;
> 			FeatureLabelMapping migratedMapping = saveFeatureLabelMappingFor(mapping);
> 			migratedMapping.getFeatures().add(attribute);
> 			fireMigrationApplied(true);
> 		} else {
> 			// other cases are would be processed as defaults
> 			return super.setValue(object, feature, value, position);
> 		}
> 		return true;
> 	}
> 
> 	private FeatureLabelMapping saveFeatureLabelMappingFor(LabelMapping labelMapping) {
> 		if (myLabelMappingMigrations == null) {
> 			myLabelMappingMigrations = new HashMap<LabelMapping, FeatureLabelMapping>();
> 		}
> 		FeatureLabelMapping migrated = myLabelMappingMigrations.get(labelMapping);
> 		if (migrated == null) {
> 			migrated = GMFMapFactory.eINSTANCE.createFeatureLabelMapping();
> 			myLabelMappingMigrations.put(labelMapping, migrated);
> 		}
> 		return migrated;
> 	}
> 	
> 	private Map<LabelMapping, FeatureLabelMapping> getSavedLabelMappingMigrations() {
> 		return myLabelMappingMigrations;
45c104
< 		if (myFeatureLabelMappings == null) {
---
> 		if (getSavedLabelMappingMigrations() == null) {
48,49c107,109
< 		for (FeatureLabelMapping mapping : getSavedFeatureLabelMappings()) {
< 			if (mapping.getFeatures().isEmpty()) {
---
> 		for (LabelMapping mapping : getSavedLabelMappingMigrations().keySet()) {
> 			FeatureLabelMapping migrated = getSavedLabelMappingMigrations().get(mapping);
> 			if (!migrated.getFeatures().isEmpty()) {
54,55c114
< 					LabelMapping newMapping = GMFMapPackage.eINSTANCE.getGMFMapFactory().createLabelMapping();
< 					newMapping.setDiagramLabel(mapping.getDiagramLabel());
---
> 					migrated.setDiagramLabel(mapping.getDiagramLabel());
57c116
< 						newMapping.setReadOnly(true);
---
> 						migrated.setReadOnly(true);
59c118
< 					labelMappings.set(originalIndex, newMapping);
---
> 					labelMappings.set(originalIndex, migrated);
64,91d122
< 
< 	@Override
< 	public void processObject(EObject result) {
< 		if (result instanceof FeatureLabelMapping) {
< 			getSavedFeatureLabelMappings().add((FeatureLabelMapping) result);
< 		}
< 	}
< 	
< 	private Collection<FeatureLabelMapping> getSavedFeatureLabelMappings() {
< 		if (myFeatureLabelMappings == null) {
< 			myFeatureLabelMappings = new ArrayList<FeatureLabelMapping>();
< 		}
< 		return myFeatureLabelMappings;
< 	}
< 
< 	protected Collection<String> getBackwardSupportedURIs() {
< 		if (myBackwardSupportedURIs == null) {
< 			myBackwardSupportedURIs = Arrays.asList(new String[] {
< 					"http://www.eclipse.org/gmf/2005/mappings", //$NON-NLS-1$
< 					"http://www.eclipse.org/gmf/2005/mappings/2.0" //$NON-NLS-1$
< 			});
< 		}
< 		return myBackwardSupportedURIs;
< 	}
< 
< 	protected String getMetamodelNsURI() {
< 		return GMFMapPackage.eNS_URI;
< 	}
