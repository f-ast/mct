2c2
<  * Copyright (c) 2005, 2007 IBM Corporation and others.
---
>  * Copyright (c) 2005, 2008 IBM Corporation and others.
41d40
< import org.eclipse.swt.accessibility.ACC;
57,58c56
< import org.eclipse.swt.widgets.ToolBar;
< import org.eclipse.swt.widgets.ToolItem;
---
> import org.eclipse.swt.widgets.Label;
92c90
< 	protected ToolItem fillColorButton;
---
> 	protected Button fillColorButton;
102c100
< 	private ToolBar toolBar;
---
> 	private Button fontBoldButton;
104,106c102
< 	private ToolItem fontBoldButton;
< 
< 	private ToolItem fontItalicButton;
---
> 	private Button fontItalicButton;
111c107
< 	protected ToolItem fontColorButton;
---
> 	protected Button fontColorButton;
113c109
<     protected ToolItem lineColorButton;
---
>     protected Button lineColorButton;
234c230
< 	    toolBar = new ToolBar(parent, SWT.FLAT);
---
> 		Composite toolBar = new Composite(parent, SWT.SHADOW_NONE);
238,239c234
< 		fontBoldButton = new ToolItem(toolBar, SWT.CHECK);
< 
---
> 		fontBoldButton = new Button(toolBar, SWT.TOGGLE);
240a236,250
>         fontBoldButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
>             public void getName(AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontStyle_Bold;
>             }
>         });
> 	
> 		
> 		fontItalicButton = new Button(toolBar, SWT.TOGGLE );
> 		fontItalicButton.setImage(DiagramUIPropertiesImages.get(DiagramUIPropertiesImages.IMG_ITALIC));
>         fontItalicButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
>             public void getName(AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontStyle_Italic;
>             }
>         });
> 
241a252
> 
246d256
< 		fontBoldButton.setToolTipText(DiagramUIMessages.FontStyleAction_bold_tooltip);		
248,250d257
< 		fontItalicButton = new ToolItem(toolBar, SWT.CHECK );
< 		fontItalicButton.setImage(DiagramUIPropertiesImages.get(DiagramUIPropertiesImages.IMG_ITALIC));
< 		fontItalicButton.setToolTipText(DiagramUIMessages.PropertyDescriptorFactory_FontStyle_Italic);
251a259
> 
257c265,267
< 		fontColorButton = new ToolItem(toolBar, SWT.DROP_DOWN);
---
> 		new Label(toolBar, SWT.LEFT);
> 
> 		fontColorButton = new Button(toolBar, SWT.PUSH);
259c269,273
< 		fontColorButton.setToolTipText(DiagramUIMessages.PropertyDescriptorFactory_FontColor);
---
>         fontColorButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
>             public void getName(AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontColor;
>             }
>         });
260a275
> 
266c281,283
< 		lineColorButton = new ToolItem(toolBar,  SWT.DROP_DOWN);
---
> 		new Label(toolBar, SWT.LEFT);
> 
> 		lineColorButton = new Button(toolBar, SWT.PUSH);
268c285,289
< 		lineColorButton.setToolTipText(DiagramUIMessages.PropertyDescriptorFactory_LineColor);
---
>         lineColorButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
>             public void getName(AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_LineColor;
>             }
>         });
269a291
> 
275c297
< 		fillColorButton = new ToolItem(toolBar,  SWT.DROP_DOWN);
---
> 		fillColorButton = new Button(toolBar, SWT.PUSH);
277,280c299
< 		fillColorButton.setToolTipText(DiagramUIMessages.PropertyDescriptorFactory_FillColor);
< 		fillColorButton.setEnabled(false);
< 		
< 		toolBar.getAccessible().addAccessibleListener(new AccessibleAdapter() {	
---
> 		fillColorButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
282,290c301
< 				if (e.childID != ACC.CHILDID_SELF) {
< 					ToolItem item = toolBar.getItem(e.childID);
< 					if (item != null) {
< 						String toolTip = item.getToolTipText();
< 						if (toolTip != null) {
< 							e.result = toolTip;
< 						}
< 					}
< 				}
---
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FillColor;
292a304,305
> 		fillColorButton.setEnabled(false);
> 
365,392d377
<      * @param toolItem -
<      *            event source
<      * @param preferenceId -
<      *            id of the preference of the default color value for that
<      *            property
<      * @param propertyId -
<      *            id of the property
<      * @param commandName -
<      *            name of the command
<      * @param imageDescriptor -
<      *            the image to draw overlay on the button after the new color is
<      *            set
<      * @return - new RGB color, or null if none selected
<      * @deprecated The preference is not being retrieved from the correct
<      *             preference store so it is not needed, use the other
<      *             <code>changeColor</code> method.
<      */
<     protected RGB changeColor(SelectionEvent event, ToolItem toolItem,
<             String preferenceId, final String propertyId, String commandName,
<             ImageDescriptor imageDescriptor) {
< 
<         return  changeColor(event, toolItem, propertyId, commandName,
<             imageDescriptor);
<     }
<     
<     /**
<      * @param event -
<      *            selection event
473,554d457
<      * @param event -
<      *            selection event
<      * @param toolItem -
<      *            event source
<      * @param propertyId -
<      *            id of the property
<      * @param commandName -
<      *            name of the command
<      * @param imageDescriptor -
<      *            the image to draw overlay on the button after the new color is
<      *            set
<      * @return - new RGB color, or null if none selected
<      */
<     protected RGB changeColor(SelectionEvent event, ToolItem toolItem,
<             final String propertyId, String commandName,
<             ImageDescriptor imageDescriptor) {
< 
<         ColorPalettePopup popup = new ColorPalettePopup(toolItem.getParent()
<             .getShell(), IDialogConstants.BUTTON_BAR_HEIGHT);        
<         popup.setPreviousColor(previousColor);
<         Rectangle r = toolItem.getBounds();
<         Point location = toolItem.getParent().toDisplay(r.x, r.y);
<         popup.open(new Point(location.x, location.y + r.height));        
<         if (popup.getSelectedColor() == null && !popup.useDefaultColor()) {
<             return null;
<         }        
<         // selectedColor should be null if we are to use the default color
<         final RGB selectedColor = popup.getSelectedColor();
< 
<         final EStructuralFeature feature = (EStructuralFeature) PackageUtil
<             .getElement(propertyId);
< 
<         // Update model in response to user
< 
<         List commands = new ArrayList();
<         Iterator it = getInputIterator();
< 
<         RGB colorToReturn = selectedColor;
<         RGB color = selectedColor;
<         while (it.hasNext()) {
<             final IGraphicalEditPart ep = (IGraphicalEditPart) it.next();
< 
<             color = selectedColor;
<             if (popup.useDefaultColor()) {
<                 Object preferredValue = ep.getPreferredValue(feature);
<                 if (preferredValue instanceof Integer) {
<                     color = FigureUtilities
<                         .integerToRGB((Integer) preferredValue);
<                 }
<             }
<                 
<             // If we are using default colors, we want to return the color of the first selected element to be consistent
<             if (colorToReturn == null) {
<                 colorToReturn = color;
<             }
< 
<             if (color != null) {
<                 final RGB finalColor = color; // need a final variable
<                commands.add(createCommand(commandName, ((View) ep.getModel())
<                     .eResource(), new Runnable() {
< 
<                     public void run() {
<                         ENamedElement element = PackageUtil
<                             .getElement(propertyId);
<                         if (element instanceof EStructuralFeature)
<                             ep.setStructuralFeatureValue(feature,
<                                 FigureUtilities.RGBToInteger(finalColor));
<                     }
<                 }));
<             }
<         }
<         if (!commands.isEmpty()){
< 	        executeAsCompositeCommand(commandName, commands);
<     	    Image overlyedImage = new ColorOverlayImageDescriptor(
<             imageDescriptor.getImageData(), color).createImage();
<         	disposeImage(toolItem.getImage());
<         	toolItem.setImage(overlyedImage);
< 	    }
<         return colorToReturn;
<     }
<     
< 	/**
