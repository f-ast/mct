12a13,15
> import java.util.Collections;
> import java.util.Iterator;
> 
15a19
> import org.eclipse.gef.EditPart;
17a22
> import org.eclipse.gef.commands.CompoundCommand;
30a36
> import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;
47a54
> import org.eclipse.gmf.runtime.notation.Edge;
280a288,309
> 	 * Returns editing domain from the host edit part.
> 	 * 
> 	 * @generated
> 	 */
> 	protected TransactionalEditingDomain getEditingDomain() {
> 		return ((IGraphicalEditPart) getHost()).getEditingDomain();
> 	}
> 
> 	/**
> 	 * Creates command to destroy the link.
> 	 * 
> 	 * @generated
> 	 */
> 	protected Command getDestroyEdgeCommand(Edge edge, boolean confirm) {
> 		EditPart editPart = (EditPart) getHost().getViewer().getEditPartRegistry().get(edge);
> 		DestroyElementRequest request = new DestroyElementRequest(getEditingDomain(), confirm);
> 		return editPart.getCommand(new EditCommandRequestWrapper(request, Collections.EMPTY_MAP));
> 	}
> 
> 	/**
> 	 * Creates commands to destroy all host incoming and outgoing links.
> 	 * 
283c312,327
< 	protected static class LinkConstraints {
---
> 	protected CompoundCommand getDestroyEdgesCommand(boolean confirm) {
> 		CompoundCommand cmd = new CompoundCommand();
> 		View view = (View) getHost().getModel();
> 		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
> 			cmd.add(getDestroyEdgeCommand((Edge) it.next(), confirm));
> 		}
> 		for (Iterator it = view.getTargetEdges().iterator(); it.hasNext();) {
> 			cmd.add(getDestroyEdgeCommand((Edge) it.next(), confirm));
> 		}
> 		return cmd;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	public static class LinkConstraints {
293a338,344
> 			return canExistDiagramElementFigure_4001(source, target);
> 		}
> 
> 		/**
> 		 * @generated
> 		 */
> 		public static boolean canExistDiagramElementFigure_4001(DiagramElement source, FigureHandle target) {
