2c2
<  * Copyright (c) 2005 IBM Corporation and others.
---
>  * Copyright (c) 2005, 2006 IBM Corporation and others.
32d31
< 
33a33
> import org.eclipse.gmf.runtime.emf.type.core.IClientContext;
38a39
> import org.eclipse.gmf.runtime.emf.type.core.ISpecializationTypeDescriptor;
261,262c262
< 	 * Gets a list containing the immediate specializations of
< 	 * <code>type</code>.
---
> 	 * Gets a list containing the immediate specializations of <code>type</code>.
266,267c266,269
< 	 * @return the list of all <code>SpecializationTypeDescriptor</code>
< 	 *         s of <code>type</code>
---
> 	 * @param clientContext
> 	 *            the client context
> 	 * @return the list of all <code>SpecializationTypeDescriptor</code> s of
> 	 *         <code>type</code>
270,271c272,273
< 			ElementTypeDescriptor type) {
< 		return getSpecializationTypeDescriptors(type, false);
---
> 			ElementTypeDescriptor type, IClientContext clientContext) {
> 		return getSpecializationTypeDescriptors(type, false, clientContext);
279a282,283
> 	 * @param clientContext
> 	 *            the client context
283c287
< 			ElementTypeDescriptor type) {
---
> 			ElementTypeDescriptor type, IClientContext clientContext) {
285c289
< 		return getSpecializationTypeDescriptors(type, true);
---
> 		return getSpecializationTypeDescriptors(type, true, clientContext);
303c307
< 			boolean deep) {
---
> 			boolean deep, IClientContext clientContext) {
317a322
> 				if (clientContext.includes(nextDescriptor)) {
324c329,330
< 							nextDescriptor, deep));
---
> 								nextDescriptor, deep, clientContext));
> 						}
337a344,346
> 	 * <P>
> 	 * Returns an empty list if the <code>clientContext</code> is not bound to
> 	 * the <code>metamodelTypeDescriptor</code>.
347c356
< 			MetamodelTypeDescriptor metamodelTypeDescriptor) {
---
> 			MetamodelTypeDescriptor metamodelTypeDescriptor, IClientContext clientContext) {
353c362,363
< 		List specializations = getAllSpecializationTypeDescriptors(metamodelTypeDescriptor);
---
> 		List specializations = getAllSpecializationTypeDescriptors(
> 				metamodelTypeDescriptor, clientContext);
380a391,393
> 	 * <P>
> 	 * Returns an empty list if the <code>clientContext</code> is not bound to
> 	 * the <code>type</code>.
387a401,402
> 	 * @param clientContext
> 	 *            the client context
391c406
< 			EObject eContainer, EReference reference) {
---
> 			EObject eContainer, EReference reference, IClientContext clientContext) {
398c413
< 			type, eContainer, reference);
---
> 			type, eContainer, reference, clientContext);
405c420
< 				.next(), eContainer, reference));
---
> 				.next(), eContainer, reference, clientContext));
471a487,488
> 	 * @param clientContext
> 	 *            the client context
477c494
< 			EReference feature) {
---
> 			EReference feature, IClientContext clientContext) {
480c497,498
< 		Collection specializationDescriptors = getImmediateSpecializationTypeDescriptors(typeDescriptor);
---
> 		Collection specializationDescriptors = getImmediateSpecializationTypeDescriptors(
> 				typeDescriptor, clientContext);
484a503,508
> 			
> 			if (!clientContext.includes(nextDescriptor)) {
> 				// descriptor isn't bound to the client context
> 				continue;
> 			}
> 			
557c581,582
< 	 * match <code>eObject</code>. The advice is ordered from most general
---
> 	 * match <code>eObject</code>. The advice will be that which is bound to
> 	 * the <code>clientContext</code>, and is ordered from most general
559a585,587
> 	 * <P>
> 	 * Returns an empty list if the <code>clientContext</code> is not bound to
> 	 * the <code>metamodelTypeDescriptor</code>.
564a593,594
> 	 * @param clientContext
> 	 *            the client context
568c598
< 			MetamodelTypeDescriptor metamodelTypeDescriptor) {
---
> 			MetamodelTypeDescriptor metamodelTypeDescriptor, IClientContext clientContext) {
578c608
< 					ALL));
---
> 					ALL, clientContext));
583c613
< 			eObject, ALL_NONE));
---
> 			eObject, ALL_NONE, clientContext));
587c617
< 			eObject, metamodelTypeDescriptor);
---
> 			eObject, metamodelTypeDescriptor, clientContext);
595c625
< 				eObject, ALL_NONE));
---
> 				eObject, ALL_NONE, clientContext));
603,604c633,635
< 	 * the inheritable advice bounds to its supertypes. The advice is ordered
< 	 * from most general advice (inherited from metamodel supertypes) to most
---
> 	 * the inheritable advice bounds to its supertypes. The advice will be that
> 	 * which is bound to the <code>clientContext</code>, and is ordered from
> 	 * most general advice (inherited from metamodel supertypes) to most
605a637,639
> 	 * <P>
> 	 * Returns an empty list if the <code>clientContext</code> is not bound to
> 	 * the <code>elementType</code>.
611a646,647
> 	 * @param clientContext
> 	 *            the client context
615c651
< 			MetamodelTypeDescriptor metamodelTypeDescriptor) {
---
> 			MetamodelTypeDescriptor metamodelTypeDescriptor, IClientContext clientContext) {
629c665
< 								ALL_NONE));
---
> 								ALL_NONE, clientContext));
632c668
< 				result.addAll(getMatchingAdvice(nextSupertype.getId(), ALL));
---
> 				result.addAll(getMatchingAdvice(nextSupertype.getId(), ALL, clientContext));
637c673
< 		result.addAll(getMatchingAdvice(elementType.getId(), ALL_NONE));
---
> 		result.addAll(getMatchingAdvice(elementType.getId(), ALL_NONE, clientContext));
653a690,691
> 	 * @param clientContext
> 	 *            the client context
657c695
< 			Set adviceInheritanceToConsider) {
---
> 			Set adviceInheritanceToConsider, IClientContext clientContext) {
664a703
> 			if (clientContext.includes(nextAdviceDescriptor)) {
680a720
> 		}
693a734,735
> 	 * @param clientContext
> 	 *            the client context
697c739
< 			Set adviceInheritanceToConsider) {
---
> 			Set adviceInheritanceToConsider, IClientContext clientContext) {
704a747,748
> 			if (clientContext.includes(nextAdviceDescriptor)) {
> 
715a760
> 		}
721c766,768
< 	 * type ID and also to patterns matching the element type ID.
---
> 	 * type ID and also to patterns matching the element type ID. Advice bindings
> 	 * are returned for all client contexts.  The caller should filter the list 
> 	 * by context.
785c832
< 				(Collection) adviceBindings.get("*"), //$NON-NLS-1$
---
> 				(Collection) adviceBindings.get("*") //$NON-NLS-1$
813a861,885
> 	 * Gets the collection of all registered specialization type descriptors
> 	 * bound to the <code>clientContext</code>.
> 	 * 
> 	 * @return the registered specialization type descriptors. Each element in
> 	 *         the collection is a <code>SpecializationTypeDescriptor</code>.
> 	 */
> 	public Collection getSpecializationTypeDescriptors(
> 			IClientContext clientContext) {
> 
> 		Collection result = new ArrayList();
> 
> 		for (Iterator i = getSpecializationTypeDescriptors().iterator(); i
> 				.hasNext();) {
> 			
> 			ISpecializationTypeDescriptor next = (ISpecializationTypeDescriptor) i
> 					.next();
> 
> 			if (clientContext.includes(next)) {
> 				result.add(next);
> 			}
> 		}
> 		return result;
> 	}
> 	
> 	/**
