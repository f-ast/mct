2c2
<  * Copyright (c) 2002, 2006 IBM Corporation and others.
---
>  * Copyright (c) 2002, 2008 IBM Corporation and others.
56a57
> import org.eclipse.gmf.runtime.emf.core.resources.IPathmapManager2;
66c67
< public class PathmapManager extends AdapterImpl implements IPathmapManager {
---
> public class PathmapManager extends AdapterImpl implements IPathmapManager, IPathmapManager2 {
85a87
> 	private static final Set FILE_VARIABLES = Collections.synchronizedSet(new HashSet());
315c317,318
< 	 * Set the value of a pathmap variable.
---
> 	 * Set the value of a pathmap variable. Dirties any resources
> 	 *  that have HREF's that need to be changed.
320a324,345
> 		setPathVariable(var, val, true);
> 	}
> 	
> 	/**
> 	 * Sets the value of a pathmap variable (a folder). The provided flag
> 	 *  determines if resources should be dirtied if they have HREF's that
> 	 *  should be changed.
> 	 *  
> 	 * @param var the path map variable name
> 	 * @param val the path map variable value (must be an encoded URI)
> 	 * @param dirtyResources true, if resources should be dirtied so that
> 	 *  their modified HREF's are saved. false, otherwise.
> 	 */
> 	public static void setPathVariable(String var, String val, boolean dirtyResources) {
> 		internalSetPathVariable(var, val);
> 
> 		for (Iterator i = allInstances().iterator(); i.hasNext();) {
> 			((PathmapManager) i.next()).resyncEntries(true, dirtyResources);
> 		}
> 	}
> 
> 	private static void internalSetPathVariable(String var, String val) {
339a365,400
> 	}
> 	
> 	/**
> 	 * Set the value of a pathmap variable to point to a specific file (not a folder). The
> 	 *  provided flag determines whether resource should be dirtied if their HREF's need to
> 	 *  be changed.
> 	 * 
> 	 * @param var the path map variable name
> 	 * @param val the path map variable value (must be an encoded URI pointing to a file, not a folder)
> 	 * @param dirtyResources true, if resources should be dirtied so that their HREF's can be
> 	 * changed. false, otherwise.
> 	 */
> 	public static void setFilePathVariable(String var, String val, boolean dirtyResources) {
> 		FILE_VARIABLES.add(var);
> 		internalSetPathVariable(var, val);
> 		for (Iterator i = allInstances().iterator(); i.hasNext();) {
> 			((PathmapManager) i.next()).resyncEntries(true, dirtyResources);
> 		}
> 	}
> 	
> 	/**
> 	 * Sets the value of a map of pathmap variables to point to specific files (not folders)
> 	 * The provided flag determines whether resource should be dirtied if their HREF's need to
> 	 * be changed.
> 	 *
> 	 * @param settings A map of new variables(Strings) to their values(Strings).
> 	 * @param dirtyResource true, if resources should be dirtied so that their HREF's can
> 	 *  be changed. false, otherwise.
> 	 */
> 	public static void setFilePathVariables(Map settings, boolean dirtyResources) {
> 		FILE_VARIABLES.addAll(settings.keySet());
> 		
> 		for (Iterator i = settings.entrySet().iterator(); i.hasNext();) {
> 			Map.Entry entry = (Map.Entry)i.next();
> 			internalSetPathVariable((String)entry.getKey(), (String)entry.getValue());
> 		}
342c403,423
< 			((PathmapManager) i.next()).resyncEntries(true);
---
> 			((PathmapManager) i.next()).resyncEntries(true, dirtyResources);
> 		}
> 	}
> 	
> 	/**
> 	 * Sets the value of a map of pathmap variables to point specific folders (not files).
> 	 * The provided flag determines whether resource should be dirtied if their HREF's need
> 	 * to be changed.
> 	 * 
> 	 * @param settings A map of new variables(Strings) to their values(Strings).
> 	 * @param dirtyResource ture, if resources should be dirtied so that their HREF's can
> 	 *  be changed. false, otherwise.
> 	 */
> 	public static void setPathVariables(Map settings, boolean dirtyResources) {
> 		for (Iterator i = settings.entrySet().iterator(); i.hasNext();) {
> 			Map.Entry entry = (Map.Entry)i.next();
> 			internalSetPathVariable((String)entry.getKey(), (String)entry.getValue());
> 		}
> 		
> 		for (Iterator i = allInstances().iterator(); i.hasNext();) {
> 			((PathmapManager) i.next()).resyncEntries(true, dirtyResources);
351a433,456
> 	public IStatus addFilePathVariable(String name, String value, boolean dirtyResources) {
> 		setFilePathVariable(name, value, dirtyResources);
> 		
> 		return Status.OK_STATUS; // TODO: report accurate status
> 	}
> 	
> 	public IStatus addFilePathVariables(Map settings, boolean dirtyResources) {
> 		setFilePathVariables(settings, dirtyResources);
> 		
> 		return Status.OK_STATUS; // TODO: report accurate status
> 	}
> 	
> 	public IStatus addFolderPathVariable(String name, String value, boolean dirtyResources) {
> 		setPathVariable(name, value, dirtyResources);
> 		
> 		return Status.OK_STATUS;
> 	}
> 	
> 	public IStatus addFolderPathVariables(Map settings, boolean dirtyResources) {
> 		setPathVariables(settings, dirtyResources);
> 		
> 		return Status.OK_STATUS;
> 	}
> 	
359c464
< 			((PathmapManager) i.next()).resyncEntries(true);
---
> 			((PathmapManager) i.next()).resyncEntries(true, true);
511c616
< 			resyncEntries(false);
---
> 			resyncEntries(false, true);
521c626
< 			resyncEntries(true);
---
> 			resyncEntries(true, true);
528c633
< 	private void resyncEntries(boolean resync) {
---
> 	private void resyncEntries(boolean resync, boolean dirtyResources) {
595a701
> 		if (dirtyResources) {
620a727
> 	}
640c747,748
< 			if (val.charAt(len - 1) != EMFCoreConstants.PATH_SEPARATOR)
---
> 			// TODO
> 			if (!FILE_VARIABLES.contains(var) && val.charAt(len - 1) != EMFCoreConstants.PATH_SEPARATOR)
731c839,840
< 		if (var.charAt(len - 1) != EMFCoreConstants.PATH_SEPARATOR)
---
> 		//TODO
> 		if (!FILE_VARIABLES.contains(var) && var.charAt(len - 1) != EMFCoreConstants.PATH_SEPARATOR)
