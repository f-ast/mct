31,32d30
< 	private final GMFGenPackage GMFGEN = GMFGenPackage.eINSTANCE;
< 
33a32,33
> 		final GMFGenPackage GMFGEN = GMFGenPackage.eINSTANCE;
> 		
95c95
< 		preserveIfSet(GMFGEN.getGenCompartment(), GMFGEN.getGenCompartment_ListLayout());
---
> 		restore(GMFGEN.getGenCompartment(), GMFGEN.getGenCompartment_ListLayout());
109,117c109
< 		addDecision(GMFGEN.getGenLink(), new Decision(GMFGEN.getGenLink_TreeBranch()) {
< 
< 			@Override
< 			public void apply(EObject current, EObject old) {
< 				if (!((GenLink) old).isTreeBranch()) {
< 					((GenLink) current).setTreeBranch(false);
< 				}
< 			}
< 		});
---
> 		preserveIfSet(GMFGEN.getGenLink(), GMFGEN.getGenLink_TreeBranch());
189c181
< 		preserveIfSet(GMFGEN.getGenCustomPropertyTab(), GMFGEN.getGenPropertyTab_Label());
---
> 		addDecision(GMFGEN.getGenCustomPropertyTab(), new KeepOldIfNewIsByPatternOrNotSet(GMFGEN.getGenPropertyTab_Label(), "^Core$")); //$NON-NLS-1$
230a223
> 		// XXX ReflectiveMatcher(Kind) instead?
234,239c227,228
< 				if (false == current instanceof GenStandardPreferencePage) {
< 					return false;
< 				}
< 				if (false == old instanceof GenStandardPreferencePage) {
< 					return false;
< 				}
---
> 				assert current instanceof GenStandardPreferencePage;
> 				assert old instanceof GenStandardPreferencePage;
251a241,246
> 		//
> 		// preserve model access attributes, or completely copy old if none in the new model found.
> 		setMatcher(GMFGEN.getDynamicModelAccess(), ALWAYS_MATCH);
> 		preserveIfSet(GMFGEN.getDynamicModelAccess(), GMFGEN.getDynamicModelAccess_ClassName());
> 		preserveIfSet(GMFGEN.getDynamicModelAccess(), GMFGEN.getDynamicModelAccess_PackageName());
> 		setCopier(GMFGEN.getDynamicModelAccess(), Copier.COMPLETE_COPY);
253a249
> 	// XXX rename?: preserveOld
