14a15
> import java.awt.Graphics2D;
46a48
> import org.eclipse.draw2d.SWTGraphics;
83a86,87
> import org.eclipse.swt.graphics.GC;
> import org.eclipse.swt.graphics.Image;
89,91c93,95
<  * This class supports printing using the Java Print Service API.
<  * The logic of calculating page break etc. follows that of SWT printing
<  * but the actual printing is done asynchronously in a platform independent way.
---
>  * This class supports printing using the Java Print Service API. The logic of
>  * calculating page break etc. follows that of SWT printing but the actual
>  * printing is done asynchronously in a platform independent way.
107c111,112
< 	// Page information that is collected up front and used during the async printing calls.
---
> 	// Page information that is collected up front and used during the async
> 	// printing calls.
188,193c193,201
< 	 * @param dgrmEP The diagram edit part to print
< 	 * @param loadedPreferences true if existing prefs could be loaded
<      * 		successfully, false if not and defaults are being used.  This parameter
<      * 		is important to obtain the correct page break bounds.
< 	 * @param fPreferences the preferenceStore that could either contain
<      * 		existing preferences or defaults
---
> 	 * @param dgrmEP
> 	 *            The diagram edit part to print
> 	 * @param loadedPreferences
> 	 *            true if existing prefs could be loaded successfully, false if
> 	 *            not and defaults are being used. This parameter is important
> 	 *            to obtain the correct page break bounds.
> 	 * @param fPreferences
> 	 *            the preferenceStore that could either contain existing
> 	 *            preferences or defaults
263,264c271,272
< 	 * Print the diagram figure to fit the number and rows and columns
<      * specified by the user.
---
> 	 * Print the diagram figure to fit the number and rows and columns specified
> 	 * by the user.
266,271c274,282
< 	 * @param dgrmEP The diagram edit part to print
< 	 * @param loadedPreferences true if existing prefs could be loaded
<      * 		successfully, false if not and defaults are being used.  This parameter
<      * 		is important to obtain the correct page break bounds.
< 	 * @param fPreferences the preferenceStore that could either contain
<      * 		existing preferences or defaults
---
> 	 * @param dgrmEP
> 	 *            The diagram edit part to print
> 	 * @param loadedPreferences
> 	 *            true if existing prefs could be loaded successfully, false if
> 	 *            not and defaults are being used. This parameter is important
> 	 *            to obtain the correct page break bounds.
> 	 * @param fPreferences
> 	 *            the preferenceStore that could either contain existing
> 	 *            preferences or defaults
364c375,377
< 			swtGraphics = new GraphicsToGraphics2DAdaptor(
---
> 			printGraphics.setClip(0, 0, (int) pageFormat.getWidth(),
> 					(int) pageFormat.getHeight());
> 			swtGraphics = new PrinterGraphicsToGraphics2DAdapter(
367,389c380
< 									.getHeight())) {
< 				/*
< 				 * (non-Javadoc)
< 				 * @see org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.graphics.GraphicsToGraphics2DAdaptor#setLineWidth(int)
< 				 */
< 				public void setLineWidth(int width) {
< 					super.setLineWidth(width);
< 
< 					BasicStroke scaledStroke = getStroke();
< 					//
< 					// Make a special case for line thickness to take the printer
< 					// resolution into account.
< 					//
< 					scaledStroke = new BasicStroke(
< 							(float) (width * AWT_DPI_CONST / 100), 
< 							scaledStroke.getEndCap(),
< 							scaledStroke.getLineJoin(), 
< 							scaledStroke.getMiterLimit(), 
< 							scaledStroke.getDashArray(), 0);
< 
< 					getGraphics2D().setStroke(scaledStroke);
< 				}
< 			};
---
> 									.getHeight()));
394d384
< 			
396a387
> 
403a395
> 	 * 
424,426c416,417
< 	protected PrintRequestAttributeSet initializePrintOptions(DocPrintJob printJob,
< 			String jobName,
< 			IPreferenceStore fPreferences) {
---
> 	protected PrintRequestAttributeSet initializePrintOptions(
> 			DocPrintJob printJob, String jobName, IPreferenceStore fPreferences) {
428c419,420
< 		PrintOptions advancedOptions = ((PrintHelper) (printHelper)).getPrintOptions();
---
> 		PrintOptions advancedOptions = ((PrintHelper) (printHelper))
> 				.getPrintOptions();
459d450
< 
474,495d464
< 
< 		if (advancedOptions.isChromaticityColor()) {
< 			printRequestAttributeSet.add(Chromaticity.COLOR);
< 		} else {
< 			printRequestAttributeSet.add(Chromaticity.MONOCHROME);
< 		}
< 
< 		if (advancedOptions.isQualityLow()) {
< 			printRequestAttributeSet.add(PrintQuality.DRAFT);
< 		} else if (advancedOptions.isQualityMed()) {
< 			printRequestAttributeSet.add(PrintQuality.NORMAL);
< 		} else if (advancedOptions.isQualityHigh()) {
< 			printRequestAttributeSet.add(PrintQuality.HIGH);
< 		}
< 		if (advancedOptions.isSideDuplex()) {
< 			printRequestAttributeSet.add(Sides.DUPLEX);
< 		} else if (advancedOptions.isSideOneSided()) {
< 			printRequestAttributeSet.add(Sides.ONE_SIDED);
< 		} else if (advancedOptions.isSideTumble()) {
< 			printRequestAttributeSet.add(Sides.TUMBLE);
< 		}
< 
506,508c475,477
< 		printRequestAttributeSet.add(new MediaPrintableArea((float) 0.0,
< 				(float) 0.0, (mediaSize.getX(MediaSize.INCH)), (mediaSize
< 						.getY(MediaSize.INCH)), MediaPrintableArea.INCH));
---
> 		printRequestAttributeSet.add(new MediaPrintableArea(0f, 0f, (mediaSize
> 				.getX(MediaSize.INCH)), (mediaSize.getY(MediaSize.INCH)),
> 				MediaPrintableArea.INCH));
540,543c509,511
< 		
< 		PrintRequestAttributeSet printRequestAttributeSet = initializePrintOptions(printJob,
< 				diagramEditPart
< 				.getDiagramView().getName(), fPreferences);
---
> 		PrintRequestAttributeSet printRequestAttributeSet = initializePrintOptions(
> 				printJob, diagramEditPart.getDiagramView().getName(),
> 				fPreferences);
578c546,547
< 	 * @param page indicates which page to print.
---
> 	 * @param page
> 	 *            indicates which page to print.
629,632c598,603
< 						(scaledWidth - margins.left - margins.right) * (colIndex - 1) + figureBounds.x, 
< 						(scaledHeight - margins.bottom - margins.top)* (rowIndex - 1) + figureBounds.y, 
< 						 scaledWidth - margins.right - margins.left, 
< 						 scaledHeight - margins.top - margins.bottom);
---
> 				(scaledWidth - margins.left - margins.right) * (colIndex - 1)
> 						+ figureBounds.x,
> 				(scaledHeight - margins.bottom - margins.top) * (rowIndex - 1)
> 						+ figureBounds.y, scaledWidth - margins.right
> 						- margins.left, scaledHeight - margins.top
> 						- margins.bottom);
643c614,615
< 	 * @param margins the page margins to adjust
---
> 	 * @param margins
> 	 *            the page margins to adjust
655a628,697
> 	/**
> 	 * A specialized graphics adapter used in printing.
> 	 * 
> 	 * There are several issues with the base adapter such as incorrect line
> 	 * width settings and issues with gradient fill causing printing to be
> 	 * offset wich are concerns specific to printing.
> 	 * 
> 	 * @author James Bruck (jbruck)
> 	 * 
> 	 */
> 	private class PrinterGraphicsToGraphics2DAdapter extends
> 			GraphicsToGraphics2DAdaptor {
> 
> 		public PrinterGraphicsToGraphics2DAdapter(Graphics2D graphics,
> 				Rectangle viewPort) {
> 			super(graphics, viewPort);
> 		}
> 
> 		/*
> 		 * (non-Javadoc)
> 		 * 
> 		 * @see org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.graphics.GraphicsToGraphics2DAdaptor#setLineWidth(int)
> 		 */
> 		public void setLineWidth(int width) {
> 			super.setLineWidth(width);
> 
> 			BasicStroke scaledStroke = getStroke();
> 			//
> 			// Make a special case for line thickness to take the
> 			// printer resolution into account.
> 			//
> 			scaledStroke = new BasicStroke(
> 					(float) (width * AWT_DPI_CONST / 100), scaledStroke
> 							.getEndCap(), scaledStroke.getLineJoin(),
> 					scaledStroke.getMiterLimit(), scaledStroke.getDashArray(),
> 					0);
> 
> 			getGraphics2D().setStroke(scaledStroke);
> 		}
> 
> 		/*
> 		 * (non-Javadoc)
> 		 * 
> 		 * @see org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.graphics.GraphicsToGraphics2DAdaptor#fillGradient(int,
> 		 *      int, int, int, boolean)
> 		 */
> 		public void fillGradient(int x, int y, int w, int h, boolean vertical) {
> 			//
> 			// A bug in the draw2d layer causes printed output to be
> 			// offset if we use gradient fill. We will use an image
> 			// instead.
> 			//
> 			Image tempImage = new Image(Display.getDefault(),
> 					new org.eclipse.swt.graphics.Rectangle(x, y, w, h));
> 			GC gc = new GC(tempImage);
> 			SWTGraphics tempGraphics = new SWTGraphics(gc);
> 
> 			tempGraphics.setForegroundColor(swtGraphics.getForegroundColor());
> 			tempGraphics.setBackgroundColor(swtGraphics.getBackgroundColor());
> 			tempGraphics.fillGradient(
> 					new org.eclipse.draw2d.geometry.Rectangle(0, 0, w, h),
> 					vertical);
> 			drawImage(tempImage, 0, 0, w, h, x, y, w, h);
> 
> 			tempGraphics.dispose();
> 			gc.dispose();
> 			tempImage.dispose();
> 		}
> 	}
> 
