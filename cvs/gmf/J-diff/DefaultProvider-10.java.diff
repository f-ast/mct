34d33
< import org.eclipse.draw2d.internal.graph.BreakCycles;
384,385c383,384
< 		edge.padding = Math.max(edge.padding, calculateEdgePadding(connectionEP, affectingChildren));
< 		edge.delta = Math.max(edge.delta, affectingChildren.size() / 2);
---
> 		edge.setPadding(Math.max(edge.getPadding(), calculateEdgePadding(connectionEP, affectingChildren)));
> 		edge.setDelta(Math.max(edge.getDelta(), affectingChildren.size() / 2));
474,509d472
< 	 * connectNonConnectedSubgraphs Since the GEF algorithm only handles fully
< 	 * connected graphs, we have to simulate this when there are nodes that
< 	 * aren't connected. This routine will create a "ghost" node that serves as
< 	 * a parent for all nodes that don't have any incoming connections.
< 	 * 
< 	 * @param nodes
< 	 *            List of Nodes that are to be contained in the graph.
< 	 * @param edges
< 	 *            List of Edges that are to be contained in the graph.
< 	 */
< 	private void connectNonConnectedSubgraphs(List nodes, List edges) {
< 		Node ghostNode = new Node();
< 		ghostNode.width = 1;
< 		ghostNode.height = 1;
< 		ghostNode.setPadding(new Insets(0));
< 
< 		nodes.add(ghostNode);
< 
< 		ListIterator ni = nodes.listIterator();
< 		while (ni.hasNext()) {
< 			Node n = (Node) ni.next();
< 
< 			if (n == ghostNode)
< 				continue;
< 
< 			// if node has no incoming connections then assume it is
< 			// not-connected to the main graph.
< 			if (n.incoming.isEmpty()) {
< 				Edge e = new Edge(ghostNode, n);
< 				e.weight = 0;
< 				edges.add(e);
< 			}
< 		}
< 	}
< 
< 	/**
538c501
< 		new BreakCycles().visit(g);
---
> 		//new BreakCycles().visit(g);
542c505
< 		connectNonConnectedSubgraphs(nodes, edges);
---
> 		//connectNonConnectedSubgraphs(nodes, edges);
699c662,663
< 		Rectangle start = translateFromGraph(new Rectangle(edge.start.x, edge.start.y, 0, 0));
---
> 		Point startpt = edge.getPoints().getFirstPoint();
> 		Rectangle start = translateFromGraph(new Rectangle(startpt.x, startpt.y, 0, 0));
714c678,679
< 		Rectangle end = translateFromGraph(new Rectangle(edge.end.x, edge.end.y, 0, 0));
---
> 		Point endpt = edge.getPoints().getLastPoint();
> 		Rectangle end = translateFromGraph(new Rectangle(endpt.x, endpt.y, 0, 0));
