13a14
> import java.lang.reflect.InvocationTargetException;
14a16,19
> import java.util.ArrayList;
> import java.util.Collections;
> import java.util.HashMap;
> import java.util.List;
15a21,22
> import org.eclipse.core.runtime.IProgressMonitor;
> import org.eclipse.core.runtime.Platform;
22a30
> import org.eclipse.gmf.common.codegen.ImportAssistant;
34a43,50
> import org.eclipse.gmf.internal.xpand.BufferOutput;
> import org.eclipse.gmf.internal.xpand.ResourceManager;
> import org.eclipse.gmf.internal.xpand.XpandFacade;
> import org.eclipse.gmf.internal.xpand.expression.Variable;
> import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;
> import org.eclipse.gmf.internal.xpand.model.XpandExecutionContextImpl;
> import org.eclipse.gmf.internal.xpand.util.BundleResourceManager;
> import org.eclipse.gmf.internal.xpand.util.ContextFactory;
58a75,78
> import org.eclipse.gmf.codegen.templates.lite.navigator.NavigatorActionProviderGenerator;
> import org.eclipse.gmf.codegen.templates.lite.navigator.NavigatorContentProviderGenerator;
> import org.eclipse.gmf.codegen.templates.lite.navigator.NavigatorLabelProviderGenerator;
> import org.eclipse.gmf.codegen.templates.lite.navigator.NavigatorLinkHelperGenerator;
74a95,97
> import org.eclipse.gmf.codegen.templates.navigator.NavigatorGroupGenerator;
> import org.eclipse.gmf.codegen.templates.navigator.NavigatorItemGenerator;
> import org.eclipse.gmf.codegen.templates.navigator.NavigatorSorterGenerator;
83a107
> 	private static final String CODEGEN_PLUGIN_ID = "org.eclipse.gmf.codegen";	//$NON-NLS-1$
90a115
> 	private ResourceManager myResourceManager;
94a120,121
> 		URL liteTemplatesPath = getTemplatesBundle().getEntry("/templates/");
> 		URL runtimeTemplatesPath = Platform.getBundle(CODEGEN_PLUGIN_ID).getEntry("/templates/");
96,97c123,124
< 				usePrecompiled ? null : templateDirectory != null && templateDirectory.indexOf(":") == -1 ? URI.createPlatformResourceURI(templateDirectory).toString() : templateDirectory,
< 				getTemplatesBundle().getEntry("/templates/").toString() };
---
> 				usePrecompiled ? null : templateDirectory != null && templateDirectory.indexOf(":") == -1 ? URI.createPlatformResourceURI(templateDirectory, true).toString() : templateDirectory,
> 				liteTemplatesPath.toString(), runtimeTemplatesPath.toString() };
98a126,127
> 
> 		myResourceManager = new BundleResourceManager(liteTemplatesPath, runtimeTemplatesPath);
158a188,196
> 
> 		put(tr, "/navigator/NavigatorContentProvider.javajet", NavigatorContentProviderGenerator.class);
> 		put(tr, "/navigator/NavigatorLabelProvider.javajet", NavigatorLabelProviderGenerator.class);
> 		put(tr, "/navigator/NavigatorLinkHelper.javajet", NavigatorLinkHelperGenerator.class);
> 		put(tr, "/navigator/NavigatorSorter.javajet", NavigatorSorterGenerator.class);
> 		put(tr, "/navigator/NavigatorActionProvider.javajet", NavigatorActionProviderGenerator.class);
> 		put(tr, "/navigator/NavigatorGroup.javajet", NavigatorGroupGenerator.class);
> 		put(tr, "/navigator/NavigatorItem.javajet", NavigatorItemGenerator.class);
> 
329c367
< 	private static void put(StaticTemplateRegistry tr, String path, Class precompiledTemplate) {
---
> 	private static void put(StaticTemplateRegistry tr, String path, Class<?> precompiledTemplate) {
337c375
< 	private TextEmitter retrieve(Class key) throws UnexpectedBehaviourException {
---
> 	private TextEmitter retrieve(Class<?> key) throws UnexpectedBehaviourException {
344a383,386
> 	private BinaryEmitter newGIFEmitter(String relativePath) throws UnexpectedBehaviourException {
> 		return new GIFEmitter(checkTemplateLocation(relativePath));
> 	}
> 
375a418,509
> 
> 	public TextEmitter getNavigatorContentProviderEmitter() throws UnexpectedBehaviourException {
> 		return retrieve(NavigatorContentProviderGenerator.class);
> 	}
> 
> 	public TextEmitter getNavigatorLabelProviderEmitter() throws UnexpectedBehaviourException {
> 		return retrieve(NavigatorLabelProviderGenerator.class);
> 	}
> 	
> 	public TextEmitter getNavigatorLinkHelperEmitter() throws UnexpectedBehaviourException {
> 		return retrieve(NavigatorLinkHelperGenerator.class);
> 	}
> 	
> 	public TextEmitter getNavigatorSorterEmitter() throws UnexpectedBehaviourException {
> 		return retrieve(NavigatorSorterGenerator.class);
> 	}
> 	
> 	public TextEmitter getNavigatorActionProviderEmitter() throws UnexpectedBehaviourException {
> 		return retrieve(NavigatorActionProviderGenerator.class);
> 	}
> 	
> 	public TextEmitter getAbstractNavigatorItemEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::navigator::AbstractNavigatorItem::AbstractNavigatorItem");
> 	}
> 	
> 	public TextEmitter getNavigatorGroupEmitter() throws UnexpectedBehaviourException {
> 		return retrieve(NavigatorGroupGenerator.class);
> 	}
> 
> 	public TextEmitter getNavigatorItemEmitter() throws UnexpectedBehaviourException {
> 		return retrieve(NavigatorItemGenerator.class);
> 	}
> 
> 	public BinaryEmitter getGroupIconEmitter() throws UnexpectedBehaviourException {
> 		return newGIFEmitter("/navigator/navigatorGroup.gif"); //$NON-NLS-1$
> 	}
> 
> 	private TextEmitter retrieveXpand(String templateFQN) {
> 		TextEmitter result = myCachedXpandEmitters.get(templateFQN);
> 		if (result == null) {
> 			result = new XpandTextEmitter(myResourceManager, templateFQN);
> 			myCachedXpandEmitters.put(templateFQN, result);
> 		}
> 		return result;
> 	}
> 
> 	private HashMap<String, TextEmitter> myCachedXpandEmitters = new HashMap<String, TextEmitter>();
> 	/*
> 	 * TODO: use same emitter as one in oeg.codegen? Or at least make them both subclasses of the same abstract superclass
> 	 * (to have possibility to use independent ways to extract the target and the arguments from the passed arguments).
> 	 */
> 	private static class XpandTextEmitter implements TextEmitter {
> 		private final ResourceManager myResourceManager;
> 		private final String myTemplateFQN;
> 
> 		public XpandTextEmitter(ResourceManager manager, String templateFQN) {
> 			myResourceManager = manager;
> 			myTemplateFQN = templateFQN;
> 		}
> 
> 		public String generate(IProgressMonitor monitor, Object[] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
> 			StringBuilder result = new StringBuilder();
> 			new XpandFacade(createContext(result)).evaluate(myTemplateFQN, extractTarget(arguments), extractArguments(arguments));
> 			return result.toString();
> 		}
> 
> 		protected Object extractTarget(Object[] arguments) {
> 			assert arguments != null && arguments.length > 0;
> 			return arguments[0];
> 		}
> 
> 		protected Object[] extractArguments(Object[] arguments) {
> 			assert arguments != null && arguments.length > 0;
> 			ArrayList<Object> res = new ArrayList<Object>(arguments.length);
> 			// strip first one off, assume it's target
> 			for (int i = 1; i < arguments.length; i++) {
> 				if (false == arguments[i] instanceof ImportAssistant) {
> 					// strip assistant off
> 					res.add(arguments[i]);
> 				}
> 			}
> 			return res.toArray();
> 		}
> 
> 		private XpandExecutionContext createContext(StringBuilder result) {
> 			final BufferOutput output = new BufferOutput(result);
> 			final List<Variable> globals = Collections.emptyList();
> 			final XpandExecutionContext xpandContext = ContextFactory.createXpandContext(myResourceManager, output, globals);
> 			((XpandExecutionContextImpl) xpandContext).setContextClassLoader(getClass().getClassLoader());
> 			return xpandContext;
> 		}
> 	}
