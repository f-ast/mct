16a17
> import org.eclipse.emf.ecore.EcorePackage;
50d50
< 		
107c107,133
< 	private final ResourceSet resourceSet = new ResourceSetImpl();
---
> 	private final ResourceSet resourceSet = new ResourceSetImpl() {
> 		protected Resource delegatedGetResource(URI uri, boolean loadOnDemand) {
> 			/* 
> 			 * EMF 2.5 (Aug 2, 2008, [189169]) has changed the way Ecore.ecore references primitive types, i.e. #//EBoolean (same file)
> 			 * instead of EcorePackage.nsURI#//EBoolean. Hence, if Ecore.ecore happen to be loaded as a resource
> 			 * (e.g. gmfgen.ecore loaded by WorkspaceModelRegistry from a workspace, with references to genmodel.ecore and 
> 			 * ecore.ecore expressed as platform:/plugin/), primitive attributes of Ecore model objects can't be matched
> 			 * against EcorePackage.eINSTANCE.getEBoolean() metaobjects
> 			 * Basically, that's the same issue we had few times already, when EClass from EcorePackage doesn't match 
> 			 * someMetaclass.eClass() if someMetaclass was loaded from a file/resource. Now, this problem applies to 
> 			 * primitive types as well.
> 			 * 
> 			 * As a solution, replace platform URIs with nsURIs (unless former were overriden with some workspace-local models) 
> 			 */
> 			final Map<URI, URI> map = getURIConverter().getURIMap();
> 			final URI emfGenModel = URI.createURI("platform:/plugin/org.eclipse.emf.codegen.ecore/model/GenModel.ecore");
> 			if (uri.equals(emfGenModel) && !map.containsKey(emfGenModel)) {
> 				 // GenModelPackage.nsURI
> 				return super.delegatedGetResource(URI.createURI("http://www.eclipse.org/emf/2002/GenModel"), loadOnDemand);
> 			}
> 			final URI emfEcore = URI.createURI("platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore");
> 			if (uri.equals(emfEcore) && !map.containsKey(emfEcore)) {
> 				return super.delegatedGetResource(URI.createURI(EcorePackage.eNS_URI), loadOnDemand);
> 			}
> 			return super.delegatedGetResource(uri, loadOnDemand);
> 		};
> 	};
