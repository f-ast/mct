8a9,10
> import java.util.Collection;
> 
10a13,15
> import org.eclipse.emf.common.notify.NotificationChain;
> import org.eclipse.emf.common.util.EList;
> import org.eclipse.emf.common.util.EMap;
11a17,19
> import org.eclipse.emf.ecore.EStructuralFeature;
> import org.eclipse.emf.ecore.EcorePackage;
> import org.eclipse.emf.ecore.InternalEObject;
12a21,24
> import org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl;
> import org.eclipse.emf.ecore.util.EObjectResolvingEList;
> import org.eclipse.emf.ecore.util.EcoreEMap;
> import org.eclipse.emf.ecore.util.InternalEList;
13a26,27
> import org.eclipse.gmf.codegen.gmfgen.GenLink;
> import org.eclipse.gmf.codegen.gmfgen.GenNode;
23a38,42
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.ToolEntryImpl#getGenNodes <em>Gen Nodes</em>}</li>
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.ToolEntryImpl#getGenLinks <em>Gen Links</em>}</li>
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.ToolEntryImpl#getElements <em>Elements</em>}</li>
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.ToolEntryImpl#getQualifiedToolName <em>Qualified Tool Name</em>}</li>
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.ToolEntryImpl#getProperties <em>Properties</em>}</li>
29c48
< public abstract class ToolEntryImpl extends EntryBaseImpl implements ToolEntry {
---
> public class ToolEntryImpl extends EntryBaseImpl implements ToolEntry {
50a70,119
> 	 * The cached value of the '{@link #getGenNodes() <em>Gen Nodes</em>}' reference list.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @see #getGenNodes()
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected EList genNodes = null;
> 
> 	/**
> 	 * The cached value of the '{@link #getGenLinks() <em>Gen Links</em>}' reference list.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @see #getGenLinks()
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected EList genLinks = null;
> 
> 	/**
> 	 * The default value of the '{@link #getQualifiedToolName() <em>Qualified Tool Name</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @see #getQualifiedToolName()
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected static final String QUALIFIED_TOOL_NAME_EDEFAULT = null;
> 
> 	/**
> 	 * The cached value of the '{@link #getQualifiedToolName() <em>Qualified Tool Name</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @see #getQualifiedToolName()
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected String qualifiedToolName = QUALIFIED_TOOL_NAME_EDEFAULT;
> 
> 	/**
> 	 * The cached value of the '{@link #getProperties() <em>Properties</em>}' map.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @see #getProperties()
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected EMap properties = null;
> 
> 	/**
93a163,244
> 	public EList getGenNodes() {
> 		if (genNodes == null) {
> 			genNodes = new EObjectResolvingEList(GenNode.class, this, GMFGenPackage.TOOL_ENTRY__GEN_NODES);
> 		}
> 		return genNodes;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EList getGenLinks() {
> 		if (genLinks == null) {
> 			genLinks = new EObjectResolvingEList(GenLink.class, this, GMFGenPackage.TOOL_ENTRY__GEN_LINKS);
> 		}
> 		return genLinks;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public EList getElements() {
> 		if (getGenNodes().isEmpty()) {
> 			return getGenLinks();
> 		}
> 		return getGenNodes();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public String getQualifiedToolName() {
> 		return qualifiedToolName;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public void setQualifiedToolName(String newQualifiedToolName) {
> 		String oldQualifiedToolName = qualifiedToolName;
> 		qualifiedToolName = newQualifiedToolName;
> 		if (eNotificationRequired())
> 			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME, oldQualifiedToolName, qualifiedToolName));
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EMap getProperties() {
> 		if (properties == null) {
> 			properties = new EcoreEMap(EcorePackage.Literals.ESTRING_TO_STRING_MAP_ENTRY, EStringToStringMapEntryImpl.class, this, GMFGenPackage.TOOL_ENTRY__PROPERTIES);
> 		}
> 		return properties;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
> 		switch (featureID) {
> 			case GMFGenPackage.TOOL_ENTRY__PROPERTIES:
> 				return ((InternalEList)getProperties()).basicRemove(otherEnd, msgs);
> 		}
> 		return super.eInverseRemove(otherEnd, featureID, msgs);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
97a249,259
> 			case GMFGenPackage.TOOL_ENTRY__GEN_NODES:
> 				return getGenNodes();
> 			case GMFGenPackage.TOOL_ENTRY__GEN_LINKS:
> 				return getGenLinks();
> 			case GMFGenPackage.TOOL_ENTRY__ELEMENTS:
> 				return getElements();
> 			case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME:
> 				return getQualifiedToolName();
> 			case GMFGenPackage.TOOL_ENTRY__PROPERTIES:
> 				if (coreType) return getProperties();
> 				else return getProperties().map();
111a274,287
> 			case GMFGenPackage.TOOL_ENTRY__GEN_NODES:
> 				getGenNodes().clear();
> 				getGenNodes().addAll((Collection)newValue);
> 				return;
> 			case GMFGenPackage.TOOL_ENTRY__GEN_LINKS:
> 				getGenLinks().clear();
> 				getGenLinks().addAll((Collection)newValue);
> 				return;
> 			case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME:
> 				setQualifiedToolName((String)newValue);
> 				return;
> 			case GMFGenPackage.TOOL_ENTRY__PROPERTIES:
> 				((EStructuralFeature.Setting)getProperties()).set(newValue);
> 				return;
125a302,313
> 			case GMFGenPackage.TOOL_ENTRY__GEN_NODES:
> 				getGenNodes().clear();
> 				return;
> 			case GMFGenPackage.TOOL_ENTRY__GEN_LINKS:
> 				getGenLinks().clear();
> 				return;
> 			case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME:
> 				setQualifiedToolName(QUALIFIED_TOOL_NAME_EDEFAULT);
> 				return;
> 			case GMFGenPackage.TOOL_ENTRY__PROPERTIES:
> 				getProperties().clear();
> 				return;
138a327,336
> 			case GMFGenPackage.TOOL_ENTRY__GEN_NODES:
> 				return genNodes != null && !genNodes.isEmpty();
> 			case GMFGenPackage.TOOL_ENTRY__GEN_LINKS:
> 				return genLinks != null && !genLinks.isEmpty();
> 			case GMFGenPackage.TOOL_ENTRY__ELEMENTS:
> 				return !getElements().isEmpty();
> 			case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME:
> 				return QUALIFIED_TOOL_NAME_EDEFAULT == null ? qualifiedToolName != null : !QUALIFIED_TOOL_NAME_EDEFAULT.equals(qualifiedToolName);
> 			case GMFGenPackage.TOOL_ENTRY__PROPERTIES:
> 				return properties != null && !properties.isEmpty();
153a352,353
> 		result.append(", qualifiedToolName: ");
> 		result.append(qualifiedToolName);
162c362
< 		return CodeGenUtil.validJavaIdentifier("create" + getTitleKey() + getEntryID() + "CreationTool");
---
> 		return CodeGenUtil.validJavaIdentifier("create" + getTitle() + getEntryID() + "CreationTool");
164d363
< 
