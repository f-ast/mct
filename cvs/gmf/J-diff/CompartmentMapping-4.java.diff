21d20
<  *   <li>{@link org.eclipse.gmf.mappings.CompartmentMapping#getParentNodeMapping <em>Parent Node Mapping</em>}</li>
23c22,23
<  *   <li>{@link org.eclipse.gmf.mappings.CompartmentMapping#getChildNodes <em>Child Nodes</em>}</li>
---
>  *   <li>{@link org.eclipse.gmf.mappings.CompartmentMapping#getParentNode <em>Parent Node</em>}</li>
>  *   <li>{@link org.eclipse.gmf.mappings.CompartmentMapping#getChildren <em>Children</em>}</li>
33,49d32
< 	 * Returns the value of the '<em><b>Parent Node Mapping</b></em>' container reference.
< 	 * It is bidirectional and its opposite is '{@link org.eclipse.gmf.mappings.AbstractNodeMapping#getCompartmentMappings <em>Compartment Mappings</em>}'.
< 	 * <!-- begin-user-doc -->
< 	 * <p>
< 	 * If the meaning of the '<em>Parent Node Mapping</em>' container reference isn't clear,
< 	 * there really should be more of a description here...
< 	 * </p>
< 	 * <!-- end-user-doc -->
< 	 * @return the value of the '<em>Parent Node Mapping</em>' container reference.
< 	 * @see org.eclipse.gmf.mappings.GMFMapPackage#getCompartmentMapping_ParentNodeMapping()
< 	 * @see org.eclipse.gmf.mappings.AbstractNodeMapping#getCompartmentMappings
< 	 * @model opposite="compartmentMappings" required="true" changeable="false"
< 	 * @generated
< 	 */
< 	AbstractNodeMapping getParentNodeMapping();
< 
< 	/**
76,78c59,78
< 	 * Returns the value of the '<em><b>Child Nodes</b></em>' reference list.
< 	 * The list contents are of type {@link org.eclipse.gmf.mappings.ChildNodeMapping}.
< 	 * It is bidirectional and its opposite is '{@link org.eclipse.gmf.mappings.ChildNodeMapping#getCompartment <em>Compartment</em>}'.
---
> 	 * Returns the value of the '<em><b>Parent Node</b></em>' container reference.
> 	 * It is bidirectional and its opposite is '{@link org.eclipse.gmf.mappings.NodeMapping#getCompartments <em>Compartments</em>}'.
> 	 * <!-- begin-user-doc -->
> 	 * <p>
> 	 * If the meaning of the '<em>Parent Node</em>' container reference isn't clear,
> 	 * there really should be more of a description here...
> 	 * </p>
> 	 * <!-- end-user-doc -->
> 	 * @return the value of the '<em>Parent Node</em>' container reference.
> 	 * @see org.eclipse.gmf.mappings.GMFMapPackage#getCompartmentMapping_ParentNode()
> 	 * @see org.eclipse.gmf.mappings.NodeMapping#getCompartments
> 	 * @model opposite="compartments" required="true" changeable="false"
> 	 * @generated
> 	 */
> 	NodeMapping getParentNode();
> 
> 	/**
> 	 * Returns the value of the '<em><b>Children</b></em>' reference list.
> 	 * The list contents are of type {@link org.eclipse.gmf.mappings.ChildReference}.
> 	 * It is bidirectional and its opposite is '{@link org.eclipse.gmf.mappings.ChildReference#getCompartment <em>Compartment</em>}'.
81c81
< 	 * If the meaning of the '<em>Child Nodes</em>' reference list isn't clear,
---
> 	 * If the meaning of the '<em>Children</em>' reference list isn't clear,
85,88c85,88
< 	 * @return the value of the '<em>Child Nodes</em>' reference list.
< 	 * @see org.eclipse.gmf.mappings.GMFMapPackage#getCompartmentMapping_ChildNodes()
< 	 * @see org.eclipse.gmf.mappings.ChildNodeMapping#getCompartment
< 	 * @model type="org.eclipse.gmf.mappings.ChildNodeMapping" opposite="compartment"
---
> 	 * @return the value of the '<em>Children</em>' reference list.
> 	 * @see org.eclipse.gmf.mappings.GMFMapPackage#getCompartmentMapping_Children()
> 	 * @see org.eclipse.gmf.mappings.ChildReference#getCompartment
> 	 * @model type="org.eclipse.gmf.mappings.ChildReference" opposite="compartment"
91c91
< 	EList getChildNodes();
---
> 	EList getChildren();
