30a31
> import org.eclipse.gmf.internal.bridge.wizards.pages.simple.ResolvedItem.Resolution;
52a54,56
> 	/**
> 	 * Entry point to the structure builder. It walks over the domain model and builds resolutions tree.
> 	 */
54c58
< 		ResolvedItem item = new ResolvedItem(null, dms.getContents(), null, ResolvedItem.NO_RESOLUTIONS, false);
---
> 		ResolvedItem item = new ResolvedItem(null, dms.getContents(), null, ResolvedItem.NO_RESOLUTIONS, false); // root of the resolutions tree
65c69
< 		final EClass diagramClass = dms.getDiagramElement();
---
> 		final EClass diagramClass = dms.getDiagramElement(); // containment root of diagram elements
68c72
< 		Resolution[] resolutions = ResolvedItem.NODE_LINK_RESOLUTIONS;
---
> 		Resolution[] resolutions = ResolvedItem.NODE_LINK_RESOLUTIONS; // class may be resolved only as node or link
73c77
< 				resolution = null;
---
> 				resolution = null; // class is not in diagram containment hierarchy
79,83c83,89
< 				if (linkPattern.getSource() != null && !containmentClosure.contains(diagramClass, linkPattern.getSource().getEReferenceType(), domainPackage)) {
< 					resolution = null;
< 				}
< 				if (linkPattern.getTarget() != null && !containmentClosure.contains(diagramClass, linkPattern.getTarget().getEReferenceType(), domainPackage)) {
< 					resolution = null;
---
> 				if (linkPattern.getSource() != null &&
> 						!containmentClosure.contains(diagramClass, linkPattern.getSource().getEReferenceType(), domainPackage)) {
> 					resolution = null; // source is not in diagram containment hierarchy
> 				}
> 				if (linkPattern.getTarget() != null &&
> 						!containmentClosure.contains(diagramClass, linkPattern.getTarget().getEReferenceType(), domainPackage)) {
> 					resolution = null; // target is not in diagram containment hierarchy
102c108
< 		Resolution baseResolution = typeItem.getResolution() == null ? null : Resolution.LABEL;
---
> 		Resolution baseResolution = typeItem.getResolution() == null ? null : Resolution.LABEL; // exclude label if parent is excluded
107c113,114
< 		Resolution[] possibleResolutions = Arrays.equals(typeItem.getPossibleResolutions(), ResolvedItem.NO_RESOLUTIONS) ? ResolvedItem.NO_RESOLUTIONS : ResolvedItem.LABEL_RESOLUTIONS;
---
> 		Resolution[] possibleResolutions = Arrays.equals(typeItem.getPossibleResolutions(), ResolvedItem.NO_RESOLUTIONS) ?
> 				ResolvedItem.NO_RESOLUTIONS : ResolvedItem.LABEL_RESOLUTIONS; // exclude label if parent is excluded
109c116
< 			Resolution resolution = resolvedAttrs.contains(attribute) ? baseResolution : null;
---
> 			Resolution resolution = resolvedAttrs.contains(attribute) ? baseResolution : null; // include only attributes resolved as labels
115c122
< 		Resolution baseResolution = typeItem.getResolution() != Resolution.NODE ? null : Resolution.LINK;
---
> 		Resolution baseResolution = typeItem.getResolution() != Resolution.NODE ? null : Resolution.LINK; // ref links are available only for nodes
120c127,128
< 		Resolution[] possibleResolutions = Arrays.equals(typeItem.getPossibleResolutions(), ResolvedItem.NO_RESOLUTIONS) ? ResolvedItem.NO_RESOLUTIONS : ResolvedItem.LINK_RESOLUTIONS;
---
> 		Resolution[] possibleResolutions = Arrays.equals(typeItem.getPossibleResolutions(), ResolvedItem.NO_RESOLUTIONS) ?
> 				ResolvedItem.NO_RESOLUTIONS : ResolvedItem.LINK_RESOLUTIONS; // exclude link if parent is excluded
122c130
< 			Resolution resolution = resolvedRefs.contains(reference) ? baseResolution : null;
---
> 			Resolution resolution = resolvedRefs.contains(reference) ? baseResolution : null; // include only refs resolved as links
