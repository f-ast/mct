36d35
<  *   <li>{@link org.eclipse.gmf.runtime.notation.impl.ConnectorStyleImpl#getUUID <em>UUID</em>}</li>
56c55
< 	 * The default value of the '{@link #getUUID() <em>UUID</em>}' attribute.
---
> 	 * The default value of the '{@link #getRouting() <em>Routing</em>}' attribute.
59c58
< 	 * @see #getUUID()
---
> 	 * @see #getRouting()
63c62
< 	protected static final byte[] UUID_EDEFAULT = null;
---
> 	protected static final Routing ROUTING_EDEFAULT = Routing.MANUAL_LITERAL;
66c65
< 	 * The cached value of the '{@link #getUUID() <em>UUID</em>}' attribute.
---
> 	 * The offset of the flags representing the value of the '{@link #getRouting() <em>Routing</em>}' attribute.
69d67
< 	 * @see #getUUID()
73c71
< 	protected byte[] uUID = UUID_EDEFAULT;
---
> 	protected static final int ROUTING_EFLAG_OFFSET = 8;
76c74
< 	 * The default value of the '{@link #getRouting() <em>Routing</em>}' attribute.
---
> 	 * The flags representing the default value of the '{@link #getRouting() <em>Routing</em>}' attribute.
79d76
< 	 * @see #getRouting()
83c80,89
< 	protected static final Routing ROUTING_EDEFAULT = Routing.MANUAL_LITERAL;
---
> 	protected static final int ROUTING_EFLAG_DEFAULT = Routing.VALUES.indexOf(ROUTING_EDEFAULT) << ROUTING_EFLAG_OFFSET;
> 
> 				/**
> 	 * The array of enumeration values for '{@link Routing Routing}'
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 * @ordered
> 	 */
> 	private static final Routing[] ROUTING_EFLAG_VALUES = (Routing[])Routing.VALUES.toArray(new Routing[Routing.VALUES.size()]);
86c92
< 	 * The cached value of the '{@link #getRouting() <em>Routing</em>}' attribute.
---
> 	 * The flags representing the value of the '{@link #getRouting() <em>Routing</em>}' attribute.
93c99
< 	protected Routing routing = ROUTING_EDEFAULT;
---
> 	protected static final int ROUTING_EFLAG = 0x3 << ROUTING_EFLAG_OFFSET;
106c112,139
< 	 * The cached value of the '{@link #getSmoothness() <em>Smoothness</em>}' attribute.
---
> 	 * The offset of the flags representing the value of the '{@link #getSmoothness() <em>Smoothness</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected static final int SMOOTHNESS_EFLAG_OFFSET = 10;
> 
> 	/**
> 	 * The flags representing the default value of the '{@link #getSmoothness() <em>Smoothness</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected static final int SMOOTHNESS_EFLAG_DEFAULT = Smoothness.VALUES.indexOf(SMOOTHNESS_EDEFAULT) << SMOOTHNESS_EFLAG_OFFSET;
> 
> 	/**
> 	 * The array of enumeration values for '{@link Smoothness Smoothness}'
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 * @ordered
> 	 */
> 	private static final Smoothness[] SMOOTHNESS_EFLAG_VALUES = (Smoothness[])Smoothness.VALUES.toArray(new Smoothness[Smoothness.VALUES.size()]);
> 
> 	/**
> 	 * The flags representing the value of the '{@link #getSmoothness() <em>Smoothness</em>}' attribute.
113c146
< 	protected Smoothness smoothness = SMOOTHNESS_EDEFAULT;
---
> 	protected static final int SMOOTHNESS_EFLAG = 0x3 << SMOOTHNESS_EFLAG_OFFSET;
133c166
< 	protected static final int AVOID_OBSTRUCTIONS_EFLAG = 1 << 8;
---
> 	protected static final int AVOID_OBSTRUCTIONS_EFLAG = 1 << 12;
153c186
< 	protected static final int CLOSEST_DISTANCE_EFLAG = 1 << 9;
---
> 	protected static final int CLOSEST_DISTANCE_EFLAG = 1 << 13;
166c199,226
< 	 * The cached value of the '{@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
---
> 	 * The offset of the flags representing the value of the '{@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected static final int JUMP_LINK_STATUS_EFLAG_OFFSET = 14;
> 
> 	/**
> 	 * The flags representing the default value of the '{@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected static final int JUMP_LINK_STATUS_EFLAG_DEFAULT = JumpLinkStatus.VALUES.indexOf(JUMP_LINK_STATUS_EDEFAULT) << JUMP_LINK_STATUS_EFLAG_OFFSET;
> 
> 	/**
> 	 * The array of enumeration values for '{@link JumpLinkStatus Jump Link Status}'
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 * @ordered
> 	 */
> 	private static final JumpLinkStatus[] JUMP_LINK_STATUS_EFLAG_VALUES = (JumpLinkStatus[])JumpLinkStatus.VALUES.toArray(new JumpLinkStatus[JumpLinkStatus.VALUES.size()]);
> 
> 	/**
> 	 * The flags representing the value of the '{@link #getJumpLinkStatus() <em>Jump Link Status</em>}' attribute.
173c233
< 	protected JumpLinkStatus jumpLinkStatus = JUMP_LINK_STATUS_EDEFAULT;
---
> 	protected static final int JUMP_LINK_STATUS_EFLAG = 0x3 << JUMP_LINK_STATUS_EFLAG_OFFSET;
186c246,273
< 	 * The cached value of the '{@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
---
> 	 * The offset of the flags representing the value of the '{@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected static final int JUMP_LINK_TYPE_EFLAG_OFFSET = 16;
> 
> 	/**
> 	 * The flags representing the default value of the '{@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected static final int JUMP_LINK_TYPE_EFLAG_DEFAULT = JumpLinkType.VALUES.indexOf(JUMP_LINK_TYPE_EDEFAULT) << JUMP_LINK_TYPE_EFLAG_OFFSET;
> 
> 	/**
> 	 * The array of enumeration values for '{@link JumpLinkType Jump Link Type}'
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 * @ordered
> 	 */
> 	private static final JumpLinkType[] JUMP_LINK_TYPE_EFLAG_VALUES = (JumpLinkType[])JumpLinkType.VALUES.toArray(new JumpLinkType[JumpLinkType.VALUES.size()]);
> 
> 	/**
> 	 * The flags representing the value of the '{@link #getJumpLinkType() <em>Jump Link Type</em>}' attribute.
193c280
< 	protected JumpLinkType jumpLinkType = JUMP_LINK_TYPE_EDEFAULT;
---
> 	protected static final int JUMP_LINK_TYPE_EFLAG = 0x3 << JUMP_LINK_TYPE_EFLAG_OFFSET;
213c300
< 	protected static final int JUMP_LINKS_REVERSE_EFLAG = 1 << 10;
---
> 	protected static final int JUMP_LINKS_REVERSE_EFLAG = 1 << 18;
278,298d364
< 	public byte[] getUUID() {
< 		return uUID;
< 	}
< 
< 				/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public void setUUID(byte[] newUUID) {
< 		byte[] oldUUID = uUID;
< 		uUID = newUUID;
< 		if (eNotificationRequired())
< 			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__UUID, oldUUID, uUID));
< 	}
< 
< 				/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
300c366
< 		return routing;
---
> 		return ROUTING_EFLAG_VALUES[(eFlags & ROUTING_EFLAG) >>> ROUTING_EFLAG_OFFSET];
309,310c375,377
< 		Routing oldRouting = routing;
< 		routing = newRouting == null ? ROUTING_EDEFAULT : newRouting;
---
> 		Routing oldRouting = ROUTING_EFLAG_VALUES[(eFlags & ROUTING_EFLAG) >>> ROUTING_EFLAG_OFFSET];
> 		if (newRouting == null) newRouting = ROUTING_EDEFAULT;
> 		eFlags = eFlags & ~ROUTING_EFLAG | Routing.VALUES.indexOf(newRouting) << ROUTING_EFLAG_OFFSET;
312c379
< 			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__ROUTING, oldRouting, routing));
---
> 			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__ROUTING, oldRouting, newRouting));
321c388
< 		return smoothness;
---
> 		return SMOOTHNESS_EFLAG_VALUES[(eFlags & SMOOTHNESS_EFLAG) >>> SMOOTHNESS_EFLAG_OFFSET];
330,331c397,399
< 		Smoothness oldSmoothness = smoothness;
< 		smoothness = newSmoothness == null ? SMOOTHNESS_EDEFAULT : newSmoothness;
---
> 		Smoothness oldSmoothness = SMOOTHNESS_EFLAG_VALUES[(eFlags & SMOOTHNESS_EFLAG) >>> SMOOTHNESS_EFLAG_OFFSET];
> 		if (newSmoothness == null) newSmoothness = SMOOTHNESS_EDEFAULT;
> 		eFlags = eFlags & ~SMOOTHNESS_EFLAG | Smoothness.VALUES.indexOf(newSmoothness) << SMOOTHNESS_EFLAG_OFFSET;
333c401
< 			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__SMOOTHNESS, oldSmoothness, smoothness));
---
> 			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__SMOOTHNESS, oldSmoothness, newSmoothness));
384c452
< 		return jumpLinkStatus;
---
> 		return JUMP_LINK_STATUS_EFLAG_VALUES[(eFlags & JUMP_LINK_STATUS_EFLAG) >>> JUMP_LINK_STATUS_EFLAG_OFFSET];
393,394c461,463
< 		JumpLinkStatus oldJumpLinkStatus = jumpLinkStatus;
< 		jumpLinkStatus = newJumpLinkStatus == null ? JUMP_LINK_STATUS_EDEFAULT : newJumpLinkStatus;
---
> 		JumpLinkStatus oldJumpLinkStatus = JUMP_LINK_STATUS_EFLAG_VALUES[(eFlags & JUMP_LINK_STATUS_EFLAG) >>> JUMP_LINK_STATUS_EFLAG_OFFSET];
> 		if (newJumpLinkStatus == null) newJumpLinkStatus = JUMP_LINK_STATUS_EDEFAULT;
> 		eFlags = eFlags & ~JUMP_LINK_STATUS_EFLAG | JumpLinkStatus.VALUES.indexOf(newJumpLinkStatus) << JUMP_LINK_STATUS_EFLAG_OFFSET;
396c465
< 			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS, oldJumpLinkStatus, jumpLinkStatus));
---
> 			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_STATUS, oldJumpLinkStatus, newJumpLinkStatus));
405c474
< 		return jumpLinkType;
---
> 		return JUMP_LINK_TYPE_EFLAG_VALUES[(eFlags & JUMP_LINK_TYPE_EFLAG) >>> JUMP_LINK_TYPE_EFLAG_OFFSET];
414,415c483,485
< 		JumpLinkType oldJumpLinkType = jumpLinkType;
< 		jumpLinkType = newJumpLinkType == null ? JUMP_LINK_TYPE_EDEFAULT : newJumpLinkType;
---
> 		JumpLinkType oldJumpLinkType = JUMP_LINK_TYPE_EFLAG_VALUES[(eFlags & JUMP_LINK_TYPE_EFLAG) >>> JUMP_LINK_TYPE_EFLAG_OFFSET];
> 		if (newJumpLinkType == null) newJumpLinkType = JUMP_LINK_TYPE_EDEFAULT;
> 		eFlags = eFlags & ~JUMP_LINK_TYPE_EFLAG | JumpLinkType.VALUES.indexOf(newJumpLinkType) << JUMP_LINK_TYPE_EFLAG_OFFSET;
417c487
< 			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE, oldJumpLinkType, jumpLinkType));
---
> 			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.CONNECTOR_STYLE__JUMP_LINK_TYPE, oldJumpLinkType, newJumpLinkType));
490,491d559
< 			case NotationPackage.CONNECTOR_STYLE__UUID:
< 				return getUUID();
521,523d588
< 			case NotationPackage.CONNECTOR_STYLE__UUID:
< 				setUUID((byte[])newValue);
< 				return;
562,564d626
< 			case NotationPackage.CONNECTOR_STYLE__UUID:
< 				setUUID(UUID_EDEFAULT);
< 				return;
603,604d664
< 			case NotationPackage.CONNECTOR_STYLE__UUID:
< 				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
606c666
< 				return routing != ROUTING_EDEFAULT;
---
> 				return (eFlags & ROUTING_EFLAG) != ROUTING_EFLAG_DEFAULT;
608c668
< 				return smoothness != SMOOTHNESS_EDEFAULT;
---
> 				return (eFlags & SMOOTHNESS_EFLAG) != SMOOTHNESS_EFLAG_DEFAULT;
614c674
< 				return jumpLinkStatus != JUMP_LINK_STATUS_EDEFAULT;
---
> 				return (eFlags & JUMP_LINK_STATUS_EFLAG) != JUMP_LINK_STATUS_EFLAG_DEFAULT;
616c676
< 				return jumpLinkType != JUMP_LINK_TYPE_EDEFAULT;
---
> 				return (eFlags & JUMP_LINK_TYPE_EFLAG) != JUMP_LINK_TYPE_EFLAG_DEFAULT;
633,638d692
< 		if (baseClass == NotationObject.class) {
< 			switch (derivedFeatureID) {
< 				case NotationPackage.CONNECTOR_STYLE__UUID: return NotationPackage.NOTATION_OBJECT__UUID;
< 				default: return -1;
< 			}
< 		}
672,677d725
< 		if (baseClass == NotationObject.class) {
< 			switch (baseFeatureID) {
< 				case NotationPackage.NOTATION_OBJECT__UUID: return NotationPackage.CONNECTOR_STYLE__UUID;
< 				default: return -1;
< 			}
< 		}
714,717c762,763
< 		result.append(" (uUID: "); //$NON-NLS-1$
< 		result.append(uUID);
< 		result.append(", routing: "); //$NON-NLS-1$
< 		result.append(routing);
---
> 		result.append(" (routing: "); //$NON-NLS-1$
> 		result.append(ROUTING_EFLAG_VALUES[(eFlags & ROUTING_EFLAG) >>> ROUTING_EFLAG_OFFSET]);
719c765
< 		result.append(smoothness);
---
> 		result.append(SMOOTHNESS_EFLAG_VALUES[(eFlags & SMOOTHNESS_EFLAG) >>> SMOOTHNESS_EFLAG_OFFSET]);
725c771
< 		result.append(jumpLinkStatus);
---
> 		result.append(JUMP_LINK_STATUS_EFLAG_VALUES[(eFlags & JUMP_LINK_STATUS_EFLAG) >>> JUMP_LINK_STATUS_EFLAG_OFFSET]);
727c773
< 		result.append(jumpLinkType);
---
> 		result.append(JUMP_LINK_TYPE_EFLAG_VALUES[(eFlags & JUMP_LINK_TYPE_EFLAG) >>> JUMP_LINK_TYPE_EFLAG_OFFSET]);
