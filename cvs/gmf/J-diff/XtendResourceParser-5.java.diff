20,23d19
< import java.util.ArrayList;
< 
< import lpg.lpgjavaruntime.LexStream;
< import lpg.lpgjavaruntime.ParseErrorCodes;
35d30
<         final ArrayList<ParserException.ErrorLocationInfo> errors = new ArrayList<ParserException.ErrorLocationInfo>();
38,45c33
<             scanner = new XtendLexer(buffer, name) {
<         		// FIXME move to XtendLexer.g template
<             	@Override
<             	public void reportError(int left_loc, int right_loc) {
<                     errors.add(createError(this, left_loc, right_loc));
<             		super.reportError(left_loc, right_loc);
<             	}
<             };
---
>             scanner = new XtendLexer(buffer, name);
51c39,40
<         	if (errors.isEmpty()) {
---
> 			ParserException.ErrorLocationInfo[] errors = scanner.getErrors();
>         	if (errors.length == 0) {
61,77c50,52
<         return null;
<     }
< 
<     public static ParserException.ErrorLocationInfo createError(LexStream lexStream, int left_loc, int right_loc) {
< 		// COPY OF LexStream#reportError
<         int errorCode = (right_loc >= lexStream.getStreamLength() ? ParseErrorCodes.EOF_CODE : left_loc == right_loc ? ParseErrorCodes.LEX_ERROR_CODE : ParseErrorCodes.INVALID_TOKEN_CODE); 
<         int end_loc = (left_loc == right_loc ? right_loc : right_loc - 1);
<         String tokenText = (errorCode == ParseErrorCodes.EOF_CODE ? "End-of-file " : errorCode == ParseErrorCodes.INVALID_TOKEN_CODE
<                                 ? "\"" + new String(lexStream.getInputChars(), left_loc, right_loc - left_loc) + "\" "
<                                 : "\"" + lexStream.getCharValue(left_loc) + "\" ");
<         // END
<         final int startLine = lexStream.getLineNumberOfCharAt(left_loc);
<         final int startColumn = lexStream.getColumnOfCharAt(left_loc);
<         final int endLine = lexStream.getLineNumberOfCharAt(end_loc);
<         final int endColumn = lexStream.getColumnOfCharAt(end_loc);
<         final String message = tokenText + ParseErrorCodes.errorMsgText[errorCode];
<         return new ParserException.ErrorLocationInfo(message, startLine, startColumn, endLine, endColumn);
---
> 		ParserException.ErrorLocationInfo[] errors = scanner.getErrors();
> 		assert errors.length > 0 : "otherwise, no reason not to get template";
> 		throw new ParserException(errors);
