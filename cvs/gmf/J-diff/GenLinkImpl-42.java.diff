29a30
> import org.eclipse.gmf.codegen.gmfgen.GenLinkEnd;
33a35
> import org.eclipse.gmf.codegen.gmfgen.TypeModelFacet;
41a44,45
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.GenLinkImpl#getGenOutgoingLinks <em>Gen Outgoing Links</em>}</li>
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.GenLinkImpl#getGenIncomingLinks <em>Gen Incoming Links</em>}</li>
51a56,57
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.GenLinkImpl#getSources <em>Sources</em>}</li>
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.GenLinkImpl#getTargets <em>Targets</em>}</li>
229a236,253
> 	 * @generated NOT
> 	 */
> 	public EList<GenLink> getGenOutgoingLinks() {
> 		return GenLinkEndOperations.getGenOutgoingLinks(this);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public EList<GenLink> getGenIncomingLinks() {
> 		return GenLinkEndOperations.getGenIncomingLinks(this);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
473a498,548
> 	public EList<GenLinkEnd> getSources() {
> 		if (getModelFacet() == null){
> 			return ECollections.emptyEList();
> 		}
> 		return getCompatibleLinkEnds(getModelFacet().getSourceType());
> 	}
> 	
> 	private EList<GenLinkEnd> getCompatibleLinkEnds(GenClass desiredType){
> 		if (desiredType == null){
> 			return ECollections.emptyEList();
> 		}
> 		BasicEList<GenLinkEnd> result = new BasicEList<GenLinkEnd>();
> 		for (GenNode nextNode : getDiagram().getAllNodes()){
> 			if (canBeLinkEnd(desiredType, nextNode.getModelFacet())){
> 				result.add(nextNode);
> 			}
> 		}
> 		for (GenLink nextLink : getDiagram().getLinks()){
> 			if (nextLink.getModelFacet() instanceof TypeModelFacet && canBeLinkEnd(desiredType, (TypeModelFacet)nextLink.getModelFacet())){
> 				result.add(nextLink);
> 			}
> 		}
> 		return result;
> 	}
> 	
> 	private static boolean canBeLinkEnd(GenClass desiredEndType, TypeModelFacet actualModelFacet){
> 		if (desiredEndType == null || actualModelFacet == null){
> 			return false;
> 		}
> 		
> 		GenClass actualMetaclass = actualModelFacet.getMetaClass();
> 		return actualMetaclass != null && desiredEndType.getEcoreClass().isSuperTypeOf(actualMetaclass.getEcoreClass());
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public EList<GenLinkEnd> getTargets() {
> 		if (getModelFacet() == null){
> 			return ECollections.emptyEList();
> 		}
> 		return getCompatibleLinkEnds(getModelFacet().getTargetType());
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
596a672,675
> 			case GMFGenPackage.GEN_LINK__GEN_OUTGOING_LINKS:
> 				return getGenOutgoingLinks();
> 			case GMFGenPackage.GEN_LINK__GEN_INCOMING_LINKS:
> 				return getGenIncomingLinks();
616a696,699
> 			case GMFGenPackage.GEN_LINK__SOURCES:
> 				return getSources();
> 			case GMFGenPackage.GEN_LINK__TARGETS:
> 				return getTargets();
708a792,795
> 			case GMFGenPackage.GEN_LINK__GEN_OUTGOING_LINKS:
> 				return !getGenOutgoingLinks().isEmpty();
> 			case GMFGenPackage.GEN_LINK__GEN_INCOMING_LINKS:
> 				return !getGenIncomingLinks().isEmpty();
728a816,819
> 			case GMFGenPackage.GEN_LINK__SOURCES:
> 				return !getSources().isEmpty();
> 			case GMFGenPackage.GEN_LINK__TARGETS:
> 				return !getTargets().isEmpty();
738a830,863
> 	public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass) {
> 		if (baseClass == GenLinkEnd.class) {
> 			switch (derivedFeatureID) {
> 				case GMFGenPackage.GEN_LINK__GEN_OUTGOING_LINKS: return GMFGenPackage.GEN_LINK_END__GEN_OUTGOING_LINKS;
> 				case GMFGenPackage.GEN_LINK__GEN_INCOMING_LINKS: return GMFGenPackage.GEN_LINK_END__GEN_INCOMING_LINKS;
> 				default: return -1;
> 			}
> 		}
> 		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	@Override
> 	public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass) {
> 		if (baseClass == GenLinkEnd.class) {
> 			switch (baseFeatureID) {
> 				case GMFGenPackage.GEN_LINK_END__GEN_OUTGOING_LINKS: return GMFGenPackage.GEN_LINK__GEN_OUTGOING_LINKS;
> 				case GMFGenPackage.GEN_LINK_END__GEN_INCOMING_LINKS: return GMFGenPackage.GEN_LINK__GEN_INCOMING_LINKS;
> 				default: return -1;
> 			}
> 		}
> 		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	@Override
