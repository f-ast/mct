14,15d13
< import org.eclipse.core.runtime.Platform;
< 
18,20d15
< import org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.ContributionItemService;
< import org.eclipse.gmf.runtime.common.ui.services.action.filter.ActionFilterService;
< import org.eclipse.gmf.runtime.common.ui.services.action.global.GlobalActionHandlerService;
29,43d23
< 	 * Extension point name for the action filter providers extension point.
< 	 */
< 	protected static final String ACTION_FILTER_PROVIDERS_EXT_P_NAME = "actionFilterProviders"; //$NON-NLS-1$
< 
< 	/**
< 	 * Extension point name for global action handler providers extension point.
< 	 */
< 	protected static final String GLOBAL_ACTION_HANDLER_PROVIDERS_EXT_P_NAME = "globalActionHandlerProviders"; //$NON-NLS-1$
< 
< 	/**
< 	 * Extension point name for the contribution item providers extension point.
< 	 */
< 	protected static final String CONTRIBUTION_ITEM_PROVIDERS_EXT_P_NAME = "contributionItemProviders"; //$NON-NLS-1$
< 
< 	/**
58,68d37
< 	 * @see org.eclipse.gmf.runtime.common.ui.plugin.XToolsUIPlugin#doStartup()
< 	 */
< 	protected void doStartup() {
< 		configureActionFilterProviders();
< 		configureGlobalActionHandlerProviders();
< 		configureContributionItemProviders();
< 	}
< 
< 	/*
< 	 * (non-Javadoc)
< 	 * 
90,123c59
< 		return getDefault().getBundle().getSymbolicName();
< 	}
< 
< 	/**
< 	 * Configures action filter providers based on action filter provider
< 	 * extension configurations.
< 	 */
< 	private void configureActionFilterProviders() {
< 		ActionFilterService.getInstance().configureProviders(
< 			Platform.getExtensionRegistry().getExtensionPoint(getPluginId(),
< 				ACTION_FILTER_PROVIDERS_EXT_P_NAME).getConfigurationElements());
< 	}
< 
< 	/**
< 	 * Configures global action handler providers based on global action handler
< 	 * provider extension configurations.
< 	 */
< 	private void configureGlobalActionHandlerProviders() {
< 		GlobalActionHandlerService.getInstance().configureProviders(
< 			Platform.getExtensionRegistry().getExtensionPoint(getPluginId(),
< 				GLOBAL_ACTION_HANDLER_PROVIDERS_EXT_P_NAME)
< 				.getConfigurationElements());
< 
< 	}
< 
< 	/**
< 	 * Configures marker navigation providers based on marker navigation
< 	 * provider extension configurations.
< 	 */
< 	private void configureContributionItemProviders() {
< 		ContributionItemService.getInstance().configureProviders(
< 			Platform.getExtensionRegistry().getExtensionPoint(getPluginId(),
< 				CONTRIBUTION_ITEM_PROVIDERS_EXT_P_NAME)
< 				.getConfigurationElements());
---
> 		return getDefault().getSymbolicName();
