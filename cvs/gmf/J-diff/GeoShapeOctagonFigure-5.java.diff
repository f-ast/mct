2c2
<  * Copyright (c) 2003, 2004 IBM Corporation and others.
---
>  * Copyright (c) 2003, 2008 IBM Corporation and others.
16a17
> import org.eclipse.draw2d.geometry.PrecisionPoint;
17a19
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.PrecisionPointList;
20a23
>  * @author aboyko
25a29,30
> 	private static double factor = 1.0 / (2.0 + Math.sqrt(2.0));
> 
36a42,51
> 	/**
> 	 * Constructor - Creates a proper octagon with a given Default height
> 	 * 
> 	 * @param height initial height of the figure
> 	 * @param spacing <code>int</code> that is the margin between children in logical units
> 	 */
> 	public GeoShapeOctagonFigure(int size, int spacing) {
> 		super(size, size, spacing);
> 	}
> 		
46,47c61,62
< 		int xOffset = (int) (rect.width * 0.275);
< 		int yOffset = (int) (rect.height * 0.275);
---
> 		double xOffset = rect.preciseWidth() * factor;
> 		double yOffset = rect.preciseHeight() * factor;
49c64
< 		PointList points = new PointList();
---
> 		PointList points = new PrecisionPointList();
51,58c66,73
< 		Point p1 = new Point( rect.x, rect.y + yOffset );
< 		Point p2 = new Point( rect.x + xOffset, rect.y );
< 		Point p3 = new Point( rect.x + rect.width - xOffset, rect.y );
< 		Point p4 = new Point( rect.x + rect.width - 1, rect.y + yOffset );
< 		Point p5 = new Point( rect.x + rect.width - 1, rect.y + rect.height - yOffset );
< 		Point p6 = new Point( rect.x + rect.width - xOffset, rect.y + rect.height - 1 );
< 		Point p7 = new Point( rect.x + xOffset, rect.y + rect.height -1 );
< 		Point p8 = new Point( rect.x, rect.y + rect.height - yOffset );
---
> 		Point p1 = new PrecisionPoint(rect.preciseX(), rect.preciseY() + yOffset);
> 		Point p2 = new PrecisionPoint(rect.preciseX() + xOffset, rect.preciseY());
> 		Point p3 = new PrecisionPoint(rect.preciseX() + rect.preciseWidth() - xOffset, rect.preciseY());
> 		Point p4 = new PrecisionPoint(rect.preciseX() + rect.preciseWidth() - 1, rect.preciseY() + yOffset);
> 		Point p5 = new PrecisionPoint(p4.preciseX(), rect.preciseY() + rect.preciseHeight() - yOffset);
> 		Point p6 = new PrecisionPoint(p3.preciseX(), rect.preciseY() + rect.preciseHeight() - 1);
> 		Point p7 = new PrecisionPoint(p2.preciseX(), p6.preciseY());
> 		Point p8 = new PrecisionPoint(rect.preciseX(), p5.preciseY());
