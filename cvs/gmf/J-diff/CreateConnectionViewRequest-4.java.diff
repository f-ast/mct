27c27
< import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
---
> import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
38,41c38,42
<  * To instantiate this request, clients have to create a <code>ConnectionViewDescriptor</code>
<  * or a list of <code>ConnectionViewDescriptor</code> s filling it with view
<  * creation parameters. The <code>ConnectionViewDescriptor</code> is a inner
<  * class to this request
---
>  * To instantiate this request, clients have to create a
>  * <code>ConnectionViewDescriptor</code> or a list of
>  * <code>ConnectionViewDescriptor</code> s filling it with view creation
>  * parameters. The <code>ConnectionViewDescriptor</code> is a inner class to
>  * this request
51c52,53
< public class CreateConnectionViewRequest extends CreateConnectionRequest {
---
> public class CreateConnectionViewRequest
> 	extends CreateConnectionRequest {
56c58,60
< 	public static class ConnectionViewDescriptor extends ViewDescriptor {
---
> 	public static class ConnectionViewDescriptor
> 		extends ViewDescriptor {
> 
62,65c66,70
< 		 *            The preference hint that is to be used to find the appropriate
< 		 *            preference store from which to retrieve diagram preference
< 		 *            values. The preference hint is mapped to a preference store in
< 		 *            the preference registry <@link DiagramPreferencesRegistry>.
---
> 		 *            The preference hint that is to be used to find the
> 		 *            appropriate preference store from which to retrieve
> 		 *            diagram preference values. The preference hint is mapped
> 		 *            to a preference store in the preference registry <@link
> 		 *            DiagramPreferencesRegistry>.
67c72,73
< 		public ConnectionViewDescriptor(IAdaptable elementAdapter, PreferencesHint preferencesHint) {
---
> 		public ConnectionViewDescriptor(IAdaptable elementAdapter,
> 				PreferencesHint preferencesHint) {
77,85c83,90
< 		 *            The preference hint that is to be used to find the appropriate
< 		 *            preference store from which to retrieve diagram preference
< 		 *            values. The preference hint is mapped to a preference store in
< 		 *            the preference registry <@link DiagramPreferencesRegistry>.
< 		 */
< 		public ConnectionViewDescriptor(
< 			IAdaptable elementAdapter,
< 			String semanticHint, 
< 			PreferencesHint preferencesHint) {
---
> 		 *            The preference hint that is to be used to find the
> 		 *            appropriate preference store from which to retrieve
> 		 *            diagram preference values. The preference hint is mapped
> 		 *            to a preference store in the preference registry <@link
> 		 *            DiagramPreferencesRegistry>.
> 		 */
> 		public ConnectionViewDescriptor(IAdaptable elementAdapter,
> 				String semanticHint, PreferencesHint preferencesHint) {
96,101c101,104
< 		public ConnectionViewDescriptor(
< 			IAdaptable elementAdapter,
< 			String semanticHint,
< 			int index, 
< 			PreferencesHint preferencesHint) {
< 			super(elementAdapter, Edge.class, semanticHint, index, preferencesHint);
---
> 		public ConnectionViewDescriptor(IAdaptable elementAdapter,
> 				String semanticHint, int index, PreferencesHint preferencesHint) {
> 			super(elementAdapter, Edge.class, semanticHint, index,
> 				preferencesHint);
105a109
> 		 * 
109c113,114
< 		 * @param persisted flag to indicate if this view will be persisted or not
---
> 		 * @param persisted
> 		 *            flag to indicate if this view will be persisted or not
111,115c116,117
< 		public ConnectionViewDescriptor(
< 			IAdaptable elementAdapter,
< 			String semanticHint,
< 			int index,
< 			boolean persisted, 
---
> 		public ConnectionViewDescriptor(IAdaptable elementAdapter,
> 				String semanticHint, int index, boolean persisted,
117,122c119
< 			super(
< 				elementAdapter,
< 				Edge.class,
< 				semanticHint,
< 				index,
< 				persisted,
---
> 			super(elementAdapter, Edge.class, semanticHint, index, persisted,
135c132,133
< 	 * @param element a semantic element
---
> 	 * @param element
> 	 *            a semantic element
137,138c135,138
< 	public CreateConnectionViewRequest(EObject element, PreferencesHint preferencesHint) {
< 		this(new ConnectionViewDescriptor(new EObjectAdapter(element), preferencesHint));
---
> 	public CreateConnectionViewRequest(EObject element,
> 			PreferencesHint preferencesHint) {
> 		this(new ConnectionViewDescriptor(new EObjectAdapter(element),
> 			preferencesHint));
141d140
< 
145c144,145
< 	 * @param ViewDescriptor a  view descriptor
---
> 	 * @param ViewDescriptor
> 	 *            a view descriptor
172,173c172,173
< 	 * The type is a <code>IAdaptable</code> object that adapters to <code>IView</code>
< 	 * .class
---
> 	 * The type is a <code>IAdaptable</code> object that adapters to
> 	 * <code>IView</code> .class
182a183
> 	 * 
186c187,188
< 		throw new UnsupportedOperationException("The Factory mechanism is not used"); //$NON-NLS-1$
---
> 		throw new UnsupportedOperationException(
> 			"The Factory mechanism is not used"); //$NON-NLS-1$
194c196,197
< 		throw new UnsupportedOperationException("The Factory mechanism is not used"); //$NON-NLS-1$
---
> 		throw new UnsupportedOperationException(
> 			"The Factory mechanism is not used"); //$NON-NLS-1$
205,208c208,209
< 	public static Command getCreateCommand(
< 		EObject element,
< 		EditPart sourceEditPart,
< 		EditPart targetEditPart,
---
> 	public static Command getCreateCommand(EObject element,
> 			EditPart sourceEditPart, EditPart targetEditPart,
215,216c216,217
< 		CreateConnectionViewRequest request =
< 			new CreateConnectionViewRequest(element, preferencesHint);
---
> 		CreateConnectionViewRequest request = new CreateConnectionViewRequest(
> 			element, preferencesHint);
227,229c228,229
< 	 * Method getCreateCommand
< 	 * Gets the command given a request, source and target
< 	 * edit parts.  (No semantic element required.)
---
> 	 * Method getCreateCommand Gets the command given a request, source and
> 	 * target edit parts. (No semantic element required.)
236,239c236,237
< 	public static Command getCreateCommand(
< 		CreateConnectionViewRequest request,
< 		EditPart sourceEditPart,
< 		EditPart targetEditPart) {
---
> 	public static Command getCreateCommand(CreateConnectionViewRequest request,
> 			EditPart sourceEditPart, EditPart targetEditPart) {
253d250
< 
255a253
> 	 * 
262,267c260,262
< 	public static Command getCreateCommand(
< 		IAdaptable elementAdapter,
< 		IAdaptable sourceViewAdapter,
< 		IAdaptable targetViewAdapter,
< 		DiagramEditPart diagramEditPart,
< 		PreferencesHint preferencesHint) {
---
> 	public static Command getCreateCommand(IAdaptable elementAdapter,
> 			IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter,
> 			DiagramEditPart diagramEditPart, PreferencesHint preferencesHint) {
269,270c264
< 		CreateCommand createCommand =
< 			new CreateCommand(
---
> 		CreateCommand createCommand = new CreateCommand(
274,275c268,269
< 		IAdaptable viewAdapter =
< 			(IAdaptable) createCommand.getCommandResult().getReturnValue();
---
> 		IAdaptable viewAdapter = (IAdaptable) createCommand.getCommandResult()
> 			.getReturnValue();
277c271,272
< 		SetConnectionEndsCommand sceCommand = new SetConnectionEndsCommand(DiagramResourceManager.getI18NString("Commands.SetConnectionEndsCommand.Source")); //$NON-NLS-1$
---
> 		SetConnectionEndsCommand sceCommand = new SetConnectionEndsCommand(
> 			DiagramUIMessages.Commands_SetConnectionEndsCommand_Source);
289a285
> 	 * 
296,299c292,293
< 	public static Command getCreateCommand(
< 		ViewDescriptor viewDescriptor,
< 		IAdaptable sourceViewAdapter,
< 		IAdaptable targetViewAdapter,
---
> 	public static Command getCreateCommand(ViewDescriptor viewDescriptor,
> 			IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter,
302,303c296
< 		CreateCommand createCommand =
< 			new CreateCommand(viewDescriptor,
---
> 		CreateCommand createCommand = new CreateCommand(viewDescriptor,
306,307c299,300
< 		IAdaptable viewAdapter =
< 			(IAdaptable) createCommand.getCommandResult().getReturnValue();
---
> 		IAdaptable viewAdapter = (IAdaptable) createCommand.getCommandResult()
> 			.getReturnValue();
309c302,303
< 		SetConnectionEndsCommand sceCommand = new SetConnectionEndsCommand(DiagramResourceManager.getI18NString("Commands.SetConnectionEndsCommand.Source")); //$NON-NLS-1$
---
> 		SetConnectionEndsCommand sceCommand = new SetConnectionEndsCommand(
> 			DiagramUIMessages.Commands_SetConnectionEndsCommand_Source);
323c317,318
< //		sbbCommand.setNewPointList(pointList, new Point(0, 0), new Point(0, 0));
---
> 		// sbbCommand.setNewPointList(pointList, new Point(0, 0), new Point(0,
> 		// 0));
