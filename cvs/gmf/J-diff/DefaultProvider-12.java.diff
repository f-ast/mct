50a51,52
> import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;
> import org.eclipse.gmf.runtime.diagram.ui.editparts.ListItemEditPart;
324a327
>         boolean shouldHandleListItems = shouldHandleConnectableListItems();
334a338,339
>                     else if (shouldHandleListItems && from instanceof ListItemEditPart)
>                         from = getFirstAnscestorinNodesMap(from, editPartToNodeDict);
336a342,343
>                     else if (shouldHandleListItems && to instanceof ListItemEditPart)
>                         to = getFirstAnscestorinNodesMap(to, editPartToNodeDict);
357a365,366
>             else if (shouldHandleListItems && from instanceof ListItemEditPart)
>                 from = getFirstAnscestorinNodesMap(from, editPartToNodeDict);
359a369,370
>             else if (shouldHandleListItems && to instanceof ListItemEditPart)
>                 to = getFirstAnscestorinNodesMap(to, editPartToNodeDict);
464c475
< 	private List getRelevantConnections(Hashtable editPartToNodeDict) {
---
>     protected List getRelevantConnections(Hashtable editPartToNodeDict) {
491a503,506
>             
>             if (shouldHandleConnectableListItems()){
>                 handleConnectableListItems(shapeEP,editPartToNodeDict,connectionsToMove);
>             }
496a512,545
>     private void handleConnectableListItems(GraphicalEditPart shapeEP, Map editPartToNodeDict, ArrayList connectionsToMove) {
>         List children = shapeEP.getChildren();
>         for (Iterator iter = children.iterator(); iter.hasNext();) {
>             EditPart ep = (EditPart) iter.next();
>             if (ep instanceof ListCompartmentEditPart){
>                 List listItems = ep.getChildren();
>                 for (Iterator iterator = listItems.iterator(); iterator
>                     .hasNext();) {
>                     GraphicalEditPart listItem = (GraphicalEditPart) iterator.next();
>                     List connections =listItem.getSourceConnections();
>                     for (Iterator connectionIterator = connections.iterator(); connectionIterator
>                         .hasNext();) {
>                         ConnectionEditPart connectionEP = (ConnectionEditPart) connectionIterator.next();
>                         EditPart ancestor = getFirstAnscestorinNodesMap(connectionEP.getTarget(),editPartToNodeDict);
>                         if (ancestor!=null)
>                             connectionsToMove.add(connectionEP);
>                     }
>                 }
>             }
>             
>         }
>         
>     }
> 
>     private EditPart getFirstAnscestorinNodesMap(EditPart editPart,Map editPartToNodeDict) {
>         EditPart ancestor =  editPart;
>         while (ancestor!=null){
>             if (editPartToNodeDict.get(ancestor)!=null)
>                 return ancestor;
>             ancestor = ancestor.getParent();
>         }
>         return null;
>     }
> 
809a859,867
>     /**
>      * Indicates if the provider will consider the connections between ListItems 
>      * while doing the arrange action
>      * @return true or false
>      */
>     protected boolean shouldHandleConnectableListItems() {
>         return false;
>     }
>     
