18a19
> import org.eclipse.core.runtime.content.IContentType;
67a69,84
> 	 * Create a file observer filter that will filter out any events not for the
> 	 * provided content types.
> 	 * 
> 	 * @param aFilterType
> 	 *            The filter type, content type.
> 	 * @param extension
> 	 *            The file content type array filter.
> 	 */
> 	public FileObserverFilter(FileObserverFilterType aFilterType,
> 			IContentType[] contentType) {
> 		assert (aFilterType == FileObserverFilterType.CONTENT_TYPE);
> 		setFilterType(aFilterType);
> 		setFilter(contentType);
> 	}
> 
> 	/**
121a139,143
> 		if (getFilterType() == FileObserverFilterType.CONTENT_TYPE
> 				&& resource instanceof IFile
> 				&& matchesContentType(((IFile)resource).getName())) {
> 				return true;
> 			}
151a174,177
> 		if (getFilterType() == FileObserverFilterType.CONTENT_TYPE
> 				&& matchesContentType(path.toFile().getName())) {
> 				return true;
> 			}
159a186,201
> 	 * Determines if the file name matches observed content types
> 	 * 
> 	 * @param fileName
> 	 *            file name to be matched
> 	 * @return true if the file name matches observed content types
> 	 */
> 	private boolean matchesContentType(String fileName) {
> 		IContentType[] contentTypes = getContentTypeFilter();
> 		for (int i = 0; i < contentTypes.length; i++) {
> 			if (contentTypes[i].isAssociatedWith(fileName)) {
> 				return true;
> 			}
> 		}
> 		return false;
> 	}
> 	/**
206a249,258
> 	 * Get the content type filter.
> 	 * 
> 	 * @return the content type array filter.
> 	 */
> 	private IContentType[] getContentTypeFilter() {
> 		assert (filterType == FileObserverFilterType.CONTENT_TYPE);
> 		return (IContentType[]) filter;
> 	}
> 
> 	/**
