2c2
<  * Copyright (c) 2002, 2003 IBM Corporation and others.
---
>  * Copyright (c) 2002, 2003, 2006 IBM Corporation and others.
18a19
> import java.util.Map;
83a85,87
>     private static final String DEFINE_ONLY = "defineOnly"; //$NON-NLS-1$
>     private static final String PREDEFINED_ENTRY = "predefinedEntry"; //$NON-NLS-1$
>     private static final String REMOVE = "remove"; //$NON-NLS-1$
124a129,135
>             
>             configChildren =
>                 configElement.getChildren(PREDEFINED_ENTRY);
> 
>             for (int i = 0; i < configChildren.length; i++) {
>                 entries.add(new PredefinedEntryDescriptor(configChildren[i]));
>             }
128c139,141
< 		 * Contributes to the given palette root based on the given editor's content 
---
>          * Contributes to the given palette root based on the given editor's
>          * content
>          * 
130a144,146
>          * @param predefinedEntries
>          *            map of predefined palette entries where the key is the
>          *            palette entry id and the value is the palette entry
132c148
< 		public void contribute(Object content, PaletteRoot root) {
---
> 		public void contribute(Object content, PaletteRoot root, Map predefinedEntries) {
135c151
< 				((EntryDescriptor) iter.next()).contribute(
---
> 				((IEntryDescriptor) iter.next()).contribute(
138c154,155
< 					paletteFactory);
---
> 					paletteFactory, predefinedEntries);
> 			}
140a158,178
>     
>     /**
>      * An interface describing the types of palette entries in the schema.
>      *
>      * @author cmahoney
>      */
>     private static interface IEntryDescriptor {
> 
>         /**
>          * Contributes the palette entry based on the given content, starting
>          * from the given root and into the given path
>          * 
>          * @param content
>          * @param root
>          * @param paletteFactory
>          * @param predefinedEntries
>          *            map of predefined palette entries where the key is the
>          *            palette entry id and the value is the palette entry
>          */
>         public void contribute(Object content, PaletteRoot root,
>                 PaletteFactoryProxy paletteFactory, Map predefinedEntries);
146c184
< 	private static class EntryDescriptor {
---
> 	private static class EntryDescriptor implements IEntryDescriptor {
155a194
>         private boolean defineOnly;
179a219,221
>             defineOnly = Boolean.valueOf(
>                 configElement.getAttribute(DEFINE_ONLY)).booleanValue();
> 
181,182c223,224
< 			if (path == null)
< 				Log.info(DiagramProvidersPlugin.getInstance(), DiagramProvidersStatusCodes.SERVICE_FAILURE, "No factory class name is provided"); //$NON-NLS-1$
---
> 			if (path == null && !defineOnly)
> 				Log.info(DiagramProvidersPlugin.getInstance(), DiagramProvidersStatusCodes.SERVICE_FAILURE, "Path must be provided when contributing a palette entry"); //$NON-NLS-1$
249,255d290
< 		/**
< 		 * Contributes the palette entry based on the given content, starting
< 		 * from the given root and into the given path
< 		 * @param content
< 		 * @param root
< 		 * @param paletteFactory
< 		 */
259,260c294,295
< 			PaletteFactoryProxy paletteFactory) {
< 			if (kind == null || id == null || path == null || label == null)
---
> 			PaletteFactoryProxy paletteFactory, Map predefinedEntries) {
> 			if (kind == null || id == null || label == null)
298,304c333,371
< 				PaletteEntry fEntry = findPaletteEntry(root, path);
< 				if (fEntry == null)
< 					Log.info(DiagramProvidersPlugin.getInstance(), DiagramProvidersStatusCodes.SERVICE_FAILURE, "Invalid palette entry path"); //$NON-NLS-1$				
< 				else if (fEntry instanceof PaletteContainer)
< 					 ((PaletteContainer) fEntry).add(paletteEntry);
< 				else if (fEntry instanceof PaletteSeparator)
< 					appendTo((PaletteSeparator) fEntry, paletteEntry);
---
> 				if (defineOnly) {
>                     predefinedEntries.put(id, paletteEntry);
>                 } else {
>             		appendPaletteEntry(root, predefinedEntries, path, paletteEntry);
>                 }
> 			}
> 		}
> 
> 	}
> 
>     /**
>      * A descriptor for an XML-based predefined palette entry. 
>      */
>     private static class PredefinedEntryDescriptor
>         implements IEntryDescriptor {
> 
>         private String id;
>         private String path;
>         private DrawerExpandHelper expandHelper;
>         private boolean remove;
> 
>         /**
>          * Reads an XML palette entry and its attributes
>          * @param configElement
>          */
>         public PredefinedEntryDescriptor(IConfigurationElement configElement) {
>             id = configElement.getAttribute(ID);
>             if (id == null) {
>                 Log.info(DiagramProvidersPlugin.getInstance(),
>                     DiagramProvidersStatusCodes.SERVICE_FAILURE,
>                     "No ID provided"); //$NON-NLS-1$
>             }
>  
>             path = configElement.getAttribute(PATH);
>  
>             IConfigurationElement[] configChildren = configElement
>                 .getChildren(EXPAND);
>             if (configChildren.length > 0)
>                 expandHelper = new DrawerExpandHelper(configChildren[0]);
306,307c373,393
< 					fEntry.getParent().add(
< 						fEntry.getParent().getChildren().indexOf(fEntry) + 1,
---
>                 expandHelper = new DrawerExpandHelper(Boolean.FALSE);
>             
>             remove = Boolean.valueOf(configElement.getAttribute(REMOVE))
>                 .booleanValue();
>         }
> 
>         public void contribute(
>             Object content,
>             PaletteRoot root,
>             PaletteFactoryProxy paletteFactory, Map predefinedEntries) {
>             
>             if (id == null)
>                 return;
>             
>             PaletteEntry paletteEntry = findPredefinedEntry(predefinedEntries, id);
>             
>             if (paletteEntry != null) {
>                 // this entry has been predefined but not contributed,
>                 // contributethis entry to the palette now
>                 if (path != null && !remove) {
>                     appendPaletteEntry(root, predefinedEntries, path,
309a396,411
>             } else {
>                 paletteEntry = findPaletteEntry(root, id);
>             }
>             
>             if (remove) {
>                 paletteEntry.getParent().remove(paletteEntry);
>                 return;
>             }
> 
>             // Set expand state on drawers.
>             if (paletteEntry instanceof PaletteDrawer
>                 && expandHelper.expand(content)) {
>                 ((PaletteDrawer) paletteEntry)
>                     .setInitialState(PaletteDrawer.INITIAL_STATE_OPEN);
>             }    
>         }
313,314c415,445
< 		 * Finds a palette container starting from the given root
< 		 * and using the given path
---
>      * Searches the predefined entries for a palette entry given the full path
>      * as it was predefined.
>      * 
>      * @param predefinedEntries
>      *            map of predefined palette entries where the key is the palette
>      *            entry id and the value is the palette entry
>      * @param path
>      *            the path to the palette entry starting as it was predefined
>      * @return the palette entry if one exists; null otherwise.
>      */
>     private static PaletteEntry findPredefinedEntry(Map predefinedEntries,
>             String path) {
>         StringTokenizer tokens = new StringTokenizer(path, "/"); //$NON-NLS-1$
> 
>         PaletteEntry root = (PaletteEntry) predefinedEntries.get(tokens
>             .nextToken());
> 
>         while (tokens.hasMoreElements()) {
>             if (root instanceof PaletteContainer)
>                 root = findChildPaletteEntry((PaletteContainer) root, tokens
>                     .nextToken());
>             else
>                 return null;
>         }
>         return root;
>     }
>     
>     /**
>      * Finds a palette container starting from the given root and using the
>      * given path
>      * 
319c450
< 		private PaletteEntry findPaletteEntry(PaletteEntry root, String aPath) {
---
>     private static PaletteEntry findPaletteEntry(PaletteEntry root, String aPath) {
340c471
< 		private PaletteEntry findChildPaletteEntry(
---
>     private static PaletteEntry findChildPaletteEntry(
353c484,514
< 		 * Appends the given entry to the end of the group of the given separator
---
>      * Appends the given palette entry to the appropriate location in either a
>      * predefined palette entry or the palette root.
>      * 
>      * @param root
>      * @param predefinedEntries
>      *            map of predefined palette entries where the key is the palette
>      *            entry id and the value is the palette entry
>      * @param path
>      * @param paletteEntry
>      */
>     private static void appendPaletteEntry(PaletteRoot root,
>             Map predefinedEntries, String path, PaletteEntry paletteEntry) {
>         PaletteEntry fEntry = findPaletteEntry(root, path);
>         if (fEntry == null) {
>             fEntry = findPredefinedEntry(predefinedEntries, path);
>         }
>         if (fEntry == null) 
>             Log.info(DiagramProvidersPlugin.getInstance(), DiagramProvidersStatusCodes.SERVICE_FAILURE, "Invalid palette entry path"); //$NON-NLS-1$                
>         else if (fEntry instanceof PaletteContainer)
>              ((PaletteContainer) fEntry).add(paletteEntry);
>         else if (fEntry instanceof PaletteSeparator)
>             appendTo((PaletteSeparator) fEntry, paletteEntry);
>         else
>             fEntry.getParent().add(
>                 fEntry.getParent().getChildren().indexOf(fEntry) + 1,
>                 paletteEntry);
>     }
>     
>     /**
>      * Appends the given entry to the end of the group of the given separator.
>      * 
357c518
< 		private void appendTo(PaletteSeparator separator, PaletteEntry entry) {
---
>     private static void appendTo(PaletteSeparator separator, PaletteEntry entry) {
366d526
< 	}
499c659
< 		PaletteRoot root) {
---
> 		PaletteRoot root, Map predefinedEntries) {
502c662
< 			((ContributionDescriptor) iter.next()).contribute(content, root);
---
> 			((ContributionDescriptor) iter.next()).contribute(content, root, predefinedEntries);
