16,17d15
< import org.eclipse.draw2d.geometry.PrecisionPoint;
< import org.eclipse.draw2d.geometry.PrecisionRectangle;
100,101c98,99
< 		origin = ptStart.getCopy();
< 		terminus = ptEnd.getCopy();
---
> 		origin = new Point(ptStart);
> 		terminus = new Point(ptEnd);
195c193
< 		return origin.getCopy();
---
> 		return new Point(origin);
204c202
< 		return terminus.getCopy();
---
> 		return new Point(terminus);
213c211
< 		this.origin = origin.getCopy();
---
> 		this.origin = new Point(origin);
222c220
< 		this.terminus = terminus.getCopy();
---
> 		this.terminus = new Point(terminus);
354,360c352,353
< 		/*
< 		 * We need perform the calculations in double numbers to avoid possible integer
< 		 * overflows in Point#getDistance2() method
< 		 */
< 		double lengthOfSegment = Math.sqrt((origin.x - terminus.x)*(origin.x - terminus.x) + (origin.y - terminus.y)*(origin.y - terminus.y));
< 		double lengthFromOriginToPoint = Math.sqrt((origin.x - aPoint.x)*(origin.x - aPoint.x) + (origin.y - aPoint.y)*(origin.y - aPoint.y));
< 		double lengthFromTerminusToPoint = Math.sqrt((terminus.x - aPoint.x)*(terminus.x - aPoint.x) + (terminus.y - aPoint.y)*(terminus.y - aPoint.y));
---
> 		Point theOrigin = getOrigin();
> 		Point theTerminus = getTerminus();
362c355,357
< 		return lengthFromTerminusToPoint + lengthFromOriginToPoint - lengthOfSegment < tolerance;
---
> 		return (
> 			theOrigin.getDistance(aPoint) + aPoint.getDistance(theTerminus)
> 				<= length() + tolerance);
802,805c797
< 		PrecisionPoint preciseOrigin = new PrecisionPoint(origin);
< 		PrecisionPoint preciseTerminus = new PrecisionPoint(terminus);
< 		return getLineEquation(preciseOrigin.preciseX, preciseOrigin.preciseY,
< 				preciseTerminus.preciseX, preciseTerminus.preciseY);
---
> 		return getLineEquation(origin.x, origin.y, terminus.x, terminus.y);
820c812
< 		PrecisionPointList intersections = new PrecisionPointList();
---
> 		PointList intersections = new PointList();
836,837c828,829
< 				intersections.addPoint(line.getOrigin().getCopy());
< 				intersections.addPoint(line.getTerminus().getCopy());
---
> 				intersections.addPoint(new Point(line.getOrigin().getCopy()));
> 				intersections.addPoint(new Point(line.getTerminus().getCopy()));
841c833
< 			intersections.addPoint(new PrecisionPoint((c1*b2-b1*c2)/det, (a1*c2-c1*a2)/det));
---
> 			intersections.addPoint(new Point(Math.round((c1*b2-b1*c2)/det), Math.round((a1*c2-c1*a2)/det)));
853,857c845,846
< 		PointList intersections = new PrecisionPointList();
< 		PrecisionPoint preciseOrigin = new PrecisionPoint(origin);
< 		PrecisionPoint preciseTerminus = new PrecisionPoint(terminus);
< 		PrecisionRectangle preciseEllipseBounds = new PrecisionRectangle(ellipseBounds);
< 		if (preciseEllipseBounds.preciseWidth == 0 || preciseEllipseBounds.preciseHeight == 0)
---
> 		PointList intersections = new PointList();
> 		if (ellipseBounds.width == 0 || ellipseBounds.height == 0)
859,865c848,852
< 		PrecisionPoint ellipsePreciseCenter = new PrecisionPoint(
< 				preciseEllipseBounds.getCenter());
< 		double xl1 = preciseOrigin.preciseX - ellipsePreciseCenter.preciseX;
< 		double xl2 = preciseTerminus.preciseX - ellipsePreciseCenter.preciseX;
< 		double yl1 = preciseOrigin.preciseY - ellipsePreciseCenter.preciseY;
< 		double yl2 = preciseTerminus.preciseY - ellipsePreciseCenter.preciseY;
< 		double [] equation = LineSeg.getLineEquation(xl1, yl1, xl2, yl2);
---
> 		double xl1 = getOrigin().x - ellipseBounds.getCenter().x;
> 		double xl2 = getTerminus().x - ellipseBounds.getCenter().x;
> 		double yl1 = getOrigin().y - ellipseBounds.getCenter().y;
> 		double yl2 = getTerminus().y - ellipseBounds.getCenter().y;
> 		double [] equation = getLineEquation(xl1, yl1, xl2, yl2);
873,874c860,861
< 		double w = preciseEllipseBounds.preciseWidth;
< 		double h = preciseEllipseBounds.preciseHeight;
---
> 		double w = ellipseBounds.width;
> 		double h = ellipseBounds.height;
876c863
< 		// Ellipse with a center at the origin has an equation:
---
> 		// Ellipse with a cneter at the origin has an equation:
890,891c877,878
< 			intersections.addPoint(new PrecisionPoint(x+ellipsePreciseCenter.preciseX, Math.sqrt(y)+ellipsePreciseCenter.preciseY));
< 			intersections.addPoint(new PrecisionPoint(x+ellipsePreciseCenter.preciseX, -Math.sqrt(y)+ellipsePreciseCenter.preciseY));
---
> 			intersections.addPoint(new Point(Math.round(x+ellipseBounds.getCenter().x), Math.round(Math.sqrt(y)+ellipseBounds.getCenter().y)));
> 			intersections.addPoint(new Point(Math.round(x+ellipseBounds.getCenter().x), Math.round(-Math.sqrt(y)+ellipseBounds.getCenter().y)));
907,908c894,895
< 			intersections.addPoint(new PrecisionPoint(x1+ellipsePreciseCenter.preciseX, (c-a*x1)/b+ellipsePreciseCenter.preciseY));
< 			intersections.addPoint(new PrecisionPoint(x2+ellipsePreciseCenter.preciseX, (c-a*x2)/b+ellipsePreciseCenter.preciseY));
---
> 			intersections.addPoint(new Point(Math.round(x1+ellipseBounds.getCenter().x), Math.round((c-a*x1)/b+ellipseBounds.getCenter().y)));
> 			intersections.addPoint(new Point(Math.round(x2+ellipseBounds.getCenter().x), Math.round((c-a*x2)/b+ellipseBounds.getCenter().y)));
925c912,917
< 		PointList intersections = new PrecisionPointList();
---
> 		double temp[] = getEquation();
> 		double a = temp[0];
> 		double b = temp[1];
> 		double c = temp[2];
> 		PointList intersections = new PointList();
> 
927,928c919,920
< 			if (containsPoint(points.getFirstPoint(), DEFAULT_INTERSECTION_TOLERANCE)) {
< 				intersections.addPoint(points.getFirstPoint());
---
> 			if (a*points.getPoint(0).x+b*points.getPoint(0).y==c) {
> 				intersections.addPoint(points.getPoint(0).getCopy());
930c922,924
< 		} else {	
---
> 			return intersections;
> 		}
> 		
932,933c926,927
< 				LineSeg seg = new LineSeg(points.getPoint(i), points.getPoint(i+1));
< 				PointList currentIntersections = getLinesIntersections(seg);
---
> 			LineSeg line = new LineSeg(points.getPoint(i).getCopy(), points.getPoint(i+1).getCopy());
> 			PointList currentIntersections = getLinesIntersections(line);
936c930
< 					if (seg.containsPoint(intersection, DEFAULT_INTERSECTION_TOLERANCE)) {
---
> 				if (line.containsPoint(intersection,DEFAULT_INTERSECTION_TOLERANCE))
940,941d933
< 			}
< 		}
962d953
< 	
