14d13
< import org.eclipse.core.commands.ExecutionException;
16,20d14
< import org.eclipse.core.runtime.IAdaptable;
< import org.eclipse.core.runtime.IProgressMonitor;
< import org.eclipse.core.runtime.IStatus;
< import org.eclipse.core.runtime.NullProgressMonitor;
< import org.eclipse.core.runtime.Status;
22d15
< import org.eclipse.emf.workspace.AbstractEMFOperation;
24,25d16
< import org.eclipse.gef.commands.Command;
< import org.eclipse.gmf.internal.runtime.lite.Activator;
27,29c18,19
< public class WrappingCommand extends Command {
< 	private final IUndoableOperation operation;
< 	private final TransactionalEditingDomain editingDomain;
---
> public class WrappingCommand extends AbstractWrappingCommand {
> 	private final EMFCommandOperation operation;
32a23
> 		super(editingDomain);
34d24
< 		this.editingDomain = editingDomain;
37,83c27,28
< 	public void execute() {
< 		try {
< 			operation.execute(new NullProgressMonitor(), null);
< 		} catch (ExecutionException e) {
< 			Activator.getDefault().logError("exception occurred while executing operation", e);
< 		}
< 	}
< 
< 	public boolean canExecute() {
< 		/*
< 		 * Some commands (see StrictCompoundCommand) require read-write transaction to test for executability. 
< 		 * When they fail, the RollbackException is consumed, and the command is not rolled back, thus leaving the model in a modified state.
< 		 */
< 		final boolean[] result = new boolean[1];
< 		AbstractEMFOperation canExecute = new AbstractEMFOperation(editingDomain, "canExecute") {
< 			@Override
< 			protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
< 				result[0] = operation.canExecute();
< 				return Status.OK_STATUS;
< 			}
< 		};
< 		try {
< 			canExecute.execute(new NullProgressMonitor(), null);
< 		} catch (ExecutionException e) {
< 			Activator.getDefault().logError("exception occurred while testing executability of operation", e);
< 		}
< 		return result[0];
< 	}
< 
< 	public void undo() {
< 		try {
< 			operation.undo(new NullProgressMonitor(), null);
< 		} catch (ExecutionException e) {
< 			Activator.getDefault().logError("exception occurred while undoing operation", e);
< 		}
< 	}
< 
< 	public boolean canUndo() {
< 		return operation.canUndo();
< 	}
< 
< 	public void redo() {
< 		try {
< 			operation.redo(new NullProgressMonitor(), null);
< 		} catch (ExecutionException e) {
< 			Activator.getDefault().logError("exception occurred while redoing operation", e);
< 		}
---
> 	public org.eclipse.emf.common.command.Command getEMFCommand() {
> 		return operation.getCommand();
87,89c32,33
< 	public void dispose() {
< 		operation.dispose();
< 		super.dispose();
---
> 	protected IUndoableOperation getOperation() {
> 		return operation;
