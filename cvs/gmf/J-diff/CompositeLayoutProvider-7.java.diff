2c2
<  * Copyright (c) 2006, 2007 IBM Corporation and others.
---
>  * Copyright (c) 2006, 2008 IBM Corporation and others.
21a22
> import org.eclipse.draw2d.PositionConstants;
43a45
> import org.eclipse.gmf.runtime.draw2d.ui.graph.ConstantSizeNode;
93a96
>                     subGraph.setDirection(getLayoutDirection(ep));
97c100
<                         n = new Node(ep, rootGraph);
---
>                         n = new ConstantSizeNode(ep, rootGraph);
99c102
<                         n = new Node(ep);
---
>                         n = new ConstantSizeNode(ep);
110a114,116
>                 if (n instanceof ConstantSizeNode) {
>                     build_borderNodes(gep, (ConstantSizeNode)n, editPartToNodeDict);                	
>                 }
115a122,132
>     /**
>      * Gets the layout direction for an editpart. Every editpart mapped to 
>      * <code>AdvancedSubGraph</code> will be asked for its desired layout direction
>      * such that children of the subgraph are laid out accordingly to that direction.
>      * 
>      * @param ep the editpart
>      */
>     protected int getLayoutDirection(GraphicalEditPart ep) {
>     	return PositionConstants.SOUTH;
>     }
> 
221c238
<         Insets padding  = new Insets(NODE_PADDING);
---
>         Insets padding  = new Insets(getMapMode().DPtoLP(NODE_PADDING));
241a259,263
>         if (node instanceof ConstantSizeNode) {
>         	ConstantSizeNode cn = (ConstantSizeNode) node;
>             cn.setMinIncomingPadding(getMapMode().DPtoLP(MIN_EDGE_END_POINTS_PADDING));
>             cn.setMinOutgoingPadding(getMapMode().DPtoLP(MIN_EDGE_END_POINTS_PADDING));
>         }
258a281,283
> 	/* (non-Javadoc)
> 	 * @see org.eclipse.gmf.runtime.diagram.ui.providers.internal.DefaultProvider#routeThrough(org.eclipse.draw2d.graph.Edge, org.eclipse.gef.ConnectionEditPart, org.eclipse.draw2d.graph.Node, org.eclipse.draw2d.graph.Node, org.eclipse.draw2d.geometry.PointList, org.eclipse.draw2d.geometry.Point)
> 	 */
260c285
< 			Node source, Node target, PointList points, int diffX, int diffY) {
---
> 			Node source, Node target, PointList points, Point diff) {
270c295
< 				.routeThrough(edge, connectEP, source, target, points, diffX, diffY);
---
> 				.routeThrough(edge, connectEP, source, target, points, diff);
