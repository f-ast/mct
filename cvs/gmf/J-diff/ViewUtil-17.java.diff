2c2
<  * Copyright (c) 2005 IBM Corporation and others.
---
>  * Copyright (c) 2005, 2006 IBM Corporation and others.
12d11
< 
50a50
>  * 
56,57c56,57
< 	 * the append index, this is the index you should use to append a view
< 	 * to a container
---
>      * the append index, this is the index you should use to append a view to a
>      * container
61d60
< 	
64c63,65
< 	 * @param views a collection of Notation <code>View</code>s
---
>      * 
>      * @param views
>      *            a collection of Notation <code>View</code>s
80,81c81
< 	 * operation. 
< 	 * A view will get persisted if the following conditions are met
---
>      * operation. A view will get persisted if the following conditions are met
84c84,85
< 	 * <LI> the supplied view is in a transient list or owned by a transient container
---
>      * <LI> the supplied view is in a transient list or owned by a transient
>      * container
86c87,89
< 	 * @param view the <code>View</code> to persist
---
>      * 
>      * @param view
>      *            the <code>View</code> to persist
91c94,95
< 		TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(view);
---
>         TransactionalEditingDomain editingDomain = TransactionUtil
>             .getEditingDomain(view);
98,99c102,103
< 				PersistElementCommand pvc = 
< 					new PersistElementCommand(editingDomain, viewToPersist);
---
>                 PersistElementCommand pvc = new PersistElementCommand(
>                     editingDomain, viewToPersist);
118,122c122,127
< 	 * Returns the top view that should be persisted,
< 	 * starting from the passed view, it could return the passed view
< 	 * itself if it is a transient view, other wise it will check its
< 	 * parent and so on ...
< 	 * @param view , view to start from
---
>      * Returns the top view that should be persisted, starting from the passed
>      * view, it could return the passed view itself if it is a transient view,
>      * other wise it will check its parent and so on ...
>      * 
>      * @param view ,
>      *            view to start from
137,138c142,143
< 			if (dContainer.eIsSet(NotationPackage.eINSTANCE.getDiagram_TransientEdges()) &&
< 				dContainer.getTransientEdges().size()>0)
---
>             if (dContainer.eIsSet(NotationPackage.Literals
>                 .DIAGRAM__TRANSIENT_EDGES))
142,143c147
< 		}
< 		else if (container instanceof View){
---
>         } else if (container instanceof View) {
148,149c152,153
< 			if (vContainer.eIsSet(NotationPackage.eINSTANCE.getView_TransientChildren()) &&
< 				vContainer.getTransientChildren().size()>0)
---
>             if (vContainer.eIsSet(NotationPackage.Literals
>                 .VIEW__TRANSIENT_CHILDREN))
161c165,166
< 	 * @param view view to destroy
---
>      * @param view
>      *            view to destroy
166,168c171,173
< 		List children = view.getChildren();
< 		for ( int i = 0; i < children.size(); i++ ) {
< 			View child = (View)children.get(i);
---
>         Iterator it = new ArrayList(view.getChildren()).iterator();        
>         while (it.hasNext()) {
>             View child = (View) it.next();
175,176c180,184
< 	 * Returns the container view, or null if the container is not a view or null
< 	 * @param eObject  a notation view
---
>      * Returns the container view, or null if the container is not a view or
>      * null
>      * 
>      * @param eObject
>      *            a notation view
187d194
< 	
189,193c196,200
< 	 * inserts a child  <code>View</code> in a container. the view will be inserted
< 	 * in the persisted collection if the <tt>persisted</tt> flag is <tt>true</tt>;
< 	 * otherwise it will be added to the transied collection.
< 	 * inserting a transient child does not dirty the model, inserting a persisted
< 	 * child will dirty the model 
---
>      * inserts a child <code>View</code> in a container. the view will be
>      * inserted in the persisted collection if the <tt>persisted</tt> flag is
>      * <tt>true</tt>; otherwise it will be added to the transied collection.
>      * inserting a transient child does not dirty the model, inserting a
>      * persisted child will dirty the model
195,196c202,205
< 	 * @param containerView the view's container
< 	 * @param childView notation <code>View</Code> to insert 
---
>      * @param containerView
>      *            the view's container
>      * @param childView
>      *            notation <code>View</Code> to insert 
201,205c210,211
< 	public static void insertChildView(
< 		View containerView,
< 		View childView,
< 		int index,
< 		boolean persisted) {
---
>     public static void insertChildView(View containerView, View childView,
>             int index, boolean persisted) {
208,209c214
< 		}
< 		else {
---
>         } else {
215,218c220,226
< 	 * inserts a child into the transient list, inserting a transient child
< 	 * does not dirty
< 	 * @param child , the child to insert
< 	 * @param container notational element's container
---
>      * inserts a child into the transient list, inserting a transient child does
>      * not dirty
>      * 
>      * @param child ,
>      *            the child to insert
>      * @param container
>      *            notational element's container
220c228,229
< 	static private void insertTransientElement(final View container,final View child) {
---
>     static private void insertTransientElement(final View container,
>             final View child) {
232,234c241,247
< 	 * @param container the notational element's container
< 	 * @param child , the child to insert
< 	 * @param index the notational element's position within the container.
---
>      * 
>      * @param container
>      *            the notational element's container
>      * @param child ,
>      *            the child to insert
>      * @param index
>      *            the notational element's position within the container.
236c249,250
< 	static private void insertPersistedElement(View container,View child, int index) {
---
>     static private void insertPersistedElement(View container, View child,
>             int index) {
253c267,269
< 	  * @param view <code>View</code> to check
---
>      * 
>      * @param view
>      *            <code>View</code> to check
272,275c288,294
< 	 * gets a the first child in the passed <code>View</code> that had the same type as
< 	 * the passed semantic hint. 
< 	 * @param view	the view to search inside
< 	 * @param semanticHint	the semantic hint to look for
---
>      * gets a the first child in the passed <code>View</code> that had the
>      * same type as the passed semantic hint.
>      * 
>      * @param view
>      *            the view to search inside
>      * @param semanticHint
>      *            the semantic hint to look for
279c298,299
< 		for(Iterator children = view.getChildren().iterator();children.hasNext();) {
---
>         for (Iterator children = view.getChildren().iterator(); children
>             .hasNext();) {
288d307
< 	
291,292c310,314
< 	 * @param view  the view to use for the search
< 	 * @param id	the property to look for
---
>      * 
>      * @param view
>      *            the view to use for the search
>      * @param id
>      *            the property to look for
297c319,320
< 			EStructuralFeature feature = (EStructuralFeature) PackageUtil.getElement((String)id);
---
>             EStructuralFeature feature = (EStructuralFeature) PackageUtil
>                 .getElement((String) id);
299c322,323
< 				return isPropertySupported(view,feature, feature.getEContainingClass());
---
>                 return isPropertySupported(view, feature, feature
>                     .getEContainingClass());
307,308c331,335
< 	 * @param view  the view to use for the search
< 	 * @param feature	the feature to look for
---
>      * 
>      * @param view
>      *            the view to use for the search
>      * @param feature
>      *            the feature to look for
311c338,339
< 	public static boolean isFeatureSupported(View view,EStructuralFeature feature) {
---
>     public static boolean isFeatureSupported(View view,
>             EStructuralFeature feature) {
313c341,342
< 			return isPropertySupported(view,feature, feature.getEContainingClass());
---
>             return isPropertySupported(view, feature, feature
>                 .getEContainingClass());
320,322c349,355
< 	 * @param view  the view to use for the search
< 	 * @param feature the feature to look for
< 	 * @param featureClass the feature's <code>EClass</code>
---
>      * 
>      * @param view
>      *            the view to use for the search
>      * @param feature
>      *            the feature to look for
>      * @param featureClass
>      *            the feature's <code>EClass</code>
325c358,359
< 	public static  boolean isPropertySupported(View view,EStructuralFeature feature, EClass featureClass) {
---
>     public static boolean isPropertySupported(View view,
>             EStructuralFeature feature, EClass featureClass) {
342,343c376,380
< 	 * @param view the view to use to get the value
< 	 * @param feature the feature to use
---
>      * 
>      * @param view
>      *            the view to use to get the value
>      * @param feature
>      *            the feature to use
346c383,384
< 	static public final Object getStructuralFeatureValue(View view, EStructuralFeature feature) {
---
>     static public final Object getStructuralFeatureValue(View view,
>             EStructuralFeature feature) {
348c386,387
< 				return ViewUtil.getPropertyValue(view,feature, feature.getEContainingClass());
---
>             return ViewUtil.getPropertyValue(view, feature, feature
>                 .getEContainingClass());
354,357c393,401
< 	 * Returns the value of the featrue inside a specific EClass within the passed view
< 	 * @param view the view to use to get the value
< 	 * @param feature the featrue to use to get the value
< 	 * @param featureClass the <code>EClass</code> to use to get the feature
---
>      * Returns the value of the featrue inside a specific EClass within the
>      * passed view
>      * 
>      * @param view
>      *            the view to use to get the value
>      * @param feature
>      *            the featrue to use to get the value
>      * @param featureClass
>      *            the <code>EClass</code> to use to get the feature
360c404,405
< 	public static  Object getPropertyValue(View view,EStructuralFeature feature, EClass featureClass) {
---
>     public static Object getPropertyValue(View view,
>             EStructuralFeature feature, EClass featureClass) {
380,384c425,433
< 	 * Sets the passed feature if possible on the passed view
< 	 * to the passed value.
< 	 * @param view the view to set the value on 
< 	 * @param feature the feature to use
< 	 * @param value  the value of the property being set
---
>      * Sets the passed feature if possible on the passed view to the passed
>      * value.
>      * 
>      * @param view
>      *            the view to set the value on
>      * @param feature
>      *            the feature to use
>      * @param value
>      *            the value of the property being set
386c435,436
< 	public static void setStructuralFeatureValue(View view,EStructuralFeature feature,Object value) {
---
>     public static void setStructuralFeatureValue(View view,
>             EStructuralFeature feature, Object value) {
388c438,439
< 				ViewUtil.setPropertyValue(view,feature, feature.getEContainingClass(), value);
---
>             ViewUtil.setPropertyValue(view, feature, feature
>                 .getEContainingClass(), value);
394,399c445,455
< 	 * Sets the passed featrue on the passed EClass inside the passed view
< 	 * to the new value if possible
< 	 * @param view the view to set the value on 
< 	 * @param feature the feature to set
< 	 * @param featureClass <code> EClass </code> that owns the feature
< 	 * @param value  the value of the feature being set
---
>      * Sets the passed featrue on the passed EClass inside the passed view to
>      * the new value if possible
>      * 
>      * @param view
>      *            the view to set the value on
>      * @param feature
>      *            the feature to set
>      * @param featureClass
>      *            <code> EClass </code> that owns the feature
>      * @param value
>      *            the value of the feature being set
401c457,458
< 	public static void setPropertyValue(View view,EStructuralFeature feature, EClass featureClass, Object value) {
---
>     public static void setPropertyValue(View view, EStructuralFeature feature,
>             EClass featureClass, Object value) {
436c493,494
<             TransactionalEditingDomain domain = TransactionUtil.getEditingDomain(view);
---
>             TransactionalEditingDomain domain = TransactionUtil
>                 .getEditingDomain(view);
445,447c503,507
< 	 * resolves the passed element, and returns it.
< 	 * If the element is unresolvable the method will returns <code>null</code>
< 	 * @param the element to resolve
---
>      * resolves the passed element, and returns it. If the element is
>      * unresolvable the method will returns <code>null</code>
>      * 
>      * @param the
>      *            element to resolve
452c512,513
<             TransactionalEditingDomain domain = TransactionUtil.getEditingDomain(object);
---
>             TransactionalEditingDomain domain = TransactionUtil
>                 .getEditingDomain(object);
460,462c521,525
< 	 * gets the <code>View</code>'s semantic element Class Id, this could be used to
< 	 * check the semantic element type
< 	 * @param view the owner of the semantic element
---
>      * gets the <code>View</code>'s semantic element Class Id, this could be
>      * used to check the semantic element type
>      * 
>      * @param view
>      *            the owner of the semantic element
467c530,531
< 	    return element == null ? null : PackageUtil.getID(EMFCoreUtil.getProxyClass(element));
---
>         return element == null ? null
>             : PackageUtil.getID(EMFCoreUtil.getProxyClass(element));
472c536,538
< 	 * @param view the view to use
---
>      * 
>      * @param view
>      *            the view to use
476c542
< 		if (!view.eIsSet(NotationPackage.eINSTANCE.getView_SourceEdges()))
---
>         if (!view.eIsSet(NotationPackage.Literals.VIEW__SOURCE_EDGES))
483c549,551
< 	 * @param view the view to use
---
>      * 
>      * @param view
>      *            the view to use
487c555
< 		if (!view.eIsSet(NotationPackage.eINSTANCE.getView_TargetEdges()))
---
>         if (!view.eIsSet(NotationPackage.Literals.VIEW__TARGET_EDGES))
493,496c561,624
< 	 * return eClass Name of the view's semantic element, this method 
< 	 * works only if the semantic element is a NameElement, otherwise 
< 	 * it will return an Empty String 
< 	 * @param  view	the view object
---
>      * gets all the <code>Edge</code>'s whose source is this view
>      * 
>      * @param view
>      *            the view to use
>      * @return List the edges list
>      */
>      public static List getSourceConnectionsConnectingVisibleViews(View view) {
>         if (!view.eIsSet(NotationPackage.Literals.VIEW__SOURCE_EDGES))
>             return Collections.EMPTY_LIST;
>         List sourceConnections = new ArrayList();
>         Iterator iter = view.getSourceEdges().iterator();
>         while (iter.hasNext()) {
>             Edge edge = (Edge)iter.next();
>             View target = edge.getTarget();
>             if (edge.isVisible() && isVisible(target)){
>                 sourceConnections.add(edge);
>             }
>             
>         }
>         return sourceConnections;
>      }
>     
>     
> 
>      private static boolean isVisible(View target) {
>         if (target.isVisible()){
>             EObject parent = target.eContainer();
>             if (parent instanceof View){
>                 return isVisible((View)parent);
>             }
>             return true;
>         }
>         return false;
>     }
>      
>     /**
>      * gets all the <code>Edge</code>'s whose target is this view
>      * 
>      * @param view
>      *            the view to use
>      * @return List the edges list
>      */
>      public static List getTargetConnectionsConnectingVisibleViews(View view) {
>         if (!view.eIsSet(NotationPackage.Literals.VIEW__TARGET_EDGES))
>             return Collections.EMPTY_LIST;
>         List targteConnections = new ArrayList();
>         Iterator iter = view.getTargetEdges().iterator();
>         while (iter.hasNext()) {
>             Edge edge = (Edge)iter.next();
>             View source = edge.getSource();
>             if (edge.isVisible() && isVisible(source)){
>                 targteConnections.add(edge);
>             }
>         }
>         return targteConnections;
>      }
> 
>     /**
>      * return eClass Name of the view's semantic element, this method works only
>      * if the semantic element is a NameElement, otherwise it will return an
>      * Empty String
>      * 
>      * @param view
>      *            the view object
508c636,638
< 	 * @param view the view
---
>      * 
>      * @param view
>      *            the view
523,528c653,664
< 	 * @param container the view's container
< 	 * @param child the child to reposition
< 	 * @param newIndex (zero-based)
< 	 * @throws IndexOutOfBoundsException if index is out of bounds
< 	 * @throws IllegalArgumentException if the child is not contianed by the container,
< 	 * or if the new position is the <code>ViewUtil.APPEND</code>position 
---
>      * 
>      * @param container
>      *            the view's container
>      * @param child
>      *            the child to reposition
>      * @param newIndex
>      *            (zero-based)
>      * @throws IndexOutOfBoundsException
>      *             if index is out of bounds
>      * @throws IllegalArgumentException
>      *             if the child is not contianed by the container, or if the new
>      *             position is the <code>ViewUtil.APPEND</code>position
530c666,667
< 	static public void repositionChildAt(View container , View child, int newIndex) {
---
>     static public void repositionChildAt(View container, View child,
>             int newIndex) {
533c670,671
< 			throw new IllegalArgumentException("child is not an existing child of the view"); //$NON-NLS-1$
---
>             throw new IllegalArgumentException(
>                 "child is not an existing child of the view"); //$NON-NLS-1$
535c673,674
< 			throw new IllegalArgumentException("append position is not allowed for reposition"); //$NON-NLS-1$
---
>             throw new IllegalArgumentException(
>                 "append position is not allowed for reposition"); //$NON-NLS-1$
542,543c681,685
< 	 * @param view the view to search in 
< 	 * @param idStr the child's id
---
>      * 
>      * @param view
>      *            the view to search in
>      * @param idStr
>      *            the child's id
547c689,690
< 		for(Iterator children = view.getChildren().iterator();children.hasNext();) {
---
>         for (Iterator children = view.getChildren().iterator(); children
>             .hasNext();) {
557,562c700,711
<      * Sets the property with the given id if possible on the passed view
<      * to the passed value.
<      * @param view the view to set the value on 
<      * @param id  the id of the property being set
<      * @param value  the value of the property being set
<      * @deprecated use {@link ViewUtil#setStructuralFeatureValue(View, EStructuralFeature, Object}} instead
---
>      * Sets the property with the given id if possible on the passed view to the
>      * passed value.
>      * 
>      * @param view
>      *            the view to set the value on
>      * @param id
>      *            the id of the property being set
>      * @param value
>      *            the value of the property being set
>      * @deprecated use
>      *             {@link ViewUtil#setStructuralFeatureValue(View, EStructuralFeature, Object}}
>      *             instead
566c715,716
<             EStructuralFeature feature = (EStructuralFeature) PackageUtil.getElement((String)id);
---
>             EStructuralFeature feature = (EStructuralFeature) PackageUtil
>                 .getElement((String) id);
568c718,719
<                 ViewUtil.setPropertyValue(view,feature, feature.getEContainingClass(), value);
---
>                 ViewUtil.setPropertyValue(view, feature, feature
>                     .getEContainingClass(), value);
575,577c726,732
<      * Returns the value of the property with the given id inside the passed view
<      * @param view the view to use to get the value
<      * @param id the id of the property to get
---
>      * Returns the value of the property with the given id inside the passed
>      * view
>      * 
>      * @param view
>      *            the view to use to get the value
>      * @param id
>      *            the id of the property to get
579c734,736
<      * @deprecated use {@link ViewUtil#getStructuralFeatureValue(View, EStructuralFeature)} instead
---
>      * @deprecated use
>      *             {@link ViewUtil#getStructuralFeatureValue(View, EStructuralFeature)}
>      *             instead
583c740,741
<             EStructuralFeature feature = (EStructuralFeature) PackageUtil.getElement((String)id);
---
>             EStructuralFeature feature = (EStructuralFeature) PackageUtil
>                 .getElement((String) id);
585c743,744
<                 return ViewUtil.getPropertyValue(view,feature, feature.getEContainingClass());
---
>                 return ViewUtil.getPropertyValue(view, feature, feature
>                     .getEContainingClass());
