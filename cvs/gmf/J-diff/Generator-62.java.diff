15a16
> import java.net.URL;
20d20
< import java.util.LinkedList;
25d24
< import org.eclipse.core.resources.IProject;
27d25
< import org.eclipse.core.resources.ResourcesPlugin;
31,33d28
< import org.eclipse.core.runtime.IStatus;
< import org.eclipse.core.runtime.MultiStatus;
< import org.eclipse.core.runtime.NullProgressMonitor;
35d29
< import org.eclipse.core.runtime.Status;
37d30
< import org.eclipse.emf.codegen.jet.JETEmitter;
39,40d31
< import org.eclipse.emf.codegen.jmerge.JControlModel;
< import org.eclipse.emf.codegen.jmerge.JMerger;
57,67c48
< import org.eclipse.gmf.common.codegen.ImportUtil;
< import org.eclipse.jdt.core.ICompilationUnit;
< import org.eclipse.jdt.core.IPackageFragment;
< import org.eclipse.jdt.core.IPackageFragmentRoot;
< import org.eclipse.jdt.core.JavaCore;
< import org.eclipse.jdt.core.JavaModelException;
< import org.eclipse.jdt.core.ToolFactory;
< import org.eclipse.jdt.core.formatter.CodeFormatter;
< import org.eclipse.jface.text.Document;
< import org.eclipse.jface.text.IDocument;
< import org.eclipse.text.edits.TextEdit;
---
> import org.eclipse.gmf.common.codegen.GeneratorBase;
74c55
< public class Generator implements Runnable {
---
> public class Generator extends GeneratorBase implements Runnable {
80,93d60
< 	// myDestRoot.getJavaProject().getElementName() == myDestProject.getName()
< 	private IPackageFragmentRoot myDestRoot;
< 
< 	private IProject myDestProject;
< 
< 	private JControlModel myJControlModel;
< 
< 	private CodeFormatter myCodeFormatter;
< 
< 	private IProgressMonitor myProgress;
< 
< 	private IStatus myRunStatus = Status.CANCEL_STATUS;
< 	private List/*<IStatus>*/ myExceptions;
< 
123,133c90,91
< 	public void run(IProgressMonitor progress) throws InterruptedException {
< 		setProgressMonitor(progress);
< 		doRun();
< 	}
< 
< 	public void run() {
< 		try {
< 			doRun();
< 		} catch (InterruptedException ex) {
< 			myRunStatus = new Status(IStatus.CANCEL, "org.eclipse.gmf.codegen", 0, Messages.interrupted, ex);
< 		}
---
> 	protected URL getJMergeControlFile() {
> 		return myEmitters.getJMergeControlFile();
136,141c94,95
< 	private void doRun() throws InterruptedException {
< 		try {
< 			setupProgressMonitor();
< 			myExceptions = new LinkedList/*<IStatus>*/();
< 			initializeEditorProject();
< 
---
> 	protected void customRun() throws InterruptedException, JETException, UnexpectedBehaviourException {
> 		initializeEditorProject(myDiagram.getEditorGen().getPlugin().getID(), createReferencedProjectsList());
223,247d176
< 
< 			if (myExceptions.isEmpty()) {
< 				myRunStatus = Status.OK_STATUS;
< 			} else {
< 				IStatus[] s = (IStatus[]) myExceptions.toArray(new IStatus[myExceptions.size()]);
< 				myRunStatus = new MultiStatus("org.eclipse.gmf.codegen", 0, s, Messages.problems, null);
< 			}
< 		} catch (NullPointerException ex) {
< 			myRunStatus = new Status(IStatus.ERROR, "org.eclipse.gmf.codegen", 0, NullPointerException.class.getName(), ex);
< 		} catch (JETException ex) {
< 			myRunStatus = ex.getStatus();
< 		} catch (UnexpectedBehaviourException ex) {
< 			myRunStatus = new Status(Status.ERROR, "org.eclipse.gmf.codegen", 0, Messages.unexpected, ex);
< 		} finally {
< 			myProgress.done();
< 			myExceptions = null;
< 		}
< 	}
< 
< 	/**
< 	 * Provides information about success/failures during {@link #run()}
< 	 * @return state of the generator run, or CANCEL if generator was not yet run.
< 	 */
< 	public IStatus getRunStatus() {
< 		return myRunStatus;
858c787
< 			IPath containerPath = myDestProject.getFullPath().append(iconPath.removeLastSegments(1));
---
> 			IPath containerPath = getDestProject().getFullPath().append(iconPath.removeLastSegments(1));
860c789
< 			IFile f = myDestProject.getFile(iconPath);
---
> 			IFile f = getDestProject().getFile(iconPath);
868,900c797
< 			myExceptions.add(ex.getStatus());
< 		} finally {
< 			pm.done();
< 		}
< 
< 	}
< 	
< 	/**
< 	 * Generate ordinary file. No merge is performed at the moment.
< 	 * @param emitter template to use
< 	 * @param filePath - project-relative path to file, e.g. META-INF/MANIFEST.MF
< 	 * @param param TODO
< 	 * @throws JETException
< 	 * @throws InterruptedException
< 	 */
< 	private void doGenerateFile(JETEmitter emitter, IPath filePath, Object param) throws JETException, InterruptedException {
< 		assert !myDestProject.getName().equals(filePath.segment(0));
< 		IProgressMonitor pm = getNextStepMonitor();
< 		try {
< 			pm.beginTask(filePath.lastSegment(), 4);
< 			IPath containerPath = myDestProject.getFullPath().append(filePath.removeLastSegments(1));
< 			CodeGenUtil.findOrCreateContainer(containerPath, false, (IPath) null, new SubProgressMonitor(pm, 1));
< 			String genText = emitter.generate(new SubProgressMonitor(pm, 1), new Object[] { param });
< 			IFile f = myDestProject.getFile(filePath);
< 			// FIXME merge!
< 			if (f.exists()) {
< 				f.setContents(new ByteArrayInputStream(genText.getBytes()), true, true, new SubProgressMonitor(pm, 1));
< 			} else {
< 				f.create(new ByteArrayInputStream(genText.getBytes()), true, new SubProgressMonitor(pm, 1));
< 			}
< 			f.getParent().refreshLocal(IResource.DEPTH_ONE, new SubProgressMonitor(pm, 1));
< 		} catch (CoreException ex) {
< 			myExceptions.add(ex.getStatus());
---
> 			handleException(ex);
906,919c803
< 	/**
< 	 * Optionally, specify progressMonitor to use. Should be called prior to {@link #run()}
< 	 * @param progress
< 	 */
< 	public void setProgressMonitor(IProgressMonitor progress) {
< 		myProgress = progress;
< 	}
< 
< 	private void setupProgressMonitor() {
< 		if (myProgress == null) {
< 			myProgress = new NullProgressMonitor();
< 			return;
< 			// no need to set it up
< 		}
---
> 	protected void setupProgressMonitor() {
925,930c809
< 		myProgress.beginTask(Messages.start, c.getTotal());
< 	}
< 
< 	private IProgressMonitor getNextStepMonitor() throws InterruptedException {
< 		if (myProgress.isCanceled()) {
< 			throw new InterruptedException();
---
> 		setupProgressMonitor(Messages.start, c.getTotal());
932,945d810
< 		return new SubProgressMonitor(myProgress, 1);
< 	}
< 
< 	private void initializeEditorProject() throws UnexpectedBehaviourException, InterruptedException {
< 		myDestProject = ResourcesPlugin.getWorkspace().getRoot().getProject(myDiagram.getEditorGen().getPlugin().getID());
< 		final Path srcPath = new Path('/' + myDestProject.getName() + "/src"); //$NON-NLS-1$
< 		final Path projectLocation = null; // use default
< 		final List referencedProjects = createReferencedProjectsList();
< 		final int style = org.eclipse.emf.codegen.ecore.Generator.EMF_PLUGIN_PROJECT_STYLE;
< 		// pluginVariables is NOT used when style is EMF_PLUGIN_PROJECT_STYLE
< 		final List pluginVariables = null;
< 		final IProgressMonitor pm = getNextStepMonitor();
< 
< 		org.eclipse.emf.codegen.ecore.Generator.createEMFProject(srcPath, projectLocation, referencedProjects, pm, style, pluginVariables);
947,955d811
< 		try {
< 			myDestRoot = JavaCore.create(myDestProject).findPackageFragmentRoot(srcPath);
< 		} catch (JavaModelException ex) {
< 			throw new UnexpectedBehaviourException(ex.getMessage());
< 		}
< 		if (myDestRoot == null) {
< 			throw new UnexpectedBehaviourException("no source root can be found");
< 		}
< 	}
957c813
< 	private List createReferencedProjectsList() {
---
> 	protected final List createReferencedProjectsList() {
961,1031d816
< 	/**
< 	 * NOTE: potential problem - packageName and className should match those specified in 
< 	 * the template. Besides, getQualifiedXXX helpers in diagram GenModel should also correctly
< 	 * return qualified class names.  
< 	 */
< 	private void doGenerateJavaClass(JETEmitter emitter, String packageName, String className, Object input) throws InterruptedException {
< 		IProgressMonitor pm = getNextStepMonitor();
< 		try {
< 			pm.beginTask(className, 4);
< 			final Object emitterArg = new Object[] {input, new ImportUtil(packageName)};
< 			String genText = emitter.generate(new SubProgressMonitor(pm, 1), new Object[] { emitterArg });
< 			IPackageFragment pf = myDestRoot.createPackageFragment(packageName, true, new SubProgressMonitor(pm, 1));
< 			ICompilationUnit cu = pf.getCompilationUnit(className + ".java"); //$NON-NLS-1$
< 			if (cu.exists()) {
< 				genText = merge(genText, cu.getSource(), new SubProgressMonitor(pm, 1));
< 			} else {
< 				pm.worked(1);
< 			}
< 			pf.createCompilationUnit(cu.getElementName(), formatCode(genText), true, new SubProgressMonitor(pm, 1));
< 		} catch (NullPointerException ex) {
< 			myExceptions.add(new Status(IStatus.ERROR, "org.eclipse.gmf.codegen", 0, ex.getMessage(), ex));
< 		} catch (JETException ex) {
< 			myExceptions.add(ex.getStatus());
< 		} catch (CoreException ex) {
< 			myExceptions.add(ex.getStatus());		
< 		} finally {
< 			pm.done();
< 		}
< 	}
< 
< 	private String merge(String generatedText, String oldContents, IProgressMonitor pm) {
< 		pm.beginTask(Messages.merge, 1);
< 		JMerger jMerge = new JMerger();
< 		jMerge.setControlModel(getJControlModel());
< 		jMerge.setSourceCompilationUnit(jMerge.createCompilationUnitForContents(generatedText));
< 		jMerge.setTargetCompilationUnit(jMerge.createCompilationUnitForContents(oldContents));
< 		jMerge.merge();
< 		pm.done();
< 		return jMerge.getTargetCompilationUnitContents();
< 	}
< 
< 	private String formatCode(String text) {
< 		IDocument doc = new Document(text);
< 		TextEdit edit = getCodeFormatter().format(CodeFormatter.K_COMPILATION_UNIT, doc.get(), 0, doc.get().length(), 0, null);
< 
< 		try {
< 			// check if text formatted successfully 
< 			if(edit != null) {
< 				edit.apply(doc);
< 				text = doc.get();				
< 			}		
< 		} catch (Exception ex) {
< 			ex.printStackTrace();
< 		}
< 		return text;
< 	}
< 
< 	private CodeFormatter getCodeFormatter() {
< 		if (myCodeFormatter == null) {
< 			myCodeFormatter = ToolFactory.createCodeFormatter(null);
< 		}
< 		return myCodeFormatter;
< 	}
< 
< 	private JControlModel getJControlModel() {
< 		if (myJControlModel == null) {
< 			myJControlModel = new JControlModel(myEmitters.getJMergeControlFile().toString());
< 		}
< 		return myJControlModel;
< 	}
< 
