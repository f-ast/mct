21a22,24
> import org.eclipse.emf.edit.provider.ViewerNotification;
> 
> import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;
85a89,104
> 	 * This specifies how to implement {@link #getChildren} and is used to deduce an appropriate feature for an
> 	 * {@link org.eclipse.emf.edit.command.AddCommand}, {@link org.eclipse.emf.edit.command.RemoveCommand} or
> 	 * {@link org.eclipse.emf.edit.command.MoveCommand} in {@link #createCommand}.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public Collection getChildrenFeatures(Object object) {
> 		if (childrenFeatures == null) {
> 			super.getChildrenFeatures(object);
> 			childrenFeatures.add(GMFGenPackage.eINSTANCE.getGenLink_Labels());
> 		}
> 		return childrenFeatures;
> 	}
> 
> 	/**
106a126,131
> 
> 		switch (notification.getFeatureID(GenLink.class)) {
> 			case GMFGenPackage.GEN_LINK__LABELS:
> 				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
> 				return;
> 		}
118a144,148
> 
> 		newChildDescriptors.add
> 			(createChildParameter
> 				(GMFGenPackage.eINSTANCE.getGenLink_Labels(),
> 				 GMFGenFactory.eINSTANCE.createLinkLabel()));
