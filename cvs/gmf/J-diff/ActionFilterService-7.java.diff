28d27
< import org.eclipse.gmf.runtime.common.core.util.HashUtil;
51a51,79
> 	private static class CacheKey {
> 
> 		public String name;
> 
> 		public String value;
> 
> 		public CacheKey() {
> 			this(null,null);
> 		}
> 
> 		public CacheKey(String name, String value) {
> 			this.name = name;
> 			this.value = value;
> 		}
> 
> 		public boolean equals(Object obj) {
> 			//This is our key, and it won't never be called except with another CacheKey,
> 			//therefore is no need to check for either null, or, instanceof CacheKey
> 			CacheKey other = (CacheKey) obj;
> 			return value.equals(other.value) && name.equals(other.name);
> 		}
> 
> 		public int hashCode() {
> 			return name.hashCode() ^ value.hashCode();
> 		}
> 	}
> 	
> 	private static final CacheKey TEST_KEY = new CacheKey();
> 
298,299c326,328
< 
< 		if (!getCachedSelection().equals(selection)) {
---
>         ISelection cachedSel = getCachedSelection();
>         if (cachedSel != selection) {
> 			if (!cachedSel.equals(selection)) {
300a330
> 			}
322,329d351
< 		Object[] parameters = new Object[] {String.valueOf(target), name, value};
< 
< 		if (Trace.shouldTrace(CommonUIServicesActionPlugin.getDefault(),
< 			CommonUIServicesActionDebugOptions.METHODS_ENTERING)) {
< 			Trace.entering(CommonUIServicesActionPlugin.getDefault(),
< 				CommonUIServicesActionDebugOptions.METHODS_ENTERING, getClass(),
< 				"testAttribute", parameters); //$NON-NLS-1$
< 		}
333,334c355,358
< 		Integer key = new Integer(HashUtil.hash(HashUtil.hash(name), value));
< 		Boolean result = (Boolean) getCachedResults().get(key);
---
> 		TEST_KEY.name = name;
> 		TEST_KEY.value = value;	
> 		
> 		Boolean result = (Boolean) getCachedResults().get(TEST_KEY);
349c373
< 			getCachedResults().put(key, result);
---
> 			getCachedResults().put(new CacheKey(name, value), result);
