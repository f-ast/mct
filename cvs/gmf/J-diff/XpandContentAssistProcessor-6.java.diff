46a47
>     private final ProposalComparator comparator;
51a53
>         this.comparator = new ProposalComparator();
68c70
<             List<ICompletionProposal> proposals = new ArrayList<ICompletionProposal>();
---
>             List<ICompletionProposal> proposals = new ArrayList<ICompletionProposal>(20);
73a76
>     			Collections.sort(proposals, comparator);
77,78c80,85
<                 proposals.addAll(new ExpressionProposalComputer().computeProposals(expression, ctx, f));
<                 proposals.addAll(new KeywordProposalComputer(textPastInsertionPoint).computeProposals(txt, ctx, f));
---
>                 List<ICompletionProposal> ep = new ExpressionProposalComputer().computeProposals(expression, ctx, f);
>     			Collections.sort(ep, comparator);
> 				proposals.addAll(ep);
>                 List<ICompletionProposal> kp = new KeywordProposalComputer(textPastInsertionPoint).computeProposals(txt, ctx, f);
>     			Collections.sort(kp, comparator);
> 				proposals.addAll(kp);
81c88,90
<                 proposals.addAll(new ExpandProposalComputer().computeProposals(txt, ctx, f));
---
>                 List<ICompletionProposal> ep = new ExpandProposalComputer().computeProposals(txt, ctx, f);
>     			Collections.sort(ep, comparator);
> 				proposals.addAll(ep);
85c94,96
<                 proposals.addAll(new StatementProposalComputer().computeProposals(txt, ctx, f));
---
>                 List<ICompletionProposal> sp = new StatementProposalComputer().computeProposals(txt, ctx, f);
>     			Collections.sort(sp, comparator);
> 				proposals.addAll(sp);
88,93d98
<             Collections.sort(proposals, new Comparator<ICompletionProposal>() {
<                 public int compare(final ICompletionProposal p1, final ICompletionProposal p2) {
<                 	// XXX better would be put most matching proposal first!!!
<                     return p1.getDisplayString().compareTo(p2.getDisplayString());
<                 }
<             });
120a126,132
> 
>     private static class ProposalComparator implements Comparator<ICompletionProposal> {
>         public int compare(final ICompletionProposal p1, final ICompletionProposal p2) {
>         	// XXX better would be put most matching proposal first!!!
>             return p1.getDisplayString().compareTo(p2.getDisplayString());
>         }
>     }
