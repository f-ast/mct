2c2
<  * Copyright (c) 2005, 2006 IBM Corporation and others.
---
>  * Copyright (c) 2005, 2008 IBM Corporation and others.
20a21
> import org.eclipse.core.runtime.Platform;
31d31
< import org.eclipse.gmf.runtime.diagram.ui.printing.actions.DefaultPrintActionHelper;
33a34,35
> import org.eclipse.gmf.runtime.diagram.ui.printing.render.internal.JPSDiagramPrinter;
> import org.eclipse.gmf.runtime.diagram.ui.printing.render.internal.JPSDiagramPrinterHelper;
37a40
> import org.eclipse.gmf.runtime.notation.Diagram;
60a64
> 	
88,93c92,104
< 		
< 		if (!System.getProperty("os.name").toUpperCase().startsWith("WIN")) { //$NON-NLS-1$ //$NON-NLS-2$
< 			//do default action when not Windows and this action is enabled
< 			DefaultPrintActionHelper.doRun(diagramEditor,
< 				new RenderedDiagramPrinter(preferencesHint, mapMode));
< 			return;
---
> 		//
> 		// Eventually the windows based printing will be replaced with the
> 		// JPSDiagramPrinter.
> 		//
> 		if (Platform.getOS().startsWith(Platform.OS_WIN32)) {
> 			DiagramPrinterUtil.printWithSettings(diagramEditor,
> 					createDiagramMap(), new RenderedDiagramPrinter(
> 							preferencesHint, mapMode));
> 		}
> 		else {
> 			JPSDiagramPrinterHelper.getDiagramPrinterHelper()
> 					.printWithSettings(diagramEditor, createDiagramMap(),
> 							new JPSDiagramPrinter(preferencesHint, mapMode));
95,97d105
< 		
< 		DiagramPrinterUtil.printWithSettings(diagramEditor, createDiagramMap(),
< 			new RenderedDiagramPrinter(preferencesHint, mapMode));
108c116
< 	private Map createDiagramMap() {
---
> 	protected Map<String, Diagram> createDiagramMap() {
110c118
< 		Map diagramMap = new HashMap();
---
> 		Map<String, Diagram> diagramMap = new HashMap<String, Diagram>();
127d134
<                 
