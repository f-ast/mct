20a21,25
> import org.eclipse.core.commands.ExecutionException;
> import org.eclipse.core.runtime.IAdaptable;
> import org.eclipse.core.runtime.IProgressMonitor;
> import org.eclipse.core.runtime.IStatus;
> import org.eclipse.core.runtime.Status;
21a27,28
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
> import org.eclipse.emf.workspace.AbstractEMFOperation;
40a48,53
>     // an operation to enable undo using Transaction API is possible
>     private AbstractEMFOperation op = null;
> 
>     // domain to use to record the change that will happenwhen we re-enable the edit policy
>     private TransactionalEditingDomain domain;
> 	
134a148,153
>         // try to record only if we are enabling the edit policy
>         if (_enable && domain != null) {
>             op = new AbstractEMFOperation(domain, "") { //$NON-NLS-1$
> 
>                 protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info)
>                     throws ExecutionException {
135a155,167
>                     return Status.OK_STATUS;
>                 }
>                 
>             };
>             try {
>                 op.execute(null, null);
>             } catch (ExecutionException e) {
>                 //I give up... just do the enable.
>                 DoEnable(_enable);
>             }
>         }else{
> 			DoEnable(_enable);
> 		}
168a201
>         // the enable is not an EMF command, so we had to undo it manually before undo the EMF operation
169a203,213
>         if (op != null) {
>             try {
>                 op.undo(null, null);
>             } catch (ExecutionException e) {
>                 // Give up...
>             }
>         }
>     }
>     
>     public void setDomain(TransactionalEditingDomain d) {
>         domain = d;
