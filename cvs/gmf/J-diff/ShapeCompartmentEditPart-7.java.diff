12a13
> 
47d47
< import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ActionBarEditPolicy;
51a52
> import org.eclipse.gmf.runtime.diagram.ui.editpolicies.PopupBarEditPolicy;
62a64
> 
64,65c66,68
<  * A generic (sub) shape container that holds instances of <code>ShapeNodeEditPart</code>s and
<  * manages the display of <code>ConnectionNodeEditPart</code>s anchored to these shape editpart 
---
>  * A generic (sub) shape container that holds instances of
>  * <code>ShapeNodeEditPart</code>s and manages the display of
>  * <code>ConnectionNodeEditPart</code>s anchored to these shape editpart
70c73,75
< public abstract class ShapeCompartmentEditPart extends ResizableCompartmentEditPart implements ISurfaceEditPart, PropertyChangeListener {
---
> public abstract class ShapeCompartmentEditPart
> 	extends ResizableCompartmentEditPart
> 	implements ISurfaceEditPart, PropertyChangeListener {
72,73c77,78
< 	/** private connector refresh manager. */
< 	private ConnectorRefreshMgr _crMgr;
---
> 	/** private connection refresh manager. */
> 	private ConnectionRefreshMgr _crMgr;
80,82c85,87
< 	 * Class used to refresh the connectors associated to the shape compartment's
< 	 * children.  This implementation will hide all connectors whose endpoints are
< 	 * not visible inside the shape compartment.
---
> 	 * Class used to refresh the connections associated to the shape
> 	 * compartment's children. This implementation will hide all connections
> 	 * whose endpoints are not visible inside the shape compartment.
84c89,90
< 	public static class ConnectorRefreshMgr {
---
> 	public static class ConnectionRefreshMgr {
> 
86,87c92,95
< 		 * Cycles through all the connectors associated to the editparts contained within
< 		 * the passed shape compartment and sets their visibility. 
---
> 		 * Cycles through all the connections associated to the editparts
> 		 * contained within the passed shape compartment and sets their
> 		 * visibility.
> 		 * 
90c98,99
< 		 * @param scep edit part to consider
---
> 		 * @param scep
> 		 *            edit part to consider
92c101
< 		protected void refreshConnectors(ShapeCompartmentEditPart scep) {
---
> 		protected void refreshConnections(ShapeCompartmentEditPart scep) {
96,102c105,109
< 				ConnectionNodeEditPart cep = (ConnectionNodeEditPart)connectionNodes.next();
< 				Connection connector =
< 					(Connection)cep.getFigure();
< 				IGraphicalEditPart source =
< 					(IGraphicalEditPart)getSourceEditPart(cep);
< 				IGraphicalEditPart target =
< 					(IGraphicalEditPart)getTargetEditPart(cep);
---
> 				ConnectionNodeEditPart cep = (ConnectionNodeEditPart) connectionNodes
> 					.next();
> 				Connection connection = (Connection) cep.getFigure();
> 				IGraphicalEditPart source = (IGraphicalEditPart) getSourceEditPart(cep);
> 				IGraphicalEditPart target = (IGraphicalEditPart) getTargetEditPart(cep);
114c121
< 				// get the connector locations
---
> 				// get the connection locations
118d124
< 
121,122c127,130
< 				IGraphicalEditPart dep = (IGraphicalEditPart)registry.get(diagram);
< 				IFigure stopFigure = dep == null ? null : dep.getContentPane();
---
> 				IGraphicalEditPart dep = (IGraphicalEditPart) registry
> 					.get(diagram);
> 				IFigure stopFigure = dep == null ? null
> 					: dep.getContentPane();
125c133,134
< 				// if sContainer is null, then the source connector is a child of the diagram and not
---
> 				// if sContainer is null, then the source connection is a child
> 				// of the diagram and not
128c137,138
< 					ShapeCompartmentFigure fig = sContainer.getShapeCompartmentFigure();
---
> 					ShapeCompartmentFigure fig = sContainer
> 						.getShapeCompartmentFigure();
135c145,146
< 				// if tContainer is null, then the source connector is a child of the diagram and not
---
> 				// if tContainer is null, then the source connection is a child
> 				// of the diagram and not
138c149,150
< 					ShapeCompartmentFigure fig = tContainer.getShapeCompartmentFigure();
---
> 					ShapeCompartmentFigure fig = tContainer
> 						.getShapeCompartmentFigure();
144,145c156,158
< 				// set connector visibility true iff both anchor points are visible
< 				connector.setVisible(sfVisible && tfVisible);
---
> 				// set connection visibility true iff both anchor points are
> 				// visible
> 				connection.setVisible(sfVisible && tfVisible);
147a161
> 
149,151c163,167
< 		 * Return the set of {@link ConnectionNodeEditPart}s
< 		 * contained in the supplied shape compartment.
< 		 * @param scep a shape compartment.
---
> 		 * Return the set of {@link ConnectionNodeEditPart}s contained in the
> 		 * supplied shape compartment.
> 		 * 
> 		 * @param scep
> 		 *            a shape compartment.
158,160c174,175
< 			if (scep.getViewer() == null ||
< 				modelObject  == null || 
< 				!(modelObject instanceof View)) {
---
> 			if (scep.getViewer() == null || modelObject == null
> 				|| !(modelObject instanceof View)) {
167c182
< 			Iterator connectors = edges.iterator();
---
> 			Iterator edgesIterator = edges.iterator();
169,171c184,186
< 			while( connectors.hasNext() ) {
< 				Edge connector = (Edge)connectors.next();
< 				EditPart endPoint = (EditPart)registry.get(connector.getSource() );
---
> 			while (edgesIterator.hasNext()) {
> 				Edge edge = (Edge) edgesIterator.next();
> 				EditPart endPoint = (EditPart) registry.get(edge.getSource());
173c188
< 					Object cep = registry.get(connector);
---
> 					Object cep = registry.get(edge);
179c194
< 				endPoint = (EditPart)registry.get(connector.getTarget());
---
> 				endPoint = (EditPart) registry.get(edge.getTarget());
181c196
< 					Object cep = registry.get(connector);
---
> 					Object cep = registry.get(edge);
190d204
< 		
192,194c206,212
< 		 * Return <tt>true</tt> if <tt>parent</tt> child's ancestor; otherwise <tt>false</tt>
< 		 * @param parent parent to consider
< 		 * @param child child to consider
---
> 		 * Return <tt>true</tt> if <tt>parent</tt> child's ancestor;
> 		 * otherwise <tt>false</tt>
> 		 * 
> 		 * @param parent
> 		 *            parent to consider
> 		 * @param child
> 		 *            child to consider
207c225,227
< 		 * @param ep edit part 
---
> 		 * 
> 		 * @param ep
> 		 *            edit part
212c232,233
< 			while ( walker != null && !(walker instanceof ShapeCompartmentEditPart) ) {
---
> 			while (walker != null
> 				&& !(walker instanceof ShapeCompartmentEditPart)) {
219,220c240,241
< 		 * This method can be overridden to allow connections between border items to be
< 		 * drawn to items within the interior of the compartment.  
---
> 		 * This method can be overridden to allow connections between border
> 		 * items to be drawn to items within the interior of the compartment.
224c245,246
< 		 * @return false by default.  Override to allow connections to border items.
---
> 		 * @return false by default. Override to allow connections to border
> 		 *         items.
226c248,249
< 		protected boolean isBorderItem( ShapeCompartmentEditPart scep, IGraphicalEditPart itemEditPart ) {
---
> 		protected boolean isBorderItem(ShapeCompartmentEditPart scep,
> 				IGraphicalEditPart itemEditPart) {
231a255
> 		 * 
235c259,260
< 		protected EditPart getSourceEditPart(ConnectionEditPart connectionEditPart) {
---
> 		protected EditPart getSourceEditPart(
> 				ConnectionEditPart connectionEditPart) {
237a263
> 
239a266
> 		 * 
243c270,271
< 		protected EditPart getTargetEditPart(ConnectionEditPart connectionEditPart) {
---
> 		protected EditPart getTargetEditPart(
> 				ConnectionEditPart connectionEditPart) {
249c277,279
< 		 * @param editPart edit part to consider
---
> 		 * 
> 		 * @param editPart
> 		 *            edit part to consider
254a285
> 
257c288,290
< 		 * @param editPart edit part to consider
---
> 		 * 
> 		 * @param editPart
> 		 *            edit part to consider
268,269c301,305
< 		 * @param figure The figure under test.
< 		 * @param loc the child's location in absolute coordinates.
---
> 		 * 
> 		 * @param figure
> 		 *            The figure under test.
> 		 * @param loc
> 		 *            the child's location in absolute coordinates.
279,281c315,321
< 		 * @param figure The figure under test.
< 		 * @param loc the child's location in absolute coordinates.
< 		 * @param stopFigure root figure in the figure hierarchy being tested.
---
> 		 * 
> 		 * @param figure
> 		 *            The figure under test.
> 		 * @param loc
> 		 *            the child's location in absolute coordinates.
> 		 * @param stopFigure
> 		 *            root figure in the figure hierarchy being tested.
284c324,325
< 		protected boolean isFigureVisible(final IFigure figure, final Point loc, final IFigure stopFigure) {
---
> 		protected boolean isFigureVisible(final IFigure figure,
> 				final Point loc, final IFigure stopFigure) {
287,288c328
< 			}
< 			else {
---
> 			} else {
304d343
< 	
307c346,348
< 	 * @param view the view <code>controlled</code> by this editpart.
---
> 	 * 
> 	 * @param view
> 	 *            the view <code>controlled</code> by this editpart.
314,315c355,357
< 	 * Returns the connector refresh manager.
< 	 * @return <code>ConnectorRefreshMgr</code> 
---
> 	 * Returns the connection refresh manager.
> 	 * 
> 	 * @return <code>ConnectionRefreshMgr</code>
317c359
< 	protected final ConnectorRefreshMgr getConnectorRefreshMgr() {
---
> 	protected final ConnectionRefreshMgr getConnectionRefreshMgr() {
319c361
< 			_crMgr = createConnectorRefreshMgr();
---
> 			_crMgr = createConnectionRefreshMgr();
325,327c367,370
< 	 * Factory method to create a refresh connector.  This implementation returns
< 	 * a {@link ShapeCompartmentEditPart.ConnectorRefreshMgr} instance.
< 	 * @return <code>ConnectorRefreshMgr</code>
---
> 	 * Factory method to create a refresh connection. This implementation
> 	 * returns a {@link ShapeCompartmentEditPart.ConnectionRefreshMgr} instance.
> 	 * 
> 	 * @return <code>ConnectionRefreshMgr</code>
329,330c372,373
< 	protected ConnectorRefreshMgr createConnectorRefreshMgr() {
< 		return new ConnectorRefreshMgr();
---
> 	protected ConnectionRefreshMgr createConnectionRefreshMgr() {
> 		return new ConnectionRefreshMgr();
334,335c377,379
< 	 * Returns the layout manager to be used by this shape compartment.
< 	 * This implemantion returns a {@link FreeformLayout} instance.
---
> 	 * Returns the layout manager to be used by this shape compartment. This
> 	 * implemantion returns a {@link FreeformLayout} instance.
> 	 * 
340a385
> 
342,343c387,388
< 	 * Creates a scrollpane (with auto scrollbars) in which the children are drawn.
< 	 * The factory hint property is used to set this compartments label.
---
> 	 * Creates a scrollpane (with auto scrollbars) in which the children are
> 	 * drawn. The factory hint property is used to set this compartments label.
352,353c397,399
< 	 * Convenience method to retrieve the shape compartment figure.
< 	 * Same as calling <code>(ShapeCompartmentFigure)getCompartmentFigure()</code>.
---
> 	 * Convenience method to retrieve the shape compartment figure. Same as
> 	 * calling <code>(ShapeCompartmentFigure)getCompartmentFigure()</code>.
> 	 * 
371,372c417,420
< 	 * <LI> {@link EditPolicyRoles#DRAG_DROP_ROLE} :: {@link DiagramLinkDragDropEditPolicy}
< 	 * <LI> {@link EditPolicy#GRAPHICAL_NODE_ROLE} :: {@link ContainerNodeEditPolicy}
---
> 	 * <LI> {@link EditPolicyRoles#DRAG_DROP_ROLE} ::
> 	 * {@link DiagramLinkDragDropEditPolicy}
> 	 * <LI> {@link EditPolicy#GRAPHICAL_NODE_ROLE} ::
> 	 * {@link ContainerNodeEditPolicy}
374,376c422,426
< 	 * <LI> {@link EditPolicyRoles#SNAP_FEEDBACK_ROLE} :: {@link SnapFeedbackPolicy}
< 	 * <LI> {@link EditPolicyRoles#DRAG_DROP_ROLE} :: {@link ShapeCompartmentDropEditPolicy}
< 	 * <LI> {@link EditPolicyRoles#ACTIONBAR_ROLE} :: {@link ActionBarEditPolicy}
---
> 	 * <LI> {@link EditPolicyRoles#SNAP_FEEDBACK_ROLE} ::
> 	 * {@link SnapFeedbackPolicy}
> 	 * <LI> {@link EditPolicyRoles#DRAG_DROP_ROLE} ::
> 	 * {@link ShapeCompartmentDropEditPolicy}
> 	 * <LI> {@link EditPolicyRoles#POPUPBAR_ROLE} :: {@link PopupBarEditPolicy}
381c431,432
< 		installEditPolicy(EditPolicyRoles.CREATION_ROLE,new CreationEditPolicy());
---
> 		installEditPolicy(EditPolicyRoles.CREATION_ROLE,
> 			new CreationEditPolicy());
384c435,436
< 		// TODO: this edit policy get overriden by code at the end of this function 
---
> 		// TODO: this edit policy get overriden by code at the end of this
> 		// function
386,388c438,440
< 		installEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DiagramLinkDragDropEditPolicy());
< 		installEditPolicy(
< 			EditPolicy.GRAPHICAL_NODE_ROLE,
---
> 		installEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE,
> 			new DiagramLinkDragDropEditPolicy());
> 		installEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE,
391,393c443,448
< 		installEditPolicy(EditPolicyRoles.SNAP_FEEDBACK_ROLE, new SnapFeedbackPolicy());
< 		installEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ShapeCompartmentDropEditPolicy());
< 		installEditPolicy(EditPolicyRoles.ACTIONBAR_ROLE, new ActionBarEditPolicy());
---
> 		installEditPolicy(EditPolicyRoles.SNAP_FEEDBACK_ROLE,
> 			new SnapFeedbackPolicy());
> 		installEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE,
> 			new ShapeCompartmentDropEditPolicy());
> 		installEditPolicy(EditPolicyRoles.POPUPBAR_ROLE,
> 			new PopupBarEditPolicy());
399c454,456
< 	 * @param event a property change event.
---
> 	 * 
> 	 * @param event
> 	 *            a property change event.
405c462
< 			refreshConnectors();
---
> 			refreshConnections();
410,414c467,472
< 	 * Refreshes the connectors inside the shape compartment 
< 	 * if the supplied event is for an element inserted or
< 	 * removed from the editpart.
< 	 * @see #refreshConnectors()
< 	 * @param event a model server event.
---
> 	 * Refreshes the connections inside the shape compartment if the supplied
> 	 * event is for an element inserted or removed from the editpart.
> 	 * 
> 	 * @see #refreshConnections()
> 	 * @param event
> 	 *            a model server event.
420c478
< 			refreshConnectors();
---
> 			refreshConnections();
424,426c482,484
< 		if (NotificationUtil.isElementAddedToSlot(event) ||
< 			NotificationUtil.isElementRemovedFromSlot(event) ) {
< 			refreshConnectors();
---
> 		if (NotificationUtil.isElementAddedToSlot(event)
> 			|| NotificationUtil.isElementRemovedFromSlot(event)) {
> 			refreshConnections();
430,432c488,492
< 	
< 	/** Refresh the connectors associated the the children of this shape compartment. */
< 	protected void refreshConnectors() {
---
> 	/**
> 	 * Refresh the connections associated the the children of this shape
> 	 * compartment.
> 	 */
> 	protected void refreshConnections() {
435a496
> 
439c500,501
< 						// test if active since the editpartg may have been deleted
---
> 						// test if active since the editpartg may have been
> 						// deleted
442,443c504,505
< 							getConnectorRefreshMgr().refreshConnectors(ShapeCompartmentEditPart.this);
< 						}
---
> 							getConnectionRefreshMgr().refreshConnections(
> 								ShapeCompartmentEditPart.this);
445c507
< 					finally {
---
> 					} finally {
460,461c522,525
< 			figureCanvas.getViewport().getVerticalRangeModel().removePropertyChangeListener(this);
< 			figureCanvas.getViewport().getHorizontalRangeModel().removePropertyChangeListener(this);
---
> 			figureCanvas.getViewport().getVerticalRangeModel()
> 				.removePropertyChangeListener(this);
> 			figureCanvas.getViewport().getHorizontalRangeModel()
> 				.removePropertyChangeListener(this);
473,474c537,540
< 			figureCanvas.getViewport().getVerticalRangeModel().addPropertyChangeListener(this);
< 			figureCanvas.getViewport().getHorizontalRangeModel().addPropertyChangeListener(this);
---
> 			figureCanvas.getViewport().getVerticalRangeModel()
> 				.addPropertyChangeListener(this);
> 			figureCanvas.getViewport().getHorizontalRangeModel()
> 				.addPropertyChangeListener(this);
479,480c545,547
< 	 * Determines if the shape compartment supports drag selection of it's children.  Otherwise, it will default
< 	 * to the core behavior of selecting the compartment itself on click on the compartment background surface.
---
> 	 * Determines if the shape compartment supports drag selection of it's
> 	 * children. Otherwise, it will default to the core behavior of selecting
> 	 * the compartment itself on click on the compartment background surface.
482,483c549,551
< 	 * @return <code>boolean</code> <code>true</code> if shape compartment supports drag selection of it's children,
< 	 * <code>false</code> otherwise.
---
> 	 * @return <code>boolean</code> <code>true</code> if shape compartment
> 	 *         supports drag selection of it's children, <code>false</code>
> 	 *         otherwise.
498a567
> 
504a574
> 
524c594,595
< 			Boolean val = (Boolean)getViewer().getProperty(RulerProvider.PROPERTY_RULER_VISIBILITY);
---
> 			Boolean val = (Boolean) getViewer().getProperty(
> 				RulerProvider.PROPERTY_RULER_VISIBILITY);
528c599,600
< 			val = (Boolean)getViewer().getProperty(SnapToGeometry.PROPERTY_SNAP_ENABLED);
---
> 			val = (Boolean) getViewer().getProperty(
> 				SnapToGeometry.PROPERTY_SNAP_ENABLED);
530c602,603
< 				snapStrategies.add(new SnapToGrid((GraphicalEditPart)this.getParent()));
---
> 				snapStrategies.add(new SnapToGrid((GraphicalEditPart) this
> 					.getParent()));
547c620
< 	/** Also calls {@link #refreshConnectors()}. */
---
> 	/** Also calls {@link #refreshConnections()}. */
550c623
< 		refreshConnectors();
---
> 		refreshConnections();
553,554c626,627
< 	
< 	/* (non-Javadoc)
---
> 	/*
> 	 * (non-Javadoc)
560c633,635
< 	/* (non-Javadoc)
---
> 	/*
> 	 * (non-Javadoc)
> 	 * 
576d650
< 
