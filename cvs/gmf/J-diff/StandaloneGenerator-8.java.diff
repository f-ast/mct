24d23
< import org.eclipse.core.runtime.IProgressMonitor;
26c25
< import org.eclipse.emf.codegen.jet.JETException;
---
> import org.eclipse.emf.codegen.util.CodeGenUtil;
28d26
< import org.eclipse.gmf.common.codegen.GeneratorBase;
30d27
< import org.eclipse.gmf.common.codegen.ImportUtil;
33a31,33
> import org.eclipse.gmf.internal.common.codegen.DelegateImportManager;
> import org.eclipse.gmf.internal.common.codegen.GeneratorBase;
> import org.eclipse.gmf.internal.common.codegen.ImportUtil;
38c38,39
< 	private final Emitter myFigureGenerator;
---
> 	private final FigureGenerator myFigureGenerator;
> 	private DelegateImportManager myMapModeImportHack;
78c79
< 			this(pluginId, mainPackageName, pluginId, "", "PluginActivator", mainPackageName + ".activator", useMapMode);
---
> 			this(pluginId, mainPackageName, pluginId, "", "PluginActivator", (mainPackageName == null ? "" : mainPackageName + ".")  + "activator", useMapMode);
83c84
< 			myMainPackageName = mainPackageName;
---
> 			myMainPackageName = mainPackageName == null ? "" : mainPackageName;
129d129
< 		ImportAssistant importAssistant = new ImportUtil(getPackageName());
133c133,134
< 			strategy = new MapModeCodeGenStrategy.RuntimeMapModeFromPluginClass(importAssistant, pluginActivatorFQN);
---
> 			myMapModeImportHack = new DelegateImportManager();
> 			strategy = new MapModeCodeGenStrategy.RuntimeMapModeFromPluginClass(myMapModeImportHack, pluginActivatorFQN);
138,140c139
< 		myFigureGenerator = new FigureGeneratorAdapter( //
< 				new FigureGenerator(getPackageName(), importAssistant, fqnSwitch, strategy)
< 		);
---
> 		myFigureGenerator = new FigureGenerator(fqnSwitch, strategy);
184c183,184
< 		doGenerateJavaClass(myAuxiliaryGenerators.getPluginActivatorEmitter(), myArgs.getPluginActivatorPackageName(), myArgs.getPluginActivatorClassName(), myArgs);		
---
> 		Object[] args = new Object[] {myArgs, new ImportUtil(myArgs.getPluginActivatorPackageName(), myArgs.getPluginActivatorClassName())};
> 		doGenerateJavaClass(myAuxiliaryGenerators.getPluginActivatorEmitter(), myArgs.getPluginActivatorPackageName(), myArgs.getPluginActivatorClassName(), new Object[] {args});		
188,190c188,190
< 		doGenerateFile(myAuxiliaryGenerators.getBuildPropertiesEmitter(), new Path("build.properties"), myArgs);
< 		doGenerateFile(myAuxiliaryGenerators.getManifestMFEmitter(), new Path("META-INF/MANIFEST.MF"), new Object[] {myArgs, getRequiredBundles()});
< 		doGenerateFile(myAuxiliaryGenerators.getPluginPropertiesEmitter(), new Path("plugin.properties"), myArgs);
---
> 		doGenerateFile(myAuxiliaryGenerators.getBuildPropertiesEmitter(), new Path("build.properties"), new Object[] { myArgs });
> 		doGenerateFile(myAuxiliaryGenerators.getManifestMFEmitter(), new Path("META-INF/MANIFEST.MF"), new Object[] { new Object[] { myArgs, getRequiredBundles() } });
> 		doGenerateFile(myAuxiliaryGenerators.getPluginPropertiesEmitter(), new Path("plugin.properties"), new Object[] { myArgs });
215,218c215,221
< 		String packageName = getPackageName();
< 		String className = figure.getName();
< 		doGenerateJavaClass(myFigureGenerator, packageName, className, figure);
< 		myGenerationInfo.registerFQN(figure, composeFQN(packageName, className));
---
> 		final ImportAssistant importAssistant = new ImportUtil(getPackageName(), CodeGenUtil.validJavaIdentifier(figure.getName()));
> 		Object[] args = new Object[] { figure, importAssistant };
> 		if (myMapModeImportHack != null) {
> 			myMapModeImportHack.setDelegate(importAssistant);
> 		}
> 		doGenerateJavaClass(myFigureGenerator, getPackageName(), importAssistant.getCompilationUnitName(), args);
> 		myGenerationInfo.registerFQN(figure, composeFQN(getPackageName(), importAssistant.getCompilationUnitName()));
235,249d237
< 	private static class FigureGeneratorAdapter implements GeneratorBase.Emitter {
< 		private final FigureGenerator myDelegate;
< 
< 		public FigureGeneratorAdapter(FigureGenerator delegate){
< 			myDelegate = delegate;
< 		}
< 		
< 		public String generate(IProgressMonitor monitor, Object param) throws JETException {
< 			if (false == param instanceof Figure){
< 				throw new IllegalStateException("Figure expected: " + param);
< 			}
< 			return myDelegate.go((Figure)param);
< 		}
< 	}
< 	
