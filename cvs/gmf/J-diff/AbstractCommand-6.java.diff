15d14
< import java.util.Collection;
28,32d26
< import org.eclipse.core.runtime.NullProgressMonitor;
< import org.eclipse.gmf.runtime.common.core.internal.CommonCoreDebugOptions;
< import org.eclipse.gmf.runtime.common.core.internal.CommonCorePlugin;
< import org.eclipse.gmf.runtime.common.core.util.Log;
< import org.eclipse.gmf.runtime.common.core.util.Trace;
236,372d229
<     
<     //
<     // TODO The following methods to be removed when deprecated API on ICommand
<     // is removed. Deprecated API must be implemented to comply with deprecated
<     // methods on the ICommand interface.
<     // 
< 
<     /**
<      * Returns the affected {@link IFile}s.
<      * 
<      * @deprecated Implemented for backwards compatibility. Use
<      *             {@link #getAffectedFiles()} instead.
<      */
<     public Collection getAffectedObjects() {
<         return getAffectedFiles();
<     }
< 
<     /**
<      * Returns <code>null</code>.
<      * 
<      * @deprecated File validation is now done through a
<      *             {@link IOperationApprover} registered with with the
<      *             {@link OperationHistoryFactory#getOperationHistory()}. No
<      *             need to return a validator for backwards compatilibity.
<      */
<     public CMValidator getValidator() {
<         return null;
<     }
< 
<     /**
<      * Returns <code>false</code>.
<      * 
<      * @deprecated File validation is now done through a
<      *             {@link IOperationApprover} registered with with the
<      *             {@link OperationHistoryFactory#getOperationHistory()}. No
<      *             need to calculate the answer for backwards compatilibity.
<      */
<     public boolean involvesReadOnlyNonWorkSpaceFiles() {
<         return false;
<     }
< 
<     /**
<      * Delegates to {@link #canExecute()}.
<      * 
<      * @deprecated Implemented for backwards compatibility. Use
<      *             {@link #canExecute()} instead.
<      */
<     public boolean isExecutable() {
<         return canExecute();
<     }
< 
<     /**
<      * Delegates to {@link #canRedo()}.
<      * 
<      * @deprecated Implemented for backwards compatibility. Use
<      *             {@link #canRedo()} instead.
<      */
<     public boolean isRedoable() {
<         return canRedo();
<     }
< 
<     /**
<      * Delegates to {@link #canUndo()}.
<      * 
<      * @deprecated Implemented for backwards compatibility. Use
<      *             {@link #canUndo()} instead.
<      */
<     public boolean isUndoable() {
<         return canUndo();
<     }
< 
<     /**
<      * Delegates to {@link #execute(IProgressMonitor, IAdaptable)} and logs any
<      * {@link ExecutionException} that occurs.
<      * 
<      * @deprecated Implemented for backwards compatibility. Use
<      *             {@link #execute(IProgressMonitor, IAdaptable)} instead.
<      */
<     public void execute(IProgressMonitor progressMonitor) {
< 
<         try {
<             execute(progressMonitor, null);
< 
<         } catch (ExecutionException e) {
<             handle(e);
<         }
<     }
< 
<     /**
<      * Delegates to {@link #redo(IProgressMonitor, IAdaptable)} and logs any
<      * {@link ExecutionException} that occurs.
<      * 
<      * @deprecated Implemented for backwards compatibility. Use
<      *             {@link #redo(IProgressMonitor, IAdaptable)} instead.
<      */
<     public void redo() {
<         try {
<             redo(new NullProgressMonitor(), null);
< 
<         } catch (ExecutionException e) {
<             handle(e);
<         }
<     }
< 
<     /**
<      * Delegates to {@link #undo(IProgressMonitor, IAdaptable)} and logs any
<      * {@link ExecutionException} that occurs.
<      * 
<      * @deprecated Implemented for backwards compatibility. Use
<      *             {@link #undo(IProgressMonitor, IAdaptable)} instead.
<      */
<     public void undo() {
<         try {
<             undo(new NullProgressMonitor(), null);
< 
<         } catch (ExecutionException e) {
<             handle(e);
<         }
<     }
< 
<     /**
<      * Handles the specified exception by logging, tracing and setting the
<      * command result to an error.
<      * 
<      * @param exception
<      *            The exception to be handled.
<      * @deprecated Supports deprecated implementation
<      */
<     protected void handle(Exception exception) {
<         Trace.catching(CommonCorePlugin.getDefault(),
<                 CommonCoreDebugOptions.EXCEPTIONS_CATCHING, getClass(),
<                 "handle", exception); //$NON-NLS-1$
< 
<         setResult(CommandResult.newErrorCommandResult(exception));
< 
<         Log.log(CommonCorePlugin.getDefault(), getCommandResult().getStatus());
<     }
