16a17
> import java.util.HashSet;
17a19
> import java.util.LinkedList;
20a23
> import java.util.Stack;
30c33
< import org.eclipse.gef.EditPartViewer;
---
> import org.eclipse.gef.EditPart;
33d35
< import org.eclipse.gef.editparts.AbstractEditPart;
36d37
< import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;
52d52
< import org.eclipse.gmf.runtime.notation.Edge;
202c202
< 		ArrayList connectionsToPaint = new ArrayList();
---
> 		List<GraphicalEditPart> connectionsToPaint = new LinkedList<GraphicalEditPart>();
206,208c206,207
< 		for (int i = 0; i < editparts.size(); i++) {
< 			IGraphicalEditPart editPart = (IGraphicalEditPart) sortedEditparts
< 					.get(i);
---
> 		for (Iterator editPartsItr = editparts.listIterator(); editPartsItr.hasNext();) {
> 			IGraphicalEditPart editPart = (IGraphicalEditPart) editPartsItr.next();
211c210
< 			if (editPart instanceof ConnectionNodeEditPart) {
---
> 			if (editPart instanceof ConnectionEditPart) {
214,221c213
< 				List editParts = new ArrayList();
< 
< 				// Get the list of edit parts
< 				getNestedEditParts(editPart, editParts);
< 
< 				// Find the connections to be painted
< 				findConnectionsToPaint(editParts, connectionsToPaint);
< 
---
> 				connectionsToPaint.addAll(findConnectionsToPaint(editPart));
233,236c225,226
< 		for (int i = 0; i < connectionsToPaint.size(); i++) {
< 			IGraphicalEditPart editPart = (IGraphicalEditPart) connectionsToPaint
< 					.get(i);
< 			IFigure figure = editPart.getFigure();
---
> 		for (Iterator<GraphicalEditPart> connItr = connectionsToPaint.iterator(); connItr.hasNext();) {
> 			IFigure figure = connItr.next().getFigure();
238d227
< 
243a233,331
> 	 * Collects all connections contained within the given edit part
> 	 * 
> 	 * @param editPart the container editpart
> 	 * @return connections within it
> 	 */
> 	private Collection<ConnectionEditPart> findConnectionsToPaint(IGraphicalEditPart editPart) {
> 		/*
> 		 * Set of node editparts contained within the given editpart
> 		 */
> 		HashSet<GraphicalEditPart> editParts = new HashSet<GraphicalEditPart>();
> 		
> 		/*
> 		 * All connection editparts that have a source contained within the given editpart
> 		 */
> 		HashSet<ConnectionEditPart> connectionEPs = new HashSet<ConnectionEditPart>();
> 		
> 		/*
> 		 * Connections contained within the given editpart (or just the connections to paint
> 		 */
> 		HashSet<ConnectionEditPart> connectionsToPaint = new HashSet<ConnectionEditPart>();
> 		
> 		/*
> 		 * Populate the set of node editparts
> 		 */
> 		getNestedEditParts(editPart, editParts);
> 		
> 		/*
> 		 * Populate the set of connections whose source is within the given editpart
> 		 */
> 		for (Iterator<GraphicalEditPart> editPartsItr = editParts.iterator(); editPartsItr.hasNext();) {
> 			connectionEPs.addAll(getAllConnectionsFrom(editPartsItr.next()));
> 		}
> 		
> 		/*
> 		 * Create a set of connections constained within the given editpart
> 		 */
> 		while (!connectionEPs.isEmpty()) {
> 			/*
> 			 * Take the first connection and check whethe there is a path
> 			 * through that connection that leads to the target contained within
> 			 * the given editpart
> 			 */
> 			Stack<ConnectionEditPart> connectionsPath = new Stack<ConnectionEditPart>();
> 			ConnectionEditPart conn = connectionEPs.iterator().next();
> 			connectionEPs.remove(conn);
> 			connectionsPath.add(conn);
> 			
> 			/*
> 			 * Initialize the target for the current path
> 			 */
> 			EditPart target = conn.getTarget();
> 			while(connectionEPs.contains(target)) {
> 				/*
> 				 * If the target end is a connection, check if it's one of the
> 				 * connection's whose target is a connection and within the
> 				 * given editpart. Append it to the path if it is. Otherwise
> 				 * check if the target is within the actual connections or nodes
> 				 * contained within the given editpart
> 				 */
> 				ConnectionEditPart targetConn = (ConnectionEditPart) target;
> 				connectionEPs.remove(targetConn);
> 				connectionsPath.add(targetConn);
> 				
> 				/*
> 				 * Update the target for the new path
> 				 */
> 				target = targetConn.getTarget();
> 			}
> 			
> 			/*
> 			 * The path is built, check if it's target is a node or a connection
> 			 * contained within the given editpart
> 			 */
> 			if (editParts.contains(target) || connectionsToPaint.contains(target)) {
> 				connectionsToPaint.addAll(connectionsPath);
> 			}
> 		}
> 		return connectionsToPaint;
> 	}
> 	
> 	/**
> 	 * Returns all connections orginating from a given editpart. All means that
> 	 * connections originating from connections that have a source given
> 	 * editpart will be included
> 	 * 
> 	 * @param ep the editpart 
> 	 * @return all source connections
> 	 */
> 	private List<ConnectionEditPart> getAllConnectionsFrom(GraphicalEditPart ep) {
> 		LinkedList<ConnectionEditPart> connections = new LinkedList<ConnectionEditPart>();
> 		for (Iterator itr = ep.getSourceConnections().iterator(); itr.hasNext();) {
> 			ConnectionEditPart sourceConn = (ConnectionEditPart) itr.next();
> 			connections.add(sourceConn);
> 			connections.addAll(getAllConnectionsFrom(sourceConn));
> 		}
> 		return connections;
> 	}
> 
> 	/**
289c377
< 	private Map findDecorations(List editparts) {
---
> 	private Map findDecorations(Collection editparts) {
297c385
< 			IGraphicalEditPart first = (IGraphicalEditPart) editparts.get(0);
---
> 			IGraphicalEditPart first = (IGraphicalEditPart) editparts.iterator().next();
447c535
< 			List editParts) {
---
> 			Collection editParts) {
459,504d546
< 	 * Given a selection of editParts determine which source connections have
< 	 * both the source and target selected.
< 	 * 
< 	 * @param editParts
< 	 * @param connectionsToPaint
< 	 *            the edit parts for connections will be appended to this list
< 	 */
< 	private void findConnectionsToPaint(List editParts, List connectionsToPaint) {
< 
< 		EditPartViewer viewer = getDiagramEditPart().getRoot().getViewer();
< 
< 		// For each edit part
< 		for (Iterator iter = editParts.iterator(); iter.hasNext();) {
< 			IGraphicalEditPart element = (IGraphicalEditPart) iter.next();
< 
< 			// Get its view
< 			View view = (View) element.getModel();
< 
< 			// If the view is a shape view...
< 			if (element instanceof ShapeEditPart) {
< 				// Get its connections source
< 				List sourceConnections = view.getSourceEdges();
< 
< 				// For each source connection...
< 				for (int i = 0; i < sourceConnections.size(); i++) {
< 					Edge edge = (Edge) sourceConnections.get(i);
< 
< 					// Get the connections target
< 					View toView = (edge).getTarget();
< 
< 					AbstractEditPart toEditPart = (AbstractEditPart) viewer
< 							.getEditPartRegistry().get(toView);
< 
< 					if (editParts.contains(toEditPart)) {
< 
< 						ConnectionNodeEditPart connectionEditPart = (ConnectionNodeEditPart) viewer
< 								.getEditPartRegistry().get(edge);
< 
< 						connectionsToPaint.add(connectionEditPart);
< 					}
< 				}
< 			}
< 		}
< 	}
< 
< 	/**
816d857
< 
