2c2
<  * Copyright (c) 2006 Eclipse.org
---
>  * Copyright (c) 2006, 2007 Eclipse.org
13a14,16
> import java.util.HashSet;
> import java.util.Set;
> 
14a18,19
> import org.eclipse.core.resources.IProject;
> import org.eclipse.core.resources.ProjectScope;
15a21
> import org.eclipse.core.runtime.Platform;
27a34,37
> 	private static final String PREF_KEY = "gmf_dashboard"; //$NON-NLS-1$
> 
> 	private static final String OPTION_PREFIX = "option_"; //$NON-NLS-1$
> 
52c62,64
< 	private Preferences prefs;
---
> 	private Set<String> enabledOptions;
> 
> 	private IProject project;
54a67
> 		enabledOptions = new HashSet<String>();
57,64c70,82
< 	public DashboardState(Preferences prefs) {
< 		this.prefs = prefs;
< 		dm = read(DM_KEY);
< 		dgm = read(DGM_KEY);
< 		gdm = read(GDM_KEY);
< 		tdm = read(TDM_KEY);
< 		mm = read(MM_KEY);
< 		gm = read(GM_KEY);
---
> 	public DashboardState(IProject project) {
> 		this();
> 		this.project = project;
> 		Preferences prefs = getPreferences();
> 		if (prefs != null) {
> 			readOptions(prefs);
> 			dm = read(prefs, DM_KEY);
> 			dgm = read(prefs, DGM_KEY);
> 			gdm = read(prefs, GDM_KEY);
> 			tdm = read(prefs, TDM_KEY);
> 			mm = read(prefs, MM_KEY);
> 			gm = read(prefs, GM_KEY);
> 		}
185c203,216
< 	private URI read(String key) {
---
> 	public boolean getOption(String name) {
> 		return enabledOptions.contains(name);
> 	}
> 
> 	public void setOption(String name, boolean value) {
> 		if (name == null) {
> 			throw new IllegalArgumentException();
> 		}
> 		if (value) {
> 			enabledOptions.add(name);
> 		} else {
> 			enabledOptions.remove(name);
> 		}
> 		Preferences prefs = getPreferences();
187c218,224
< 			return null;
---
> 			return;
> 		}
> 		String key = OPTION_PREFIX + name;
> 		if (value) {
> 			prefs.put(key, "*"); //$NON-NLS-1$
> 		} else {
> 			prefs.remove(key);
188a226,242
> 		savePreferences(prefs);
> 	}
> 
> 	private void readOptions(Preferences prefs) {
> 		try {
> 			for (String key : prefs.keys()) {
> 				if (key.startsWith(OPTION_PREFIX)) {
> 					enabledOptions.add(key.substring(OPTION_PREFIX.length()));
> 				}
> 			}
> 		} catch (BackingStoreException e) {
> 			IStatus status = Plugin.createError("Unable to read options", e);
> 			Plugin.getDefault().getLog().log(status);
> 		}
> 	}
> 
> 	private URI read(Preferences prefs, String key) {
202a257,259
> 		if (project == null) {
> 			return;
> 		}
206a264
> 		Preferences prefs = getPreferences();
207a266,269
> 		savePreferences(prefs);
> 	}
> 
> 	private void savePreferences(Preferences prefs) {
214a277,312
> 
> 	private Preferences getPreferences() {
> 		if (project == null) {
> 			return null;
> 		}
> 		Preferences node = getExistingPreferences();
> 		if (node != null) {
> 			return node;
> 		}
> 		return new ProjectScope(project).getNode(Plugin.getPluginID()).node(PREF_KEY);
> 	}
> 
> 	private Preferences getExistingPreferences() {
> 		if (project == null) {
> 			return null;
> 		}
> 		Preferences node = Platform.getPreferencesService().getRootNode().node(ProjectScope.SCOPE);
> 		try {
> 			if (!node.nodeExists(project.getName())) {
> 				return null;
> 			}
> 			node = node.node(project.getName());
> 			if (!node.nodeExists(Plugin.getPluginID())) {
> 				return null;
> 			}
> 			node = node.node(Plugin.getPluginID());
> 			if (!node.nodeExists(PREF_KEY)) {
> 				return null;
> 			}
> 			return node.node(PREF_KEY);
> 		} catch (BackingStoreException e) {
> 			IStatus status = Plugin.createError("Unable to read state", e);
> 			Plugin.getDefault().getLog().log(status);
> 		}
> 		return null;
> 	}
