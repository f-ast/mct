2c2
<  * Copyright (c) 2005 IBM Corporation and others.
---
>  * Copyright (c) 2005, 2006 IBM Corporation and others.
13a14
> import org.eclipse.emf.common.notify.Notifier;
17c18,19
< import org.eclipse.emf.transaction.DemultiplexingListener;
---
> import org.eclipse.emf.ecore.resource.ResourceSet;
> import org.eclipse.emf.ecore.util.EContentAdapter;
19d20
< import org.eclipse.emf.transaction.ResourceSetListener;
32,34c33
< public class DiagramModificationListener {
< 	
< 	private ResourceSetListener diagramChangeListener = null;
---
> public class DiagramModificationListener extends EContentAdapter {
37a37,40
> 	private NotificationFilter diagramResourceModifiedFilter;
> 	
> 	private DiagramDocument document;
> 	
48,51c51,54
< 			final AbstractDocumentProvider documentProvider,
< 			final DiagramDocument document) {
< 		
< 		final Diagram diagram = document.getDiagram();
---
> 			AbstractDocumentProvider documentProvider,
> 			DiagramDocument document) {
> 		this.document = document;
> 		Diagram diagram = document.getDiagram();
54c57
< 		NotificationFilter diagramResourceModifiedFilter = NotificationFilter
---
> 		diagramResourceModifiedFilter = NotificationFilter
60a64,71
> 	}
> 
> 	public void startListening() {
> 		EList adapters = getEditingDomain().getResourceSet().eAdapters();
> 		if (!adapters.contains(this)) {
> 				adapters.add(this);
> 		}
> 	}
62,64c73,75
< 		if (diagramChangeListener == null) {
< 			diagramChangeListener = new DemultiplexingListener(
< 				diagramResourceModifiedFilter) {
---
> 	public void stopListening() {
> 		getEditingDomain().getResourceSet().eAdapters().remove(this);
> 	}
66,67c77,98
< 				protected void handleNotification(TransactionalEditingDomain domain,
< 						Notification notification) {
---
> 	/**
> 	 * Gets the editingDomain.
> 	 * @return Returns the editingDomain.
> 	 */
> 	protected TransactionalEditingDomain getEditingDomain() {
> 		return editingDomain;
> 	}
> 
> 	protected DiagramDocument getDiagramDocument() {
> 		return document;
> 	}
> 	
> 	public boolean isAdapterForType(Object type) {
> 		return type == DiagramModificationListener.class;
> 	}
> 
> 	public void notifyChanged(Notification notification) {
> 		if (notification.getNotifier() instanceof ResourceSet) {
> 			super.notifyChanged(notification);
> 		}
> 		
> 		if (diagramResourceModifiedFilter.matches(notification)) {
70c101
< 					if (diagram != null
---
> 			if (getDiagramDocument().getDiagram() != null
86c117,118
< 									document.setContent(document.getContent());
---
> 							getDiagramDocument().setContent(getDiagramDocument().getContent());
> 						}
93c125,127
< 			};
---
> 	public void unsetTarget(Notifier oldTarget) {
> 		if (oldTarget instanceof ResourceSet) {
> 		    super.unsetTarget(oldTarget);
97,98c131,132
< 	public void startListening() {
< 		getEditingDomain().addResourceSetListener(diagramChangeListener);
---
> 	public Notifier getTarget() {
> 		return null;
101,102c135,137
< 	public void stopListening() {
< 		getEditingDomain().removeResourceSetListener(diagramChangeListener);
---
> 	public void setTarget(Notifier newTarget) {
> 		if (newTarget instanceof ResourceSet) {
> 		    super.setTarget(newTarget);
104,110d138
< 	
< 	/**
< 	 * Gets the editingDomain.
< 	 * @return Returns the editingDomain.
< 	 */
< 	protected TransactionalEditingDomain getEditingDomain() {
< 		return editingDomain;
