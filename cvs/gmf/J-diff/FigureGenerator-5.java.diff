13a14,15
> import java.util.ArrayList;
> 
17a20
> import org.eclipse.gmf.common.UnexpectedBehaviourException;
24a28,38
> import org.eclipse.gmf.graphdef.codegen.templates.ConnectionGenerator;
> import org.eclipse.gmf.graphdef.codegen.templates.CustomFigureGenerator;
> import org.eclipse.gmf.graphdef.codegen.templates.DecorationFigureGenerator;
> import org.eclipse.gmf.graphdef.codegen.templates.LabelGenerator;
> import org.eclipse.gmf.graphdef.codegen.templates.ShapeAttrsGenerator;
> import org.eclipse.gmf.graphdef.codegen.templates.ShapeGenerator;
> import org.eclipse.gmf.internal.graphdef.codegen.DispatcherImpl;
> import org.eclipse.gmf.internal.graphdef.codegen.NoSuchTemplateException;
> import org.eclipse.gmf.internal.graphdef.codegen.StaticTemplateRegistry;
> import org.eclipse.gmf.internal.graphdef.codegen.TemplateRegistry;
> import org.eclipse.gmf.internal.graphdef.codegen.YAEmitterFactory;
32,35d45
< 	private final JETEmitter shapeEmitter;
< 	private final JETEmitter customFigureEmitter;
< 	private final JETEmitter decorationFigureEmitter;
< 	private final JETEmitter polylineConnectionEmitter;
37c47,48
< 	private final JETEmitter labelFigureEmitter;
---
> 	private YAEmitterFactory myFactory;
> 	private Dispatcher myDispatcher;
46,55c57,65
< 		shapeEmitter = new JETEmitter(thisBundle.getEntry("/templates/ConcreteShape.javajet").toString(), FigureGenerator.class.getClassLoader());
< 		initEmitter(shapeEmitter);
< 		customFigureEmitter = new JETEmitter(thisBundle.getEntry("/templates/CustomFigure.javajet").toString(), FigureGenerator.class.getClassLoader());
< 		initEmitter(customFigureEmitter);
< 		decorationFigureEmitter = new JETEmitter(thisBundle.getEntry("/templates/DecorationFigure.javajet").toString(), FigureGenerator.class.getClassLoader());
< 		initEmitter(decorationFigureEmitter);
< 		polylineConnectionEmitter = new JETEmitter(thisBundle.getEntry("/templates/PolylineConnection.javajet").toString(), FigureGenerator.class.getClassLoader());
< 		initEmitter(polylineConnectionEmitter);
< 		labelFigureEmitter = new JETEmitter(thisBundle.getEntry("/templates/Label.javajet").toString(), FigureGenerator.class.getClassLoader());
< 		initEmitter(labelFigureEmitter);
---
> 		final ArrayList variables = new ArrayList();
> 		variables.add("org.eclipse.gmf.graphdef");
> 		variables.add("org.eclipse.emf.ecore");
> 		variables.add("org.eclipse.emf.common");
> 		variables.add("org.eclipse.gmf.common");
> 		variables.add("org.eclipse.gmf.graphdef.codegen");
> 
> 		myFactory = new YAEmitterFactory(thisBundle.getEntry("/"), fill(), true, variables, true);
> 		myDispatcher = new DispatcherImpl(myFactory);
65,74c75,83
< 	private static void initEmitter(JETEmitter emitter) {
< 		try {
< 			emitter.addVariable("A", "org.eclipse.gmf.graphdef");
< 			emitter.addVariable("B", "org.eclipse.emf.ecore");
< 			emitter.addVariable("C", "org.eclipse.emf.common");
< 			emitter.addVariable("D", "org.eclipse.gmf.common");
< 		} catch (JETException ex) {
< 			ex.printStackTrace();
< 			// ignore for now
< 		}
---
> 	private static TemplateRegistry fill() {
> 		StaticTemplateRegistry tr = new StaticTemplateRegistry();
> 		tr.put(PolylineConnection.class, "/templates/PolylineConnection.javajet", ConnectionGenerator.class);
> 		tr.put(DecorationFigure.class, "/templates/DecorationFigure.javajet", DecorationFigureGenerator.class);
> 		tr.put(Shape.class, "/templates/ConcreteShape.javajet", ShapeGenerator.class);
> 		tr.put(Label.class, "/templates/Label.javajet", LabelGenerator.class);
> 		tr.put(CustomFigure.class, "/templates/CustomFigure.javajet", CustomFigureGenerator.class);
> 		tr.put("ShapeAttrs", "/templates/ShapeAttrs.javajet", ShapeAttrsGenerator.class);
> 		return tr;
78a88
> 		try {
80c90
< 			res = generate(fig, polylineConnectionEmitter);
---
> 			res = generate(fig, myFactory.acquireEmitter(PolylineConnection.class));
82c92
< 			res = generate(fig, decorationFigureEmitter);
---
> 			res = generate(fig, myFactory.acquireEmitter(DecorationFigure.class));
84c94
< 			res = generate(fig, shapeEmitter);
---
> 			res = generate(fig, myFactory.acquireEmitter(Shape.class));
86c96
< 			res = generate(fig, customFigureEmitter);
---
> 			res = generate(fig, myFactory.acquireEmitter(CustomFigure.class));
88c98
< 			res = generate(fig, labelFigureEmitter);
---
> 			res = generate(fig, myFactory.acquireEmitter(Label.class));
93a104,108
> 		} catch (UnexpectedBehaviourException ex) {
> 			throw new IllegalStateException(ex);
> 		} catch (NoSuchTemplateException ex) {
> 			throw new IllegalStateException(ex);
> 		}
98c113
< 		Object argument = new Object[] {fig, new NullImportAssistant()};
---
> 		Object argument = new Object[] {fig, new NullImportAssistant(), myDispatcher};
