139,140c139,140
<  * A generic diagram editor with no palette.
<  * DiagramEditorWithPalette will provide a palette.
---
>  * A generic diagram editor with no palette. DiagramEditorWithPalette will
>  * provide a palette.
144c144,145
< 	implements IDiagramWorkbenchPart, ITabbedPropertySheetPageContributor, IShowInSource {
---
>     implements IDiagramWorkbenchPart, ITabbedPropertySheetPageContributor,
>     IShowInSource {
189c190,192
< 		/* (non-Javadoc)
---
>         /*
>          * (non-Javadoc)
>          * 
245c248,249
< 			showOutlineAction.setImageDescriptor(DiagramUIPluginImages.DESC_OUTLINE);
---
>             showOutlineAction
>                 .setImageDescriptor(DiagramUIPluginImages.DESC_OUTLINE);
253c257,258
< 			showOverviewAction.setImageDescriptor(DiagramUIPluginImages.DESC_OVERVIEW);
---
>             showOverviewAction
>                 .setImageDescriptor(DiagramUIPluginImages.DESC_OVERVIEW);
299,300c304,305
< 				TransactionUtil.getEditingDomain(getDiagram())
< 					.runExclusive(new Runnable() {
---
>                 TransactionUtil.getEditingDomain(getDiagram()).runExclusive(
>                     new Runnable() {
342,343c347,349
< 		 * show page with a specific ID, possibel values are 
< 		 * ID_OUTLINE and ID_OVERVIEW
---
>          * show page with a specific ID, possibel values are ID_OUTLINE and
>          * ID_OVERVIEW
>          * 
374a381
>          * 
396,397c403,405
< 	/** The workbench site
< 	 *  This variable overrides another one defined in <code>org.eclipse.ui.part<code>
---
>     /**
>      * The workbench site This variable overrides another one defined in
>      * <code>org.eclipse.ui.part<code>
403,404c411,412
< 	/** The RulerComposite used to enhance the graphical viewer to display
< 	 *  rulers
---
>     /**
>      * The RulerComposite used to enhance the graphical viewer to display rulers
422c430,432
< 	 * @return int the integer value indicating the content-outline-page dispaly mode 
---
>      * 
>      * @return int the integer value indicating the content-outline-page dispaly
>      *         mode
436c446,447
< 	 * @param rulerComp The rulerComp to set.
---
>      * @param rulerComp
>      *            The rulerComp to set.
440a452
> 
449,451d460
<         if (historyListener != null) {
<             getOperationHistory().addOperationHistoryListener(historyListener);
< 	}
579d587
<         
597c605,607
< 			Trace.catching(DiagramUIPlugin.getInstance(), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(), "init", e); //$NON-NLS-1$
---
>             Trace.catching(DiagramUIPlugin.getInstance(),
>                 DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
>                 "init", e); //$NON-NLS-1$
603,604c613,615
< 	 * Disposes this editor by:
< 	 * <br> 3. Stops all registered listeners
---
>      * Disposes this editor by: <br>
>      * 3. Stops all registered listeners
>      * 
613c624,625
< 		 * RATLC00527385 DiagramRulerProvider wasn't uninitialized on dispose of the editor.
---
>          * RATLC00527385 DiagramRulerProvider wasn't uninitialized on dispose of
>          * the editor.
641,642c653,655
< 	 * Returns the KeyHandler with common bindings for both the Outline and Graphical Views.
< 	 * For example, delete is a common action.
---
>      * Returns the KeyHandler with common bindings for both the Outline and
>      * Graphical Views. For example, delete is a common action.
>      * 
700,701c713,714
< 		getRulerComposite()
< 			.setGraphicalViewer((ScrollingGraphicalViewer) getGraphicalViewer());
---
>         getRulerComposite().setGraphicalViewer(
>             (ScrollingGraphicalViewer) getGraphicalViewer());
723,724c736,737
< 		RootEditPart rootEP = EditPartService.getInstance()
< 			.createRootEditPart(getDiagram());
---
>         RootEditPart rootEP = EditPartService.getInstance().createRootEditPart(
>             getDiagram());
789c802,803
<             DiagramCommandStack diagramStack = new DiagramCommandStack(getDiagramEditDomain());
---
>             DiagramCommandStack diagramStack = new DiagramCommandStack(
>                 getDiagramEditDomain());
830a845
>      * 
838a854
>      * 
867c883,884
< 		// Create a diagram event broker if there isn't already one for this editing domain.
---
>         // Create a diagram event broker if there isn't already one for this
>         // editing domain.
870c887,893
< 			DiagramEventBroker eventBroker = DiagramEventBroker.getInstance(domain);
---
>             if (historyListener != null) {
>                 getOperationHistory().addOperationHistoryListener(
>                     historyListener);
>             }
> 
>             DiagramEventBroker eventBroker = DiagramEventBroker
>                 .getInstance(domain);
881c904,907
< 		// do nothing
---
>         if (historyListener != null) {
>             getOperationHistory().removeOperationHistoryListener(
>                 historyListener);
>         }
897,898c923,924
< 	 * commands. This is the action manager that is returned when I am asked
< 	 * to adapt to an <code>ActionManager</code>.
---
>      * commands. This is the action manager that is returned when I am asked to
>      * adapt to an <code>ActionManager</code>.
907c933,935
< 	 * A utility method to return the zoom manager from the graphical viewer's root
---
>      * A utility method to return the zoom manager from the graphical viewer's
>      * root
>      * 
930,932c958,960
<      * If subclasses have a known editing domain, they should override this method
<      * to return that editing domain as that will be more efficient that the
<      * generic implementation provided here.
---
>      * If subclasses have a known editing domain, they should override this
>      * method to return that editing domain as that will be more efficient that
>      * the generic implementation provided here.
1008c1036,1038
< 	/* (non-Javadoc)
---
>     /*
>      * (non-Javadoc)
>      * 
1017c1047,1049
< 	 * @param store store to use
---
>      * 
>      * @param store
>      *            store to use
1024c1056,1057
< 	public static void addDefaultPreferences(PreferenceStore store, PreferencesHint preferencesHint) {
---
>     public static void addDefaultPreferences(PreferenceStore store,
>             PreferencesHint preferencesHint) {
1028c1061,1062
< 		IPreferenceStore globalPreferenceStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
---
>         IPreferenceStore globalPreferenceStore = (IPreferenceStore) preferencesHint
>             .getPreferenceStore();
1054c1088,1089
< 		//Point2D.Double point = (Point2D.Double) nnn.getPaperSizesInInchesMap().get(pageSize);
---
>         // Point2D.Double point = (Point2D.Double)
>         // nnn.getPaperSizesInInchesMap().get(pageSize);
1058,1059c1093,1096
< 		//store.setValue(WorkspaceViewerProperties.USE_WORKSPACE_PRINT_SETTINGS, true);
< 		//store.setValue(WorkspaceViewerProperties.USE_DIAGRAM_PRINT_SETTINGS, false);
---
>         // store.setValue(WorkspaceViewerProperties.USE_WORKSPACE_PRINT_SETTINGS,
>         // true);
>         // store.setValue(WorkspaceViewerProperties.USE_DIAGRAM_PRINT_SETTINGS,
>         // false);
1064,1065c1101,1104
< 		//store.setValue(WorkspaceViewerProperties.PAGE_ORIENTATION_LANDSCAPE, false);
< 		//store.setValue(WorkspaceViewerProperties.PAGE_ORIENTATION_PORTRAIT, true);
---
>         // store.setValue(WorkspaceViewerProperties.PAGE_ORIENTATION_LANDSCAPE,
>         // false);
>         // store.setValue(WorkspaceViewerProperties.PAGE_ORIENTATION_PORTRAIT,
>         // true);
1072c1111,1112
< 		//store.setValue(WorkspaceViewerProperties.MARGIN_LEFT, marginSizes[0]);
---
>         // store.setValue(WorkspaceViewerProperties.MARGIN_LEFT,
>         // marginSizes[0]);
1074,1075c1114,1117
< 		//store.setValue(WorkspaceViewerProperties.MARGIN_RIGHT, marginSizes[2]);
< 		//store.setValue(WorkspaceViewerProperties.MARGIN_BOTTOM, marginSizes[3]);
---
>         // store.setValue(WorkspaceViewerProperties.MARGIN_RIGHT,
>         // marginSizes[2]);
>         // store.setValue(WorkspaceViewerProperties.MARGIN_BOTTOM,
>         // marginSizes[3]);
1078,1094c1120,1149
< 		store.setValue(WorkspaceViewerProperties.PREF_USE_WORKSPACE_SETTINGS, DefaultValues.DEFAULT_USE_WORKSPACE_SETTINGS);
< 		store.setValue(WorkspaceViewerProperties.PREF_USE_DIAGRAM_SETTINGS, DefaultValues.DEFAULT_USE_DIAGRAM_SETTINGS);
< 			
< 		store.setValue(WorkspaceViewerProperties.PREF_USE_INCHES, DefaultValues.DEFAULT_INCHES);
< 		store.setValue(WorkspaceViewerProperties.PREF_USE_MILLIM, DefaultValues.DEFAULT_MILLIM);
< 		
< 		store.setValue(WorkspaceViewerProperties.PREF_USE_PORTRAIT, DefaultValues.DEFAULT_PORTRAIT);
< 		store.setValue(WorkspaceViewerProperties.PREF_USE_LANDSCAPE, DefaultValues.DEFAULT_LANDSCAPE);
< 		
< 		store.setValue(WorkspaceViewerProperties.PREF_PAGE_SIZE, DefaultValues.getLocaleSpecificPageType().getName());
< 		store.setValue(WorkspaceViewerProperties.PREF_PAGE_WIDTH, DefaultValues.getLocaleSpecificPageType().getWidth());
< 		store.setValue(WorkspaceViewerProperties.PREF_PAGE_HEIGHT, DefaultValues.getLocaleSpecificPageType().getHeight());
< 		
< 		store.setValue(WorkspaceViewerProperties.PREF_MARGIN_TOP, DefaultValues.DEFAULT_MARGIN_TOP);
< 		store.setValue(WorkspaceViewerProperties.PREF_MARGIN_BOTTOM, DefaultValues.DEFAULT_MARGIN_BOTTOM);
< 		store.setValue(WorkspaceViewerProperties.PREF_MARGIN_LEFT, DefaultValues.DEFAULT_MARGIN_LEFT);
< 		store.setValue(WorkspaceViewerProperties.PREF_MARGIN_RIGHT, DefaultValues.DEFAULT_MARGIN_RIGHT);
---
>         store.setValue(WorkspaceViewerProperties.PREF_USE_WORKSPACE_SETTINGS,
>             DefaultValues.DEFAULT_USE_WORKSPACE_SETTINGS);
>         store.setValue(WorkspaceViewerProperties.PREF_USE_DIAGRAM_SETTINGS,
>             DefaultValues.DEFAULT_USE_DIAGRAM_SETTINGS);
> 
>         store.setValue(WorkspaceViewerProperties.PREF_USE_INCHES,
>             DefaultValues.DEFAULT_INCHES);
>         store.setValue(WorkspaceViewerProperties.PREF_USE_MILLIM,
>             DefaultValues.DEFAULT_MILLIM);
> 
>         store.setValue(WorkspaceViewerProperties.PREF_USE_PORTRAIT,
>             DefaultValues.DEFAULT_PORTRAIT);
>         store.setValue(WorkspaceViewerProperties.PREF_USE_LANDSCAPE,
>             DefaultValues.DEFAULT_LANDSCAPE);
> 
>         store.setValue(WorkspaceViewerProperties.PREF_PAGE_SIZE, DefaultValues
>             .getLocaleSpecificPageType().getName());
>         store.setValue(WorkspaceViewerProperties.PREF_PAGE_WIDTH, DefaultValues
>             .getLocaleSpecificPageType().getWidth());
>         store.setValue(WorkspaceViewerProperties.PREF_PAGE_HEIGHT,
>             DefaultValues.getLocaleSpecificPageType().getHeight());
> 
>         store.setValue(WorkspaceViewerProperties.PREF_MARGIN_TOP,
>             DefaultValues.DEFAULT_MARGIN_TOP);
>         store.setValue(WorkspaceViewerProperties.PREF_MARGIN_BOTTOM,
>             DefaultValues.DEFAULT_MARGIN_BOTTOM);
>         store.setValue(WorkspaceViewerProperties.PREF_MARGIN_LEFT,
>             DefaultValues.DEFAULT_MARGIN_LEFT);
>         store.setValue(WorkspaceViewerProperties.PREF_MARGIN_RIGHT,
>             DefaultValues.DEFAULT_MARGIN_RIGHT);
1099a1155
>      * 
1107,1108c1163
< 			IPath path = DiagramUIPlugin.getInstance()
< 				.getStateLocation();
---
>             IPath path = DiagramUIPlugin.getInstance().getStateLocation();
1134c1189,1190
< 		addDefaultPreferences(workspaceViewerPreferenceStore, getPreferencesHint());
---
>         addDefaultPreferences(workspaceViewerPreferenceStore,
>             getPreferencesHint());
1138,1139c1194,1195
< 	 * Persists the viewer settings to which this RootEditPart belongs. This method should
< 	 * be called when the diagram is being disposed.
---
>      * Persists the viewer settings to which this RootEditPart belongs. This
>      * method should be called when the diagram is being disposed.
1166d1221
< 
1168a1224
>      * 
1176c1232,1233
< 		if (getWorkspaceViewerPreferenceStore().getBoolean(WorkspaceViewerProperties.VIEWPAGEBREAKS)) {
---
>         if (getWorkspaceViewerPreferenceStore().getBoolean(
>             WorkspaceViewerProperties.VIEWPAGEBREAKS)) {
1196c1253,1254
< 		int rulerUnits = getWorkspaceViewerPreferenceStore().getInt(WorkspaceViewerProperties.RULERUNIT);
---
>         int rulerUnits = getWorkspaceViewerPreferenceStore().getInt(
>             WorkspaceViewerProperties.RULERUNIT);
1202d1259
< 		
1209c1266,1267
< 			DiagramRuler verticalRuler = ((DiagramRootEditPart) getRootEditPart()).getVerticalRuler();
---
>             DiagramRuler verticalRuler = ((DiagramRootEditPart) getRootEditPart())
>                 .getVerticalRuler();
1212,1213c1270,1271
< 			DiagramRulerProvider vertProvider = new DiagramRulerProvider(getEditingDomain(),
< 				verticalRuler, root.getMapMode());
---
>             DiagramRulerProvider vertProvider = new DiagramRulerProvider(
>                 getEditingDomain(), verticalRuler, root.getMapMode());
1219c1277,1278
< 			DiagramRuler horizontalRuler = ((DiagramRootEditPart) getRootEditPart()).getHorizontalRuler();
---
>             DiagramRuler horizontalRuler = ((DiagramRootEditPart) getRootEditPart())
>                 .getHorizontalRuler();
1222,1223c1281,1282
< 			DiagramRulerProvider horzProvider = new DiagramRulerProvider(getEditingDomain(),
< 				horizontalRuler, root.getMapMode());
---
>             DiagramRulerProvider horzProvider = new DiagramRulerProvider(
>                 getEditingDomain(), horizontalRuler, root.getMapMode());
1266c1325,1327
< 	 * @param selection  the selection
---
>      * 
>      * @param selection
>      *            the selection
1283,1284c1344,1345
< 								for (Iterator i = structuredSelection.iterator(); i
< 									.hasNext();) {
---
>                                 for (Iterator i = structuredSelection
>                                     .iterator(); i.hasNext();) {
1313c1374,1376
< 	/* (non-Javadoc)
---
>     /*
>      * (non-Javadoc)
>      * 
