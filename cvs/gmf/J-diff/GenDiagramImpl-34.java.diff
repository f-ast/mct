24d23
< import org.eclipse.emf.ecore.EStructuralFeature;
40,41d38
< import org.eclipse.gmf.codegen.gmfgen.Viewmap;
< 
957,958c954,955
< 			GenPackage oldDomainMetaModel = domainMetaModel;
< 			domainMetaModel = (GenPackage)eResolveProxy((InternalEObject)domainMetaModel);
---
> 			InternalEObject oldDomainMetaModel = (InternalEObject)domainMetaModel;
> 			domainMetaModel = (GenPackage)eResolveProxy(oldDomainMetaModel);
995,996c992,993
< 			GenClass oldDomainDiagramElement = domainDiagramElement;
< 			domainDiagramElement = (GenClass)eResolveProxy((InternalEObject)domainDiagramElement);
---
> 			InternalEObject oldDomainDiagramElement = (InternalEObject)domainDiagramElement;
> 			domainDiagramElement = (GenClass)eResolveProxy(oldDomainDiagramElement);
2251,2360c2248
< 	 * @generated NOT
< 	 */
< 	public boolean hasLinkCreationConstraints() {
< 		for (Iterator it = getLinks().iterator(); it.hasNext();) {
< 			GenLink nextLink = (GenLink) it.next();
< 			if(nextLink.getCreationConstraints() != null) {
< 				return true;
< 			}
< 		}
< 		return false;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getLinkCreationConstraintsClassName() {
< 		return "LinkConstraints"; //$NON-NLS-1$		
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getLinkCreationConstraintsQualifiedClassName() {
< 		String owningClass = getBaseItemSemanticEditPolicyQualifiedClassName();
< 		if(owningClass != null) {
< 			return owningClass + "." + getLinkCreationConstraintsClassName(); //$NON-NLS-1$
< 		}
< 		return getLinkCreationConstraintsClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getEditorQualifiedClassName() {
< 		return getEditorPackageName() + '.' + getEditorClassName();
< 	}
< 	
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getReorientConnectionViewCommandQualifiedClassName() {
< 		return getEditCommandsPackageName() + '.' + getReorientConnectionViewCommandClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getEditPartFactoryQualifiedClassName() {
< 		return getEditPartsPackageName() + '.' + getEditPartFactoryClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getBaseItemSemanticEditPolicyQualifiedClassName() {
< 		return getEditPoliciesPackageName() + '.' + getBaseItemSemanticEditPolicyClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getBaseGraphicalNodeEditPolicyQualifiedClassName() {
< 		return getEditPoliciesPackageName() + '.' + getBaseGraphicalNodeEditPolicyClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getReferenceConnectionEditPolicyQualifiedClassName() {
< 		return getEditPoliciesPackageName() + '.' + getReferenceConnectionEditPolicyClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getCanonicalEditPolicyQualifiedClassName() {
< 		return getEditPoliciesPackageName() + '.' + getCanonicalEditPolicyClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getElementTypesQualifiedClassName() {
< 		return getProvidersPackageName() + '.' + getElementTypesClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
---
> 	 * @generated
2362,2363c2250,2259
< 	public String getSemanticHintsQualifiedClassName() {
< 		return getProvidersPackageName() + '.' + getSemanticHintsClassName();
---
> 	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
> 		switch (featureID) {
> 			case GMFGenPackage.GEN_DIAGRAM__NODES:
> 				return ((InternalEList)getNodes()).basicAdd(otherEnd, msgs);
> 			case GMFGenPackage.GEN_DIAGRAM__LINKS:
> 				return ((InternalEList)getLinks()).basicAdd(otherEnd, msgs);
> 			case GMFGenPackage.GEN_DIAGRAM__PALETTE:
> 				if (palette != null)
> 					msgs = ((InternalEObject)palette).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_DIAGRAM__PALETTE, null, msgs);
> 				return basicSetPalette((Palette)otherEnd, msgs);
2365,2372c2261
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getNotationViewProviderQualifiedClassName() {
< 		return getProvidersPackageName() + '.' + getNotationViewProviderClassName();
---
> 		return super.eInverseAdd(otherEnd, featureID, msgs);
2378c2267
< 	 * @generated NOT
---
> 	 * @generated
2380,2383c2269,2276
< 	public String[] getRequiredPluginIDs() {
< 		ArrayList requiredPlugins = new ArrayList();
< 		if (usesSVGShapes()) {
< 			requiredPlugins.add("org.eclipse.gmf.diagramrt.gefsvg");
---
> 	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
> 		switch (featureID) {
> 			case GMFGenPackage.GEN_DIAGRAM__NODES:
> 				return ((InternalEList)getNodes()).basicRemove(otherEnd, msgs);
> 			case GMFGenPackage.GEN_DIAGRAM__LINKS:
> 				return ((InternalEList)getLinks()).basicRemove(otherEnd, msgs);
> 			case GMFGenPackage.GEN_DIAGRAM__PALETTE:
> 				return basicSetPalette(null, msgs);
2385,2387c2278
< 		
< 		requiredPlugins.addAll(getExpressionsRequiredPluginIDs());
< 		return (String[]) requiredPlugins.toArray(new String[requiredPlugins.size()]);
---
> 		return super.eInverseRemove(otherEnd, featureID, msgs);
2393c2284
< 	 * @generated NOT
---
> 	 * @generated
2395,2396c2286,2377
< 	public String getInitDiagramFileActionQualifiedClassName() {
< 		return getEditorPackageName() + '.' + getInitDiagramFileActionClassName();
---
> 	public Object eGet(int featureID, boolean resolve, boolean coreType) {
> 		switch (featureID) {
> 			case GMFGenPackage.GEN_DIAGRAM__DOMAIN_META_MODEL:
> 				if (resolve) return getDomainMetaModel();
> 				return basicGetDomainMetaModel();
> 			case GMFGenPackage.GEN_DIAGRAM__DOMAIN_DIAGRAM_ELEMENT:
> 				if (resolve) return getDomainDiagramElement();
> 				return basicGetDomainDiagramElement();
> 			case GMFGenPackage.GEN_DIAGRAM__NODES:
> 				return getNodes();
> 			case GMFGenPackage.GEN_DIAGRAM__LINKS:
> 				return getLinks();
> 			case GMFGenPackage.GEN_DIAGRAM__PALETTE:
> 				return getPalette();
> 			case GMFGenPackage.GEN_DIAGRAM__EDIT_COMMANDS_PACKAGE_NAME:
> 				return getEditCommandsPackageName();
> 			case GMFGenPackage.GEN_DIAGRAM__EDIT_PARTS_PACKAGE_NAME:
> 				return getEditPartsPackageName();
> 			case GMFGenPackage.GEN_DIAGRAM__EDIT_POLICIES_PACKAGE_NAME:
> 				return getEditPoliciesPackageName();
> 			case GMFGenPackage.GEN_DIAGRAM__EDITOR_PACKAGE_NAME:
> 				return getEditorPackageName();
> 			case GMFGenPackage.GEN_DIAGRAM__PROVIDERS_PACKAGE_NAME:
> 				return getProvidersPackageName();
> 			case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORIES_PACKAGE_NAME:
> 				return getNotationViewFactoriesPackageName();
> 			case GMFGenPackage.GEN_DIAGRAM__PLUGIN_ID:
> 				return getPluginID();
> 			case GMFGenPackage.GEN_DIAGRAM__PLUGIN_NAME:
> 				return getPluginName();
> 			case GMFGenPackage.GEN_DIAGRAM__PROVIDER_NAME:
> 				return getProviderName();
> 			case GMFGenPackage.GEN_DIAGRAM__SAME_FILE_FOR_DIAGRAM_AND_MODEL:
> 				return isSameFileForDiagramAndModel() ? Boolean.TRUE : Boolean.FALSE;
> 			case GMFGenPackage.GEN_DIAGRAM__PRINTING_ENABLED:
> 				return isPrintingEnabled() ? Boolean.TRUE : Boolean.FALSE;
> 			case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_FILE_EXTENSION:
> 				return getDiagramFileExtension();
> 			case GMFGenPackage.GEN_DIAGRAM__REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME:
> 				return getReorientConnectionViewCommandClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_FACTORY_CLASS_NAME:
> 				return getEditPartFactoryClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
> 				return getBaseItemSemanticEditPolicyClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
> 				return getBaseGraphicalNodeEditPolicyClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__REFERENCE_CONNECTION_EDIT_POLICY_CLASS_NAME:
> 				return getReferenceConnectionEditPolicyClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__CANONICAL_EDIT_POLICY_CLASS_NAME:
> 				return getCanonicalEditPolicyClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__ELEMENT_TYPES_CLASS_NAME:
> 				return getElementTypesClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__SEMANTIC_HINTS_CLASS_NAME:
> 				return getSemanticHintsClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_CLASS_NAME:
> 				return getNotationViewProviderClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_CLASS_NAME:
> 				return getEditPartProviderClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__METAMODEL_SUPPORT_PROVIDER_CLASS_NAME:
> 				return getMetamodelSupportProviderClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_CLASS_NAME:
> 				return getModelingAssistantProviderClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__PROPERTY_PROVIDER_CLASS_NAME:
> 				return getPropertyProviderClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_CLASS_NAME:
> 				return getIconProviderClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURE_PARSER_CLASS_NAME:
> 				return getStructuralFeatureParserClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__ACTION_BAR_CONTRIBUTOR_CLASS_NAME:
> 				return getActionBarContributorClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CLASS_NAME:
> 				return getCreationWizardClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_PAGE_CLASS_NAME:
> 				return getCreationWizardPageClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_EDITOR_UTIL_CLASS_NAME:
> 				return getDiagramEditorUtilClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_FILE_CREATOR_CLASS_NAME:
> 				return getDiagramFileCreatorClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__DOCUMENT_PROVIDER_CLASS_NAME:
> 				return getDocumentProviderClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__EDITOR_CLASS_NAME:
> 				return getEditorClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__INIT_DIAGRAM_FILE_ACTION_CLASS_NAME:
> 				return getInitDiagramFileActionClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__MATCHING_STRATEGY_CLASS_NAME:
> 				return getMatchingStrategyClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__PLUGIN_CLASS_NAME:
> 				return getPluginClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__PREFERENCE_INITIALIZER_CLASS_NAME:
> 				return getPreferenceInitializerClassName();
> 			case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID_REGISTRY_CLASS_NAME:
> 				return getVisualIDRegistryClassName();
2398,2405c2379
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getEditPartProviderQualifiedClassName() {
< 		return getProvidersPackageName() + '.' + getEditPartProviderClassName();
---
> 		return super.eGet(featureID, resolve, coreType);
2411c2385
< 	 * @generated NOT
---
> 	 * @generated
2413,2612c2387,2388
< 	public String getMetamodelSupportProviderQualifiedClassName() {
< 		return getProvidersPackageName() + '.' + getMetamodelSupportProviderClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getModelingAssistantProviderQualifiedClassName() {
< 		return getProvidersPackageName() + '.' + getModelingAssistantProviderClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getPropertyProviderQualifiedClassName() {
< 		return getProvidersPackageName() + '.' + getPropertyProviderClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getIconProviderQualifiedClassName() {
< 		return getProvidersPackageName() + '.' + getIconProviderClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getStructuralFeatureParserQualifiedClassName() {
< 		return getProvidersPackageName() + '.' + getStructuralFeatureParserClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getActionBarContributorQualifiedClassName() {
< 		return getEditorPackageName() + '.' + getActionBarContributorClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getCreationWizardQualifiedClassName() {
< 		return getEditorPackageName() + '.' + getCreationWizardClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getCreationWizardPageQualifiedClassName() {
< 		return getEditorPackageName() + '.' + getCreationWizardPageClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getDiagramEditorUtilQualifiedClassName() {
< 		return getEditorPackageName() + '.' + getDiagramEditorUtilClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getDiagramFileCreatorQualifiedClassName() {
< 		return getEditorPackageName() + '.' + getDiagramFileCreatorClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getDocumentProviderQualifiedClassName() {
< 		return getEditorPackageName() + '.' + getDocumentProviderClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getMatchingStrategyQualifiedClassName() {
< 		return getEditorPackageName() + '.' + getMatchingStrategyClassName();
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getElementInitializersClassName() {
< 		return "ElementInitializers"; //$NON-NLS-1$
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated NOT
< 	 */
< 	public String getElementInitializersPackageName() {
< 		return getProvidersPackageName();
< 	}
< 
< 	private boolean usesSVGShapes() {
< /* couldn't tell now
< 		for (Iterator it = getNodes().iterator(); it.hasNext();) {
< 			if (((GenNode) it.next()).getViewmapURI() != null) {
< 				return true;
< 			}
< 		}
< */
< 		return false;
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
< 		if (featureID >= 0) {
< 			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
< 				case GMFGenPackage.GEN_DIAGRAM__NODES:
< 					return ((InternalEList)getNodes()).basicAdd(otherEnd, msgs);
< 				case GMFGenPackage.GEN_DIAGRAM__LINKS:
< 					return ((InternalEList)getLinks()).basicAdd(otherEnd, msgs);
< 				case GMFGenPackage.GEN_DIAGRAM__PALETTE:
< 					if (palette != null)
< 						msgs = ((InternalEObject)palette).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_DIAGRAM__PALETTE, null, msgs);
< 					return basicSetPalette((Palette)otherEnd, msgs);
< 				default:
< 					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
< 			}
< 		}
< 		if (eContainer != null)
< 			msgs = eBasicRemoveFromContainer(msgs);
< 		return eBasicSetContainer(otherEnd, featureID, msgs);
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
< 		if (featureID >= 0) {
< 			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
< 				case GMFGenPackage.GEN_DIAGRAM__VIEWMAP:
< 					return basicSetViewmap(null, msgs);
< 				case GMFGenPackage.GEN_DIAGRAM__NODES:
< 					return ((InternalEList)getNodes()).basicRemove(otherEnd, msgs);
< 				case GMFGenPackage.GEN_DIAGRAM__LINKS:
< 					return ((InternalEList)getLinks()).basicRemove(otherEnd, msgs);
< 				case GMFGenPackage.GEN_DIAGRAM__PALETTE:
< 					return basicSetPalette(null, msgs);
< 				default:
< 					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
< 			}
< 		}
< 		return eBasicSetContainer(null, featureID, msgs);
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
< 		switch (eDerivedStructuralFeatureID(eFeature)) {
< 			case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_RUN_TIME_CLASS:
< 				if (resolve) return getDiagramRunTimeClass();
< 				return basicGetDiagramRunTimeClass();
< 			case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID:
< 				return new Integer(getVisualID());
< 			case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_CLASS_NAME:
< 				return getEditPartClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
< 				return getItemSemanticEditPolicyClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORY_CLASS_NAME:
< 				return getNotationViewFactoryClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__VIEWMAP:
< 				return getViewmap();
---
> 	public void eSet(int featureID, Object newValue) {
> 		switch (featureID) {
2614,2615c2390,2391
< 				if (resolve) return getDomainMetaModel();
< 				return basicGetDomainMetaModel();
---
> 				setDomainMetaModel((GenPackage)newValue);
> 				return;
2617,2618c2393,2394
< 				if (resolve) return getDomainDiagramElement();
< 				return basicGetDomainDiagramElement();
---
> 				setDomainDiagramElement((GenClass)newValue);
> 				return;
2620c2396,2398
< 				return getNodes();
---
> 				getNodes().clear();
> 				getNodes().addAll((Collection)newValue);
> 				return;
2622c2400,2402
< 				return getLinks();
---
> 				getLinks().clear();
> 				getLinks().addAll((Collection)newValue);
> 				return;
2624c2404,2405
< 				return getPalette();
---
> 				setPalette((Palette)newValue);
> 				return;
2626c2407,2408
< 				return getEditCommandsPackageName();
---
> 				setEditCommandsPackageName((String)newValue);
> 				return;
2628c2410,2411
< 				return getEditPartsPackageName();
---
> 				setEditPartsPackageName((String)newValue);
> 				return;
2630c2413,2414
< 				return getEditPoliciesPackageName();
---
> 				setEditPoliciesPackageName((String)newValue);
> 				return;
2632c2416,2417
< 				return getEditorPackageName();
---
> 				setEditorPackageName((String)newValue);
> 				return;
2634c2419,2420
< 				return getProvidersPackageName();
---
> 				setProvidersPackageName((String)newValue);
> 				return;
2636c2422,2423
< 				return getNotationViewFactoriesPackageName();
---
> 				setNotationViewFactoriesPackageName((String)newValue);
> 				return;
2638c2425,2426
< 				return getPluginID();
---
> 				setPluginID((String)newValue);
> 				return;
2640c2428,2429
< 				return getPluginName();
---
> 				setPluginName((String)newValue);
> 				return;
2642c2431,2432
< 				return getProviderName();
---
> 				setProviderName((String)newValue);
> 				return;
2644c2434,2435
< 				return isSameFileForDiagramAndModel() ? Boolean.TRUE : Boolean.FALSE;
---
> 				setSameFileForDiagramAndModel(((Boolean)newValue).booleanValue());
> 				return;
2646c2437,2438
< 				return isPrintingEnabled() ? Boolean.TRUE : Boolean.FALSE;
---
> 				setPrintingEnabled(((Boolean)newValue).booleanValue());
> 				return;
2648c2440,2441
< 				return getDiagramFileExtension();
---
> 				setDiagramFileExtension((String)newValue);
> 				return;
2650c2443,2444
< 				return getReorientConnectionViewCommandClassName();
---
> 				setReorientConnectionViewCommandClassName((String)newValue);
> 				return;
2652c2446,2447
< 				return getEditPartFactoryClassName();
---
> 				setEditPartFactoryClassName((String)newValue);
> 				return;
2654c2449,2450
< 				return getBaseItemSemanticEditPolicyClassName();
---
> 				setBaseItemSemanticEditPolicyClassName((String)newValue);
> 				return;
2656c2452,2453
< 				return getBaseGraphicalNodeEditPolicyClassName();
---
> 				setBaseGraphicalNodeEditPolicyClassName((String)newValue);
> 				return;
2658c2455,2456
< 				return getReferenceConnectionEditPolicyClassName();
---
> 				setReferenceConnectionEditPolicyClassName((String)newValue);
> 				return;
2660c2458,2459
< 				return getCanonicalEditPolicyClassName();
---
> 				setCanonicalEditPolicyClassName((String)newValue);
> 				return;
2662c2461,2462
< 				return getElementTypesClassName();
---
> 				setElementTypesClassName((String)newValue);
> 				return;
2664c2464,2465
< 				return getSemanticHintsClassName();
---
> 				setSemanticHintsClassName((String)newValue);
> 				return;
2666c2467,2468
< 				return getNotationViewProviderClassName();
---
> 				setNotationViewProviderClassName((String)newValue);
> 				return;
2668c2470,2471
< 				return getEditPartProviderClassName();
---
> 				setEditPartProviderClassName((String)newValue);
> 				return;
2670c2473,2474
< 				return getMetamodelSupportProviderClassName();
---
> 				setMetamodelSupportProviderClassName((String)newValue);
> 				return;
2672,2820c2476,2477
< 				return getModelingAssistantProviderClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__PROPERTY_PROVIDER_CLASS_NAME:
< 				return getPropertyProviderClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__ICON_PROVIDER_CLASS_NAME:
< 				return getIconProviderClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__STRUCTURAL_FEATURE_PARSER_CLASS_NAME:
< 				return getStructuralFeatureParserClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__ACTION_BAR_CONTRIBUTOR_CLASS_NAME:
< 				return getActionBarContributorClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_CLASS_NAME:
< 				return getCreationWizardClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__CREATION_WIZARD_PAGE_CLASS_NAME:
< 				return getCreationWizardPageClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_EDITOR_UTIL_CLASS_NAME:
< 				return getDiagramEditorUtilClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_FILE_CREATOR_CLASS_NAME:
< 				return getDiagramFileCreatorClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__DOCUMENT_PROVIDER_CLASS_NAME:
< 				return getDocumentProviderClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__EDITOR_CLASS_NAME:
< 				return getEditorClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__INIT_DIAGRAM_FILE_ACTION_CLASS_NAME:
< 				return getInitDiagramFileActionClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__MATCHING_STRATEGY_CLASS_NAME:
< 				return getMatchingStrategyClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__PLUGIN_CLASS_NAME:
< 				return getPluginClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__PREFERENCE_INITIALIZER_CLASS_NAME:
< 				return getPreferenceInitializerClassName();
< 			case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID_REGISTRY_CLASS_NAME:
< 				return getVisualIDRegistryClassName();
< 		}
< 		return eDynamicGet(eFeature, resolve);
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public void eSet(EStructuralFeature eFeature, Object newValue) {
< 		switch (eDerivedStructuralFeatureID(eFeature)) {
< 			case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_RUN_TIME_CLASS:
< 				setDiagramRunTimeClass((GenClass)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID:
< 				setVisualID(((Integer)newValue).intValue());
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_CLASS_NAME:
< 				setEditPartClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
< 				setItemSemanticEditPolicyClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORY_CLASS_NAME:
< 				setNotationViewFactoryClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__VIEWMAP:
< 				setViewmap((Viewmap)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__DOMAIN_META_MODEL:
< 				setDomainMetaModel((GenPackage)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__DOMAIN_DIAGRAM_ELEMENT:
< 				setDomainDiagramElement((GenClass)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__NODES:
< 				getNodes().clear();
< 				getNodes().addAll((Collection)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__LINKS:
< 				getLinks().clear();
< 				getLinks().addAll((Collection)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__PALETTE:
< 				setPalette((Palette)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__EDIT_COMMANDS_PACKAGE_NAME:
< 				setEditCommandsPackageName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__EDIT_PARTS_PACKAGE_NAME:
< 				setEditPartsPackageName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__EDIT_POLICIES_PACKAGE_NAME:
< 				setEditPoliciesPackageName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__EDITOR_PACKAGE_NAME:
< 				setEditorPackageName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__PROVIDERS_PACKAGE_NAME:
< 				setProvidersPackageName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORIES_PACKAGE_NAME:
< 				setNotationViewFactoriesPackageName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__PLUGIN_ID:
< 				setPluginID((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__PLUGIN_NAME:
< 				setPluginName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__PROVIDER_NAME:
< 				setProviderName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__SAME_FILE_FOR_DIAGRAM_AND_MODEL:
< 				setSameFileForDiagramAndModel(((Boolean)newValue).booleanValue());
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__PRINTING_ENABLED:
< 				setPrintingEnabled(((Boolean)newValue).booleanValue());
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_FILE_EXTENSION:
< 				setDiagramFileExtension((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__REORIENT_CONNECTION_VIEW_COMMAND_CLASS_NAME:
< 				setReorientConnectionViewCommandClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_FACTORY_CLASS_NAME:
< 				setEditPartFactoryClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__BASE_ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
< 				setBaseItemSemanticEditPolicyClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__BASE_GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
< 				setBaseGraphicalNodeEditPolicyClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__REFERENCE_CONNECTION_EDIT_POLICY_CLASS_NAME:
< 				setReferenceConnectionEditPolicyClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__CANONICAL_EDIT_POLICY_CLASS_NAME:
< 				setCanonicalEditPolicyClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__ELEMENT_TYPES_CLASS_NAME:
< 				setElementTypesClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__SEMANTIC_HINTS_CLASS_NAME:
< 				setSemanticHintsClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_PROVIDER_CLASS_NAME:
< 				setNotationViewProviderClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_PROVIDER_CLASS_NAME:
< 				setEditPartProviderClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__METAMODEL_SUPPORT_PROVIDER_CLASS_NAME:
< 				setMetamodelSupportProviderClassName((String)newValue);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__MODELING_ASSISTANT_PROVIDER_CLASS_NAME:
< 				setModelingAssistantProviderClassName((String)newValue);
< 				return;
---
> 				setModelingAssistantProviderClassName((String)newValue);
> 				return;
2867c2524
< 		eDynamicSet(eFeature, newValue);
---
> 		super.eSet(featureID, newValue);
2875,2894c2532,2533
< 	public void eUnset(EStructuralFeature eFeature) {
< 		switch (eDerivedStructuralFeatureID(eFeature)) {
< 			case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_RUN_TIME_CLASS:
< 				setDiagramRunTimeClass((GenClass)null);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID:
< 				setVisualID(VISUAL_ID_EDEFAULT);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_CLASS_NAME:
< 				setEditPartClassName(EDIT_PART_CLASS_NAME_EDEFAULT);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
< 				setItemSemanticEditPolicyClassName(ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORY_CLASS_NAME:
< 				setNotationViewFactoryClassName(NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
< 				return;
< 			case GMFGenPackage.GEN_DIAGRAM__VIEWMAP:
< 				setViewmap((Viewmap)null);
< 				return;
---
> 	public void eUnset(int featureID) {
> 		switch (featureID) {
3028c2667
< 		eDynamicUnset(eFeature);
---
> 		super.eUnset(featureID);
3036,3049c2675,2676
< 	public boolean eIsSet(EStructuralFeature eFeature) {
< 		switch (eDerivedStructuralFeatureID(eFeature)) {
< 			case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_RUN_TIME_CLASS:
< 				return diagramRunTimeClass != null;
< 			case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID:
< 				return visualID != VISUAL_ID_EDEFAULT;
< 			case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_CLASS_NAME:
< 				return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : !EDIT_PART_CLASS_NAME_EDEFAULT.equals(editPartClassName);
< 			case GMFGenPackage.GEN_DIAGRAM__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
< 				return ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? itemSemanticEditPolicyClassName != null : !ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(itemSemanticEditPolicyClassName);
< 			case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORY_CLASS_NAME:
< 				return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : !NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(notationViewFactoryClassName);
< 			case GMFGenPackage.GEN_DIAGRAM__VIEWMAP:
< 				return viewmap != null;
---
> 	public boolean eIsSet(int featureID) {
> 		switch (featureID) {
3139c2766,3063
< 		return eDynamicIsSet(eFeature);
---
> 		return super.eIsSet(featureID);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public boolean hasLinkCreationConstraints() {
> 		for (Iterator it = getLinks().iterator(); it.hasNext();) {
> 			GenLink nextLink = (GenLink) it.next();
> 			if(nextLink.getCreationConstraints() != null) {
> 				return true;
> 			}
> 		}
> 		return false;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getLinkCreationConstraintsClassName() {
> 		return "LinkConstraints"; //$NON-NLS-1$		
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getLinkCreationConstraintsQualifiedClassName() {
> 		String owningClass = getBaseItemSemanticEditPolicyQualifiedClassName();
> 		if(owningClass != null) {
> 			return owningClass + "." + getLinkCreationConstraintsClassName(); //$NON-NLS-1$
> 		}
> 		return getLinkCreationConstraintsClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getEditorQualifiedClassName() {
> 		return getEditorPackageName() + '.' + getEditorClassName();
> 	}
> 	
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getReorientConnectionViewCommandQualifiedClassName() {
> 		return getEditCommandsPackageName() + '.' + getReorientConnectionViewCommandClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getEditPartFactoryQualifiedClassName() {
> 		return getEditPartsPackageName() + '.' + getEditPartFactoryClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getBaseItemSemanticEditPolicyQualifiedClassName() {
> 		return getEditPoliciesPackageName() + '.' + getBaseItemSemanticEditPolicyClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getBaseGraphicalNodeEditPolicyQualifiedClassName() {
> 		return getEditPoliciesPackageName() + '.' + getBaseGraphicalNodeEditPolicyClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getReferenceConnectionEditPolicyQualifiedClassName() {
> 		return getEditPoliciesPackageName() + '.' + getReferenceConnectionEditPolicyClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getCanonicalEditPolicyQualifiedClassName() {
> 		return getEditPoliciesPackageName() + '.' + getCanonicalEditPolicyClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getElementTypesQualifiedClassName() {
> 		return getProvidersPackageName() + '.' + getElementTypesClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getSemanticHintsQualifiedClassName() {
> 		return getProvidersPackageName() + '.' + getSemanticHintsClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getNotationViewProviderQualifiedClassName() {
> 		return getProvidersPackageName() + '.' + getNotationViewProviderClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String[] getRequiredPluginIDs() {
> 		ArrayList requiredPlugins = new ArrayList();
> 		if (usesSVGShapes()) {
> 			requiredPlugins.add("org.eclipse.gmf.diagramrt.gefsvg");
> 		}
> 		
> 		requiredPlugins.addAll(getExpressionsRequiredPluginIDs());
> 		return (String[]) requiredPlugins.toArray(new String[requiredPlugins.size()]);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getInitDiagramFileActionQualifiedClassName() {
> 		return getEditorPackageName() + '.' + getInitDiagramFileActionClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getEditPartProviderQualifiedClassName() {
> 		return getProvidersPackageName() + '.' + getEditPartProviderClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getMetamodelSupportProviderQualifiedClassName() {
> 		return getProvidersPackageName() + '.' + getMetamodelSupportProviderClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getModelingAssistantProviderQualifiedClassName() {
> 		return getProvidersPackageName() + '.' + getModelingAssistantProviderClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getPropertyProviderQualifiedClassName() {
> 		return getProvidersPackageName() + '.' + getPropertyProviderClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getIconProviderQualifiedClassName() {
> 		return getProvidersPackageName() + '.' + getIconProviderClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getStructuralFeatureParserQualifiedClassName() {
> 		return getProvidersPackageName() + '.' + getStructuralFeatureParserClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getActionBarContributorQualifiedClassName() {
> 		return getEditorPackageName() + '.' + getActionBarContributorClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getCreationWizardQualifiedClassName() {
> 		return getEditorPackageName() + '.' + getCreationWizardClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getCreationWizardPageQualifiedClassName() {
> 		return getEditorPackageName() + '.' + getCreationWizardPageClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getDiagramEditorUtilQualifiedClassName() {
> 		return getEditorPackageName() + '.' + getDiagramEditorUtilClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getDiagramFileCreatorQualifiedClassName() {
> 		return getEditorPackageName() + '.' + getDiagramFileCreatorClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getDocumentProviderQualifiedClassName() {
> 		return getEditorPackageName() + '.' + getDocumentProviderClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getMatchingStrategyQualifiedClassName() {
> 		return getEditorPackageName() + '.' + getMatchingStrategyClassName();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getElementInitializersClassName() {
> 		return "ElementInitializers"; //$NON-NLS-1$
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated NOT
> 	 */
> 	public String getElementInitializersPackageName() {
> 		return getProvidersPackageName();
> 	}
> 
> 	private boolean usesSVGShapes() {
> /* couldn't tell now
> 		for (Iterator it = getNodes().iterator(); it.hasNext();) {
> 			if (((GenNode) it.next()).getViewmapURI() != null) {
> 				return true;
> 			}
> 		}
> */
> 		return false;
