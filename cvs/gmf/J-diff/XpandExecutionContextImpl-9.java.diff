4c4
<  * Copyright (c) 2005-2006 Sven Efftinge and others.
---
>  * Copyright (c) 2005-2007 Sven Efftinge and others.
80,82c80,82
<         XpandResource tpl = null;
<         if (name.indexOf(SyntaxConstants.NS_DELIM) != -1) { // local call
<             tpl = findTemplate(TypeNameUtil.withoutLastSegment(name));
---
>         String templateName;
>         if (name.indexOf(SyntaxConstants.NS_DELIM) < 0) {	//local call
>         	templateName = ((XpandResource) currentResource()).getFullyQualifiedName();	//need an enclosing resource in case of composite
84c84
<             tpl = (XpandResource) currentResource();
---
>         	templateName = TypeNameUtil.withoutLastSegment(name);
85a86
>         XpandResource tpl = findTemplate(templateName);
93a95,101
>         XpandAdvice[] advicesInResource = tpl.getAdvices();
>         for (int x = advicesInResource.length - 1; x >= 0; x--) {
>             final XpandAdvice adv = advicesInResource[x];
>             if (adv.matches(def, this)) {
>                 def = new AdvicedDefinition(adv, def);
>             }
>         }
148c156
<             	installAspectsFor(templateName);
---
> //            	installAspectsFor(templateName);
155,161c163,169
<     private void installAspectsFor(String templateName) {
<     	String aspectsTemplateName = "aspects" + SyntaxConstants.NS_DELIM + templateName;
<     	XpandResource aspects = getResourceManager().loadXpandResource(aspectsTemplateName);
<     	if (aspects != null) {
<     		registeredAdvices.addAll(Arrays.asList(aspects.getAdvices()));
<     	}
< 	}
---
> //    private void installAspectsFor(String templateName) {
> //    	String aspectsTemplateName = "aspects" + SyntaxConstants.NS_DELIM + templateName;
> //    	XpandResource aspects = getResourceManager().loadXpandResource(aspectsTemplateName);
> //    	if (aspects != null) {
> //    		registeredAdvices.addAll(Arrays.asList(aspects.getAdvices()));
> //    	}
> //	}
189a198
> 	 * XXX: get rid of the ctx argument and redeclare as non-static?
195c204
<     private XpandDefinition findDefinition(final XpandDefinition[] definitions, final String name, final EClassifier target,
---
>     private static XpandDefinition findDefinition(final XpandDefinition[] definitions, final String name, final EClassifier target,
