26a27,28
> import org.eclipse.core.runtime.IExtension;
> import org.eclipse.core.runtime.IExtensionPoint;
27a30,32
> import org.eclipse.core.runtime.dynamichelpers.ExtensionTracker;
> import org.eclipse.core.runtime.dynamichelpers.IExtensionChangeHandler;
> import org.eclipse.core.runtime.dynamichelpers.IExtensionTracker;
49c54,56
<  * <code>org.eclipse.gmf.runtime.emf.type.core.elementTypes</code> extension point.
---
>  * <code>org.eclipse.gmf.runtime.emf.type.core.elementTypes</code> extension
>  * point, or registered directly through {@link #register(IMetamodelType)} or
>  * {@link #register(ISpecializationType)}.
101a109,112
> 	private ExtensionTracker extensionTracker;
> 	
> 	private IExtensionChangeHandler extensionListener;
> 
114a126,130
> 
> 		if (EMFTypePlugin.isDynamicAware()) {
> 			startExtensionTracking();
> 		}
> 		
117a134,155
> 	private void startExtensionTracking() {
> 		extensionListener = new IExtensionChangeHandler() {
> 			
> 			public void addExtension(IExtensionTracker tracker,
> 					IExtension extension) {
> 				load(extension.getConfigurationElements());
> 			}
> 
> 			public void removeExtension(IExtension extension, Object[] objects) {
> 				// Extension removal not supported
> 			}
> 		};
> 		
> 		IExtensionPoint point = Platform.getExtensionRegistry()
> 				.getExtensionPoint(EMFTypePlugin.getPluginId(),
> 						ELEMENT_TYPES_EXT_P_NAME);
> 		
> 		extensionTracker = new ExtensionTracker();
> 		extensionTracker.registerHandler(extensionListener, ExtensionTracker
> 				.createExtensionPointFilter(point));
> 	}
> 
1135c1173
< 	private void load(IConfigurationElement[] configs) {
---
> 	private synchronized void load(IConfigurationElement[] configs) {
