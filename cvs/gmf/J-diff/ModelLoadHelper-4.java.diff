17d16
< import org.eclipse.core.runtime.Status;
20a20
> import org.eclipse.emf.common.util.WrappedException;
34a35
> 	private Diagnostic diagnostic;	
39,56d39
< 	 * Constructs helper for loading resource refered by URI into given
< 	 * resourceset.
< 	 * 
< 	 * @param targetResSet
< 	 *            resourceset into which the resource will be loaded
< 	 * @param resourceURI
< 	 *            URI referencing the resource to load
< 	 */
< 	public ModelLoadHelper(ResourceSet targetResSet, URI resourceURI) {
< 		if(targetResSet == null || resourceURI == null) {
< 			throw new IllegalArgumentException("null resourceSet or resourceURI"); //$NON-NLS-1$
< 		}
< 		this.resourceSet = targetResSet;
< 		this.uri = resourceURI;
< 		this.status = internalLoad(targetResSet, uri);
< 	}
< 	
< 	/**
75a59,62
> 	public boolean isOK() {
> 		return diagnostic.getSeverity() == Diagnostic.OK;
> 	}
> 	
80a68,70
> 		if(status == null) {
> 			status = BasicDiagnostic.toIStatus(diagnostic);
> 		}
83a74,129
> 	public Diagnostic getDiagnostics() {
> 		return diagnostic;
> 	}
> 	
> 	/**
> 	 * Creates resource diagnostic wrapping the given exception.
> 	 * @param resource the resource associated with the created diagnostic
> 	 * @param exception non-<code>null</code> exception to be wrapped as diagnostic
> 	 * 
> 	 * @return diagnostic object
> 	 */
> 	static Resource.Diagnostic createDiagnostic(Resource resource, Exception exception) {
> 		if(exception == null) {
> 			throw new IllegalArgumentException("null diagnostic exception"); //$NON-NLS-1$
> 		}
> 		final String location = resource.getURI() == null ? null : resource.getURI().toString();
> 		class ExceptionDiagnostic extends WrappedException implements Resource.Diagnostic {
> 			
> 			public ExceptionDiagnostic(Exception exception) {
> 				super(exception);
> 			}
> 	
> 			public String getLocation() {
> 				return location;
> 			}
> 	
> 			public int getColumn() {
> 				return 0;
> 			}
> 	
> 			public int getLine() {
> 				return 0;
> 			}
> 		}
> 		
> 		return new ExceptionDiagnostic(exception);
> 	}
> 	
> 	/**
> 	 * Constructs helper for loading resource refered by URI into given
> 	 * resourceset.
> 	 * 
> 	 * @param targetResSet
> 	 *            resourceset into which the resource will be loaded
> 	 * @param resourceURI
> 	 *            URI referencing the resource to load
> 	 */
> 	public ModelLoadHelper(ResourceSet targetResSet, URI resourceURI) {
> 		if(targetResSet == null || resourceURI == null) {
> 			throw new IllegalArgumentException("null resourceSet or resourceURI"); //$NON-NLS-1$
> 		}
> 		this.resourceSet = targetResSet;
> 		this.uri = resourceURI;
> 		this.diagnostic = internalLoad(targetResSet, uri);
> 	}	
> 
85,86c131,132
< 	private static IStatus internalLoad(ResourceSet resourceSet, URI uri) {
< 		IStatus loadStatus = Status.OK_STATUS;
---
> 	private static Diagnostic internalLoad(ResourceSet resourceSet, URI uri) {
> 		Diagnostic diagnostic = Diagnostic.OK_INSTANCE;
97c143
< 			resource.getErrors().add(MigrationUtil.createDiagnostic(resource, e));
---
> 			resource.getErrors().add(ModelLoadHelper.createDiagnostic(resource, e));
108c154
< 			loadStatus = BasicDiagnostic.toIStatus(loadDiagnostic);
---
> 			diagnostic = loadDiagnostic;
110c156
< 		return loadStatus;
---
> 		return diagnostic;
