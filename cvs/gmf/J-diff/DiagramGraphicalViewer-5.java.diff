31d30
< 
49,51c48,51
< 	 * @param enable <code>boolean</code> <code>true</code> if client wishes to disable
< 	 * updates on the figure canvas, <code>false</code> indicates normal updates are
< 	 * to take place.
---
>      * @param enable
>      *            <code>boolean</code> <code>true</code> if client wishes to
>      *            disable updates on the figure canvas, <code>false</code>
>      *            indicates normal updates are to take place.
60c60,61
< 	private class ToggleUpdateManager extends DeferredUpdateManager {
---
>     private class ToggleUpdateManager
>         extends DeferredUpdateManager {
70a72,78
>         /* (non-Javadoc)
>          * @see org.eclipse.draw2d.DeferredUpdateManager#sendUpdateRequest()
>          */
>         protected void sendUpdateRequest() {
>             PlatformUI.getWorkbench().getDisplay().asyncExec(new UpdateRequest());
>         }
> 
72c80,81
< 		 * @param disableUpdates the disableUpdates to set
---
>          * @param disableUpdates
>          *            the disableUpdates to set
77,83d85
< 				PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
< 					/*
< 					 * (non-Javadoc)
< 					 * 
< 					 * @see java.lang.Runnable#run()
< 					 */
< 					public void run() {
86,87d87
< 				});
< 			}
90c90,92
< 		/* (non-Javadoc)
---
>         /*
>          * (non-Javadoc)
>          * 
98c100,102
< 		/* (non-Javadoc)
---
>         /*
>          * (non-Javadoc)
>          * 
105,112d108
< 
< 		/* (non-Javadoc)
< 		 * @see org.eclipse.draw2d.DeferredUpdateManager#queueWork()
< 		 */
< 		public void queueWork() {
< 			if (!shouldDisableUpdates())
< 				super.queueWork();
< 		}
115c111,112
< 	private class LightweightSystemWithUpdateToggle extends LightweightSystem {
---
>     private class LightweightSystemWithUpdateToggle
>         extends LightweightSystem {
118a116
>          * 
145a144
>      * 
154d152
< 
161,162c159,160
<      * A registry of editparts on the diagram, mapping an element's id string
<      * to a list of <code>EditParts</code>.  
---
>      * A registry of editparts on the diagram, mapping an element's id string to
>      * a list of <code>EditParts</code>.
164,165c162
<     private ElementToEditPartsMap elementToEditPartsMap =
<         new ElementToEditPartsMap();
---
>     private ElementToEditPartsMap elementToEditPartsMap = new ElementToEditPartsMap();
168a166
>      * 
176a175
>      * 
185a185
>      * 
194,195c194,195
<      * Overriden to also flush pending selection events to account for 
<      * OS diffences, since we are firing selection change events asynchronously.
---
>      * Overriden to also flush pending selection events to account for OS
>      * diffences, since we are firing selection change events asynchronously.
214a215
> 
223a225
>      * 
228,229c230
<         SelectionChangedEvent event =
<             new SelectionChangedEvent(this, sel);
---
>         SelectionChangedEvent event = new SelectionChangedEvent(this, sel);
248a250
> 
265c267,268
<      * @see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#findEditPartsForElement(java.lang.String, java.lang.Class)
---
>      * @see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#findEditPartsForElement(java.lang.String,
>      *      java.lang.Class)
267,271c270,271
<     public List findEditPartsForElement(
<         String elementIdStr,
<         Class editPartClass) {
<         return elementToEditPartsMap.findEditPartsForElement(
<             elementIdStr,
---
>     public List findEditPartsForElement(String elementIdStr, Class editPartClass) {
>         return elementToEditPartsMap.findEditPartsForElement(elementIdStr,
276c276,277
<      * @see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#registerEditPartForElement(java.lang.String, org.eclipse.gef.EditPart)
---
>      * @see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#registerEditPartForElement(java.lang.String,
>      *      org.eclipse.gef.EditPart)
283c284,285
<      * @see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#unregisterEditPartForElement(java.lang.String, org.eclipse.gef.EditPart)
---
>      * @see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#unregisterEditPartForElement(java.lang.String,
>      *      org.eclipse.gef.EditPart)
285,287c287
<     public void unregisterEditPartForElement(
<         String elementIdStr,
<         EditPart ep) {
---
>     public void unregisterEditPartForElement(String elementIdStr, EditPart ep) {
291d290
< 	
295d293
< 	
297,299c295,297
< 	 * The editor manages the workspaces preferences store. So viewers not using a editor
< 	 * do not need to create a preference store.  This method provides a hook for clients
< 	 * requiring access to the preference store.
---
>      * The editor manages the workspaces preferences store. So viewers not using
>      * a editor do not need to create a preference store. This method provides a
>      * hook for clients requiring access to the preference store.
308,309c306,307
< 	 * Returns the workspace preference store managed by the <code>DiagramEditor</code>,
< 	 * if one is being used. May return null.
---
>      * Returns the workspace preference store managed by the
>      * <code>DiagramEditor</code>, if one is being used. May return null.
317c315,317
< 	/* (non-Javadoc)
---
>     /*
>      * (non-Javadoc)
>      * 
