2c2
<  * Copyright (c) 2004, 2007 IBM Corporation and others.
---
>  * Copyright (c) 2004 IBM Corporation and others.
26,27d25
< import org.eclipse.gmf.runtime.draw2d.ui.geometry.LineSeg;
< import org.eclipse.gmf.runtime.draw2d.ui.geometry.PointListUtilities;
30a29,31
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.LineSeg;
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.PointListUtilities;
> 
32,34c33
<  * Implements sliding connection anchor functionality for Image figures
<  * 
<  * @author aboyko
---
>  * @author oboyko
35a35
>  * Window - Preferences - Java - Code Style - Code Templates
42c42
< 		static private Map<Image, ImageAnchorLocation> imageAnchorLocationMap = new WeakHashMap<Image, ImageAnchorLocation>();
---
> 		static private Map imageAnchorLocationMap = new WeakHashMap();
54c54
< 			ImageAnchorLocation imgAnchorLoc = imageAnchorLocationMap
---
> 			ImageAnchorLocation imgAnchorLoc = (ImageAnchorLocation) imageAnchorLocationMap
64c64
< 		private Map<Integer, Point> locationMap = new HashMap<Integer, Point>();
---
> 		private Map locationMap = new HashMap();
163c163
< 				ptIntersect = locationMap.get(new Integer(angle));
---
> 				ptIntersect = (Point) locationMap.get(new Integer(angle));
300,301c300,302
< 	/* (non-Javadoc)
< 	 * @see org.eclipse.gmf.runtime.draw2d.ui.figures.BaseSlidableAnchor#getLocation(org.eclipse.draw2d.geometry.Point, org.eclipse.draw2d.geometry.Point)
---
> 	/* 
> 	 * (non-Javadoc)
> 	 * @see org.eclipse.gmf.runtime.gef.ui.figures.SlidableAnchor#getLocation(org.eclipse.draw2d.geometry.Point, org.eclipse.draw2d.geometry.Point)
307,309c308,309
< 		Rectangle ownerRect = getBox();
< 		PointList intersections = getIntersectionPoints(ownReference,
< 				foreignReference);
---
> 		Rectangle ownerRect = new Rectangle(getBox());
> 		PointList intersections = getIntersectionPoints(ownReference, foreignReference);
311,322c311,316
< 			Point ptRef = PointListUtilities.pickFarestPoint(intersections,
< 					foreignReference);
< 			Point ptEdge = PointListUtilities.pickClosestPoint(intersections,
< 					foreignReference);
< 			Point location = ImageAnchorLocation.getInstance(getImage())
< 					.getLocation(ptRef, ptEdge, ownerRect,
< 							getReferencePoint().equals(ownReference) && isDefaultAnchor());
< 			if (location != null) {
< 				location = normalizeToStraightlineTolerance(foreignReference,
< 						location, 3);
< 			}
< 			return location;
---
> 			Point ptRef = PointListUtilities.pickFarestPoint(intersections, foreignReference);
> 			Point ptEdge = PointListUtilities.pickClosestPoint(intersections,foreignReference);
> 			Point loc = ImageAnchorLocation.getInstance(getImage()).getLocation(ptRef, ptEdge, ownerRect, isDefaultAnchor());
> 			if (loc != null)
> 				loc = normalizeToStraightlineTolerance(foreignReference, loc, 3);
> 			return loc;
326d319
< 
