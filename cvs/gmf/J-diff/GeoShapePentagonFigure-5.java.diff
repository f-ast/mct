2c2
<  * Copyright (c) 2003, 2004 IBM Corporation and others.
---
>  * Copyright (c) 2003, 2008 IBM Corporation and others.
16a17
> import org.eclipse.draw2d.geometry.PrecisionPoint;
17a19
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.PrecisionPointList;
20a23
>  * @author aboyko
25a29,32
> 	private final static double WIDTH_FACTOR = 2 * Math.sin(0.4 * Math.PI) / (1 + Math.cos(0.2 * Math.PI));
> 	private final static double BOTTOM_OFFSET_FACTOR = 1 / (4 * Math.cos(0.2 * Math.PI));
> 	private final static double SIDE_OFFSET_FACTOR = (1 - Math.cos(0.4 * Math.PI)) / (1 + Math.cos(0.2 * Math.PI));
> 
36a44,53
> 	/**
> 	 * Constructor - Creates a proper pentagon with a given height
> 	 * 
> 	 * @param height initial height of the figure
> 	 * @param spacing <code>int</code> that is the margin between children in logical units
> 	 */
> 	public GeoShapePentagonFigure(int height, int spacing) {
> 		this((int) Math.round(WIDTH_FACTOR * height), height, spacing);
> 	}
> 			
46,49c63
< 		PointList points = new PointList();
< 		
< 		int xOffset = (int)(rect.width * 0.20);
< 		int yOffset = (int)(rect.height * 0.40);
---
> 		PointList points = new PrecisionPointList();
51,55c65,69
< 		Point p1 = new Point( rect.x + (rect.width / 2), rect.y );
< 		Point p2 = new Point( rect.x + rect.width - 1, rect.y + yOffset );
< 		Point p3 = new Point( rect.x + rect.width - xOffset, rect.y + rect.height - 1 );
< 		Point p4 = new Point( rect.x + xOffset, rect.y + rect.height - 1 );
< 		Point p5 = new Point( rect.x, rect.y + yOffset );
---
> 		Point p1 = new PrecisionPoint(rect.preciseX() + rect.preciseWidth() / 2, rect.preciseY());
> 		Point p2 = new PrecisionPoint(rect.preciseX() + rect.preciseWidth() - 1, rect.preciseY() + rect.preciseHeight() * SIDE_OFFSET_FACTOR);
> 		Point p3 = new PrecisionPoint(rect.preciseX() + rect.preciseWidth() * (0.5 + BOTTOM_OFFSET_FACTOR), rect.preciseY() + rect.preciseHeight() - 1);
> 		Point p4 = new PrecisionPoint(rect.preciseX() + rect.preciseWidth() * (0.5 - BOTTOM_OFFSET_FACTOR), p3.preciseY());
> 		Point p5 = new PrecisionPoint(rect.preciseX(), p2.preciseY());
