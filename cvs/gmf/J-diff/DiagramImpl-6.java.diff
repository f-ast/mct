23d22
< import org.eclipse.emf.ecore.EObject;
95a95,103
>      * The flag representing whether the Measurement Unit attribute has been set.
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      * @ordered
>      */
>     protected static final int MEASUREMENT_UNIT_ESETFLAG = 1 << 11;
> 
>     /**
133c141
< 		return NotationPackage.eINSTANCE.getDiagram();
---
>         return NotationPackage.Literals.DIAGRAM;
166c174,190
< 	private boolean measurementUnitInitialized = false;
---
>     /**
>      * <!-- begin-user-doc -->
>      * Set the Measurement Unit for this Diagram, the Measure ment unit can be set only 
>      * once, the set method will not set the value if it was already set
>      * <!-- end-user-doc -->
>      */
>     public void setMeasurementUnit(MeasurementUnit newMeasurementUnit) {
>         if (!isSetMeasurementUnit()){
>             MeasurementUnit oldMeasurementUnit = measurementUnit;
>             measurementUnit = newMeasurementUnit == null ? MEASUREMENT_UNIT_EDEFAULT : newMeasurementUnit;
>             boolean oldMeasurementUnitESet = (eFlags & MEASUREMENT_UNIT_ESETFLAG) != 0;
>             eFlags |= MEASUREMENT_UNIT_ESETFLAG;
>             if (eNotificationRequired())
>                 eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.DIAGRAM__MEASUREMENT_UNIT, oldMeasurementUnit, measurementUnit, !oldMeasurementUnitESet));
>         } else
>             throw new UnsupportedOperationException();
>     }
168,170c192,194
< 	/* 
< 	 * (non-Javadoc)
< 	 * @see org.eclipse.gmf.runtime.notation.Diagram#initializeMeasurementUnit(org.eclipse.gmf.runtime.notation.MeasurementUnit)
---
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
172,176c196,197
< 	public boolean initializeMeasurementUnit(MeasurementUnit mu) {
< 		if (!measurementUnitInitialized) {
< 			measurementUnit = mu;
< 			measurementUnitInitialized = true;
< 			return true;
---
>     public void unsetMeasurementUnit() {
>         throw new UnsupportedOperationException();
179c200,206
< 		return false;
---
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public boolean isSetMeasurementUnit() {
>         return (eFlags & MEASUREMENT_UNIT_ESETFLAG) != 0;
235,272c262,263
< 	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
< 		if (featureID >= 0) {
< 			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
< 				case NotationPackage.DIAGRAM__EANNOTATIONS:
< 					return ((InternalEList)getEAnnotations()).basicAdd(otherEnd, msgs);
< 				case NotationPackage.DIAGRAM__SOURCE_EDGES:
< 					return ((InternalEList)getSourceEdges()).basicAdd(otherEnd, msgs);
< 				case NotationPackage.DIAGRAM__TARGET_EDGES:
< 					return ((InternalEList)getTargetEdges()).basicAdd(otherEnd, msgs);
< 				default:
< 					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
< 			}
< 		}
< 		if (eContainer != null)
< 			msgs = eBasicRemoveFromContainer(msgs);
< 		return eBasicSetContainer(otherEnd, featureID, msgs);
< 	}
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
< 		if (featureID >= 0) {
< 			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
< 				case NotationPackage.DIAGRAM__EANNOTATIONS:
< 					return ((InternalEList)getEAnnotations()).basicRemove(otherEnd, msgs);
< 				case NotationPackage.DIAGRAM__SOURCE_EDGES:
< 					return ((InternalEList)getSourceEdges()).basicRemove(otherEnd, msgs);
< 				case NotationPackage.DIAGRAM__TARGET_EDGES:
< 					return ((InternalEList)getTargetEdges()).basicRemove(otherEnd, msgs);
< 				case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
< 					return ((InternalEList)getPersistedChildren()).basicRemove(otherEnd, msgs);
< 				case NotationPackage.DIAGRAM__STYLES:
< 					return ((InternalEList)getStyles()).basicRemove(otherEnd, msgs);
< 				case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
< 					return ((InternalEList)getTransientChildren()).basicRemove(otherEnd, msgs);
---
>     public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
>         switch (featureID) {
277,278d267
< 				default:
< 					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
280,281c269
< 		}
< 		return eBasicSetContainer(null, featureID, msgs);
---
>         return super.eInverseRemove(otherEnd, featureID, msgs);
289,314c277,278
< 	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
< 		switch (eDerivedStructuralFeatureID(eFeature)) {
< 			case NotationPackage.DIAGRAM__EANNOTATIONS:
< 				return getEAnnotations();
< 			case NotationPackage.DIAGRAM__VISIBLE:
< 				return isVisible() ? Boolean.TRUE : Boolean.FALSE;
< 			case NotationPackage.DIAGRAM__TYPE:
< 				return getType();
< 			case NotationPackage.DIAGRAM__MUTABLE:
< 				return isMutable() ? Boolean.TRUE : Boolean.FALSE;
< 			case NotationPackage.DIAGRAM__SOURCE_EDGES:
< 				return getSourceEdges();
< 			case NotationPackage.DIAGRAM__TARGET_EDGES:
< 				return getTargetEdges();
< 			case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
< 				return getPersistedChildren();
< 			case NotationPackage.DIAGRAM__STYLES:
< 				return getStyles();
< 			case NotationPackage.DIAGRAM__ELEMENT:
< 				if (resolve) return getElement();
< 				return basicGetElement();
< 			case NotationPackage.DIAGRAM__DIAGRAM:
< 				if (resolve) return getDiagram();
< 				return basicGetDiagram();
< 			case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
< 				return getTransientChildren();
---
>     public Object eGet(int featureID, boolean resolve, boolean coreType) {
>         switch (featureID) {
324c288
< 		return eDynamicGet(eFeature, resolve);
---
>         return super.eGet(featureID, resolve, coreType);
332,369c296,297
< 	public void eSet(EStructuralFeature eFeature, Object newValue) {
< 		switch (eDerivedStructuralFeatureID(eFeature)) {
< 			case NotationPackage.DIAGRAM__EANNOTATIONS:
< 				getEAnnotations().clear();
< 				getEAnnotations().addAll((Collection)newValue);
< 				return;
< 			case NotationPackage.DIAGRAM__VISIBLE:
< 				setVisible(((Boolean)newValue).booleanValue());
< 				return;
< 			case NotationPackage.DIAGRAM__TYPE:
< 				setType((String)newValue);
< 				return;
< 			case NotationPackage.DIAGRAM__MUTABLE:
< 				setMutable(((Boolean)newValue).booleanValue());
< 				return;
< 			case NotationPackage.DIAGRAM__SOURCE_EDGES:
< 				getSourceEdges().clear();
< 				getSourceEdges().addAll((Collection)newValue);
< 				return;
< 			case NotationPackage.DIAGRAM__TARGET_EDGES:
< 				getTargetEdges().clear();
< 				getTargetEdges().addAll((Collection)newValue);
< 				return;
< 			case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
< 				getPersistedChildren().clear();
< 				getPersistedChildren().addAll((Collection)newValue);
< 				return;
< 			case NotationPackage.DIAGRAM__STYLES:
< 				getStyles().clear();
< 				getStyles().addAll((Collection)newValue);
< 				return;
< 			case NotationPackage.DIAGRAM__ELEMENT:
< 				setElement((EObject)newValue);
< 				return;
< 			case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
< 				getTransientChildren().clear();
< 				getTransientChildren().addAll((Collection)newValue);
< 				return;
---
>     public void eSet(int featureID, Object newValue) {
>         switch (featureID) {
372a301,303
>             case NotationPackage.DIAGRAM__MEASUREMENT_UNIT:
>                 setMeasurementUnit((MeasurementUnit)newValue);
>                 return;
382c313
< 		eDynamicSet(eFeature, newValue);
---
>         super.eSet(featureID, newValue);
390,421c321,322
< 	public void eUnset(EStructuralFeature eFeature) {
< 		switch (eDerivedStructuralFeatureID(eFeature)) {
< 			case NotationPackage.DIAGRAM__EANNOTATIONS:
< 				getEAnnotations().clear();
< 				return;
< 			case NotationPackage.DIAGRAM__VISIBLE:
< 				setVisible(VISIBLE_EDEFAULT);
< 				return;
< 			case NotationPackage.DIAGRAM__TYPE:
< 				setType(TYPE_EDEFAULT);
< 				return;
< 			case NotationPackage.DIAGRAM__MUTABLE:
< 				setMutable(MUTABLE_EDEFAULT);
< 				return;
< 			case NotationPackage.DIAGRAM__SOURCE_EDGES:
< 				getSourceEdges().clear();
< 				return;
< 			case NotationPackage.DIAGRAM__TARGET_EDGES:
< 				getTargetEdges().clear();
< 				return;
< 			case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
< 				getPersistedChildren().clear();
< 				return;
< 			case NotationPackage.DIAGRAM__STYLES:
< 				getStyles().clear();
< 				return;
< 			case NotationPackage.DIAGRAM__ELEMENT:
< 				unsetElement();
< 				return;
< 			case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
< 				getTransientChildren().clear();
< 				return;
---
>     public void eUnset(int featureID) {
>         switch (featureID) {
424a326,328
>             case NotationPackage.DIAGRAM__MEASUREMENT_UNIT:
>                 unsetMeasurementUnit();
>                 return;
432c336
< 		eDynamicUnset(eFeature);
---
>         super.eUnset(featureID);
440,463c344,345
< 	public boolean eIsSet(EStructuralFeature eFeature) {
< 		switch (eDerivedStructuralFeatureID(eFeature)) {
< 			case NotationPackage.DIAGRAM__EANNOTATIONS:
< 				return eAnnotations != null && !eAnnotations.isEmpty();
< 			case NotationPackage.DIAGRAM__VISIBLE:
< 				return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
< 			case NotationPackage.DIAGRAM__TYPE:
< 				return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
< 			case NotationPackage.DIAGRAM__MUTABLE:
< 				return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
< 			case NotationPackage.DIAGRAM__SOURCE_EDGES:
< 				return sourceEdges != null && !sourceEdges.isEmpty();
< 			case NotationPackage.DIAGRAM__TARGET_EDGES:
< 				return targetEdges != null && !targetEdges.isEmpty();
< 			case NotationPackage.DIAGRAM__PERSISTED_CHILDREN:
< 				return persistedChildren != null && !persistedChildren.isEmpty();
< 			case NotationPackage.DIAGRAM__STYLES:
< 				return styles != null && !styles.isEmpty();
< 			case NotationPackage.DIAGRAM__ELEMENT:
< 				return isSetElement();
< 			case NotationPackage.DIAGRAM__DIAGRAM:
< 				return basicGetDiagram() != null;
< 			case NotationPackage.DIAGRAM__TRANSIENT_CHILDREN:
< 				return transientChildren != null && !transientChildren.isEmpty();
---
>     public boolean eIsSet(int featureID) {
>         switch (featureID) {
467c349
< 				return measurementUnit != MEASUREMENT_UNIT_EDEFAULT;
---
>                 return isSetMeasurementUnit();
473c355
< 		return eDynamicIsSet(eFeature);
---
>         return super.eIsSet(featureID);
488c370
< 		result.append(measurementUnit);
---
>         if ((eFlags & MEASUREMENT_UNIT_ESETFLAG) != 0) result.append(measurementUnit); else result.append("<unset>"); //$NON-NLS-1$
