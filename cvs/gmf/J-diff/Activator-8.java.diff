11,13d10
< import java.io.IOException;
< import java.io.Reader;
< import java.util.Collection;
29d25
< import org.eclipse.core.runtime.Path;
34,36d29
< import org.eclipse.gmf.internal.xpand.expression.SyntaxConstants;
< import org.eclipse.gmf.internal.xpand.util.ResourceManagerImpl;
< import org.eclipse.gmf.internal.xpand.util.StreamConverter;
82c75
< 		if (result != null) {
---
> 		assert result != null;
85,105d77
< 		//Must not return null here. Return a fake resource manager that only knows how to handle the given file
< 		return new ResourceManagerImpl() {
< 			@Override
< 			protected boolean shouldCache() {
< 				return false;
< 			}
< 			@Override
< 			protected Reader resolve(String fullyQualifiedName, String extension) throws IOException {
< 				if (extension.equals(file.getFileExtension()) && fullyQualifiedName.replace(SyntaxConstants.NS_DELIM, "/").equals(file.getProjectRelativePath().toString())) {
< 					try {
< 						return new StreamConverter().toContentsReader(file);
< 					} catch (CoreException ex) {
< 						IOException wrap = new IOException(ex.getStatus().getMessage());
< 						wrap.initCause(ex);
< 						throw wrap;
< 					}
< 				}
< 				return null;
< 			}
< 		};
< 	}
