head	1.9;
access;
symbols
	v20080722-1827:1.9
	v20080718-1700:1.9
	v20080718-1731:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080528-1052:1.8
	v20070208-1800:1.6
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	M1_20:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.3
	v20060519-0800:1.3
	v20060512-1000:1.2
	I20060512-1000:1.2
	RC2_10:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2008.06.03.16.56.38;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	58c484577c54567;

1.8
date	2008.05.27.12.28.08;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	68fd483bfe544567;

1.7
date	2007.02.09.20.08.29;	author atikhomirov;	state dead;
branches;
next	1.6;
commitid	179c45ccd4b34567;

1.6
date	2006.06.27.13.44.29;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.02.15.08.29;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.30.13.06.14;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.12.14.53.02;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.27.13.58.12;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.23;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Example code was regenerated with latest templates.
@
text
@/*
 *  Copyright (c) 2006, 2008 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.policies;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.graphdef.editor.edit.parts.PointEditPart;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramUpdater;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphNodeDescriptor;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class PolylineCanonicalEditPolicy extends CanonicalEditPolicy {

	/**
	 * @@generated
	 */
	Set myFeaturesToSynchronize;

	/**
	 * @@generated
	 */
	protected List getSemanticChildrenList() {
		View viewObject = (View) getHost().getModel();
		List result = new LinkedList();
		for (Iterator it = GMFGraphDiagramUpdater.getPolyline_3014SemanticChildren(viewObject).iterator(); it.hasNext();) {
			result.add(((GMFGraphNodeDescriptor) it.next()).getModelElement());
		}
		return result;
	}

	/**
	 * @@generated
	 */
	protected boolean isOrphaned(Collection semanticChildren, final View view) {
		int visualID = GMFGraphVisualIDRegistry.getVisualID(view);
		switch (visualID) {
		case PointEditPart.VISUAL_ID:
			if (!semanticChildren.contains(view.getElement())) {
				return true;
			}
		}
		return false;
	}

	/**
	 * @@generated
	 */
	protected String getDefaultFactoryHint() {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Set getFeaturesToSynchronize() {
		if (myFeaturesToSynchronize == null) {
			myFeaturesToSynchronize = new HashSet();
			myFeaturesToSynchronize.add(GMFGraphPackage.eINSTANCE.getPolyline_Template());
		}
		return myFeaturesToSynchronize;
	}

}
@


1.8
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d57 3
a59 1
			return !semanticChildren.contains(view.getElement()) || visualID != GMFGraphVisualIDRegistry.getNodeVisualID((View) getHost().getModel(), view.getElement());
@


1.7
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d2 8
a9 8
 * Copyright (c) 2006 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d13 12
a26 2
import java.util.LinkedList;
import java.util.List;
d36 5
d42 1
d44 3
d53 7
a59 2
	protected boolean shouldDeleteView(View view) {
		return view.isSetElement() && view.getElement() != null && view.getElement().eIsProxy();
d69 11
@


1.6
log
@#148813 Do not remove diagram nodes with domain element located in resource by CanonicalEditPolicy
@
text
@@


1.5
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d35 1
a35 4
		if (view.getEAnnotation("Shortcut") != null) { //$NON-NLS-1$
			return false;
		}
		return view.isSetElement() && view.getElement() != null;
@


1.4
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
@


1.3
log
@#141463 ecore diagram : EClass shortcut disappears when creating a new EClass
@
text
@d1 10
@


1.2
log
@#135019 Canonical Edit Policy: Links that have changed visual IDs should not duplicate on diagram reopening
@
text
@d25 3
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@a7 2
import org.eclipse.emf.ecore.EObject;

d25 1
a25 2
		EObject domainModelElement = view.getElement();
		return domainModelElement != null && domainModelElement != ((View) getHost().getModel()).getElement() && super.shouldDeleteView(view);
@

