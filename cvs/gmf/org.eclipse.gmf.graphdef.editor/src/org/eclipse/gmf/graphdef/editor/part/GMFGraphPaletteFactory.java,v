head	1.12;
access;
symbols
	v20080722-1827:1.12
	v20080718-1700:1.11
	v20080718-1731:1.12
	v20080716-1642:1.12
	R2_1_maintenance:1.11.0.2
	Root_R2_1_maintenance:1.11
	R2_1_0:1.11
	v20080610-1132:1.11
	v20080603-1553:1.11
	v20080528-1052:1.10
	v20080521:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080510-0100:1.9
	v20080507-1326:1.9
	v20080501-1739:1.9
	v20080425-1959:1.9
	v20080411-0411:1.9
	v20080404-1111:1.9
	v20080322-0000:1.9
	v20080114-2222:1.7
	v20071214-1111:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070520-1200:1.6
	v20070420-1000:1.6
	v20070405-2000:1.6
	v20070405-1100:1.6
	v20070330-1300:1.6
	v20070307-0700:1.6
	v20070221-1500:1.6
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061013-1330:1.5
	M1_20:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.3
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	RC2_10:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.12
date	2008.07.02.15.20.47;	author ashatalin;	state Exp;
branches;
next	1.11;
commitid	703486b9cc54567;

1.11
date	2008.05.30.17.14.49;	author ashatalin;	state Exp;
branches;
next	1.10;
commitid	70b4484036034567;

1.10
date	2008.05.27.12.28.09;	author ashatalin;	state Exp;
branches;
next	1.9;
commitid	68fd483bfe544567;

1.9
date	2008.03.13.17.56.06;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	54b147d96ab34567;

1.8
date	2008.03.07.16.33.28;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	695c47d16e564567;

1.7
date	2007.05.31.15.52.29;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	49f1465eef2c4567;

1.6
date	2007.02.09.20.08.30;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	179c45ccd4b34567;

1.5
date	2006.06.02.15.08.30;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.30.13.06.14;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.22.17.37.31;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.16.36.28;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.24;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.12
log
@[233207] - Support Label figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.part;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.gef.Tool;
import org.eclipse.gef.palette.PaletteContainer;
import org.eclipse.gef.palette.PaletteDrawer;
import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gef.palette.ToolEntry;
import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;
import org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeConnectionTool;
import org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeCreationTool;

/**
 * @@generated
 */
public class GMFGraphPaletteFactory {

	/**
	 * @@generated
	 */
	public void fillPalette(PaletteRoot paletteRoot) {
		paletteRoot.add(createDiagramElements1Group());
		paletteRoot.add(createFigures2Group());
	}

	/**
	 * Creates "Diagram Elements" palette tool group
	 * @@generated
	 */
	private PaletteContainer createDiagramElements1Group() {
		PaletteDrawer paletteContainer = new PaletteDrawer(Messages.DiagramElements1Group_title);
		paletteContainer.setDescription(Messages.DiagramElements1Group_desc);
		paletteContainer.add(createNode1CreationTool());
		paletteContainer.add(createCompartment2CreationTool());
		paletteContainer.add(createConnection3CreationTool());
		paletteContainer.add(createFigureLink4CreationTool());
		paletteContainer.add(createNestedFigureLink5CreationTool());
		paletteContainer.add(createChildAccessLink6CreationTool());
		paletteContainer.add(createLabel7CreationTool());
		return paletteContainer;
	}

	/**
	 * Creates "Figures" palette tool group
	 * @@generated
	 */
	private PaletteContainer createFigures2Group() {
		PaletteDrawer paletteContainer = new PaletteDrawer(Messages.Figures2Group_title);
		paletteContainer.setDescription(Messages.Figures2Group_desc);
		paletteContainer.add(createFigureGallery1CreationTool());
		paletteContainer.add(createFigureDescriptor2CreationTool());
		paletteContainer.add(createRectangle3CreationTool());
		paletteContainer.add(createEllipse4CreationTool());
		paletteContainer.add(createRoundedRectangle5CreationTool());
		paletteContainer.add(createPolyline6CreationTool());
		paletteContainer.add(createPolylinePoint7CreationTool());
		paletteContainer.add(createPolygon8CreationTool());
		paletteContainer.add(createLabelFigure9CreationTool());
		return paletteContainer;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createNode1CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(1);
		types.add(GMFGraphElementTypes.Node_2006);
		NodeToolEntry entry = new NodeToolEntry(Messages.Node1CreationTool_title, Messages.Node1CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Node_2006));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createCompartment2CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(1);
		types.add(GMFGraphElementTypes.Compartment_2005);
		NodeToolEntry entry = new NodeToolEntry(Messages.Compartment2CreationTool_title, Messages.Compartment2CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Compartment_2005));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createConnection3CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(1);
		types.add(GMFGraphElementTypes.Connection_2007);
		NodeToolEntry entry = new NodeToolEntry(Messages.Connection3CreationTool_title, Messages.Connection3CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Connection_2007));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createFigureLink4CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(1);
		types.add(GMFGraphElementTypes.DiagramElementFigure_4005);
		LinkToolEntry entry = new LinkToolEntry(Messages.FigureLink4CreationTool_title, Messages.FigureLink4CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.DiagramElementFigure_4005));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createNestedFigureLink5CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(1);
		types.add(GMFGraphElementTypes.ChildAccess_4002);
		LinkToolEntry entry = new LinkToolEntry(Messages.NestedFigureLink5CreationTool_title, Messages.NestedFigureLink5CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.ChildAccess_4002));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createChildAccessLink6CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(3);
		types.add(GMFGraphElementTypes.CompartmentAccessor_4003);
		types.add(GMFGraphElementTypes.DiagramLabelAccessor_4004);
		types.add(GMFGraphElementTypes.NodeContentPane_4006);
		LinkToolEntry entry = new LinkToolEntry(Messages.ChildAccessLink6CreationTool_title, Messages.ChildAccessLink6CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.CompartmentAccessor_4003));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createLabel7CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(1);
		types.add(GMFGraphElementTypes.DiagramLabel_2009);
		NodeToolEntry entry = new NodeToolEntry(Messages.Label7CreationTool_title, Messages.Label7CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.DiagramLabel_2009));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createFigureGallery1CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(1);
		types.add(GMFGraphElementTypes.FigureGallery_2008);
		NodeToolEntry entry = new NodeToolEntry(Messages.FigureGallery1CreationTool_title, Messages.FigureGallery1CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.FigureGallery_2008));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createFigureDescriptor2CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(1);
		types.add(GMFGraphElementTypes.FigureDescriptor_3009);
		NodeToolEntry entry = new NodeToolEntry(Messages.FigureDescriptor2CreationTool_title, Messages.FigureDescriptor2CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.FigureDescriptor_3009));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createRectangle3CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(3);
		types.add(GMFGraphElementTypes.Rectangle_3010);
		types.add(GMFGraphElementTypes.Rectangle_3011);
		types.add(GMFGraphElementTypes.Rectangle_3018);
		NodeToolEntry entry = new NodeToolEntry(Messages.Rectangle3CreationTool_title, Messages.Rectangle3CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Rectangle_3010));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createEllipse4CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(3);
		types.add(GMFGraphElementTypes.Ellipse_3012);
		types.add(GMFGraphElementTypes.Ellipse_3015);
		types.add(GMFGraphElementTypes.Ellipse_3019);
		NodeToolEntry entry = new NodeToolEntry(Messages.Ellipse4CreationTool_title, Messages.Ellipse4CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Ellipse_3012));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createRoundedRectangle5CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(3);
		types.add(GMFGraphElementTypes.RoundedRectangle_3013);
		types.add(GMFGraphElementTypes.RoundedRectangle_3016);
		types.add(GMFGraphElementTypes.RoundedRectangle_3020);
		NodeToolEntry entry = new NodeToolEntry(Messages.RoundedRectangle5CreationTool_title, Messages.RoundedRectangle5CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.RoundedRectangle_3013));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createPolyline6CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(3);
		types.add(GMFGraphElementTypes.Polyline_3014);
		types.add(GMFGraphElementTypes.Polyline_3017);
		types.add(GMFGraphElementTypes.Polyline_3021);
		NodeToolEntry entry = new NodeToolEntry(Messages.Polyline6CreationTool_title, Messages.Polyline6CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Polyline_3014));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createPolylinePoint7CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(1);
		types.add(GMFGraphElementTypes.Point_3022);
		NodeToolEntry entry = new NodeToolEntry(Messages.PolylinePoint7CreationTool_title, Messages.PolylinePoint7CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Point_3022));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createPolygon8CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(3);
		types.add(GMFGraphElementTypes.Polygon_3023);
		types.add(GMFGraphElementTypes.Polygon_3024);
		types.add(GMFGraphElementTypes.Polygon_3025);
		NodeToolEntry entry = new NodeToolEntry(Messages.Polygon8CreationTool_title, Messages.Polygon8CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Polygon_3023));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createLabelFigure9CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(3);
		types.add(GMFGraphElementTypes.Label_3026);
		types.add(GMFGraphElementTypes.Label_3027);
		types.add(GMFGraphElementTypes.Label_3028);
		NodeToolEntry entry = new NodeToolEntry(Messages.LabelFigure9CreationTool_title, Messages.LabelFigure9CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Label_3026));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
	private static class NodeToolEntry extends ToolEntry {

		/**
		 * @@generated
		 */
		private final List elementTypes;

		/**
		 * @@generated
		 */
		private NodeToolEntry(String title, String description, List elementTypes) {
			super(title, description, null, null);
			this.elementTypes = elementTypes;
		}

		/**
		 * @@generated
		 */
		public Tool createTool() {
			Tool tool = new UnspecifiedTypeCreationTool(elementTypes);
			tool.setProperties(getToolProperties());
			return tool;
		}
	}

	/**
	 * @@generated
	 */
	private static class LinkToolEntry extends ToolEntry {

		/**
		 * @@generated
		 */
		private final List relationshipTypes;

		/**
		 * @@generated
		 */
		private LinkToolEntry(String title, String description, List relationshipTypes) {
			super(title, description, null, null);
			this.relationshipTypes = relationshipTypes;
		}

		/**
		 * @@generated
		 */
		public Tool createTool() {
			Tool tool = new UnspecifiedTypeConnectionTool(relationshipTypes);
			tool.setProperties(getToolProperties());
			return tool;
		}
	}
}
@


1.11
log
@[233206] - Support Polygon figure in .gmfgraph editor
@
text
@d51 1
d70 1
d151 12
d269 14
@


1.10
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d68 1
d241 14
@


1.9
log
@node content pane link to child accessor added.
@
text
@d67 1
d228 12
@


1.8
log
@Filling FigureGallery/Figure descriptor with proper layout.
@
text
@d62 5
a66 5
		paletteContainer.add(createRectangle2CreationTool());
		paletteContainer.add(createEllipse3CreationTool());
		paletteContainer.add(createRoundedRectangle4CreationTool());
		paletteContainer.add(createPolyline5CreationTool());
		paletteContainer.add(createFigureDescriptor6CreationTool());
d134 1
a134 1
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(2);
d137 1
d159 13
a171 1
	private ToolEntry createRectangle2CreationTool() {
d176 1
a176 1
		NodeToolEntry entry = new NodeToolEntry(Messages.Rectangle2CreationTool_title, Messages.Rectangle2CreationTool_desc, types);
d185 1
a185 1
	private ToolEntry createEllipse3CreationTool() {
d190 1
a190 1
		NodeToolEntry entry = new NodeToolEntry(Messages.Ellipse3CreationTool_title, Messages.Ellipse3CreationTool_desc, types);
d199 1
a199 1
	private ToolEntry createRoundedRectangle4CreationTool() {
d204 1
a204 1
		NodeToolEntry entry = new NodeToolEntry(Messages.RoundedRectangle4CreationTool_title, Messages.RoundedRectangle4CreationTool_desc, types);
d213 1
a213 1
	private ToolEntry createPolyline5CreationTool() {
d218 1
a218 1
		NodeToolEntry entry = new NodeToolEntry(Messages.Polyline5CreationTool_title, Messages.Polyline5CreationTool_desc, types);
a226 12
	private ToolEntry createFigureDescriptor6CreationTool() {
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(1);
		types.add(GMFGraphElementTypes.FigureDescriptor_3009);
		NodeToolEntry entry = new NodeToolEntry(Messages.FigureDescriptor6CreationTool_title, Messages.FigureDescriptor6CreationTool_desc, types);
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.FigureDescriptor_3009));
		entry.setLargeIcon(entry.getSmallIcon());
		return entry;
	}

	/**
	 * @@generated
	 */
@


1.7
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d46 5
a50 6
		paletteContainer.add(createChildNode2CreationTool());
		paletteContainer.add(createCompartment3CreationTool());
		paletteContainer.add(createConnection4CreationTool());
		paletteContainer.add(createFigureLink5CreationTool());
		paletteContainer.add(createNestedFigureLink6CreationTool());
		paletteContainer.add(createChildAccessLink7CreationTool());
d85 1
a85 10
	private ToolEntry createChildNode2CreationTool() {
		ToolEntry entry = new ToolEntry(Messages.ChildNode2CreationTool_title, Messages.ChildNode2CreationTool_desc, null, null) {
		};
		return entry;
	}

	/**
	 * @@generated
	 */
	private ToolEntry createCompartment3CreationTool() {
d88 1
a88 1
		NodeToolEntry entry = new NodeToolEntry(Messages.Compartment3CreationTool_title, Messages.Compartment3CreationTool_desc, types);
d97 1
a97 1
	private ToolEntry createConnection4CreationTool() {
d100 1
a100 1
		NodeToolEntry entry = new NodeToolEntry(Messages.Connection4CreationTool_title, Messages.Connection4CreationTool_desc, types);
d109 1
a109 1
	private ToolEntry createFigureLink5CreationTool() {
d112 1
a112 1
		LinkToolEntry entry = new LinkToolEntry(Messages.FigureLink5CreationTool_title, Messages.FigureLink5CreationTool_desc, types);
d121 1
a121 1
	private ToolEntry createNestedFigureLink6CreationTool() {
d124 1
a124 1
		LinkToolEntry entry = new LinkToolEntry(Messages.NestedFigureLink6CreationTool_title, Messages.NestedFigureLink6CreationTool_desc, types);
d133 1
a133 1
	private ToolEntry createChildAccessLink7CreationTool() {
d137 1
a137 1
		LinkToolEntry entry = new LinkToolEntry(Messages.ChildAccessLink7CreationTool_title, Messages.ChildAccessLink7CreationTool_desc, types);
@


1.6
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d3 7
a9 7
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d50 2
d67 1
d76 1
a76 1
		types.add(GMFGraphElementTypes.Node_2002);
d78 1
a78 1
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Node_2002));
d97 1
a97 1
		types.add(GMFGraphElementTypes.Compartment_2001);
d99 1
a99 1
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Compartment_2001));
d109 1
a109 1
		types.add(GMFGraphElementTypes.Connection_2003);
d111 1
a111 1
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Connection_2003));
d121 1
a121 1
		types.add(GMFGraphElementTypes.DiagramElementFigure_4001);
d123 26
a148 1
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.DiagramElementFigure_4001));
d158 1
a158 1
		types.add(GMFGraphElementTypes.FigureGallery_2004);
d160 1
a160 1
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.FigureGallery_2004));
d169 4
a172 3
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(2);
		types.add(GMFGraphElementTypes.Rectangle_3001);
		types.add(GMFGraphElementTypes.Rectangle_3002);
d174 1
a174 1
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Rectangle_3001));
d183 4
a186 3
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(2);
		types.add(GMFGraphElementTypes.Ellipse_3003);
		types.add(GMFGraphElementTypes.Ellipse_3006);
d188 1
a188 1
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Ellipse_3003));
d197 4
a200 3
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(2);
		types.add(GMFGraphElementTypes.RoundedRectangle_3004);
		types.add(GMFGraphElementTypes.RoundedRectangle_3007);
d202 1
a202 1
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.RoundedRectangle_3004));
d211 4
a214 3
		List/*<IElementType>*/types = new ArrayList/*<IElementType>*/(2);
		types.add(GMFGraphElementTypes.Polyline_3005);
		types.add(GMFGraphElementTypes.Polyline_3008);
d216 13
a228 1
		entry.setSmallIcon(GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Polyline_3005));
@


1.5
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
d13 1
d15 1
d18 1
a20 5
import org.eclipse.jface.resource.ImageDescriptor;
import java.util.ArrayList;

import org.eclipse.gef.palette.PaletteDrawer;

a21 1

d39 1
d43 2
a44 2
		PaletteContainer paletteContainer = new PaletteDrawer("Diagram Elements");
		paletteContainer.setDescription("Can visualize domain model elements");
d54 1
d58 2
a59 2
		PaletteContainer paletteContainer = new PaletteDrawer("Figures");
		paletteContainer.setDescription("Can be references by Diagram Elements");
d72 6
a77 12
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;

		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Node_2002);

		largeImage = smallImage;

		final List elementTypes = new ArrayList();
		elementTypes.add(GMFGraphElementTypes.Node_2002);
		ToolEntry result = new NodeToolEntry("Node", "Create Diagram Element representing Top-level diagram Node", smallImage, largeImage, elementTypes);

		return result;
d84 1
a84 8
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;

		smallImage = null;

		largeImage = smallImage;

		ToolEntry result = new ToolEntry("ChildNode", "Create Diagram Element representing Child diagram Node", smallImage, largeImage) {
d86 1
a86 2

		return result;
d93 6
a98 12
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;

		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Compartment_2001);

		largeImage = smallImage;

		final List elementTypes = new ArrayList();
		elementTypes.add(GMFGraphElementTypes.Compartment_2001);
		ToolEntry result = new NodeToolEntry("Compartment", "Create Diagram Element representing Children Compartment", smallImage, largeImage, elementTypes);

		return result;
d105 6
a110 12
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;

		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Connection_2003);

		largeImage = smallImage;

		final List elementTypes = new ArrayList();
		elementTypes.add(GMFGraphElementTypes.Connection_2003);
		ToolEntry result = new NodeToolEntry("Connection", "Create Diagram Element representing Connection", smallImage, largeImage, elementTypes);

		return result;
d117 6
a122 12
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;

		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.DiagramElementFigure_4001);

		largeImage = smallImage;

		final List relationshipTypes = new ArrayList();
		relationshipTypes.add(GMFGraphElementTypes.DiagramElementFigure_4001);
		ToolEntry result = new LinkToolEntry("Figure Link", "Link from the Diagram Element to the figure", smallImage, largeImage, relationshipTypes);

		return result;
d129 6
a134 12
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;

		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.FigureGallery_2004);

		largeImage = smallImage;

		final List elementTypes = new ArrayList();
		elementTypes.add(GMFGraphElementTypes.FigureGallery_2004);
		ToolEntry result = new NodeToolEntry("FigureGallery", "Create FigureGallery - physical container for figures", smallImage, largeImage, elementTypes);

		return result;
d141 7
a147 13
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;

		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Rectangle_3001);

		largeImage = smallImage;

		final List elementTypes = new ArrayList();
		elementTypes.add(GMFGraphElementTypes.Rectangle_3001);
		elementTypes.add(GMFGraphElementTypes.Rectangle_3002);
		ToolEntry result = new NodeToolEntry("Rectangle", "Create Rectangle", smallImage, largeImage, elementTypes);

		return result;
d154 7
a160 13
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;

		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Ellipse_3003);

		largeImage = smallImage;

		final List elementTypes = new ArrayList();
		elementTypes.add(GMFGraphElementTypes.Ellipse_3003);
		elementTypes.add(GMFGraphElementTypes.Ellipse_3006);
		ToolEntry result = new NodeToolEntry("Ellipse", "Create Ellipse", smallImage, largeImage, elementTypes);

		return result;
d167 7
a173 13
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;

		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.RoundedRectangle_3004);

		largeImage = smallImage;

		final List elementTypes = new ArrayList();
		elementTypes.add(GMFGraphElementTypes.RoundedRectangle_3004);
		elementTypes.add(GMFGraphElementTypes.RoundedRectangle_3007);
		ToolEntry result = new NodeToolEntry("Rounded Rectangle", "Create Rounded Rectangle", smallImage, largeImage, elementTypes);

		return result;
d180 7
a186 13
		ImageDescriptor smallImage;
		ImageDescriptor largeImage;

		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Polyline_3005);

		largeImage = smallImage;

		final List elementTypes = new ArrayList();
		elementTypes.add(GMFGraphElementTypes.Polyline_3005);
		elementTypes.add(GMFGraphElementTypes.Polyline_3008);
		ToolEntry result = new NodeToolEntry("Polyline", "Create new PolylineConnection", smallImage, largeImage, elementTypes);

		return result;
d202 2
a203 2
		private NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List elementTypes) {
			super(title, description, smallIcon, largeIcon);
d230 2
a231 2
		private LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List relationshipTypes) {
			super(title, description, smallIcon, largeIcon);
@


1.4
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
@


1.3
log
@Updating with new templates
@
text
@d1 10
d76 1
a76 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Node_1002);
d81 1
a81 1
		elementTypes.add(GMFGraphElementTypes.Node_1002);
d111 1
a111 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Compartment_1001);
d116 1
a116 1
		elementTypes.add(GMFGraphElementTypes.Compartment_1001);
d129 1
a129 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Connection_1003);
d134 1
a134 1
		elementTypes.add(GMFGraphElementTypes.Connection_1003);
d147 1
a147 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.DiagramElementFigure_3001);
d152 1
a152 1
		relationshipTypes.add(GMFGraphElementTypes.DiagramElementFigure_3001);
d165 1
a165 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.FigureGallery_1004);
d170 1
a170 1
		elementTypes.add(GMFGraphElementTypes.FigureGallery_1004);
d183 1
a183 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Rectangle_2001);
d188 2
a189 2
		elementTypes.add(GMFGraphElementTypes.Rectangle_2001);
		elementTypes.add(GMFGraphElementTypes.Rectangle_2002);
d202 1
a202 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Ellipse_2003);
d207 2
a208 2
		elementTypes.add(GMFGraphElementTypes.Ellipse_2003);
		elementTypes.add(GMFGraphElementTypes.Ellipse_2006);
d221 1
a221 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.RoundedRectangle_2004);
d226 2
a227 2
		elementTypes.add(GMFGraphElementTypes.RoundedRectangle_2004);
		elementTypes.add(GMFGraphElementTypes.RoundedRectangle_2007);
d240 1
a240 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Polyline_2005);
d245 2
a246 2
		elementTypes.add(GMFGraphElementTypes.Polyline_2005);
		elementTypes.add(GMFGraphElementTypes.Polyline_2008);
@


1.2
log
@Updating with latest changes in templates + palette.
@
text
@d3 1
a9 1
import java.util.List;
d247 3
d275 3
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@a4 1
import org.eclipse.gef.palette.PaletteDrawer;
d11 1
a11 1
import org.eclipse.gef.palette.PaletteSeparator;
d35 7
a41 6
		PaletteContainer paletteContainer = createContainer("Diagram Elements");
		paletteContainer.add(createCompartment1001CreationTool());
		paletteContainer.add(createNode1002CreationTool());
		paletteContainer.add(createConnection1003CreationTool());
		paletteContainer.add(new PaletteSeparator());
		paletteContainer.add(createFigureLink2001CreationTool());
d49 7
a55 6
		PaletteContainer paletteContainer = createContainer("Figures");
		paletteContainer.add(createFigureGallery1004CreationTool());
		paletteContainer.add(createRectangle1005CreationTool());
		paletteContainer.add(createEllipse1006CreationTool());
		paletteContainer.add(createRoundedRectangle1007CreationTool());
		paletteContainer.add(createPolyline1008CreationTool());
d62 1
a62 1
	private ToolEntry createCompartment1001CreationTool() {
d66 1
a66 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Compartment_1001);
d71 16
a86 2
		elementTypes.add(GMFGraphElementTypes.Compartment_1001);
		return new ToolEntry("Compartment", "Create Diagram Element representing Children Compartment", smallImage, largeImage) {
d88 1
a88 5
			public Tool createTool() {
				Tool tool = new UnspecifiedTypeCreationTool(elementTypes);
				tool.setProperties(getToolProperties());
				return tool;
			}
d90 2
d97 1
a97 1
	private ToolEntry createNode1002CreationTool() {
d101 1
a101 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Node_1002);
d106 2
a107 2
		elementTypes.add(GMFGraphElementTypes.Node_1002);
		return new ToolEntry("Node", "Create Diagram Element representing Top-level diagram Node", smallImage, largeImage) {
d109 1
a109 6
			public Tool createTool() {
				Tool tool = new UnspecifiedTypeCreationTool(elementTypes);
				tool.setProperties(getToolProperties());
				return tool;
			}
		};
d115 1
a115 1
	private ToolEntry createConnection1003CreationTool() {
d125 1
a125 1
		return new ToolEntry("Connection", "Create Diagram Element representing Connection", smallImage, largeImage) {
d127 1
a127 6
			public Tool createTool() {
				Tool tool = new UnspecifiedTypeCreationTool(elementTypes);
				tool.setProperties(getToolProperties());
				return tool;
			}
		};
d133 1
a133 1
	private ToolEntry createFigureLink2001CreationTool() {
d143 1
a143 1
		return new ToolEntry("Figure Link", "Link from the Diagram Element to the figure", smallImage, largeImage) {
d145 1
a145 6
			public Tool createTool() {
				Tool tool = new UnspecifiedTypeConnectionTool(relationshipTypes);
				tool.setProperties(getToolProperties());
				return tool;
			}
		};
d151 1
a151 1
	private ToolEntry createFigureGallery1004CreationTool() {
d161 1
a161 1
		return new ToolEntry("FigureGallery", "Create FigureGallery - physical container for figures", smallImage, largeImage) {
d163 1
a163 6
			public Tool createTool() {
				Tool tool = new UnspecifiedTypeCreationTool(elementTypes);
				tool.setProperties(getToolProperties());
				return tool;
			}
		};
d169 1
a169 1
	private ToolEntry createRectangle1005CreationTool() {
d180 1
a180 1
		return new ToolEntry("Rectangle", "Create Rectangle", smallImage, largeImage) {
d182 1
a182 6
			public Tool createTool() {
				Tool tool = new UnspecifiedTypeCreationTool(elementTypes);
				tool.setProperties(getToolProperties());
				return tool;
			}
		};
d188 1
a188 1
	private ToolEntry createEllipse1006CreationTool() {
d192 1
a192 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Ellipse_2006);
d197 1
d199 1
a199 2
		elementTypes.add(GMFGraphElementTypes.Ellipse_2003);
		return new ToolEntry("Ellipse", "Create Ellipse", smallImage, largeImage) {
d201 1
a201 6
			public Tool createTool() {
				Tool tool = new UnspecifiedTypeCreationTool(elementTypes);
				tool.setProperties(getToolProperties());
				return tool;
			}
		};
d207 1
a207 1
	private ToolEntry createRoundedRectangle1007CreationTool() {
d211 1
a211 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.RoundedRectangle_2007);
d216 1
d218 1
a218 2
		elementTypes.add(GMFGraphElementTypes.RoundedRectangle_2004);
		return new ToolEntry("Rounded Rectangle", "Create Rounded Rectangle", smallImage, largeImage) {
d220 1
a220 6
			public Tool createTool() {
				Tool tool = new UnspecifiedTypeCreationTool(elementTypes);
				tool.setProperties(getToolProperties());
				return tool;
			}
		};
d226 1
a226 1
	private ToolEntry createPolyline1008CreationTool() {
d230 1
a230 1
		smallImage = GMFGraphElementTypes.getImageDescriptor(GMFGraphElementTypes.Polyline_2008);
d235 1
d237 1
a237 2
		elementTypes.add(GMFGraphElementTypes.Polyline_2005);
		return new ToolEntry("Polyline", "Create new PolylineConnection", smallImage, largeImage) {
d239 1
a239 6
			public Tool createTool() {
				Tool tool = new UnspecifiedTypeCreationTool(elementTypes);
				tool.setProperties(getToolProperties());
				return tool;
			}
		};
d245 20
a264 2
	private PaletteContainer createContainer(String title) {
		return new PaletteDrawer(title);
d267 24
@

