head	1.4;
access;
symbols
	v20080722-1827:1.4
	v20080718-1700:1.4
	v20080718-1731:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080610-1132:1.4
	v20080603-1553:1.4
	v20080528-1052:1.4
	v20080521:1.4
	v20080516-1143:1.4
	v20080512-1200:1.4
	v20080510-0100:1.4
	v20080507-1326:1.4
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080411-0411:1.4
	v20080404-1111:1.4
	v20080322-0000:1.4
	v20080114-2222:1.3
	v20071214-1111:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070520-1200:1.2
	v20070420-1000:1.2
	v20070405-2000:1.1
	v20070405-1100:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2008.03.07.11.35.53;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	5ab247d128944567;

1.3
date	2007.05.31.15.52.30;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	49f1465eef2c4567;

1.2
date	2007.04.16.11.03.53;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	7e4e462358154567;

1.1
date	2007.04.04.20.23.27;	author atikhomirov;	state Exp;
branches;
next	;
commitid	ade461409204567;


desc
@@


1.4
log
@Migrating to new templates from .codegen plugin.
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.commands;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.gmfgraph.DiagramElement;
import org.eclipse.gmf.gmfgraph.FigureDescriptor;
import org.eclipse.gmf.graphdef.editor.edit.policies.GMFGraphBaseItemSemanticEditPolicy;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.emf.type.core.commands.EditElementCommand;
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;

/**
 * @@generated
 */
public class DiagramElementFigureReorientCommand extends EditElementCommand {

	/**
	 * @@generated
	 */
	private final int reorientDirection;

	/**
	 * @@generated
	 */
	private final EObject referenceOwner;

	/**
	 * @@generated
	 */
	private final EObject oldEnd;

	/**
	 * @@generated
	 */
	private final EObject newEnd;

	/**
	 * @@generated
	 */
	public DiagramElementFigureReorientCommand(ReorientReferenceRelationshipRequest request) {
		super(request.getLabel(), null, request);
		reorientDirection = request.getDirection();
		referenceOwner = request.getReferenceOwner();
		oldEnd = request.getOldRelationshipEnd();
		newEnd = request.getNewRelationshipEnd();
	}

	/**
	 * @@generated
	 */
	public boolean canExecute() {
		if (false == referenceOwner instanceof DiagramElement) {
			return false;
		}
		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
			return canReorientSource();
		}
		if (reorientDirection == ReorientRelationshipRequest.REORIENT_TARGET) {
			return canReorientTarget();
		}
		return false;
	}

	/**
	 * @@generated
	 */
	protected boolean canReorientSource() {
		if (!(oldEnd instanceof FigureDescriptor && newEnd instanceof DiagramElement)) {
			return false;
		}
		return GMFGraphBaseItemSemanticEditPolicy.LinkConstraints.canExistDiagramElementFigure_4005(getNewSource(), getOldTarget());
	}

	/**
	 * @@generated
	 */
	protected boolean canReorientTarget() {
		if (!(oldEnd instanceof FigureDescriptor && newEnd instanceof FigureDescriptor)) {
			return false;
		}
		return GMFGraphBaseItemSemanticEditPolicy.LinkConstraints.canExistDiagramElementFigure_4005(getOldSource(), getNewTarget());
	}

	/**
	 * @@generated
	 */
	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
		if (!canExecute()) {
			throw new ExecutionException("Invalid arguments in reorient link command"); //$NON-NLS-1$
		}
		if (reorientDirection == ReorientRelationshipRequest.REORIENT_SOURCE) {
			return reorientSource();
		}
		if (reorientDirection == ReorientRelationshipRequest.REORIENT_TARGET) {
			return reorientTarget();
		}
		throw new IllegalStateException();
	}

	/**
	 * @@generated
	 */
	protected CommandResult reorientSource() throws ExecutionException {
		getOldSource().setFigure(null);
		getNewSource().setFigure(getOldTarget());
		return CommandResult.newOKCommandResult(referenceOwner);
	}

	/**
	 * @@generated
	 */
	protected CommandResult reorientTarget() throws ExecutionException {
		getOldSource().setFigure(getNewTarget());
		return CommandResult.newOKCommandResult(referenceOwner);
	}

	/**
	 * @@generated
	 */
	protected DiagramElement getOldSource() {
		return (DiagramElement) referenceOwner;
	}

	/**
	 * @@generated
	 */
	protected DiagramElement getNewSource() {
		return (DiagramElement) newEnd;
	}

	/**
	 * @@generated
	 */
	protected FigureDescriptor getOldTarget() {
		return (FigureDescriptor) oldEnd;
	}

	/**
	 * @@generated
	 */
	protected FigureDescriptor getNewTarget() {
		return (FigureDescriptor) newEnd;
	}
}
@


1.3
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d65 1
a65 1
		if (!(referenceOwner instanceof DiagramElement)) {
@


1.2
log
@[182339] akarjakina - provide different means to select parts of composite figures
Visible insets for top-level figures, custom popup action with nested submenus, simple handles behavior
@
text
@d3 7
a9 7
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d18 1
a18 1
import org.eclipse.gmf.gmfgraph.FigureHandle;
d81 1
a81 1
		if (!(oldEnd instanceof FigureHandle && newEnd instanceof DiagramElement)) {
d84 1
a84 1
		return GMFGraphBaseItemSemanticEditPolicy.LinkConstraints.canExistDiagramElementFigure_4001(getNewSource(), getOldTarget());
d91 1
a91 1
		if (!(oldEnd instanceof FigureHandle && newEnd instanceof FigureHandle)) {
d94 1
a94 1
		return GMFGraphBaseItemSemanticEditPolicy.LinkConstraints.canExistDiagramElementFigure_4001(getOldSource(), getNewTarget());
d147 2
a148 2
	protected FigureHandle getOldTarget() {
		return (FigureHandle) oldEnd;
d154 2
a155 2
	protected FigureHandle getNewTarget() {
		return (FigureHandle) newEnd;
@


1.1
log
@[173499] akarjakina - Enhance graphdef.editor with properties - use custom model to describe property sheet and generate PropertyTab code from that model
@
text
@d19 1
d69 1
a69 1
			return oldEnd instanceof FigureHandle && newEnd instanceof DiagramElement;
d72 1
a72 1
			return oldEnd instanceof FigureHandle && newEnd instanceof FigureHandle;
d80 20
d116 5
a120 4
	private CommandResult reorientSource() throws ExecutionException {
		DiagramElement oldSource = (DiagramElement) referenceOwner;
		DiagramElement newSource = (DiagramElement) newEnd;
		FigureHandle target = (FigureHandle) oldEnd;
d122 5
a126 2
		oldSource.setFigure(null);
		newSource.setFigure(target);
d133 3
a135 4
	private CommandResult reorientTarget() throws ExecutionException {
		DiagramElement source = (DiagramElement) referenceOwner;
		FigureHandle oldTarget = (FigureHandle) oldEnd;
		FigureHandle newTarget = (FigureHandle) newEnd;
d137 19
a155 2
		source.setFigure(newTarget);
		return CommandResult.newOKCommandResult(referenceOwner);
@

