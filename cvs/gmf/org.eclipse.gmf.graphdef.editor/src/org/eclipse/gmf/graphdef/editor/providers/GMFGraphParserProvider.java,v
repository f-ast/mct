head	1.13;
access;
symbols
	v20080722-1827:1.13
	v20080718-1700:1.12
	v20080718-1731:1.13
	v20080716-1642:1.13
	R2_1_maintenance:1.12.0.4
	Root_R2_1_maintenance:1.12
	R2_1_0:1.12
	v20080610-1132:1.12
	v20080603-1553:1.12
	v20080528-1052:1.12
	v20080521:1.12
	v20080516-1143:1.12
	v20080512-1200:1.12
	v20080510-0100:1.12
	v20080507-1326:1.12
	v20080501-1739:1.12
	v20080425-1959:1.12
	v20080411-0411:1.12
	v20080404-1111:1.12
	v20080322-0000:1.12
	v20080114-2222:1.12
	v20071214-1111:1.12
	v20070809-0000:1.12
	R2_0_maintenance:1.12.0.2
	R2_0:1.12
	R4_20:1.12
	v20070621-0000:1.12
	RC3_20:1.12
	v20070605-1400:1.12
	v20070601-1400:1.12
	v20070520-1200:1.11
	v20070420-1000:1.11
	v20070405-2000:1.11
	v20070405-1100:1.11
	v20070330-1300:1.10
	v20070307-0700:1.10
	v20070221-1500:1.10
	v20070208-1800:1.9
	M4_20:1.9
	v20061214-0000:1.9
	M3_20:1.9
	v20061013-1330:1.9
	M1_20:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060616-1200:1.9
	v20060609-1400:1.9
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.6
	v20060519-0800:1.5
	v20060512-1000:1.4
	I20060512-1000:1.4
	RC2_10:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2008.07.02.15.20.47;	author ashatalin;	state Exp;
branches;
next	1.12;
commitid	703486b9cc54567;

1.12
date	2007.05.31.15.52.32;	author ashatalin;	state Exp;
branches;
next	1.11;
commitid	49f1465eef2c4567;

1.11
date	2007.04.04.20.23.26;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	ade461409204567;

1.10
date	2007.02.09.20.08.31;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	179c45ccd4b34567;

1.9
date	2006.06.08.08.40.35;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.02.15.08.30;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.30.13.06.14;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.22.17.37.30;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.15.17.21.14;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.11.16.02.55;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.20.21.24.24;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.20.37.00;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.27;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.13
log
@[233207] - Support Label figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.providers;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelText2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelText3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelTextEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeNameEditPart;
import org.eclipse.gmf.graphdef.editor.parsers.CompositeParser;
import org.eclipse.gmf.graphdef.editor.parsers.MessageFormatParser;
import org.eclipse.gmf.graphdef.editor.parsers.RegexpParser;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParserProvider;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class GMFGraphParserProvider extends AbstractProvider implements IParserProvider {

	/**
	 * @@generated
	 */
	private IParser compartmentName_5005Parser;

	/**
	 * @@generated
	 */
	private IParser getCompartmentName_5005Parser() {
		if (compartmentName_5005Parser == null) {
			compartmentName_5005Parser = createCompartmentName_5005Parser();
		}
		return compartmentName_5005Parser;
	}

	/**
	 * @@generated
	 */
	protected IParser createCompartmentName_5005Parser() {
		EAttribute[] features = new EAttribute[] { GMFGraphPackage.eINSTANCE.getIdentity_Name(), };
		MessageFormatParser parser = new MessageFormatParser(features);
		return parser;
	}

	/**
	 * @@generated
	 */
	private IParser nodeName_5006Parser;

	/**
	 * @@generated
	 */
	private IParser getNodeName_5006Parser() {
		if (nodeName_5006Parser == null) {
			nodeName_5006Parser = createNodeName_5006Parser();
		}
		return nodeName_5006Parser;
	}

	/**
	 * @@generated
	 */
	protected IParser createNodeName_5006Parser() {
		EAttribute[] features = new EAttribute[] { GMFGraphPackage.eINSTANCE.getIdentity_Name(), };
		MessageFormatParser parser = new MessageFormatParser(features);
		return parser;
	}

	/**
	 * @@generated
	 */
	private IParser connectionName_5007Parser;

	/**
	 * @@generated
	 */
	private IParser getConnectionName_5007Parser() {
		if (connectionName_5007Parser == null) {
			connectionName_5007Parser = createConnectionName_5007Parser();
		}
		return connectionName_5007Parser;
	}

	/**
	 * @@generated
	 */
	protected IParser createConnectionName_5007Parser() {
		EAttribute[] features = new EAttribute[] { GMFGraphPackage.eINSTANCE.getIdentity_Name(), };
		MessageFormatParser parser = new MessageFormatParser(features);
		return parser;
	}

	/**
	 * @@generated
	 */
	private IParser figureGalleryName_5009Parser;

	/**
	 * @@generated
	 */
	private IParser getFigureGalleryName_5009Parser() {
		if (figureGalleryName_5009Parser == null) {
			figureGalleryName_5009Parser = createFigureGalleryName_5009Parser();
		}
		return figureGalleryName_5009Parser;
	}

	/**
	 * @@generated
	 */
	protected IParser createFigureGalleryName_5009Parser() {
		EAttribute[] features = new EAttribute[] { GMFGraphPackage.eINSTANCE.getIdentity_Name(), };
		MessageFormatParser parser = new MessageFormatParser(features);
		return parser;
	}

	/**
	 * @@generated
	 */
	private IParser diagramLabelName_5013Parser;

	/**
	 * @@generated
	 */
	private IParser getDiagramLabelName_5013Parser() {
		if (diagramLabelName_5013Parser == null) {
			diagramLabelName_5013Parser = createDiagramLabelName_5013Parser();
		}
		return diagramLabelName_5013Parser;
	}

	/**
	 * @@generated
	 */
	protected IParser createDiagramLabelName_5013Parser() {
		EAttribute[] features = new EAttribute[] { GMFGraphPackage.eINSTANCE.getIdentity_Name(), };
		MessageFormatParser parser = new MessageFormatParser(features);
		return parser;
	}

	/**
	 * @@generated
	 */
	private IParser figureDescriptorName_5008Parser;

	/**
	 * @@generated
	 */
	private IParser getFigureDescriptorName_5008Parser() {
		if (figureDescriptorName_5008Parser == null) {
			figureDescriptorName_5008Parser = createFigureDescriptorName_5008Parser();
		}
		return figureDescriptorName_5008Parser;
	}

	/**
	 * @@generated
	 */
	protected IParser createFigureDescriptorName_5008Parser() {
		EAttribute[] features = new EAttribute[] { GMFGraphPackage.eINSTANCE.getIdentity_Name(), };
		MessageFormatParser parser = new MessageFormatParser(features);
		return parser;
	}

	/**
	 * @@generated
	 */
	private IParser labelText_5010Parser;

	/**
	 * @@generated
	 */
	private IParser getLabelText_5010Parser() {
		if (labelText_5010Parser == null) {
			labelText_5010Parser = createLabelText_5010Parser();
		}
		return labelText_5010Parser;
	}

	/**
	 * @@generated
	 */
	protected IParser createLabelText_5010Parser() {
		EAttribute[] features = new EAttribute[] { GMFGraphPackage.eINSTANCE.getLabel_Text(), };
		MessageFormatParser parser = new MessageFormatParser(features);
		return parser;
	}

	/**
	 * @@generated
	 */
	private IParser labelText_5011Parser;

	/**
	 * @@generated
	 */
	private IParser getLabelText_5011Parser() {
		if (labelText_5011Parser == null) {
			labelText_5011Parser = createLabelText_5011Parser();
		}
		return labelText_5011Parser;
	}

	/**
	 * @@generated
	 */
	protected IParser createLabelText_5011Parser() {
		EAttribute[] features = new EAttribute[] { GMFGraphPackage.eINSTANCE.getLabel_Text(), };
		MessageFormatParser parser = new MessageFormatParser(features);
		return parser;
	}

	/**
	 * @@generated
	 */
	private IParser labelText_5012Parser;

	/**
	 * @@generated
	 */
	private IParser getLabelText_5012Parser() {
		if (labelText_5012Parser == null) {
			labelText_5012Parser = createLabelText_5012Parser();
		}
		return labelText_5012Parser;
	}

	/**
	 * @@generated
	 */
	protected IParser createLabelText_5012Parser() {
		EAttribute[] features = new EAttribute[] { GMFGraphPackage.eINSTANCE.getLabel_Text(), };
		MessageFormatParser parser = new MessageFormatParser(features);
		return parser;
	}

	/**
	 * @@generated
	 */
	protected IParser getParser(int visualID) {
		switch (visualID) {
		case CompartmentNameEditPart.VISUAL_ID:
			return getCompartmentName_5005Parser();
		case NodeNameEditPart.VISUAL_ID:
			return getNodeName_5006Parser();
		case ConnectionNameEditPart.VISUAL_ID:
			return getConnectionName_5007Parser();
		case FigureGalleryNameEditPart.VISUAL_ID:
			return getFigureGalleryName_5009Parser();
		case DiagramLabelNameEditPart.VISUAL_ID:
			return getDiagramLabelName_5013Parser();
		case FigureDescriptorNameEditPart.VISUAL_ID:
			return getFigureDescriptorName_5008Parser();
		case LabelTextEditPart.VISUAL_ID:
			return getLabelText_5010Parser();
		case LabelText2EditPart.VISUAL_ID:
			return getLabelText_5011Parser();
		case LabelText3EditPart.VISUAL_ID:
			return getLabelText_5012Parser();
		}
		return null;
	}

	/**
	 * @@generated
	 */
	public IParser getParser(IAdaptable hint) {
		String vid = (String) hint.getAdapter(String.class);
		if (vid != null) {
			return getParser(GMFGraphVisualIDRegistry.getVisualID(vid));
		}
		View view = (View) hint.getAdapter(View.class);
		if (view != null) {
			return getParser(GMFGraphVisualIDRegistry.getVisualID(view));
		}
		return null;
	}

	/**
	 * @@generated
	 */
	public boolean provides(IOperation operation) {
		if (operation instanceof GetParserOperation) {
			IAdaptable hint = ((GetParserOperation) operation).getHint();
			if (GMFGraphElementTypes.getElement(hint) == null) {
				return false;
			}
			return getParser(hint) != null;
		}
		return false;
	}

	/**
	 * @@generated
	 */
	public static class HintAdapter extends ParserHintAdapter {

		/**
		 * @@generated
		 */
		private final IElementType elementType;

		/**
		 * @@generated
		 */
		public HintAdapter(IElementType type, EObject object, String parserHint) {
			super(object, parserHint);
			assert type != null;
			elementType = type;
		}

		/**
		 * @@generated
		 */
		public Object getAdapter(Class adapter) {
			if (IElementType.class.equals(adapter)) {
				return elementType;
			}
			return super.getAdapter(adapter);
		}
	}

}
@


1.12
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d19 1
d22 3
d26 1
d28 1
d143 24
d191 72
d273 2
d277 6
@


1.11
log
@[173499] akarjakina - Enhance graphdef.editor with properties - use custom model to describe property sheet and generate PropertyTab code from that model
@
text
@d2 8
a9 8
 * Copyright (c) 2006, 2007 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d14 10
d29 2
a31 8
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeNameEditPart;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
d41 1
a41 1
	private IParser compartmentCompartmentName_5001Parser;
d46 3
a48 3
	private IParser getCompartmentCompartmentName_5001Parser() {
		if (compartmentCompartmentName_5001Parser == null) {
			compartmentCompartmentName_5001Parser = createCompartmentCompartmentName_5001Parser();
d50 1
a50 1
		return compartmentCompartmentName_5001Parser;
d56 3
a58 4
	protected IParser createCompartmentCompartmentName_5001Parser() {
		GMFGraphStructuralFeatureParser parser = new GMFGraphStructuralFeatureParser(GMFGraphPackage.eINSTANCE.getIdentity_Name());
		parser.setViewPattern("{0}");
		parser.setEditPattern("{0}");
d65 1
a65 1
	private IParser nodeNodeName_5002Parser;
d70 3
a72 3
	private IParser getNodeNodeName_5002Parser() {
		if (nodeNodeName_5002Parser == null) {
			nodeNodeName_5002Parser = createNodeNodeName_5002Parser();
d74 1
a74 1
		return nodeNodeName_5002Parser;
d80 3
a82 4
	protected IParser createNodeNodeName_5002Parser() {
		GMFGraphStructuralFeatureParser parser = new GMFGraphStructuralFeatureParser(GMFGraphPackage.eINSTANCE.getIdentity_Name());
		parser.setViewPattern("{0}");
		parser.setEditPattern("{0}");
d89 1
a89 1
	private IParser connectionConnectionName_5003Parser;
d94 3
a96 3
	private IParser getConnectionConnectionName_5003Parser() {
		if (connectionConnectionName_5003Parser == null) {
			connectionConnectionName_5003Parser = createConnectionConnectionName_5003Parser();
d98 1
a98 1
		return connectionConnectionName_5003Parser;
d104 3
a106 4
	protected IParser createConnectionConnectionName_5003Parser() {
		GMFGraphStructuralFeatureParser parser = new GMFGraphStructuralFeatureParser(GMFGraphPackage.eINSTANCE.getIdentity_Name());
		parser.setViewPattern("{0}");
		parser.setEditPattern("{0}");
d113 1
a113 1
	private IParser figureGalleryFigureGalleryName_5004Parser;
d118 3
a120 3
	private IParser getFigureGalleryFigureGalleryName_5004Parser() {
		if (figureGalleryFigureGalleryName_5004Parser == null) {
			figureGalleryFigureGalleryName_5004Parser = createFigureGalleryFigureGalleryName_5004Parser();
d122 1
a122 1
		return figureGalleryFigureGalleryName_5004Parser;
d128 27
a154 4
	protected IParser createFigureGalleryFigureGalleryName_5004Parser() {
		GMFGraphStructuralFeatureParser parser = new GMFGraphStructuralFeatureParser(GMFGraphPackage.eINSTANCE.getIdentity_Name());
		parser.setViewPattern("{0}");
		parser.setEditPattern("{0}");
d164 1
a164 1
			return getCompartmentCompartmentName_5001Parser();
d166 1
a166 1
			return getNodeNodeName_5002Parser();
d168 1
a168 1
			return getConnectionConnectionName_5003Parser();
d170 3
a172 1
			return getFigureGalleryFigureGalleryName_5004Parser();
d205 31
@


1.10
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d54 2
d79 2
d104 2
d129 2
@


1.9
log
@Updating with new templates.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
d53 1
a53 1
		GMFGraphStructuralFeatureParser parser = new GMFGraphStructuralFeatureParser(GMFGraphPackage.eINSTANCE.getIdentity().getEStructuralFeature("name")); //$NON-NLS-1$
d76 1
a76 1
		GMFGraphStructuralFeatureParser parser = new GMFGraphStructuralFeatureParser(GMFGraphPackage.eINSTANCE.getIdentity().getEStructuralFeature("name")); //$NON-NLS-1$
d99 1
a99 1
		GMFGraphStructuralFeatureParser parser = new GMFGraphStructuralFeatureParser(GMFGraphPackage.eINSTANCE.getIdentity().getEStructuralFeature("name")); //$NON-NLS-1$
d122 1
a122 1
		GMFGraphStructuralFeatureParser parser = new GMFGraphStructuralFeatureParser(GMFGraphPackage.eINSTANCE.getIdentity().getEStructuralFeature("name")); //$NON-NLS-1$
@


1.8
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d22 4
a25 4
import org.eclipse.gmf.graphdef.editor.edit.parts.Compartment_nameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Connection_nameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGallery_nameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Node_nameEditPart;
d131 1
a131 1
		case Compartment_nameEditPart.VISUAL_ID:
d133 1
a133 1
		case Node_nameEditPart.VISUAL_ID:
d135 1
a135 1
		case Connection_nameEditPart.VISUAL_ID:
d137 1
a137 1
		case FigureGallery_nameEditPart.VISUAL_ID:
@


1.7
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
d53 1
a53 1
		GMFGraphStructuralFeatureParser parser = new GMFGraphStructuralFeatureParser(GMFGraphPackage.eINSTANCE.getIdentity().getEStructuralFeature("name"));
d76 1
a76 1
		GMFGraphStructuralFeatureParser parser = new GMFGraphStructuralFeatureParser(GMFGraphPackage.eINSTANCE.getIdentity().getEStructuralFeature("name"));
d99 1
a99 1
		GMFGraphStructuralFeatureParser parser = new GMFGraphStructuralFeatureParser(GMFGraphPackage.eINSTANCE.getIdentity().getEStructuralFeature("name"));
d122 1
a122 1
		GMFGraphStructuralFeatureParser parser = new GMFGraphStructuralFeatureParser(GMFGraphPackage.eINSTANCE.getIdentity().getEStructuralFeature("name"));
@


1.6
log
@Updating with new templates
@
text
@d1 10
d37 1
a37 1
	private IParser compartmentCompartmentName_4001Parser;
d42 3
a44 3
	private IParser getCompartmentCompartmentName_4001Parser() {
		if (compartmentCompartmentName_4001Parser == null) {
			compartmentCompartmentName_4001Parser = createCompartmentCompartmentName_4001Parser();
d46 1
a46 1
		return compartmentCompartmentName_4001Parser;
d52 1
a52 1
	protected IParser createCompartmentCompartmentName_4001Parser() {
d60 1
a60 1
	private IParser nodeNodeName_4002Parser;
d65 3
a67 3
	private IParser getNodeNodeName_4002Parser() {
		if (nodeNodeName_4002Parser == null) {
			nodeNodeName_4002Parser = createNodeNodeName_4002Parser();
d69 1
a69 1
		return nodeNodeName_4002Parser;
d75 1
a75 1
	protected IParser createNodeNodeName_4002Parser() {
d83 1
a83 1
	private IParser connectionConnectionName_4003Parser;
d88 3
a90 3
	private IParser getConnectionConnectionName_4003Parser() {
		if (connectionConnectionName_4003Parser == null) {
			connectionConnectionName_4003Parser = createConnectionConnectionName_4003Parser();
d92 1
a92 1
		return connectionConnectionName_4003Parser;
d98 1
a98 1
	protected IParser createConnectionConnectionName_4003Parser() {
d106 1
a106 1
	private IParser figureGalleryFigureGalleryName_4004Parser;
d111 3
a113 3
	private IParser getFigureGalleryFigureGalleryName_4004Parser() {
		if (figureGalleryFigureGalleryName_4004Parser == null) {
			figureGalleryFigureGalleryName_4004Parser = createFigureGalleryFigureGalleryName_4004Parser();
d115 1
a115 1
		return figureGalleryFigureGalleryName_4004Parser;
d121 1
a121 1
	protected IParser createFigureGalleryFigureGalleryName_4004Parser() {
d132 1
a132 1
			return getCompartmentCompartmentName_4001Parser();
d134 1
a134 1
			return getNodeNodeName_4002Parser();
d136 1
a136 1
			return getConnectionConnectionName_4003Parser();
d138 1
a138 1
			return getFigureGalleryFigureGalleryName_4004Parser();
@


1.5
log
@Updating with latest templates
@
text
@d4 6
d11 1
d16 1
a17 6
import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParserProvider;
import org.eclipse.gmf.runtime.notation.View;
@


1.4
log
@Updating with new templates
@
text
@d151 5
a155 1
			return getParser(((GetParserOperation) operation).getHint()) != null;
@


1.3
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@a3 8
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParserProvider;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
a4 1

a8 1

d10 6
d117 10
a126 20
	protected IParser getParser(IElementType type, int visualID) {
		if (GMFGraphElementTypes.Compartment_1001 == type) {
			if (Compartment_nameEditPart.VISUAL_ID == visualID) {
				return getCompartmentCompartmentName_4001Parser();
			}
		}
		if (GMFGraphElementTypes.Node_1002 == type) {
			if (Node_nameEditPart.VISUAL_ID == visualID) {
				return getNodeNodeName_4002Parser();
			}
		}
		if (GMFGraphElementTypes.Connection_1003 == type) {
			if (Connection_nameEditPart.VISUAL_ID == visualID) {
				return getConnectionConnectionName_4003Parser();
			}
		}
		if (GMFGraphElementTypes.FigureGallery_1004 == type) {
			if (FigureGallery_nameEditPart.VISUAL_ID == visualID) {
				return getFigureGalleryFigureGalleryName_4004Parser();
			}
d135 7
a141 5
		int visualID = GMFGraphVisualIDRegistry.getVisualID((String) hint.getAdapter(String.class));
		IElementType type = (IElementType) hint.getAdapter(IElementType.class);
		if (type == null) {
			EObject element = (EObject) hint.getAdapter(EObject.class);
			type = ElementTypeRegistry.getInstance().getElementType(element);
d143 1
a143 1
		return getParser(type, visualID);
@


1.2
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d121 1
a121 1
	protected IParser getParser(IElementType type, String viewType) {
d123 1
a123 1
			if (GMFGraphVisualIDRegistry.getType(Compartment_nameEditPart.VISUAL_ID).equals(viewType)) {
d128 1
a128 1
			if (GMFGraphVisualIDRegistry.getType(Node_nameEditPart.VISUAL_ID).equals(viewType)) {
d133 1
a133 1
			if (GMFGraphVisualIDRegistry.getType(Connection_nameEditPart.VISUAL_ID).equals(viewType)) {
d138 1
a138 1
			if (GMFGraphVisualIDRegistry.getType(FigureGallery_nameEditPart.VISUAL_ID).equals(viewType)) {
d149 1
a149 1
		String viewType = (String) hint.getAdapter(String.class);
d155 1
a155 1
		return getParser(type, viewType);
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d19 2
d123 1
a123 1
			if (Compartment_nameEditPart.VISUAL_ID.equals(viewType)) {
d128 1
a128 1
			if (Node_nameEditPart.VISUAL_ID.equals(viewType)) {
d133 1
a133 1
			if (Connection_nameEditPart.VISUAL_ID.equals(viewType)) {
d138 1
a138 1
			if (FigureGallery_nameEditPart.VISUAL_ID.equals(viewType)) {
@

