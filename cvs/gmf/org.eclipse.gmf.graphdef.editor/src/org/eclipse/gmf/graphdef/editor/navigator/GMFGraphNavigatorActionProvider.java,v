head	1.6;
access;
symbols
	v20080722-1827:1.6
	v20080718-1700:1.6
	v20080718-1731:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.2
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080610-1132:1.6
	v20080603-1553:1.6
	v20080528-1052:1.6
	v20080521:1.6
	v20080516-1143:1.6
	v20080512-1200:1.6
	v20080510-0100:1.6
	v20080507-1326:1.6
	v20080501-1739:1.6
	v20080425-1959:1.6
	v20080411-0411:1.6
	v20080404-1111:1.6
	v20080322-0000:1.6
	v20080114-2222:1.4
	v20071214-1111:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070520-1200:1.3
	v20070420-1000:1.3
	v20070405-2000:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20070307-0700:1.3
	v20070221-1500:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2008.03.07.12.50.34;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	179447d13a164567;

1.5
date	2008.02.22.13.08.01;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	4c5647bec9294567;

1.4
date	2007.05.31.15.52.30;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	49f1465eef2c4567;

1.3
date	2007.03.02.19.21.06;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	1bbe45e879214567;

1.2
date	2007.03.02.15.39.20;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	717a45e845234567;

1.1
date	2007.02.09.20.08.30;	author atikhomirov;	state Exp;
branches;
next	;
commitid	179c45ccd4b34567;


desc
@@


1.6
log
@Updating with new figures code + setting proper layout for diahram elements
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.navigator;

import java.util.Iterator;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.common.ui.URIEditorInput;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditor;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
import org.eclipse.gmf.graphdef.editor.part.Messages;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.navigator.CommonActionProvider;
import org.eclipse.ui.navigator.ICommonActionConstants;
import org.eclipse.ui.navigator.ICommonActionExtensionSite;
import org.eclipse.ui.navigator.ICommonViewerWorkbenchSite;
import org.eclipse.ui.part.FileEditorInput;

/**
 * @@generated
 */
public class GMFGraphNavigatorActionProvider extends CommonActionProvider {

	/**
	 * @@generated
	 */
	private boolean myContribute;

	/**
	 * @@generated
	 */
	private OpenDiagramAction myOpenDiagramAction;

	/**
	 * @@generated
	 */
	public void init(ICommonActionExtensionSite aSite) {
		super.init(aSite);
		if (aSite.getViewSite() instanceof ICommonViewerWorkbenchSite) {
			myContribute = true;
			makeActions((ICommonViewerWorkbenchSite) aSite.getViewSite());
		} else {
			myContribute = false;
		}
	}

	/**
	 * @@generated
	 */
	private void makeActions(ICommonViewerWorkbenchSite viewerSite) {
		myOpenDiagramAction = new OpenDiagramAction(viewerSite);
	}

	/**
	 * @@generated
	 */
	public void fillActionBars(IActionBars actionBars) {
		if (!myContribute) {
			return;
		}
		IStructuredSelection selection = (IStructuredSelection) getContext().getSelection();
		myOpenDiagramAction.selectionChanged(selection);
		if (myOpenDiagramAction.isEnabled()) {
			actionBars.setGlobalActionHandler(ICommonActionConstants.OPEN, myOpenDiagramAction);
		}
	}

	/**
	 * @@generated
	 */
	public void fillContextMenu(IMenuManager menu) {
	}

	/**
	 * @@generated
	 */
	private class OpenDiagramAction extends Action {

		/**
		 * @@generated
		 */
		private Diagram myDiagram;

		/**
		 * @@generated
		 */
		private ICommonViewerWorkbenchSite myViewerSite;

		/**
		 * @@generated
		 */
		public OpenDiagramAction(ICommonViewerWorkbenchSite viewerSite) {
			super(Messages.NavigatorActionProvider_OpenDiagramActionName);
			myViewerSite = viewerSite;
		}

		/**
		 * @@generated
		 */
		public final void selectionChanged(IStructuredSelection selection) {
			myDiagram = null;
			if (selection.size() == 1) {
				Object selectedElement = selection.getFirstElement();
				if (selectedElement instanceof GMFGraphNavigatorItem) {
					selectedElement = ((GMFGraphNavigatorItem) selectedElement).getView();
				} else if (selectedElement instanceof IAdaptable) {
					selectedElement = ((IAdaptable) selectedElement).getAdapter(View.class);
				}
				if (selectedElement instanceof Diagram) {
					Diagram diagram = (Diagram) selectedElement;
					if (CanvasEditPart.MODEL_ID.equals(GMFGraphVisualIDRegistry.getModelID(diagram))) {
						myDiagram = diagram;
					}
				}
			}
			setEnabled(myDiagram != null);
		}

		/**
		 * @@generated
		 */
		public void run() {
			if (myDiagram == null || myDiagram.eResource() == null) {
				return;
			}

			IEditorInput editorInput = getEditorInput();
			IWorkbenchPage page = myViewerSite.getPage();
			try {
				page.openEditor(editorInput, GMFGraphDiagramEditor.ID);
			} catch (PartInitException e) {
				GMFGraphDiagramEditorPlugin.getInstance().logError("Exception while openning diagram", e); //$NON-NLS-1$
			}
		}

		/**
		 * @@generated
		 */
		private IEditorInput getEditorInput() {
			for (Iterator it = myDiagram.eResource().getContents().iterator(); it.hasNext();) {
				EObject nextEObject = (EObject) it.next();
				if (nextEObject == myDiagram) {
					return new FileEditorInput(WorkspaceSynchronizer.getFile(myDiagram.eResource()));
				}
				if (nextEObject instanceof Diagram) {
					break;
				}
			}
			URI uri = EcoreUtil.getURI(myDiagram);
			String editorName = uri.lastSegment() + "#" + myDiagram.eResource().getContents().indexOf(myDiagram); //$NON-NLS-1$
			IEditorInput editorInput = new URIEditorInput(uri, editorName);
			return editorInput;
		}

	}

}
@


1.5
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@a15 1

a16 1

a18 3

import org.eclipse.emf.ecore.resource.Resource;

a20 1

a21 1

a24 1

a27 1

a29 1

a30 1

a34 1

a38 1

@


1.4
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d19 1
d24 1
d33 1
d128 1
a128 1
			super("Open Diagram");
d167 1
a167 1
				GMFGraphDiagramEditorPlugin.getInstance().logError("Exception while openning diagram", e);
d175 1
a175 2
			Resource diagramResource = myDiagram.eResource();
			for (Iterator it = diagramResource.getContents().iterator(); it.hasNext();) {
d178 1
a178 1
					return new FileEditorInput(WorkspaceSynchronizer.getFile(diagramResource));
d184 4
a187 1
			return new URIEditorInput(diagramResource.getURI().appendFragment(diagramResource.getURIFragment(myDiagram)));
@


1.3
log
@organized imports
@
text
@d2 8
a9 8
 * Copyright (c) 2006 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d16 1
d18 1
d20 1
d22 1
d24 1
d26 1
d30 1
d33 1
d36 1
d38 1
d43 1
d48 1
@


1.2
log
@[176026] akarjakina - Fix notation background and foreground colors update
[173499] akarjakina - Add custom form-based property sections fro figure attributes
@
text
@d14 1
a15 1

a20 1

a23 3

import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditorInput;

a25 1

a27 1

a28 1

a32 1

@


1.1
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2007 Borland Software Corporation and others.
d13 1
d16 4
d37 1
d45 1
d151 1
a151 1
			if (myDiagram == null) {
d154 2
a155 1
			DiagramEditorInput editorInput = new DiagramEditorInput(myDiagram);
d164 17
@

