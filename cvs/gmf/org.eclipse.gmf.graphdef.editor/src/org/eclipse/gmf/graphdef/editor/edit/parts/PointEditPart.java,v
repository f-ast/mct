head	1.3;
access;
symbols
	v20080722-1827:1.3
	v20080718-1700:1.3
	v20080718-1731:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080603-1553:1.3
	v20080528-1052:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2008.05.28.12.42.32;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	67a1483d53374567;

1.2
date	2008.05.27.16.16.52;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	3565483c33f24567;

1.1
date	2008.05.27.12.28.08;	author ashatalin;	state Exp;
branches;
next	;
commitid	68fd483bfe544567;


desc
@@


1.3
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2008 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.parts;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.draw2d.ColorConstants;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Polygon;
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.draw2d.StackLayout;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.editpolicies.LayoutEditPolicy;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.graphdef.editor.edit.policies.PointItemSemanticEditPolicy;
import org.eclipse.gmf.graphdef.editor.edit.polocies.FigureContainerXYLayoutEditPolicy;
import org.eclipse.gmf.graphdef.editor.sheet.ChangeTracker;
import org.eclipse.gmf.graphdef.editor.sheet.FeatureTracker;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx;
import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class PointEditPart extends AbstractPointEditPart {

	/**
	 * @@generated
	 */
	public static final int VISUAL_ID = 3022;

	/**
	 * @@generated
	 */
	protected IFigure contentPane;

	/**
	 * @@generated
	 */
	protected IFigure primaryShape;

	/**
	 * @@generated
	 */
	public PointEditPart(View view) {
		super(view);
	}

	/**
	 * @@generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new PointItemSemanticEditPolicy());
		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
		// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}

	/**
	 * @@generated
	 */
	protected LayoutEditPolicy createLayoutEditPolicy() {
		return new FigureContainerXYLayoutEditPolicy(getMapMode());
	}

	/**
	 * @@generated
	 */
	protected IFigure createNodeShape() {
		PolylinePointFigure figure = new PolylinePointFigure();
		return primaryShape = figure;
	}

	/**
	 * @@generated
	 */
	public PolylinePointFigure getPrimaryShape() {
		return (PolylinePointFigure) primaryShape;
	}

	/**
	 * @@generated
	 */
	protected NodeFigure createNodePlate() {
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(getMapMode().DPtoLP(7), getMapMode().DPtoLP(7));
		result.setMinimumSize(new Dimension(0, 0));
		return result;
	}

	/**
	 * @@generated
	 */
	public EditPolicy getPrimaryDragEditPolicy() {
		NonResizableEditPolicyEx editPolicy = new NonResizableEditPolicyEx();
		return editPolicy;
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @@generated
	 */
	protected NodeFigure createNodeFigure() {
		NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new StackLayout());
		IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}

	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @@param nodeShape instance of generated figure class
	 * @@generated
	 */
	protected IFigure setupContentPane(IFigure nodeShape) {
		return nodeShape; // use nodeShape itself as contentPane
	}

	/**
	 * @@generated
	 */
	public IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

	/**
	 * @@generated
	 */
	protected void handleNotificationEvent(Notification notification) {
		Object feature = notification.getFeature();
		if (NotationPackage.eINSTANCE.getFillStyle_FillColor().equals(feature)) {
			return;
		} else if (NotationPackage.eINSTANCE.getLineStyle_LineColor().equals(feature)) {
			return;
		}
		super.handleNotificationEvent(notification);
	}

	/**
	 * @@generated
	 */
	public class PolylinePointFigure extends RectangleFigure {

		/**
		 * @@generated
		 */
		public PolylinePointFigure() {
			this.setFill(false);
			this.setOutline(false);
			createContents();
		}

		/**
		 * @@generated
		 */
		private void createContents() {

			Polygon polyline0 = new Polygon();
			polyline0.addPoint(new Point(getMapMode().DPtoLP(0), getMapMode().DPtoLP(0)));
			polyline0.addPoint(new Point(getMapMode().DPtoLP(6), getMapMode().DPtoLP(3)));
			polyline0.addPoint(new Point(getMapMode().DPtoLP(3), getMapMode().DPtoLP(6)));
			polyline0.setFill(true);
			polyline0.setForegroundColor(ColorConstants.blue);
			polyline0.setBackgroundColor(ColorConstants.blue);

			this.add(polyline0);

		}

		/**
		 * @@generated
		 */
		private boolean myUseLocalCoordinates = true;

		/**
		 * @@generated
		 */
		protected boolean useLocalCoordinates() {
			return myUseLocalCoordinates;
		}

		/**
		 * @@generated
		 */
		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
			myUseLocalCoordinates = useLocalCoordinates;
		}

	}

	/**
	 * @@generated
	 */
	private Collection<Adapter> myDomainElementAdapters = new ArrayList<Adapter>();

	/**
	 * @@generated
	 */
	private org.eclipse.gmf.gmfgraph.Point getGmfgraphElement() {
		View view = getNotationView();
		if (view == null) {
			return null;
		}
		EObject element = view.getElement();
		if (element instanceof org.eclipse.gmf.gmfgraph.Point) {
			org.eclipse.gmf.gmfgraph.Point modelFigureElement = (org.eclipse.gmf.gmfgraph.Point) element;
			return modelFigureElement;
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected void removeSemanticListeners() {
		org.eclipse.gmf.gmfgraph.Point modelElement = getGmfgraphElement();
		if (modelElement != null) {
			modelElement.eAdapters().removeAll(myDomainElementAdapters);
			myDomainElementAdapters.clear();
		}
		super.removeSemanticListeners();
	}

	/**
	 * @@generated
	 */
	protected void setFigure(IFigure figure) {
		super.setFigure(figure);
		org.eclipse.gmf.gmfgraph.Point modelElement = getGmfgraphElement();
		if (modelElement != null) {
			refreshBounds();
		}
	}

	/**
	 * @@generated
	 */
	public void activate() {
		if (isActive()) {
			return;
		}
		final org.eclipse.gmf.gmfgraph.Point modelElement = getGmfgraphElement();
		if (modelElement == null) {
			super.activate();
			return;
		}

		ChangeTracker refreshBoundsTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				refreshBounds();
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getPoint_X()));
		myDomainElementAdapters.add(new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getPoint_Y()));
		modelElement.eAdapters().addAll(myDomainElementAdapters);
		super.activate();
	}

}
@


1.2
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d32 1
a32 1
import org.eclipse.gmf.graphdef.editor.sheet.MultipleTargetsFeatureTracker;
d282 2
a283 2
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getPoint_X()));
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getPoint_Y()));
@


1.1
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d32 1
a32 1
import org.eclipse.gmf.graphdef.editor.sheet.FeatureTracker;
d282 2
a283 2
		myDomainElementAdapters.add(new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getPoint_X()));
		myDomainElementAdapters.add(new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getPoint_Y()));
@

