head	1.18;
access;
symbols
	v20080722-1827:1.18
	v20080718-1700:1.17
	v20080718-1731:1.18
	v20080716-1642:1.18
	R2_1_maintenance:1.17.0.2
	Root_R2_1_maintenance:1.17
	R2_1_0:1.17
	v20080610-1132:1.17
	v20080603-1553:1.17
	v20080528-1052:1.16
	v20080521:1.15
	v20080516-1143:1.15
	v20080512-1200:1.15
	v20080510-0100:1.15
	v20080507-1326:1.15
	v20080501-1739:1.15
	v20080425-1959:1.15
	v20080411-0411:1.15
	v20080404-1111:1.15
	v20080322-0000:1.15
	v20080114-2222:1.13
	v20071214-1111:1.13
	v20070809-0000:1.13
	R2_0_maintenance:1.13.0.2
	R2_0:1.13
	R4_20:1.13
	v20070621-0000:1.13
	RC3_20:1.13
	v20070605-1400:1.13
	v20070601-1400:1.13
	v20070520-1200:1.12
	v20070420-1000:1.12
	v20070405-2000:1.12
	v20070405-1100:1.12
	v20070330-1300:1.12
	v20070307-0700:1.12
	v20070221-1500:1.12
	v20070208-1800:1.11
	M4_20:1.11
	v20061214-0000:1.11
	M3_20:1.11
	v20061013-1330:1.11
	M1_20:1.11
	v20060713-1700:1.11
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	v20060627-1200:1.11
	v20060616-1200:1.11
	v20060609-1400:1.11
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.8
	v20060519-0800:1.6
	v20060512-1000:1.5
	I20060512-1000:1.5
	RC2_10:1.5
	I20060505-1400:1.5
	I20060428-1300:1.4
	I20060424-0500:1.3
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.18
date	2008.07.02.15.20.47;	author ashatalin;	state Exp;
branches;
next	1.17;
commitid	703486b9cc54567;

1.17
date	2008.05.30.17.14.49;	author ashatalin;	state Exp;
branches;
next	1.16;
commitid	70b4484036034567;

1.16
date	2008.05.27.12.28.09;	author ashatalin;	state Exp;
branches;
next	1.15;
commitid	68fd483bfe544567;

1.15
date	2008.03.13.17.56.06;	author ashatalin;	state Exp;
branches;
next	1.14;
commitid	54b147d96ab34567;

1.14
date	2008.02.22.13.08.02;	author ashatalin;	state Exp;
branches;
next	1.13;
commitid	4c5647bec9294567;

1.13
date	2007.05.31.15.52.32;	author ashatalin;	state Exp;
branches;
next	1.12;
commitid	49f1465eef2c4567;

1.12
date	2007.02.09.20.08.31;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	179c45ccd4b34567;

1.11
date	2006.06.08.08.40.35;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.02.15.08.30;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.30.13.06.14;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.22.17.37.30;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.22.08.36.12;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.15.17.21.14;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.05.16.31.18;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.26.11.01.00;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.21.17.13.32;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.20.37.00;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.27;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.18
log
@[233207] - Support Label figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.providers;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ChildAccessEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentAccessorEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentVisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionVisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramElementFigureEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelAccessorEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelVisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.EllipseEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryFiguresEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Label2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Label3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelText2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelText3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelTextEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeContentPaneEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeVisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PointEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polygon2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polygon3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolygonEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolylineEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RectangleEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangleEditPart;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
import org.eclipse.gmf.graphdef.editor.view.factories.CanvasViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.ChildAccessViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.CompartmentAccessorViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.CompartmentNameViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.CompartmentViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.CompartmentVisualFacetsViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.ConnectionNameViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.ConnectionViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.ConnectionVisualFacetsViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.DiagramElementFigureViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.DiagramLabelAccessorViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.DiagramLabelNameViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.DiagramLabelViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.DiagramLabelVisualFacetsViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.Ellipse2ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.Ellipse3ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.EllipseViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.FigureDescriptorNameViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.FigureDescriptorViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.FigureGalleryFiguresViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.FigureGalleryNameViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.FigureGalleryViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.Label2ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.Label3ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.LabelText2ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.LabelText3ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.LabelTextViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.LabelViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.NodeContentPaneViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.NodeNameViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.NodeViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.NodeVisualFacetsViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.PointViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.Polygon2ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.Polygon3ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.PolygonViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.Polyline2ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.Polyline3ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.PolylineViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.Rectangle2ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.Rectangle3ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.RectangleViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.RoundedRectangle2ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.RoundedRectangle3ViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.RoundedRectangleViewFactory;
import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.IHintedType;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class GMFGraphViewProvider extends AbstractViewProvider {

	/**
	 * @@generated
	 */
	protected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {
		EObject semanticElement = getSemanticElement(semanticAdapter);
		if (CanvasEditPart.MODEL_ID.equals(diagramKind) && GMFGraphVisualIDRegistry.getDiagramVisualID(semanticElement) != -1) {
			return CanvasViewFactory.class;
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
		if (containerView == null) {
			return null;
		}
		IElementType elementType = getSemanticElementType(semanticAdapter);
		EObject domainElement = getSemanticElement(semanticAdapter);
		int visualID;
		if (semanticHint == null) {
			// Semantic hint is not specified. Can be a result of call from CanonicalEditPolicy.
			// In this situation there should be NO elementType, visualID will be determined
			// by VisualIDRegistry.getNodeVisualID() for domainElement.
			if (elementType != null || domainElement == null) {
				return null;
			}
			visualID = GMFGraphVisualIDRegistry.getNodeVisualID(containerView, domainElement);
		} else {
			visualID = GMFGraphVisualIDRegistry.getVisualID(semanticHint);
			if (elementType != null) {
				// Semantic hint is specified together with element type.
				// Both parameters should describe exactly the same diagram element.
				// In addition we check that visualID returned by VisualIDRegistry.getNodeVisualID() for
				// domainElement (if specified) is the same as in element type.
				if (!GMFGraphElementTypes.isKnownElementType(elementType) || (!(elementType instanceof IHintedType))) {
					return null; // foreign element type
				}
				String elementTypeHint = ((IHintedType) elementType).getSemanticHint();
				if (!semanticHint.equals(elementTypeHint)) {
					return null; // if semantic hint is specified it should be the same as in element type
				}
				if (domainElement != null && visualID != GMFGraphVisualIDRegistry.getNodeVisualID(containerView, domainElement)) {
					return null; // visual id for node EClass should match visual id from element type
				}
			} else {
				// Element type is not specified. Domain element should be present (except pure design elements).
				// This method is called with EObjectAdapter as parameter from:
				//   - ViewService.createNode(View container, EObject eObject, String type, PreferencesHint preferencesHint) 
				//   - generated ViewFactory.decorateView() for parent element
				if (!CanvasEditPart.MODEL_ID.equals(GMFGraphVisualIDRegistry.getModelID(containerView))) {
					return null; // foreign diagram
				}
				switch (visualID) {
				case CompartmentEditPart.VISUAL_ID:
				case NodeEditPart.VISUAL_ID:
				case ConnectionEditPart.VISUAL_ID:
				case FigureGalleryEditPart.VISUAL_ID:
				case DiagramLabelEditPart.VISUAL_ID:
				case FigureDescriptorEditPart.VISUAL_ID:
				case RectangleEditPart.VISUAL_ID:
				case EllipseEditPart.VISUAL_ID:
				case RoundedRectangleEditPart.VISUAL_ID:
				case PolylineEditPart.VISUAL_ID:
				case PointEditPart.VISUAL_ID:
				case PolygonEditPart.VISUAL_ID:
				case LabelEditPart.VISUAL_ID:
				case Rectangle2EditPart.VISUAL_ID:
				case Ellipse2EditPart.VISUAL_ID:
				case RoundedRectangle2EditPart.VISUAL_ID:
				case Polyline2EditPart.VISUAL_ID:
				case Polygon2EditPart.VISUAL_ID:
				case Label2EditPart.VISUAL_ID:
				case Rectangle3EditPart.VISUAL_ID:
				case Ellipse3EditPart.VISUAL_ID:
				case RoundedRectangle3EditPart.VISUAL_ID:
				case Polyline3EditPart.VISUAL_ID:
				case Polygon3EditPart.VISUAL_ID:
				case Label3EditPart.VISUAL_ID:
					if (domainElement == null || visualID != GMFGraphVisualIDRegistry.getNodeVisualID(containerView, domainElement)) {
						return null; // visual id in semantic hint should match visual id for domain element
					}
					break;
				case CompartmentNameEditPart.VISUAL_ID:
				case CompartmentVisualFacetsEditPart.VISUAL_ID:
					if (CompartmentEditPart.VISUAL_ID != GMFGraphVisualIDRegistry.getVisualID(containerView) || containerView.getElement() != domainElement) {
						return null; // wrong container
					}
					break;
				case NodeNameEditPart.VISUAL_ID:
				case NodeVisualFacetsEditPart.VISUAL_ID:
					if (NodeEditPart.VISUAL_ID != GMFGraphVisualIDRegistry.getVisualID(containerView) || containerView.getElement() != domainElement) {
						return null; // wrong container
					}
					break;
				case ConnectionNameEditPart.VISUAL_ID:
				case ConnectionVisualFacetsEditPart.VISUAL_ID:
					if (ConnectionEditPart.VISUAL_ID != GMFGraphVisualIDRegistry.getVisualID(containerView) || containerView.getElement() != domainElement) {
						return null; // wrong container
					}
					break;
				case FigureGalleryNameEditPart.VISUAL_ID:
				case FigureGalleryFiguresEditPart.VISUAL_ID:
					if (FigureGalleryEditPart.VISUAL_ID != GMFGraphVisualIDRegistry.getVisualID(containerView) || containerView.getElement() != domainElement) {
						return null; // wrong container
					}
					break;
				case DiagramLabelNameEditPart.VISUAL_ID:
				case DiagramLabelVisualFacetsEditPart.VISUAL_ID:
					if (DiagramLabelEditPart.VISUAL_ID != GMFGraphVisualIDRegistry.getVisualID(containerView) || containerView.getElement() != domainElement) {
						return null; // wrong container
					}
					break;
				case FigureDescriptorNameEditPart.VISUAL_ID:
					if (FigureDescriptorEditPart.VISUAL_ID != GMFGraphVisualIDRegistry.getVisualID(containerView) || containerView.getElement() != domainElement) {
						return null; // wrong container
					}
					break;
				case LabelTextEditPart.VISUAL_ID:
					if (LabelEditPart.VISUAL_ID != GMFGraphVisualIDRegistry.getVisualID(containerView) || containerView.getElement() != domainElement) {
						return null; // wrong container
					}
					break;
				case LabelText2EditPart.VISUAL_ID:
					if (Label2EditPart.VISUAL_ID != GMFGraphVisualIDRegistry.getVisualID(containerView) || containerView.getElement() != domainElement) {
						return null; // wrong container
					}
					break;
				case LabelText3EditPart.VISUAL_ID:
					if (Label3EditPart.VISUAL_ID != GMFGraphVisualIDRegistry.getVisualID(containerView) || containerView.getElement() != domainElement) {
						return null; // wrong container
					}
					break;
				default:
					return null;
				}
			}
		}
		return getNodeViewClass(containerView, visualID);
	}

	/**
	 * @@generated
	 */
	protected Class getNodeViewClass(View containerView, int visualID) {
		if (containerView == null || !GMFGraphVisualIDRegistry.canCreateNode(containerView, visualID)) {
			return null;
		}
		switch (visualID) {
		case CompartmentEditPart.VISUAL_ID:
			return CompartmentViewFactory.class;
		case CompartmentNameEditPart.VISUAL_ID:
			return CompartmentNameViewFactory.class;
		case NodeEditPart.VISUAL_ID:
			return NodeViewFactory.class;
		case NodeNameEditPart.VISUAL_ID:
			return NodeNameViewFactory.class;
		case ConnectionEditPart.VISUAL_ID:
			return ConnectionViewFactory.class;
		case ConnectionNameEditPart.VISUAL_ID:
			return ConnectionNameViewFactory.class;
		case FigureGalleryEditPart.VISUAL_ID:
			return FigureGalleryViewFactory.class;
		case FigureGalleryNameEditPart.VISUAL_ID:
			return FigureGalleryNameViewFactory.class;
		case DiagramLabelEditPart.VISUAL_ID:
			return DiagramLabelViewFactory.class;
		case DiagramLabelNameEditPart.VISUAL_ID:
			return DiagramLabelNameViewFactory.class;
		case FigureDescriptorEditPart.VISUAL_ID:
			return FigureDescriptorViewFactory.class;
		case FigureDescriptorNameEditPart.VISUAL_ID:
			return FigureDescriptorNameViewFactory.class;
		case RectangleEditPart.VISUAL_ID:
			return RectangleViewFactory.class;
		case Rectangle2EditPart.VISUAL_ID:
			return Rectangle2ViewFactory.class;
		case EllipseEditPart.VISUAL_ID:
			return EllipseViewFactory.class;
		case RoundedRectangleEditPart.VISUAL_ID:
			return RoundedRectangleViewFactory.class;
		case PolylineEditPart.VISUAL_ID:
			return PolylineViewFactory.class;
		case PointEditPart.VISUAL_ID:
			return PointViewFactory.class;
		case PolygonEditPart.VISUAL_ID:
			return PolygonViewFactory.class;
		case LabelEditPart.VISUAL_ID:
			return LabelViewFactory.class;
		case LabelTextEditPart.VISUAL_ID:
			return LabelTextViewFactory.class;
		case Ellipse2EditPart.VISUAL_ID:
			return Ellipse2ViewFactory.class;
		case RoundedRectangle2EditPart.VISUAL_ID:
			return RoundedRectangle2ViewFactory.class;
		case Polyline2EditPart.VISUAL_ID:
			return Polyline2ViewFactory.class;
		case Polygon2EditPart.VISUAL_ID:
			return Polygon2ViewFactory.class;
		case Label2EditPart.VISUAL_ID:
			return Label2ViewFactory.class;
		case LabelText2EditPart.VISUAL_ID:
			return LabelText2ViewFactory.class;
		case Rectangle3EditPart.VISUAL_ID:
			return Rectangle3ViewFactory.class;
		case Ellipse3EditPart.VISUAL_ID:
			return Ellipse3ViewFactory.class;
		case RoundedRectangle3EditPart.VISUAL_ID:
			return RoundedRectangle3ViewFactory.class;
		case Polyline3EditPart.VISUAL_ID:
			return Polyline3ViewFactory.class;
		case Polygon3EditPart.VISUAL_ID:
			return Polygon3ViewFactory.class;
		case Label3EditPart.VISUAL_ID:
			return Label3ViewFactory.class;
		case LabelText3EditPart.VISUAL_ID:
			return LabelText3ViewFactory.class;
		case CompartmentVisualFacetsEditPart.VISUAL_ID:
			return CompartmentVisualFacetsViewFactory.class;
		case NodeVisualFacetsEditPart.VISUAL_ID:
			return NodeVisualFacetsViewFactory.class;
		case ConnectionVisualFacetsEditPart.VISUAL_ID:
			return ConnectionVisualFacetsViewFactory.class;
		case FigureGalleryFiguresEditPart.VISUAL_ID:
			return FigureGalleryFiguresViewFactory.class;
		case DiagramLabelVisualFacetsEditPart.VISUAL_ID:
			return DiagramLabelVisualFacetsViewFactory.class;
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
		IElementType elementType = getSemanticElementType(semanticAdapter);
		if (!GMFGraphElementTypes.isKnownElementType(elementType) || (!(elementType instanceof IHintedType))) {
			return null; // foreign element type
		}
		String elementTypeHint = ((IHintedType) elementType).getSemanticHint();
		if (elementTypeHint == null) {
			return null; // our hint is visual id and must be specified
		}
		if (semanticHint != null && !semanticHint.equals(elementTypeHint)) {
			return null; // if semantic hint is specified it should be the same as in element type
		}
		int visualID = GMFGraphVisualIDRegistry.getVisualID(elementTypeHint);
		EObject domainElement = getSemanticElement(semanticAdapter);
		if (domainElement != null && visualID != GMFGraphVisualIDRegistry.getLinkWithClassVisualID(domainElement)) {
			return null; // visual id for link EClass should match visual id from element type
		}
		return getEdgeViewClass(visualID);
	}

	/**
	 * @@generated
	 */
	protected Class getEdgeViewClass(int visualID) {
		switch (visualID) {
		case ChildAccessEditPart.VISUAL_ID:
			return ChildAccessViewFactory.class;
		case CompartmentAccessorEditPart.VISUAL_ID:
			return CompartmentAccessorViewFactory.class;
		case DiagramLabelAccessorEditPart.VISUAL_ID:
			return DiagramLabelAccessorViewFactory.class;
		case NodeContentPaneEditPart.VISUAL_ID:
			return NodeContentPaneViewFactory.class;
		case DiagramElementFigureEditPart.VISUAL_ID:
			return DiagramElementFigureViewFactory.class;
		}
		return null;
	}

	/**
	 * @@generated
	 */
	private IElementType getSemanticElementType(IAdaptable semanticAdapter) {
		if (semanticAdapter == null) {
			return null;
		}
		return (IElementType) semanticAdapter.getAdapter(IElementType.class);
	}

}
@


1.17
log
@[233206] - Support Polygon figure in .gmfgraph editor
@
text
@d26 3
d37 6
d72 3
d83 6
d175 1
d183 1
d189 1
d195 1
d224 6
d235 15
d282 4
d304 4
d316 4
d330 4
d342 2
@


1.16
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d39 3
d76 3
d163 1
d168 1
d173 1
d255 2
d263 2
d273 2
@


1.15
log
@node content pane link to child accessor added.
@
text
@d38 1
d72 1
d156 1
d244 2
@


1.14
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@d34 1
d67 1
d301 2
@


1.13
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@a107 1

d110 3
d120 6
a125 2
				if (!GMFGraphElementTypes.isKnownElementType(elementType) || false == elementType instanceof IHintedType) {
					return null;
d129 1
a129 1
					return null;
d132 1
a132 1
					return null;
d135 7
a142 1
				case CanvasEditPart.VISUAL_ID:
a148 1
				case Rectangle2EditPart.VISUAL_ID:
d152 1
d160 34
a193 4
				case ChildAccessEditPart.VISUAL_ID:
				case CompartmentAccessorEditPart.VISUAL_ID:
				case DiagramLabelAccessorEditPart.VISUAL_ID:
				case DiagramElementFigureEditPart.VISUAL_ID:
d198 8
a205 1
		if (!GMFGraphVisualIDRegistry.canCreateNode(containerView, visualID)) {
d270 2
a271 5
		if (elementType == null) {
			return null;
		}
		if (!GMFGraphElementTypes.isKnownElementType(elementType) || false == elementType instanceof IHintedType) {
			return null;
d275 1
a275 1
			return null;
d278 1
a278 1
			return null;
d283 1
a283 1
			return null;
d285 7
@


1.12
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d2 8
a9 8
 * Copyright (c) 2006, 2007 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
a13 1
import org.eclipse.emf.ecore.EClass;
a14 3
import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
d16 2
d24 2
d27 1
d29 2
d38 1
d41 1
d44 1
a45 1

a46 1

d48 2
d57 1
d59 1
d61 2
d70 1
d73 1
d76 1
d78 4
d107 50
a156 1
		if (elementType != null && !GMFGraphElementTypes.isKnownElementType(elementType)) {
d159 1
a159 4
		EClass semanticType = getSemanticEClass(semanticAdapter);
		EObject semanticElement = getSemanticElement(semanticAdapter);
		int nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID(containerView, semanticElement, semanticType, semanticHint);
		switch (nodeVID) {
d176 4
d196 8
d221 4
a224 1
		if (elementType != null && !GMFGraphElementTypes.isKnownElementType(elementType)) {
d227 6
a232 2
		if (GMFGraphElementTypes.DiagramElementFigure_4001.equals(elementType)) {
			return DiagramElementFigureViewFactory.class;
d234 3
a236 2
		EClass semanticType = getSemanticEClass(semanticAdapter);
		if (semanticType == null) {
d239 9
a247 3
		EObject semanticElement = getSemanticElement(semanticAdapter);
		int linkVID = GMFGraphVisualIDRegistry.getLinkWithClassVisualID(semanticElement, semanticType);
		switch (linkVID) {
d249 1
a249 1
		return getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);
a261 8
	/**
	 * @@generated
	 */
	private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {
		// Handle unrecognized child node classes here
		return null;
	}

@


1.11
log
@Updating with new templates.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
@


1.10
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d21 2
a22 2
import org.eclipse.gmf.graphdef.editor.edit.parts.Compartment_VisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Compartment_nameEditPart;
d24 2
a25 2
import org.eclipse.gmf.graphdef.editor.edit.parts.Connection_VisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Connection_nameEditPart;
d29 2
a30 2
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGallery_FiguresEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGallery_nameEditPart;
d32 2
a33 2
import org.eclipse.gmf.graphdef.editor.edit.parts.Node_VisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Node_nameEditPart;
d44 1
d46 2
a47 2
import org.eclipse.gmf.graphdef.editor.view.factories.Compartment_VisualFacetsViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.Compartment_nameViewFactory;
d49 2
a50 2
import org.eclipse.gmf.graphdef.editor.view.factories.Connection_VisualFacetsViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.Connection_nameViewFactory;
d53 2
d56 1
a56 3
import org.eclipse.gmf.graphdef.editor.view.factories.FigureGallery_FiguresViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.FigureGallery_nameViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.FigureViewFactory;
d58 1
a58 2
import org.eclipse.gmf.graphdef.editor.view.factories.Node_VisualFacetsViewFactory;
import org.eclipse.gmf.graphdef.editor.view.factories.Node_nameViewFactory;
d99 2
a100 2
		case Compartment_nameEditPart.VISUAL_ID:
			return Compartment_nameViewFactory.class;
d103 2
a104 2
		case Node_nameEditPart.VISUAL_ID:
			return Node_nameViewFactory.class;
d107 2
a108 2
		case Connection_nameEditPart.VISUAL_ID:
			return Connection_nameViewFactory.class;
d111 2
a112 2
		case FigureGallery_nameEditPart.VISUAL_ID:
			return FigureGallery_nameViewFactory.class;
d129 8
a136 8
		case Compartment_VisualFacetsEditPart.VISUAL_ID:
			return Compartment_VisualFacetsViewFactory.class;
		case Node_VisualFacetsEditPart.VISUAL_ID:
			return Node_VisualFacetsViewFactory.class;
		case Connection_VisualFacetsEditPart.VISUAL_ID:
			return Connection_VisualFacetsViewFactory.class;
		case FigureGallery_FiguresEditPart.VISUAL_ID:
			return FigureGallery_FiguresViewFactory.class;
d150 1
a150 1
			return FigureViewFactory.class;
@


1.9
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
@


1.8
log
@Updating with new templates
@
text
@d1 10
d89 2
a90 1
		if (semanticAdapter != null && semanticAdapter.getAdapter(IElementType.class) != null && GMFGraphElementTypes.getElement(semanticAdapter) == null) {
a92 1

a95 1

d145 2
a146 1
		if (semanticAdapter.getAdapter(IElementType.class) != null && GMFGraphElementTypes.getElement(semanticAdapter) == null) {
d149 1
a149 2
		IElementType elementType = getSemanticElementType(semanticAdapter);
		if (GMFGraphElementTypes.DiagramElementFigure_3001.equals(elementType)) {
a151 1

a156 1

a157 1

@


1.7
log
@#142834 add null check
@
text
@d8 1
a55 2
import org.eclipse.gmf.runtime.emf.type.core.IElementType;

@


1.6
log
@Updating with latest templates
@
text
@d80 1
a80 1
		if (semanticAdapter.getAdapter(IElementType.class) != null && GMFGraphElementTypes.getElement(semanticAdapter) == null) {
@


1.5
log
@Polylines partually supported.
@
text
@d80 3
d137 3
@


1.4
log
@#138574 NPE creating ship destination link in TaiPan sample
@
text
@a8 1

@


1.3
log
@#137999 Generate pure static VisualIDRegisrty classes
@
text
@d141 3
@


1.2
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d68 1
a68 1
		if (CanvasEditPart.MODEL_ID.equals(diagramKind) && GMFGraphVisualIDRegistry.INSTANCE.getDiagramVisualID(semanticElement) != -1) {
d84 1
a84 1
		int nodeVID = GMFGraphVisualIDRegistry.INSTANCE.getNodeVisualID(containerView, semanticElement, semanticType, semanticHint);
d143 1
a143 1
		int linkVID = GMFGraphVisualIDRegistry.INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d10 21
d87 1
a87 1
		case 1001:
d89 1
a89 1
		case 4001:
d91 1
a91 1
		case 1002:
d93 1
a93 1
		case 4002:
d95 1
a95 1
		case 1003:
d97 1
a97 1
		case 4003:
d99 1
a99 1
		case 1004:
d101 1
a101 1
		case 4004:
d103 1
a103 1
		case 2001:
d105 1
a105 1
		case 2002:
d107 1
a107 1
		case 2003:
d109 1
a109 1
		case 2004:
d111 1
a111 1
		case 2005:
d113 1
a113 1
		case 2006:
d115 1
a115 1
		case 2007:
d117 1
a117 1
		case 2008:
d119 1
a119 1
		case 5001:
d121 1
a121 1
		case 5002:
d123 1
a123 1
		case 5003:
d125 1
a125 1
		case 5004:
@

