head	1.9;
access;
symbols
	v20080722-1827:1.9
	v20080718-1700:1.9
	v20080718-1731:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080528-1052:1.9
	v20080521:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080510-0100:1.9
	v20080507-1326:1.9
	v20080501-1739:1.9
	v20080425-1959:1.9
	v20080411-0411:1.9
	v20080404-1111:1.9
	v20080322-0000:1.9
	v20080114-2222:1.8
	v20071214-1111:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070605-1400:1.8
	v20070601-1400:1.8
	v20070520-1200:1.7
	v20070420-1000:1.7
	v20070405-2000:1.6
	v20070405-1100:1.6
	v20070330-1300:1.6
	v20070307-0700:1.6
	v20070221-1500:1.5
	v20070208-1800:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	M1_20:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	RC2_10:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2008.02.22.13.08.00;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	4c5647bec9294567;

1.8
date	2007.05.31.15.52.29;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	49f1465eef2c4567;

1.7
date	2007.04.16.11.03.53;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	7e4e462358154567;

1.6
date	2007.03.02.15.39.20;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	717a45e845234567;

1.5
date	2007.02.09.20.08.30;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	179c45ccd4b34567;

1.4
date	2006.06.02.15.08.30;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.30.13.06.14;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.16.36.28;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.24;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.part;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Status;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;
import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;
import org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;
import org.eclipse.gmf.gmfgraph.provider.GMFGraphItemProviderAdapterFactory;

/**
 * @@generated
 */
public class GMFGraphDiagramEditorPlugin extends AbstractUIPlugin {

	/**
	 * @@generated
	 */
	public static final String ID = "org.eclipse.gmf.graphdef.editor"; //$NON-NLS-1$

	/**
	 * @@generated
	 */
	public static final PreferencesHint DIAGRAM_PREFERENCES_HINT = new PreferencesHint(ID);

	/**
	 * @@generated
	 */
	private static GMFGraphDiagramEditorPlugin instance;

	/**
	 * @@generated
	 */
	private ComposedAdapterFactory adapterFactory;

	/**
	 * @@generated
	 */
	private GMFGraphDocumentProvider documentProvider;

	/**
	 * @@generated
	 */
	public GMFGraphDiagramEditorPlugin() {
	}

	/**
	 * @@generated
	 */
	public void start(BundleContext context) throws Exception {
		super.start(context);
		instance = this;
		PreferencesHint.registerPreferenceStore(DIAGRAM_PREFERENCES_HINT, getPreferenceStore());
		adapterFactory = createAdapterFactory();
	}

	/**
	 * @@generated
	 */
	public void stop(BundleContext context) throws Exception {
		adapterFactory.dispose();
		adapterFactory = null;
		instance = null;
		super.stop(context);
	}

	/**
	 * @@generated
	 */
	public static GMFGraphDiagramEditorPlugin getInstance() {
		return instance;
	}

	/**
	 * @@generated
	 */
	protected ComposedAdapterFactory createAdapterFactory() {
		List factories = new ArrayList();
		fillItemProviderFactories(factories);
		return new ComposedAdapterFactory(factories);
	}

	/**
	 * @@generated
	 */
	protected void fillItemProviderFactories(List factories) {
		factories.add(new GMFGraphItemProviderAdapterFactory());
		factories.add(new ResourceItemProviderAdapterFactory());
		factories.add(new ReflectiveItemProviderAdapterFactory());
	}

	/**
	 * @@generated
	 */
	public AdapterFactory getItemProvidersAdapterFactory() {
		return adapterFactory;
	}

	/**
	 * @@generated
	 */
	public ImageDescriptor getItemImageDescriptor(Object item) {
		IItemLabelProvider labelProvider = (IItemLabelProvider) adapterFactory.adapt(item, IItemLabelProvider.class);
		if (labelProvider != null) {
			return ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(item));
		}
		return null;
	}

	/**
	 * Returns an image descriptor for the image file at the given
	 * plug-in relative path.
	 *
	 * @@generated
	 * @@param path the path
	 * @@return the image descriptor
	 */
	public static ImageDescriptor getBundledImageDescriptor(String path) {
		return AbstractUIPlugin.imageDescriptorFromPlugin(ID, path);
	}

	/**
	 * Respects images residing in any plug-in. If path is relative,
	 * then this bundle is looked up for the image, otherwise, for absolute 
	 * path, first segment is taken as id of plug-in with image
	 *
	 * @@generated
	 * @@param path the path to image, either absolute (with plug-in id as first segment), or relative for bundled images
	 * @@return the image descriptor
	 */
	public static ImageDescriptor findImageDescriptor(String path) {
		final IPath p = new Path(path);
		if (p.isAbsolute() && p.segmentCount() > 1) {
			return AbstractUIPlugin.imageDescriptorFromPlugin(p.segment(0), p.removeFirstSegments(1).makeAbsolute().toString());
		} else {
			return getBundledImageDescriptor(p.makeAbsolute().toString());
		}
	}

	/**
	 * Returns string from plug-in's resource bundle
	 * @@generated
	 */
	public static String getString(String key) {
		return Platform.getResourceString(getInstance().getBundle(), "%" + key); //$NON-NLS-1$
	}

	/**
	 * Returns an image for the image file at the given plug-in relative path.
	 * Client do not need to dispose this image. Images will be disposed automatically.
	 *
	 * @@generated
	 * @@param path the path
	 * @@return image instance
	 */
	public Image getBundledImage(String path) {
		Image image = getImageRegistry().get(path);
		if (image == null) {
			getImageRegistry().put(path, getBundledImageDescriptor(path));
			image = getImageRegistry().get(path);
		}
		return image;
	}

	/**
	 * @@generated
	 */
	public GMFGraphDocumentProvider getDocumentProvider() {
		if (documentProvider == null) {
			documentProvider = new GMFGraphDocumentProvider();
		}
		return documentProvider;
	}

	/**
	 * @@generated
	 */
	public void logError(String error) {
		logError(error, null);
	}

	/**
	 * @@param throwable actual error or null could be passed
	 * @@generated
	 */
	public void logError(String error, Throwable throwable) {
		if (error == null && throwable != null) {
			error = throwable.getMessage();
		}
		getLog().log(new Status(IStatus.ERROR, GMFGraphDiagramEditorPlugin.ID, IStatus.OK, error, throwable));
		debug(error, throwable);
	}

	/**
	 * @@generated
	 */
	public void logInfo(String message) {
		logInfo(message, null);
	}

	/**
	 * @@param throwable actual error or null could be passed
	 * @@generated
	 */
	public void logInfo(String message, Throwable throwable) {
		if (message == null && throwable != null) {
			message = throwable.getMessage();
		}
		getLog().log(new Status(IStatus.INFO, GMFGraphDiagramEditorPlugin.ID, IStatus.OK, message, throwable));
		debug(message, throwable);
	}

	/**
	 * @@generated
	 */
	private void debug(String message, Throwable throwable) {
		if (!isDebugging()) {
			return;
		}
		if (message != null) {
			System.err.println(message);
		}
		if (throwable != null) {
			throwable.printStackTrace();
		}
	}
}
@


1.8
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d63 1
a63 1
	private GMFGraphDocumentProvider myDocumentProvider;
d193 2
a194 2
		if (myDocumentProvider == null) {
			myDocumentProvider = new GMFGraphDocumentProvider();
d196 1
a196 1
		return myDocumentProvider;
@


1.7
log
@[182339] akarjakina - provide different means to select parts of composite figures
Visible insets for top-level figures, custom popup action with nested submenus, simple handles behavior
@
text
@d2 8
a9 8
 * Copyright (c) 2006, 2007 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d21 1
a27 1
import org.eclipse.gmf.gmfgraph.provider.GMFGraphItemProviderAdapterFactory;
d33 1
d135 3
a137 3
	 * Returns an image descriptor for the image file at the given plug-in
	 * relative path.
	 * 
d139 1
a139 2
	 * @@param path
	 *            the path
d147 6
a152 8
	 * Respects images residing in any plug-in. If path is relative, then this
	 * bundle is looked up for the image, otherwise, for absolute path, first
	 * segment is taken as id of plug-in with image
	 * 
	 * @@generated
	 * @@param path
	 *            the path to image, either absolute (with plug-in id as first
	 *            segment), or relative for bundled images
a165 1
	 * 
d174 2
a175 3
	 * Client do not need to dispose this image. Images will be disposed
	 * automatically.
	 * 
d177 1
a177 2
	 * @@param path
	 *            the path
d207 1
a207 2
	 * @@param throwable
	 *            actual error or null could be passed
d226 1
a226 2
	 * @@param throwable
	 *            actual error or null could be passed
@


1.6
log
@[176026] akarjakina - Fix notation background and foreground colors update
[173499] akarjakina - Add custom form-based property sections fro figure attributes
@
text
@a20 1

d27 1
a32 1
import org.eclipse.gmf.gmfgraph.provider.GMFGraphItemProviderAdapterFactory;
@


1.5
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d135 3
a137 3
	 * Returns an image descriptor for the image file at the given
	 * plug-in relative path.
	 *
d139 2
a140 1
	 * @@param path the path
d148 8
a155 6
	 * Respects images residing in any plug-in. If path is relative,
	 * then this bundle is looked up for the image, otherwise, for absolute 
	 * path, first segment is taken as id of plug-in with image
	 *
	 * @@generated
	 * @@param path the path to image, either absolute (with plug-in id as first segment), or relative for bundled images
d169 1
d178 3
a180 2
	 * Client do not need to dispose this image. Images will be disposed automatically.
	 *
d182 2
a183 1
	 * @@param path the path
d213 2
a214 1
	 * @@param throwable actual error or null could be passed
d233 2
a234 1
	 * @@param throwable actual error or null could be passed
@


1.4
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
d19 1
d63 5
d165 8
d192 10
d230 1
a230 1
		if (message == null && message != null) {
a250 1

@


1.3
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
@


1.2
log
@Updating with latest changes in templates + palette.
@
text
@d1 10
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d6 1
d8 1
d131 18
@

