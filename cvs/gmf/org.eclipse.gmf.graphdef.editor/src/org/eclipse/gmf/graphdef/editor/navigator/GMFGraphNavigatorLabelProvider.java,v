head	1.9;
access;
symbols
	v20080722-1827:1.9
	v20080718-1700:1.8
	v20080718-1731:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080528-1052:1.7
	v20080521:1.6
	v20080516-1143:1.6
	v20080512-1200:1.6
	v20080510-0100:1.6
	v20080507-1326:1.6
	v20080501-1739:1.6
	v20080425-1959:1.6
	v20080411-0411:1.6
	v20080404-1111:1.6
	v20080322-0000:1.6
	v20080114-2222:1.3
	v20071214-1111:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070520-1200:1.2
	v20070420-1000:1.2
	v20070405-2000:1.2
	v20070405-1100:1.2
	v20070330-1300:1.1
	v20070307-0700:1.1
	v20070221-1500:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2008.07.02.15.20.47;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	703486b9cc54567;

1.8
date	2008.05.30.17.14.49;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	70b4484036034567;

1.7
date	2008.05.27.12.28.09;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	68fd483bfe544567;

1.6
date	2008.03.13.17.56.06;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	54b147d96ab34567;

1.5
date	2008.03.07.12.50.34;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	179447d13a164567;

1.4
date	2008.02.22.13.08.01;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	4c5647bec9294567;

1.3
date	2007.05.31.15.52.30;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	49f1465eef2c4567;

1.2
date	2007.04.04.20.23.26;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	ade461409204567;

1.1
date	2007.02.09.20.08.30;	author atikhomirov;	state Exp;
branches;
next	;
commitid	179c45ccd4b34567;


desc
@@


1.9
log
@[233207] - Support Label figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.navigator;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.ChildAccess;
import org.eclipse.gmf.gmfgraph.Ellipse;
import org.eclipse.gmf.gmfgraph.Label;
import org.eclipse.gmf.gmfgraph.Point;
import org.eclipse.gmf.gmfgraph.Polygon;
import org.eclipse.gmf.gmfgraph.Polyline;
import org.eclipse.gmf.gmfgraph.Rectangle;
import org.eclipse.gmf.gmfgraph.RoundedRectangle;
import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ChildAccessEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentAccessorEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramElementFigureEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelAccessorEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.EllipseEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Label2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Label3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelText2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelText3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelTextEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeContentPaneEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PointEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polygon2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polygon3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolygonEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolylineEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RectangleEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangleEditPart;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;
import org.eclipse.gmf.graphdef.editor.providers.GMFGraphParserProvider;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserService;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.resource.ImageRegistry;
import org.eclipse.jface.viewers.ITreePathLabelProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.TreePath;
import org.eclipse.jface.viewers.ViewerLabel;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.IMemento;
import org.eclipse.ui.navigator.ICommonContentExtensionSite;
import org.eclipse.ui.navigator.ICommonLabelProvider;

/**
 * @@generated
 */
public class GMFGraphNavigatorLabelProvider extends LabelProvider implements ICommonLabelProvider, ITreePathLabelProvider {

	/**
	 * @@generated
	 */
	static {
		GMFGraphDiagramEditorPlugin.getInstance().getImageRegistry().put("Navigator?UnknownElement", ImageDescriptor.getMissingImageDescriptor()); //$NON-NLS-1$
		GMFGraphDiagramEditorPlugin.getInstance().getImageRegistry().put("Navigator?ImageNotFound", ImageDescriptor.getMissingImageDescriptor()); //$NON-NLS-1$
	}

	/**
	 * @@generated
	 */
	public void updateLabel(ViewerLabel label, TreePath elementPath) {
		Object element = elementPath.getLastSegment();
		if (element instanceof GMFGraphNavigatorItem && !isOwnView(((GMFGraphNavigatorItem) element).getView())) {
			return;
		}
		label.setText(getText(element));
		label.setImage(getImage(element));
	}

	/**
	 * @@generated
	 */
	public Image getImage(Object element) {
		if (element instanceof GMFGraphNavigatorGroup) {
			GMFGraphNavigatorGroup group = (GMFGraphNavigatorGroup) element;
			return GMFGraphDiagramEditorPlugin.getInstance().getBundledImage(group.getIcon());
		}

		if (element instanceof GMFGraphNavigatorItem) {
			GMFGraphNavigatorItem navigatorItem = (GMFGraphNavigatorItem) element;
			if (!isOwnView(navigatorItem.getView())) {
				return super.getImage(element);
			}
			return getImage(navigatorItem.getView());
		}

		// Due to plugin.xml content will be called only for "own" views
		if (element instanceof IAdaptable) {
			View view = (View) ((IAdaptable) element).getAdapter(View.class);
			if (view != null && isOwnView(view)) {
				return getImage(view);
			}
		}

		return super.getImage(element);
	}

	/**
	 * @@generated
	 */
	public Image getImage(View view) {
		switch (GMFGraphVisualIDRegistry.getVisualID(view)) {
		case CanvasEditPart.VISUAL_ID:
			return getImage("Navigator?Diagram?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Canvas", GMFGraphElementTypes.Canvas_1000); //$NON-NLS-1$
		case CompartmentEditPart.VISUAL_ID:
			return getImage("Navigator?TopLevelNode?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Compartment", GMFGraphElementTypes.Compartment_2005); //$NON-NLS-1$
		case NodeEditPart.VISUAL_ID:
			return getImage("Navigator?TopLevelNode?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Node", GMFGraphElementTypes.Node_2006); //$NON-NLS-1$
		case ConnectionEditPart.VISUAL_ID:
			return getImage("Navigator?TopLevelNode?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Connection", GMFGraphElementTypes.Connection_2007); //$NON-NLS-1$
		case FigureGalleryEditPart.VISUAL_ID:
			return getImage("Navigator?TopLevelNode?http://www.eclipse.org/gmf/2006/GraphicalDefinition?FigureGallery", GMFGraphElementTypes.FigureGallery_2008); //$NON-NLS-1$
		case DiagramLabelEditPart.VISUAL_ID:
			return getImage("Navigator?TopLevelNode?http://www.eclipse.org/gmf/2006/GraphicalDefinition?DiagramLabel", GMFGraphElementTypes.DiagramLabel_2009); //$NON-NLS-1$
		case FigureDescriptorEditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?FigureDescriptor", GMFGraphElementTypes.FigureDescriptor_3009); //$NON-NLS-1$
		case RectangleEditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Rectangle", GMFGraphElementTypes.Rectangle_3010); //$NON-NLS-1$
		case Rectangle2EditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Rectangle", GMFGraphElementTypes.Rectangle_3011); //$NON-NLS-1$
		case EllipseEditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Ellipse", GMFGraphElementTypes.Ellipse_3012); //$NON-NLS-1$
		case RoundedRectangleEditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?RoundedRectangle", GMFGraphElementTypes.RoundedRectangle_3013); //$NON-NLS-1$
		case PolylineEditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Polyline", GMFGraphElementTypes.Polyline_3014); //$NON-NLS-1$
		case PointEditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Point", GMFGraphElementTypes.Point_3022); //$NON-NLS-1$
		case PolygonEditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Polygon", GMFGraphElementTypes.Polygon_3023); //$NON-NLS-1$
		case LabelEditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Label", GMFGraphElementTypes.Label_3026); //$NON-NLS-1$
		case Ellipse2EditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Ellipse", GMFGraphElementTypes.Ellipse_3015); //$NON-NLS-1$
		case RoundedRectangle2EditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?RoundedRectangle", GMFGraphElementTypes.RoundedRectangle_3016); //$NON-NLS-1$
		case Polyline2EditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Polyline", GMFGraphElementTypes.Polyline_3017); //$NON-NLS-1$
		case Polygon2EditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Polygon", GMFGraphElementTypes.Polygon_3024); //$NON-NLS-1$
		case Label2EditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Label", GMFGraphElementTypes.Label_3027); //$NON-NLS-1$
		case Rectangle3EditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Rectangle", GMFGraphElementTypes.Rectangle_3018); //$NON-NLS-1$
		case Ellipse3EditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Ellipse", GMFGraphElementTypes.Ellipse_3019); //$NON-NLS-1$
		case RoundedRectangle3EditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?RoundedRectangle", GMFGraphElementTypes.RoundedRectangle_3020); //$NON-NLS-1$
		case Polyline3EditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Polyline", GMFGraphElementTypes.Polyline_3021); //$NON-NLS-1$
		case Polygon3EditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Polygon", GMFGraphElementTypes.Polygon_3025); //$NON-NLS-1$
		case Label3EditPart.VISUAL_ID:
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Label", GMFGraphElementTypes.Label_3028); //$NON-NLS-1$
		case ChildAccessEditPart.VISUAL_ID:
			return getImage("Navigator?Link?http://www.eclipse.org/gmf/2006/GraphicalDefinition?ChildAccess", GMFGraphElementTypes.ChildAccess_4002); //$NON-NLS-1$
		case CompartmentAccessorEditPart.VISUAL_ID:
			return getImage("Navigator?Link?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Compartment?accessor", GMFGraphElementTypes.CompartmentAccessor_4003); //$NON-NLS-1$
		case DiagramLabelAccessorEditPart.VISUAL_ID:
			return getImage("Navigator?Link?http://www.eclipse.org/gmf/2006/GraphicalDefinition?DiagramLabel?accessor", GMFGraphElementTypes.DiagramLabelAccessor_4004); //$NON-NLS-1$
		case NodeContentPaneEditPart.VISUAL_ID:
			return getImage("Navigator?Link?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Node?contentPane", GMFGraphElementTypes.NodeContentPane_4006); //$NON-NLS-1$
		case DiagramElementFigureEditPart.VISUAL_ID:
			return getImage("Navigator?Link?http://www.eclipse.org/gmf/2006/GraphicalDefinition?DiagramElement?figure", GMFGraphElementTypes.DiagramElementFigure_4005); //$NON-NLS-1$
		}
		return getImage("Navigator?UnknownElement", null); //$NON-NLS-1$
	}

	/**
	 * @@generated
	 */
	private Image getImage(String key, IElementType elementType) {
		ImageRegistry imageRegistry = GMFGraphDiagramEditorPlugin.getInstance().getImageRegistry();
		Image image = imageRegistry.get(key);
		if (image == null && elementType != null && GMFGraphElementTypes.isKnownElementType(elementType)) {
			image = GMFGraphElementTypes.getImage(elementType);
			imageRegistry.put(key, image);
		}

		if (image == null) {
			image = imageRegistry.get("Navigator?ImageNotFound"); //$NON-NLS-1$
			imageRegistry.put(key, image);
		}
		return image;
	}

	/**
	 * @@generated
	 */
	public String getText(Object element) {
		if (element instanceof GMFGraphNavigatorGroup) {
			GMFGraphNavigatorGroup group = (GMFGraphNavigatorGroup) element;
			return group.getGroupName();
		}

		if (element instanceof GMFGraphNavigatorItem) {
			GMFGraphNavigatorItem navigatorItem = (GMFGraphNavigatorItem) element;
			if (!isOwnView(navigatorItem.getView())) {
				return null;
			}
			return getText(navigatorItem.getView());
		}

		// Due to plugin.xml content will be called only for "own" views
		if (element instanceof IAdaptable) {
			View view = (View) ((IAdaptable) element).getAdapter(View.class);
			if (view != null && isOwnView(view)) {
				return getText(view);
			}
		}

		return super.getText(element);
	}

	/**
	 * @@generated
	 */
	public String getText(View view) {
		if (view.getElement() != null && view.getElement().eIsProxy()) {
			return getUnresolvedDomainElementProxyText(view);
		}
		switch (GMFGraphVisualIDRegistry.getVisualID(view)) {
		case CanvasEditPart.VISUAL_ID:
			return getCanvas_1000Text(view);
		case CompartmentEditPart.VISUAL_ID:
			return getCompartment_2005Text(view);
		case NodeEditPart.VISUAL_ID:
			return getNode_2006Text(view);
		case ConnectionEditPart.VISUAL_ID:
			return getConnection_2007Text(view);
		case FigureGalleryEditPart.VISUAL_ID:
			return getFigureGallery_2008Text(view);
		case DiagramLabelEditPart.VISUAL_ID:
			return getDiagramLabel_2009Text(view);
		case FigureDescriptorEditPart.VISUAL_ID:
			return getFigureDescriptor_3009Text(view);
		case RectangleEditPart.VISUAL_ID:
			return getRectangle_3010Text(view);
		case Rectangle2EditPart.VISUAL_ID:
			return getRectangle_3011Text(view);
		case EllipseEditPart.VISUAL_ID:
			return getEllipse_3012Text(view);
		case RoundedRectangleEditPart.VISUAL_ID:
			return getRoundedRectangle_3013Text(view);
		case PolylineEditPart.VISUAL_ID:
			return getPolyline_3014Text(view);
		case PointEditPart.VISUAL_ID:
			return getPoint_3022Text(view);
		case PolygonEditPart.VISUAL_ID:
			return getPolygon_3023Text(view);
		case LabelEditPart.VISUAL_ID:
			return getLabel_3026Text(view);
		case Ellipse2EditPart.VISUAL_ID:
			return getEllipse_3015Text(view);
		case RoundedRectangle2EditPart.VISUAL_ID:
			return getRoundedRectangle_3016Text(view);
		case Polyline2EditPart.VISUAL_ID:
			return getPolyline_3017Text(view);
		case Polygon2EditPart.VISUAL_ID:
			return getPolygon_3024Text(view);
		case Label2EditPart.VISUAL_ID:
			return getLabel_3027Text(view);
		case Rectangle3EditPart.VISUAL_ID:
			return getRectangle_3018Text(view);
		case Ellipse3EditPart.VISUAL_ID:
			return getEllipse_3019Text(view);
		case RoundedRectangle3EditPart.VISUAL_ID:
			return getRoundedRectangle_3020Text(view);
		case Polyline3EditPart.VISUAL_ID:
			return getPolyline_3021Text(view);
		case Polygon3EditPart.VISUAL_ID:
			return getPolygon_3025Text(view);
		case Label3EditPart.VISUAL_ID:
			return getLabel_3028Text(view);
		case ChildAccessEditPart.VISUAL_ID:
			return getChildAccess_4002Text(view);
		case CompartmentAccessorEditPart.VISUAL_ID:
			return getCompartmentAccessor_4003Text(view);
		case DiagramLabelAccessorEditPart.VISUAL_ID:
			return getDiagramLabelAccessor_4004Text(view);
		case NodeContentPaneEditPart.VISUAL_ID:
			return getNodeContentPane_4006Text(view);
		case DiagramElementFigureEditPart.VISUAL_ID:
			return getDiagramElementFigure_4005Text(view);
		}
		return getUnknownElementText(view);
	}

	/**
	 * @@generated
	 */
	private String getCompartment_2005Text(View view) {
		IAdaptable hintAdapter = new GMFGraphParserProvider.HintAdapter(GMFGraphElementTypes.Compartment_2005, (view.getElement() != null ? view.getElement() : view), GMFGraphVisualIDRegistry
				.getType(CompartmentNameEditPart.VISUAL_ID));
		IParser parser = ParserService.getInstance().getParser(hintAdapter);

		if (parser != null) {
			return parser.getPrintString(hintAdapter, ParserOptions.NONE.intValue());
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5005); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}

	}

	/**
	 * @@generated
	 */
	private String getNode_2006Text(View view) {
		IAdaptable hintAdapter = new GMFGraphParserProvider.HintAdapter(GMFGraphElementTypes.Node_2006, (view.getElement() != null ? view.getElement() : view), GMFGraphVisualIDRegistry
				.getType(NodeNameEditPart.VISUAL_ID));
		IParser parser = ParserService.getInstance().getParser(hintAdapter);

		if (parser != null) {
			return parser.getPrintString(hintAdapter, ParserOptions.NONE.intValue());
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5006); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}

	}

	/**
	 * @@generated
	 */
	private String getConnection_2007Text(View view) {
		IAdaptable hintAdapter = new GMFGraphParserProvider.HintAdapter(GMFGraphElementTypes.Connection_2007, (view.getElement() != null ? view.getElement() : view), GMFGraphVisualIDRegistry
				.getType(ConnectionNameEditPart.VISUAL_ID));
		IParser parser = ParserService.getInstance().getParser(hintAdapter);

		if (parser != null) {
			return parser.getPrintString(hintAdapter, ParserOptions.NONE.intValue());
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5007); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}

	}

	/**
	 * @@generated
	 */
	private String getFigureGallery_2008Text(View view) {
		IAdaptable hintAdapter = new GMFGraphParserProvider.HintAdapter(GMFGraphElementTypes.FigureGallery_2008, (view.getElement() != null ? view.getElement() : view), GMFGraphVisualIDRegistry
				.getType(FigureGalleryNameEditPart.VISUAL_ID));
		IParser parser = ParserService.getInstance().getParser(hintAdapter);

		if (parser != null) {
			return parser.getPrintString(hintAdapter, ParserOptions.NONE.intValue());
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5009); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}

	}

	/**
	 * @@generated
	 */
	private String getDiagramLabel_2009Text(View view) {
		IAdaptable hintAdapter = new GMFGraphParserProvider.HintAdapter(GMFGraphElementTypes.DiagramLabel_2009, (view.getElement() != null ? view.getElement() : view), GMFGraphVisualIDRegistry
				.getType(DiagramLabelNameEditPart.VISUAL_ID));
		IParser parser = ParserService.getInstance().getParser(hintAdapter);

		if (parser != null) {
			return parser.getPrintString(hintAdapter, ParserOptions.NONE.intValue());
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5013); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}

	}

	/**
	 * @@generated
	 */
	private String getFigureDescriptor_3009Text(View view) {
		IAdaptable hintAdapter = new GMFGraphParserProvider.HintAdapter(GMFGraphElementTypes.FigureDescriptor_3009, (view.getElement() != null ? view.getElement() : view), GMFGraphVisualIDRegistry
				.getType(FigureDescriptorNameEditPart.VISUAL_ID));
		IParser parser = ParserService.getInstance().getParser(hintAdapter);

		if (parser != null) {
			return parser.getPrintString(hintAdapter, ParserOptions.NONE.intValue());
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5008); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}

	}

	/**
	 * @@generated
	 */
	private String getRectangle_3010Text(View view) {
		Rectangle domainModelElement = (Rectangle) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3010); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getRectangle_3011Text(View view) {
		Rectangle domainModelElement = (Rectangle) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3011); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getEllipse_3012Text(View view) {
		Ellipse domainModelElement = (Ellipse) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3012); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getRoundedRectangle_3013Text(View view) {
		RoundedRectangle domainModelElement = (RoundedRectangle) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3013); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getPolyline_3014Text(View view) {
		Polyline domainModelElement = (Polyline) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3014); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getPoint_3022Text(View view) {
		Point domainModelElement = (Point) view.getElement();
		if (domainModelElement != null) {
			return String.valueOf(domainModelElement.getX());
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3022); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getPolygon_3023Text(View view) {
		Polygon domainModelElement = (Polygon) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3023); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getLabel_3026Text(View view) {
		IAdaptable hintAdapter = new GMFGraphParserProvider.HintAdapter(GMFGraphElementTypes.Label_3026, (view.getElement() != null ? view.getElement() : view), GMFGraphVisualIDRegistry
				.getType(LabelTextEditPart.VISUAL_ID));
		IParser parser = ParserService.getInstance().getParser(hintAdapter);

		if (parser != null) {
			return parser.getPrintString(hintAdapter, ParserOptions.NONE.intValue());
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5010); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}

	}

	/**
	 * @@generated
	 */
	private String getEllipse_3015Text(View view) {
		Ellipse domainModelElement = (Ellipse) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3015); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getRoundedRectangle_3016Text(View view) {
		RoundedRectangle domainModelElement = (RoundedRectangle) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3016); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getPolyline_3017Text(View view) {
		Polyline domainModelElement = (Polyline) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3017); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getPolygon_3024Text(View view) {
		Polygon domainModelElement = (Polygon) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3024); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getLabel_3027Text(View view) {
		IAdaptable hintAdapter = new GMFGraphParserProvider.HintAdapter(GMFGraphElementTypes.Label_3027, (view.getElement() != null ? view.getElement() : view), GMFGraphVisualIDRegistry
				.getType(LabelText2EditPart.VISUAL_ID));
		IParser parser = ParserService.getInstance().getParser(hintAdapter);

		if (parser != null) {
			return parser.getPrintString(hintAdapter, ParserOptions.NONE.intValue());
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5011); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}

	}

	/**
	 * @@generated
	 */
	private String getRectangle_3018Text(View view) {
		Rectangle domainModelElement = (Rectangle) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3018); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getEllipse_3019Text(View view) {
		Ellipse domainModelElement = (Ellipse) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3019); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getRoundedRectangle_3020Text(View view) {
		RoundedRectangle domainModelElement = (RoundedRectangle) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3020); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getPolyline_3021Text(View view) {
		Polyline domainModelElement = (Polyline) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3021); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getPolygon_3025Text(View view) {
		Polygon domainModelElement = (Polygon) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3025); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getLabel_3028Text(View view) {
		IAdaptable hintAdapter = new GMFGraphParserProvider.HintAdapter(GMFGraphElementTypes.Label_3028, (view.getElement() != null ? view.getElement() : view), GMFGraphVisualIDRegistry
				.getType(LabelText3EditPart.VISUAL_ID));
		IParser parser = ParserService.getInstance().getParser(hintAdapter);

		if (parser != null) {
			return parser.getPrintString(hintAdapter, ParserOptions.NONE.intValue());
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5012); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}

	}

	/**
	 * @@generated
	 */
	private String getCanvas_1000Text(View view) {
		Canvas domainModelElement = (Canvas) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getName();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 1000); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getChildAccess_4002Text(View view) {
		ChildAccess domainModelElement = (ChildAccess) view.getElement();
		if (domainModelElement != null) {
			return domainModelElement.getAccessor();
		} else {
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 4002); //$NON-NLS-1$
			return ""; //$NON-NLS-1$
		}
	}

	/**
	 * @@generated
	 */
	private String getCompartmentAccessor_4003Text(View view) {
		return ""; //$NON-NLS-1$
	}

	/**
	 * @@generated
	 */
	private String getDiagramLabelAccessor_4004Text(View view) {
		return ""; //$NON-NLS-1$
	}

	/**
	 * @@generated
	 */
	private String getNodeContentPane_4006Text(View view) {
		return ""; //$NON-NLS-1$
	}

	/**
	 * @@generated
	 */
	private String getDiagramElementFigure_4005Text(View view) {
		return ""; //$NON-NLS-1$
	}

	/**
	 * @@generated
	 */
	private String getUnknownElementText(View view) {
		return "<UnknownElement Visual_ID = " + view.getType() + ">"; //$NON-NLS-1$ //$NON-NLS-2$
	}

	/**
	 * @@generated
	 */
	private String getUnresolvedDomainElementProxyText(View view) {
		return "<Unresolved domain element Visual_ID = " + view.getType() + ">"; //$NON-NLS-1$ //$NON-NLS-2$
	}

	/**
	 * @@generated
	 */
	public void init(ICommonContentExtensionSite aConfig) {
	}

	/**
	 * @@generated
	 */
	public void restoreState(IMemento aMemento) {
	}

	/**
	 * @@generated
	 */
	public void saveState(IMemento aMemento) {
	}

	/**
	 * @@generated
	 */
	public String getDescription(Object anElement) {
		return null;
	}

	/**
	 * @@generated
	 */
	private boolean isOwnView(View view) {
		return CanvasEditPart.MODEL_ID.equals(GMFGraphVisualIDRegistry.getModelID(view));
	}

}
@


1.8
log
@[233206] - Support Polygon figure in .gmfgraph editor
@
text
@d17 1
d32 2
d41 6
d151 2
d169 2
d179 2
d191 2
d271 2
d289 2
d299 2
d311 2
d398 17
d523 17
d592 17
d674 17
@


1.7
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d18 1
d42 3
d156 2
d164 2
d174 2
d268 2
d276 2
d286 2
d468 13
d520 13
d585 13
@


1.6
log
@node content pane link to child accessor added.
@
text
@d17 1
d40 1
d150 2
d256 2
d439 13
@


1.5
log
@Updating with new figures code + setting proper layout for diahram elements
@
text
@d36 1
d168 2
d272 2
d564 7
@


1.4
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@a13 3

import org.eclipse.emf.ecore.EObject;

a16 1
import org.eclipse.gmf.gmfgraph.Identity;
a17 2
import org.eclipse.gmf.gmfgraph.RealFigure;

a46 1

a48 1

a50 1

a53 1

a54 1

a55 1

a57 1

a61 1

a62 1

a63 1

@


1.3
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d17 1
d19 1
d21 1
d24 2
d92 2
a93 3
		GMFGraphDiagramEditorPlugin.getInstance().getImageRegistry().put("Navigator?InvalidElement", ImageDescriptor.getMissingImageDescriptor());
		GMFGraphDiagramEditorPlugin.getInstance().getImageRegistry().put("Navigator?UnknownElement", ImageDescriptor.getMissingImageDescriptor());
		GMFGraphDiagramEditorPlugin.getInstance().getImageRegistry().put("Navigator?ImageNotFound", ImageDescriptor.getMissingImageDescriptor());
d132 1
d141 2
d144 1
a144 1
			return getImage("Navigator?TopLevelNode?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Compartment", GMFGraphElementTypes.Compartment_2005);
d146 1
a146 1
			return getImage("Navigator?TopLevelNode?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Node", GMFGraphElementTypes.Node_2006);
d148 1
a148 1
			return getImage("Navigator?TopLevelNode?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Connection", GMFGraphElementTypes.Connection_2007);
d150 1
a150 1
			return getImage("Navigator?TopLevelNode?http://www.eclipse.org/gmf/2006/GraphicalDefinition?FigureGallery", GMFGraphElementTypes.FigureGallery_2008);
d152 1
a152 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?FigureDescriptor", GMFGraphElementTypes.FigureDescriptor_3009);
d154 1
a154 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Rectangle", GMFGraphElementTypes.Rectangle_3010);
d156 1
a156 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Rectangle", GMFGraphElementTypes.Rectangle_3011);
d158 1
a158 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Ellipse", GMFGraphElementTypes.Ellipse_3012);
d160 1
a160 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?RoundedRectangle", GMFGraphElementTypes.RoundedRectangle_3013);
d162 1
a162 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Polyline", GMFGraphElementTypes.Polyline_3014);
d164 1
a164 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Ellipse", GMFGraphElementTypes.Ellipse_3015);
d166 1
a166 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?RoundedRectangle", GMFGraphElementTypes.RoundedRectangle_3016);
d168 1
a168 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Polyline", GMFGraphElementTypes.Polyline_3017);
d170 1
a170 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Rectangle", GMFGraphElementTypes.Rectangle_3018);
d172 1
a172 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Ellipse", GMFGraphElementTypes.Ellipse_3019);
d174 1
a174 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?RoundedRectangle", GMFGraphElementTypes.RoundedRectangle_3020);
d176 1
a176 3
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Polyline", GMFGraphElementTypes.Polyline_3021);
		case CanvasEditPart.VISUAL_ID:
			return getImage("Navigator?Diagram?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Canvas", GMFGraphElementTypes.Canvas_1000);
d178 1
a178 1
			return getImage("Navigator?Link?http://www.eclipse.org/gmf/2006/GraphicalDefinition?ChildAccess", GMFGraphElementTypes.ChildAccess_4002);
d180 1
a180 1
			return getImage("Navigator?Link?http://www.eclipse.org/gmf/2006/GraphicalDefinition?Compartment?accessor", GMFGraphElementTypes.CompartmentAccessor_4003);
d182 1
a182 1
			return getImage("Navigator?Link?http://www.eclipse.org/gmf/2006/GraphicalDefinition?DiagramLabel?accessor", GMFGraphElementTypes.DiagramLabelAccessor_4004);
d184 1
a184 3
			return getImage("Navigator?Link?http://www.eclipse.org/gmf/2006/GraphicalDefinition?DiagramElement?figure", GMFGraphElementTypes.DiagramElementFigure_4005);
		default:
			return getImage("Navigator?UnknownElement", null);
d186 1
d201 1
a201 1
			image = imageRegistry.get("Navigator?ImageNotFound");
d231 1
d243 2
a278 2
		case CanvasEditPart.VISUAL_ID:
			return getCanvas_1000Text(view);
a286 2
		default:
			return getUnknownElementText(view);
d288 1
d302 2
a303 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5005);
			return "";
d305 1
d319 2
a320 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5006);
			return "";
d322 1
d336 2
a337 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5007);
			return "";
d339 1
d353 2
a354 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5009);
			return "";
d356 1
d370 2
a371 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5008);
			return "";
d373 1
d380 1
a380 1
		EObject domainModelElement = view.getElement();
d382 1
a382 1
			return ((RealFigure) domainModelElement).getName();
d384 2
a385 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3010);
			return "";
d393 1
a393 1
		EObject domainModelElement = view.getElement();
d395 1
a395 1
			return ((RealFigure) domainModelElement).getName();
d397 2
a398 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3011);
			return "";
d406 1
a406 1
		EObject domainModelElement = view.getElement();
d408 1
a408 1
			return ((RealFigure) domainModelElement).getName();
d410 2
a411 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3012);
			return "";
d419 1
a419 1
		EObject domainModelElement = view.getElement();
d421 1
a421 1
			return ((RealFigure) domainModelElement).getName();
d423 2
a424 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3013);
			return "";
d432 1
a432 1
		EObject domainModelElement = view.getElement();
d434 1
a434 1
			return ((RealFigure) domainModelElement).getName();
d436 2
a437 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3014);
			return "";
d445 1
a445 1
		EObject domainModelElement = view.getElement();
d447 1
a447 1
			return ((RealFigure) domainModelElement).getName();
d449 2
a450 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3015);
			return "";
d458 1
a458 1
		EObject domainModelElement = view.getElement();
d460 1
a460 1
			return ((RealFigure) domainModelElement).getName();
d462 2
a463 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3016);
			return "";
d471 1
a471 1
		EObject domainModelElement = view.getElement();
d473 1
a473 1
			return ((RealFigure) domainModelElement).getName();
d475 2
a476 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3017);
			return "";
d484 1
a484 1
		EObject domainModelElement = view.getElement();
d486 1
a486 1
			return ((RealFigure) domainModelElement).getName();
d488 2
a489 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3018);
			return "";
d497 1
a497 1
		EObject domainModelElement = view.getElement();
d499 1
a499 1
			return ((RealFigure) domainModelElement).getName();
d501 2
a502 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3019);
			return "";
d510 1
a510 1
		EObject domainModelElement = view.getElement();
d512 1
a512 1
			return ((RealFigure) domainModelElement).getName();
d514 2
a515 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3020);
			return "";
d523 1
a523 1
		EObject domainModelElement = view.getElement();
d525 1
a525 1
			return ((RealFigure) domainModelElement).getName();
d527 2
a528 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3021);
			return "";
d536 1
a536 1
		EObject domainModelElement = view.getElement();
d538 1
a538 1
			return ((Identity) domainModelElement).getName();
d540 2
a541 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 1000);
			return "";
d549 1
a549 1
		EObject domainModelElement = view.getElement();
d551 1
a551 1
			return ((ChildAccess) domainModelElement).getAccessor();
d553 2
a554 2
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 4002);
			return "";
d562 1
a562 1
		return "";
d569 1
a569 1
		return "";
d576 1
a576 1
		return "";
d583 1
a583 1
		return "<UnknownElement Visual_ID = " + view.getType() + ">";
d590 1
a590 1
		return "<Unresolved domain element Visual_ID = " + view.getType() + ">";
@


1.2
log
@[173499] akarjakina - Enhance graphdef.editor with properties - use custom model to describe property sheet and generate PropertyTab code from that model
@
text
@d2 8
a9 8
 * Copyright (c) 2006, 2007 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d17 1
d19 1
d22 2
d29 1
d31 1
d33 2
d40 1
d43 1
d46 1
d53 1
a58 2
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;

d137 1
a137 1
			return getImage("Navigator?TopLevelNode?http://www.eclipse.org/gmf/2005/GraphicalDefinition?Compartment", GMFGraphElementTypes.Compartment_2001);
d139 1
a139 1
			return getImage("Navigator?TopLevelNode?http://www.eclipse.org/gmf/2005/GraphicalDefinition?Node", GMFGraphElementTypes.Node_2002);
d141 1
a141 1
			return getImage("Navigator?TopLevelNode?http://www.eclipse.org/gmf/2005/GraphicalDefinition?Connection", GMFGraphElementTypes.Connection_2003);
d143 3
a145 1
			return getImage("Navigator?TopLevelNode?http://www.eclipse.org/gmf/2005/GraphicalDefinition?FigureGallery", GMFGraphElementTypes.FigureGallery_2004);
d147 1
a147 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2005/GraphicalDefinition?Rectangle", GMFGraphElementTypes.Rectangle_3001);
d149 1
a149 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2005/GraphicalDefinition?Rectangle", GMFGraphElementTypes.Rectangle_3002);
d151 1
a151 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2005/GraphicalDefinition?Ellipse", GMFGraphElementTypes.Ellipse_3003);
d153 1
a153 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2005/GraphicalDefinition?RoundedRectangle", GMFGraphElementTypes.RoundedRectangle_3004);
d155 1
a155 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2005/GraphicalDefinition?Polyline", GMFGraphElementTypes.Polyline_3005);
d157 1
a157 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2005/GraphicalDefinition?Ellipse", GMFGraphElementTypes.Ellipse_3006);
d159 1
a159 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2005/GraphicalDefinition?RoundedRectangle", GMFGraphElementTypes.RoundedRectangle_3007);
d161 9
a169 1
			return getImage("Navigator?Node?http://www.eclipse.org/gmf/2005/GraphicalDefinition?Polyline", GMFGraphElementTypes.Polyline_3008);
d171 7
a177 1
			return getImage("Navigator?Diagram?http://www.eclipse.org/gmf/2005/GraphicalDefinition?Canvas", GMFGraphElementTypes.Canvas_1000);
d179 1
a179 1
			return getImage("Navigator?Link?http://www.eclipse.org/gmf/2005/GraphicalDefinition?DiagramElement?figure", GMFGraphElementTypes.DiagramElementFigure_4001);
d239 1
a239 1
			return getCompartment_2001Text(view);
d241 1
a241 1
			return getNode_2002Text(view);
d243 1
a243 1
			return getConnection_2003Text(view);
d245 3
a247 1
			return getFigureGallery_2004Text(view);
d249 1
a249 1
			return getRectangle_3001Text(view);
d251 1
a251 1
			return getRectangle_3002Text(view);
d253 1
a253 1
			return getEllipse_3003Text(view);
d255 1
a255 1
			return getRoundedRectangle_3004Text(view);
d257 1
a257 1
			return getPolyline_3005Text(view);
d259 1
a259 1
			return getEllipse_3006Text(view);
d261 1
a261 1
			return getRoundedRectangle_3007Text(view);
d263 9
a271 1
			return getPolyline_3008Text(view);
d274 6
d281 1
a281 1
			return getDiagramElementFigure_4001Text(view);
d290 20
a309 2
	private String getCompartment_2001Text(View view) {
		IParser parser = ParserService.getInstance().getParser(new IAdaptable() {
a310 10
			public Object getAdapter(Class adapter) {
				if (String.class.equals(adapter)) {
					return GMFGraphVisualIDRegistry.getType(CompartmentNameEditPart.VISUAL_ID);
				}
				if (IElementType.class.equals(adapter)) {
					return GMFGraphElementTypes.Compartment_2001;
				}
				return null;
			}
		});
d312 1
a312 1
			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view), ParserOptions.NONE.intValue());
d314 1
a314 1
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5001);
d322 4
a325 2
	private String getNode_2002Text(View view) {
		IParser parser = ParserService.getInstance().getParser(new IAdaptable() {
a326 10
			public Object getAdapter(Class adapter) {
				if (String.class.equals(adapter)) {
					return GMFGraphVisualIDRegistry.getType(NodeNameEditPart.VISUAL_ID);
				}
				if (IElementType.class.equals(adapter)) {
					return GMFGraphElementTypes.Node_2002;
				}
				return null;
			}
		});
d328 1
a328 1
			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view), ParserOptions.NONE.intValue());
d330 1
a330 1
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5002);
d338 4
a341 2
	private String getConnection_2003Text(View view) {
		IParser parser = ParserService.getInstance().getParser(new IAdaptable() {
a342 10
			public Object getAdapter(Class adapter) {
				if (String.class.equals(adapter)) {
					return GMFGraphVisualIDRegistry.getType(ConnectionNameEditPart.VISUAL_ID);
				}
				if (IElementType.class.equals(adapter)) {
					return GMFGraphElementTypes.Connection_2003;
				}
				return null;
			}
		});
d344 1
a344 1
			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view), ParserOptions.NONE.intValue());
d346 1
a346 1
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5003);
d354 4
a357 2
	private String getFigureGallery_2004Text(View view) {
		IParser parser = ParserService.getInstance().getParser(new IAdaptable() {
a358 10
			public Object getAdapter(Class adapter) {
				if (String.class.equals(adapter)) {
					return GMFGraphVisualIDRegistry.getType(FigureGalleryNameEditPart.VISUAL_ID);
				}
				if (IElementType.class.equals(adapter)) {
					return GMFGraphElementTypes.FigureGallery_2004;
				}
				return null;
			}
		});
d360 1
a360 1
			return parser.getPrintString(new EObjectAdapter(view.getElement() != null ? view.getElement() : view), ParserOptions.NONE.intValue());
d362 1
a362 1
			GMFGraphDiagramEditorPlugin.getInstance().logError("Parser was not found for label " + 5004);
d370 1
a370 1
	private String getRectangle_3001Text(View view) {
d373 53
a425 1
			return ((Identity) domainModelElement).getName();
d427 1
a427 1
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3001);
d435 1
a435 1
	private String getRectangle_3002Text(View view) {
d438 1
a438 1
			return ((Identity) domainModelElement).getName();
d440 1
a440 1
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3002);
d448 1
a448 1
	private String getEllipse_3003Text(View view) {
d451 1
a451 1
			return ((Identity) domainModelElement).getName();
d453 1
a453 1
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3003);
d461 1
a461 1
	private String getRoundedRectangle_3004Text(View view) {
d464 1
a464 1
			return ((Identity) domainModelElement).getName();
d466 1
a466 1
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3004);
d474 1
a474 1
	private String getPolyline_3005Text(View view) {
d477 1
a477 1
			return ((Identity) domainModelElement).getName();
d479 1
a479 1
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3005);
d487 1
a487 1
	private String getEllipse_3006Text(View view) {
d490 1
a490 1
			return ((Identity) domainModelElement).getName();
d492 1
a492 1
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3006);
d500 1
a500 1
	private String getRoundedRectangle_3007Text(View view) {
d503 1
a503 1
			return ((Identity) domainModelElement).getName();
d505 1
a505 1
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3007);
d513 1
a513 1
	private String getPolyline_3008Text(View view) {
d516 1
a516 1
			return ((Identity) domainModelElement).getName();
d518 1
a518 1
			GMFGraphDiagramEditorPlugin.getInstance().logError("No domain element for view with visualID = " + 3008);
d539 28
a566 1
	private String getDiagramElementFigure_4001Text(View view) {
@


1.1
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d208 3
d475 7
@

