head	1.11;
access;
symbols
	v20080722-1827:1.11
	v20080718-1700:1.10
	v20080718-1731:1.11
	v20080716-1642:1.11
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080603-1553:1.10
	v20080528-1052:1.9
	v20080521:1.8
	v20080516-1143:1.8
	v20080512-1200:1.8
	v20080510-0100:1.8
	v20080507-1326:1.8
	v20080501-1739:1.8
	v20080425-1959:1.8
	v20080411-0411:1.8
	v20080404-1111:1.8
	v20080322-0000:1.8
	v20080114-2222:1.6
	v20071214-1111:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070520-1200:1.5
	v20070420-1000:1.5
	v20070405-2000:1.5
	v20070405-1100:1.5
	v20070330-1300:1.5
	v20070307-0700:1.5
	v20070221-1500:1.5
	v20070208-1800:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	M1_20:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	RC2_10:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.11
date	2008.07.02.15.20.47;	author ashatalin;	state Exp;
branches;
next	1.10;
commitid	703486b9cc54567;

1.10
date	2008.05.30.17.14.49;	author ashatalin;	state Exp;
branches;
next	1.9;
commitid	70b4484036034567;

1.9
date	2008.05.27.12.28.09;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	68fd483bfe544567;

1.8
date	2008.03.13.17.56.06;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	54b147d96ab34567;

1.7
date	2008.02.22.13.08.02;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	4c5647bec9294567;

1.6
date	2007.05.31.15.52.32;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	49f1465eef2c4567;

1.5
date	2007.02.09.20.08.31;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	179c45ccd4b34567;

1.4
date	2006.06.08.08.40.35;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.02.15.08.30;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.30.13.06.14;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.27;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.11
log
@[233207] - Support Label figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.providers;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.dialogs.ElementListSelectionDialog;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.EllipseEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryFiguresEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polygon2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polygon3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolygonEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolylineEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RectangleEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangleEditPart;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;
import org.eclipse.gmf.graphdef.editor.part.Messages;

/**
 * @@generated
 */
public class GMFGraphModelingAssistantProvider extends ModelingAssistantProvider {

	/**
	 * @@generated
	 */
	public List getTypesForPopupBar(IAdaptable host) {
		IGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);
		if (editPart instanceof FigureDescriptorEditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Rectangle_3010);
			types.add(GMFGraphElementTypes.Ellipse_3015);
			types.add(GMFGraphElementTypes.RoundedRectangle_3016);
			types.add(GMFGraphElementTypes.Polyline_3017);
			types.add(GMFGraphElementTypes.Polygon_3024);
			types.add(GMFGraphElementTypes.Label_3027);
			return types;
		}
		if (editPart instanceof RectangleEditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Rectangle_3011);
			types.add(GMFGraphElementTypes.Ellipse_3012);
			types.add(GMFGraphElementTypes.RoundedRectangle_3013);
			types.add(GMFGraphElementTypes.Polyline_3014);
			types.add(GMFGraphElementTypes.Polygon_3023);
			types.add(GMFGraphElementTypes.Label_3026);
			return types;
		}
		if (editPart instanceof Rectangle2EditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Rectangle_3011);
			types.add(GMFGraphElementTypes.Ellipse_3012);
			types.add(GMFGraphElementTypes.RoundedRectangle_3013);
			types.add(GMFGraphElementTypes.Polyline_3014);
			types.add(GMFGraphElementTypes.Polygon_3023);
			types.add(GMFGraphElementTypes.Label_3026);
			return types;
		}
		if (editPart instanceof EllipseEditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Rectangle_3011);
			types.add(GMFGraphElementTypes.Ellipse_3012);
			types.add(GMFGraphElementTypes.RoundedRectangle_3013);
			types.add(GMFGraphElementTypes.Polyline_3014);
			types.add(GMFGraphElementTypes.Polygon_3023);
			types.add(GMFGraphElementTypes.Label_3026);
			return types;
		}
		if (editPart instanceof RoundedRectangleEditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Rectangle_3011);
			types.add(GMFGraphElementTypes.Ellipse_3012);
			types.add(GMFGraphElementTypes.RoundedRectangle_3013);
			types.add(GMFGraphElementTypes.Polyline_3014);
			types.add(GMFGraphElementTypes.Polygon_3023);
			types.add(GMFGraphElementTypes.Label_3026);
			return types;
		}
		if (editPart instanceof PolylineEditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Point_3022);
			return types;
		}
		if (editPart instanceof PolygonEditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Point_3022);
			return types;
		}
		if (editPart instanceof Ellipse2EditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Rectangle_3011);
			types.add(GMFGraphElementTypes.Ellipse_3012);
			types.add(GMFGraphElementTypes.RoundedRectangle_3013);
			types.add(GMFGraphElementTypes.Polyline_3014);
			types.add(GMFGraphElementTypes.Polygon_3023);
			types.add(GMFGraphElementTypes.Label_3026);
			return types;
		}
		if (editPart instanceof RoundedRectangle2EditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Rectangle_3011);
			types.add(GMFGraphElementTypes.Ellipse_3012);
			types.add(GMFGraphElementTypes.RoundedRectangle_3013);
			types.add(GMFGraphElementTypes.Polyline_3014);
			types.add(GMFGraphElementTypes.Polygon_3023);
			types.add(GMFGraphElementTypes.Label_3026);
			return types;
		}
		if (editPart instanceof Polyline2EditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Point_3022);
			return types;
		}
		if (editPart instanceof Polygon2EditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Point_3022);
			return types;
		}
		if (editPart instanceof Rectangle3EditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Rectangle_3011);
			types.add(GMFGraphElementTypes.Ellipse_3012);
			types.add(GMFGraphElementTypes.RoundedRectangle_3013);
			types.add(GMFGraphElementTypes.Polyline_3014);
			types.add(GMFGraphElementTypes.Polygon_3023);
			types.add(GMFGraphElementTypes.Label_3026);
			return types;
		}
		if (editPart instanceof Ellipse3EditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Rectangle_3011);
			types.add(GMFGraphElementTypes.Ellipse_3012);
			types.add(GMFGraphElementTypes.RoundedRectangle_3013);
			types.add(GMFGraphElementTypes.Polyline_3014);
			types.add(GMFGraphElementTypes.Polygon_3023);
			types.add(GMFGraphElementTypes.Label_3026);
			return types;
		}
		if (editPart instanceof RoundedRectangle3EditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Rectangle_3011);
			types.add(GMFGraphElementTypes.Ellipse_3012);
			types.add(GMFGraphElementTypes.RoundedRectangle_3013);
			types.add(GMFGraphElementTypes.Polyline_3014);
			types.add(GMFGraphElementTypes.Polygon_3023);
			types.add(GMFGraphElementTypes.Label_3026);
			return types;
		}
		if (editPart instanceof Polyline3EditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Point_3022);
			return types;
		}
		if (editPart instanceof Polygon3EditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Point_3022);
			return types;
		}
		if (editPart instanceof FigureGalleryFiguresEditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.FigureDescriptor_3009);
			types.add(GMFGraphElementTypes.Rectangle_3018);
			types.add(GMFGraphElementTypes.Ellipse_3019);
			types.add(GMFGraphElementTypes.RoundedRectangle_3020);
			types.add(GMFGraphElementTypes.Polyline_3021);
			types.add(GMFGraphElementTypes.Polygon_3025);
			types.add(GMFGraphElementTypes.Label_3028);
			return types;
		}
		if (editPart instanceof CanvasEditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.Compartment_2005);
			types.add(GMFGraphElementTypes.Node_2006);
			types.add(GMFGraphElementTypes.Connection_2007);
			types.add(GMFGraphElementTypes.FigureGallery_2008);
			types.add(GMFGraphElementTypes.DiagramLabel_2009);
			return types;
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * @@generated
	 */
	public List getRelTypesOnSource(IAdaptable source) {
		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);
		if (sourceEditPart instanceof CompartmentEditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.CompartmentAccessor_4003);
			return types;
		}
		if (sourceEditPart instanceof NodeEditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.NodeContentPane_4006);
			return types;
		}
		if (sourceEditPart instanceof DiagramLabelEditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.DiagramLabelAccessor_4004);
			return types;
		}
		if (sourceEditPart instanceof FigureDescriptorEditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.ChildAccess_4002);
			return types;
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * @@generated
	 */
	public List getRelTypesOnTarget(IAdaptable target) {
		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);
		if (targetEditPart instanceof FigureDescriptorEditPart) {
			List types = new ArrayList();
			types.add(GMFGraphElementTypes.DiagramElementFigure_4005);
			return types;
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * @@generated
	 */
	public List getRelTypesOnSourceAndTarget(IAdaptable source, IAdaptable target) {
		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);
		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);
		if (sourceEditPart instanceof CompartmentEditPart) {
			List types = new ArrayList();
			return types;
		}
		if (sourceEditPart instanceof NodeEditPart) {
			List types = new ArrayList();
			return types;
		}
		if (sourceEditPart instanceof DiagramLabelEditPart) {
			List types = new ArrayList();
			return types;
		}
		if (sourceEditPart instanceof FigureDescriptorEditPart) {
			List types = new ArrayList();
			return types;
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * @@generated
	 */
	public List getTypesForSource(IAdaptable target, IElementType relationshipType) {
		IGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);
		if (targetEditPart instanceof FigureDescriptorEditPart) {
			List types = new ArrayList();
			return types;
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * @@generated
	 */
	public List getTypesForTarget(IAdaptable source, IElementType relationshipType) {
		IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);
		if (sourceEditPart instanceof CompartmentEditPart) {
			List types = new ArrayList();
			return types;
		}
		if (sourceEditPart instanceof NodeEditPart) {
			List types = new ArrayList();
			return types;
		}
		if (sourceEditPart instanceof DiagramLabelEditPart) {
			List types = new ArrayList();
			return types;
		}
		if (sourceEditPart instanceof FigureDescriptorEditPart) {
			List types = new ArrayList();
			return types;
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * @@generated
	 */
	public EObject selectExistingElementForSource(IAdaptable target, IElementType relationshipType) {
		return selectExistingElement(target, getTypesForSource(target, relationshipType));
	}

	/**
	 * @@generated
	 */
	public EObject selectExistingElementForTarget(IAdaptable source, IElementType relationshipType) {
		return selectExistingElement(source, getTypesForTarget(source, relationshipType));
	}

	/**
	 * @@generated
	 */
	protected EObject selectExistingElement(IAdaptable host, Collection types) {
		if (types.isEmpty()) {
			return null;
		}
		IGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);
		if (editPart == null) {
			return null;
		}
		Diagram diagram = (Diagram) editPart.getRoot().getContents().getModel();
		Collection elements = new HashSet();
		for (Iterator it = diagram.getElement().eAllContents(); it.hasNext();) {
			EObject element = (EObject) it.next();
			if (isApplicableElement(element, types)) {
				elements.add(element);
			}
		}
		if (elements.isEmpty()) {
			return null;
		}
		return selectElement((EObject[]) elements.toArray(new EObject[elements.size()]));
	}

	/**
	 * @@generated
	 */
	protected boolean isApplicableElement(EObject element, Collection types) {
		IElementType type = ElementTypeRegistry.getInstance().getElementType(element);
		return types.contains(type);
	}

	/**
	 * @@generated
	 */
	protected EObject selectElement(EObject[] elements) {
		Shell shell = Display.getCurrent().getActiveShell();
		ILabelProvider labelProvider = new AdapterFactoryLabelProvider(GMFGraphDiagramEditorPlugin.getInstance().getItemProvidersAdapterFactory());
		ElementListSelectionDialog dialog = new ElementListSelectionDialog(shell, labelProvider);
		dialog.setMessage(Messages.GMFGraphModelingAssistantProviderMessage);
		dialog.setTitle(Messages.GMFGraphModelingAssistantProviderTitle);
		dialog.setMultipleSelection(false);
		dialog.setElements(elements);
		EObject selected = null;
		if (dialog.open() == Window.OK) {
			selected = (EObject) dialog.getFirstResult();
		}
		return selected;
	}
}
@


1.10
log
@[233206] - Support Polygon figure in .gmfgraph editor
@
text
@d35 1
d75 1
d85 1
d95 1
d105 1
d115 1
d135 1
d145 1
d165 1
d175 1
d185 1
d206 1
d215 1
d236 5
d276 4
d312 4
@


1.9
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d41 3
d73 1
d82 1
d91 1
d100 1
d109 1
d117 5
d128 1
d137 1
d145 5
d156 1
d165 1
d174 1
d182 5
d194 1
@


1.8
log
@node content pane link to child accessor added.
@
text
@d41 3
d104 5
d125 5
d154 5
@


1.7
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@d40 1
d171 5
d207 4
d239 4
@


1.6
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d48 1
d165 1
a165 1
		if (sourceEditPart instanceof FigureDescriptorEditPart) {
d167 1
a167 1
			types.add(GMFGraphElementTypes.ChildAccess_4002);
d170 1
a170 1
		if (sourceEditPart instanceof CompartmentEditPart) {
d172 1
a172 1
			types.add(GMFGraphElementTypes.CompartmentAccessor_4003);
d197 1
a197 1
		if (sourceEditPart instanceof FigureDescriptorEditPart) {
d201 1
a201 1
		if (sourceEditPart instanceof CompartmentEditPart) {
d225 1
a225 1
		if (sourceEditPart instanceof FigureDescriptorEditPart) {
d229 1
a229 1
		if (sourceEditPart instanceof CompartmentEditPart) {
d290 2
a291 2
		dialog.setMessage("Available domain model elements:");
		dialog.setTitle("Select domain model element");
@


1.5
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d2 8
a9 8
 * Copyright (c) 2006, 2007 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d34 1
d36 1
d38 1
d41 1
d44 1
d59 8
d69 4
a72 4
			types.add(GMFGraphElementTypes.Rectangle_3002);
			types.add(GMFGraphElementTypes.Ellipse_3003);
			types.add(GMFGraphElementTypes.RoundedRectangle_3004);
			types.add(GMFGraphElementTypes.Polyline_3005);
d77 4
a80 4
			types.add(GMFGraphElementTypes.Rectangle_3002);
			types.add(GMFGraphElementTypes.Ellipse_3003);
			types.add(GMFGraphElementTypes.RoundedRectangle_3004);
			types.add(GMFGraphElementTypes.Polyline_3005);
d85 4
a88 4
			types.add(GMFGraphElementTypes.Rectangle_3002);
			types.add(GMFGraphElementTypes.Ellipse_3003);
			types.add(GMFGraphElementTypes.RoundedRectangle_3004);
			types.add(GMFGraphElementTypes.Polyline_3005);
d93 4
a96 4
			types.add(GMFGraphElementTypes.Rectangle_3002);
			types.add(GMFGraphElementTypes.Ellipse_3003);
			types.add(GMFGraphElementTypes.RoundedRectangle_3004);
			types.add(GMFGraphElementTypes.Polyline_3005);
d101 4
a104 4
			types.add(GMFGraphElementTypes.Rectangle_3002);
			types.add(GMFGraphElementTypes.Ellipse_3003);
			types.add(GMFGraphElementTypes.RoundedRectangle_3004);
			types.add(GMFGraphElementTypes.Polyline_3005);
d109 28
a136 4
			types.add(GMFGraphElementTypes.Rectangle_3002);
			types.add(GMFGraphElementTypes.Ellipse_3003);
			types.add(GMFGraphElementTypes.RoundedRectangle_3004);
			types.add(GMFGraphElementTypes.Polyline_3005);
d141 5
a145 4
			types.add(GMFGraphElementTypes.Rectangle_3001);
			types.add(GMFGraphElementTypes.Ellipse_3006);
			types.add(GMFGraphElementTypes.RoundedRectangle_3007);
			types.add(GMFGraphElementTypes.Polyline_3008);
d150 4
a153 4
			types.add(GMFGraphElementTypes.Compartment_2001);
			types.add(GMFGraphElementTypes.Node_2002);
			types.add(GMFGraphElementTypes.Connection_2003);
			types.add(GMFGraphElementTypes.FigureGallery_2004);
d163 11
d181 6
d194 10
d211 5
d223 9
@


1.4
log
@Updating with new templates.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
@


1.3
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d36 1
a36 1
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGallery_FiguresEditPart;
d102 1
a102 1
		if (editPart instanceof FigureGallery_FiguresEditPart) {
@


1.2
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d1 10
d56 4
a59 4
			types.add(GMFGraphElementTypes.Rectangle_2002);
			types.add(GMFGraphElementTypes.Ellipse_2003);
			types.add(GMFGraphElementTypes.RoundedRectangle_2004);
			types.add(GMFGraphElementTypes.Polyline_2005);
d64 4
a67 4
			types.add(GMFGraphElementTypes.Rectangle_2002);
			types.add(GMFGraphElementTypes.Ellipse_2003);
			types.add(GMFGraphElementTypes.RoundedRectangle_2004);
			types.add(GMFGraphElementTypes.Polyline_2005);
d72 4
a75 4
			types.add(GMFGraphElementTypes.Rectangle_2002);
			types.add(GMFGraphElementTypes.Ellipse_2003);
			types.add(GMFGraphElementTypes.RoundedRectangle_2004);
			types.add(GMFGraphElementTypes.Polyline_2005);
d80 4
a83 4
			types.add(GMFGraphElementTypes.Rectangle_2002);
			types.add(GMFGraphElementTypes.Ellipse_2003);
			types.add(GMFGraphElementTypes.RoundedRectangle_2004);
			types.add(GMFGraphElementTypes.Polyline_2005);
d88 4
a91 4
			types.add(GMFGraphElementTypes.Rectangle_2002);
			types.add(GMFGraphElementTypes.Ellipse_2003);
			types.add(GMFGraphElementTypes.RoundedRectangle_2004);
			types.add(GMFGraphElementTypes.Polyline_2005);
d96 4
a99 4
			types.add(GMFGraphElementTypes.Rectangle_2002);
			types.add(GMFGraphElementTypes.Ellipse_2003);
			types.add(GMFGraphElementTypes.RoundedRectangle_2004);
			types.add(GMFGraphElementTypes.Polyline_2005);
d104 4
a107 4
			types.add(GMFGraphElementTypes.Rectangle_2001);
			types.add(GMFGraphElementTypes.Ellipse_2006);
			types.add(GMFGraphElementTypes.RoundedRectangle_2007);
			types.add(GMFGraphElementTypes.Polyline_2008);
d112 4
a115 4
			types.add(GMFGraphElementTypes.Compartment_1001);
			types.add(GMFGraphElementTypes.Node_1002);
			types.add(GMFGraphElementTypes.Connection_1003);
			types.add(GMFGraphElementTypes.FigureGallery_1004);
@

