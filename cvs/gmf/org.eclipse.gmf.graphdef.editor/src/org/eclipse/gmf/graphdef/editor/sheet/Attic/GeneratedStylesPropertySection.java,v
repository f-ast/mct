head	1.5;
access;
symbols
	v20080516-1143:1.4
	v20080512-1200:1.4
	v20080510-0100:1.4
	v20080507-1326:1.4
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080411-0411:1.4
	v20080404-1111:1.4
	v20080322-0000:1.4
	v20080114-2222:1.4
	v20071214-1111:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070520-1200:1.2
	v20070420-1000:1.2
	v20070405-2000:1.2
	v20070405-1100:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2008.05.19.17.40.54;	author ashatalin;	state dead;
branches;
next	1.4;
commitid	52d44831bba64567;

1.4
date	2007.06.18.17.06.15;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	54d14676bb824567;

1.3
date	2007.05.31.15.52.31;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	49f1465eef2c4567;

1.2
date	2007.04.05.19.55.25;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	7f1461554204567;

1.1
date	2007.04.04.20.23.26;	author atikhomirov;	state Exp;
branches;
next	;
commitid	ade461409204567;


desc
@@


1.5
log
@Removing obsolete property pages
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.sheet;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
import org.eclipse.gmf.gmfgraph.LineKind;
import org.eclipse.gmf.gmfgraph.RoundedRectangle;
import org.eclipse.gmf.gmfgraph.Shape;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Spinner;
import org.eclipse.swt.widgets.Widget;
import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;

/**
 * @@generated
 */
public class GeneratedStylesPropertySection extends AbstractCustomSectionParent {

	/**
	 * @@generated
	 */
	private ModelHelper myModelHelper;

	/**
	 * @@generated
	 */
	private Group myLineKindGroup;

	/**
	 * @@generated
	 */
	private Button myLINESOLIDRadio;

	/**
	 * @@generated
	 */
	private Image myLINESOLIDRadio_image;

	/**
	 * @@generated
	 */
	private Button myLINEDASHRadio;

	/**
	 * @@generated
	 */
	private Image myLINEDASHRadio_image;

	/**
	 * @@generated
	 */
	private Button myLINEDOTRadio;

	/**
	 * @@generated
	 */
	private Image myLINEDOTRadio_image;

	/**
	 * @@generated
	 */
	private Button myLINEDASHDOTRadio;

	/**
	 * @@generated
	 */
	private Image myLINEDASHDOTRadio_image;

	/**
	 * @@generated
	 */
	private Button myLINEDASHDOTDOTRadio;

	/**
	 * @@generated
	 */
	private Image myLINEDASHDOTDOTRadio_image;

	/**
	 * @@generated
	 */
	private Button myLINECUSTOMRadio;

	/**
	 * @@generated
	 */
	private Image myLINECUSTOMRadio_image;

	/**
	 * @@generated
	 */
	private Group myLineWidthGroup;

	/**
	 * @@generated
	 */
	private Spinner myLineWidthSpin;

	/**
	 * @@generated
	 */
	private Group myMixStylesGroup;

	/**
	 * @@generated
	 */
	private Button myFillCheckbox;

	/**
	 * @@generated
	 */
	private Button myOutlineCheckbox;

	/**
	 * @@generated
	 */
	private Button myXorFillCheckbox;

	/**
	 * @@generated
	 */
	private Button myXorOutlineCheckbox;

	/**
	 * @@generated
	 */
	private Group myRoundedRectangleGroup;

	/**
	 * @@generated
	 */
	private Spinner myCornerWidthSpin;

	/**
	 * @@generated
	 */
	private Spinner myCornerHeightSpin;

	/**
	 * @@generated
	 */
	public void doCreateControls(Composite parent, TabbedPropertySheetPage tabbedPropertySheetPage) {
		Composite mainComposite = createMainWidget(parent);
		myLineKindGroup = createGroupWidget(mainComposite, "Line Style", null, null, null, null, true, true, false, false);

		myLINESOLIDRadio = createRadioButton(myLineKindGroup, "", null, null, null, null, true, true, false, false);
		myLINESOLIDRadio_image = GMFGraphDiagramEditorPlugin.findImageDescriptor("icons/line_solid.png").createImage();
		myLINESOLIDRadio.setImage(myLINESOLIDRadio_image);

		getListener().startListeningTo(myLINESOLIDRadio);

		myLINEDASHRadio = createRadioButton(myLineKindGroup, "", null, myLINESOLIDRadio, null, null, false, true, false, false);
		myLINEDASHRadio_image = GMFGraphDiagramEditorPlugin.findImageDescriptor("icons/line_dash.png").createImage();
		myLINEDASHRadio.setImage(myLINEDASHRadio_image);

		getListener().startListeningTo(myLINEDASHRadio);

		myLINEDOTRadio = createRadioButton(myLineKindGroup, "", null, myLINEDASHRadio, null, null, false, true, false, false);
		myLINEDOTRadio_image = GMFGraphDiagramEditorPlugin.findImageDescriptor("icons/line_dot.png").createImage();
		myLINEDOTRadio.setImage(myLINEDOTRadio_image);

		getListener().startListeningTo(myLINEDOTRadio);

		myLINEDASHDOTRadio = createRadioButton(myLineKindGroup, "", null, myLINEDOTRadio, null, null, false, true, false, false);
		myLINEDASHDOTRadio_image = GMFGraphDiagramEditorPlugin.findImageDescriptor("icons/line_dashdot.png").createImage();
		myLINEDASHDOTRadio.setImage(myLINEDASHDOTRadio_image);

		getListener().startListeningTo(myLINEDASHDOTRadio);

		myLINEDASHDOTDOTRadio = createRadioButton(myLineKindGroup, "", null, myLINEDASHDOTRadio, null, null, false, true, false, false);
		myLINEDASHDOTDOTRadio_image = GMFGraphDiagramEditorPlugin.findImageDescriptor("icons/line_dashdotdot.png").createImage();
		myLINEDASHDOTDOTRadio.setImage(myLINEDASHDOTDOTRadio_image);

		getListener().startListeningTo(myLINEDASHDOTDOTRadio);

		myLINECUSTOMRadio = createRadioButton(myLineKindGroup, "", null, myLINEDASHDOTDOTRadio, null, null, false, true, false, false);
		myLINECUSTOMRadio_image = GMFGraphDiagramEditorPlugin.findImageDescriptor("icons/line_custom.png").createImage();
		myLINECUSTOMRadio.setImage(myLINECUSTOMRadio_image);

		getListener().startListeningTo(myLINECUSTOMRadio);

		myLineWidthGroup = createGroupWidget(mainComposite, "Line Width", myLineKindGroup, null, null, null, true, false, false, false);

		myLineWidthSpin = createSpinnerWidget(myLineWidthGroup, "", 0, 999, 1, 100, null, null, null, null, true, true, false, false);
		getListener().startListeningTo(myLineWidthSpin);

		myMixStylesGroup = createGroupWidget(mainComposite, "Mix Styles", null, myLineWidthGroup, null, null, false, true, false, false);

		myFillCheckbox = createCheckboxButton(myMixStylesGroup, getModelHelper().getNameMyFillCheckboxFromMetamodel(), null, null, null, null, true, true, false, false);

		getListener().startListeningTo(myFillCheckbox);

		myOutlineCheckbox = createCheckboxButton(myMixStylesGroup, getModelHelper().getNameMyOutlineCheckboxFromMetamodel(), null, myFillCheckbox, null, null, false, true, true, false);

		getListener().startListeningTo(myOutlineCheckbox);

		myXorFillCheckbox = createCheckboxButton(myMixStylesGroup, getModelHelper().getNameMyXorFillCheckboxFromMetamodel(), myFillCheckbox, null, null, null, true, false, false, true);

		getListener().startListeningTo(myXorFillCheckbox);

		myXorOutlineCheckbox = createCheckboxButton(myMixStylesGroup, getModelHelper().getNameMyXorOutlineCheckboxFromMetamodel(), myOutlineCheckbox, null, null, null, true, false, true, true);

		getListener().startListeningTo(myXorOutlineCheckbox);

		myRoundedRectangleGroup = createGroupWidget(mainComposite, "Corner Dimensions", null, myMixStylesGroup, null, null, false, true, false, false);

		myCornerWidthSpin = createSpinnerWidget(myRoundedRectangleGroup, "Width", 0, 999, 1, 100, null, null, null, null, true, true, false, false);
		getListener().startListeningTo(myCornerWidthSpin);

		myCornerHeightSpin = createSpinnerWidget(myRoundedRectangleGroup, "Height", 0, 999, 1, 100, myCornerWidthSpin, null, null, null, true, false, false, false);
		getListener().startListeningTo(myCornerHeightSpin);

	}

	/**
	 * @@generated
	 */
	public void doDispose() {
		getListener().stopListeningTo(myLINESOLIDRadio);

		myLINESOLIDRadio_image.dispose();
		myLINESOLIDRadio_image = null;

		getListener().stopListeningTo(myLINEDASHRadio);

		myLINEDASHRadio_image.dispose();
		myLINEDASHRadio_image = null;

		getListener().stopListeningTo(myLINEDOTRadio);

		myLINEDOTRadio_image.dispose();
		myLINEDOTRadio_image = null;

		getListener().stopListeningTo(myLINEDASHDOTRadio);

		myLINEDASHDOTRadio_image.dispose();
		myLINEDASHDOTRadio_image = null;

		getListener().stopListeningTo(myLINEDASHDOTDOTRadio);

		myLINEDASHDOTDOTRadio_image.dispose();
		myLINEDASHDOTDOTRadio_image = null;

		getListener().stopListeningTo(myLINECUSTOMRadio);

		myLINECUSTOMRadio_image.dispose();
		myLINECUSTOMRadio_image = null;

		getListener().stopListeningTo(myLineWidthSpin);

		getListener().stopListeningTo(myFillCheckbox);

		getListener().stopListeningTo(myOutlineCheckbox);

		getListener().stopListeningTo(myXorFillCheckbox);

		getListener().stopListeningTo(myXorOutlineCheckbox);

		getListener().stopListeningTo(myCornerWidthSpin);

		getListener().stopListeningTo(myCornerHeightSpin);

	}

	/**
	 * @@generated
	 */
	public void refresh() {
		getListener().startNonUserChange();
		for (Iterator it = getSavedSelection().iterator(); it.hasNext();) {
			Object next = it.next();
			if (next instanceof Shape) {
				final Shape target = (Shape) next;
				executeAsReadAction(new Runnable() {

					public void run() {
						updateFromModel(target);
					}
				});
			}
		}
		getListener().finishNonUserChange();
	}

	/**
	 * @@generated
	 */
	public void updateFromModel(Shape target) {
		boolean needToRelayoutExpandBar = false;

		{
			myLINESOLIDRadio.setSelection(getModelHelper().getValueForMyLINESOLIDRadio(target));
			myLINEDASHRadio.setSelection(getModelHelper().getValueForMyLINEDASHRadio(target));
			myLINEDOTRadio.setSelection(getModelHelper().getValueForMyLINEDOTRadio(target));
			myLINEDASHDOTRadio.setSelection(getModelHelper().getValueForMyLINEDASHDOTRadio(target));
			myLINEDASHDOTDOTRadio.setSelection(getModelHelper().getValueForMyLINEDASHDOTDOTRadio(target));
			myLINECUSTOMRadio.setSelection(getModelHelper().getValueForMyLINECUSTOMRadio(target));
		}
		{
			myLineWidthSpin.setSelection(getModelHelper().getValueForMyLineWidthSpin(target));
		}
		{
			myFillCheckbox.setSelection(getModelHelper().getValueForMyFillCheckbox(target));
			myOutlineCheckbox.setSelection(getModelHelper().getValueForMyOutlineCheckbox(target));
			myXorFillCheckbox.setSelection(getModelHelper().getValueForMyXorFillCheckbox(target));
			myXorOutlineCheckbox.setSelection(getModelHelper().getValueForMyXorOutlineCheckbox(target));
		}
		boolean isMyRoundedRectangleGroupVisible = getModelHelper().isVisibleMyRoundedRectangleGroup(target);

		myRoundedRectangleGroup.setVisible(isMyRoundedRectangleGroupVisible);
		if (isMyRoundedRectangleGroupVisible) {
			myCornerWidthSpin.setSelection(getModelHelper().getValueForMyCornerWidthSpin(target));
			myCornerHeightSpin.setSelection(getModelHelper().getValueForMyCornerHeightSpin(target));
		}
		if (needToRelayoutExpandBar) {
			relayoutExpandBar(null);
		}
	}

	/**
	 * @@generated
	 */
	public ModelUpdater createModelUpdater() {
		return new ModelUpdater() {

			public void applyChangesFrom(Widget widget) {
				GeneratedStylesPropertySection.this.applyChangesFrom(widget);
			}
		};
	}

	/**
	 * @@generated
	 */
	public void applyChangesFrom(final Widget widget) {
		final String commandName = "Modifying model with ui data from " + widget.toString();
		ArrayList commands = new ArrayList(getSavedSelection().size());
		for (Iterator it = getSavedSelection().iterator(); it.hasNext();) {
			Object next = it.next();
			if (next instanceof Shape) {
				final Shape target = (Shape) next;
				final List files = Collections.singletonList(WorkspaceSynchronizer.getFile(target.eResource()));
				AbstractTransactionalCommand command = new AbstractTransactionalCommand(getEditingDomain(), commandName, files) {

					protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
						// XXX perhaps, should pass collection of targets instead of multiple commands?
						applyModelModifier(target, widget);
						return CommandResult.newOKCommandResult();
					}
				};

				commands.add(command);
			}
		}
		executeAsCompositeCommand(commandName, commands);
		//refresh();
	}

	/**
	 * @@generated
	 */
	void applyModelModifier(final Shape target, final Widget widget) {
		if (widget == myLINESOLIDRadio && myLINESOLIDRadio.isVisible()) {
			if (myLINESOLIDRadio.getSelection()) {
				getModelHelper().setValueForMyLINESOLIDRadio(target, true);
			}
			return;
		}
		if (widget == myLINEDASHRadio && myLINEDASHRadio.isVisible()) {
			if (myLINEDASHRadio.getSelection()) {
				getModelHelper().setValueForMyLINEDASHRadio(target, true);
			}
			return;
		}
		if (widget == myLINEDOTRadio && myLINEDOTRadio.isVisible()) {
			if (myLINEDOTRadio.getSelection()) {
				getModelHelper().setValueForMyLINEDOTRadio(target, true);
			}
			return;
		}
		if (widget == myLINEDASHDOTRadio && myLINEDASHDOTRadio.isVisible()) {
			if (myLINEDASHDOTRadio.getSelection()) {
				getModelHelper().setValueForMyLINEDASHDOTRadio(target, true);
			}
			return;
		}
		if (widget == myLINEDASHDOTDOTRadio && myLINEDASHDOTDOTRadio.isVisible()) {
			if (myLINEDASHDOTDOTRadio.getSelection()) {
				getModelHelper().setValueForMyLINEDASHDOTDOTRadio(target, true);
			}
			return;
		}
		if (widget == myLINECUSTOMRadio && myLINECUSTOMRadio.isVisible()) {
			if (myLINECUSTOMRadio.getSelection()) {
				getModelHelper().setValueForMyLINECUSTOMRadio(target, true);
			}
			return;
		}
		if (widget == myLineWidthSpin && myLineWidthSpin.isVisible()) {
			getModelHelper().setValueForMyLineWidthSpin(target, myLineWidthSpin.getSelection());
			return;
		}
		if (widget == myFillCheckbox && myFillCheckbox.isVisible()) {
			getModelHelper().setValueForMyFillCheckbox(target, myFillCheckbox.getSelection());
			return;
		}
		if (widget == myOutlineCheckbox && myOutlineCheckbox.isVisible()) {
			getModelHelper().setValueForMyOutlineCheckbox(target, myOutlineCheckbox.getSelection());
			return;
		}
		if (widget == myXorFillCheckbox && myXorFillCheckbox.isVisible()) {
			getModelHelper().setValueForMyXorFillCheckbox(target, myXorFillCheckbox.getSelection());
			return;
		}
		if (widget == myXorOutlineCheckbox && myXorOutlineCheckbox.isVisible()) {
			getModelHelper().setValueForMyXorOutlineCheckbox(target, myXorOutlineCheckbox.getSelection());
			return;
		}
		if (widget == myCornerWidthSpin && myCornerWidthSpin.isVisible()) {
			getModelHelper().setValueForMyCornerWidthSpin(target, myCornerWidthSpin.getSelection());
			return;
		}
		if (widget == myCornerHeightSpin && myCornerHeightSpin.isVisible()) {
			getModelHelper().setValueForMyCornerHeightSpin(target, myCornerHeightSpin.getSelection());
			return;
		}
	}

	/**
	 * @@generated
	 */
	protected ModelHelper getModelHelper() {
		if (myModelHelper == null) {
			myModelHelper = new ModelHelper();
		}
		return myModelHelper;
	}

	/**
	 * @@generated
	 */
	public final class ModelHelper {

		/**
		 * @@generated
		 */
		public String getNameMyGeneratedStylesGroupFromMetamodel() {
			return "Shape";
		}

		/**
		 * @@generated
		 */
		public boolean getValueForMyLINESOLIDRadio(Shape shape) {
			boolean value = false;
			if (shape.getLineKind() != null) {
				LineKind lineKind = shape.getLineKind();
				value = (lineKind.getValue() == LineKind.LINE_SOLID);

			}

			return value;
		}

		/**
		 * @@generated
		 */
		public void setValueForMyLINESOLIDRadio(Shape shape, boolean value) {
			shape.setLineKind(LineKind.LINE_SOLID_LITERAL);

		}

		/**
		 * @@generated
		 */
		public boolean getValueForMyLINEDASHRadio(Shape shape) {
			boolean value = false;
			if (shape.getLineKind() != null) {
				LineKind lineKind = shape.getLineKind();
				value = (lineKind.getValue() == LineKind.LINE_DASH);

			}

			return value;
		}

		/**
		 * @@generated
		 */
		public void setValueForMyLINEDASHRadio(Shape shape, boolean value) {
			shape.setLineKind(LineKind.LINE_DASH_LITERAL);

		}

		/**
		 * @@generated
		 */
		public boolean getValueForMyLINEDOTRadio(Shape shape) {
			boolean value = false;
			if (shape.getLineKind() != null) {
				LineKind lineKind = shape.getLineKind();
				value = (lineKind.getValue() == LineKind.LINE_DOT);

			}

			return value;
		}

		/**
		 * @@generated
		 */
		public void setValueForMyLINEDOTRadio(Shape shape, boolean value) {
			shape.setLineKind(LineKind.LINE_DOT_LITERAL);

		}

		/**
		 * @@generated
		 */
		public boolean getValueForMyLINEDASHDOTRadio(Shape shape) {
			boolean value = false;
			if (shape.getLineKind() != null) {
				LineKind lineKind = shape.getLineKind();
				value = (lineKind.getValue() == LineKind.LINE_DASHDOT);

			}

			return value;
		}

		/**
		 * @@generated
		 */
		public void setValueForMyLINEDASHDOTRadio(Shape shape, boolean value) {
			shape.setLineKind(LineKind.LINE_DASHDOT_LITERAL);

		}

		/**
		 * @@generated
		 */
		public boolean getValueForMyLINEDASHDOTDOTRadio(Shape shape) {
			boolean value = false;
			if (shape.getLineKind() != null) {
				LineKind lineKind = shape.getLineKind();
				value = (lineKind.getValue() == LineKind.LINE_DASHDOTDOT);

			}

			return value;
		}

		/**
		 * @@generated
		 */
		public void setValueForMyLINEDASHDOTDOTRadio(Shape shape, boolean value) {
			shape.setLineKind(LineKind.LINE_DASHDOTDOT_LITERAL);

		}

		/**
		 * @@generated
		 */
		public boolean getValueForMyLINECUSTOMRadio(Shape shape) {
			boolean value = false;
			if (shape.getLineKind() != null) {
				LineKind lineKind = shape.getLineKind();
				value = (lineKind.getValue() == LineKind.LINE_CUSTOM);

			}

			return value;
		}

		/**
		 * @@generated
		 */
		public void setValueForMyLINECUSTOMRadio(Shape shape, boolean value) {
			shape.setLineKind(LineKind.LINE_CUSTOM_LITERAL);

		}

		/**
		 * @@generated
		 */
		public int getValueForMyLineWidthSpin(Shape shape) {
			int value = 0;
			value = shape.getLineWidth();

			return value;
		}

		/**
		 * @@generated
		 */
		public void setValueForMyLineWidthSpin(Shape shape, int value) {

			shape.setLineWidth(value);

		}

		/**
		 * @@generated
		 */
		public boolean getValueForMyFillCheckbox(Shape shape) {
			boolean value = false;
			value = shape.isFill();

			return value;
		}

		/**
		 * @@generated
		 */
		public void setValueForMyFillCheckbox(Shape shape, boolean value) {

			shape.setFill(value);

		}

		/**
		 * @@generated
		 */
		public String getNameMyFillCheckboxFromMetamodel() {
			return "Fill";
		}

		/**
		 * @@generated
		 */
		public boolean getValueForMyOutlineCheckbox(Shape shape) {
			boolean value = false;
			value = shape.isOutline();

			return value;
		}

		/**
		 * @@generated
		 */
		public void setValueForMyOutlineCheckbox(Shape shape, boolean value) {

			shape.setOutline(value);

		}

		/**
		 * @@generated
		 */
		public String getNameMyOutlineCheckboxFromMetamodel() {
			return "Outline";
		}

		/**
		 * @@generated
		 */
		public boolean getValueForMyXorFillCheckbox(Shape shape) {
			boolean value = false;
			value = shape.isXorFill();

			return value;
		}

		/**
		 * @@generated
		 */
		public void setValueForMyXorFillCheckbox(Shape shape, boolean value) {

			shape.setXorFill(value);

		}

		/**
		 * @@generated
		 */
		public String getNameMyXorFillCheckboxFromMetamodel() {
			return "XorFill";
		}

		/**
		 * @@generated
		 */
		public boolean getValueForMyXorOutlineCheckbox(Shape shape) {
			boolean value = false;
			value = shape.isXorOutline();

			return value;
		}

		/**
		 * @@generated
		 */
		public void setValueForMyXorOutlineCheckbox(Shape shape, boolean value) {

			shape.setXorOutline(value);

		}

		/**
		 * @@generated
		 */
		public String getNameMyXorOutlineCheckboxFromMetamodel() {
			return "XorOutline";
		}

		/**
		 * @@generated
		 */
		public boolean isVisibleMyRoundedRectangleGroup(Shape targetVar) {
			boolean value = false;
			value = (targetVar instanceof RoundedRectangle);

			return value;
		}

		/**
		 * @@generated
		 */
		public int getValueForMyCornerWidthSpin(Shape shape) {
			int value = 0;
			if (shape instanceof RoundedRectangle) {
				RoundedRectangle roundedRectangle = ((RoundedRectangle) shape);
				value = roundedRectangle.getCornerWidth();

			}

			return value;
		}

		/**
		 * @@generated
		 */
		public void setValueForMyCornerWidthSpin(Shape shape, int value) {

			if (shape instanceof RoundedRectangle) {
				RoundedRectangle roundedRectangle = ((RoundedRectangle) shape);
				roundedRectangle.setCornerWidth(value);

			}

		}

		/**
		 * @@generated
		 */
		public int getValueForMyCornerHeightSpin(Shape shape) {
			int value = 0;
			if (shape instanceof RoundedRectangle) {
				RoundedRectangle roundedRectangle = ((RoundedRectangle) shape);
				value = roundedRectangle.getCornerHeight();

			}

			return value;
		}

		/**
		 * @@generated
		 */
		public void setValueForMyCornerHeightSpin(Shape shape, int value) {

			if (shape instanceof RoundedRectangle) {
				RoundedRectangle roundedRectangle = ((RoundedRectangle) shape);
				roundedRectangle.setCornerHeight(value);

			}

		}

		/**
		 * @@generated
		 */
		protected EObject cloneVars(EObject target) {
			return target;
		}
	}

}
@


1.4
log
@[191661] akarjakina - Improve GMFGraph Editor's propsheet model/codegen with TextArea, Combo and Date/Time support
@
text
@@


1.3
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d349 2
a350 2
			public void applyChangesFrom(Widget widget, int kind) {
				GeneratedStylesPropertySection.this.applyChangesFrom(widget, kind);
d358 1
a358 1
	public void applyChangesFrom(final Widget widget, final int kindP) {
a359 1
		final int kind = kindP; // just to overcome jmerge limitation
d370 1
a370 1
						applyModelModifier(target, widget, kind);
d385 1
a385 1
	void applyModelModifier(final Shape target, final Widget widget, int kind) {
@


1.2
log
@kiss; cleaner and bit more simple
@
text
@d3 7
a9 7
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d16 1
a17 1
import java.util.List;
d358 1
a358 1
	public void applyChangesFrom(final Widget widget, int kindP) {
@


1.1
log
@[173499] akarjakina - Enhance graphdef.editor with properties - use custom model to describe property sheet and generate PropertyTab code from that model
@
text
@d14 1
d17 4
d22 1
d27 2
d55 1
a55 1
	private Button myLINESOLIDLineKindRadio;
d60 1
a60 1
	private Image myLINESOLIDLineKindRadio_image;
d65 1
a65 1
	private Button myLINEDASHLineKindRadio;
d70 1
a70 1
	private Image myLINEDASHLineKindRadio_image;
d75 1
a75 1
	private Button myLINEDOTLineKindRadio;
d80 1
a80 1
	private Image myLINEDOTLineKindRadio_image;
d85 1
a85 1
	private Button myLINEDASHDOTLineKindRadio;
d90 1
a90 1
	private Image myLINEDASHDOTLineKindRadio_image;
d95 1
a95 1
	private Button myLINEDASHDOTDOTLineKindRadio;
d100 1
a100 1
	private Image myLINEDASHDOTDOTLineKindRadio_image;
d105 1
a105 1
	private Button myLINECUSTOMLineKindRadio;
d110 1
a110 1
	private Image myLINECUSTOMLineKindRadio_image;
d120 1
a120 1
	private Spinner myLineWidthLineWidthSpin;
d130 1
a130 1
	private Button myFillMixStylesCheckbox;
d135 1
a135 1
	private Button myOutlineMixStylesCheckbox;
d140 1
a140 1
	private Button myXorFillMixStylesCheckbox;
d145 1
a145 1
	private Button myXorOutlineMixStylesCheckbox;
d155 1
a155 1
	private Spinner myCornerWidthRoundedRectangleSpin;
d160 1
a160 1
	private Spinner myCornerHeightRoundedRectangleSpin;
d169 3
a171 3
		myLINESOLIDLineKindRadio = createRadioButton(myLineKindGroup, "", null, null, null, null, true, true, false, false);
		myLINESOLIDLineKindRadio_image = GMFGraphDiagramEditorPlugin.findImageDescriptor("icons/line_solid.png").createImage();
		myLINESOLIDLineKindRadio.setImage(myLINESOLIDLineKindRadio_image);
d173 1
a173 1
		getListener().startListeningTo(myLINESOLIDLineKindRadio);
d175 3
a177 3
		myLINEDASHLineKindRadio = createRadioButton(myLineKindGroup, "", null, myLINESOLIDLineKindRadio, null, null, false, true, false, false);
		myLINEDASHLineKindRadio_image = GMFGraphDiagramEditorPlugin.findImageDescriptor("icons/line_dash.png").createImage();
		myLINEDASHLineKindRadio.setImage(myLINEDASHLineKindRadio_image);
d179 1
a179 1
		getListener().startListeningTo(myLINEDASHLineKindRadio);
d181 3
a183 3
		myLINEDOTLineKindRadio = createRadioButton(myLineKindGroup, "", null, myLINEDASHLineKindRadio, null, null, false, true, false, false);
		myLINEDOTLineKindRadio_image = GMFGraphDiagramEditorPlugin.findImageDescriptor("icons/line_dot.png").createImage();
		myLINEDOTLineKindRadio.setImage(myLINEDOTLineKindRadio_image);
d185 1
a185 1
		getListener().startListeningTo(myLINEDOTLineKindRadio);
d187 3
a189 3
		myLINEDASHDOTLineKindRadio = createRadioButton(myLineKindGroup, "", null, myLINEDOTLineKindRadio, null, null, false, true, false, false);
		myLINEDASHDOTLineKindRadio_image = GMFGraphDiagramEditorPlugin.findImageDescriptor("icons/line_dashdot.png").createImage();
		myLINEDASHDOTLineKindRadio.setImage(myLINEDASHDOTLineKindRadio_image);
d191 1
a191 1
		getListener().startListeningTo(myLINEDASHDOTLineKindRadio);
d193 3
a195 3
		myLINEDASHDOTDOTLineKindRadio = createRadioButton(myLineKindGroup, "", null, myLINEDASHDOTLineKindRadio, null, null, false, true, false, false);
		myLINEDASHDOTDOTLineKindRadio_image = GMFGraphDiagramEditorPlugin.findImageDescriptor("icons/line_dashdotdot.png").createImage();
		myLINEDASHDOTDOTLineKindRadio.setImage(myLINEDASHDOTDOTLineKindRadio_image);
d197 1
a197 1
		getListener().startListeningTo(myLINEDASHDOTDOTLineKindRadio);
d199 3
a201 3
		myLINECUSTOMLineKindRadio = createRadioButton(myLineKindGroup, "", null, myLINEDASHDOTDOTLineKindRadio, null, null, false, true, false, false);
		myLINECUSTOMLineKindRadio_image = GMFGraphDiagramEditorPlugin.findImageDescriptor("icons/line_custom.png").createImage();
		myLINECUSTOMLineKindRadio.setImage(myLINECUSTOMLineKindRadio_image);
d203 1
a203 1
		getListener().startListeningTo(myLINECUSTOMLineKindRadio);
d207 2
a208 2
		myLineWidthLineWidthSpin = createSpinnerWidget(myLineWidthGroup, "", 0, 999, 1, 100, null, null, null, null, true, true, false, false);
		getListener().startListeningTo(myLineWidthLineWidthSpin);
d212 1
a212 1
		myFillMixStylesCheckbox = createCheckboxButton(myMixStylesGroup, getModelHelper().getNameMyFillMixStylesCheckboxFromMetamodel(), null, null, null, null, true, true, false, false);
d214 1
a214 1
		getListener().startListeningTo(myFillMixStylesCheckbox);
d216 1
a216 2
		myOutlineMixStylesCheckbox = createCheckboxButton(myMixStylesGroup, getModelHelper().getNameMyOutlineMixStylesCheckboxFromMetamodel(), null, myFillMixStylesCheckbox, null, null, false, true,
				true, false);
d218 1
a218 1
		getListener().startListeningTo(myOutlineMixStylesCheckbox);
d220 1
a220 2
		myXorFillMixStylesCheckbox = createCheckboxButton(myMixStylesGroup, getModelHelper().getNameMyXorFillMixStylesCheckboxFromMetamodel(), myFillMixStylesCheckbox, null, null, null, true, false,
				false, true);
d222 1
a222 1
		getListener().startListeningTo(myXorFillMixStylesCheckbox);
d224 1
a224 2
		myXorOutlineMixStylesCheckbox = createCheckboxButton(myMixStylesGroup, getModelHelper().getNameMyXorOutlineMixStylesCheckboxFromMetamodel(), myOutlineMixStylesCheckbox, null, null, null,
				true, false, true, true);
d226 1
a226 1
		getListener().startListeningTo(myXorOutlineMixStylesCheckbox);
d230 2
a231 2
		myCornerWidthRoundedRectangleSpin = createSpinnerWidget(myRoundedRectangleGroup, "Width", 0, 999, 1, 100, null, null, null, null, true, true, false, false);
		getListener().startListeningTo(myCornerWidthRoundedRectangleSpin);
d233 2
a234 2
		myCornerHeightRoundedRectangleSpin = createSpinnerWidget(myRoundedRectangleGroup, "Height", 0, 999, 1, 100, myCornerWidthRoundedRectangleSpin, null, null, null, true, false, false, false);
		getListener().startListeningTo(myCornerHeightRoundedRectangleSpin);
d242 1
a242 1
		getListener().stopListeningTo(myLINESOLIDLineKindRadio);
d244 2
a245 2
		myLINESOLIDLineKindRadio_image.dispose();
		myLINESOLIDLineKindRadio_image = null;
d247 1
a247 1
		getListener().stopListeningTo(myLINEDASHLineKindRadio);
d249 2
a250 2
		myLINEDASHLineKindRadio_image.dispose();
		myLINEDASHLineKindRadio_image = null;
d252 1
a252 1
		getListener().stopListeningTo(myLINEDOTLineKindRadio);
d254 2
a255 2
		myLINEDOTLineKindRadio_image.dispose();
		myLINEDOTLineKindRadio_image = null;
d257 1
a257 1
		getListener().stopListeningTo(myLINEDASHDOTLineKindRadio);
d259 2
a260 2
		myLINEDASHDOTLineKindRadio_image.dispose();
		myLINEDASHDOTLineKindRadio_image = null;
d262 1
a262 1
		getListener().stopListeningTo(myLINEDASHDOTDOTLineKindRadio);
d264 2
a265 2
		myLINEDASHDOTDOTLineKindRadio_image.dispose();
		myLINEDASHDOTDOTLineKindRadio_image = null;
d267 1
a267 1
		getListener().stopListeningTo(myLINECUSTOMLineKindRadio);
d269 2
a270 2
		myLINECUSTOMLineKindRadio_image.dispose();
		myLINECUSTOMLineKindRadio_image = null;
d272 1
a272 1
		getListener().stopListeningTo(myLineWidthLineWidthSpin);
d274 1
a274 1
		getListener().stopListeningTo(myFillMixStylesCheckbox);
d276 1
a276 1
		getListener().stopListeningTo(myOutlineMixStylesCheckbox);
d278 1
a278 1
		getListener().stopListeningTo(myXorFillMixStylesCheckbox);
d280 1
a280 1
		getListener().stopListeningTo(myXorOutlineMixStylesCheckbox);
d282 1
a282 1
		getListener().stopListeningTo(myCornerWidthRoundedRectangleSpin);
d284 1
a284 1
		getListener().stopListeningTo(myCornerHeightRoundedRectangleSpin);
d315 6
a320 18
			{
				myLINESOLIDLineKindRadio.setSelection(getModelHelper().getValueForMyLINESOLIDLineKindRadio(target));
			}
			{
				myLINEDASHLineKindRadio.setSelection(getModelHelper().getValueForMyLINEDASHLineKindRadio(target));
			}
			{
				myLINEDOTLineKindRadio.setSelection(getModelHelper().getValueForMyLINEDOTLineKindRadio(target));
			}
			{
				myLINEDASHDOTLineKindRadio.setSelection(getModelHelper().getValueForMyLINEDASHDOTLineKindRadio(target));
			}
			{
				myLINEDASHDOTDOTLineKindRadio.setSelection(getModelHelper().getValueForMyLINEDASHDOTDOTLineKindRadio(target));
			}
			{
				myLINECUSTOMLineKindRadio.setSelection(getModelHelper().getValueForMyLINECUSTOMLineKindRadio(target));
			}
d323 1
a323 3
			{
				myLineWidthLineWidthSpin.setSelection(getModelHelper().getValueForMyLineWidthLineWidthSpin(target));
			}
d326 4
a329 12
			{
				myFillMixStylesCheckbox.setSelection(getModelHelper().getValueForMyFillMixStylesCheckbox(target));
			}
			{
				myOutlineMixStylesCheckbox.setSelection(getModelHelper().getValueForMyOutlineMixStylesCheckbox(target));
			}
			{
				myXorFillMixStylesCheckbox.setSelection(getModelHelper().getValueForMyXorFillMixStylesCheckbox(target));
			}
			{
				myXorOutlineMixStylesCheckbox.setSelection(getModelHelper().getValueForMyXorOutlineMixStylesCheckbox(target));
			}
d335 2
a336 6
			{
				myCornerWidthRoundedRectangleSpin.setSelection(getModelHelper().getValueForMyCornerWidthRoundedRectangleSpin(target));
			}
			{
				myCornerHeightRoundedRectangleSpin.setSelection(getModelHelper().getValueForMyCornerHeightRoundedRectangleSpin(target));
			}
d358 3
a360 2
	public void applyChangesFrom(final Widget widget, int kind) {
		String commandName = "Modifying model with ui data from " + widget.toString();
d366 11
a376 1
				commands.add(createCommand(commandName, target, getModelModifierFor(target, widget, kind)));
d386 6
a391 11
	public Runnable getModelModifierFor(final Shape target, final Widget widget, int kind) {
		if (widget == myLINESOLIDLineKindRadio && myLINESOLIDLineKindRadio.isVisible()) {
			return new Runnable() {

				public void run() {
					final boolean value = myLINESOLIDLineKindRadio.getSelection();
					if (value) {
						getModelHelper().setValueForMyLINESOLIDLineKindRadio(target, value);
					}
				}
			};
d393 5
a397 11

		if (widget == myLINEDASHLineKindRadio && myLINEDASHLineKindRadio.isVisible()) {
			return new Runnable() {

				public void run() {
					final boolean value = myLINEDASHLineKindRadio.getSelection();
					if (value) {
						getModelHelper().setValueForMyLINEDASHLineKindRadio(target, value);
					}
				}
			};
d399 5
a403 11

		if (widget == myLINEDOTLineKindRadio && myLINEDOTLineKindRadio.isVisible()) {
			return new Runnable() {

				public void run() {
					final boolean value = myLINEDOTLineKindRadio.getSelection();
					if (value) {
						getModelHelper().setValueForMyLINEDOTLineKindRadio(target, value);
					}
				}
			};
d405 5
a409 11

		if (widget == myLINEDASHDOTLineKindRadio && myLINEDASHDOTLineKindRadio.isVisible()) {
			return new Runnable() {

				public void run() {
					final boolean value = myLINEDASHDOTLineKindRadio.getSelection();
					if (value) {
						getModelHelper().setValueForMyLINEDASHDOTLineKindRadio(target, value);
					}
				}
			};
d411 5
a415 11

		if (widget == myLINEDASHDOTDOTLineKindRadio && myLINEDASHDOTDOTLineKindRadio.isVisible()) {
			return new Runnable() {

				public void run() {
					final boolean value = myLINEDASHDOTDOTLineKindRadio.getSelection();
					if (value) {
						getModelHelper().setValueForMyLINEDASHDOTDOTLineKindRadio(target, value);
					}
				}
			};
d417 5
a421 11

		if (widget == myLINECUSTOMLineKindRadio && myLINECUSTOMLineKindRadio.isVisible()) {
			return new Runnable() {

				public void run() {
					final boolean value = myLINECUSTOMLineKindRadio.getSelection();
					if (value) {
						getModelHelper().setValueForMyLINECUSTOMLineKindRadio(target, value);
					}
				}
			};
d423 3
a425 9

		if (widget == myLineWidthLineWidthSpin && myLineWidthLineWidthSpin.isVisible()) {
			return new Runnable() {

				public void run() {
					final int value = myLineWidthLineWidthSpin.getSelection();
					getModelHelper().setValueForMyLineWidthLineWidthSpin(target, value);
				}
			};
d427 3
a429 9

		if (widget == myFillMixStylesCheckbox && myFillMixStylesCheckbox.isVisible()) {
			return new Runnable() {

				public void run() {
					final boolean value = myFillMixStylesCheckbox.getSelection();
					getModelHelper().setValueForMyFillMixStylesCheckbox(target, value);
				}
			};
d431 3
a433 9

		if (widget == myOutlineMixStylesCheckbox && myOutlineMixStylesCheckbox.isVisible()) {
			return new Runnable() {

				public void run() {
					final boolean value = myOutlineMixStylesCheckbox.getSelection();
					getModelHelper().setValueForMyOutlineMixStylesCheckbox(target, value);
				}
			};
d435 3
a437 9

		if (widget == myXorFillMixStylesCheckbox && myXorFillMixStylesCheckbox.isVisible()) {
			return new Runnable() {

				public void run() {
					final boolean value = myXorFillMixStylesCheckbox.getSelection();
					getModelHelper().setValueForMyXorFillMixStylesCheckbox(target, value);
				}
			};
d439 3
a441 9

		if (widget == myXorOutlineMixStylesCheckbox && myXorOutlineMixStylesCheckbox.isVisible()) {
			return new Runnable() {

				public void run() {
					final boolean value = myXorOutlineMixStylesCheckbox.getSelection();
					getModelHelper().setValueForMyXorOutlineMixStylesCheckbox(target, value);
				}
			};
d443 3
a445 9

		if (widget == myCornerWidthRoundedRectangleSpin && myCornerWidthRoundedRectangleSpin.isVisible()) {
			return new Runnable() {

				public void run() {
					final int value = myCornerWidthRoundedRectangleSpin.getSelection();
					getModelHelper().setValueForMyCornerWidthRoundedRectangleSpin(target, value);
				}
			};
d447 3
a449 9

		if (widget == myCornerHeightRoundedRectangleSpin && myCornerHeightRoundedRectangleSpin.isVisible()) {
			return new Runnable() {

				public void run() {
					final int value = myCornerHeightRoundedRectangleSpin.getSelection();
					getModelHelper().setValueForMyCornerHeightRoundedRectangleSpin(target, value);
				}
			};
a450 8

		// default:
		return new Runnable() {

			public void run() {
				// does nothing
			}
		};
d478 1
a478 1
		public boolean getValueForMyLINESOLIDLineKindRadio(Shape shape) {
d492 1
a492 2
		public void setValueForMyLINESOLIDLineKindRadio(Shape shape, boolean value) {

d500 1
a500 1
		public boolean getValueForMyLINEDASHLineKindRadio(Shape shape) {
d514 1
a514 2
		public void setValueForMyLINEDASHLineKindRadio(Shape shape, boolean value) {

d522 1
a522 1
		public boolean getValueForMyLINEDOTLineKindRadio(Shape shape) {
d536 1
a536 2
		public void setValueForMyLINEDOTLineKindRadio(Shape shape, boolean value) {

d544 1
a544 1
		public boolean getValueForMyLINEDASHDOTLineKindRadio(Shape shape) {
d558 1
a558 2
		public void setValueForMyLINEDASHDOTLineKindRadio(Shape shape, boolean value) {

d566 1
a566 1
		public boolean getValueForMyLINEDASHDOTDOTLineKindRadio(Shape shape) {
d580 1
a580 2
		public void setValueForMyLINEDASHDOTDOTLineKindRadio(Shape shape, boolean value) {

d588 1
a588 1
		public boolean getValueForMyLINECUSTOMLineKindRadio(Shape shape) {
d602 1
a602 2
		public void setValueForMyLINECUSTOMLineKindRadio(Shape shape, boolean value) {

d610 1
a610 1
		public int getValueForMyLineWidthLineWidthSpin(Shape shape) {
d620 1
a620 1
		public void setValueForMyLineWidthLineWidthSpin(Shape shape, int value) {
d629 1
a629 1
		public boolean getValueForMyFillMixStylesCheckbox(Shape shape) {
d639 1
a639 1
		public void setValueForMyFillMixStylesCheckbox(Shape shape, boolean value) {
d648 1
a648 1
		public String getNameMyFillMixStylesCheckboxFromMetamodel() {
d655 1
a655 1
		public boolean getValueForMyOutlineMixStylesCheckbox(Shape shape) {
d665 1
a665 1
		public void setValueForMyOutlineMixStylesCheckbox(Shape shape, boolean value) {
d674 1
a674 1
		public String getNameMyOutlineMixStylesCheckboxFromMetamodel() {
d681 1
a681 1
		public boolean getValueForMyXorFillMixStylesCheckbox(Shape shape) {
d691 1
a691 1
		public void setValueForMyXorFillMixStylesCheckbox(Shape shape, boolean value) {
d700 1
a700 1
		public String getNameMyXorFillMixStylesCheckboxFromMetamodel() {
d707 1
a707 1
		public boolean getValueForMyXorOutlineMixStylesCheckbox(Shape shape) {
d717 1
a717 1
		public void setValueForMyXorOutlineMixStylesCheckbox(Shape shape, boolean value) {
d726 1
a726 1
		public String getNameMyXorOutlineMixStylesCheckboxFromMetamodel() {
d743 1
a743 1
		public int getValueForMyCornerWidthRoundedRectangleSpin(Shape shape) {
d757 1
a757 1
		public void setValueForMyCornerWidthRoundedRectangleSpin(Shape shape, int value) {
d770 1
a770 1
		public int getValueForMyCornerHeightRoundedRectangleSpin(Shape shape) {
d784 1
a784 1
		public void setValueForMyCornerHeightRoundedRectangleSpin(Shape shape, int value) {
@

