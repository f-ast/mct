head	1.4;
access;
symbols
	v20080722-1827:1.4
	v20080718-1700:1.4
	v20080718-1731:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080610-1132:1.4
	v20080603-1553:1.4
	v20080528-1052:1.4
	v20080521:1.4
	v20080516-1143:1.4
	v20080512-1200:1.4
	v20080510-0100:1.4
	v20080507-1326:1.4
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080411-0411:1.4
	v20080404-1111:1.4
	v20080322-0000:1.4
	v20080114-2222:1.3
	v20071214-1111:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070520-1200:1.2
	v20070420-1000:1.2
	v20070405-2000:1.2
	v20070405-1100:1.2
	v20070330-1300:1.1
	v20070307-0700:1.1
	v20070221-1500:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2008.02.22.13.08.01;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	4c5647bec9294567;

1.3
date	2007.05.31.15.52.30;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	49f1465eef2c4567;

1.2
date	2007.04.04.20.23.26;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	ade461409204567;

1.1
date	2007.02.09.20.08.30;	author atikhomirov;	state Exp;
branches;
next	;
commitid	179c45ccd4b34567;


desc
@@


1.4
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.navigator;

import java.util.Iterator;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.common.ui.URIEditorInput;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.GraphicalViewer;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.navigator.ILinkHelper;
import org.eclipse.ui.part.FileEditorInput;

/**
 * @@generated
 */
public class GMFGraphNavigatorLinkHelper implements ILinkHelper {

	/**
	 * @@generated
	 */
	private static IEditorInput getEditorInput(Diagram diagram) {
		Resource diagramResource = diagram.eResource();
		for (Iterator it = diagramResource.getContents().iterator(); it.hasNext();) {
			EObject nextEObject = (EObject) it.next();
			if (nextEObject == diagram) {
				return new FileEditorInput(WorkspaceSynchronizer.getFile(diagramResource));
			}
			if (nextEObject instanceof Diagram) {
				break;
			}
		}
		URI uri = EcoreUtil.getURI(diagram);
		String editorName = uri.lastSegment() + "#" + diagram.eResource().getContents().indexOf(diagram); //$NON-NLS-1$
		IEditorInput editorInput = new URIEditorInput(uri, editorName);
		return editorInput;
	}

	/**
	 * @@generated
	 */
	public IStructuredSelection findSelection(IEditorInput anInput) {
		IDiagramDocument document = GMFGraphDiagramEditorPlugin.getInstance().getDocumentProvider().getDiagramDocument(anInput);
		if (document == null) {
			return StructuredSelection.EMPTY;
		}
		Diagram diagram = document.getDiagram();
		IFile file = WorkspaceSynchronizer.getFile(diagram.eResource());
		if (file != null) {
			GMFGraphNavigatorItem item = new GMFGraphNavigatorItem(diagram, file, false);
			return new StructuredSelection(item);
		}
		return StructuredSelection.EMPTY;
	}

	/**
	 * @@generated
	 */
	public void activateEditor(IWorkbenchPage aPage, IStructuredSelection aSelection) {
		if (aSelection == null || aSelection.isEmpty()) {
			return;
		}
		if (false == aSelection.getFirstElement() instanceof GMFGraphAbstractNavigatorItem) {
			return;
		}

		GMFGraphAbstractNavigatorItem abstractNavigatorItem = (GMFGraphAbstractNavigatorItem) aSelection.getFirstElement();
		View navigatorView = null;
		if (abstractNavigatorItem instanceof GMFGraphNavigatorItem) {
			navigatorView = ((GMFGraphNavigatorItem) abstractNavigatorItem).getView();
		} else if (abstractNavigatorItem instanceof GMFGraphNavigatorGroup) {
			GMFGraphNavigatorGroup navigatorGroup = (GMFGraphNavigatorGroup) abstractNavigatorItem;
			if (navigatorGroup.getParent() instanceof GMFGraphNavigatorItem) {
				navigatorView = ((GMFGraphNavigatorItem) navigatorGroup.getParent()).getView();
			} else if (navigatorGroup.getParent() instanceof IAdaptable) {
				navigatorView = (View) ((IAdaptable) navigatorGroup.getParent()).getAdapter(View.class);
			}
		}
		if (navigatorView == null) {
			return;
		}
		IEditorInput editorInput = getEditorInput(navigatorView.getDiagram());
		IEditorPart editor = aPage.findEditor(editorInput);
		if (editor == null) {
			return;
		}
		aPage.bringToTop(editor);
		if (editor instanceof DiagramEditor) {
			DiagramEditor diagramEditor = (DiagramEditor) editor;
			ResourceSet diagramEditorResourceSet = diagramEditor.getEditingDomain().getResourceSet();
			EObject selectedView = diagramEditorResourceSet.getEObject(EcoreUtil.getURI(navigatorView), true);
			if (selectedView == null) {
				return;
			}
			GraphicalViewer graphicalViewer = (GraphicalViewer) diagramEditor.getAdapter(GraphicalViewer.class);
			EditPart selectedEditPart = (EditPart) graphicalViewer.getEditPartRegistry().get(selectedView);
			if (selectedEditPart != null) {
				graphicalViewer.select(selectedEditPart);
			}
		}
	}

}
@


1.3
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d18 1
d58 4
a61 1
		return new URIEditorInput(EcoreUtil.getURI(diagram));
@


1.2
log
@[173499] akarjakina - Enhance graphdef.editor with properties - use custom model to describe property sheet and generate PropertyTab code from that model
@
text
@d3 7
a9 7
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
@


1.1
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2007 Borland Software Corporation and others.
d13 3
d17 1
a17 1

a18 1

d20 3
a22 1

d24 2
a25 1

d27 2
a28 2
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditorInput;

a29 1

a31 1

a34 1

d36 1
d46 17
d64 10
d88 1
a88 1
		GMFGraphAbstractNavigatorItem navigatorItem = (GMFGraphAbstractNavigatorItem) aSelection.getFirstElement();
d90 8
a97 8
		if (navigatorItem instanceof GMFGraphNavigatorItem) {
			navigatorView = ((GMFGraphNavigatorItem) navigatorItem).getView();
		} else if (navigatorItem instanceof GMFGraphNavigatorGroup) {
			GMFGraphNavigatorGroup group = (GMFGraphNavigatorGroup) navigatorItem;
			if (group.getParent() instanceof GMFGraphNavigatorItem) {
				navigatorView = ((GMFGraphNavigatorItem) group.getParent()).getView();
			} else if (group.getParent() instanceof IAdaptable) {
				navigatorView = (View) ((IAdaptable) group.getParent()).getAdapter(View.class);
d103 1
a103 1
		DiagramEditorInput editorInput = new DiagramEditorInput(navigatorView.getDiagram());
d111 2
a112 3
			Resource diagramResource = diagramEditor.getDiagram().eResource();

			EObject selectedView = diagramResource.getEObject(navigatorView.eResource().getURIFragment(navigatorView));
d116 2
a117 1
			EditPart selectedEditPart = (EditPart) diagramEditor.getDiagramGraphicalViewer().getEditPartRegistry().get(selectedView);
d119 1
a119 1
				diagramEditor.getDiagramGraphicalViewer().select(selectedEditPart);
@

