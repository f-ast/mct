head	1.2;
access;
symbols
	v20080722-1827:1.2
	v20080718-1700:1.2
	v20080718-1731:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.2
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080610-1132:1.2
	v20080603-1553:1.2
	v20080528-1052:1.2
	v20080521:1.2
	v20080516-1143:1.2
	v20080512-1200:1.2
	v20080510-0100:1.2
	v20080507-1326:1.2
	v20080501-1739:1.2
	v20080425-1959:1.2
	v20080411-0411:1.2
	v20080404-1111:1.2
	v20080322-0000:1.2
	v20080114-2222:1.1
	v20071214-1111:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2008.03.13.17.56.06;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	54b147d96ab34567;

1.1
date	2007.05.31.15.52.30;	author ashatalin;	state Exp;
branches;
next	;
commitid	49f1465eef2c4567;


desc
@@


1.2
log
@node content pane link to child accessor added.
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.policies;

import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.graphdef.editor.edit.commands.CompartmentAccessorCreateCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.CompartmentAccessorReorientCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.DiagramLabelAccessorCreateCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.DiagramLabelAccessorReorientCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.NodeContentPaneCreateCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.NodeContentPaneReorientCommand;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentAccessorEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelAccessorEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeContentPaneEditPart;
import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;
import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;

/**
 * @@generated
 */
public class ChildAccessItemSemanticEditPolicy extends GMFGraphBaseItemSemanticEditPolicy {

	/**
	 * @@generated
	 */
	protected Command getDestroyElementCommand(DestroyElementRequest req) {
		return getGEFWrapper(new DestroyElementCommand(req));
	}

	/**
	 * @@generated
	 */
	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req) : getCompleteCreateRelationshipCommand(req);
		return command != null ? command : super.getCreateRelationshipCommand(req);
	}

	/**
	 * @@generated
	 */
	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
		if (GMFGraphElementTypes.CompartmentAccessor_4003 == req.getElementType()) {
			return null;
		}
		if (GMFGraphElementTypes.DiagramLabelAccessor_4004 == req.getElementType()) {
			return null;
		}
		if (GMFGraphElementTypes.NodeContentPane_4006 == req.getElementType()) {
			return null;
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
		if (GMFGraphElementTypes.CompartmentAccessor_4003 == req.getElementType()) {
			return getGEFWrapper(new CompartmentAccessorCreateCommand(req, req.getSource(), req.getTarget()));
		}
		if (GMFGraphElementTypes.DiagramLabelAccessor_4004 == req.getElementType()) {
			return getGEFWrapper(new DiagramLabelAccessorCreateCommand(req, req.getSource(), req.getTarget()));
		}
		if (GMFGraphElementTypes.NodeContentPane_4006 == req.getElementType()) {
			return getGEFWrapper(new NodeContentPaneCreateCommand(req, req.getSource(), req.getTarget()));
		}
		return null;
	}

	/**
	 * Returns command to reorient EReference based link. New link target or source
	 * should be the domain model element associated with this node.
	 * 
	 * @@generated
	 */
	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
		switch (getVisualID(req)) {
		case CompartmentAccessorEditPart.VISUAL_ID:
			return getGEFWrapper(new CompartmentAccessorReorientCommand(req));
		case DiagramLabelAccessorEditPart.VISUAL_ID:
			return getGEFWrapper(new DiagramLabelAccessorReorientCommand(req));
		case NodeContentPaneEditPart.VISUAL_ID:
			return getGEFWrapper(new NodeContentPaneReorientCommand(req));
		}
		return super.getReorientReferenceRelationshipCommand(req);
	}

}
@


1.1
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d18 2
d22 1
d59 3
d75 3
d93 2
@

