head	1.17;
access;
symbols
	v20080722-1827:1.17
	v20080718-1700:1.17
	v20080718-1731:1.17
	v20080716-1642:1.17
	R2_1_maintenance:1.17.0.2
	Root_R2_1_maintenance:1.17
	R2_1_0:1.17
	v20080610-1132:1.17
	v20080603-1553:1.17
	v20080528-1052:1.17
	v20080521:1.17
	v20080516-1143:1.17
	v20080512-1200:1.16
	v20080510-0100:1.15
	v20080507-1326:1.15
	v20080501-1739:1.15
	v20080425-1959:1.15
	v20080411-0411:1.15
	v20080404-1111:1.15
	v20080322-0000:1.15
	v20080114-2222:1.13
	v20071214-1111:1.13
	v20070809-0000:1.13
	R2_0_maintenance:1.13.0.2
	R2_0:1.13
	R4_20:1.13
	v20070621-0000:1.13
	RC3_20:1.13
	v20070605-1400:1.13
	v20070601-1400:1.13
	v20070520-1200:1.12
	v20070420-1000:1.12
	v20070405-2000:1.12
	v20070405-1100:1.12
	v20070330-1300:1.12
	v20070307-0700:1.12
	v20070221-1500:1.12
	v20070208-1800:1.11
	M4_20:1.11
	v20061214-0000:1.11
	M3_20:1.11
	v20061013-1330:1.11
	M1_20:1.11
	v20060713-1700:1.11
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	v20060627-1200:1.11
	v20060616-1200:1.10
	v20060609-1400:1.10
	v20060531-1730:1.8
	v20060530-1930:1.8
	v20060526-1200:1.7
	v20060519-0800:1.6
	v20060512-1000:1.6
	I20060512-1000:1.6
	RC2_10:1.6
	I20060505-1400:1.5
	I20060428-1300:1.4
	I20060424-0500:1.3
	I20060424-0300:1.2
	M6_10:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.17
date	2008.05.14.11.16.58;	author ashatalin;	state Exp;
branches;
next	1.16;
commitid	377e482aca274567;

1.16
date	2008.05.12.17.40.17;	author ashatalin;	state Exp;
branches;
next	1.15;
commitid	a53482880fd4567;

1.15
date	2008.03.07.12.50.34;	author ashatalin;	state Exp;
branches;
next	1.14;
commitid	179447d13a164567;

1.14
date	2008.02.22.13.07.59;	author ashatalin;	state Exp;
branches;
next	1.13;
commitid	4c5647bec9294567;

1.13
date	2007.05.31.15.52.31;	author ashatalin;	state Exp;
branches;
next	1.12;
commitid	49f1465eef2c4567;

1.12
date	2007.02.09.20.08.31;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	179c45ccd4b34567;

1.11
date	2006.06.26.18.38.20;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.08.08.40.34;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.02.15.08.29;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.30.13.06.13;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.22.17.37.30;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.05.17.50.39;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.03.15.04.02;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.25.18.01.18;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.20.20.36.59;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.14.18.11.23;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.26;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.17
log
@- Migrating to new .gmfgen model
- Using (0,0) as a minimum size for DefaultNode to make resize feedback minimum size == (0,0)
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.parts;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.draw2d.StackLayout;
import org.eclipse.draw2d.ToolbarLayout;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.editpolicies.LayoutEditPolicy;
import org.eclipse.gmf.graphdef.editor.edit.policies.CompartmentItemSemanticEditPolicy;
import org.eclipse.gmf.graphdef.editor.edit.policies.GMFGraphTextSelectionEditPolicy;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class CompartmentEditPart extends ShapeNodeEditPart {

	/**
	 * @@generated
	 */
	public static final int VISUAL_ID = 2005;

	/**
	 * @@generated
	 */
	protected IFigure contentPane;

	/**
	 * @@generated
	 */
	protected IFigure primaryShape;

	/**
	 * @@generated
	 */
	public CompartmentEditPart(View view) {
		super(view);
	}

	/**
	 * @@generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new CompartmentItemSemanticEditPolicy());
		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
		// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}

	/**
	 * @@generated
	 */
	protected LayoutEditPolicy createLayoutEditPolicy() {

		ConstrainedToolbarLayoutEditPolicy lep = new ConstrainedToolbarLayoutEditPolicy() {

			protected EditPolicy createChildEditPolicy(EditPart child) {
				if (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {
					if (child instanceof ITextAwareEditPart) {
						return new GMFGraphTextSelectionEditPolicy();
					}
				}
				return super.createChildEditPolicy(child);
			}
		};
		return lep;

	}

	/**
	 * @@generated
	 */
	protected IFigure createNodeShape() {
		DiagramElementFigure figure = new DiagramElementFigure();
		return primaryShape = figure;
	}

	/**
	 * @@generated
	 */
	public DiagramElementFigure getPrimaryShape() {
		return (DiagramElementFigure) primaryShape;
	}

	/**
	 * @@generated
	 */
	protected boolean addFixedChild(EditPart childEditPart) {
		if (childEditPart instanceof CompartmentNameEditPart) {
			((CompartmentNameEditPart) childEditPart).setLabel(getPrimaryShape().getFigureDiagramElementFigure_NameLabel());
			return true;
		}
		return false;
	}

	/**
	 * @@generated
	 */
	protected boolean removeFixedChild(EditPart childEditPart) {

		return false;
	}

	/**
	 * @@generated
	 */
	protected void addChildVisual(EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

	/**
	 * @@generated
	 */
	protected void removeChildVisual(EditPart childEditPart) {
		if (removeFixedChild(childEditPart)) {
			return;
		}
		super.removeChildVisual(childEditPart);
	}

	/**
	 * @@generated
	 */
	protected IFigure getContentPaneFor(IGraphicalEditPart editPart) {

		return super.getContentPaneFor(editPart);
	}

	/**
	 * @@generated
	 */
	protected NodeFigure createNodePlate() {
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(getMapMode().DPtoLP(40), getMapMode().DPtoLP(40));
		return result;
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @@generated
	 */
	protected NodeFigure createNodeFigure() {
		NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new StackLayout());
		IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}

	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @@param nodeShape instance of generated figure class
	 * @@generated
	 */
	protected IFigure setupContentPane(IFigure nodeShape) {
		if (nodeShape.getLayoutManager() == null) {
			ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();
			layout.setSpacing(getMapMode().DPtoLP(5));
			nodeShape.setLayoutManager(layout);
		}
		return nodeShape; // use nodeShape itself as contentPane
	}

	/**
	 * @@generated
	 */
	public IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

	/**
	 * @@generated
	 */
	public EditPart getPrimaryChildEditPart() {
		return getChildBySemanticHint(GMFGraphVisualIDRegistry.getType(CompartmentNameEditPart.VISUAL_ID));
	}

	/**
	 * @@generated
	 */
	protected void handleNotificationEvent(Notification event) {
		if (event.getNotifier() == getModel() && EcorePackage.eINSTANCE.getEModelElement_EAnnotations().equals(event.getFeature())) {
			handleMajorSemanticChange();
		} else {
			super.handleNotificationEvent(event);
		}
	}

	/**
	 * @@generated
	 */
	public class DiagramElementFigure extends RectangleFigure {

		/**
		 * @@generated
		 */
		private WrappingLabel fFigureDiagramElementFigure_NameLabel;

		/**
		 * @@generated
		 */
		public DiagramElementFigure() {

			ToolbarLayout layoutThis = new ToolbarLayout();
			layoutThis.setStretchMinorAxis(true);
			layoutThis.setMinorAlignment(ToolbarLayout.ALIGN_CENTER);

			layoutThis.setSpacing(0);
			layoutThis.setVertical(true);

			this.setLayoutManager(layoutThis);

			createContents();
		}

		/**
		 * @@generated
		 */
		private void createContents() {

			fFigureDiagramElementFigure_NameLabel = new WrappingLabel();
			fFigureDiagramElementFigure_NameLabel.setText("");

			this.add(fFigureDiagramElementFigure_NameLabel);

		}

		/**
		 * @@generated
		 */
		private boolean myUseLocalCoordinates = false;

		/**
		 * @@generated
		 */
		protected boolean useLocalCoordinates() {
			return myUseLocalCoordinates;
		}

		/**
		 * @@generated
		 */
		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
			myUseLocalCoordinates = useLocalCoordinates;
		}

		/**
		 * @@generated
		 */
		public WrappingLabel getFigureDiagramElementFigure_NameLabel() {
			return fFigureDiagramElementFigure_NameLabel;
		}

	}

}
@


1.16
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@a160 1

@


1.15
log
@Updating with new figures code + setting proper layout for diahram elements
@
text
@a20 2
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
a21 2
import org.eclipse.gef.editpolicies.NonResizableEditPolicy;
import org.eclipse.gef.requests.CreateRequest;
d161 1
@


1.14
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@d16 1
d27 1
d30 1
d32 1
d35 1
a35 1
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;
d83 1
a83 1
		LayoutEditPolicy lep = new LayoutEditPolicy() {
d86 4
a89 3
				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
				if (result == null) {
					result = new NonResizableEditPolicy();
d91 1
a91 9
				return result;
			}

			protected Command getMoveChildrenCommand(Request request) {
				return null;
			}

			protected Command getCreateCommand(CreateRequest request) {
				return null;
d236 1
a236 1
		private WrapLabel fDiagramElementFigure_NameLabel;
d242 10
d260 2
a261 2
			WrapLabel diagramElementFigure_NameLabel0 = new WrapLabel();
			diagramElementFigure_NameLabel0.setText("");
d263 1
a263 2
			this.add(diagramElementFigure_NameLabel0);
			fDiagramElementFigure_NameLabel = diagramElementFigure_NameLabel0;
d289 2
a290 2
		public WrapLabel getFigureDiagramElementFigure_NameLabel() {
			return fDiagramElementFigure_NameLabel;
@


1.13
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@a66 1

@


1.12
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d3 7
a9 7
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d44 1
a44 1
	public static final int VISUAL_ID = 2001;
d71 2
d240 5
a245 1

a252 1
			WrapLabel fig_0 = new WrapLabel();
d254 2
a255 1
			setFigureDiagramElementFigure_NameLabel(fig_0);
d257 2
a258 1
			Object layData0 = null;
a259 1
			this.add(fig_0, layData0);
d265 1
a265 1
		private WrapLabel fDiagramElementFigure_NameLabel;
d270 2
a271 2
		public WrapLabel getFigureDiagramElementFigure_NameLabel() {
			return fDiagramElementFigure_NameLabel;
d277 2
a278 2
		private void setFigureDiagramElementFigure_NameLabel(WrapLabel fig) {
			fDiagramElementFigure_NameLabel = fig;
d284 2
a285 14
		private boolean myUseLocalCoordinates = false;

		/**
		 * @@generated
		 */
		protected boolean useLocalCoordinates() {
			return myUseLocalCoordinates;
		}

		/**
		 * @@generated
		 */
		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
			myUseLocalCoordinates = useLocalCoordinates;
@


1.11
log
@Updating templates + Correcting XYLayoutData creation strategy (default value)
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
d14 1
d16 2
a17 1

a20 1

a21 1

a23 1

a24 3

import org.eclipse.gmf.graphdef.editor.edit.policies.CompartmentCanonicalEditPolicy;
import org.eclipse.gmf.graphdef.editor.edit.policies.CompartmentGraphicalNodeEditPolicy;
a25 1

d27 1
a27 1

a28 1

a29 1

d31 1
a31 1

a33 1

d67 1
a69 2
		installEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new CompartmentGraphicalNodeEditPolicy());
		installEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new CompartmentCanonicalEditPolicy());
d77 1
d97 1
d130 1
d137 28
d166 2
a167 1
		return new DefaultSizeNodeFigure(getMapMode().DPtoLP(40), getMapMode().DPtoLP(40));
d222 5
a226 3
	protected void addChildVisual(EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
a227 11
		super.addChildVisual(childEditPart, -1);
	}

	/**
	 * @@generated
	 */
	protected void removeChildVisual(EditPart childEditPart) {
		if (removeFixedChild(childEditPart)) {
			return;
		}
		super.removeChildVisual(childEditPart);
d233 1
a233 1
	public class DiagramElementFigure extends org.eclipse.draw2d.RectangleFigure {
d247 1
a247 1
			org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel fig_0 = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel();
d259 1
a259 1
		private org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel fDiagramElementFigure_NameLabel;
d264 1
a264 1
		public org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel getFigureDiagramElementFigure_NameLabel() {
d271 1
a271 1
		private void setFigureDiagramElementFigure_NameLabel(org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel fig) {
@


1.10
log
@Updating with new templates.
@
text
@d86 1
a86 1
		return new LayoutEditPolicy() {
d104 1
@


1.9
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d125 2
a126 2
		if (childEditPart instanceof Compartment_nameEditPart) {
			((Compartment_nameEditPart) childEditPart).setLabel(getPrimaryShape().getFigureDiagramElementFigure_NameLabel());
d192 1
a192 1
		return getChildBySemanticHint(GMFGraphVisualIDRegistry.getType(Compartment_nameEditPart.VISUAL_ID));
@


1.8
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
@


1.7
log
@Updating with new templates
@
text
@d1 10
d52 1
a52 1
	public static final int VISUAL_ID = 1001;
d135 7
d199 12
a210 2
		if (!addFixedChild(childEditPart)) {
			super.addChildVisual(childEditPart, -1);
d212 1
@


1.6
log
@Updating with latest state of the code.
@
text
@d8 8
a19 1
import org.eclipse.gmf.graphdef.editor.edit.policies.GMFGraphTextSelectionEditPolicy;
a22 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;
a24 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy;
d69 8
a76 1
		installEditPolicy(EditPolicy.LAYOUT_ROLE, new ConstrainedToolbarLayoutEditPolicy() {
d79 3
a81 4
				if (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {
					if (child instanceof ITextAwareEditPart) {
						return new GMFGraphTextSelectionEditPolicy();
					}
d83 9
a91 1
				return super.createChildEditPolicy(child);
d93 1
a93 1
		});
@


1.5
log
@models updated, sample regenerated with new templates.
@
text
@a2 3
import java.util.ArrayList;
import java.util.List;

a3 1
import org.eclipse.draw2d.PositionConstants;
a7 4
import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gef.handles.MoveHandle;
import org.eclipse.gef.handles.ResizableHandleKit;
a20 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy;
a110 37
	 * @@generated
	 */
	public EditPolicy getPrimaryDragEditPolicy() {
		return new ResizableShapeEditPolicy() {

			protected List createSelectionHandles() {
				final GraphicalEditPart part = (GraphicalEditPart) getHost();
				final List list = new ArrayList();
				addMoveHandle(part, list);

				ResizableHandleKit.addHandle(part, list, PositionConstants.NORTH);

				ResizableHandleKit.addHandle(part, list, PositionConstants.SOUTH);

				ResizableHandleKit.addHandle(part, list, PositionConstants.WEST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.EAST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.NORTH_EAST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.NORTH_WEST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.SOUTH_EAST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.SOUTH_WEST);

				return list;
			}

			private void addMoveHandle(final GraphicalEditPart part, final List list) {
				MoveHandle moveHandle = new MoveHandle(part);
				list.add(moveHandle);
			}
		};
	}

	/**
@


1.4
log
@Using "isSuperTypeOf" instead of EClasses comparision in Visual ID registry.
@
text
@d224 12
a235 3
			org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel childDiagramElementFigure_NameLabel = createFigureDiagramElementFigure_NameLabel();
			setFigureDiagramElementFigure_NameLabel(childDiagramElementFigure_NameLabel);
			add(childDiagramElementFigure_NameLabel);
d237 1
d255 2
a256 11
		protected void setFigureDiagramElementFigure_NameLabel(org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel figure) {
			fDiagramElementFigure_NameLabel = figure;
		}

		/**
		 * @@generated
		 */
		private org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel createFigureDiagramElementFigure_NameLabel() {
			org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel DiagramElementFigure_NameLabel = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel();

			return DiagramElementFigure_NameLabel;
@


1.3
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@a150 2
				// just make it look nice 
				moveHandle.setBorder(null);
@


1.2
log
@Updating with new templates.
@
text
@d22 2
d46 1
a46 1
	public static String VISUAL_ID = "1001";
d204 1
a204 1
		return getChildBySemanticHint(Compartment_nameEditPart.VISUAL_ID);
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d224 1
a224 1
			org.eclipse.draw2d.Label childDiagramElementFigure_NameLabel = createFigureDiagramElementFigure_NameLabel();
d233 1
a233 1
		private org.eclipse.draw2d.Label fDiagramElementFigure_NameLabel;
d238 1
a238 1
		public org.eclipse.draw2d.Label getFigureDiagramElementFigure_NameLabel() {
d245 1
a245 1
		protected void setFigureDiagramElementFigure_NameLabel(org.eclipse.draw2d.Label figure) {
d252 2
a253 2
		private org.eclipse.draw2d.Label createFigureDiagramElementFigure_NameLabel() {
			org.eclipse.draw2d.Label DiagramElementFigure_NameLabel = new org.eclipse.draw2d.Label();
@

