head	1.8;
access;
symbols
	v20080722-1827:1.8
	v20080718-1700:1.8
	v20080718-1731:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080528-1052:1.8
	v20080521:1.8
	v20080516-1143:1.8
	v20080512-1200:1.8
	v20080510-0100:1.8
	v20080507-1326:1.8
	v20080501-1739:1.8
	v20080425-1959:1.8
	v20080411-0411:1.8
	v20080404-1111:1.8
	v20080322-0000:1.8
	v20080114-2222:1.7
	v20071214-1111:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070520-1200:1.6
	v20070420-1000:1.6
	v20070405-2000:1.5
	v20070405-1100:1.5
	v20070330-1300:1.4
	v20070307-0700:1.4
	v20070221-1500:1.4
	v20070208-1800:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	M1_20:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	RC2_10:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2008.03.13.17.56.06;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	54b147d96ab34567;

1.7
date	2007.05.31.15.52.30;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	49f1465eef2c4567;

1.6
date	2007.04.16.11.03.53;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	7e4e462358154567;

1.5
date	2007.04.04.20.23.25;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	ade461409204567;

1.4
date	2007.02.09.20.08.29;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	179c45ccd4b34567;

1.3
date	2006.06.02.15.08.29;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.30.13.06.13;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.23;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.8
log
@node content pane link to child accessor added.
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.policies;

import java.util.Iterator;

import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.DiagramElementFigureCreateCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.DiagramElementFigureReorientCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.NodeContentPaneCreateCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.NodeContentPaneReorientCommand;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramElementFigureEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeContentPaneEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeVisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;
import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class NodeItemSemanticEditPolicy extends GMFGraphBaseItemSemanticEditPolicy {

	/**
	 * @@generated
	 */
	protected Command getDestroyElementCommand(DestroyElementRequest req) {
		CompoundCommand cc = getDestroyEdgesCommand();
		addDestroyChildNodesCommand(cc);
		addDestroyShortcutsCommand(cc);
		View view = (View) getHost().getModel();
		if (view.getEAnnotation("Shortcut") != null) { //$NON-NLS-1$
			req.setElementToDestroy(view);
		}
		cc.add(getGEFWrapper(new DestroyElementCommand(req)));
		return cc.unwrap();
	}

	/**
	 * @@generated
	 */
	protected void addDestroyChildNodesCommand(CompoundCommand cmd) {
		View view = (View) getHost().getModel();
		EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
		if (annotation != null) {
			return;
		}
		for (Iterator it = view.getChildren().iterator(); it.hasNext();) {
			Node node = (Node) it.next();
			switch (GMFGraphVisualIDRegistry.getVisualID(node)) {
			case NodeVisualFacetsEditPart.VISUAL_ID:
				for (Iterator cit = node.getChildren().iterator(); cit.hasNext();) {
					Node cnode = (Node) cit.next();
					switch (GMFGraphVisualIDRegistry.getVisualID(cnode)) {
					}
				}
				break;
			}
		}
	}

	/**
	 * @@generated
	 */
	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req) : getCompleteCreateRelationshipCommand(req);
		return command != null ? command : super.getCreateRelationshipCommand(req);
	}

	/**
	 * @@generated
	 */
	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
		if (GMFGraphElementTypes.NodeContentPane_4006 == req.getElementType()) {
			return getGEFWrapper(new NodeContentPaneCreateCommand(req, req.getSource(), req.getTarget()));
		}
		if (GMFGraphElementTypes.DiagramElementFigure_4005 == req.getElementType()) {
			return getGEFWrapper(new DiagramElementFigureCreateCommand(req, req.getSource(), req.getTarget()));
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
		if (GMFGraphElementTypes.NodeContentPane_4006 == req.getElementType()) {
			return null;
		}
		if (GMFGraphElementTypes.DiagramElementFigure_4005 == req.getElementType()) {
			return null;
		}
		return null;
	}

	/**
	 * Returns command to reorient EReference based link. New link target or source
	 * should be the domain model element associated with this node.
	 * 
	 * @@generated
	 */
	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
		switch (getVisualID(req)) {
		case NodeContentPaneEditPart.VISUAL_ID:
			return getGEFWrapper(new NodeContentPaneReorientCommand(req));
		case DiagramElementFigureEditPart.VISUAL_ID:
			return getGEFWrapper(new DiagramElementFigureReorientCommand(req));
		}
		return super.getReorientReferenceRelationshipCommand(req);
	}

}
@


1.7
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d20 2
d23 1
d89 3
d102 3
d119 2
@


1.6
log
@[182339] akarjakina - provide different means to select parts of composite figures
Visible insets for top-level figures, custom popup action with nested submenus, simple handles behavior
@
text
@d3 7
a9 7
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d13 2
a15 1
import org.eclipse.emf.ecore.EObject;
d18 1
a18 2
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gmf.gmfgraph.DiagramElement;
d21 2
d28 1
d40 10
a49 2
		CompoundCommand cc = getDestroyEdgesCommand(req.isConfirmationRequired());
		cc.add(getMSLWrapper(new DestroyElementCommand(req) {
d51 17
a67 5
			protected EObject getElementToDestroy() {
				View view = (View) getHost().getModel();
				EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
				if (annotation != null) {
					return view;
d69 1
a69 1
				return super.getElementToDestroy();
d71 2
d74 6
a79 2
		}));
		return cc.unwrap();
d85 3
a87 3
	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
		if (GMFGraphElementTypes.DiagramElementFigure_4001 == req.getElementType()) {
			return req.getTarget() == null ? getCreateStartOutgoingDiagramElementFigure_4001Command(req) : null;
d89 1
a89 1
		return super.getCreateRelationshipCommand(req);
d95 3
a97 4
	protected Command getCreateStartOutgoingDiagramElementFigure_4001Command(CreateRelationshipRequest req) {
		EObject sourceEObject = req.getSource();
		if (false == sourceEObject instanceof DiagramElement) {
			return UnexecutableCommand.INSTANCE;
d99 1
a99 6
		DiagramElement source = (DiagramElement) sourceEObject;
		if (!GMFGraphBaseItemSemanticEditPolicy.LinkConstraints.canCreateDiagramElementFigure_4001(source, null)) {
			return UnexecutableCommand.INSTANCE;
		}
		return new Command() {
		};
d111 1
a111 1
			return getMSLWrapper(new DiagramElementFigureReorientCommand(req));
d115 1
@


1.5
log
@[173499] akarjakina - Enhance graphdef.editor with properties - use custom model to describe property sheet and generate PropertyTab code from that model
@
text
@a12 5
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;

a14 1
import org.eclipse.gef.EditPart;
a20 1
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeEditPart;
a21 1
import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;
a25 1
import org.eclipse.gmf.runtime.notation.Edge;
d37 1
a37 12
		CompoundCommand cc = new CompoundCommand();
		Collection allEdges = new ArrayList();
		View view = (View) getHost().getModel();
		allEdges.addAll(view.getSourceEdges());
		allEdges.addAll(view.getTargetEdges());
		for (Iterator it = allEdges.iterator(); it.hasNext();) {
			Edge nextEdge = (Edge) it.next();
			EditPart nextEditPart = (EditPart) getHost().getViewer().getEditPartRegistry().get(nextEdge);
			EditCommandRequestWrapper editCommandRequest = new EditCommandRequestWrapper(new DestroyElementRequest(((NodeEditPart) getHost()).getEditingDomain(), req.isConfirmationRequired()),
					Collections.EMPTY_MAP);
			cc.add(nextEditPart.getCommand(editCommandRequest));
		}
d50 1
a50 1
		return cc;
@


1.4
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d25 2
d33 1
d99 13
@


1.3
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
d13 8
d22 6
d31 1
a31 2
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EAnnotation;
a32 5
import org.eclipse.gef.commands.UnexecutableCommand;

import org.eclipse.gmf.gmfgraph.DiagramElement;

import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;
d43 13
a55 1
		return getMSLWrapper(new DestroyElementCommand(req) {
d66 2
a67 1
		});
d75 1
a75 1
			return req.getTarget() == null ? getCreateStartOutgoingDiagramElement_Figure4001Command(req) : null;
d83 7
a89 3
	protected Command getCreateStartOutgoingDiagramElement_Figure4001Command(CreateRelationshipRequest req) {
		DiagramElement element = (DiagramElement) getSemanticElement();
		if (element.getFigure() != null) {
a91 1

d95 1
@


1.2
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d1 10
d53 2
a54 2
		if (GMFGraphElementTypes.DiagramElementFigure_3001 == req.getElementType()) {
			return req.getTarget() == null ? getCreateStartOutgoingDiagramElement_Figure3001Command(req) : null;
d62 1
a62 1
	protected Command getCreateStartOutgoingDiagramElement_Figure3001Command(CreateRelationshipRequest req) {
@

