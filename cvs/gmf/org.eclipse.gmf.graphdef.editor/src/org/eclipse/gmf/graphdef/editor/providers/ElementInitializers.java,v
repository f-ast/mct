head	1.9;
access;
symbols
	v20080722-1827:1.9
	v20080718-1700:1.8
	v20080718-1731:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080528-1052:1.7
	v20080521:1.6
	v20080516-1143:1.6
	v20080512-1200:1.6
	v20080510-0100:1.6
	v20080507-1326:1.6
	v20080501-1739:1.6
	v20080425-1959:1.6
	v20080411-0411:1.6
	v20080404-1111:1.6
	v20080322-0000:1.6
	v20080114-2222:1.5
	v20071214-1111:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070520-1200:1.4
	v20070420-1000:1.4
	v20070405-2000:1.3
	v20070405-1100:1.3
	v20070330-1300:1.2
	v20070307-0700:1.2
	v20070221-1500:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2008.06.28.16.13.42;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	26c9486663364567;

1.8
date	2008.05.30.17.14.49;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	70b4484036034567;

1.7
date	2008.05.28.12.37.14;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	5988483d51f74567;

1.6
date	2008.03.07.12.50.34;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	179447d13a164567;

1.5
date	2007.05.31.15.52.32;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	49f1465eef2c4567;

1.4
date	2007.04.16.11.03.53;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	7e4e462358154567;

1.3
date	2007.04.04.20.23.26;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	ade461409204567;

1.2
date	2007.03.02.19.21.06;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	1bbe45e879214567;

1.1
date	2007.02.09.20.08.31;	author atikhomirov;	state Exp;
branches;
next	;
commitid	179c45ccd4b34567;


desc
@@


1.9
log
@Regenerating the code with new templates.
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.providers;

import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmf.gmfgraph.GMFGraphFactory;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.Point;
import org.eclipse.gmf.gmfgraph.Polygon;
import org.eclipse.gmf.gmfgraph.Polyline;
import org.eclipse.gmf.graphdef.editor.expressions.GMFGraphAbstractExpression;
import org.eclipse.gmf.graphdef.editor.expressions.GMFGraphOCLFactory;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;

/**
 * @@generated
 */
public class ElementInitializers {

	/**
	 * @@generated
	 */
	public static void init_Polyline_3014(Polyline instance) {
		try {
			Point newInstance_0_0 = GMFGraphFactory.eINSTANCE.createPoint();

			instance.getTemplate().add(newInstance_0_0);
			Object value_0_0_0 = GMFGraphOCLFactory.getExpression("10", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance_0_0);

			value_0_0_0 = GMFGraphAbstractExpression.performCast(value_0_0_0, EcorePackage.eINSTANCE.getEInt());
			newInstance_0_0.setX(((Integer) value_0_0_0).intValue());
			Object value_0_0_1 = GMFGraphOCLFactory.getExpression("10", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance_0_0);

			value_0_0_1 = GMFGraphAbstractExpression.performCast(value_0_0_1, EcorePackage.eINSTANCE.getEInt());
			newInstance_0_0.setY(((Integer) value_0_0_1).intValue());

			Point newInstance_0_1 = GMFGraphFactory.eINSTANCE.createPoint();

			instance.getTemplate().add(newInstance_0_1);
			Object value_0_1_0 = GMFGraphOCLFactory.getExpression("30", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance_0_1);

			value_0_1_0 = GMFGraphAbstractExpression.performCast(value_0_1_0, EcorePackage.eINSTANCE.getEInt());
			newInstance_0_1.setX(((Integer) value_0_1_0).intValue());
			Object value_0_1_1 = GMFGraphOCLFactory.getExpression("30", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance_0_1);

			value_0_1_1 = GMFGraphAbstractExpression.performCast(value_0_1_1, EcorePackage.eINSTANCE.getEInt());
			newInstance_0_1.setY(((Integer) value_0_1_1).intValue());

		} catch (RuntimeException e) {
			GMFGraphDiagramEditorPlugin.getInstance().logError("Element initialization failed", e); //$NON-NLS-1$						
		}
	}

	/**
	 * @@generated
	 */
	public static void init_Polygon_3023(Polygon instance) {
		try {
			Point newInstance_0_0 = GMFGraphFactory.eINSTANCE.createPoint();

			instance.getTemplate().add(newInstance_0_0);
			Object value_0_0_0 = GMFGraphOCLFactory.getExpression("10", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance_0_0);

			value_0_0_0 = GMFGraphAbstractExpression.performCast(value_0_0_0, EcorePackage.eINSTANCE.getEInt());
			newInstance_0_0.setX(((Integer) value_0_0_0).intValue());
			Object value_0_0_1 = GMFGraphOCLFactory.getExpression("10", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance_0_0);

			value_0_0_1 = GMFGraphAbstractExpression.performCast(value_0_0_1, EcorePackage.eINSTANCE.getEInt());
			newInstance_0_0.setY(((Integer) value_0_0_1).intValue());

			Point newInstance_0_1 = GMFGraphFactory.eINSTANCE.createPoint();

			instance.getTemplate().add(newInstance_0_1);
			Object value_0_1_0 = GMFGraphOCLFactory.getExpression("30", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance_0_1);

			value_0_1_0 = GMFGraphAbstractExpression.performCast(value_0_1_0, EcorePackage.eINSTANCE.getEInt());
			newInstance_0_1.setX(((Integer) value_0_1_0).intValue());
			Object value_0_1_1 = GMFGraphOCLFactory.getExpression("30", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance_0_1);

			value_0_1_1 = GMFGraphAbstractExpression.performCast(value_0_1_1, EcorePackage.eINSTANCE.getEInt());
			newInstance_0_1.setY(((Integer) value_0_1_1).intValue());

			Point newInstance_0_2 = GMFGraphFactory.eINSTANCE.createPoint();

			instance.getTemplate().add(newInstance_0_2);
			Object value_0_2_0 = GMFGraphOCLFactory.getExpression("10", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance_0_2);

			value_0_2_0 = GMFGraphAbstractExpression.performCast(value_0_2_0, EcorePackage.eINSTANCE.getEInt());
			newInstance_0_2.setX(((Integer) value_0_2_0).intValue());
			Object value_0_2_1 = GMFGraphOCLFactory.getExpression("60", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance_0_2);

			value_0_2_1 = GMFGraphAbstractExpression.performCast(value_0_2_1, EcorePackage.eINSTANCE.getEInt());
			newInstance_0_2.setY(((Integer) value_0_2_1).intValue());

		} catch (RuntimeException e) {
			GMFGraphDiagramEditorPlugin.getInstance().logError("Element initialization failed", e); //$NON-NLS-1$						
		}
	}
}
@


1.8
log
@[233206] - Support Polygon figure in .gmfgraph editor
@
text
@d33 1
d35 2
a36 1
			Point newInstance100 = GMFGraphFactory.eINSTANCE.createPoint();
d38 3
a40 2
			instance.getTemplate().add(newInstance100);
			Object value10100 = GMFGraphOCLFactory.getExpression("10", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance100);
d42 2
a43 3
			value10100 = GMFGraphAbstractExpression.performCast(value10100, EcorePackage.eINSTANCE.getEInt());
			newInstance100.setX(((Integer) value10100).intValue());
			Object value10101 = GMFGraphOCLFactory.getExpression("10", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance100);
d45 1
a45 2
			value10101 = GMFGraphAbstractExpression.performCast(value10101, EcorePackage.eINSTANCE.getEInt());
			newInstance100.setY(((Integer) value10101).intValue());
d47 2
a48 1
			Point newInstance101 = GMFGraphFactory.eINSTANCE.createPoint();
d50 3
a52 2
			instance.getTemplate().add(newInstance101);
			Object value10200 = GMFGraphOCLFactory.getExpression("30", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance101);
d54 2
a55 3
			value10200 = GMFGraphAbstractExpression.performCast(value10200, EcorePackage.eINSTANCE.getEInt());
			newInstance101.setX(((Integer) value10200).intValue());
			Object value10201 = GMFGraphOCLFactory.getExpression("30", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance101);
a56 2
			value10201 = GMFGraphAbstractExpression.performCast(value10201, EcorePackage.eINSTANCE.getEInt());
			newInstance101.setY(((Integer) value10201).intValue());
d67 1
d69 2
a70 1
			Point newInstance100 = GMFGraphFactory.eINSTANCE.createPoint();
d72 3
a74 2
			instance.getTemplate().add(newInstance100);
			Object value10100 = GMFGraphOCLFactory.getExpression("10", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance100);
d76 2
a77 3
			value10100 = GMFGraphAbstractExpression.performCast(value10100, EcorePackage.eINSTANCE.getEInt());
			newInstance100.setX(((Integer) value10100).intValue());
			Object value10101 = GMFGraphOCLFactory.getExpression("10", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance100);
d79 1
a79 2
			value10101 = GMFGraphAbstractExpression.performCast(value10101, EcorePackage.eINSTANCE.getEInt());
			newInstance100.setY(((Integer) value10101).intValue());
d81 2
a82 1
			Point newInstance101 = GMFGraphFactory.eINSTANCE.createPoint();
d84 3
a86 2
			instance.getTemplate().add(newInstance101);
			Object value10200 = GMFGraphOCLFactory.getExpression("30", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance101);
d88 2
a89 3
			value10200 = GMFGraphAbstractExpression.performCast(value10200, EcorePackage.eINSTANCE.getEInt());
			newInstance101.setX(((Integer) value10200).intValue());
			Object value10201 = GMFGraphOCLFactory.getExpression("30", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance101);
d91 1
a91 2
			value10201 = GMFGraphAbstractExpression.performCast(value10201, EcorePackage.eINSTANCE.getEInt());
			newInstance101.setY(((Integer) value10201).intValue());
d93 2
a94 1
			Point newInstance102 = GMFGraphFactory.eINSTANCE.createPoint();
d96 3
a98 2
			instance.getTemplate().add(newInstance102);
			Object value10300 = GMFGraphOCLFactory.getExpression("10", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance102);
d100 2
a101 3
			value10300 = GMFGraphAbstractExpression.performCast(value10300, EcorePackage.eINSTANCE.getEInt());
			newInstance102.setX(((Integer) value10300).intValue());
			Object value10301 = GMFGraphOCLFactory.getExpression("60", GMFGraphPackage.eINSTANCE.getPoint()).evaluate(newInstance102);
a102 2
			value10301 = GMFGraphAbstractExpression.performCast(value10301, EcorePackage.eINSTANCE.getEInt());
			newInstance102.setY(((Integer) value10301).intValue());
@


1.7
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d17 1
d61 46
@


1.6
log
@Updating with new figures code + setting proper layout for diahram elements
@
text
@d13 9
d26 34
@


1.5
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@a12 2
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;

@


1.4
log
@[182339] akarjakina - provide different means to select parts of composite figures
Visible insets for top-level figures, custom popup action with nested submenus, simple handles behavior
@
text
@d2 8
a9 8
 * Copyright (c) 2006, 2007 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d13 1
@


1.3
log
@[173499] akarjakina - Enhance graphdef.editor with properties - use custom model to describe property sheet and generate PropertyTab code from that model
@
text
@a12 1
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;
@


1.2
log
@organized imports
@
text
@d13 1
@


1.1
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@a12 3
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;
@

