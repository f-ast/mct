head	1.5;
access;
symbols
	v20070520-1200:1.4
	v20070420-1000:1.4
	v20070405-2000:1.4
	v20070405-1100:1.4
	v20070330-1300:1.4
	v20070307-0700:1.4
	v20070221-1500:1.4
	v20070208-1800:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	M1_20:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	RC2_10:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2007.05.31.15.52.32;	author ashatalin;	state dead;
branches;
next	1.4;
commitid	49f1465eef2c4567;

1.4
date	2007.02.09.20.08.31;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	179c45ccd4b34567;

1.3
date	2006.06.02.15.08.30;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.30.13.06.14;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.27;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.providers;

import java.text.FieldPosition;
import java.text.MessageFormat;
import java.util.Collections;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;

/**
 * @@generated
 */
public class GMFGraphStructuralFeatureParser extends GMFGraphAbstractParser {

	/**
	 * @@generated
	 */
	public static final MessageFormat DEFAULT_PROCESSOR = new MessageFormat("{0}"); //$NON-NLS-1$

	/**
	 * @@generated
	 */
	private EStructuralFeature feature;

	/**
	 * @@generated
	 */
	public GMFGraphStructuralFeatureParser(EStructuralFeature feature) {
		this.feature = feature;
	}

	/**
	 * @@generated
	 */
	protected MessageFormat getViewProcessor() {
		MessageFormat processor = super.getViewProcessor();
		return processor == null ? DEFAULT_PROCESSOR : processor;
	}

	/**
	 * @@generated
	 */
	protected MessageFormat getEditProcessor() {
		MessageFormat processor = super.getEditProcessor();
		return processor == null ? DEFAULT_PROCESSOR : processor;
	}

	/**
	 * @@generated
	 */
	protected EObject getDomainElement(EObject element) {
		return element;
	}

	/**
	 * @@generated
	 */
	protected String getStringByPattern(IAdaptable adapter, int flags, String pattern, MessageFormat processor) {
		EObject element = (EObject) adapter.getAdapter(EObject.class);
		element = getDomainElement(element);
		return getStringByPattern(element, feature, processor);
	}

	/**
	 * @@generated
	 */
	protected String getStringByPattern(EObject element, EStructuralFeature feature, MessageFormat processor) {
		Object value = element == null ? null : element.eGet(feature);
		value = getValidValue(feature, value);
		return processor.format(new Object[] { value }, new StringBuffer(), new FieldPosition(0)).toString();
	}

	/**
	 * @@generated
	 */
	protected IParserEditStatus validateValues(Object[] values) {
		if (values.length > 1) {
			return ParserEditStatus.UNEDITABLE_STATUS;
		}
		Object value = values.length == 1 ? values[0] : null;
		value = getValidNewValue(feature, value);
		if (value instanceof InvalidValue) {
			return new ParserEditStatus(GMFGraphDiagramEditorPlugin.ID, IParserEditStatus.UNEDITABLE, value.toString());
		}
		return ParserEditStatus.EDITABLE_STATUS;
	}

	/**
	 * @@generated
	 */
	public ICommand getParseCommand(IAdaptable adapter, Object[] values) {
		EObject element = (EObject) adapter.getAdapter(EObject.class);
		element = getDomainElement(element);
		if (element == null) {
			return UnexecutableCommand.INSTANCE;
		}
		TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(element);
		if (editingDomain == null) {
			return UnexecutableCommand.INSTANCE;
		}
		Object value = values.length == 1 ? values[0] : null;
		ICommand command = getModificationCommand(element, feature, value);
		return new CompositeTransactionalCommand(editingDomain, command.getLabel(), Collections.singletonList(command));
	}

	/**
	 * @@generated
	 */
	public boolean isAffectingEvent(Object event, int flags) {
		if (event instanceof Notification) {
			return isAffectingFeature(((Notification) event).getFeature());
		}
		return false;
	}

	/**
	 * @@generated
	 */
	protected boolean isAffectingFeature(Object eventFeature) {
		return feature == eventFeature;
	}
}
@


1.4
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@@


1.3
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
d38 1
a38 1
	private static final MessageFormat DEFAULT_PROCESSOR = new MessageFormat("{0}"); //$NON-NLS-1$
d71 7
d80 9
a88 1
		Object value = element.eGet(feature);
d113 1
d131 1
a131 3
			if (feature == ((Notification) event).getFeature()) {
				return true;
			}
d135 7
@


1.2
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
d38 1
a38 1
	private static final MessageFormat DEFAULT_PROCESSOR = new MessageFormat("{0}");
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d1 10
@

