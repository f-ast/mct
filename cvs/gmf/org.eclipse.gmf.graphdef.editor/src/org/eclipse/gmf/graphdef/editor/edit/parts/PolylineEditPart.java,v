head	1.29;
access;
symbols
	v20080722-1827:1.29
	v20080718-1700:1.29
	v20080718-1731:1.29
	v20080716-1642:1.29
	R2_1_maintenance:1.29.0.2
	Root_R2_1_maintenance:1.29
	R2_1_0:1.29
	v20080610-1132:1.29
	v20080603-1553:1.29
	v20080528-1052:1.29
	v20080521:1.20
	v20080516-1143:1.19
	v20080512-1200:1.17
	v20080510-0100:1.16
	v20080507-1326:1.16
	v20080501-1739:1.16
	v20080425-1959:1.16
	v20080411-0411:1.16
	v20080404-1111:1.16
	v20080322-0000:1.16
	v20080114-2222:1.15
	v20071214-1111:1.15
	v20070809-0000:1.15
	R2_0_maintenance:1.15.0.2
	R2_0:1.15
	R4_20:1.15
	v20070621-0000:1.15
	RC3_20:1.15
	v20070605-1400:1.15
	v20070601-1400:1.15
	v20070520-1200:1.14
	v20070420-1000:1.14
	v20070405-2000:1.14
	v20070405-1100:1.14
	v20070330-1300:1.14
	v20070307-0700:1.14
	v20070221-1500:1.14
	v20070208-1800:1.13
	M4_20:1.13
	v20061214-0000:1.13
	M3_20:1.13
	v20061013-1330:1.13
	M1_20:1.13
	v20060713-1700:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060616-1200:1.12
	v20060609-1400:1.12
	v20060531-1730:1.11
	v20060530-1930:1.10
	v20060526-1200:1.9
	v20060519-0800:1.8
	v20060512-1000:1.8
	I20060512-1000:1.8
	RC2_10:1.6
	I20060505-1400:1.5
	I20060428-1300:1.3
	I20060424-0500:1.2
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.29
date	2008.05.28.12.42.32;	author ashatalin;	state Exp;
branches;
next	1.28;
commitid	67a1483d53374567;

1.28
date	2008.05.28.12.37.13;	author ashatalin;	state Exp;
branches;
next	1.27;
commitid	5988483d51f74567;

1.27
date	2008.05.28.11.08.28;	author ashatalin;	state Exp;
branches;
next	1.26;
commitid	6cc8483d3d2b4567;

1.26
date	2008.05.27.16.33.09;	author ashatalin;	state Exp;
branches;
next	1.25;
commitid	549e483c37c44567;

1.25
date	2008.05.27.16.16.52;	author ashatalin;	state Exp;
branches;
next	1.24;
commitid	3565483c33f24567;

1.24
date	2008.05.27.12.28.08;	author ashatalin;	state Exp;
branches;
next	1.23;
commitid	68fd483bfe544567;

1.23
date	2008.05.23.14.30.30;	author ashatalin;	state Exp;
branches;
next	1.22;
commitid	1aec4836d5014567;

1.22
date	2008.05.23.12.52.26;	author ashatalin;	state Exp;
branches;
next	1.21;
commitid	54964836be094567;

1.21
date	2008.05.22.12.18.01;	author ashatalin;	state Exp;
branches;
next	1.20;
commitid	969483564774567;

1.20
date	2008.05.19.16.33.10;	author ashatalin;	state Exp;
branches;
next	1.19;
commitid	77734831abc34567;

1.19
date	2008.05.14.13.05.38;	author ashatalin;	state Exp;
branches;
next	1.18;
commitid	7a4d482ae3a14567;

1.18
date	2008.05.14.11.16.58;	author ashatalin;	state Exp;
branches;
next	1.17;
commitid	377e482aca274567;

1.17
date	2008.05.12.17.40.17;	author ashatalin;	state Exp;
branches;
next	1.16;
commitid	a53482880fd4567;

1.16
date	2008.02.22.13.07.59;	author ashatalin;	state Exp;
branches;
next	1.15;
commitid	4c5647bec9294567;

1.15
date	2007.05.31.15.52.31;	author ashatalin;	state Exp;
branches;
next	1.14;
commitid	49f1465eef2c4567;

1.14
date	2007.02.09.20.08.31;	author atikhomirov;	state Exp;
branches;
next	1.13;
commitid	179c45ccd4b34567;

1.13
date	2006.06.26.18.38.20;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.02.15.08.29;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.31.16.37.46;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.30.13.06.11;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.22.17.37.30;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.11.16.02.54;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.09.12.18.31;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.05.17.50.39;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.05.16.31.18;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.03.15.04.02;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.25.18.01.18;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.20.36.59;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.26;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.29
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2008 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.parts;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Polyline;
import org.eclipse.draw2d.XYLayout;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.editpolicies.LayoutEditPolicy;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.graphdef.editor.edit.policies.PolylineCanonicalEditPolicy;
import org.eclipse.gmf.graphdef.editor.edit.policies.PolylineItemSemanticEditPolicy;
import org.eclipse.gmf.graphdef.editor.edit.polocies.PointContainerXYLayoutEditPolicy;
import org.eclipse.gmf.graphdef.editor.sheet.AttachAdapter;
import org.eclipse.gmf.graphdef.editor.sheet.ChangeTracker;
import org.eclipse.gmf.graphdef.editor.sheet.FeatureTracker;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx;
import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class PolylineEditPart extends AbstractFigureEditPart {

	/**
	 * @@generated
	 */
	public static final int VISUAL_ID = 3014;

	/**
	 * @@generated
	 */
	protected IFigure contentPane;

	/**
	 * @@generated
	 */
	protected IFigure primaryShape;

	/**
	 * @@generated
	 */
	public PolylineEditPart(View view) {
		super(view);
	}

	/**
	 * @@generated
	 */
	protected void createDefaultEditPolicies() {
		installEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new PolylineItemSemanticEditPolicy());
		installEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());
		installEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new PolylineCanonicalEditPolicy());
		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
		// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}

	/**
	 * @@generated
	 */
	protected LayoutEditPolicy createLayoutEditPolicy() {
		return new PointContainerXYLayoutEditPolicy(getMapMode(), true);
	}

	/**
	 * @@generated
	 */
	protected IFigure createNodeShape() {
		return primaryShape = new Polyline();
	}

	/**
	 * @@generated
	 */
	public Polyline getPrimaryShape() {
		return (Polyline) primaryShape;
	}

	/**
	 * @@generated
	 */
	protected NodeFigure createNodePlate() {
		DefaultSizeNodeFigureExt result = new DefaultSizeNodeFigureExt(getMapMode().DPtoLP(0), getMapMode().DPtoLP(0));
		result.setMinimumSize(new Dimension(0, 0));
		return result;
	}

	/**
	 * @@generated
	 */
	public EditPolicy getPrimaryDragEditPolicy() {
		NonResizableEditPolicyEx editPolicy = new NonResizableEditPolicyEx();
		editPolicy.setDragAllowed(false);
		return editPolicy;
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @@generated
	 */
	protected NodeFigure createNodeFigure() {
		NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new XYLayout() {

			public Point getOrigin(IFigure parent) {
				return new Point();
			}
		});
		IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = figure;
		return figure;
	}

	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @@param nodeShape instance of generated figure class
	 * @@generated
	 */
	protected IFigure setupContentPane(IFigure nodeShape) {
		if (nodeShape.getLayoutManager() == null) {
			ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();
			layout.setSpacing(getMapMode().DPtoLP(5));
			nodeShape.setLayoutManager(layout);
		}
		return nodeShape; // use nodeShape itself as contentPane
	}

	/**
	 * @@generated
	 */
	public IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

	/**
	 * @@generated
	 */
	protected void handleNotificationEvent(Notification notification) {
		Object feature = notification.getFeature();
		if (NotationPackage.eINSTANCE.getSize_Width().equals(feature) || NotationPackage.eINSTANCE.getSize_Height().equals(feature) || NotationPackage.eINSTANCE.getLocation_X().equals(feature)
				|| NotationPackage.eINSTANCE.getLocation_Y().equals(feature)) {
			return;
		} else if (NotationPackage.eINSTANCE.getFillStyle_FillColor().equals(feature)) {
			return;
		} else if (NotationPackage.eINSTANCE.getLineStyle_LineColor().equals(feature)) {
			return;
		}
		super.handleNotificationEvent(notification);
	}

	/**
	 * @@generated
	 */
	private Collection<Adapter> myDomainElementAdapters = new ArrayList<Adapter>();

	/**
	 * @@generated
	 */
	private org.eclipse.gmf.gmfgraph.Polyline getGmfgraphElement() {
		View view = getNotationView();
		if (view == null) {
			return null;
		}
		EObject element = view.getElement();
		if (element instanceof org.eclipse.gmf.gmfgraph.Polyline) {
			org.eclipse.gmf.gmfgraph.Polyline modelFigureElement = (org.eclipse.gmf.gmfgraph.Polyline) element;
			return modelFigureElement;
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected void removeSemanticListeners() {
		org.eclipse.gmf.gmfgraph.Polyline modelElement = getGmfgraphElement();
		if (modelElement != null) {
			modelElement.eAdapters().removeAll(myDomainElementAdapters);
			myDomainElementAdapters.clear();
		}
		super.removeSemanticListeners();
	}

	/**
	 * @@generated
	 */
	protected void setFigure(IFigure figure) {
		super.setFigure(figure);
		org.eclipse.gmf.gmfgraph.Polyline modelElement = getGmfgraphElement();
		if (modelElement != null) {
			refreshBounds();
			refreshLayoutData();
			getPrimaryShape().setOutline(modelElement.isOutline());
			getPrimaryShape().setFill(modelElement.isFill());
			getPrimaryShape().setLineStyle(getLineStyle(modelElement.getLineKind()));
			getPrimaryShape().setFillXOR(modelElement.isXorFill());
			getPrimaryShape().setOutlineXOR(modelElement.isXorOutline());
			getPrimaryShape().setLayoutManager(getLayoutManager(modelElement.getLayout()));
			refreshLayoutManager();
			getPrimaryShape().setBackgroundColor(getColor(modelElement.getBackgroundColor()));
			getPrimaryShape().setForegroundColor(getColor(modelElement.getForegroundColor()));
			refreshFont();
			getPrimaryShape().setPoints(getPointList(modelElement.getTemplate()));
			refreshMainFigureBounds();
			getPrimaryShape().setLineWidth(modelElement.getLineWidth());
			refreshMainFigureBounds();
		}
	}

	/**
	 * @@generated
	 */
	public void activate() {
		if (isActive()) {
			return;
		}
		final org.eclipse.gmf.gmfgraph.Polyline modelElement = getGmfgraphElement();
		if (modelElement == null) {
			super.activate();
			return;
		}

		ChangeTracker refreshBoundsTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				refreshBounds();
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Location(), refreshBoundsTracker, new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE
				.getPoint_X()), new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())));
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_PreferredSize(), refreshBoundsTracker, new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE
				.getDimension_Dx()), new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())));

		ChangeTracker refreshLayoutDataTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				refreshLayoutData();
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData(), refreshLayoutDataTracker, new AttachAdapter(GMFGraphPackage.eINSTANCE
				.getXYLayoutData_TopLeft(), refreshLayoutDataTracker, new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getPoint_X()), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())), new AttachAdapter(GMFGraphPackage.eINSTANCE.getXYLayoutData_Size(), refreshLayoutDataTracker, new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getBorderLayoutData_Alignment()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getBorderLayoutData_Vertical()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_GrabExcessHorizontalSpace()), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_GrabExcessVerticalSpace()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getGridLayoutData_VerticalAlignment()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_HorizontalAlignment()), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_VerticalSpan()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getGridLayoutData_HorizontalSpan()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_HorizontalIndent()), new AttachAdapter(
				GMFGraphPackage.eINSTANCE.getGridLayoutData_SizeHint(), refreshLayoutDataTracker, new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()),
				new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy()))));

		ChangeTracker outlineTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setOutline(modelElement.isOutline());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(outlineTracker, GMFGraphPackage.eINSTANCE.getShape_Outline()));

		ChangeTracker fillTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setFill(modelElement.isFill());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(fillTracker, GMFGraphPackage.eINSTANCE.getShape_Fill()));

		ChangeTracker lineStyleTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setLineStyle(getLineStyle(modelElement.getLineKind()));
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(lineStyleTracker, GMFGraphPackage.eINSTANCE.getShape_LineKind()));

		ChangeTracker fillXORTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setFillXOR(modelElement.isXorFill());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(fillXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorFill()));

		ChangeTracker outlineXORTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setOutlineXOR(modelElement.isXorOutline());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(outlineXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorOutline()));

		ChangeTracker layoutManagerTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setLayoutManager(getLayoutManager(modelElement.getLayout()));
				refreshLayoutManager();
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getLayoutable_Layout(), layoutManagerTracker, new AttachAdapter(GMFGraphPackage.eINSTANCE.getBorderLayout_Spacing(),
				layoutManagerTracker, new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE
						.getDimension_Dy())), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_Vertical()), new FeatureTracker(layoutManagerTracker,
				GMFGraphPackage.eINSTANCE.getFlowLayout_MatchMinorSize()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_ForceSingleLine()), new FeatureTracker(
				layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorAlignment()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorAlignment()),
				new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorSpacing()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE
						.getFlowLayout_MinorSpacing()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_NumColumns()), new FeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getGridLayout_EqualWidth()), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayout_Margins(), layoutManagerTracker, new FeatureTracker(
						layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())), new AttachAdapter(
						GMFGraphPackage.eINSTANCE.getGridLayout_Spacing(), layoutManagerTracker, new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()),
						new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy()))));

		ChangeTracker backgroundColorTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setBackgroundColor(getColor(modelElement.getBackgroundColor()));
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor(), backgroundColorTracker, new FeatureTracker(backgroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new FeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()), new FeatureTracker(
				backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new FeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));

		ChangeTracker foregroundColorTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setForegroundColor(getColor(modelElement.getForegroundColor()));
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor(), foregroundColorTracker, new FeatureTracker(foregroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new FeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()), new FeatureTracker(
				foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new FeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));

		ChangeTracker refreshFontTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				refreshFont();
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Font(), refreshFontTracker, new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_FaceName()), new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Height()), new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_Style())));

		ChangeTracker pointsTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setPoints(getPointList(modelElement.getTemplate()));
				refreshMainFigureBounds();
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getPolyline_Template(), pointsTracker, new FeatureTracker(pointsTracker, GMFGraphPackage.eINSTANCE.getPoint_X()),
				new FeatureTracker(pointsTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())));

		ChangeTracker lineWidthTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setLineWidth(modelElement.getLineWidth());
				refreshMainFigureBounds();
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(lineWidthTracker, GMFGraphPackage.eINSTANCE.getShape_LineWidth()));
		modelElement.eAdapters().addAll(myDomainElementAdapters);
		super.activate();
	}

	/**
	 * @@generated
	 */
	protected void refreshBounds() {
		org.eclipse.gmf.gmfgraph.Polyline modelElement = getGmfgraphElement();
		if (modelElement == null) {
			return;
		}
		if (modelElement.getPreferredSize() != null) {
			getFigure().setPreferredSize(getDraw2dDimension(modelElement.getPreferredSize()));
		}
		if (modelElement.getLocation() != null) {
			getFigure().setLocation(getDraw2DPoint(modelElement.getLocation()));
		}
	}

	/**
	 * @@generated
	 */
	public void refreshMainFigureBounds() {
		DefaultSizeNodeFigureExt nodeFigure = (DefaultSizeNodeFigureExt) getFigure();
		nodeFigure.fireFigureMoved();
		nodeFigure.revalidate();
	}

	/**
	 * @@generated
	 */
	class DefaultSizeNodeFigureExt extends DefaultSizeNodeFigure {

		/**
		 * @@generated
		 */
		DefaultSizeNodeFigureExt(int width, int height) {
			super(width, height);
		}

		/**
		 * @@generated
		 */
		public void setBounds(Rectangle rect) {
			getPrimaryShape().setBounds(rect);
		}

		/**
		 * @@generated
		 */
		public Rectangle getBounds() {
			Rectangle polylineBounds = getPrimaryShape().getBounds().getCopy();
			polylineBounds.width += 8;
			polylineBounds.height += 8;
			return polylineBounds;
		}

		/**
		 * @@generated
		 */
		public void fireFigureMoved() {
			super.fireFigureMoved();
		}

	}

}
@


1.28
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d33 1
a33 1
import org.eclipse.gmf.graphdef.editor.sheet.MultipleTargetsFeatureTracker;
d265 4
a268 4
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Location(), refreshBoundsTracker, new MultipleTargetsFeatureTracker(refreshBoundsTracker,
				GMFGraphPackage.eINSTANCE.getPoint_X()), new MultipleTargetsFeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())));
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_PreferredSize(), refreshBoundsTracker, new MultipleTargetsFeatureTracker(refreshBoundsTracker,
				GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())));
d277 11
a287 13
				.getXYLayoutData_TopLeft(), refreshLayoutDataTracker, new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getPoint_X()),
				new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())), new AttachAdapter(GMFGraphPackage.eINSTANCE.getXYLayoutData_Size(),
				refreshLayoutDataTracker, new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(
						refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getBorderLayoutData_Alignment()), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getBorderLayoutData_Vertical()),
				new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_GrabExcessHorizontalSpace()), new MultipleTargetsFeatureTracker(
						refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_GrabExcessVerticalSpace()), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker,
						GMFGraphPackage.eINSTANCE.getGridLayoutData_VerticalAlignment()), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
						.getGridLayoutData_HorizontalAlignment()), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_VerticalSpan()),
				new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_HorizontalSpan()), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker,
						GMFGraphPackage.eINSTANCE.getGridLayoutData_HorizontalIndent()), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayoutData_SizeHint(), refreshLayoutDataTracker,
						new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker,
								GMFGraphPackage.eINSTANCE.getDimension_Dy()))));
d295 1
a295 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(outlineTracker, GMFGraphPackage.eINSTANCE.getShape_Outline()));
d303 1
a303 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(fillTracker, GMFGraphPackage.eINSTANCE.getShape_Fill()));
d311 1
a311 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(lineStyleTracker, GMFGraphPackage.eINSTANCE.getShape_LineKind()));
d319 1
a319 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(fillXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorFill()));
d327 1
a327 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(outlineXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorOutline()));
d337 10
a346 12
				layoutManagerTracker, new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getDimension_Dy())), new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_Vertical()),
				new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MatchMinorSize()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getFlowLayout_ForceSingleLine()), new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorAlignment()),
				new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorAlignment()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getFlowLayout_MajorSpacing()), new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorSpacing()),
				new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_NumColumns()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getGridLayout_EqualWidth()), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayout_Margins(), layoutManagerTracker,
						new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
								GMFGraphPackage.eINSTANCE.getDimension_Dy())), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayout_Spacing(), layoutManagerTracker,
						new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
								GMFGraphPackage.eINSTANCE.getDimension_Dy()))));
d354 3
a356 4
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor(), backgroundColorTracker, new MultipleTargetsFeatureTracker(backgroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new MultipleTargetsFeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()),
				new MultipleTargetsFeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new MultipleTargetsFeatureTracker(backgroundColorTracker,
						GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));
d364 3
a366 4
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor(), foregroundColorTracker, new MultipleTargetsFeatureTracker(foregroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new MultipleTargetsFeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()),
				new MultipleTargetsFeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new MultipleTargetsFeatureTracker(foregroundColorTracker,
						GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));
d374 3
a376 3
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Font(), refreshFontTracker, new MultipleTargetsFeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_FaceName()), new MultipleTargetsFeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Height()), new MultipleTargetsFeatureTracker(
				refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Style())));
d385 2
a386 2
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getPolyline_Template(), pointsTracker, new MultipleTargetsFeatureTracker(pointsTracker, GMFGraphPackage.eINSTANCE
				.getPoint_X()), new MultipleTargetsFeatureTracker(pointsTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())));
d395 1
a395 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(lineWidthTracker, GMFGraphPackage.eINSTANCE.getShape_LineWidth()));
@


1.27
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d89 1
a89 1
		return new PointContainerXYLayoutEditPolicy(getMapMode());
@


1.26
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@a17 2
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.draw2d.StackLayout;
d20 1
d134 6
a139 1
		figure.setLayoutManager(new StackLayout());
d142 1
a142 6
		RectangleFigure childContainer = new RectangleFigure();
		childContainer.setFill(false);
		childContainer.setOutline(false);
		figure.add(childContainer);
		childContainer.setLayoutManager(new XYLayout());
		contentPane = childContainer;
d455 3
a457 3
			Rectangle contentPaneBounds = getContentPane().getBounds().getCopy();
			contentPaneBounds.setSize(getContentPane().getPreferredSize());
			return polylineBounds.getUnion(contentPaneBounds);
@


1.25
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d461 3
@


1.24
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d34 1
a34 1
import org.eclipse.gmf.graphdef.editor.sheet.FeatureTracker;
d266 4
a269 4
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Location(), refreshBoundsTracker, new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE
				.getPoint_X()), new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())));
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_PreferredSize(), refreshBoundsTracker, new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE
				.getDimension_Dx()), new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())));
d278 13
a290 11
				.getXYLayoutData_TopLeft(), refreshLayoutDataTracker, new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getPoint_X()), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())), new AttachAdapter(GMFGraphPackage.eINSTANCE.getXYLayoutData_Size(), refreshLayoutDataTracker, new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getBorderLayoutData_Alignment()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getBorderLayoutData_Vertical()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_GrabExcessHorizontalSpace()), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_GrabExcessVerticalSpace()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getGridLayoutData_VerticalAlignment()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_HorizontalAlignment()), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_VerticalSpan()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getGridLayoutData_HorizontalSpan()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_HorizontalIndent()), new AttachAdapter(
				GMFGraphPackage.eINSTANCE.getGridLayoutData_SizeHint(), refreshLayoutDataTracker, new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()),
				new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy()))));
d298 1
a298 1
		myDomainElementAdapters.add(new FeatureTracker(outlineTracker, GMFGraphPackage.eINSTANCE.getShape_Outline()));
d306 1
a306 1
		myDomainElementAdapters.add(new FeatureTracker(fillTracker, GMFGraphPackage.eINSTANCE.getShape_Fill()));
d314 1
a314 1
		myDomainElementAdapters.add(new FeatureTracker(lineStyleTracker, GMFGraphPackage.eINSTANCE.getShape_LineKind()));
d322 1
a322 1
		myDomainElementAdapters.add(new FeatureTracker(fillXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorFill()));
d330 1
a330 1
		myDomainElementAdapters.add(new FeatureTracker(outlineXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorOutline()));
d340 12
a351 10
				layoutManagerTracker, new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE
						.getDimension_Dy())), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_Vertical()), new FeatureTracker(layoutManagerTracker,
				GMFGraphPackage.eINSTANCE.getFlowLayout_MatchMinorSize()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_ForceSingleLine()), new FeatureTracker(
				layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorAlignment()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorAlignment()),
				new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorSpacing()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE
						.getFlowLayout_MinorSpacing()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_NumColumns()), new FeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getGridLayout_EqualWidth()), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayout_Margins(), layoutManagerTracker, new FeatureTracker(
						layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())), new AttachAdapter(
						GMFGraphPackage.eINSTANCE.getGridLayout_Spacing(), layoutManagerTracker, new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()),
						new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy()))));
d359 4
a362 3
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor(), backgroundColorTracker, new FeatureTracker(backgroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new FeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()), new FeatureTracker(
				backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new FeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));
d370 4
a373 3
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor(), foregroundColorTracker, new FeatureTracker(foregroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new FeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()), new FeatureTracker(
				foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new FeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));
d381 3
a383 3
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Font(), refreshFontTracker, new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_FaceName()), new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Height()), new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_Style())));
d392 2
a393 2
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getPolyline_Template(), pointsTracker, new FeatureTracker(pointsTracker, GMFGraphPackage.eINSTANCE.getPoint_X()),
				new FeatureTracker(pointsTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())));
d402 1
a402 1
		myDomainElementAdapters.add(new FeatureTracker(lineWidthTracker, GMFGraphPackage.eINSTANCE.getShape_LineWidth()));
a458 1
//			return polylineBounds;
@


1.23
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d18 1
d20 1
d25 1
d29 1
a29 1
import org.eclipse.gmf.gmfgraph.Shape;
d31 1
a31 1
import org.eclipse.gmf.graphdef.editor.edit.polocies.DomainBasedXYLayoutEditPolicy;
d35 2
d39 1
d76 1
d79 2
d90 1
a90 1
		return new DomainBasedXYLayoutEditPolicy(getMapMode());
d117 9
d138 6
a143 1
		contentPane = setupContentPane(shape);
d154 5
d196 8
a203 4
	private org.eclipse.gmf.gmfgraph.Polyline getModelFigureElement() {
		Shape shape = getShape();
		if (shape instanceof org.eclipse.gmf.gmfgraph.Polyline) {
			org.eclipse.gmf.gmfgraph.Polyline modelFigureElement = (org.eclipse.gmf.gmfgraph.Polyline) shape;
d213 1
a213 1
		org.eclipse.gmf.gmfgraph.Polyline modelElement = (org.eclipse.gmf.gmfgraph.Polyline) getModelFigureElement();
d226 1
a226 1
		org.eclipse.gmf.gmfgraph.Polyline modelElement = (org.eclipse.gmf.gmfgraph.Polyline) getModelFigureElement();
d254 1
a254 1
		final org.eclipse.gmf.gmfgraph.Polyline modelElement = (org.eclipse.gmf.gmfgraph.Polyline) getModelFigureElement();
d405 1
a405 1
		org.eclipse.gmf.gmfgraph.Polyline modelElement = (org.eclipse.gmf.gmfgraph.Polyline) getModelFigureElement();
a428 9
	public EditPolicy getPrimaryDragEditPolicy() {
		NonResizableEditPolicyEx editPolicy = new NonResizableEditPolicyEx();
		editPolicy.setDragAllowed(false);
		return editPolicy;
	}

	/**
	 * @@generated
	 */
d449 5
a453 1
			return getPrimaryShape().getBounds();
@


1.22
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d398 3
a400 1
		return new NonResizableEditPolicyEx();
@


1.21
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d20 1
d33 1
d102 1
a102 6
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(getMapMode().DPtoLP(0), getMapMode().DPtoLP(0)) {

			protected boolean useLocalCoordinates() {
				return true;
			}
		};
a199 1
			getPrimaryShape().setLineWidth(modelElement.getLineWidth());
d209 3
a273 8
		ChangeTracker lineWidthTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setLineWidth(modelElement.getLineWidth());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(lineWidthTracker, GMFGraphPackage.eINSTANCE.getShape_LineWidth()));

d351 1
d356 9
d385 48
@


1.20
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@d100 6
a105 1
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(getMapMode().DPtoLP(0), getMapMode().DPtoLP(0));
d199 8
d212 1
d229 78
d355 9
@


1.19
log
@- Removing unnecessary borders around Top-level figures from FigureGallery
- copyrights updated.
@
text
@d13 3
d20 2
d24 2
d28 3
d34 1
d142 141
@


1.18
log
@- Migrating to new .gmfgen model
- Using (0,0) as a minimum size for DefaultNode to make resize feedback minimum size == (0,0)
@
text
@d2 1
a2 1
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
@


1.17
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@d16 1
d90 1
@


1.16
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@a15 1
import org.eclipse.gef.EditPart;
a16 2
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
a17 2
import org.eclipse.gef.editpolicies.NonResizableEditPolicy;
import org.eclipse.gef.requests.CreateRequest;
d19 1
a19 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
d28 1
a28 1
public class PolylineEditPart extends ShapeNodeEditPart {
d67 1
a67 20
		LayoutEditPolicy lep = new LayoutEditPolicy() {

			protected EditPolicy createChildEditPolicy(EditPart child) {
				EditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
				if (result == null) {
					result = new NonResizableEditPolicy();
				}
				return result;
			}

			protected Command getMoveChildrenCommand(Request request) {
				return null;
			}

			protected Command getCreateCommand(CreateRequest request) {
				return null;
			}
		};
		return lep;

@


1.15
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@a60 1

d112 1
a112 1
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(getMapMode().DPtoLP(40), getMapMode().DPtoLP(40));
@


1.14
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d3 7
a9 7
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
a25 1
import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
d38 1
a38 1
	public static final int VISUAL_ID = 3005;
d65 2
d113 1
a113 1
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(getMapMode().DPtoLP(0), getMapMode().DPtoLP(0));
a140 5
		if (nodeShape.getLayoutManager() == null) {
			ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();
			layout.setSpacing(getMapMode().DPtoLP(5));
			nodeShape.setLayoutManager(layout);
		}
@


1.13
log
@Updating templates + Correcting XYLayoutData creation strategy (default value)
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
a15 1

a18 1

a19 1

a21 1

a22 3

import org.eclipse.gmf.graphdef.editor.edit.policies.PolylineCanonicalEditPolicy;
import org.eclipse.gmf.graphdef.editor.edit.policies.PolylineGraphicalNodeEditPolicy;
a23 1

a24 1

a25 1

a26 1

a28 1

d62 1
a64 2
		installEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new PolylineGraphicalNodeEditPolicy());
		installEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new PolylineCanonicalEditPolicy());
d91 1
d112 2
a113 1
		return new DefaultSizeNodeFigure(getMapMode().DPtoLP(0), getMapMode().DPtoLP(0));
@


1.12
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d85 1
a85 1
		return new LayoutEditPolicy() {
d103 1
@


1.11
log
@Updating with latest templates.
@
text
@d1 1
a1 1
/**
@


1.10
log
@[synch] Synchronizing with the templates
@
text
@d115 2
a116 2
	public org.eclipse.draw2d.Polyline getPrimaryShape() {
		return (org.eclipse.draw2d.Polyline) primaryShape;
@


1.9
log
@Updating with new templates
@
text
@d1 10
a12 12
import java.util.Collection;
import java.util.Collections;

import org.eclipse.core.commands.ExecutionException;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Status;

import org.eclipse.draw2d.Figure;
d14 1
a14 1
import org.eclipse.draw2d.LayoutManager;
a16 8
import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.transaction.Transaction;

import org.eclipse.emf.workspace.AbstractEMFOperation;

a27 10
import org.eclipse.gmf.gmfgraph.ConstantColor;
import org.eclipse.gmf.gmfgraph.Dimension;
import org.eclipse.gmf.gmfgraph.FigureMarker;
import org.eclipse.gmf.gmfgraph.GMFGraphFactory;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.Point;
import org.eclipse.gmf.gmfgraph.Polyline;
import org.eclipse.gmf.gmfgraph.RGBColor;
import org.eclipse.gmf.gmfgraph.XYLayoutData;

d32 1
a32 3
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;

import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
a40 4
import org.eclipse.gmf.runtime.notation.Bounds;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.ShapeStyle;
d46 1
a46 1
public class PolylineEditPart extends AbstractFigureEditPart {
d51 1
a51 1
	public static final int VISUAL_ID = 2005;
a60 11
	private PolylineFigure myFigure;

	// TODO: use myFigure?
	/**
	 * @@generated
	 */
	protected Figure myNodeFigure;

	/**
	 * @@generated
	 */
a72 337
	public void activate() {
		if (isActive()) {
			return;
		}
		View view = (View) getModel();
		if (view.getElement() == null) {
			super.activate();
			return;
		}

		final Polyline modelElement = (Polyline) view.getElement();

		final NotificationListener Layoutable_LayoutData_PropertiesListener = new NotificationListener() {

			public void notifyChanged(Notification notification) {
				layoutDataChanged(modelElement.getLayoutData());
			}
		};
		if (modelElement.getLayoutData() != null) {
			addListenerFilter("Layoutable_LayoutData_PropertiesListener", Layoutable_LayoutData_PropertiesListener, modelElement.getLayoutData());
		}
		addListenerFilter("Layoutable_LayoutData_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				removeListenerFilter("Layoutable_LayoutData_PropertiesListener");
				if (modelElement.getLayoutData() != null) {
					addListenerFilter("Layoutable_LayoutData_PropertiesListener", Layoutable_LayoutData_PropertiesListener, modelElement.getLayoutData());
				}
				layoutDataChanged(modelElement.getLayoutData());
			}
		}, modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData());

		final NotificationListener Layoutable_Layout_PropertiesListener = new NotificationListener() {

			public void notifyChanged(Notification notification) {
				layoutChanged(modelElement.getLayout());
			}
		};
		if (modelElement.getLayout() != null) {
			addListenerFilter("Layoutable_Layout_PropertiesListener", Layoutable_Layout_PropertiesListener, modelElement.getLayout());
		}
		addListenerFilter("Layoutable_Layout_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				removeListenerFilter("Layoutable_Layout_PropertiesListener");
				if (modelElement.getLayout() != null) {
					addListenerFilter("Layoutable_Layout_PropertiesListener", Layoutable_Layout_PropertiesListener, modelElement.getLayout());
				}
				layoutChanged(modelElement.getLayout());
			}
		}, modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_Layout());

		addListenerFilter("Shape_Outline_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				myFigure.setOutline(modelElement.isOutline());
			}
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_Outline());

		addListenerFilter("Shape_Fill_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				myFigure.setFill(modelElement.isFill());
			}
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_Fill());

		addListenerFilter("Shape_LineWidth_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				myFigure.setLineWidth(modelElement.getLineWidth());
			}
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_LineWidth());

		addListenerFilter("Shape_LineKind_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				myFigure.setLineStyle(getLineStyle(modelElement.getLineKind()));
			}
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_LineKind());

		addListenerFilter("Shape_XorFill_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				myFigure.setFillXOR(modelElement.isXorFill());
			}
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_XorFill());

		addListenerFilter("Shape_XorOutline_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				myFigure.setOutlineXOR(modelElement.isXorOutline());
			}
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_XorOutline());

		final NotificationListener Polyline_Template_PropertiesListener = new NotificationListener() {

			public void notifyChanged(Notification notification) {
				myFigure.setPoints(getPointList(modelElement.getTemplate()));
			}
		};
		for (int i = 0; i < modelElement.getTemplate().size(); i++) {
			addListenerFilter("Polyline_Template_PropertiesListener#" + i, Polyline_Template_PropertiesListener, (EObject) modelElement.getTemplate().get(i));
		}
		addListenerFilter("Polyline_Template_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				int listSize = modelElement.getTemplate().size();
				if (notification.getOldValue() instanceof Collection) {
					listSize += ((Collection) notification.getOldValue()).size();
				} else {
					listSize++;
				}
				for (int i = 0; i < listSize; i++) {
					removeListenerFilter("Polyline_Template_PropertiesListener#" + i);
				}
				for (int i = 0; i < modelElement.getTemplate().size(); i++) {
					addListenerFilter("Polyline_Template_PropertiesListener#" + i, Polyline_Template_PropertiesListener, (EObject) modelElement.getTemplate().get(i));
				}
				myFigure.setPoints(getPointList(modelElement.getTemplate()));
			}
		}, modelElement, GMFGraphPackage.eINSTANCE.getPolyline_Template());

		final Bounds bounds = (Bounds) ((Node) view).getLayoutConstraint();
		final int sizeX;
		final int sizeY;
		if (modelElement.getPreferredSize() != null) {
			sizeX = getMapMode().DPtoLP(modelElement.getPreferredSize().getDx());
			sizeY = getMapMode().DPtoLP(modelElement.getPreferredSize().getDy());
		} else {
			sizeX = getMapMode().DPtoLP(20);
			sizeY = getMapMode().DPtoLP(20);
		}
		final int locationX;
		final int locationY;
		if (modelElement.getLocation() != null) {
			locationX = getMapMode().DPtoLP(modelElement.getLocation().getX());
			locationY = getMapMode().DPtoLP(modelElement.getLocation().getY());
		} else {
			locationX = bounds.getX();
			locationY = bounds.getY();
		}
		if (sizeX != bounds.getWidth() || sizeY != bounds.getHeight() || locationX != bounds.getX() || locationY != bounds.getY()) {
			AbstractEMFOperation setSizeOperation = new AbstractEMFOperation(getEditingDomain(),
					"Synchronizing view size with the model", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

				protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
					bounds.setX(locationX);
					bounds.setY(locationY);
					bounds.setWidth(sizeX);
					bounds.setHeight(sizeY);
					return Status.OK_STATUS;
				}
			};
			try {
				setSizeOperation.execute(new NullProgressMonitor(), null);
			} catch (ExecutionException e) {
				GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view size with the model", e); //$NON-NLS-1$			
			}
		}
		addListenerFilter("BoundsListener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				Bounds bounds = (Bounds) notification.getNotifier();
				Dimension dim = modelElement.getPreferredSize();
				if (dim == null) {
					dim = GMFGraphFactory.eINSTANCE.createDimension();
					modelElement.setPreferredSize(dim);
				}
				Point location = modelElement.getLocation();
				if (location == null) {
					location = GMFGraphFactory.eINSTANCE.createPoint();
					modelElement.setLocation(location);
				}

				int x = getMapMode().LPtoDP(bounds.getWidth());
				int y = getMapMode().LPtoDP(bounds.getHeight());
				int width = getMapMode().LPtoDP(bounds.getX());
				int height = getMapMode().LPtoDP(bounds.getY());
				if (dim.getDx() != x || dim.getDy() != y) {
					dim.setDx(x);
					dim.setDy(y);
				}
				if (location.getX() != width || location.getY() != height) {
					location.setX(width);
					location.setY(height);
				}

				myNodeFigure.setPreferredSize(bounds.getWidth(), bounds.getHeight());
				myNodeFigure.setLocation(new org.eclipse.draw2d.geometry.Point(bounds.getX(), bounds.getY()));

				if (modelElement.getLayoutData() instanceof XYLayoutData) {
					XYLayoutData xyLayoutData = (XYLayoutData) modelElement.getLayoutData();
					Point topLeft;
					if (xyLayoutData.getTopLeft() != null) {
						topLeft = xyLayoutData.getTopLeft();
					} else {
						topLeft = GMFGraphFactory.eINSTANCE.createPoint();
						xyLayoutData.setTopLeft(topLeft);
					}
					if (topLeft.getX() != location.getX() || topLeft.getY() != location.getY()) {
						topLeft.setX(location.getX());
						topLeft.setY(location.getY());
					}

					Dimension size;
					if (xyLayoutData.getSize() != null) {
						size = xyLayoutData.getSize();
					} else {
						size = GMFGraphFactory.eINSTANCE.createDimension();
						xyLayoutData.setSize(size);
					}
					if (size.getDx() != dim.getDx() || size.getDy() != dim.getDy()) {
						size.setDx(dim.getDx());
						size.setDy(dim.getDy());
					}
				}
				if (getRoot() != null) {
					handleMajorSemanticChange();
				}
			}
		}, bounds);

		final ShapeStyle shapeStyle = (ShapeStyle) view.getStyle(NotationPackage.eINSTANCE.getShapeStyle());
		if (modelElement.getBackgroundColor() != null) {
			final int rgbColor;
			if (modelElement.getBackgroundColor() instanceof RGBColor) {
				RGBColor modelColor = (RGBColor) modelElement.getBackgroundColor();
				rgbColor = (modelColor.getRed() & 0xFF) | ((modelColor.getGreen() & 0xFF) << 8) | ((modelColor.getBlue() & 0xFF) << 16);
			} else {
				ConstantColor modelColor = (ConstantColor) modelElement.getBackgroundColor();
				switch (modelColor.getValue().getValue()) {
				/*
				 case <nextValue>: {
				 rgbColor = org.eclipse.draw2d.ColorConstants.<nextColorLiteral.getName()>.getRGB().hashCode();
				 break;
				 }
				 */
				default:
					rgbColor = -1;
				}
			}
			if (rgbColor != -1 && shapeStyle.getFillColor() != rgbColor) {
				AbstractEMFOperation setColorOperation = new AbstractEMFOperation(getEditingDomain(),
						"Synchronizing view Background color with the model", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

					protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
						shapeStyle.setFillColor(rgbColor);
						return Status.OK_STATUS;
					}
				};
				try {
					setColorOperation.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Background background color with the model", e); //$NON-NLS-1$
				}
			}
		}
		if (modelElement.getForegroundColor() != null) {
			final int rgbColor;
			if (modelElement.getForegroundColor() instanceof RGBColor) {
				RGBColor modelColor = (RGBColor) modelElement.getForegroundColor();
				rgbColor = (modelColor.getRed() & 0xFF) | ((modelColor.getGreen() & 0xFF) << 8) | ((modelColor.getBlue() & 0xFF) << 16);
			} else {
				ConstantColor modelColor = (ConstantColor) modelElement.getForegroundColor();
				switch (modelColor.getValue().getValue()) {
				/*
				 case <nextValue>: {
				 rgbColor = org.eclipse.draw2d.ColorConstants.<nextColorLiteral.getName()>.getRGB().hashCode();
				 break;
				 }
				 */
				default:
					rgbColor = -1;
				}
			}
			if (rgbColor != -1 && shapeStyle.getLineColor() != rgbColor) {
				AbstractEMFOperation setColorOperation = new AbstractEMFOperation(getEditingDomain(),
						"Synchronizing view Foreground color with the model", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

					protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
						shapeStyle.setLineColor(rgbColor);
						return Status.OK_STATUS;
					}
				};
				try {
					setColorOperation.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Foreground background color with the model", e); //$NON-NLS-1$
				}
			}
		}
		addListenerFilter("ShapeStyleListener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				ShapeStyle shapeStyle = (ShapeStyle) notification.getNotifier();
				switch (notification.getFeatureID(ShapeStyle.class)) {
				case NotationPackage.SHAPE_STYLE__FILL_COLOR: {
					int color = shapeStyle.getFillColor();
					RGBColor modelColor;
					if (modelElement.getBackgroundColor() instanceof RGBColor) {
						modelColor = (RGBColor) modelElement.getBackgroundColor();
					} else {
						modelColor = GMFGraphFactory.eINSTANCE.createRGBColor();
						modelElement.setBackgroundColor(modelColor);
					}
					if (modelColor.getRed() != (color & 0x000000FF) || modelColor.getGreen() != (color & 0x0000FF00) >> 8 || modelColor.getBlue() != (color & 0x00FF0000) >> 16) {
						modelColor.setRed(color & 0x000000FF);
						modelColor.setGreen((color & 0x0000FF00) >> 8);
						modelColor.setBlue((color & 0x00FF0000) >> 16);
					}
					break;
				}
				case NotationPackage.SHAPE_STYLE__LINE_COLOR: {
					int color = shapeStyle.getLineColor();
					RGBColor modelColor;
					if (modelElement.getForegroundColor() instanceof RGBColor) {
						modelColor = (RGBColor) modelElement.getForegroundColor();
					} else {
						modelColor = GMFGraphFactory.eINSTANCE.createRGBColor();
						modelElement.setForegroundColor(modelColor);
					}
					if (modelColor.getRed() != (color & 0x000000FF) || modelColor.getGreen() != (color & 0x0000FF00) >> 8 || modelColor.getBlue() != (color & 0x00FF0000) >> 16) {
						modelColor.setRed(color & 0x000000FF);
						modelColor.setGreen((color & 0x0000FF00) >> 8);
						modelColor.setBlue((color & 0x00FF0000) >> 16);
					}
					break;
				}
				}
			}
		}, shapeStyle);
		super.activate();
	}

	/**
	 * @@generated
	 */
d109 1
a109 33
		PolylineFigure figure = new PolylineFigure();
		myFigure = figure;
		Polyline modelElement = (Polyline) ((View) getModel()).getElement();
		if (modelElement != null) {
			{
				layoutDataChanged(modelElement.getLayoutData());
			}
			{
				layoutChanged(modelElement.getLayout());
			}
			{
				myFigure.setOutline(modelElement.isOutline());
			}
			{
				myFigure.setFill(modelElement.isFill());
			}
			{
				myFigure.setLineWidth(modelElement.getLineWidth());
			}
			{
				myFigure.setLineStyle(getLineStyle(modelElement.getLineKind()));
			}
			{
				myFigure.setFillXOR(modelElement.isXorFill());
			}
			{
				myFigure.setOutlineXOR(modelElement.isXorOutline());
			}
			{
				myFigure.setPoints(getPointList(modelElement.getTemplate()));
			}
		}
		return primaryShape = figure;
d115 2
a116 2
	public PolylineFigure getPrimaryShape() {
		return (PolylineFigure) primaryShape;
a135 1
		myNodeFigure = figure;
a167 47
	/**
	 * @@generated
	 */
	public class PolylineFigure extends org.eclipse.draw2d.Polyline {

		/**
		 * @@generated
		 */
		public PolylineFigure() {

			createContents();
		}

		/**
		 * @@generated
		 */
		private void createContents() {
		}

	}

	/**
	 * @@generated
	 */
	protected LayoutManager getFigureLayoutManager() {
		return myFigure.getLayoutManager();
	}

	/**
	 * @@generated
	 */
	protected void setFigureLayoutManager(LayoutManager layoutManager) {
		myFigure.setLayoutManager(layoutManager);
	}

	/**
	 * @@generated
	 */
	protected void refreshBounds() {
		if (((View) getParent().getModel()).getElement() instanceof FigureMarker) {
			int width = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getSize_Width())).intValue();
			int height = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getSize_Height())).intValue();
			myNodeFigure.setPreferredSize(new org.eclipse.draw2d.geometry.Dimension(width, height));
		} else {
			super.refreshBounds();
		}
	}
@


1.8
log
@Updating with new templates
@
text
@a14 1
import org.eclipse.draw2d.Graphics;
a17 1
import org.eclipse.draw2d.geometry.Rectangle;
d29 8
a47 1
import org.eclipse.gmf.graphdef.editor.edit.policies.GMFGraphTextSelectionEditPolicy;
a55 4
import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy;
d452 8
a459 1
		installEditPolicy(EditPolicy.LAYOUT_ROLE, new ConstrainedToolbarLayoutEditPolicy() {
d462 3
a464 4
				if (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {
					if (child instanceof ITextAwareEditPart) {
						return new GMFGraphTextSelectionEditPolicy();
					}
d466 5
a470 1
				return super.createChildEditPolicy(child);
d473 2
a474 2
			protected org.eclipse.draw2d.geometry.Point getLayoutOrigin() {
				return ((GraphicalEditPart) getHost()).getContentPane().getClientArea().getLocation();
d476 1
a476 1
		});
a579 2
		private Rectangle myBounds;

a593 46
		protected void outlineShape(Graphics g) {
			Rectangle bounds = getBounds();
			g.translate(bounds.x, bounds.y);
			super.outlineShape(g);
			g.translate(-bounds.x, -bounds.y);
		}

		public Rectangle getBounds() {
			if (myBounds == null) {
				myBounds = new Rectangle(0, 0, 0, 0);
			}
			return myBounds;
		}

		public void primTranslate(int dx, int dy) {
			getBounds().x += dx;
			getBounds().y += dy;
			if (useLocalCoordinates()) {
				fireCoordinateSystemChanged();
				return;
			}
		}

		public void setBounds(Rectangle rect) {
			boolean resize = (rect.width != getBounds().width) || (rect.height != getBounds().height), translate = (rect.x != getBounds().x) || (rect.y != getBounds().y);

			if ((resize || translate) && isVisible())
				erase();
			if (translate) {
				int dx = rect.x - getBounds().x;
				int dy = rect.y - getBounds().y;
				primTranslate(dx, dy);
			}

			getBounds().width = rect.width;
			getBounds().height = rect.height;

			if (translate || resize) {
				if (resize)
					invalidate();
				fireFigureMoved();
				repaint();
			}

		}

@


1.7
log
@Polylines drawing was corrected.
@
text
@d584 1
a584 1
		
@


1.6
log
@Updating with latest state of the code.
@
text
@d15 1
d19 1
d569 2
d584 46
@


1.5
log
@Polylines partually supported.
@
text
@a2 1
import java.util.ArrayList;
a4 1
import java.util.List;
d7 1
d13 1
a14 1
import org.eclipse.draw2d.Graphics;
a16 1
import org.eclipse.draw2d.PositionConstants;
d18 1
a18 1
import org.eclipse.draw2d.geometry.Rectangle;
d20 1
d22 1
d24 1
d26 1
d29 1
a29 2
import org.eclipse.gef.handles.MoveHandle;
import org.eclipse.gef.handles.ResizableHandleKit;
d39 1
d44 1
d46 1
d48 1
d51 1
d54 1
a54 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy;
d56 1
d59 1
a519 37
	 * @@generated
	 */
	public EditPolicy getPrimaryDragEditPolicy() {
		return new ResizableShapeEditPolicy() {

			protected List createSelectionHandles() {
				final org.eclipse.gef.GraphicalEditPart part = (org.eclipse.gef.GraphicalEditPart) getHost();
				final List list = new ArrayList();
				addMoveHandle(part, list);

				ResizableHandleKit.addHandle(part, list, PositionConstants.NORTH);

				ResizableHandleKit.addHandle(part, list, PositionConstants.SOUTH);

				ResizableHandleKit.addHandle(part, list, PositionConstants.WEST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.EAST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.NORTH_EAST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.NORTH_WEST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.SOUTH_EAST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.SOUTH_WEST);

				return list;
			}

			private void addMoveHandle(final org.eclipse.gef.GraphicalEditPart part, final List list) {
				MoveHandle moveHandle = new MoveHandle(part);
				list.add(moveHandle);
			}
		};
	}

	/**
a566 2
		private Rectangle myBounds;

a580 46
		protected void outlineShape(Graphics g) {
			Rectangle bounds = getBounds();
			g.translate(bounds.x, bounds.y);
			super.outlineShape(g);
			g.translate(-bounds.x, -bounds.y);
		}

		public Rectangle getBounds() {
			if (myBounds == null) {
				myBounds = new Rectangle(0, 0, 0, 0);
			}
			return myBounds;
		}

		public void primTranslate(int dx, int dy) {
			getBounds().x += dx;
			getBounds().y += dy;
			if (useLocalCoordinates()) {
				fireCoordinateSystemChanged();
				return;
			}
		}

		public void setBounds(Rectangle rect) {
			boolean resize = (rect.width != getBounds().width) || (rect.height != getBounds().height), translate = (rect.x != getBounds().x) || (rect.y != getBounds().y);

			if ((resize || translate) && isVisible())
				erase();
			if (translate) {
				int dx = rect.x - getBounds().x;
				int dy = rect.y - getBounds().y;
				primTranslate(dx, dy);
			}

			getBounds().width = rect.width;
			getBounds().height = rect.height;

			if (translate || resize) {
				if (resize)
					invalidate();
				fireFigureMoved();
				repaint();
			}

		}

@


1.4
log
@models updated, sample regenerated with new templates.
@
text
@d4 1
a8 1

a13 1

d15 1
d20 1
a20 1

d22 1
a22 1

a23 1

a24 1

a26 1

a28 1

a33 3
import org.eclipse.gmf.gmfgraph.Layout;
import org.eclipse.gmf.gmfgraph.LayoutData;
import org.eclipse.gmf.gmfgraph.LineKind;
a37 1

a41 1

a42 1

a43 1

a45 1

a48 1

a49 1

a51 1

d111 1
a111 1
		final NotificationListener layoutListener = new NotificationListener() {
d114 1
a114 2
				Layout layout = (Layout) notification.getNotifier();
				layoutPropertyChanged(layout);
d117 2
a118 2
		if (modelElement.getLayout() != null) {
			addListenerFilter("LayoutPropertiesListener", layoutListener, modelElement.getLayout());
d120 1
a120 1
		addListenerFilter("ModelElementLayoutListener", new NotificationListener() {
d123 3
a125 4
				Layout newLayout = (Layout) notification.getNewValue();
				removeListenerFilter("LayoutPropertiesListener");
				if (newLayout != null) {
					addListenerFilter("LayoutPropertiesListener", layoutListener, newLayout);
d127 1
a127 1
				layoutChanged(newLayout, true);
d129 1
a129 1
		}, modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_Layout());
d131 1
a131 1
		final NotificationListener layoutDataListener = new NotificationListener() {
d134 1
a134 1
				layoutDataPropertyChanged();
d137 2
a138 2
		if (modelElement.getLayoutData() != null) {
			addListenerFilter("LayoutDataPropertiesListener", layoutDataListener, modelElement.getLayoutData());
d140 1
a140 1
		addListenerFilter("ModelElementLayoutDataListener", new NotificationListener() {
d143 3
a145 4
				LayoutData newLayoutData = (LayoutData) notification.getNewValue();
				removeListenerFilter("LayoutDataPropertiesListener");
				if (newLayoutData != null) {
					addListenerFilter("LayoutDataPropertiesListener", layoutDataListener, newLayoutData);
d147 36
a182 1
				layoutDataChanged();
d184 8
a191 1
		}, modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData());
d193 1
a193 1
		addListenerFilter("ModelElementPropertiesListener", new NotificationListener() {
d196 14
a209 5
				switch (notification.getFeatureID(Polyline.class)) {
				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.POLYLINE__OUTLINE: {
					boolean value = modelElement.isOutline();
					myFigure.setOutline(value);
					break;
d211 2
a212 9
				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.POLYLINE__FILL: {
					boolean value = modelElement.isFill();
					myFigure.setFill(value);
					break;
				}
				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.POLYLINE__LINE_WIDTH: {
					int value = modelElement.getLineWidth();
					myFigure.setLineWidth(value);
					break;
d214 2
a215 12
				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.POLYLINE__LINE_KIND: {
					LineKind value = modelElement.getLineKind();
					myFigure.setLineStyle("LINE_DASH".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASH : "LINE_DOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DOT
							: "LINE_DASHDOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOT
									: "LINE_DASHDOTDOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOTDOT
											: "LINE_CUSTOM".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_CUSTOM : org.eclipse.draw2d.Graphics.LINE_SOLID);
					break;
				}
				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.POLYLINE__XOR_FILL: {
					boolean value = modelElement.isXorFill();
					myFigure.setFillXOR(value);
					break;
d217 1
a217 7
				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.POLYLINE__XOR_OUTLINE: {
					boolean value = modelElement.isXorOutline();
					myFigure.setOutlineXOR(value);
					break;
				}
				}
				myFigure.repaint();
d219 1
a219 1
		}, modelElement);
d467 4
a470 2
				boolean value = modelElement.isOutline();
				myFigure.setOutline(value);
d473 1
a473 2
				boolean value = modelElement.isFill();
				myFigure.setFill(value);
d476 1
a476 2
				int value = modelElement.getLineWidth();
				myFigure.setLineWidth(value);
d479 1
a479 4
				LineKind value = modelElement.getLineKind();
				myFigure.setLineStyle("LINE_DASH".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASH : "LINE_DOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DOT
						: "LINE_DASHDOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOT : "LINE_DASHDOTDOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOTDOT
								: "LINE_CUSTOM".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_CUSTOM : org.eclipse.draw2d.Graphics.LINE_SOLID);
d482 1
a482 2
				boolean value = modelElement.isXorFill();
				myFigure.setFillXOR(value);
d485 7
a491 2
				boolean value = modelElement.isXorOutline();
				myFigure.setOutlineXOR(value);
a492 1
			layoutChanged(modelElement.getLayout(), false);
d596 2
d612 46
@


1.3
log
@Using "isSuperTypeOf" instead of EClasses comparision in Visual ID registry.
@
text
@d591 7
@


1.2
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@a532 2
				// just make it look nice 
				moveHandle.setBorder(null);
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d81 1
a81 1
	public static String VISUAL_ID = "2005";
@

