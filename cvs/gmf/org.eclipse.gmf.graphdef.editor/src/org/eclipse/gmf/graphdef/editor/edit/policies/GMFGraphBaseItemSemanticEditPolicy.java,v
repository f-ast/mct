head	1.19;
access;
symbols
	v20080722-1827:1.19
	v20080718-1700:1.18
	v20080718-1731:1.19
	v20080716-1642:1.19
	R2_1_maintenance:1.18.0.2
	Root_R2_1_maintenance:1.18
	R2_1_0:1.18
	v20080610-1132:1.18
	v20080603-1553:1.18
	v20080528-1052:1.18
	v20080521:1.17
	v20080516-1143:1.17
	v20080512-1200:1.17
	v20080510-0100:1.17
	v20080507-1326:1.17
	v20080501-1739:1.16
	v20080425-1959:1.16
	v20080411-0411:1.16
	v20080404-1111:1.16
	v20080322-0000:1.16
	v20080114-2222:1.14
	v20071214-1111:1.14
	v20070809-0000:1.14
	R2_0_maintenance:1.14.0.2
	R2_0:1.14
	R4_20:1.14
	v20070621-0000:1.14
	RC3_20:1.14
	v20070605-1400:1.14
	v20070601-1400:1.14
	v20070520-1200:1.13
	v20070420-1000:1.13
	v20070405-2000:1.12
	v20070405-1100:1.12
	v20070330-1300:1.11
	v20070307-0700:1.11
	v20070221-1500:1.11
	v20070208-1800:1.10
	M4_20:1.10
	v20061214-0000:1.10
	M3_20:1.10
	v20061013-1330:1.10
	M1_20:1.10
	v20060713-1700:1.10
	R1_0_maintenance:1.10.0.2
	R1_0:1.10
	v20060627-1200:1.10
	v20060616-1200:1.8
	v20060609-1400:1.7
	v20060531-1730:1.6
	v20060530-1930:1.5
	v20060526-1200:1.4
	v20060519-0800:1.3
	v20060512-1000:1.2
	I20060512-1000:1.2
	RC2_10:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.19
date	2008.07.02.15.20.45;	author ashatalin;	state Exp;
branches;
next	1.18;
commitid	703486b9cc54567;

1.18
date	2008.05.28.12.37.13;	author ashatalin;	state Exp;
branches;
next	1.17;
commitid	5988483d51f74567;

1.17
date	2008.05.06.15.55.36;	author ashatalin;	state Exp;
branches;
next	1.16;
commitid	702648207f744567;

1.16
date	2008.03.13.17.56.06;	author ashatalin;	state Exp;
branches;
next	1.15;
commitid	54b147d96ab34567;

1.15
date	2008.02.22.13.08.00;	author ashatalin;	state Exp;
branches;
next	1.14;
commitid	4c5647bec9294567;

1.14
date	2007.05.31.15.52.30;	author ashatalin;	state Exp;
branches;
next	1.13;
commitid	49f1465eef2c4567;

1.13
date	2007.04.16.11.03.53;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	7e4e462358154567;

1.12
date	2007.04.04.20.23.25;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	ade461409204567;

1.11
date	2007.02.09.20.08.29;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	179c45ccd4b34567;

1.10
date	2006.06.27.14.47.51;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.26.18.38.20;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.14.18.40.09;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.02.15.08.29;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.31.16.37.46;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.30.13.06.13;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.22.17.37.31;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.17.14.57.16;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.16.36.28;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.23;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.19
log
@[233207] - Support Label figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.policies;

import java.util.Collections;
import java.util.Iterator;

import java.util.Map;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gef.requests.ReconnectRequest;
import org.eclipse.gmf.gmfgraph.ChildAccess;
import org.eclipse.gmf.gmfgraph.Compartment;
import org.eclipse.gmf.gmfgraph.DiagramElement;
import org.eclipse.gmf.gmfgraph.DiagramLabel;
import org.eclipse.gmf.gmfgraph.Figure;
import org.eclipse.gmf.gmfgraph.FigureDescriptor;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.Node;
import org.eclipse.gmf.graphdef.editor.edit.helpers.GMFGraphBaseEditHelper;
import org.eclipse.gmf.graphdef.editor.expressions.GMFGraphAbstractExpression;
import org.eclipse.gmf.graphdef.editor.expressions.GMFGraphOCLFactory;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IEditHelperContext;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class GMFGraphBaseItemSemanticEditPolicy extends SemanticEditPolicy {

	/**
	 * Extended request data key to hold editpart visual id.
	 * 
	 * @@generated
	 */
	public static final String VISUAL_ID_KEY = "visual_id"; //$NON-NLS-1$

	/**
	 * Extended request data key to hold editpart visual id.
	 * Add visual id of edited editpart to extended data of the request
	 * so command switch can decide what kind of diagram element is being edited.
	 * It is done in those cases when it's not possible to deduce diagram
	 * element kind from domain element.
	 * 
	 * @@generated
	 */
	public Command getCommand(Request request) {
		if (request instanceof ReconnectRequest) {
			Object view = ((ReconnectRequest) request).getConnectionEditPart().getModel();
			if (view instanceof View) {
				Integer id = new Integer(GMFGraphVisualIDRegistry.getVisualID((View) view));
				request.getExtendedData().put(VISUAL_ID_KEY, id);
			}
		}
		return super.getCommand(request);
	}

	/**
	 * Returns visual id from request parameters.
	 * 
	 * @@generated
	 */
	protected int getVisualID(IEditCommandRequest request) {
		Object id = request.getParameter(VISUAL_ID_KEY);
		return id instanceof Integer ? ((Integer) id).intValue() : -1;
	}

	/**
	 * @@generated
	 */
	protected Command getSemanticCommand(IEditCommandRequest request) {
		IEditCommandRequest completedRequest = completeRequest(request);
		Object editHelperContext = completedRequest.getEditHelperContext();
		if (editHelperContext instanceof View || (editHelperContext instanceof IEditHelperContext && ((IEditHelperContext) editHelperContext).getEObject() instanceof View)) {
			// no semantic commands are provided for pure design elements
			return null;
		}
		if (editHelperContext == null) {
			editHelperContext = ViewUtil.resolveSemanticElement((View) getHost().getModel());
		}
		IElementType elementType = ElementTypeRegistry.getInstance().getElementType(editHelperContext);
		if (elementType == ElementTypeRegistry.getInstance().getType("org.eclipse.gmf.runtime.emf.type.core.default")) { //$NON-NLS-1$ 
			elementType = null;
		}
		Command semanticCommand = getSemanticCommandSwitch(completedRequest);
		if (semanticCommand != null) {
			ICommand command = semanticCommand instanceof ICommandProxy ? ((ICommandProxy) semanticCommand).getICommand() : new CommandProxy(semanticCommand);
			completedRequest.setParameter(GMFGraphBaseEditHelper.EDIT_POLICY_COMMAND, command);
		}
		if (elementType != null) {
			ICommand command = elementType.getEditCommand(completedRequest);
			if (command != null) {
				if (!(command instanceof CompositeTransactionalCommand)) {
					TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
					command = new CompositeTransactionalCommand(editingDomain, command.getLabel()).compose(command);
				}
				semanticCommand = new ICommandProxy(command);
			}
		}
		boolean shouldProceed = true;
		if (completedRequest instanceof DestroyRequest) {
			shouldProceed = shouldProceed((DestroyRequest) completedRequest);
		}
		if (shouldProceed) {
			if (completedRequest instanceof DestroyRequest) {
				TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
				Command deleteViewCommand = new ICommandProxy(new DeleteCommand(editingDomain, (View) getHost().getModel()));
				semanticCommand = semanticCommand == null ? deleteViewCommand : semanticCommand.chain(deleteViewCommand);
			}
			return semanticCommand;
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getSemanticCommandSwitch(IEditCommandRequest req) {
		if (req instanceof CreateRelationshipRequest) {
			return getCreateRelationshipCommand((CreateRelationshipRequest) req);
		} else if (req instanceof CreateElementRequest) {
			return getCreateCommand((CreateElementRequest) req);
		} else if (req instanceof ConfigureRequest) {
			return getConfigureCommand((ConfigureRequest) req);
		} else if (req instanceof DestroyElementRequest) {
			return getDestroyElementCommand((DestroyElementRequest) req);
		} else if (req instanceof DestroyReferenceRequest) {
			return getDestroyReferenceCommand((DestroyReferenceRequest) req);
		} else if (req instanceof DuplicateElementsRequest) {
			return getDuplicateCommand((DuplicateElementsRequest) req);
		} else if (req instanceof GetEditContextRequest) {
			return getEditContextCommand((GetEditContextRequest) req);
		} else if (req instanceof MoveRequest) {
			return getMoveCommand((MoveRequest) req);
		} else if (req instanceof ReorientReferenceRelationshipRequest) {
			return getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);
		} else if (req instanceof ReorientRelationshipRequest) {
			return getReorientRelationshipCommand((ReorientRelationshipRequest) req);
		} else if (req instanceof SetRequest) {
			return getSetCommand((SetRequest) req);
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getConfigureCommand(ConfigureRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getCreateCommand(CreateElementRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getSetCommand(SetRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getEditContextCommand(GetEditContextRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getDestroyElementCommand(DestroyElementRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getDuplicateCommand(DuplicateElementsRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getMoveCommand(MoveRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
		return UnexecutableCommand.INSTANCE;
	}

	/**
	 * @@generated
	 */
	protected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {
		return UnexecutableCommand.INSTANCE;
	}

	/**
	 * @@generated
	 */
	protected final Command getGEFWrapper(ICommand cmd) {
		return new ICommandProxy(cmd);
	}

	/**
	 * @@deprecated use getGEFWrapper() instead
	 * @@generated
	 */
	protected final Command getMSLWrapper(ICommand cmd) {
		// XXX deprecated: use getGEFWrapper() instead
		return getGEFWrapper(cmd);
	}

	/**
	 * @@generated
	 */
	protected EObject getSemanticElement() {
		return ViewUtil.resolveSemanticElement((View) getHost().getModel());
	}

	/**
	 * Returns editing domain from the host edit part.
	 * 
	 * @@generated
	 */
	protected TransactionalEditingDomain getEditingDomain() {
		return ((IGraphicalEditPart) getHost()).getEditingDomain();
	}

	/**
	 * Creates command to destroy the link.
	 * 
	 * @@generated
	 */
	protected Command getDestroyElementCommand(View view) {
		EditPart editPart = (EditPart) getHost().getViewer().getEditPartRegistry().get(view);
		DestroyElementRequest request = new DestroyElementRequest(getEditingDomain(), false);
		return editPart.getCommand(new EditCommandRequestWrapper(request, Collections.EMPTY_MAP));
	}

	/**
	 * Creates commands to destroy all host incoming and outgoing links.
	 * 
	 * @@generated
	 */
	protected CompoundCommand getDestroyEdgesCommand() {
		CompoundCommand cmd = new CompoundCommand();
		View view = (View) getHost().getModel();
		for (Iterator it = view.getSourceEdges().iterator(); it.hasNext();) {
			cmd.add(getDestroyElementCommand((Edge) it.next()));
		}
		for (Iterator it = view.getTargetEdges().iterator(); it.hasNext();) {
			cmd.add(getDestroyElementCommand((Edge) it.next()));
		}
		return cmd;
	}

	/**
	 * @@generated
	 */
	protected void addDestroyShortcutsCommand(CompoundCommand command) {
		View view = (View) getHost().getModel();
		if (view.getEAnnotation("Shortcut") != null) { //$NON-NLS-1$
			return;
		}
		for (Iterator it = view.getDiagram().getChildren().iterator(); it.hasNext();) {
			View nextView = (View) it.next();
			if (nextView.getEAnnotation("Shortcut") == null || !nextView.isSetElement() || nextView.getElement() != view.getElement()) { //$NON-NLS-1$
				continue;
			}
			command.add(getDestroyElementCommand(nextView));
		}
	}

	/**
	 * @@generated
	 */
	public static class LinkConstraints {

		/**
		 * @@generated
		 */
		private static final String OPPOSITE_END_VAR = "oppositeEnd"; //$NON-NLS-1$

		/**
		 * @@generated
		 */
		private static GMFGraphAbstractExpression NodeContentPane_4006_SourceExpression;

		/**
		 * @@generated
		 */
		public static boolean canCreateChildAccess_4002(FigureDescriptor source, Figure target) {
			return canExistChildAccess_4002(source, target);
		}

		/**
		 * @@generated
		 */
		public static boolean canCreateCompartmentAccessor_4003(Compartment source, ChildAccess target) {
			if (source != null) {
				if (source.getAccessor() != null) {
					return false;
				}
			}
			return canExistCompartmentAccessor_4003(source, target);
		}

		/**
		 * @@generated
		 */
		public static boolean canCreateDiagramLabelAccessor_4004(DiagramLabel source, ChildAccess target) {
			if (source != null) {
				if (source.getAccessor() != null) {
					return false;
				}
			}
			return canExistDiagramLabelAccessor_4004(source, target);
		}

		/**
		 * @@generated
		 */
		public static boolean canCreateNodeContentPane_4006(Node source, ChildAccess target) {
			if (source != null) {
				if (source.getContentPane() != null) {
					return false;
				}
			}
			return canExistNodeContentPane_4006(source, target);
		}

		/**
		 * @@generated
		 */
		public static boolean canCreateDiagramElementFigure_4005(DiagramElement source, FigureDescriptor target) {
			if (source != null) {
				if (source.getFigure() != null) {
					return false;
				}
			}
			return canExistDiagramElementFigure_4005(source, target);
		}

		/**
		 * @@generated
		 */
		public static boolean canExistChildAccess_4002(FigureDescriptor source, Figure target) {
			return true;
		}

		/**
		 * @@generated
		 */
		public static boolean canExistCompartmentAccessor_4003(Compartment source, ChildAccess target) {
			return true;
		}

		/**
		 * @@generated
		 */
		public static boolean canExistDiagramLabelAccessor_4004(DiagramLabel source, ChildAccess target) {
			return true;
		}

		/**
		 * @@generated
		 */
		public static boolean canExistNodeContentPane_4006(Node source, ChildAccess target) {
			try {
				if (source == null) {
					return true;
				}
				if (NodeContentPane_4006_SourceExpression == null) {
					Map env = Collections.singletonMap(OPPOSITE_END_VAR, GMFGraphPackage.eINSTANCE.getChildAccess());
					NodeContentPane_4006_SourceExpression = GMFGraphOCLFactory.getExpression("not self.oclIsKindOf(gmfgraph::DiagramLabel)", GMFGraphPackage.eINSTANCE.getNode(), env); //$NON-NLS-1$
				}
				Object sourceVal = NodeContentPane_4006_SourceExpression.evaluate(source, Collections.singletonMap(OPPOSITE_END_VAR, target));
				if (false == sourceVal instanceof Boolean || !((Boolean) sourceVal).booleanValue()) {
					return false;
				} // else fall-through
				return true;
			} catch (Exception e) {
				GMFGraphDiagramEditorPlugin.getInstance().logError("Link constraint evaluation error", e); //$NON-NLS-1$
				return false;
			}
		}

		/**
		 * @@generated
		 */
		public static boolean canExistDiagramElementFigure_4005(DiagramElement source, FigureDescriptor target) {
			return true;
		}

	}

}
@


1.18
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d16 1
d31 1
d34 3
d352 5
a412 1

a419 1

a426 1

d434 17
a450 2

			return true;
a456 1

@


1.17
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@d342 5
@


1.16
log
@node content pane link to child accessor added.
@
text
@d398 1
d406 1
d414 1
d422 1
d430 1
@


1.15
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@d30 1
d373 12
d418 7
@


1.14
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d129 1
a129 1
					command = new CompositeTransactionalCommand(editingDomain, null).compose(command);
@


1.13
log
@[182339] akarjakina - provide different means to select parts of composite figures
Visible insets for top-level figures, custom popup action with nested submenus, simple handles behavior
@
text
@d3 7
a9 7
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
a15 1
import org.eclipse.emf.ecore.EClass;
d24 2
d27 3
a29 1
import org.eclipse.gmf.gmfgraph.FigureHandle;
d73 1
d119 3
a121 3
		Command epCommand = getSemanticCommandSwitch(completedRequest);
		if (epCommand != null) {
			ICommand command = epCommand instanceof ICommandProxy ? ((ICommandProxy) epCommand).getICommand() : new CommandProxy(epCommand);
a123 1
		Command ehCommand = null;
d131 1
a131 1
				ehCommand = new ICommandProxy(command);
d142 1
a142 1
				ehCommand = ehCommand == null ? deleteViewCommand : ehCommand.chain(deleteViewCommand);
d144 1
a144 1
			return ehCommand;
d259 1
a259 1
	protected Command getMSLWrapper(ICommand cmd) {
d264 1
d267 3
a269 2
	protected EObject getSemanticElement() {
		return ViewUtil.resolveSemanticElement((View) getHost().getModel());
a272 5
	 * Finds container element for the new relationship of the specified type.
	 * Default implementation goes up by containment hierarchy starting from
	 * the specified element and returns the first element that is instance of
	 * the specified container class.
	 * 
d275 2
a276 10
	protected EObject getRelationshipContainer(Object uelement, EClass containerClass, IElementType relationshipType) {
		if (uelement instanceof EObject) {
			EObject element = (EObject) uelement;
			for (; element != null; element = element.eContainer()) {
				if (containerClass.isSuperTypeOf(element.eClass())) {
					return element;
				}
			}
		}
		return null;
d293 3
a295 3
	protected Command getDestroyEdgeCommand(Edge edge, boolean confirm) {
		EditPart editPart = (EditPart) getHost().getViewer().getEditPartRegistry().get(edge);
		DestroyElementRequest request = new DestroyElementRequest(getEditingDomain(), confirm);
d304 1
a304 1
	protected CompoundCommand getDestroyEdgesCommand(boolean confirm) {
d308 1
a308 1
			cmd.add(getDestroyEdgeCommand((Edge) it.next(), confirm));
d311 1
a311 1
			cmd.add(getDestroyEdgeCommand((Edge) it.next(), confirm));
d319 17
d341 32
a372 1
		public static boolean canCreateDiagramElementFigure_4001(DiagramElement source, FigureHandle target) {
d378 22
a399 1
			return canExistDiagramElementFigure_4001(source, target);
d405 1
a405 1
		public static boolean canExistDiagramElementFigure_4001(DiagramElement source, FigureHandle target) {
@


1.12
log
@[173499] akarjakina - Enhance graphdef.editor with properties - use custom model to describe property sheet and generate PropertyTab code from that model
@
text
@d13 3
d19 1
d22 1
d36 1
d54 1
d288 22
d312 16
a327 1
	protected static class LinkConstraints {
d338 7
@


1.11
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d16 1
d19 1
d23 1
d56 36
d268 7
a274 4
	protected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {
		for (; element != null; element = element.eContainer()) {
			if (containerClass.isSuperTypeOf(element.eClass())) {
				return element;
@


1.10
log
@Removing unnecessary logging.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
d18 3
a45 1
import org.eclipse.gmf.graphdef.editor.edit.helpers.GMFGraphBaseEditHelper;
d238 19
@


1.9
log
@Updating templates + Correcting XYLayoutData creation strategy (default value)
@
text
@a44 2
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;

d64 1
a64 2
		if (elementType == ElementTypeRegistry.getInstance().getType("org.eclipse.gmf.runtime.emf.type.core.default")) { //$NON-NLS-1$
			GMFGraphDiagramEditorPlugin.getInstance().logInfo("Failed to get element type for " + editHelperContext); //$NON-NLS-1$
@


1.8
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d17 1
d198 1
a198 1
		return null;
d205 1
a205 1
		return null;
@


1.7
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d21 1
a21 1
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
d71 1
a71 1
			ICommand command = epCommand instanceof EtoolsProxyCommand ? ((EtoolsProxyCommand) epCommand).getICommand() : new CommandProxy(epCommand);
d82 1
a82 1
				ehCommand = new EtoolsProxyCommand(command);
d92 1
a92 1
				Command deleteViewCommand = new EtoolsProxyCommand(new DeleteCommand(editingDomain, (View) getHost().getModel()));
d211 1
a211 1
		return new EtoolsProxyCommand(cmd);
@


1.6
log
@Updating with latest templates.
@
text
@d1 1
a1 1
/**
d20 1
d42 2
d61 3
d65 2
a66 2
		if (elementType == ElementTypeRegistry.getInstance().getType("org.eclipse.gmf.runtime.emf.type.core.default")) {
			GMFGraphDiagramEditorPlugin.getInstance().logInfo("Failed to get element type for " + editHelperContext);
d69 6
a74 1
		Command semanticHelperCommand = null;
d76 7
a82 3
			ICommand semanticCommand = elementType.getEditCommand(completedRequest);
			if (semanticCommand != null) {
				semanticHelperCommand = new EtoolsProxyCommand(semanticCommand);
a84 16
		Command semanticPolicyCommand = getSemanticCommandSwitch(completedRequest);

		// combine commands from edit policy and edit helper
		if (semanticPolicyCommand == null) {
			if (semanticHelperCommand == null) {
				return null;
			} else {
				semanticPolicyCommand = semanticHelperCommand;
			}
		} else {
			if (semanticHelperCommand != null) {
				semanticPolicyCommand = semanticPolicyCommand.chain(semanticHelperCommand);
			}
		}

		// append command to delete view if necessary
d91 3
a93 2
				Command deleteViewCommand = new EtoolsProxyCommand(new DeleteCommand(((IGraphicalEditPart) getHost()).getEditingDomain(), (View) getHost().getModel()));
				semanticPolicyCommand = semanticPolicyCommand.chain(deleteViewCommand);
d95 1
a95 1
			return semanticPolicyCommand;
d211 1
a211 4
		TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
		CompositeTransactionalCommand modelCmd = new CompositeTransactionalCommand(editingDomain, cmd.getLabel());
		modelCmd.compose(cmd);
		return new EtoolsProxyCommand(modelCmd);
@


1.5
log
@[synch] Synchronizing with the templates
@
text
@d25 1
d54 3
a56 2
		if (editHelperContext instanceof View) {
			editHelperContext = ((View) editHelperContext).getElement();
@


1.4
log
@Updating with new templates
@
text
@d1 10
d40 1
d52 9
a60 1
		IElementType elementType = ElementTypeRegistry.getInstance().getElementType(completedRequest.getEditHelperContext());
@


1.3
log
@Updating with new templates.
@
text
@a4 1

a5 1

a6 2
import org.eclipse.gef.commands.UnexecutableCommand;

a7 1

a8 1

a9 1

a10 1

a11 1

a12 1

a13 1

a15 1

a28 1

@


1.2
log
@Updating with latest changes in templates + palette.
@
text
@d25 1
d54 7
a60 3
		Command semanticCommand = getSemanticCommandSwitch(completedRequest);
		if (semanticCommand == null) {
			return UnexecutableCommand.INSTANCE;
d62 16
d84 2
a85 2
				ICommand deleteCommand = new DeleteCommand((View) getHost().getModel());
				semanticCommand = semanticCommand.chain(new EtoolsProxyCommand(deleteCommand));
d87 1
a87 1
			return semanticCommand;
d89 1
a89 1
		return UnexecutableCommand.INSTANCE;
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d5 1
d7 1
d10 1
d12 1
d14 1
d16 1
d18 1
d20 1
d22 1
d24 1
d26 1
d40 1
@

