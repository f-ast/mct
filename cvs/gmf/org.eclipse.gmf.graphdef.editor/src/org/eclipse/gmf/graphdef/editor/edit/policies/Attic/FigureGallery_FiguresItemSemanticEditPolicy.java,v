head	1.4;
access;
symbols
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	RC2_10:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.06.08.08.42.08;	author ashatalin;	state dead;
branches;
next	1.3;

1.3
date	2006.06.02.15.08.29;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.30.13.06.13;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.23;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Updating with new templates.
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.policies;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;

import org.eclipse.gef.commands.Command;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;

import org.eclipse.gmf.runtime.emf.type.core.commands.CreateElementCommand;

import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;

import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class FigureGallery_FiguresItemSemanticEditPolicy extends GMFGraphBaseItemSemanticEditPolicy {

	/**
	 * @@generated
	 */
	protected Command getCreateCommand(CreateElementRequest req) {
		if (GMFGraphElementTypes.Rectangle_3001 == req.getElementType()) {
			if (req.getContainmentFeature() == null) {
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getFigureGallery_Figures());
			}
			return getMSLWrapper(new CreateRectangle_3001Command(req));
		}
		if (GMFGraphElementTypes.Ellipse_3006 == req.getElementType()) {
			if (req.getContainmentFeature() == null) {
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getFigureGallery_Figures());
			}
			return getMSLWrapper(new CreateEllipse_3006Command(req));
		}
		if (GMFGraphElementTypes.RoundedRectangle_3007 == req.getElementType()) {
			if (req.getContainmentFeature() == null) {
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getFigureGallery_Figures());
			}
			return getMSLWrapper(new CreateRoundedRectangle_3007Command(req));
		}
		if (GMFGraphElementTypes.Polyline_3008 == req.getElementType()) {
			if (req.getContainmentFeature() == null) {
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getFigureGallery_Figures());
			}
			return getMSLWrapper(new CreatePolyline_3008Command(req));
		}
		return super.getCreateCommand(req);
	}

	/**
	 * @@generated
	 */
	private static class CreateRectangle_3001Command extends CreateElementCommand {

		/**
		 * @@generated
		 */
		public CreateRectangle_3001Command(CreateElementRequest req) {
			super(req);
		}

		/**
		 * @@generated
		 */
		protected EClass getEClassToEdit() {
			return GMFGraphPackage.eINSTANCE.getFigureGallery();
		};

		/**
		 * @@generated
		 */
		protected EObject getElementToEdit() {
			EObject container = ((CreateElementRequest) getRequest()).getContainer();
			if (container instanceof View) {
				container = ((View) container).getElement();
			}
			return container;
		}
	}

	/**
	 * @@generated
	 */
	private static class CreateEllipse_3006Command extends CreateElementCommand {

		/**
		 * @@generated
		 */
		public CreateEllipse_3006Command(CreateElementRequest req) {
			super(req);
		}

		/**
		 * @@generated
		 */
		protected EClass getEClassToEdit() {
			return GMFGraphPackage.eINSTANCE.getFigureGallery();
		};

		/**
		 * @@generated
		 */
		protected EObject getElementToEdit() {
			EObject container = ((CreateElementRequest) getRequest()).getContainer();
			if (container instanceof View) {
				container = ((View) container).getElement();
			}
			return container;
		}
	}

	/**
	 * @@generated
	 */
	private static class CreateRoundedRectangle_3007Command extends CreateElementCommand {

		/**
		 * @@generated
		 */
		public CreateRoundedRectangle_3007Command(CreateElementRequest req) {
			super(req);
		}

		/**
		 * @@generated
		 */
		protected EClass getEClassToEdit() {
			return GMFGraphPackage.eINSTANCE.getFigureGallery();
		};

		/**
		 * @@generated
		 */
		protected EObject getElementToEdit() {
			EObject container = ((CreateElementRequest) getRequest()).getContainer();
			if (container instanceof View) {
				container = ((View) container).getElement();
			}
			return container;
		}
	}

	/**
	 * @@generated
	 */
	private static class CreatePolyline_3008Command extends CreateElementCommand {

		/**
		 * @@generated
		 */
		public CreatePolyline_3008Command(CreateElementRequest req) {
			super(req);
		}

		/**
		 * @@generated
		 */
		protected EClass getEClassToEdit() {
			return GMFGraphPackage.eINSTANCE.getFigureGallery();
		};

		/**
		 * @@generated
		 */
		protected EObject getElementToEdit() {
			EObject container = ((CreateElementRequest) getRequest()).getContainer();
			if (container instanceof View) {
				container = ((View) container).getElement();
			}
			return container;
		}
	}

}
@


1.3
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@@


1.2
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d1 10
d37 1
a37 1
		if (GMFGraphElementTypes.Rectangle_2001 == req.getElementType()) {
d41 1
a41 1
			return getMSLWrapper(new CreateRectangle_2001Command(req));
d43 1
a43 1
		if (GMFGraphElementTypes.Ellipse_2006 == req.getElementType()) {
d47 1
a47 1
			return getMSLWrapper(new CreateEllipse_2006Command(req));
d49 1
a49 1
		if (GMFGraphElementTypes.RoundedRectangle_2007 == req.getElementType()) {
d53 1
a53 1
			return getMSLWrapper(new CreateRoundedRectangle_2007Command(req));
d55 1
a55 1
		if (GMFGraphElementTypes.Polyline_2008 == req.getElementType()) {
d59 1
a59 1
			return getMSLWrapper(new CreatePolyline_2008Command(req));
d67 1
a67 1
	private static class CreateRectangle_2001Command extends CreateElementCommand {
d72 1
a72 1
		public CreateRectangle_2001Command(CreateElementRequest req) {
d98 1
a98 1
	private static class CreateEllipse_2006Command extends CreateElementCommand {
d103 1
a103 1
		public CreateEllipse_2006Command(CreateElementRequest req) {
d129 1
a129 1
	private static class CreateRoundedRectangle_2007Command extends CreateElementCommand {
d134 1
a134 1
		public CreateRoundedRectangle_2007Command(CreateElementRequest req) {
d160 1
a160 1
	private static class CreatePolyline_2008Command extends CreateElementCommand {
d165 1
a165 1
		public CreatePolyline_2008Command(CreateElementRequest req) {
@

