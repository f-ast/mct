head	1.7;
access;
symbols
	v20070208-1800:1.6
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	M1_20:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.3
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	RC2_10:1.2
	I20060505-1400:1.2
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2007.02.09.20.08.31;	author atikhomirov;	state dead;
branches;
next	1.6;
commitid	179c45ccd4b34567;

1.6
date	2006.06.26.18.38.20;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.02.15.08.30;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.30.13.06.14;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.22.17.37.30;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.05.16.31.18;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.27;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.providers;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPart;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.ui.services.properties.GetPropertySourceOperation;
import org.eclipse.gmf.runtime.common.ui.services.properties.ICompositePropertySource;
import org.eclipse.gmf.runtime.common.ui.services.properties.IPropertiesProvider;
import org.eclipse.gmf.runtime.emf.ui.properties.providers.GenericEMFPropertiesProvider;
import org.eclipse.gmf.runtime.notation.View;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;

import org.eclipse.gmf.gmfgraph.GMFGraphFactory;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.Layoutable;
import org.eclipse.gmf.gmfgraph.Point;
import org.eclipse.gmf.gmfgraph.Polyline;

import org.eclipse.gmf.gmfgraph.XYLayoutData;

import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;

import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;

import org.eclipse.gmf.runtime.common.ui.services.properties.descriptors.CompositePropertySource;

import org.eclipse.gmf.runtime.emf.ui.properties.descriptors.EMFCompositePropertySource;
import org.eclipse.gmf.runtime.emf.ui.properties.descriptors.EMFCompositeSourcePropertyDescriptor;

import org.eclipse.ui.views.properties.IPropertyDescriptor;

/**
 * @@generated
 */
public class GMFGraphPropertyProvider extends GenericEMFPropertiesProvider implements IPropertiesProvider {

	/**
	 * @@generated
	 */
	public boolean provides(IOperation operation) {
		if (operation instanceof GetPropertySourceOperation) {
			Object object = ((GetPropertySourceOperation) operation).getObject();
			return getSemanticElement(object) != null;
		}
		return false;
	}

	/**
	 * @@generated
	 */
	public ICompositePropertySource getPropertySource(Object object) {
		EObject element = getSemanticElement(object);
		if (element != null) {
			if (element instanceof Layoutable) {
				CompositePropertySource compositeSource = new CompositePropertySource(element);
				compositeSource.addPropertySource(super.getPropertySource(element));
				class ChildMetaclassItemPropertyDescriptor extends ItemPropertyDescriptor {

					private EObject[] myValues;

					ChildMetaclassItemPropertyDescriptor(AdapterFactory adapterFactory, String displayName, String description, EStructuralFeature feature, boolean isSettable, EObject[] valueInstances) {
						super(adapterFactory, displayName, description, feature, isSettable);
						myValues = valueInstances;
					}

					protected Collection getComboBoxObjects(Object object) {
						if (object instanceof EObject) {
							EObject eObject = (EObject) object;
							Object currentValue = getValue(eObject, feature);
							Collection result = new ArrayList();
							result.add(currentValue);
							EClass valueEClass = currentValue instanceof EObject ? ((EObject) currentValue).eClass() : null;
							for (int i = 0; i < myValues.length; i++) {
								if (myValues[i].eClass() == valueEClass) {
									continue;
								}
								result.add(myValues[i]);
							}
							if (currentValue != null) {
								result.add(null);
							}
							return result;
						}
						return null;
					}

					public void setPropertyValue(Object object, Object value) {
						if (value instanceof EObject) {
							EClass eClass = ((EObject) value).eClass();
							value = eClass.getEPackage().getEFactoryInstance().create(eClass);
							if (value instanceof XYLayoutData) {
								XYLayoutData xyLayoutData = (XYLayoutData) value;
								xyLayoutData.setTopLeft(GMFGraphFactory.eINSTANCE.createPoint());
								xyLayoutData.getTopLeft().setX(0);
								xyLayoutData.getTopLeft().setY(0);
								xyLayoutData.setSize(GMFGraphFactory.eINSTANCE.createDimension());
								xyLayoutData.getSize().setDx(40);
								xyLayoutData.getSize().setDy(40);
							}
						}
						super.setPropertyValue(object, value);
					}
				}

				class SingleDescriptorPropertySource implements IItemPropertySource {

					private IItemPropertyDescriptor myPropertyDescriptor;

					private List myDescriptors = new LinkedList();

					SingleDescriptorPropertySource(IItemPropertyDescriptor propertyDescriptor) {
						myPropertyDescriptor = propertyDescriptor;
						myDescriptors.add(myPropertyDescriptor);
					}

					public List getPropertyDescriptors(Object object) {
						return myDescriptors;
					}

					public IItemPropertyDescriptor getPropertyDescriptor(Object object, Object propertyID) {
						return myPropertyDescriptor;
					}

					public Object getEditableValue(Object object) {
						return object;
					}

				}

				IItemPropertyDescriptor layoutPropertyDescriptor = new ChildMetaclassItemPropertyDescriptor(GMFGraphDiagramEditorPlugin.getInstance().getItemProvidersAdapterFactory(),
						"Layout Manager", "Layout Manager", GMFGraphPackage.eINSTANCE.getLayoutable_Layout(), true, new EObject[] { GMFGraphFactory.eINSTANCE.createBorderLayout(),
								GMFGraphFactory.eINSTANCE.createCustomLayout(), GMFGraphFactory.eINSTANCE.createFlowLayout(), GMFGraphFactory.eINSTANCE.createGridLayout(),
								GMFGraphFactory.eINSTANCE.createStackLayout(), GMFGraphFactory.eINSTANCE.createXYLayout() });
				compositeSource.addPropertySource(new EMFCompositePropertySource(element, new SingleDescriptorPropertySource(layoutPropertyDescriptor), "EMF")); //$NON-NLS-1$
				IItemPropertyDescriptor layoutDataPropertyDescriptor = new ChildMetaclassItemPropertyDescriptor(GMFGraphDiagramEditorPlugin.getInstance().getItemProvidersAdapterFactory(),
						"Layout Data", "Layout Data", GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData(), true, new EObject[] { GMFGraphFactory.eINSTANCE.createBorderLayoutData(),
								GMFGraphFactory.eINSTANCE.createCustomLayoutData(), GMFGraphFactory.eINSTANCE.createGridLayoutData(), GMFGraphFactory.eINSTANCE.createXYLayoutData() });
				compositeSource.addPropertySource(new EMFCompositePropertySource(element, new SingleDescriptorPropertySource(layoutDataPropertyDescriptor), "EMF")); //$NON-NLS-1$

				if (element instanceof Polyline) {
					int counter = 1;
					for (Iterator it = ((Polyline) element).getTemplate().iterator(); it.hasNext(); counter++) {
						Point nextPoint = (Point) it.next();
						final String titleX = "Point " + counter + " X";
						IItemPropertyDescriptor nextPointPropertyDescriptorX = new ItemPropertyDescriptor(GMFGraphDiagramEditorPlugin.getInstance().getItemProvidersAdapterFactory(), titleX, titleX,
								GMFGraphPackage.eINSTANCE.getPoint_X(), true, "Template");
						compositeSource.addPropertySource(new EMFCompositePropertySource(nextPoint, new SingleDescriptorPropertySource(nextPointPropertyDescriptorX), "EMF") {

							protected IPropertyDescriptor newPropertyDescriptor(IItemPropertyDescriptor itemPropertyDescriptor) {
								return new EMFCompositeSourcePropertyDescriptor(object, itemPropertyDescriptor, getCategory()) {

									public Object getId() {
										return titleX;
									}
								};
							}
						});

						final String titleY = "Point " + counter + " Y";
						IItemPropertyDescriptor nextPointPropertyDescriptorY = new ItemPropertyDescriptor(GMFGraphDiagramEditorPlugin.getInstance().getItemProvidersAdapterFactory(), titleY, titleY,
								GMFGraphPackage.eINSTANCE.getPoint_Y(), true, "Template");
						compositeSource.addPropertySource(new EMFCompositePropertySource(nextPoint, new SingleDescriptorPropertySource(nextPointPropertyDescriptorY), "EMF") {

							protected IPropertyDescriptor newPropertyDescriptor(IItemPropertyDescriptor itemPropertyDescriptor) {
								return new EMFCompositeSourcePropertyDescriptor(object, itemPropertyDescriptor, getCategory()) {

									public Object getId() {
										return titleY;
									}
								};
							}
						});
					}
				}

				return compositeSource;
			}
			return super.getPropertySource(element);
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected EObject getSemanticElement(Object object) {
		View view = null;
		if (object instanceof View) {
			view = (View) object;
		} else if (object instanceof EditPart) {
			EditPart editPart = (EditPart) object;
			if (editPart.getModel() instanceof View) {
				view = (View) editPart.getModel();
			}
		}
		if (view != null && CanvasEditPart.MODEL_ID.equals(GMFGraphVisualIDRegistry.getModelID(view))) {
			return view.getElement();
		}
		return null;
	}

}
@


1.6
log
@Updating templates + Correcting XYLayoutData creation strategy (default value)
@
text
@@


1.5
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d42 2
a80 1

d115 9
@


1.4
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
@


1.3
log
@Updating with new templates
@
text
@d1 10
@


1.2
log
@Polylines partually supported.
@
text
@a8 2
import org.eclipse.gmf.runtime.common.ui.services.properties.descriptors.CompositePropertySource;
import org.eclipse.gmf.runtime.emf.ui.properties.descriptors.EMFCompositePropertySource;
d37 3
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d15 1
d31 2
d39 4
d142 37
@

