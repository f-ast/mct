head	1.19;
access;
symbols
	v20080722-1827:1.19
	v20080718-1700:1.18
	v20080718-1731:1.19
	v20080716-1642:1.19
	R2_1_maintenance:1.18.0.2
	Root_R2_1_maintenance:1.18
	R2_1_0:1.18
	v20080610-1132:1.18
	v20080603-1553:1.18
	v20080528-1052:1.16
	v20080521:1.15
	v20080516-1143:1.15
	v20080512-1200:1.15
	v20080510-0100:1.15
	v20080507-1326:1.15
	v20080501-1739:1.15
	v20080425-1959:1.15
	v20080411-0411:1.15
	v20080404-1111:1.15
	v20080322-0000:1.15
	v20080114-2222:1.14
	v20071214-1111:1.14
	v20070809-0000:1.14
	R2_0_maintenance:1.14.0.2
	R2_0:1.14
	R4_20:1.14
	v20070621-0000:1.14
	RC3_20:1.14
	v20070605-1400:1.14
	v20070601-1400:1.14
	v20070520-1200:1.13
	v20070420-1000:1.13
	v20070405-2000:1.12
	v20070405-1100:1.12
	v20070330-1300:1.11
	v20070307-0700:1.11
	v20070221-1500:1.10
	v20070208-1800:1.9
	M4_20:1.9
	v20061214-0000:1.9
	M3_20:1.9
	v20061013-1330:1.9
	M1_20:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060616-1200:1.8
	v20060609-1400:1.8
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.5
	v20060519-0800:1.5
	v20060512-1000:1.4
	I20060512-1000:1.4
	RC2_10:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.3
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.19
date	2008.07.02.15.20.45;	author ashatalin;	state Exp;
branches;
next	1.18;
commitid	703486b9cc54567;

1.18
date	2008.06.03.16.56.38;	author ashatalin;	state Exp;
branches;
next	1.17;
commitid	58c484577c54567;

1.17
date	2008.05.30.17.14.49;	author ashatalin;	state Exp;
branches;
next	1.16;
commitid	70b4484036034567;

1.16
date	2008.05.27.12.28.08;	author ashatalin;	state Exp;
branches;
next	1.15;
commitid	68fd483bfe544567;

1.15
date	2008.02.22.13.08.00;	author ashatalin;	state Exp;
branches;
next	1.14;
commitid	4c5647bec9294567;

1.14
date	2007.05.31.15.52.31;	author ashatalin;	state Exp;
branches;
next	1.13;
commitid	49f1465eef2c4567;

1.13
date	2007.04.16.11.03.53;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	7e4e462358154567;

1.12
date	2007.04.04.20.23.25;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	ade461409204567;

1.11
date	2007.03.02.15.39.20;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	717a45e845234567;

1.10
date	2007.02.09.20.08.29;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	179c45ccd4b34567;

1.9
date	2006.06.27.13.44.29;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.08.08.40.33;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.02.15.08.29;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.30.13.06.14;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.12.14.53.02;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.27.13.58.12;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.21.17.13.32;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.20.37.00;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.23;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.19
log
@[233207] - Support Label figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.policies;

import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ChildAccessEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.EllipseEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Label2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Label3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PointEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polygon2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polygon3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolygonEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolylineEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RectangleEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangleEditPart;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramUpdater;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphLinkDescriptor;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphNodeDescriptor;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest;
import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class CanvasCanonicalEditPolicy extends CanonicalConnectionEditPolicy {

	/**
	 * @@generated
	 */
	Set myFeaturesToSynchronize;

	/**
	 * @@generated
	 */
	protected List getSemanticChildrenList() {
		View viewObject = (View) getHost().getModel();
		List result = new LinkedList();
		for (Iterator it = GMFGraphDiagramUpdater.getCanvas_1000SemanticChildren(viewObject).iterator(); it.hasNext();) {
			result.add(((GMFGraphNodeDescriptor) it.next()).getModelElement());
		}
		return result;
	}

	/**
	 * @@generated
	 */
	protected boolean shouldDeleteView(View view) {
		return true;
	}

	/**
	 * @@generated
	 */
	protected boolean isOrphaned(Collection semanticChildren, final View view) {
		if (view.getEAnnotation("Shortcut") != null) {//$NON-NLS-1$
			return GMFGraphDiagramUpdater.isShortcutOrphaned(view);
		}
		int visualID = GMFGraphVisualIDRegistry.getVisualID(view);
		switch (visualID) {
		case CompartmentEditPart.VISUAL_ID:
		case NodeEditPart.VISUAL_ID:
		case ConnectionEditPart.VISUAL_ID:
		case FigureGalleryEditPart.VISUAL_ID:
		case DiagramLabelEditPart.VISUAL_ID:
			if (!semanticChildren.contains(view.getElement())) {
				return true;
			}
		}
		return false;
	}

	/**
	 * @@generated
	 */
	protected String getDefaultFactoryHint() {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Set getFeaturesToSynchronize() {
		if (myFeaturesToSynchronize == null) {
			myFeaturesToSynchronize = new HashSet();
			myFeaturesToSynchronize.add(GMFGraphPackage.eINSTANCE.getCanvas_Compartments());
			myFeaturesToSynchronize.add(GMFGraphPackage.eINSTANCE.getCanvas_Nodes());
			myFeaturesToSynchronize.add(GMFGraphPackage.eINSTANCE.getCanvas_Connections());
			myFeaturesToSynchronize.add(GMFGraphPackage.eINSTANCE.getCanvas_Figures());
			myFeaturesToSynchronize.add(GMFGraphPackage.eINSTANCE.getCanvas_Labels());
		}
		return myFeaturesToSynchronize;
	}

	/**
	 * @@generated
	 */
	protected List getSemanticConnectionsList() {
		return Collections.EMPTY_LIST;
	}

	/**
	 * @@generated
	 */
	protected EObject getSourceElement(EObject relationship) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected EObject getTargetElement(EObject relationship) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected boolean shouldIncludeConnection(Edge connector, Collection children) {
		return false;
	}

	/**
	 * @@generated
	 */
	protected void refreshSemantic() {
		List createdViews = new LinkedList();
		createdViews.addAll(refreshSemanticChildren());
		List createdConnectionViews = new LinkedList();
		createdConnectionViews.addAll(refreshSemanticConnections());
		createdConnectionViews.addAll(refreshConnections());

		if (createdViews.size() > 1) {
			// perform a layout of the container
			DeferredLayoutCommand layoutCmd = new DeferredLayoutCommand(host().getEditingDomain(), createdViews, host());
			executeCommand(new ICommandProxy(layoutCmd));
		}

		createdViews.addAll(createdConnectionViews);
		makeViewsImmutable(createdViews);
	}

	/**
	 * @@generated
	 */
	private Diagram getDiagram() {
		return ((View) getHost().getModel()).getDiagram();
	}

	/**
	 * @@generated
	 */
	private Collection refreshConnections() {
		Map domain2NotationMap = new HashMap();
		Collection linkDescriptors = collectAllLinks(getDiagram(), domain2NotationMap);
		Collection existingLinks = new LinkedList(getDiagram().getEdges());
		for (Iterator linksIterator = existingLinks.iterator(); linksIterator.hasNext();) {
			Edge nextDiagramLink = (Edge) linksIterator.next();
			int diagramLinkVisualID = GMFGraphVisualIDRegistry.getVisualID(nextDiagramLink);
			if (diagramLinkVisualID == -1) {
				if (nextDiagramLink.getSource() != null && nextDiagramLink.getTarget() != null) {
					linksIterator.remove();
				}
				continue;
			}
			EObject diagramLinkObject = nextDiagramLink.getElement();
			EObject diagramLinkSrc = nextDiagramLink.getSource().getElement();
			EObject diagramLinkDst = nextDiagramLink.getTarget().getElement();
			for (Iterator LinkDescriptorsIterator = linkDescriptors.iterator(); LinkDescriptorsIterator.hasNext();) {
				GMFGraphLinkDescriptor nextLinkDescriptor = (GMFGraphLinkDescriptor) LinkDescriptorsIterator.next();
				if (diagramLinkObject == nextLinkDescriptor.getModelElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination()
						&& diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {
					linksIterator.remove();
					LinkDescriptorsIterator.remove();
				}
			}
		}
		deleteViews(existingLinks.iterator());
		return createConnections(linkDescriptors, domain2NotationMap);
	}

	/**
	 * @@generated
	 */
	private Collection collectAllLinks(View view, Map domain2NotationMap) {
		if (!CanvasEditPart.MODEL_ID.equals(GMFGraphVisualIDRegistry.getModelID(view))) {
			return Collections.EMPTY_LIST;
		}
		Collection result = new LinkedList();
		switch (GMFGraphVisualIDRegistry.getVisualID(view)) {
		case CanvasEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getCanvas_1000ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case CompartmentEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getCompartment_2005ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case NodeEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getNode_2006ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case ConnectionEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getConnection_2007ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case FigureGalleryEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getFigureGallery_2008ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case DiagramLabelEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getDiagramLabel_2009ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case FigureDescriptorEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getFigureDescriptor_3009ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case RectangleEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getRectangle_3010ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case Rectangle2EditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getRectangle_3011ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case EllipseEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getEllipse_3012ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case RoundedRectangleEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getRoundedRectangle_3013ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case PolylineEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getPolyline_3014ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case PointEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getPoint_3022ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case PolygonEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getPolygon_3023ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case LabelEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getLabel_3026ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case Ellipse2EditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getEllipse_3015ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case RoundedRectangle2EditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getRoundedRectangle_3016ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case Polyline2EditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getPolyline_3017ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case Polygon2EditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getPolygon_3024ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case Label2EditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getLabel_3027ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case Rectangle3EditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getRectangle_3018ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case Ellipse3EditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getEllipse_3019ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case RoundedRectangle3EditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getRoundedRectangle_3020ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case Polyline3EditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getPolyline_3021ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case Polygon3EditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getPolygon_3025ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case Label3EditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getLabel_3028ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		case ChildAccessEditPart.VISUAL_ID: {
			if (!domain2NotationMap.containsKey(view.getElement())) {
				result.addAll(GMFGraphDiagramUpdater.getChildAccess_4002ContainedLinks(view));
			}
			if (!domain2NotationMap.containsKey(view.getElement()) || view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
				domain2NotationMap.put(view.getElement(), view);
			}
			break;
		}
		}
		for (Iterator children = view.getChildren().iterator(); children.hasNext();) {
			result.addAll(collectAllLinks((View) children.next(), domain2NotationMap));
		}
		for (Iterator edges = view.getSourceEdges().iterator(); edges.hasNext();) {
			result.addAll(collectAllLinks((View) edges.next(), domain2NotationMap));
		}
		return result;
	}

	/**
	 * @@generated
	 */
	private Collection createConnections(Collection linkDescriptors, Map domain2NotationMap) {
		List adapters = new LinkedList();
		for (Iterator linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {
			final GMFGraphLinkDescriptor nextLinkDescriptor = (GMFGraphLinkDescriptor) linkDescriptorsIterator.next();
			EditPart sourceEditPart = getEditPart(nextLinkDescriptor.getSource(), domain2NotationMap);
			EditPart targetEditPart = getEditPart(nextLinkDescriptor.getDestination(), domain2NotationMap);
			if (sourceEditPart == null || targetEditPart == null) {
				continue;
			}
			CreateConnectionViewRequest.ConnectionViewDescriptor descriptor = new CreateConnectionViewRequest.ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, ViewUtil.APPEND,
					false, ((IGraphicalEditPart) getHost()).getDiagramPreferencesHint());
			CreateConnectionViewRequest ccr = new CreateConnectionViewRequest(descriptor);
			ccr.setType(RequestConstants.REQ_CONNECTION_START);
			ccr.setSourceEditPart(sourceEditPart);
			sourceEditPart.getCommand(ccr);
			ccr.setTargetEditPart(targetEditPart);
			ccr.setType(RequestConstants.REQ_CONNECTION_END);
			Command cmd = targetEditPart.getCommand(ccr);
			if (cmd != null && cmd.canExecute()) {
				executeCommand(cmd);
				IAdaptable viewAdapter = (IAdaptable) ccr.getNewObject();
				if (viewAdapter != null) {
					adapters.add(viewAdapter);
				}
			}
		}
		return adapters;
	}

	/**
	 * @@generated
	 */
	private EditPart getEditPart(EObject domainModelElement, Map domain2NotationMap) {
		View view = (View) domain2NotationMap.get(domainModelElement);
		if (view != null) {
			return (EditPart) getHost().getViewer().getEditPartRegistry().get(view);
		}
		return null;
	}
}
@


1.18
log
@Example code was regenerated with latest templates.
@
text
@d32 1
d38 3
d112 1
d137 1
d283 9
d364 9
d409 9
d463 9
@


1.17
log
@[233206] - Support Polygon figure in .gmfgraph editor
@
text
@d108 3
a110 1
			return !semanticChildren.contains(view.getElement()) || visualID != GMFGraphVisualIDRegistry.getNodeVisualID((View) getHost().getModel(), view.getElement());
@


1.16
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d39 3
d338 9
d374 9
d419 9
@


1.15
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@d38 1
d326 9
@


1.14
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d194 7
a203 1
			int diagramLinkVisualID = GMFGraphVisualIDRegistry.getVisualID(nextDiagramLink);
d221 3
d227 6
a232 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getCanvas_1000ContainedLinks(view));
d236 6
a241 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getCompartment_2005ContainedLinks(view));
d245 6
a250 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getNode_2006ContainedLinks(view));
d254 6
a259 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getConnection_2007ContainedLinks(view));
d263 6
a268 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getFigureGallery_2008ContainedLinks(view));
d272 6
a277 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getFigureDescriptor_3009ContainedLinks(view));
d281 6
a286 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getRectangle_3010ContainedLinks(view));
d290 6
a295 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getRectangle_3011ContainedLinks(view));
d299 6
a304 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getEllipse_3012ContainedLinks(view));
d308 6
a313 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getRoundedRectangle_3013ContainedLinks(view));
d317 6
a322 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getPolyline_3014ContainedLinks(view));
d326 6
a331 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getEllipse_3015ContainedLinks(view));
d335 6
a340 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getRoundedRectangle_3016ContainedLinks(view));
d344 6
a349 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getPolyline_3017ContainedLinks(view));
d353 6
a358 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getRectangle_3018ContainedLinks(view));
d362 6
a367 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getEllipse_3019ContainedLinks(view));
d371 6
a376 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getRoundedRectangle_3020ContainedLinks(view));
d380 6
a385 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getPolyline_3021ContainedLinks(view));
d389 6
a394 2
			domain2NotationMap.put(view.getElement(), view);
			result.addAll(GMFGraphDiagramUpdater.getChildAccess_4002ContainedLinks(view));
@


1.13
log
@[182339] akarjakina - provide different means to select parts of composite figures
Visible insets for top-level figures, custom popup action with nested submenus, simple handles behavior
@
text
@d2 8
a9 8
 * Copyright (c) 2006, 2007 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d16 1
d21 1
a23 1
import org.eclipse.emf.ecore.EClass;
a26 2
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.DiagramElement;
d29 1
a31 1
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramElementFigureEditPart;
d33 1
d35 1
d39 1
d42 1
d45 1
d47 3
a50 1
import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;
a57 2
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
d70 5
d76 1
d78 2
a79 31
		EObject modelObject = ((View) getHost().getModel()).getElement();
		View viewObject = (View) getHost().getModel();
		EObject nextValue;
		int nodeVID;
		for (Iterator values = ((Canvas) modelObject).getCompartments().iterator(); values.hasNext();) {
			nextValue = (EObject) values.next();
			nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID(viewObject, nextValue);
			if (CompartmentEditPart.VISUAL_ID == nodeVID) {
				result.add(nextValue);
			}
		}
		for (Iterator values = ((Canvas) modelObject).getNodes().iterator(); values.hasNext();) {
			nextValue = (EObject) values.next();
			nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID(viewObject, nextValue);
			if (NodeEditPart.VISUAL_ID == nodeVID) {
				result.add(nextValue);
			}
		}
		for (Iterator values = ((Canvas) modelObject).getConnections().iterator(); values.hasNext();) {
			nextValue = (EObject) values.next();
			nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID(viewObject, nextValue);
			if (ConnectionEditPart.VISUAL_ID == nodeVID) {
				result.add(nextValue);
			}
		}
		for (Iterator values = ((Canvas) modelObject).getFigures().iterator(); values.hasNext();) {
			nextValue = (EObject) values.next();
			nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID(viewObject, nextValue);
			if (FigureGalleryEditPart.VISUAL_ID == nodeVID) {
				result.add(nextValue);
			}
d88 9
a96 2
		if (view.getEAnnotation("Shortcut") != null) { //$NON-NLS-1$
			return view.isSetElement() && (view.getElement() == null || view.getElement().eIsProxy());
d98 2
a99 2
		int nodeVID = GMFGraphVisualIDRegistry.getVisualID(view);
		switch (nodeVID) {
d104 1
a104 1
			return true;
d119 14
d181 3
a183 6
	private Collection myLinkDescriptors = new LinkedList();

	/**
	 * @@generated
	 */
	private Map myEObject2ViewMap = new HashMap();
d189 15
a203 16
		try {
			collectAllLinks(getDiagram());
			Collection existingLinks = new LinkedList(getDiagram().getEdges());
			for (Iterator diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {
				Edge nextDiagramLink = (Edge) diagramLinks.next();
				EObject diagramLinkObject = nextDiagramLink.getElement();
				EObject diagramLinkSrc = nextDiagramLink.getSource().getElement();
				EObject diagramLinkDst = nextDiagramLink.getTarget().getElement();
				int diagramLinkVisualID = GMFGraphVisualIDRegistry.getVisualID(nextDiagramLink);
				for (Iterator modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {
					LinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();
					if (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination()
							&& diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {
						diagramLinks.remove();
						modelLinkDescriptors.remove();
					}
a205 5
			deleteViews(existingLinks.iterator());
			return createConnections(myLinkDescriptors);
		} finally {
			myLinkDescriptors.clear();
			myEObject2ViewMap.clear();
d207 2
d214 3
a216 16
	private void collectAllLinks(View view) {
		EObject modelElement = view.getElement();
		int diagramElementVisualID = GMFGraphVisualIDRegistry.getVisualID(view);
		switch (diagramElementVisualID) {
		case CompartmentEditPart.VISUAL_ID:
		case NodeEditPart.VISUAL_ID:
		case ConnectionEditPart.VISUAL_ID:
		case FigureGalleryEditPart.VISUAL_ID:
		case RectangleEditPart.VISUAL_ID:
		case Rectangle2EditPart.VISUAL_ID:
		case EllipseEditPart.VISUAL_ID:
		case RoundedRectangleEditPart.VISUAL_ID:
		case PolylineEditPart.VISUAL_ID:
		case Ellipse2EditPart.VISUAL_ID:
		case RoundedRectangle2EditPart.VISUAL_ID:
		case Polyline2EditPart.VISUAL_ID:
d218 94
a311 2
			myEObject2ViewMap.put(modelElement, view);
			storeLinks(modelElement, getDiagram());
d313 2
a314 1
		default: {
d316 2
a317 4
			for (Iterator children = view.getChildren().iterator(); children.hasNext();) {
				View childView = (View) children.next();
				collectAllLinks(childView);
			}
d319 1
d325 1
a325 4
	private Collection createConnections(Collection linkDescriptors) {
		if (linkDescriptors.isEmpty()) {
			return Collections.EMPTY_LIST;
		}
d328 3
a330 3
			final LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();
			EditPart sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());
			EditPart targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());
d357 2
a358 2
	private EditPart getEditPartFor(EObject modelElement) {
		View view = (View) myEObject2ViewMap.get(modelElement);
a363 146

	/**
	 *@@generated
	 */
	private void storeLinks(EObject container, Diagram diagram) {
		EClass containerMetaclass = container.eClass();
		storeFeatureModelFacetLinks(container, containerMetaclass, diagram);
		storeTypeModelFacetLinks(container, containerMetaclass);
	}

	/**
	 * @@generated
	 */
	private void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {
	}

	/**
	 *@@generated
	 */
	private void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {

		if (GMFGraphPackage.eINSTANCE.getDiagramElement().isSuperTypeOf(containerMetaclass)) {
			EObject nextDestination = (EObject) ((DiagramElement) container).getFigure();
			myLinkDescriptors.add(new LinkDescriptor(container, nextDestination, GMFGraphElementTypes.DiagramElementFigure_4001, DiagramElementFigureEditPart.VISUAL_ID));

		}
	}

	/**
	 * @@generated
	 */
	private Diagram getDiagram() {
		return ((View) getHost().getModel()).getDiagram();
	}

	/**
	 * @@generated
	 */
	private class LinkDescriptor {

		/**
		 * @@generated
		 */
		private EObject mySource;

		/**
		 * @@generated
		 */
		private EObject myDestination;

		/**
		 * @@generated
		 */
		private EObject myLinkElement;

		/**
		 * @@generated
		 */
		private int myVisualID;

		/**
		 * @@generated
		 */
		private IAdaptable mySemanticAdapter;

		/**
		 * @@generated
		 */
		protected LinkDescriptor(EObject source, EObject destination, EObject linkElement, IElementType elementType, int linkVID) {
			this(source, destination, linkVID);
			myLinkElement = linkElement;
			final IElementType elementTypeCopy = elementType;
			mySemanticAdapter = new EObjectAdapter(linkElement) {

				public Object getAdapter(Class adapter) {
					if (IElementType.class.equals(adapter)) {
						return elementTypeCopy;
					}
					return super.getAdapter(adapter);
				}
			};
		}

		/**
		 * @@generated
		 */
		protected LinkDescriptor(EObject source, EObject destination, IElementType elementType, int linkVID) {
			this(source, destination, linkVID);
			myLinkElement = null;
			final IElementType elementTypeCopy = elementType;
			mySemanticAdapter = new IAdaptable() {

				public Object getAdapter(Class adapter) {
					if (IElementType.class.equals(adapter)) {
						return elementTypeCopy;
					}
					return null;
				}
			};
		}

		/**
		 * @@generated
		 */
		private LinkDescriptor(EObject source, EObject destination, int linkVID) {
			mySource = source;
			myDestination = destination;
			myVisualID = linkVID;
		}

		/**
		 * @@generated
		 */
		protected EObject getSource() {
			return mySource;
		}

		/**
		 * @@generated
		 */
		protected EObject getDestination() {
			return myDestination;
		}

		/**
		 * @@generated
		 */
		protected EObject getLinkElement() {
			return myLinkElement;
		}

		/**
		 * @@generated
		 */
		protected int getVisualID() {
			return myVisualID;
		}

		/**
		 * @@generated
		 */
		protected IAdaptable getSemanticAdapter() {
			return mySemanticAdapter;
		}
	}

@


1.12
log
@[173499] akarjakina - Enhance graphdef.editor with properties - use custom model to describe property sheet and generate PropertyTab code from that model
@
text
@a12 1
import java.util.List;
a13 2
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.emf.ecore.EObject;
d18 1
a21 1

d23 1
a23 1

a24 1

a25 1

a28 1

a42 1

a43 1

a44 1

a45 1

a47 1

a48 1

a49 1

a51 1

a52 1

a53 1

d55 1
@


1.11
log
@[176026] akarjakina - Fix notation background and foreground colors update
[173499] akarjakina - Add custom form-based property sections fro figure attributes
@
text
@d122 12
a133 1
		return view.isSetElement() && view.getElement() != null && view.getElement().eIsProxy();
d310 1
a310 1
	 * @@generated
d325 1
a325 1
	 * @@generated
@


1.10
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d299 1
a299 1
	 *@@generated
d314 1
a314 1
	 *@@generated
d365 1
a365 1
		protected LinkDescriptor(EObject source, EObject destination, EObject linkElement, int linkVID) {
d368 10
a377 1
			mySemanticAdapter = new EObjectAdapter(linkElement);
@


1.9
log
@#148813 Do not remove diagram nodes with domain element located in resource by CanonicalEditPolicy
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
d56 2
a57 1
import org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand;
d164 14
a177 2
		super.refreshSemantic();
		refreshConnections();
d193 1
a193 1
	private void refreshConnections() {
d213 1
a213 1
			createConnections(myLinkDescriptors);
d255 1
a255 1
	private void createConnections(Collection linkDescriptors) {
d257 1
a257 1
			return;
d259 1
d279 3
a281 1
				SetViewMutabilityCommand.makeImmutable(viewAdapter).execute();
d284 1
@


1.8
log
@Updating with new templates.
@
text
@d121 1
a121 4
		if (view.getEAnnotation("Shortcut") != null) { //$NON-NLS-1$
			return false;
		}
		return view.isSetElement() && view.getElement() != null;
@


1.7
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d38 1
a40 1
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureEditPart;
d306 1
a306 1
			myLinkDescriptors.add(new LinkDescriptor(container, nextDestination, GMFGraphElementTypes.DiagramElementFigure_4001, FigureEditPart.VISUAL_ID));
@


1.6
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
@


1.5
log
@#141463 ecore diagram : EClass shortcut disappears when creating a new EClass
@
text
@d1 10
a14 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy;
a15 1
import org.eclipse.gmf.runtime.notation.View;
d60 2
d70 1
d306 1
a306 1
			myLinkDescriptors.add(new LinkDescriptor(container, nextDestination, GMFGraphElementTypes.DiagramElementFigure_3001, FigureEditPart.VISUAL_ID));
@


1.4
log
@#135019 Canonical Edit Policy: Links that have changed visual IDs should not duplicate on diagram reopening
@
text
@d110 3
@


1.3
log
@#137999 Generate pure static VisualIDRegisrty classes
@
text
@d110 1
a110 2
		EObject domainModelElement = view.getElement();
		return domainModelElement != null && domainModelElement != ((View) getHost().getModel()).getElement() && super.shouldDeleteView(view);
@


1.2
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d77 1
a77 1
			nodeVID = GMFGraphVisualIDRegistry.INSTANCE.getNodeVisualID(viewObject, nextValue);
d84 1
a84 1
			nodeVID = GMFGraphVisualIDRegistry.INSTANCE.getNodeVisualID(viewObject, nextValue);
d91 1
a91 1
			nodeVID = GMFGraphVisualIDRegistry.INSTANCE.getNodeVisualID(viewObject, nextValue);
d98 1
a98 1
			nodeVID = GMFGraphVisualIDRegistry.INSTANCE.getNodeVisualID(viewObject, nextValue);
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d27 15
d78 1
a78 1
			if (1001 == nodeVID) {
d85 1
a85 1
			if (1002 == nodeVID) {
d92 1
a92 1
			if (1003 == nodeVID) {
d99 1
a99 1
			if (1004 == nodeVID) {
d204 13
a216 13
		case 1001:
		case 1002:
		case 1003:
		case 1004:
		case 2001:
		case 2002:
		case 2003:
		case 2004:
		case 2005:
		case 2006:
		case 2007:
		case 2008:
		case 79: {
d293 1
a293 1
			myLinkDescriptors.add(new LinkDescriptor(container, nextDestination, GMFGraphElementTypes.DiagramElementFigure_3001, 3001));
@

