head	1.5;
access;
symbols
	v20080528-1052:1.4
	v20080521:1.4
	v20080516-1143:1.4
	v20080512-1200:1.4
	v20080510-0100:1.4
	v20080507-1326:1.4
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080411-0411:1.4
	v20080404-1111:1.4
	v20080322-0000:1.4
	v20080114-2222:1.4
	v20071214-1111:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070520-1200:1.3
	v20070420-1000:1.3
	v20070405-2000:1.3
	v20070405-1100:1.2
	v20070330-1300:1.1
	v20070307-0700:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2008.05.28.17.16.25;	author ashatalin;	state dead;
branches;
next	1.4;
commitid	23d2483d93684567;

1.4
date	2007.05.31.15.52.31;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	49f1465eef2c4567;

1.3
date	2007.04.05.19.55.25;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	7f1461554204567;

1.2
date	2007.04.04.20.23.26;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	ade461409204567;

1.1
date	2007.03.02.15.39.20;	author atikhomirov;	state Exp;
branches;
next	;
commitid	717a45e845234567;


desc
@@


1.5
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.sheet;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gef.EditPart;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.Point;
import org.eclipse.gmf.gmfgraph.Polyline;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;
import org.eclipse.gmf.runtime.common.ui.services.properties.ICompositePropertySource;
import org.eclipse.gmf.runtime.common.ui.services.properties.descriptors.CompositePropertySource;
import org.eclipse.gmf.runtime.diagram.ui.properties.sections.AdvancedPropertySection;
import org.eclipse.gmf.runtime.emf.ui.properties.descriptors.EMFCompositePropertySource;
import org.eclipse.gmf.runtime.emf.ui.properties.descriptors.EMFCompositeSourcePropertyDescriptor;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.views.properties.IPropertyDescriptor;
import org.eclipse.ui.views.properties.IPropertySource;
import org.eclipse.ui.views.properties.IPropertySourceProvider;

/**
 * @@generated
 */
public class PointsPropertySection extends AdvancedPropertySection implements IPropertySourceProvider {

	/**
	 * @@generated
	 */
	public IPropertySource getPropertySource(Object object) {
		if (object instanceof Polyline) {
			ICompositePropertySource compositeSource = new CompositePropertySource(object);

			int counter = 1;
			for (Iterator it = ((Polyline) object).getTemplate().iterator(); it.hasNext(); counter++) {
				Point nextPoint = (Point) it.next();
				final String titleX = "Point " + counter + " X";
				IItemPropertyDescriptor nextPointPropertyDescriptorX = new ItemPropertyDescriptor(GMFGraphDiagramEditorPlugin.getInstance().getItemProvidersAdapterFactory(), titleX, titleX,
						GMFGraphPackage.eINSTANCE.getPoint_X(), true, "Template");
				compositeSource.addPropertySource(new EMFCompositePropertySource(nextPoint, new SingleDescriptorPropertySource(nextPointPropertyDescriptorX), "EMF") {

					protected IPropertyDescriptor newPropertyDescriptor(IItemPropertyDescriptor itemPropertyDescriptor) {
						return new EMFCompositeSourcePropertyDescriptor(object, itemPropertyDescriptor, getCategory()) {

							public Object getId() {
								return titleX;
							}
						};
					}
				});

				final String titleY = "Point " + counter + " Y";
				IItemPropertyDescriptor nextPointPropertyDescriptorY = new ItemPropertyDescriptor(GMFGraphDiagramEditorPlugin.getInstance().getItemProvidersAdapterFactory(), titleY, titleY,
						GMFGraphPackage.eINSTANCE.getPoint_Y(), true, "Template");
				compositeSource.addPropertySource(new EMFCompositePropertySource(nextPoint, new SingleDescriptorPropertySource(nextPointPropertyDescriptorY), "EMF") {

					protected IPropertyDescriptor newPropertyDescriptor(IItemPropertyDescriptor itemPropertyDescriptor) {
						return new EMFCompositeSourcePropertyDescriptor(object, itemPropertyDescriptor, getCategory()) {

							public Object getId() {
								return titleY;
							}
						};
					}
				});
			}

			return compositeSource;
		}
		return null;

	}

	/**
	 * @@generated
	 */
	protected IPropertySourceProvider getPropertySourceProvider() {
		return this;
	}

	/**
	 * Modify/unwrap selection.
	 * @@generated
	 */
	protected Object transformSelection(Object selected) {

		if (selected instanceof EditPart) {
			Object model = ((EditPart) selected).getModel();
			return model instanceof View ? ((View) model).getElement() : null;
		}
		if (selected instanceof View) {
			return ((View) selected).getElement();
		}
		if (selected instanceof IAdaptable) {
			View view = (View) ((IAdaptable) selected).getAdapter(View.class);
			if (view != null) {
				return view.getElement();
			}
		}
		return selected;
	}

	/**
	 * @@generated
	 */
	public void setInput(IWorkbenchPart part, ISelection selection) {
		if (selection.isEmpty() || false == selection instanceof StructuredSelection) {
			super.setInput(part, selection);
			return;
		}
		final StructuredSelection structuredSelection = ((StructuredSelection) selection);
		ArrayList transformedSelection = new ArrayList(structuredSelection.size());
		for (Iterator it = structuredSelection.iterator(); it.hasNext();) {
			Object r = transformSelection(it.next());
			if (r != null) {
				transformedSelection.add(r);
			}
		}
		super.setInput(part, new StructuredSelection(transformedSelection));
	}

	/**
	 * @@generated
	 */
	protected AdapterFactory getAdapterFactory(Object object) {
		if (getEditingDomain() instanceof AdapterFactoryEditingDomain) {
			return ((AdapterFactoryEditingDomain) getEditingDomain()).getAdapterFactory();
		}
		TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(object);
		if (editingDomain != null) {
			return ((AdapterFactoryEditingDomain) editingDomain).getAdapterFactory();
		}
		return null;
	}

	/**
	 * @@generated
	 */
	private static class SingleDescriptorPropertySource implements IItemPropertySource {

		/**
		 * @@generated
		 */
		private IItemPropertyDescriptor myPropertyDescriptor;

		/**
		 * @@generated
		 */
		private List myDescriptors = new LinkedList();

		/**
		 * @@generated
		 */
		SingleDescriptorPropertySource(IItemPropertyDescriptor propertyDescriptor) {
			myPropertyDescriptor = propertyDescriptor;
			myDescriptors.add(myPropertyDescriptor);
		}

		/**
		 * @@generated
		 */
		public List getPropertyDescriptors(Object object) {
			return myDescriptors;
		}

		/**
		 * @@generated
		 */
		public IItemPropertyDescriptor getPropertyDescriptor(Object object, Object propertyID) {
			return myPropertyDescriptor;
		}

		/**
		 * @@generated
		 */
		public Object getEditableValue(Object object) {
			return object;
		}
	}

}
@


1.4
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@@


1.3
log
@kiss; cleaner and bit more simple
@
text
@d3 7
a9 7
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d63 1
d66 1
d78 1
d81 1
@


1.2
log
@[173499] akarjakina - Enhance graphdef.editor with properties - use custom model to describe property sheet and generate PropertyTab code from that model
@
text
@a62 1

a64 1

a75 1

a77 1

d104 1
@


1.1
log
@[176026] akarjakina - Fix notation background and foreground colors update
[173499] akarjakina - Add custom form-based property sections fro figure attributes
@
text
@d2 1
a2 1
 *  Copyright (c) 2007 Borland Software Corporation and others.
a104 1
	 * 
@

