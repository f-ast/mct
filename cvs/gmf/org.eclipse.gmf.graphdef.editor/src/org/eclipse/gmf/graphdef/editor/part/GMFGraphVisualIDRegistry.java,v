head	1.20;
access;
symbols
	v20080722-1827:1.20
	v20080718-1700:1.19
	v20080718-1731:1.20
	v20080716-1642:1.20
	R2_1_maintenance:1.19.0.2
	Root_R2_1_maintenance:1.19
	R2_1_0:1.19
	v20080610-1132:1.19
	v20080603-1553:1.19
	v20080528-1052:1.18
	v20080521:1.17
	v20080516-1143:1.17
	v20080512-1200:1.17
	v20080510-0100:1.17
	v20080507-1326:1.17
	v20080501-1739:1.17
	v20080425-1959:1.16
	v20080411-0411:1.16
	v20080404-1111:1.16
	v20080322-0000:1.16
	v20080114-2222:1.15
	v20071214-1111:1.15
	v20070809-0000:1.15
	R2_0_maintenance:1.15.0.2
	R2_0:1.15
	R4_20:1.15
	v20070621-0000:1.15
	RC3_20:1.14
	v20070605-1400:1.14
	v20070601-1400:1.14
	v20070520-1200:1.13
	v20070420-1000:1.13
	v20070405-2000:1.12
	v20070405-1100:1.12
	v20070330-1300:1.12
	v20070307-0700:1.12
	v20070221-1500:1.12
	v20070208-1800:1.11
	M4_20:1.11
	v20061214-0000:1.11
	M3_20:1.11
	v20061013-1330:1.11
	M1_20:1.11
	v20060713-1700:1.11
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	v20060627-1200:1.11
	v20060616-1200:1.11
	v20060609-1400:1.11
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.8
	v20060519-0800:1.8
	v20060512-1000:1.7
	I20060512-1000:1.7
	RC2_10:1.6
	I20060505-1400:1.6
	I20060428-1300:1.5
	I20060424-0500:1.4
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.20
date	2008.07.02.15.20.47;	author ashatalin;	state Exp;
branches;
next	1.19;
commitid	703486b9cc54567;

1.19
date	2008.05.30.17.14.49;	author ashatalin;	state Exp;
branches;
next	1.18;
commitid	70b4484036034567;

1.18
date	2008.05.27.12.28.09;	author ashatalin;	state Exp;
branches;
next	1.17;
commitid	68fd483bfe544567;

1.17
date	2008.04.28.17.04.21;	author ashatalin;	state Exp;
branches;
next	1.16;
commitid	4df481603954567;

1.16
date	2008.02.22.13.08.00;	author ashatalin;	state Exp;
branches;
next	1.15;
commitid	4c5647bec9294567;

1.15
date	2007.06.18.17.06.14;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	54d14676bb824567;

1.14
date	2007.05.31.15.52.29;	author ashatalin;	state Exp;
branches;
next	1.13;
commitid	49f1465eef2c4567;

1.13
date	2007.04.16.11.03.53;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	7e4e462358154567;

1.12
date	2007.02.09.20.08.30;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	179c45ccd4b34567;

1.11
date	2006.06.08.08.40.35;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.02.15.08.30;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.30.13.06.14;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.15.17.21.14;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.11.16.02.54;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.03.15.04.02;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.25.18.01.19;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.21.17.13.32;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.20.20.37.00;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.16.36.28;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.24;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.20
log
@[233207] - Support Label figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.part;

import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.Node;
import org.eclipse.gmf.gmfgraph.Polyline;
import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ChildAccessEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentVisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.ConnectionVisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelVisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.EllipseEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryFiguresEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGalleryNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Label2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Label3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelText2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelText3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelTextEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeNameEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.NodeVisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PointEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polygon2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polygon3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolygonEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolylineEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RectangleEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle3EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangleEditPart;
import org.eclipse.gmf.graphdef.editor.expressions.GMFGraphAbstractExpression;
import org.eclipse.gmf.graphdef.editor.expressions.GMFGraphOCLFactory;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.View;

/**
 * This registry is used to determine which type of visual object should be
 * created for the corresponding Diagram, Node, ChildNode or Link represented
 * by a domain model object.
 * 
 * @@generated
 */
public class GMFGraphVisualIDRegistry {

	/**
	 * @@generated
	 */
	private static final String DEBUG_KEY = "org.eclipse.gmf.graphdef.editor/debug/visualID"; //$NON-NLS-1$

	/**
	 * @@generated
	 */
	private static GMFGraphAbstractExpression Node_2006_Constraint;

	/**
	 * @@generated
	 */
	private static GMFGraphAbstractExpression Polyline_3014_Constraint;

	/**
	 * @@generated
	 */
	private static GMFGraphAbstractExpression Polyline_3017_Constraint;

	/**
	 * @@generated
	 */
	private static GMFGraphAbstractExpression Polyline_3021_Constraint;

	/**
	 * @@generated
	 */
	public static int getVisualID(View view) {
		if (view instanceof Diagram) {
			if (CanvasEditPart.MODEL_ID.equals(view.getType())) {
				return CanvasEditPart.VISUAL_ID;
			} else {
				return -1;
			}
		}
		return org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry.getVisualID(view.getType());
	}

	/**
	 * @@generated
	 */
	public static String getModelID(View view) {
		View diagram = view.getDiagram();
		while (view != diagram) {
			EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
			if (annotation != null) {
				return (String) annotation.getDetails().get("modelID"); //$NON-NLS-1$
			}
			view = (View) view.eContainer();
		}
		return diagram != null ? diagram.getType() : null;
	}

	/**
	 * @@generated
	 */
	public static int getVisualID(String type) {
		try {
			return Integer.parseInt(type);
		} catch (NumberFormatException e) {
			if (Boolean.TRUE.toString().equalsIgnoreCase(Platform.getDebugOption(DEBUG_KEY))) {
				GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to parse view type as a visualID number: " + type);
			}
		}
		return -1;
	}

	/**
	 * @@generated
	 */
	public static String getType(int visualID) {
		return String.valueOf(visualID);
	}

	/**
	 * @@generated
	 */
	public static int getDiagramVisualID(EObject domainElement) {
		if (domainElement == null) {
			return -1;
		}
		if (GMFGraphPackage.eINSTANCE.getCanvas().isSuperTypeOf(domainElement.eClass()) && isDiagram((Canvas) domainElement)) {
			return CanvasEditPart.VISUAL_ID;
		}
		return -1;
	}

	/**
	 * @@generated
	 */
	public static int getNodeVisualID(View containerView, EObject domainElement) {
		if (domainElement == null) {
			return -1;
		}
		String containerModelID = org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry.getModelID(containerView);
		if (!CanvasEditPart.MODEL_ID.equals(containerModelID) && !"GMFGraph".equals(containerModelID)) { //$NON-NLS-1$
			return -1;
		}
		int containerVisualID;
		if (CanvasEditPart.MODEL_ID.equals(containerModelID)) {
			containerVisualID = org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry.getVisualID(containerView);
		} else {
			if (containerView instanceof Diagram) {
				containerVisualID = CanvasEditPart.VISUAL_ID;
			} else {
				return -1;
			}
		}
		switch (containerVisualID) {
		case FigureDescriptorEditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElement.eClass())) {
				return RectangleEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElement.eClass())) {
				return Ellipse2EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElement.eClass())) {
				return RoundedRectangle2EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass()) && isPolyline_3017((Polyline) domainElement)) {
				return Polyline2EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolygon().isSuperTypeOf(domainElement.eClass())) {
				return Polygon2EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getLabel().isSuperTypeOf(domainElement.eClass())) {
				return Label2EditPart.VISUAL_ID;
			}
			break;
		case RectangleEditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElement.eClass())) {
				return Rectangle2EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElement.eClass())) {
				return EllipseEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElement.eClass())) {
				return RoundedRectangleEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass()) && isPolyline_3014((Polyline) domainElement)) {
				return PolylineEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolygon().isSuperTypeOf(domainElement.eClass())) {
				return PolygonEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getLabel().isSuperTypeOf(domainElement.eClass())) {
				return LabelEditPart.VISUAL_ID;
			}
			break;
		case Rectangle2EditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElement.eClass())) {
				return Rectangle2EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElement.eClass())) {
				return EllipseEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElement.eClass())) {
				return RoundedRectangleEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass()) && isPolyline_3014((Polyline) domainElement)) {
				return PolylineEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolygon().isSuperTypeOf(domainElement.eClass())) {
				return PolygonEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getLabel().isSuperTypeOf(domainElement.eClass())) {
				return LabelEditPart.VISUAL_ID;
			}
			break;
		case EllipseEditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElement.eClass())) {
				return Rectangle2EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElement.eClass())) {
				return EllipseEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElement.eClass())) {
				return RoundedRectangleEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass()) && isPolyline_3014((Polyline) domainElement)) {
				return PolylineEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolygon().isSuperTypeOf(domainElement.eClass())) {
				return PolygonEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getLabel().isSuperTypeOf(domainElement.eClass())) {
				return LabelEditPart.VISUAL_ID;
			}
			break;
		case RoundedRectangleEditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElement.eClass())) {
				return Rectangle2EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElement.eClass())) {
				return EllipseEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElement.eClass())) {
				return RoundedRectangleEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass()) && isPolyline_3014((Polyline) domainElement)) {
				return PolylineEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolygon().isSuperTypeOf(domainElement.eClass())) {
				return PolygonEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getLabel().isSuperTypeOf(domainElement.eClass())) {
				return LabelEditPart.VISUAL_ID;
			}
			break;
		case PolylineEditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getPoint().isSuperTypeOf(domainElement.eClass())) {
				return PointEditPart.VISUAL_ID;
			}
			break;
		case PolygonEditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getPoint().isSuperTypeOf(domainElement.eClass())) {
				return PointEditPart.VISUAL_ID;
			}
			break;
		case Ellipse2EditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElement.eClass())) {
				return Rectangle2EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElement.eClass())) {
				return EllipseEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElement.eClass())) {
				return RoundedRectangleEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass()) && isPolyline_3014((Polyline) domainElement)) {
				return PolylineEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolygon().isSuperTypeOf(domainElement.eClass())) {
				return PolygonEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getLabel().isSuperTypeOf(domainElement.eClass())) {
				return LabelEditPart.VISUAL_ID;
			}
			break;
		case RoundedRectangle2EditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElement.eClass())) {
				return Rectangle2EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElement.eClass())) {
				return EllipseEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElement.eClass())) {
				return RoundedRectangleEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass()) && isPolyline_3014((Polyline) domainElement)) {
				return PolylineEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolygon().isSuperTypeOf(domainElement.eClass())) {
				return PolygonEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getLabel().isSuperTypeOf(domainElement.eClass())) {
				return LabelEditPart.VISUAL_ID;
			}
			break;
		case Polyline2EditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getPoint().isSuperTypeOf(domainElement.eClass())) {
				return PointEditPart.VISUAL_ID;
			}
			break;
		case Polygon2EditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getPoint().isSuperTypeOf(domainElement.eClass())) {
				return PointEditPart.VISUAL_ID;
			}
			break;
		case Rectangle3EditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElement.eClass())) {
				return Rectangle2EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElement.eClass())) {
				return EllipseEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElement.eClass())) {
				return RoundedRectangleEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass()) && isPolyline_3014((Polyline) domainElement)) {
				return PolylineEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolygon().isSuperTypeOf(domainElement.eClass())) {
				return PolygonEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getLabel().isSuperTypeOf(domainElement.eClass())) {
				return LabelEditPart.VISUAL_ID;
			}
			break;
		case Ellipse3EditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElement.eClass())) {
				return Rectangle2EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElement.eClass())) {
				return EllipseEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElement.eClass())) {
				return RoundedRectangleEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass()) && isPolyline_3014((Polyline) domainElement)) {
				return PolylineEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolygon().isSuperTypeOf(domainElement.eClass())) {
				return PolygonEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getLabel().isSuperTypeOf(domainElement.eClass())) {
				return LabelEditPart.VISUAL_ID;
			}
			break;
		case RoundedRectangle3EditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElement.eClass())) {
				return Rectangle2EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElement.eClass())) {
				return EllipseEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElement.eClass())) {
				return RoundedRectangleEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass()) && isPolyline_3014((Polyline) domainElement)) {
				return PolylineEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolygon().isSuperTypeOf(domainElement.eClass())) {
				return PolygonEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getLabel().isSuperTypeOf(domainElement.eClass())) {
				return LabelEditPart.VISUAL_ID;
			}
			break;
		case Polyline3EditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getPoint().isSuperTypeOf(domainElement.eClass())) {
				return PointEditPart.VISUAL_ID;
			}
			break;
		case Polygon3EditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getPoint().isSuperTypeOf(domainElement.eClass())) {
				return PointEditPart.VISUAL_ID;
			}
			break;
		case FigureGalleryFiguresEditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getFigureDescriptor().isSuperTypeOf(domainElement.eClass())) {
				return FigureDescriptorEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElement.eClass())) {
				return Rectangle3EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElement.eClass())) {
				return Ellipse3EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElement.eClass())) {
				return RoundedRectangle3EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass()) && isPolyline_3021((Polyline) domainElement)) {
				return Polyline3EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getPolygon().isSuperTypeOf(domainElement.eClass())) {
				return Polygon3EditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getLabel().isSuperTypeOf(domainElement.eClass())) {
				return Label3EditPart.VISUAL_ID;
			}
			break;
		case CanvasEditPart.VISUAL_ID:
			if (GMFGraphPackage.eINSTANCE.getCompartment().isSuperTypeOf(domainElement.eClass())) {
				return CompartmentEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getNode().isSuperTypeOf(domainElement.eClass()) && isNode_2006((Node) domainElement)) {
				return NodeEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getConnection().isSuperTypeOf(domainElement.eClass())) {
				return ConnectionEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getFigureGallery().isSuperTypeOf(domainElement.eClass())) {
				return FigureGalleryEditPart.VISUAL_ID;
			}
			if (GMFGraphPackage.eINSTANCE.getDiagramLabel().isSuperTypeOf(domainElement.eClass())) {
				return DiagramLabelEditPart.VISUAL_ID;
			}
			break;
		}
		return -1;
	}

	/**
	 * @@generated
	 */
	public static boolean canCreateNode(View containerView, int nodeVisualID) {
		String containerModelID = org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry.getModelID(containerView);
		if (!CanvasEditPart.MODEL_ID.equals(containerModelID) && !"GMFGraph".equals(containerModelID)) { //$NON-NLS-1$
			return false;
		}
		int containerVisualID;
		if (CanvasEditPart.MODEL_ID.equals(containerModelID)) {
			containerVisualID = org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry.getVisualID(containerView);
		} else {
			if (containerView instanceof Diagram) {
				containerVisualID = CanvasEditPart.VISUAL_ID;
			} else {
				return false;
			}
		}
		switch (containerVisualID) {
		case CompartmentEditPart.VISUAL_ID:
			if (CompartmentNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (CompartmentVisualFacetsEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case NodeEditPart.VISUAL_ID:
			if (NodeNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (NodeVisualFacetsEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case ConnectionEditPart.VISUAL_ID:
			if (ConnectionNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ConnectionVisualFacetsEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case FigureGalleryEditPart.VISUAL_ID:
			if (FigureGalleryNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (FigureGalleryFiguresEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case DiagramLabelEditPart.VISUAL_ID:
			if (DiagramLabelNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (DiagramLabelVisualFacetsEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case FigureDescriptorEditPart.VISUAL_ID:
			if (FigureDescriptorNameEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RectangleEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Ellipse2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RoundedRectangle2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Polyline2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Polygon2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Label2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case RectangleEditPart.VISUAL_ID:
			if (Rectangle2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (EllipseEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolylineEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolygonEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (LabelEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Rectangle2EditPart.VISUAL_ID:
			if (Rectangle2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (EllipseEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolylineEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolygonEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (LabelEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case EllipseEditPart.VISUAL_ID:
			if (Rectangle2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (EllipseEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolylineEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolygonEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (LabelEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case RoundedRectangleEditPart.VISUAL_ID:
			if (Rectangle2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (EllipseEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolylineEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolygonEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (LabelEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case PolylineEditPart.VISUAL_ID:
			if (PointEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case PolygonEditPart.VISUAL_ID:
			if (PointEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case LabelEditPart.VISUAL_ID:
			if (LabelTextEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Ellipse2EditPart.VISUAL_ID:
			if (Rectangle2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (EllipseEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolylineEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolygonEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (LabelEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case RoundedRectangle2EditPart.VISUAL_ID:
			if (Rectangle2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (EllipseEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolylineEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolygonEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (LabelEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Polyline2EditPart.VISUAL_ID:
			if (PointEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Polygon2EditPart.VISUAL_ID:
			if (PointEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Label2EditPart.VISUAL_ID:
			if (LabelText2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Rectangle3EditPart.VISUAL_ID:
			if (Rectangle2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (EllipseEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolylineEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolygonEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (LabelEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Ellipse3EditPart.VISUAL_ID:
			if (Rectangle2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (EllipseEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolylineEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolygonEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (LabelEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case RoundedRectangle3EditPart.VISUAL_ID:
			if (Rectangle2EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (EllipseEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolylineEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (PolygonEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (LabelEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Polyline3EditPart.VISUAL_ID:
			if (PointEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Polygon3EditPart.VISUAL_ID:
			if (PointEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case Label3EditPart.VISUAL_ID:
			if (LabelText3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case FigureGalleryFiguresEditPart.VISUAL_ID:
			if (FigureDescriptorEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Rectangle3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Ellipse3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (RoundedRectangle3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Polyline3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Polygon3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (Label3EditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		case CanvasEditPart.VISUAL_ID:
			if (CompartmentEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (NodeEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (ConnectionEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (FigureGalleryEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			if (DiagramLabelEditPart.VISUAL_ID == nodeVisualID) {
				return true;
			}
			break;
		}
		return false;
	}

	/**
	 * @@generated
	 */
	public static int getLinkWithClassVisualID(EObject domainElement) {
		if (domainElement == null) {
			return -1;
		}
		if (GMFGraphPackage.eINSTANCE.getChildAccess().isSuperTypeOf(domainElement.eClass())) {
			return ChildAccessEditPart.VISUAL_ID;
		}
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 * 
	 * @@generated
	 */
	private static boolean isDiagram(Canvas element) {
		return true;
	}

	/**
	 * @@generated
	 */
	private static boolean isNode_2006(Node domainElement) {
		if (Node_2006_Constraint == null) { // lazy initialization
			Node_2006_Constraint = GMFGraphOCLFactory.getExpression("not self.oclIsKindOf(gmfgraph::DiagramLabel)", GMFGraphPackage.eINSTANCE.getNode()); //$NON-NLS-1$
		}
		Object result = Node_2006_Constraint.evaluate(domainElement);
		return result instanceof Boolean && ((Boolean) result).booleanValue();
	}

	/**
	 * @@generated
	 */
	private static boolean isPolyline_3014(Polyline domainElement) {
		if (Polyline_3014_Constraint == null) { // lazy initialization
			Polyline_3014_Constraint = GMFGraphOCLFactory.getExpression("not oclIsKindOf(gmfgraph::Polygon)", GMFGraphPackage.eINSTANCE.getPolyline()); //$NON-NLS-1$
		}
		Object result = Polyline_3014_Constraint.evaluate(domainElement);
		return result instanceof Boolean && ((Boolean) result).booleanValue();
	}

	/**
	 * @@generated
	 */
	private static boolean isPolyline_3017(Polyline domainElement) {
		if (Polyline_3017_Constraint == null) { // lazy initialization
			Polyline_3017_Constraint = GMFGraphOCLFactory.getExpression("not oclIsKindOf(gmfgraph::Polygon)", GMFGraphPackage.eINSTANCE.getPolyline()); //$NON-NLS-1$
		}
		Object result = Polyline_3017_Constraint.evaluate(domainElement);
		return result instanceof Boolean && ((Boolean) result).booleanValue();
	}

	/**
	 * @@generated
	 */
	private static boolean isPolyline_3021(Polyline domainElement) {
		if (Polyline_3021_Constraint == null) { // lazy initialization
			Polyline_3021_Constraint = GMFGraphOCLFactory.getExpression("not oclIsKindOf(gmfgraph::Polygon)", GMFGraphPackage.eINSTANCE.getPolyline()); //$NON-NLS-1$
		}
		Object result = Polyline_3021_Constraint.evaluate(domainElement);
		return result instanceof Boolean && ((Boolean) result).booleanValue();
	}

}
@


1.19
log
@[233206] - Support Polygon figure in .gmfgraph editor
@
text
@d18 1
d28 3
d39 6
d83 5
d201 3
d221 3
d241 3
d261 3
d281 3
d311 3
d331 3
d361 3
d381 3
d401 3
d434 3
d442 1
a442 1
			if (GMFGraphPackage.eINSTANCE.getNode().isSuperTypeOf(domainElement.eClass())) {
d451 3
d510 8
d537 3
d557 3
d577 3
d597 3
d617 3
d631 5
d652 3
d672 3
d686 5
d707 3
d727 3
d747 3
d761 5
d785 3
d802 3
d836 11
@


1.18
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d18 1
d39 3
d51 2
d73 15
d180 1
a180 1
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass())) {
d183 3
d197 1
a197 1
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass())) {
d200 3
d214 1
a214 1
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass())) {
d217 3
d231 1
a231 1
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass())) {
d234 3
d248 1
a248 1
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass())) {
d251 3
d260 5
d275 1
a275 1
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass())) {
d278 3
d292 1
a292 1
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass())) {
d295 3
d304 5
d319 1
a319 1
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass())) {
d322 3
d336 1
a336 1
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass())) {
d339 3
d353 1
a353 1
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass())) {
d356 3
d365 5
d383 1
a383 1
			if (GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElement.eClass())) {
d386 3
d475 3
d492 3
d509 3
d526 3
d543 3
d552 5
d570 3
d587 3
d596 5
d614 3
d631 3
d648 3
d657 5
d678 3
d723 33
@


1.17
log
@Regenerating with new templates.
@
text
@d37 1
d219 5
d252 5
d299 5
d463 5
d496 5
d543 5
@


1.16
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@d61 1
a61 1
	private static final String DEBUG_KEY = GMFGraphDiagramEditorPlugin.getInstance().getBundle().getSymbolicName() + "/debug/visualID"; //$NON-NLS-1$
@


1.15
log
@[191661] akarjakina - Improve GMFGraph Editor's propsheet model/codegen with TextArea, Combo and Date/Time support
@
text
@d130 5
a134 1
		if (domainElement == null || !CanvasEditPart.MODEL_ID.equals(org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry.getModelID(containerView))) {
d137 11
a147 1
		switch (org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry.getVisualID(containerView)) {
@


1.14
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d74 1
a74 1
		return getVisualID(view.getType());
@


1.13
log
@[182339] akarjakina - provide different means to select parts of composite figures
Visible insets for top-level figures, custom popup action with nested submenus, simple handles behavior
@
text
@d2 8
a9 8
 * Copyright (c) 2006, 2007 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
a14 1
import org.eclipse.emf.ecore.EClass;
a16 4
import org.eclipse.gmf.gmfgraph.Compartment;
import org.eclipse.gmf.gmfgraph.Connection;
import org.eclipse.gmf.gmfgraph.Ellipse;
import org.eclipse.gmf.gmfgraph.FigureGallery;
a17 4
import org.eclipse.gmf.gmfgraph.Node;
import org.eclipse.gmf.gmfgraph.Polyline;
import org.eclipse.gmf.gmfgraph.Rectangle;
import org.eclipse.gmf.gmfgraph.RoundedRectangle;
d19 1
d27 1
d29 2
d38 1
d41 1
d44 1
d51 1
a51 1
 * created for the corresponding Diagram, Node, ChildNode or Link represented 
d53 1
a53 1
 *
d120 1
a120 9
		EClass domainElementMetaclass = domainElement.eClass();
		return getDiagramVisualID(domainElement, domainElementMetaclass);
	}

	/**
	 * @@generated
	 */
	private static int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {
		if (GMFGraphPackage.eINSTANCE.getCanvas().isSuperTypeOf(domainElementMetaclass) && isDiagramCanvas_1000((Canvas) domainElement)) {
d123 1
a123 1
		return getUnrecognizedDiagramID(domainElement);
d130 1
a130 1
		if (domainElement == null) {
d133 174
a306 2
		EClass domainElementMetaclass = domainElement.eClass();
		return getNodeVisualID(containerView, domainElement, domainElementMetaclass, null);
d312 4
a315 4
	public static int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {
		String containerModelID = getModelID(containerView);
		if (!CanvasEditPart.MODEL_ID.equals(containerModelID)) {
			return -1;
d319 1
a319 1
			containerVisualID = getVisualID(containerView);
d324 1
a324 1
				return -1;
a326 1
		int nodeVisualID = semanticHint != null ? getVisualID(semanticHint) : -1;
d330 1
a330 1
				return CompartmentNameEditPart.VISUAL_ID;
d333 1
a333 1
				return CompartmentVisualFacetsEditPart.VISUAL_ID;
d335 1
a335 1
			return getUnrecognizedCompartment_2001ChildNodeID(domainElement, semanticHint);
d338 1
a338 1
				return NodeNameEditPart.VISUAL_ID;
d341 1
a341 1
				return NodeVisualFacetsEditPart.VISUAL_ID;
d343 1
a343 1
			return getUnrecognizedNode_2002ChildNodeID(domainElement, semanticHint);
d346 1
a346 1
				return ConnectionNameEditPart.VISUAL_ID;
d349 1
a349 1
				return ConnectionVisualFacetsEditPart.VISUAL_ID;
d351 1
a351 1
			return getUnrecognizedConnection_2003ChildNodeID(domainElement, semanticHint);
d354 1
a354 1
				return FigureGalleryNameEditPart.VISUAL_ID;
d357 18
a374 1
				return FigureGalleryFiguresEditPart.VISUAL_ID;
d376 1
a376 1
			return getUnrecognizedFigureGallery_2004ChildNodeID(domainElement, semanticHint);
d378 2
a379 3
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRectangle_3002((Rectangle) domainElement))) {
				return Rectangle2EditPart.VISUAL_ID;
d381 2
a382 3
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeEllipse_3003((Ellipse) domainElement))) {
				return EllipseEditPart.VISUAL_ID;
d384 2
a385 3
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRoundedRectangle_3004((RoundedRectangle) domainElement))) {
				return RoundedRectangleEditPart.VISUAL_ID;
d387 2
a388 3
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodePolyline_3005((Polyline) domainElement))) {
				return PolylineEditPart.VISUAL_ID;
d390 1
a390 1
			return getUnrecognizedRectangle_3001ChildNodeID(domainElement, semanticHint);
d392 2
a393 3
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRectangle_3002((Rectangle) domainElement))) {
				return Rectangle2EditPart.VISUAL_ID;
d395 2
a396 3
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeEllipse_3003((Ellipse) domainElement))) {
				return EllipseEditPart.VISUAL_ID;
d398 2
a399 3
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRoundedRectangle_3004((RoundedRectangle) domainElement))) {
				return RoundedRectangleEditPart.VISUAL_ID;
d401 2
a402 3
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodePolyline_3005((Polyline) domainElement))) {
				return PolylineEditPart.VISUAL_ID;
d404 1
a404 1
			return getUnrecognizedRectangle_3002ChildNodeID(domainElement, semanticHint);
d406 2
a407 3
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRectangle_3002((Rectangle) domainElement))) {
				return Rectangle2EditPart.VISUAL_ID;
d409 2
a410 3
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeEllipse_3003((Ellipse) domainElement))) {
				return EllipseEditPart.VISUAL_ID;
d412 2
a413 3
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRoundedRectangle_3004((RoundedRectangle) domainElement))) {
				return RoundedRectangleEditPart.VISUAL_ID;
d415 2
a416 3
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodePolyline_3005((Polyline) domainElement))) {
				return PolylineEditPart.VISUAL_ID;
d418 1
a418 1
			return getUnrecognizedEllipse_3003ChildNodeID(domainElement, semanticHint);
d420 2
a421 3
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRectangle_3002((Rectangle) domainElement))) {
				return Rectangle2EditPart.VISUAL_ID;
d423 2
a424 3
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeEllipse_3003((Ellipse) domainElement))) {
				return EllipseEditPart.VISUAL_ID;
d426 2
a427 3
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRoundedRectangle_3004((RoundedRectangle) domainElement))) {
				return RoundedRectangleEditPart.VISUAL_ID;
d429 2
a430 3
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodePolyline_3005((Polyline) domainElement))) {
				return PolylineEditPart.VISUAL_ID;
d432 1
a432 3
			return getUnrecognizedRoundedRectangle_3004ChildNodeID(domainElement, semanticHint);
		case PolylineEditPart.VISUAL_ID:
			return getUnrecognizedPolyline_3005ChildNodeID(domainElement, semanticHint);
d434 2
a435 3
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRectangle_3002((Rectangle) domainElement))) {
				return Rectangle2EditPart.VISUAL_ID;
d437 2
a438 3
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeEllipse_3003((Ellipse) domainElement))) {
				return EllipseEditPart.VISUAL_ID;
d440 2
a441 3
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRoundedRectangle_3004((RoundedRectangle) domainElement))) {
				return RoundedRectangleEditPart.VISUAL_ID;
d443 2
a444 3
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodePolyline_3005((Polyline) domainElement))) {
				return PolylineEditPart.VISUAL_ID;
d446 1
a446 1
			return getUnrecognizedEllipse_3006ChildNodeID(domainElement, semanticHint);
d448 44
a491 3
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRectangle_3002((Rectangle) domainElement))) {
				return Rectangle2EditPart.VISUAL_ID;
d493 2
a494 3
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeEllipse_3003((Ellipse) domainElement))) {
				return EllipseEditPart.VISUAL_ID;
d496 2
a497 3
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRoundedRectangle_3004((RoundedRectangle) domainElement))) {
				return RoundedRectangleEditPart.VISUAL_ID;
d499 2
a500 3
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodePolyline_3005((Polyline) domainElement))) {
				return PolylineEditPart.VISUAL_ID;
d502 1
a502 9
			return getUnrecognizedRoundedRectangle_3007ChildNodeID(domainElement, semanticHint);
		case Polyline2EditPart.VISUAL_ID:
			return getUnrecognizedPolyline_3008ChildNodeID(domainElement, semanticHint);
		case CompartmentVisualFacetsEditPart.VISUAL_ID:
			return getUnrecognizedCompartmentVisualFacets_7001ChildNodeID(domainElement, semanticHint);
		case NodeVisualFacetsEditPart.VISUAL_ID:
			return getUnrecognizedNodeVisualFacets_7002ChildNodeID(domainElement, semanticHint);
		case ConnectionVisualFacetsEditPart.VISUAL_ID:
			return getUnrecognizedConnectionVisualFacets_7003ChildNodeID(domainElement, semanticHint);
d504 5
a508 3
			if ((semanticHint == null || RectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRectangle_3001((Rectangle) domainElement))) {
				return RectangleEditPart.VISUAL_ID;
d510 2
a511 3
			if ((semanticHint == null || Ellipse2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeEllipse_3006((Ellipse) domainElement))) {
				return Ellipse2EditPart.VISUAL_ID;
d513 2
a514 3
			if ((semanticHint == null || RoundedRectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeRoundedRectangle_3007((RoundedRectangle) domainElement))) {
				return RoundedRectangle2EditPart.VISUAL_ID;
d516 2
a517 3
			if ((semanticHint == null || Polyline2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodePolyline_3008((Polyline) domainElement))) {
				return Polyline2EditPart.VISUAL_ID;
d519 1
a519 1
			return getUnrecognizedFigureGalleryFigures_7004ChildNodeID(domainElement, semanticHint);
d521 2
a522 3
			if ((semanticHint == null || CompartmentEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getCompartment().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeCompartment_2001((Compartment) domainElement))) {
				return CompartmentEditPart.VISUAL_ID;
d524 2
a525 3
			if ((semanticHint == null || NodeEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getNode().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeNode_2002((Node) domainElement))) {
				return NodeEditPart.VISUAL_ID;
d527 2
a528 3
			if ((semanticHint == null || ConnectionEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getConnection().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeConnection_2003((Connection) domainElement))) {
				return ConnectionEditPart.VISUAL_ID;
d530 2
a531 3
			if ((semanticHint == null || FigureGalleryEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getFigureGallery().isSuperTypeOf(domainElementMetaclass)
					&& (domainElement == null || isNodeFigureGallery_2004((FigureGallery) domainElement))) {
				return FigureGalleryEditPart.VISUAL_ID;
d533 1
a533 1
			return getUnrecognizedCanvas_1000ChildNodeID(domainElement, semanticHint);
d535 1
a535 1
		return -1;
d545 2
a546 10
		EClass domainElementMetaclass = domainElement.eClass();
		return getLinkWithClassVisualID(domainElement, domainElementMetaclass);
	}

	/**
	 * @@generated
	 */
	public static int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {
		{
			return getUnrecognizedLinkWithClassID(domainElement);
d548 1
a548 10
	}

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private static boolean isDiagramCanvas_1000(Canvas element) {
		return true;
d554 1
a554 121
	 *
	 * @@generated
	 */
	private static int getUnrecognizedDiagramID(EObject domainElement) {
		return -1;
	}

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private static boolean isNodeCompartment_2001(Compartment element) {
		return true;
	}

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private static boolean isNodeNode_2002(Node element) {
		return true;
	}

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private static boolean isNodeConnection_2003(Connection element) {
		return true;
	}

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private static boolean isNodeFigureGallery_2004(FigureGallery element) {
		return true;
	}

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private static boolean isNodeRectangle_3001(Rectangle element) {
		return true;
	}

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private static boolean isNodeRectangle_3002(Rectangle element) {
		return true;
	}

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private static boolean isNodeEllipse_3003(Ellipse element) {
		return true;
	}

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private static boolean isNodeRoundedRectangle_3004(RoundedRectangle element) {
		return true;
	}

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private static boolean isNodePolyline_3005(Polyline element) {
		return true;
	}

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private static boolean isNodeEllipse_3006(Ellipse element) {
		return true;
	}

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private static boolean isNodeRoundedRectangle_3007(RoundedRectangle element) {
		return true;
	}

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
d557 1
a557 1
	private static boolean isNodePolyline_3008(Polyline element) {
a560 179
	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedCompartment_2001ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedNode_2002ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedConnection_2003ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedFigureGallery_2004ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedRectangle_3001ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedRectangle_3002ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedEllipse_3003ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedRoundedRectangle_3004ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedPolyline_3005ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedEllipse_3006ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedRoundedRectangle_3007ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedPolyline_3008ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedCompartmentVisualFacets_7001ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedNodeVisualFacets_7002ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedConnectionVisualFacets_7003ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedFigureGalleryFigures_7004ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedCanvas_1000ChildNodeID(EObject domainElement, String semanticHint) {
		return -1;
	}

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private static int getUnrecognizedLinkWithClassID(EObject domainElement) {
		return -1;
	}
@


1.12
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@a13 1

a16 1

a26 1

a47 1

@


1.11
log
@Updating with new templates.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
d365 3
@


1.10
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d32 2
a33 2
import org.eclipse.gmf.graphdef.editor.edit.parts.Compartment_VisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Compartment_nameEditPart;
d35 2
a36 2
import org.eclipse.gmf.graphdef.editor.edit.parts.Connection_VisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Connection_nameEditPart;
d40 2
a41 2
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGallery_FiguresEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureGallery_nameEditPart;
d43 2
a44 2
import org.eclipse.gmf.graphdef.editor.edit.parts.Node_VisualFacetsEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Node_nameEditPart;
d172 2
a173 2
			if (Compartment_nameEditPart.VISUAL_ID == nodeVisualID) {
				return Compartment_nameEditPart.VISUAL_ID;
d175 2
a176 2
			if (Compartment_VisualFacetsEditPart.VISUAL_ID == nodeVisualID) {
				return Compartment_VisualFacetsEditPart.VISUAL_ID;
d180 2
a181 2
			if (Node_nameEditPart.VISUAL_ID == nodeVisualID) {
				return Node_nameEditPart.VISUAL_ID;
d183 2
a184 2
			if (Node_VisualFacetsEditPart.VISUAL_ID == nodeVisualID) {
				return Node_VisualFacetsEditPart.VISUAL_ID;
d188 2
a189 2
			if (Connection_nameEditPart.VISUAL_ID == nodeVisualID) {
				return Connection_nameEditPart.VISUAL_ID;
d191 2
a192 2
			if (Connection_VisualFacetsEditPart.VISUAL_ID == nodeVisualID) {
				return Connection_VisualFacetsEditPart.VISUAL_ID;
d196 2
a197 2
			if (FigureGallery_nameEditPart.VISUAL_ID == nodeVisualID) {
				return FigureGallery_nameEditPart.VISUAL_ID;
d199 2
a200 2
			if (FigureGallery_FiguresEditPart.VISUAL_ID == nodeVisualID) {
				return FigureGallery_FiguresEditPart.VISUAL_ID;
d315 7
a321 7
		case Compartment_VisualFacetsEditPart.VISUAL_ID:
			return getUnrecognizedVisualFacets_7001ChildNodeID(domainElement, semanticHint);
		case Node_VisualFacetsEditPart.VISUAL_ID:
			return getUnrecognizedVisualFacets_7002ChildNodeID(domainElement, semanticHint);
		case Connection_VisualFacetsEditPart.VISUAL_ID:
			return getUnrecognizedVisualFacets_7003ChildNodeID(domainElement, semanticHint);
		case FigureGallery_FiguresEditPart.VISUAL_ID:
d338 1
a338 1
			return getUnrecognizedFigures_7004ChildNodeID(domainElement, semanticHint);
d644 1
a644 1
	private static int getUnrecognizedVisualFacets_7001ChildNodeID(EObject domainElement, String semanticHint) {
d654 1
a654 1
	private static int getUnrecognizedVisualFacets_7002ChildNodeID(EObject domainElement, String semanticHint) {
d664 1
a664 1
	private static int getUnrecognizedVisualFacets_7003ChildNodeID(EObject domainElement, String semanticHint) {
d674 1
a674 1
	private static int getUnrecognizedFigures_7004ChildNodeID(EObject domainElement, String semanticHint) {
@


1.9
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
@


1.8
log
@Updating with latest templates
@
text
@d1 10
d134 1
a134 1
		if (GMFGraphPackage.eINSTANCE.getCanvas().isSuperTypeOf(domainElementMetaclass) && isDiagramCanvas_79((Canvas) domainElement)) {
d178 1
a178 1
			return getUnrecognizedCompartment_1001ChildNodeID(domainElement, semanticHint);
d186 1
a186 1
			return getUnrecognizedNode_1002ChildNodeID(domainElement, semanticHint);
d194 1
a194 1
			return getUnrecognizedConnection_1003ChildNodeID(domainElement, semanticHint);
d202 1
a202 1
			return getUnrecognizedFigureGallery_1004ChildNodeID(domainElement, semanticHint);
d205 1
a205 1
					&& (domainElement == null || isNodeRectangle_2002((Rectangle) domainElement))) {
d209 1
a209 1
					&& (domainElement == null || isNodeEllipse_2003((Ellipse) domainElement))) {
d213 1
a213 1
					&& (domainElement == null || isNodeRoundedRectangle_2004((RoundedRectangle) domainElement))) {
d217 1
a217 1
					&& (domainElement == null || isNodePolyline_2005((Polyline) domainElement))) {
d220 1
a220 1
			return getUnrecognizedRectangle_2001ChildNodeID(domainElement, semanticHint);
d223 1
a223 1
					&& (domainElement == null || isNodeRectangle_2002((Rectangle) domainElement))) {
d227 1
a227 1
					&& (domainElement == null || isNodeEllipse_2003((Ellipse) domainElement))) {
d231 1
a231 1
					&& (domainElement == null || isNodeRoundedRectangle_2004((RoundedRectangle) domainElement))) {
d235 1
a235 1
					&& (domainElement == null || isNodePolyline_2005((Polyline) domainElement))) {
d238 1
a238 1
			return getUnrecognizedRectangle_2002ChildNodeID(domainElement, semanticHint);
d241 1
a241 1
					&& (domainElement == null || isNodeRectangle_2002((Rectangle) domainElement))) {
d245 1
a245 1
					&& (domainElement == null || isNodeEllipse_2003((Ellipse) domainElement))) {
d249 1
a249 1
					&& (domainElement == null || isNodeRoundedRectangle_2004((RoundedRectangle) domainElement))) {
d253 1
a253 1
					&& (domainElement == null || isNodePolyline_2005((Polyline) domainElement))) {
d256 1
a256 1
			return getUnrecognizedEllipse_2003ChildNodeID(domainElement, semanticHint);
d259 1
a259 1
					&& (domainElement == null || isNodeRectangle_2002((Rectangle) domainElement))) {
d263 1
a263 1
					&& (domainElement == null || isNodeEllipse_2003((Ellipse) domainElement))) {
d267 1
a267 1
					&& (domainElement == null || isNodeRoundedRectangle_2004((RoundedRectangle) domainElement))) {
d271 1
a271 1
					&& (domainElement == null || isNodePolyline_2005((Polyline) domainElement))) {
d274 1
a274 1
			return getUnrecognizedRoundedRectangle_2004ChildNodeID(domainElement, semanticHint);
d276 1
a276 1
			return getUnrecognizedPolyline_2005ChildNodeID(domainElement, semanticHint);
d279 1
a279 1
					&& (domainElement == null || isNodeRectangle_2002((Rectangle) domainElement))) {
d283 1
a283 1
					&& (domainElement == null || isNodeEllipse_2003((Ellipse) domainElement))) {
d287 1
a287 1
					&& (domainElement == null || isNodeRoundedRectangle_2004((RoundedRectangle) domainElement))) {
d291 1
a291 1
					&& (domainElement == null || isNodePolyline_2005((Polyline) domainElement))) {
d294 1
a294 1
			return getUnrecognizedEllipse_2006ChildNodeID(domainElement, semanticHint);
d297 1
a297 1
					&& (domainElement == null || isNodeRectangle_2002((Rectangle) domainElement))) {
d301 1
a301 1
					&& (domainElement == null || isNodeEllipse_2003((Ellipse) domainElement))) {
d305 1
a305 1
					&& (domainElement == null || isNodeRoundedRectangle_2004((RoundedRectangle) domainElement))) {
d309 1
a309 1
					&& (domainElement == null || isNodePolyline_2005((Polyline) domainElement))) {
d312 1
a312 1
			return getUnrecognizedRoundedRectangle_2007ChildNodeID(domainElement, semanticHint);
d314 1
a314 1
			return getUnrecognizedPolyline_2008ChildNodeID(domainElement, semanticHint);
d316 1
a316 1
			return getUnrecognizedVisualFacets_5001ChildNodeID(domainElement, semanticHint);
d318 1
a318 1
			return getUnrecognizedVisualFacets_5002ChildNodeID(domainElement, semanticHint);
d320 1
a320 1
			return getUnrecognizedVisualFacets_5003ChildNodeID(domainElement, semanticHint);
d323 1
a323 1
					&& (domainElement == null || isNodeRectangle_2001((Rectangle) domainElement))) {
d327 1
a327 1
					&& (domainElement == null || isNodeEllipse_2006((Ellipse) domainElement))) {
d331 1
a331 1
					&& (domainElement == null || isNodeRoundedRectangle_2007((RoundedRectangle) domainElement))) {
d335 1
a335 1
					&& (domainElement == null || isNodePolyline_2008((Polyline) domainElement))) {
d338 1
a338 1
			return getUnrecognizedFigures_5004ChildNodeID(domainElement, semanticHint);
d341 1
a341 1
					&& (domainElement == null || isNodeCompartment_1001((Compartment) domainElement))) {
d345 1
a345 1
					&& (domainElement == null || isNodeNode_1002((Node) domainElement))) {
d349 1
a349 1
					&& (domainElement == null || isNodeConnection_1003((Connection) domainElement))) {
d353 1
a353 1
					&& (domainElement == null || isNodeFigureGallery_1004((FigureGallery) domainElement))) {
d356 1
a356 1
			return getUnrecognizedCanvas_79ChildNodeID(domainElement, semanticHint);
d384 1
a384 1
	private static boolean isDiagramCanvas_79(Canvas element) {
d404 1
a404 1
	private static boolean isNodeCompartment_1001(Compartment element) {
d414 1
a414 1
	private static boolean isNodeNode_1002(Node element) {
d424 1
a424 1
	private static boolean isNodeConnection_1003(Connection element) {
d434 1
a434 1
	private static boolean isNodeFigureGallery_1004(FigureGallery element) {
d444 1
a444 1
	private static boolean isNodeRectangle_2001(Rectangle element) {
d454 1
a454 1
	private static boolean isNodeRectangle_2002(Rectangle element) {
d464 1
a464 1
	private static boolean isNodeEllipse_2003(Ellipse element) {
d474 1
a474 1
	private static boolean isNodeRoundedRectangle_2004(RoundedRectangle element) {
d484 1
a484 1
	private static boolean isNodePolyline_2005(Polyline element) {
d494 1
a494 1
	private static boolean isNodeEllipse_2006(Ellipse element) {
d504 1
a504 1
	private static boolean isNodeRoundedRectangle_2007(RoundedRectangle element) {
d514 1
a514 1
	private static boolean isNodePolyline_2008(Polyline element) {
d524 1
a524 1
	private static int getUnrecognizedCompartment_1001ChildNodeID(EObject domainElement, String semanticHint) {
d534 1
a534 1
	private static int getUnrecognizedNode_1002ChildNodeID(EObject domainElement, String semanticHint) {
d544 1
a544 1
	private static int getUnrecognizedConnection_1003ChildNodeID(EObject domainElement, String semanticHint) {
d554 1
a554 1
	private static int getUnrecognizedFigureGallery_1004ChildNodeID(EObject domainElement, String semanticHint) {
d564 1
a564 1
	private static int getUnrecognizedRectangle_2001ChildNodeID(EObject domainElement, String semanticHint) {
d574 1
a574 1
	private static int getUnrecognizedRectangle_2002ChildNodeID(EObject domainElement, String semanticHint) {
d584 1
a584 1
	private static int getUnrecognizedEllipse_2003ChildNodeID(EObject domainElement, String semanticHint) {
d594 1
a594 1
	private static int getUnrecognizedRoundedRectangle_2004ChildNodeID(EObject domainElement, String semanticHint) {
d604 1
a604 1
	private static int getUnrecognizedPolyline_2005ChildNodeID(EObject domainElement, String semanticHint) {
d614 1
a614 1
	private static int getUnrecognizedEllipse_2006ChildNodeID(EObject domainElement, String semanticHint) {
d624 1
a624 1
	private static int getUnrecognizedRoundedRectangle_2007ChildNodeID(EObject domainElement, String semanticHint) {
d634 1
a634 1
	private static int getUnrecognizedPolyline_2008ChildNodeID(EObject domainElement, String semanticHint) {
d644 1
a644 1
	private static int getUnrecognizedVisualFacets_5001ChildNodeID(EObject domainElement, String semanticHint) {
d654 1
a654 1
	private static int getUnrecognizedVisualFacets_5002ChildNodeID(EObject domainElement, String semanticHint) {
d664 1
a664 1
	private static int getUnrecognizedVisualFacets_5003ChildNodeID(EObject domainElement, String semanticHint) {
d674 1
a674 1
	private static int getUnrecognizedFigures_5004ChildNodeID(EObject domainElement, String semanticHint) {
d684 1
a684 1
	private static int getUnrecognizedCanvas_79ChildNodeID(EObject domainElement, String semanticHint) {
@


1.7
log
@Updating with new templates
@
text
@d3 2
d57 5
d95 3
a97 1
			GMFGraphDiagramEditorPlugin.getInstance().logInfo("Unable to parse view type as a visualID number: " + type);
@


1.6
log
@models updated, sample regenerated with new templates.
@
text
@d150 1
a150 1
		int nodeVisualID = getVisualID(semanticHint);
@


1.5
log
@Using "isSuperTypeOf" instead of EClasses comparision in Visual ID registry.
@
text
@a677 1

@


1.4
log
@#137999 Generate pure static VisualIDRegisrty classes
@
text
@d114 2
a115 2
	public static int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {
		if (GMFGraphPackage.eINSTANCE.getCanvas().equals(domainElementMetaclass) && (domainElement == null || isDiagramCanvas_79((Canvas) domainElement))) {
d185 1
a185 1
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d189 1
a189 1
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d193 1
a193 1
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d197 1
a197 1
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d203 1
a203 1
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d207 1
a207 1
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d211 1
a211 1
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d215 1
a215 1
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d221 1
a221 1
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d225 1
a225 1
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d229 1
a229 1
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d233 1
a233 1
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d239 1
a239 1
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d243 1
a243 1
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d247 1
a247 1
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d251 1
a251 1
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d259 1
a259 1
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d263 1
a263 1
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d267 1
a267 1
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d271 1
a271 1
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d277 1
a277 1
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d281 1
a281 1
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d285 1
a285 1
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d289 1
a289 1
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d303 1
a303 1
			if ((semanticHint == null || RectangleEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d307 1
a307 1
			if ((semanticHint == null || Ellipse2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d311 1
a311 1
			if ((semanticHint == null || RoundedRectangle2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d315 1
a315 1
			if ((semanticHint == null || Polyline2EditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d321 1
a321 1
			if ((semanticHint == null || CompartmentEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getCompartment().equals(domainElementMetaclass)
d325 1
a325 1
			if ((semanticHint == null || NodeEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getNode().equals(domainElementMetaclass)
d329 1
a329 1
			if ((semanticHint == null || ConnectionEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getConnection().equals(domainElementMetaclass)
d333 1
a333 1
			if ((semanticHint == null || FigureGalleryEditPart.VISUAL_ID == nodeVisualID) && GMFGraphPackage.eINSTANCE.getFigureGallery().equals(domainElementMetaclass)
@


1.3
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@a26 1
import org.eclipse.gmf.graphdef.editor.edit.parts.FigureEditPart;
a54 5
	public static final GMFGraphVisualIDRegistry INSTANCE = new GMFGraphVisualIDRegistry();

	/**
	 * @@generated
	 */
d103 1
a103 1
	public int getDiagramVisualID(EObject domainElement) {
d114 1
a114 1
	public int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {
d124 1
a124 1
	public int getNodeVisualID(View containerView, EObject domainElement) {
d135 1
a135 1
	public int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {
a337 2
		case FigureEditPart.VISUAL_ID:
			return getUnrecognizedDiagramElementFigure_3001LinkLabelID(semanticHint);
d345 1
a345 1
	public int getLinkWithClassVisualID(EObject domainElement) {
d353 1
a353 1
	public int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {
d365 1
a365 1
	private boolean isDiagramCanvas_79(Canvas element) {
d375 1
a375 1
	private int getUnrecognizedDiagramID(EObject domainElement) {
d385 2
a386 2
	private boolean isNodeCompartment_1001(Compartment element) {
		return ElementSelectors.acceptAllMatcher().matches(element);
d395 2
a396 2
	private boolean isNodeNode_1002(Node element) {
		return ElementSelectors.acceptAllMatcher().matches(element);
d405 2
a406 2
	private boolean isNodeConnection_1003(Connection element) {
		return ElementSelectors.acceptAllMatcher().matches(element);
d415 2
a416 2
	private boolean isNodeFigureGallery_1004(FigureGallery element) {
		return ElementSelectors.acceptAllMatcher().matches(element);
d425 2
a426 2
	private boolean isNodeRectangle_2001(Rectangle element) {
		return ElementSelectors.acceptAllMatcher().matches(element);
d435 2
a436 2
	private boolean isNodeRectangle_2002(Rectangle element) {
		return ElementSelectors.acceptAllMatcher().matches(element);
d445 2
a446 2
	private boolean isNodeEllipse_2003(Ellipse element) {
		return ElementSelectors.acceptAllMatcher().matches(element);
d455 2
a456 2
	private boolean isNodeRoundedRectangle_2004(RoundedRectangle element) {
		return ElementSelectors.acceptAllMatcher().matches(element);
d465 2
a466 2
	private boolean isNodePolyline_2005(Polyline element) {
		return ElementSelectors.acceptAllMatcher().matches(element);
d475 2
a476 2
	private boolean isNodeEllipse_2006(Ellipse element) {
		return ElementSelectors.acceptAllMatcher().matches(element);
d485 2
a486 2
	private boolean isNodeRoundedRectangle_2007(RoundedRectangle element) {
		return ElementSelectors.acceptAllMatcher().matches(element);
d495 2
a496 2
	private boolean isNodePolyline_2008(Polyline element) {
		return ElementSelectors.acceptAllMatcher().matches(element);
d505 1
a505 1
	private int getUnrecognizedCompartment_1001ChildNodeID(EObject domainElement, String semanticHint) {
d515 1
a515 1
	private int getUnrecognizedNode_1002ChildNodeID(EObject domainElement, String semanticHint) {
d525 1
a525 1
	private int getUnrecognizedConnection_1003ChildNodeID(EObject domainElement, String semanticHint) {
d535 1
a535 1
	private int getUnrecognizedFigureGallery_1004ChildNodeID(EObject domainElement, String semanticHint) {
d545 1
a545 1
	private int getUnrecognizedRectangle_2001ChildNodeID(EObject domainElement, String semanticHint) {
d555 1
a555 1
	private int getUnrecognizedRectangle_2002ChildNodeID(EObject domainElement, String semanticHint) {
d565 1
a565 1
	private int getUnrecognizedEllipse_2003ChildNodeID(EObject domainElement, String semanticHint) {
d575 1
a575 1
	private int getUnrecognizedRoundedRectangle_2004ChildNodeID(EObject domainElement, String semanticHint) {
d585 1
a585 1
	private int getUnrecognizedPolyline_2005ChildNodeID(EObject domainElement, String semanticHint) {
d595 1
a595 1
	private int getUnrecognizedEllipse_2006ChildNodeID(EObject domainElement, String semanticHint) {
d605 1
a605 1
	private int getUnrecognizedRoundedRectangle_2007ChildNodeID(EObject domainElement, String semanticHint) {
d615 1
a615 1
	private int getUnrecognizedPolyline_2008ChildNodeID(EObject domainElement, String semanticHint) {
d625 1
a625 1
	private int getUnrecognizedVisualFacets_5001ChildNodeID(EObject domainElement, String semanticHint) {
d635 1
a635 1
	private int getUnrecognizedVisualFacets_5002ChildNodeID(EObject domainElement, String semanticHint) {
d645 1
a645 1
	private int getUnrecognizedVisualFacets_5003ChildNodeID(EObject domainElement, String semanticHint) {
d655 1
a655 1
	private int getUnrecognizedFigures_5004ChildNodeID(EObject domainElement, String semanticHint) {
d665 1
a665 1
	private int getUnrecognizedCanvas_79ChildNodeID(EObject domainElement, String semanticHint) {
d675 1
a675 1
	private int getUnrecognizedDiagramElementFigure_3001LinkLabelID(String semanticHint) {
a678 46
	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private int getUnrecognizedLinkWithClassID(EObject domainElement) {
		return -1;
	}

	/**
	 * @@generated
	 */
	private static class ElementSelectors {

		/**
		 * @@generated
		 */
		private ElementSelectors() {
		}

		/**
		 * @@generated
		 */
		static class AcceptAllMatcher {

			/**
			 * @@generated
			 */
			static final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();

			/**
			 * @@generated
			 */
			boolean matches(Object element) {
				return true;
			}
		}

		/**
		 * @@generated
		 */
		static AcceptAllMatcher acceptAllMatcher() {
			return AcceptAllMatcher.INSTANCE;
		}
	} // end of ElementSelectors
@


1.2
log
@Updating with latest changes in templates + palette.
@
text
@d27 1
d64 1
a64 1
				return 79;
d69 1
a69 6
		try {
			return Integer.parseInt(view.getType());
		} catch (NumberFormatException e) {
			GMFGraphDiagramEditorPlugin.getInstance().logInfo("Unable to parse view type as a visualID number: " + view.getType());
		}
		return -1;
d90 19
d122 1
a122 1
			return 79;
d151 1
a151 1
				containerVisualID = 79;
d156 1
d158 3
a160 3
		case 1001:
			if (Compartment_nameEditPart.VISUAL_ID.equals(semanticHint)) {
				return 4001;
d162 2
a163 2
			if (Compartment_VisualFacetsEditPart.VISUAL_ID.equals(semanticHint)) {
				return 5001;
d166 3
a168 3
		case 1002:
			if (Node_nameEditPart.VISUAL_ID.equals(semanticHint)) {
				return 4002;
d170 2
a171 2
			if (Node_VisualFacetsEditPart.VISUAL_ID.equals(semanticHint)) {
				return 5002;
d174 3
a176 3
		case 1003:
			if (Connection_nameEditPart.VISUAL_ID.equals(semanticHint)) {
				return 4003;
d178 2
a179 2
			if (Connection_VisualFacetsEditPart.VISUAL_ID.equals(semanticHint)) {
				return 5003;
d182 3
a184 3
		case 1004:
			if (FigureGallery_nameEditPart.VISUAL_ID.equals(semanticHint)) {
				return 4004;
d186 2
a187 2
			if (FigureGallery_FiguresEditPart.VISUAL_ID.equals(semanticHint)) {
				return 5004;
d190 2
a191 2
		case 2001:
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d193 1
a193 1
				return 2002;
d195 1
a195 1
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d197 1
a197 1
				return 2003;
d199 1
a199 1
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d201 1
a201 1
				return 2004;
d203 1
a203 1
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d205 1
a205 1
				return 2005;
d208 2
a209 2
		case 2002:
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d211 1
a211 1
				return 2002;
d213 1
a213 1
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d215 1
a215 1
				return 2003;
d217 1
a217 1
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d219 1
a219 1
				return 2004;
d221 1
a221 1
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d223 1
a223 1
				return 2005;
d226 2
a227 2
		case 2003:
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d229 1
a229 1
				return 2002;
d231 1
a231 1
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d233 1
a233 1
				return 2003;
d235 1
a235 1
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d237 1
a237 1
				return 2004;
d239 1
a239 1
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d241 1
a241 1
				return 2005;
d244 2
a245 2
		case 2004:
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d247 1
a247 1
				return 2002;
d249 1
a249 1
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d251 1
a251 1
				return 2003;
d253 1
a253 1
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d255 1
a255 1
				return 2004;
d257 1
a257 1
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d259 1
a259 1
				return 2005;
d262 1
a262 1
		case 2005:
d264 2
a265 2
		case 2006:
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d267 1
a267 1
				return 2002;
d269 1
a269 1
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d271 1
a271 1
				return 2003;
d273 1
a273 1
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d275 1
a275 1
				return 2004;
d277 1
a277 1
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d279 1
a279 1
				return 2005;
d282 2
a283 2
		case 2007:
			if ((semanticHint == null || Rectangle2EditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d285 1
a285 1
				return 2002;
d287 1
a287 1
			if ((semanticHint == null || EllipseEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d289 1
a289 1
				return 2003;
d291 1
a291 1
			if ((semanticHint == null || RoundedRectangleEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d293 1
a293 1
				return 2004;
d295 1
a295 1
			if ((semanticHint == null || PolylineEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d297 1
a297 1
				return 2005;
d300 1
a300 1
		case 2008:
d302 1
a302 1
		case 5001:
d304 1
a304 1
		case 5002:
d306 1
a306 1
		case 5003:
d308 2
a309 2
		case 5004:
			if ((semanticHint == null || RectangleEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRectangle().equals(domainElementMetaclass)
d311 1
a311 1
				return 2001;
d313 1
a313 1
			if ((semanticHint == null || Ellipse2EditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getEllipse().equals(domainElementMetaclass)
d315 1
a315 1
				return 2006;
d317 1
a317 1
			if ((semanticHint == null || RoundedRectangle2EditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getRoundedRectangle().equals(domainElementMetaclass)
d319 1
a319 1
				return 2007;
d321 1
a321 1
			if ((semanticHint == null || Polyline2EditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getPolyline().equals(domainElementMetaclass)
d323 1
a323 1
				return 2008;
d326 2
a327 2
		case 79:
			if ((semanticHint == null || CompartmentEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getCompartment().equals(domainElementMetaclass)
d329 1
a329 1
				return 1001;
d331 1
a331 1
			if ((semanticHint == null || NodeEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getNode().equals(domainElementMetaclass)
d333 1
a333 1
				return 1002;
d335 1
a335 1
			if ((semanticHint == null || ConnectionEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getConnection().equals(domainElementMetaclass)
d337 1
a337 1
				return 1003;
d339 1
a339 1
			if ((semanticHint == null || FigureGalleryEditPart.VISUAL_ID.equals(semanticHint)) && GMFGraphPackage.eINSTANCE.getFigureGallery().equals(domainElementMetaclass)
d341 1
a341 1
				return 1004;
d344 1
a344 1
		case 3001:
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d71 1
a71 1
			GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to parse view type as a visualID number: " + view.getType(), e);
d88 1
a88 1
		return diagram.getType();
@

