head	1.8;
access;
symbols
	v20080722-1827:1.8
	v20080718-1700:1.8
	v20080718-1731:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080528-1052:1.8
	v20080521:1.8
	v20080516-1143:1.8
	v20080512-1200:1.8
	v20080510-0100:1.8
	v20080507-1326:1.8
	v20080501-1739:1.8
	v20080425-1959:1.8
	v20080411-0411:1.8
	v20080404-1111:1.8
	v20080322-0000:1.8
	v20080114-2222:1.6
	v20071214-1111:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070520-1200:1.5
	v20070420-1000:1.5
	v20070405-2000:1.5
	v20070405-1100:1.5
	v20070330-1300:1.5
	v20070307-0700:1.5
	v20070221-1500:1.5
	v20070208-1800:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	M1_20:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	RC2_10:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2008.03.07.12.50.34;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	179447d13a164567;

1.7
date	2008.02.22.13.08.00;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	4c5647bec9294567;

1.6
date	2007.05.31.15.52.30;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	49f1465eef2c4567;

1.5
date	2007.02.09.20.08.29;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	179c45ccd4b34567;

1.4
date	2006.06.02.15.08.29;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.30.13.06.13;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.14.16.50.05;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.23;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Updating with new figures code + setting proper layout for diahram elements
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.policies;

import org.eclipse.draw2d.ColorConstants;
import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Label;
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.editpolicies.SelectionEditPolicy;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;

/**
 * @@generated
 */
public class GMFGraphTextSelectionEditPolicy extends SelectionEditPolicy {

	/**
	 * @@generated
	 */
	private IFigure selectionFeedbackFigure;

	/**
	 * @@generated
	 */
	private IFigure focusFeedbackFigure;

	/**
	 * @@generated
	 */
	protected void showPrimarySelection() {
		if (getHostFigure() instanceof WrappingLabel) {
			((WrappingLabel) getHostFigure()).setSelected(true);
			((WrappingLabel) getHostFigure()).setFocus(true);
		} else {
			showSelection();
			showFocus();
		}
	}

	/**
	 * @@generated
	 */
	protected void showSelection() {
		if (getHostFigure() instanceof WrappingLabel) {
			((WrappingLabel) getHostFigure()).setSelected(true);
			((WrappingLabel) getHostFigure()).setFocus(false);
		} else {
			hideSelection();
			addFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());
			refreshSelectionFeedback();
			hideFocus();
		}
	}

	/**
	 * @@generated
	 */
	protected void hideSelection() {
		if (getHostFigure() instanceof WrappingLabel) {
			((WrappingLabel) getHostFigure()).setSelected(false);
			((WrappingLabel) getHostFigure()).setFocus(false);
		} else {
			if (selectionFeedbackFigure != null) {
				removeFeedback(selectionFeedbackFigure);
				selectionFeedbackFigure = null;
			}
			hideFocus();
		}
	}

	/**
	 * @@generated
	 */
	protected void showFocus() {
		if (getHostFigure() instanceof WrappingLabel) {
			((WrappingLabel) getHostFigure()).setFocus(true);
		} else {
			hideFocus();
			addFeedback(focusFeedbackFigure = createFocusFeedbackFigure());
			refreshFocusFeedback();
		}
	}

	/**
	 * @@generated
	 */
	protected void hideFocus() {
		if (getHostFigure() instanceof WrappingLabel) {
			((WrappingLabel) getHostFigure()).setFocus(false);
		} else {
			if (focusFeedbackFigure != null) {
				removeFeedback(focusFeedbackFigure);
				focusFeedbackFigure = null;
			}
		}
	}

	/**
	 * @@generated
	 */
	protected Rectangle getFeedbackBounds() {
		Rectangle bounds;
		if (getHostFigure() instanceof Label) {
			bounds = ((Label) getHostFigure()).getTextBounds();
			bounds.intersect(getHostFigure().getBounds());
		} else {
			bounds = getHostFigure().getBounds().getCopy();
		}
		getHostFigure().getParent().translateToAbsolute(bounds);
		getFeedbackLayer().translateToRelative(bounds);
		return bounds;
	}

	/**
	 * @@generated
	 */
	protected IFigure createSelectionFeedbackFigure() {
		if (getHostFigure() instanceof Label) {
			Label feedbackFigure = new Label();
			feedbackFigure.setOpaque(true);
			feedbackFigure.setBackgroundColor(ColorConstants.menuBackgroundSelected);
			feedbackFigure.setForegroundColor(ColorConstants.menuForegroundSelected);
			return feedbackFigure;
		} else {
			RectangleFigure feedbackFigure = new RectangleFigure();
			feedbackFigure.setFill(false);
			return feedbackFigure;
		}
	}

	/**
	 * @@generated
	 */
	protected IFigure createFocusFeedbackFigure() {
		return new Figure() {

			protected void paintFigure(Graphics graphics) {
				graphics.drawFocus(getBounds().getResized(-1, -1));
			}
		};
	}

	/**
	 * @@generated
	 */
	protected void updateLabel(Label target) {
		Label source = (Label) getHostFigure();
		target.setText(source.getText());
		target.setTextAlignment(source.getTextAlignment());
		target.setFont(source.getFont());
	}

	/**
	 * @@generated
	 */
	protected void refreshSelectionFeedback() {
		if (selectionFeedbackFigure != null) {
			if (selectionFeedbackFigure instanceof Label) {
				updateLabel((Label) selectionFeedbackFigure);
				selectionFeedbackFigure.setBounds(getFeedbackBounds());
			} else {
				selectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));
			}
		}
	}

	/**
	 * @@generated
	 */
	protected void refreshFocusFeedback() {
		if (focusFeedbackFigure != null) {
			focusFeedbackFigure.setBounds(getFeedbackBounds());
		}
	}

	/**
	 * @@generated
	 */
	public void refreshFeedback() {
		refreshSelectionFeedback();
		refreshFocusFeedback();
	}
}
@


1.7
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@a20 1
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;
@


1.6
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d22 1
d43 3
a45 3
		if (getHostFigure() instanceof WrapLabel) {
			((WrapLabel) getHostFigure()).setSelected(true);
			((WrapLabel) getHostFigure()).setFocus(true);
d56 3
a58 3
		if (getHostFigure() instanceof WrapLabel) {
			((WrapLabel) getHostFigure()).setSelected(true);
			((WrapLabel) getHostFigure()).setFocus(false);
d71 3
a73 3
		if (getHostFigure() instanceof WrapLabel) {
			((WrapLabel) getHostFigure()).setSelected(false);
			((WrapLabel) getHostFigure()).setFocus(false);
d87 2
a88 2
		if (getHostFigure() instanceof WrapLabel) {
			((WrapLabel) getHostFigure()).setFocus(true);
d100 2
a101 2
		if (getHostFigure() instanceof WrapLabel) {
			((WrapLabel) getHostFigure()).setFocus(false);
@


1.5
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d3 7
a9 7
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
@


1.4
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
a19 1
import org.eclipse.gef.LayerConstants;
a111 7
	protected IFigure getFeedbackLayer() {
		return getLayer(LayerConstants.SCALED_FEEDBACK_LAYER);
	}

	/**
	 * @@generated
	 */
@


1.3
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
@


1.2
log
@Updating with new templates
@
text
@d1 10
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d12 1
d33 7
a39 2
		showSelection();
		showFocus();
d46 9
a54 4
		hideSelection();
		addFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());
		refreshSelectionFeedback();
		hideFocus();
d61 9
a69 3
		if (selectionFeedbackFigure != null) {
			removeFeedback(selectionFeedbackFigure);
			selectionFeedbackFigure = null;
a70 1
		hideFocus();
d77 7
a83 3
		hideFocus();
		addFeedback(focusFeedbackFigure = createFocusFeedbackFigure());
		refreshFocusFeedback();
d90 7
a96 3
		if (focusFeedbackFigure != null) {
			removeFeedback(focusFeedbackFigure);
			focusFeedbackFigure = null;
@

