head	1.1;
access;
symbols
	v20080722-1827:1.1
	v20080718-1700:1.1
	v20080718-1731:1.1
	v20080716-1642:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080610-1132:1.1
	v20080603-1553:1.1
	v20080528-1052:1.1
	v20080521:1.1
	v20080516-1143:1.1
	v20080512-1200:1.1
	v20080510-0100:1.1
	v20080507-1326:1.1
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080411-0411:1.1
	v20080404-1111:1.1
	v20080322-0000:1.1
	v20080114-2222:1.1
	v20071214-1111:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2007.05.31.15.52.29;	author ashatalin;	state Exp;
branches;
next	;
commitid	49f1465eef2c4567;


desc
@@


1.1
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.part;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;

/**
 * @@generated
 */
public class GMFGraphLinkDescriptor extends GMFGraphNodeDescriptor {

	/**
	 * @@generated
	 */
	private EObject mySource;

	/**
	 * @@generated
	 */
	private EObject myDestination;

	/**
	 * @@generated
	 */
	private IAdaptable mySemanticAdapter;

	/**
	 * @@generated
	 */
	private GMFGraphLinkDescriptor(EObject source, EObject destination, EObject linkElement, int linkVID) {
		super(linkElement, linkVID);
		mySource = source;
		myDestination = destination;
	}

	/**
	 * @@generated
	 */
	public GMFGraphLinkDescriptor(EObject source, EObject destination, IElementType elementType, int linkVID) {
		this(source, destination, (EObject) null, linkVID);
		final IElementType elementTypeCopy = elementType;
		mySemanticAdapter = new IAdaptable() {

			public Object getAdapter(Class adapter) {
				if (IElementType.class.equals(adapter)) {
					return elementTypeCopy;
				}
				return null;
			}
		};
	}

	/**
	 * @@generated
	 */
	public GMFGraphLinkDescriptor(EObject source, EObject destination, EObject linkElement, IElementType elementType, int linkVID) {
		this(source, destination, linkElement, linkVID);
		final IElementType elementTypeCopy = elementType;
		mySemanticAdapter = new EObjectAdapter(linkElement) {

			public Object getAdapter(Class adapter) {
				if (IElementType.class.equals(adapter)) {
					return elementTypeCopy;
				}
				return super.getAdapter(adapter);
			}
		};
	}

	/**
	 * @@generated
	 */
	public EObject getSource() {
		return mySource;
	}

	/**
	 * @@generated
	 */
	public EObject getDestination() {
		return myDestination;
	}

	/**
	 * @@generated
	 */
	public IAdaptable getSemanticAdapter() {
		return mySemanticAdapter;
	}

}
@
