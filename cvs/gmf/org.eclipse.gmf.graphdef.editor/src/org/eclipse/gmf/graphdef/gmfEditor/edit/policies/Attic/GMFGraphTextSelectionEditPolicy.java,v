head	1.2;
access;
symbols
	R1_0_maintenance:1.2.0.2
	R1_0:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2006.04.14.12.58.25;	author ashatalin;	state dead;
branches;
next	1.1;

1.1
date	2006.04.14.12.33.35;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@.gmfgen model updated with new plugin name.
@
text
@package org.eclipse.gmf.graphdef.gmfEditor.edit.policies;

import org.eclipse.draw2d.ColorConstants;
import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Label;
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.LayerConstants;
import org.eclipse.gef.editpolicies.SelectionEditPolicy;

/**
 * @@generated
 */
public class GMFGraphTextSelectionEditPolicy extends SelectionEditPolicy {

	/**
	 * @@generated
	 */
	private IFigure selectionFeedbackFigure;

	/**
	 * @@generated
	 */
	private IFigure focusFeedbackFigure;

	/**
	 * @@generated
	 */
	protected void showPrimarySelection() {
		showSelection();
		showFocus();
	}

	/**
	 * @@generated
	 */
	protected void showSelection() {
		hideSelection();
		addFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());
		refreshSelectionFeedback();
		hideFocus();
	}

	/**
	 * @@generated
	 */
	protected void hideSelection() {
		if (selectionFeedbackFigure != null) {
			removeFeedback(selectionFeedbackFigure);
			selectionFeedbackFigure = null;
		}
		hideFocus();
	}

	/**
	 * @@generated
	 */
	protected void showFocus() {
		hideFocus();
		addFeedback(focusFeedbackFigure = createFocusFeedbackFigure());
		refreshFocusFeedback();
	}

	/**
	 * @@generated
	 */
	protected void hideFocus() {
		if (focusFeedbackFigure != null) {
			removeFeedback(focusFeedbackFigure);
			focusFeedbackFigure = null;
		}
	}

	/**
	 * @@generated
	 */
	protected IFigure getFeedbackLayer() {
		return getLayer(LayerConstants.SCALED_FEEDBACK_LAYER);
	}

	/**
	 * @@generated
	 */
	protected Rectangle getFeedbackBounds() {
		Rectangle bounds;
		if (getHostFigure() instanceof Label) {
			bounds = ((Label) getHostFigure()).getTextBounds();
			bounds.intersect(getHostFigure().getBounds());
		} else {
			bounds = getHostFigure().getBounds().getCopy();
		}
		getHostFigure().getParent().translateToAbsolute(bounds);
		getFeedbackLayer().translateToRelative(bounds);
		return bounds;
	}

	/**
	 * @@generated
	 */
	protected IFigure createSelectionFeedbackFigure() {
		if (getHostFigure() instanceof Label) {
			Label feedbackFigure = new Label();
			feedbackFigure.setOpaque(true);
			feedbackFigure.setBackgroundColor(ColorConstants.menuBackgroundSelected);
			feedbackFigure.setForegroundColor(ColorConstants.menuForegroundSelected);
			return feedbackFigure;
		} else {
			RectangleFigure feedbackFigure = new RectangleFigure();
			feedbackFigure.setFill(false);
			return feedbackFigure;
		}
	}

	/**
	 * @@generated
	 */
	protected IFigure createFocusFeedbackFigure() {
		return new Figure() {

			protected void paintFigure(Graphics graphics) {
				graphics.drawFocus(getBounds().getResized(-1, -1));
			}
		};
	}

	/**
	 * @@generated
	 */
	protected void updateLabel(Label target) {
		Label source = (Label) getHostFigure();
		target.setText(source.getText());
		target.setTextAlignment(source.getTextAlignment());
		target.setFont(source.getFont());
	}

	/**
	 * @@generated
	 */
	protected void refreshSelectionFeedback() {
		if (selectionFeedbackFigure != null) {
			if (selectionFeedbackFigure instanceof Label) {
				updateLabel((Label) selectionFeedbackFigure);
				selectionFeedbackFigure.setBounds(getFeedbackBounds());
			} else {
				selectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));
			}
		}
	}

	/**
	 * @@generated
	 */
	protected void refreshFocusFeedback() {
		if (focusFeedbackFigure != null) {
			focusFeedbackFigure.setBounds(getFeedbackBounds());
		}
	}

	/**
	 * @@generated
	 */
	public void refreshFeedback() {
		refreshSelectionFeedback();
		refreshFocusFeedback();
	}
}
@


1.1
log
@Initial import
@
text
@@

