head	1.9;
access;
symbols
	v20080722-1827:1.9
	v20080718-1700:1.8
	v20080718-1731:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080528-1052:1.7
	v20080521:1.7
	v20080516-1143:1.7
	v20080512-1200:1.7
	v20080510-0100:1.7
	v20080507-1326:1.7
	v20080501-1739:1.7
	v20080425-1959:1.7
	v20080411-0411:1.7
	v20080404-1111:1.7
	v20080322-0000:1.7
	v20080114-2222:1.7
	v20071214-1111:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070520-1200:1.6
	v20070420-1000:1.6
	v20070405-2000:1.5
	v20070405-1100:1.5
	v20070330-1300:1.4
	v20070307-0700:1.4
	v20070221-1500:1.4
	v20070208-1800:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	M1_20:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	RC2_10:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2008.07.02.15.20.45;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	703486b9cc54567;

1.8
date	2008.05.30.17.14.49;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	70b4484036034567;

1.7
date	2007.05.31.15.52.31;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	49f1465eef2c4567;

1.6
date	2007.04.16.11.03.53;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	7e4e462358154567;

1.5
date	2007.04.04.20.23.25;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	ade461409204567;

1.4
date	2007.02.09.20.08.29;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	179c45ccd4b34567;

1.3
date	2006.06.02.15.08.29;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.30.13.06.14;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.24;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[233207] - Support Label figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.policies;

import java.util.Iterator;

import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.graphdef.editor.edit.commands.ChildAccessCreateCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.ChildAccessReorientCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.EllipseCreateCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.LabelCreateCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.PolygonCreateCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.PolylineCreateCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.Rectangle2CreateCommand;
import org.eclipse.gmf.graphdef.editor.edit.commands.RoundedRectangleCreateCommand;
import org.eclipse.gmf.graphdef.editor.edit.parts.ChildAccessEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.EllipseEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolygonEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolylineEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangleEditPart;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;
import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class RoundedRectangle2ItemSemanticEditPolicy extends GMFGraphBaseItemSemanticEditPolicy {

	/**
	 * @@generated
	 */
	protected Command getCreateCommand(CreateElementRequest req) {
		if (GMFGraphElementTypes.Rectangle_3011 == req.getElementType()) {
			if (req.getContainmentFeature() == null) {
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getRealFigure_Children());
			}
			return getGEFWrapper(new Rectangle2CreateCommand(req));
		}
		if (GMFGraphElementTypes.Ellipse_3012 == req.getElementType()) {
			if (req.getContainmentFeature() == null) {
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getRealFigure_Children());
			}
			return getGEFWrapper(new EllipseCreateCommand(req));
		}
		if (GMFGraphElementTypes.RoundedRectangle_3013 == req.getElementType()) {
			if (req.getContainmentFeature() == null) {
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getRealFigure_Children());
			}
			return getGEFWrapper(new RoundedRectangleCreateCommand(req));
		}
		if (GMFGraphElementTypes.Polyline_3014 == req.getElementType()) {
			if (req.getContainmentFeature() == null) {
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getRealFigure_Children());
			}
			return getGEFWrapper(new PolylineCreateCommand(req));
		}
		if (GMFGraphElementTypes.Polygon_3023 == req.getElementType()) {
			if (req.getContainmentFeature() == null) {
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getRealFigure_Children());
			}
			return getGEFWrapper(new PolygonCreateCommand(req));
		}
		if (GMFGraphElementTypes.Label_3026 == req.getElementType()) {
			if (req.getContainmentFeature() == null) {
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getRealFigure_Children());
			}
			return getGEFWrapper(new LabelCreateCommand(req));
		}
		return super.getCreateCommand(req);
	}

	/**
	 * @@generated
	 */
	protected Command getDestroyElementCommand(DestroyElementRequest req) {
		CompoundCommand cc = getDestroyEdgesCommand();
		addDestroyChildNodesCommand(cc);
		addDestroyShortcutsCommand(cc);
		cc.add(getGEFWrapper(new DestroyElementCommand(req)));
		return cc.unwrap();
	}

	/**
	 * @@generated
	 */
	protected void addDestroyChildNodesCommand(CompoundCommand cmd) {
		View view = (View) getHost().getModel();
		EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
		if (annotation != null) {
			return;
		}
		for (Iterator it = view.getChildren().iterator(); it.hasNext();) {
			Node node = (Node) it.next();
			switch (GMFGraphVisualIDRegistry.getVisualID(node)) {
			case Rectangle2EditPart.VISUAL_ID:
				cmd.add(getDestroyElementCommand(node));
				break;
			case EllipseEditPart.VISUAL_ID:
				cmd.add(getDestroyElementCommand(node));
				break;
			case RoundedRectangleEditPart.VISUAL_ID:
				cmd.add(getDestroyElementCommand(node));
				break;
			case PolylineEditPart.VISUAL_ID:
				cmd.add(getDestroyElementCommand(node));
				break;
			case PolygonEditPart.VISUAL_ID:
				cmd.add(getDestroyElementCommand(node));
				break;
			case LabelEditPart.VISUAL_ID:
				cmd.add(getDestroyElementCommand(node));
				break;
			}
		}
	}

	/**
	 * @@generated
	 */
	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
		Command command = req.getTarget() == null ? getStartCreateRelationshipCommand(req) : getCompleteCreateRelationshipCommand(req);
		return command != null ? command : super.getCreateRelationshipCommand(req);
	}

	/**
	 * @@generated
	 */
	protected Command getStartCreateRelationshipCommand(CreateRelationshipRequest req) {
		if (GMFGraphElementTypes.ChildAccess_4002 == req.getElementType()) {
			return null;
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getCompleteCreateRelationshipCommand(CreateRelationshipRequest req) {
		if (GMFGraphElementTypes.ChildAccess_4002 == req.getElementType()) {
			return getGEFWrapper(new ChildAccessCreateCommand(req, req.getSource(), req.getTarget()));
		}
		return null;
	}

	/**
	 * Returns command to reorient EClass based link. New link target or source
	 * should be the domain model element associated with this node.
	 * 
	 * @@generated
	 */
	protected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {
		switch (getVisualID(req)) {
		case ChildAccessEditPart.VISUAL_ID:
			return getGEFWrapper(new ChildAccessReorientCommand(req));
		}
		return super.getReorientRelationshipCommand(req);
	}

}
@


1.8
log
@[233206] - Support Polygon figure in .gmfgraph editor
@
text
@d22 1
d29 1
d83 6
d130 3
@


1.7
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d22 1
d28 1
d75 6
d119 3
@


1.6
log
@[182339] akarjakina - provide different means to select parts of composite figures
Visible insets for top-level figures, custom popup action with nested submenus, simple handles behavior
@
text
@d3 7
a9 7
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d13 3
a15 1
import org.eclipse.emf.ecore.EObject;
a17 3
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gmf.gmfgraph.DiagramElement;
import org.eclipse.gmf.gmfgraph.FigureHandle;
d19 2
a20 1
import org.eclipse.gmf.graphdef.editor.edit.commands.DiagramElementFigureReorientCommand;
d25 6
a30 1
import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramElementFigureEditPart;
a32 1
import org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand;
d36 3
a38 2
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;
d49 1
a49 1
		if (GMFGraphElementTypes.Rectangle_3002 == req.getElementType()) {
d51 1
a51 1
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getFigure_Children());
d53 1
a53 1
			return getMSLWrapper(new Rectangle2CreateCommand(req));
d55 1
a55 1
		if (GMFGraphElementTypes.Ellipse_3003 == req.getElementType()) {
d57 1
a57 1
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getFigure_Children());
d59 1
a59 1
			return getMSLWrapper(new EllipseCreateCommand(req));
d61 1
a61 1
		if (GMFGraphElementTypes.RoundedRectangle_3004 == req.getElementType()) {
d63 1
a63 1
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getFigure_Children());
d65 1
a65 1
			return getMSLWrapper(new RoundedRectangleCreateCommand(req));
d67 1
a67 1
		if (GMFGraphElementTypes.Polyline_3005 == req.getElementType()) {
d69 1
a69 1
				req.setContainmentFeature(GMFGraphPackage.eINSTANCE.getFigure_Children());
d71 1
a71 1
			return getMSLWrapper(new PolylineCreateCommand(req));
d80 4
a83 2
		CompoundCommand cc = getDestroyEdgesCommand(req.isConfirmationRequired());
		cc.add(getMSLWrapper(new DestroyElementCommand(req)));
d90 28
d119 10
a128 2
		if (GMFGraphElementTypes.DiagramElementFigure_4001 == req.getElementType()) {
			return req.getTarget() == null ? null : getCreateCompleteIncomingDiagramElementFigure_4001Command(req);
d130 1
a130 1
		return super.getCreateRelationshipCommand(req);
d136 3
a138 10
	protected Command getCreateCompleteIncomingDiagramElementFigure_4001Command(CreateRelationshipRequest req) {
		EObject sourceEObject = req.getSource();
		EObject targetEObject = req.getTarget();
		if (false == sourceEObject instanceof DiagramElement || false == targetEObject instanceof FigureHandle) {
			return UnexecutableCommand.INSTANCE;
		}
		DiagramElement source = (DiagramElement) sourceEObject;
		FigureHandle target = (FigureHandle) targetEObject;
		if (!GMFGraphBaseItemSemanticEditPolicy.LinkConstraints.canCreateDiagramElementFigure_4001(source, target)) {
			return UnexecutableCommand.INSTANCE;
d140 1
a140 2
		SetRequest setReq = new SetRequest(sourceEObject, GMFGraphPackage.eINSTANCE.getDiagramElement_Figure(), target);
		return getMSLWrapper(new SetValueCommand(setReq));
d144 1
a144 1
	 * Returns command to reorient EReference based link. New link target or source
d149 1
a149 1
	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
d151 2
a152 2
		case DiagramElementFigureEditPart.VISUAL_ID:
			return getMSLWrapper(new DiagramElementFigureReorientCommand(req));
d154 1
a154 1
		return super.getReorientReferenceRelationshipCommand(req);
d156 1
@


1.5
log
@[173499] akarjakina - Enhance graphdef.editor with properties - use custom model to describe property sheet and generate PropertyTab code from that model
@
text
@a12 5
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;

a13 1
import org.eclipse.gef.EditPart;
a25 1
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle2EditPart;
a26 1
import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;
a33 2
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.View;
d75 1
a75 12
		CompoundCommand cc = new CompoundCommand();
		Collection allEdges = new ArrayList();
		View view = (View) getHost().getModel();
		allEdges.addAll(view.getSourceEdges());
		allEdges.addAll(view.getTargetEdges());
		for (Iterator it = allEdges.iterator(); it.hasNext();) {
			Edge nextEdge = (Edge) it.next();
			EditPart nextEditPart = (EditPart) getHost().getViewer().getEditPartRegistry().get(nextEdge);
			EditCommandRequestWrapper editCommandRequest = new EditCommandRequestWrapper(new DestroyElementRequest(((RoundedRectangle2EditPart) getHost()).getEditingDomain(), req
					.isConfirmationRequired()), Collections.EMPTY_MAP);
			cc.add(nextEditPart.getCommand(editCommandRequest));
		}
d77 1
a77 1
		return cc;
@


1.4
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d26 1
d31 1
d40 1
d129 13
@


1.3
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
d13 7
d21 1
a21 8
import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.emf.ecore.EClass;

a22 1

d24 1
d26 5
a30 1

d32 2
a33 2

import org.eclipse.gmf.runtime.emf.type.core.commands.CreateElementCommand;
a34 1

d36 2
d39 2
d55 1
a55 1
			return getMSLWrapper(new CreateRectangle_3002Command(req));
d61 1
a61 1
			return getMSLWrapper(new CreateEllipse_3003Command(req));
d67 1
a67 1
			return getMSLWrapper(new CreateRoundedRectangle_3004Command(req));
d73 1
a73 1
			return getMSLWrapper(new CreatePolyline_3005Command(req));
d81 12
a92 56
	private static class CreateRectangle_3002Command extends CreateElementCommand {

		/**
		 * @@generated
		 */
		public CreateRectangle_3002Command(CreateElementRequest req) {
			super(req);
		}

		/**
		 * @@generated
		 */
		protected EClass getEClassToEdit() {
			return GMFGraphPackage.eINSTANCE.getRoundedRectangle();
		};

		/**
		 * @@generated
		 */
		protected EObject getElementToEdit() {
			EObject container = ((CreateElementRequest) getRequest()).getContainer();
			if (container instanceof View) {
				container = ((View) container).getElement();
			}
			return container;
		}
	}

	/**
	 * @@generated
	 */
	private static class CreateEllipse_3003Command extends CreateElementCommand {

		/**
		 * @@generated
		 */
		public CreateEllipse_3003Command(CreateElementRequest req) {
			super(req);
		}

		/**
		 * @@generated
		 */
		protected EClass getEClassToEdit() {
			return GMFGraphPackage.eINSTANCE.getRoundedRectangle();
		};

		/**
		 * @@generated
		 */
		protected EObject getElementToEdit() {
			EObject container = ((CreateElementRequest) getRequest()).getContainer();
			if (container instanceof View) {
				container = ((View) container).getElement();
			}
			return container;
d94 2
a95 80
	}

	/**
	 * @@generated
	 */
	private static class CreateRoundedRectangle_3004Command extends CreateElementCommand {

		/**
		 * @@generated
		 */
		public CreateRoundedRectangle_3004Command(CreateElementRequest req) {
			super(req);
		}

		/**
		 * @@generated
		 */
		protected EClass getEClassToEdit() {
			return GMFGraphPackage.eINSTANCE.getRoundedRectangle();
		};

		/**
		 * @@generated
		 */
		protected EObject getElementToEdit() {
			EObject container = ((CreateElementRequest) getRequest()).getContainer();
			if (container instanceof View) {
				container = ((View) container).getElement();
			}
			return container;
		}
	}

	/**
	 * @@generated
	 */
	private static class CreatePolyline_3005Command extends CreateElementCommand {

		/**
		 * @@generated
		 */
		public CreatePolyline_3005Command(CreateElementRequest req) {
			super(req);
		}

		/**
		 * @@generated
		 */
		protected EClass getEClassToEdit() {
			return GMFGraphPackage.eINSTANCE.getRoundedRectangle();
		};

		/**
		 * @@generated
		 */
		protected EObject getElementToEdit() {
			EObject container = ((CreateElementRequest) getRequest()).getContainer();
			if (container instanceof View) {
				container = ((View) container).getElement();
			}
			return container;
		}
	}

	/**
	 * @@generated
	 */
	protected Command getDestroyElementCommand(DestroyElementRequest req) {
		return getMSLWrapper(new DestroyElementCommand(req) {

			protected EObject getElementToDestroy() {
				View view = (View) getHost().getModel();
				EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
				if (annotation != null) {
					return view;
				}
				return super.getElementToDestroy();
			}

		});
d103 1
a103 1
			return req.getTarget() == null ? null : getCreateCompleteIncomingDiagramElement_Figure4001Command(req);
d111 4
a114 2
	protected Command getCreateCompleteIncomingDiagramElement_Figure4001Command(CreateRelationshipRequest req) {
		if (!(req.getSource() instanceof DiagramElement)) {
d117 3
a119 2
		DiagramElement element = (DiagramElement) req.getSource();
		if (element.getFigure() != null) {
d122 1
a122 1
		SetRequest setReq = new SetRequest(req.getSource(), GMFGraphPackage.eINSTANCE.getDiagramElement_Figure(), req.getTarget());
d125 1
@


1.2
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d1 10
d44 1
a44 1
		if (GMFGraphElementTypes.Rectangle_2002 == req.getElementType()) {
d48 1
a48 1
			return getMSLWrapper(new CreateRectangle_2002Command(req));
d50 1
a50 1
		if (GMFGraphElementTypes.Ellipse_2003 == req.getElementType()) {
d54 1
a54 1
			return getMSLWrapper(new CreateEllipse_2003Command(req));
d56 1
a56 1
		if (GMFGraphElementTypes.RoundedRectangle_2004 == req.getElementType()) {
d60 1
a60 1
			return getMSLWrapper(new CreateRoundedRectangle_2004Command(req));
d62 1
a62 1
		if (GMFGraphElementTypes.Polyline_2005 == req.getElementType()) {
d66 1
a66 1
			return getMSLWrapper(new CreatePolyline_2005Command(req));
d74 1
a74 1
	private static class CreateRectangle_2002Command extends CreateElementCommand {
d79 1
a79 1
		public CreateRectangle_2002Command(CreateElementRequest req) {
d105 1
a105 1
	private static class CreateEllipse_2003Command extends CreateElementCommand {
d110 1
a110 1
		public CreateEllipse_2003Command(CreateElementRequest req) {
d136 1
a136 1
	private static class CreateRoundedRectangle_2004Command extends CreateElementCommand {
d141 1
a141 1
		public CreateRoundedRectangle_2004Command(CreateElementRequest req) {
d167 1
a167 1
	private static class CreatePolyline_2005Command extends CreateElementCommand {
d172 1
a172 1
		public CreatePolyline_2005Command(CreateElementRequest req) {
d217 2
a218 2
		if (GMFGraphElementTypes.DiagramElementFigure_3001 == req.getElementType()) {
			return req.getTarget() == null ? null : getCreateCompleteIncomingDiagramElement_Figure3001Command(req);
d226 1
a226 1
	protected Command getCreateCompleteIncomingDiagramElement_Figure3001Command(CreateRelationshipRequest req) {
@

