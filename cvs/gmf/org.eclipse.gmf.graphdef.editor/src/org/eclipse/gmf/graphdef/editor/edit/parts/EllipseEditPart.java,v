head	1.28;
access;
symbols
	v20080722-1827:1.28
	v20080718-1700:1.28
	v20080718-1731:1.28
	v20080716-1642:1.28
	R2_1_maintenance:1.28.0.2
	Root_R2_1_maintenance:1.28
	R2_1_0:1.28
	v20080610-1132:1.28
	v20080603-1553:1.28
	v20080528-1052:1.28
	v20080521:1.24
	v20080516-1143:1.23
	v20080512-1200:1.19
	v20080510-0100:1.18
	v20080507-1326:1.18
	v20080501-1739:1.16
	v20080425-1959:1.16
	v20080411-0411:1.16
	v20080404-1111:1.16
	v20080322-0000:1.16
	v20080114-2222:1.14
	v20071214-1111:1.14
	v20070809-0000:1.14
	R2_0_maintenance:1.14.0.2
	R2_0:1.14
	R4_20:1.14
	v20070621-0000:1.14
	RC3_20:1.14
	v20070605-1400:1.14
	v20070601-1400:1.14
	v20070520-1200:1.13
	v20070420-1000:1.13
	v20070405-2000:1.13
	v20070405-1100:1.13
	v20070330-1300:1.13
	v20070307-0700:1.13
	v20070221-1500:1.12
	v20070208-1800:1.11
	M4_20:1.11
	v20061214-0000:1.11
	M3_20:1.11
	v20061013-1330:1.11
	M1_20:1.11
	v20060713-1700:1.11
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	v20060627-1200:1.11
	v20060616-1200:1.10
	v20060609-1400:1.10
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.7
	v20060519-0800:1.6
	v20060512-1000:1.6
	I20060512-1000:1.6
	RC2_10:1.6
	I20060505-1400:1.5
	I20060428-1300:1.3
	I20060424-0500:1.2
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.28
date	2008.05.28.12.42.32;	author ashatalin;	state Exp;
branches;
next	1.27;
commitid	67a1483d53374567;

1.27
date	2008.05.27.16.16.52;	author ashatalin;	state Exp;
branches;
next	1.26;
commitid	3565483c33f24567;

1.26
date	2008.05.27.12.28.08;	author ashatalin;	state Exp;
branches;
next	1.25;
commitid	68fd483bfe544567;

1.25
date	2008.05.23.14.30.31;	author ashatalin;	state Exp;
branches;
next	1.24;
commitid	1aec4836d5014567;

1.24
date	2008.05.19.16.33.10;	author ashatalin;	state Exp;
branches;
next	1.23;
commitid	77734831abc34567;

1.23
date	2008.05.14.17.23.29;	author ashatalin;	state Exp;
branches;
next	1.22;
commitid	412b482b200e4567;

1.22
date	2008.05.14.13.05.38;	author ashatalin;	state Exp;
branches;
next	1.21;
commitid	7a4d482ae3a14567;

1.21
date	2008.05.14.11.35.48;	author ashatalin;	state Exp;
branches;
next	1.20;
commitid	41e3482ace924567;

1.20
date	2008.05.14.11.16.58;	author ashatalin;	state Exp;
branches;
next	1.19;
commitid	377e482aca274567;

1.19
date	2008.05.12.17.40.17;	author ashatalin;	state Exp;
branches;
next	1.18;
commitid	a53482880fd4567;

1.18
date	2008.05.06.15.55.36;	author ashatalin;	state Exp;
branches;
next	1.17;
commitid	702648207f744567;

1.17
date	2008.05.06.13.02.22;	author ashatalin;	state Exp;
branches;
next	1.16;
commitid	4985482056dc4567;

1.16
date	2008.03.07.12.50.34;	author ashatalin;	state Exp;
branches;
next	1.15;
commitid	179447d13a164567;

1.15
date	2008.02.22.13.07.59;	author ashatalin;	state Exp;
branches;
next	1.14;
commitid	4c5647bec9294567;

1.14
date	2007.05.31.15.52.31;	author ashatalin;	state Exp;
branches;
next	1.13;
commitid	49f1465eef2c4567;

1.13
date	2007.03.02.15.39.20;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	717a45e845234567;

1.12
date	2007.02.09.20.08.31;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	179c45ccd4b34567;

1.11
date	2006.06.26.18.38.20;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.02.15.08.29;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.30.18.17.15;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.30.13.06.13;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.22.17.37.30;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.05.17.50.40;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.05.16.31.18;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.03.15.04.02;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.25.18.01.19;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.20.37.00;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.26;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.28
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2008 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.parts;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.draw2d.Ellipse;
import org.eclipse.draw2d.FreeformLayout;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.StackLayout;
import org.eclipse.draw2d.XYLayout;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.editpolicies.LayoutEditPolicy;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.graphdef.editor.edit.policies.EllipseCanonicalEditPolicy;
import org.eclipse.gmf.graphdef.editor.edit.policies.EllipseItemSemanticEditPolicy;
import org.eclipse.gmf.graphdef.editor.edit.polocies.FigureContainerXYLayoutEditPolicy;
import org.eclipse.gmf.graphdef.editor.sheet.AttachAdapter;
import org.eclipse.gmf.graphdef.editor.sheet.ChangeTracker;
import org.eclipse.gmf.graphdef.editor.sheet.FeatureTracker;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class EllipseEditPart extends AbstractFigureEditPart {

	/**
	 * @@generated
	 */
	public static final int VISUAL_ID = 3012;

	/**
	 * @@generated
	 */
	protected IFigure contentPane;

	/**
	 * @@generated
	 */
	protected IFigure primaryShape;

	/**
	 * @@generated
	 */
	public EllipseEditPart(View view) {
		super(view);
	}

	/**
	 * @@generated
	 */
	protected void createDefaultEditPolicies() {
		installEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new EllipseItemSemanticEditPolicy());
		installEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());
		installEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new EllipseCanonicalEditPolicy());
		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
		// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}

	/**
	 * @@generated
	 */
	protected LayoutEditPolicy createLayoutEditPolicy() {
		return new FigureContainerXYLayoutEditPolicy(getMapMode());
	}

	/**
	 * @@generated
	 */
	protected IFigure createNodeShape() {
		EllipseFigure figure = new EllipseFigure();
		figure.setUseLocalCoordinates(true);
		return primaryShape = figure;
	}

	/**
	 * @@generated
	 */
	public EllipseFigure getPrimaryShape() {
		return (EllipseFigure) primaryShape;
	}

	/**
	 * @@generated
	 */
	protected NodeFigure createNodePlate() {
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(getMapMode().DPtoLP(0), getMapMode().DPtoLP(0));
		result.setMinimumSize(new Dimension(0, 0));
		return result;
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @@generated
	 */
	protected NodeFigure createNodeFigure() {
		NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new StackLayout());
		IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}

	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @@param nodeShape instance of generated figure class
	 * @@generated
	 */
	protected IFigure setupContentPane(IFigure nodeShape) {
		if (nodeShape.getLayoutManager() == null) {
			nodeShape.setLayoutManager(new FreeformLayout() {

				public Object getConstraint(IFigure figure) {
					Object result = constraints.get(figure);
					if (result == null) {
						result = new Rectangle(0, 0, -1, -1);
					}
					return result;
				}
			});
		}
		return nodeShape; // use nodeShape itself as contentPane
	}

	/**
	 * @@generated
	 */
	public IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

	/**
	 * @@generated
	 */
	protected void handleNotificationEvent(Notification notification) {
		Object feature = notification.getFeature();
		if (NotationPackage.eINSTANCE.getSize_Width().equals(feature) || NotationPackage.eINSTANCE.getSize_Height().equals(feature) || NotationPackage.eINSTANCE.getLocation_X().equals(feature)
				|| NotationPackage.eINSTANCE.getLocation_Y().equals(feature)) {
			return;
		} else if (NotationPackage.eINSTANCE.getFillStyle_FillColor().equals(feature)) {
			return;
		} else if (NotationPackage.eINSTANCE.getLineStyle_LineColor().equals(feature)) {
			return;
		}
		super.handleNotificationEvent(notification);
	}

	/**
	 * @@generated
	 */
	public class EllipseFigure extends Ellipse {

		/**
		 * @@generated
		 */
		public EllipseFigure() {
			this.setLayoutManager(new XYLayout());
		}

		/**
		 * @@generated
		 */
		private boolean myUseLocalCoordinates = false;

		/**
		 * @@generated
		 */
		protected boolean useLocalCoordinates() {
			return myUseLocalCoordinates;
		}

		/**
		 * @@generated
		 */
		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
			myUseLocalCoordinates = useLocalCoordinates;
		}

	}

	/**
	 * @@generated
	 */
	private Collection<Adapter> myDomainElementAdapters = new ArrayList<Adapter>();

	/**
	 * @@generated
	 */
	private org.eclipse.gmf.gmfgraph.Ellipse getGmfgraphElement() {
		View view = getNotationView();
		if (view == null) {
			return null;
		}
		EObject element = view.getElement();
		if (element instanceof org.eclipse.gmf.gmfgraph.Ellipse) {
			org.eclipse.gmf.gmfgraph.Ellipse modelFigureElement = (org.eclipse.gmf.gmfgraph.Ellipse) element;
			return modelFigureElement;
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected void removeSemanticListeners() {
		org.eclipse.gmf.gmfgraph.Ellipse modelElement = getGmfgraphElement();
		if (modelElement != null) {
			modelElement.eAdapters().removeAll(myDomainElementAdapters);
			myDomainElementAdapters.clear();
		}
		super.removeSemanticListeners();
	}

	/**
	 * @@generated
	 */
	protected void setFigure(IFigure figure) {
		super.setFigure(figure);
		org.eclipse.gmf.gmfgraph.Ellipse modelElement = getGmfgraphElement();
		if (modelElement != null) {
			refreshBounds();
			refreshLayoutData();
			getPrimaryShape().setOutline(modelElement.isOutline());
			getPrimaryShape().setFill(modelElement.isFill());
			getPrimaryShape().setLineWidth(modelElement.getLineWidth());
			getPrimaryShape().setLineStyle(getLineStyle(modelElement.getLineKind()));
			getPrimaryShape().setFillXOR(modelElement.isXorFill());
			getPrimaryShape().setOutlineXOR(modelElement.isXorOutline());
			getPrimaryShape().setLayoutManager(getLayoutManager(modelElement.getLayout()));
			refreshLayoutManager();
			getPrimaryShape().setBackgroundColor(getColor(modelElement.getBackgroundColor()));
			getPrimaryShape().setForegroundColor(getColor(modelElement.getForegroundColor()));
			refreshFont();
		}
	}

	/**
	 * @@generated
	 */
	public void activate() {
		if (isActive()) {
			return;
		}
		final org.eclipse.gmf.gmfgraph.Ellipse modelElement = getGmfgraphElement();
		if (modelElement == null) {
			super.activate();
			return;
		}

		ChangeTracker refreshBoundsTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				refreshBounds();
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Location(), refreshBoundsTracker, new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE
				.getPoint_X()), new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())));
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_PreferredSize(), refreshBoundsTracker, new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE
				.getDimension_Dx()), new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())));

		ChangeTracker refreshLayoutDataTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				refreshLayoutData();
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData(), refreshLayoutDataTracker, new AttachAdapter(GMFGraphPackage.eINSTANCE
				.getXYLayoutData_TopLeft(), refreshLayoutDataTracker, new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getPoint_X()), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())), new AttachAdapter(GMFGraphPackage.eINSTANCE.getXYLayoutData_Size(), refreshLayoutDataTracker, new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getBorderLayoutData_Alignment()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getBorderLayoutData_Vertical()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_GrabExcessHorizontalSpace()), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_GrabExcessVerticalSpace()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getGridLayoutData_VerticalAlignment()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_HorizontalAlignment()), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_VerticalSpan()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getGridLayoutData_HorizontalSpan()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_HorizontalIndent()), new AttachAdapter(
				GMFGraphPackage.eINSTANCE.getGridLayoutData_SizeHint(), refreshLayoutDataTracker, new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()),
				new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy()))));

		ChangeTracker outlineTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setOutline(modelElement.isOutline());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(outlineTracker, GMFGraphPackage.eINSTANCE.getShape_Outline()));

		ChangeTracker fillTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setFill(modelElement.isFill());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(fillTracker, GMFGraphPackage.eINSTANCE.getShape_Fill()));

		ChangeTracker lineWidthTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setLineWidth(modelElement.getLineWidth());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(lineWidthTracker, GMFGraphPackage.eINSTANCE.getShape_LineWidth()));

		ChangeTracker lineStyleTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setLineStyle(getLineStyle(modelElement.getLineKind()));
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(lineStyleTracker, GMFGraphPackage.eINSTANCE.getShape_LineKind()));

		ChangeTracker fillXORTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setFillXOR(modelElement.isXorFill());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(fillXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorFill()));

		ChangeTracker outlineXORTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setOutlineXOR(modelElement.isXorOutline());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(outlineXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorOutline()));

		ChangeTracker layoutManagerTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setLayoutManager(getLayoutManager(modelElement.getLayout()));
				refreshLayoutManager();
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getLayoutable_Layout(), layoutManagerTracker, new AttachAdapter(GMFGraphPackage.eINSTANCE.getBorderLayout_Spacing(),
				layoutManagerTracker, new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE
						.getDimension_Dy())), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_Vertical()), new FeatureTracker(layoutManagerTracker,
				GMFGraphPackage.eINSTANCE.getFlowLayout_MatchMinorSize()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_ForceSingleLine()), new FeatureTracker(
				layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorAlignment()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorAlignment()),
				new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorSpacing()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE
						.getFlowLayout_MinorSpacing()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_NumColumns()), new FeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getGridLayout_EqualWidth()), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayout_Margins(), layoutManagerTracker, new FeatureTracker(
						layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())), new AttachAdapter(
						GMFGraphPackage.eINSTANCE.getGridLayout_Spacing(), layoutManagerTracker, new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()),
						new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy()))));

		ChangeTracker backgroundColorTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setBackgroundColor(getColor(modelElement.getBackgroundColor()));
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor(), backgroundColorTracker, new FeatureTracker(backgroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new FeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()), new FeatureTracker(
				backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new FeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));

		ChangeTracker foregroundColorTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setForegroundColor(getColor(modelElement.getForegroundColor()));
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor(), foregroundColorTracker, new FeatureTracker(foregroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new FeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()), new FeatureTracker(
				foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new FeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));

		ChangeTracker refreshFontTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				refreshFont();
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Font(), refreshFontTracker, new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_FaceName()), new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Height()), new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_Style())));
		modelElement.eAdapters().addAll(myDomainElementAdapters);
		super.activate();
	}

	/**
	 * @@generated
	 */
	protected void refreshBounds() {
		org.eclipse.gmf.gmfgraph.Ellipse modelElement = getGmfgraphElement();
		if (modelElement == null) {
			return;
		}
		if (modelElement.getPreferredSize() != null) {
			getFigure().setPreferredSize(getDraw2dDimension(modelElement.getPreferredSize()));
		}
		if (modelElement.getLocation() != null) {
			getFigure().setLocation(getDraw2DPoint(modelElement.getLocation()));
		}
	}

}
@


1.27
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d34 1
a34 1
import org.eclipse.gmf.graphdef.editor.sheet.MultipleTargetsFeatureTracker;
d289 4
a292 4
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Location(), refreshBoundsTracker, new MultipleTargetsFeatureTracker(refreshBoundsTracker,
				GMFGraphPackage.eINSTANCE.getPoint_X()), new MultipleTargetsFeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())));
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_PreferredSize(), refreshBoundsTracker, new MultipleTargetsFeatureTracker(refreshBoundsTracker,
				GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())));
d301 11
a311 13
				.getXYLayoutData_TopLeft(), refreshLayoutDataTracker, new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getPoint_X()),
				new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())), new AttachAdapter(GMFGraphPackage.eINSTANCE.getXYLayoutData_Size(),
				refreshLayoutDataTracker, new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(
						refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getBorderLayoutData_Alignment()), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getBorderLayoutData_Vertical()),
				new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_GrabExcessHorizontalSpace()), new MultipleTargetsFeatureTracker(
						refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_GrabExcessVerticalSpace()), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker,
						GMFGraphPackage.eINSTANCE.getGridLayoutData_VerticalAlignment()), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
						.getGridLayoutData_HorizontalAlignment()), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_VerticalSpan()),
				new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_HorizontalSpan()), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker,
						GMFGraphPackage.eINSTANCE.getGridLayoutData_HorizontalIndent()), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayoutData_SizeHint(), refreshLayoutDataTracker,
						new MultipleTargetsFeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(refreshLayoutDataTracker,
								GMFGraphPackage.eINSTANCE.getDimension_Dy()))));
d319 1
a319 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(outlineTracker, GMFGraphPackage.eINSTANCE.getShape_Outline()));
d327 1
a327 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(fillTracker, GMFGraphPackage.eINSTANCE.getShape_Fill()));
d335 1
a335 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(lineWidthTracker, GMFGraphPackage.eINSTANCE.getShape_LineWidth()));
d343 1
a343 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(lineStyleTracker, GMFGraphPackage.eINSTANCE.getShape_LineKind()));
d351 1
a351 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(fillXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorFill()));
d359 1
a359 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(outlineXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorOutline()));
d369 10
a378 12
				layoutManagerTracker, new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getDimension_Dy())), new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_Vertical()),
				new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MatchMinorSize()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getFlowLayout_ForceSingleLine()), new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorAlignment()),
				new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorAlignment()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getFlowLayout_MajorSpacing()), new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorSpacing()),
				new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_NumColumns()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getGridLayout_EqualWidth()), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayout_Margins(), layoutManagerTracker,
						new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
								GMFGraphPackage.eINSTANCE.getDimension_Dy())), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayout_Spacing(), layoutManagerTracker,
						new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
								GMFGraphPackage.eINSTANCE.getDimension_Dy()))));
d386 3
a388 4
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor(), backgroundColorTracker, new MultipleTargetsFeatureTracker(backgroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new MultipleTargetsFeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()),
				new MultipleTargetsFeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new MultipleTargetsFeatureTracker(backgroundColorTracker,
						GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));
d396 3
a398 4
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor(), foregroundColorTracker, new MultipleTargetsFeatureTracker(foregroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new MultipleTargetsFeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()),
				new MultipleTargetsFeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new MultipleTargetsFeatureTracker(foregroundColorTracker,
						GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));
d406 3
a408 3
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Font(), refreshFontTracker, new MultipleTargetsFeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_FaceName()), new MultipleTargetsFeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Height()), new MultipleTargetsFeatureTracker(
				refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Style())));
@


1.26
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d34 1
a34 1
import org.eclipse.gmf.graphdef.editor.sheet.FeatureTracker;
d289 4
a292 4
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Location(), refreshBoundsTracker, new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE
				.getPoint_X()), new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())));
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_PreferredSize(), refreshBoundsTracker, new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE
				.getDimension_Dx()), new FeatureTracker(refreshBoundsTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())));
d301 13
a313 11
				.getXYLayoutData_TopLeft(), refreshLayoutDataTracker, new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getPoint_X()), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getPoint_Y())), new AttachAdapter(GMFGraphPackage.eINSTANCE.getXYLayoutData_Size(), refreshLayoutDataTracker, new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getBorderLayoutData_Alignment()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getBorderLayoutData_Vertical()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_GrabExcessHorizontalSpace()), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_GrabExcessVerticalSpace()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getGridLayoutData_VerticalAlignment()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_HorizontalAlignment()), new FeatureTracker(
				refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_VerticalSpan()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE
				.getGridLayoutData_HorizontalSpan()), new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getGridLayoutData_HorizontalIndent()), new AttachAdapter(
				GMFGraphPackage.eINSTANCE.getGridLayoutData_SizeHint(), refreshLayoutDataTracker, new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()),
				new FeatureTracker(refreshLayoutDataTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy()))));
d321 1
a321 1
		myDomainElementAdapters.add(new FeatureTracker(outlineTracker, GMFGraphPackage.eINSTANCE.getShape_Outline()));
d329 1
a329 1
		myDomainElementAdapters.add(new FeatureTracker(fillTracker, GMFGraphPackage.eINSTANCE.getShape_Fill()));
d337 1
a337 1
		myDomainElementAdapters.add(new FeatureTracker(lineWidthTracker, GMFGraphPackage.eINSTANCE.getShape_LineWidth()));
d345 1
a345 1
		myDomainElementAdapters.add(new FeatureTracker(lineStyleTracker, GMFGraphPackage.eINSTANCE.getShape_LineKind()));
d353 1
a353 1
		myDomainElementAdapters.add(new FeatureTracker(fillXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorFill()));
d361 1
a361 1
		myDomainElementAdapters.add(new FeatureTracker(outlineXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorOutline()));
d371 12
a382 10
				layoutManagerTracker, new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE
						.getDimension_Dy())), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_Vertical()), new FeatureTracker(layoutManagerTracker,
				GMFGraphPackage.eINSTANCE.getFlowLayout_MatchMinorSize()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_ForceSingleLine()), new FeatureTracker(
				layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorAlignment()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorAlignment()),
				new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorSpacing()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE
						.getFlowLayout_MinorSpacing()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_NumColumns()), new FeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getGridLayout_EqualWidth()), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayout_Margins(), layoutManagerTracker, new FeatureTracker(
						layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())), new AttachAdapter(
						GMFGraphPackage.eINSTANCE.getGridLayout_Spacing(), layoutManagerTracker, new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()),
						new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy()))));
d390 4
a393 3
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor(), backgroundColorTracker, new FeatureTracker(backgroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new FeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()), new FeatureTracker(
				backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new FeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));
d401 4
a404 3
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor(), foregroundColorTracker, new FeatureTracker(foregroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new FeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()), new FeatureTracker(
				foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new FeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));
d412 3
a414 3
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Font(), refreshFontTracker, new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_FaceName()), new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Height()), new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_Style())));
@


1.25
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d25 1
a28 1
import org.eclipse.gmf.gmfgraph.Shape;
d31 1
a31 1
import org.eclipse.gmf.graphdef.editor.edit.polocies.DomainBasedXYLayoutEditPolicy;
d88 1
a88 1
		return new DomainBasedXYLayoutEditPolicy(getMapMode());
d222 8
a229 4
	private org.eclipse.gmf.gmfgraph.Ellipse getModelFigureElement() {
		Shape shape = getShape();
		if (shape instanceof org.eclipse.gmf.gmfgraph.Ellipse) {
			org.eclipse.gmf.gmfgraph.Ellipse modelFigureElement = (org.eclipse.gmf.gmfgraph.Ellipse) shape;
d239 1
a239 1
		org.eclipse.gmf.gmfgraph.Ellipse modelElement = (org.eclipse.gmf.gmfgraph.Ellipse) getModelFigureElement();
d252 1
a252 1
		org.eclipse.gmf.gmfgraph.Ellipse modelElement = (org.eclipse.gmf.gmfgraph.Ellipse) getModelFigureElement();
d277 1
a277 1
		final org.eclipse.gmf.gmfgraph.Ellipse modelElement = (org.eclipse.gmf.gmfgraph.Ellipse) getModelFigureElement();
d417 1
a417 1
		org.eclipse.gmf.gmfgraph.Ellipse modelElement = (org.eclipse.gmf.gmfgraph.Ellipse) getModelFigureElement();
@


1.24
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@a189 1

@


1.23
log
@Calling handleMajorSemanticChange() on any layoutManager modifications.
It's necessary to populate new instance of LayoutManager with proper layout constraints for each child figure.
@
text
@a14 1
import java.util.Collections;
a15 6
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Status;
a24 2
import org.eclipse.emf.transaction.Transaction;
import org.eclipse.emf.workspace.AbstractEMFOperation;
a26 3
import org.eclipse.gmf.gmfgraph.ColorConstants;
import org.eclipse.gmf.gmfgraph.ConstantColor;
import org.eclipse.gmf.gmfgraph.GMFGraphFactory;
a27 1
import org.eclipse.gmf.gmfgraph.RGBColor;
a31 1
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;
a34 1
import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
a39 2
import org.eclipse.gmf.runtime.notation.FillStyle;
import org.eclipse.gmf.runtime.notation.LineStyle;
d173 4
d261 3
a375 1
		modelElement.eAdapters().addAll(myDomainElementAdapters);
d377 4
a380 25
		View view = getNotationView();
		final FillStyle theFillStyle = (FillStyle) view.getStyle(NotationPackage.eINSTANCE.getFillStyle());
		if (modelElement.getBackgroundColor() != null) {
			final int rgbColor;
			if (modelElement.getBackgroundColor() instanceof RGBColor) {
				RGBColor modelColor = (RGBColor) modelElement.getBackgroundColor();
				rgbColor = (modelColor.getRed() & 0xFF) | ((modelColor.getGreen() & 0xFF) << 8) | ((modelColor.getBlue() & 0xFF) << 16);
			} else {
				ConstantColor modelColor = (ConstantColor) modelElement.getBackgroundColor();
				rgbColor = getRgbColor(modelColor);
			}
			if (rgbColor != -1 && theFillStyle.getFillColor() != rgbColor) {
				AbstractEMFOperation setColorOperation = new AbstractEMFOperation(getEditingDomain(),
						"Synchronizing view Background color with the model", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

					protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
						theFillStyle.setFillColor(rgbColor);
						return Status.OK_STATUS;
					}
				};
				try {
					setColorOperation.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Background color with the model", e); //$NON-NLS-1$
				}
d382 9
a390 25
		}
		final LineStyle theLineStyle = (LineStyle) view.getStyle(NotationPackage.eINSTANCE.getLineStyle());
		if (modelElement.getForegroundColor() != null) {
			final int rgbColor;
			if (modelElement.getForegroundColor() instanceof RGBColor) {
				RGBColor modelColor = (RGBColor) modelElement.getForegroundColor();
				rgbColor = (modelColor.getRed() & 0xFF) | ((modelColor.getGreen() & 0xFF) << 8) | ((modelColor.getBlue() & 0xFF) << 16);
			} else {
				ConstantColor modelColor = (ConstantColor) modelElement.getForegroundColor();
				rgbColor = getRgbColor(modelColor);
			}
			if (rgbColor != -1 && theLineStyle.getLineColor() != rgbColor) {
				AbstractEMFOperation setColorOperation = new AbstractEMFOperation(getEditingDomain(),
						"Synchronizing view Foreground color with the model", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

					protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
						theLineStyle.setLineColor(rgbColor);
						return Status.OK_STATUS;
					}
				};
				try {
					setColorOperation.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Foreground color with the model", e); //$NON-NLS-1$
				}
d392 4
a395 1
		}
d397 1
a397 2
		final FillStyle theFillStyle1 = (FillStyle) view.getStyle(NotationPackage.eINSTANCE.getFillStyle());
		addListenerFilter("FillStyleListener", new NotificationListener() {
d399 2
a400 27
			public void notifyChanged(final Notification notification) {
				try {
					new AbstractEMFOperation(getEditingDomain(), "Synchronizing model Background color with the view", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

						protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
							FillStyle theFillStyle = (FillStyle) notification.getNotifier();
							if (notification.getFeatureID(FillStyle.class) == NotationPackage.FILL_STYLE__FILL_COLOR) {
								int color = theFillStyle.getFillColor();
								RGBColor modelColor;
								if (modelElement.getBackgroundColor() instanceof RGBColor) {
									modelColor = (RGBColor) modelElement.getBackgroundColor();
								} else {
									modelColor = GMFGraphFactory.eINSTANCE.createRGBColor();
									modelElement.setBackgroundColor(modelColor);
								}
								if (modelColor.getRed() != (color & 0x000000FF) || modelColor.getGreen() != (color & 0x0000FF00) >> 8 || modelColor.getBlue() != (color & 0x00FF0000) >> 16) {
									modelColor.setRed(color & 0x000000FF);
									modelColor.setGreen((color & 0x0000FF00) >> 8);
									modelColor.setBlue((color & 0x00FF0000) >> 16);
								}
							}
							return Status.OK_STATUS;
						}
					}.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize model Background color with the view", e); //$NON-NLS-1$
				}
d402 5
a406 34
		}, theFillStyle1);
		final LineStyle theLineStyle1 = (LineStyle) view.getStyle(NotationPackage.eINSTANCE.getLineStyle());
		addListenerFilter("LineStyleListener", new NotificationListener() {

			public void notifyChanged(final Notification notification) {
				try {
					new AbstractEMFOperation(getEditingDomain(), "Synchronizing model Foreground color with the view", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

						protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
							LineStyle theLineStyle = (LineStyle) notification.getNotifier();
							if (notification.getFeatureID(LineStyle.class) == NotationPackage.LINE_STYLE__LINE_COLOR) {
								int color = theLineStyle.getLineColor();
								RGBColor modelColor;
								if (modelElement.getForegroundColor() instanceof RGBColor) {
									modelColor = (RGBColor) modelElement.getForegroundColor();
								} else {
									modelColor = GMFGraphFactory.eINSTANCE.createRGBColor();
									modelElement.setForegroundColor(modelColor);
								}
								if (modelColor.getRed() != (color & 0x000000FF) || modelColor.getGreen() != (color & 0x0000FF00) >> 8 || modelColor.getBlue() != (color & 0x00FF0000) >> 16) {
									modelColor.setRed(color & 0x000000FF);
									modelColor.setGreen((color & 0x0000FF00) >> 8);
									modelColor.setBlue((color & 0x00FF0000) >> 16);
								}
							}
							return Status.OK_STATUS;
						}
					}.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize model Foreground color with the view", e); //$NON-NLS-1$
				}
			}
		}, theLineStyle1);

a425 71
	/**
	 * @@generated
	 */
	public static int getRgbColor(ConstantColor modelColor) {
		final int rgbColor;
		switch (modelColor.getValue().getValue()) {
		case ColorConstants.WHITE: {
			rgbColor = org.eclipse.draw2d.ColorConstants.white.getRGB().hashCode();
			break;
		}
		case ColorConstants.BLACK: {
			rgbColor = org.eclipse.draw2d.ColorConstants.black.getRGB().hashCode();
			break;
		}
		case ColorConstants.LIGHT_GRAY: {
			rgbColor = org.eclipse.draw2d.ColorConstants.lightGray.getRGB().hashCode();
			break;
		}
		case ColorConstants.GRAY: {
			rgbColor = org.eclipse.draw2d.ColorConstants.gray.getRGB().hashCode();
			break;
		}
		case ColorConstants.DARK_GRAY: {
			rgbColor = org.eclipse.draw2d.ColorConstants.darkGray.getRGB().hashCode();
			break;
		}
		case ColorConstants.RED: {
			rgbColor = org.eclipse.draw2d.ColorConstants.red.getRGB().hashCode();
			break;
		}
		case ColorConstants.ORANGE: {
			rgbColor = org.eclipse.draw2d.ColorConstants.orange.getRGB().hashCode();
			break;
		}
		case ColorConstants.YELLOW: {
			rgbColor = org.eclipse.draw2d.ColorConstants.yellow.getRGB().hashCode();
			break;
		}
		case ColorConstants.GREEN: {
			rgbColor = org.eclipse.draw2d.ColorConstants.green.getRGB().hashCode();
			break;
		}
		case ColorConstants.LIGHT_GREEN: {
			rgbColor = org.eclipse.draw2d.ColorConstants.lightGreen.getRGB().hashCode();
			break;
		}
		case ColorConstants.DARK_GREEN: {
			rgbColor = org.eclipse.draw2d.ColorConstants.darkGreen.getRGB().hashCode();
			break;
		}
		case ColorConstants.CYAN: {
			rgbColor = org.eclipse.draw2d.ColorConstants.cyan.getRGB().hashCode();
			break;
		}
		case ColorConstants.LIGHT_BLUE: {
			rgbColor = org.eclipse.draw2d.ColorConstants.lightBlue.getRGB().hashCode();
			break;
		}
		case ColorConstants.BLUE: {
			rgbColor = org.eclipse.draw2d.ColorConstants.blue.getRGB().hashCode();
			break;
		}
		case ColorConstants.DARK_BLUE: {
			rgbColor = org.eclipse.draw2d.ColorConstants.darkBlue.getRGB().hashCode();
			break;
		}
		default:
			rgbColor = -1;
		}
		return rgbColor;
	}
@


1.22
log
@- Removing unnecessary borders around Top-level figures from FigureGallery
- copyrights updated.
@
text
@d273 1
d372 1
@


1.21
log
@Using standard figure accessor instead of private variable.
@
text
@d2 1
a2 1
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
@


1.20
log
@- Migrating to new .gmfgen model
- Using (0,0) as a minimum size for DefaultNode to make resize feedback minimum size == (0,0)
@
text
@a113 1
		myFigure = figure;
a230 5
	private EllipseFigure myFigure;

	/**
	 * @@generated
	 */
d266 7
a272 7
			myFigure.setOutline(modelElement.isOutline());
			myFigure.setFill(modelElement.isFill());
			myFigure.setLineWidth(modelElement.getLineWidth());
			myFigure.setLineStyle(getLineStyle(modelElement.getLineKind()));
			myFigure.setFillXOR(modelElement.isXorFill());
			myFigure.setOutlineXOR(modelElement.isXorOutline());
			myFigure.setLayoutManager(getLayoutManager(modelElement.getLayout()));
d322 1
a322 1
				myFigure.setOutline(modelElement.isOutline());
d330 1
a330 1
				myFigure.setFill(modelElement.isFill());
d338 1
a338 1
				myFigure.setLineWidth(modelElement.getLineWidth());
d346 1
a346 1
				myFigure.setLineStyle(getLineStyle(modelElement.getLineKind()));
d354 1
a354 1
				myFigure.setFillXOR(modelElement.isXorFill());
d362 1
a362 1
				myFigure.setOutlineXOR(modelElement.isXorOutline());
d370 1
a370 1
				myFigure.setLayoutManager(getLayoutManager(modelElement.getLayout()));
@


1.19
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@d28 1
d130 1
@


1.18
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@d23 1
a23 1
import org.eclipse.draw2d.Figure;
a25 1
import org.eclipse.draw2d.LayoutManager;
a27 1
import org.eclipse.draw2d.geometry.Point;
a30 1
import org.eclipse.emf.common.notify.impl.AdapterImpl;
a32 1
import org.eclipse.gef.EditPart;
a34 1
import org.eclipse.gmf.gmfgraph.AbstractFigure;
a36 2
import org.eclipse.gmf.gmfgraph.Dimension;
import org.eclipse.gmf.gmfgraph.Ellipse;
a38 1
import org.eclipse.gmf.gmfgraph.Layoutable;
d40 1
a40 1
import org.eclipse.gmf.gmfgraph.XYLayoutData;
d43 1
a48 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;
a51 2
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy;
a53 1
import org.eclipse.gmf.runtime.notation.Bounds;
a55 1
import org.eclipse.gmf.runtime.notation.Node;
d104 1
a104 25
		XYLayoutEditPolicy lep = new XYLayoutEditPolicy() {

			protected EditPolicy createChildEditPolicy(EditPart child) {
				EditPolicy result = super.createChildEditPolicy(child);
				if (result == null) {
					return new ResizableShapeEditPolicy();
				}
				return result;
			}

			protected Point getLayoutOrigin() {
				return ((GraphicalEditPart) getHost()).getContentPane().getClientArea().getLocation();
			}

			protected Rectangle getCurrentConstraintFor(org.eclipse.gef.GraphicalEditPart child) {
				Rectangle result = super.getCurrentConstraintFor(child);
				if (result == null) {
					IFigure fig = child.getFigure();
					result = fig.getBounds().getCopy();
				}
				return result;
			}

		};
		return lep;
a113 27
		Ellipse modelElement = (Ellipse) ((View) getModel()).getElement();
		if (modelElement != null) {
			{
				layoutDataChanged(modelElement.getLayoutData());
			}
			{
				layoutChanged(modelElement.getLayout());
			}
			{
				myFigure.setOutline(modelElement.isOutline());
			}
			{
				myFigure.setFill(modelElement.isFill());
			}
			{
				myFigure.setLineWidth(modelElement.getLineWidth());
			}
			{
				myFigure.setLineStyle(getLineStyle(modelElement.getLineKind()));
			}
			{
				myFigure.setFillXOR(modelElement.isXorFill());
			}
			{
				myFigure.setOutlineXOR(modelElement.isXorOutline());
			}
		}
a128 1
		myNodeFigure = result;
d184 13
a196 1
	public class EllipseFigure extends org.eclipse.draw2d.Ellipse {
a231 1
	// TODO: use myFigure?
d235 1
a235 1
	protected Figure myNodeFigure;
d240 8
a247 1
	private Collection<Adapter> myDomainElementAdapters = new ArrayList<Adapter>();
d253 2
a254 3
		View view = (View) getModel();
		if (view.getElement() != null) {
			Ellipse modelElement = (Ellipse) view.getElement();
d264 19
d287 2
a288 2
		View view = (View) getModel();
		if (view.getElement() == null) {
d293 1
a293 2
		final Ellipse modelElement = (Ellipse) view.getElement();
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData(), new AdapterImpl() {
d295 2
a296 5
			public void notifyChanged(Notification msg) {
				if (msg.isTouch()) {
					return;
				}
				layoutDataChanged(modelElement.getLayoutData());
d298 7
a304 2
		}));
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getLayoutable_Layout(), new AdapterImpl() {
d306 2
a307 5
			public void notifyChanged(Notification msg) {
				if (msg.isTouch()) {
					return;
				}
				layoutChanged(modelElement.getLayout());
d309 15
a323 2
		}));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d328 4
a331 2
		}, GMFGraphPackage.eINSTANCE.getShape_Outline()));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d336 4
a339 2
		}, GMFGraphPackage.eINSTANCE.getShape_Fill()));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d344 4
a347 2
		}, GMFGraphPackage.eINSTANCE.getShape_LineWidth()));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d352 4
a355 2
		}, GMFGraphPackage.eINSTANCE.getShape_LineKind()));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d360 4
a363 2
		}, GMFGraphPackage.eINSTANCE.getShape_XorFill()));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d368 2
a369 2
		}, GMFGraphPackage.eINSTANCE.getShape_XorOutline()));
		modelElement.eAdapters().addAll(myDomainElementAdapters);
d371 1
a371 22
		final Bounds bounds = (Bounds) ((Node) view).getLayoutConstraint();
		final int sizeX;
		final int sizeY;
		if (modelElement.getPreferredSize() != null) {
			sizeX = getMapMode().DPtoLP(modelElement.getPreferredSize().getDx());
			sizeY = getMapMode().DPtoLP(modelElement.getPreferredSize().getDy());
		} else {
			sizeX = getMapMode().DPtoLP(20);
			sizeY = getMapMode().DPtoLP(20);
		}
		final int locationX;
		final int locationY;
		if (modelElement.getLocation() != null) {
			locationX = getMapMode().DPtoLP(modelElement.getLocation().getX());
			locationY = getMapMode().DPtoLP(modelElement.getLocation().getY());
		} else {
			locationX = bounds.getX();
			locationY = bounds.getY();
		}
		if (sizeX != bounds.getWidth() || sizeY != bounds.getHeight() || locationX != bounds.getX() || locationY != bounds.getY()) {
			try {
				new AbstractEMFOperation(getEditingDomain(), "Synchronizing view size with the model", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
d373 2
a374 10
					protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
						bounds.setX(locationX);
						bounds.setY(locationY);
						bounds.setWidth(sizeX);
						bounds.setHeight(sizeY);
						return Status.OK_STATUS;
					}
				}.execute(new NullProgressMonitor(), null);
			} catch (ExecutionException e) {
				GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view size with the model", e); //$NON-NLS-1$			
d376 13
a388 84
		}
		addListenerFilter("BoundsListener", new NotificationListener() {

			public void notifyChanged(final Notification notification) {
				try {
					new AbstractEMFOperation(getEditingDomain(), "Synchronizing model size with the view", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

						protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
							Bounds bounds = (Bounds) notification.getNotifier();
							Dimension dim = modelElement.getPreferredSize();
							if (dim == null) {
								dim = GMFGraphFactory.eINSTANCE.createDimension();
								modelElement.setPreferredSize(dim);
							}
							org.eclipse.gmf.gmfgraph.Point location = modelElement.getLocation();
							if (location == null) {
								location = GMFGraphFactory.eINSTANCE.createPoint();
								modelElement.setLocation(location);
							}

							int x = getMapMode().LPtoDP(bounds.getX());
							int y = getMapMode().LPtoDP(bounds.getY());
							int width = getMapMode().LPtoDP(bounds.getWidth());
							int height = getMapMode().LPtoDP(bounds.getHeight());
							if (location.getX() != x || location.getY() != y) {
								location.setX(x);
								location.setY(y);
							}
							if (dim.getDx() != width || dim.getDy() != height) {
								dim.setDx(width);
								dim.setDy(height);
							}

							myNodeFigure.setPreferredSize(bounds.getWidth(), bounds.getHeight());
							myNodeFigure.setLocation(new Point(bounds.getX(), bounds.getY()));

							if (modelElement.getLayoutData() instanceof XYLayoutData
									|| (modelElement.eContainer() instanceof Layoutable && ((Layoutable) modelElement.eContainer()).getLayout() instanceof org.eclipse.gmf.gmfgraph.XYLayout)) {
								XYLayoutData xyLayoutData = (XYLayoutData) modelElement.getLayoutData();
								if (xyLayoutData == null) {
									xyLayoutData = GMFGraphFactory.eINSTANCE.createXYLayoutData();
									modelElement.setLayoutData(xyLayoutData);
									xyLayoutData.setTopLeft(GMFGraphFactory.eINSTANCE.createPoint());
									xyLayoutData.getTopLeft().setX(0);
									xyLayoutData.getTopLeft().setY(0);
									xyLayoutData.setSize(GMFGraphFactory.eINSTANCE.createDimension());
									xyLayoutData.getSize().setDx(40);
									xyLayoutData.getSize().setDy(40);
								}
								org.eclipse.gmf.gmfgraph.Point topLeft;
								if (xyLayoutData.getTopLeft() != null) {
									topLeft = xyLayoutData.getTopLeft();
								} else {
									topLeft = GMFGraphFactory.eINSTANCE.createPoint();
									xyLayoutData.setTopLeft(topLeft);
								}
								if (topLeft.getX() != location.getX() || topLeft.getY() != location.getY()) {
									topLeft.setX(location.getX());
									topLeft.setY(location.getY());
								}

								Dimension size;
								if (xyLayoutData.getSize() != null) {
									size = xyLayoutData.getSize();
								} else {
									size = GMFGraphFactory.eINSTANCE.createDimension();
									xyLayoutData.setSize(size);
								}
								if (size.getDx() != dim.getDx() || size.getDy() != dim.getDy()) {
									size.setDx(dim.getDx());
									size.setDy(dim.getDy());
								}
							}
							return Status.OK_STATUS;
						}
					}.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize model size with the view", e); //$NON-NLS-1$			
				}
				if (getRoot() != null) {
					handleMajorSemanticChange();
				}
			}
		}, bounds);
d390 1
a514 14
	protected LayoutManager getFigureLayoutManager() {
		return myFigure.getLayoutManager();
	}

	/**
	 * @@generated
	 */
	protected void setFigureLayoutManager(LayoutManager layoutManager) {
		myFigure.setLayoutManager(layoutManager);
	}

	/**
	 * @@generated
	 */
d516 9
a524 6
		if (((View) getParent().getModel()).getElement() instanceof AbstractFigure) {
			int width = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getSize_Width())).intValue();
			int height = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getSize_Height())).intValue();
			myNodeFigure.setPreferredSize(new org.eclipse.draw2d.geometry.Dimension(width, height));
		} else {
			super.refreshBounds();
@


1.17
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@d325 3
d334 3
@


1.16
log
@Updating with new figures code + setting proper layout for diahram elements
@
text
@d13 2
d28 1
d31 1
d33 1
a47 1
import org.eclipse.gmf.gmfgraph.XYLayout;
d52 3
d255 1
a255 1
			this.setLayoutManager(new org.eclipse.draw2d.XYLayout());
d284 1
d293 18
d322 1
d324 1
a324 16
		final NotificationListener Layoutable_LayoutData_PropertiesListener = new NotificationListener() {

			public void notifyChanged(Notification notification) {
				layoutDataChanged(modelElement.getLayoutData());
			}
		};
		if (modelElement.getLayoutData() != null) {
			addListenerFilter("Layoutable_LayoutData_PropertiesListener", Layoutable_LayoutData_PropertiesListener, modelElement.getLayoutData());
		}
		addListenerFilter("Layoutable_LayoutData_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				removeListenerFilter("Layoutable_LayoutData_PropertiesListener");
				if (modelElement.getLayoutData() != null) {
					addListenerFilter("Layoutable_LayoutData_PropertiesListener", Layoutable_LayoutData_PropertiesListener, modelElement.getLayoutData());
				}
d327 2
a328 12
		}, modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData());

		final NotificationListener Layoutable_Layout_PropertiesListener = new NotificationListener() {

			public void notifyChanged(Notification notification) {
				layoutChanged(modelElement.getLayout());
			}
		};
		if (modelElement.getLayout() != null) {
			addListenerFilter("Layoutable_Layout_PropertiesListener", Layoutable_Layout_PropertiesListener, modelElement.getLayout());
		}
		addListenerFilter("Layoutable_Layout_Listener", new NotificationListener() {
d330 1
a330 5
			public void notifyChanged(Notification notification) {
				removeListenerFilter("Layoutable_Layout_PropertiesListener");
				if (modelElement.getLayout() != null) {
					addListenerFilter("Layoutable_Layout_PropertiesListener", Layoutable_Layout_PropertiesListener, modelElement.getLayout());
				}
d333 2
a334 3
		}, modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_Layout());

		addListenerFilter("Shape_Outline_Listener", new NotificationListener() {
d336 1
a336 1
			public void notifyChanged(Notification notification) {
d339 2
a340 1
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_Outline());
d342 1
a342 3
		addListenerFilter("Shape_Fill_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
d345 2
a346 3
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_Fill());

		addListenerFilter("Shape_LineWidth_Listener", new NotificationListener() {
d348 1
a348 1
			public void notifyChanged(Notification notification) {
d351 2
a352 1
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_LineWidth());
d354 1
a354 3
		addListenerFilter("Shape_LineKind_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
d357 2
a358 3
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_LineKind());

		addListenerFilter("Shape_XorFill_Listener", new NotificationListener() {
d360 1
a360 1
			public void notifyChanged(Notification notification) {
d363 2
a364 1
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_XorFill());
d366 1
a366 3
		addListenerFilter("Shape_XorOutline_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
d369 2
a370 1
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_XorOutline());
d443 1
a443 1
									|| (modelElement.eContainer() instanceof Layoutable && ((Layoutable) modelElement.eContainer()).getLayout() instanceof XYLayout)) {
a709 1

@


1.15
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@a49 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
@


1.14
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d50 1
a96 1

d185 1
a185 1
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(getMapMode().DPtoLP(40), getMapMode().DPtoLP(40));
d242 34
a277 1
// TODO: use myFigure?
a718 34
	/**
	 * @@generated
	 */
	public class EllipseFigure extends org.eclipse.draw2d.Ellipse {

		/**
		 * @@generated
		 */
		public EllipseFigure() {

			this.setLayoutManager(new org.eclipse.draw2d.XYLayout());
		}

		/**
		 * @@generated
		 */
		private boolean myUseLocalCoordinates = false;

		/**
		 * @@generated
		 */
		protected boolean useLocalCoordinates() {
			return myUseLocalCoordinates;
		}

		/**
		 * @@generated
		 */
		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
			myUseLocalCoordinates = useLocalCoordinates;
		}

	}

@


1.13
log
@[176026] akarjakina - Fix notation background and foreground colors update
[173499] akarjakina - Add custom form-based property sections fro figure attributes
@
text
@d3 7
a9 7
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d34 1
a38 1
import org.eclipse.gmf.gmfgraph.FigureMarker;
d41 1
d72 1
a72 1
	public static final int VISUAL_ID = 3003;
d102 2
d185 1
a185 1
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(getMapMode().DPtoLP(0), getMapMode().DPtoLP(0));
d193 2
a194 2
	 * Body of this method does not depend on settings in generation model so
	 * you may safely remove <i>generated</i> tag and modify it.
d208 3
a210 5
	 * Default implementation treats passed figure as content pane. Respects
	 * layout one may have set for generated figure.
	 * 
	 * @@param nodeShape
	 *            instance of generated figure class
d244 1
a244 1
	// TODO: use myFigure?
d417 2
a418 1
							if (modelElement.getLayoutData() instanceof XYLayoutData || (modelElement.getParent() != null && modelElement.getParent().getLayout() instanceof XYLayout)) {
d605 1
a605 1
		if (((View) getParent().getModel()).getElement() instanceof FigureMarker) {
d696 1
a696 11
			org.eclipse.draw2d.XYLayout myGenLayoutManager = new org.eclipse.draw2d.XYLayout();

			this.setLayoutManager(myGenLayoutManager);

			createContents();
		}

		/**
		 * @@generated
		 */
		private void createContents() {
@


1.12
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@d34 1
d57 2
a60 1
import org.eclipse.gmf.runtime.notation.ShapeStyle;
d190 2
a191 2
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
d205 5
a209 3
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @@param nodeShape instance of generated figure class
d464 1
a464 1
		final ShapeStyle shapeStyle = (ShapeStyle) view.getStyle(NotationPackage.eINSTANCE.getShapeStyle());
d472 1
a472 10
				switch (modelColor.getValue().getValue()) {
				/*
				 case <nextValue>: {
				 rgbColor = org.eclipse.draw2d.ColorConstants.<nextColorLiteral.getName()>.getRGB().hashCode();
				 break;
				 }
				 */
				default:
					rgbColor = -1;
				}
d474 1
a474 1
			if (rgbColor != -1 && shapeStyle.getFillColor() != rgbColor) {
d479 1
a479 1
						shapeStyle.setFillColor(rgbColor);
d486 1
a486 1
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Background background color with the model", e); //$NON-NLS-1$
d490 1
d498 1
a498 10
				switch (modelColor.getValue().getValue()) {
				/*
				 case <nextValue>: {
				 rgbColor = org.eclipse.draw2d.ColorConstants.<nextColorLiteral.getName()>.getRGB().hashCode();
				 break;
				 }
				 */
				default:
					rgbColor = -1;
				}
d500 1
a500 1
			if (rgbColor != -1 && shapeStyle.getLineColor() != rgbColor) {
d505 1
a505 1
						shapeStyle.setLineColor(rgbColor);
d512 1
a512 1
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Foreground background color with the model", e); //$NON-NLS-1$
d516 3
a518 1
		addListenerFilter("ShapeStyleListener", new NotificationListener() {
d522 1
a522 1
					new AbstractEMFOperation(getEditingDomain(), "Synchronizing model size with the view", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
d525 3
a527 4
							ShapeStyle shapeStyle = (ShapeStyle) notification.getNotifier();
							switch (notification.getFeatureID(ShapeStyle.class)) {
							case NotationPackage.SHAPE_STYLE__FILL_COLOR: {
								int color = shapeStyle.getFillColor();
a539 1
								break;
d541 19
a559 2
							case NotationPackage.SHAPE_STYLE__LINE_COLOR: {
								int color = shapeStyle.getLineColor();
a571 2
								break;
							}
d577 1
a577 1
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize model size with the view", e); //$NON-NLS-1$			
d580 2
a581 1
		}, shapeStyle);
d615 72
@


1.11
log
@Updating templates + Correcting XYLayoutData creation strategy (default value)
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
a15 1

a20 1

d26 1
a26 1

a27 1

a28 1

a29 1

a30 1

a32 1

a33 1

a39 1
import org.eclipse.gmf.gmfgraph.Point;
a42 1

a43 1
import org.eclipse.gmf.graphdef.editor.edit.policies.EllipseGraphicalNodeEditPolicy;
a44 1

a45 1

a46 1

a47 1

a52 1

a54 1

d79 105
a183 1
	private EllipseFigure myFigure;
a184 1
	// TODO: use myFigure?
d186 5
d193 8
a200 1
	protected Figure myNodeFigure;
d203 3
d208 15
a222 1
	protected IFigure primaryShape;
d227 5
a231 2
	public EllipseEditPart(View view) {
		super(view);
d237 11
d390 1
a390 1
							Point location = modelElement.getLocation();
d410 1
a410 1
							myNodeFigure.setLocation(new org.eclipse.draw2d.geometry.Point(bounds.getX(), bounds.getY()));
d424 1
a424 1
								Point topLeft;
d585 2
a586 8
	protected void createDefaultEditPolicies() {
		installEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new EllipseItemSemanticEditPolicy());
		installEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new EllipseGraphicalNodeEditPolicy());
		installEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());
		installEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new EllipseCanonicalEditPolicy());
		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
d592 2
a593 26
	protected LayoutEditPolicy createLayoutEditPolicy() {
		XYLayoutEditPolicy lep = new XYLayoutEditPolicy() {

			protected EditPolicy createChildEditPolicy(EditPart child) {
				EditPolicy result = super.createChildEditPolicy(child);
				if (result == null) {
					return new ResizableShapeEditPolicy();
				}
				return result;
			}

			protected org.eclipse.draw2d.geometry.Point getLayoutOrigin() {
				return ((GraphicalEditPart) getHost()).getContentPane().getClientArea().getLocation();
			}

			protected Rectangle getCurrentConstraintFor(org.eclipse.gef.GraphicalEditPart child) {
				Rectangle result = super.getCurrentConstraintFor(child);
				if (result == null) {
					IFigure fig = child.getFigure();
					result = fig.getBounds().getCopy();
				}
				return result;
			}

		};
		return lep;
d599 7
a605 84
	protected IFigure createNodeShape() {
		EllipseFigure figure = new EllipseFigure();
		figure.setUseLocalCoordinates(true);
		myFigure = figure;
		Ellipse modelElement = (Ellipse) ((View) getModel()).getElement();
		if (modelElement != null) {
			{
				layoutDataChanged(modelElement.getLayoutData());
			}
			{
				layoutChanged(modelElement.getLayout());
			}
			{
				myFigure.setOutline(modelElement.isOutline());
			}
			{
				myFigure.setFill(modelElement.isFill());
			}
			{
				myFigure.setLineWidth(modelElement.getLineWidth());
			}
			{
				myFigure.setLineStyle(getLineStyle(modelElement.getLineKind()));
			}
			{
				myFigure.setFillXOR(modelElement.isXorFill());
			}
			{
				myFigure.setOutlineXOR(modelElement.isXorOutline());
			}
		}
		return primaryShape = figure;
	}

	/**
	 * @@generated
	 */
	public EllipseFigure getPrimaryShape() {
		return (EllipseFigure) primaryShape;
	}

	/**
	 * @@generated
	 */
	protected NodeFigure createNodePlate() {
		return new DefaultSizeNodeFigure(getMapMode().DPtoLP(0), getMapMode().DPtoLP(0));
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @@generated
	 */
	protected NodeFigure createNodeFigure() {
		NodeFigure figure = createNodePlate();
		myNodeFigure = figure;
		figure.setLayoutManager(new StackLayout());
		IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}

	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @@param nodeShape instance of generated figure class
	 * @@generated
	 */
	protected IFigure setupContentPane(IFigure nodeShape) {
		if (nodeShape.getLayoutManager() == null) {
			nodeShape.setLayoutManager(new FreeformLayout() {

				public Object getConstraint(IFigure figure) {
					Object result = constraints.get(figure);
					if (result == null) {
						result = new Rectangle(0, 0, -1, -1);
					}
					return result;
				}
			});
a606 11
		return nodeShape; // use nodeShape itself as contentPane
	}

	/**
	 * @@generated
	 */
	public IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
a652 26
	/**
	 * @@generated
	 */
	protected LayoutManager getFigureLayoutManager() {
		return myFigure.getLayoutManager();
	}

	/**
	 * @@generated
	 */
	protected void setFigureLayoutManager(LayoutManager layoutManager) {
		myFigure.setLayoutManager(layoutManager);
	}

	/**
	 * @@generated
	 */
	protected void refreshBounds() {
		if (((View) getParent().getModel()).getElement() instanceof FigureMarker) {
			int width = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getSize_Width())).intValue();
			int height = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getSize_Height())).intValue();
			myNodeFigure.setPreferredSize(new org.eclipse.draw2d.geometry.Dimension(width, height));
		} else {
			super.refreshBounds();
		}
	}
@


1.10
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d50 1
d283 1
a283 1
							if (modelElement.getLayoutData() instanceof XYLayoutData) {
d285 10
d470 1
a470 1
		return new XYLayoutEditPolicy() {
d494 1
@


1.9
log
@All changes in model was wrapped into the commands.
@
text
@d1 1
a1 1
/**
@


1.8
log
@[synch] Synchronizing with the templates
@
text
@d232 2
a233 2
			AbstractEMFOperation setSizeOperation = new AbstractEMFOperation(getEditingDomain(),
					"Synchronizing view size with the model", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
d235 8
a242 10
				protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
					bounds.setX(locationX);
					bounds.setY(locationY);
					bounds.setWidth(sizeX);
					bounds.setHeight(sizeY);
					return Status.OK_STATUS;
				}
			};
			try {
				setSizeOperation.execute(new NullProgressMonitor(), null);
d249 3
a251 12
			public void notifyChanged(Notification notification) {
				Bounds bounds = (Bounds) notification.getNotifier();
				Dimension dim = modelElement.getPreferredSize();
				if (dim == null) {
					dim = GMFGraphFactory.eINSTANCE.createDimension();
					modelElement.setPreferredSize(dim);
				}
				Point location = modelElement.getLocation();
				if (location == null) {
					location = GMFGraphFactory.eINSTANCE.createPoint();
					modelElement.setLocation(location);
				}
d253 60
a312 41
				int x = getMapMode().LPtoDP(bounds.getWidth());
				int y = getMapMode().LPtoDP(bounds.getHeight());
				int width = getMapMode().LPtoDP(bounds.getX());
				int height = getMapMode().LPtoDP(bounds.getY());
				if (dim.getDx() != x || dim.getDy() != y) {
					dim.setDx(x);
					dim.setDy(y);
				}
				if (location.getX() != width || location.getY() != height) {
					location.setX(width);
					location.setY(height);
				}

				myNodeFigure.setPreferredSize(bounds.getWidth(), bounds.getHeight());
				myNodeFigure.setLocation(new org.eclipse.draw2d.geometry.Point(bounds.getX(), bounds.getY()));

				if (modelElement.getLayoutData() instanceof XYLayoutData) {
					XYLayoutData xyLayoutData = (XYLayoutData) modelElement.getLayoutData();
					Point topLeft;
					if (xyLayoutData.getTopLeft() != null) {
						topLeft = xyLayoutData.getTopLeft();
					} else {
						topLeft = GMFGraphFactory.eINSTANCE.createPoint();
						xyLayoutData.setTopLeft(topLeft);
					}
					if (topLeft.getX() != location.getX() || topLeft.getY() != location.getY()) {
						topLeft.setX(location.getX());
						topLeft.setY(location.getY());
					}

					Dimension size;
					if (xyLayoutData.getSize() != null) {
						size = xyLayoutData.getSize();
					} else {
						size = GMFGraphFactory.eINSTANCE.createDimension();
						xyLayoutData.setSize(size);
					}
					if (size.getDx() != dim.getDx() || size.getDy() != dim.getDy()) {
						size.setDx(dim.getDx());
						size.setDy(dim.getDy());
					}
d391 45
a435 35
			public void notifyChanged(Notification notification) {
				ShapeStyle shapeStyle = (ShapeStyle) notification.getNotifier();
				switch (notification.getFeatureID(ShapeStyle.class)) {
				case NotationPackage.SHAPE_STYLE__FILL_COLOR: {
					int color = shapeStyle.getFillColor();
					RGBColor modelColor;
					if (modelElement.getBackgroundColor() instanceof RGBColor) {
						modelColor = (RGBColor) modelElement.getBackgroundColor();
					} else {
						modelColor = GMFGraphFactory.eINSTANCE.createRGBColor();
						modelElement.setBackgroundColor(modelColor);
					}
					if (modelColor.getRed() != (color & 0x000000FF) || modelColor.getGreen() != (color & 0x0000FF00) >> 8 || modelColor.getBlue() != (color & 0x00FF0000) >> 16) {
						modelColor.setRed(color & 0x000000FF);
						modelColor.setGreen((color & 0x0000FF00) >> 8);
						modelColor.setBlue((color & 0x00FF0000) >> 16);
					}
					break;
				}
				case NotationPackage.SHAPE_STYLE__LINE_COLOR: {
					int color = shapeStyle.getLineColor();
					RGBColor modelColor;
					if (modelElement.getForegroundColor() instanceof RGBColor) {
						modelColor = (RGBColor) modelElement.getForegroundColor();
					} else {
						modelColor = GMFGraphFactory.eINSTANCE.createRGBColor();
						modelElement.setForegroundColor(modelColor);
					}
					if (modelColor.getRed() != (color & 0x000000FF) || modelColor.getGreen() != (color & 0x0000FF00) >> 8 || modelColor.getBlue() != (color & 0x00FF0000) >> 16) {
						modelColor.setRed(color & 0x000000FF);
						modelColor.setGreen((color & 0x0000FF00) >> 8);
						modelColor.setBlue((color & 0x00FF0000) >> 16);
					}
					break;
				}
@


1.7
log
@Updating with new templates
@
text
@d1 10
d85 1
a85 1
	public static final int VISUAL_ID = 2003;
@


1.6
log
@Updating with latest state of the code.
@
text
@d30 2
d424 8
a431 1
		installEditPolicy(EditPolicy.LAYOUT_ROLE, new XYLayoutEditPolicy() {
d454 1
a454 1
		});
d568 4
@


1.5
log
@Polylines partually supported.
@
text
@a2 1
import java.util.ArrayList;
a3 1
import java.util.List;
a16 1
import org.eclipse.draw2d.PositionConstants;
a29 3
import org.eclipse.gef.handles.MoveHandle;
import org.eclipse.gef.handles.ResizableHandleKit;

a499 37
	 * @@generated
	 */
	public EditPolicy getPrimaryDragEditPolicy() {
		return new ResizableShapeEditPolicy() {

			protected List createSelectionHandles() {
				final org.eclipse.gef.GraphicalEditPart part = (org.eclipse.gef.GraphicalEditPart) getHost();
				final List list = new ArrayList();
				addMoveHandle(part, list);

				ResizableHandleKit.addHandle(part, list, PositionConstants.NORTH);

				ResizableHandleKit.addHandle(part, list, PositionConstants.SOUTH);

				ResizableHandleKit.addHandle(part, list, PositionConstants.WEST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.EAST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.NORTH_EAST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.NORTH_WEST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.SOUTH_EAST);

				ResizableHandleKit.addHandle(part, list, PositionConstants.SOUTH_WEST);

				return list;
			}

			private void addMoveHandle(final org.eclipse.gef.GraphicalEditPart part, final List list) {
				MoveHandle moveHandle = new MoveHandle(part);
				list.add(moveHandle);
			}
		};
	}

	/**
@


1.4
log
@models updated, sample regenerated with new templates.
@
text
@a41 3
import org.eclipse.gmf.gmfgraph.Layout;
import org.eclipse.gmf.gmfgraph.LayoutData;
import org.eclipse.gmf.gmfgraph.LineKind;
d124 1
a124 1
		final NotificationListener layoutListener = new NotificationListener() {
d127 1
a127 2
				Layout layout = (Layout) notification.getNotifier();
				layoutPropertyChanged(layout);
d130 2
a131 2
		if (modelElement.getLayout() != null) {
			addListenerFilter("LayoutPropertiesListener", layoutListener, modelElement.getLayout());
d133 1
a133 1
		addListenerFilter("ModelElementLayoutListener", new NotificationListener() {
d136 3
a138 4
				Layout newLayout = (Layout) notification.getNewValue();
				removeListenerFilter("LayoutPropertiesListener");
				if (newLayout != null) {
					addListenerFilter("LayoutPropertiesListener", layoutListener, newLayout);
d140 1
a140 1
				layoutChanged(newLayout, true);
d142 1
a142 1
		}, modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_Layout());
d144 1
a144 1
		final NotificationListener layoutDataListener = new NotificationListener() {
d147 1
a147 1
				layoutDataPropertyChanged();
d150 2
a151 2
		if (modelElement.getLayoutData() != null) {
			addListenerFilter("LayoutDataPropertiesListener", layoutDataListener, modelElement.getLayoutData());
d153 1
a153 1
		addListenerFilter("ModelElementLayoutDataListener", new NotificationListener() {
d156 3
a158 4
				LayoutData newLayoutData = (LayoutData) notification.getNewValue();
				removeListenerFilter("LayoutDataPropertiesListener");
				if (newLayoutData != null) {
					addListenerFilter("LayoutDataPropertiesListener", layoutDataListener, newLayoutData);
d160 29
a188 1
				layoutDataChanged();
d190 8
a197 1
		}, modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData());
d199 1
a199 1
		addListenerFilter("ModelElementPropertiesListener", new NotificationListener() {
d202 1
a202 36
				switch (notification.getFeatureID(Ellipse.class)) {
				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ELLIPSE__OUTLINE: {
					boolean value = modelElement.isOutline();
					myFigure.setOutline(value);
					break;
				}
				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ELLIPSE__FILL: {
					boolean value = modelElement.isFill();
					myFigure.setFill(value);
					break;
				}
				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ELLIPSE__LINE_WIDTH: {
					int value = modelElement.getLineWidth();
					myFigure.setLineWidth(value);
					break;
				}
				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ELLIPSE__LINE_KIND: {
					LineKind value = modelElement.getLineKind();
					myFigure.setLineStyle("LINE_DASH".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASH : "LINE_DOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DOT
							: "LINE_DASHDOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOT
									: "LINE_DASHDOTDOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOTDOT
											: "LINE_CUSTOM".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_CUSTOM : org.eclipse.draw2d.Graphics.LINE_SOLID);
					break;
				}
				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ELLIPSE__XOR_FILL: {
					boolean value = modelElement.isXorFill();
					myFigure.setFillXOR(value);
					break;
				}
				case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ELLIPSE__XOR_OUTLINE: {
					boolean value = modelElement.isXorOutline();
					myFigure.setOutlineXOR(value);
					break;
				}
				}
				myFigure.repaint();
d204 1
a204 1
		}, modelElement);
d464 7
a470 2
				boolean value = modelElement.isOutline();
				myFigure.setOutline(value);
d473 1
a473 2
				boolean value = modelElement.isFill();
				myFigure.setFill(value);
d476 1
a476 2
				int value = modelElement.getLineWidth();
				myFigure.setLineWidth(value);
d479 1
a479 4
				LineKind value = modelElement.getLineKind();
				myFigure.setLineStyle("LINE_DASH".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASH : "LINE_DOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DOT
						: "LINE_DASHDOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOT : "LINE_DASHDOTDOT".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOTDOT
								: "LINE_CUSTOM".equals(value.getName()) ? org.eclipse.draw2d.Graphics.LINE_CUSTOM : org.eclipse.draw2d.Graphics.LINE_SOLID);
d482 1
a482 2
				boolean value = modelElement.isXorFill();
				myFigure.setFillXOR(value);
d485 1
a485 2
				boolean value = modelElement.isXorOutline();
				myFigure.setOutlineXOR(value);
a486 1
			layoutChanged(modelElement.getLayout(), false);
@


1.3
log
@Using "isSuperTypeOf" instead of EClasses comparision in Visual ID registry.
@
text
@d611 7
@


1.2
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@a545 2
				// just make it look nice 
				moveHandle.setBorder(null);
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d82 1
a82 1
	public static String VISUAL_ID = "2003";
@

