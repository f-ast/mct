head	1.16;
access;
symbols
	v20080722-1827:1.16
	v20080718-1700:1.16
	v20080718-1731:1.16
	v20080716-1642:1.16
	R2_1_maintenance:1.16.0.2
	Root_R2_1_maintenance:1.16
	R2_1_0:1.16
	v20080610-1132:1.16
	v20080603-1553:1.16
	v20080528-1052:1.16
	v20080521:1.11
	v20080516-1143:1.10
	v20080512-1200:1.6
	v20080510-0100:1.5
	v20080507-1326:1.5
	v20080501-1739:1.3
	v20080425-1959:1.3
	v20080411-0411:1.3
	v20080404-1111:1.3
	v20080322-0000:1.3
	v20080114-2222:1.1
	v20071214-1111:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.16
date	2008.05.28.12.42.33;	author ashatalin;	state Exp;
branches;
next	1.15;
commitid	67a1483d53374567;

1.15
date	2008.05.27.16.16.52;	author ashatalin;	state Exp;
branches;
next	1.14;
commitid	3565483c33f24567;

1.14
date	2008.05.27.12.28.08;	author ashatalin;	state Exp;
branches;
next	1.13;
commitid	68fd483bfe544567;

1.13
date	2008.05.23.14.30.31;	author ashatalin;	state Exp;
branches;
next	1.12;
commitid	1aec4836d5014567;

1.12
date	2008.05.22.12.18.01;	author ashatalin;	state Exp;
branches;
next	1.11;
commitid	969483564774567;

1.11
date	2008.05.19.16.33.10;	author ashatalin;	state Exp;
branches;
next	1.10;
commitid	77734831abc34567;

1.10
date	2008.05.14.17.23.29;	author ashatalin;	state Exp;
branches;
next	1.9;
commitid	412b482b200e4567;

1.9
date	2008.05.14.13.05.38;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	7a4d482ae3a14567;

1.8
date	2008.05.14.11.35.48;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	41e3482ace924567;

1.7
date	2008.05.14.11.16.58;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	377e482aca274567;

1.6
date	2008.05.12.17.40.17;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	a53482880fd4567;

1.5
date	2008.05.06.15.55.35;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	702648207f744567;

1.4
date	2008.05.06.13.02.22;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	4985482056dc4567;

1.3
date	2008.03.07.12.50.34;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	179447d13a164567;

1.2
date	2008.02.22.13.07.59;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	4c5647bec9294567;

1.1
date	2007.05.31.15.52.31;	author ashatalin;	state Exp;
branches;
next	;
commitid	49f1465eef2c4567;


desc
@@


1.16
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2008 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.parts;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.draw2d.FreeformLayout;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.RoundedRectangle;
import org.eclipse.draw2d.StackLayout;
import org.eclipse.draw2d.XYLayout;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.editpolicies.LayoutEditPolicy;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.graphdef.editor.edit.policies.RoundedRectangle3CanonicalEditPolicy;
import org.eclipse.gmf.graphdef.editor.edit.policies.RoundedRectangle3ItemSemanticEditPolicy;
import org.eclipse.gmf.graphdef.editor.edit.polocies.FigureContainerXYLayoutEditPolicy;
import org.eclipse.gmf.graphdef.editor.sheet.AttachAdapter;
import org.eclipse.gmf.graphdef.editor.sheet.ChangeTracker;
import org.eclipse.gmf.graphdef.editor.sheet.FeatureTracker;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class RoundedRectangle3EditPart extends AbstractFigureEditPart {

	/**
	 * @@generated
	 */
	public static final int VISUAL_ID = 3020;

	/**
	 * @@generated
	 */
	protected IFigure contentPane;

	/**
	 * @@generated
	 */
	protected IFigure primaryShape;

	/**
	 * @@generated
	 */
	public RoundedRectangle3EditPart(View view) {
		super(view);
	}

	/**
	 * @@generated
	 */
	protected void createDefaultEditPolicies() {
		installEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new RoundedRectangle3ItemSemanticEditPolicy());
		installEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());
		installEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new RoundedRectangle3CanonicalEditPolicy());
		installEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
		// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
		// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}

	/**
	 * @@generated
	 */
	protected LayoutEditPolicy createLayoutEditPolicy() {
		return new FigureContainerXYLayoutEditPolicy(getMapMode());
	}

	/**
	 * @@generated
	 */
	protected IFigure createNodeShape() {
		RoundedRectangleFigure figure = new RoundedRectangleFigure();
		figure.setUseLocalCoordinates(true);
		return primaryShape = figure;
	}

	/**
	 * @@generated
	 */
	public RoundedRectangleFigure getPrimaryShape() {
		return (RoundedRectangleFigure) primaryShape;
	}

	/**
	 * @@generated
	 */
	protected NodeFigure createNodePlate() {
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(getMapMode().DPtoLP(0), getMapMode().DPtoLP(0));
		result.setMinimumSize(new Dimension(0, 0));
		return result;
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @@generated
	 */
	protected NodeFigure createNodeFigure() {
		NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new StackLayout());
		IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}

	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @@param nodeShape instance of generated figure class
	 * @@generated
	 */
	protected IFigure setupContentPane(IFigure nodeShape) {
		if (nodeShape.getLayoutManager() == null) {
			nodeShape.setLayoutManager(new FreeformLayout() {

				public Object getConstraint(IFigure figure) {
					Object result = constraints.get(figure);
					if (result == null) {
						result = new Rectangle(0, 0, -1, -1);
					}
					return result;
				}
			});
		}
		return nodeShape; // use nodeShape itself as contentPane
	}

	/**
	 * @@generated
	 */
	public IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

	/**
	 * @@generated
	 */
	protected void handleNotificationEvent(Notification notification) {
		Object feature = notification.getFeature();
		if (NotationPackage.eINSTANCE.getFillStyle_FillColor().equals(feature)) {
			return;
		} else if (NotationPackage.eINSTANCE.getLineStyle_LineColor().equals(feature)) {
			return;
		}
		super.handleNotificationEvent(notification);
	}

	/**
	 * @@generated
	 */
	public class RoundedRectangleFigure extends RoundedRectangle {

		/**
		 * @@generated
		 */
		public RoundedRectangleFigure() {
			this.setLayoutManager(new XYLayout());
			this.setCornerDimensions(new Dimension(getMapMode().DPtoLP(8), getMapMode().DPtoLP(8)));
		}

		/**
		 * @@generated
		 */
		private boolean myUseLocalCoordinates = false;

		/**
		 * @@generated
		 */
		protected boolean useLocalCoordinates() {
			return myUseLocalCoordinates;
		}

		/**
		 * @@generated
		 */
		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
			myUseLocalCoordinates = useLocalCoordinates;
		}

	}

	/**
	 * @@generated
	 */
	private Collection<Adapter> myDomainElementAdapters = new ArrayList<Adapter>();

	/**
	 * @@generated
	 */
	private org.eclipse.gmf.gmfgraph.RoundedRectangle getGmfgraphElement() {
		View view = getNotationView();
		if (view == null) {
			return null;
		}
		EObject element = view.getElement();
		if (element instanceof org.eclipse.gmf.gmfgraph.RoundedRectangle) {
			org.eclipse.gmf.gmfgraph.RoundedRectangle modelFigureElement = (org.eclipse.gmf.gmfgraph.RoundedRectangle) element;
			return modelFigureElement;
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected void removeSemanticListeners() {
		org.eclipse.gmf.gmfgraph.RoundedRectangle modelElement = getGmfgraphElement();
		if (modelElement != null) {
			modelElement.eAdapters().removeAll(myDomainElementAdapters);
			myDomainElementAdapters.clear();
		}
		super.removeSemanticListeners();
	}

	/**
	 * @@generated
	 */
	protected void setFigure(IFigure figure) {
		super.setFigure(figure);
		org.eclipse.gmf.gmfgraph.RoundedRectangle modelElement = getGmfgraphElement();
		if (modelElement != null) {
			getPrimaryShape().setOutline(modelElement.isOutline());
			getPrimaryShape().setFill(modelElement.isFill());
			getPrimaryShape().setLineWidth(modelElement.getLineWidth());
			getPrimaryShape().setLineStyle(getLineStyle(modelElement.getLineKind()));
			getPrimaryShape().setFillXOR(modelElement.isXorFill());
			getPrimaryShape().setOutlineXOR(modelElement.isXorOutline());
			getPrimaryShape().setCornerDimensions(getCornerDimensions(modelElement.getCornerWidth(), modelElement.getCornerHeight()));
			getPrimaryShape().setLayoutManager(getLayoutManager(modelElement.getLayout()));
			refreshLayoutManager();
			getPrimaryShape().setBackgroundColor(getColor(modelElement.getBackgroundColor()));
			getPrimaryShape().setForegroundColor(getColor(modelElement.getForegroundColor()));
			refreshFont();
		}
	}

	/**
	 * @@generated
	 */
	public void activate() {
		if (isActive()) {
			return;
		}
		final org.eclipse.gmf.gmfgraph.RoundedRectangle modelElement = getGmfgraphElement();
		if (modelElement == null) {
			super.activate();
			return;
		}

		ChangeTracker outlineTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setOutline(modelElement.isOutline());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(outlineTracker, GMFGraphPackage.eINSTANCE.getShape_Outline()));

		ChangeTracker fillTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setFill(modelElement.isFill());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(fillTracker, GMFGraphPackage.eINSTANCE.getShape_Fill()));

		ChangeTracker lineWidthTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setLineWidth(modelElement.getLineWidth());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(lineWidthTracker, GMFGraphPackage.eINSTANCE.getShape_LineWidth()));

		ChangeTracker lineStyleTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setLineStyle(getLineStyle(modelElement.getLineKind()));
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(lineStyleTracker, GMFGraphPackage.eINSTANCE.getShape_LineKind()));

		ChangeTracker fillXORTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setFillXOR(modelElement.isXorFill());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(fillXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorFill()));

		ChangeTracker outlineXORTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setOutlineXOR(modelElement.isXorOutline());
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(outlineXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorOutline()));

		ChangeTracker cornerDimensionsTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setCornerDimensions(getCornerDimensions(modelElement.getCornerWidth(), modelElement.getCornerHeight()));
			}
		};
		myDomainElementAdapters.add(new FeatureTracker(cornerDimensionsTracker, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerWidth()));
		myDomainElementAdapters.add(new FeatureTracker(cornerDimensionsTracker, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerHeight()));

		ChangeTracker layoutManagerTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setLayoutManager(getLayoutManager(modelElement.getLayout()));
				refreshLayoutManager();
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getLayoutable_Layout(), layoutManagerTracker, new AttachAdapter(GMFGraphPackage.eINSTANCE.getBorderLayout_Spacing(),
				layoutManagerTracker, new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE
						.getDimension_Dy())), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_Vertical()), new FeatureTracker(layoutManagerTracker,
				GMFGraphPackage.eINSTANCE.getFlowLayout_MatchMinorSize()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_ForceSingleLine()), new FeatureTracker(
				layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorAlignment()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorAlignment()),
				new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorSpacing()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE
						.getFlowLayout_MinorSpacing()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_NumColumns()), new FeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getGridLayout_EqualWidth()), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayout_Margins(), layoutManagerTracker, new FeatureTracker(
						layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())), new AttachAdapter(
						GMFGraphPackage.eINSTANCE.getGridLayout_Spacing(), layoutManagerTracker, new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()),
						new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy()))));

		ChangeTracker backgroundColorTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setBackgroundColor(getColor(modelElement.getBackgroundColor()));
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor(), backgroundColorTracker, new FeatureTracker(backgroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new FeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()), new FeatureTracker(
				backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new FeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));

		ChangeTracker foregroundColorTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				getPrimaryShape().setForegroundColor(getColor(modelElement.getForegroundColor()));
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor(), foregroundColorTracker, new FeatureTracker(foregroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new FeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()), new FeatureTracker(
				foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new FeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));

		ChangeTracker refreshFontTracker = new ChangeTracker() {

			public void modelChanged(Notification msg) {
				refreshFont();
			}
		};
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Font(), refreshFontTracker, new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_FaceName()), new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Height()), new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_Style())));
		modelElement.eAdapters().addAll(myDomainElementAdapters);
		super.activate();
	}

}
@


1.15
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d34 1
a34 1
import org.eclipse.gmf.graphdef.editor.sheet.MultipleTargetsFeatureTracker;
d286 1
a286 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(outlineTracker, GMFGraphPackage.eINSTANCE.getShape_Outline()));
d294 1
a294 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(fillTracker, GMFGraphPackage.eINSTANCE.getShape_Fill()));
d302 1
a302 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(lineWidthTracker, GMFGraphPackage.eINSTANCE.getShape_LineWidth()));
d310 1
a310 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(lineStyleTracker, GMFGraphPackage.eINSTANCE.getShape_LineKind()));
d318 1
a318 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(fillXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorFill()));
d326 1
a326 1
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(outlineXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorOutline()));
d334 2
a335 2
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(cornerDimensionsTracker, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerWidth()));
		myDomainElementAdapters.add(new MultipleTargetsFeatureTracker(cornerDimensionsTracker, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerHeight()));
d345 10
a354 12
				layoutManagerTracker, new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getDimension_Dy())), new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_Vertical()),
				new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MatchMinorSize()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getFlowLayout_ForceSingleLine()), new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorAlignment()),
				new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorAlignment()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getFlowLayout_MajorSpacing()), new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorSpacing()),
				new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_NumColumns()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getGridLayout_EqualWidth()), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayout_Margins(), layoutManagerTracker,
						new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
								GMFGraphPackage.eINSTANCE.getDimension_Dy())), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayout_Spacing(), layoutManagerTracker,
						new MultipleTargetsFeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new MultipleTargetsFeatureTracker(layoutManagerTracker,
								GMFGraphPackage.eINSTANCE.getDimension_Dy()))));
d362 3
a364 4
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor(), backgroundColorTracker, new MultipleTargetsFeatureTracker(backgroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new MultipleTargetsFeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()),
				new MultipleTargetsFeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new MultipleTargetsFeatureTracker(backgroundColorTracker,
						GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));
d372 3
a374 4
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor(), foregroundColorTracker, new MultipleTargetsFeatureTracker(foregroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new MultipleTargetsFeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()),
				new MultipleTargetsFeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new MultipleTargetsFeatureTracker(foregroundColorTracker,
						GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));
d382 3
a384 3
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Font(), refreshFontTracker, new MultipleTargetsFeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_FaceName()), new MultipleTargetsFeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Height()), new MultipleTargetsFeatureTracker(
				refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Style())));
@


1.14
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d34 1
a34 1
import org.eclipse.gmf.graphdef.editor.sheet.FeatureTracker;
d286 1
a286 1
		myDomainElementAdapters.add(new FeatureTracker(outlineTracker, GMFGraphPackage.eINSTANCE.getShape_Outline()));
d294 1
a294 1
		myDomainElementAdapters.add(new FeatureTracker(fillTracker, GMFGraphPackage.eINSTANCE.getShape_Fill()));
d302 1
a302 1
		myDomainElementAdapters.add(new FeatureTracker(lineWidthTracker, GMFGraphPackage.eINSTANCE.getShape_LineWidth()));
d310 1
a310 1
		myDomainElementAdapters.add(new FeatureTracker(lineStyleTracker, GMFGraphPackage.eINSTANCE.getShape_LineKind()));
d318 1
a318 1
		myDomainElementAdapters.add(new FeatureTracker(fillXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorFill()));
d326 1
a326 1
		myDomainElementAdapters.add(new FeatureTracker(outlineXORTracker, GMFGraphPackage.eINSTANCE.getShape_XorOutline()));
d334 2
a335 2
		myDomainElementAdapters.add(new FeatureTracker(cornerDimensionsTracker, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerWidth()));
		myDomainElementAdapters.add(new FeatureTracker(cornerDimensionsTracker, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerHeight()));
d345 12
a356 10
				layoutManagerTracker, new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE
						.getDimension_Dy())), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_Vertical()), new FeatureTracker(layoutManagerTracker,
				GMFGraphPackage.eINSTANCE.getFlowLayout_MatchMinorSize()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_ForceSingleLine()), new FeatureTracker(
				layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorAlignment()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MinorAlignment()),
				new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getFlowLayout_MajorSpacing()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE
						.getFlowLayout_MinorSpacing()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getGridLayout_NumColumns()), new FeatureTracker(layoutManagerTracker,
						GMFGraphPackage.eINSTANCE.getGridLayout_EqualWidth()), new AttachAdapter(GMFGraphPackage.eINSTANCE.getGridLayout_Margins(), layoutManagerTracker, new FeatureTracker(
						layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()), new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy())), new AttachAdapter(
						GMFGraphPackage.eINSTANCE.getGridLayout_Spacing(), layoutManagerTracker, new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dx()),
						new FeatureTracker(layoutManagerTracker, GMFGraphPackage.eINSTANCE.getDimension_Dy()))));
d364 4
a367 3
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor(), backgroundColorTracker, new FeatureTracker(backgroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new FeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()), new FeatureTracker(
				backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new FeatureTracker(backgroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));
d375 4
a378 3
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor(), foregroundColorTracker, new FeatureTracker(foregroundColorTracker,
				GMFGraphPackage.eINSTANCE.getConstantColor_Value()), new FeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Red()), new FeatureTracker(
				foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Green()), new FeatureTracker(foregroundColorTracker, GMFGraphPackage.eINSTANCE.getRGBColor_Blue())));
d386 3
a388 3
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getFigure_Font(), refreshFontTracker, new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_FaceName()), new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE.getBasicFont_Height()), new FeatureTracker(refreshFontTracker, GMFGraphPackage.eINSTANCE
				.getBasicFont_Style())));
@


1.13
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d25 1
a28 1
import org.eclipse.gmf.gmfgraph.Shape;
d31 1
a31 1
import org.eclipse.gmf.graphdef.editor.edit.polocies.DomainBasedXYLayoutEditPolicy;
d88 1
a88 1
		return new DomainBasedXYLayoutEditPolicy(getMapMode());
d220 8
a227 4
	private org.eclipse.gmf.gmfgraph.RoundedRectangle getModelFigureElement() {
		Shape shape = getShape();
		if (shape instanceof org.eclipse.gmf.gmfgraph.RoundedRectangle) {
			org.eclipse.gmf.gmfgraph.RoundedRectangle modelFigureElement = (org.eclipse.gmf.gmfgraph.RoundedRectangle) shape;
d237 1
a237 1
		org.eclipse.gmf.gmfgraph.RoundedRectangle modelElement = (org.eclipse.gmf.gmfgraph.RoundedRectangle) getModelFigureElement();
d250 1
a250 1
		org.eclipse.gmf.gmfgraph.RoundedRectangle modelElement = (org.eclipse.gmf.gmfgraph.RoundedRectangle) getModelFigureElement();
d274 1
a274 1
		final org.eclipse.gmf.gmfgraph.RoundedRectangle modelElement = (org.eclipse.gmf.gmfgraph.RoundedRectangle) getModelFigureElement();
@


1.12
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@a186 1

@


1.11
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@d170 1
a170 4
		if (NotationPackage.eINSTANCE.getSize_Width().equals(feature) || NotationPackage.eINSTANCE.getSize_Height().equals(feature) || NotationPackage.eINSTANCE.getLocation_X().equals(feature)
				|| NotationPackage.eINSTANCE.getLocation_Y().equals(feature)) {
			return;
		} else if (NotationPackage.eINSTANCE.getFillStyle_FillColor().equals(feature)) {
a385 16
	/**
	 * @@generated
	 */
	protected void refreshBounds() {
		org.eclipse.gmf.gmfgraph.RoundedRectangle modelElement = (org.eclipse.gmf.gmfgraph.RoundedRectangle) getModelFigureElement();
		if (modelElement == null) {
			return;
		}
		if (modelElement.getPreferredSize() != null) {
			getFigure().setPreferredSize(getDraw2dDimension(modelElement.getPreferredSize()));
		}
		if (modelElement.getLocation() != null) {
			getFigure().setLocation(getDraw2DPoint(modelElement.getLocation()));
		}
	}

@


1.10
log
@Calling handleMajorSemanticChange() on any layoutManager modifications.
It's necessary to populate new instance of LayoutManager with proper layout constraints for each child figure.
@
text
@a14 1
import java.util.Collections;
a15 6
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Status;
a24 2
import org.eclipse.emf.transaction.Transaction;
import org.eclipse.emf.workspace.AbstractEMFOperation;
a26 3
import org.eclipse.gmf.gmfgraph.ColorConstants;
import org.eclipse.gmf.gmfgraph.ConstantColor;
import org.eclipse.gmf.gmfgraph.GMFGraphFactory;
a27 1
import org.eclipse.gmf.gmfgraph.RGBColor;
a31 1
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;
a34 1
import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
a39 2
import org.eclipse.gmf.runtime.notation.FillStyle;
import org.eclipse.gmf.runtime.notation.LineStyle;
d168 16
d261 3
a354 1
		modelElement.eAdapters().addAll(myDomainElementAdapters);
d356 4
a359 25
		View view = getNotationView();
		final FillStyle theFillStyle = (FillStyle) view.getStyle(NotationPackage.eINSTANCE.getFillStyle());
		if (modelElement.getBackgroundColor() != null) {
			final int rgbColor;
			if (modelElement.getBackgroundColor() instanceof RGBColor) {
				RGBColor modelColor = (RGBColor) modelElement.getBackgroundColor();
				rgbColor = (modelColor.getRed() & 0xFF) | ((modelColor.getGreen() & 0xFF) << 8) | ((modelColor.getBlue() & 0xFF) << 16);
			} else {
				ConstantColor modelColor = (ConstantColor) modelElement.getBackgroundColor();
				rgbColor = getRgbColor(modelColor);
			}
			if (rgbColor != -1 && theFillStyle.getFillColor() != rgbColor) {
				AbstractEMFOperation setColorOperation = new AbstractEMFOperation(getEditingDomain(),
						"Synchronizing view Background color with the model", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

					protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
						theFillStyle.setFillColor(rgbColor);
						return Status.OK_STATUS;
					}
				};
				try {
					setColorOperation.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Background color with the model", e); //$NON-NLS-1$
				}
d361 9
a369 25
		}
		final LineStyle theLineStyle = (LineStyle) view.getStyle(NotationPackage.eINSTANCE.getLineStyle());
		if (modelElement.getForegroundColor() != null) {
			final int rgbColor;
			if (modelElement.getForegroundColor() instanceof RGBColor) {
				RGBColor modelColor = (RGBColor) modelElement.getForegroundColor();
				rgbColor = (modelColor.getRed() & 0xFF) | ((modelColor.getGreen() & 0xFF) << 8) | ((modelColor.getBlue() & 0xFF) << 16);
			} else {
				ConstantColor modelColor = (ConstantColor) modelElement.getForegroundColor();
				rgbColor = getRgbColor(modelColor);
			}
			if (rgbColor != -1 && theLineStyle.getLineColor() != rgbColor) {
				AbstractEMFOperation setColorOperation = new AbstractEMFOperation(getEditingDomain(),
						"Synchronizing view Foreground color with the model", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

					protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
						theLineStyle.setLineColor(rgbColor);
						return Status.OK_STATUS;
					}
				};
				try {
					setColorOperation.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Foreground color with the model", e); //$NON-NLS-1$
				}
d371 4
a374 1
		}
d376 1
a376 2
		final FillStyle theFillStyle1 = (FillStyle) view.getStyle(NotationPackage.eINSTANCE.getFillStyle());
		addListenerFilter("FillStyleListener", new NotificationListener() {
d378 2
a379 27
			public void notifyChanged(final Notification notification) {
				try {
					new AbstractEMFOperation(getEditingDomain(), "Synchronizing model Background color with the view", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

						protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
							FillStyle theFillStyle = (FillStyle) notification.getNotifier();
							if (notification.getFeatureID(FillStyle.class) == NotationPackage.FILL_STYLE__FILL_COLOR) {
								int color = theFillStyle.getFillColor();
								RGBColor modelColor;
								if (modelElement.getBackgroundColor() instanceof RGBColor) {
									modelColor = (RGBColor) modelElement.getBackgroundColor();
								} else {
									modelColor = GMFGraphFactory.eINSTANCE.createRGBColor();
									modelElement.setBackgroundColor(modelColor);
								}
								if (modelColor.getRed() != (color & 0x000000FF) || modelColor.getGreen() != (color & 0x0000FF00) >> 8 || modelColor.getBlue() != (color & 0x00FF0000) >> 16) {
									modelColor.setRed(color & 0x000000FF);
									modelColor.setGreen((color & 0x0000FF00) >> 8);
									modelColor.setBlue((color & 0x00FF0000) >> 16);
								}
							}
							return Status.OK_STATUS;
						}
					}.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize model Background color with the view", e); //$NON-NLS-1$
				}
d381 5
a385 34
		}, theFillStyle1);
		final LineStyle theLineStyle1 = (LineStyle) view.getStyle(NotationPackage.eINSTANCE.getLineStyle());
		addListenerFilter("LineStyleListener", new NotificationListener() {

			public void notifyChanged(final Notification notification) {
				try {
					new AbstractEMFOperation(getEditingDomain(), "Synchronizing model Foreground color with the view", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

						protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
							LineStyle theLineStyle = (LineStyle) notification.getNotifier();
							if (notification.getFeatureID(LineStyle.class) == NotationPackage.LINE_STYLE__LINE_COLOR) {
								int color = theLineStyle.getLineColor();
								RGBColor modelColor;
								if (modelElement.getForegroundColor() instanceof RGBColor) {
									modelColor = (RGBColor) modelElement.getForegroundColor();
								} else {
									modelColor = GMFGraphFactory.eINSTANCE.createRGBColor();
									modelElement.setForegroundColor(modelColor);
								}
								if (modelColor.getRed() != (color & 0x000000FF) || modelColor.getGreen() != (color & 0x0000FF00) >> 8 || modelColor.getBlue() != (color & 0x00FF0000) >> 16) {
									modelColor.setRed(color & 0x000000FF);
									modelColor.setGreen((color & 0x0000FF00) >> 8);
									modelColor.setBlue((color & 0x00FF0000) >> 16);
								}
							}
							return Status.OK_STATUS;
						}
					}.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize model Foreground color with the view", e); //$NON-NLS-1$
				}
			}
		}, theLineStyle1);

d392 4
a395 62
	public static int getRgbColor(ConstantColor modelColor) {
		final int rgbColor;
		switch (modelColor.getValue().getValue()) {
		case ColorConstants.WHITE: {
			rgbColor = org.eclipse.draw2d.ColorConstants.white.getRGB().hashCode();
			break;
		}
		case ColorConstants.BLACK: {
			rgbColor = org.eclipse.draw2d.ColorConstants.black.getRGB().hashCode();
			break;
		}
		case ColorConstants.LIGHT_GRAY: {
			rgbColor = org.eclipse.draw2d.ColorConstants.lightGray.getRGB().hashCode();
			break;
		}
		case ColorConstants.GRAY: {
			rgbColor = org.eclipse.draw2d.ColorConstants.gray.getRGB().hashCode();
			break;
		}
		case ColorConstants.DARK_GRAY: {
			rgbColor = org.eclipse.draw2d.ColorConstants.darkGray.getRGB().hashCode();
			break;
		}
		case ColorConstants.RED: {
			rgbColor = org.eclipse.draw2d.ColorConstants.red.getRGB().hashCode();
			break;
		}
		case ColorConstants.ORANGE: {
			rgbColor = org.eclipse.draw2d.ColorConstants.orange.getRGB().hashCode();
			break;
		}
		case ColorConstants.YELLOW: {
			rgbColor = org.eclipse.draw2d.ColorConstants.yellow.getRGB().hashCode();
			break;
		}
		case ColorConstants.GREEN: {
			rgbColor = org.eclipse.draw2d.ColorConstants.green.getRGB().hashCode();
			break;
		}
		case ColorConstants.LIGHT_GREEN: {
			rgbColor = org.eclipse.draw2d.ColorConstants.lightGreen.getRGB().hashCode();
			break;
		}
		case ColorConstants.DARK_GREEN: {
			rgbColor = org.eclipse.draw2d.ColorConstants.darkGreen.getRGB().hashCode();
			break;
		}
		case ColorConstants.CYAN: {
			rgbColor = org.eclipse.draw2d.ColorConstants.cyan.getRGB().hashCode();
			break;
		}
		case ColorConstants.LIGHT_BLUE: {
			rgbColor = org.eclipse.draw2d.ColorConstants.lightBlue.getRGB().hashCode();
			break;
		}
		case ColorConstants.BLUE: {
			rgbColor = org.eclipse.draw2d.ColorConstants.blue.getRGB().hashCode();
			break;
		}
		case ColorConstants.DARK_BLUE: {
			rgbColor = org.eclipse.draw2d.ColorConstants.darkBlue.getRGB().hashCode();
			break;
d397 5
a401 2
		default:
			rgbColor = -1;
a402 1
		return rgbColor;
d404 1
@


1.9
log
@- Removing unnecessary borders around Top-level figures from FigureGallery
- copyrights updated.
@
text
@d261 1
d339 1
@


1.8
log
@Using standard figure accessor instead of private variable.
@
text
@d2 1
a2 1
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
a22 1
import org.eclipse.draw2d.CompoundBorder;
a24 2
import org.eclipse.draw2d.LineBorder;
import org.eclipse.draw2d.MarginBorder;
a58 2
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;
a129 4
		LineBorder contourBorder = new LineBorder(Display.getDefault().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
		MarginBorder marginBorder = new MarginBorder(5);
		CompoundBorder compoundBorder = new CompoundBorder(contourBorder, marginBorder);
		result.setBorder(compoundBorder);
@


1.7
log
@- Migrating to new .gmfgen model
- Using (0,0) as a minimum size for DefaultNode to make resize feedback minimum size == (0,0)
@
text
@a118 1
		myFigure = figure;
a228 5
	private RoundedRectangleFigure myFigure;

	/**
	 * @@generated
	 */
d262 8
a269 8
			myFigure.setOutline(modelElement.isOutline());
			myFigure.setFill(modelElement.isFill());
			myFigure.setLineWidth(modelElement.getLineWidth());
			myFigure.setLineStyle(getLineStyle(modelElement.getLineKind()));
			myFigure.setFillXOR(modelElement.isXorFill());
			myFigure.setOutlineXOR(modelElement.isXorOutline());
			myFigure.setCornerDimensions(getCornerDimensions(modelElement.getCornerWidth(), modelElement.getCornerHeight()));
			myFigure.setLayoutManager(getLayoutManager(modelElement.getLayout()));
d289 1
a289 1
				myFigure.setOutline(modelElement.isOutline());
d297 1
a297 1
				myFigure.setFill(modelElement.isFill());
d305 1
a305 1
				myFigure.setLineWidth(modelElement.getLineWidth());
d313 1
a313 1
				myFigure.setLineStyle(getLineStyle(modelElement.getLineKind()));
d321 1
a321 1
				myFigure.setFillXOR(modelElement.isXorFill());
d329 1
a329 1
				myFigure.setOutlineXOR(modelElement.isXorOutline());
d337 1
a337 1
				myFigure.setCornerDimensions(getCornerDimensions(modelElement.getCornerWidth(), modelElement.getCornerHeight()));
d346 1
a346 1
				myFigure.setLayoutManager(getLayoutManager(modelElement.getLayout()));
@


1.6
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@d135 1
@


1.5
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@a23 1
import org.eclipse.draw2d.Figure;
a25 1
import org.eclipse.draw2d.LayoutManager;
d28 1
a31 1
import org.eclipse.draw2d.geometry.Point;
a34 1
import org.eclipse.emf.common.notify.impl.AdapterImpl;
a36 1
import org.eclipse.gef.EditPart;
a38 1
import org.eclipse.gmf.gmfgraph.AbstractFigure;
a42 1
import org.eclipse.gmf.gmfgraph.Layoutable;
d44 1
a44 2
import org.eclipse.gmf.gmfgraph.RoundedRectangle;
import org.eclipse.gmf.gmfgraph.XYLayoutData;
d47 1
a52 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;
a55 2
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy;
a57 1
import org.eclipse.gmf.runtime.notation.Bounds;
a59 1
import org.eclipse.gmf.runtime.notation.Node;
d110 1
a110 25
		XYLayoutEditPolicy lep = new XYLayoutEditPolicy() {

			protected EditPolicy createChildEditPolicy(EditPart child) {
				EditPolicy result = super.createChildEditPolicy(child);
				if (result == null) {
					return new ResizableShapeEditPolicy();
				}
				return result;
			}

			protected Point getLayoutOrigin() {
				return ((GraphicalEditPart) getHost()).getContentPane().getClientArea().getLocation();
			}

			protected Rectangle getCurrentConstraintFor(org.eclipse.gef.GraphicalEditPart child) {
				Rectangle result = super.getCurrentConstraintFor(child);
				if (result == null) {
					IFigure fig = child.getFigure();
					result = fig.getBounds().getCopy();
				}
				return result;
			}

		};
		return lep;
a119 33
		RoundedRectangle modelElement = (RoundedRectangle) ((View) getModel()).getElement();
		if (modelElement != null) {
			{
				layoutDataChanged(modelElement.getLayoutData());
			}
			{
				layoutChanged(modelElement.getLayout());
			}
			{
				myFigure.setOutline(modelElement.isOutline());
			}
			{
				myFigure.setFill(modelElement.isFill());
			}
			{
				myFigure.setLineWidth(modelElement.getLineWidth());
			}
			{
				myFigure.setLineStyle(getLineStyle(modelElement.getLineKind()));
			}
			{
				myFigure.setFillXOR(modelElement.isXorFill());
			}
			{
				myFigure.setOutlineXOR(modelElement.isXorOutline());
			}
			{
				myFigure.setCornerDimensions(new Dimension(getMapMode().DPtoLP(modelElement.getCornerWidth()), getMapMode().DPtoLP(modelElement.getCornerHeight())));
			}
			{
				myFigure.setCornerDimensions(new Dimension(getMapMode().DPtoLP(modelElement.getCornerWidth()), getMapMode().DPtoLP(modelElement.getCornerHeight())));
			}
		}
a138 1
		myNodeFigure = result;
d194 1
a194 1
	public class RoundedRectangleFigure extends org.eclipse.draw2d.RoundedRectangle {
a230 1
	// TODO: use myFigure?
d234 1
a234 1
	protected Figure myNodeFigure;
d239 8
a246 1
	private Collection<Adapter> myDomainElementAdapters = new ArrayList<Adapter>();
d252 2
a253 3
		View view = (View) getModel();
		if (view.getElement() != null) {
			RoundedRectangle modelElement = (RoundedRectangle) view.getElement();
d263 18
d285 2
a286 2
		View view = (View) getModel();
		if (view.getElement() == null) {
d291 1
a291 20
		final RoundedRectangle modelElement = (RoundedRectangle) view.getElement();
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData(), new AdapterImpl() {

			public void notifyChanged(Notification msg) {
				if (msg.isTouch()) {
					return;
				}
				layoutDataChanged(modelElement.getLayoutData());
			}
		}));
		myDomainElementAdapters.add(new AttachAdapter(GMFGraphPackage.eINSTANCE.getLayoutable_Layout(), new AdapterImpl() {

			public void notifyChanged(Notification msg) {
				if (msg.isTouch()) {
					return;
				}
				layoutChanged(modelElement.getLayout());
			}
		}));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d296 4
a299 2
		}, GMFGraphPackage.eINSTANCE.getShape_Outline()));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d304 4
a307 2
		}, GMFGraphPackage.eINSTANCE.getShape_Fill()));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d312 4
a315 2
		}, GMFGraphPackage.eINSTANCE.getShape_LineWidth()));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d320 4
a323 2
		}, GMFGraphPackage.eINSTANCE.getShape_LineKind()));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d328 4
a331 2
		}, GMFGraphPackage.eINSTANCE.getShape_XorFill()));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d336 4
a339 2
		}, GMFGraphPackage.eINSTANCE.getShape_XorOutline()));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d342 1
a342 2
				myFigure.setCornerDimensions(new Dimension(getMapMode().DPtoLP(modelElement.getCornerWidth()), getMapMode().DPtoLP(modelElement.getCornerHeight())));
				myFigure.repaint();
d344 5
a348 2
		}, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerWidth()));
		myDomainElementAdapters.add(new FeatureTracker(new ChangeTracker() {
d351 1
a351 2
				myFigure.setCornerDimensions(new Dimension(getMapMode().DPtoLP(modelElement.getCornerWidth()), getMapMode().DPtoLP(modelElement.getCornerHeight())));
				myFigure.repaint();
d353 12
a364 1
		}, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerHeight()));
d367 1
a367 119
		final Bounds bounds = (Bounds) ((Node) view).getLayoutConstraint();
		final int sizeX;
		final int sizeY;
		if (modelElement.getPreferredSize() != null) {
			sizeX = getMapMode().DPtoLP(modelElement.getPreferredSize().getDx());
			sizeY = getMapMode().DPtoLP(modelElement.getPreferredSize().getDy());
		} else {
			sizeX = getMapMode().DPtoLP(20);
			sizeY = getMapMode().DPtoLP(20);
		}
		final int locationX;
		final int locationY;
		if (modelElement.getLocation() != null) {
			locationX = getMapMode().DPtoLP(modelElement.getLocation().getX());
			locationY = getMapMode().DPtoLP(modelElement.getLocation().getY());
		} else {
			locationX = bounds.getX();
			locationY = bounds.getY();
		}
		if (sizeX != bounds.getWidth() || sizeY != bounds.getHeight() || locationX != bounds.getX() || locationY != bounds.getY()) {
			try {
				new AbstractEMFOperation(getEditingDomain(), "Synchronizing view size with the model", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

					protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
						bounds.setX(locationX);
						bounds.setY(locationY);
						bounds.setWidth(sizeX);
						bounds.setHeight(sizeY);
						return Status.OK_STATUS;
					}
				}.execute(new NullProgressMonitor(), null);
			} catch (ExecutionException e) {
				GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view size with the model", e); //$NON-NLS-1$			
			}
		}
		addListenerFilter("BoundsListener", new NotificationListener() {

			public void notifyChanged(final Notification notification) {
				try {
					new AbstractEMFOperation(getEditingDomain(), "Synchronizing model size with the view", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$

						protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
							Bounds bounds = (Bounds) notification.getNotifier();
							org.eclipse.gmf.gmfgraph.Dimension dim = modelElement.getPreferredSize();
							if (dim == null) {
								dim = GMFGraphFactory.eINSTANCE.createDimension();
								modelElement.setPreferredSize(dim);
							}
							org.eclipse.gmf.gmfgraph.Point location = modelElement.getLocation();
							if (location == null) {
								location = GMFGraphFactory.eINSTANCE.createPoint();
								modelElement.setLocation(location);
							}

							int x = getMapMode().LPtoDP(bounds.getX());
							int y = getMapMode().LPtoDP(bounds.getY());
							int width = getMapMode().LPtoDP(bounds.getWidth());
							int height = getMapMode().LPtoDP(bounds.getHeight());
							if (location.getX() != x || location.getY() != y) {
								location.setX(x);
								location.setY(y);
							}
							if (dim.getDx() != width || dim.getDy() != height) {
								dim.setDx(width);
								dim.setDy(height);
							}

							myNodeFigure.setPreferredSize(bounds.getWidth(), bounds.getHeight());
							myNodeFigure.setLocation(new Point(bounds.getX(), bounds.getY()));

							if (modelElement.getLayoutData() instanceof XYLayoutData
									|| (modelElement.eContainer() instanceof Layoutable && ((Layoutable) modelElement.eContainer()).getLayout() instanceof org.eclipse.gmf.gmfgraph.XYLayout)) {
								XYLayoutData xyLayoutData = (XYLayoutData) modelElement.getLayoutData();
								if (xyLayoutData == null) {
									xyLayoutData = GMFGraphFactory.eINSTANCE.createXYLayoutData();
									modelElement.setLayoutData(xyLayoutData);
									xyLayoutData.setTopLeft(GMFGraphFactory.eINSTANCE.createPoint());
									xyLayoutData.getTopLeft().setX(0);
									xyLayoutData.getTopLeft().setY(0);
									xyLayoutData.setSize(GMFGraphFactory.eINSTANCE.createDimension());
									xyLayoutData.getSize().setDx(40);
									xyLayoutData.getSize().setDy(40);
								}
								org.eclipse.gmf.gmfgraph.Point topLeft;
								if (xyLayoutData.getTopLeft() != null) {
									topLeft = xyLayoutData.getTopLeft();
								} else {
									topLeft = GMFGraphFactory.eINSTANCE.createPoint();
									xyLayoutData.setTopLeft(topLeft);
								}
								if (topLeft.getX() != location.getX() || topLeft.getY() != location.getY()) {
									topLeft.setX(location.getX());
									topLeft.setY(location.getY());
								}

								org.eclipse.gmf.gmfgraph.Dimension size;
								if (xyLayoutData.getSize() != null) {
									size = xyLayoutData.getSize();
								} else {
									size = GMFGraphFactory.eINSTANCE.createDimension();
									xyLayoutData.setSize(size);
								}
								if (size.getDx() != dim.getDx() || size.getDy() != dim.getDy()) {
									size.setDx(dim.getDx());
									size.setDy(dim.getDy());
								}
							}
							return Status.OK_STATUS;
						}
					}.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize model size with the view", e); //$NON-NLS-1$			
				}
				if (getRoot() != null) {
					handleMajorSemanticChange();
				}
			}
		}, bounds);

a491 27
	protected LayoutManager getFigureLayoutManager() {
		return myFigure.getLayoutManager();
	}

	/**
	 * @@generated
	 */
	protected void setFigureLayoutManager(LayoutManager layoutManager) {
		myFigure.setLayoutManager(layoutManager);
	}

	/**
	 * @@generated
	 */
	protected void refreshBounds() {
		if (((View) getParent().getModel()).getElement() instanceof AbstractFigure) {
			int width = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getSize_Width())).intValue();
			int height = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getSize_Height())).intValue();
			myNodeFigure.setPreferredSize(new Dimension(width, height));
		} else {
			super.refreshBounds();
		}
	}

	/**
	 * @@generated
	 */
@


1.4
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@d341 3
d350 3
@


1.3
log
@Updating with new figures code + setting proper layout for diahram elements
@
text
@d13 2
d31 1
d35 1
d37 1
a50 1
import org.eclipse.gmf.gmfgraph.XYLayout;
d55 3
d270 1
a270 1
			this.setLayoutManager(new org.eclipse.draw2d.XYLayout());
d300 1
d309 18
d338 1
d340 1
a340 16
		final NotificationListener Layoutable_LayoutData_PropertiesListener = new NotificationListener() {

			public void notifyChanged(Notification notification) {
				layoutDataChanged(modelElement.getLayoutData());
			}
		};
		if (modelElement.getLayoutData() != null) {
			addListenerFilter("Layoutable_LayoutData_PropertiesListener", Layoutable_LayoutData_PropertiesListener, modelElement.getLayoutData());
		}
		addListenerFilter("Layoutable_LayoutData_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				removeListenerFilter("Layoutable_LayoutData_PropertiesListener");
				if (modelElement.getLayoutData() != null) {
					addListenerFilter("Layoutable_LayoutData_PropertiesListener", Layoutable_LayoutData_PropertiesListener, modelElement.getLayoutData());
				}
d343 2
a344 3
		}, modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData());

		final NotificationListener Layoutable_Layout_PropertiesListener = new NotificationListener() {
d346 1
a346 1
			public void notifyChanged(Notification notification) {
d349 2
a350 16
		};
		if (modelElement.getLayout() != null) {
			addListenerFilter("Layoutable_Layout_PropertiesListener", Layoutable_Layout_PropertiesListener, modelElement.getLayout());
		}
		addListenerFilter("Layoutable_Layout_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
				removeListenerFilter("Layoutable_Layout_PropertiesListener");
				if (modelElement.getLayout() != null) {
					addListenerFilter("Layoutable_Layout_PropertiesListener", Layoutable_Layout_PropertiesListener, modelElement.getLayout());
				}
				layoutChanged(modelElement.getLayout());
			}
		}, modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_Layout());

		addListenerFilter("Shape_Outline_Listener", new NotificationListener() {
d352 1
a352 1
			public void notifyChanged(Notification notification) {
d355 2
a356 1
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_Outline());
d358 1
a358 3
		addListenerFilter("Shape_Fill_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
d361 2
a362 3
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_Fill());

		addListenerFilter("Shape_LineWidth_Listener", new NotificationListener() {
d364 1
a364 1
			public void notifyChanged(Notification notification) {
d367 2
a368 1
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_LineWidth());
d370 1
a370 3
		addListenerFilter("Shape_LineKind_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
d373 2
a374 3
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_LineKind());

		addListenerFilter("Shape_XorFill_Listener", new NotificationListener() {
d376 1
a376 1
			public void notifyChanged(Notification notification) {
d379 2
a380 1
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_XorFill());
d382 1
a382 3
		addListenerFilter("Shape_XorOutline_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
d385 2
a386 3
		}, modelElement, GMFGraphPackage.eINSTANCE.getShape_XorOutline());

		addListenerFilter("RoundedRectangle_CornerWidth_Listener", new NotificationListener() {
d388 1
a388 1
			public void notifyChanged(Notification notification) {
d392 2
a393 1
		}, modelElement, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerWidth());
d395 1
a395 3
		addListenerFilter("RoundedRectangle_CornerHeight_Listener", new NotificationListener() {

			public void notifyChanged(Notification notification) {
d399 2
a400 1
		}, modelElement, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerHeight());
d473 1
a473 1
									|| (modelElement.eContainer() instanceof Layoutable && ((Layoutable) modelElement.eContainer()).getLayout() instanceof XYLayout)) {
a739 1

@


1.2
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@a52 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
@


1.1
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d53 1
a101 1

d196 1
a196 1
		DefaultSizeNodeFigure result = new DefaultSizeNodeFigure(getMapMode().DPtoLP(40), getMapMode().DPtoLP(40));
d257 35
a293 1
// TODO: use myFigure?
a750 35
	/**
	 * @@generated
	 */
	public class RoundedRectangleFigure extends org.eclipse.draw2d.RoundedRectangle {

		/**
		 * @@generated
		 */
		public RoundedRectangleFigure() {

			this.setLayoutManager(new org.eclipse.draw2d.XYLayout());
			this.setCornerDimensions(new Dimension(getMapMode().DPtoLP(8), getMapMode().DPtoLP(8)));
		}

		/**
		 * @@generated
		 */
		private boolean myUseLocalCoordinates = false;

		/**
		 * @@generated
		 */
		protected boolean useLocalCoordinates() {
			return myUseLocalCoordinates;
		}

		/**
		 * @@generated
		 */
		protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
			myUseLocalCoordinates = useLocalCoordinates;
		}

	}

@

