head	1.15;
access;
symbols
	v20080722-1827:1.15
	v20080718-1700:1.15
	v20080718-1731:1.15
	v20080716-1642:1.15
	R2_1_maintenance:1.15.0.2
	Root_R2_1_maintenance:1.15
	R2_1_0:1.15
	v20080610-1132:1.15
	v20080603-1553:1.15
	v20080528-1052:1.14
	v20080521:1.13
	v20080516-1143:1.13
	v20080512-1200:1.13
	v20080510-0100:1.13
	v20080507-1326:1.13
	v20080501-1739:1.13
	v20080425-1959:1.13
	v20080411-0411:1.13
	v20080404-1111:1.13
	v20080322-0000:1.13
	v20080114-2222:1.12
	v20071214-1111:1.12
	v20070809-0000:1.12
	R2_0_maintenance:1.12.0.2
	R2_0:1.12
	R4_20:1.12
	v20070621-0000:1.12
	RC3_20:1.12
	v20070605-1400:1.12
	v20070601-1400:1.12
	v20070520-1200:1.11
	v20070420-1000:1.11
	v20070405-2000:1.10
	v20070405-1100:1.10
	v20070330-1300:1.9
	v20070307-0700:1.9
	v20070221-1500:1.7
	v20070208-1800:1.6
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	M1_20:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060609-1400:1.5
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.2
	v20060519-0800:1.2
	v20060512-1000:1.1
	I20060512-1000:1.1
	RC2_10:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.15
date	2008.06.03.16.56.38;	author ashatalin;	state Exp;
branches;
next	1.14;
commitid	58c484577c54567;

1.14
date	2008.05.28.12.37.13;	author ashatalin;	state Exp;
branches;
next	1.13;
commitid	5988483d51f74567;

1.13
date	2008.02.22.13.08.00;	author ashatalin;	state Exp;
branches;
next	1.12;
commitid	4c5647bec9294567;

1.12
date	2007.05.31.15.52.29;	author ashatalin;	state Exp;
branches;
next	1.11;
commitid	49f1465eef2c4567;

1.11
date	2007.04.16.11.03.53;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	7e4e462358154567;

1.10
date	2007.04.04.20.23.25;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	ade461409204567;

1.9
date	2007.03.02.19.21.06;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	1bbe45e879214567;

1.8
date	2007.03.02.15.39.20;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	717a45e845234567;

1.7
date	2007.02.09.20.08.30;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	179c45ccd4b34567;

1.6
date	2006.06.13.13.28.07;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.09.10.16.08;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.02.15.08.30;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.30.13.06.14;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.17.14.57.15;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.58.24;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Example code was regenerated with latest templates.
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.part;

import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;

import org.eclipse.emf.common.ui.URIEditorInput;

import org.eclipse.emf.common.util.URI;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.resource.Resource;

import org.eclipse.emf.edit.ui.dnd.LocalTransfer;

import org.eclipse.gef.EditPartViewer;

import org.eclipse.gmf.graphdef.editor.navigator.GMFGraphNavigatorItem;

import org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService;

import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;

import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener;

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider;

import org.eclipse.gmf.runtime.notation.View;

import org.eclipse.jface.dialogs.ErrorDialog;
import org.eclipse.jface.dialogs.IMessageProvider;
import org.eclipse.jface.dialogs.MessageDialog;

import org.eclipse.jface.util.LocalSelectionTransfer;

import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;

import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.window.Window;

import org.eclipse.osgi.util.NLS;

import org.eclipse.swt.dnd.Transfer;
import org.eclipse.swt.dnd.TransferData;

import org.eclipse.swt.widgets.Shell;

import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorMatchingStrategy;
import org.eclipse.ui.IEditorReference;
import org.eclipse.ui.IFileEditorInput;
import org.eclipse.ui.PlatformUI;

import org.eclipse.ui.dialogs.SaveAsDialog;

import org.eclipse.ui.ide.IGotoMarker;

import org.eclipse.ui.navigator.resources.ProjectExplorer;
import org.eclipse.ui.part.FileEditorInput;
import org.eclipse.ui.part.IShowInTargetList;
import org.eclipse.ui.part.ShowInContext;

/**
 * @@generated
 */
public class GMFGraphDiagramEditor extends DiagramDocumentEditor implements IGotoMarker {

	/**
	 * @@generated
	 */
	public static final String ID = "org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorID"; //$NON-NLS-1$

	/**
	 * @@generated
	 */
	public static final String CONTEXT_ID = "org.eclipse.gmf.graphdef.editor.ui.diagramContext"; //$NON-NLS-1$

	/**
	 * @@generated
	 */
	public GMFGraphDiagramEditor() {
		super(true);
	}

	/**
	 * @@generated
	 */
	protected String getContextID() {
		return CONTEXT_ID;
	}

	/**
	 * @@generated
	 */
	protected PaletteRoot createPaletteRoot(PaletteRoot existingPaletteRoot) {
		PaletteRoot root = super.createPaletteRoot(existingPaletteRoot);
		new GMFGraphPaletteFactory().fillPalette(root);
		return root;
	}

	/**
	 * @@generated
	 */
	protected PreferencesHint getPreferencesHint() {
		return GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT;
	}

	/**
	 * @@generated
	 */
	public String getContributorId() {
		return GMFGraphDiagramEditorPlugin.ID;
	}

	/**
	 * @@generated
	 */
	public Object getAdapter(Class type) {
		if (type == IShowInTargetList.class) {
			return new IShowInTargetList() {

				public String[] getShowInTargetIds() {
					return new String[] { ProjectExplorer.VIEW_ID };
				}
			};
		}
		return super.getAdapter(type);
	}

	/**
	 * @@generated
	 */
	protected IDocumentProvider getDocumentProvider(IEditorInput input) {
		if (input instanceof IFileEditorInput || input instanceof URIEditorInput) {
			return GMFGraphDiagramEditorPlugin.getInstance().getDocumentProvider();
		}
		return super.getDocumentProvider(input);
	}

	/**
	 * @@generated
	 */
	public TransactionalEditingDomain getEditingDomain() {
		IDocument document = getEditorInput() != null ? getDocumentProvider().getDocument(getEditorInput()) : null;
		if (document instanceof IDiagramDocument) {
			return ((IDiagramDocument) document).getEditingDomain();
		}
		return super.getEditingDomain();
	}

	/**
	 * @@generated
	 */
	protected void setDocumentProvider(IEditorInput input) {
		if (input instanceof IFileEditorInput || input instanceof URIEditorInput) {
			setDocumentProvider(GMFGraphDiagramEditorPlugin.getInstance().getDocumentProvider());
		} else {
			super.setDocumentProvider(input);
		}
	}

	/**
	 * @@generated
	 */
	public void gotoMarker(IMarker marker) {
		MarkerNavigationService.getInstance().gotoMarker(this, marker);
	}

	/**
	 * @@generated
	 */
	public boolean isSaveAsAllowed() {
		return true;
	}

	/**
	 * @@generated
	 */
	public void doSaveAs() {
		performSaveAs(new NullProgressMonitor());
	}

	/**
	 * @@generated
	 */
	protected void performSaveAs(IProgressMonitor progressMonitor) {
		Shell shell = getSite().getShell();
		IEditorInput input = getEditorInput();
		SaveAsDialog dialog = new SaveAsDialog(shell);
		IFile original = input instanceof IFileEditorInput ? ((IFileEditorInput) input).getFile() : null;
		if (original != null) {
			dialog.setOriginalFile(original);
		}
		dialog.create();
		IDocumentProvider provider = getDocumentProvider();
		if (provider == null) {
			// editor has been programmatically closed while the dialog was open
			return;
		}
		if (provider.isDeleted(input) && original != null) {
			String message = NLS.bind(Messages.GMFGraphDiagramEditor_SavingDeletedFile, original.getName());
			dialog.setErrorMessage(null);
			dialog.setMessage(message, IMessageProvider.WARNING);
		}
		if (dialog.open() == Window.CANCEL) {
			if (progressMonitor != null) {
				progressMonitor.setCanceled(true);
			}
			return;
		}
		IPath filePath = dialog.getResult();
		if (filePath == null) {
			if (progressMonitor != null) {
				progressMonitor.setCanceled(true);
			}
			return;
		}
		IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();
		IFile file = workspaceRoot.getFile(filePath);
		final IEditorInput newInput = new FileEditorInput(file);
		// Check if the editor is already open
		IEditorMatchingStrategy matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();
		IEditorReference[] editorRefs = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
		for (int i = 0; i < editorRefs.length; i++) {
			if (matchingStrategy.matches(editorRefs[i], newInput)) {
				MessageDialog.openWarning(shell, Messages.GMFGraphDiagramEditor_SaveAsErrorTitle, Messages.GMFGraphDiagramEditor_SaveAsErrorMessage);
				return;
			}
		}
		boolean success = false;
		try {
			provider.aboutToChange(newInput);
			getDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);
			success = true;
		} catch (CoreException x) {
			IStatus status = x.getStatus();
			if (status == null || status.getSeverity() != IStatus.CANCEL) {
				ErrorDialog.openError(shell, Messages.GMFGraphDiagramEditor_SaveErrorTitle, Messages.GMFGraphDiagramEditor_SaveErrorMessage, x.getStatus());
			}
		} finally {
			provider.changed(newInput);
			if (success) {
				setInput(newInput);
			}
		}
		if (progressMonitor != null) {
			progressMonitor.setCanceled(!success);
		}
	}

	/**
	 * @@generated
	 */
	public ShowInContext getShowInContext() {
		return new ShowInContext(getEditorInput(), getNavigatorSelection());
	}

	/**
	 * @@generated
	 */
	private ISelection getNavigatorSelection() {
		IDiagramDocument document = getDiagramDocument();
		if (document == null) {
			return StructuredSelection.EMPTY;
		}
		Diagram diagram = document.getDiagram();
		IFile file = WorkspaceSynchronizer.getFile(diagram.eResource());
		if (file != null) {
			GMFGraphNavigatorItem item = new GMFGraphNavigatorItem(diagram, file, false);
			return new StructuredSelection(item);
		}
		return StructuredSelection.EMPTY;
	}

	/**
	 * @@generated
	 */
	protected void configureGraphicalViewer() {
		super.configureGraphicalViewer();
		DiagramEditorContextMenuProvider provider = new DiagramEditorContextMenuProvider(this, getDiagramGraphicalViewer());
		getDiagramGraphicalViewer().setContextMenu(provider);
		getSite().registerContextMenu(ActionIds.DIAGRAM_EDITOR_CONTEXT_MENU, provider, getDiagramGraphicalViewer());
	}

	/**
	 * @@generated
	 */
	protected void initializeGraphicalViewer() {
		super.initializeGraphicalViewer();
		getDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), LocalSelectionTransfer.getTransfer()) {

			protected Object getJavaObject(TransferData data) {
				return LocalSelectionTransfer.getTransfer().nativeToJava(data);
			}

		});
		getDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), LocalTransfer.getInstance()) {

			protected Object getJavaObject(TransferData data) {
				return LocalTransfer.getInstance().nativeToJava(data);
			}

		});
	}

	/**
	 * @@generated
	 */
	private abstract class DropTargetListener extends DiagramDropTargetListener {

		/**
		 * @@generated
		 */
		public DropTargetListener(EditPartViewer viewer, Transfer xfer) {
			super(viewer, xfer);
		}

		/**
		 * @@generated
		 */
		protected List getObjectsBeingDropped() {
			TransferData data = getCurrentEvent().currentDataType;
			Collection uris = new HashSet();

			Object transferedObject = getJavaObject(data);
			if (transferedObject instanceof IStructuredSelection) {
				IStructuredSelection selection = (IStructuredSelection) transferedObject;
				for (Iterator it = selection.iterator(); it.hasNext();) {
					Object nextSelectedObject = it.next();
					if (nextSelectedObject instanceof GMFGraphNavigatorItem) {
						View view = ((GMFGraphNavigatorItem) nextSelectedObject).getView();
						nextSelectedObject = view.getElement();
					} else if (nextSelectedObject instanceof IAdaptable) {
						IAdaptable adaptable = (IAdaptable) nextSelectedObject;
						nextSelectedObject = adaptable.getAdapter(EObject.class);
					}

					if (nextSelectedObject instanceof EObject) {
						EObject modelElement = (EObject) nextSelectedObject;
						Resource modelElementResource = modelElement.eResource();
						uris.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));
					}
				}
			}

			List result = new ArrayList();
			for (Iterator it = uris.iterator(); it.hasNext();) {
				URI nextURI = (URI) it.next();
				EObject modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);
				result.add(modelObject);
			}
			return result;
		}

		/**
		 * @@generated
		 */
		protected abstract Object getJavaObject(TransferData data);

	}

}@


1.14
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d54 1
d314 3
a316 1
		getDiagramGraphicalViewer().setContextMenu(new DiagramEditorContextMenuProvider(this, getDiagramGraphicalViewer()));
@


1.13
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@d311 8
@


1.12
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d15 1
d17 1
d68 1
d71 1
d91 1
d93 2
d151 15
d234 1
a234 1
			String message = NLS.bind("The original file ''{0}'' has been deleted.", original.getName());
d259 1
a259 1
				MessageDialog.openWarning(shell, "Problem During Save As...", "Save could not be completed. Target file is already open in another editor.");
d271 1
a271 1
				ErrorDialog.openError(shell, "Save Problems", "Could not save file.", x.getStatus());
d287 24
@


1.11
log
@[182339] akarjakina - provide different means to select parts of composite figures
Visible insets for top-level figures, custom popup action with nested submenus, simple handles behavior
@
text
@d2 8
a9 8
 * Copyright (c) 2006, 2007 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
d13 3
d26 1
d33 1
d35 1
d37 1
d39 1
d41 1
d43 1
a43 1
import org.eclipse.emf.transaction.TransactionalEditingDomain;
d45 1
a45 1
import org.eclipse.gef.palette.PaletteRoot;
d47 1
d49 1
d51 1
d53 1
d57 1
a57 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;
d59 1
d63 1
d65 1
d67 1
d69 1
d71 1
d74 1
d76 1
d82 1
d84 1
d86 1
d102 5
d114 7
@


1.10
log
@[173499] akarjakina - Enhance graphdef.editor with properties - use custom model to describe property sheet and generate PropertyTab code from that model
@
text
@a12 3
import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
a22 1

a28 1

a29 1

a30 1

a31 1

a32 1

d34 1
a34 1

d36 1
a36 1

a37 1

a38 1

a39 1

a40 1

d44 1
a44 1

a45 1

a48 1

a49 1

a50 1

a51 1

a52 1

a54 1

a55 1

a60 1

a61 1

a62 1

@


1.9
log
@organized imports
@
text
@d13 3
d26 1
d28 1
d33 1
d35 1
d37 1
d39 1
d41 1
d43 1
a43 1
import org.eclipse.emf.transaction.TransactionalEditingDomain;
d45 1
a45 1
import org.eclipse.gef.palette.PaletteRoot;
d47 1
d49 1
d51 1
d53 1
d57 1
a57 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;
d59 1
d63 1
d65 1
d67 1
d69 1
d71 1
d74 1
d76 1
d82 1
d84 1
d86 1
d298 3
d302 1
d327 1
a327 1
}
@


1.8
log
@[176026] akarjakina - Fix notation background and foreground colors update
[173499] akarjakina - Add custom form-based property sections fro figure attributes
@
text
@a12 3
import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
a22 1

a27 1

a28 1

a29 1

a30 1

a31 1

d33 1
a33 1

d35 1
a35 1

a36 1

a37 1

a38 1

d40 2
a41 1

d43 1
a43 3

import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.StorageDiagramDocumentProvider;

a44 1

a47 1

a48 1

a49 1

a50 1

a51 1

a53 1

a54 1

a59 1

a60 1

a61 1

a62 2
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;
@


1.7
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@a52 2
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;
d87 2
d134 2
a135 2
		if (input instanceof URIEditorInput) {
			return new URIDiagramDocumentProvider();
d155 1
a155 1
		if (input instanceof IFileEditorInput) {
a156 2
		} else if (input instanceof URIEditorInput) {
			setDocumentProvider(new URIDiagramDocumentProvider());
d158 1
a158 1
			setDocumentProvider(new StorageDiagramDocumentProvider());
@


1.6
log
@Supporting EditorInput returned from version-control.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation and others.
d13 2
a14 8
import org.eclipse.draw2d.DelegatingLayout;
import org.eclipse.draw2d.FreeformLayer;
import org.eclipse.draw2d.LayeredPane;
import org.eclipse.gef.LayerConstants;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDiagramEditor;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.ide.IGotoMarker;
d16 6
d23 25
d49 7
a55 1
import org.eclipse.gmf.graphdef.editor.edit.parts.GMFGraphEditPartFactory;
d59 31
d93 1
a93 1
public class GMFGraphDiagramEditor extends FileDiagramEditor implements IGotoMarker {
d110 11
a120 2
	protected String getEditingDomainID() {
		return "org.eclipse.gmf.graphdef.editor.EditingDomain"; //$NON-NLS-1$
d126 23
a148 4
	protected TransactionalEditingDomain createEditingDomain() {
		TransactionalEditingDomain domain = super.createEditingDomain();
		domain.setID(getEditingDomainID());
		return domain;
d155 4
a158 2
		if (input.getAdapter(IFile.class) != null) {
			setDocumentProvider(new GMFGraphDocumentProvider());
d167 2
a168 11
	protected void configureGraphicalViewer() {
		super.configureGraphicalViewer();
		DiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();
		LayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);
		FreeformLayer extLabelsLayer = new FreeformLayer();
		extLabelsLayer.setLayoutManager(new DelegatingLayout());
		printableLayers.addLayerAfter(extLabelsLayer, GMFGraphEditPartFactory.EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);
		LayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);
		FreeformLayer scaledFeedbackLayer = new FreeformLayer();
		scaledFeedbackLayer.setEnabled(false);
		scalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);
d170 156
@


1.5
log
@#143541 Add property to gmfgen to hold editing domain id
#144205 Add property to gmfgen model to hold diagram creation wizard category id
@
text
@d22 2
d26 2
d65 5
a69 1
		setDocumentProvider(new GMFGraphDocumentProvider());
@


1.4
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d45 1
a45 1
		return "GMFGraphEditingDomain"; //$NON-NLS-1$
@


1.3
log
@[synch] Synchronizing with the templates
@
text
@d1 1
a1 1
/**
d32 1
a32 1
	public static final String ID = "org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorID";
d45 1
a45 1
		return "GMFGraphEditingDomain";
@


1.2
log
@Updating with new templates.
@
text
@d1 10
@


1.1
log
@.gmfgen model updated with new plugin name.
@
text
@d11 1
d34 16
@

