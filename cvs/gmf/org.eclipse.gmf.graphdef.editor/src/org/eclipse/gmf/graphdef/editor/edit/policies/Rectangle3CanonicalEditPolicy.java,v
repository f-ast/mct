head	1.4;
access;
symbols
	v20080722-1827:1.4
	v20080718-1700:1.3
	v20080718-1731:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080603-1553:1.3
	v20080528-1052:1.1
	v20080521:1.1
	v20080516-1143:1.1
	v20080512-1200:1.1
	v20080510-0100:1.1
	v20080507-1326:1.1
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080411-0411:1.1
	v20080404-1111:1.1
	v20080322-0000:1.1
	v20080114-2222:1.1
	v20071214-1111:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2008.07.02.15.20.45;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	703486b9cc54567;

1.3
date	2008.06.03.16.56.38;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	58c484577c54567;

1.2
date	2008.05.30.17.14.49;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	70b4484036034567;

1.1
date	2007.05.31.15.52.31;	author ashatalin;	state Exp;
branches;
next	;
commitid	49f1465eef2c4567;


desc
@@


1.4
log
@[233207] - Support Label figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.edit.policies;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.graphdef.editor.edit.parts.EllipseEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.LabelEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolygonEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.PolylineEditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle2EditPart;
import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangleEditPart;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramUpdater;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphNodeDescriptor;
import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class Rectangle3CanonicalEditPolicy extends CanonicalEditPolicy {

	/**
	 * @@generated
	 */
	Set myFeaturesToSynchronize;

	/**
	 * @@generated
	 */
	protected List getSemanticChildrenList() {
		View viewObject = (View) getHost().getModel();
		List result = new LinkedList();
		for (Iterator it = GMFGraphDiagramUpdater.getRectangle_3018SemanticChildren(viewObject).iterator(); it.hasNext();) {
			result.add(((GMFGraphNodeDescriptor) it.next()).getModelElement());
		}
		return result;
	}

	/**
	 * @@generated
	 */
	protected boolean isOrphaned(Collection semanticChildren, final View view) {
		int visualID = GMFGraphVisualIDRegistry.getVisualID(view);
		switch (visualID) {
		case Rectangle2EditPart.VISUAL_ID:
		case EllipseEditPart.VISUAL_ID:
		case RoundedRectangleEditPart.VISUAL_ID:
		case PolylineEditPart.VISUAL_ID:
		case PolygonEditPart.VISUAL_ID:
		case LabelEditPart.VISUAL_ID:
			if (!semanticChildren.contains(view.getElement())) {
				return true;
			}
		}
		return false;
	}

	/**
	 * @@generated
	 */
	protected String getDefaultFactoryHint() {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Set getFeaturesToSynchronize() {
		if (myFeaturesToSynchronize == null) {
			myFeaturesToSynchronize = new HashSet();
			myFeaturesToSynchronize.add(GMFGraphPackage.eINSTANCE.getRealFigure_Children());
		}
		return myFeaturesToSynchronize;
	}

}
@


1.3
log
@Example code was regenerated with latest templates.
@
text
@d22 1
d66 1
@


1.2
log
@[233206] - Support Polygon figure in .gmfgraph editor
@
text
@d65 3
a67 1
			return !semanticChildren.contains(view.getElement()) || visualID != GMFGraphVisualIDRegistry.getNodeVisualID((View) getHost().getModel(), view.getElement());
@


1.1
log
@[190196] akarjakina - Adjust GMFGraph Editor according recent gmfgraph metamodel with support for FigureDescriptor introduced
@
text
@d22 1
d64 1
@

