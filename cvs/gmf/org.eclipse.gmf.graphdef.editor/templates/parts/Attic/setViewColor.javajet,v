head	1.2;
access;
symbols
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061013-1330:1.1
	M1_20:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	RC2_10:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2007.02.09.20.08.31;	author atikhomirov;	state dead;
branches;
next	1.1;
commitid	179c45ccd4b34567;

1.1
date	2006.04.14.12.33.35;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@if (modelElement.get<%=modelColorProperty%>Color() != null) {
	final int rgbColor;
	if (modelElement.get<%=modelColorProperty%>Color() instanceof RGBColor) {
		<%=importManager.getImportedName("org.eclipse.gmf.gmfgraph.RGBColor")%> modelColor = (<%=importManager.getImportedName("org.eclipse.gmf.gmfgraph.RGBColor")%>) modelElement.get<%=modelColorProperty%>Color();
		rgbColor = (modelColor.getRed()& 0xFF) | ((modelColor.getGreen() & 0xFF) << 8) | ((modelColor.getBlue() & 0xFF) << 16);
	} else {
		<%=importManager.getImportedName("org.eclipse.gmf.gmfgraph.ConstantColor")%> modelColor = (<%=importManager.getImportedName("org.eclipse.gmf.gmfgraph.ConstantColor")%>) modelElement.get<%=modelColorProperty%>Color();
		switch (modelColor.getValue().getValue()) {
/*
		case <nextValue>: {
			rgbColor = org.eclipse.draw2d.ColorConstants.<nextColorLiteral.getName()>.getRGB().hashCode();
			break;
		}
*/
		default: 
			rgbColor = -1;
		}
	}
	if (rgbColor != -1 && shapeStyle.get<%=viewColorProperty%>Color() != rgbColor) {
		<%=importManager.getImportedName("org.eclipse.emf.workspace.AbstractEMFOperation")%> setColorOperation = new <%=importManager.getImportedName("org.eclipse.emf.workspace.AbstractEMFOperation")%>(getEditingDomain(), "Synchronizing view <%=modelColorProperty%> color with the model", <%=importManager.getImportedName("java.util.Collections")%>.singletonMap(<%=importManager.getImportedName("org.eclipse.emf.transaction.Transaction")%>.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
			protected <%=importManager.getImportedName("org.eclipse.core.runtime.IStatus")%> doExecute(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> monitor, <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%> info) throws <%=importManager.getImportedName("org.eclipse.core.commands.ExecutionException")%> {
				shapeStyle.set<%=viewColorProperty%>Color(rgbColor);
				return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.OK_STATUS;
			}
		};
		try {
			setColorOperation.execute(new <%=importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%>(), null);
		} catch (<%=importManager.getImportedName("org.eclipse.core.commands.ExecutionException")%> e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to synchronize view <%=modelColorProperty%> background color with the model", e); //$NON-NLS-1$
		}
	}
}@


1.1
log
@Initial import
@
text
@@

