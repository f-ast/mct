head	1.11;
access;
symbols
	v20080722-1827:1.11
	v20080718-1700:1.11
	v20080718-1731:1.11
	v20080716-1642:1.11
	R2_1_maintenance:1.11.0.2
	Root_R2_1_maintenance:1.11
	R2_1_0:1.11
	v20080610-1132:1.11
	v20080603-1553:1.11
	v20080528-1052:1.10
	v20080521:1.8
	v20080516-1143:1.7
	v20080512-1200:1.5
	v20080510-0100:1.4
	v20080507-1326:1.4
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080411-0411:1.3
	v20080404-1111:1.3
	v20080322-0000:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.11
date	2008.05.30.17.14.49;	author ashatalin;	state Exp;
branches;
next	1.10;
commitid	70b4484036034567;

1.10
date	2008.05.27.12.28.08;	author ashatalin;	state Exp;
branches;
next	1.9;
commitid	68fd483bfe544567;

1.9
date	2008.05.22.12.18.02;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	969483564774567;

1.8
date	2008.05.19.16.33.11;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	77734831abc34567;

1.7
date	2008.05.14.17.23.29;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	412b482b200e4567;

1.6
date	2008.05.14.11.16.59;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	377e482aca274567;

1.5
date	2008.05.12.17.40.17;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	a53482880fd4567;

1.4
date	2008.04.15.13.38.49;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	1b9a4804afe84567;

1.3
date	2008.03.07.11.46.07;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	629547d12aff4567;

1.2
date	2008.03.07.11.35.53;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	5ab247d128944567;

1.1
date	2008.02.22.13.08.00;	author ashatalin;	state Exp;
branches;
next	;
commitid	4c5647bec9294567;


desc
@@


1.11
log
@[233206] - Support Polygon figure in .gmfgraph editor
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Anna Karjakina (Borland) - initial API and implementation
 */
 
import "http://www.eclipse.org/gmf/2006/GraphicalDefinition";
import "http://www.eclipse.org/gmf/2008/GenModel";
import "http://www.eclipse.org/emf/2002/GenModel";
import "http://www.eclipse.org/emf/2002/Ecore";
import "http://www.eclipse.org/gmf/2008/GmfGraph/wysiwyg";
import "http://www.eclipse.org/gmf/2008/Context";

extension xpt::GenModelUtils;
extension xpt::EMFUtils;

boolean isPolyline(gmfgen::GenNode genNode) :
	"Polyline" == genNode.getDomainMetaClass().ecoreClass.name || "Polygon" == genNode.getDomainMetaClass().ecoreClass.name
;

boolean isPolylinePoint(gmfgen::GenNode genNode) :
	"Point" == genNode.getDomainMetaClass().ecoreClass.name
;

boolean hasLayoutDataSynchronizers(gmfgen::GenNode genNode) :
!getSynchronizers(genNode).contexts.typeSelect(context::FeatureContext).select(fc | "layoutData" == fc.selector.name).isEmpty()
;

boolean hasSynchronizers(gmfgen::GenNode genNode) :
!getSynchronizers(genNode).isEmpty()
;

List[wysiwyg::DomainPropertiesSynchronizer] getSynchronizers(gmfgen::GenNode genNode) :
getReferencingObjects(genNode).typeSelect(wysiwyg::DomainPropertiesSynchronizer)
;

cached genmodel::GenClass metaclass(gmfgen::GenNode genNode) :
genNode.getDomainMetaClass()
;

boolean isInnerClassViewmap(gmfgen::Viewmap viewmap) :
false
;

boolean isInnerClassViewmap(gmfgen::InnerClassViewmap viewmap) :
true
;@


1.10
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d24 1
a24 1
	"Polyline" == genNode.getDomainMetaClass().ecoreClass.name
@


1.9
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@d27 4
@


1.8
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@d18 1
d23 8
@


1.7
log
@Calling handleMajorSemanticChange() on any layoutManager modifications.
It's necessary to populate new instance of LayoutManager with proper layout constraints for each child figure.
@
text
@a21 4
boolean hasBoundsSynchronizer(gmfgen::GenNode genNode) :
!getSynchronizers(genNode).actions.typeSelect(wysiwyg::MethodCallAction).select(mc | "refreshBounds" == mc.methodName).isEmpty()
;

@


1.6
log
@- Migrating to new .gmfgen model
- Using (0,0) as a minimum size for DefaultNode to make resize feedback minimum size == (0,0)
@
text
@d23 1
a23 1
!getSynchronizers(genNode).typeSelect(wysiwyg::MethodCallSynchronizer).select(mcs | "refreshBounds" == mcs.methodName).isEmpty()
d30 2
a31 2
List[wysiwyg::AbstractDomainSynchronizer] getSynchronizers(gmfgen::GenNode genNode) :
getReferencingObjects(genNode).typeSelect(wysiwyg::AbstractDomainSynchronizer)
@


1.5
log
@[230191] - Start using FeatureTracker/AttachAdapter for listening model changes in org.eclipse.gmf.graphdef.editor
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d14 1
a14 1
import "http://www.eclipse.org/gmf/2006/GenModel";
@


1.4
log
@Generating custom property tabs using the code generated by fotmTK  plugin.
@
text
@d17 1
d20 1
d22 2
a23 2
cached List[genmodel::GenFeature] getAllGenFeatures(genmodel::GenClass genClass) :
getAllBaseGenClasses(genClass).genFeatures.union(genClass.genFeatures)
d26 2
a27 2
cached List[genmodel::GenClass] getAllBaseGenClasses(genmodel::GenClass genClass) :
genClass.ecoreClass.eAllSuperTypes.findGenClassifier(genClass.genPackage.genModel)
d30 2
a31 2
private genmodel::GenClass findGenClassifier(ecore::EClass eClass, genmodel::GenModel genModel) :
findGenClassifier(genModel, eClass)
a37 20
cached boolean skip(genmodel::GenFeature genFeature) :
skip(genFeature.ecoreFeature.eType, getName(genFeature))
;

private String getName(genmodel::GenFeature genFeature) :
genFeature.ecoreFeature.name
;

private boolean skip(ecore::EClassifier type, String genFeatureName) :
!genFeatureName.matches("layoutData|layout|template")
;

private boolean skip(ecore::EDataType type, String genFeatureName) :
genFeatureName.matches("name")
;

cached boolean generateSyncronizationCode(genmodel::GenClass metaclass) :
metaclass.ecoreClass.eAllSuperTypes.contains(metaclass.ecoreClass.ePackage.getEClassifier("AbstractFigure"))
;

a43 4
;

boolean isCornerWidthOrHeight(genmodel::GenFeature genFeature) :
getName(genFeature).matches("cornerWidth|cornerHeight")
@


1.3
log
@simplifying templates
@
text
@a31 4
cached genmodel::GenClassifier getTypeGenClassifier(genmodel::GenFeature genFeature) :
null != genFeature.ecoreFeature.eType ? findGenClassifier(genFeature.genClass.genPackage.genModel, genFeature.ecoreFeature.eType) : null
;

@


1.2
log
@Migrating to new templates from .codegen plugin.
@
text
@d41 1
a41 1
skip(getTypeGenClassifier(genFeature), getName(genFeature))
d48 1
a48 1
private boolean skip(genmodel::GenClassifier type, String genFeatureName) :
d52 1
a52 1
private boolean skip(genmodel::GenDataType type, String genFeatureName) :
@


1.1
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@a67 24
cached String getProcessChangesCall(genmodel::GenFeature genFeature, String modelElementVariable) :
setValue(genFeature, transform(genFeature, getValue(genFeature, modelElementVariable)))
;

private String getValue(genmodel::GenFeature genFeature, String modelElementVariable) :
isCornerWidthOrHeight(genFeature) ? 
DPtoLPcall(modelElementVariable+".getCornerWidth()")+", "+DPtoLPcall(modelElementVariable+".getCornerHeight()") :
modelElementVariable+"."+getGetAccessor(genFeature)+"()"
;

private String DPtoLPcall(String variable) :
"getMapMode().DPtoLP("+variable+")"
;

private String transform(genmodel::GenFeature genFeature, String getValueString) :
switch (getName(genFeature)) {
case "cornerWidth": "new org.eclipse.draw2d.geometry.Dimension("+getValueString+")"
case "cornerHeight": "new org.eclipse.draw2d.geometry.Dimension("+getValueString+")"
case "lineKind": "getLineStyle("+getValueString+")"
case "template": "getPointList("+getValueString+")"
default : getValueString
}
;

d70 1
a70 25
;

private String getAccessorCall(genmodel::GenFeature genFeature) :
switch (getAccessorName(genFeature)) {
case "XorFill": "myFigure.setFillXOR"
case "XorOutline": "myFigure.setOutlineXOR"
case "LineKind": "myFigure.setLineStyle"
case "CornerWidth": "myFigure.setCornerDimensions"
case "CornerHeight": "myFigure.setCornerDimensions"
case "Template": "myFigure.setPoints"
default : getTypedAccessorCall(genFeature, getTypeGenClassifier(genFeature))
}
;

private String getTypedAccessorCall(genmodel::GenFeature genFeature, genmodel::GenDataType type) :
"myFigure.set"+getAccessorName(genFeature)
;

private String getTypedAccessorCall(genmodel::GenFeature genFeature, genmodel::GenClassifier type) :
getName(genFeature)+"Changed"
;

private String setValue(genmodel::GenFeature genFeature, String transformedValueString) :
getAccessorCall(genFeature)+"("+transformedValueString+")"
;
@

