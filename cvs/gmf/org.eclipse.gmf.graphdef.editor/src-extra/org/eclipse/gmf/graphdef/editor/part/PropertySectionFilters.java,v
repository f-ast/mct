head	1.2;
access;
symbols
	v20080722-1827:1.2
	v20080718-1700:1.2
	v20080718-1731:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.2
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080610-1132:1.2
	v20080603-1553:1.2
	v20080528-1052:1.1
	v20080521:1.1
	v20080516-1143:1.1
	v20080512-1200:1.1
	v20080510-0100:1.1
	v20080507-1326:1.1
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080411-0411:1.1
	v20080404-1111:1.1
	v20080322-0000:1.1
	v20080114-2222:1.1
	v20071214-1111:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070520-1200:1.1
	v20070420-1000:1.1
	v20070405-2000:1.1
	v20070405-1100:1.1
	v20070330-1300:1.1
	v20070307-0700:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2008.05.28.17.16.24;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	23d2483d93684567;

1.1
date	2007.03.02.18.36.49;	author atikhomirov;	state Exp;
branches;
next	;
commitid	1b3945e86ec04567;


desc
@@


1.2
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@/*
 *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Borland Software Corporation - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.part;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.gef.EditPart;
import org.eclipse.gmf.runtime.notation.View;

public class PropertySectionFilters {

	public static Object transformSelection(Object selection) {
		if (selection instanceof EditPart) {
			Object model = ((EditPart) selection).getModel();
			return model instanceof View ? ((View) model).getElement() : null;
		}
		if (selection instanceof View) {
			return ((View) selection).getElement();
		}
		if (selection instanceof IAdaptable) {
			View view = (View) ((IAdaptable) selection).getAdapter(View.class);
			if (view != null) {
				return view.getElement();
			}
		}
		return selection;
	}

}
@


1.1
log
@extract handcrafted code into separate source root from code being generated
enforce java 1.4 compatibility
@
text
@a14 3
import org.eclipse.gmf.gmfgraph.Layoutable;
import org.eclipse.gmf.gmfgraph.Polyline;
import org.eclipse.gmf.gmfgraph.Shape;
a15 1
import org.eclipse.jface.viewers.IFilter;
a35 20
	public static class LayoutableFilter implements IFilter {
		public boolean select(Object toTest) {
			Object transformed = PropertySectionFilters.transformSelection(toTest);
			return transformed instanceof Layoutable;
		}
	}

	public static class ShapeFilter implements IFilter {
		public boolean select(Object toTest) {
			Object transformed = PropertySectionFilters.transformSelection(toTest);
			return transformed instanceof Shape;
		}
	}

	public static class PolylineFilter implements IFilter {
		public boolean select(Object toTest) {
			Object transformed = PropertySectionFilters.transformSelection(toTest);
			return transformed instanceof Polyline;
		}
	}
@

