head	1.2;
access;
symbols
	v20080722-1827:1.2
	v20080718-1700:1.2
	v20080718-1731:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.2
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080610-1132:1.2
	v20080603-1553:1.2
	v20080528-1052:1.2
	v20080521:1.1
	v20080516-1143:1.1
	v20080512-1200:1.1
	v20080510-0100:1.1
	v20080507-1326:1.1
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080411-0411:1.1
	v20080404-1111:1.1
	v20080322-0000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2008.05.28.12.42.33;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	67a1483d53374567;

1.1
date	2008.02.19.10.33.10;	author atikhomirov;	state Exp;
branches;
next	;
commitid	4a0e47bab0644567;


desc
@@


1.2
log
@[233205] - Support Polyline figure in .gmfgraph editor
@
text
@/*
 * Copyright (c) 2008 Borland Software Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.graphdef.editor.sheet;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.notify.impl.AdapterImpl;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;

/**
 * Mediator to filter specific changes of the object it is attached to.
 * 
 * Note, this tracker dispatches notification only when attached to a target
 * EObject which is compatible with features being tracked (feature's owning
 * meta-class should be the same or superclass of target's meta-class. 
 * 
 * @@author artem
 */
public final class FeatureTracker extends AdapterImpl {
	private final EStructuralFeature[] myFeatures;
	private final ChangeTracker myListener;

	public FeatureTracker(ChangeTracker listener, EStructuralFeature... features) {
		assert listener != null && features != null;
		myListener = listener;
		myFeatures = features;
	}

	@@Override
	public void setTarget(Notifier newTarget) {
		if (newTarget instanceof EObject) {
			EClass metaClass = ((EObject) newTarget).eClass();
			for (EStructuralFeature sf : myFeatures) {
				if (sf.getEContainingClass().isSuperTypeOf(metaClass)) {
					super.setTarget(newTarget);
					break;
				}
			}
			return;
		}
		super.setTarget(newTarget);
	}

	@@Override
	public void notifyChanged(Notification msg) {
		if (msg.isTouch()) {
			return;
		}
		for (EStructuralFeature sf : myFeatures) {
			if (sf.equals(msg.getFeature())) {
				myListener.modelChanged(msg);
				break;
			}
		}
	}
}
@


1.1
log
@[192711] improving property sheet codegeneration -  outcome from newly designed form ui model was added for comparison
@
text
@d56 1
a56 1
		if (getTarget() == null || msg.isTouch()) {
@

