head	1.14;
access;
symbols
	v20080813-1520:1.14
	v20080807-1333:1.14
	v20080806-1520:1.14
	v20080731-1520:1.14
	v20080722-1827:1.14
	v20080716-1642:1.14
	R2_1_maintenance:1.14.0.2
	Root_R2_1_maintenance:1.14
	R2_1_0:1.14
	v20080610-1132:1.14
	v20080528-1052:1.14
	v20080510-0100:1.14
	v20080425-1959:1.14
	v20080417-1610:1.14
	v20080322-0000:1.14
	v20080222-1200:1.13
	v20080215-1500:1.13
	v20080207-0207:1.13
	v20071003-0000:1.13
	v20070809-0000:1.13
	R2_0_maintenance:1.13.0.2
	R2_0:1.13
	R4_20:1.13
	RC3_20:1.13
	v20070601-1400:1.13
	v20070413-1300:1.12
	v20070403-1500:1.12
	v20070330-1300:1.11
	v20060316-0600:1.11
	v20070208-1800:1.10
	v20070103-0300:1.10
	M4_20:1.10
	v20061214-0000:1.9
	M3_20:1.9
	v20061013-1330:1.9
	v20060925-1700:1.9
	v20060907-1100:1.9
	M1_20:1.9
	v20060904-1500:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060626-1420:1.9
	v20060616-1200:1.9
	v20060531-1730:1.9
	v20060526-1200:1.9
	v20060519-0800:1.7
	I20060505-1400:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.3
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.14
date	2008.03.03.18.41.10;	author atikhomirov;	state Exp;
branches;
next	1.13;
commitid	646b47cc46444567;

1.13
date	2007.05.28.13.33.44;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	3e26465ada334567;

1.12
date	2007.04.03.16.29.06;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	5c60461280c44567;

1.11
date	2007.03.14.12.59.50;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	11c545f7f1bc4567;

1.10
date	2007.01.02.15.28.00;	author ashatalin;	state Exp;
branches;
next	1.9;
commitid	117e459a7a004567;

1.9
date	2006.05.25.11.07.49;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.23.21.09.50;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.17.14.22.41;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.17.10.08.02;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.15.20.49.41;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.17.14.38.50;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.15.14.44.32;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.14.10.11.24;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.06.22.12.03;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.14
log
@[220598] Utilize EMF child extenders for GMF models
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph.provider;


import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ItemProviderAdapter;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.DiagramLabel;
import org.eclipse.gmf.gmfgraph.GMFGraphFactory;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.gmfgraph.Canvas} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class CanvasItemProvider
	extends ItemProviderAdapter
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CanvasItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addNamePropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Name feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addNamePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_Identity_name_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_Identity_name_feature", "_UI_Identity_type"),
				 GMFGraphPackage.eINSTANCE.getIdentity_Name(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This specifies how to implement {@@link #getChildren} and is used to deduce an appropriate feature for an
	 * {@@link org.eclipse.emf.edit.command.AddCommand}, {@@link org.eclipse.emf.edit.command.RemoveCommand} or
	 * {@@link org.eclipse.emf.edit.command.MoveCommand} in {@@link #createCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Collection<? extends EStructuralFeature> getChildrenFeatures(Object object) {
		if (childrenFeatures == null) {
			super.getChildrenFeatures(object);
			childrenFeatures.add(GMFGraphPackage.eINSTANCE.getCanvas_Figures());
			childrenFeatures.add(GMFGraphPackage.eINSTANCE.getCanvas_Nodes());
			childrenFeatures.add(GMFGraphPackage.eINSTANCE.getCanvas_Connections());
			childrenFeatures.add(GMFGraphPackage.eINSTANCE.getCanvas_Compartments());
			childrenFeatures.add(GMFGraphPackage.eINSTANCE.getCanvas_Labels());
		}
		return childrenFeatures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected EStructuralFeature getChildFeature(Object object, Object child) {
		// Modifications for https://bugs.eclipse.org/bugs/show_bug.cgi?id=169310
		if (object instanceof Canvas && child instanceof DiagramLabel) {
			return GMFGraphPackage.eINSTANCE.getCanvas_Labels();
		}
		
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

	/**
	 * This returns Canvas.gif.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object getImage(Object object) {
		return overlayImage(object, getResourceLocator().getImage("full/obj16/Canvas"));
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String getText(Object object) {
		String label = ((Canvas)object).getName();
		return label == null || label.length() == 0 ?
			getString("_UI_Canvas_type") :
			getString("_UI_Canvas_type") + " " + label;
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(Canvas.class)) {
			case GMFGraphPackage.CANVAS__NAME:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
				return;
			case GMFGraphPackage.CANVAS__FIGURES:
			case GMFGraphPackage.CANVAS__NODES:
			case GMFGraphPackage.CANVAS__CONNECTIONS:
			case GMFGraphPackage.CANVAS__COMPARTMENTS:
			case GMFGraphPackage.CANVAS__LABELS:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds {@@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void collectNewChildDescriptorsGen(Collection<Object> newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);

		newChildDescriptors.add
			(createChildParameter
				(GMFGraphPackage.eINSTANCE.getCanvas_Figures(),
				 GMFGraphFactory.eINSTANCE.createFigureGallery()));

		newChildDescriptors.add
			(createChildParameter
				(GMFGraphPackage.eINSTANCE.getCanvas_Nodes(),
				 GMFGraphFactory.eINSTANCE.createNode()));

		newChildDescriptors.add
			(createChildParameter
				(GMFGraphPackage.eINSTANCE.getCanvas_Nodes(),
				 GMFGraphFactory.eINSTANCE.createDiagramLabel()));

		newChildDescriptors.add
			(createChildParameter
				(GMFGraphPackage.eINSTANCE.getCanvas_Connections(),
				 GMFGraphFactory.eINSTANCE.createConnection()));

		newChildDescriptors.add
			(createChildParameter
				(GMFGraphPackage.eINSTANCE.getCanvas_Compartments(),
				 GMFGraphFactory.eINSTANCE.createCompartment()));

		newChildDescriptors.add
			(createChildParameter
				(GMFGraphPackage.eINSTANCE.getCanvas_Labels(),
				 GMFGraphFactory.eINSTANCE.createDiagramLabel()));
	}

	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
		LinkedList<Object> allGenerated = new LinkedList<Object>();
		collectNewChildDescriptorsGen(allGenerated, object);
		
		CommandParameter toRemove = createChildParameter(
				GMFGraphPackage.eINSTANCE.getCanvas_Nodes(),
				GMFGraphFactory.eINSTANCE.createDiagramLabel());

		for (Iterator<Object> generated = allGenerated.iterator(); generated.hasNext();){
			final CommandParameter next = (CommandParameter) generated.next();
			if (equalsChildParameters(toRemove, next)){
				generated.remove();
				break;
			}
		}
		
		newChildDescriptors.addAll(allGenerated);
	}

	/**
	 * This returns the label text for {@@link org.eclipse.emf.edit.command.CreateChildCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String getCreateChildText(Object owner, Object feature, Object child, Collection<?> selection) {
		Object childFeature = feature;
		Object childObject = child;

		boolean qualify =
			childFeature == GMFGraphPackage.eINSTANCE.getCanvas_Nodes() ||
			childFeature == GMFGraphPackage.eINSTANCE.getCanvas_Labels();

		if (qualify) {
			return getString
				("_UI_CreateChild_text2",
				 new Object[] { getTypeText(childObject), getFeatureText(childFeature), getTypeText(owner) });
		}
		return super.getCreateChildText(owner, feature, child, selection);
	}

	private static boolean equalsChildParameters(CommandParameter first, CommandParameter second){
		if (!first.getFeature().equals(second.getFeature())){
			return false;
		}
		assert first.getValue() instanceof EObject;
		assert second.getValue() instanceof EObject;
		
		EClass firstEClass = ((EObject)first.getValue()).eClass();
		EClass secondEClass = ((EObject)second.getValue()).eClass();
		
		assert firstEClass.getEPackage().getNsURI().equals(secondEClass.getEPackage().getNsURI());
		return firstEClass.getClassifierID() == secondEClass.getClassifierID(); 
	}
	
	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public ResourceLocator getResourceLocator() {
		return ((IChildCreationExtender)adapterFactory).getResourceLocator();
	}

}
@


1.13
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@d23 1
d294 1
a294 1
		return GMFGraphEditPlugin.INSTANCE;
@


1.12
log
@EMF.Edit and editor were regenerated with EMF M6
@
text
@a247 14
	private static boolean equalsChildParameters(CommandParameter first, CommandParameter second){
		if (!first.getFeature().equals(second.getFeature())){
			return false;
		}
		assert first.getValue() instanceof EObject;
		assert second.getValue() instanceof EObject;
		
		EClass firstEClass = ((EObject)first.getValue()).eClass();
		EClass secondEClass = ((EObject)second.getValue()).eClass();
		
		assert firstEClass.getEPackage().getNsURI().equals(secondEClass.getEPackage().getNsURI());
		return firstEClass.getClassifierID() == secondEClass.getClassifierID(); 
	}
	
a250 4
	 * This method now is useful only for Labels in canvas.nodes feature, and while we remove 
	 * possibility to create them with overrided collectNewChildDescriptors, the method left
	 * here as it brings more problems overriding it than a bit different 
	 * (although semantically legal) label (_UI_CreateChild_text2 vs _UI_CreateChild_text3).
d271 14
@


1.11
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d189 2
a190 2
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
d195 1
a195 1
	protected void collectNewChildDescriptorsGen(Collection<CommandParameter> newChildDescriptors, Object object) {
d229 2
a230 2
	protected void collectNewChildDescriptors(Collection<CommandParameter> newChildDescriptors, Object object) {
		LinkedList<CommandParameter> allGenerated = new LinkedList<CommandParameter>();
d237 3
a239 2
		for (Iterator<CommandParameter> generated = allGenerated.iterator(); generated.hasNext();){
			if (equalsChildParameters(toRemove, generated.next())){
@


1.10
log
@[169310] - Drag and Drop copy within GMFgraph editor creates wrong node
@
text
@d25 1
d67 2
a68 1
	public List getPropertyDescriptors(Object object) {
d107 2
a108 1
	public Collection getChildrenFeatures(Object object) {
d143 1
d154 1
d169 1
d195 1
a195 1
	protected void collectNewChildDescriptorsGen(Collection newChildDescriptors, Object object) {
d229 2
a230 2
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
		LinkedList allGenerated = new LinkedList();
d237 2
a238 3
		for (Iterator generated = allGenerated.iterator(); generated.hasNext();){
			CommandParameter next = (CommandParameter)generated.next();
			if (equalsChildParameters(toRemove, next)){
d271 2
a272 1
	public String getCreateChildText(Object owner, Object feature, Object child, Collection selection) {
d294 1
@


1.9
log
@[mgolubev] #143222 Remove 'Nodes Diagram Label' menu item
@
text
@d32 1
d120 1
a120 1
	 * @@generated
d123 5
@


1.8
log
@#140887 Remove Child interface from GMFGraph.
Although the need to reference child figures persist, thus FigureHandle was introduced, to allow diagramElements to reference either *generateable* figures (Figure subclasses) or *just-use* figures (like CustomFigure and FigureAccessor).
Refactoring performed with #131365 "Mirror GMFGraph model when generating standalone figure plugin" in mind
@
text
@d18 2
d237 11
a247 1
		return first.getFeature().equals(second.getFeature()) && first.getValue().equals(second.getValue());
d249 1
a249 1

@


1.7
log
@#139127 Provide an option for labels to display node icon
@
text
@a108 1
			childrenFeatures.add(GMFGraphPackage.eINSTANCE.getCanvas_Children());
a166 1
			case GMFGraphPackage.CANVAS__CHILDREN:
a210 5
				(GMFGraphPackage.eINSTANCE.getCanvas_Children(),
				 GMFGraphFactory.eINSTANCE.createChild()));

		newChildDescriptors.add
			(createChildParameter
@


1.6
log
@workaround to deal with unwillingness to have create Label command for canvas.nodes feature.
Better than 'be careful during commits of CanvasItemProvider' policy, thanks Michael!
@
text
@d87 2
@


1.5
log
@regenerated with M5. Completely clear plugin.properties to get rid of outdated values (mentioned at #132015)
@
text
@d11 2
d19 1
d181 1
a181 1
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
d196 5
d220 49
@


1.4
log
@Changing default values for fill and outline Shape properties.
@
text
@d129 1
a129 1
		return getResourceLocator().getImage("full/obj16/Canvas");
@


1.3
log
@[mgolubev] #127252 layout support
@
text
@d129 1
a129 1
		return overlayImage(object, getResourceLocator().getImage("full/obj16/Canvas"));
@


1.2
log
@#127461 add label diagram element in gmfgraph model
@
text
@d129 1
a129 1
		return getResourceLocator().getImage("full/obj16/Canvas");
@


1.1
log
@#114177 gmfgraph model to replace diadef model
@
text
@d105 1
d164 1
d205 5
@

