head	1.10;
access;
symbols
	v20080813-1520:1.10
	v20080807-1333:1.10
	v20080806-1520:1.10
	v20080731-1520:1.10
	v20080722-1827:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080528-1052:1.10
	v20080510-0100:1.10
	v20080425-1959:1.10
	v20080417-1610:1.10
	v20080322-0000:1.10
	v20080222-1200:1.9
	v20080215-1500:1.9
	v20080207-0207:1.9
	v20071003-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	RC3_20:1.9
	v20070601-1400:1.9
	v20070413-1300:1.8
	v20070403-1500:1.8
	v20070330-1300:1.7
	v20060316-0600:1.7
	v20070208-1800:1.6
	v20070103-0300:1.6
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	v20060925-1700:1.6
	v20060907-1100:1.6
	M1_20:1.6
	v20060904-1500:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060626-1420:1.6
	v20060616-1200:1.6
	v20060531-1730:1.6
	v20060526-1200:1.6
	v20060519-0800:1.6
	I20060505-1400:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2008.03.03.17.45.14;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	161b47cc39284567;

1.9
date	2007.05.28.13.33.43;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	3e26465ada334567;

1.8
date	2007.04.03.16.29.06;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	5c60461280c44567;

1.7
date	2007.03.14.12.59.49;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	11c545f7f1bc4567;

1.6
date	2006.05.17.14.22.41;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.14.18.06.34;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.15.20.49.41;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.17.14.38.51;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.15.14.44.32;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.14.10.11.24;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.10
log
@regenerated with EMF 2.4M5
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.gmfgraph.DiagramLabel;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.gmfgraph.DiagramLabel} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class DiagramLabelItemProvider
	extends NodeItemProvider
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DiagramLabelItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addElementIconPropertyDescriptor(object);
			addAccessorPropertyDescriptor(object);
			addContainerPropertyDescriptor(object);
			addExternalPropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Element Icon feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addElementIconPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_DiagramLabel_elementIcon_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_DiagramLabel_elementIcon_feature", "_UI_DiagramLabel_type"),
				 GMFGraphPackage.eINSTANCE.getDiagramLabel_ElementIcon(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Accessor feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addAccessorPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_DiagramLabel_accessor_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_DiagramLabel_accessor_feature", "_UI_DiagramLabel_type"),
				 GMFGraphPackage.eINSTANCE.getDiagramLabel_Accessor(),
				 true,
				 false,
				 true,
				 null,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Container feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addContainerPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_DiagramLabel_container_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_DiagramLabel_container_feature", "_UI_DiagramLabel_type"),
				 GMFGraphPackage.eINSTANCE.getDiagramLabel_Container(),
				 true,
				 false,
				 true,
				 null,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the External feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addExternalPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_DiagramLabel_external_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_DiagramLabel_external_feature", "_UI_DiagramLabel_type"),
				 GMFGraphPackage.eINSTANCE.getDiagramLabel_External(),
				 false,
				 false,
				 false,
				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This returns DiagramLabel.gif.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object getImage(Object object) {
		return overlayImage(object, getResourceLocator().getImage("full/obj16/DiagramLabel"));
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String getText(Object object) {
		String label = ((DiagramLabel)object).getName();
		return label == null || label.length() == 0 ?
			getString("_UI_DiagramLabel_type") :
			getString("_UI_DiagramLabel_type") + " " + label;
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(DiagramLabel.class)) {
			case GMFGraphPackage.DIAGRAM_LABEL__ELEMENT_ICON:
			case GMFGraphPackage.DIAGRAM_LABEL__EXTERNAL:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds {@@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);
	}

}
@


1.9
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@a14 1
import org.eclipse.emf.common.util.ResourceLocator;
a214 11
	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public ResourceLocator getResourceLocator() {
		return GMFGraphEditPlugin.INSTANCE;
	}

@


1.8
log
@EMF.Edit and editor were regenerated with EMF M6
@
text
@d64 3
d94 66
d197 1
@


1.7
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a14 1

a15 2

import org.eclipse.emf.edit.command.CommandParameter;
a22 1

a24 1

a25 1

d135 2
a136 2
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
d142 1
a142 1
	protected void collectNewChildDescriptors(Collection<CommandParameter> newChildDescriptors, Object object) {
@


1.6
log
@#139127 Provide an option for labels to display node icon
@
text
@d18 1
d22 1
d64 2
a65 1
	public List getPropertyDescriptors(Object object) {
d102 1
d113 1
d128 1
d147 2
a148 1
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
d158 1
@


1.5
log
@overriding recent changes introduced (along with fixing #133836) in GMFMap model, as it's merely a 'shortcut', quite frequent though. Still, adding few new concepts just for the sake of single usecase (I do admit it's popular) seems excessive to me.
GMFMap kept the same as old (no new notions introduced), GMFGraph got generalization from DiagramLabel to DiagramNode to make it possible to use DiagramLabels for NodeMappings (thus, it's possible to detect such nodes in the DGMT)
Tests added to make sure we generate correct genModel for both cases.
@
text
@d18 1
d25 3
d30 2
d66 1
d72 22
d125 6
@


1.4
log
@regenerated with M5. Completely clear plugin.properties to get rid of outdated values (mentioned at #132015)
@
text
@d33 1
a33 1
	extends DiagramElementItemProvider
@


1.3
log
@Changing default values for fill and outline Shape properties.
@
text
@d71 1
a71 1
		return getResourceLocator().getImage("full/obj16/DiagramLabel");
@


1.2
log
@[mgolubev] #127252 layout support
@
text
@d71 1
a71 1
		return overlayImage(object, getResourceLocator().getImage("full/obj16/DiagramLabel"));
@


1.1
log
@#127461 add label diagram element in gmfgraph model
@
text
@d71 1
a71 1
		return getResourceLocator().getImage("full/obj16/DiagramLabel");
@

