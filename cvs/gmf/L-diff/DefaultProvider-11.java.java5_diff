8a9,10
> import java.util.HashSet;
> 
10a13,14
> import java.util.Iterator;
> 
16a21,22
> import java.util.Set;
> 
40a47,48
> import org.eclipse.draw2d.graph.Subgraph;
> 
60a69,72
> import org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart;
> 
> import org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderedShapeEditPart;
> 
88,92c100,104
<     private int layoutDefaultMargin = 0;
<     private IMapMode mm;
<     private static final int NODE_PADDING = 30;
<     private static final int MIN_EDGE_PADDING = 5;
<     private static final int MAX_EDGE_PADDING = NODE_PADDING * 3;
---
>     protected int layoutDefaultMargin = 0;
>     protected IMapMode mm;
>     protected static final int NODE_PADDING = 30;
>     protected static final int MIN_EDGE_PADDING = 5;
>     protected static final int MAX_EDGE_PADDING = NODE_PADDING * 3;
109d120
<         mm = MapModeUtil.getMapMode (containerEditPart.getFigure ());
115c126,127
<         DirectedGraph g = new DirectedGraph ();
---
>         mm = MapModeUtil.getMapMode (containerEditPart.getFigure ());
>         DirectedGraph g = createGraph ();
117c129
<         new DirectedGraphLayout ().visit (g);
---
>         createGraphLayout ().visit (g);
130c142
<         DirectedGraph g = new DirectedGraph ();
---
>         DirectedGraph g = createGraph ();
132c144
<         new DirectedGraphLayout ().visit (g);
---
>         createGraphLayout ().visit (g);
142c154
<     private NodeList build_nodes (List selectedObjects, Map editPartToNodeDict) {
---
>     protected NodeList build_nodes (List selectedObjects, Map editPartToNodeDict, Subgraph root) {
176,177c188,197
<     final protected Rectangle getNodeMetrics (Node n) {
<         return translateFromGraph (new Rectangle (n.x, n.y, n.width, n.height));
---
>     protected Rectangle getNodeMetrics (Node n) {
>         Rectangle rect = null;
>         Node parent = n.getParent ();
>         while (parent != null && ! (parent.data instanceof IGraphicalEditPart)) parent = parent.getParent ();
> 
>         if (parent != null) {
>             rect = new Rectangle (n.x - parent.x, n.y - parent.y, n.width, n.height);
>         } else rect = new Rectangle (n.x, n.y, n.width, n.height);
> 
>         return translateFromGraph (rect);
184c204
<     private EdgeList build_edges (List selectedObjects, Map editPartToNodeDict) {
---
>     protected EdgeList build_edges (List selectedObjects, Map editPartToNodeDict) {
188a209
>         ArrayList notTopDownEdges = new ArrayList ();
195a217,220
>                     if (from instanceof IBorderItemEditPart) from = from.getParent ();
> 
>                     if (to instanceof IBorderItemEditPart) to = to.getParent ();
> 
200a226,227
>                 } else {
>                     notTopDownEdges.add (poly);
204c231
<         li = objects.listIterator ();
---
>         li = notTopDownEdges.listIterator ();
206,209c233
<             EditPart gep = (EditPart) li.next ();
<             if (gep instanceof ConnectionEditPart) {
<                 ConnectionEditPart poly = (ConnectionEditPart) gep;
<                 if (! layoutTopDown (poly)) {
---
>             ConnectionEditPart poly = (ConnectionEditPart) li.next ();
211a236,239
>             if (from instanceof IBorderItemEditPart) from = from.getParent ();
> 
>             if (to instanceof IBorderItemEditPart) to = to.getParent ();
> 
218,219d245
<             }
<         }
271,275c297,309
<             ShapeEditPart shapeEP = (ShapeEditPart) e;
<             List sourceConnections = shapeEP.getSourceConnections ();
<             for (int i = 0;
<             i < sourceConnections.size (); i ++) {
<                 ConnectionEditPart connectionEP = (ConnectionEditPart) sourceConnections.get (i);
---
>             GraphicalEditPart shapeEP = (GraphicalEditPart) e;
>             Set sourceConnections = new HashSet (shapeEP.getSourceConnections ());
>             if (shapeEP instanceof IBorderedShapeEditPart) {
>                 List borderItems = getBorderItemEditParts (shapeEP);
>                 for (Iterator iter = borderItems.iterator ();
>                 iter.hasNext ();) {
>                     GraphicalEditPart element = (GraphicalEditPart) iter.next ();
>                     sourceConnections.addAll (element.getSourceConnections ());
>                 }
>             }
>             for (Iterator iter = sourceConnections.iterator ();
>             iter.hasNext ();) {
>                 ConnectionEditPart connectionEP = (ConnectionEditPart) iter.next ();
276a311,312
>                 if (target instanceof IBorderItemEditPart) target = target.getParent ();
> 
286c322,334
<     private void build_graph (DirectedGraph g, List selectedObjects) {
---
>     private List getBorderItemEditParts (EditPart parent) {
>         Iterator iter = parent.getChildren ().iterator ();
>         List list = new ArrayList ();
>         while (iter.hasNext ()) {
>             EditPart child = (EditPart) iter.next ();
>             if (child instanceof IBorderItemEditPart) {
>                 list.add (child);
>             }
>         }
>         return list;
>     }
> 
>     protected void build_graph (DirectedGraph g, List selectedObjects) {
290c338
<         NodeList nodes = build_nodes (selectedObjects, editPartToNodeDict);
---
>         NodeList nodes = build_nodes (selectedObjects, editPartToNodeDict, null);
296a345,348
>         postProcessGraph (g, editPartToNodeDict);
>     }
> 
>     protected void postProcessGraph (DirectedGraph g, Hashtable editPartToNodeDict) {
344c396
<     Command update_diagram (GraphicalEditPart diagramEP, DirectedGraph g, boolean isLayoutForSelected) {
---
>     protected Command update_diagram (GraphicalEditPart diagramEP, DirectedGraph g, boolean isLayoutForSelected) {
348c400
<         Command cmd = getShapesPositionCommand (g, diff);
---
>         Command cmd = createNodeChangeBoundCommands (g, diff);
351c403
<         cmd = getConnectionPositionCommand (g, diff);
---
>         cmd = createEdgesChangeBoundsCommands (g, diff);
357c409
<     private Command getConnectionPositionCommand (DirectedGraph g, Point diff) {
---
>     protected Command createEdgesChangeBoundsCommands (DirectedGraph g, Point diff) {
363c415
<             if (edge.data == null) continue;
---
>             if (edge.data == null || edge.getPoints () == null) continue;
385,386c437,438
<         Point startpt = edge.getPoints ().getFirstPoint ();
<         Rectangle start = translateFromGraph (new Rectangle (startpt.x, startpt.y, 0, 0));
---
>         PointList pointList = edge.getPoints ();
>         Rectangle start = translateFromGraph (new Rectangle (pointList.getFirstPoint ().x, pointList.getFirstPoint ().y, 0, 0));
399,400c451
<         Point endpt = edge.getPoints ().getLastPoint ();
<         Rectangle end = translateFromGraph (new Rectangle (endpt.x, endpt.y, 0, 0));
---
>         Rectangle end = translateFromGraph (new Rectangle (pointList.getLastPoint ().x, pointList.getLastPoint ().y, 0, 0));
404c455
<     private Command getShapesPositionCommand (DirectedGraph g, Point diff) {
---
>     protected Command createNodeChangeBoundCommands (DirectedGraph g, Point diff) {
406a458,464
>         createSubCommands (diff, vi, cc);
>         if (cc.isEmpty ()) return null;
> 
>         return cc;
>     }
> 
>     protected void createSubCommands (Point diff, ListIterator vi, CompoundCommand cc) {
422c480
<                 if (cmd != null) cc.add (cmd);
---
>                 if (cmd != null && cmd.canExecute ()) cc.add (cmd);
426,428d483
<         if (cc.isEmpty ()) return null;
< 
<         return cc;
453a509,516
>     protected DirectedGraph createGraph () {
>         return new DirectedGraph ();
>     }
> 
>     protected DirectedGraphLayout createGraphLayout () {
>         return new DirectedGraphLayout ();
>     }
> 
