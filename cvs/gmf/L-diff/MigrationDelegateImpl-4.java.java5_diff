18a19,20
> import org.eclipse.emf.ecore.EDataType;
> 
31c33
< import org.eclipse.emf.ecore.xmi.XMLResource;
---
> import org.eclipse.emf.ecore.resource.Resource;
48,49c50,51
<     private Map < EClass, Map < String, EStructuralFeature > > myRenamedParentAttributes = new HashMap < EClass, Map < String, EStructuralFeature > > ();
<     private XMLResource myResource;
---
>     private Map < EClass, Map < String, EStructuralFeature > > myTracedHierarchyFeatures = new HashMap < EClass, Map < String, EStructuralFeature > > ();
>     private Resource myResource;
60,61c62,63
<     public void registerRenamedParentAttributes (EClass eClass, Map < String, EStructuralFeature > renamedAttributes) {
<         myRenamedParentAttributes.put (eClass, renamedAttributes);
---
>     public void registerTracedFeatureForHierarchy (EClass eClass, Map < String, EStructuralFeature > tracedFeature) {
>         myTracedHierarchyFeatures.put (eClass, tracedFeature);
81,84c83,86
<     public void registerRenamedParentAttribute (EClass eClass, String oldName, EStructuralFeature newStructuralFeature) {
<         Map < String, EStructuralFeature > renamedAttributes = myRenamedParentAttributes.get (eClass);
<         if (renamedAttributes == null) {
<             renamedAttributes = new HashMap < String, EStructuralFeature > ();
---
>     public void registerTracedFeatureForHierarchy (EClass eClass, String xmlName, EStructuralFeature tracerFeature) {
>         Map < String, EStructuralFeature > tracedFeatures = myTracedHierarchyFeatures.get (eClass);
>         if (tracedFeatures == null) {
>             tracedFeatures = new HashMap < String, EStructuralFeature > ();
86,87c88,89
<         renamedAttributes.put (oldName, newStructuralFeature);
<         registerRenamedParentAttributes (eClass, renamedAttributes);
---
>         tracedFeatures.put (xmlName, tracerFeature);
>         registerTracedFeatureForHierarchy (eClass, tracedFeatures);
110,112c112,114
<     public EStructuralFeature getRenamedParentFeatureFor (EClass clazz, String name) {
<         Map < String, EStructuralFeature > renamings = myRenamedParentAttributes.get (clazz);
<         EStructuralFeature result = renamings != null ? renamings.get (name) : null;
---
>     public EStructuralFeature getTracedParentFeatureFor (EClass clazz, String name) {
>         Map < String, EStructuralFeature > tracings = myTracedHierarchyFeatures.get (clazz);
>         EStructuralFeature result = tracings != null ? tracings.get (name) : null;
116c118
<             result = getRenamedParentFeatureFor (nextParent, name);
---
>             result = getTracedParentFeatureFor (nextParent, name);
135,137d136
<         } else if ((rename = getRenamedParentFeatureFor (eClass, name)) != null) {
<             result = rename;
<             fireMigrationApplied (true);
140a140,141
>         } else if ((rename = getTracedParentFeatureFor (eClass, name)) != null) {
>             result = rename;
164,165c165
<     public String getID (EObject obj) {
<         return null;
---
>     public void preResolve () {
168c168
<     public void postProcess () {
---
>     public void processObject (EObject result) {
171c171,172
<     public void processObject (EObject result) {
---
>     public boolean setManyReference (EObject object, EStructuralFeature feature, Object [] values) {
>         return false;
196c197
<     protected static EAttribute createNewAttribute (String name, EClassifier eType, boolean isMany) {
---
>     protected static EAttribute createNewAttribute (String name, EDataType eType, boolean isMany) {
200c201
<     protected static EAttribute createNewAttribute (String name, EClassifier eType, boolean isMany, boolean isObligatory) {
---
>     protected static EAttribute createNewAttribute (String name, EDataType eType, boolean isMany, boolean isObligatory) {
209c210
<     public void setResource (XMLResource resource) {
---
>     public void setResource (Resource resource) {
213c214
<     protected XMLResource getResource () {
---
>     protected Resource getResource () {
216a218,220
>     public void postLoad () {
>     }
> 
