59,64d58
< import org.eclipse.gmf.gmfgraph.Layout;
< 
< import org.eclipse.gmf.gmfgraph.LayoutData;
< 
< import org.eclipse.gmf.gmfgraph.LineKind;
< 
130c124
<         final NotificationListener layoutListener = new NotificationListener () {
---
>         final NotificationListener Layoutable_LayoutData_PropertiesListener = new NotificationListener () {
133,134c127,152
<                 Layout layout = (Layout) notification.getNotifier ();
<                 layoutPropertyChanged (layout);
---
>                 layoutDataChanged (modelElement.getLayoutData ());
>             }
> 
>         }
> 
>         ;
>         if (modelElement.getLayoutData () != null) {
>             addListenerFilter ("Layoutable_LayoutData_PropertiesListener", Layoutable_LayoutData_PropertiesListener, modelElement.getLayoutData ());
>         }
>         addListenerFilter ("Layoutable_LayoutData_Listener", new NotificationListener () {
> 
>             public void notifyChanged (Notification notification) {
>                 removeListenerFilter ("Layoutable_LayoutData_PropertiesListener");
>                 if (modelElement.getLayoutData () != null) {
>                     addListenerFilter ("Layoutable_LayoutData_PropertiesListener", Layoutable_LayoutData_PropertiesListener, modelElement.getLayoutData ());
>                 }
>                 layoutDataChanged (modelElement.getLayoutData ());
>             }
> 
>         }
> 
>         , modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData ());
>         final NotificationListener Layoutable_Layout_PropertiesListener = new NotificationListener () {
> 
>             public void notifyChanged (Notification notification) {
>                 layoutChanged (modelElement.getLayout ());
141c159
<             addListenerFilter ("LayoutPropertiesListener", layoutListener, modelElement.getLayout ());
---
>             addListenerFilter ("Layoutable_Layout_PropertiesListener", Layoutable_Layout_PropertiesListener, modelElement.getLayout ());
143c161
<         addListenerFilter ("ModelElementLayoutListener", new NotificationListener () {
---
>         addListenerFilter ("Layoutable_Layout_Listener", new NotificationListener () {
146,149c164,166
<                 Layout newLayout = (Layout) notification.getNewValue ();
<                 removeListenerFilter ("LayoutPropertiesListener");
<                 if (newLayout != null) {
<                     addListenerFilter ("LayoutPropertiesListener", layoutListener, newLayout);
---
>                 removeListenerFilter ("Layoutable_Layout_PropertiesListener");
>                 if (modelElement.getLayout () != null) {
>                     addListenerFilter ("Layoutable_Layout_PropertiesListener", Layoutable_Layout_PropertiesListener, modelElement.getLayout ());
151c168
<                 layoutChanged (newLayout, true);
---
>                 layoutChanged (modelElement.getLayout ());
157c174
<         final NotificationListener layoutDataListener = new NotificationListener () {
---
>         addListenerFilter ("Shape_Outline_Listener", new NotificationListener () {
160c177
<                 layoutDataPropertyChanged ();
---
>                 myFigure.setOutline (modelElement.isOutline ());
165,167c182,188
<         ;
<         if (modelElement.getLayoutData () != null) {
<             addListenerFilter ("LayoutDataPropertiesListener", layoutDataListener, modelElement.getLayoutData ());
---
>         , modelElement, GMFGraphPackage.eINSTANCE.getShape_Outline ());
>         addListenerFilter ("Shape_Fill_Listener", new NotificationListener () {
> 
>             public void notifyChanged (Notification notification) {
>                 myFigure.setFill (modelElement.isFill ());
>             }
> 
169c190,192
<         addListenerFilter ("ModelElementLayoutDataListener", new NotificationListener () {
---
> 
>         , modelElement, GMFGraphPackage.eINSTANCE.getShape_Fill ());
>         addListenerFilter ("Shape_LineWidth_Listener", new NotificationListener () {
172,175c195
<                 LayoutData newLayoutData = (LayoutData) notification.getNewValue ();
<                 removeListenerFilter ("LayoutDataPropertiesListener");
<                 if (newLayoutData != null) {
<                     addListenerFilter ("LayoutDataPropertiesListener", layoutDataListener, newLayoutData);
---
>                 myFigure.setLineWidth (modelElement.getLineWidth ());
177c197
<                 layoutDataChanged ();
---
> 
179a200,204
>         , modelElement, GMFGraphPackage.eINSTANCE.getShape_LineWidth ());
>         addListenerFilter ("Shape_LineKind_Listener", new NotificationListener () {
> 
>             public void notifyChanged (Notification notification) {
>                 myFigure.setLineStyle (getLineStyle (modelElement.getLineKind ()));
182,183c207,210
<         , modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData ());
<         addListenerFilter ("ModelElementPropertiesListener", new NotificationListener () {
---
>         }
> 
>         , modelElement, GMFGraphPackage.eINSTANCE.getShape_LineKind ());
>         addListenerFilter ("Shape_XorFill_Listener", new NotificationListener () {
186,228c213
<                 switch (notification.getFeatureID (RoundedRectangle.class)) {
<                     case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ROUNDED_RECTANGLE__OUTLINE :
<                         {
<                             boolean value = modelElement.isOutline ();
<                             myFigure.setOutline (value);
<                             break;
<                         } case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ROUNDED_RECTANGLE__FILL :
<                         {
<                             boolean value = modelElement.isFill ();
<                             myFigure.setFill (value);
<                             break;
<                         } case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ROUNDED_RECTANGLE__LINE_WIDTH :
<                         {
<                             int value = modelElement.getLineWidth ();
<                             myFigure.setLineWidth (value);
<                             break;
<                         } case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ROUNDED_RECTANGLE__LINE_KIND :
<                         {
<                             LineKind value = modelElement.getLineKind ();
<                             myFigure.setLineStyle ("LINE_DASH".equals (value.getName ()) ? org.eclipse.draw2d.Graphics.LINE_DASH : "LINE_DOT".equals (value.getName ()) ? org.eclipse.draw2d.Graphics.LINE_DOT : "LINE_DASHDOT".equals (value.getName ()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOT : "LINE_DASHDOTDOT".equals (value.getName ()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOTDOT : "LINE_CUSTOM".equals (value.getName ()) ? org.eclipse.draw2d.Graphics.LINE_CUSTOM : org.eclipse.draw2d.Graphics.LINE_SOLID);
<                             break;
<                         } case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ROUNDED_RECTANGLE__XOR_FILL :
<                         {
<                             boolean value = modelElement.isXorFill ();
<                             myFigure.setFillXOR (value);
<                             break;
<                         } case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ROUNDED_RECTANGLE__XOR_OUTLINE :
<                         {
<                             boolean value = modelElement.isXorOutline ();
<                             myFigure.setOutlineXOR (value);
<                             break;
<                         } case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ROUNDED_RECTANGLE__CORNER_WIDTH :
<                         {
<                             int value = modelElement.getCornerWidth ();
<                             myFigure.setCornerDimensions (new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (value), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
<                             break;
<                         } case org.eclipse.gmf.gmfgraph.GMFGraphPackage.ROUNDED_RECTANGLE__CORNER_HEIGHT :
<                         {
<                             int value = modelElement.getCornerHeight ();
<                             myFigure.setCornerDimensions (new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (value)));
<                             break;
<                         }}
<                 myFigure.repaint ();
---
>                 myFigure.setFillXOR (modelElement.isXorFill ());
233c218,245
<         , modelElement);
---
>         , modelElement, GMFGraphPackage.eINSTANCE.getShape_XorFill ());
>         addListenerFilter ("Shape_XorOutline_Listener", new NotificationListener () {
> 
>             public void notifyChanged (Notification notification) {
>                 myFigure.setOutlineXOR (modelElement.isXorOutline ());
>             }
> 
>         }
> 
>         , modelElement, GMFGraphPackage.eINSTANCE.getShape_XorOutline ());
>         addListenerFilter ("RoundedRectangle_CornerWidth_Listener", new NotificationListener () {
> 
>             public void notifyChanged (Notification notification) {
>                 myFigure.setCornerDimensions (new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
>             }
> 
>         }
> 
>         , modelElement, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerWidth ());
>         addListenerFilter ("RoundedRectangle_CornerHeight_Listener", new NotificationListener () {
> 
>             public void notifyChanged (Notification notification) {
>                 myFigure.setCornerDimensions (new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
>             }
> 
>         }
> 
>         , modelElement, GMFGraphPackage.eINSTANCE.getRoundedRectangle_CornerHeight ());
483,484c495
<                 boolean value = modelElement.isOutline ();
<                 myFigure.setOutline (value);
---
>                 layoutDataChanged (modelElement.getLayoutData ());
486,487c497
<                 boolean value = modelElement.isFill ();
<                 myFigure.setFill (value);
---
>                 layoutChanged (modelElement.getLayout ());
489,490c499
<                 int value = modelElement.getLineWidth ();
<                 myFigure.setLineWidth (value);
---
>                 myFigure.setOutline (modelElement.isOutline ());
492,493c501
<                 LineKind value = modelElement.getLineKind ();
<                 myFigure.setLineStyle ("LINE_DASH".equals (value.getName ()) ? org.eclipse.draw2d.Graphics.LINE_DASH : "LINE_DOT".equals (value.getName ()) ? org.eclipse.draw2d.Graphics.LINE_DOT : "LINE_DASHDOT".equals (value.getName ()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOT : "LINE_DASHDOTDOT".equals (value.getName ()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOTDOT : "LINE_CUSTOM".equals (value.getName ()) ? org.eclipse.draw2d.Graphics.LINE_CUSTOM : org.eclipse.draw2d.Graphics.LINE_SOLID);
---
>                 myFigure.setFill (modelElement.isFill ());
495,496c503
<                 boolean value = modelElement.isXorFill ();
<                 myFigure.setFillXOR (value);
---
>                 myFigure.setLineWidth (modelElement.getLineWidth ());
498,499c505
<                 boolean value = modelElement.isXorOutline ();
<                 myFigure.setOutlineXOR (value);
---
>                 myFigure.setLineStyle (getLineStyle (modelElement.getLineKind ()));
501,502c507
<                 int value = modelElement.getCornerWidth ();
<                 myFigure.setCornerDimensions (new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (value), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
---
>                 myFigure.setFillXOR (modelElement.isXorFill ());
504,507c509,514
<                 int value = modelElement.getCornerHeight ();
<                 myFigure.setCornerDimensions (new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (value)));
<             } layoutChanged (modelElement.getLayout (), false);
<         }
---
>                 myFigure.setOutlineXOR (modelElement.isXorOutline ());
>             } {
>                 myFigure.setCornerDimensions (new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
>             } {
>                 myFigure.setCornerDimensions (new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
>             }}
