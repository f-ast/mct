15,16d14
< import org.eclipse.core.runtime.IAdaptable;
< 
59a58,61
>     public ViewRefactorHelper () {
>         this (PreferencesHint.USE_DEFAULTS);
>     }
> 
87c89,90
<             filteredObjects.add (filteredObjects.indexOf (oldElement), newElement);
---
>             if (! filteredObjects.contains (oldElement)) filteredObjects.add (filteredObjects.indexOf (oldElement), newElement);
> 
94c97,98
<             sortingObjects.add (sortingObjects.indexOf (oldElement), newElement);
---
>             if (! sortingObjects.contains (oldElement)) sortingObjects.add (sortingObjects.indexOf (oldElement), newElement);
> 
110c114
<         throw new RuntimeException ("could not refactor a node for the morphed element");
---
>         return null;
123c127
<         throw new RuntimeException ("could not refactor an edge for the morphed element");
---
>         return null;
132a137
>                 refactorDiagramLinks (oldDiagram, newDiagram);
136c141,150
<         throw new RuntimeException ("could not refactor a diagram for the morphed element");
---
>         return null;
>     }
> 
>     protected void refactorDiagramLinks (Diagram oldDiagram, Diagram newDiagram) {
>         Collection links = EObjectUtil.getReferencers (oldDiagram, new EReference [] {NotationPackage.eINSTANCE.getView_Element ()});
>         for (Iterator i = links.iterator ();
>         i.hasNext ();) {
>             View view = (View) i.next ();
>             view.setElement (newDiagram);
>         }
183c197
<     protected void copyViewStyles (View oldView, View newView, final List excludeStyles) {
---
>     protected void copyViewStyles (View oldView, View newView, List excludeStyles) {
186a201,205
>             copyViewStyle (oldView, newView, oldStyle, excludeStyles);
>         }
>     }
> 
>     protected void copyViewStyle (View oldView, View newView, Style oldStyle, List excludeStyles) {
205d223
<     }
236c254,262
<         return EObjectUtil.getReferencers (element, new EReference [] {NotationPackage.eINSTANCE.getView_Element ()});
---
>         Collection views = EObjectUtil.getReferencers (element, new EReference [] {NotationPackage.eINSTANCE.getView_Element ()});
>         for (Iterator i = views.iterator ();
>         i.hasNext ();) {
>             View view = (View) i.next ();
>             EObject parent = null;
>             while ((parent = view.eContainer ()) instanceof View) {
>                 if (views.contains (parent)) {
>                     i.remove ();
>                     break;
238,240c264
< 
<     protected Node createNode (Node oldNode, EObject newElement) {
<         return createNode (ViewUtil.getContainerView (oldNode), newElement, getNewViewType (oldNode, newElement));
---
>                 view = (View) parent;
242,244d265
< 
<     protected Edge createEdge (Edge oldEdge, EObject newElement) {
<         return createEdge (oldEdge.getSource (), oldEdge.getTarget (), newElement, getNewViewType (oldEdge, newElement));
246,248c267
< 
<     protected Diagram createDiagram (Diagram oldDiagram, EObject newElement) {
<         return createDiagram (newElement, getNewViewType (oldDiagram, newElement));
---
>         return views;
251,254c270,271
<     protected String getNewViewType (View oldView, EObject newElement) {
<         if (oldView instanceof Diagram) return ((Diagram) oldView).getType ();
< 
<         return null;
---
>     protected Node createNode (Node oldNode, EObject newElement) {
>         return ViewService.getInstance ().createNode (new EObjectAdapter (newElement), (View) oldNode.eContainer (), getNewViewType (oldNode, newElement), ViewUtil.APPEND, preferencesHint);
257,260c274,278
<     private Diagram createDiagram (EObject context, String kind) {
<         IAdaptable viewModel = (context != null) ? new EObjectAdapter (context) : null;
<         String viewType = (kind != null) ? kind : "";
<         return ViewService.getInstance ().createDiagram (viewModel, viewType, preferencesHint);
---
>     protected Edge createEdge (Edge oldEdge, EObject newElement) {
>         Edge edge = (Edge) ViewService.getInstance ().createEdge (new EObjectAdapter (newElement), oldEdge.getDiagram (), getNewViewType (oldEdge, newElement), ViewUtil.APPEND, preferencesHint);
>         if (edge != null) {
>             edge.setSource (oldEdge.getSource ());
>             edge.setTarget (oldEdge.getTarget ());
262,267c280
< 
<     private Node createNode (View container, EObject eObject, String type) {
<         IAdaptable viewModel = (eObject != null) ? new EObjectAdapter (eObject) : null;
<         String viewType = (type != null) ? type : "";
<         View view = ViewService.getInstance ().createNode (viewModel, container, viewType, ViewUtil.APPEND, preferencesHint);
<         return (view != null) ? (Node) view : null;
---
>         return edge;
270,274c283,284
<     private Edge createEdge (Diagram diagram, EObject eObject, String type) {
<         IAdaptable viewModel = (eObject != null) ? new EObjectAdapter (eObject) : null;
<         String viewType = (type != null) ? type : "";
<         View view = ViewService.getInstance ().createEdge (viewModel, diagram, viewType, ViewUtil.APPEND, preferencesHint);
<         return (view != null) ? (Edge) view : null;
---
>     protected Diagram createDiagram (Diagram oldDiagram, EObject newElement) {
>         return ViewService.getInstance ().createDiagram (new EObjectAdapter (newElement), getNewViewType (oldDiagram, newElement), preferencesHint);
277,283c287,288
<     private Edge createEdge (View source, View target, EObject eObject, String type) {
<         Edge edge = createEdge (source.getDiagram (), eObject, type);
<         if (edge != null) {
<             edge.setSource (source);
<             edge.setTarget (target);
<         }
<         return edge;
---
>     protected String getNewViewType (View oldView, EObject newElement) {
>         return oldView.getType ();
