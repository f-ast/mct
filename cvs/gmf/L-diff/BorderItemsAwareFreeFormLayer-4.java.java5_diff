4a5,6
> import java.util.List;
> 
6a9,12
> import org.eclipse.draw2d.FigureListener;
> 
> import org.eclipse.draw2d.FreeformFigure;
> 
8a15,20
> import org.eclipse.draw2d.FreeformListener;
> 
> import org.eclipse.draw2d.IFigure;
> 
> import org.eclipse.draw2d.geometry.Insets;
> 
13a26
>     private BorderItemAwareFreeFormHelper _helper = new BorderItemAwareFreeFormHelper (this);
14a28,113
>     public class BorderItemAwareFreeFormHelper implements FreeformListener {
>         class ChildTracker implements FigureListener {
> 
>             public void figureMoved (IFigure source) {
>                 invalidate ();
>             }
> 
>         }
> 
>         private FreeformFigure host;
>         private Rectangle freeformExtent;
>         private FigureListener figureListener = new ChildTracker ();
> 
>         public BorderItemAwareFreeFormHelper (FreeformFigure host) {
>             this.host = host;
>         }
> 
>         public void reset () {
>             freeformExtent = null;
>         }
> 
>         public Rectangle getFreeformExtent () {
>             if (freeformExtent != null) return freeformExtent;
> 
>             Rectangle r;
>             List children = host.getChildren ();
>             for (int i = 0;
>             i < children.size (); i ++) {
>                 IFigure child = (IFigure) children.get (i);
>                 if (child instanceof FreeformFigure) r = ((FreeformFigure) child).getFreeformExtent ();
>                 else if (child instanceof IExpandableFigure) r = ((IExpandableFigure) child).getExtendedBounds ();
>                 else r = child.getBounds ();
> 
>                 if (freeformExtent == null) freeformExtent = r.getCopy ();
>                 else freeformExtent.union (r);
> 
>             }
>             Insets insets = host.getInsets ();
>             if (freeformExtent == null) freeformExtent = new Rectangle (0, 0, insets.getWidth (), insets.getHeight ());
>             else {
>                 host.translateToParent (freeformExtent);
>                 freeformExtent.expand (insets);
>             }
>             return freeformExtent;
>         }
> 
>         public void hookChild (IFigure child) {
>             invalidate ();
>             if (child instanceof FreeformFigure) ((FreeformFigure) child).addFreeformListener (this);
>             else child.addFigureListener (figureListener);
> 
>         }
> 
>         void invalidate () {
>             freeformExtent = null;
>             host.fireExtentChanged ();
>             if (host.getParent () != null) host.getParent ().revalidate ();
>             else host.revalidate ();
> 
>         }
> 
>         public void notifyFreeformExtentChanged () {
>             invalidate ();
>         }
> 
>         public void setFreeformBounds (Rectangle bounds) {
>             host.setBounds (bounds);
>             bounds = bounds.getCopy ();
>             host.translateFromParent (bounds);
>             List children = host.getChildren ();
>             for (int i = 0;
>             i < children.size (); i ++) {
>                 IFigure child = (IFigure) children.get (i);
>                 if (child instanceof FreeformFigure) ((FreeformFigure) child).setFreeformBounds (bounds);
> 
>             }
>         }
> 
>         public void unhookChild (IFigure child) {
>             invalidate ();
>             if (child instanceof FreeformFigure) ((FreeformFigure) child).removeFreeformListener (this);
>             else child.removeFigureListener (figureListener);
> 
>         }
> 
>     }
44a144,165
>     public void add (IFigure child, Object constraint, int index) {
>         super.add (child, constraint, index);
>         _helper.hookChild (child);
>     }
> 
>     public Rectangle getFreeformExtent () {
>         return _helper.getFreeformExtent ();
>     }
> 
>     public void remove (IFigure child) {
>         _helper.unhookChild (child);
>         super.remove (child);
>     }
> 
>     public void setFreeformBounds (Rectangle bounds) {
>         _helper.setFreeformBounds (bounds);
>     }
> 
>     public void borderFigureMoved () {
>         _helper.invalidate ();
>     }
> 
