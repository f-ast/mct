8a9,10
> import java.util.HashSet;
> 
17c19
< import org.eclipse.core.runtime.IAdaptable;
---
> import java.util.Set;
19c21
< import org.eclipse.emf.ecore.EClass;
---
> import org.eclipse.core.runtime.IAdaptable;
27,30d28
< import org.eclipse.gmf.gmfgraph.Canvas;
< 
< import org.eclipse.gmf.gmfgraph.DiagramElement;
< 
34a33,34
> import org.eclipse.gmf.graphdef.editor.edit.parts.ChildAccessEditPart;
> 
39,40d38
< import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramElementFigureEditPart;
< 
42a41,42
> import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse3EditPart;
> 
44a45,46
> import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorEditPart;
> 
50a53,54
> import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline3EditPart;
> 
54a59,60
> import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle3EditPart;
> 
58a65,66
> import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle3EditPart;
> 
61c69
< import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
---
> import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramUpdater;
63c71,75
< import org.eclipse.gmf.graphdef.editor.providers.GMFGraphElementTypes;
---
> import org.eclipse.gmf.graphdef.editor.part.GMFGraphLinkDescriptor;
> 
> import org.eclipse.gmf.graphdef.editor.part.GMFGraphNodeDescriptor;
> 
> import org.eclipse.gmf.graphdef.editor.part.GMFGraphVisualIDRegistry;
79,82d90
< import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
< 
< import org.eclipse.gmf.runtime.emf.type.core.IElementType;
< 
89a98
>     Set myFeaturesToSynchronize;
92,93d100
<         List result = new LinkedList ();
<         EObject modelObject = ((View) getHost ().getModel ()).getElement ();
95,127c102,105
<         EObject nextValue;
<         int nodeVID;
<         for (Iterator values = ((Canvas) modelObject).getCompartments ().iterator ();
<         values.hasNext ();) {
<             nextValue = (EObject) values.next ();
<             nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID (viewObject, nextValue);
<             if (CompartmentEditPart.VISUAL_ID == nodeVID) {
<                 result.add (nextValue);
<             }
<         }
<         for (Iterator values = ((Canvas) modelObject).getNodes ().iterator ();
<         values.hasNext ();) {
<             nextValue = (EObject) values.next ();
<             nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID (viewObject, nextValue);
<             if (NodeEditPart.VISUAL_ID == nodeVID) {
<                 result.add (nextValue);
<             }
<         }
<         for (Iterator values = ((Canvas) modelObject).getConnections ().iterator ();
<         values.hasNext ();) {
<             nextValue = (EObject) values.next ();
<             nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID (viewObject, nextValue);
<             if (ConnectionEditPart.VISUAL_ID == nodeVID) {
<                 result.add (nextValue);
<             }
<         }
<         for (Iterator values = ((Canvas) modelObject).getFigures ().iterator ();
<         values.hasNext ();) {
<             nextValue = (EObject) values.next ();
<             nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID (viewObject, nextValue);
<             if (FigureGalleryEditPart.VISUAL_ID == nodeVID) {
<                 result.add (nextValue);
<             }
---
>         List result = new LinkedList ();
>         for (Iterator it = GMFGraphDiagramUpdater.getCanvas_1000SemanticChildren (viewObject).iterator ();
>         it.hasNext ();) {
>             result.add (((GMFGraphNodeDescriptor) it.next ()).getModelElement ());
132a111,114
>         return true;
>     }
> 
>     protected boolean isOrphaned (Collection semanticChildren, final View view) {
134c116
<             return view.isSetElement () && (view.getElement () == null || view.getElement ().eIsProxy ());
---
>             return GMFGraphDiagramUpdater.isShortcutOrphaned (view);
136,137c118,119
<         int nodeVID = GMFGraphVisualIDRegistry.getVisualID (view);
<         switch (nodeVID) {
---
>         int visualID = GMFGraphVisualIDRegistry.getVisualID (view);
>         switch (visualID) {
142c124
<                 return true;
---
>                 return ! semanticChildren.contains (view.getElement ()) || visualID != GMFGraphVisualIDRegistry.getNodeVisualID ((View) getHost ().getModel (), view.getElement ());
150a133,143
>     protected Set getFeaturesToSynchronize () {
>         if (myFeaturesToSynchronize == null) {
>             myFeaturesToSynchronize = new HashSet ();
>             myFeaturesToSynchronize.add (GMFGraphPackage.eINSTANCE.getCanvas_Compartments ());
>             myFeaturesToSynchronize.add (GMFGraphPackage.eINSTANCE.getCanvas_Nodes ());
>             myFeaturesToSynchronize.add (GMFGraphPackage.eINSTANCE.getCanvas_Connections ());
>             myFeaturesToSynchronize.add (GMFGraphPackage.eINSTANCE.getCanvas_Figures ());
>         }
>         return myFeaturesToSynchronize;
>     }
> 
181,182c174,176
<     private Collection myLinkDescriptors = new LinkedList ();
<     private Map myEObject2ViewMap = new HashMap ();
---
>     private Diagram getDiagram () {
>         return ((View) getHost ().getModel ()).getDiagram ();
>     }
185,186c179,180
<         try {
<             collectAllLinks (getDiagram ());
---
>         Map domain2NotationMap = new HashMap ();
>         Collection linkDescriptors = collectAllLinks (getDiagram (), domain2NotationMap);
188,190c182,184
<             for (Iterator diagramLinks = existingLinks.iterator ();
<             diagramLinks.hasNext ();) {
<                 Edge nextDiagramLink = (Edge) diagramLinks.next ();
---
>         for (Iterator linksIterator = existingLinks.iterator ();
>         linksIterator.hasNext ();) {
>             Edge nextDiagramLink = (Edge) linksIterator.next ();
195,200c189,194
<                 for (Iterator modelLinkDescriptors = myLinkDescriptors.iterator ();
<                 modelLinkDescriptors.hasNext ();) {
<                     LinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next ();
<                     if (diagramLinkObject == nextLinkDescriptor.getLinkElement () && diagramLinkSrc == nextLinkDescriptor.getSource () && diagramLinkDst == nextLinkDescriptor.getDestination () && diagramLinkVisualID == nextLinkDescriptor.getVisualID ()) {
<                         diagramLinks.remove ();
<                         modelLinkDescriptors.remove ();
---
>             for (Iterator LinkDescriptorsIterator = linkDescriptors.iterator ();
>             LinkDescriptorsIterator.hasNext ();) {
>                 GMFGraphLinkDescriptor nextLinkDescriptor = (GMFGraphLinkDescriptor) LinkDescriptorsIterator.next ();
>                 if (diagramLinkObject == nextLinkDescriptor.getModelElement () && diagramLinkSrc == nextLinkDescriptor.getSource () && diagramLinkDst == nextLinkDescriptor.getDestination () && diagramLinkVisualID == nextLinkDescriptor.getVisualID ()) {
>                     linksIterator.remove ();
>                     LinkDescriptorsIterator.remove ();
205,209c199
<             return createConnections (myLinkDescriptors);
<         } finally {
<             myLinkDescriptors.clear ();
<             myEObject2ViewMap.clear ();
<         }
---
>         return createConnections (linkDescriptors, domain2NotationMap);
212,227c202,204
<     private void collectAllLinks (View view) {
<         EObject modelElement = view.getElement ();
<         int diagramElementVisualID = GMFGraphVisualIDRegistry.getVisualID (view);
<         switch (diagramElementVisualID) {
<             case CompartmentEditPart.VISUAL_ID :
<             case NodeEditPart.VISUAL_ID :
<             case ConnectionEditPart.VISUAL_ID :
<             case FigureGalleryEditPart.VISUAL_ID :
<             case RectangleEditPart.VISUAL_ID :
<             case Rectangle2EditPart.VISUAL_ID :
<             case EllipseEditPart.VISUAL_ID :
<             case RoundedRectangleEditPart.VISUAL_ID :
<             case PolylineEditPart.VISUAL_ID :
<             case Ellipse2EditPart.VISUAL_ID :
<             case RoundedRectangle2EditPart.VISUAL_ID :
<             case Polyline2EditPart.VISUAL_ID :
---
>     private Collection collectAllLinks (View view, Map domain2NotationMap) {
>         Collection result = new LinkedList ();
>         switch (GMFGraphVisualIDRegistry.getVisualID (view)) {
230,232c207,280
<                     myEObject2ViewMap.put (modelElement, view);
<                     storeLinks (modelElement, getDiagram ());
<                 } default :
---
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getCanvas_1000ContainedLinks (view));
>                     break;
>                 } case CompartmentEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getCompartment_2005ContainedLinks (view));
>                     break;
>                 } case NodeEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getNode_2006ContainedLinks (view));
>                     break;
>                 } case ConnectionEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getConnection_2007ContainedLinks (view));
>                     break;
>                 } case FigureGalleryEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getFigureGallery_2008ContainedLinks (view));
>                     break;
>                 } case FigureDescriptorEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getFigureDescriptor_3009ContainedLinks (view));
>                     break;
>                 } case RectangleEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getRectangle_3010ContainedLinks (view));
>                     break;
>                 } case Rectangle2EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getRectangle_3011ContainedLinks (view));
>                     break;
>                 } case EllipseEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getEllipse_3012ContainedLinks (view));
>                     break;
>                 } case RoundedRectangleEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getRoundedRectangle_3013ContainedLinks (view));
>                     break;
>                 } case PolylineEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getPolyline_3014ContainedLinks (view));
>                     break;
>                 } case Ellipse2EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getEllipse_3015ContainedLinks (view));
>                     break;
>                 } case RoundedRectangle2EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getRoundedRectangle_3016ContainedLinks (view));
>                     break;
>                 } case Polyline2EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getPolyline_3017ContainedLinks (view));
>                     break;
>                 } case Rectangle3EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getRectangle_3018ContainedLinks (view));
>                     break;
>                 } case Ellipse3EditPart.VISUAL_ID :
234c282,301
<                 } for (Iterator children = view.getChildren ().iterator ();
---
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getEllipse_3019ContainedLinks (view));
>                     break;
>                 } case RoundedRectangle3EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getRoundedRectangle_3020ContainedLinks (view));
>                     break;
>                 } case Polyline3EditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getPolyline_3021ContainedLinks (view));
>                     break;
>                 } case ChildAccessEditPart.VISUAL_ID :
>                 {
>                     domain2NotationMap.put (view.getElement (), view);
>                     result.addAll (GMFGraphDiagramUpdater.getChildAccess_4002ContainedLinks (view));
>                     break;
>                 }}
>         for (Iterator children = view.getChildren ().iterator ();
236,237c303
<                     View childView = (View) children.next ();
<                     collectAllLinks (childView);
---
>             result.addAll (collectAllLinks ((View) children.next (), domain2NotationMap));
238a305,307
>         for (Iterator edges = view.getSourceEdges ().iterator ();
>         edges.hasNext ();) {
>             result.addAll (collectAllLinks ((View) edges.next (), domain2NotationMap));
239a309
>         return result;
242,245c312
<     private Collection createConnections (Collection linkDescriptors) {
<         if (linkDescriptors.isEmpty ()) {
<             return Collections.EMPTY_LIST;
<         }
---
>     private Collection createConnections (Collection linkDescriptors, Map domain2NotationMap) {
249,251c316,318
<             final LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next ();
<             EditPart sourceEditPart = getEditPartFor (nextLinkDescriptor.getSource ());
<             EditPart targetEditPart = getEditPartFor (nextLinkDescriptor.getDestination ());
---
>             final GMFGraphLinkDescriptor nextLinkDescriptor = (GMFGraphLinkDescriptor) linkDescriptorsIterator.next ();
>             EditPart sourceEditPart = getEditPart (nextLinkDescriptor.getSource (), domain2NotationMap);
>             EditPart targetEditPart = getEditPart (nextLinkDescriptor.getDestination (), domain2NotationMap);
274,275c341,342
<     private EditPart getEditPartFor (EObject modelElement) {
<         View view = (View) myEObject2ViewMap.get (modelElement);
---
>     private EditPart getEditPart (EObject domainModelElement, Map domain2NotationMap) {
>         View view = (View) domain2NotationMap.get (domainModelElement);
282,372d348
<     private void storeLinks (EObject container, Diagram diagram) {
<         EClass containerMetaclass = container.eClass ();
<         storeFeatureModelFacetLinks (container, containerMetaclass, diagram);
<         storeTypeModelFacetLinks (container, containerMetaclass);
<     }
< 
<     private void storeTypeModelFacetLinks (EObject container, EClass containerMetaclass) {
<     }
< 
<     private void storeFeatureModelFacetLinks (EObject container, EClass containerMetaclass, Diagram diagram) {
<         if (GMFGraphPackage.eINSTANCE.getDiagramElement ().isSuperTypeOf (containerMetaclass)) {
<             EObject nextDestination = (EObject) ((DiagramElement) container).getFigure ();
<             myLinkDescriptors.add (new LinkDescriptor (container, nextDestination, GMFGraphElementTypes.DiagramElementFigure_4001, DiagramElementFigureEditPart.VISUAL_ID));
<         }
<     }
< 
<     private Diagram getDiagram () {
<         return ((View) getHost ().getModel ()).getDiagram ();
<     }
< 
<     private class LinkDescriptor {
<         private EObject mySource;
<         private EObject myDestination;
<         private EObject myLinkElement;
<         private int myVisualID;
<         private IAdaptable mySemanticAdapter;
< 
<         protected LinkDescriptor (EObject source, EObject destination, EObject linkElement, IElementType elementType, int linkVID) {
<             this (source, destination, linkVID);
<             myLinkElement = linkElement;
<             final IElementType elementTypeCopy = elementType;
<             mySemanticAdapter = new EObjectAdapter (linkElement) {
< 
<                 public Object getAdapter (Class adapter) {
<                     if (IElementType.class.equals (adapter)) {
<                         return elementTypeCopy;
<                     }
<                     return super.getAdapter (adapter);
<                 }
< 
<             }
< 
<             ;
<         }
< 
<         protected LinkDescriptor (EObject source, EObject destination, IElementType elementType, int linkVID) {
<             this (source, destination, linkVID);
<             myLinkElement = null;
<             final IElementType elementTypeCopy = elementType;
<             mySemanticAdapter = new IAdaptable () {
< 
<                 public Object getAdapter (Class adapter) {
<                     if (IElementType.class.equals (adapter)) {
<                         return elementTypeCopy;
<                     }
<                     return null;
<                 }
< 
<             }
< 
<             ;
<         }
< 
<         private LinkDescriptor (EObject source, EObject destination, int linkVID) {
<             mySource = source;
<             myDestination = destination;
<             myVisualID = linkVID;
<         }
< 
<         protected EObject getSource () {
<             return mySource;
<         }
< 
<         protected EObject getDestination () {
<             return myDestination;
<         }
< 
<         protected EObject getLinkElement () {
<             return myLinkElement;
<         }
< 
<         protected int getVisualID () {
<             return myVisualID;
<         }
< 
<         protected IAdaptable getSemanticAdapter () {
<             return mySemanticAdapter;
<         }
< 
<     }
< 
