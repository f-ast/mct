6a7,8
> import java.util.HashSet;
> 
11c13
< import org.eclipse.emf.common.util.BasicEList;
---
> import java.util.Set;
18a21,22
> import org.eclipse.emf.ecore.EObject;
> 
54,55c58,59
<     private List myNodeCandidates;
<     private List myLinkCandidates;
---
>     private List < EClass > myNodeCandidates;
>     private List < EObject > myLinkCandidates;
67a72
>     @SuppressWarnings("unchecked")
91c96
<         return new CompositeStrategy (new Strategy [] {new AccessibleClassNodeStrategy (), new LeafNodeStrategy (),});
---
>         return new CompositeStrategy (new AccessibleClassNodeStrategy (), new LeafNodeStrategy ());
101,103c106,108
<             public void filter (Collection soFar, Hierarchy hierarchy) {
<                 List linkCandidates = new UniqueEList (hierarchy.getAccessibleLinkClasses ());
<                 for (Iterator iter = linkCandidates.iterator ();
---
>             public void filter (Collection < EObject > soFar, Hierarchy hierarchy) {
>                 Set < EClass > linkCandidates = new HashSet < EClass > (hierarchy.getAccessibleLinkClasses ());
>                 for (Iterator < EClass > iter = linkCandidates.iterator ();
105c110
<                     EClass element = (EClass) iter.next ();
---
>                     EClass element = iter.next ();
119,120c124,125
<     private List nodesFrom (List candidates) {
<         BasicEList rv = new BasicEList (candidates.size ());
---
>     private List < NodeReference > nodesFrom (List < EClass > candidates) {
>         ArrayList < NodeReference > rv = new ArrayList < NodeReference > (candidates.size ());
137,138c142,143
<     private List linksFrom (List candidates) {
<         BasicEList rv = new BasicEList (candidates.size ());
---
>     private List < LinkMapping > linksFrom (List < EObject > candidates) {
>         ArrayList < LinkMapping > rv = new ArrayList < LinkMapping > (candidates.size ());
158a164
>     @SuppressWarnings("unchecked")
173c179
<         return (NodeReference []) nodesFrom (myNodeCandidates).toArray (new NodeReference [0]);
---
>         return nodesFrom (myNodeCandidates).toArray (new NodeReference [0]);
177c183
<         return (LinkMapping []) linksFrom (myLinkCandidates).toArray (new LinkMapping [0]);
---
>         return linksFrom (myLinkCandidates).toArray (new LinkMapping [0]);
