1342a1343
>         createMetaAnnotations ();
1347c1348
<         addAnnotation (genDiagramEClass, source, new String [] {"constraints", "http://www.eclipse.org/gmf/2005/constraints"});
---
>         addAnnotation (this, source, new String [] {"constraints", "http://www.eclipse.org/gmf/2005/constraints", "meta", "http://www.eclipse.org/gmf/2005/constraints/meta"});
1352,1359c1353,1380
<         addAnnotation (genDiagramEClass, source, new String [] {"ocl", "nodes->forAll(n : GenNode | self.links->forAll(l : GenLink | l.domainMetaClass <> n.domainMetaClass))"});
<         addAnnotation (genNodeEClass, source, new String [] {"ocl", "super.domainNameFeature.eClass == domainMetaClass"});
<         addAnnotation (genNodeEClass, source, new String [] {"ocl", "diagramRunTimeClass.eCoreClass.eAllSuperTypes->includes(diagramrt.DiagramNode)"});
<         addAnnotation (getTypeModelFacet_ContainmentMetaFeature (), source, new String [] {"ocl", "containmentMetaFeature.isContainment"});
<         addAnnotation (getTypeLinkModelFacet_SourceMetaFeature (), source, new String [] {"ocl", "sourceMetaFeature.eContainingClass \'equals to\' or \'superclass of\' super.metaClass"});
<         addAnnotation (getTypeLinkModelFacet_TargetMetaFeature (), source, new String [] {"ocl", "targetMetaFeature.eContainingClass \'equals to\' or \'superclass of\' super.metaClass"});
<         addAnnotation (genFeatureSeqInitializerEClass, source, new String [] {"ocl", "initializers.feature.genClass.ecoreClass->asSet()->size() = 1 -- common ECore class"});
<         addAnnotation (genFeatureValueSpecEClass, source, new String [] {"ocl", "self.feature.ecoreFeature.eType = self.body->evaluate().eType"});
---
>         addAnnotation (this, source, new String [] {"import", "platform:/resource/org.eclipse.gmf.runtime.notation/model/notation.ecore"});
>         addAnnotation (genDiagramEClass, source, new String [] {"ocl", "nodes->forAll(n : GenNode | self.links->forAll(l : GenLink | l.oclAsType(TypeLinkModelFacet).metaClass <> n.getDomainMetaClass()))"});
>         addAnnotation (genNodeEClass, source, new String [] {"ocl", "let c: ecore::EClass = diagramRunTimeClass.ecoreClass.oclAsType(ecore::EClass) in c = notation::Node or c.eAllSuperTypes->includes(notation::Node)"});
>         addAnnotation (genLinkEClass, source, new String [] {"ocl", "let c: ecore::EClass = diagramRunTimeClass.ecoreClass.oclAsType(ecore::EClass) in c = notation::Edge or c.eAllSuperTypes->includes(notation::Edge)"});
>         addAnnotation (genNodeLabelEClass, source, new String [] {"ocl", "modelFacet.metaFeature.ecoreFeature.eContainingClass.isSuperTypeOf(node.getDomainMetaClass().ecoreClass)"});
>         addAnnotation (genLinkLabelEClass, source, new String [] {"ocl", "let tl: TypeLinkModelFacet = link.modelFacet.oclAsType(TypeLinkModelFacet) in tl.oclIsUndefined() or modelFacet.metaFeature.ecoreFeature.eContainingClass.isSuperTypeOf(tl.metaClass.ecoreClass)"});
>         addAnnotation (getTypeModelFacet_ContainmentMetaFeature (), source, new String [] {"ocl", "containmentMetaFeature.ecoreFeature.oclAsType(ecore::EReference).containment"});
>         addAnnotation (getTypeModelFacet_ContainmentMetaFeature (), source, new String [] {"ocl", "containmentMetaFeature.ecoreFeature.oclAsType(ecore::EReference).eReferenceType.isSuperTypeOf(metaClass.ecoreClass)"});
>         addAnnotation (getTypeLinkModelFacet_SourceMetaFeature (), source, new String [] {"ocl", "sourceMetaFeature.oclIsUndefined() or sourceMetaFeature.ecoreFeature.oclAsType(ecore::EReference).eReferenceType.isSuperTypeOf(metaClass.ecoreClass)"});
>         addAnnotation (getTypeLinkModelFacet_TargetMetaFeature (), source, new String [] {"ocl", "targetMetaFeature.genClass.ecoreClass.isSuperTypeOf(metaClass.ecoreClass)"});
>         addAnnotation (getGenFeatureSeqInitializer_Initializers (), source, new String [] {"ocl", "initializers.feature->forAll(f| f.ecoreFeature.eContainingClass.isSuperTypeOf(typeModelFacet.metaClass.ecoreClass))"});
>         addAnnotation (genLinkConstraintsEClass, source, new String [] {"ocl", "not sourceEnd.oclIsUndefined() or not targetEnd.oclIsUndefined()"});
>     }
> 
>     protected void createMetaAnnotations () {
>         String source = "http://www.eclipse.org/gmf/2005/constraints/meta";
>         addAnnotation (getTypeModelFacet_ModelElementSelector (), source, new String [] {"def", "context", "ocl", "metaClass.ecoreClass"});
>         addAnnotation (valueExpressionEClass, source, new String [] {"def", "ValueSpec"});
>         addAnnotation (getValueExpression_Body (), source, new String [] {"def", "body"});
>         addAnnotation (getValueExpression_Language (), source, new String [] {"def", "lang"});
>         addAnnotation (modelElementSelectorEClass, source, new String [] {"def", "Constraint"});
>         addAnnotation (getGenFeatureSeqInitializer_Initializers (), source, new String [] {"def", "context", "ocl", "typeModelFacet.metaClass.ecoreClass"});
>         addAnnotation (genFeatureValueSpecEClass, source, new String [] {"def", "ValueSpec"});
>         addAnnotation (genFeatureValueSpecEClass, source, new String [] {"def", "type", "ocl", "feature.ecoreFeature"});
>         addAnnotation (getGenLinkConstraints_SourceEnd (), source, new String [] {"def", "context", "ocl", "getSourceEndContextClass().ecoreClass"});
>         addAnnotation (getGenLinkConstraints_SourceEnd (), source, new String [] {"def", "variable", "name", "oppositeEnd", "type.ocl", "getTargetEndContextClass().ecoreClass"});
>         addAnnotation (getGenLinkConstraints_TargetEnd (), source, new String [] {"def", "context", "ocl", "getTargetEndContextClass().ecoreClass"});
>         addAnnotation (getGenLinkConstraints_TargetEnd (), source, new String [] {"def", "variable", "name", "oppositeEnd", "type.ocl", "getSourceEndContextClass().ecoreClass"});
