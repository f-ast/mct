38a39,40
> import org.eclipse.emf.ecore.EStructuralFeature;
> 
69,82d70
< import org.eclipse.jface.util.Assert;
< 
< import org.eclipse.swt.SWT;
< 
< import org.eclipse.swt.accessibility.AccessibleEvent;
< 
< import org.eclipse.swt.graphics.Color;
< 
< import org.eclipse.swt.graphics.FontData;
< 
< import org.eclipse.swt.widgets.Display;
< 
< import org.eclipse.ui.IActionFilter;
< 
100a89,90
> import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
> 
133,134d122
< import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
< 
154a143,156
> import org.eclipse.jface.util.Assert;
> 
> import org.eclipse.swt.SWT;
> 
> import org.eclipse.swt.accessibility.AccessibleEvent;
> 
> import org.eclipse.swt.graphics.Color;
> 
> import org.eclipse.swt.graphics.FontData;
> 
> import org.eclipse.swt.widgets.Display;
> 
> import org.eclipse.ui.IActionFilter;
> 
173c175
<             addListenerFilter ("SemanticProxy", this, PresentationListener.getNotifier (semanticProxy));
---
>             addListenerFilter ("SemanticProxy", this, semanticProxy);
189a192,213
>     protected void addListenerFilter (String filterId, PropertyChangeListener listener, EObject element) {
>         if (element == null) return;
> 
>         Assert.isNotNull (filterId);
>         Assert.isNotNull (listener);
>         if (listenerFilters == null) listenerFilters = new HashMap ();
> 
>         PresentationListener.getInstance ().addPropertyChangeListener (element, listener);
>         listenerFilters.put (filterId, new Object [] {element, listener});
>     }
> 
>     protected void addListenerFilter (String filterId, PropertyChangeListener listener, EObject element, EStructuralFeature feature) {
>         if (element == null) return;
> 
>         Assert.isNotNull (filterId);
>         Assert.isNotNull (listener);
>         if (listenerFilters == null) listenerFilters = new HashMap ();
> 
>         PresentationListener.getInstance ().addPropertyChangeListener (element, listener);
>         listenerFilters.put (filterId, new Object [] {element, feature, listener});
>     }
> 
214c238,244
<                 ((PropertyChangeNotifier) obj [0]).removePropertyChangeListener ((PropertyChangeListener) obj [1]);
---
>                 if (obj.length > 2) {
>                     PresentationListener.getInstance ().removePropertyChangeListener ((EObject) obj [0], (EStructuralFeature) obj [1], (PropertyChangeListener) obj [2]);
>                 } else {
>                     if (obj [0] instanceof PropertyChangeNotifier) ((PropertyChangeNotifier) obj [0]).removePropertyChangeListener ((PropertyChangeListener) obj [1]);
>                     else PresentationListener.getInstance ().removePropertyChangeListener ((EObject) obj [0], (PropertyChangeListener) obj [1]);
> 
>                 }
541a572,575
>         if (objects.length > 2) {
>             PresentationListener.getInstance ().removePropertyChangeListener ((EObject) objects [0], (EStructuralFeature) objects [1], (PropertyChangeListener) objects [2]);
>         } else {
>             if (objects [0] instanceof PropertyChangeNotifier) {
542a577,580
>             } else {
>                 PresentationListener.getInstance ().removePropertyChangeListener ((EObject) objects [0], (PropertyChangeListener) objects [1]);
>             }
>         }
574c612
<         addListenerFilter ("View", this, ViewUtil.getPropertyChangeNotifier ((View) getModel ()));
---
>         addListenerFilter ("View", this, (View) getModel ());
578c616
<         addListenerFilter ("SemanticElement", this, PresentationListener.getNotifier (resolveSemanticElement ()));
---
>         addListenerFilter ("SemanticElement", this, resolveSemanticElement ());
