5,6d4
< import org.eclipse.emf.ecore.EClass;
< 
9c7
< import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;
---
> import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;
11c9
< import org.eclipse.gmf.runtime.notation.View;
---
> import org.eclipse.gmf.graphdef.editor.edit.parts.ChildAccessEditPart;
13,15c11
< import org.eclipse.gmf.runtime.emf.type.core.IElementType;
< 
< import org.eclipse.gmf.graphdef.editor.edit.parts.CanvasEditPart;
---
> import org.eclipse.gmf.graphdef.editor.edit.parts.CompartmentAccessorEditPart;
28a25,28
> import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramElementFigureEditPart;
> 
> import org.eclipse.gmf.graphdef.editor.edit.parts.DiagramLabelAccessorEditPart;
> 
30a31,32
> import org.eclipse.gmf.graphdef.editor.edit.parts.Ellipse3EditPart;
> 
32a35,38
> import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorEditPart;
> 
> import org.eclipse.gmf.graphdef.editor.edit.parts.FigureDescriptorNameEditPart;
> 
46a53,54
> import org.eclipse.gmf.graphdef.editor.edit.parts.Polyline3EditPart;
> 
50a59,60
> import org.eclipse.gmf.graphdef.editor.edit.parts.Rectangle3EditPart;
> 
54a65,66
> import org.eclipse.gmf.graphdef.editor.edit.parts.RoundedRectangle3EditPart;
> 
60a73,76
> import org.eclipse.gmf.graphdef.editor.view.factories.ChildAccessViewFactory;
> 
> import org.eclipse.gmf.graphdef.editor.view.factories.CompartmentAccessorViewFactory;
> 
74a91,92
> import org.eclipse.gmf.graphdef.editor.view.factories.DiagramLabelAccessorViewFactory;
> 
76a95,96
> import org.eclipse.gmf.graphdef.editor.view.factories.Ellipse3ViewFactory;
> 
78a99,102
> import org.eclipse.gmf.graphdef.editor.view.factories.FigureDescriptorNameViewFactory;
> 
> import org.eclipse.gmf.graphdef.editor.view.factories.FigureDescriptorViewFactory;
> 
92a117,118
> import org.eclipse.gmf.graphdef.editor.view.factories.Polyline3ViewFactory;
> 
96a123,124
> import org.eclipse.gmf.graphdef.editor.view.factories.Rectangle3ViewFactory;
> 
100a129,130
> import org.eclipse.gmf.graphdef.editor.view.factories.RoundedRectangle3ViewFactory;
> 
102a133,140
> import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;
> 
> import org.eclipse.gmf.runtime.emf.type.core.IElementType;
> 
> import org.eclipse.gmf.runtime.emf.type.core.IHintedType;
> 
> import org.eclipse.gmf.runtime.notation.View;
> 
118c156,159
<         if (elementType != null && ! GMFGraphElementTypes.isKnownElementType (elementType)) {
---
>         EObject domainElement = getSemanticElement (semanticAdapter);
>         int visualID;
>         if (semanticHint == null) {
>             if (elementType != null || domainElement == null) {
121,124c162,207
<         EClass semanticType = getSemanticEClass (semanticAdapter);
<         EObject semanticElement = getSemanticElement (semanticAdapter);
<         int nodeVID = GMFGraphVisualIDRegistry.getNodeVisualID (containerView, semanticElement, semanticType, semanticHint);
<         switch (nodeVID) {
---
>             visualID = GMFGraphVisualIDRegistry.getNodeVisualID (containerView, domainElement);
>         } else {
>             visualID = GMFGraphVisualIDRegistry.getVisualID (semanticHint);
>             if (elementType != null) {
>                 if (! GMFGraphElementTypes.isKnownElementType (elementType) || false == elementType instanceof IHintedType) {
>                     return null;
>                 }
>                 String elementTypeHint = ((IHintedType) elementType).getSemanticHint ();
>                 if (! semanticHint.equals (elementTypeHint)) {
>                     return null;
>                 }
>                 if (domainElement != null && visualID != GMFGraphVisualIDRegistry.getNodeVisualID (containerView, domainElement)) {
>                     return null;
>                 }
>             } else {
>                 switch (visualID) {
>                     case CanvasEditPart.VISUAL_ID :
>                     case CompartmentEditPart.VISUAL_ID :
>                     case NodeEditPart.VISUAL_ID :
>                     case ConnectionEditPart.VISUAL_ID :
>                     case FigureGalleryEditPart.VISUAL_ID :
>                     case FigureDescriptorEditPart.VISUAL_ID :
>                     case RectangleEditPart.VISUAL_ID :
>                     case Rectangle2EditPart.VISUAL_ID :
>                     case EllipseEditPart.VISUAL_ID :
>                     case RoundedRectangleEditPart.VISUAL_ID :
>                     case PolylineEditPart.VISUAL_ID :
>                     case Ellipse2EditPart.VISUAL_ID :
>                     case RoundedRectangle2EditPart.VISUAL_ID :
>                     case Polyline2EditPart.VISUAL_ID :
>                     case Rectangle3EditPart.VISUAL_ID :
>                     case Ellipse3EditPart.VISUAL_ID :
>                     case RoundedRectangle3EditPart.VISUAL_ID :
>                     case Polyline3EditPart.VISUAL_ID :
>                     case ChildAccessEditPart.VISUAL_ID :
>                     case CompartmentAccessorEditPart.VISUAL_ID :
>                     case DiagramLabelAccessorEditPart.VISUAL_ID :
>                     case DiagramElementFigureEditPart.VISUAL_ID :
>                         return null;
>                 }
>             }
>         }
>         if (! GMFGraphVisualIDRegistry.canCreateNode (containerView, visualID)) {
>             return null;
>         }
>         switch (visualID) {
140a224,227
>             case FigureDescriptorEditPart.VISUAL_ID :
>                 return FigureDescriptorViewFactory.class;
>             case FigureDescriptorNameEditPart.VISUAL_ID :
>                 return FigureDescriptorNameViewFactory.class;
156a244,251
>             case Rectangle3EditPart.VISUAL_ID :
>                 return Rectangle3ViewFactory.class;
>             case Ellipse3EditPart.VISUAL_ID :
>                 return Ellipse3ViewFactory.class;
>             case RoundedRectangle3EditPart.VISUAL_ID :
>                 return RoundedRectangle3ViewFactory.class;
>             case Polyline3EditPart.VISUAL_ID :
>                 return Polyline3ViewFactory.class;
171c266
<         if (elementType != null && ! GMFGraphElementTypes.isKnownElementType (elementType)) {
---
>         if (elementType == null) {
174,175c269,270
<         if (GMFGraphElementTypes.DiagramElementFigure_4001.equals (elementType)) {
<             return DiagramElementFigureViewFactory.class;
---
>         if (! GMFGraphElementTypes.isKnownElementType (elementType) || false == elementType instanceof IHintedType) {
>             return null;
177,178c272,273
<         EClass semanticType = getSemanticEClass (semanticAdapter);
<         if (semanticType == null) {
---
>         String elementTypeHint = ((IHintedType) elementType).getSemanticHint ();
>         if (elementTypeHint == null) {
181,183c276,277
<         EObject semanticElement = getSemanticElement (semanticAdapter);
<         int linkVID = GMFGraphVisualIDRegistry.getLinkWithClassVisualID (semanticElement, semanticType);
<         switch (linkVID) {
---
>         if (semanticHint != null && ! semanticHint.equals (elementTypeHint)) {
>             return null;
185c279,294
<         return getUnrecognizedConnectorViewClass (semanticAdapter, containerView, semanticHint);
---
>         int visualID = GMFGraphVisualIDRegistry.getVisualID (elementTypeHint);
>         EObject domainElement = getSemanticElement (semanticAdapter);
>         if (domainElement != null && visualID != GMFGraphVisualIDRegistry.getLinkWithClassVisualID (domainElement)) {
>             return null;
>         }
>         switch (visualID) {
>             case ChildAccessEditPart.VISUAL_ID :
>                 return ChildAccessViewFactory.class;
>             case CompartmentAccessorEditPart.VISUAL_ID :
>                 return CompartmentAccessorViewFactory.class;
>             case DiagramLabelAccessorEditPart.VISUAL_ID :
>                 return DiagramLabelAccessorViewFactory.class;
>             case DiagramElementFigureEditPart.VISUAL_ID :
>                 return DiagramElementFigureViewFactory.class;
>         }
>         return null;
195,198d303
<     private Class getUnrecognizedConnectorViewClass (IAdaptable semanticAdapter, View containerView, String semanticHint) {
<         return null;
<     }
< 
