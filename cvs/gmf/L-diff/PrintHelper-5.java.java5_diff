1c1
< package org.eclipse.gmf.runtime.diagram.ui.printing.render.util;
---
> package org.eclipse.gmf.runtime.common.ui.printing;
5c5
< import org.eclipse.gmf.runtime.common.ui.printing.IPrintHelper;
---
> import java.util.Locale;
7c7
< import org.eclipse.gmf.runtime.diagram.ui.printing.render.dialogs.JPSPrintDialog;
---
> import org.eclipse.swt.printing.PrinterData;
9c9
< import org.eclipse.gmf.runtime.diagram.ui.printing.render.model.PrintOptions;
---
> import org.eclipse.ui.PlatformUI;
11c11
< import org.eclipse.jface.dialogs.IDialogConstants;
---
> import org.eclipse.gmf.runtime.common.core.util.Log;
13c13
< import org.eclipse.swt.printing.PrinterData;
---
> import org.eclipse.gmf.runtime.common.core.util.StringStatics;
15c15,21
< import org.eclipse.ui.PlatformUI;
---
> import org.eclipse.gmf.runtime.common.core.util.Trace;
> 
> import org.eclipse.gmf.runtime.common.ui.printing.internal.CommonPrintingDebugOptions;
> 
> import org.eclipse.gmf.runtime.common.ui.printing.internal.CommonPrintingStatusCodes;
> 
> import org.eclipse.gmf.runtime.common.ui.printing.internal.PrintingPlugin;
18,19c24,27
<     private final PrintOptions options = new PrintOptions ();
<     List < String > diagramList;
---
>     private static final String DLL_NAME = "DiagramPrint";
>     private static final String SEPARATOR = StringStatics.UNDER_SCORE;
>     private static final String SUPPORTED [] = {"en", "de", "es", "fr", "it", "ja", "ko", "pt_BR", "zh_CN", "zh_TW"};
>     private static final String DEFAULT_LOCALE = SUPPORTED [0];
21,22c29,41
<     public PrintHelper () {
<         initPrintOptions ();
---
>     static {
>         boolean success = false;
>         String language = Locale.getDefault ().getLanguage ().toLowerCase ();
>         String country = Locale.getDefault ().getCountry ().toUpperCase ();
>         if (language != null) {
>             String localizedVersion = (country != null) ? language + SEPARATOR + country : language;
>             for (int i = 0;
>             i < SUPPORTED.length; i ++) {
>                 if (localizedVersion.equals (SUPPORTED [i])) {
>                     success = true;
>                 } else if (language.equals (SUPPORTED [i])) {
>                     localizedVersion = language;
>                     success = true;
25,48c44,53
<     private void initPrintOptions () {
<         options.setPercentScaling (true);
<         options.setScaleFactor (100);
<         options.setFitToPagesWidth (1);
<         options.setFitToPagesHeight (1);
<         options.setAllPages (true);
<         options.setRangeFrom (1);
<         options.setRangeTo (1);
<         options.setCopies (1);
<         options.setCollate (false);
<         options.setQualityHigh (true);
<         options.setSideOneSided (true);
<         options.setChromaticityColor (true);
<         options.setDiagramCurrent (true);
<     }
< 
<     @SuppressWarnings("unchecked")
<     public PrinterData openPrintDlg (List availableDiagramList) {
<         PrinterData result = null;
<         this.diagramList = availableDiagramList;
<         JPSPrintDialog dlg = new JPSPrintDialog (PlatformUI.getWorkbench ().getActiveWorkbenchWindow (), options, this.diagramList);
<         if (dlg.open () == IDialogConstants.OK_ID) {
<             if (options.getDestination () != null) {
<                 result = options.getDestination ().getPrinterData ();
---
>                 if (success) {
>                     success = false;
>                     try {
>                         System.loadLibrary (DLL_NAME + SEPARATOR + localizedVersion);
>                         success = true;
>                         break;
>                     } catch (UnsatisfiedLinkError ule) {
>                         Trace.catching (PrintingPlugin.getDefault (), CommonPrintingDebugOptions.EXCEPTIONS_CATCHING, PrintHelper.class, "Link", ule);
>                         Log.error (PrintingPlugin.getDefault (), CommonPrintingStatusCodes.RESOURCE_FAILURE, "Failed to load DiagramPrint dll for " + localizedVersion);
>                         Trace.throwing (PrintingPlugin.getDefault (), CommonPrintingDebugOptions.EXCEPTIONS_THROWING, PrintHelper.class, "Link", ule);
50,51d54
<         } else {
<             initPrintOptions ();
53d55
<         return result;
55,57d56
< 
<     public boolean getDlgCollate () {
<         return options.isCollate ();
59,61c58,65
< 
<     public int getDlgNumberOfCopies () {
<         return options.getCopies ();
---
>         if (! success) {
>             try {
>                 System.loadLibrary (DLL_NAME + SEPARATOR + DEFAULT_LOCALE);
>             } catch (UnsatisfiedLinkError ule) {
>                 Trace.catching (PrintingPlugin.getDefault (), CommonPrintingDebugOptions.EXCEPTIONS_CATCHING, PrintHelper.class, "Link", ule);
>                 Log.error (PrintingPlugin.getDefault (), CommonPrintingStatusCodes.RESOURCE_FAILURE, "Failed to load DiagramPrint_en.dll for language " + ((language == null) ? "null" : language) + " and country " + ((country == null) ? "null" : country), ule);
>                 Trace.throwing (PrintingPlugin.getDefault (), CommonPrintingDebugOptions.EXCEPTIONS_THROWING, PrintHelper.class, "Link", ule);
>                 throw ule;
63,65d66
< 
<     public int getDlgPagesFrom () {
<         return options.getRangeFrom ();
67,69d67
< 
<     public int getDlgPagesTo () {
<         return options.getRangeTo ();
72,73c70,137
<     public boolean getDlgPrintRangeAll () {
<         return options.isAllPages ();
---
>     public static native void initScaleFitTo (int m, int n);
> 
>     public static native void initScalePercent (int percent);
> 
>     public static native void resetDialog ();
> 
>     public static native void addDiagramString (String string);
> 
>     public static native void setHwndOwner (String windowClass, String title);
> 
>     public static native int getScaleFitToM ();
> 
>     public static native int getScaleFitToN ();
> 
>     public static native int getScalePercent ();
> 
>     public static native boolean isDiagramSelected (int index);
> 
>     public static native boolean getDiagramPrintRangeAll ();
> 
>     public static native boolean getDiagramPrintRangeCurrent ();
> 
>     public static native boolean getDiagramPrintRangeSelection ();
> 
>     public static native boolean getPrintRangeAll ();
> 
>     public static native boolean getPrintRangePages ();
> 
>     public static native boolean getCollate ();
> 
>     public static native int getPagesFrom ();
> 
>     public static native int getPagesTo ();
> 
>     public static native int getNumberOfCopies ();
> 
>     public static native boolean open (PrinterData pd);
> 
>     public PrinterData openPrintDlg (List diagramList) {
>         String title = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell ().getText ();
>         assert null != title : "title cannot be null";
>         setHwndOwner ("SWT_Window0", title);
>         resetDialog ();
>         initScaleFitTo (1, 1);
>         initScalePercent (100);
>         if (diagramList != null) {
>             for (int c = 0;
>             c < diagramList.size (); c ++) {
>                 assert (diagramList.get (c) instanceof String);
>                 addDiagramString ((String) diagramList.get (c));
>             }
>         }
>         PrinterData printerData = new PrinterData (StringStatics.BLANK, StringStatics.BLANK);
>         if (open (printerData)) {
>             if (getPrintRangePages ()) {
>                 printerData.scope = PrinterData.PAGE_RANGE;
>                 printerData.startPage = getPagesFrom ();
>                 printerData.endPage = getPagesTo ();
>             } else {
>                 printerData.scope = PrinterData.ALL_PAGES;
>             }
>             printerData.printToFile = false;
>             printerData.copyCount = getNumberOfCopies ();
>             printerData.collate = getCollate ();
>         } else {
>             return null;
>         }
>         return printerData;
76,77c140
<     public boolean getDlgPrintRangePages () {
<         return ! getDlgPrintRangeAll ();
---
>     public PrintHelper () {
81c144
<         return options.getFitToPagesWidth ();
---
>         return getScaleFitToM ();
85c148
<         return options.getFitToPagesHeight ();
---
>         return getScaleFitToN ();
89c152
<         return options.isPercentScaling () ? options.getScaleFactor () : - 1;
---
>         return getScalePercent ();
92c155,156
<     public void setDlgOrientation (boolean landscape) {
---
>     public boolean isDlgDiagramSelected (int index) {
>         return isDiagramSelected (index);
95c159,160
<     public void setDlgPaperSize (int index, double width, double length) {
---
>     public boolean getDlgDiagramPrintRangeAll () {
>         return getDiagramPrintRangeAll ();
99c164
<         return options.isDiagramCurrent ();
---
>         return getDiagramPrintRangeCurrent ();
103c168
<         return options.isDiagramSelection ();
---
>         return getDiagramPrintRangeSelection ();
106,109c171,172
<     public boolean isDlgDiagramSelected (int index) {
<         String diagramToPrint = diagramList.get (index);
<         if (options.getDiagramsToPrint () != null) {
<             return options.getDiagramsToPrint ().contains (diagramToPrint);
---
>     public boolean getDlgPrintRangeAll () {
>         return getPrintRangeAll ();
111c174,176
<         return false;
---
> 
>     public boolean getDlgPrintRangePages () {
>         return getPrintRangePages ();
114,115c179,180
<     public boolean getDlgDiagramPrintRangeAll () {
<         return false;
---
>     public boolean getDlgCollate () {
>         return getCollate ();
118,119c183,192
<     public PrintOptions getPrintOptions () {
<         return options;
---
>     public int getDlgPagesFrom () {
>         return getPagesFrom ();
>     }
> 
>     public int getDlgPagesTo () {
>         return getPagesTo ();
>     }
> 
>     public int getDlgNumberOfCopies () {
>         return getNumberOfCopies ();
