3,8d2
< import java.util.Dictionary;
< 
< import java.util.Hashtable;
< 
< import java.util.Map;
< 
15,18d8
< import org.eclipse.emf.ecore.ENamedElement;
< 
< import org.eclipse.emf.ecore.EStructuralFeature;
< 
21,22d10
< import org.eclipse.swt.graphics.Color;
< 
27,30d14
< import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
< 
< import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;
< 
34a19,20
> import org.eclipse.swt.graphics.Color;
> 
38d23
<     private static final String [] appearanceProperties = new String [] {Properties.ID_ISVISIBLE, Properties.ID_FONTNAME, Properties.ID_FONTSIZE, Properties.ID_FONTBOLD, Properties.ID_FONTITALIC, Properties.ID_FONTCOLOR};
64,85d48
<     private String [] getAppearancePropertyIDs () {
<         return appearanceProperties;
<     }
< 
<     public void fillAppearancePropertiesMap (Map properties) {
<         if (getAppearancePropertyIDs ().length > 0) {
<             final Dictionary local_properties = new Hashtable ();
<             for (int i = 0;
<             i < getAppearancePropertyIDs ().length; i ++) {
<                 ENamedElement element = MetaModelUtil.getElement (getAppearancePropertyIDs () [i]);
<                 if (element instanceof EStructuralFeature) {
<                     local_properties.put (getAppearancePropertyIDs () [i], getStructuralFeatureValue ((EStructuralFeature) element));
<                 }
<             }
<             String semanticType = "";
<             View view = getNotationView ();
<             if (view != null) semanticType = view.getType ();
< 
<             properties.put (semanticType, local_properties);
<         }
<     }
< 
