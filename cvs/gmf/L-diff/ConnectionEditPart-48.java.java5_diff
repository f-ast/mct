36a37,38
> import org.eclipse.draw2d.Graphics;
> 
38a41,44
> import org.eclipse.draw2d.PolygonDecoration;
> 
> import org.eclipse.draw2d.PolylineDecoration;
> 
40a47,48
> import org.eclipse.draw2d.RotatableDecoration;
> 
190a199,202
> import org.eclipse.gmf.runtime.notation.ArrowStyle;
> 
> import org.eclipse.gmf.runtime.notation.ArrowType;
> 
202a215,218
> import org.eclipse.gmf.runtime.notation.LineType;
> 
> import org.eclipse.gmf.runtime.notation.LineTypeStyle;
> 
1262a1279,1363
>     protected void setLineWidth (int width) {
>     }
> 
>     protected int getLineWidth () {
>         int lineWidth = - 1;
>         LineStyle style = (LineStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getLineStyle ());
>         if (style != null) {
>             lineWidth = style.getLineWidth ();
>         }
>         return lineWidth;
>     }
> 
>     protected void setLineType (int lineType) {
>     }
> 
>     protected int getLineType () {
>         int lineType = Graphics.LINE_SOLID;
>         LineTypeStyle style = (LineTypeStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getLineTypeStyle ());
>         if (style != null) {
>             if (style.getLineType () == LineType.SOLID_LITERAL) {
>                 lineType = Graphics.LINE_SOLID;
>             } else if (style.getLineType () == LineType.DASH_LITERAL) {
>                 lineType = Graphics.LINE_DASH;
>             } else if (style.getLineType () == LineType.DOT_LITERAL) {
>                 lineType = Graphics.LINE_DOT;
>             } else if (style.getLineType () == LineType.DASH_DOT_LITERAL) {
>                 lineType = Graphics.LINE_DASHDOT;
>             } else if (style.getLineType () == LineType.DASH_DOT_DOT_LITERAL) {
>                 lineType = Graphics.LINE_DASHDOTDOT;
>             }
> 
>         }
>         return lineType;
>     }
> 
>     protected void setArrowSource (RotatableDecoration arrowDecoration) {
>     }
> 
>     protected void setArrowTarget (RotatableDecoration arrowDecoration) {
>     }
> 
>     protected RotatableDecoration getArrowDecoration (int arrowType) {
>         RotatableDecoration decoration = null;
>         if (arrowType == ArrowType.OPEN_ARROW) {
>             decoration = new PolylineDecoration ();
>             ((PolylineDecoration) decoration).setScale (11 + getLineWidth (), 6 + getLineWidth ());
>             ((PolylineDecoration) decoration).setTemplate (PolylineDecoration.TRIANGLE_TIP);
>             ((PolylineDecoration) decoration).setLineWidth (getLineWidth ());
>         } else if (arrowType == ArrowType.SOLID_ARROW) {
>             decoration = new PolygonDecoration ();
>             ((PolygonDecoration) decoration).setScale (11 + getLineWidth (), 6 + getLineWidth ());
>             ((PolygonDecoration) decoration).setTemplate (PolygonDecoration.TRIANGLE_TIP);
>             ((PolygonDecoration) decoration).setLineWidth (getLineWidth ());
>             ((PolygonDecoration) decoration).setFill (true);
>         }
> 
>         return decoration;
>     }
> 
>     protected void refreshLineWidth () {
>         setLineWidth (getLineWidth ());
>     }
> 
>     protected void refreshLineType () {
>         setLineType (getLineType ());
>     }
> 
>     protected void refreshArrowSource () {
>         int arrowType = ArrowType.NONE;
>         ArrowStyle style = (ArrowStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getArrowStyle ());
>         if (style != null) {
>             arrowType = style.getArrowSource ().getValue ();
>         }
>         setArrowSource (getArrowDecoration (arrowType));
>     }
> 
>     protected void refreshArrowTarget () {
>         int arrowType = ArrowType.NONE;
>         ArrowStyle style = (ArrowStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getArrowStyle ());
>         if (style != null) {
>             arrowType = style.getArrowTarget ().getValue ();
>         }
>         setArrowTarget (getArrowDecoration (arrowType));
>     }
> 
