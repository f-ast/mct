28c28
<     private final List myRefs;
---
>     private final List < EReference > myRefs;
30,34c30,34
<     private final Map myResult;
<     private Set myAccessibleLeaves;
<     private Set myAccessibleClasses = new HashSet ();
<     private Set myAccessibleLinkClasses = new HashSet ();
<     private Set myLinkClassContainmentRefs = new HashSet ();
---
>     private final Map < EClass, Set < EClass > > myResult;
>     private Set < EClass > myAccessibleLeaves;
>     private Set < EClass > myAccessibleClasses = new HashSet < EClass > ();
>     private Set < EClass > myAccessibleLinkClasses = new HashSet < EClass > ();
>     private Set < EReference > myLinkClassContainmentRefs = new HashSet < EReference > ();
37c37
<     public Hierarchy (List eRefs, EClass diagramContainer, EPackage domainModel) {
---
>     public Hierarchy (List < EReference > eRefs, EClass diagramContainer, EPackage domainModel) {
41c41
<         myResult = new HashMap ();
---
>         myResult = new HashMap < EClass, Set < EClass > > ();
45c45
<             myResult.put (element.getEReferenceType (), new HashSet ());
---
>             myResult.put (element.getEReferenceType (), new HashSet < EClass > ());
48a49
>     @SuppressWarnings("unchecked")
52a54
>     @SuppressWarnings("unchecked")
73c75
<         ArrayList compatible = new ArrayList ();
---
>         ArrayList < EReference > compatible = new ArrayList < EReference > ();
86c88
<             EReference r = (EReference) compatible.get (i);
---
>             EReference r = compatible.get (i);
91c93
<         return (EReference) compatible.get (0);
---
>         return compatible.get (0);
125,126c127,128
<         Set nonLeaves = new HashSet ();
<         final HashSet leavesSet = new HashSet ();
---
>         Set < EClass > nonLeaves = new HashSet < EClass > ();
>         final HashSet < EClass > leavesSet = new HashSet < EClass > ();
132,135c134,135
<                 for (Iterator it2 = myResult.entrySet ().iterator ();
<                 it2.hasNext ();) {
<                     Map.Entry entry = (Map.Entry) it2.next ();
<                     EClass element = (EClass) entry.getKey ();
---
>                 for (Map.Entry < EClass, Set < EClass > > entry : myResult.entrySet ()) {
>                     final EClass element = entry.getKey ();
137c137
<                         ((Set) entry.getValue ()).add (eClass);
---
>                         entry.getValue ().add (eClass);
160,164c160,162
<     public Set getAllClasses () {
<         HashSet rv = new HashSet ();
<         for (Iterator it = myResult.values ().iterator ();
<         it.hasNext ();) {
<             Set next = (Set) it.next ();
---
>     public Set < EClass > getAllClasses () {
>         HashSet < EClass > rv = new HashSet < EClass > ();
>         for (Set < EClass > next : myResult.values ()) {
170c168
<     public Set getAccessibleClasses () {
---
>     public Set < EClass > getAccessibleClasses () {
174c172
<     public Set getAccessibleLinkClasses () {
---
>     public Set < EClass > getAccessibleLinkClasses () {
178c176
<     public Set getAccessibleReferences () {
---
>     public Set < EReference > getAccessibleReferences () {
182,183c180,181
<     public Set getAccessibleReferences (Iterator iter) {
<         HashSet rv = new HashSet ();
---
>     public Set < EReference > getAccessibleReferences (Iterator < EClass > iter) {
>         HashSet < EReference > rv = new HashSet < EReference > ();
185c183
<             EClass element = (EClass) iter.next ();
---
>             EClass element = iter.next ();
