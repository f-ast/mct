3,8d2
< import java.util.ArrayList;
< 
< import java.util.Collection;
< 
< import java.util.Collections;
< 
11,14d4
< import java.util.Iterator;
< 
< import java.util.List;
< 
17,20d6
< import java.util.MissingResourceException;
< 
< import java.util.StringTokenizer;
< 
39,42d24
< import org.eclipse.emf.ecore.EClass;
< 
< import org.eclipse.emf.ecore.EClassifier;
< 
45,48d26
< import org.eclipse.emf.ecore.EPackage;
< 
< import org.eclipse.emf.ecore.EcorePackage;
< 
59,80d36
< import org.eclipse.gmf.gmfgraph.Canvas;
< 
< import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
< 
< import org.eclipse.gmf.internal.common.ui.ComboElementSelectorExtension;
< 
< import org.eclipse.gmf.internal.common.ui.ElementSelectorExtension;
< 
< import org.eclipse.gmf.internal.common.ui.ExtensibleModelSelectionPage;
< 
< import org.eclipse.gmf.internal.common.ui.ListElementSelectorExtension;
< 
< import org.eclipse.gmf.internal.common.ui.ResourceLocationProvider;
< 
< import org.eclipse.gmf.mappings.CanvasMapping;
< 
< import org.eclipse.gmf.mappings.GMFMapFactory;
< 
< import org.eclipse.gmf.mappings.GMFMapPackage;
< 
< import org.eclipse.gmf.mappings.Mapping;
< 
83,86d38
< import org.eclipse.gmf.tooldef.GMFToolPackage;
< 
< import org.eclipse.gmf.tooldef.Palette;
< 
97,114d48
< import org.eclipse.jface.wizard.WizardPage;
< 
< import org.eclipse.swt.SWT;
< 
< import org.eclipse.swt.events.ModifyEvent;
< 
< import org.eclipse.swt.events.ModifyListener;
< 
< import org.eclipse.swt.layout.GridData;
< 
< import org.eclipse.swt.layout.GridLayout;
< 
< import org.eclipse.swt.widgets.Combo;
< 
< import org.eclipse.swt.widgets.Composite;
< 
< import org.eclipse.swt.widgets.Label;
< 
136,137d69
<     protected GMFMapPackage gmfMapPackage = GMFMapPackage.eINSTANCE;
<     protected GMFMapFactory gmfMapFactory = gmfMapPackage.getGMFMapFactory ();
139,142c71
<     protected GMFMapModelWizardInitialObjectCreationPage initialObjectCreationPage;
<     protected ExtensibleModelSelectionPage domainModelSelectionPage;
<     protected ExtensibleModelSelectionPage graphModelSelectionPage;
<     protected ExtensibleModelSelectionPage toolModelSelectionPage;
---
>     protected MapRefModelPages refPages;
145d73
<     protected List initialObjectNames;
152,169c80
<     }
< 
<     protected Collection getInitialObjectNames () {
<         if (initialObjectNames == null) {
<             initialObjectNames = new ArrayList ();
<             for (Iterator classifiers = gmfMapPackage.getEClassifiers ().iterator ();
<             classifiers.hasNext ();) {
<                 EClassifier eClassifier = (EClassifier) classifiers.next ();
<                 if (eClassifier instanceof EClass) {
<                     EClass eClass = (EClass) eClassifier;
<                     if (! eClass.isAbstract ()) {
<                         initialObjectNames.add (eClass.getName ());
<                     }
<                 }
<             }
<             Collections.sort (initialObjectNames, java.text.Collator.getInstance ());
<         }
<         return initialObjectNames;
---
>         refPages = new MapRefModelPages (true);
173,192c84
<         Mapping mapping = gmfMapFactory.createMapping ();
<         CanvasMapping canvasMapping = gmfMapFactory.createCanvasMapping ();
<         mapping.setDiagram (canvasMapping);
<         EPackage domainModel = (EPackage) (((ElementSelectorExtension) domainModelSelectionPage.getExtension ("domainModel")).getModelElement ());
<         if (domainModel != null) {
<             canvasMapping.setDomainModel (domainModel);
<         }
<         EClass domainElement = (EClass) (((ElementSelectorExtension) domainModelSelectionPage.getExtension ("domainElement")).getModelElement ());
<         if (domainElement != null) {
<             canvasMapping.setDomainMetaElement (domainElement);
<         }
<         Canvas canvas = (Canvas) (((ElementSelectorExtension) graphModelSelectionPage.getExtension ("canvas")).getModelElement ());
<         if (canvas != null) {
<             canvasMapping.setDiagramCanvas (canvas);
<         }
<         Palette palette = (Palette) (((ElementSelectorExtension) toolModelSelectionPage.getExtension ("palette")).getModelElement ());
<         if (palette != null) {
<             canvasMapping.setPalette (palette);
<         }
<         return mapping;
---
>         return refPages.createMapping ();
278,405d169
<     public class GMFMapModelWizardInitialObjectCreationPage extends WizardPage {
<         protected Combo initialObjectField;
<         protected List encodings;
<         protected Combo encodingField;
< 
<         public GMFMapModelWizardInitialObjectCreationPage (String pageId) {
<             super (pageId);
<         }
< 
<         public void createControl (Composite parent) {
<             Composite composite = new Composite (parent, SWT.NONE);
<             {
<                 GridLayout layout = new GridLayout ();
<                 layout.numColumns = 1;
<                 layout.verticalSpacing = 12;
<                 composite.setLayout (layout);
<                 GridData data = new GridData ();
<                 data.verticalAlignment = GridData.FILL;
<                 data.grabExcessVerticalSpace = true;
<                 data.horizontalAlignment = GridData.FILL;
<                 composite.setLayoutData (data);
<             } Label containerLabel = new Label (composite, SWT.LEFT);
<             {
<                 containerLabel.setText (GMFMapEditPlugin.INSTANCE.getString ("_UI_ModelObject"));
<                 GridData data = new GridData ();
<                 data.horizontalAlignment = GridData.FILL;
<                 containerLabel.setLayoutData (data);
<             } initialObjectField = new Combo (composite, SWT.BORDER);
<             {
<                 GridData data = new GridData ();
<                 data.horizontalAlignment = GridData.FILL;
<                 data.grabExcessHorizontalSpace = true;
<                 initialObjectField.setLayoutData (data);
<             } for (Iterator i = getInitialObjectNames ().iterator ();
<             i.hasNext ();) {
<                 initialObjectField.add (getLabel ((String) i.next ()));
<             }
<             if (initialObjectField.getItemCount () == 1) {
<                 initialObjectField.select (0);
<             }
<             initialObjectField.addModifyListener (validator);
<             Label encodingLabel = new Label (composite, SWT.LEFT);
<             {
<                 encodingLabel.setText (GMFMapEditPlugin.INSTANCE.getString ("_UI_XMLEncoding"));
<                 GridData data = new GridData ();
<                 data.horizontalAlignment = GridData.FILL;
<                 encodingLabel.setLayoutData (data);
<             } encodingField = new Combo (composite, SWT.BORDER);
<             {
<                 GridData data = new GridData ();
<                 data.horizontalAlignment = GridData.FILL;
<                 data.grabExcessHorizontalSpace = true;
<                 encodingField.setLayoutData (data);
<             } for (Iterator i = getEncodings ().iterator ();
<             i.hasNext ();) {
<                 encodingField.add ((String) i.next ());
<             }
<             encodingField.select (0);
<             encodingField.addModifyListener (validator);
<             setPageComplete (validatePage ());
<             setControl (composite);
<         }
< 
<         protected ModifyListener validator = new ModifyListener () {
< 
<             public void modifyText (ModifyEvent e) {
<                 setPageComplete (validatePage ());
<             }
< 
<         }
< 
<         ;
< 
<         protected boolean validatePage () {
<             return getInitialObjectName () != null && getEncodings ().contains (encodingField.getText ());
<         }
< 
<         public void setVisible (boolean visible) {
<             super.setVisible (visible);
<             if (visible) {
<                 if (initialObjectField.getItemCount () == 1) {
<                     initialObjectField.clearSelection ();
<                     encodingField.setFocus ();
<                 } else {
<                     encodingField.clearSelection ();
<                     initialObjectField.setFocus ();
<                 }
<             }
<         }
< 
<         public String getInitialObjectName () {
<             String label = initialObjectField.getText ();
<             for (Iterator i = getInitialObjectNames ().iterator ();
<             i.hasNext ();) {
<                 String name = (String) i.next ();
<                 if (getLabel (name).equals (label)) {
<                     return name;
<                 }
<             }
<             return null;
<         }
< 
<         public String getEncoding () {
<             return encodingField.getText ();
<         }
< 
<         protected String getLabel (String typeName) {
<             try {
<                 return GMFMapEditPlugin.INSTANCE.getString ("_UI_" + typeName + "_type");
<             } catch (MissingResourceException mre) {
<                 GMFMapEditPlugin.INSTANCE.log (mre);
<             }
<             return typeName;
<         }
< 
<         protected Collection getEncodings () {
<             if (encodings == null) {
<                 encodings = new ArrayList ();
<                 for (StringTokenizer stringTokenizer = new StringTokenizer (GMFMapEditPlugin.INSTANCE.getString ("_UI_XMLEncodingChoices"));
<                 stringTokenizer.hasMoreTokens ();) {
<                     encodings.add (stringTokenizer.nextToken ());
<                 }
<             }
<             return encodings;
<         }
< 
<     }
< 
432,552c196
<         ResourceLocationProvider rloc = new ResourceLocationProvider (selection);
<         domainModelSelectionPage = new ExtensibleModelSelectionPage ("domain", rloc) {
< 
<             protected String getModelFileExtension () {
<                 return "ecore";
<             }
< 
<         }
< 
<         ;
<         domainModelSelectionPage.setTitle ("Select Domain Model");
<         domainModelSelectionPage.setDescription ("Load domain model and select element for canvas mapping.");
<         domainModelSelectionPage.addExtension ("domainModel", new ComboElementSelectorExtension () {
< 
<             protected String getModelElementName () {
<                 return "Package:";
<             }
< 
<             protected String getModelElementLabel (EObject modelElement) {
<                 String name = ((EPackage) modelElement).getName ();
<                 if (name == null || name.trim ().length () == 0) {
<                     name = "<unnamed>";
<                 }
<                 return name;
<             }
< 
<             protected EClass getModelElementClass () {
<                 return EcorePackage.eINSTANCE.getEPackage ();
<             }
< 
<         }
< 
<         );
<         domainModelSelectionPage.addExtension ("domainElement", new ListElementSelectorExtension () {
< 
<             protected String getModelElementName () {
<                 return "Class:";
<             }
< 
<             protected String getModelElementLabel (EObject modelElement) {
<                 String name = ((EClass) modelElement).getName ();
<                 if (name == null || name.trim ().length () == 0) {
<                     name = "<unnamed>";
<                 }
<                 return name;
<             }
< 
<             protected EClass getModelElementClass () {
<                 return EcorePackage.eINSTANCE.getEClass ();
<             }
< 
<         }
< 
<         );
<         addPage (domainModelSelectionPage);
<         graphModelSelectionPage = new ExtensibleModelSelectionPage ("graph", rloc) {
< 
<             protected String getModelFileExtension () {
<                 return "gmfgraph";
<             }
< 
<         }
< 
<         ;
<         graphModelSelectionPage.setTitle ("Select Diagram Canvas");
<         graphModelSelectionPage.setDescription ("Load graphical definition model and select diagram canvas for canvas mapping.");
<         graphModelSelectionPage.addExtension ("canvas", new ComboElementSelectorExtension () {
< 
<             protected String getModelElementName () {
<                 return "Diagram Canvas:";
<             }
< 
<             protected String getModelElementLabel (EObject modelElement) {
<                 String name = ((Canvas) modelElement).getName ();
<                 if (name == null || name.trim ().length () == 0) {
<                     name = "<unnamed>";
<                 }
<                 return name;
<             }
< 
<             protected EClass getModelElementClass () {
<                 return GMFGraphPackage.eINSTANCE.getCanvas ();
<             }
< 
<         }
< 
<         );
<         addPage (graphModelSelectionPage);
<         toolModelSelectionPage = new ExtensibleModelSelectionPage ("tool", rloc) {
< 
<             protected String getModelFileExtension () {
<                 return "gmftool";
<             }
< 
<         }
< 
<         ;
<         toolModelSelectionPage.setTitle ("Select Diagram Palette");
<         toolModelSelectionPage.setDescription ("Load tooling definition model and select diagram palette for canvas mapping.");
<         toolModelSelectionPage.addExtension ("palette", new ComboElementSelectorExtension () {
< 
<             protected String getModelElementName () {
<                 return "Diagram Palette:";
<             }
< 
<             protected String getModelElementLabel (EObject modelElement) {
<                 String title = ((Palette) modelElement).getTitle ();
<                 if (title == null || title.trim ().length () == 0) {
<                     title = "<untitled>";
<                 }
<                 return title;
<             }
< 
<             protected EClass getModelElementClass () {
<                 return GMFToolPackage.eINSTANCE.getPalette ();
<             }
< 
<         }
< 
<         );
<         addPage (toolModelSelectionPage);
---
>         refPages.addPages (this, selection);
