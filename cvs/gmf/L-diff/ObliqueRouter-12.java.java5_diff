14a15,16
> import org.eclipse.draw2d.PositionConstants;
> 
20a23,26
> import org.eclipse.draw2d.geometry.PrecisionPoint;
> 
> import org.eclipse.draw2d.geometry.PrecisionRectangle;
> 
36a43,44
> import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
> 
98a107
>     private ArrayListMap intersectingShapesConnections = new ArrayListMap ();
257c266
<         if (! checkSelfRelConnection (conn, newLine)) {
---
>         if (! checkSelfRelConnection (conn, newLine) && ! checkShapesIntersect (conn, newLine)) {
262a272,509
>     protected boolean checkShapesIntersect (Connection conn, PointList newLine) {
>         if (conn.getSourceAnchor ().getOwner () == null || conn.getTargetAnchor ().getOwner () == null) return false;
> 
>         if (newLine.size () < 3) {
>             PrecisionRectangle sourceBounds = new PrecisionRectangle (conn.getSourceAnchor ().getOwner ().getBounds ());
>             PrecisionRectangle targetBounds = new PrecisionRectangle (conn.getTargetAnchor ().getOwner ().getBounds ());
>             conn.getSourceAnchor ().getOwner ().translateToAbsolute (sourceBounds);
>             conn.getTargetAnchor ().getOwner ().translateToAbsolute (targetBounds);
>             if (sourceBounds.intersects (targetBounds) && ! sourceBounds.contains (targetBounds) && ! targetBounds.contains (sourceBounds)) {
>                 getVerticesForIntersectingShapes (conn, newLine);
>                 return true;
>             }
>         } else {
>             removeIntersectingShapesConnection (conn);
>         }
>         return false;
>     }
> 
>     private int getSourcePositionFromConnectionRectangle (Rectangle connRectangle, Rectangle sourceRect, int position) {
>         Dimension diff = null;
>         switch (position) {
>             case PositionConstants.NORTH_WEST :
>                 diff = connRectangle.getBottomRight ().getDifference (sourceRect.getTopLeft ());
>                 if (diff.width == 0) {
>                     return PositionConstants.EAST;
>                 } else {
>                     return PositionConstants.SOUTH;
>                 }
>             case PositionConstants.NORTH_EAST :
>                 diff = connRectangle.getBottomLeft ().getDifference (sourceRect.getTopRight ());
>                 if (diff.width == 0) {
>                     return PositionConstants.WEST;
>                 } else {
>                     return PositionConstants.SOUTH;
>                 }
>             case PositionConstants.SOUTH_EAST :
>                 diff = connRectangle.getTopLeft ().getDifference (sourceRect.getBottomRight ());
>                 if (diff.width == 0) {
>                     return PositionConstants.WEST;
>                 } else {
>                     return PositionConstants.NORTH;
>                 }
>             case PositionConstants.SOUTH_WEST :
>                 diff = connRectangle.getTopRight ().getDifference (sourceRect.getBottomLeft ());
>                 if (diff.width == 0) {
>                     return PositionConstants.EAST;
>                 } else {
>                     return PositionConstants.NORTH;
>                 }
>         }
>         return PositionConstants.NONE;
>     }
> 
>     private void getConnectionPoints (Rectangle connRect, int position, int sourcePosition, PointList line) {
>         line.removeAllPoints ();
>         switch (position) {
>             case PositionConstants.NORTH_WEST :
>                 if (sourcePosition == PositionConstants.EAST) {
>                     line.addPoint (connRect.getTopRight ());
>                     line.addPoint (connRect.getTopLeft ());
>                     line.addPoint (connRect.getBottomLeft ());
>                 } else {
>                     line.addPoint (connRect.getBottomLeft ());
>                     line.addPoint (connRect.getTopLeft ());
>                     line.addPoint (connRect.getTopRight ());
>                 }
>                 break;
>             case PositionConstants.NORTH_EAST :
>                 if (sourcePosition == PositionConstants.WEST) {
>                     line.addPoint (connRect.getTopLeft ());
>                     line.addPoint (connRect.getTopRight ());
>                     line.addPoint (connRect.getBottomRight ());
>                 } else {
>                     line.addPoint (connRect.getBottomRight ());
>                     line.addPoint (connRect.getTopRight ());
>                     line.addPoint (connRect.getTopLeft ());
>                 }
>                 break;
>             case PositionConstants.SOUTH_EAST :
>                 if (sourcePosition == PositionConstants.WEST) {
>                     line.addPoint (connRect.getBottomLeft ());
>                     line.addPoint (connRect.getBottomRight ());
>                     line.addPoint (connRect.getTopRight ());
>                 } else {
>                     line.addPoint (connRect.getTopRight ());
>                     line.addPoint (connRect.getBottomRight ());
>                     line.addPoint (connRect.getBottomLeft ());
>                 }
>                 break;
>             case PositionConstants.SOUTH_WEST :
>                 if (sourcePosition == PositionConstants.EAST) {
>                     line.addPoint (connRect.getBottomRight ());
>                     line.addPoint (connRect.getBottomLeft ());
>                     line.addPoint (connRect.getTopLeft ());
>                 } else {
>                     line.addPoint (connRect.getTopLeft ());
>                     line.addPoint (connRect.getBottomLeft ());
>                     line.addPoint (connRect.getBottomRight ());
>                 }
>                 break;
>         }
>     }
> 
>     private void absDimension (Dimension d) {
>         d.width = Math.abs (d.width);
>         d.height = Math.abs (d.height);
>     }
> 
>     private void getVerticesForIntersectingShapes (Connection conn, PointList newLine) {
>         Object key = getIntersectingShapesConnectionKey (conn);
>         int nSelfIncr = 0;
>         int nIndex = 0;
>         ArrayList connectionList = intersectingShapesConnections.get (key);
>         if (connectionList != null) {
>             if (! connectionList.contains (conn)) {
>                 intersectingShapesConnections.put (key, conn);
>                 connectionList = intersectingShapesConnections.get (key);
>             }
>             nIndex = connectionList.indexOf (conn);
>             assert nIndex >= 0;
>         } else {
>             intersectingShapesConnections.put (key, conn);
>         }
>         PrecisionPoint selfrelsizeincr = new PrecisionPoint (SELFRELSIZEINCR, 0);
>         boolean isFeedbackConn = RouterHelper.getInstance ().isFeedback (conn);
>         if (! isFeedbackConn) selfrelsizeincr = (PrecisionPoint) MapModeUtil.getMapMode (conn).DPtoLP (selfrelsizeincr);
> 
>         IFigure sourceFig = conn.getSourceAnchor ().getOwner ();
>         PrecisionRectangle sourceRect = new PrecisionRectangle (sourceFig.getBounds ());
>         sourceFig.translateToAbsolute (sourceRect);
>         conn.translateToRelative (sourceRect);
>         IFigure targetFig = conn.getTargetAnchor ().getOwner ();
>         PrecisionRectangle targetRect = new PrecisionRectangle (targetFig.getBounds ());
>         targetFig.translateToAbsolute (targetRect);
>         conn.translateToRelative (targetRect);
>         PrecisionRectangle union = sourceRect.getPreciseCopy ().union (targetRect);
>         nSelfIncr = selfrelsizeincr.x * (nIndex);
>         Rectangle intersection = sourceRect.getCopy ().intersect (targetRect);
>         Rectangle connArea = new Rectangle ();
>         int position = PositionConstants.NONE;
>         int minArea = 0;
>         Point unionTopLeft = union.getTopLeft ();
>         Point unionTopRight = union.getTopRight ();
>         Point unionBottomRight = union.getBottomRight ();
>         Point unionBottomLeft = union.getBottomLeft ();
>         if (! unionTopLeft.equals (sourceRect.getTopLeft ()) && ! unionTopLeft.equals (targetRect.getTopLeft ())) {
>             Dimension diffVector = unionTopLeft.getDifference (intersection.getTopLeft ());
>             absDimension (diffVector);
>             int areaTopLeft = diffVector.getArea ();
>             if (minArea == 0 || minArea > areaTopLeft) {
>                 position = PositionConstants.NORTH_WEST;
>                 connArea.setSize (diffVector);
>                 connArea.setLocation (unionTopLeft.x, unionTopLeft.y);
>                 minArea = areaTopLeft;
>             }
>         }
>         if (! unionTopRight.equals (sourceRect.getTopRight ()) && ! unionTopRight.equals (targetRect.getTopRight ())) {
>             Dimension diffVector = unionTopRight.getDifference (intersection.getTopRight ());
>             absDimension (diffVector);
>             int areaTopRight = diffVector.getArea ();
>             if (minArea == 0 || minArea > areaTopRight) {
>                 position = PositionConstants.NORTH_EAST;
>                 connArea.setSize (diffVector);
>                 connArea.setLocation (unionTopRight.x - connArea.width, unionTopRight.y);
>                 minArea = areaTopRight;
>             }
>         }
>         if (! unionBottomRight.equals (sourceRect.getBottomRight ()) && ! unionBottomRight.equals (targetRect.getBottomRight ())) {
>             Dimension diffVector = unionBottomRight.getDifference (intersection.getBottomRight ());
>             absDimension (diffVector);
>             int areaBottomRight = diffVector.getArea ();
>             if (minArea == 0 || minArea > areaBottomRight) {
>                 position = PositionConstants.SOUTH_EAST;
>                 connArea.setSize (diffVector);
>                 connArea.setLocation (unionBottomRight.x - connArea.width, unionBottomRight.y - connArea.height);
>                 minArea = areaBottomRight;
>             }
>         }
>         if (! unionBottomLeft.equals (sourceRect.getBottomLeft ()) && ! unionBottomLeft.equals (targetRect.getBottomLeft ())) {
>             Dimension diffVector = unionBottomLeft.getDifference (intersection.getBottomLeft ());
>             absDimension (diffVector);
>             int areaBottomLeft = diffVector.getArea ();
>             if (minArea == 0 || minArea > areaBottomLeft) {
>                 position = PositionConstants.SOUTH_WEST;
>                 connArea.setSize (diffVector);
>                 connArea.setLocation (unionBottomLeft.x, unionBottomLeft.y - connArea.height);
>                 minArea = areaBottomLeft;
>             }
>         }
>         int sourcePosition = getSourcePositionFromConnectionRectangle (connArea, sourceRect, position);
>         PrecisionPoint translateExpansion = new PrecisionPoint (Math.max (connArea.width, connArea.height), 0);
>         if (! isFeedbackConn) {
>             IMapMode mm = MapModeUtil.getMapMode (conn);
>             translateExpansion = (PrecisionPoint) mm.LPtoDP (translateExpansion);
>             translateExpansion.preciseX = Math.pow (translateExpansion.preciseX, 0.8);
>             translateExpansion = (PrecisionPoint) mm.DPtoLP (translateExpansion);
>         } else {
>             translateExpansion.preciseX = Math.pow (translateExpansion.preciseX, 0.8);
>         }
>         translateExpansion.updateInts ();
>         getPrimaryPreciseConnectionArea (connArea, translateExpansion.x, position);
>         connArea.expand (nSelfIncr, nSelfIncr);
>         getConnectionPoints (connArea, position, sourcePosition, newLine);
>         Point ptS2 = newLine.getPoint (0);
>         Point ptS1 = conn.getSourceAnchor ().getReferencePoint ();
>         conn.translateToRelative (ptS1);
>         Point ptAbsS2 = new Point (ptS2);
>         conn.translateToAbsolute (ptAbsS2);
>         Point ptEdge = conn.getSourceAnchor ().getLocation (ptAbsS2);
>         conn.translateToRelative (ptEdge);
>         ptS1 = getStraightEdgePoint (ptEdge, ptS1, ptS2);
>         Point ptE2 = newLine.getPoint (newLine.size () - 1);
>         Point ptE1 = conn.getTargetAnchor ().getReferencePoint ();
>         conn.translateToRelative (ptE1);
>         Point ptAbsE2 = new Point (ptE2);
>         conn.translateToAbsolute (ptAbsE2);
>         ptEdge = conn.getTargetAnchor ().getLocation (ptAbsE2);
>         conn.translateToRelative (ptEdge);
>         ptE1 = getStraightEdgePoint (ptEdge, ptE1, ptE2);
>         newLine.insertPoint (ptS1, 0);
>         newLine.insertPoint (ptE1, newLine.size ());
>     }
> 
>     private void getPrimaryPreciseConnectionArea (Rectangle r, int size, int positionOfConnArea) {
>         r.expand (size, size);
>         if (r.width < r.height) {
>             r.height -= size;
>             if ((positionOfConnArea & PositionConstants.SOUTH) != 0) {
>                 r.y += size;
>             }
>         } else {
>             r.width -= size;
>             if ((positionOfConnArea & PositionConstants.EAST) != 0) {
>                 r.x += size;
>             }
>         }
>     }
> 
301a549,565
>     private void removeIntersectingShapesConnection (Connection conn) {
>         if (conn.getSourceAnchor () == null || conn.getTargetAnchor () == null || conn.getSourceAnchor ().getOwner () == null || conn.getTargetAnchor ().getOwner () == null) return;
> 
>         Object key = getIntersectingShapesConnectionKey (conn);
>         ArrayList connectionList = intersectingShapesConnections.get (key);
>         if (connectionList != null) {
>             int index = connectionList.indexOf (conn);
>             if (index == - 1) return;
> 
>             intersectingShapesConnections.remove (key, conn);
>         }
>     }
> 
>     private Object getIntersectingShapesConnectionKey (Connection conn) {
>         return new Integer (conn.getSourceAnchor ().getOwner ().hashCode () ^ conn.getTargetAnchor ().getOwner ().hashCode ());
>     }
> 
442a707
>         removeIntersectingShapesConnection (connection);
