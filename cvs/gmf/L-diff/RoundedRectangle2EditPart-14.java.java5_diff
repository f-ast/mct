26a27,30
> import org.eclipse.draw2d.geometry.Dimension;
> 
> import org.eclipse.draw2d.geometry.Point;
> 
43,44d46
< import org.eclipse.gmf.gmfgraph.Dimension;
< 
51,52d52
< import org.eclipse.gmf.gmfgraph.Point;
< 
63,64d62
< import org.eclipse.gmf.graphdef.editor.edit.policies.RoundedRectangle2GraphicalNodeEditPolicy;
< 
100,101d97
<     private RoundedRectangleFigure myFigure;
<     protected Figure myNodeFigure;
107a104,220
>     protected void createDefaultEditPolicies () {
>         installEditPolicy (EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy ());
>         super.createDefaultEditPolicies ();
>         installEditPolicy (EditPolicyRoles.SEMANTIC_ROLE, new RoundedRectangle2ItemSemanticEditPolicy ());
>         installEditPolicy (EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy ());
>         installEditPolicy (EditPolicyRoles.CANONICAL_ROLE, new RoundedRectangle2CanonicalEditPolicy ());
>         installEditPolicy (EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy ());
>     }
> 
>     protected LayoutEditPolicy createLayoutEditPolicy () {
>         XYLayoutEditPolicy lep = new XYLayoutEditPolicy () {
> 
>             protected EditPolicy createChildEditPolicy (EditPart child) {
>                 EditPolicy result = super.createChildEditPolicy (child);
>                 if (result == null) {
>                     return new ResizableShapeEditPolicy ();
>                 }
>                 return result;
>             }
> 
>             protected Point getLayoutOrigin () {
>                 return ((GraphicalEditPart) getHost ()).getContentPane ().getClientArea ().getLocation ();
>             }
> 
>             protected Rectangle getCurrentConstraintFor (org.eclipse.gef.GraphicalEditPart child) {
>                 Rectangle result = super.getCurrentConstraintFor (child);
>                 if (result == null) {
>                     IFigure fig = child.getFigure ();
>                     result = fig.getBounds ().getCopy ();
>                 }
>                 return result;
>             }
> 
>         }
> 
>         ;
>         return lep;
>     }
> 
>     protected IFigure createNodeShape () {
>         RoundedRectangleFigure figure = new RoundedRectangleFigure ();
>         figure.setUseLocalCoordinates (true);
>         myFigure = figure;
>         RoundedRectangle modelElement = (RoundedRectangle) ((View) getModel ()).getElement ();
>         if (modelElement != null) {
>             {
>                 layoutDataChanged (modelElement.getLayoutData ());
>             } {
>                 layoutChanged (modelElement.getLayout ());
>             } {
>                 myFigure.setOutline (modelElement.isOutline ());
>             } {
>                 myFigure.setFill (modelElement.isFill ());
>             } {
>                 myFigure.setLineWidth (modelElement.getLineWidth ());
>             } {
>                 myFigure.setLineStyle (getLineStyle (modelElement.getLineKind ()));
>             } {
>                 myFigure.setFillXOR (modelElement.isXorFill ());
>             } {
>                 myFigure.setOutlineXOR (modelElement.isXorOutline ());
>             } {
>                 myFigure.setCornerDimensions (new Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
>             } {
>                 myFigure.setCornerDimensions (new Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
>             }}
>         return primaryShape = figure;
>     }
> 
>     public RoundedRectangleFigure getPrimaryShape () {
>         return (RoundedRectangleFigure) primaryShape;
>     }
> 
>     protected NodeFigure createNodePlate () {
>         DefaultSizeNodeFigure result = new DefaultSizeNodeFigure (getMapMode ().DPtoLP (0), getMapMode ().DPtoLP (0));
>         myNodeFigure = result;
>         return result;
>     }
> 
>     protected NodeFigure createNodeFigure () {
>         NodeFigure figure = createNodePlate ();
>         figure.setLayoutManager (new StackLayout ());
>         IFigure shape = createNodeShape ();
>         figure.add (shape);
>         contentPane = setupContentPane (shape);
>         return figure;
>     }
> 
>     protected IFigure setupContentPane (IFigure nodeShape) {
>         if (nodeShape.getLayoutManager () == null) {
>             nodeShape.setLayoutManager (new FreeformLayout () {
> 
>                 public Object getConstraint (IFigure figure) {
>                     Object result = constraints.get (figure);
>                     if (result == null) {
>                         result = new Rectangle (0, 0, - 1, - 1);
>                     }
>                     return result;
>                 }
> 
>             }
> 
>             );
>         }
>         return nodeShape;
>     }
> 
>     public IFigure getContentPane () {
>         if (contentPane != null) {
>             return contentPane;
>         }
>         return super.getContentPane ();
>     }
> 
>     private RoundedRectangleFigure myFigure;
>     protected Figure myNodeFigure;
> 
225c338
<                 myFigure.setCornerDimensions (new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
---
>                 myFigure.setCornerDimensions (new Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
234c347
<                 myFigure.setCornerDimensions (new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
---
>                 myFigure.setCornerDimensions (new Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
286c399
<                             Dimension dim = modelElement.getPreferredSize ();
---
>                             org.eclipse.gmf.gmfgraph.Dimension dim = modelElement.getPreferredSize ();
291c404
<                             Point location = modelElement.getLocation ();
---
>                             org.eclipse.gmf.gmfgraph.Point location = modelElement.getLocation ();
309c422
<                             myNodeFigure.setLocation (new org.eclipse.draw2d.geometry.Point (bounds.getX (), bounds.getY ()));
---
>                             myNodeFigure.setLocation (new Point (bounds.getX (), bounds.getY ()));
322c435
<                                 Point topLeft;
---
>                                 org.eclipse.gmf.gmfgraph.Point topLeft;
333c446
<                                 Dimension size;
---
>                                 org.eclipse.gmf.gmfgraph.Dimension size;
482,581c595,596
<     protected void createDefaultEditPolicies () {
<         installEditPolicy (EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy ());
<         super.createDefaultEditPolicies ();
<         installEditPolicy (EditPolicyRoles.SEMANTIC_ROLE, new RoundedRectangle2ItemSemanticEditPolicy ());
<         installEditPolicy (EditPolicy.GRAPHICAL_NODE_ROLE, new RoundedRectangle2GraphicalNodeEditPolicy ());
<         installEditPolicy (EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy ());
<         installEditPolicy (EditPolicyRoles.CANONICAL_ROLE, new RoundedRectangle2CanonicalEditPolicy ());
<         installEditPolicy (EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy ());
<     }
< 
<     protected LayoutEditPolicy createLayoutEditPolicy () {
<         XYLayoutEditPolicy lep = new XYLayoutEditPolicy () {
< 
<             protected EditPolicy createChildEditPolicy (EditPart child) {
<                 EditPolicy result = super.createChildEditPolicy (child);
<                 if (result == null) {
<                     return new ResizableShapeEditPolicy ();
<                 }
<                 return result;
<             }
< 
<             protected org.eclipse.draw2d.geometry.Point getLayoutOrigin () {
<                 return ((GraphicalEditPart) getHost ()).getContentPane ().getClientArea ().getLocation ();
<             }
< 
<             protected Rectangle getCurrentConstraintFor (org.eclipse.gef.GraphicalEditPart child) {
<                 Rectangle result = super.getCurrentConstraintFor (child);
<                 if (result == null) {
<                     IFigure fig = child.getFigure ();
<                     result = fig.getBounds ().getCopy ();
<                 }
<                 return result;
<             }
< 
<         }
< 
<         ;
<         return lep;
<     }
< 
<     protected IFigure createNodeShape () {
<         RoundedRectangleFigure figure = new RoundedRectangleFigure ();
<         figure.setUseLocalCoordinates (true);
<         myFigure = figure;
<         RoundedRectangle modelElement = (RoundedRectangle) ((View) getModel ()).getElement ();
<         if (modelElement != null) {
<             {
<                 layoutDataChanged (modelElement.getLayoutData ());
<             } {
<                 layoutChanged (modelElement.getLayout ());
<             } {
<                 myFigure.setOutline (modelElement.isOutline ());
<             } {
<                 myFigure.setFill (modelElement.isFill ());
<             } {
<                 myFigure.setLineWidth (modelElement.getLineWidth ());
<             } {
<                 myFigure.setLineStyle (getLineStyle (modelElement.getLineKind ()));
<             } {
<                 myFigure.setFillXOR (modelElement.isXorFill ());
<             } {
<                 myFigure.setOutlineXOR (modelElement.isXorOutline ());
<             } {
<                 myFigure.setCornerDimensions (new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
<             } {
<                 myFigure.setCornerDimensions (new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (modelElement.getCornerWidth ()), getMapMode ().DPtoLP (modelElement.getCornerHeight ())));
<             }}
<         return primaryShape = figure;
<     }
< 
<     public RoundedRectangleFigure getPrimaryShape () {
<         return (RoundedRectangleFigure) primaryShape;
<     }
< 
<     protected NodeFigure createNodePlate () {
<         return new DefaultSizeNodeFigure (getMapMode ().DPtoLP (0), getMapMode ().DPtoLP (0));
<     }
< 
<     protected NodeFigure createNodeFigure () {
<         NodeFigure figure = createNodePlate ();
<         myNodeFigure = figure;
<         figure.setLayoutManager (new StackLayout ());
<         IFigure shape = createNodeShape ();
<         figure.add (shape);
<         contentPane = setupContentPane (shape);
<         return figure;
<     }
< 
<     protected IFigure setupContentPane (IFigure nodeShape) {
<         if (nodeShape.getLayoutManager () == null) {
<             nodeShape.setLayoutManager (new FreeformLayout () {
< 
<                 public Object getConstraint (IFigure figure) {
<                     Object result = constraints.get (figure);
<                     if (result == null) {
<                         result = new Rectangle (0, 0, - 1, - 1);
<                     }
<                     return result;
<                 }
< 
---
>     protected LayoutManager getFigureLayoutManager () {
>         return myFigure.getLayoutManager ();
584,586c599,600
<             );
<         }
<         return nodeShape;
---
>     protected void setFigureLayoutManager (LayoutManager layoutManager) {
>         myFigure.setLayoutManager (layoutManager);
589,591c603,609
<     public IFigure getContentPane () {
<         if (contentPane != null) {
<             return contentPane;
---
>     protected void refreshBounds () {
>         if (((View) getParent ().getModel ()).getElement () instanceof FigureMarker) {
>             int width = ((Integer) getStructuralFeatureValue (NotationPackage.eINSTANCE.getSize_Width ())).intValue ();
>             int height = ((Integer) getStructuralFeatureValue (NotationPackage.eINSTANCE.getSize_Height ())).intValue ();
>             myNodeFigure.setPreferredSize (new Dimension (width, height));
>         } else {
>             super.refreshBounds ();
593d610
<         return super.getContentPane ();
601c618
<             this.setCornerDimensions (new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (8), getMapMode ().DPtoLP (8)));
---
>             this.setCornerDimensions (new Dimension (getMapMode ().DPtoLP (8), getMapMode ().DPtoLP (8)));
620,637d636
<     protected LayoutManager getFigureLayoutManager () {
<         return myFigure.getLayoutManager ();
<     }
< 
<     protected void setFigureLayoutManager (LayoutManager layoutManager) {
<         myFigure.setLayoutManager (layoutManager);
<     }
< 
<     protected void refreshBounds () {
<         if (((View) getParent ().getModel ()).getElement () instanceof FigureMarker) {
<             int width = ((Integer) getStructuralFeatureValue (NotationPackage.eINSTANCE.getSize_Width ())).intValue ();
<             int height = ((Integer) getStructuralFeatureValue (NotationPackage.eINSTANCE.getSize_Height ())).intValue ();
<             myNodeFigure.setPreferredSize (new org.eclipse.draw2d.geometry.Dimension (width, height));
<         } else {
<             super.refreshBounds ();
<         }
<     }
< 
