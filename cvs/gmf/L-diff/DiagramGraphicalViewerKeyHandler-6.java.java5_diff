28a29,30
> import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
> 
75a78,88
>             case SWT.TAB :
>                 if ((event.stateMask & SWT.SHIFT) != 0) {
>                     if (navigateNextHorizontalSibling (isViewerMirrored () ? PositionConstants.EAST : PositionConstants.WEST)) {
>                         return true;
>                     }
>                 } else {
>                     if (navigateNextHorizontalSibling (isViewerMirrored () ? PositionConstants.WEST : PositionConstants.EAST)) {
>                         return true;
>                     }
>                 }
>                 break;
249a263,321
>     private boolean navigateNextHorizontalSibling (int direction) {
>         GraphicalEditPart epStart = getFocusEditPart ();
>         EditPart next = null;
>         if (epStart instanceof DiagramEditPart) {
>             next = findClosestHorizontalSibling (epStart.getChildren (), new Point (0, 0), PositionConstants.EAST, null);
>         } else {
>             IFigure figure = epStart.getFigure ();
>             Point pStart = figure.getBounds ().getCenter ();
>             figure.translateToAbsolute (pStart);
>             next = findClosestHorizontalSibling (getNavigationSiblings (), pStart, direction, epStart);
>         }
>         if (next == null) return false;
> 
>         getViewer ().select (next);
>         getViewer ().reveal (next);
>         return true;
>     }
> 
>     private GraphicalEditPart findClosestHorizontalSibling (List siblings, Point pStart, int direction, EditPart exclude) {
>         GraphicalEditPart epCurrent;
>         GraphicalEditPart epFinal = null;
>         GraphicalEditPart epCycle = null;
>         IFigure figure;
>         Point pCurrent;
>         int distance = Integer.MAX_VALUE;
>         int xCycle = direction == PositionConstants.EAST ? Integer.MAX_VALUE : 0;
>         Iterator iter = siblings.iterator ();
>         while (iter.hasNext ()) {
>             epCurrent = (GraphicalEditPart) iter.next ();
>             if (epCurrent == exclude || ! epCurrent.isSelectable ()) continue;
> 
>             figure = epCurrent.getFigure ();
>             pCurrent = figure.getBounds ().getCenter ();
>             figure.translateToAbsolute (pCurrent);
>             int dx = pCurrent.x - pStart.x;
>             if ((direction == PositionConstants.EAST && dx > 0) || (direction == PositionConstants.WEST && dx < 0)) {
>                 int abs_dx = Math.abs (dx);
>                 if (abs_dx < distance) {
>                     distance = abs_dx;
>                     epFinal = epCurrent;
>                 }
>             }
>             if (epFinal == null) {
>                 if (direction == PositionConstants.EAST && pCurrent.x < xCycle) {
>                     xCycle = pCurrent.x;
>                     epCycle = epCurrent;
>                 } else if (direction == PositionConstants.WEST && pCurrent.x > xCycle) {
>                     xCycle = pCurrent.x;
>                     epCycle = epCurrent;
>                 }
> 
>             }
>         }
>         if (epFinal == null) {
>             return epCycle;
>         }
>         return epFinal;
>     }
> 
