3c3
< import java.util.Iterator;
---
> import java.util.Collection;
5c5
< import java.util.List;
---
> import java.util.Iterator;
18a19,20
> import org.eclipse.emf.ecore.EStructuralFeature.Setting;
> 
33c35
< import org.eclipse.gmf.runtime.emf.core.internal.util.ReferenceVisitor;
---
> import org.eclipse.gmf.runtime.emf.core.util.CrossReferenceAdapter;
65c67
<             if (command != null) {
---
>             if (command != null && command.canExecute ()) {
91,93c93,112
<         TearDownVisitor visitor = new TearDownVisitor (getElementToDestroy ());
<         visitor.visitReferencers ();
<         visitor.tearDownReferences ();
---
>         CrossReferenceAdapter crossReferencer = CrossReferenceAdapter.getExistingCrossReferenceAdapter (destructee);
>         if (crossReferencer != null) {
>             Collection inverseReferences = crossReferencer.getInverseReferences (destructee);
>             if (inverseReferences != null) {
>                 int size = inverseReferences.size ();
>                 if (size > 0) {
>                     Setting setting;
>                     EReference eRef;
>                     Setting [] settings = (Setting []) inverseReferences.toArray (new Setting [size]);
>                     for (int i = 0;
>                     i < size; ++ i) {
>                         setting = settings [i];
>                         eRef = (EReference) setting.getEStructuralFeature ();
>                         if (eRef.isChangeable () && (eRef.isDerived () == false) && (eRef.isContainment () == false) && (eRef.isContainer () == false)) {
>                             EcoreUtil.remove (setting.getEObject (), eRef, destructee);
>                         }
>                     }
>                 }
>             }
>         }
116,150d134
<     private static class TearDownVisitor extends ReferenceVisitor {
<         private List tearDownActions = null;
< 
<         TearDownVisitor (EObject elementToRemove) {
<             super (elementToRemove);
<         }
< 
<         protected void visitedReferencer (final EReference reference, final EObject referencer) {
<             if (reference.isChangeable () && ! reference.isDerived () && ! reference.isContainer ()) {
<                 if (tearDownActions == null) {
<                     tearDownActions = new java.util.ArrayList ();
<                 }
<                 tearDownActions.add (new Runnable () {
< 
<                     public void run () {
<                         EcoreUtil.remove (referencer, reference, referencedObject);
<                     }
< 
<                 }
< 
<                 );
<             }
<         }
< 
<         void tearDownReferences () {
<             if (tearDownActions != null) {
<                 for (Iterator iter = tearDownActions.iterator ();
<                 iter.hasNext ();) {
<                     ((Runnable) iter.next ()).run ();
<                 }
<             }
<         }
< 
<     }
< 
