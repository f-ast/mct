5c5
< import java.io.UnsupportedEncodingException;
---
> import java.io.Reader;
7c7
< import org.eclipse.core.resources.IFile;
---
> import java.util.ArrayList;
9c9
< import org.eclipse.core.runtime.CoreException;
---
> import lpg.lpgjavaruntime.LexStream;
11c11
< import org.eclipse.gmf.internal.xpand.Activator;
---
> import lpg.lpgjavaruntime.ParseErrorCodes;
23c23
<     public XtendResource parse (final IFile file) {
---
>     public XtendResource parse (final Reader source, final String name) throws IOException, ParserException {
26c26,27
<         final char [] buffer;
---
>         final ArrayList < ParserException.ErrorLocationInfo > errors = new ArrayList < ParserException.ErrorLocationInfo > ();
>         final char [] buffer = new StreamConverter ().toCharArray (source);
28,37c29,34
<             buffer = new StreamConverter ().toCharArray (file);
<         } catch (final CoreException e1) {
<             Activator.log (e1.getStatus ());
<             return null;
<         } catch (UnsupportedEncodingException ex) {
<             Activator.logError (ex);
<             return null;
<         } catch (IOException ex) {
<             Activator.logError (ex);
<             return null;
---
>             scanner = new XtendLexer (buffer, name) {
> 
>                 @Override
>                 public void reportError (int left_loc, int right_loc) {
>                     errors.add (createError (this, left_loc, right_loc));
>                     super.reportError (left_loc, right_loc);
39,40c36,39
<         try {
<             scanner = new XtendLexer (buffer, file.getName ());
---
> 
>             }
> 
>             ;
45,48c44,48
<             final int start = scanner.getStreamIndex () - 1;
<             final int end = start + 1;
<             OawMarkerManager.deleteMarkers (file);
<             OawMarkerManager.addErrorMarker (file, e.getMessage (), start, end);
---
>             if (errors.isEmpty ()) {
>                 throw new IOException ("Unexpected exception while parsing");
>             } else {
>                 throw new ParserException (errors);
>             }
51c51
<             tpl.setFullyQualifiedName (Activator.getQualifiedName (file));
---
>             tpl.setFullyQualifiedName (name);
56a57,68
>     public static ParserException.ErrorLocationInfo createError (LexStream lexStream, int left_loc, int right_loc) {
>         int errorCode = (right_loc >= lexStream.getStreamLength () ? ParseErrorCodes.EOF_CODE : left_loc == right_loc ? ParseErrorCodes.LEX_ERROR_CODE : ParseErrorCodes.INVALID_TOKEN_CODE);
>         int end_loc = (left_loc == right_loc ? right_loc : right_loc - 1);
>         String tokenText = (errorCode == ParseErrorCodes.EOF_CODE ? "End-of-file " : errorCode == ParseErrorCodes.INVALID_TOKEN_CODE ? "\"" + new String (lexStream.getInputChars (), left_loc, right_loc - left_loc) + "\" " : "\"" + lexStream.getCharValue (left_loc) + "\" ");
>         final int startLine = lexStream.getLineNumberOfCharAt (left_loc);
>         final int startColumn = lexStream.getColumnOfCharAt (left_loc);
>         final int endLine = lexStream.getLineNumberOfCharAt (end_loc);
>         final int endColumn = lexStream.getColumnOfCharAt (end_loc);
>         final String message = tokenText + ParseErrorCodes.errorMsgText [errorCode];
>         return new ParserException.ErrorLocationInfo (message, startLine, startColumn, endLine, endColumn);
>     }
> 
