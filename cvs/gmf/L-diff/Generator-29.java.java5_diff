2a3,4
> import java.lang.reflect.InvocationTargetException;
> 
10a13,14
> import org.eclipse.core.runtime.NullProgressMonitor;
> 
54a59,60
> import org.eclipse.gmf.codegen.gmfgen.GenPlugin;
> 
120a127,135
>         if (myDiagram.isValidationEnabled () || myEditorGen.hasAudits ()) {
>             generateValidationProvider ();
>             if (myDiagram.getEditorGen ().getApplication () == null) {
>                 generateMarkerNavigationProvider ();
>             }
>         }
>         if (myDiagram.getEditorGen ().getMetrics () != null) {
>             generateMetricProvider ();
>         }
235a251,262
>     private void generateValidationProvider () throws UnexpectedBehaviourException, InterruptedException {
>         internalGenerateJavaClass (myEmitters.getValidationProviderGenerator (), myDiagram.getProvidersPackageName (), myDiagram.getValidationProviderClassName (), myDiagram);
>     }
> 
>     private void generateMarkerNavigationProvider () throws UnexpectedBehaviourException, InterruptedException {
>         internalGenerateJavaClass (myEmitters.getMarkerNavigationProviderEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getMarkerNavigationProviderClassName (), myDiagram);
>     }
> 
>     private void generateMetricProvider () throws UnexpectedBehaviourException, InterruptedException {
>         internalGenerateJavaClass (myEmitters.getMetricProviderEmitter (), myDiagram.getProvidersPackageName (), myDiagram.getMetricProviderClassName (), myDiagram);
>     }
> 
354a382,387
>     public static String getConstraintProviders (Object plugin) throws UnexpectedBehaviourException, InvocationTargetException, InterruptedException {
>         GenEditorGenerator gen = ((GenPlugin) plugin).getEditorGen ();
>         org.eclipse.gmf.codegen.util.CodegenEmitters emitters = new org.eclipse.gmf.codegen.util.CodegenEmitters (! gen.isDynamicTemplates (), gen.getTemplateDirectory ());
>         return emitters.retrieve (org.eclipse.gmf.codegen.templates.editor.PluginXML.class).generate (new NullProgressMonitor (), new Object [] {plugin});
>     }
> 
