10a11,12
> import java.util.Dictionary;
> 
51a54
>     private static Map bundleToExceptionsSetMap = new HashMap ();
210a214
>         protected String dataForIntialize = NULL;
223,224c227,239
<             string = parseName (string.trim ());
<             string = parseParameterList (string.trim ());
---
>             dataForIntialize = string;
>         }
> 
>         protected boolean isInitialized () {
>             return (dataForIntialize == null);
>         }
> 
>         protected void initialize () {
>             if (isInitialized ()) return;
> 
>             try {
>                 dataForIntialize = parseName (dataForIntialize.trim ());
>                 dataForIntialize = parseParameterList (dataForIntialize.trim ());
268,269c283,284
<             if (string.length () != 0) {
<                 if (string.charAt (0) != '.') throw new IllegalArgumentException ();
---
>                 if (dataForIntialize.length () != 0) {
>                     if (dataForIntialize.charAt (0) != '.') throw new IllegalArgumentException ();
271c286
<                 next = new MethodDescriptor (string.substring (1).trim ());
---
>                     next = new MethodDescriptor (dataForIntialize.substring (1).trim ());
274a290,292
>             } finally {
>                 dataForIntialize = null;
>             }
385,388c403,413
<             string = parsePluginID (string.trim ());
<             string = parseClassName (string.trim ());
<             string = parseName (string.trim ());
<             string = parseParameterList (string.trim ());
---
>             dataForIntialize = string;
>         }
> 
>         public void initialize () {
>             if (isInitialized ()) return;
> 
>             try {
>                 dataForIntialize = parsePluginID (dataForIntialize.trim ());
>                 dataForIntialize = parseClassName (dataForIntialize.trim ());
>                 dataForIntialize = parseName (dataForIntialize.trim ());
>                 dataForIntialize = parseParameterList (dataForIntialize.trim ());
438,439c463,464
<             if (string.length () != 0) {
<                 if (string.charAt (0) != '.') throw new IllegalArgumentException ();
---
>                 if (dataForIntialize.length () != 0) {
>                     if (dataForIntialize.charAt (0) != '.') throw new IllegalArgumentException ();
441c466
<                 setNext (new MethodDescriptor (string.substring (1).trim ()));
---
>                     setNext (new MethodDescriptor (dataForIntialize.substring (1).trim ()));
444a470,472
>             } finally {
>                 dataForIntialize = null;
>             }
633c661
<                     Bundle bundle = getPluginBundle (pluginId);
---
>                     Bundle bundle = basicGetPluginBundle (pluginId);
634a663,664
>                         int state = bundle.getState ();
>                         if (state == org.osgi.framework.Bundle.ACTIVE || isInExceptionList (bundle, className)) {
636a667,670
>                             if (state == org.osgi.framework.Bundle.ACTIVE) {
>                                 bundleToExceptionsSetMap.remove (bundle);
>                             }
>                         }
647a682,713
>     private static boolean isInExceptionList (Bundle bundle, String className) {
>         String packageName = className.substring (0, className.lastIndexOf ('.'));
>         Set exceptionSet = (Set) bundleToExceptionsSetMap.get (bundle);
>         if (exceptionSet == null) {
>             Dictionary dict = bundle.getHeaders ();
>             String value = (String) dict.get ("Eclipse-LazyStart");
>             if (value != null) {
>                 int index = value.indexOf ("exceptions");
>                 if (index != - 1) {
>                     try {
>                         int start = value.indexOf ('"', index + 1);
>                         int end = value.indexOf ('"', start + 1);
>                         String exceptions = value.substring (start + 1, end);
>                         exceptionSet = new HashSet (2);
>                         StringTokenizer tokenizer = new StringTokenizer (exceptions, ",");
>                         while (tokenizer.hasMoreTokens ()) {
>                             exceptionSet.add (tokenizer.nextToken ().trim ());
>                         }
>                     } catch (IndexOutOfBoundsException exception) {
>                         exceptionSet = Collections.EMPTY_SET;
>                     }
>                 } else {
>                     exceptionSet = Collections.EMPTY_SET;
>                 }
>             } else {
>                 exceptionSet = Collections.EMPTY_SET;
>             }
>             bundleToExceptionsSetMap.put (bundle, exceptionSet);
>         }
>         return exceptionSet.contains (packageName);
>     }
> 
649c715
<         Bundle bundle = Platform.getBundle (pluginId);
---
>         Bundle bundle = basicGetPluginBundle (pluginId);
654a721,724
>     private static Bundle basicGetPluginBundle (String pluginId) {
>         return Platform.getBundle (pluginId);
>     }
> 
703a774,776
>             if (! methodDescriptor.isInitialized ()) {
>                 methodDescriptor.initialize ();
>             }
726a800,802
>             if (! methodDescriptor.isInitialized ()) {
>                 methodDescriptor.initialize ();
>             }
