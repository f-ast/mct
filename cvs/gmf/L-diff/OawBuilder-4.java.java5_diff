31,32d30
< import org.eclipse.gmf.internal.xpand.ResourceManager;
< 
44a43,46
> import org.eclipse.gmf.internal.xpand.util.ParserException;
> 
> import org.eclipse.gmf.internal.xpand.util.ParserException.ErrorLocationInfo;
> 
49,99c51,53
<     class OawDeltaVisitor implements IResourceDeltaVisitor {
<         private IProgressMonitor monitor;
< 
<         public OawDeltaVisitor (final IProgressMonitor monitor) {
<             this.monitor = monitor;
<         }
< 
<         public boolean visit (final IResourceDelta delta) throws CoreException {
<             final IResource resource = delta.getResource ();
<             if (resource.isDerived ()) {
<                 return false;
<             }
<             if ((resource instanceof IFile)) {
<                 IFile file = (IFile) resource;
<                 if (! isFileOfInterest (file)) {
<                     return false;
<                 }
<                 switch (delta.getKind ()) {
<                     case IResourceDelta.ADDED :
<                         reloadResource (file);
<                         break;
<                     case IResourceDelta.REMOVED :
<                         handleRemovement (file);
<                         break;
<                     case IResourceDelta.CHANGED :
<                         reloadResource (file);
<                         break;
<                 }
<             }
<             monitor.worked (1);
<             return true;
<         }
< 
<     }
< 
<     private class XpandResourceVisitor implements IResourceVisitor {
<         private IProgressMonitor monitor;
< 
<         public XpandResourceVisitor (final IProgressMonitor monitor) {
<             this.monitor = monitor;
<         }
< 
<         public boolean visit (final IResource resource) {
<             if (! resource.isDerived () && (resource instanceof IFile) && isFileOfInterest ((IFile) resource)) {
<                 reloadResource ((IFile) resource);
<             }
<             monitor.worked (1);
<             return true;
<         }
< 
<     }
---
>     private WorkspaceResourceManager resourceManager;
>     private final Map < XtendResource, IFile > xtendResourcesToAnalyze = new HashMap < XtendResource, IFile > ();
>     private final Map < XpandResource, IFile > xpandResourcesToAnalyze = new HashMap < XpandResource, IFile > ();
109,110c63,67
<     private final Map < XtendResource, IFile > xtendResourcesToAnalyze = new HashMap < XtendResource, IFile > ();
<     private final Map < XpandResource, IFile > xpandResourcesToAnalyze = new HashMap < XpandResource, IFile > ();
---
>     @Override
>     protected void startupOnInitialize () {
>         super.startupOnInitialize ();
>         resourceManager = new WorkspaceResourceManager (getProject ());
>     }
115a73
>                 System.err.println ("First build, kind:" + kind + " and is FULLBUILD:" + (kind == FULL_BUILD));
146,150d103
<     private static void updateMarkers (IFile resource, Set < AnalysationIssue > issues) {
<         OawMarkerManager.deleteMarkers (resource);
<         OawMarkerManager.addMarkers (resource, issues.toArray (new AnalysationIssue [issues.size ()]));
<     }
< 
155a109
>         try {
167a122,128
>         } catch (ParserException ex) {
>             updateMarkers (resource, ex.getParsingErrors ());
>         } catch (Exception ex) {
>             Activator.logError (ex);
>             OawMarkerManager.deleteMarkers (resource);
>             OawMarkerManager.addErrorMarker (resource, ex.getMessage (), - 1, - 1);
>         }
180c141,204
<         delta.accept (new OawDeltaVisitor (monitor));
---
>         delta.accept (new XpandResourceVisitor (monitor));
>     }
> 
>     private WorkspaceResourceManager getResourceManager () {
>         return resourceManager;
>     }
> 
>     private static void updateMarkers (IFile resource, Set < AnalysationIssue > issues) {
>         OawMarkerManager.deleteMarkers (resource);
>         OawMarkerManager.addMarkers (resource, issues.toArray (new AnalysationIssue [issues.size ()]));
>     }
> 
>     private static void updateMarkers (IFile resource, ErrorLocationInfo [] parsingErrors) {
>         OawMarkerManager.deleteMarkers (resource);
>         OawMarkerManager.addMarkers (resource, parsingErrors);
>     }
> 
>     private class XpandResourceVisitor implements IResourceVisitor, IResourceDeltaVisitor {
>         private IProgressMonitor monitor;
> 
>         public XpandResourceVisitor (final IProgressMonitor monitor) {
>             this.monitor = monitor;
>         }
> 
>         public boolean visit (final IResource resource) {
>             if (! resource.isDerived () && (resource instanceof IFile) && isFileOfInterest ((IFile) resource)) {
>                 reloadResource ((IFile) resource);
>             }
>             monitor.worked (1);
>             return true;
>         }
> 
>         public boolean visit (final IResourceDelta delta) throws CoreException {
>             final IResource resource = delta.getResource ();
>             if (resource.isDerived ()) {
>                 return false;
>             }
>             if ((resource instanceof IFile)) {
>                 IFile file = (IFile) resource;
>                 if (! isFileOfInterest (file)) {
>                     return false;
>                 }
>                 switch (delta.getKind ()) {
>                     case IResourceDelta.ADDED :
>                         reloadResource (file);
>                         break;
>                     case IResourceDelta.REMOVED :
>                         handleRemovement (file);
>                         break;
>                     case IResourceDelta.CHANGED :
>                         reloadResource (file);
>                         break;
>                 }
>             } else if (resource instanceof IProject) {
>                 if (delta.getKind () == IResourceDelta.REMOVED) {
>                     System.err.println ("Project removed:" + resource.getName ());
>                 }
>                 if (delta.getKind () == IResourceDelta.OPEN) {
>                     System.err.println ("Project open:" + ((IProject) resource).isOpen ());
>                 }
>             }
> 
>             monitor.worked (1);
>             return true;
183,184d206
<     protected ResourceManager getResourceManager () {
<         return Activator.getResourceManager (getProject ());
