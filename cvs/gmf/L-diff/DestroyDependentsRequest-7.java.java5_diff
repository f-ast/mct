6a7,10
> import java.util.HashMap;
> 
> import java.util.HashSet;
> 
10a15,16
> import java.util.Map;
> 
12a19,20
> import org.eclipse.emf.common.util.TreeIterator;
> 
32a41,42
> import org.eclipse.gmf.runtime.emf.type.core.internal.requests.RequestCacheEntries;
> 
35,36c45,47
<     private final Set dependentElementsToDestroy = new java.util.HashSet ();
<     private final Set immutableViewOfDependents = Collections.unmodifiableSet (dependentElementsToDestroy);
---
>     private EObject ctorElementToDestroy;
>     private Set dependentElementsToDestroy;
>     private Set immutableViewOfDependents;
40d50
<         dependentElementsToDestroy.add (elementToDestroy);
41a52
>         ctorElementToDestroy = elementToDestroy;
49a61,63
>         if (elementToDestroy != null) {
>             internalGetDependentElementsToDestroy ().add (elementToDestroy);
>         }
82a97,99
>             if (result != null) {
>                 setEditingDomain (result);
>             }
87a105,122
>         if (dependentElementsToDestroy == null) {
>             Map cacheMaps = (Map) getParameter (RequestCacheEntries.Cache_Maps);
>             if (cacheMaps != null) {
>                 dependentElementsToDestroy = (Set) cacheMaps.get (RequestCacheEntries.Dependent_Elements);
>             } else {
>                 dependentElementsToDestroy = new HashSet ();
>             }
>             immutableViewOfDependents = Collections.unmodifiableSet (dependentElementsToDestroy);
>             if (ctorElementToDestroy != null) {
>                 dependentElementsToDestroy.add (ctorElementToDestroy);
>                 populateCacheMap (null, ctorElementToDestroy);
>             }
>             if (elementToDestroy != null && (elementToDestroy != ctorElementToDestroy)) {
>                 dependentElementsToDestroy.add (elementToDestroy);
>                 populateCacheMap (null, ctorElementToDestroy);
>             }
>             ctorElementToDestroy = null;
>         }
91a127,129
>         if (immutableViewOfDependents == null) {
>             internalGetDependentElementsToDestroy ();
>         }
104c142,146
<                 IElementType context = ElementTypeRegistry.getInstance ().getElementType (destroy.getEditHelperContext ());
---
>                 Object eHelperContext = destroy.getEditHelperContext ();
>                 IElementType context = populateCacheMap (eHelperContext, dependent);
>                 if (context == null) {
>                     context = ElementTypeRegistry.getInstance ().getElementType (eHelperContext);
>                 }
114a157,191
>     private IElementType populateCacheMap (Object eHelperContext, EObject dependent) {
>         IElementType context = null;
>         Map cacheMaps = (Map) getParameter (RequestCacheEntries.Cache_Maps);
>         if (cacheMaps != null) {
>             Set dependents = internalGetDependentElementsToDestroy ();
>             if (cacheMaps.get (dependent) == null) {
>                 Map parentMap = new HashMap ();
>                 cacheMaps.put (dependent, parentMap);
>                 RequestCacheEntries.initializeEObjCache (dependent, parentMap);
>             }
>             TreeIterator it = dependent.eAllContents ();
>             while (it.hasNext ()) {
>                 EObject eObj = (EObject) it.next ();
>                 dependents.add (eObj);
>                 if (cacheMaps.get (eObj) == null) {
>                     Map map = new HashMap ();
>                     cacheMaps.put (eObj, map);
>                     RequestCacheEntries.initializeEObjCache (eObj, map);
>                 }
>             }
>             if (eHelperContext != null) {
>                 Map eHelperMap = (Map) cacheMaps.get (eHelperContext);
>                 if (eHelperMap == null && (eHelperContext instanceof EObject)) {
>                     eHelperMap = new HashMap ();
>                     cacheMaps.put (eHelperContext, eHelperMap);
>                     RequestCacheEntries.initializeEObjCache ((EObject) eHelperContext, eHelperMap);
>                 }
>                 if (eHelperMap != null) {
>                     context = (IElementType) eHelperMap.get (RequestCacheEntries.Element_Type);
>                 }
>             }
>         }
>         return context;
>     }
> 
138a216,217
>         EObject eObj = getElementToDestroy ();
>         Set set = internalGetDependentElementsToDestroy ();
140c219
<             result = (eObject == getElementToDestroy ()) || internalGetDependentElementsToDestroy ().contains (eObject);
---
>             result = (eObject == eObj) || set.contains (eObject);
