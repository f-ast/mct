14a15,16
> import org.eclipse.gef.RootEditPart;
> 
18a21,28
> import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;
> 
> import org.eclipse.gmf.runtime.diagram.ui.editparts.IDiagramPreferenceSupport;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.PageBreakEditPart;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.figures.PageBreaksFigure;
> 
30a41,42
> import org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScaledGraphics;
> 
42a55,56
> import org.eclipse.swt.SWT;
> 
48a63,64
> import org.eclipse.swt.graphics.Image;
> 
54a71,72
> import org.eclipse.ui.PlatformUI;
> 
60a79,80
>     private boolean printRangePageSelection = false;
>     private int pageFrom = 1, pageTo = 1;
102a123,133
>     public void setPrintRangePageSelection (boolean isPrintRangePageSelected) {
>         this.printRangePageSelection = isPrintRangePageSelected;
>     }
> 
>     public void setPrintRangePages (int pageFrom, int pageTo) {
>         assert pageFrom > 0 : "From page in print range page selection must be bigger than zero.";
>         assert (pageTo > 0 && pageTo >= pageFrom) : "To page in print range page selection must be bigger than zero and from page.";
>         this.pageFrom = pageFrom;
>         this.pageTo = pageTo;
>     }
> 
117d147
<         initialize ();
123c153,159
<             DiagramEditPart dgrmEP = PrintHelper.createDiagramEditPart ((Diagram) obj, preferencesHint);
---
>             DiagramEditPart dgrmEP = PrintHelper.createDiagramEditPart ((Diagram) obj, null);
>             RootEditPart rep = dgrmEP.getRoot ();
>             if (rep instanceof DiagramRootEditPart) this.mm = ((DiagramRootEditPart) rep).getMapMode ();
> 
>             if (rep instanceof IDiagramPreferenceSupport) this.preferencesHint = ((IDiagramPreferenceSupport) rep).getPreferencesHint ();
> 
>             initialize ();
124a161
>             IPreferenceStore pref = null;
126,127c163,166
<             IPreferenceStore fPreferences = ((DiagramGraphicalViewer) dgrmEP.getViewer ()).getWorkspaceViewerPreferenceStore ();
<             doPrintDiagram (dgrmEP, loadedPreferences, fPreferences);
---
>             pref = ((DiagramGraphicalViewer) dgrmEP.getViewer ()).getWorkspaceViewerPreferenceStore ();
>             if (pref.getBoolean (WorkspaceViewerProperties.PREF_USE_WORKSPACE_SETTINGS)) {
>                 if (dgrmEP.getDiagramPreferencesHint ().getPreferenceStore () != null) pref = (IPreferenceStore) dgrmEP.getDiagramPreferencesHint ().getPreferenceStore ();
> 
129c168
<         printer.endJob ();
---
>             doPrintDiagram (dgrmEP, loadedPreferences, pref);
131a171,203
>         printer.endJob ();
>     }
> 
>     private int calculateRowFromPage (int pageNum, int totalNumColumns) {
>         int row = pageNum / totalNumColumns;
>         if (pageNum % totalNumColumns != 0) row ++;
> 
>         return row;
>     }
> 
>     private int calculateColumnFromPage (int pageNum, int totalNumColumns, int cRow) {
>         int col = pageNum - ((cRow - 1) * totalNumColumns);
>         return col;
>     }
> 
>     private org.eclipse.draw2d.geometry.Point getPageCount (DiagramEditPart dgrmEP, Rectangle figureBounds, org.eclipse.draw2d.geometry.Point pageSize, boolean applyUserScale) {
>         RootEditPart rootEditPart = dgrmEP.getRoot ();
>         if (rootEditPart instanceof DiagramRootEditPart) {
>             DiagramRootEditPart diagramRootEditPart = (DiagramRootEditPart) rootEditPart;
>             PageBreakEditPart pageBreakEditPart = diagramRootEditPart.getPageBreakEditPart ();
>             float fNumCols = ((PageBreaksFigure) pageBreakEditPart.getFigure ()).getPageCount ().y * (applyUserScale ? userScale : 1);
>             float fNumRows = ((PageBreaksFigure) pageBreakEditPart.getFigure ()).getPageCount ().x * (applyUserScale ? userScale : 1);
>             int numCols = (int) Math.ceil (fNumCols);
>             int numRows = (int) Math.ceil (fNumRows);
>             return new org.eclipse.draw2d.geometry.Point (numCols, numRows);
>         } else {
>             float fNumRows = (figureBounds.height * (applyUserScale ? userScale : 1)) / pageSize.y;
>             int numRows = (int) Math.ceil (fNumRows);
>             float fNumCols = (figureBounds.width * (applyUserScale ? userScale : 1)) / pageSize.x;
>             int numCols = (int) Math.ceil (fNumCols);
>             return new org.eclipse.draw2d.geometry.Point (numCols, numRows);
>         }
>     }
145c217,220
<         this.gc = new GC (printer);
---
>         int style = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getShell ().getStyle ();
>         if ((style & SWT.MIRRORED) != 0) this.gc = new GC (printer, SWT.RIGHT_TO_LEFT);
>         else this.gc = new GC (printer);
> 
168,170d242
<         translated = new Point (- figureBounds.x, - figureBounds.y);
<         this.graphics.translate (translated.x, translated.y);
<         this.graphics.scale (userScale);
172,175c244,245
<         float fNumRows = (figureBounds.height * userScale) / pageSize.y;
<         int numRows = (int) Math.ceil (fNumRows);
<         float fNumCols = (figureBounds.width * userScale) / pageSize.x;
<         int numCols = (int) Math.ceil (fNumCols);
---
>         translated = new Point ((int) (- figureBounds.x * userScale), (int) (- figureBounds.y * userScale));
>         int numRows = 0, numCols = 0;
178c248,249
<         GC gc_ = new GC (Display.getDefault ());
---
>         GC gc_ = new GC (Display.getDefault (), this.gc.getStyle ());
>         gc_.setAntialias (this.gc.getAntialias ());
180a252,261
>         org.eclipse.draw2d.geometry.Point pageCount = getPageCount (dgrmEP, figureBounds, pageSize, true);
>         numCols = pageCount.x;
>         numRows = pageCount.y;
>         int row = 1, col = 1, finalRow = 0, finalColumn = 0;
>         if (this.printRangePageSelection) {
>             row = calculateRowFromPage (this.pageFrom, numCols);
>             col = calculateColumnFromPage (this.pageFrom, numCols, row);
>             finalRow = calculateRowFromPage (this.pageTo, numCols);
>             finalColumn = calculateColumnFromPage (this.pageTo, numCols, finalRow);
>         }
182,185c263,264
<             for (int row = 1;
<             row <= numRows; row ++) {
<                 for (int col = 1;
<                 col <= numCols; col ++) {
---
>             for (; row <= numRows; row ++) {
>                 for (; col <= numCols; col ++) {
188a268,269
>                     if (row == finalRow && col == finalColumn && this.printRangePageSelection == true) break;
> 
189a271,273
>                 if (row == finalRow && col == finalColumn && this.printRangePageSelection == true) break;
> 
>                 col = 1;
212a297
>         boolean rtlEnabled = ((this.gc.getStyle () & SWT.MIRRORED) != 0);
213a299,308
>         Image image = new Image (Display.getDefault (), getMapMode ().LPtoDP (pageSize.x), getMapMode ().LPtoDP (pageSize.y));
>         GC imgGC = new GC (image, (rtlEnabled) ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT);
>         imgGC.setXORMode (false);
>         SWTGraphics sg = new SWTGraphics (imgGC);
>         ScaledGraphics g1 = new ScaledGraphics (sg);
>         MapModeGraphics mmg = createMapModeGraphics (g1);
>         imgGC.setFont (mmg.getFont ());
>         mmg.translate (translated.x, translated.y);
>         mmg.scale (userScale);
>         mmg.pushState ();
219a315,318
>         if (rtlEnabled) {
>             scaledTranslateX += (margins.left * (colIndex - 1)) + (margins.right * (colIndex));
>             scaledTranslateY += ((margins.top * rowIndex) + (margins.bottom * (rowIndex - 1)));
>         } else {
222c321,326
<         drawHeaderAndFooter (gc_, dgrmEP, figureBounds, font, rowIndex, colIndex);
---
>         }
>         mmg.translate (scaledTranslateX, scaledTranslateY);
>         Rectangle clip = new Rectangle ((scaledWidth - margins.left - margins.right) * (colIndex - 1) + figureBounds.x, (scaledHeight - margins.bottom - margins.top) * (rowIndex - 1) + figureBounds.y, scaledWidth - margins.right - margins.left, scaledHeight - margins.top - margins.bottom);
>         mmg.clipRect (clip);
>         dgrmEP.getLayer (LayerConstants.PRINTABLE_LAYERS).paint (mmg);
>         mmg.popState ();
224,227c328
<         this.graphics.translate (scaledTranslateX, scaledTranslateY);
<         Rectangle r = new Rectangle ((scaledWidth - margins.left - margins.right) * (colIndex - 1) + figureBounds.x, (scaledHeight - margins.top - margins.bottom) * (rowIndex - 1) + figureBounds.y, scaledWidth - margins.left - margins.right, scaledHeight - margins.top - margins.bottom);
<         this.graphics.clipRect (r);
<         dgrmEP.getLayer (LayerConstants.PRINTABLE_LAYERS).paint (this.graphics);
---
>         this.graphics.drawImage (image, 0, 0);
228a330,331
>         drawHeaderAndFooter (gc_, dgrmEP, figureBounds, font, rowIndex, colIndex);
>         disposeImageVars (imgGC, image, sg, g1, mmg);
235,242c338,346
<         Rectangle translate = new Rectangle (Math.min (0, figureBounds.x), Math.min (0, figureBounds.y), Math.max (pageBounds.x, figureBounds.width), Math.max (pageBounds.y, figureBounds.height));
<         org.eclipse.draw2d.geometry.Point pageSize = PageInfoHelper.getPageSize (fPreferences, true, getMapMode ());
<         int offsetX = this.printer.getBounds ().width - this.printer.getClientArea ().width;
<         int offsetY = this.printer.getBounds ().height - this.printer.getClientArea ().height;
<         pageSize.x -= offsetX * columns;
<         pageSize.y -= offsetY * rows;
<         float vScale = ((float) (this.rows * pageSize.y)) / translate.height;
<         float hScale = ((float) (this.columns * pageSize.x)) / translate.width;
---
>         org.eclipse.draw2d.geometry.Point pageSize = PageInfoHelper.getPageSize (fPreferences, false, getMapMode ());
>         org.eclipse.draw2d.geometry.Point pageCount = getPageCount (dgrmEP, figureBounds, pageSize, false);
>         int numCols = pageCount.x;
>         int numRows = pageCount.y;
>         Rectangle translate = new Rectangle (Math.min (0, figureBounds.x), Math.min (0, figureBounds.y), Math.max (pageBounds.x, numCols * pageSize.x), Math.max (pageBounds.y, numRows * pageSize.y));
>         int totalHeight = (this.rows * pageSize.y);
>         int totalWidth = (this.columns * pageSize.x);
>         float vScale = ((float) totalHeight) / ((float) (numRows * pageSize.y));
>         float hScale = ((float) totalWidth) / ((float) (numCols * pageSize.x));
245,246d348
<         this.graphics.translate (translated.x, translated.y);
<         this.graphics.scale (this.userScale);
251a354,360
>         int row = 1, col = 1, finalRow = 0, finalColumn = 0;
>         if (this.printRangePageSelection) {
>             row = calculateRowFromPage (this.pageFrom, this.columns);
>             col = calculateColumnFromPage (this.pageFrom, this.columns, row);
>             finalRow = calculateRowFromPage (this.pageTo, this.columns);
>             finalColumn = calculateColumnFromPage (this.pageTo, this.columns, finalRow);
>         }
253,256c362,363
<             for (int row = 1;
<             row <= rows; row ++) {
<                 for (int col = 1;
<                 col <= columns; col ++) {
---
>             for (; row <= rows; row ++) {
>                 for (; col <= columns; col ++) {
259a367,368
>                     if (row == finalRow && col == finalColumn && this.printRangePageSelection == true) break;
> 
260a370,372
>                 if (row == finalRow && col == finalColumn && this.printRangePageSelection == true) break;
> 
>                 col = 1;
277,287c389,411
<         if (graphics != null) {
<             graphics.dispose ();
<             graphics = null;
<         }
<         if (printerGraphics != null) {
<             printerGraphics.dispose ();
<             printerGraphics = null;
<         }
<         if (swtGraphics != null) {
<             swtGraphics.dispose ();
<             swtGraphics = null;
---
>         if (this.graphics != null) {
>             try {
>                 this.graphics.dispose ();
>             } catch (NullPointerException e) {
>             } finally {
>                 this.graphics = null;
>             }
>         }
>         if (this.printerGraphics != null) {
>             try {
>                 this.printerGraphics.dispose ();
>             } catch (NullPointerException e) {
>             } finally {
>                 this.printerGraphics = null;
>             }
>         }
>         if (this.swtGraphics != null) {
>             try {
>                 this.swtGraphics.dispose ();
>             } catch (NullPointerException e) {
>             } finally {
>                 this.swtGraphics = null;
>             }
289a414
>             try {
290a416,417
>             } catch (NullPointerException e) {
>             } finally {
293a421,465
>         printerOffset = null;
>     }
> 
>     private void disposeImageVars (GC imgGC, Image image, SWTGraphics sg, ScaledGraphics g1, MapModeGraphics mmg) {
>         if (mmg != null) {
>             try {
>                 mmg.dispose ();
>             } catch (NullPointerException e) {
>             } finally {
>                 mmg = null;
>             }
>         }
>         if (g1 != null) {
>             try {
>                 g1.dispose ();
>             } catch (NullPointerException e) {
>             } finally {
>                 g1 = null;
>             }
>         }
>         if (sg != null) {
>             try {
>                 sg.dispose ();
>             } catch (NullPointerException e) {
>             } finally {
>                 sg = null;
>             }
>         }
>         if (imgGC != null) {
>             try {
>                 imgGC.dispose ();
>             } catch (NullPointerException e) {
>             } finally {
>                 imgGC = null;
>             }
>         }
>         if (image != null) {
>             try {
>                 image.dispose ();
>             } catch (NullPointerException e) {
>             } finally {
>                 image = null;
>             }
>         }
>     }
