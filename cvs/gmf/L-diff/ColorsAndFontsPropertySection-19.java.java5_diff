24a25,26
> import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
> 
52a55,58
> import org.eclipse.swt.accessibility.AccessibleAdapter;
> 
> import org.eclipse.swt.accessibility.AccessibleEvent;
> 
173a180,188
>         fontBoldButton.getAccessible ().addAccessibleListener (new AccessibleAdapter () {
> 
>             public void getName (AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontStyle_Bold;
>             }
> 
>         }
> 
>         );
175a191,199
>         fontItalicButton.getAccessible ().addAccessibleListener (new AccessibleAdapter () {
> 
>             public void getName (AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontStyle_Italic;
>             }
> 
>         }
> 
>         );
196a221,229
>         fontColorButton.getAccessible ().addAccessibleListener (new AccessibleAdapter () {
> 
>             public void getName (AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FontColor;
>             }
> 
>         }
> 
>         );
208a242,250
>         lineColorButton.getAccessible ().addAccessibleListener (new AccessibleAdapter () {
> 
>             public void getName (AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_LineColor;
>             }
> 
>         }
> 
>         );
219a262,270
>         fillColorButton.getAccessible ().addAccessibleListener (new AccessibleAdapter () {
> 
>             public void getName (AccessibleEvent e) {
>                 e.result = DiagramUIMessages.PropertyDescriptorFactory_FillColor;
>             }
> 
>         }
> 
>         );
245c296,300
<         ColorPalettePopup popup = new ColorPalettePopup (button.getParent ().getShell (), preferenceId, IDialogConstants.BUTTON_BAR_HEIGHT);
---
>         return changeColor (event, button, propertyId, commandName, imageDescriptor);
>     }
> 
>     protected RGB changeColor (SelectionEvent event, Button button, final String propertyId, String commandName, ImageDescriptor imageDescriptor) {
>         ColorPalettePopup popup = new ColorPalettePopup (button.getParent ().getShell (), IDialogConstants.BUTTON_BAR_HEIGHT);
249,251c304,308
<         if (popup.getSelectedColor () != null) {
<             final RGB color = popup.getSelectedColor ();
<             if (color != null) {
---
>         if (popup.getSelectedColor () == null && ! popup.useDefaultColor ()) {
>             return null;
>         }
>         final RGB selectedColor = popup.getSelectedColor ();
>         final EStructuralFeature feature = (EStructuralFeature) PackageUtil.getElement (propertyId);
253a311
>         RGB colorToReturn = selectedColor;
255a314,325
>             RGB color = selectedColor;
>             if (popup.useDefaultColor ()) {
>                 Object preferredValue = ep.getPreferredValue (feature);
>                 if (preferredValue instanceof Integer) {
>                     color = FigureUtilities.integerToRGB ((Integer) preferredValue);
>                 }
>             }
>             if (colorToReturn == null) {
>                 colorToReturn = color;
>             }
>             if (color != null) {
>                 final RGB finalColor = color;
260c330
<                             if (element instanceof EStructuralFeature) ep.setStructuralFeatureValue ((EStructuralFeature) PackageUtil.getElement (propertyId), FigureUtilities.RGBToInteger (color));
---
>                         if (element instanceof EStructuralFeature) ep.setStructuralFeatureValue (feature, FigureUtilities.RGBToInteger (finalColor));
273,275c343
<             return color;
<         }
<         return null;
---
>         return colorToReturn;
312d379
<         getSingleInput ().refresh ();
