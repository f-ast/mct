3c3
< import java.util.ArrayList;
---
> import java.util.HashMap;
5c5
< import java.util.Collection;
---
> import java.util.Map;
7c7
< import java.util.Collections;
---
> import org.eclipse.core.resources.IContainer;
9c9
< import java.util.HashMap;
---
> import org.eclipse.core.resources.IFile;
11c11
< import java.util.Iterator;
---
> import org.eclipse.core.resources.IFolder;
13c13
< import java.util.List;
---
> import org.eclipse.core.resources.IProject;
15c15
< import java.util.Map;
---
> import org.eclipse.core.resources.IResource;
17c17
< import java.util.MissingResourceException;
---
> import org.eclipse.core.resources.ResourcesPlugin;
19c19
< import java.util.StringTokenizer;
---
> import org.eclipse.core.runtime.IProgressMonitor;
21c21
< import org.eclipse.emf.common.util.URI;
---
> import org.eclipse.core.runtime.Path;
23c23
< import org.eclipse.emf.ecore.EClass;
---
> import org.eclipse.emf.common.util.URI;
25c25
< import org.eclipse.emf.ecore.EClassifier;
---
> import org.eclipse.emf.ecore.EObject;
33,34d32
< import org.eclipse.emf.ecore.EObject;
< 
39,49c37
< import org.eclipse.core.resources.IContainer;
< 
< import org.eclipse.core.resources.IFile;
< 
< import org.eclipse.core.resources.IFolder;
< 
< import org.eclipse.core.resources.IProject;
< 
< import org.eclipse.core.resources.IResource;
< 
< import org.eclipse.core.resources.ResourcesPlugin;
---
> import org.eclipse.gmf.tooldef.GMFToolPackage;
51c39
< import org.eclipse.core.runtime.IProgressMonitor;
---
> import org.eclipse.gmf.tooldef.provider.GMFToolEditPlugin;
55,61c43
< import org.eclipse.jface.viewers.IStructuredSelection;
< 
< import org.eclipse.jface.wizard.Wizard;
< 
< import org.eclipse.jface.wizard.WizardPage;
< 
< import org.eclipse.swt.SWT;
---
> import org.eclipse.jface.viewers.ISelection;
63c45
< import org.eclipse.swt.events.ModifyListener;
---
> import org.eclipse.jface.viewers.IStructuredSelection;
65c47
< import org.eclipse.swt.events.ModifyEvent;
---
> import org.eclipse.jface.viewers.StructuredSelection;
67c49
< import org.eclipse.swt.layout.GridData;
---
> import org.eclipse.jface.wizard.Wizard;
69c51
< import org.eclipse.swt.layout.GridLayout;
---
> import org.eclipse.ui.INewWizard;
71c53
< import org.eclipse.swt.widgets.Combo;
---
> import org.eclipse.ui.IWorkbench;
73c55
< import org.eclipse.swt.widgets.Composite;
---
> import org.eclipse.ui.IWorkbenchPage;
75c57
< import org.eclipse.swt.widgets.Label;
---
> import org.eclipse.ui.IWorkbenchPart;
77c59
< import org.eclipse.ui.INewWizard;
---
> import org.eclipse.ui.IWorkbenchWindow;
79c61
< import org.eclipse.ui.IWorkbench;
---
> import org.eclipse.ui.PartInitException;
89,108d70
< import org.eclipse.gmf.tooldef.GMFToolFactory;
< 
< import org.eclipse.gmf.tooldef.GMFToolPackage;
< 
< import org.eclipse.gmf.tooldef.provider.GMFToolEditPlugin;
< 
< import org.eclipse.core.runtime.Path;
< 
< import org.eclipse.jface.viewers.ISelection;
< 
< import org.eclipse.jface.viewers.StructuredSelection;
< 
< import org.eclipse.ui.IWorkbenchPage;
< 
< import org.eclipse.ui.IWorkbenchPart;
< 
< import org.eclipse.ui.IWorkbenchWindow;
< 
< import org.eclipse.ui.PartInitException;
< 
110,111d71
<     protected GMFToolPackage gmfToolPackage = GMFToolPackage.eINSTANCE;
<     protected GMFToolFactory gmfToolFactory = gmfToolPackage.getGMFToolFactory ();
113d72
<     protected GMFToolModelWizardInitialObjectCreationPage initialObjectCreationPage;
116d74
<     protected List initialObjectNames;
125,142d82
<     protected Collection getInitialObjectNames () {
<         if (initialObjectNames == null) {
<             initialObjectNames = new ArrayList ();
<             for (Iterator classifiers = gmfToolPackage.getEClassifiers ().iterator ();
<             classifiers.hasNext ();) {
<                 EClassifier eClassifier = (EClassifier) classifiers.next ();
<                 if (eClassifier instanceof EClass) {
<                     EClass eClass = (EClass) eClassifier;
<                     if (! eClass.isAbstract ()) {
<                         initialObjectNames.add (eClass.getName ());
<                     }
<                 }
<             }
<             Collections.sort (initialObjectNames, java.text.Collator.getInstance ());
<         }
<         return initialObjectNames;
<     }
< 
144c84
<         return gmfToolFactory.createToolRegistry ();
---
>         return GMFToolPackage.eINSTANCE.getGMFToolFactory ().createToolRegistry ();
149a90,98
>             createModelFile (modelFile);
>             return openEditor (modelFile);
>         } catch (Exception exception) {
>             GMFToolEditPlugin.INSTANCE.log (exception);
>             return false;
>         }
>     }
> 
>     protected void createModelFile (final IFile modelFile) throws Exception {
174a124,126
>     }
> 
>     protected boolean openEditor (IFile modelFile) {
197,200d148
<         } catch (Exception exception) {
<             GMFToolEditPlugin.INSTANCE.log (exception);
<             return false;
<         }
230,357d177
<     public class GMFToolModelWizardInitialObjectCreationPage extends WizardPage {
<         protected Combo initialObjectField;
<         protected List encodings;
<         protected Combo encodingField;
< 
<         public GMFToolModelWizardInitialObjectCreationPage (String pageId) {
<             super (pageId);
<         }
< 
<         public void createControl (Composite parent) {
<             Composite composite = new Composite (parent, SWT.NONE);
<             {
<                 GridLayout layout = new GridLayout ();
<                 layout.numColumns = 1;
<                 layout.verticalSpacing = 12;
<                 composite.setLayout (layout);
<                 GridData data = new GridData ();
<                 data.verticalAlignment = GridData.FILL;
<                 data.grabExcessVerticalSpace = true;
<                 data.horizontalAlignment = GridData.FILL;
<                 composite.setLayoutData (data);
<             } Label containerLabel = new Label (composite, SWT.LEFT);
<             {
<                 containerLabel.setText (GMFToolEditPlugin.INSTANCE.getString ("_UI_ModelObject"));
<                 GridData data = new GridData ();
<                 data.horizontalAlignment = GridData.FILL;
<                 containerLabel.setLayoutData (data);
<             } initialObjectField = new Combo (composite, SWT.BORDER);
<             {
<                 GridData data = new GridData ();
<                 data.horizontalAlignment = GridData.FILL;
<                 data.grabExcessHorizontalSpace = true;
<                 initialObjectField.setLayoutData (data);
<             } for (Iterator i = getInitialObjectNames ().iterator ();
<             i.hasNext ();) {
<                 initialObjectField.add (getLabel ((String) i.next ()));
<             }
<             if (initialObjectField.getItemCount () == 1) {
<                 initialObjectField.select (0);
<             }
<             initialObjectField.addModifyListener (validator);
<             Label encodingLabel = new Label (composite, SWT.LEFT);
<             {
<                 encodingLabel.setText (GMFToolEditPlugin.INSTANCE.getString ("_UI_XMLEncoding"));
<                 GridData data = new GridData ();
<                 data.horizontalAlignment = GridData.FILL;
<                 encodingLabel.setLayoutData (data);
<             } encodingField = new Combo (composite, SWT.BORDER);
<             {
<                 GridData data = new GridData ();
<                 data.horizontalAlignment = GridData.FILL;
<                 data.grabExcessHorizontalSpace = true;
<                 encodingField.setLayoutData (data);
<             } for (Iterator i = getEncodings ().iterator ();
<             i.hasNext ();) {
<                 encodingField.add ((String) i.next ());
<             }
<             encodingField.select (0);
<             encodingField.addModifyListener (validator);
<             setPageComplete (validatePage ());
<             setControl (composite);
<         }
< 
<         protected ModifyListener validator = new ModifyListener () {
< 
<             public void modifyText (ModifyEvent e) {
<                 setPageComplete (validatePage ());
<             }
< 
<         }
< 
<         ;
< 
<         protected boolean validatePage () {
<             return getInitialObjectName () != null && getEncodings ().contains (encodingField.getText ());
<         }
< 
<         public void setVisible (boolean visible) {
<             super.setVisible (visible);
<             if (visible) {
<                 if (initialObjectField.getItemCount () == 1) {
<                     initialObjectField.clearSelection ();
<                     encodingField.setFocus ();
<                 } else {
<                     encodingField.clearSelection ();
<                     initialObjectField.setFocus ();
<                 }
<             }
<         }
< 
<         public String getInitialObjectName () {
<             String label = initialObjectField.getText ();
<             for (Iterator i = getInitialObjectNames ().iterator ();
<             i.hasNext ();) {
<                 String name = (String) i.next ();
<                 if (getLabel (name).equals (label)) {
<                     return name;
<                 }
<             }
<             return null;
<         }
< 
<         public String getEncoding () {
<             return encodingField.getText ();
<         }
< 
<         protected String getLabel (String typeName) {
<             try {
<                 return GMFToolEditPlugin.INSTANCE.getString ("_UI_" + typeName + "_type");
<             } catch (MissingResourceException mre) {
<                 GMFToolEditPlugin.INSTANCE.log (mre);
<             }
<             return typeName;
<         }
< 
<         protected Collection getEncodings () {
<             if (encodings == null) {
<                 encodings = new ArrayList ();
<                 for (StringTokenizer stringTokenizer = new StringTokenizer (GMFToolEditPlugin.INSTANCE.getString ("_UI_XMLEncodingChoices"));
<                 stringTokenizer.hasMoreTokens ();) {
<                     encodings.add (stringTokenizer.nextToken ());
<                 }
<             }
<             return encodings;
<         }
< 
<     }
< 
