8a9,10
> import java.util.EventObject;
> 
16a19,34
> import org.eclipse.core.commands.ExecutionException;
> 
> import org.eclipse.core.commands.operations.IOperationHistory;
> 
> import org.eclipse.core.commands.operations.IOperationHistoryListener;
> 
> import org.eclipse.core.commands.operations.IUndoContext;
> 
> import org.eclipse.core.commands.operations.IUndoableOperation;
> 
> import org.eclipse.core.commands.operations.ObjectUndoContext;
> 
> import org.eclipse.core.commands.operations.OperationHistoryEvent;
> 
> import org.eclipse.core.commands.operations.OperationHistoryFactory;
> 
18a37,38
> import org.eclipse.core.runtime.NullProgressMonitor;
> 
27,30d46
< import org.eclipse.gmf.runtime.common.core.command.CommandManager;
< 
< import org.eclipse.gmf.runtime.common.core.command.CommandManagerChangeEvent;
< 
37c53
< import org.eclipse.gmf.runtime.common.core.command.ICommandManagerChangeListener;
---
> import org.eclipse.gmf.runtime.common.core.command.ICompositeCommand;
39c55,57
< import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
---
> import org.eclipse.gmf.runtime.common.core.util.Log;
> 
> import org.eclipse.gmf.runtime.common.core.util.Trace;
43c61,67
< import org.eclipse.gmf.runtime.diagram.ui.commands.XtoolsProxyCommand;
---
> import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
45c69
< import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;
---
> import org.eclipse.gmf.runtime.diagram.ui.internal.tools.ConnectionHandleTool;
53c77,91
<     private CommandManager commandManager;
---
>     private IOperationHistory delegate;
>     private IUndoContext undoContext;
>     private final class HistoryEventObject extends EventObject {
>         private final OperationHistoryEvent event;
> 
>         private HistoryEventObject (OperationHistoryEvent event) {
>             super (event.getHistory ());
>             this.event = event;
>         }
> 
>         public OperationHistoryEvent getOperationHistoryEvent () {
>             return event;
>         }
> 
>     }
62,65c100
<         ICommandManagerChangeListener cmcl = new ICommandManagerChangeListener () {
< 
<             public void commandManagerChanged (CommandManagerChangeEvent event) {
<                 if (csl != null) csl.commandStackChanged (event);
---
>         IOperationHistoryListener cmcl = new IOperationHistoryListener () {
66a102,105
>             public void historyNotification (OperationHistoryEvent event) {
>                 if (csl != null) {
>                     csl.commandStackChanged (new HistoryEventObject (event));
>                 }
73c112
<         getCommandManager ().addCommandManagerChangeListener (cmcl);
---
>         getOperationHistory ().addOperationHistoryListener (cmcl);
77c116
<         return getCommandManager ().canRedo ();
---
>         return getOperationHistory ().canRedo (getUndoContext ());
81c120
<         return getCommandManager ().canUndo ();
---
>         return getOperationHistory ().canUndo (getUndoContext ());
104c143,147
<                 getCommandManager ().execute (command, progressMonitor);
---
>                 command.addContext (getUndoContext ());
>                 getOperationHistory ().execute (command, progressMonitor, null);
>             } catch (ExecutionException e) {
>                 Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "execute", e);
>                 Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.COMMAND_FAILURE, "execute", e);
109,110c152,160
<         } else getCommandManager ().execute (command);
< 
---
>         } else {
>             try {
>                 command.addContext (getUndoContext ());
>                 getOperationHistory ().execute (command, new NullProgressMonitor (), null);
>             } catch (ExecutionException e) {
>                 Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "execute", e);
>                 Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.COMMAND_FAILURE, "execute", e);
>             }
>         }
129c179
<             CompositeCommand cc = new CompositeCommand (command.getLabel ());
---
>             CompositeCommand composite = new CompositeCommand (command.getLabel ());
133c183
<                 cc.compose (getICommand ((Command) subCommands [i]));
---
>                 composite.compose (getICommand ((Command) subCommands [i]));
135c185
<             return cc.unwrap ();
---
>             return composite.reduce ();
144,149c194,207
<         if (command instanceof CompositeModelCommand) {
<             CompositeModelCommand cc = new CompositeModelCommand (command.getLabel ());
<             List subCommands = ((CompositeCommand) command).getCommands ();
<             for (int i = 0;
<             i < subCommands.size (); i ++) {
<                 cc.compose (getICommand ((ICommand) subCommands.get (i)));
---
>         ICommand result = command;
>         if (command instanceof ICompositeCommand) {
>             List processedCommands = new ArrayList ();
>             ICompositeCommand composite = (ICompositeCommand) command;
>             if (! composite.isEmpty ()) {
>                 for (Iterator i = composite.iterator ();
>                 i.hasNext ();) {
>                     IUndoableOperation nextOperation = (IUndoableOperation) i.next ();
>                     i.remove ();
>                     if (nextOperation instanceof ICommand) {
>                         ICommand nextCommand = (ICommand) nextOperation;
>                         processedCommands.add (getICommand (nextCommand));
>                     } else {
>                         processedCommands.add (nextOperation);
151d208
<             return cc.unwrap ();
153,158c210,212
<         if (command instanceof CompositeCommand) {
<             CompositeCommand cc = new CompositeCommand (command.getLabel ());
<             List subCommands = ((CompositeCommand) command).getCommands ();
<             for (int i = 0;
<             i < subCommands.size (); i ++) {
<                 cc.compose (getICommand ((ICommand) subCommands.get (i)));
---
>                 for (Iterator i = processedCommands.iterator ();
>                 i.hasNext ();) {
>                     composite.add ((IUndoableOperation) i.next ());
160c214
<             return cc.unwrap ();
---
>                 result = composite.reduce ();
162,163d215
<         if (command instanceof XtoolsProxyCommand) {
<             return getICommand (((XtoolsProxyCommand) command).getCommand ());
168c220
<         return command;
---
>         return result;
172c224,230
<         getCommandManager ().clear ();
---
>         getOperationHistory ().dispose (getUndoContext (), true, true, false);
>         super.flush ();
>     }
> 
>     public void dispose () {
>         super.dispose ();
>         flush ();
180c238
<         if (getCommandManager ().canRedo ()) {
---
>         if (getOperationHistory ().canRedo (getUndoContext ())) {
185c243,244
<             emptyCmd.setLabel (getCommandManager ().getRedoLabel ());
---
>             IUndoableOperation redo = getOperationHistory ().getRedoOperation (getUndoContext ());
>             emptyCmd.setLabel (redo.getLabel ());
192c251
<         if (getCommandManager ().canUndo ()) {
---
>         if (getOperationHistory ().canUndo (getUndoContext ())) {
197c256,257
<             emptyCmd.setLabel (getCommandManager ().getUndoLabel ());
---
>             IUndoableOperation undo = getOperationHistory ().getUndoOperation (getUndoContext ());
>             emptyCmd.setLabel (undo.getLabel ());
205c265,270
<         getCommandManager ().redo ();
---
>         try {
>             getOperationHistory ().redo (getUndoContext (), new NullProgressMonitor (), null);
>         } catch (ExecutionException e) {
>             Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, ConnectionHandleTool.class, "redo", e);
>             Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.COMMAND_FAILURE, "redo", e);
>         }
211,213c276,279
<             ICommandManagerChangeListener cmcl = (ICommandManagerChangeListener) stackToManager.get (csl);
<             if (cmcl != null) getCommandManager ().removeCommandManagerChangeListener (cmcl);
< 
---
>             IOperationHistoryListener historyListener = (IOperationHistoryListener) stackToManager.get (csl);
>             if (historyListener != null) {
>                 getOperationHistory ().removeOperationHistoryListener (historyListener);
>             }
220c286,291
<         getCommandManager ().undo ();
---
>         try {
>             getOperationHistory ().undo (getUndoContext (), new NullProgressMonitor (), null);
>         } catch (ExecutionException e) {
>             Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, ConnectionHandleTool.class, "undo", e);
>             Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.COMMAND_FAILURE, "undo", e);
>         }
227,230c298,302
<     protected CommandManager getCommandManager () {
<         if (commandManager == null) return CommandManager.getDefault ();
< 
<         return commandManager;
---
>     protected IOperationHistory getOperationHistory () {
>         if (delegate == null) {
>             delegate = OperationHistoryFactory.getOperationHistory ();
>         }
>         return delegate;
233,234c305,306
<     protected void setCommandManager (CommandManager commandManager) {
<         this.commandManager = commandManager;
---
>     public void setOperationHistory (IOperationHistory operationHistory) {
>         this.delegate = operationHistory;
256,259d327
<     public static Collection getReturnValues (XtoolsProxyCommand cmd) {
<         return getReturnValues (cmd.getCommand ());
<     }
< 
265,266c333,334
<         if (cmd instanceof CompositeCommand) {
<             CompositeCommand cc = (CompositeCommand) cmd;
---
>         if (cmd instanceof ICompositeCommand) {
>             ICompositeCommand cc = (ICompositeCommand) cmd;
268c336
<             for (Iterator i = cc.getCommands ().iterator ();
---
>             for (Iterator i = cc.iterator ();
272,273d339
<         } else if (cmd instanceof XtoolsProxyCommand) {
<             return getReturnValues ((XtoolsProxyCommand) cmd);
289a356,366
>     public IUndoContext getUndoContext () {
>         if (undoContext == null) {
>             undoContext = new ObjectUndoContext (this);
>         }
>         return undoContext;
>     }
> 
>     public void setUndoContext (IUndoContext undoContext) {
>         this.undoContext = undoContext;
>     }
> 
