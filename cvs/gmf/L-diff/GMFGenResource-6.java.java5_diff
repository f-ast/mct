2a3,8
> import java.io.InputStream;
> 
> import java.util.LinkedList;
> 
> import java.util.Map;
> 
4a11,12
> import org.eclipse.emf.ecore.EObject;
> 
6a15,20
> import org.eclipse.emf.ecore.xmi.XMLResource;
> 
> import org.eclipse.emf.ecore.xmi.impl.BasicResourceHandler;
> 
> import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
> 
16c30,62
<             return new GMFGenResource (uri);
---
>             GMFGenResource r = new GMFGenResource (uri);
>             r.getDefaultLoadOptions ().put (XMLResource.OPTION_RESOURCE_HANDLER, new X ());
>             return r;
>         }
> 
>     }
> 
>     public static class Factory2 extends ToolingResourceFactory {
> 
>         @Override
>         public Resource createResource (URI uri) {
>             ToolResource r = (ToolResource) super.createResource (uri);
>             r.getDefaultLoadOptions ().put (XMLResource.OPTION_RESOURCE_HANDLER, new X ());
>             return r;
>         }
> 
>     }
> 
>     private static class X extends BasicResourceHandler {
> 
>         @Override
>         public void postLoad (XMLResource resource, InputStream inputStream, Map < ?, ? > options) {
>             LinkedList < EObject > migrated = new LinkedList < EObject > ();
>             for (EObject o : resource.getContents ()) {
>                 if (o != null && "GenEditorGenerator".equals (o.eClass ().getName ())) {
>                     EObject m = CustomCopier.go (o, GMFGenPackage.eINSTANCE);
>                     migrated.add (m != null ? m : o);
>                 } else {
>                     migrated.add (o);
>                 }
>             }
>             resource.getContents ().clear ();
>             resource.getContents ().addAll (migrated);
