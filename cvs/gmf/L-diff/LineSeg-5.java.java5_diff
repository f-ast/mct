6a7,10
> import org.eclipse.draw2d.geometry.PrecisionPoint;
> 
> import org.eclipse.draw2d.geometry.PrecisionRectangle;
> 
50,51c54,55
<         origin = new Point (ptStart);
<         terminus = new Point (ptEnd);
---
>         origin = ptStart.getCopy ();
>         terminus = ptEnd.getCopy ();
94c98
<         return new Point (origin);
---
>         return origin.getCopy ();
98c102
<         return new Point (terminus);
---
>         return terminus.getCopy ();
102c106
<         this.origin = new Point (origin);
---
>         this.origin = origin.getCopy ();
106c110
<         this.terminus = new Point (terminus);
---
>         this.terminus = terminus.getCopy ();
161,163c165,168
<         Point theOrigin = getOrigin ();
<         Point theTerminus = getTerminus ();
<         return (theOrigin.getDistance (aPoint) + aPoint.getDistance (theTerminus) <= length () + tolerance);
---
>         double lengthOfSegment = Math.sqrt ((origin.x - terminus.x) * (origin.x - terminus.x) + (origin.y - terminus.y) * (origin.y - terminus.y));
>         double lengthFromOriginToPoint = Math.sqrt ((origin.x - aPoint.x) * (origin.x - aPoint.x) + (origin.y - aPoint.y) * (origin.y - aPoint.y));
>         double lengthFromTerminusToPoint = Math.sqrt ((terminus.x - aPoint.x) * (terminus.x - aPoint.x) + (terminus.y - aPoint.y) * (terminus.y - aPoint.y));
>         return lengthFromTerminusToPoint + lengthFromOriginToPoint - lengthOfSegment < tolerance;
345c350,352
<         return getLineEquation (origin.x, origin.y, terminus.x, terminus.y);
---
>         PrecisionPoint preciseOrigin = new PrecisionPoint (origin);
>         PrecisionPoint preciseTerminus = new PrecisionPoint (terminus);
>         return getLineEquation (preciseOrigin.preciseX, preciseOrigin.preciseY, preciseTerminus.preciseX, preciseTerminus.preciseY);
349c356
<         PointList intersections = new PointList ();
---
>         PrecisionPointList intersections = new PrecisionPointList ();
361,362c368,369
<                 intersections.addPoint (new Point (line.getOrigin ().getCopy ()));
<                 intersections.addPoint (new Point (line.getTerminus ().getCopy ()));
---
>                 intersections.addPoint (line.getOrigin ().getCopy ());
>                 intersections.addPoint (line.getTerminus ().getCopy ());
365c372
<             intersections.addPoint (new Point (Math.round ((c1 * b2 - b1 * c2) / det), Math.round ((a1 * c2 - c1 * a2) / det)));
---
>             intersections.addPoint (new PrecisionPoint ((c1 * b2 - b1 * c2) / det, (a1 * c2 - c1 * a2) / det));
371,378c378,389
<         PointList intersections = new PointList ();
<         if (ellipseBounds.width == 0 || ellipseBounds.height == 0) return intersections;
< 
<         double xl1 = getOrigin ().x - ellipseBounds.getCenter ().x;
<         double xl2 = getTerminus ().x - ellipseBounds.getCenter ().x;
<         double yl1 = getOrigin ().y - ellipseBounds.getCenter ().y;
<         double yl2 = getTerminus ().y - ellipseBounds.getCenter ().y;
<         double [] equation = getLineEquation (xl1, yl1, xl2, yl2);
---
>         PointList intersections = new PrecisionPointList ();
>         PrecisionPoint preciseOrigin = new PrecisionPoint (origin);
>         PrecisionPoint preciseTerminus = new PrecisionPoint (terminus);
>         PrecisionRectangle preciseEllipseBounds = new PrecisionRectangle (ellipseBounds);
>         if (preciseEllipseBounds.preciseWidth == 0 || preciseEllipseBounds.preciseHeight == 0) return intersections;
> 
>         PrecisionPoint ellipsePreciseCenter = new PrecisionPoint (preciseEllipseBounds.getCenter ());
>         double xl1 = preciseOrigin.preciseX - ellipsePreciseCenter.preciseX;
>         double xl2 = preciseTerminus.preciseX - ellipsePreciseCenter.preciseX;
>         double yl1 = preciseOrigin.preciseY - ellipsePreciseCenter.preciseY;
>         double yl2 = preciseTerminus.preciseY - ellipsePreciseCenter.preciseY;
>         double [] equation = LineSeg.getLineEquation (xl1, yl1, xl2, yl2);
384,385c395,396
<         double w = ellipseBounds.width;
<         double h = ellipseBounds.height;
---
>         double w = preciseEllipseBounds.preciseWidth;
>         double h = preciseEllipseBounds.preciseHeight;
391,392c402,403
<             intersections.addPoint (new Point (Math.round (x + ellipseBounds.getCenter ().x), Math.round (Math.sqrt (y) + ellipseBounds.getCenter ().y)));
<             intersections.addPoint (new Point (Math.round (x + ellipseBounds.getCenter ().x), Math.round (- Math.sqrt (y) + ellipseBounds.getCenter ().y)));
---
>             intersections.addPoint (new PrecisionPoint (x + ellipsePreciseCenter.preciseX, Math.sqrt (y) + ellipsePreciseCenter.preciseY));
>             intersections.addPoint (new PrecisionPoint (x + ellipsePreciseCenter.preciseX, - Math.sqrt (y) + ellipsePreciseCenter.preciseY));
402,403c413,414
<             intersections.addPoint (new Point (Math.round (x1 + ellipseBounds.getCenter ().x), Math.round ((c - a * x1) / b + ellipseBounds.getCenter ().y)));
<             intersections.addPoint (new Point (Math.round (x2 + ellipseBounds.getCenter ().x), Math.round ((c - a * x2) / b + ellipseBounds.getCenter ().y)));
---
>             intersections.addPoint (new PrecisionPoint (x1 + ellipsePreciseCenter.preciseX, (c - a * x1) / b + ellipsePreciseCenter.preciseY));
>             intersections.addPoint (new PrecisionPoint (x2 + ellipsePreciseCenter.preciseX, (c - a * x2) / b + ellipsePreciseCenter.preciseY));
409,413c420
<         double temp [] = getEquation ();
<         double a = temp [0];
<         double b = temp [1];
<         double c = temp [2];
<         PointList intersections = new PointList ();
---
>         PointList intersections = new PrecisionPointList ();
415,418c422,423
<             if (a * points.getPoint (0).x + b * points.getPoint (0).y == c) {
<                 intersections.addPoint (points.getPoint (0).getCopy ());
<             }
<             return intersections;
---
>             if (containsPoint (points.getFirstPoint (), DEFAULT_INTERSECTION_TOLERANCE)) {
>                 intersections.addPoint (points.getFirstPoint ());
419a425
>         } else {
422,423c428,429
<             LineSeg line = new LineSeg (points.getPoint (i).getCopy (), points.getPoint (i + 1).getCopy ());
<             PointList currentIntersections = getLinesIntersections (line);
---
>                 LineSeg seg = new LineSeg (points.getPoint (i), points.getPoint (i + 1));
>                 PointList currentIntersections = getLinesIntersections (seg);
427,428c433,436
<                 if (line.containsPoint (intersection, DEFAULT_INTERSECTION_TOLERANCE)) intersections.addPoint (currentIntersections.getPoint (j));
< 
---
>                     if (seg.containsPoint (intersection, DEFAULT_INTERSECTION_TOLERANCE)) {
>                         intersections.addPoint (currentIntersections.getPoint (j));
>                     }
>                 }
