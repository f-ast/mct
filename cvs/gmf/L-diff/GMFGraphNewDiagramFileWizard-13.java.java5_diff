15,16d14
< import org.eclipse.core.resources.IContainer;
< 
22a21,22
> import org.eclipse.core.runtime.IPath;
> 
35,42d34
< import org.eclipse.emf.ecore.util.FeatureMap;
< 
< import org.eclipse.emf.edit.provider.IWrapperItemProvider;
< 
< import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;
< 
< import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
< 
59,64d50
< import org.eclipse.jface.viewers.ISelectionChangedListener;
< 
< import org.eclipse.jface.viewers.IStructuredSelection;
< 
< import org.eclipse.jface.viewers.SelectionChangedEvent;
< 
67,68d52
< import org.eclipse.jface.viewers.TreeViewer;
< 
71,84d54
< import org.eclipse.jface.wizard.WizardPage;
< 
< import org.eclipse.swt.SWT;
< 
< import org.eclipse.swt.layout.GridData;
< 
< import org.eclipse.swt.layout.GridLayout;
< 
< import org.eclipse.swt.widgets.Composite;
< 
< import org.eclipse.swt.widgets.Label;
< 
< import org.eclipse.ui.IWorkbenchPage;
< 
90d59
<     private TransactionalEditingDomain myEditingDomain;
92,106c61,86
<     private IFile mySelectedModelFile;
<     private IWorkbenchPage myWorkbenchPage;
<     private IStructuredSelection mySelection;
<     private EObject myDiagramRoot;
< 
<     public GMFGraphNewDiagramFileWizard (IFile selectedModelFile, IWorkbenchPage workbenchPage, IStructuredSelection selection, EObject diagramRoot, TransactionalEditingDomain editingDomain) {
<         assert selectedModelFile != null : "Null selectedModelFile in GMFGraphNewDiagramFileWizard constructor";
<         assert workbenchPage != null : "Null workbenchPage in GMFGraphNewDiagramFileWizard constructor";
<         assert selection != null : "Null selection in GMFGraphNewDiagramFileWizard constructor";
<         assert diagramRoot != null : "Null diagramRoot in GMFGraphNewDiagramFileWizard constructor";
<         assert editingDomain != null : "Null editingDomain in GMFGraphNewDiagramFileWizard constructor";
<         mySelectedModelFile = selectedModelFile;
<         myWorkbenchPage = workbenchPage;
<         mySelection = selection;
<         myDiagramRoot = diagramRoot;
---
>     private ModelElementSelectionPage diagramRootElementSelectionPage;
>     private TransactionalEditingDomain myEditingDomain;
> 
>     public GMFGraphNewDiagramFileWizard (org.eclipse.emf.common.util.URI domainModelURI, EObject diagramRoot, TransactionalEditingDomain editingDomain) {
>         assert domainModelURI != null : "Domain model uri must be specified";
>         assert diagramRoot != null : "Doagram root element must be specified";
>         assert editingDomain != null : "Editing domain must be specified";
>         myFileCreationPage = new WizardNewFileCreationPage ("Initialize new diagram file", StructuredSelection.EMPTY);
>         myFileCreationPage.setTitle ("Diagram file");
>         myFileCreationPage.setDescription ("Create new diagram based on " + CanvasEditPart.MODEL_ID + " model content");
>         IPath filePath;
>         String fileName = domainModelURI.trimFileExtension ().lastSegment ();
>         if (domainModelURI.isPlatformResource ()) {
>             filePath = new Path (domainModelURI.trimSegments (1).toPlatformString (true));
>         } else if (domainModelURI.isFile ()) {
>             filePath = new Path (domainModelURI.trimSegments (1).toFileString ());
>         } else {
>             throw new IllegalArgumentException ("Unsupported URI: " + domainModelURI);
>         }
> 
>         myFileCreationPage.setContainerFullPath (filePath);
>         myFileCreationPage.setFileName (GMFGraphDiagramEditorUtil.getUniqueFileName (filePath, fileName, "gmfgraph_diagram"));
>         diagramRootElementSelectionPage = new DiagramRootElementSelectionPage ("Select diagram root element");
>         diagramRootElementSelectionPage.setTitle ("Diagram root element");
>         diagramRootElementSelectionPage.setDescription ("Select semantic model element to be depicted on diagram");
>         diagramRootElementSelectionPage.setModelElement (diagramRoot);
111,130d90
<         myFileCreationPage = new WizardNewFileCreationPage ("Initialize new Ecore diagram file", mySelection) {
< 
<             public void createControl (Composite parent) {
<                 super.createControl (parent);
<                 IContainer parentContainer = mySelectedModelFile.getParent ();
<                 String originalFileName = mySelectedModelFile.getProjectRelativePath ().removeFileExtension ().lastSegment ();
<                 String fileExtension = ".gmfgraph_diagram";
<                 String fileName = originalFileName + fileExtension;
<                 for (int i = 1;
<                 parentContainer.getFile (new Path (fileName)).exists (); i ++) {
<                     fileName = originalFileName + i + fileExtension;
<                 }
<                 setFileName (fileName);
<             }
< 
<         }
< 
<         ;
<         myFileCreationPage.setTitle ("Diagram file");
<         myFileCreationPage.setDescription ("Create new diagram based on " + CanvasEditPart.MODEL_ID + " model content");
132c92
<         addPage (new RootElementSelectorPage ());
---
>         addPage (diagramRootElementSelectionPage);
135a96
>         List affectedFiles = new LinkedList ();
142,145d102
<         ResourceSet resourceSet = myEditingDomain.getResourceSet ();
<         final Resource diagramResource = resourceSet.createResource (org.eclipse.emf.common.util.URI.createPlatformResourceURI (diagramFile.getFullPath ().toString (), true));
<         List affectedFiles = new LinkedList ();
<         affectedFiles.add (mySelectedModelFile);
146a104,106
>         org.eclipse.emf.common.util.URI diagramModelURI = org.eclipse.emf.common.util.URI.createPlatformResourceURI (diagramFile.getFullPath ().toString (), true);
>         ResourceSet resourceSet = myEditingDomain.getResourceSet ();
>         final Resource diagramResource = resourceSet.createResource (diagramModelURI);
150c110
<                 int diagramVID = GMFGraphVisualIDRegistry.getDiagramVisualID (myDiagramRoot);
---
>                 int diagramVID = GMFGraphVisualIDRegistry.getDiagramVisualID (diagramRootElementSelectionPage.getModelElement ());
154c114
<                 Diagram diagram = ViewService.createDiagram (myDiagramRoot, CanvasEditPart.MODEL_ID, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
---
>                 Diagram diagram = ViewService.createDiagram (diagramRootElementSelectionPage.getModelElement (), CanvasEditPart.MODEL_ID, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);
169c129
<             GMFGraphDiagramEditorPlugin.getInstance ().logError ("Save operation failed for: " + diagramFile.getFullPath ().toString (), ex);
---
>             GMFGraphDiagramEditorPlugin.getInstance ().logError ("Save operation failed for: " + diagramModelURI, ex);
176c136
<     private class RootElementSelectorPage extends WizardPage implements ISelectionChangedListener {
---
>     private static class DiagramRootElementSelectionPage extends ModelElementSelectionPage {
178,230c138,139
<         protected RootElementSelectorPage () {
<             super ("Select diagram root element");
<             setTitle ("Diagram root element");
<             setDescription ("Select semantic model element to be depicted on diagram");
<         }
< 
<         public void createControl (Composite parent) {
<             initializeDialogUnits (parent);
<             Composite topLevel = new Composite (parent, SWT.NONE);
<             topLevel.setLayout (new GridLayout ());
<             topLevel.setLayoutData (new GridData (GridData.VERTICAL_ALIGN_FILL | GridData.HORIZONTAL_ALIGN_FILL));
<             topLevel.setFont (parent.getFont ());
<             setControl (topLevel);
<             createModelBrowser (topLevel);
<             setPageComplete (validatePage ());
<         }
< 
<         private void createModelBrowser (Composite parent) {
<             Composite panel = new Composite (parent, SWT.NONE);
<             panel.setLayoutData (new GridData (GridData.FILL_BOTH));
<             GridLayout layout = new GridLayout ();
<             layout.marginWidth = 0;
<             panel.setLayout (layout);
<             Label label = new Label (panel, SWT.NONE);
<             label.setText ("Select diagram root element:");
<             label.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_BEGINNING));
<             TreeViewer treeViewer = new TreeViewer (panel, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
<             GridData layoutData = new GridData (GridData.FILL_BOTH);
<             layoutData.heightHint = 300;
<             layoutData.widthHint = 300;
<             treeViewer.getTree ().setLayoutData (layoutData);
<             treeViewer.setContentProvider (new AdapterFactoryContentProvider (GMFGraphDiagramEditorPlugin.getInstance ().getItemProvidersAdapterFactory ()));
<             treeViewer.setLabelProvider (new AdapterFactoryLabelProvider (GMFGraphDiagramEditorPlugin.getInstance ().getItemProvidersAdapterFactory ()));
<             treeViewer.setInput (myDiagramRoot.eResource ());
<             treeViewer.setSelection (new StructuredSelection (myDiagramRoot));
<             treeViewer.addSelectionChangedListener (this);
<         }
< 
<         public void selectionChanged (SelectionChangedEvent event) {
<             myDiagramRoot = null;
<             if (event.getSelection () instanceof IStructuredSelection) {
<                 IStructuredSelection selection = (IStructuredSelection) event.getSelection ();
<                 if (selection.size () == 1) {
<                     Object selectedElement = selection.getFirstElement ();
<                     if (selectedElement instanceof IWrapperItemProvider) {
<                         selectedElement = ((IWrapperItemProvider) selectedElement).getValue ();
<                     }
<                     if (selectedElement instanceof FeatureMap.Entry) {
<                         selectedElement = ((FeatureMap.Entry) selectedElement).getValue ();
<                     }
<                     if (selectedElement instanceof EObject) {
<                         myDiagramRoot = (EObject) selectedElement;
<                     }
---
>         protected DiagramRootElementSelectionPage (String pageName) {
>             super (pageName);
231a141,143
> 
>         protected String getSelectionTitle () {
>             return "Select diagram root element:";
233,238c145,148
<             setPageComplete (validatePage ());
<         }
< 
<         private boolean validatePage () {
<             if (myDiagramRoot == null) {
<                 setErrorMessage ("No diagram root element selected");
---
> 
>         protected boolean validatePage () {
>             if (selectedModelElement == null) {
>                 setErrorMessage ("Diagram root element is not selected");
241,242c151,152
<             boolean result = ViewService.getInstance ().provides (new CreateDiagramViewOperation (new EObjectAdapter (myDiagramRoot), CanvasEditPart.MODEL_ID, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT));
<             setErrorMessage (result ? null : "Invalid diagram root element was selected");
---
>             boolean result = ViewService.getInstance ().provides (new CreateDiagramViewOperation (new EObjectAdapter (selectedModelElement), CanvasEditPart.MODEL_ID, GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT));
>             setErrorMessage (result ? null : "Invalid diagram root element is selected");
