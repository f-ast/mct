72a73,82
> import org.eclipse.ui.IPluginContribution;
> 
> import org.eclipse.ui.PlatformUI;
> 
> import org.eclipse.ui.activities.IIdentifier;
> 
> import org.eclipse.ui.activities.IWorkbenchActivitySupport;
> 
> import org.eclipse.ui.activities.WorkbenchActivityHelper;
> 
126c136
<         public void contribute (Object content, PaletteRoot root, Map predefinedEntries) {
---
>         public void contribute (Object content, PaletteRoot root, Map predefinedEntries, String pluginID) {
129c139,142
<                 ((IEntryDescriptor) iter.next ()).contribute (content, root, paletteFactory, predefinedEntries);
---
>                 IEntryDescriptor descriptor = (IEntryDescriptor) iter.next ();
>                 if (areActivitiesEnabled (descriptor.getID (), pluginID)) {
>                     descriptor.contribute (content, root, paletteFactory, predefinedEntries);
>                 }
138a152,153
>         public String getID ();
> 
248a264,267
>         public String getID () {
>             return id;
>         }
> 
295a315,318
>         public String getID () {
>             return id;
>         }
> 
423a447
>     private String pluginID;
425a450
>         pluginID = configElement.getContributor ().getName ();
436c461
<             ((ContributionDescriptor) iter.next ()).contribute (content, root, predefinedEntries);
---
>             ((ContributionDescriptor) iter.next ()).contribute (content, root, predefinedEntries, pluginID);
443a469,491
>     private static boolean areActivitiesEnabled (final String paletteEntryID, final String pluginID) {
>         if (! WorkbenchActivityHelper.isFiltering ()) return true;
> 
>         IWorkbenchActivitySupport workbenchActivitySupport = PlatformUI.getWorkbench ().getActivitySupport ();
>         IIdentifier id = workbenchActivitySupport.getActivityManager ().getIdentifier (WorkbenchActivityHelper.createUnifiedId (new IPluginContribution () {
> 
>             public String getLocalId () {
>                 return paletteEntryID;
>             }
> 
>             public String getPluginId () {
>                 return pluginID;
>             }
> 
>         }
> 
>         ));
>         if (id != null && ! id.isEnabled ()) {
>             return false;
>         }
>         return true;
>     }
> 
