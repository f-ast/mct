16a17,20
> import org.eclipse.core.runtime.Platform;
> 
> import org.eclipse.core.runtime.jobs.IJobManager;
> 
24a29,30
> import org.eclipse.gmf.runtime.common.core.util.StringStatics;
> 
54,56c60,80
<     private IElementSelectionInput elementSelectionInput;
<     private IElementSelectionListener elementSelectionListener;
<     private HashMap jobs = new HashMap ();
---
>     protected class JobData {
>         public IElementSelectionInput elementSelectionInput;
>         public IElementSelectionListener elementSelectionListener;
>         public HashMap jobs = new HashMap ();
>     }
> 
>     private Map jobs2Data = new HashMap ();
> 
>     public JobData getJobData () {
>         Job currentJob = jobManager.currentJob ();
>         assert currentJob != null;
>         if (currentJob == null) {
>             return null;
>         }
>         JobData data = null;
>         synchronized (jobs2Data) {
>             data = (JobData) jobs2Data.get (currentJob);
>         }
>         return data;
>     }
> 
60c84
<         instance.configureProviders (CommonUIServicesPlugin.getPluginId (), "elementSelectionProviders");
---
>         instance.configureProviders ();
76,77c100,116
<         elementSelectionInput = input;
<         elementSelectionListener = listener;
---
>         ElementSelectionServiceJob job = createSelectionJob ();
>         JobData data = new JobData ();
>         data.elementSelectionInput = input;
>         data.elementSelectionListener = listener;
>         job.setName (getJobName (data));
>         synchronized (jobs2Data) {
>             jobs2Data.put (job, data);
>         }
>         job.schedule ();
>         return job;
>     }
> 
>     protected String getJobName () {
>         return StringStatics.BLANK;
>     }
> 
>     protected ElementSelectionServiceJob createSelectionJob () {
80d118
<         job.schedule ();
83a122,123
>     public static final IJobManager jobManager = Platform.getJobManager ();
> 
84a125,127
>         JobData data = getJobData ();
>         if (data == null) return;
> 
86c129
<         IOperation operation = new MatchingObjectsOperation (elementSelectionInput);
---
>         IOperation operation = new MatchingObjectsOperation (data.elementSelectionInput);
95c138
<             addJob (provider);
---
>             addJob (data, provider);
98,99c141,142
<         synchronized (jobs) {
<             jobsClone = (HashMap) jobs.clone ();
---
>         synchronized (data) {
>             jobsClone = (HashMap) data.jobs.clone ();
103a147
>             IElementSelectionProvider provider = (IElementSelectionProvider) entry.getKey ();
105c149
<             job.schedule ();
---
>             schedule (provider, job);
107c151
<         monitor.beginTask (getJobName (), 1000);
---
>         monitor.beginTask (getJobName (data), 1000);
109,110c153,154
<             synchronized (jobs) {
<                 if (jobs.size () == 0) {
---
>             synchronized (data) {
>                 if (data.jobs.size () == 0) {
115a160,161
>                 synchronized (data) {
>                     data.elementSelectionListener = null;
119a166
>         }
122a170,173
>     protected void schedule (IElementSelectionProvider provider, ElementSelectionServiceJob job) {
>         job.schedule ();
>     }
> 
127c178,179
<     protected String getJobName () {
---
>     protected String getJobName (JobData data) {
>         if ((getJobName () != null && getJobName ().equals (StringStatics.BLANK)) && data != null) {
129c181
<         String filter = elementSelectionInput.getInput ();
---
>             String filter = data.elementSelectionInput.getInput ();
131a184,185
>         return getJobName ();
>     }
133,136c187,193
<     private void addJob (IElementSelectionProvider provider) {
<         ElementSelectionServiceJob job = provider.getMatchingObjects (elementSelectionInput, this);
<         synchronized (jobs) {
<             jobs.put (provider, job);
---
>     private void addJob (JobData data, IElementSelectionProvider provider) {
>         ElementSelectionServiceJob job = provider.getMatchingObjects (data.elementSelectionInput, this);
>         synchronized (data) {
>             data.jobs.put (provider, job);
>         }
>         synchronized (jobs2Data) {
>             jobs2Data.put (job, data);
140c197
<     private void removeJob (IElementSelectionProvider provider) {
---
>     private void removeJob (JobData data, IElementSelectionProvider provider) {
142,144c199,202
<         synchronized (jobs) {
<             jobs.remove (provider);
<             if (jobs.size () == 0) {
---
>         Object job = null;
>         synchronized (data) {
>             job = data.jobs.remove (provider);
>             if (data.jobs.size () == 0) {
150a209,211
>         synchronized (jobs2Data) {
>             jobs2Data.remove (job);
>         }
153a215,224
>         final Job currentJob = jobManager.currentJob ();
>         if (currentJob == null) return;
> 
>         JobData data = null;
>         synchronized (jobs2Data) {
>             data = (JobData) jobs2Data.get (currentJob);
>         }
>         if (data == null) return;
> 
>         final JobData finalData = data;
157c228,232
<                 elementSelectionListener.matchingObjectEvent (matchingObjectEvent);
---
>                 synchronized (finalData) {
>                     if (finalData.elementSelectionListener != null) {
>                         finalData.elementSelectionListener.matchingObjectEvent (matchingObjectEvent);
>                     }
>                 }
171a247,249
>         JobData data = getJobData ();
>         if (data == null) return;
> 
173c251
<             removeJob (matchingObjectEvent.getMatchingObject ().getProvider ());
---
>             removeJob (data, matchingObjectEvent.getMatchingObject ().getProvider ());
179a258
>         JobData data = getJobData ();
181,182c260,261
<         synchronized (jobs) {
<             jobsClone = (HashMap) jobs.clone ();
---
>         synchronized (data) {
>             jobsClone = (HashMap) data.jobs.clone ();
190c269
<             removeJob (provider);
---
>             removeJob (data, provider);
197a277,291
>     protected void configureProviders () {
>         configureProviders (CommonUIServicesPlugin.getPluginId (), "elementSelectionProviders");
>     }
> 
>     public void cancelJob (ElementSelectionServiceJob job) {
>         JobData data = null;
>         synchronized (jobs2Data) {
>             data = (JobData) jobs2Data.get (job);
>         }
>         synchronized (data) {
>             data.elementSelectionListener = null;
>         }
>         job.cancel ();
>     }
> 
