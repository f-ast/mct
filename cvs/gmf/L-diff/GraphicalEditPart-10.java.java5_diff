3,6d2
< import java.beans.PropertyChangeEvent;
< 
< import java.beans.PropertyChangeListener;
< 
36a33,34
> import org.eclipse.emf.common.notify.Notification;
> 
79c77
< import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;
---
> import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
83,84d80
< import org.eclipse.gmf.runtime.diagram.core.listener.PropertyChangeNotifier;
< 
104a101,102
> import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
> 
113,114d110
< import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
< 
153c149
< public abstract class GraphicalEditPart extends AbstractGraphicalEditPart implements IGraphicalEditPart, PropertyChangeListener, IAdaptableSelection {
---
> public abstract class GraphicalEditPart extends AbstractGraphicalEditPart implements IGraphicalEditPart, IAdaptableSelection, NotificationListener {
176,187c172
<     protected void addListenerFilter (String filterId, PropertyChangeListener listener, PropertyChangeNotifier notifier) {
<         if (notifier == null) return;
< 
<         Assert.isNotNull (filterId);
<         Assert.isNotNull (listener);
<         if (listenerFilters == null) listenerFilters = new HashMap ();
< 
<         notifier.addPropertyChangeListener (listener);
<         listenerFilters.put (filterId, new Object [] {notifier, listener});
<     }
< 
<     protected void addListenerFilter (String filterId, PropertyChangeListener listener, EObject element) {
---
>     protected void addListenerFilter (String filterId, NotificationListener listener, EObject element) {
194c179
<         PresentationListener.getInstance ().addPropertyChangeListener (element, listener);
---
>         PresentationListener.getInstance ().addNotificationListener (element, listener);
198c183
<     protected void addListenerFilter (String filterId, PropertyChangeListener listener, EObject element, EStructuralFeature feature) {
---
>     protected void addListenerFilter (String filterId, NotificationListener listener, EObject element, EStructuralFeature feature) {
205c190
<         PresentationListener.getInstance ().addPropertyChangeListener (element, listener);
---
>         PresentationListener.getInstance ().addNotificationListener (element, listener);
234c219
<                     PresentationListener.getInstance ().removePropertyChangeListener ((EObject) obj [0], (EStructuralFeature) obj [1], (PropertyChangeListener) obj [2]);
---
>                     PresentationListener.getInstance ().removeNotificationListener ((EObject) obj [0], (EStructuralFeature) obj [1], (NotificationListener) obj [2]);
236,238c221
<                     if (obj [0] instanceof PropertyChangeNotifier) ((PropertyChangeNotifier) obj [0]).removePropertyChangeListener ((PropertyChangeListener) obj [1]);
<                     else PresentationListener.getInstance ().removePropertyChangeListener ((EObject) obj [0], (PropertyChangeListener) obj [1]);
< 
---
>                     PresentationListener.getInstance ().removeNotificationListener ((EObject) obj [0], (NotificationListener) obj [1]);
442,462d424
<     public final void propertyChange (PropertyChangeEvent event) {
<         if (isActive ()) handlePropertyChangeEvent (event);
< 
<     }
< 
<     protected void handlePropertyChangeEvent (PropertyChangeEvent event) {
<         if (Properties.ID_PERSISTED_CHILDREN.equals (event.getPropertyName ()) || Properties.ID_TRANSIENT_CHILDREN.equals (event.getPropertyName ())) {
<             refreshChildren ();
<         } else if (Properties.ID_ISVISIBLE.equals (event.getPropertyName ())) {
<             refreshVisibility ();
<         } else if (Properties.ID_SEMANTICREF.equals (event.getPropertyName ())) {
<             handleMajorSemanticChange ();
<         } else if (event instanceof NotificationEvent) {
<             handleNotificationEvent ((NotificationEvent) event);
<         }
< 
<     }
< 
<     protected void handleNotificationEvent (NotificationEvent e) {
<     }
< 
561,564c523
<             PresentationListener.getInstance ().removePropertyChangeListener ((EObject) objects [0], (EStructuralFeature) objects [1], (PropertyChangeListener) objects [2]);
<         } else {
<             if (objects [0] instanceof PropertyChangeNotifier) {
<                 ((PropertyChangeNotifier) objects [0]).removePropertyChangeListener ((PropertyChangeListener) objects [1]);
---
>             PresentationListener.getInstance ().removeNotificationListener ((EObject) objects [0], (EStructuralFeature) objects [1], (NotificationListener) objects [2]);
566,567c525
<                 PresentationListener.getInstance ().removePropertyChangeListener ((EObject) objects [0], (PropertyChangeListener) objects [1]);
<             }
---
>             PresentationListener.getInstance ().removeNotificationListener ((EObject) objects [0], (NotificationListener) objects [1]);
809a768,784
>     public void notifyChanged (Notification notification) {
>         if (isActive ()) {
>             handleNotificationEvent (notification);
>         }
>     }
> 
>     protected void handleNotificationEvent (Notification event) {
>         if (NotationPackage.eINSTANCE.getView_PersistedChildren ().equals (event.getFeature ()) || NotationPackage.eINSTANCE.getView_TransientChildren ().equals (event.getFeature ())) {
>             refreshChildren ();
>         } else if (NotationPackage.eINSTANCE.getView_Visible ().equals (event.getFeature ())) {
>             refreshVisibility ();
>         } else if (NotationPackage.eINSTANCE.getView_Element ().equals (event.getFeature ())) {
>             handleMajorSemanticChange ();
>         }
> 
>     }
> 
