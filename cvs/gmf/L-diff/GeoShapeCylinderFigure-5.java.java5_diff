4a5,10
> import org.eclipse.draw2d.geometry.Point;
> 
> import org.eclipse.draw2d.geometry.PointList;
> 
> import org.eclipse.draw2d.geometry.PrecisionPoint;
> 
7c13,22
< public class GeoShapeCylinderFigure extends GeoShapeFigure {
---
> import org.eclipse.gmf.runtime.draw2d.ui.figures.IPolygonAnchorableFigure;
> 
> import org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx;
> 
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.LineSeg;
> 
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.PointListUtilities;
> 
> public class GeoShapeCylinderFigure extends GeoShapeFigure implements IPolygonAnchorableFigure {
>     private PointList anchorBorderPointList;
27a43,116
>     protected PointList getAnchorBorderPointList () {
>         Rectangle rBounds = getBounds ();
>         int height = (int) (rBounds.height * 0.25);
>         Rectangle rUpperEllipse = new Rectangle (rBounds.x, rBounds.y, rBounds.width, height);
>         Rectangle rMiddle = new Rectangle (rBounds.x, rBounds.y + height / 2, rBounds.width, rBounds.height - height + 1);
>         Rectangle rLowerEllipse = new Rectangle (rBounds.x, rBounds.y + rBounds.height - height - 1, rBounds.width, height);
>         Point keyPoint1 = new PrecisionPoint (rMiddle.getTopLeft ().x, rMiddle.getTopLeft ().y);
>         Point keyPoint2 = new PrecisionPoint (rMiddle.getBottomLeft ().x, rMiddle.getBottomLeft ().y);
>         Point keyPoint3 = new PrecisionPoint (rMiddle.getBottomRight ().x, rMiddle.getBottomRight ().y);
>         Point keyPoint4 = new PrecisionPoint (rMiddle.getTopRight ().x, rMiddle.getTopRight ().y);
>         PointList upperPointList = new PointList ();
>         upperPointList.addPoint (keyPoint4);
>         LineSeg lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getTopRight ().x - rUpperEllipse.width / 32, rUpperEllipse.getTopRight ().y), new PrecisionPoint (rUpperEllipse.getBottomRight ().x - rUpperEllipse.width / 32, rUpperEllipse.getCenter ().y));
>         upperPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rUpperEllipse).getLastPoint ());
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getTopRight ().x - rUpperEllipse.width / 12, rUpperEllipse.getTopRight ().y), new PrecisionPoint (rUpperEllipse.getBottomRight ().x - rUpperEllipse.width / 12, rUpperEllipse.getCenter ().y));
>         upperPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rUpperEllipse).getLastPoint ());
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getTopRight ().x - rUpperEllipse.width / 8, rUpperEllipse.getTopRight ().y), new PrecisionPoint (rUpperEllipse.getBottomRight ().x - rUpperEllipse.width / 8, rUpperEllipse.getCenter ().y));
>         upperPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rUpperEllipse).getLastPoint ());
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getTopRight ().x - rUpperEllipse.width / 4, rUpperEllipse.getTopRight ().y), new PrecisionPoint (rUpperEllipse.getBottomRight ().x - rUpperEllipse.width / 4, rUpperEllipse.getCenter ().y));
>         upperPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rUpperEllipse).getLastPoint ());
>         upperPointList.addPoint (rUpperEllipse.getCenter ().x, rUpperEllipse.getCenter ().y - rUpperEllipse.height / 2);
>         lineSeg = new LineSeg (new Point (rUpperEllipse.getTopLeft ().x + rUpperEllipse.width / 4, rUpperEllipse.getTopRight ().y), new PrecisionPoint (rUpperEllipse.getTopLeft ().x + rUpperEllipse.width / 4, rUpperEllipse.getCenter ().y));
>         upperPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rUpperEllipse).getLastPoint ());
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getTopLeft ().x + rUpperEllipse.width / 8, rUpperEllipse.getTopRight ().y), new PrecisionPoint (rUpperEllipse.getTopLeft ().x + rUpperEllipse.width / 8, rUpperEllipse.getCenter ().y));
>         upperPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rUpperEllipse).getLastPoint ());
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getTopLeft ().x + rUpperEllipse.width / 12, rUpperEllipse.getTopRight ().y), new PrecisionPoint (rUpperEllipse.getTopLeft ().x + rUpperEllipse.width / 12, rUpperEllipse.getCenter ().y));
>         upperPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rUpperEllipse).getLastPoint ());
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getTopLeft ().x + rUpperEllipse.width / 32, rUpperEllipse.getTopRight ().y), new PrecisionPoint (rUpperEllipse.getTopLeft ().x + rUpperEllipse.width / 32, rUpperEllipse.getCenter ().y));
>         upperPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rUpperEllipse).getLastPoint ());
>         upperPointList.addPoint (keyPoint1);
>         PointList lowerPointList = new PointList ();
>         lowerPointList.addPoint (keyPoint2);
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getBottomLeft ().x + rUpperEllipse.width / 32, rLowerEllipse.getCenter ().y), new PrecisionPoint (rUpperEllipse.getBottomLeft ().x + rUpperEllipse.width / 32, rLowerEllipse.getBottomLeft ().y));
>         lowerPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rLowerEllipse).getFirstPoint ());
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getBottomLeft ().x + rUpperEllipse.width / 12, rLowerEllipse.getCenter ().y), new PrecisionPoint (rUpperEllipse.getBottomLeft ().x + rUpperEllipse.width / 12, rLowerEllipse.getBottomLeft ().y));
>         lowerPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rLowerEllipse).getFirstPoint ());
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getBottomLeft ().x + rUpperEllipse.width / 8, rLowerEllipse.getCenter ().y), new PrecisionPoint (rUpperEllipse.getBottomLeft ().x + rUpperEllipse.width / 8, rLowerEllipse.getBottomLeft ().y));
>         lowerPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rLowerEllipse).getFirstPoint ());
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getBottomLeft ().x + rUpperEllipse.width / 4, rLowerEllipse.getCenter ().y), new PrecisionPoint (rUpperEllipse.getBottomLeft ().x + rUpperEllipse.width / 4, rLowerEllipse.getBottomLeft ().y));
>         lowerPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rLowerEllipse).getFirstPoint ());
>         lowerPointList.addPoint (rLowerEllipse.getCenter ().x, rLowerEllipse.getCenter ().y + rLowerEllipse.height / 2);
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getBottomRight ().x - rUpperEllipse.width / 4, rLowerEllipse.getCenter ().y), new PrecisionPoint (rUpperEllipse.getBottomRight ().x - rUpperEllipse.width / 4, rLowerEllipse.getBottomRight ().y));
>         lowerPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rLowerEllipse).getFirstPoint ());
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getBottomRight ().x - rUpperEllipse.width / 8, rLowerEllipse.getCenter ().y), new PrecisionPoint (rUpperEllipse.getBottomRight ().x - rUpperEllipse.width / 8, rLowerEllipse.getBottomRight ().y));
>         lowerPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rLowerEllipse).getFirstPoint ());
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getBottomRight ().x - rUpperEllipse.width / 12, rLowerEllipse.getCenter ().y), new PrecisionPoint (rUpperEllipse.getBottomRight ().x - rUpperEllipse.width / 12, rLowerEllipse.getBottomRight ().y));
>         lowerPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rLowerEllipse).getFirstPoint ());
>         lineSeg = new LineSeg (new PrecisionPoint (rUpperEllipse.getBottomRight ().x - rUpperEllipse.width / 32, rLowerEllipse.getCenter ().y), new PrecisionPoint (rUpperEllipse.getBottomRight ().x - rUpperEllipse.width / 32, rLowerEllipse.getBottomRight ().y));
>         lowerPointList.addPoint (lineSeg.getLineIntersectionsWithEllipse (rLowerEllipse).getFirstPoint ());
>         lowerPointList.addPoint (keyPoint3);
>         PointList combinedPointList = new PointList ();
>         combinedPointList.addPoint (keyPoint1);
>         combinedPointList.addPoint (keyPoint2);
>         combinedPointList.addAll (PointListUtilities.calcSmoothPolyline (lowerPointList, PolylineConnectionEx.SMOOTH_MORE, PointListUtilities.DEFAULT_BEZIERLINES));
>         combinedPointList.addPoint (keyPoint3);
>         combinedPointList.addPoint (keyPoint4);
>         combinedPointList.addAll (PointListUtilities.calcSmoothPolyline (upperPointList, PolylineConnectionEx.SMOOTH_MORE, PointListUtilities.DEFAULT_BEZIERLINES));
>         combinedPointList.addPoint (keyPoint1);
>         PointListUtilities.normalizeSegments (combinedPointList);
>         return combinedPointList;
>     }
> 
>     public void setBounds (Rectangle rect) {
>         super.setBounds (rect);
>         anchorBorderPointList = null;
>     }
> 
>     public PointList getPolygonPoints () {
>         if (anchorBorderPointList == null) {
>             anchorBorderPointList = getAnchorBorderPointList ();
>         }
>         return anchorBorderPointList.getCopy ();
>     }
> 
