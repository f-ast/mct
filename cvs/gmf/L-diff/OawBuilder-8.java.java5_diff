2a3,6
> import java.util.ArrayList;
> 
> import java.util.Collection;
> 
28a33,34
> import org.eclipse.core.runtime.OperationCanceledException;
> 
32a39,40
> import org.eclipse.gmf.internal.xpand.RootManager;
> 
51,53c59,60
< public class OawBuilder extends IncrementalProjectBuilder {
<     private boolean firstBuild = true;
<     private WorkspaceResourceManager resourceManager;
---
> public class OawBuilder extends IncrementalProjectBuilder implements RootManager.IRootChangeListener {
>     private RootManager myRootManager;
54a62
>     private boolean myRootsChanged = true;
65,67c73,74
<         resourceManager = new WorkspaceResourceManager (getProject ());
<         Activator.registerResourceManager (getProject (), resourceManager);
<         firstBuild = true;
---
>         myRootManager = Activator.getRootManager (getProject ());
>         myRootManager.addRootChangeListener (this);
75,84c82
<             if (firstBuild || (kind == FULL_BUILD)) {
<                 fullBuild (monitor);
<             } else {
<                 final IResourceDelta delta = getDelta (getProject ());
<                 if (delta == null) {
<                     fullBuild (monitor);
<                 } else {
<                     incrementalBuild (delta, monitor);
<                 }
<             }
---
>             doBuild (kind, args, monitor);
88d85
<         firstBuild = false;
90c87
<             final ExecutionContext ctx = ContextFactory.createXtendContext (getResourceManager ());
---
>             final ExecutionContext ctx = ContextFactory.createXtendContext (getResourceManager (xtendResourcesToAnalyze.get (r)));
96c93
<             final XpandExecutionContext ctx = ContextFactory.createXpandContext (getResourceManager ());
---
>             final XpandExecutionContext ctx = ContextFactory.createXpandContext (getResourceManager (xpandResourcesToAnalyze.get (r)));
103c100,135
<         return null;
---
>         myRootsChanged = false;
>         Set < IProject > referencedProjects = myRootManager.getReferencedProjects ();
>         referencedProjects.remove (getProject ());
>         return referencedProjects.toArray (new IProject [referencedProjects.size ()]);
>     }
> 
>     private void doBuild (int kind, Map < ?, ? > args, IProgressMonitor monitor) throws CoreException {
>         if ((kind == FULL_BUILD) || haveRootsChangedSinceLastBuild ()) {
>             fullBuild (monitor);
>         } else {
>             Set < IProject > referencedProjects = myRootManager.getReferencedProjects ();
>             referencedProjects.remove (getProject ());
>             Collection < IResourceDelta > deltas = new ArrayList < IResourceDelta > (referencedProjects.size ());
>             IResourceDelta projectDelta = getDelta (getProject ());
>             if (projectDelta == null) {
>                 fullBuild (monitor);
>                 return;
>             }
>             for (IProject next : referencedProjects) {
>                 final IResourceDelta delta = getDelta (next);
>                 if (delta == null) {
>                     fullBuild (monitor);
>                     return;
>                 }
>                 deltas.add (delta);
>             }
>             incrementalBuild (projectDelta, deltas, monitor);
>         }
>     }
> 
>     public void rootsChanged (RootManager rootManager) {
>         myRootsChanged = true;
>     }
> 
>     private boolean haveRootsChangedSinceLastBuild () {
>         return myRootsChanged;
106a139
>         getResourceManager (resource).forget (resource);
110d142
<         getResourceManager ().forget (resource);
113c145
<                 XpandResource r = getResourceManager ().loadXpandResource (resource);
---
>                 XpandResource r = getResourceManager (resource).loadXpandResource (resource);
118c150
<                 XtendResource r = getResourceManager ().loadXtendResource (resource);
---
>                 XtendResource r = getResourceManager (resource).loadXtendResource (resource);
135c167,173
<         getResourceManager ().forget (resource);
---
>         getResourceManager (resource).forget (resource);
>     }
> 
>     private WorkspaceResourceManager getResourceManager (IFile file) {
>         WorkspaceResourceManager result = myRootManager.getResourceManager (file);
>         assert result != null;
>         return result;
139,140c177,186
<         monitor.beginTask (null, 2);
<         getProject ().accept (new XpandResourceVisitor (new SubProgressMonitor (monitor, 1)));
---
>         Set < IProject > referencedProjects = myRootManager.getReferencedProjects ();
>         referencedProjects.add (getProject ());
>         OawMarkerManager.deleteMarkers (getProject ());
>         monitor.beginTask (null, 1 + referencedProjects.size ());
>         try {
>             for (IProject next : referencedProjects) {
>                 checkCanceled (monitor);
>                 next.accept (new XpandResourceVisitor (new SubProgressMonitor (monitor, 1)));
>             }
>             checkCanceled (monitor);
141a188
>         } finally {
143a191
>     }
145,146c193,197
<     protected void incrementalBuild (final IResourceDelta delta, final IProgressMonitor monitor) throws CoreException {
<         monitor.beginTask (null, 2);
---
>     protected void incrementalBuild (final IResourceDelta projectDelta, final Collection < IResourceDelta > referencedProjectDeltas, final IProgressMonitor monitor) throws CoreException {
>         monitor.beginTask (null, 2 + referencedProjectDeltas.size ());
>         try {
>             for (IResourceDelta delta : referencedProjectDeltas) {
>                 checkCanceled (monitor);
148c199,204
<         modelRegistry.build (getProject (), delta, new SubProgressMonitor (monitor, 1));
---
>             }
>             checkCanceled (monitor);
>             projectDelta.accept (new XpandResourceVisitor (new SubProgressMonitor (monitor, 1)));
>             checkCanceled (monitor);
>             modelRegistry.build (getProject (), projectDelta, new SubProgressMonitor (monitor, 1));
>         } finally {
150a207
>     }
152,153c209,212
<     private WorkspaceResourceManager getResourceManager () {
<         return resourceManager;
---
>     private void checkCanceled (final IProgressMonitor monitor) {
>         if (monitor.isCanceled ()) {
>             throw new OperationCanceledException ();
>         }
174,175c233,240
<     private static boolean isFileOfInterest (IFile file) {
<         return isXpand (file) || isXtend (file);
---
>     private boolean isFileOfInterest (IFile file) {
>         if (! isXpand (file) && ! isXtend (file)) {
>             return false;
>         }
>         if (getResourceManager (file) == null) {
>             return false;
>         }
>         return true;
