20a21,22
> import org.eclipse.emf.codegen.util.CodeGenUtil;
> 
47c49,53
< import org.eclipse.gmf.common.codegen.GeneratorBase;
---
> import org.eclipse.gmf.internal.common.codegen.GeneratorBase;
> 
> import org.eclipse.gmf.internal.common.codegen.ImportUtil;
> 
> import org.eclipse.gmf.internal.common.codegen.TextEmitter;
79,89c85,95
<         doGenerateFile (myEmitters.getManifestGenerator (), new Path ("META-INF/MANIFEST.MF"), myEditorGen.getPlugin ());
<         doGenerateFile (myEmitters.getBuildPropertiesGenerator (), new Path ("build.properties"), myEditorGen.getPlugin ());
<         doGenerateFile (myEmitters.getPluginXML (), new Path ("plugin.xml"), myEditorGen.getPlugin ());
<         doGenerateFile (myEmitters.getPluginPropertiesGenerator (), new Path ("plugin.properties"), myEditorGen.getPlugin ());
<         doGenerateJavaClass (myEmitters.getCreationWizardGenerator (), myDiagram.getCreationWizardQualifiedClassName (), myDiagram);
<         doGenerateJavaClass (myEmitters.getCreationWizardPageGenerator (), myDiagram.getCreationWizardPageQualifiedClassName (), myDiagram);
<         doGenerateJavaClass (myEmitters.getPluginGenerator (), myEditorGen.getPlugin ().getActivatorQualifiedClassName (), myEditorGen.getPlugin ());
<         doGenerateJavaClass (myEmitters.getActionBarContributorGenerator (), myEditorGen.getEditor ().getActionBarContributorQualifiedClassName (), myEditorGen.getEditor ());
<         doGenerateJavaClass (myEmitters.getDiagramEditorUtilGenerator (), myDiagram.getDiagramEditorUtilQualifiedClassName (), myDiagram);
<         doGenerateJavaClass (myEmitters.getEditorGenerator (), myEditorGen.getEditor ().getQualifiedClassName (), myEditorGen.getEditor ());
<         doGenerateJavaClass (myEmitters.getPropertySourceProviderGenerator (), myDiagram.getPropertyProviderQualifiedClassName (), myDiagram);
---
>         doGenerateFile (myEmitters.getManifestGenerator (), new Path ("META-INF/MANIFEST.MF"), new Object [] {myEditorGen.getPlugin ()});
>         doGenerateFile (myEmitters.getBuildPropertiesGenerator (), new Path ("build.properties"), new Object [] {myEditorGen.getPlugin ()});
>         doGenerateFile (myEmitters.getPluginXML (), new Path ("plugin.xml"), new Object [] {myEditorGen.getPlugin ()});
>         doGenerateFile (myEmitters.getPluginPropertiesGenerator (), new Path ("plugin.properties"), new Object [] {myEditorGen.getPlugin ()});
>         internalGenerateJavaClass (myEmitters.getCreationWizardGenerator (), myDiagram.getCreationWizardQualifiedClassName (), myDiagram);
>         internalGenerateJavaClass (myEmitters.getCreationWizardPageGenerator (), myDiagram.getCreationWizardPageQualifiedClassName (), myDiagram);
>         internalGenerateJavaClass (myEmitters.getPluginGenerator (), myEditorGen.getPlugin ().getActivatorQualifiedClassName (), myEditorGen.getPlugin ());
>         internalGenerateJavaClass (myEmitters.getActionBarContributorGenerator (), myEditorGen.getEditor ().getActionBarContributorQualifiedClassName (), myEditorGen.getEditor ());
>         internalGenerateJavaClass (myEmitters.getDiagramEditorUtilGenerator (), myDiagram.getDiagramEditorUtilQualifiedClassName (), myDiagram);
>         internalGenerateJavaClass (myEmitters.getEditorGenerator (), myEditorGen.getEditor ().getQualifiedClassName (), myEditorGen.getEditor ());
>         internalGenerateJavaClass (myEmitters.getPropertySourceProviderGenerator (), myDiagram.getPropertyProviderQualifiedClassName (), myDiagram);
91c97
<             doGenerateJavaClass (myEmitters.getPaletteFactoryGenerator (), myDiagram.getPalette ().getFactoryQualifiedClassName (), myDiagram);
---
>             internalGenerateJavaClass (myEmitters.getPaletteFactoryGenerator (), myDiagram.getPalette ().getFactoryQualifiedClassName (), myDiagram);
93,95c99,101
<         doGenerateJavaClass (myEmitters.getUpdatableEditPartGenerator (), myDiagram.getEditPartsPackageName (), "IUpdatableEditPart", myDiagram);
<         doGenerateJavaClass (myEmitters.getEditPartFactoryGenerator (), myDiagram.getEditPartFactoryQualifiedClassName (), myDiagram);
<         doGenerateJavaClass (myEmitters.getDiagramEditPartGenerator (), myDiagram.getEditPartQualifiedClassName (), myDiagram);
---
>         internalGenerateJavaClass (myEmitters.getUpdatableEditPartGenerator (), myDiagram.getEditPartsPackageName (), "IUpdatableEditPart", myDiagram);
>         internalGenerateJavaClass (myEmitters.getEditPartFactoryGenerator (), myDiagram.getEditPartFactoryQualifiedClassName (), myDiagram);
>         internalGenerateJavaClass (myEmitters.getDiagramEditPartGenerator (), myDiagram.getEditPartQualifiedClassName (), myDiagram);
100c106
<                 doGenerateJavaClass (myEmitters.getNodeEditPartGenerator (), next.getEditPartQualifiedClassName (), next);
---
>                 internalGenerateJavaClass (myEmitters.getNodeEditPartGenerator (), next.getEditPartQualifiedClassName (), next);
104,105c110,111
<                     doGenerateJavaClass (myEmitters.getNodeLabelEditPartGenerator (), label.getEditPartQualifiedClassName (), label);
<                     doGenerateJavaClass (myEmitters.getLabelViewFactoryGenerator (), label.getNotationViewFactoryQualifiedClassName (), label);
---
>                     internalGenerateJavaClass (myEmitters.getNodeLabelEditPartGenerator (), label.getEditPartQualifiedClassName (), label);
>                     internalGenerateJavaClass (myEmitters.getLabelViewFactoryGenerator (), label.getNotationViewFactoryQualifiedClassName (), label);
107c113
<                 doGenerateJavaClass (myEmitters.getNodeViewFactoryGenerator (), next.getNotationViewFactoryQualifiedClassName (), next);
---
>                 internalGenerateJavaClass (myEmitters.getNodeViewFactoryGenerator (), next.getNotationViewFactoryQualifiedClassName (), next);
109,110c115,116
<                 doGenerateJavaClass (myEmitters.getChildNodeEditPartGenerator (), next.getEditPartQualifiedClassName (), next);
<                 doGenerateJavaClass (myEmitters.getLabelViewFactoryGenerator (), next.getNotationViewFactoryQualifiedClassName (), next);
---
>                 internalGenerateJavaClass (myEmitters.getChildNodeEditPartGenerator (), next.getEditPartQualifiedClassName (), next);
>                 internalGenerateJavaClass (myEmitters.getLabelViewFactoryGenerator (), next.getNotationViewFactoryQualifiedClassName (), next);
113c119
<         doGenerateJavaClass (myEmitters.getAbstractParserGenerator (), myDiagram.getAbstractParserQualifiedClassName (), myDiagram);
---
>         internalGenerateJavaClass (myEmitters.getAbstractParserGenerator (), myDiagram.getAbstractParserQualifiedClassName (), myDiagram);
117c123
<             doGenerateJavaClass (myEmitters.getLinkEditPartGenerator (), next.getEditPartQualifiedClassName (), next);
---
>             internalGenerateJavaClass (myEmitters.getLinkEditPartGenerator (), next.getEditPartQualifiedClassName (), next);
121,122c127,128
<                 doGenerateJavaClass (myEmitters.getLinkLabelEditPartGenerator (), label.getEditPartQualifiedClassName (), label);
<                 doGenerateJavaClass (myEmitters.getLabelViewFactoryGenerator (), label.getNotationViewFactoryQualifiedClassName (), label);
---
>                 internalGenerateJavaClass (myEmitters.getLinkLabelEditPartGenerator (), label.getEditPartQualifiedClassName (), label);
>                 internalGenerateJavaClass (myEmitters.getLabelViewFactoryGenerator (), label.getNotationViewFactoryQualifiedClassName (), label);
124c130
<             doGenerateJavaClass (myEmitters.getLinkViewFactoryGenerator (), next.getNotationViewFactoryQualifiedClassName (), next);
---
>             internalGenerateJavaClass (myEmitters.getLinkViewFactoryGenerator (), next.getNotationViewFactoryQualifiedClassName (), next);
129,130c135,140
<             doGenerateJavaClass (myEmitters.getCompartmentEditPartGenerator (), next.getEditPartQualifiedClassName (), next);
<             doGenerateJavaClass (myEmitters.getCompartmentViewFactoryGenerator (), next.getNotationViewFactoryQualifiedClassName (), next);
---
>             internalGenerateJavaClass (myEmitters.getCompartmentEditPartGenerator (), next.getEditPartQualifiedClassName (), next);
>             internalGenerateJavaClass (myEmitters.getCompartmentViewFactoryGenerator (), next.getNotationViewFactoryQualifiedClassName (), next);
>         }
>         internalGenerateJavaClass (myEmitters.getDiagramViewFactoryGenerator (), myDiagram.getNotationViewFactoryQualifiedClassName (), myDiagram);
>         internalGenerateJavaClass (myEmitters.getDomainElementInitializerGenerator (), myDiagram.getNotationViewFactoriesPackageName (), "DomainElementInitializer", myDiagram);
>         internalGenerateJavaClass (myEmitters.getVisualIDRegistryGenerator (), myDiagram.getVisualIDRegistryQualifiedClassName (), myDiagram);
132,134c142,149
<         doGenerateJavaClass (myEmitters.getDiagramViewFactoryGenerator (), myDiagram.getNotationViewFactoryQualifiedClassName (), myDiagram);
<         doGenerateJavaClass (myEmitters.getDomainElementInitializerGenerator (), myDiagram.getNotationViewFactoriesPackageName (), "DomainElementInitializer", myDiagram);
<         doGenerateJavaClass (myEmitters.getVisualIDRegistryGenerator (), myDiagram.getVisualIDRegistryQualifiedClassName (), myDiagram);
---
> 
>     private void internalGenerateJavaClass (TextEmitter emitter, String qualifiedClassName, Object argument) throws InterruptedException {
>         internalGenerateJavaClass (emitter, CodeGenUtil.getPackageName (qualifiedClassName), CodeGenUtil.getSimpleClassName (qualifiedClassName), argument);
>     }
> 
>     private void internalGenerateJavaClass (TextEmitter emitter, String packageName, String className, Object argument) throws InterruptedException {
>         ImportUtil importUtil = new ImportUtil (packageName, className);
>         doGenerateJavaClass (emitter, packageName, className, new Object [] {new Object [] {argument, importUtil}});
