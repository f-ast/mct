1c1,5
< package org.eclipse.gmf.internal.map.util;
---
> package org.eclipse.gmf.internal.codegen.util;
> 
> import java.util.ArrayList;
> 
> import java.util.Collection;
5c9
< import java.util.Map;
---
> import java.util.LinkedHashMap;
7c11
< import org.eclipse.emf.common.util.EList;
---
> import java.util.Map;
19c23,25
< import org.eclipse.gmf.internal.common.migrate.MigrationDelegateImpl;
---
> import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;
> 
> import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
21c27
< import org.eclipse.gmf.mappings.FeatureLabelMapping;
---
> import org.eclipse.gmf.codegen.gmfgen.GenAuditContainer;
23c29
< import org.eclipse.gmf.mappings.FeatureValueSpec;
---
> import org.eclipse.gmf.codegen.gmfgen.GenAuditRoot;
25c31
< import org.eclipse.gmf.mappings.GMFMapFactory;
---
> import org.eclipse.gmf.codegen.gmfgen.GenAuditRule;
27c33
< import org.eclipse.gmf.mappings.GMFMapPackage;
---
> import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
29c35
< import org.eclipse.gmf.mappings.LabelMapping;
---
> import org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter;
31c37
< import org.eclipse.gmf.mappings.Language;
---
> import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
33c39
< import org.eclipse.gmf.mappings.MappingEntry;
---
> import org.eclipse.gmf.codegen.gmfgen.GenPlugin;
35c41
< import org.eclipse.gmf.mappings.ValueExpression;
---
> import org.eclipse.gmf.internal.common.migrate.MigrationDelegateImpl;
38,43c44,51
<     private Map < LabelMapping, FeatureLabelMapping > myLabelMappingMigrations;
<     private EAttribute myLabelMapping_ViewPattern;
<     private EAttribute myLabelMapping_EditPattern;
<     private EReference myLabelMapping_Features;
<     private EAttribute myFeatureValueSpec_Body;
<     private EAttribute myFeatureValueSpec_Language;
---
>     private EReference myGenAuditContainer_ChildContainers;
>     private EReference myGenAuditRoot_Audits;
>     private EAttribute myGenAuditRoot_Id;
>     private EAttribute myGenAuditRoot_Name;
>     private EAttribute myGenAuditRoot_Description;
>     private GenAuditContainer myRootContainer;
>     private Map < GenExpressionInterpreter, Collection < String > > myRequiredPlugins;
>     private GenExpressionProviderContainer myProvidersContainer;
49,52c57,60
<         registerNarrowedAbstractType ("FeatureInitializer", GMFMapPackage.eINSTANCE.getFeatureValueSpec ());
<         myLabelMapping_Features = (EReference) EcoreUtil.copy (GMFMapPackage.eINSTANCE.getFeatureLabelMapping_Features ());
<         myLabelMapping_ViewPattern = (EAttribute) EcoreUtil.copy (GMFMapPackage.eINSTANCE.getFeatureLabelMapping_ViewPattern ());
<         myLabelMapping_EditPattern = (EAttribute) EcoreUtil.copy (GMFMapPackage.eINSTANCE.getFeatureLabelMapping_EditPattern ());
---
>         registerDeletedAttributes (GMFGenPackage.eINSTANCE.getEditorCandies (), "diagramFileCreatorClassName", "preferenceInitializerClassName");
>         registerDeletedAttributes (GMFGenPackage.eINSTANCE.getProviderClassNames (), "abstractParserClassName", "structuralFeatureParserClassName", "structuralFeaturesParserClassName", "paletteProviderClassName", "paletteProviderPriority", "propertyProviderClassName", "propertyProviderPriority");
>         registerDeletedAttributes (GMFGenPackage.eINSTANCE.getEditPartCandies (), "referenceConnectionEditPolicyClassName", "externalNodeLabelHostLayoutEditPolicyClassName");
>         registerDeletedAttributes (GMFGenPackage.eINSTANCE.getTypeLinkModelFacet (), "createCommandClassName");
55,60c63,70
<             renamings.put (myLabelMapping_ViewPattern.getName (), myLabelMapping_ViewPattern);
<             renamings.put (myLabelMapping_EditPattern.getName (), myLabelMapping_EditPattern);
<             renamings.put (myLabelMapping_Features.getName (), myLabelMapping_Features);
<             registerRenamedAttributes (GMFMapPackage.eINSTANCE.getLabelMapping (), renamings);
<         } myFeatureValueSpec_Body = (EAttribute) EcoreUtil.copy (GMFMapPackage.eINSTANCE.getValueExpression_Body ());
<         myFeatureValueSpec_Language = (EAttribute) EcoreUtil.copy (GMFMapPackage.eINSTANCE.getValueExpression_Language ());
---
>             renamings.put ("requiredPluginIDs", GMFGenPackage.eINSTANCE.getGenPlugin_RequiredPlugins ());
>             registerRenamedAttributes (GMFGenPackage.eINSTANCE.getGenExpressionInterpreter (), renamings);
>         } {
>             Map < String, EStructuralFeature > renamings = new HashMap < String, EStructuralFeature > ();
>             renamings.put ("metaFeature", GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet_MetaFeatures ());
>             registerRenamedAttributes (GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet (), renamings);
>         } registerRenamedType ("CompositeFeatureLabelModelFacet", GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet ());
>         myGenAuditContainer_ChildContainers = createNewReference ("childContainers", GMFGenPackage.eINSTANCE.getGenAuditContainer (), true);
63,66c73,90
<             renamings.put (myFeatureValueSpec_Body.getName (), myFeatureValueSpec_Body);
<             renamings.put (myFeatureValueSpec_Language.getName (), myFeatureValueSpec_Language);
<             registerRenamedAttributes (GMFMapPackage.eINSTANCE.getFeatureValueSpec (), renamings);
<         } myLabelMappingMigrations = null;
---
>             renamings.put (myGenAuditContainer_ChildContainers.getName (), myGenAuditContainer_ChildContainers);
>             registerRenamedAttributes (GMFGenPackage.eINSTANCE.getGenAuditContainer (), renamings);
>         } myGenAuditRoot_Id = (EAttribute) EcoreUtil.copy (GMFGenPackage.eINSTANCE.getGenAuditContainer_Id ());
>         myGenAuditRoot_Name = (EAttribute) EcoreUtil.copy (GMFGenPackage.eINSTANCE.getGenAuditContainer_Name ());
>         myGenAuditRoot_Description = (EAttribute) EcoreUtil.copy (GMFGenPackage.eINSTANCE.getGenAuditContainer_Description ());
>         myGenAuditRoot_Audits = createNewReference ("audits", GMFGenPackage.eINSTANCE.getGenAuditRule (), true);
>         {
>             Map < String, EStructuralFeature > renamings = new HashMap < String, EStructuralFeature > ();
>             renamings.put (myGenAuditRoot_Audits.getName (), myGenAuditRoot_Audits);
>             renamings.put (myGenAuditContainer_ChildContainers.getName (), myGenAuditContainer_ChildContainers);
>             renamings.put (myGenAuditRoot_Id.getName (), myGenAuditRoot_Id);
>             renamings.put (myGenAuditRoot_Name.getName (), myGenAuditRoot_Name);
>             renamings.put (myGenAuditRoot_Description.getName (), myGenAuditRoot_Description);
>             registerRenamedAttributes (GMFGenPackage.eINSTANCE.getGenAuditRoot (), renamings);
>         } registerNarrowedAbstractType ("GenFeatureInitializer", GMFGenPackage.eINSTANCE.getGenFeatureValueSpec ());
>         myRootContainer = null;
>         myProvidersContainer = null;
>         myRequiredPlugins = null;
71,99c95,129
<         if (myLabelMapping_ViewPattern.equals (feature)) {
<             LabelMapping mapping = (LabelMapping) object;
<             String viewPattern = (String) value;
<             FeatureLabelMapping migratedMapping = saveFeatureLabelMappingFor (mapping);
<             migratedMapping.setViewPattern (viewPattern);
<             fireMigrationApplied (true);
<         } else if (myLabelMapping_EditPattern.equals (feature)) {
<             LabelMapping mapping = (LabelMapping) object;
<             String editPattern = (String) value;
<             FeatureLabelMapping migratedMapping = saveFeatureLabelMappingFor (mapping);
<             migratedMapping.setViewPattern (editPattern);
<             fireMigrationApplied (true);
<         } else if (myLabelMapping_Features.equals (feature)) {
<             LabelMapping mapping = (LabelMapping) object;
<             EAttribute attribute = (EAttribute) value;
<             FeatureLabelMapping migratedMapping = saveFeatureLabelMappingFor (mapping);
<             migratedMapping.getFeatures ().add (attribute);
<             fireMigrationApplied (true);
<         } else if (myFeatureValueSpec_Body.equals (feature)) {
<             FeatureValueSpec featureRef = (FeatureValueSpec) object;
<             String body = (String) value;
<             ValueExpression constraint = getOrCreateValueExpression (featureRef);
<             constraint.setBody (body);
<             fireMigrationApplied (true);
<         } else if (myFeatureValueSpec_Language.equals (feature)) {
<             FeatureValueSpec featureRef = (FeatureValueSpec) object;
<             ValueExpression constraint = getOrCreateValueExpression (featureRef);
<             Language lang = Language.get ((String) value);
<             constraint.setLanguage (lang);
---
>         if (GMFGenPackage.eINSTANCE.getGenPlugin_RequiredPlugins ().equals (feature) && object instanceof GenExpressionInterpreter) {
>             GenExpressionInterpreter expressionInterpreter = (GenExpressionInterpreter) object;
>             String requiredPlugin = (String) value;
>             saveRequiredPlugin (expressionInterpreter, requiredPlugin);
>         } else if (myGenAuditRoot_Id.equals (feature)) {
>             GenAuditRoot root = (GenAuditRoot) object;
>             String id = (String) value;
>             GenAuditContainer rootContainer = getOrCreateRootContainerOnce (root);
>             rootContainer.setId (id);
>             fireMigrationApplied (true);
>         } else if (myGenAuditRoot_Name.equals (feature)) {
>             GenAuditRoot root = (GenAuditRoot) object;
>             String name = (String) value;
>             GenAuditContainer rootContainer = getOrCreateRootContainerOnce (root);
>             rootContainer.setName (name);
>             fireMigrationApplied (true);
>         } else if (myGenAuditRoot_Description.equals (feature)) {
>             GenAuditRoot root = (GenAuditRoot) object;
>             String description = (String) value;
>             GenAuditContainer rootContainer = getOrCreateRootContainerOnce (root);
>             rootContainer.setDescription (description);
>             fireMigrationApplied (true);
>         } else if (myGenAuditContainer_ChildContainers.equals (feature) && object instanceof GenAuditRoot) {
>             GenAuditRoot root = (GenAuditRoot) object;
>             GenAuditContainer container = (GenAuditContainer) value;
>             if (myRootContainer != null) {
>                 container.getPath ().add (myRootContainer);
>             }
>             root.getCategories ().add (container);
>             fireMigrationApplied (true);
>         } else if (myGenAuditRoot_Audits.equals (feature) && object instanceof GenAuditRoot) {
>             GenAuditRoot root = (GenAuditRoot) object;
>             GenAuditRule rule = (GenAuditRule) value;
>             if (myRootContainer != null) {
>                 rule.setCategory (myRootContainer);
100a131,144
>             }
>             root.getRules ().add (rule);
>         } else if (myGenAuditContainer_ChildContainers.equals (feature) && object instanceof GenAuditContainer) {
>             GenAuditContainer parent = (GenAuditContainer) object;
>             GenAuditContainer container = (GenAuditContainer) value;
>             container.getPath ().addAll (parent.getPath ());
>             container.getPath ().add (parent);
>             getOrCreateRoot (parent).getCategories ().add (container);
>             fireMigrationApplied (true);
>         } else if (GMFGenPackage.eINSTANCE.getGenAuditContainer_Audits ().equals (feature) && object instanceof GenAuditContainer) {
>             GenAuditContainer container = (GenAuditContainer) object;
>             GenAuditRule rule = (GenAuditRule) value;
>             rule.setCategory (container);
>             getOrCreateRoot (container).getRules ().add (rule);
108,119c152,154
<     private ValueExpression getOrCreateValueExpression (FeatureValueSpec featureRef) {
<         ValueExpression constraint = featureRef.getValue ();
<         if (constraint == null) {
<             constraint = GMFMapFactory.eINSTANCE.createValueExpression ();
<             featureRef.setValue (constraint);
<         }
<         return constraint;
<     }
< 
<     private FeatureLabelMapping saveFeatureLabelMappingFor (LabelMapping labelMapping) {
<         if (myLabelMappingMigrations == null) {
<             myLabelMappingMigrations = new HashMap < LabelMapping, FeatureLabelMapping > ();
---
>     private void saveRequiredPlugin (GenExpressionInterpreter expressionProvider, String requiredPlugin) {
>         if (myRequiredPlugins == null) {
>             myRequiredPlugins = new LinkedHashMap < GenExpressionInterpreter, Collection < String > > ();
121,124c156,158
<         FeatureLabelMapping migrated = myLabelMappingMigrations.get (labelMapping);
<         if (migrated == null) {
<             migrated = GMFMapFactory.eINSTANCE.createFeatureLabelMapping ();
<             myLabelMappingMigrations.put (labelMapping, migrated);
---
>         Collection < String > requiredPlugins = myRequiredPlugins.get (expressionProvider);
>         if (requiredPlugins == null) {
>             requiredPlugins = new ArrayList < String > ();
126c160,161
<         return migrated;
---
>         requiredPlugins.add (requiredPlugin);
>         myRequiredPlugins.put (expressionProvider, requiredPlugins);
129,130c164,165
<     private Map < LabelMapping, FeatureLabelMapping > getSavedLabelMappingMigrations () {
<         return myLabelMappingMigrations;
---
>     private Map < GenExpressionInterpreter, Collection < String > > getSavedRequiredPlugins () {
>         return myRequiredPlugins;
135c170
<         if (getSavedLabelMappingMigrations () == null) {
---
>         if (getSavedRequiredPlugins () == null) {
138,147c173,191
<         for (LabelMapping mapping : getSavedLabelMappingMigrations ().keySet ()) {
<             FeatureLabelMapping migrated = getSavedLabelMappingMigrations ().get (mapping);
<             if (! migrated.getFeatures ().isEmpty ()) {
<                 MappingEntry entry = mapping.getMapEntry ();
<                 EList < LabelMapping > labelMappings = entry.getLabelMappings ();
<                 int originalIndex = labelMappings.indexOf (mapping);
<                 if (originalIndex != - 1) {
<                     migrated.setDiagramLabel (mapping.getDiagramLabel ());
<                     if (mapping.isReadOnly ()) {
<                         migrated.setReadOnly (true);
---
>         for (GenExpressionInterpreter expressionProvider : getSavedRequiredPlugins ().keySet ()) {
>             GenExpressionProviderContainer container = expressionProvider.getContainer ();
>             if (container == null) {
>                 container = getOrCreateParenlessProvidersContainerOnce (expressionProvider);
>                 container.getProviders ().add (expressionProvider);
>             }
>             GenEditorGenerator editor = container.getEditorGen ();
>             if (editor == null) {
>                 editor = GMFGenFactory.eINSTANCE.createGenEditorGenerator ();
>                 container.eResource ().getContents ().add (editor);
>                 editor.setExpressionProviders (container);
>             }
>             GenPlugin plugin = editor.getPlugin ();
>             if (plugin == null) {
>                 plugin = GMFGenFactory.eINSTANCE.createGenPlugin ();
>                 editor.setPlugin (plugin);
>             }
>             plugin.getRequiredPlugins ().addAll (getSavedRequiredPlugins ().get (expressionProvider));
>             fireMigrationApplied (true);
149c193
<                     labelMappings.set (originalIndex, migrated);
---
>         getSavedRequiredPlugins ().clear ();
150a195,218
> 
>     private GenExpressionProviderContainer getOrCreateParenlessProvidersContainerOnce (GenExpressionInterpreter expressionProvider) {
>         if (myProvidersContainer == null) {
>             myProvidersContainer = GMFGenFactory.eINSTANCE.createGenExpressionProviderContainer ();
>             expressionProvider.eResource ().getContents ().add (myProvidersContainer);
>         }
>         return myProvidersContainer;
>     }
> 
>     private GenAuditContainer getOrCreateRootContainerOnce (GenAuditRoot root) {
>         if (myRootContainer == null) {
>             myRootContainer = GMFGenFactory.eINSTANCE.createGenAuditContainer ();
>             root.getCategories ().add (myRootContainer);
>         }
>         return myRootContainer;
>     }
> 
>     private GenAuditRoot getOrCreateRoot (GenAuditContainer auditContainer) {
>         GenAuditRoot result = auditContainer.getRoot ();
>         if (result == null) {
>             result = GMFGenFactory.eINSTANCE.createGenAuditRoot ();
>             if (auditContainer.eContainer () == null) {
>                 auditContainer.eResource ().getContents ().add (result);
>                 fireMigrationApplied (true);
151a220
>             result.getCategories ().add (auditContainer);
152a222
>         return result;
