8a9,14
> import org.eclipse.jface.text.IDocument;
> 
> import org.eclipse.jface.text.rules.ICharacterScanner;
> 
> import org.eclipse.jface.text.rules.IPartitionTokenScanner;
> 
17c23
< import org.eclipse.jface.text.rules.RuleBasedPartitionScanner;
---
> import org.eclipse.jface.text.rules.RuleBasedScanner;
21c27
< public class XpandPartitionScanner extends RuleBasedPartitionScanner {
---
> public class XpandPartitionScanner extends RuleBasedScanner implements IPartitionTokenScanner {
29a36,45
>         rules.add (new MultiLineRule (XpandTokens.LT + XpandTokens.REM, XpandTokens.ENDREM + '-' + XpandTokens.RT, comment) {
> 
>             @Override
>             public IToken evaluate (ICharacterScanner scanner) {
>                 return super.evaluate (scanner);
>             }
> 
>         }
> 
>         );
31c47,80
<         setPredicateRules (rules.toArray (new IPredicateRule [rules.size ()]));
---
>         setRules (rules.toArray (new IPredicateRule [rules.size ()]));
>     }
> 
>     public void setPartialRange (IDocument document, int offset, int length, String contentType, int partitionOffset) {
>         if (partitionOffset > - 1) {
>             int delta = offset - partitionOffset;
>             if (delta > 0) {
>                 super.setRange (document, partitionOffset, length + delta);
>                 return;
>             }
>         } else {
>             System.err.println ("partitionOffset <= -1");
>         }
>         super.setRange (document, offset, length);
>     }
> 
>     @Override
>     public IToken nextToken () {
>         fTokenOffset = fOffset;
>         fColumn = UNDEFINED;
>         if (fRules != null) {
>             for (int i = 0;
>             i < fRules.length; i ++) {
>                 IToken token = (fRules [i].evaluate (this));
>                 if (! token.isUndefined ()) {
>                     return token;
>                 } else {
>                     fOffset = fTokenOffset;
>                 }
>             }
>         }
>         if (read () == EOF) return Token.EOF;
> 
>         return fDefaultReturnToken;
