3,4d2
< import java.util.Collection;
< 
6a5,10
> import java.util.List;
> 
> import org.eclipse.core.commands.ExecutionException;
> 
> import org.eclipse.core.runtime.IAdaptable;
> 
9c13
< import org.eclipse.gmf.runtime.common.core.command.CMValidator;
---
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
13,14d16
< import org.eclipse.gmf.runtime.common.core.command.ICommand;
< 
21c23
< import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;
---
> import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
27,35c29
< public class CreateCommand extends AbstractModelCommand {
<     private class CreateValidator extends CMValidator {
< 
<         public boolean okToEdit (ICommand command) {
<             return ((CreateCommand) command).isPersisted () ? super.okToEdit (command) : true;
<         }
< 
<     }
< 
---
> public class CreateCommand extends AbstractTransactionalCommand {
39,40c33,34
<     public CreateCommand (CreateViewRequest.ViewDescriptor viewDescriptor, View containerView) {
<         super (DiagramUIMessages.CreateCommand_Label, containerView);
---
>     public CreateCommand (TransactionalEditingDomain editingDomain, CreateViewRequest.ViewDescriptor viewDescriptor, View containerView) {
>         super (editingDomain, DiagramUIMessages.CreateCommand_Label, getWorkspaceFiles (containerView));
45c39
<         setResult (newOKCommandResult (viewDescriptor));
---
>         setResult (CommandResult.newOKCommandResult (viewDescriptor));
56c50
<     protected CommandResult doExecute (IProgressMonitor progressMonitor) {
---
>     protected CommandResult doExecuteWithResult (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
60c54
<         return newOKCommandResult (viewDescriptor);
---
>         return CommandResult.newOKCommandResult (viewDescriptor);
63c57
<     public boolean isExecutable () {
---
>     public boolean canExecute () {
71,76c65,66
<     public CMValidator getValidator () {
<         return new CreateValidator ();
<     }
< 
<     public Collection getAffectedObjects () {
<         if (isPersisted ()) return super.getAffectedObjects ();
---
>     public List getAffectedFiles () {
>         if (isPersisted ()) return super.getAffectedFiles ();
