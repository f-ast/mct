2a3,8
> import java.util.Collection;
> 
> import java.util.HashMap;
> 
> import java.util.Map;
> 
4a11,16
> import org.eclipse.core.resources.IFile;
> 
> import org.eclipse.core.runtime.IStatus;
> 
> import org.eclipse.core.runtime.Status;
> 
6a19,20
> import org.eclipse.emf.transaction.Transaction;
> 
8a23,26
> import org.eclipse.emf.transaction.impl.InternalTransactionalEditingDomain;
> 
> import org.eclipse.emf.transaction.util.TransactionUtil;
> 
10a29,36
> import org.eclipse.emf.workspace.util.WorkspaceValidateEditSupport;
> 
> import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator;
> 
> import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator.ISyncExecHelper;
> 
> import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator.SyncExecHelper;
> 
15a42,47
>     static public TransactionalSyncExecHelper transactionalSyncExecHelper = new TransactionalSyncExecHelper ();
> 
>     static {
>         SyncExecHelper.setInstance (transactionalSyncExecHelper);
>     }
> 
46c78
<     protected void configure (TransactionalEditingDomain domain) {
---
>     protected void configure (final TransactionalEditingDomain domain) {
53a86,133
>         TransactionalEditingDomain.DefaultOptions options = (TransactionalEditingDomain.DefaultOptions) (TransactionUtil.getAdapter (domain, TransactionalEditingDomain.DefaultOptions.class));
>         Map < Object, Object > aMap = new HashMap < Object, Object > ();
>         aMap.put (Transaction.OPTION_VALIDATE_EDIT, new WorkspaceValidateEditSupport () {
> 
>             @SuppressWarnings("unchecked")
>             protected IStatus doValidateEdit (Transaction transaction, Collection resources, Object context) {
>                 return GMFEditingDomainFactory.transactionalSyncExecHelper.approveFileModification (getFiles (resources), domain);
>             }
> 
>         }
> 
>         );
>         options.setDefaultTransactionOptions (aMap);
>     }
> 
>     public static class TransactionalSyncExecHelper implements ISyncExecHelper {
>         private final ThreadLocal < TransactionalEditingDomain > domain = new ThreadLocal < TransactionalEditingDomain > ();
> 
>         private void setDomain (TransactionalEditingDomain domain) {
>             this.domain.set (domain);
>         }
> 
>         public IStatus approveFileModification (IFile [] files, TransactionalEditingDomain transactionalDomain) {
>             setDomain (transactionalDomain);
>             IStatus status = Status.OK_STATUS;
>             try {
>                 status = FileModificationValidator.approveFileModification (files);
>             } finally {
>                 setDomain (null);
>             }
>             return status;
>         }
> 
>         public Runnable safeRunnable (Runnable runnable) {
>             if (isTransactionOnCurrentThread ()) {
>                 return domain.get ().createPrivilegedRunnable (runnable);
>             }
>             return null;
>         }
> 
>         private boolean isTransactionOnCurrentThread () {
>             if (domain.get () != null) {
>                 Transaction tx = ((InternalTransactionalEditingDomain) domain.get ()).getActiveTransaction ();
>                 return ((tx != null) && (tx.getOwner () == Thread.currentThread ()));
>             }
>             return false;
>         }
> 
