8a9,10
> import org.eclipse.emf.ecore.EPackage;
> 
10a13,16
> import org.eclipse.emf.ecore.plugin.EcorePlugin;
> 
> import org.eclipse.gmf.gmfgraph.BasicFont;
> 
15c21
< import org.eclipse.gmf.gmfgraph.ColorStyle;
---
> import org.eclipse.gmf.gmfgraph.ColorConstants;
18a25,26
> import org.eclipse.gmf.gmfgraph.CompoundBorder;
> 
20a29,32
> import org.eclipse.gmf.gmfgraph.ConstantColor;
> 
> import org.eclipse.gmf.gmfgraph.CustomBorder;
> 
26a39,40
> import org.eclipse.gmf.gmfgraph.Dimension;
> 
44a59,60
> import org.eclipse.gmf.gmfgraph.Insets;
> 
48a65,66
> import org.eclipse.gmf.gmfgraph.LineBorder;
> 
50a69,70
> import org.eclipse.gmf.gmfgraph.MarginBorder;
> 
64a85,86
> import org.eclipse.gmf.gmfgraph.RGBColor;
> 
69,70d90
< import org.eclipse.gmf.gmfgraph.SizeStyle;
< 
72a93,104
>     public static GMFGraphFactory init () {
>         try {
>             GMFGraphFactory theGMFGraphFactory = (GMFGraphFactory) EPackage.Registry.INSTANCE.getEFactory ("http://www.eclipse.org/gmf/2005/GraphicalDefinition");
>             if (theGMFGraphFactory != null) {
>                 return theGMFGraphFactory;
>             }
>         } catch (Exception exception) {
>             EcorePlugin.INSTANCE.log (exception);
>         }
>         return new GMFGraphFactoryImpl ();
>     }
> 
123,128c155,160
<             case GMFGraphPackage.COLOR_STYLE :
<                 return createColorStyle ();
<             case GMFGraphPackage.SIZE_STYLE :
<                 return createSizeStyle ();
<             case GMFGraphPackage.FONT_STYLE :
<                 return createFontStyle ();
---
>             case GMFGraphPackage.RGB_COLOR :
>                 return createRGBColor ();
>             case GMFGraphPackage.CONSTANT_COLOR :
>                 return createConstantColor ();
>             case GMFGraphPackage.BASIC_FONT :
>                 return createBasicFont ();
130a163,174
>             case GMFGraphPackage.DIMENSION :
>                 return createDimension ();
>             case GMFGraphPackage.INSETS :
>                 return createInsets ();
>             case GMFGraphPackage.LINE_BORDER :
>                 return createLineBorder ();
>             case GMFGraphPackage.MARGIN_BORDER :
>                 return createMarginBorder ();
>             case GMFGraphPackage.COMPOUND_BORDER :
>                 return createCompoundBorder ();
>             case GMFGraphPackage.CUSTOM_BORDER :
>                 return createCustomBorder ();
137a182,185
>             case GMFGraphPackage.COLOR_CONSTANTS :
>                 return createColorConstantsFromString (eDataType, initialValue);
>             case GMFGraphPackage.FONT_STYLE :
>                 return createFontStyleFromString (eDataType, initialValue);
139,150c187,190
<                 {
<                     Direction result = Direction.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
< 
<                     return result;
<                 } case GMFGraphPackage.LINE_KIND :
<                 {
<                     LineKind result = LineKind.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
< 
<                     return result;
<                 } default :
---
>                 return createDirectionFromString (eDataType, initialValue);
>             case GMFGraphPackage.LINE_KIND :
>                 return createLineKindFromString (eDataType, initialValue);
>             default :
156a197,200
>             case GMFGraphPackage.COLOR_CONSTANTS :
>                 return convertColorConstantsToString (eDataType, instanceValue);
>             case GMFGraphPackage.FONT_STYLE :
>                 return convertFontStyleToString (eDataType, instanceValue);
158c202
<                 return instanceValue == null ? null : instanceValue.toString ();
---
>                 return convertDirectionToString (eDataType, instanceValue);
160c204
<                 return instanceValue == null ? null : instanceValue.toString ();
---
>                 return convertLineKindToString (eDataType, instanceValue);
276,278c320,322
<     public ColorStyle createColorStyle () {
<         ColorStyleImpl colorStyle = new ColorStyleImpl ();
<         return colorStyle;
---
>     public RGBColor createRGBColor () {
>         RGBColorImpl rgbColor = new RGBColorImpl ();
>         return rgbColor;
281,283c325,327
<     public SizeStyle createSizeStyle () {
<         SizeStyleImpl sizeStyle = new SizeStyleImpl ();
<         return sizeStyle;
---
>     public ConstantColor createConstantColor () {
>         ConstantColorImpl constantColor = new ConstantColorImpl ();
>         return constantColor;
286,288c330,332
<     public FontStyle createFontStyle () {
<         FontStyleImpl fontStyle = new FontStyleImpl ();
<         return fontStyle;
---
>     public BasicFont createBasicFont () {
>         BasicFontImpl basicFont = new BasicFontImpl ();
>         return basicFont;
295a340,413
>     public Dimension createDimension () {
>         DimensionImpl dimension = new DimensionImpl ();
>         return dimension;
>     }
> 
>     public Insets createInsets () {
>         InsetsImpl insets = new InsetsImpl ();
>         return insets;
>     }
> 
>     public LineBorder createLineBorder () {
>         LineBorderImpl lineBorder = new LineBorderImpl ();
>         return lineBorder;
>     }
> 
>     public MarginBorder createMarginBorder () {
>         MarginBorderImpl marginBorder = new MarginBorderImpl ();
>         return marginBorder;
>     }
> 
>     public CompoundBorder createCompoundBorder () {
>         CompoundBorderImpl compoundBorder = new CompoundBorderImpl ();
>         return compoundBorder;
>     }
> 
>     public CustomBorder createCustomBorder () {
>         CustomBorderImpl customBorder = new CustomBorderImpl ();
>         return customBorder;
>     }
> 
>     public ColorConstants createColorConstantsFromString (EDataType eDataType, String initialValue) {
>         ColorConstants result = ColorConstants.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertColorConstantsToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public FontStyle createFontStyleFromString (EDataType eDataType, String initialValue) {
>         FontStyle result = FontStyle.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertFontStyleToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public Direction createDirectionFromString (EDataType eDataType, String initialValue) {
>         Direction result = Direction.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertDirectionToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public LineKind createLineKindFromString (EDataType eDataType, String initialValue) {
>         LineKind result = LineKind.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertLineKindToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
