3,4d2
< import java.util.ArrayList;
< 
7,18d4
< import java.util.HashMap;
< 
< import java.util.HashSet;
< 
< import java.util.Iterator;
< 
< import java.util.List;
< 
< import java.util.Map;
< 
< import java.util.Set;
< 
23,24d8
< import org.eclipse.emf.common.util.BasicEList;
< 
33c17,19
< import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
---
> import org.eclipse.emf.ecore.impl.EObjectImpl;
> 
> import org.eclipse.emf.ecore.util.EObjectResolvingEList;
35c21
< import org.eclipse.emf.ecore.util.EcoreUtil;
---
> import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;
43,51c29
< import org.eclipse.gmf.codegen.gmfgen.GenAuditRule;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenDiagramElementTarget;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenNotationElementTarget;
---
> import org.eclipse.gmf.codegen.gmfgen.GenAuditRoot;
53c31
< import org.eclipse.gmf.codegen.gmfgen.GenRuleTarget;
---
> import org.eclipse.gmf.codegen.gmfgen.GenAuditRule;
55c33
< public class GenAuditContainerImpl extends GenRuleContainerBaseImpl implements GenAuditContainer {
---
> public class GenAuditContainerImpl extends EObjectImpl implements GenAuditContainer {
61a40
>     protected EList path = null;
63d41
<     protected EList childContainers = null;
73,78c51,52
<     public EList getAudits () {
<         if (audits == null) {
<             audits = new EObjectContainmentWithInverseEList (GenAuditRule.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GMFGenPackage.GEN_AUDIT_RULE__CONTAINER);
<         }
<         return audits;
<     }
---
>     public GenAuditRoot getRoot () {
>         if (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT) return null;
80,84c54
<     public EList getChildContainers () {
<         if (childContainers == null) {
<             childContainers = new EObjectContainmentWithInverseEList (GenAuditContainer.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS, GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER);
<         }
<         return childContainers;
---
>         return (GenAuditRoot) eContainer ();
120,156d89
<     public GenAuditContainer getParentContainer () {
<         if (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER) return null;
< 
<         return (GenAuditContainer) eContainer ();
<     }
< 
<     public NotificationChain basicSetParentContainer (GenAuditContainer newParentContainer, NotificationChain msgs) {
<         msgs = eBasicSetContainer ((InternalEObject) newParentContainer, GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER, msgs);
<         return msgs;
<     }
< 
<     public void setParentContainer (GenAuditContainer newParentContainer) {
<         if (newParentContainer != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER && newParentContainer != null)) {
<             if (EcoreUtil.isAncestor (this, newParentContainer)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());
< 
<             NotificationChain msgs = null;
<             if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);
< 
<             if (newParentContainer != null) msgs = ((InternalEObject) newParentContainer).eInverseAdd (this, GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS, GenAuditContainer.class, msgs);
< 
<             msgs = basicSetParentContainer (newParentContainer, msgs);
<             if (msgs != null) msgs.dispatch ();
< 
<         } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER, newParentContainer, newParentContainer));
< 
<     }
< 
<     public EList getAllAuditRules () {
<         return getAllRulesInContainer (this, new BasicEList ());
<     }
< 
<     public EList getAllAuditContainers () {
<         EList containerList = new BasicEList ();
<         containerList.add (this);
<         return getAllChildContainers (this, containerList);
<     }
< 
158,185c91,92
<         GenAuditContainer parent = this;
<         EList elements = new BasicEList ();
<         while (parent != null) {
<             elements.add (0, parent);
<             parent = parent.getParentContainer ();
<         }
<         return elements;
<     }
< 
<     public Map getAllRulesToTargetContextMap () {
<         HashMap ctx2ruleMap = new HashMap ();
<         EList allRules = getAllAuditRules ();
<         for (Iterator it = allRules.iterator ();
<         it.hasNext ();) {
<             GenAuditRule nextRule = (GenAuditRule) it.next ();
<             String key = (nextRule.getTarget () != null) ? nextRule.getTarget ().getClientContextID () : null;
<             if (key != null) {
<                 List rulesInCtx = null;
<                 if (ctx2ruleMap.containsKey (key)) {
<                     rulesInCtx = (List) ctx2ruleMap.get (key);
<                 } else {
<                     rulesInCtx = new BasicEList ();
<                     ctx2ruleMap.put (key, rulesInCtx);
<                 }
<                 rulesInCtx.add (nextRule);
<             }
<         }
<         return ctx2ruleMap;
---
>         if (path == null) {
>             path = new EObjectResolvingEList (GenAuditContainer.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__PATH);
187,198c94
< 
<     public EList getAllTargetedModelPackages () {
<         Set packages = new HashSet ();
<         EList allRules = getAllAuditRules ();
<         for (Iterator it = allRules.iterator ();
<         it.hasNext ();) {
<             GenAuditRule nextRule = (GenAuditRule) it.next ();
<             if (nextRule.getTarget () != null && nextRule.getTarget ().getTargetClass () != null) {
<                 packages.add (nextRule.getTarget ().getTargetClass ().getGenPackage ());
<             }
<         }
<         return new BasicEList (packages);
---
>         return path;
201,254c97,99
<     public boolean hasDiagramElementRule () {
<         EList rules = getAllAuditRules ();
<         for (Iterator it = rules.iterator ();
<         it.hasNext ();) {
<             GenAuditRule nextRule = (GenAuditRule) it.next ();
<             GenRuleTarget target = nextRule.getTarget ();
<             if (target instanceof GenDiagramElementTarget || target instanceof GenNotationElementTarget) {
<                 return true;
<             }
<         }
<         return false;
<     }
< 
<     public List getAllContextSelectorsLocalClassNames () {
<         HashSet < String > classNames = new HashSet < String > ();
<         EList allRules = getAllAuditRules ();
<         for (Iterator it = allRules.iterator ();
<         it.hasNext ();) {
<             String nextClassName = ((GenAuditRule) it.next ()).getContextSelectorLocalClassName ();
<             if (nextClassName != null) {
<                 classNames.add (nextClassName);
<             }
<         }
<         return new ArrayList < String > (classNames);
<     }
< 
<     public List getAllRequiredConstraintAdaptersLocalClassNames () {
<         HashSet < String > classNames = new HashSet < String > ();
<         EList allRules = getAllAuditRules ();
<         for (Iterator it = allRules.iterator ();
<         it.hasNext ();) {
<             GenAuditRule nextAudit = (GenAuditRule) it.next ();
<             if (nextAudit.isRequiresConstraintAdapter ()) {
<                 String nextClassName = nextAudit.getConstraintAdapterLocalClassName ();
<                 if (nextClassName != null) {
<                     classNames.add (nextClassName);
<                 }
<             }
<         }
<         return new ArrayList < String > (classNames);
<     }
< 
<     public List getAllJavaLangAudits () {
<         List < GenAuditRule > audits = new ArrayList < GenAuditRule > ();
<         if (getEditor () == null || getEditor ().getExpressionProviders () == null) {
<             return audits;
<         }
<         GenExpressionProviderContainer exprProviders = getEditor ().getExpressionProviders ();
<         for (Iterator it = getAllAuditRules ().iterator ();
<         it.hasNext ();) {
<             GenAuditRule nextAudit = (GenAuditRule) it.next ();
<             if (nextAudit.getRule () != null && exprProviders.getProvider (nextAudit.getRule ()) instanceof GenJavaExpressionProvider) {
<                 audits.add (nextAudit);
<             }
---
>     public EList getAudits () {
>         if (audits == null) {
>             audits = new EObjectWithInverseResolvingEList (GenAuditRule.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GMFGenPackage.GEN_AUDIT_RULE__CATEGORY);
261c106
<             case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER :
---
>             case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT :
264c109
<                 return basicSetParentContainer ((GenAuditContainer) otherEnd, msgs);
---
>                 return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT, msgs);
267,268d111
<             case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS :
<                 return ((InternalEList) getChildContainers ()).basicAdd (otherEnd, msgs);
275,276c118,119
<             case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER :
<                 return basicSetParentContainer (null, msgs);
---
>             case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT :
>                 return eBasicSetContainer (null, GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT, msgs);
279,280d121
<             case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS :
<                 return ((InternalEList) getChildContainers ()).basicRemove (otherEnd, msgs);
287,288c128,129
<             case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER :
<                 return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS, GenAuditContainer.class, msgs);
---
>             case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT :
>                 return eInternalContainer ().eInverseRemove (this, GMFGenPackage.GEN_AUDIT_ROOT__CATEGORIES, GenAuditRoot.class, msgs);
294a136,137
>             case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT :
>                 return getRoot ();
301,302c144,145
<             case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER :
<                 return getParentContainer ();
---
>             case GMFGenPackage.GEN_AUDIT_CONTAINER__PATH :
>                 return getPath ();
305,306d147
<             case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS :
<                 return getChildContainers ();
322,323c163,165
<             case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER :
<                 setParentContainer ((GenAuditContainer) newValue);
---
>             case GMFGenPackage.GEN_AUDIT_CONTAINER__PATH :
>                 getPath ().clear ();
>                 getPath ().addAll ((Collection) newValue);
329,332d170
<             case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS :
<                 getChildContainers ().clear ();
<                 getChildContainers ().addAll ((Collection) newValue);
<                 return;
348,349c186,187
<             case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER :
<                 setParentContainer ((GenAuditContainer) null);
---
>             case GMFGenPackage.GEN_AUDIT_CONTAINER__PATH :
>                 getPath ().clear ();
354,356d191
<             case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS :
<                 getChildContainers ().clear ();
<                 return;
362a198,199
>             case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT :
>                 return getRoot () != null;
369,370c206,207
<             case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER :
<                 return getParentContainer () != null;
---
>             case GMFGenPackage.GEN_AUDIT_CONTAINER__PATH :
>                 return path != null && ! path.isEmpty ();
373,374d209
<             case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS :
<                 return childContainers != null && ! childContainers.isEmpty ();
393,412d227
<     private static EList getAllRulesInContainer (GenAuditContainer container, EList rules) {
<         rules.addAll (container.getAudits ());
<         for (Iterator it = container.getChildContainers ().iterator ();
<         it.hasNext ();) {
<             GenAuditContainer nextContainer = (GenAuditContainer) it.next ();
<             getAllRulesInContainer (nextContainer, rules);
<         }
<         return rules;
<     }
< 
<     private static EList getAllChildContainers (GenAuditContainer container, EList containers) {
<         containers.addAll (container.getChildContainers ());
<         for (Iterator it = container.getChildContainers ().iterator ();
<         it.hasNext ();) {
<             GenAuditContainer nextContainer = (GenAuditContainer) it.next ();
<             getAllChildContainers (nextContainer, containers);
<         }
<         return containers;
<     }
< 
