11c11
< import org.eclipse.core.runtime.IProgressMonitor;
---
> import org.eclipse.core.commands.ExecutionException;
13c13
< import org.eclipse.core.runtime.IStatus;
---
> import org.eclipse.core.commands.operations.IUndoContext;
15c15
< import org.eclipse.core.runtime.Status;
---
> import org.eclipse.core.commands.operations.IUndoableOperation;
17,19c17
< import org.eclipse.jface.text.ITextSelection;
< 
< import org.eclipse.jface.viewers.IStructuredSelection;
---
> import org.eclipse.core.runtime.IProgressMonitor;
21c19
< import org.eclipse.ui.IWorkbenchPage;
---
> import org.eclipse.core.runtime.IStatus;
23c21
< import org.eclipse.ui.IWorkbenchPart;
---
> import org.eclipse.core.runtime.Status;
54a53,60
> import org.eclipse.jface.text.ITextSelection;
> 
> import org.eclipse.jface.viewers.IStructuredSelection;
> 
> import org.eclipse.ui.IWorkbenchPage;
> 
> import org.eclipse.ui.IWorkbenchPart;
> 
85,87c91,93
<         CompositeCommand compositeCommand = createCompositeCommand (list);
<         getCommandManager ().execute (compositeCommand, progressMonitor);
<         IStatus status = compositeCommand.getCommandResult ().getStatus ();
---
>         IUndoableOperation operation = createCompositeCommand (list);
>         try {
>             IStatus status = getOperationHistory ().execute (operation, progressMonitor, null);
90a97,100
>         } catch (ExecutionException e) {
>             Trace.catching (CommonUIActionPlugin.getDefault (), CommonUIActionDebugOptions.EXCEPTIONS_CATCHING, getClass (), "doRun", e);
>             Log.error (CommonUIActionPlugin.getDefault (), CommonUIActionStatusCodes.ACTION_FAILURE, e.getLocalizedMessage (), e);
>         }
128c138,151
<         return new CompositeCommand (getLabel (), commands);
---
>         CompositeCommand result = new CompositeCommand (getLabel (), commands);
>         IUndoContext undoContext = getUndoContext ();
>         if (undoContext != null) {
>             result.addContext (undoContext);
>         }
>         return result;
>     }
> 
>     protected IUndoContext getUndoContext () {
>         IWorkbenchPart part = getWorkbenchPart ();
>         if (part != null) {
>             return (IUndoContext) part.getAdapter (IUndoContext.class);
>         }
>         return null;
