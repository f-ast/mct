7,8d6
< import org.eclipse.emf.ecore.EClass;
< 
24a23,26
> import org.eclipse.gmf.gmfgraph.ChildAccess;
> 
> import org.eclipse.gmf.gmfgraph.Compartment;
> 
27c29,33
< import org.eclipse.gmf.gmfgraph.FigureHandle;
---
> import org.eclipse.gmf.gmfgraph.DiagramLabel;
> 
> import org.eclipse.gmf.gmfgraph.Figure;
> 
> import org.eclipse.gmf.gmfgraph.FigureDescriptor;
119,121c125,127
<         Command epCommand = getSemanticCommandSwitch (completedRequest);
<         if (epCommand != null) {
<             ICommand command = epCommand instanceof ICommandProxy ? ((ICommandProxy) epCommand).getICommand () : new CommandProxy (epCommand);
---
>         Command semanticCommand = getSemanticCommandSwitch (completedRequest);
>         if (semanticCommand != null) {
>             ICommand command = semanticCommand instanceof ICommandProxy ? ((ICommandProxy) semanticCommand).getICommand () : new CommandProxy (semanticCommand);
124d129
<         Command ehCommand = null;
132c137
<                 ehCommand = new ICommandProxy (command);
---
>                 semanticCommand = new ICommandProxy (command);
143c148
<                 ehCommand = ehCommand == null ? deleteViewCommand : ehCommand.chain (deleteViewCommand);
---
>                 semanticCommand = semanticCommand == null ? deleteViewCommand : semanticCommand.chain (deleteViewCommand);
145c150
<             return ehCommand;
---
>             return semanticCommand;
222c227
<     protected Command getMSLWrapper (ICommand cmd) {
---
>     protected final Command getGEFWrapper (ICommand cmd) {
226,227c231,232
<     protected EObject getSemanticElement () {
<         return ViewUtil.resolveSemanticElement ((View) getHost ().getModel ());
---
>     protected final Command getMSLWrapper (ICommand cmd) {
>         return getGEFWrapper (cmd);
230,239c235,236
<     protected EObject getRelationshipContainer (Object uelement, EClass containerClass, IElementType relationshipType) {
<         if (uelement instanceof EObject) {
<             EObject element = (EObject) uelement;
<             for (; element != null; element = element.eContainer ()) {
<                 if (containerClass.isSuperTypeOf (element.eClass ())) {
<                     return element;
<                 }
<             }
<         }
<         return null;
---
>     protected EObject getSemanticElement () {
>         return ViewUtil.resolveSemanticElement ((View) getHost ().getModel ());
246,248c243,245
<     protected Command getDestroyEdgeCommand (Edge edge, boolean confirm) {
<         EditPart editPart = (EditPart) getHost ().getViewer ().getEditPartRegistry ().get (edge);
<         DestroyElementRequest request = new DestroyElementRequest (getEditingDomain (), confirm);
---
>     protected Command getDestroyElementCommand (View view) {
>         EditPart editPart = (EditPart) getHost ().getViewer ().getEditPartRegistry ().get (view);
>         DestroyElementRequest request = new DestroyElementRequest (getEditingDomain (), false);
252c249
<     protected CompoundCommand getDestroyEdgesCommand (boolean confirm) {
---
>     protected CompoundCommand getDestroyEdgesCommand () {
257c254
<             cmd.add (getDestroyEdgeCommand ((Edge) it.next (), confirm));
---
>             cmd.add (getDestroyElementCommand ((Edge) it.next ()));
261c258
<             cmd.add (getDestroyEdgeCommand ((Edge) it.next (), confirm));
---
>             cmd.add (getDestroyElementCommand ((Edge) it.next ()));
265a263,277
>     protected void addDestroyShortcutsCommand (CompoundCommand command) {
>         View view = (View) getHost ().getModel ();
>         if (view.getEAnnotation ("Shortcut") != null) {
>             return;
>         }
>         for (Iterator it = view.getDiagram ().getChildren ().iterator ();
>         it.hasNext ();) {
>             View nextView = (View) it.next ();
>             if (nextView.getEAnnotation ("Shortcut") == null || ! nextView.isSetElement () || nextView.getElement () != view.getElement ()) {
>                 continue;
>             }
>             command.add (getDestroyElementCommand (nextView));
>         }
>     }
> 
268c280,302
<         public static boolean canCreateDiagramElementFigure_4001 (DiagramElement source, FigureHandle target) {
---
>         public static boolean canCreateChildAccess_4002 (FigureDescriptor source, Figure target) {
>             return canExistChildAccess_4002 (source, target);
>         }
> 
>         public static boolean canCreateCompartmentAccessor_4003 (Compartment source, ChildAccess target) {
>             if (source != null) {
>                 if (source.getAccessor () != null) {
>                     return false;
>                 }
>             }
>             return canExistCompartmentAccessor_4003 (source, target);
>         }
> 
>         public static boolean canCreateDiagramLabelAccessor_4004 (DiagramLabel source, ChildAccess target) {
>             if (source != null) {
>                 if (source.getAccessor () != null) {
>                     return false;
>                 }
>             }
>             return canExistDiagramLabelAccessor_4004 (source, target);
>         }
> 
>         public static boolean canCreateDiagramElementFigure_4005 (DiagramElement source, FigureDescriptor target) {
274c308,320
<             return canExistDiagramElementFigure_4001 (source, target);
---
>             return canExistDiagramElementFigure_4005 (source, target);
>         }
> 
>         public static boolean canExistChildAccess_4002 (FigureDescriptor source, Figure target) {
>             return true;
>         }
> 
>         public static boolean canExistCompartmentAccessor_4003 (Compartment source, ChildAccess target) {
>             return true;
>         }
> 
>         public static boolean canExistDiagramLabelAccessor_4004 (DiagramLabel source, ChildAccess target) {
>             return true;
277c323
<         public static boolean canExistDiagramElementFigure_4001 (DiagramElement source, FigureHandle target) {
---
>         public static boolean canExistDiagramElementFigure_4005 (DiagramElement source, FigureDescriptor target) {
