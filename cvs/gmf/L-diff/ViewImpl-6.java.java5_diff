16a17,18
> import org.eclipse.emf.common.util.ECollections;
> 
65a68
>     protected static final EStructuralFeature [] childrenFeatures = new EStructuralFeature [] {NotationPackage.Literals.VIEW__PERSISTED_CHILDREN, NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN};
136c139
<             allChildren = new EContentsEList (this, new EStructuralFeature [] {NotationPackage.eINSTANCE.getView_PersistedChildren (), NotationPackage.eINSTANCE.getView_TransientChildren ()});
---
>             allChildren = new EContentsEList (this, childrenFeatures);
200c203
<         parent != null; parent = parent.eContainer ()) if (NotationPackage.eINSTANCE.getDiagram ().isSuperTypeOf (parent.eClass ())) return (Diagram) parent;
---
>         parent != null; parent = parent.eContainer ()) if (NotationPackage.Literals.DIAGRAM.isSuperTypeOf (parent.eClass ())) return (Diagram) parent;
213c216
<         if (eClass != null && eIsSet (NotationPackage.eINSTANCE.getView_Styles ())) {
---
>         if (eClass != null && eIsSet (NotationPackage.Literals.VIEW__STYLES)) {
237a241,242
>             case NotationPackage.VIEW__EANNOTATIONS :
>                 return ((InternalEList) getEAnnotations ()).basicAdd (otherEnd, msgs);
243c248
<         return super.eInverseAdd (otherEnd, featureID, msgs);
---
>         return eDynamicInverseAdd (otherEnd, featureID, msgs);
247a253,254
>             case NotationPackage.VIEW__EANNOTATIONS :
>                 return ((InternalEList) getEAnnotations ()).basicRemove (otherEnd, msgs);
259c266
<         return super.eInverseRemove (otherEnd, featureID, msgs);
---
>         return eDynamicInverseRemove (otherEnd, featureID, msgs);
263a271,272
>             case NotationPackage.VIEW__EANNOTATIONS :
>                 return getEAnnotations ();
289c298
<         return super.eGet (featureID, resolve, coreType);
---
>         return eDynamicGet (featureID, resolve, coreType);
293a303,306
>             case NotationPackage.VIEW__EANNOTATIONS :
>                 getEAnnotations ().clear ();
>                 getEAnnotations ().addAll ((Collection) newValue);
>                 return;
327c340
<         super.eSet (featureID, newValue);
---
>         eDynamicSet (featureID, newValue);
331a345,347
>             case NotationPackage.VIEW__EANNOTATIONS :
>                 getEAnnotations ().clear ();
>                 return;
360c376
<         super.eUnset (featureID);
---
>         eDynamicUnset (featureID);
364a381,382
>             case NotationPackage.VIEW__EANNOTATIONS :
>                 return eAnnotations != null && ! eAnnotations.isEmpty ();
386c404
<         return super.eIsSet (featureID);
---
>         return eDynamicIsSet (featureID);
430c448
<         if (child.eContainingFeature () == NotationPackage.eINSTANCE.getView_TransientChildren ()) {
---
>         if (child.eContainingFeature () == NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN) {
434c452
<         } else if (child.eContainingFeature () == NotationPackage.eINSTANCE.getView_PersistedChildren ()) {
---
>         } else if (child.eContainingFeature () == NotationPackage.Literals.VIEW__PERSISTED_CHILDREN) {
450a469,471
>         if ((persistedChildren == null || persistedChildren.isEmpty ()) && (transientChildren == null || transientChildren.isEmpty ())) {
>             return ECollections.EMPTY_ELIST;
>         }
453c474
<             for (Iterator iter = getPersistedChildren ().iterator ();
---
>             for (Iterator iter = persistedChildren.iterator ();
461c482
<             for (Iterator iter = getTransientChildren ().iterator ();
---
>             for (Iterator iter = transientChildren.iterator ();
