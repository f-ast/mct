18,19c18,20
<     private static final Class [] [] integralsToFloatsArray = new Class [] [] {new Class [] {Byte.class, Float.class}, new Class [] {Short.class, Float.class}, new Class [] {Integer.class, Float.class}, new Class [] {Long.class, Double.class}, new Class [] {BigInteger.class, BigDecimal.class}};
<     private static final List < Class > integrals = new ArrayList < Class > ();
---
>     private final Class < ? > [] [] integralsToFloatsArray = new Class [] [] {new Class [] {Byte.class, Float.class}, new Class [] {Short.class, Float.class}, new Class [] {Integer.class, Float.class}, new Class [] {Long.class, Double.class}, new Class [] {BigInteger.class, BigDecimal.class}};
>     private final List < Class < ? > > integrals = new ArrayList < Class < ? > > ();
>     private final List < Class < ? > > floats = Arrays.asList (new Class < ? > [] {Float.class, Double.class, BigDecimal.class,});
21c22
<     static {
---
>     public EDataTypeConversion () {
28,30c29
<     private static final List floats = Arrays.asList (new Class [] {Float.class, Double.class, BigDecimal.class,});
< 
<     public static boolean isConvertable (EDataType leftDataType, EDataType rightDataType) {
---
>     public boolean isConvertable (EDataType leftDataType, EDataType rightDataType) {
37,38c36,37
<         Class leftClass = EcoreUtil.wrapperClassFor (leftDataType.getInstanceClass ());
<         Class rightClass = EcoreUtil.wrapperClassFor (rightDataType.getInstanceClass ());
---
>         Class < ? > leftClass = EcoreUtil.wrapperClassFor (leftDataType.getInstanceClass ());
>         Class < ? > rightClass = EcoreUtil.wrapperClassFor (rightDataType.getInstanceClass ());
45c44
<     private static boolean isConvertable (Class < ? > left, Class < ? > right) {
---
>     private boolean isConvertable (Class < ? > left, Class < ? > right) {
