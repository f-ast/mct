3c3
< import org.eclipse.core.runtime.Platform;
---
> import java.lang.reflect.InvocationTargetException;
5c5
< import org.eclipse.gmf.common.UnexpectedBehaviourException;
---
> import java.util.Arrays;
7c7
< import org.eclipse.gmf.graphdef.codegen.standalone.templates.BuildPropertiesGenerator;
---
> import java.util.Collections;
9c9
< import org.eclipse.gmf.graphdef.codegen.standalone.templates.ManifestMFGenerator;
---
> import java.util.LinkedList;
11c11
< import org.eclipse.gmf.graphdef.codegen.standalone.templates.PluginActivatorGenerator;
---
> import java.util.List;
13c13
< import org.eclipse.gmf.graphdef.codegen.standalone.templates.PluginPropertiesGenerator;
---
> import java.util.Map;
15c15
< import org.eclipse.gmf.internal.codegen.dispatch.CachingEmitterFactory;
---
> import org.eclipse.core.runtime.IProgressMonitor;
17c17
< import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactory;
---
> import org.eclipse.gmf.common.UnexpectedBehaviourException;
19c19
< import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactoryImpl;
---
> import org.eclipse.gmf.graphdef.codegen.StandaloneGenerator.Config;
21c21
< import org.eclipse.gmf.internal.codegen.dispatch.NoSuchTemplateException;
---
> import org.eclipse.gmf.internal.common.codegen.TextEmitter;
23c23
< import org.eclipse.gmf.internal.codegen.dispatch.StaticTemplateRegistry;
---
> import org.eclipse.gmf.internal.graphdef.codegen.Activator;
25c25
< import org.eclipse.gmf.internal.codegen.dispatch.TemplateRegistry;
---
> import org.eclipse.gmf.internal.xpand.BufferOutput;
27c27
< import org.eclipse.gmf.internal.common.codegen.JETEmitterAdapter;
---
> import org.eclipse.gmf.internal.xpand.XpandFacade;
29c29
< import org.eclipse.gmf.internal.common.codegen.TextEmitter;
---
> import org.eclipse.gmf.internal.xpand.expression.Variable;
31,32c31,32
< public class StandaloneEmitters {
<     private final EmitterFactory myFactory;
---
> class StandaloneEmitters {
>     private final MapModeCodeGenStrategy myMapModeStrategy;
34,35c34,35
<     public StandaloneEmitters () {
<         myFactory = new CachingEmitterFactory (new EmitterFactoryImpl (getTemplatePath (), createTemplateRegistry ()));
---
>     StandaloneEmitters (MapModeCodeGenStrategy mapModeStrategy) {
>         myMapModeStrategy = mapModeStrategy;
39c39,49
<         return getRegistered (BuildPropertiesGenerator.class);
---
>         return new XpandTextEmitter (myMapModeStrategy) {
> 
>             public String generate (IProgressMonitor monitor, Object [] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
>                 StringBuilder result = new StringBuilder ();
>                 createEngine (result).evaluate ("plugin::BuildProperties::Init", new Object (), null);
>                 return result.toString ();
>             }
> 
>         }
> 
>         ;
43c53,66
<         return getRegistered (PluginPropertiesGenerator.class);
---
>         return new XpandTextEmitter (myMapModeStrategy) {
> 
>             public String generate (IProgressMonitor monitor, Object [] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
>                 assert arguments != null && arguments.length > 0 && arguments [0] instanceof Config;
>                 Config config = (Config) arguments [0];
>                 StringBuilder result = new StringBuilder ();
>                 Object [] params = new Object [] {config.getPluginFriendlyName (), config.getPluginProviderName ()};
>                 createEngine (result).evaluate ("plugin::PluginProperties::Init", new Object (), params);
>                 return result.toString ();
>             }
> 
>         }
> 
>         ;
47c70,91
<         return getRegistered (ManifestMFGenerator.class);
---
>         return new XpandTextEmitter (myMapModeStrategy) {
> 
>             public String generate (IProgressMonitor monitor, Object [] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
>                 assert arguments != null && arguments.length > 0 && arguments [0] instanceof Object [];
>                 Object [] actualArgs = (Object []) arguments [0];
>                 assert actualArgs.length > 1 && actualArgs [0] instanceof Config && actualArgs [1] instanceof String [];
>                 Config config = (Config) actualArgs [0];
>                 List < String > requiredBundles = new LinkedList < String > ();
>                 if (config.needsMapMode ()) {
>                     requiredBundles.add ("org.eclipse.gmf.runtime.draw2d.ui");
>                 }
>                 requiredBundles.addAll (Arrays.asList ((String []) actualArgs [1]));
>                 List < String > exportedPackages = (config.getMainPackageName () == null || config.getMainPackageName ().trim ().length () == 0) ? Collections.singletonList (config.getPluginActivatorPackageName ()) : Arrays.asList (config.getPluginActivatorPackageName (), config.getMainPackageName ());
>                 StringBuilder result = new StringBuilder ();
>                 Object [] params = new Object [] {config.getPluginID (), config.getPluginActivatorPackageName () + '.' + config.getPluginActivatorClassName (), exportedPackages, requiredBundles,};
>                 createEngine (result).evaluate ("plugin::Manifest::Init", new Object (), params);
>                 return result.toString ();
>             }
> 
>         }
> 
>         ;
51c95,103
<         return getRegistered (PluginActivatorGenerator.class);
---
>         return new XpandTextEmitter (myMapModeStrategy) {
> 
>             public String generate (IProgressMonitor monitor, Object [] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
>                 assert arguments != null && arguments.length > 0 && arguments [0] instanceof Object [];
>                 Config config = (Config) ((Object []) arguments [0]) [0];
>                 StringBuilder result = new StringBuilder ();
>                 Object [] params = new Object [] {config.getPluginActivatorPackageName (), config.getPluginActivatorClassName (), config.getPluginID (),};
>                 createEngine (result).evaluate ("plugin::Activator::Init", new Object (), params);
>                 return result.toString ();
54,58d105
<     private TextEmitter getRegistered (Class key) throws UnexpectedBehaviourException {
<         try {
<             return new JETEmitterAdapter (myFactory.acquireEmitter (key));
<         } catch (NoSuchTemplateException ex) {
<             throw new UnexpectedBehaviourException (ex.getMessage (), ex);
59a107,108
> 
>         ;
62,63c111,115
<     private static String [] getTemplatePath () {
<         return new String [] {Platform.getBundle ("org.eclipse.gmf.graphdef.codegen").getEntry ("/templates").toString ()};
---
>     private static abstract class XpandTextEmitter implements TextEmitter {
>         protected final MapModeCodeGenStrategy myMapModeStrategy;
> 
>         protected XpandTextEmitter (MapModeCodeGenStrategy mapModeStrategy) {
>             myMapModeStrategy = mapModeStrategy;
66,72c118,121
<     private static TemplateRegistry createTemplateRegistry () {
<         StaticTemplateRegistry result = new StaticTemplateRegistry (StandaloneEmitters.class.getClassLoader ());
<         registerTemplate (result, BuildPropertiesGenerator.class, "/plugin/build.propertiesjet");
<         registerTemplate (result, ManifestMFGenerator.class, "/plugin/manifest.mfjet");
<         registerTemplate (result, PluginPropertiesGenerator.class, "/plugin/plugin.propertiesjet");
<         registerTemplate (result, PluginActivatorGenerator.class, "/plugin/plugin.javajet");
<         return result;
---
>         protected XpandFacade createEngine (StringBuilder result) {
>             final Map < String, StringBuilder > slots = Collections.emptyMap ();
>             final List < Variable > globals = Collections.emptyList ();
>             return Activator.createTemplateEngine (myMapModeStrategy, new BufferOutput (result, slots), globals);
75,76d123
<     private static void registerTemplate (StaticTemplateRegistry registry, Class compiled, String path) {
<         registry.put (compiled, path, compiled);
