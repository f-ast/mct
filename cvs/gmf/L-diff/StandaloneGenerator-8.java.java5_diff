21,22d20
< import org.eclipse.core.runtime.IProgressMonitor;
< 
25c23
< import org.eclipse.emf.codegen.jet.JETException;
---
> import org.eclipse.emf.codegen.util.CodeGenUtil;
29,30d26
< import org.eclipse.gmf.common.codegen.GeneratorBase;
< 
33,34d28
< import org.eclipse.gmf.common.codegen.ImportUtil;
< 
40a35,40
> import org.eclipse.gmf.internal.common.codegen.DelegateImportManager;
> 
> import org.eclipse.gmf.internal.common.codegen.GeneratorBase;
> 
> import org.eclipse.gmf.internal.common.codegen.ImportUtil;
> 
44c44,45
<     private final Emitter myFigureGenerator;
---
>     private final FigureGenerator myFigureGenerator;
>     private DelegateImportManager myMapModeImportHack;
91c92
<             this (pluginId, mainPackageName, pluginId, "", "PluginActivator", mainPackageName + ".activator", useMapMode);
---
>             this (pluginId, mainPackageName, pluginId, "", "PluginActivator", (mainPackageName == null ? "" : mainPackageName + ".") + "activator", useMapMode);
96c97
<             myMainPackageName = mainPackageName;
---
>             myMainPackageName = mainPackageName == null ? "" : mainPackageName;
143d143
<         ImportAssistant importAssistant = new ImportUtil (getPackageName ());
147c147,148
<             strategy = new MapModeCodeGenStrategy.RuntimeMapModeFromPluginClass (importAssistant, pluginActivatorFQN);
---
>             myMapModeImportHack = new DelegateImportManager ();
>             strategy = new MapModeCodeGenStrategy.RuntimeMapModeFromPluginClass (myMapModeImportHack, pluginActivatorFQN);
151c152
<         myFigureGenerator = new FigureGeneratorAdapter (new FigureGenerator (getPackageName (), importAssistant, fqnSwitch, strategy));
---
>         myFigureGenerator = new FigureGenerator (fqnSwitch, strategy);
189c190,191
<         doGenerateJavaClass (myAuxiliaryGenerators.getPluginActivatorEmitter (), myArgs.getPluginActivatorPackageName (), myArgs.getPluginActivatorClassName (), myArgs);
---
>         Object [] args = new Object [] {myArgs, new ImportUtil (myArgs.getPluginActivatorPackageName (), myArgs.getPluginActivatorClassName ())};
>         doGenerateJavaClass (myAuxiliaryGenerators.getPluginActivatorEmitter (), myArgs.getPluginActivatorPackageName (), myArgs.getPluginActivatorClassName (), new Object [] {args});
193,195c195,197
<         doGenerateFile (myAuxiliaryGenerators.getBuildPropertiesEmitter (), new Path ("build.properties"), myArgs);
<         doGenerateFile (myAuxiliaryGenerators.getManifestMFEmitter (), new Path ("META-INF/MANIFEST.MF"), new Object [] {myArgs, getRequiredBundles ()});
<         doGenerateFile (myAuxiliaryGenerators.getPluginPropertiesEmitter (), new Path ("plugin.properties"), myArgs);
---
>         doGenerateFile (myAuxiliaryGenerators.getBuildPropertiesEmitter (), new Path ("build.properties"), new Object [] {myArgs});
>         doGenerateFile (myAuxiliaryGenerators.getManifestMFEmitter (), new Path ("META-INF/MANIFEST.MF"), new Object [] {new Object [] {myArgs, getRequiredBundles ()}});
>         doGenerateFile (myAuxiliaryGenerators.getPluginPropertiesEmitter (), new Path ("plugin.properties"), new Object [] {myArgs});
223,226c225,231
<         String packageName = getPackageName ();
<         String className = figure.getName ();
<         doGenerateJavaClass (myFigureGenerator, packageName, className, figure);
<         myGenerationInfo.registerFQN (figure, composeFQN (packageName, className));
---
>         final ImportAssistant importAssistant = new ImportUtil (getPackageName (), CodeGenUtil.validJavaIdentifier (figure.getName ()));
>         Object [] args = new Object [] {figure, importAssistant};
>         if (myMapModeImportHack != null) {
>             myMapModeImportHack.setDelegate (importAssistant);
>         }
>         doGenerateJavaClass (myFigureGenerator, getPackageName (), importAssistant.getCompilationUnitName (), args);
>         myGenerationInfo.registerFQN (figure, composeFQN (getPackageName (), importAssistant.getCompilationUnitName ()));
243,258d247
<     private static class FigureGeneratorAdapter implements GeneratorBase.Emitter {
<         private final FigureGenerator myDelegate;
< 
<         public FigureGeneratorAdapter (FigureGenerator delegate) {
<             myDelegate = delegate;
<         }
< 
<         public String generate (IProgressMonitor monitor, Object param) throws JETException {
<             if (false == param instanceof Figure) {
<                 throw new IllegalStateException ("Figure expected: " + param);
<             }
<             return myDelegate.go ((Figure) param);
<         }
< 
<     }
< 
