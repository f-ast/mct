34a35,36
> import org.eclipse.emf.common.util.UniqueEList;
> 
65,66d66
< import org.eclipse.gmf.runtime.diagram.core.listener.PropertyChangeNotifier;
< 
77,78d76
< import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;
< 
92a91,94
> import org.eclipse.gmf.runtime.notation.CanonicalStyle;
> 
> import org.eclipse.gmf.runtime.notation.DrawerStyle;
> 
97c99
< import org.eclipse.gmf.runtime.notation.View;
---
> import org.eclipse.gmf.runtime.notation.Style;
99c101
< import org.eclipse.jface.util.Assert;
---
> import org.eclipse.gmf.runtime.notation.View;
104c106
<     public static class AsyncCommand extends Command {
---
>     private static class AsyncCommand extends Command {
157c159
<     public static final class CanonicalElementAdapter extends EObjectAdapter {
---
>     protected static final class CanonicalElementAdapter extends EObjectAdapter {
338c340,342
<         Assert.isTrue (request instanceof CreateViewRequest);
---
>         Command cmd = host ().getCommand (request);
>         if (cmd == null) {
>             assert request instanceof CreateViewRequest;
346c350,352
<         return new EtoolsProxyCommand (cc.unwrap ());
---
>             cmd = new EtoolsProxyCommand (cc.unwrap ());
>         }
>         return cmd;
373a380
>             addListenerFilter (SEMANTIC_FILTER_ID, this, semanticHost);
374a382,389
>             Style style = ((View) host ().getModel ()).getStyle (NotationPackage.eINSTANCE.getDrawerStyle ());
>             if (style != null) {
>                 addListenerFilter ("NotationListener_DrawerStyle", this, style);
>             }
>             style = ((View) host ().getModel ()).getStyle (NotationPackage.eINSTANCE.getCanonicalStyle ());
>             if (style != null) {
>                 addListenerFilter ("NotationListener_CanonicalStyle", this, style);
>             }
381c396,403
<         return _enabled && ((View) host ().getModel ()).isVisible ();
---
>         DrawerStyle dstyle = (DrawerStyle) ((View) host ().getModel ()).getStyle (NotationPackage.eINSTANCE.getDrawerStyle ());
>         boolean isCollapsed = dstyle == null ? false : dstyle.isCollapsed ();
>         if (isCollapsed) {
>             return false;
>         }
>         CanonicalStyle style = getCanonicalStyle ();
>         boolean enabled = _enabled && ((View) host ().getModel ()).isVisible ();
>         return style == null ? enabled : style.isCanonical () && enabled;
420d441
<         removeListenerFilter ("NotationListener_Visibility");
424,439d444
<     protected boolean addListenerFilter (String filterId, PropertyChangeListener listener, PropertyChangeNotifier notifier) {
<         if (filterId == null || listener == null) {
<             throw new NullPointerException ();
<         }
<         if (notifier != null) {
<             if (_listenerFilters == null) _listenerFilters = new HashMap ();
< 
<             if (! _listenerFilters.containsKey (filterId)) {
<                 notifier.addPropertyChangeListener (listener);
<                 _listenerFilters.put (filterId, new Object [] {notifier, listener});
<                 return true;
<             }
<         }
<         return false;
<     }
< 
481,483d485
<             if (objects [0] instanceof PropertyChangeNotifier) {
<                 ((PropertyChangeNotifier) objects [0]).removePropertyChangeListener ((PropertyChangeListener) objects [1]);
<             } else {
487d488
<     }
516a518,523
>             if (NotationPackage.eINSTANCE.getCanonicalStyle_Canonical () == event.getFeature ()) {
>                 CanonicalStyle style = (CanonicalStyle) ((View) host ().getModel ()).getStyle (NotationPackage.eINSTANCE.getCanonicalStyle ());
>                 if (style != null) {
>                     setEnable (style.isCanonical ());
>                 }
>             }
528c535
<         if (NotationPackage.eINSTANCE.getView_Visible () == event.getFeature ()) {
---
>         if (NotationPackage.eINSTANCE.getDrawerStyle_Collapsed () == event.getFeature () || NotationPackage.eINSTANCE.getCanonicalStyle_Canonical () == event.getFeature () || NotationPackage.eINSTANCE.getView_Visible () == event.getFeature () || NotationPackage.eINSTANCE.getView_PersistedChildren () == event.getFeature ()) {
568a576
>             addListenersToContainers (createdViews);
575a584,601
>     private void addListenersToContainers (List createdViews) {
>         UniqueEList list = new UniqueEList ();
>         ListIterator li = createdViews.listIterator ();
>         while (li.hasNext ()) {
>             Object obj = li.next ();
>             if (obj instanceof IAdaptable) {
>                 View view = (View) ((IAdaptable) obj).getAdapter (View.class);
>                 if (view != null) list.add (view.eContainer ());
> 
>             }
>         }
>         ListIterator liContainers = list.listIterator ();
>         while (liContainers.hasNext ()) {
>             View containerView = (View) liContainers.next ();
>             addListenerFilter ("NotationListener_Container" + containerView.toString (), this, containerView, NotationPackage.eINSTANCE.getView_PersistedChildren ());
>         }
>     }
> 
625a652
>         Map viewToSemanticMap = new HashMap ();
630a658
>                 viewToSemanticMap.put (semanticChild, viewChild);
633a662,669
>             View viewInMap = (View) viewToSemanticMap.get (semanticChild);
>             if (viewInMap != null && ! viewChild.equals (viewInMap)) {
>                 if (viewInMap.isMutable ()) {
>                     orphaned.remove (viewChild);
>                     orphaned.add (viewInMap);
>                     viewToSemanticMap.put (semanticChild, viewChild);
>                 }
>             }
645a682,685
>     protected CanonicalStyle getCanonicalStyle () {
>         return (CanonicalStyle) ((View) host ().getModel ()).getStyle (NotationPackage.eINSTANCE.getCanonicalStyle ());
>     }
> 
