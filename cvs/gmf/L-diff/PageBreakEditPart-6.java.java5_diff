53c53
<             calculatePageBreakFigureBounds ();
---
>             calculatePageBreakFigureBounds (true, bounds.getSize ());
56a57,62
>             updatePageCount (width, height);
>             getPageBreaksFigure ().setLocation (location);
>         }
>     }
> 
>     private void updatePageCount (int width, int height) {
65d70
<             getPageBreaksFigure ().setLocation (location);
67a73,86
> 
>     public void calculatePageBreakFigureBounds (boolean center) {
>         calculatePageBreakFigureBounds (center, diagramBounds.getSize ());
>     }
> 
>     public void calculatePageBreakFigureBounds () {
>         calculatePageBreakFigureBounds (true, diagramBounds.getSize ());
>     }
> 
>     private void calculatePageBreakFigureBounds (boolean center, Dimension bounds) {
>         updatePageCount (bounds.width, bounds.height);
>         if (center) {
>             centerPageBreaksFigure ();
>         }
87,106d105
<     public void calculatePageBreakFigureBounds (boolean center) {
<         Point printerPageSize = getPageSize ();
<         float numCols = ((float) diagramBounds.width) / printerPageSize.x;
<         int cols = Math.max (1, (int) Math.ceil (numCols));
<         float numRows = ((float) diagramBounds.height) / printerPageSize.y;
<         int rows = Math.max (1, (int) Math.ceil (numRows));
<         int xInc = printerPageSize.x * cols;
<         int yInc = printerPageSize.y * rows;
<         getPageBreaksFigure ().setSize (new Dimension (xInc, yInc));
<         getPageBreaksFigure ().setPageCount (rows, cols);
<         if (center) {
<             centerPageBreaksFigure ();
<             updatePreferenceStore ();
<         }
<     }
< 
<     public void calculatePageBreakFigureBounds () {
<         calculatePageBreakFigureBounds (true);
<     }
< 
207c206
<     private void updatePreferenceStore () {
---
>     public void updatePreferenceStore () {
