46a47
>     private final ProposalComparator comparator;
49a51
>         this.comparator = new ProposalComparator ();
63c65
<             List < ICompletionProposal > proposals = new ArrayList < ICompletionProposal > ();
---
>             List < ICompletionProposal > proposals = new ArrayList < ICompletionProposal > (20);
67a70
>                 Collections.sort (proposals, comparator);
71,72c74,79
<                 proposals.addAll (new ExpressionProposalComputer ().computeProposals (expression, ctx, f));
<                 proposals.addAll (new KeywordProposalComputer (textPastInsertionPoint).computeProposals (txt, ctx, f));
---
>                 List < ICompletionProposal > ep = new ExpressionProposalComputer ().computeProposals (expression, ctx, f);
>                 Collections.sort (ep, comparator);
>                 proposals.addAll (ep);
>                 List < ICompletionProposal > kp = new KeywordProposalComputer (textPastInsertionPoint).computeProposals (txt, ctx, f);
>                 Collections.sort (kp, comparator);
>                 proposals.addAll (kp);
75c82,84
<                 proposals.addAll (new ExpandProposalComputer ().computeProposals (txt, ctx, f));
---
>                 List < ICompletionProposal > ep = new ExpandProposalComputer ().computeProposals (txt, ctx, f);
>                 Collections.sort (ep, comparator);
>                 proposals.addAll (ep);
79c88,90
<                 proposals.addAll (new StatementProposalComputer ().computeProposals (txt, ctx, f));
---
>                 List < ICompletionProposal > sp = new StatementProposalComputer ().computeProposals (txt, ctx, f);
>                 Collections.sort (sp, comparator);
>                 proposals.addAll (sp);
83,91d93
<             Collections.sort (proposals, new Comparator < ICompletionProposal > () {
< 
<                 public int compare (final ICompletionProposal p1, final ICompletionProposal p2) {
<                     return p1.getDisplayString ().compareTo (p2.getDisplayString ());
<                 }
< 
<             }
< 
<             );
118a121,128
>     private static class ProposalComparator implements Comparator < ICompletionProposal > {
> 
>         public int compare (final ICompletionProposal p1, final ICompletionProposal p2) {
>             return p1.getDisplayString ().compareTo (p2.getDisplayString ());
>         }
> 
>     }
> 
