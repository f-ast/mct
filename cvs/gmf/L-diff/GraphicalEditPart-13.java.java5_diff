3,6d2
< import java.beans.PropertyChangeEvent;
< 
< import java.beans.PropertyChangeListener;
< 
83c79
< import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;
---
> import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
87,88d82
< import org.eclipse.gmf.runtime.diagram.core.listener.PropertyChangeNotifier;
< 
108a103,104
> import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
> 
117,118d112
< import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
< 
159c153
< public abstract class GraphicalEditPart extends AbstractGraphicalEditPart implements IGraphicalEditPart, PropertyChangeListener, IAdaptableSelection {
---
> public abstract class GraphicalEditPart extends AbstractGraphicalEditPart implements IGraphicalEditPart, IAdaptableSelection, NotificationListener {
182,193c176
<     protected void addListenerFilter (String filterId, PropertyChangeListener listener, PropertyChangeNotifier notifier) {
<         if (notifier == null) return;
< 
<         Assert.isNotNull (filterId);
<         Assert.isNotNull (listener);
<         if (listenerFilters == null) listenerFilters = new HashMap ();
< 
<         notifier.addPropertyChangeListener (listener);
<         listenerFilters.put (filterId, new Object [] {notifier, listener});
<     }
< 
<     protected void addListenerFilter (String filterId, PropertyChangeListener listener, EObject element) {
---
>     protected void addListenerFilter (String filterId, NotificationListener listener, EObject element) {
200c183
<         PresentationListener.getInstance ().addPropertyChangeListener (element, listener);
---
>         PresentationListener.getInstance ().addNotificationListener (element, listener);
204c187
<     protected void addListenerFilter (String filterId, PropertyChangeListener listener, EObject element, EStructuralFeature feature) {
---
>     protected void addListenerFilter (String filterId, NotificationListener listener, EObject element, EStructuralFeature feature) {
211c194
<         PresentationListener.getInstance ().addPropertyChangeListener (element, listener);
---
>         PresentationListener.getInstance ().addNotificationListener (element, listener);
240c223
<                     PresentationListener.getInstance ().removePropertyChangeListener ((EObject) obj [0], (EStructuralFeature) obj [1], (PropertyChangeListener) obj [2]);
---
>                     PresentationListener.getInstance ().removeNotificationListener ((EObject) obj [0], (EStructuralFeature) obj [1], (NotificationListener) obj [2]);
242,244c225
<                     if (obj [0] instanceof PropertyChangeNotifier) ((PropertyChangeNotifier) obj [0]).removePropertyChangeListener ((PropertyChangeListener) obj [1]);
<                     else PresentationListener.getInstance ().removePropertyChangeListener ((EObject) obj [0], (PropertyChangeListener) obj [1]);
< 
---
>                     PresentationListener.getInstance ().removeNotificationListener ((EObject) obj [0], (NotificationListener) obj [1]);
452,472d432
<     public final void propertyChange (PropertyChangeEvent event) {
<         if (isActive ()) handlePropertyChangeEvent (event);
< 
<     }
< 
<     protected void handlePropertyChangeEvent (PropertyChangeEvent event) {
<         if (Properties.ID_PERSISTED_CHILDREN.equals (event.getPropertyName ()) || Properties.ID_TRANSIENT_CHILDREN.equals (event.getPropertyName ())) {
<             refreshChildren ();
<         } else if (Properties.ID_ISVISIBLE.equals (event.getPropertyName ())) {
<             refreshVisibility ();
<         } else if (Properties.ID_SEMANTICREF.equals (event.getPropertyName ())) {
<             handleMajorSemanticChange ();
<         } else if (event instanceof NotificationEvent) {
<             handleNotificationEvent ((NotificationEvent) event);
<         }
< 
<     }
< 
<     protected void handleNotificationEvent (NotificationEvent e) {
<     }
< 
571,574c531
<             PresentationListener.getInstance ().removePropertyChangeListener ((EObject) objects [0], (EStructuralFeature) objects [1], (PropertyChangeListener) objects [2]);
<         } else {
<             if (objects [0] instanceof PropertyChangeNotifier) {
<                 ((PropertyChangeNotifier) objects [0]).removePropertyChangeListener ((PropertyChangeListener) objects [1]);
---
>             PresentationListener.getInstance ().removeNotificationListener ((EObject) objects [0], (EStructuralFeature) objects [1], (NotificationListener) objects [2]);
576,577c533
<                 PresentationListener.getInstance ().removePropertyChangeListener ((EObject) objects [0], (PropertyChangeListener) objects [1]);
<             }
---
>             PresentationListener.getInstance ().removeNotificationListener ((EObject) objects [0], (NotificationListener) objects [1]);
