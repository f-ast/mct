2a3,4
> import java.net.MalformedURLException;
> 
4a7,8
> import java.util.ArrayList;
> 
6a11,12
> import org.eclipse.core.runtime.IStatus;
> 
8a15,16
> import org.eclipse.core.runtime.Status;
> 
17,25c25
< import org.eclipse.emf.common.util.URI;
< 
< import org.eclipse.gmf.codegen.templates.expressions.AbstractExpressionGenerator;
< 
< import org.eclipse.gmf.codegen.templates.expressions.OCLExpressionFactoryGenerator;
< 
< import org.eclipse.gmf.codegen.templates.expressions.RegexpExpressionFactoryGenerator;
< 
< import org.eclipse.gmf.codegen.templates.lite.providers.MetricProviderGenerator;
---
> import org.eclipse.emf.common.CommonPlugin;
27c27
< import org.eclipse.gmf.codegen.templates.lite.providers.ValidationProviderGenerator;
---
> import org.eclipse.emf.common.util.URI;
31,40d30
< import org.eclipse.gmf.internal.codegen.dispatch.CachingEmitterFactory;
< 
< import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactory;
< 
< import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactoryImpl;
< 
< import org.eclipse.gmf.internal.codegen.dispatch.NoSuchTemplateException;
< 
< import org.eclipse.gmf.internal.codegen.dispatch.StaticTemplateRegistry;
< 
47,48d36
< import org.eclipse.gmf.internal.common.codegen.JETEmitterAdapter;
< 
65d52
<     private final EmitterFactory myFactory;
67d53
<     private static StaticTemplateRegistry myRegistry;
71,77c57,81
<         myRegistry = initRegistry ();
<         String [] variables = new String [] {"org.eclipse.emf.codegen", "org.eclipse.emf.codegen.ecore", "org.eclipse.emf.common", "org.eclipse.emf.ecore", "org.eclipse.gmf.common", "org.eclipse.gmf.codegen"};
<         URL liteTemplatesPath = getTemplatesBundle ().getEntry ("/templates/");
<         URL runtimeTemplatesPath = Platform.getBundle (CODEGEN_PLUGIN_ID).getEntry ("/templates/");
<         myTemplatePath = new String [] {usePrecompiled ? null : templateDirectory != null && templateDirectory.indexOf (":") == - 1 ? URI.createPlatformResourceURI (templateDirectory, true).toString () : templateDirectory, liteTemplatesPath.toString (), runtimeTemplatesPath.toString ()};
<         myFactory = new CachingEmitterFactory (new EmitterFactoryImpl (getTemplatePath (), myRegistry, usePrecompiled, variables));
<         myResourceManager = new BundleResourceManager (liteTemplatesPath, runtimeTemplatesPath);
---
>         ArrayList < URL > templatesURI = new ArrayList < URL > (3);
>         templatesURI.add (getTemplatesBundle ().getEntry ("/templates/"));
>         templatesURI.add (getCodegenTemplatesBundle ().getEntry ("/templates/"));
>         URL dynamicTemplatesPath = getDynamicTemplatesURL (templateDirectory);
>         if (dynamicTemplatesPath != null) {
>             templatesURI.add (dynamicTemplatesPath);
>         }
>         myResourceManager = new BundleResourceManager (templatesURI.toArray (new URL [templatesURI.size ()]));
>         myTemplatePath = new String [templatesURI.size ()];
>         for (int i = 0;
>         i < templatesURI.size (); i ++) {
>             myTemplatePath [i] = templatesURI.get (i).toString ();
>         }
>     }
> 
>     private static URL getDynamicTemplatesURL (String templateDirectory) {
>         if (templateDirectory != null) {
>             URI templatesURI = templateDirectory.indexOf (":") == - 1 ? URI.createPlatformResourceURI (templateDirectory, true) : URI.createURI (templateDirectory);
>             try {
>                 return new URL (CommonPlugin.resolve (templatesURI).toString ());
>             } catch (MalformedURLException e) {
>                 Activator.getInstance ().getLog ().log (new Status (IStatus.ERROR, Activator.getPluginID (), 0, "Incorrect dynamic templates location", e));
>             }
>         }
>         return null;
93,102d96
<     private static StaticTemplateRegistry initRegistry () {
<         final StaticTemplateRegistry tr = new StaticTemplateRegistry (CodegenEmitters.class.getClassLoader ());
<         put (tr, "/providers/ValidationProvider.javajet", ValidationProviderGenerator.class);
<         put (tr, "/providers/MetricProvider.javajet", MetricProviderGenerator.class);
<         put (tr, "/expressions/AbstractExpression.javajet", AbstractExpressionGenerator.class);
<         put (tr, "/expressions/OCLExpressionFactory.javajet", OCLExpressionFactoryGenerator.class);
<         put (tr, "/expressions/RegexpExpressionFactory.javajet", RegexpExpressionFactoryGenerator.class);
<         return tr;
<     }
< 
106a101,104
>     public TextEmitter getCreateNodeCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::commands::CreateNodeCommand::qualifiedClassName");
>     }
> 
110a109,112
>     public TextEmitter getAddNodeCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::commands::AddNodeCommand::qualifiedClassName");
>     }
> 
114a117,120
>     public TextEmitter getCloneNodeCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::commands::CloneNodeCommand::qualifiedClassName");
>     }
> 
118a125,128
>     public TextEmitter getCreateLinkStartCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::commands::CreateLinkStartCommand::qualifiedClassName");
>     }
> 
122a133,136
>     public TextEmitter getCreateLinkCompleteCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::commands::CreateLinkCompleteCommand::qualifiedClassName");
>     }
> 
126a141,144
>     public TextEmitter getReconnectLinkSourceCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::commands::ReconnectLinkSourceCommand::qualifiedClassName");
>     }
> 
130a149,152
>     public TextEmitter getReconnectLinkTargetCommandQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::commands::ReconnectLinkTargetCommand::qualifiedClassName");
>     }
> 
138a161,164
>     public TextEmitter getComponentEditPolicyQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::diagram::policies::ComponentEditPolicy::qualifiedClassName");
>     }
> 
142a169,172
>     public TextEmitter getLayoutEditPolicyQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::diagram::policies::LayoutEditPolicy::qualifiedClassName");
>     }
> 
146a177,188
>     public TextEmitter getGraphicalEditPolicyQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::diagram::policies::GraphicalNodeEditPolicy::qualifiedClassName");
>     }
> 
>     public TextEmitter getConnectionEndpointEditPolicyEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::diagram::policies::ConnectionEndpointEditPolicy::ConnectionEndpointEditPolicy");
>     }
> 
>     public TextEmitter getConnectionEndpointEditPolicyQualifiedClassNameEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::diagram::policies::ConnectionEndpointEditPolicy::qualifiedClassName");
>     }
> 
148c190,198
<         return retrieve (ValidationProviderGenerator.class);
---
>         return retrieveXpand ("xpt::providers::ValidationProvider::ValidationProvider");
>     }
> 
>     public TextEmitter getValidateActionGenerator () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::providers::ValidateAction::ValidateAction");
>     }
> 
>     public TextEmitter getValidateActionQualifiedNameGenerator () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::providers::ValidateAction::qualifiedClassName");
152c202,210
<         return retrieve (MetricProviderGenerator.class);
---
>         return retrieveXpand ("xpt::providers::MetricProvider::MetricProvider");
>     }
> 
>     public TextEmitter getMetricsActionEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::providers::MetricsAction::MetricsAction");
>     }
> 
>     public TextEmitter getMetricsActionQualifiedNameEmitter () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::providers::MetricsAction::qualifiedClassName");
206a265,268
>     public TextEmitter getOpenDiagramInViewActionQualifiedClassNameGenerator () throws UnexpectedBehaviourException {
>         return retrieveXpand ("xpt::editor::OpenDiagramInViewAction::qualifiedClassName");
>     }
> 
268c330
<         return retrieve (AbstractExpressionGenerator.class);
---
>         return retrieveXpand ("xpt::expressions::AbstractExpression::AbstractExpression");
272c334
<         return retrieve (OCLExpressionFactoryGenerator.class);
---
>         return retrieveXpand ("xpt::expressions::OCLExpressionFactory::OCLExpressionFactory");
276c338
<         return retrieve (RegexpExpressionFactoryGenerator.class);
---
>         return retrieveXpand ("xpt::expressions::RegexpExpressionFactory::RegexpExpressionFactory");
299,310d360
<     private static void put (StaticTemplateRegistry tr, String path, Class < ? > precompiledTemplate) {
<         tr.put (precompiledTemplate, path, precompiledTemplate);
<     }
< 
<     private TextEmitter retrieve (Class < ? > key) throws UnexpectedBehaviourException {
<         try {
<             return new JETEmitterAdapter (myFactory.acquireEmitter (key));
<         } catch (NoSuchTemplateException ex) {
<             throw new UnexpectedBehaviourException (ex.getMessage (), ex);
<         }
<     }
< 
334a385,388
>     private static Bundle getCodegenTemplatesBundle () {
>         return Platform.getBundle (CODEGEN_PLUGIN_ID);
>     }
> 
336c390
<         return getTemplatesBundle ().getEntry ("/templates/emf-merge.xml");
---
>         return getCodegenTemplatesBundle ().getEntry ("/templates/emf-merge.xml");
