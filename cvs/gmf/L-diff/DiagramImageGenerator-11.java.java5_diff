21,22d20
< import org.eclipse.draw2d.geometry.PrecisionRectangle;
< 
112,131c110,111
<         Rectangle originalBounds = new PrecisionRectangle (new Rectangle (calculateImageRectangle (editParts)));
<         mm.LPtoDP (originalBounds);
<         int deviceMargins = mm.LPtoDP (getImageMargin ());
<         int threshold = useMargins ? deviceMargins : 0;
<         double xScalingFactor = 1.0, yScalingFactor = xScalingFactor;
<         originalBounds.shrink (deviceMargins, deviceMargins);
<         if (maxDeviceWidth > threshold) {
<             xScalingFactor = (maxDeviceWidth - threshold - threshold) / (originalBounds.preciseWidth ());
<         }
<         if (maxDeviceHeight > threshold) {
<             yScalingFactor = (maxDeviceHeight - threshold - threshold) / (originalBounds.preciseHeight ());
<         }
<         double scalingFactor = Math.min (Math.min (xScalingFactor, yScalingFactor), 1);
<         int imageWidth = originalBounds.width + threshold + threshold;
<         int imageHeight = originalBounds.height + threshold + threshold;
<         if (scalingFactor < 1) {
<             imageWidth = (int) Math.round (originalBounds.preciseWidth () * scalingFactor) + threshold + threshold;
<             imageHeight = (int) Math.round (originalBounds.preciseHeight () * scalingFactor) + threshold + threshold;
<         }
<         awtImage = new BufferedImage (imageWidth, imageHeight, BufferedImage.TYPE_4BYTE_ABGR_PRE);
---
>         ConstrainedImageRenderingData data = getConstrainedImageRenderingData (editParts, maxDeviceWidth, maxDeviceHeight, useMargins);
>         awtImage = new BufferedImage (data.imageWidth, data.imageHeight, BufferedImage.TYPE_4BYTE_ABGR_PRE);
142c122
<         Graphics graphics = new GraphicsToGraphics2DAdaptor (g2d, new org.eclipse.swt.graphics.Rectangle (0, 0, imageWidth, imageHeight));
---
>         Graphics graphics = new GraphicsToGraphics2DAdaptor (g2d, new org.eclipse.swt.graphics.Rectangle (0, 0, data.imageWidth, data.imageHeight));
145,147c125,127
<         g2d.translate (threshold, threshold);
<         mapModeGraphics.scale (scalingFactor);
<         Point location = new PrecisionPoint (originalBounds.preciseX (), originalBounds.preciseY ());
---
>         g2d.translate (data.margin, data.margin);
>         mapModeGraphics.scale (data.scalingFactor);
>         Point location = new PrecisionPoint (data.imageOriginalBounds.preciseX (), data.imageOriginalBounds.preciseY ());
