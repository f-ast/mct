4a5,8
> import org.eclipse.draw2d.DeferredUpdateManager;
> 
> import org.eclipse.draw2d.LightweightSystem;
> 
8a13,14
> import org.eclipse.gmf.runtime.diagram.ui.internal.parts.ElementToEditPartsMap;
> 
25c31
< import org.eclipse.gmf.runtime.diagram.ui.internal.parts.ElementToEditPartsMap;
---
> import org.eclipse.ui.PlatformUI;
32a39,109
>     public void enableUpdates (boolean enable) {
>         if (enable) getLightweightSystemWithUpdateToggle ().enableUpdates ();
>         else getLightweightSystemWithUpdateToggle ().disableUpdates ();
> 
>     }
> 
>     private class ToggleUpdateManager extends DeferredUpdateManager {
>         private boolean disableUpdates = false;
> 
>         public boolean shouldDisableUpdates () {
>             return disableUpdates;
>         }
> 
>         public void setDisableUpdates (boolean disableUpdates) {
>             this.disableUpdates = disableUpdates;
>             if (! disableUpdates) {
>                 PlatformUI.getWorkbench ().getDisplay ().syncExec (new Runnable () {
> 
>                     public void run () {
>                         queueWork ();
>                     }
> 
>                 }
> 
>                 );
>             }
>         }
> 
>         public synchronized void performUpdate () {
>             if (! shouldDisableUpdates ()) super.performUpdate ();
> 
>         }
> 
>         public void performValidation () {
>             if (! shouldDisableUpdates ()) super.performValidation ();
> 
>         }
> 
>         public void queueWork () {
>             if (! shouldDisableUpdates ()) super.queueWork ();
> 
>         }
> 
>     }
> 
>     private class LightweightSystemWithUpdateToggle extends LightweightSystem {
> 
>         public ToggleUpdateManager getToggleUpdateManager () {
>             return (ToggleUpdateManager) getUpdateManager ();
>         }
> 
>         public void disableUpdates () {
>             getToggleUpdateManager ().setDisableUpdates (true);
>         }
> 
>         public void enableUpdates () {
>             getToggleUpdateManager ().setDisableUpdates (false);
>         }
> 
>     }
> 
>     private LightweightSystemWithUpdateToggle getLightweightSystemWithUpdateToggle () {
>         return (LightweightSystemWithUpdateToggle) getLightweightSystem ();
>     }
> 
>     protected LightweightSystem createLightweightSystem () {
>         LightweightSystem lws = new LightweightSystemWithUpdateToggle ();
>         lws.setUpdateManager (new ToggleUpdateManager ());
>         return lws;
>     }
> 
