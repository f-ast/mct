2a3,4
> import java.lang.reflect.InvocationTargetException;
> 
4a7,14
> import java.util.ArrayList;
> 
> import java.util.Collections;
> 
> import java.util.List;
> 
> import org.eclipse.core.runtime.IProgressMonitor;
> 
69,70d78
< import org.eclipse.gmf.codegen.templates.editor.PaletteFactoryGenerator;
< 
196a205,206
> import org.eclipse.gmf.common.codegen.ImportAssistant;
> 
222a233,248
> import org.eclipse.gmf.internal.xpand.BufferOutput;
> 
> import org.eclipse.gmf.internal.xpand.ResourceManager;
> 
> import org.eclipse.gmf.internal.xpand.XpandFacade;
> 
> import org.eclipse.gmf.internal.xpand.expression.Variable;
> 
> import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;
> 
> import org.eclipse.gmf.internal.xpand.model.XpandExecutionContextImpl;
> 
> import org.eclipse.gmf.internal.xpand.util.BundleResourceManager;
> 
> import org.eclipse.gmf.internal.xpand.util.ContextFactory;
> 
228a255
>     private ResourceManager myResourceManager;
233c260,261
<         myTemplatePath = new String [] {usePrecompiled ? null : templateDirectory != null && templateDirectory.indexOf (":") == - 1 ? URI.createPlatformResourceURI (templateDirectory, true).toString () : templateDirectory, getTemplatesBundle ().getEntry ("/templates/").toString ()};
---
>         final URL baseURL = getTemplatesBundle ().getEntry ("/templates/");
>         myTemplatePath = new String [] {usePrecompiled ? null : templateDirectory != null && templateDirectory.indexOf (":") == - 1 ? URI.createPlatformResourceURI (templateDirectory, true).toString () : templateDirectory, baseURL.toString ()};
234a263
>         myResourceManager = new BundleResourceManager (baseURL);
300d328
<         put (tr, "/editor/PaletteFactory.javajet", PaletteFactoryGenerator.class);
581c609
<         return retrieve (PaletteFactoryGenerator.class);
---
>         return new XpandTextEmitter (myResourceManager, "xpt::editor::palette::PaletteFactory::Factory");
755a784,825
>     private static class XpandTextEmitter implements TextEmitter {
>         private final ResourceManager myResourceManager;
>         private final String myTemplateFQN;
> 
>         public XpandTextEmitter (ResourceManager manager, String templateFQN) {
>             myResourceManager = manager;
>             myTemplateFQN = templateFQN;
>         }
> 
>         public String generate (IProgressMonitor monitor, Object [] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
>             StringBuilder result = new StringBuilder ();
>             new XpandFacade (createContext (result)).evaluate (myTemplateFQN, extractTarget (arguments), extractArguments (arguments));
>             return result.toString ();
>         }
> 
>         protected Object extractTarget (Object [] arguments) {
>             assert arguments != null && arguments.length > 0;
>             return arguments [0];
>         }
> 
>         protected Object [] extractArguments (Object [] arguments) {
>             assert arguments != null && arguments.length > 0;
>             ArrayList < Object > res = new ArrayList < Object > (arguments.length);
>             for (int i = 1;
>             i < arguments.length; i ++) {
>                 if (false == arguments [i] instanceof ImportAssistant) {
>                     res.add (arguments [i]);
>                 }
>             }
>             return res.toArray ();
>         }
> 
>         private XpandExecutionContext createContext (StringBuilder result) {
>             final BufferOutput output = new BufferOutput (result);
>             final List < Variable > globals = Collections.emptyList ();
>             final XpandExecutionContext xpandContext = ContextFactory.createXpandContext (myResourceManager, output, globals);
>             ((XpandExecutionContextImpl) xpandContext).setContextClassLoader (getClass ().getClassLoader ());
>             return xpandContext;
>         }
> 
>     }
> 
