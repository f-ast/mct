44a45,46
> import org.eclipse.emf.ecore.resource.ResourceSet;
> 
47c49,51
< import org.eclipse.gmf.gmfgraph.Figure;
---
> import org.eclipse.gmf.gmfgraph.Canvas;
> 
> import org.eclipse.gmf.gmfgraph.DiagramElement;
86c90,91
<     public static final String OPTION_OUTPUT_RESOURCE_FULL_PATH = SECTION_ID + ".outputResource";
---
>     public static final String OPTION_OUTPUT_GALLERY_FULL_PATH = SECTION_ID + ".outputGallery";
>     public static final String OPTION_OUTPUT_DIAGRAM_ELEMENTS_FULL_PATH = SECTION_ID + ".outputDiagramElements";
90c95,96
<     private final CachedInputValidationState myCachedInputValidationState;
---
>     private FileNameOption myOutputDiagramElementsPathOption;
>     private final InputValidationState myCachedInputValidationState;
97c103
<         myOutputGalleryPathOption = addFileNameOption (true, OPTION_OUTPUT_RESOURCE_FULL_PATH, "Create Figure Gallery", "", THE_ONLY_PAGE_INDEX);
---
>         myOutputGalleryPathOption = addFileNameOption (true, OPTION_OUTPUT_GALLERY_FULL_PATH, "Create Figure Gallery", "", THE_ONLY_PAGE_INDEX);
98a105,106
>         myOutputDiagramElementsPathOption = addFileNameOption (true, OPTION_OUTPUT_DIAGRAM_ELEMENTS_FULL_PATH, "Mirror diagram elements", "", THE_ONLY_PAGE_INDEX);
>         myOutputDiagramElementsPathOption.setRequired (false);
100c108
<         myCachedInputValidationState = new CachedInputValidationState ();
---
>         myCachedInputValidationState = new InputValidationState (myOutputGalleryPathOption, myOutputDiagramElementsPathOption);
111,112d118
<         validateOptions (myInputPathOption);
<         validateOptions (myOutputGalleryPathOption);
120,121c126,128
<         Resource resource = loadResource (myInputPathOption.getText ());
<         FigureGallery [] figures = findFigures (resource);
---
>         Resource input = loadResource (myInputPathOption.getText ());
>         FigureGallery [] figures = findFigures (input);
>         assert (figures.length > 0);
127a135,138
>             if (! generator.getRunStatus ().isOK ()) {
>                 throw new CoreException (generator.getRunStatus ());
>             }
>             createSeparateResources (generator.getGenerationInfo (), input);
137,140c148
<             resource.unload ();
<         }
<         if (! generator.getRunStatus ().isOK ()) {
<             throw new CoreException (generator.getRunStatus ());
---
>             input.unload ();
142d149
<         createFigureGallery (generator.getGenerationInfo ());
145,149c152,166
<     private void createFigureGallery (StandaloneGenerator.GenerationInfo info) throws CoreException {
<         if (! myOutputGalleryPathOption.isEmpty ()) {
<             String path = myOutputGalleryPathOption.getText ();
<             Resource galleryResource = new ResourceSetImpl ().createResource (URI.createFileURI (path));
<             galleryResource.getContents ().add (new StandaloneGalleryConverter ().convertFigureGallery (info));
---
>     private void createSeparateResources (StandaloneGenerator.GenerationInfo info, Resource input) throws CoreException {
>         if (shouldGenerate (myOutputGalleryPathOption)) {
>             String figureGalleryPath = myOutputGalleryPathOption.getText ();
>             ResourceSet separateResourceSet = new ResourceSetImpl ();
>             StandaloneGalleryConverter converter = new StandaloneGalleryConverter (info);
>             Resource galleryResource = separateResourceSet.createResource (URI.createFileURI (figureGalleryPath));
>             galleryResource.getContents ().add (converter.convertFigureGallery ());
>             Resource diagramElementsResource = null;
>             if (shouldGenerate (myOutputDiagramElementsPathOption)) {
>                 Canvas mirror = converter.mirrorDiagramElements (Collections.singleton (input));
>                 if (mirror != null) {
>                     diagramElementsResource = separateResourceSet.createResource (URI.createFileURI (myOutputDiagramElementsPathOption.getText ()));
>                     diagramElementsResource.getContents ().add (mirror);
>                 }
>             }
151a169,171
>                 if (diagramElementsResource != null) {
>                     diagramElementsResource.save (null);
>                 }
157a178,181
>     private boolean shouldGenerate (FileNameOption option) {
>         return option.isEnabled () && ! option.isEmpty ();
>     }
> 
209,217c233
<         if (! validatePackageName ()) {
<             return;
<         }
<         if (! validateInputPath ()) {
<             return;
<         }
<         if (! validateOutputGalleryPath ()) {
<             return;
<         }
---
>         if (validateInputPath () && validatePackageName () && validateOutputOption (myOutputDiagramElementsPathOption) && validateOutputOption (myOutputGalleryPathOption)) {
219a236
>     }
296a314,315
>             myOutputDiagramElementsPathOption.setEnabled (false);
>             myOutputGalleryPathOption.setEnabled (false);
302,303c321,331
<             getTheOnlyPage ().setPageComplete (false);
<             getTheOnlyPage ().setErrorMessage (myCachedInputValidationState.getErrorMessage ());
---
>             flagError (myCachedInputValidationState.getErrorMessage ());
>             return false;
>         }
>         return true;
>     }
> 
>     private boolean validateOutputOption (FileNameOption option) {
>         if (! option.isEnabled ()) {
>             return false;
>         }
>         if (! validateMirrorDiagramWithoutFigureGallery ()) {
305a334
>         if (option.isEmpty ()) {
307a337,339
>         String path = option.getText ();
>         return validatePath (path);
>     }
309,310c341,347
<     private boolean validateOutputGalleryPath () {
<         if (myOutputGalleryPathOption.isEmpty ()) {
---
>     private boolean validateMirrorDiagramWithoutFigureGallery () {
>         if (! myOutputDiagramElementsPathOption.isEmpty ()) {
>             if (myOutputGalleryPathOption.isEmpty () || myOutputDiagramElementsPathOption.getText ().equals (myOutputGalleryPathOption.getText ())) {
>                 flagError ("In order to mirror diagram elements you have to generate separate figure gallery");
>                 return false;
>             }
>         }
313c350,351
<         String path = myOutputGalleryPathOption.getText ();
---
> 
>     private boolean validatePath (String path) {
315c353
<             URI.createFileURI (path);
---
>             return URI.createFileURI (path) != null;
317,319c355
<             String message = MessageFormat.format ("Path {0} is invalid", new Object [] {path});
<             getTheOnlyPage ().setPageComplete (false);
<             getTheOnlyPage ().setErrorMessage (message);
---
>             flagError (MessageFormat.format ("Path {0} is invalid", new Object [] {path}));
322d357
<         return true;
328a364,368
>     private void flagError (String message) {
>         getTheOnlyPage ().setPageComplete (false);
>         getTheOnlyPage ().setErrorMessage (message);
>     }
> 
339c379
<     private static class CachedInputValidationState {
---
>     private static class InputValidationState {
341d380
<         private boolean myCachedIsValid;
342a382,390
>         private boolean myHasDiagramElement;
>         private boolean myHasFigure;
>         private final FileNameOption myDiagramElementsOption;
>         private final FileNameOption myGalleryOption;
> 
>         public InputValidationState (FileNameOption galleryOption, FileNameOption diagramElementsOption) {
>             myGalleryOption = galleryOption;
>             myDiagramElementsOption = diagramElementsOption;
>         }
346c394,397
<                 myCachedIsValid = validateInputPath (path);
---
>                 myCachedPath = path;
>                 validateInputPath (path);
>                 myGalleryOption.setEnabled (myHasFigure);
>                 myDiagramElementsOption.setEnabled (myHasDiagramElement);
351c402
<             return myCachedIsValid;
---
>             return myHasFigure;
358,369c409,411
<         private boolean hasAtLeastOneFigure (Resource resource) {
<             for (TreeIterator contents = resource.getAllContents ();
<             contents.hasNext ();) {
<                 EObject next = (EObject) contents.next ();
<                 if (next instanceof Figure) {
<                     return true;
<                 }
<             }
<             return false;
<         }
< 
<         private boolean validateInputPath (String path) {
---
>         private void validateInputPath (String path) {
>             myHasDiagramElement = false;
>             myHasFigure = false;
373c415
<                 return false;
---
>                 return;
376d417
<             boolean isValid = resource != null && hasAtLeastOneFigure (resource);
378c419
<                 resource.unload ();
---
>                 classifyContents (resource);
380c421
<             if (! isValid) {
---
>             if (! myHasFigure) {
382d422
<                 return false;
384c424,446
<             return true;
---
>         }
> 
>         private void classifyContents (Resource resource) {
>             myHasDiagramElement = false;
>             myHasFigure = false;
>             for (TreeIterator contents = resource.getAllContents ();
>             contents.hasNext ();) {
>                 EObject next = (EObject) contents.next ();
>                 if (next instanceof FigureGallery) {
>                     if (! myHasFigure) {
>                         FigureGallery nextGallery = (FigureGallery) next;
>                         myHasFigure = ! nextGallery.getFigures ().isEmpty ();
>                     }
>                     contents.prune ();
>                 }
>                 if (next instanceof DiagramElement) {
>                     myHasDiagramElement = true;
>                     contents.prune ();
>                 }
>                 if (myHasDiagramElement && myHasFigure) {
>                     break;
>                 }
>             }
