5c5
< import org.eclipse.draw2d.geometry.Rectangle;
---
> import org.eclipse.draw2d.geometry.Dimension;
7c7
< import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
---
> import org.eclipse.draw2d.geometry.Rectangle;
13c13,15
< import org.eclipse.swt.graphics.Image;
---
> import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderHelper;
> 
> import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderingListener;
15a18,23
>     boolean allowDelayRender = false;
>     Dimension maximumRenderSize = null;
> 
>     public boolean shouldAllowDelayRender () {
>         return allowDelayRender;
>     }
17a26,29
>         this (g, false, null);
>     }
> 
>     public RenderedScaledGraphics (Graphics g, boolean allowDelayRender, Dimension maximumRenderSize) {
18a31,32
>         this.allowDelayRender = allowDelayRender;
>         this.maximumRenderSize = maximumRenderSize;
21,31c35
<     public RenderedImage drawRenderedImage (RenderedImage srcImage, int x, int y, int width, int height) {
<         if (getGraphics () instanceof DrawableRenderedImage) {
<             Rectangle r = zoomRect (x, y, width, height);
<             return ((DrawableRenderedImage) getGraphics ()).drawRenderedImage (srcImage, r.x, r.y, r.width, r.height);
<         } else {
<             Rectangle r = zoomRect (x, y, width, height);
<             RenderInfo info = srcImage.getRenderInfo ();
<             info.setValues (r.width, r.height, info.getFillColor (), info.getOutlineColor (), info.shouldMaintainAspectRatio (), info.shouldAntiAlias ());
<             RenderedImage img = srcImage.getNewRenderedImage (info);
<             Image swtImg = img.getSWTImage ();
<             if (swtImg != null) getGraphics ().drawImage (swtImg, r.x, r.y + r.height - swtImg.getBounds ().height);
---
>     private double scale = 1.0;
33c37,39
<             return img;
---
>     public void scale (double amount) {
>         scale = amount;
>         super.scale (amount);
34a41,47
> 
>     public RenderedImage drawRenderedImage (RenderedImage srcImage, Rectangle rect, RenderingListener listener) {
>         return RenderHelper.getInstance (scale, true, shouldAllowDelayRender (), getMaximumRenderSize ()).drawRenderedImage (getGraphics (), srcImage, rect, listener);
>     }
> 
>     public Dimension getMaximumRenderSize () {
>         return maximumRenderSize;
