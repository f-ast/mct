9,16d8
< import java.util.ArrayList;
< 
< import java.util.Collections;
< 
< import java.util.List;
< 
< import org.eclipse.core.runtime.IProgressMonitor;
< 
165,166d156
< import org.eclipse.gmf.common.codegen.ImportAssistant;
< 
193c183
< import org.eclipse.gmf.internal.xpand.BufferOutput;
---
> import org.eclipse.gmf.internal.common.codegen.XpandTextEmitter;
197,204d186
< import org.eclipse.gmf.internal.xpand.XpandFacade;
< 
< import org.eclipse.gmf.internal.xpand.expression.Variable;
< 
< import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;
< 
< import org.eclipse.gmf.internal.xpand.model.XpandExecutionContextImpl;
< 
207,208d188
< import org.eclipse.gmf.internal.xpand.util.ContextFactory;
< 
367c347
<         return new XpandTextEmitter (myResourceManager, "xpt::diagram::editparts::DiagramEditPart::DiagramEditPart");
---
>         return newXpandEmitter ("xpt::diagram::editparts::DiagramEditPart::DiagramEditPart");
371c351
<         return new XpandTextEmitter (myResourceManager, "xpt::diagram::editparts::NodeEditPart::NodeEditPart");
---
>         return newXpandEmitter ("xpt::diagram::editparts::NodeEditPart::NodeEditPart");
375c355
<         return new XpandTextEmitter (myResourceManager, "xpt::diagram::editparts::NodeLabelEditPart::NodeLabelEditPart");
---
>         return newXpandEmitter ("xpt::diagram::editparts::NodeLabelEditPart::NodeLabelEditPart");
379c359
<         return new XpandTextEmitter (myResourceManager, "xpt::diagram::editparts::ExternalNodeLabelEditPart::ExternalNodeLabelEditPart");
---
>         return newXpandEmitter ("xpt::diagram::editparts::ExternalNodeLabelEditPart::ExternalNodeLabelEditPart");
383c363
<         return new XpandTextEmitter (myResourceManager, "xpt::diagram::editparts::ChildNodeLabelEditPart::ChildNodeLabelEditPart");
---
>         return newXpandEmitter ("xpt::diagram::editparts::ChildNodeLabelEditPart::ChildNodeLabelEditPart");
387c367
<         return new XpandTextEmitter (myResourceManager, "xpt::diagram::editparts::CompartmentEditPart::CompartmentEditPart");
---
>         return newXpandEmitter ("xpt::diagram::editparts::CompartmentEditPart::CompartmentEditPart");
391c371
<         return new XpandTextEmitter (myResourceManager, "xpt::diagram::editparts::LinkEditPart::LinkEditPart");
---
>         return newXpandEmitter ("xpt::diagram::editparts::LinkEditPart::LinkEditPart");
395c375
<         return new XpandTextEmitter (myResourceManager, "xpt::diagram::editparts::LinkLabelEditPart::LinkLabelEditPart");
---
>         return newXpandEmitter ("xpt::diagram::editparts::LinkLabelEditPart::LinkLabelEditPart");
399c379
<         return new XpandTextEmitter (myResourceManager, "xpt::diagram::editparts::EditPartFactory::EditPartFactory");
---
>         return newXpandEmitter ("xpt::diagram::editparts::EditPartFactory::EditPartFactory");
403c383
<         return new XpandTextEmitter (myResourceManager, "xpt::policies::BaseItemSemanticEditPolicy::BaseItemSemanticEditPolicy");
---
>         return newXpandEmitter ("xpt::policies::BaseItemSemanticEditPolicy::BaseItemSemanticEditPolicy");
407c387
<         return new XpandTextEmitter (myResourceManager, "xpt::policies::OpenDiagram::EditPolicy");
---
>         return newXpandEmitter ("xpt::policies::OpenDiagram::EditPolicy");
431c411
<         return new XpandTextEmitter (myResourceManager, "xpt::policies::NodeItemSemanticEditPolicy::NodeItemSemanticEditPolicy");
---
>         return newXpandEmitter ("xpt::policies::NodeItemSemanticEditPolicy::NodeItemSemanticEditPolicy");
447c427
<         return new XpandTextEmitter (myResourceManager, "xpt::diagram::editpolicies::TextFeedback::TextSelectionEditPolicy");
---
>         return newXpandEmitter ("xpt::diagram::editpolicies::TextFeedback::TextSelectionEditPolicy");
451c431
<         return new XpandTextEmitter (myResourceManager, "xpt::diagram::editpolicies::TextFeedback::TextNonResizableEditPolicy");
---
>         return newXpandEmitter ("xpt::diagram::editpolicies::TextFeedback::TextNonResizableEditPolicy");
483c463
<         return new XpandTextEmitter (myResourceManager, "xpt::diagram::providers::ElementTypes::ElementTypes");
---
>         return newXpandEmitter ("xpt::diagram::providers::ElementTypes::ElementTypes");
563c543
<         return new XpandTextEmitter (myResourceManager, "xpt::editor::palette::PaletteFactory::Factory");
---
>         return newXpandEmitter ("xpt::editor::palette::PaletteFactory::Factory");
615c595
<         return new XpandTextEmitter (myResourceManager, "xpt::navigator::NavigatorContentProvider::NavigatorContentProvider");
---
>         return newXpandEmitter ("xpt::navigator::NavigatorContentProvider::NavigatorContentProvider");
651c631
<         return new XpandTextEmitter (myResourceManager, "xpt::plugin::plugin");
---
>         return newXpandEmitter ("xpt::plugin::plugin");
655c635
<         return new XpandTextEmitter (myResourceManager, "xpt::properties::properties");
---
>         return newXpandEmitter ("xpt::properties::properties");
735c715
<         return new XpandTextEmitter (myResourceManager, "xpt::application::Application::Application");
---
>         return newXpandEmitter ("xpt::application::Application::Application");
739c719
<         return new XpandTextEmitter (myResourceManager, "xpt::application::ActionBarAdvisor::ActionBarAdvisor");
---
>         return newXpandEmitter ("xpt::application::ActionBarAdvisor::ActionBarAdvisor");
743c723
<         return new XpandTextEmitter (myResourceManager, "xpt::application::Perspective::Perspective");
---
>         return newXpandEmitter ("xpt::application::Perspective::Perspective");
747c727
<         return new XpandTextEmitter (myResourceManager, "xpt::application::WorkbenchAdvisor::WorkbenchAdvisor");
---
>         return newXpandEmitter ("xpt::application::WorkbenchAdvisor::WorkbenchAdvisor");
751c731
<         return new XpandTextEmitter (myResourceManager, "xpt::application::WorkbenchWindowAdvisor::WorkbenchWindowAdvisor");
---
>         return newXpandEmitter ("xpt::application::WorkbenchWindowAdvisor::WorkbenchWindowAdvisor");
759c739
<         return new XpandTextEmitter (myResourceManager, "xpt::editor::URIDiagramDocumentProvider::URIDiagramDocumentProvider");
---
>         return newXpandEmitter ("xpt::editor::URIDiagramDocumentProvider::URIDiagramDocumentProvider");
767c747
<         return new XpandTextEmitter (myResourceManager, "xpt::editor::URIEditorInputProxy::URIEditorInputProxy");
---
>         return newXpandEmitter ("xpt::editor::URIEditorInputProxy::URIEditorInputProxy");
775c755
<         return new XpandTextEmitter (myResourceManager, "xpt::Externalizer::Access");
---
>         return newXpandEmitter ("xpt::Externalizer::Access");
779c759
<         return new XpandTextEmitter (myResourceManager, "xpt::Externalizer::Values");
---
>         return newXpandEmitter ("xpt::Externalizer::Values");
785c765
<         return new XpandTextEmitter (myResourceManager, definition);
---
>         return newXpandEmitter (definition);
790c770
<         return new XpandTextEmitter (myResourceManager, definition);
---
>         return newXpandEmitter (definition);
824,864c804,805
<     private static class XpandTextEmitter implements TextEmitter {
<         private final ResourceManager myResourceManager;
<         private final String myTemplateFQN;
< 
<         public XpandTextEmitter (ResourceManager manager, String templateFQN) {
<             myResourceManager = manager;
<             myTemplateFQN = templateFQN;
<         }
< 
<         public String generate (IProgressMonitor monitor, Object [] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
<             StringBuilder result = new StringBuilder ();
<             Object [] actualArguments = arguments != null && arguments.length == 1 && arguments [0] instanceof Object [] ? (Object []) arguments [0] : arguments;
<             new XpandFacade (createContext (result)).evaluate (myTemplateFQN, extractTarget (actualArguments), extractArguments (actualArguments));
<             return result.toString ();
<         }
< 
<         protected Object extractTarget (Object [] arguments) {
<             assert arguments != null && arguments.length > 0;
<             return arguments [0];
<         }
< 
<         protected Object [] extractArguments (Object [] arguments) {
<             assert arguments != null && arguments.length > 0;
<             ArrayList < Object > res = new ArrayList < Object > (arguments.length);
<             for (int i = 1;
<             i < arguments.length; i ++) {
<                 if (false == arguments [i] instanceof ImportAssistant) {
<                     res.add (arguments [i]);
<                 }
<             }
<             return res.toArray ();
<         }
< 
<         private XpandExecutionContext createContext (StringBuilder result) {
<             final BufferOutput output = new BufferOutput (result);
<             final List < Variable > globals = Collections.emptyList ();
<             final XpandExecutionContext xpandContext = ContextFactory.createXpandContext (myResourceManager, output, globals);
<             ((XpandExecutionContextImpl) xpandContext).setContextClassLoader (getClass ().getClassLoader ());
<             return xpandContext;
<         }
< 
---
>     private TextEmitter newXpandEmitter (String definition) {
>         return new XpandTextEmitter (myResourceManager, definition, getClass ().getClassLoader ());
