4a5,6
> import org.eclipse.core.runtime.NullProgressMonitor;
> 
27,28d28
< import org.eclipse.gef.commands.Command;
< 
30a31,34
> import org.eclipse.gef.commands.CommandStackEvent;
> 
> import org.eclipse.gef.commands.CommandStackEventListener;
> 
78a83,99
>     private CommandStackEventListener mySaveListener = new CommandStackEventListener () {
> 
>         public void stackChanged (CommandStackEvent event) {
>             assert event.getSource () == myDiagramDisplayer.getCommandStack ();
>             if (event.isPostChangeEvent ()) {
>                 try {
>                     myDiagramDisplayer.save (new NullProgressMonitor ());
>                     myDiagramDisplayer.getCommandStack ().markSaveLocation ();
>                 } catch (CoreException e) {
>                     Activator.getDefault ().getLog ().log (e.getStatus ());
>                 }
>             }
>         }
> 
>     }
> 
>     ;
88c109
<             myDiagramDisplayer.dispose ();
---
>             disposeDisplayer (myDiagramDisplayer);
130a152
>             initDisplayer (myDiagramDisplayer);
141,142c163
<                     myDiagramDisplayer.getTopLevelControl ().dispose ();
<                     myDiagramDisplayer.dispose ();
---
>                     disposeDisplayer (myDiagramDisplayer);
149,150c170
<             oldDiagramDisplayer.getTopLevelControl ().dispose ();
<             oldDiagramDisplayer.dispose ();
---
>             disposeDisplayer (oldDiagramDisplayer);
155a176,187
>     protected void initDisplayer (DiagramDisplayer diagramDisplayer) {
>         diagramDisplayer.getCommandStack ().addCommandStackEventListener (mySaveListener);
>     }
> 
>     protected void disposeDisplayer (DiagramDisplayer diagramDisplayer) {
>         if (diagramDisplayer.getTopLevelControl () != null) {
>             diagramDisplayer.getTopLevelControl ().dispose ();
>         }
>         diagramDisplayer.getCommandStack ().removeCommandStackEventListener (mySaveListener);
>         diagramDisplayer.dispose ();
>     }
> 
168,198d199
<         domain.setCommandStack (new CommandStack () {
< 
<             @Override
<             public void execute (Command command) {
<                 super.execute (command);
<                 save ();
<             }
< 
<             @Override
<             public void undo () {
<                 super.undo ();
<                 save ();
<             }
< 
<             @Override
<             public void redo () {
<                 super.redo ();
<                 save ();
<             }
< 
<             private void save () {
<                 try {
<                     myDiagramDisplayer.save (null);
<                 } catch (CoreException e) {
<                     Activator.getDefault ().getLog ().log (e.getStatus ());
<                 }
<             }
< 
<         }
< 
<         );
