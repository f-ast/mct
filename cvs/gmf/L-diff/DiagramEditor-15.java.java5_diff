1c1
< package org.eclipse.gmf.runtime.lite.parts;
---
> package org.eclipse.gmf.runtime.diagram.ui.parts;
3c3
< import java.util.Collection;
---
> import java.io.File;
5,7c5
< import java.util.Collections;
< 
< import java.util.EventObject;
---
> import java.io.IOException;
9c7
< import java.util.Map;
---
> import java.util.ArrayList;
11c9
< import org.eclipse.core.runtime.CoreException;
---
> import java.util.Collections;
13c11
< import org.eclipse.core.runtime.IProgressMonitor;
---
> import java.util.Iterator;
15c13
< import org.eclipse.draw2d.ColorConstants;
---
> import java.util.List;
17c15
< import org.eclipse.draw2d.IFigure;
---
> import org.eclipse.core.resources.IMarker;
19c17
< import org.eclipse.emf.common.notify.AdapterFactory;
---
> import org.eclipse.core.runtime.IAdaptable;
21c19
< import org.eclipse.emf.common.notify.Notification;
---
> import org.eclipse.core.runtime.IPath;
23c21
< import org.eclipse.emf.common.notify.Notifier;
---
> import org.eclipse.core.runtime.IStatus;
25c23
< import org.eclipse.emf.common.notify.impl.AdapterImpl;
---
> import org.eclipse.draw2d.FigureCanvas;
27c25
< import org.eclipse.emf.ecore.resource.Resource;
---
> import org.eclipse.draw2d.LightweightSystem;
29c27
< import org.eclipse.emf.ecore.resource.ResourceSet;
---
> import org.eclipse.draw2d.Viewport;
31c29
< import org.eclipse.emf.ecore.util.EcoreUtil;
---
> import org.eclipse.draw2d.geometry.Point;
33c31
< import org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain;
---
> import org.eclipse.draw2d.parts.ScrollableThumbnail;
35c33
< import org.eclipse.emf.transaction.TransactionalEditingDomain;
---
> import org.eclipse.draw2d.parts.Thumbnail;
37c35
< import org.eclipse.emf.transaction.util.TransactionUtil;
---
> import org.eclipse.emf.ecore.EObject;
39c37
< import org.eclipse.emf.workspace.WorkspaceEditingDomainFactory;
---
> import org.eclipse.gef.ContextMenuProvider;
41c39
< import org.eclipse.gef.DefaultEditDomain;
---
> import org.eclipse.gef.EditPart;
43c41
< import org.eclipse.gef.EditDomain;
---
> import org.eclipse.gef.EditPartFactory;
45c43
< import org.eclipse.gef.EditPart;
---
> import org.eclipse.gef.EditPartViewer;
47c45
< import org.eclipse.gef.GraphicalEditPart;
---
> import org.eclipse.gef.KeyHandler;
49c47
< import org.eclipse.gef.GraphicalViewer;
---
> import org.eclipse.gef.KeyStroke;
51c49
< import org.eclipse.gef.commands.CommandStack;
---
> import org.eclipse.gef.LayerConstants;
53c51
< import org.eclipse.gef.commands.CommandStackEvent;
---
> import org.eclipse.gef.RootEditPart;
55c53
< import org.eclipse.gef.commands.CommandStackEventListener;
---
> import org.eclipse.gef.SnapToGeometry;
57c55
< import org.eclipse.gef.commands.CommandStackListener;
---
> import org.eclipse.gef.SnapToGrid;
61c59
< import org.eclipse.gef.palette.PaletteRoot;
---
> import org.eclipse.gef.rulers.RulerProvider;
65c63,125
< import org.eclipse.gef.ui.actions.SelectionAction;
---
> import org.eclipse.gef.ui.actions.DirectEditAction;
> 
> import org.eclipse.gef.ui.actions.GEFActionConstants;
> 
> import org.eclipse.gef.ui.parts.ContentOutlinePage;
> 
> import org.eclipse.gef.ui.parts.GraphicalEditor;
> 
> import org.eclipse.gef.ui.parts.ScrollingGraphicalViewer;
> 
> import org.eclipse.gef.ui.parts.TreeViewer;
> 
> import org.eclipse.gef.ui.rulers.RulerComposite;
> 
> import org.eclipse.gmf.runtime.common.core.command.CommandManager;
> 
> import org.eclipse.gmf.runtime.common.core.util.Log;
> 
> import org.eclipse.gmf.runtime.common.core.util.Trace;
> 
> import org.eclipse.gmf.runtime.common.ui.action.ActionManager;
> 
> import org.eclipse.gmf.runtime.common.ui.services.editor.EditorService;
> 
> import org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService;
> 
> import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
> 
> import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
> 
> import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
> 
> import org.eclipse.gmf.runtime.diagram.ui.DiagramUIDebugOptions;
> 
> import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;
> 
> import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;
> 
> import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
> 
> import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;
> 
> import org.eclipse.gmf.runtime.diagram.ui.editparts.IDiagramPreferenceSupport;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.actions.InsertAction;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.actions.PromptingDeleteAction;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.actions.PromptingDeleteFromModelAction;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.DiagramRootTreeEditPart;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.TreeDiagramEditPart;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.TreeEditPart;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramUIPluginImages;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.DefaultValues;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageInfoHelper;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.parts.DiagramGraphicalViewerKeyHandler;
67c127
< import org.eclipse.gef.ui.actions.StackAction;
---
> import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;
69c129
< import org.eclipse.gef.ui.actions.WorkbenchPartAction;
---
> import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.DiagramRuler;
71c131
< import org.eclipse.gef.ui.views.palette.PalettePage;
---
> import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.DiagramRulerProvider;
73c133
< import org.eclipse.gmf.runtime.lite.services.DefaultDiagramLayouter;
---
> import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
75c135,151
< import org.eclipse.gmf.runtime.lite.services.IDiagramLayouter;
---
> import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
> 
> import org.eclipse.gmf.runtime.diagram.ui.providers.DiagramContextMenuProvider;
> 
> import org.eclipse.gmf.runtime.diagram.ui.services.editpart.EditPartService;
> 
> import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
> 
> import org.eclipse.gmf.runtime.notation.Diagram;
> 
> import org.eclipse.gmf.runtime.notation.GuideStyle;
> 
> import org.eclipse.gmf.runtime.notation.NotationPackage;
> 
> import org.eclipse.gmf.runtime.notation.View;
> 
> import org.eclipse.jface.action.Action;
79c155
< import org.eclipse.swt.widgets.Composite;
---
> import org.eclipse.jface.action.IToolBarManager;
81c157
< import org.eclipse.ui.IEditorDescriptor;
---
> import org.eclipse.jface.preference.IPreferenceStore;
83c159,167
< import org.eclipse.ui.IEditorInput;
---
> import org.eclipse.jface.preference.PreferenceStore;
> 
> import org.eclipse.jface.util.Assert;
> 
> import org.eclipse.jface.viewers.ISelection;
> 
> import org.eclipse.jface.viewers.IStructuredSelection;
> 
> import org.eclipse.swt.SWT;
85c169
< import org.eclipse.ui.IEditorMatchingStrategy;
---
> import org.eclipse.swt.SWTException;
87c171,177
< import org.eclipse.ui.IEditorReference;
---
> import org.eclipse.swt.events.DisposeEvent;
> 
> import org.eclipse.swt.events.DisposeListener;
> 
> import org.eclipse.swt.widgets.Canvas;
> 
> import org.eclipse.swt.widgets.Composite;
89c179,183
< import org.eclipse.ui.IEditorRegistry;
---
> import org.eclipse.swt.widgets.Control;
> 
> import org.eclipse.ui.IActionBars;
> 
> import org.eclipse.ui.IEditorInput;
92a187,190
> import org.eclipse.ui.IWorkbenchPart;
> 
> import org.eclipse.ui.IWorkbenchPartSite;
> 
95c193
< import org.eclipse.ui.PlatformUI;
---
> import org.eclipse.ui.actions.ActionFactory;
97c195,201
< import org.eclipse.ui.part.EditorPart;
---
> import org.eclipse.ui.part.IPageSite;
> 
> import org.eclipse.ui.part.IShowInSource;
> 
> import org.eclipse.ui.part.PageBook;
> 
> import org.eclipse.ui.part.ShowInContext;
101c205
< import org.eclipse.ui.views.properties.IPropertySheetPage;
---
> import org.eclipse.wst.common.ui.properties.internal.provisional.ITabbedPropertySheetPageContributor;
103,106c207,250
< public abstract class DiagramEditor extends EditorPart implements IDiagramManager {
<     private DiagramDisplayer myDiagramDisplayer;
<     private boolean myIsDirty = false;
<     private CommandStackListener commandStackListener = new CommandStackListener () {
---
> public abstract class DiagramEditor extends GraphicalEditor implements IDiagramWorkbenchPart, ITabbedPropertySheetPageContributor, IShowInSource {
>     protected static final int ID_OUTLINE = 0;
>     protected static final int ID_OVERVIEW = 1;
>     protected PreferenceStore workspaceViewerPreferenceStore = null;
>     class DiagramOutlinePage extends ContentOutlinePage implements IAdaptable {
>         private PageBook pageBook;
>         private Control outline;
>         private Canvas overview;
>         private IAction showOutlineAction, showOverviewAction;
>         private boolean overviewInitialized;
>         private Thumbnail thumbnail;
>         private DisposeListener disposeListener;
> 
>         public DiagramOutlinePage (EditPartViewer viewer) {
>             super (viewer);
>         }
> 
>         public void init (IPageSite pageSite) {
>             super.init (pageSite);
>             ActionRegistry registry = getActionRegistry ();
>             IActionBars bars = pageSite.getActionBars ();
>             String id = ActionFactory.UNDO.getId ();
>             bars.setGlobalActionHandler (id, registry.getAction (id));
>             id = ActionFactory.REDO.getId ();
>             bars.setGlobalActionHandler (id, registry.getAction (id));
>             id = ActionFactory.DELETE.getId ();
>             bars.setGlobalActionHandler (id, registry.getAction (id));
>             bars.updateActionBars ();
>             bars.getToolBarManager ().markDirty ();
>         }
> 
>         protected void configureOutlineViewer () {
>             getViewer ().setEditDomain (getEditDomain ());
>             getViewer ().setEditPartFactory (new EditPartFactory () {
> 
>                 public EditPart createEditPart (EditPart context, Object model) {
>                     if (model instanceof Diagram) {
>                         return new TreeDiagramEditPart (model);
>                     } else {
>                         return new TreeEditPart (model);
>                     }
>                 }
> 
>             }
108,109c252,258
<         public void commandStackChanged (EventObject event) {
<             setDirty (((CommandStack) event.getSource ()).isDirty ());
---
>             );
>             getViewer ().setKeyHandler (getKeyHandler ());
>             IToolBarManager tbm = this.getSite ().getActionBars ().getToolBarManager ();
>             showOutlineAction = new Action () {
> 
>                 public void run () {
>                     showPage (ID_OUTLINE);
115c264,266
<     private CommandStackEventListener mySaveListener = new CommandStackEventListener () {
---
>             showOutlineAction.setImageDescriptor (DiagramUIPluginImages.DESC_OUTLINE);
>             tbm.add (showOutlineAction);
>             showOverviewAction = new Action () {
117,119c268,269
<         public void stackChanged (CommandStackEvent event) {
<             if (event.isPostChangeEvent () && isSaved ()) {
<                 getCommandStack ().markSaveLocation ();
---
>                 public void run () {
>                     showPage (ID_OVERVIEW);
120a271
> 
123,126c274,277
<         private boolean isSaved () {
<             for (Resource next : getEditingDomain ().getResourceSet ().getResources ()) {
<                 if (! next.isLoaded ()) {
<                     continue;
---
>             ;
>             showOverviewAction.setImageDescriptor (DiagramUIPluginImages.DESC_OVERVIEW);
>             tbm.add (showOverviewAction);
>             showPage (getDefaultOutlineViewMode ());
128,129c279,287
<                 if (! next.isTrackingModification () || next.isModified ()) {
<                     return false;
---
> 
>         public void createControl (Composite parent) {
>             pageBook = new PageBook (parent, SWT.NONE);
>             outline = getViewer ().createControl (pageBook);
>             overview = new Canvas (pageBook, SWT.NONE);
>             pageBook.showPage (outline);
>             configureOutlineViewer ();
>             hookOutlineViewer ();
>             initializeOutlineViewer ();
130a289,293
> 
>         public void dispose () {
>             unhookOutlineViewer ();
>             if (thumbnail != null) {
>                 thumbnail.deactivate ();
132c295,296
<             return true;
---
>             this.overviewInitialized = false;
>             super.dispose ();
134a299,300
>         public Object getAdapter (Class type) {
>             return null;
137c303,309
<     ;
---
>         public Control getControl () {
>             return pageBook;
>         }
> 
>         protected void hookOutlineViewer () {
>             getSelectionSynchronizer ().addViewer (getViewer ());
>         }
139,140c311,316
<     protected void save (IProgressMonitor monitor) throws CoreException {
<         myDiagramDisplayer.save (getSaveOptions (), monitor);
---
>         protected void initializeOutlineViewer () {
>             MEditingDomainGetter.getMEditingDomain (getDiagram ()).runAsRead (new MRunnable () {
> 
>                 public Object run () {
>                     getViewer ().setContents (getDiagram ());
>                     return null;
143,144d318
<     protected Map < ?, ? > getSaveOptions () {
<         return Collections.emptyMap ();
147,148c321
<     public final TransactionalEditingDomain getEditingDomain () {
<         return myDiagramDisplayer.getEditingDomain ();
---
>             );
151,152c324,337
<     protected final EditDomain getEditDomain () {
<         return myDiagramDisplayer.getEditDomain ();
---
>         protected void initializeOverview () {
>             LightweightSystem lws = new LightweightSystem (overview);
>             RootEditPart rep = getGraphicalViewer ().getRootEditPart ();
>             DiagramRootEditPart root = (DiagramRootEditPart) rep;
>             thumbnail = new ScrollableThumbnail ((Viewport) root.getFigure ());
>             thumbnail.setSource (root.getLayer (LayerConstants.SCALABLE_LAYERS));
>             lws.setContents (thumbnail);
>             disposeListener = new DisposeListener () {
> 
>                 public void widgetDisposed (DisposeEvent e) {
>                     if (thumbnail != null) {
>                         thumbnail.deactivate ();
>                         thumbnail = null;
>                     }
155,156d339
<     protected final CommandStack getCommandStack () {
<         return getEditDomain ().getCommandStack ();
159,160c342,344
<     protected final ZoomManager getZoomManager () {
<         return myDiagramDisplayer.getZoomManager ();
---
>             ;
>             getEditor ().addDisposeListener (disposeListener);
>             this.overviewInitialized = true;
163,164c347,360
<     protected final ActionRegistry getActionRegistry () {
<         return myDiagramDisplayer.getActionRegistry ();
---
>         protected void showPage (int id) {
>             if (id == ID_OUTLINE) {
>                 showOutlineAction.setChecked (true);
>                 showOverviewAction.setChecked (false);
>                 pageBook.showPage (outline);
>                 if (thumbnail != null) thumbnail.setVisible (false);
> 
>             } else if (id == ID_OVERVIEW) {
>                 if (! overviewInitialized) initializeOverview ();
> 
>                 showOutlineAction.setChecked (false);
>                 showOverviewAction.setChecked (true);
>                 pageBook.showPage (overview);
>                 thumbnail.setVisible (true);
167,168d362
<     protected final GraphicalViewer getGraphicalViewer () {
<         return myDiagramDisplayer.getGraphicalViewer ();
171,172c365,368
<     protected IPropertySheetPage getPropertySheetPage () {
<         return myDiagramDisplayer.getPropertySheetPage ();
---
>         protected void unhookOutlineViewer () {
>             getSelectionSynchronizer ().removeViewer (getViewer ());
>             if (disposeListener != null && getEditor () != null && ! getEditor ().isDisposed ()) getEditor ().removeDisposeListener (disposeListener);
> 
175,176c371,372
<     protected IContentOutlinePage getOutlinePage () {
<         return new DiagramContentOutlinePage (myDiagramDisplayer, getDefaultOutlineViewMode ());
---
>         protected Control getEditor () {
>             return getGraphicalViewer ().getControl ();
179,180d374
<     protected IDiagramLayouter getDiagramLayouter () {
<         return new DefaultDiagramLayouter ();
182a377,380
>     private KeyHandler keyHandler;
>     private IWorkbenchPartSite partSite;
>     private RulerComposite rulerComposite;
> 
184c382
<         return DiagramContentOutlinePage.ID_OVERVIEW;
---
>         return ID_OVERVIEW;
187,189c385,386
<     @Override
<     public boolean isSaveAsAllowed () {
<         return false;
---
>     protected RulerComposite getRulerComposite () {
>         return rulerComposite;
192,193c389,390
<     @Override
<     public void doSaveAs () {
---
>     protected void setRulerComposite (RulerComposite rulerComp) {
>         this.rulerComposite = rulerComp;
196,215c393,394
<     @Override
<     public void init (IEditorSite site, IEditorInput input) throws PartInitException {
<         setSite (site);
<         TransactionalEditingDomain editingDomain = getEditingDomain (input);
<         if (editingDomain == null) {
<             editingDomain = reuseEditingDomain (input);
<         }
<         if (editingDomain == null) {
<             editingDomain = createEditingDomain ();
<         }
<         ForceTrackingModificationAdapter adapter = (ForceTrackingModificationAdapter) EcoreUtil.getExistingAdapter (editingDomain.getResourceSet (), ForceTrackingModificationAdapter.class);
<         if (adapter == null) {
<             adapter = new ForceTrackingModificationAdapter ();
<             editingDomain.getResourceSet ().eAdapters ().add (adapter);
<         }
<         adapter.acquire ();
<         myDiagramDisplayer = new DiagramDisplayer (this, createEditDomain (), editingDomain);
<         getCommandStack ().addCommandStackListener (commandStackListener);
<         getCommandStack ().addCommandStackEventListener (mySaveListener);
<         setInput (input);
---
>     public DiagramEditor () {
>         createDiagramEditDomain ();
218,227c397,398
<     @Override
<     public void dispose () {
<         if (myDiagramDisplayer != null) {
<             getCommandStack ().removeCommandStackEventListener (mySaveListener);
<             getCommandStack ().removeCommandStackListener (commandStackListener);
<             ForceTrackingModificationAdapter adapter = (ForceTrackingModificationAdapter) EcoreUtil.getExistingAdapter (getEditingDomain ().getResourceSet (), ForceTrackingModificationAdapter.class);
<             if (adapter != null) {
<                 adapter.release ();
<                 if (adapter.isReleased ()) {
<                     getEditingDomain ().getResourceSet ().eAdapters ().remove (adapter);
---
>     public IDiagramEditDomain getDiagramEditDomain () {
>         return (IDiagramEditDomain) getEditDomain ();
228a400,402
> 
>     public IDiagramGraphicalViewer getDiagramGraphicalViewer () {
>         return (IDiagramGraphicalViewer) getGraphicalViewer ();
230,231c404,408
<             myDiagramDisplayer.dispose ();
<             myDiagramDisplayer = null;
---
> 
>     public Diagram getDiagram () {
>         if (getEditorInput () != null) return ((IDiagramEditorInput) getEditorInput ()).getDiagram ();
> 
>         return null;
233c410,412
<         super.dispose ();
---
> 
>     public DiagramEditPart getDiagramEditPart () {
>         return (DiagramEditPart) getDiagramGraphicalViewer ().getContents ();
236d414
<     @Override
238,257c416,419
<         if (type == IPropertySheetPage.class) {
<             return getPropertySheetPage ();
<         } else if (type == IContentOutlinePage.class) {
<             return getOutlinePage ();
<         } else if (type == ZoomManager.class) {
<             return getZoomManager ();
<         } else if (type == IDiagramLayouter.class) {
<             return getDiagramLayouter ();
<         } else if (type == PalettePage.class) {
<             return myDiagramDisplayer.getPalettePage ();
<         } else if (type == GraphicalViewer.class) {
<             return getGraphicalViewer ();
<         } else if (type == CommandStack.class) {
<             return getCommandStack ();
<         } else if (type == ActionRegistry.class) {
<             return getActionRegistry ();
<         } else if (type == EditPart.class && getGraphicalViewer () != null) {
<             return getGraphicalViewer ().getRootEditPart ();
<         } else if (type == IFigure.class && getGraphicalViewer () != null) {
<             return ((GraphicalEditPart) getGraphicalViewer ().getRootEditPart ()).getFigure ();
---
>         if (type == IContentOutlinePage.class) {
>             TreeViewer viewer = new TreeViewer ();
>             viewer.setRootEditPart (new DiagramRootTreeEditPart ());
>             return new DiagramOutlinePage (viewer);
258a421,427
>         if (type == CommandManager.class) return getCommandManager ();
> 
>         if (ActionManager.class == type) return getActionManager ();
> 
>         if (IDiagramEditDomain.class == type) return getDiagramEditDomain ();
> 
>         if (type == ZoomManager.class) return getZoomManager ();
263,266c432,438
<     private void setDirty (boolean isDirty) {
<         if (isDirty != myIsDirty) {
<             myIsDirty = isDirty;
<             firePropertyChange (PROP_DIRTY);
---
>     public void init (IEditorSite site, IEditorInput input) throws PartInitException {
>         try {
>             super.init (site, input);
>             EditorService.getInstance ().registerEditor (this);
>         } catch (Exception e) {
>             Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "init", e);
>             throw new PartInitException (e.getMessage (), e);
270,273c442,447
<     @Override
<     public boolean isDirty () {
<         return myIsDirty;
<     }
---
>     public void dispose () {
>         persistViewerSettings ();
>         EditorService.getInstance ().unregisterEditor (DiagramEditor.this);
>         stopListening ();
>         DiagramRulerProvider vertProvider = (DiagramRulerProvider) getDiagramGraphicalViewer ().getProperty (RulerProvider.PROPERTY_VERTICAL_RULER);
>         if (vertProvider != null) vertProvider.uninit ();
275,276c449,452
<     protected void addAction (IAction action) {
<         myDiagramDisplayer.addAction (action);
---
>         DiagramRulerProvider horzProvider = (DiagramRulerProvider) getDiagramGraphicalViewer ().getProperty (RulerProvider.PROPERTY_HORIZONTAL_RULER);
>         if (horzProvider != null) horzProvider.uninit ();
> 
>         super.dispose ();
279,280c455,480
<     protected void addEditorAction (WorkbenchPartAction action) {
<         myDiagramDisplayer.addEditorAction (action);
---
>     protected KeyHandler getKeyHandler () {
>         if (keyHandler == null) {
>             keyHandler = new KeyHandler ();
>             ActionRegistry registry = getActionRegistry ();
>             IAction action;
>             action = new PromptingDeleteAction (this);
>             action.setText (DiagramUIMessages.DiagramEditor_Delete_from_Diagram);
>             registry.registerAction (action);
>             getSelectionActions ().add (action.getId ());
>             action = new InsertAction (this);
>             action.setText ("");
>             registry.registerAction (action);
>             getSelectionActions ().add (action.getId ());
>             PromptingDeleteFromModelAction deleteModelAction = new PromptingDeleteFromModelAction (this);
>             deleteModelAction.init ();
>             registry.registerAction (deleteModelAction);
>             action = new DirectEditAction ((IWorkbenchPart) this);
>             registry.registerAction (action);
>             getSelectionActions ().add (action.getId ());
>             keyHandler.put (KeyStroke.getPressed (SWT.INSERT, 0), getActionRegistry ().getAction (InsertAction.ID));
>             keyHandler.put (KeyStroke.getPressed (SWT.DEL, 127, 0), getActionRegistry ().getAction (ActionFactory.DELETE.getId ()));
>             keyHandler.put (KeyStroke.getPressed (SWT.BS, 8, 0), getActionRegistry ().getAction (ActionFactory.DELETE.getId ()));
>             keyHandler.put (KeyStroke.getPressed ((char) 0x4, 100, SWT.CTRL), getActionRegistry ().getAction (ActionIds.ACTION_DELETE_FROM_MODEL));
>             keyHandler.put (KeyStroke.getPressed (SWT.F2, 0), getActionRegistry ().getAction (GEFActionConstants.DIRECT_EDIT));
>         }
>         return keyHandler;
283,284c483,491
<     protected void addEditPartAction (SelectionAction action) {
<         myDiagramDisplayer.addEditPartAction (action);
---
>     protected void createGraphicalViewer (Composite parent) {
>         setRulerComposite (new RulerComposite (parent, SWT.NONE));
>         ScrollingGraphicalViewer sGViewer = createScrollingGraphicalViewer ();
>         sGViewer.createControl (getRulerComposite ());
>         setGraphicalViewer (sGViewer);
>         hookGraphicalViewer ();
>         configureGraphicalViewer ();
>         initializeGraphicalViewer ();
>         getRulerComposite ().setGraphicalViewer ((ScrollingGraphicalViewer) getGraphicalViewer ());
287,288c494,495
<     protected void addStackAction (StackAction action) {
<         myDiagramDisplayer.addStackAction (action);
---
>     protected ScrollingGraphicalViewer createScrollingGraphicalViewer () {
>         return new DiagramGraphicalViewer ();
291,294c498,514
<     @Override
<     public void createPartControl (Composite parent) {
<         myDiagramDisplayer.createViewer (parent);
<         createActions ();
---
>     protected void configureGraphicalViewer () {
>         super.configureGraphicalViewer ();
>         IDiagramGraphicalViewer viewer = getDiagramGraphicalViewer ();
>         RootEditPart rootEP = EditPartService.getInstance ().createRootEditPart (getDiagram ());
>         if (rootEP instanceof IDiagramPreferenceSupport) {
>             ((IDiagramPreferenceSupport) rootEP).setPreferencesHint (getPreferencesHint ());
>         }
>         if (getDiagramGraphicalViewer () instanceof DiagramGraphicalViewer) {
>             ((DiagramGraphicalViewer) getDiagramGraphicalViewer ()).hookWorkspacePreferenceStore (getWorkspaceViewerPreferenceStore ());
>         }
>         viewer.setRootEditPart (rootEP);
>         viewer.setEditPartFactory (EditPartService.getInstance ());
>         ContextMenuProvider provider = new DiagramContextMenuProvider (this, viewer);
>         viewer.setContextMenu (provider);
>         getSite ().registerContextMenu (ActionIds.DIAGRAM_EDITOR_CONTEXT_MENU, provider, viewer);
>         viewer.setKeyHandler (new DiagramGraphicalViewerKeyHandler (viewer).setParent (getKeyHandler ()));
>         ((FigureCanvas) viewer.getControl ()).setScrollBarVisibility (FigureCanvas.ALWAYS);
297,299c517,518
<     @Override
<     public void setFocus () {
<         myDiagramDisplayer.setFocus ();
---
>     protected void initializeGraphicalViewer () {
>         initializeGraphicalViewerContents ();
302,305c521,523
<     protected TransactionalEditingDomain getEditingDomain (IEditorInput input) {
<         if (input instanceof DiagramEditorInput) {
<             TransactionalEditingDomain result = TransactionUtil.getEditingDomain (((DiagramEditorInput) input).getDiagram ());
<             return result;
---
>     protected void initializeGraphicalViewerContents () {
>         getDiagramGraphicalViewer ().setContents (getDiagram ());
>         initializeContents (getDiagramEditPart ());
307c525,528
<         return null;
---
> 
>     protected void createDiagramEditDomain () {
>         setEditDomain (new DiagramEditDomain (this));
>         configureDiagramEditDomain ();
310,320c531,532
<     protected TransactionalEditingDomain reuseEditingDomain (IEditorInput input) {
<         IEditorRegistry editorRegistry = PlatformUI.getWorkbench ().getEditorRegistry ();
<         IEditorDescriptor editorDesc = editorRegistry.findEditor (getSite ().getId ());
<         IEditorMatchingStrategy matchingStrategy = editorDesc.getEditorMatchingStrategy ();
<         IEditorReference [] editorRefs = getEditorSite ().getPage ().getEditorReferences ();
<         for (int i = 0;
<         i < editorRefs.length; i ++) {
<             if (matches (matchingStrategy, editorRefs [i], input)) {
<                 DiagramEditor anotherEditor = (DiagramEditor) editorRefs [i].getEditor (false);
<                 if (anotherEditor != null) {
<                     return anotherEditor.getEditingDomain ();
---
>     protected void configureDiagramEditDomain () {
>         getEditDomain ().setCommandStack (new DiagramCommandStack (getDiagramEditDomain ()));
321a534,539
> 
>     protected void setInput (IEditorInput input) {
>         stopListening ();
>         super.setInput (input);
>         if (input != null) {
>             Assert.isNotNull (getDiagram (), "Couldn't load/create diagram view");
322a541
>         startListening ();
324c543,544
<         return null;
---
> 
>     protected void createActions () {
327,329c547
<     private boolean matches (IEditorMatchingStrategy strategy, IEditorReference editorRef, IEditorInput input) {
<         if (strategy == null) {
<             if (getSite ().getId ().equals (editorRef.getId ())) {
---
>     protected void closeEditor (final boolean save) {
331,333c549,552
<                     return input.equals (editorRef.getEditorInput ());
<                 } catch (PartInitException e) {
<                     return false;
---
>             getSite ().getPage ().closeEditor (DiagramEditor.this, save);
>         } catch (SWTException e) {
>             Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, this.getClass (), "closeEditor", e);
>             Log.error (DiagramUIPlugin.getInstance (), IStatus.ERROR, e.getMessage (), e);
336,338c555,556
<             return false;
<         } else {
<             return strategy.matches (editorRef, input);
---
> 
>     protected void startListening () {
339a558,559
> 
>     protected void stopListening () {
342,345c562,566
<     protected TransactionalEditingDomain createEditingDomain () {
<         TransactionalEditingDomain editingDomain = WorkspaceEditingDomainFactory.INSTANCE.createEditingDomain ();
<         editingDomain.getResourceSet ().eAdapters ().add (new AdapterFactoryEditingDomain.EditingDomainProvider (editingDomain));
<         return editingDomain;
---
>     protected void clearGraphicalViewerContents () {
>         if (getDiagramGraphicalViewer ().getContents () != null) {
>             getDiagramGraphicalViewer ().getContents ().removeNotify ();
>         }
>         getDiagramGraphicalViewer ().setContents (null);
348,349c569,570
<     public void configureGraphicalViewer () {
<         getGraphicalViewer ().getControl ().setBackground (ColorConstants.listBackground);
---
>     protected ActionManager getActionManager () {
>         return getDiagramEditDomain ().getActionManager ();
352,354c573,574
<     protected double [] getZoomLevels () {
<         double [] result = {.05, .1, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 4};
<         return result;
---
>     protected ZoomManager getZoomManager () {
>         return ((DiagramRootEditPart) getRootEditPart ()).getZoomManager ();
357c577,579
<     public abstract void configurePalette (PaletteRoot paletteRoot);
---
>     private RootEditPart getRootEditPart () {
>         return getGraphicalViewer ().getRootEditPart ();
>     }
359,361c581,582
<     protected EditDomain createEditDomain () {
<         DefaultEditDomain domain = new DefaultEditDomain (this);
<         return domain;
---
>     protected CommandManager getCommandManager () {
>         return getActionManager ().getCommandManager ();
364c585,587
<     public abstract void initializeGraphicalViewer ();
---
>     public final void gotoMarker (IMarker marker) {
>         MarkerNavigationService.getInstance ().gotoMarker (this, marker);
>     }
366c589,591
<     public abstract AdapterFactory getDomainAdapterFactory ();
---
>     protected Control getGraphicalControl () {
>         return getRulerComposite ();
>     }
368c593,595
<     public abstract boolean isFlyoutPalette ();
---
>     public IWorkbenchPartSite getSite () {
>         return partSite;
>     }
370c597,599
<     protected abstract void createActions ();
---
>     protected void setSite (IWorkbenchPartSite site) {
>         this.partSite = site;
>     }
372c601,603
<     private static class ForceTrackingModificationAdapter extends AdapterImpl {
---
>     public String getContributorId () {
>         return "org.eclipse.gmf.runtime.diagram.ui.properties";
>     }
374,380c605,627
<         @Override
<         public void setTarget (Notifier newTarget) {
<             super.setTarget (newTarget);
<             if (newTarget instanceof ResourceSet) {
<                 ResourceSet resourceSet = (ResourceSet) newTarget;
<                 for (Resource next : resourceSet.getResources ()) {
<                     next.setTrackingModification (true);
---
>     public static void addDefaultPreferences (PreferenceStore store, PreferencesHint preferencesHint) {
>         store.setValue (WorkspaceViewerProperties.ZOOM, 1.0);
>         store.setValue (WorkspaceViewerProperties.VIEWPAGEBREAKS, false);
>         IPreferenceStore globalPreferenceStore = (IPreferenceStore) preferencesHint.getPreferenceStore ();
>         boolean viewGrid = globalPreferenceStore.getBoolean (IPreferenceConstants.PREF_SHOW_GRID);
>         boolean snapToGrid = globalPreferenceStore.getBoolean (IPreferenceConstants.PREF_SNAP_TO_GRID);
>         boolean viewRulers = globalPreferenceStore.getBoolean (IPreferenceConstants.PREF_SHOW_RULERS);
>         store.setValue (WorkspaceViewerProperties.VIEWGRID, viewGrid);
>         store.setValue (WorkspaceViewerProperties.SNAPTOGRID, snapToGrid);
>         store.setValue (WorkspaceViewerProperties.VIEWRULERS, viewRulers);
>         store.setValue (WorkspaceViewerProperties.PREF_USE_WORKSPACE_SETTINGS, DefaultValues.DEFAULT_USE_WORKSPACE_SETTINGS);
>         store.setValue (WorkspaceViewerProperties.PREF_USE_DIAGRAM_SETTINGS, DefaultValues.DEFAULT_USE_DIAGRAM_SETTINGS);
>         store.setValue (WorkspaceViewerProperties.PREF_USE_INCHES, DefaultValues.DEFAULT_INCHES);
>         store.setValue (WorkspaceViewerProperties.PREF_USE_MILLIM, DefaultValues.DEFAULT_MILLIM);
>         store.setValue (WorkspaceViewerProperties.PREF_USE_PORTRAIT, DefaultValues.DEFAULT_PORTRAIT);
>         store.setValue (WorkspaceViewerProperties.PREF_USE_LANDSCAPE, DefaultValues.DEFAULT_LANDSCAPE);
>         store.setValue (WorkspaceViewerProperties.PREF_PAGE_SIZE, DefaultValues.getLocaleSpecificPageType ().getName ());
>         store.setValue (WorkspaceViewerProperties.PREF_PAGE_WIDTH, DefaultValues.getLocaleSpecificPageType ().getWidth ());
>         store.setValue (WorkspaceViewerProperties.PREF_PAGE_HEIGHT, DefaultValues.getLocaleSpecificPageType ().getHeight ());
>         store.setValue (WorkspaceViewerProperties.PREF_MARGIN_TOP, DefaultValues.DEFAULT_MARGIN_TOP);
>         store.setValue (WorkspaceViewerProperties.PREF_MARGIN_BOTTOM, DefaultValues.DEFAULT_MARGIN_BOTTOM);
>         store.setValue (WorkspaceViewerProperties.PREF_MARGIN_LEFT, DefaultValues.DEFAULT_MARGIN_LEFT);
>         store.setValue (WorkspaceViewerProperties.PREF_MARGIN_RIGHT, DefaultValues.DEFAULT_MARGIN_RIGHT);
381a629,648
> 
>     public PreferenceStore getWorkspaceViewerPreferenceStore () {
>         if (workspaceViewerPreferenceStore != null) {
>             return workspaceViewerPreferenceStore;
>         } else {
>             IPath path = DiagramUIPlugin.getInstance ().getStateLocation ();
>             String id = ViewUtil.getIdStr (getDiagram ());
>             String fileName = path.toString () + "/" + id;
>             java.io.File file = new File (fileName);
>             workspaceViewerPreferenceStore = new PreferenceStore (fileName);
>             if (file.exists ()) {
>                 try {
>                     workspaceViewerPreferenceStore.load ();
>                 } catch (Exception e) {
>                     addDefaultPreferences ();
>                 }
>             } else {
>                 addDefaultPreferences ();
>             }
>             return workspaceViewerPreferenceStore;
385,399c652,653
<         @Override
<         public void notifyChanged (Notification msg) {
<             if (msg.getNotifier () == getTarget () && msg.getFeatureID (ResourceSet.class) == ResourceSet.RESOURCE_SET__RESOURCES) {
<                 switch (msg.getEventType ()) {
<                     case Notification.ADD :
<                         {
<                             Resource resource = (Resource) msg.getNewValue ();
<                             resource.setTrackingModification (true);
<                         } break;
<                     case Notification.ADD_MANY :
<                         {
<                             @SuppressWarnings("unchecked")
<                             Collection < Resource > resources = (Collection < Resource >) msg.getNewValue ();
<                             for (Resource next : resources) {
<                                 next.setTrackingModification (true);
---
>     protected void addDefaultPreferences () {
>         addDefaultPreferences (workspaceViewerPreferenceStore, getPreferencesHint ());
401c655,669
<                         }}
---
> 
>     public void persistViewerSettings () {
>         Viewport viewport = getDiagramEditPart ().getViewport ();
>         if (viewport != null) {
>             int x = viewport.getHorizontalRangeModel ().getValue ();
>             int y = viewport.getVerticalRangeModel ().getValue ();
>             getWorkspaceViewerPreferenceStore ().setValue (WorkspaceViewerProperties.VIEWPORTX, x);
>             getWorkspaceViewerPreferenceStore ().setValue (WorkspaceViewerProperties.VIEWPORTY, y);
>         }
>         getWorkspaceViewerPreferenceStore ().setValue (WorkspaceViewerProperties.ZOOM, getZoomManager ().getZoom ());
>         try {
>             if (getWorkspaceViewerPreferenceStore ().needsSaving ()) getWorkspaceViewerPreferenceStore ().save ();
> 
>         } catch (IOException ioe) {
>             Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, PageInfoHelper.class, "persistViewerSettings", ioe);
405,407c673,737
<         @Override
<         public boolean isAdapterForType (Object type) {
<             return ForceTrackingModificationAdapter.class.equals (type);
---
>     private void initializeContents (EditPart editpart) {
>         getZoomManager ().setZoom (getWorkspaceViewerPreferenceStore ().getDouble (WorkspaceViewerProperties.ZOOM));
>         if (getWorkspaceViewerPreferenceStore ().getBoolean (WorkspaceViewerProperties.VIEWPAGEBREAKS)) {
>             getDiagramEditPart ().getFigure ().invalidate ();
>             getDiagramEditPart ().getFigure ().validate ();
>         }
>         getDiagramEditPart ().refreshPageBreaks ();
>         ((DiagramEditPart) editpart).getViewport ().validate ();
>         if (editpart instanceof DiagramEditPart) {
>             int x = getWorkspaceViewerPreferenceStore ().getInt (WorkspaceViewerProperties.VIEWPORTX);
>             int y = getWorkspaceViewerPreferenceStore ().getInt (WorkspaceViewerProperties.VIEWPORTY);
>             ((DiagramEditPart) editpart).getViewport ().getHorizontalRangeModel ().setValue (x);
>             ((DiagramEditPart) editpart).getViewport ().getVerticalRangeModel ().setValue (y);
>         }
>         int rulerUnits = getWorkspaceViewerPreferenceStore ().getInt (WorkspaceViewerProperties.RULERUNIT);
>         GuideStyle guideStyle = (GuideStyle) getDiagram ().getStyle (NotationPackage.eINSTANCE.getGuideStyle ());
>         if (guideStyle != null) {
>             RootEditPart rep = getGraphicalViewer ().getRootEditPart ();
>             DiagramRootEditPart root = (DiagramRootEditPart) rep;
>             DiagramRuler verticalRuler = ((DiagramRootEditPart) getRootEditPart ()).getVerticalRuler ();
>             verticalRuler.setGuideStyle (guideStyle);
>             verticalRuler.setUnit (rulerUnits);
>             DiagramRulerProvider vertProvider = new DiagramRulerProvider (verticalRuler, root.getMapMode ());
>             vertProvider.init ();
>             getDiagramGraphicalViewer ().setProperty (RulerProvider.PROPERTY_VERTICAL_RULER, vertProvider);
>             DiagramRuler horizontalRuler = ((DiagramRootEditPart) getRootEditPart ()).getHorizontalRuler ();
>             horizontalRuler.setGuideStyle (guideStyle);
>             horizontalRuler.setUnit (rulerUnits);
>             DiagramRulerProvider horzProvider = new DiagramRulerProvider (horizontalRuler, root.getMapMode ());
>             horzProvider.init ();
>             getDiagramGraphicalViewer ().setProperty (RulerProvider.PROPERTY_HORIZONTAL_RULER, horzProvider);
>             getDiagramGraphicalViewer ().setProperty (RulerProvider.PROPERTY_RULER_VISIBILITY, Boolean.valueOf (getWorkspaceViewerPreferenceStore ().getBoolean (WorkspaceViewerProperties.VIEWRULERS)));
>         }
>         getDiagramGraphicalViewer ().setProperty (SnapToGeometry.PROPERTY_SNAP_ENABLED, Boolean.valueOf (getWorkspaceViewerPreferenceStore ().getBoolean (WorkspaceViewerProperties.SNAPTOGRID)));
>         getDiagramGraphicalViewer ().setProperty (SnapToGrid.PROPERTY_GRID_ENABLED, Boolean.valueOf (getWorkspaceViewerPreferenceStore ().getBoolean (WorkspaceViewerProperties.VIEWGRID)));
>         getDiagramGraphicalViewer ().setProperty (SnapToGrid.PROPERTY_GRID_VISIBLE, Boolean.valueOf (getWorkspaceViewerPreferenceStore ().getBoolean (WorkspaceViewerProperties.VIEWGRID)));
>         Point origin = new Point ();
>         getDiagramGraphicalViewer ().setProperty (SnapToGrid.PROPERTY_GRID_ORIGIN, origin);
>         double dSpacing = ((DiagramRootEditPart) getDiagramEditPart ().getRoot ()).getGridSpacing ();
>         ((DiagramRootEditPart) getDiagramEditPart ().getRoot ()).setGridSpacing (dSpacing);
>     }
> 
>     protected List getElements (final ISelection selection) {
>         if (selection instanceof IStructuredSelection) {
>             return (List) MEditingDomainGetter.getMEditingDomain (((IStructuredSelection) selection).toList ()).runAsRead (new MRunnable () {
> 
>                 public Object run () {
>                     List retval = new ArrayList ();
>                     if (selection instanceof IStructuredSelection) {
>                         IStructuredSelection structuredSelection = (IStructuredSelection) selection;
>                         for (Iterator i = structuredSelection.iterator ();
>                         i.hasNext ();) {
>                             Object next = i.next ();
>                             View view = (View) ((IAdaptable) next).getAdapter (View.class);
>                             if (view != null) {
>                                 EObject eObject = ViewUtil.resolveSemanticElement (view);
>                                 if (eObject != null) {
>                                     retval.add (eObject);
>                                 } else {
>                                     retval.add (view);
>                                 }
>                             }
>                         }
>                     }
>                     return retval;
410,411d739
<         public void acquire () {
<             myRefCount ++;
414,416c742
<         public void release () {
<             if (myRefCount == 0) {
<                 throw new IllegalStateException ();
---
>             );
418c744
<             myRefCount --;
---
>         return Collections.EMPTY_LIST;
421,422c747,749
<         public boolean isReleased () {
<             return myRefCount == 0;
---
>     public ShowInContext getShowInContext () {
>         ISelection selection = getGraphicalViewer ().getSelection ();
>         return new ShowInContext (null, selection);
425c752,753
<         private int myRefCount;
---
>     protected PreferencesHint getPreferencesHint () {
>         return new PreferencesHint (getEditorSite ().getId ());
427a756
>     ;
