3,20d2
< import java.util.Collection;
< 
< import java.util.Collections;
< 
< import org.eclipse.core.commands.ExecutionException;
< 
< import org.eclipse.core.runtime.IAdaptable;
< 
< import org.eclipse.core.runtime.IProgressMonitor;
< 
< import org.eclipse.core.runtime.IStatus;
< 
< import org.eclipse.core.runtime.NullProgressMonitor;
< 
< import org.eclipse.core.runtime.Status;
< 
< import org.eclipse.draw2d.Figure;
< 
23c5
< import org.eclipse.draw2d.LayoutManager;
---
> import org.eclipse.draw2d.Polyline;
27,34d8
< import org.eclipse.emf.common.notify.Notification;
< 
< import org.eclipse.emf.ecore.EObject;
< 
< import org.eclipse.emf.transaction.Transaction;
< 
< import org.eclipse.emf.workspace.AbstractEMFOperation;
< 
49,66d22
< import org.eclipse.gmf.gmfgraph.ConstantColor;
< 
< import org.eclipse.gmf.gmfgraph.Dimension;
< 
< import org.eclipse.gmf.gmfgraph.FigureMarker;
< 
< import org.eclipse.gmf.gmfgraph.GMFGraphFactory;
< 
< import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
< 
< import org.eclipse.gmf.gmfgraph.Point;
< 
< import org.eclipse.gmf.gmfgraph.Polyline;
< 
< import org.eclipse.gmf.gmfgraph.RGBColor;
< 
< import org.eclipse.gmf.gmfgraph.XYLayoutData;
< 
73,75c29
< import org.eclipse.gmf.graphdef.editor.part.GMFGraphDiagramEditorPlugin;
< 
< import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
---
> import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
85,92d38
< import org.eclipse.gmf.runtime.notation.Bounds;
< 
< import org.eclipse.gmf.runtime.notation.Node;
< 
< import org.eclipse.gmf.runtime.notation.NotationPackage;
< 
< import org.eclipse.gmf.runtime.notation.ShapeStyle;
< 
95,96c41,42
< public class Polyline2EditPart extends AbstractFigureEditPart {
<     public static final int VISUAL_ID = 2008;
---
> public class Polyline2EditPart extends ShapeNodeEditPart {
>     public static final int VISUAL_ID = 3008;
98,99d43
<     private PolylineFigure myFigure;
<     protected Figure myNodeFigure;
106,462d49
<     public void activate () {
<         if (isActive ()) {
<             return;
<         }
<         View view = (View) getModel ();
<         if (view.getElement () == null) {
<             super.activate ();
<             return;
<         }
<         final Polyline modelElement = (Polyline) view.getElement ();
<         final NotificationListener Layoutable_LayoutData_PropertiesListener = new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 layoutDataChanged (modelElement.getLayoutData ());
<             }
< 
<         }
< 
<         ;
<         if (modelElement.getLayoutData () != null) {
<             addListenerFilter ("Layoutable_LayoutData_PropertiesListener", Layoutable_LayoutData_PropertiesListener, modelElement.getLayoutData ());
<         }
<         addListenerFilter ("Layoutable_LayoutData_Listener", new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 removeListenerFilter ("Layoutable_LayoutData_PropertiesListener");
<                 if (modelElement.getLayoutData () != null) {
<                     addListenerFilter ("Layoutable_LayoutData_PropertiesListener", Layoutable_LayoutData_PropertiesListener, modelElement.getLayoutData ());
<                 }
<                 layoutDataChanged (modelElement.getLayoutData ());
<             }
< 
<         }
< 
<         , modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_LayoutData ());
<         final NotificationListener Layoutable_Layout_PropertiesListener = new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 layoutChanged (modelElement.getLayout ());
<             }
< 
<         }
< 
<         ;
<         if (modelElement.getLayout () != null) {
<             addListenerFilter ("Layoutable_Layout_PropertiesListener", Layoutable_Layout_PropertiesListener, modelElement.getLayout ());
<         }
<         addListenerFilter ("Layoutable_Layout_Listener", new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 removeListenerFilter ("Layoutable_Layout_PropertiesListener");
<                 if (modelElement.getLayout () != null) {
<                     addListenerFilter ("Layoutable_Layout_PropertiesListener", Layoutable_Layout_PropertiesListener, modelElement.getLayout ());
<                 }
<                 layoutChanged (modelElement.getLayout ());
<             }
< 
<         }
< 
<         , modelElement, GMFGraphPackage.eINSTANCE.getLayoutable_Layout ());
<         addListenerFilter ("Shape_Outline_Listener", new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 myFigure.setOutline (modelElement.isOutline ());
<             }
< 
<         }
< 
<         , modelElement, GMFGraphPackage.eINSTANCE.getShape_Outline ());
<         addListenerFilter ("Shape_Fill_Listener", new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 myFigure.setFill (modelElement.isFill ());
<             }
< 
<         }
< 
<         , modelElement, GMFGraphPackage.eINSTANCE.getShape_Fill ());
<         addListenerFilter ("Shape_LineWidth_Listener", new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 myFigure.setLineWidth (modelElement.getLineWidth ());
<             }
< 
<         }
< 
<         , modelElement, GMFGraphPackage.eINSTANCE.getShape_LineWidth ());
<         addListenerFilter ("Shape_LineKind_Listener", new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 myFigure.setLineStyle (getLineStyle (modelElement.getLineKind ()));
<             }
< 
<         }
< 
<         , modelElement, GMFGraphPackage.eINSTANCE.getShape_LineKind ());
<         addListenerFilter ("Shape_XorFill_Listener", new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 myFigure.setFillXOR (modelElement.isXorFill ());
<             }
< 
<         }
< 
<         , modelElement, GMFGraphPackage.eINSTANCE.getShape_XorFill ());
<         addListenerFilter ("Shape_XorOutline_Listener", new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 myFigure.setOutlineXOR (modelElement.isXorOutline ());
<             }
< 
<         }
< 
<         , modelElement, GMFGraphPackage.eINSTANCE.getShape_XorOutline ());
<         final NotificationListener Polyline_Template_PropertiesListener = new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 myFigure.setPoints (getPointList (modelElement.getTemplate ()));
<             }
< 
<         }
< 
<         ;
<         for (int i = 0;
<         i < modelElement.getTemplate ().size (); i ++) {
<             addListenerFilter ("Polyline_Template_PropertiesListener#" + i, Polyline_Template_PropertiesListener, (EObject) modelElement.getTemplate ().get (i));
<         }
<         addListenerFilter ("Polyline_Template_Listener", new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 int listSize = modelElement.getTemplate ().size ();
<                 if (notification.getOldValue () instanceof Collection) {
<                     listSize += ((Collection) notification.getOldValue ()).size ();
<                 } else {
<                     listSize ++;
<                 }
<                 for (int i = 0;
<                 i < listSize; i ++) {
<                     removeListenerFilter ("Polyline_Template_PropertiesListener#" + i);
<                 }
<                 for (int i = 0;
<                 i < modelElement.getTemplate ().size (); i ++) {
<                     addListenerFilter ("Polyline_Template_PropertiesListener#" + i, Polyline_Template_PropertiesListener, (EObject) modelElement.getTemplate ().get (i));
<                 }
<                 myFigure.setPoints (getPointList (modelElement.getTemplate ()));
<             }
< 
<         }
< 
<         , modelElement, GMFGraphPackage.eINSTANCE.getPolyline_Template ());
<         final Bounds bounds = (Bounds) ((Node) view).getLayoutConstraint ();
<         final int sizeX;
<         final int sizeY;
<         if (modelElement.getPreferredSize () != null) {
<             sizeX = getMapMode ().DPtoLP (modelElement.getPreferredSize ().getDx ());
<             sizeY = getMapMode ().DPtoLP (modelElement.getPreferredSize ().getDy ());
<         } else {
<             sizeX = getMapMode ().DPtoLP (20);
<             sizeY = getMapMode ().DPtoLP (20);
<         }
<         final int locationX;
<         final int locationY;
<         if (modelElement.getLocation () != null) {
<             locationX = getMapMode ().DPtoLP (modelElement.getLocation ().getX ());
<             locationY = getMapMode ().DPtoLP (modelElement.getLocation ().getY ());
<         } else {
<             locationX = bounds.getX ();
<             locationY = bounds.getY ();
<         }
<         if (sizeX != bounds.getWidth () || sizeY != bounds.getHeight () || locationX != bounds.getX () || locationY != bounds.getY ()) {
<             AbstractEMFOperation setSizeOperation = new AbstractEMFOperation (getEditingDomain (), "Synchronizing view size with the model", Collections.singletonMap (Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) {
< 
<                 protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
<                     bounds.setX (locationX);
<                     bounds.setY (locationY);
<                     bounds.setWidth (sizeX);
<                     bounds.setHeight (sizeY);
<                     return Status.OK_STATUS;
<                 }
< 
<             }
< 
<             ;
<             try {
<                 setSizeOperation.execute (new NullProgressMonitor (), null);
<             } catch (ExecutionException e) {
<                 GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize view size with the model", e);
<             }
<         }
<         addListenerFilter ("BoundsListener", new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 Bounds bounds = (Bounds) notification.getNotifier ();
<                 Dimension dim = modelElement.getPreferredSize ();
<                 if (dim == null) {
<                     dim = GMFGraphFactory.eINSTANCE.createDimension ();
<                     modelElement.setPreferredSize (dim);
<                 }
<                 Point location = modelElement.getLocation ();
<                 if (location == null) {
<                     location = GMFGraphFactory.eINSTANCE.createPoint ();
<                     modelElement.setLocation (location);
<                 }
<                 int x = getMapMode ().LPtoDP (bounds.getWidth ());
<                 int y = getMapMode ().LPtoDP (bounds.getHeight ());
<                 int width = getMapMode ().LPtoDP (bounds.getX ());
<                 int height = getMapMode ().LPtoDP (bounds.getY ());
<                 if (dim.getDx () != x || dim.getDy () != y) {
<                     dim.setDx (x);
<                     dim.setDy (y);
<                 }
<                 if (location.getX () != width || location.getY () != height) {
<                     location.setX (width);
<                     location.setY (height);
<                 }
<                 myNodeFigure.setPreferredSize (bounds.getWidth (), bounds.getHeight ());
<                 myNodeFigure.setLocation (new org.eclipse.draw2d.geometry.Point (bounds.getX (), bounds.getY ()));
<                 if (modelElement.getLayoutData () instanceof XYLayoutData) {
<                     XYLayoutData xyLayoutData = (XYLayoutData) modelElement.getLayoutData ();
<                     Point topLeft;
<                     if (xyLayoutData.getTopLeft () != null) {
<                         topLeft = xyLayoutData.getTopLeft ();
<                     } else {
<                         topLeft = GMFGraphFactory.eINSTANCE.createPoint ();
<                         xyLayoutData.setTopLeft (topLeft);
<                     }
<                     if (topLeft.getX () != location.getX () || topLeft.getY () != location.getY ()) {
<                         topLeft.setX (location.getX ());
<                         topLeft.setY (location.getY ());
<                     }
<                     Dimension size;
<                     if (xyLayoutData.getSize () != null) {
<                         size = xyLayoutData.getSize ();
<                     } else {
<                         size = GMFGraphFactory.eINSTANCE.createDimension ();
<                         xyLayoutData.setSize (size);
<                     }
<                     if (size.getDx () != dim.getDx () || size.getDy () != dim.getDy ()) {
<                         size.setDx (dim.getDx ());
<                         size.setDy (dim.getDy ());
<                     }
<                 }
<                 if (getRoot () != null) {
<                     handleMajorSemanticChange ();
<                 }
<             }
< 
<         }
< 
<         , bounds);
<         final ShapeStyle shapeStyle = (ShapeStyle) view.getStyle (NotationPackage.eINSTANCE.getShapeStyle ());
<         if (modelElement.getBackgroundColor () != null) {
<             final int rgbColor;
<             if (modelElement.getBackgroundColor () instanceof RGBColor) {
<                 RGBColor modelColor = (RGBColor) modelElement.getBackgroundColor ();
<                 rgbColor = (modelColor.getRed () & 0xFF) | ((modelColor.getGreen () & 0xFF) << 8) | ((modelColor.getBlue () & 0xFF) << 16);
<             } else {
<                 ConstantColor modelColor = (ConstantColor) modelElement.getBackgroundColor ();
<                 switch (modelColor.getValue ().getValue ()) {
<                     default :
<                         rgbColor = - 1;
<                 }
<             }
<             if (rgbColor != - 1 && shapeStyle.getFillColor () != rgbColor) {
<                 AbstractEMFOperation setColorOperation = new AbstractEMFOperation (getEditingDomain (), "Synchronizing view Background color with the model", Collections.singletonMap (Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) {
< 
<                     protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
<                         shapeStyle.setFillColor (rgbColor);
<                         return Status.OK_STATUS;
<                     }
< 
<                 }
< 
<                 ;
<                 try {
<                     setColorOperation.execute (new NullProgressMonitor (), null);
<                 } catch (ExecutionException e) {
<                     GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize view Background background color with the model", e);
<                 }
<             }
<         }
<         if (modelElement.getForegroundColor () != null) {
<             final int rgbColor;
<             if (modelElement.getForegroundColor () instanceof RGBColor) {
<                 RGBColor modelColor = (RGBColor) modelElement.getForegroundColor ();
<                 rgbColor = (modelColor.getRed () & 0xFF) | ((modelColor.getGreen () & 0xFF) << 8) | ((modelColor.getBlue () & 0xFF) << 16);
<             } else {
<                 ConstantColor modelColor = (ConstantColor) modelElement.getForegroundColor ();
<                 switch (modelColor.getValue ().getValue ()) {
<                     default :
<                         rgbColor = - 1;
<                 }
<             }
<             if (rgbColor != - 1 && shapeStyle.getLineColor () != rgbColor) {
<                 AbstractEMFOperation setColorOperation = new AbstractEMFOperation (getEditingDomain (), "Synchronizing view Foreground color with the model", Collections.singletonMap (Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) {
< 
<                     protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
<                         shapeStyle.setLineColor (rgbColor);
<                         return Status.OK_STATUS;
<                     }
< 
<                 }
< 
<                 ;
<                 try {
<                     setColorOperation.execute (new NullProgressMonitor (), null);
<                 } catch (ExecutionException e) {
<                     GMFGraphDiagramEditorPlugin.getInstance ().logError ("Unable to synchronize view Foreground background color with the model", e);
<                 }
<             }
<         }
<         addListenerFilter ("ShapeStyleListener", new NotificationListener () {
< 
<             public void notifyChanged (Notification notification) {
<                 ShapeStyle shapeStyle = (ShapeStyle) notification.getNotifier ();
<                 switch (notification.getFeatureID (ShapeStyle.class)) {
<                     case NotationPackage.SHAPE_STYLE__FILL_COLOR :
<                         {
<                             int color = shapeStyle.getFillColor ();
<                             RGBColor modelColor;
<                             if (modelElement.getBackgroundColor () instanceof RGBColor) {
<                                 modelColor = (RGBColor) modelElement.getBackgroundColor ();
<                             } else {
<                                 modelColor = GMFGraphFactory.eINSTANCE.createRGBColor ();
<                                 modelElement.setBackgroundColor (modelColor);
<                             }
<                             if (modelColor.getRed () != (color & 0x000000FF) || modelColor.getGreen () != (color & 0x0000FF00)>> 8 || modelColor.getBlue () != (color & 0x00FF0000)>> 16) {
<                                 modelColor.setRed (color & 0x000000FF);
<                                 modelColor.setGreen ((color & 0x0000FF00)>> 8);
<                                 modelColor.setBlue ((color & 0x00FF0000)>> 16);
<                             }
<                             break;
<                         } case NotationPackage.SHAPE_STYLE__LINE_COLOR :
<                         {
<                             int color = shapeStyle.getLineColor ();
<                             RGBColor modelColor;
<                             if (modelElement.getForegroundColor () instanceof RGBColor) {
<                                 modelColor = (RGBColor) modelElement.getForegroundColor ();
<                             } else {
<                                 modelColor = GMFGraphFactory.eINSTANCE.createRGBColor ();
<                                 modelElement.setForegroundColor (modelColor);
<                             }
<                             if (modelColor.getRed () != (color & 0x000000FF) || modelColor.getGreen () != (color & 0x0000FF00)>> 8 || modelColor.getBlue () != (color & 0x00FF0000)>> 16) {
<                                 modelColor.setRed (color & 0x000000FF);
<                                 modelColor.setGreen ((color & 0x0000FF00)>> 8);
<                                 modelColor.setBlue ((color & 0x00FF0000)>> 16);
<                             }
<                             break;
<                         }}
<             }
< 
<         }
< 
<         , shapeStyle);
<         super.activate ();
<     }
< 
496,519c83
<         PolylineFigure figure = new PolylineFigure ();
<         myFigure = figure;
<         Polyline modelElement = (Polyline) ((View) getModel ()).getElement ();
<         if (modelElement != null) {
<             {
<                 layoutDataChanged (modelElement.getLayoutData ());
<             } {
<                 layoutChanged (modelElement.getLayout ());
<             } {
<                 myFigure.setOutline (modelElement.isOutline ());
<             } {
<                 myFigure.setFill (modelElement.isFill ());
<             } {
<                 myFigure.setLineWidth (modelElement.getLineWidth ());
<             } {
<                 myFigure.setLineStyle (getLineStyle (modelElement.getLineKind ()));
<             } {
<                 myFigure.setFillXOR (modelElement.isXorFill ());
<             } {
<                 myFigure.setOutlineXOR (modelElement.isXorOutline ());
<             } {
<                 myFigure.setPoints (getPointList (modelElement.getTemplate ()));
<             }}
<         return primaryShape = figure;
---
>         return primaryShape = new Polyline ();
522,523c86,87
<     public PolylineFigure getPrimaryShape () {
<         return (PolylineFigure) primaryShape;
---
>     public org.eclipse.draw2d.Polyline getPrimaryShape () {
>         return (org.eclipse.draw2d.Polyline) primaryShape;
532d95
<         myNodeFigure = figure;
556,584d118
<     public class PolylineFigure extends org.eclipse.draw2d.Polyline {
< 
<         public PolylineFigure () {
<             createContents ();
<         }
< 
<         private void createContents () {
<         }
< 
<     }
< 
<     protected LayoutManager getFigureLayoutManager () {
<         return myFigure.getLayoutManager ();
<     }
< 
<     protected void setFigureLayoutManager (LayoutManager layoutManager) {
<         myFigure.setLayoutManager (layoutManager);
<     }
< 
<     protected void refreshBounds () {
<         if (((View) getParent ().getModel ()).getElement () instanceof FigureMarker) {
<             int width = ((Integer) getStructuralFeatureValue (NotationPackage.eINSTANCE.getSize_Width ())).intValue ();
<             int height = ((Integer) getStructuralFeatureValue (NotationPackage.eINSTANCE.getSize_Height ())).intValue ();
<             myNodeFigure.setPreferredSize (new org.eclipse.draw2d.geometry.Dimension (width, height));
<         } else {
<             super.refreshBounds ();
<         }
<     }
< 
