2a3,8
> import java.lang.ref.WeakReference;
> 
> import java.util.Collection;
> 
> import java.util.Iterator;
> 
4a11,22
> import org.eclipse.emf.common.notify.Notification;
> 
> import org.eclipse.emf.ecore.EStructuralFeature;
> 
> import org.eclipse.emf.ecore.resource.Resource;
> 
> import org.eclipse.emf.transaction.NotificationFilter;
> 
> import org.eclipse.emf.transaction.ResourceSetChangeEvent;
> 
> import org.eclipse.emf.transaction.ResourceSetListenerImpl;
> 
24a43,46
> import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
> 
> import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
> 
28a51,52
> import org.eclipse.gmf.runtime.notation.NotationPackage;
> 
30a55,58
> import org.eclipse.jface.preference.IPreferenceStore;
> 
> import org.eclipse.jface.preference.PreferenceConverter;
> 
31a60,61
>     private ResourceListener listener = null;
>     private boolean diagramLinkMode = false;
44,45c74,77
<             if (notationView != null && (notationView.getEAnnotation (Properties.DIAGRAMLINK_ANNOTATION) != null || notationView.getType () == null || notationView.getType ().length () == 0)) noteFigure.setDiagramLinkMode (true);
< 
---
>             if (notationView != null && (notationView.getEAnnotation (Properties.DIAGRAMLINK_ANNOTATION) != null || notationView.getType () == null || notationView.getType ().length () == 0)) {
>                 diagramLinkMode = true;
>                 noteFigure.setDiagramLinkMode (true);
>             }
62a95,160
>     public Object getPreferredValue (EStructuralFeature feature) {
>         Object preferenceStore = getDiagramPreferencesHint ().getPreferenceStore ();
>         if (preferenceStore instanceof IPreferenceStore) {
>             if (feature == NotationPackage.eINSTANCE.getLineStyle_LineColor ()) {
>                 return FigureUtilities.RGBToInteger (PreferenceConverter.getColor ((IPreferenceStore) preferenceStore, IPreferenceConstants.PREF_NOTE_LINE_COLOR));
>             } else if (feature == NotationPackage.eINSTANCE.getFillStyle_FillColor ()) {
>                 return FigureUtilities.RGBToInteger (PreferenceConverter.getColor ((IPreferenceStore) preferenceStore, IPreferenceConstants.PREF_NOTE_FILL_COLOR));
>             }
> 
>         }
>         return super.getPreferredValue (feature);
>     }
> 
>     private class ResourceListener extends ResourceSetListenerImpl {
>         private WeakReference resourceRef = null;
>         private EditPart editPart = null;
> 
>         public ResourceListener (Resource resource, EditPart editPart) {
>             resourceRef = new WeakReference (resource);
>             this.editPart = editPart;
>         }
> 
>         public void resourceSetChanged (ResourceSetChangeEvent event) {
>             if (editPart == null || resourceRef.get () == null) return;
> 
>             boolean unloaded = isResourceUnloaded (event.getNotifications ());
>             if (unloaded && editPart.isActive ()) {
>                 editPart.refresh ();
>             }
>         }
> 
>         private boolean isResourceUnloaded (Collection notifications) {
>             for (Iterator iter = notifications.iterator ();
>             iter.hasNext ();) {
>                 Notification next = (Notification) iter.next ();
>                 if (next.getNotifier () != resourceRef.get ()) return false;
> 
>                 if (NotificationFilter.RESOURCE_UNLOADED.matches (next)) {
>                     return true;
>                 }
>             }
>             return false;
>         }
> 
>         public boolean isPostcommitOnly () {
>             return true;
>         }
> 
>     }
> 
>     protected void addSemanticListeners () {
>         if (diagramLinkMode) {
>             if (listener == null) {
>                 listener = new ResourceListener (getNotationView ().getElement ().eResource (), this);
>             }
>             getEditingDomain ().addResourceSetListener (listener);
>         }
>         super.addSemanticListeners ();
>     }
> 
>     protected void removeSemanticListeners () {
>         if (listener != null) getEditingDomain ().removeResourceSetListener (listener);
> 
>         super.removeSemanticListeners ();
>     }
> 
