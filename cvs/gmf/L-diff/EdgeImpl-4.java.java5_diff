3,4d2
< import java.util.Collection;
< 
11,14d8
< import org.eclipse.emf.ecore.EObject;
< 
< import org.eclipse.emf.ecore.EStructuralFeature;
< 
19,20d12
< import org.eclipse.emf.ecore.util.InternalEList;
< 
43c35
<         return NotationPackage.eINSTANCE.getEdge ();
---
>         return NotationPackage.Literals.EDGE;
214,222c206,207
<     public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
<         if (featureID >= 0) {
<             switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
<                 case NotationPackage.EDGE__EANNOTATIONS :
<                     return ((InternalEList) getEAnnotations ()).basicAdd (otherEnd, msgs);
<                 case NotationPackage.EDGE__SOURCE_EDGES :
<                     return ((InternalEList) getSourceEdges ()).basicAdd (otherEnd, msgs);
<                 case NotationPackage.EDGE__TARGET_EDGES :
<                     return ((InternalEList) getTargetEdges ()).basicAdd (otherEnd, msgs);
---
>     public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
>         switch (featureID) {
231,232d215
<                 default :
<                     return eDynamicInverseAdd (otherEnd, featureID, baseClass, msgs);
233a217
>         return super.eInverseAdd (otherEnd, featureID, msgs);
235d218
<         if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);
237,254c220,221
<         return eBasicSetContainer (otherEnd, featureID, msgs);
<     }
< 
<     public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
<         if (featureID >= 0) {
<             switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
<                 case NotationPackage.EDGE__EANNOTATIONS :
<                     return ((InternalEList) getEAnnotations ()).basicRemove (otherEnd, msgs);
<                 case NotationPackage.EDGE__SOURCE_EDGES :
<                     return ((InternalEList) getSourceEdges ()).basicRemove (otherEnd, msgs);
<                 case NotationPackage.EDGE__TARGET_EDGES :
<                     return ((InternalEList) getTargetEdges ()).basicRemove (otherEnd, msgs);
<                 case NotationPackage.EDGE__PERSISTED_CHILDREN :
<                     return ((InternalEList) getPersistedChildren ()).basicRemove (otherEnd, msgs);
<                 case NotationPackage.EDGE__STYLES :
<                     return ((InternalEList) getStyles ()).basicRemove (otherEnd, msgs);
<                 case NotationPackage.EDGE__TRANSIENT_CHILDREN :
<                     return ((InternalEList) getTransientChildren ()).basicRemove (otherEnd, msgs);
---
>     public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
>         switch (featureID) {
265,267d231
<                 default :
<                     return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
<             }
269c233
<         return eBasicSetContainer (null, featureID, msgs);
---
>         return super.eInverseRemove (otherEnd, featureID, msgs);
272,299c236,237
<     public Object eGet (EStructuralFeature eFeature, boolean resolve) {
<         switch (eDerivedStructuralFeatureID (eFeature)) {
<             case NotationPackage.EDGE__EANNOTATIONS :
<                 return getEAnnotations ();
<             case NotationPackage.EDGE__VISIBLE :
<                 return isVisible () ? Boolean.TRUE : Boolean.FALSE;
<             case NotationPackage.EDGE__TYPE :
<                 return getType ();
<             case NotationPackage.EDGE__MUTABLE :
<                 return isMutable () ? Boolean.TRUE : Boolean.FALSE;
<             case NotationPackage.EDGE__SOURCE_EDGES :
<                 return getSourceEdges ();
<             case NotationPackage.EDGE__TARGET_EDGES :
<                 return getTargetEdges ();
<             case NotationPackage.EDGE__PERSISTED_CHILDREN :
<                 return getPersistedChildren ();
<             case NotationPackage.EDGE__STYLES :
<                 return getStyles ();
<             case NotationPackage.EDGE__ELEMENT :
<                 if (resolve) return getElement ();
< 
<                 return basicGetElement ();
<             case NotationPackage.EDGE__DIAGRAM :
<                 if (resolve) return getDiagram ();
< 
<                 return basicGetDiagram ();
<             case NotationPackage.EDGE__TRANSIENT_CHILDREN :
<                 return getTransientChildren ();
---
>     public Object eGet (int featureID, boolean resolve, boolean coreType) {
>         switch (featureID) {
311c249
<         return eDynamicGet (eFeature, resolve);
---
>         return super.eGet (featureID, resolve, coreType);
314,351c252,253
<     public void eSet (EStructuralFeature eFeature, Object newValue) {
<         switch (eDerivedStructuralFeatureID (eFeature)) {
<             case NotationPackage.EDGE__EANNOTATIONS :
<                 getEAnnotations ().clear ();
<                 getEAnnotations ().addAll ((Collection) newValue);
<                 return;
<             case NotationPackage.EDGE__VISIBLE :
<                 setVisible (((Boolean) newValue).booleanValue ());
<                 return;
<             case NotationPackage.EDGE__TYPE :
<                 setType ((String) newValue);
<                 return;
<             case NotationPackage.EDGE__MUTABLE :
<                 setMutable (((Boolean) newValue).booleanValue ());
<                 return;
<             case NotationPackage.EDGE__SOURCE_EDGES :
<                 getSourceEdges ().clear ();
<                 getSourceEdges ().addAll ((Collection) newValue);
<                 return;
<             case NotationPackage.EDGE__TARGET_EDGES :
<                 getTargetEdges ().clear ();
<                 getTargetEdges ().addAll ((Collection) newValue);
<                 return;
<             case NotationPackage.EDGE__PERSISTED_CHILDREN :
<                 getPersistedChildren ().clear ();
<                 getPersistedChildren ().addAll ((Collection) newValue);
<                 return;
<             case NotationPackage.EDGE__STYLES :
<                 getStyles ().clear ();
<                 getStyles ().addAll ((Collection) newValue);
<                 return;
<             case NotationPackage.EDGE__ELEMENT :
<                 setElement ((EObject) newValue);
<                 return;
<             case NotationPackage.EDGE__TRANSIENT_CHILDREN :
<                 getTransientChildren ().clear ();
<                 getTransientChildren ().addAll ((Collection) newValue);
<                 return;
---
>     public void eSet (int featureID, Object newValue) {
>         switch (featureID) {
368c270
<         eDynamicSet (eFeature, newValue);
---
>         super.eSet (featureID, newValue);
371,402c273,274
<     public void eUnset (EStructuralFeature eFeature) {
<         switch (eDerivedStructuralFeatureID (eFeature)) {
<             case NotationPackage.EDGE__EANNOTATIONS :
<                 getEAnnotations ().clear ();
<                 return;
<             case NotationPackage.EDGE__VISIBLE :
<                 setVisible (VISIBLE_EDEFAULT);
<                 return;
<             case NotationPackage.EDGE__TYPE :
<                 setType (TYPE_EDEFAULT);
<                 return;
<             case NotationPackage.EDGE__MUTABLE :
<                 setMutable (MUTABLE_EDEFAULT);
<                 return;
<             case NotationPackage.EDGE__SOURCE_EDGES :
<                 getSourceEdges ().clear ();
<                 return;
<             case NotationPackage.EDGE__TARGET_EDGES :
<                 getTargetEdges ().clear ();
<                 return;
<             case NotationPackage.EDGE__PERSISTED_CHILDREN :
<                 getPersistedChildren ().clear ();
<                 return;
<             case NotationPackage.EDGE__STYLES :
<                 getStyles ().clear ();
<                 return;
<             case NotationPackage.EDGE__ELEMENT :
<                 unsetElement ();
<                 return;
<             case NotationPackage.EDGE__TRANSIENT_CHILDREN :
<                 getTransientChildren ().clear ();
<                 return;
---
>     public void eUnset (int featureID) {
>         switch (featureID) {
419c291
<         eDynamicUnset (eFeature);
---
>         super.eUnset (featureID);
422,445c294,295
<     public boolean eIsSet (EStructuralFeature eFeature) {
<         switch (eDerivedStructuralFeatureID (eFeature)) {
<             case NotationPackage.EDGE__EANNOTATIONS :
<                 return eAnnotations != null && ! eAnnotations.isEmpty ();
<             case NotationPackage.EDGE__VISIBLE :
<                 return ((eFlags & VISIBLE_EFLAG) != 0) != VISIBLE_EDEFAULT;
<             case NotationPackage.EDGE__TYPE :
<                 return TYPE_EDEFAULT == null ? type != null : ! TYPE_EDEFAULT.equals (type);
<             case NotationPackage.EDGE__MUTABLE :
<                 return ((eFlags & MUTABLE_EFLAG) != 0) != MUTABLE_EDEFAULT;
<             case NotationPackage.EDGE__SOURCE_EDGES :
<                 return sourceEdges != null && ! sourceEdges.isEmpty ();
<             case NotationPackage.EDGE__TARGET_EDGES :
<                 return targetEdges != null && ! targetEdges.isEmpty ();
<             case NotationPackage.EDGE__PERSISTED_CHILDREN :
<                 return persistedChildren != null && ! persistedChildren.isEmpty ();
<             case NotationPackage.EDGE__STYLES :
<                 return styles != null && ! styles.isEmpty ();
<             case NotationPackage.EDGE__ELEMENT :
<                 return isSetElement ();
<             case NotationPackage.EDGE__DIAGRAM :
<                 return basicGetDiagram () != null;
<             case NotationPackage.EDGE__TRANSIENT_CHILDREN :
<                 return transientChildren != null && ! transientChildren.isEmpty ();
---
>     public boolean eIsSet (int featureID) {
>         switch (featureID) {
457c307
<         return eDynamicIsSet (eFeature);
---
>         return super.eIsSet (featureID);
