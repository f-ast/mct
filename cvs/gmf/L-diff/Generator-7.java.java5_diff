36a37,42
> import org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter;
> 
> import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;
> 
> import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
> 
141a148,172
>         if (myDiagram.getEditorGen ().getExpressionProviders () != null) {
>             generateExpressionProviders ();
>         }
>     }
> 
>     private void generateExpressionProviders () throws UnexpectedBehaviourException, InterruptedException {
>         GenExpressionProviderContainer providerContainer = myEditorGen.getExpressionProviders ();
>         internalGenerateJavaClass (myEmitters.getAbstractExpressionEmitter (), providerContainer.getExpressionsPackageName (), providerContainer.getAbstractExpressionClassName (), myDiagram);
>         for (Iterator it = providerContainer.getProviders ().iterator ();
>         it.hasNext ();) {
>             GenExpressionProviderBase nextProvider = (GenExpressionProviderBase) it.next ();
>             if (nextProvider instanceof GenExpressionInterpreter) {
>                 TextEmitter providerEmitter = null;
>                 if ("ocl".equals (nextProvider.getLanguage ())) {
>                     providerEmitter = myEmitters.getOCLExpressionFactoryEmitter ();
>                 } else if ("regexp".equals (nextProvider.getLanguage ()) || "nregexp".equals (nextProvider.getLanguage ())) {
>                     providerEmitter = myEmitters.getRegexpExpressionFactoryEmitter ();
>                 }
> 
>                 GenExpressionInterpreter interpreter = (GenExpressionInterpreter) nextProvider;
>                 if (providerEmitter != null) {
>                     internalGenerateJavaClass (providerEmitter, providerContainer.getExpressionsPackageName (), interpreter.getClassName (), interpreter);
>                 }
>             }
>         }
