9c9
< import org.eclipse.emf.ecore.impl.EFactoryImpl;
---
> import org.eclipse.emf.ecore.EPackage;
11c11
< import org.eclipse.gmf.codegen.gmfgen.*;
---
> import org.eclipse.emf.ecore.impl.EFactoryImpl;
13c13
< import org.eclipse.gmf.codegen.gmfgen.BasicNodeViewmap;
---
> import org.eclipse.emf.ecore.plugin.EcorePlugin;
15c15
< import org.eclipse.gmf.codegen.gmfgen.ColorAttributes;
---
> import org.eclipse.gmf.codegen.gmfgen.*;
21,22d20
< import org.eclipse.gmf.codegen.gmfgen.DecoratedConnectionViewmap;
< 
26a25,26
> import org.eclipse.gmf.codegen.gmfgen.FigureViewmap;
> 
42a43,44
> import org.eclipse.gmf.codegen.gmfgen.GenLinkConstraints;
> 
49,50d50
< import org.eclipse.gmf.codegen.gmfgen.LinkDecoration;
< 
62a63,64
> import org.eclipse.gmf.codegen.gmfgen.SnippetViewmap;
> 
72a75,86
>     public static GMFGenFactory init () {
>         try {
>             GMFGenFactory theGMFGenFactory = (GMFGenFactory) EPackage.Registry.INSTANCE.getEFactory ("http://www.eclipse.org/gmf/2005/GenModel");
>             if (theGMFGenFactory != null) {
>                 return theGMFGenFactory;
>             }
>         } catch (Exception exception) {
>             EcorePlugin.INSTANCE.log (exception);
>         }
>         return new GMFGenFactoryImpl ();
>     }
> 
105,116c119,122
<             case GMFGenPackage.BASIC_NODE_VIEWMAP :
<                 return createBasicNodeViewmap ();
<             case GMFGenPackage.DECORATED_CONNECTION_VIEWMAP :
<                 return createDecoratedConnectionViewmap ();
<             case GMFGenPackage.LINK_DECORATION :
<                 return createLinkDecoration ();
<             case GMFGenPackage.DIAGRAM_VIEWMAP :
<                 return createDiagramViewmap ();
<             case GMFGenPackage.COMPARTMENT_VIEWMAP :
<                 return createCompartmentViewmap ();
<             case GMFGenPackage.LABEL_VIEWMAP :
<                 return createLabelViewmap ();
---
>             case GMFGenPackage.FIGURE_VIEWMAP :
>                 return createFigureViewmap ();
>             case GMFGenPackage.SNIPPET_VIEWMAP :
>                 return createSnippetViewmap ();
143,160c149,154
<                 {
<                     CompartmentPlacementKind result = CompartmentPlacementKind.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
< 
<                     return result;
<                 } case GMFGenPackage.COMPARTMENT_LAYOUT_KIND :
<                 {
<                     CompartmentLayoutKind result = CompartmentLayoutKind.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
< 
<                     return result;
<                 } case GMFGenPackage.LINK_LABEL_ALIGNMENT :
<                 {
<                     LinkLabelAlignment result = LinkLabelAlignment.get (initialValue);
<                     if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
< 
<                     return result;
<                 } case GMFGenPackage.STRING_ARRAY :
---
>                 return createCompartmentPlacementKindFromString (eDataType, initialValue);
>             case GMFGenPackage.COMPARTMENT_LAYOUT_KIND :
>                 return createCompartmentLayoutKindFromString (eDataType, initialValue);
>             case GMFGenPackage.LINK_LABEL_ALIGNMENT :
>                 return createLinkLabelAlignmentFromString (eDataType, initialValue);
>             case GMFGenPackage.STRING_ARRAY :
170c164
<                 return instanceValue == null ? null : instanceValue.toString ();
---
>                 return convertCompartmentPlacementKindToString (eDataType, instanceValue);
172c166
<                 return instanceValue == null ? null : instanceValue.toString ();
---
>                 return convertCompartmentLayoutKindToString (eDataType, instanceValue);
174c168
<                 return instanceValue == null ? null : instanceValue.toString ();
---
>                 return convertLinkLabelAlignmentToString (eDataType, instanceValue);
247,254c241,243
<     public BasicNodeViewmap createBasicNodeViewmap () {
<         BasicNodeViewmapImpl basicNodeViewmap = new BasicNodeViewmapImpl ();
<         return basicNodeViewmap;
<     }
< 
<     public DecoratedConnectionViewmap createDecoratedConnectionViewmap () {
<         DecoratedConnectionViewmapImpl decoratedConnectionViewmap = new DecoratedConnectionViewmapImpl ();
<         return decoratedConnectionViewmap;
---
>     public FigureViewmap createFigureViewmap () {
>         FigureViewmapImpl figureViewmap = new FigureViewmapImpl ();
>         return figureViewmap;
257,274c246,248
<     public LinkDecoration createLinkDecoration () {
<         LinkDecorationImpl linkDecoration = new LinkDecorationImpl ();
<         return linkDecoration;
<     }
< 
<     public DiagramViewmap createDiagramViewmap () {
<         DiagramViewmapImpl diagramViewmap = new DiagramViewmapImpl ();
<         return diagramViewmap;
<     }
< 
<     public CompartmentViewmap createCompartmentViewmap () {
<         CompartmentViewmapImpl compartmentViewmap = new CompartmentViewmapImpl ();
<         return compartmentViewmap;
<     }
< 
<     public LabelViewmap createLabelViewmap () {
<         LabelViewmapImpl labelViewmap = new LabelViewmapImpl ();
<         return labelViewmap;
---
>     public SnippetViewmap createSnippetViewmap () {
>         SnippetViewmapImpl snippetViewmap = new SnippetViewmapImpl ();
>         return snippetViewmap;
321a296,328
>     public CompartmentPlacementKind createCompartmentPlacementKindFromString (EDataType eDataType, String initialValue) {
>         CompartmentPlacementKind result = CompartmentPlacementKind.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertCompartmentPlacementKindToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public CompartmentLayoutKind createCompartmentLayoutKindFromString (EDataType eDataType, String initialValue) {
>         CompartmentLayoutKind result = CompartmentLayoutKind.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertCompartmentLayoutKindToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
>     public LinkLabelAlignment createLinkLabelAlignmentFromString (EDataType eDataType, String initialValue) {
>         LinkLabelAlignment result = LinkLabelAlignment.get (initialValue);
>         if (result == null) throw new IllegalArgumentException ("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName () + "'");
> 
>         return result;
>     }
> 
>     public String convertLinkLabelAlignmentToString (EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString ();
>     }
> 
