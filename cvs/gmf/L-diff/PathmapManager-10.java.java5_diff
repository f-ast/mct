86a87,88
> import org.eclipse.gmf.runtime.emf.core.resources.IPathmapManager2;
> 
93c95
< public class PathmapManager extends AdapterImpl implements IPathmapManager {
---
> public class PathmapManager extends AdapterImpl implements IPathmapManager, IPathmapManager2 {
99a102
>     private static final Set FILE_VARIABLES = Collections.synchronizedSet (new HashSet ());
240a244,255
>         setPathVariable (var, val, true);
>     }
> 
>     public static void setPathVariable (String var, String val, boolean dirtyResources) {
>         internalSetPathVariable (var, val);
>         for (Iterator i = allInstances ().iterator ();
>         i.hasNext ();) {
>             ((PathmapManager) i.next ()).resyncEntries (true, dirtyResources);
>         }
>     }
> 
>     private static void internalSetPathVariable (String var, String val) {
250a266,270
>     }
> 
>     public static void setFilePathVariable (String var, String val, boolean dirtyResources) {
>         FILE_VARIABLES.add (var);
>         internalSetPathVariable (var, val);
253c273,298
<             ((PathmapManager) i.next ()).resyncEntries (true);
---
>             ((PathmapManager) i.next ()).resyncEntries (true, dirtyResources);
>         }
>     }
> 
>     public static void setFilePathVariables (Map settings, boolean dirtyResources) {
>         FILE_VARIABLES.addAll (settings.keySet ());
>         for (Iterator i = settings.entrySet ().iterator ();
>         i.hasNext ();) {
>             Map.Entry entry = (Map.Entry) i.next ();
>             internalSetPathVariable ((String) entry.getKey (), (String) entry.getValue ());
>         }
>         for (Iterator i = allInstances ().iterator ();
>         i.hasNext ();) {
>             ((PathmapManager) i.next ()).resyncEntries (true, dirtyResources);
>         }
>     }
> 
>     public static void setPathVariables (Map settings, boolean dirtyResources) {
>         for (Iterator i = settings.entrySet ().iterator ();
>         i.hasNext ();) {
>             Map.Entry entry = (Map.Entry) i.next ();
>             internalSetPathVariable ((String) entry.getKey (), (String) entry.getValue ());
>         }
>         for (Iterator i = allInstances ().iterator ();
>         i.hasNext ();) {
>             ((PathmapManager) i.next ()).resyncEntries (true, dirtyResources);
261a307,326
>     public IStatus addFilePathVariable (String name, String value, boolean dirtyResources) {
>         setFilePathVariable (name, value, dirtyResources);
>         return Status.OK_STATUS;
>     }
> 
>     public IStatus addFilePathVariables (Map settings, boolean dirtyResources) {
>         setFilePathVariables (settings, dirtyResources);
>         return Status.OK_STATUS;
>     }
> 
>     public IStatus addFolderPathVariable (String name, String value, boolean dirtyResources) {
>         setPathVariable (name, value, dirtyResources);
>         return Status.OK_STATUS;
>     }
> 
>     public IStatus addFolderPathVariables (Map settings, boolean dirtyResources) {
>         setPathVariables (settings, dirtyResources);
>         return Status.OK_STATUS;
>     }
> 
266c331
<             ((PathmapManager) i.next ()).resyncEntries (true);
---
>             ((PathmapManager) i.next ()).resyncEntries (true, true);
365c430
<             resyncEntries (false);
---
>             resyncEntries (false, true);
370c435
<             resyncEntries (true);
---
>             resyncEntries (true, true);
374c439
<     private void resyncEntries (boolean resync) {
---
>     private void resyncEntries (boolean resync, boolean dirtyResources) {
412a478
>         if (dirtyResources) {
430a497
>     }
440c507
<             if (val.charAt (len - 1) != EMFCoreConstants.PATH_SEPARATOR) uri.append (EMFCoreConstants.PATH_SEPARATOR);
---
>             if (! FILE_VARIABLES.contains (var) && val.charAt (len - 1) != EMFCoreConstants.PATH_SEPARATOR) uri.append (EMFCoreConstants.PATH_SEPARATOR);
498c565
<         if (var.charAt (len - 1) != EMFCoreConstants.PATH_SEPARATOR) uri.append (EMFCoreConstants.PATH_SEPARATOR);
---
>         if (! FILE_VARIABLES.contains (var) && var.charAt (len - 1) != EMFCoreConstants.PATH_SEPARATOR) uri.append (EMFCoreConstants.PATH_SEPARATOR);
