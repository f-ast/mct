30a31,34
> import org.eclipse.gmf.mappings.DiagramElementTarget;
> 
> import org.eclipse.gmf.mappings.DomainElementTarget;
> 
58a63,68
> import org.eclipse.gmf.mappings.NotationElementTarget;
> 
> import org.eclipse.gmf.mappings.RuleBase;
> 
> import org.eclipse.gmf.mappings.RuleTarget;
> 
91a102,106
>     private EClass ruleBaseEClass = null;
>     private EClass ruleTargetEClass = null;
>     private EClass domainElementTargetEClass = null;
>     private EClass diagramElementTargetEClass = null;
>     private EClass notationElementTargetEClass = null;
441,444d455
<     public EReference getAuditRule_Target () {
<         return (EReference) auditRuleEClass.getEStructuralFeatures ().get (2);
<     }
< 
446c457
<         return (EAttribute) auditRuleEClass.getEStructuralFeatures ().get (3);
---
>         return (EAttribute) auditRuleEClass.getEStructuralFeatures ().get (2);
450c461
<         return (EAttribute) auditRuleEClass.getEStructuralFeatures ().get (4);
---
>         return (EAttribute) auditRuleEClass.getEStructuralFeatures ().get (3);
454c465
<         return (EAttribute) auditRuleEClass.getEStructuralFeatures ().get (5);
---
>         return (EAttribute) auditRuleEClass.getEStructuralFeatures ().get (4);
458c469
<         return (EAttribute) auditRuleEClass.getEStructuralFeatures ().get (6);
---
>         return (EAttribute) auditRuleEClass.getEStructuralFeatures ().get (5);
462c473
<         return (EAttribute) auditRuleEClass.getEStructuralFeatures ().get (7);
---
>         return (EAttribute) auditRuleEClass.getEStructuralFeatures ().get (6);
466c477,517
<         return (EReference) auditRuleEClass.getEStructuralFeatures ().get (8);
---
>         return (EReference) auditRuleEClass.getEStructuralFeatures ().get (7);
>     }
> 
>     public EClass getRuleBase () {
>         return ruleBaseEClass;
>     }
> 
>     public EReference getRuleBase_Target () {
>         return (EReference) ruleBaseEClass.getEStructuralFeatures ().get (0);
>     }
> 
>     public EClass getRuleTarget () {
>         return ruleTargetEClass;
>     }
> 
>     public EReference getRuleTarget_Rule () {
>         return (EReference) ruleTargetEClass.getEStructuralFeatures ().get (0);
>     }
> 
>     public EClass getDomainElementTarget () {
>         return domainElementTargetEClass;
>     }
> 
>     public EReference getDomainElementTarget_Element () {
>         return (EReference) domainElementTargetEClass.getEStructuralFeatures ().get (0);
>     }
> 
>     public EClass getDiagramElementTarget () {
>         return diagramElementTargetEClass;
>     }
> 
>     public EReference getDiagramElementTarget_Element () {
>         return (EReference) diagramElementTargetEClass.getEStructuralFeatures ().get (0);
>     }
> 
>     public EClass getNotationElementTarget () {
>         return notationElementTargetEClass;
>     }
> 
>     public EReference getNotationElementTarget_Element () {
>         return (EReference) notationElementTargetEClass.getEStructuralFeatures ().get (0);
561a613,614
>         ruleBaseEClass = createEClass (RULE_BASE);
>         createEReference (ruleBaseEClass, RULE_BASE__TARGET);
565d617
<         createEReference (auditRuleEClass, AUDIT_RULE__TARGET);
571a624,631
>         ruleTargetEClass = createEClass (RULE_TARGET);
>         createEReference (ruleTargetEClass, RULE_TARGET__RULE);
>         domainElementTargetEClass = createEClass (DOMAIN_ELEMENT_TARGET);
>         createEReference (domainElementTargetEClass, DOMAIN_ELEMENT_TARGET__ELEMENT);
>         diagramElementTargetEClass = createEClass (DIAGRAM_ELEMENT_TARGET);
>         createEReference (diagramElementTargetEClass, DIAGRAM_ELEMENT_TARGET__ELEMENT);
>         notationElementTargetEClass = createEClass (NOTATION_ELEMENT_TARGET);
>         createEReference (notationElementTargetEClass, NOTATION_ELEMENT_TARGET__ELEMENT);
600a661,664
>         auditRuleEClass.getESuperTypes ().add (this.getRuleBase ());
>         domainElementTargetEClass.getESuperTypes ().add (this.getRuleTarget ());
>         diagramElementTargetEClass.getESuperTypes ().add (this.getRuleTarget ());
>         notationElementTargetEClass.getESuperTypes ().add (this.getRuleTarget ());
681a746,747
>         initEClass (ruleBaseEClass, RuleBase.class, "RuleBase", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
>         initEReference (getRuleBase_Target (), this.getRuleTarget (), this.getRuleTarget_Rule (), "target", null, 1, 1, RuleBase.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
685d750
<         initEReference (getAuditRule_Target (), ecorePackage.getEClass (), null, "target", null, 1, 1, AuditRule.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
691a757,764
>         initEClass (ruleTargetEClass, RuleTarget.class, "RuleTarget", IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
>         initEReference (getRuleTarget_Rule (), this.getRuleBase (), this.getRuleBase_Target (), "rule", null, 1, 1, RuleTarget.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
>         initEClass (domainElementTargetEClass, DomainElementTarget.class, "DomainElementTarget", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
>         initEReference (getDomainElementTarget_Element (), ecorePackage.getEClass (), null, "element", null, 1, 1, DomainElementTarget.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
>         initEClass (diagramElementTargetEClass, DiagramElementTarget.class, "DiagramElementTarget", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
>         initEReference (getDiagramElementTarget_Element (), this.getMappingEntry (), null, "element", null, 1, 1, DiagramElementTarget.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
>         initEClass (notationElementTargetEClass, NotationElementTarget.class, "NotationElementTarget", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
>         initEReference (getNotationElementTarget_Element (), ecorePackage.getEClass (), null, "element", null, 1, 1, NotationElementTarget.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
