4a5,6
> import java.util.HashSet;
> 
6a9,10
> import java.util.Set;
> 
32,37d35
<         if (nodeMap == null || genNode == null) {
<             throw new NullPointerException ();
<         }
<         if (myTopNodeMap.containsKey (nodeMap)) {
<             throw new IllegalArgumentException (nodeMap.toString ());
<         }
42,44c40,44
<         assert nodeMap != null && genNode != null && ! myNodeMap.containsKey (nodeMap);
<         if (nodeMap == null || genNode == null) {
<             throw new NullPointerException ();
---
>         assert nodeMap != null && genNode != null;
>         Set genNodes = (Set) myNodeMap.get (nodeMap);
>         if (genNodes == null) {
>             genNodes = new HashSet ();
>             myNodeMap.put (nodeMap, genNodes);
46,49c46
<         if (myNodeMap.containsKey (nodeMap)) {
<             throw new IllegalArgumentException (nodeMap.toString ());
<         }
<         myNodeMap.put (nodeMap, genNode);
---
>         genNodes.add (genNode);
58,59c55
<         assert nodeMap != null;
<         return myTopNodeMap.containsKey (nodeMap) || myNodeMap.containsKey (nodeMap);
---
>         return isKnownTopNode (nodeMap) || isKnownChildNode (nodeMap);
77c73
<     public GenChildNode findChildNode (NodeMapping nodeMap) {
---
>     public GenChildNode [] findChildNodes (NodeMapping nodeMap) {
79c75,79
<         return (GenChildNode) myNodeMap.get (nodeMap);
---
>         Set genNodes = (Set) myNodeMap.get (nodeMap);
>         if (genNodes == null) {
>             return new GenChildNode [0];
>         }
>         return (GenChildNode []) genNodes.toArray (new GenChildNode [genNodes.size ()]);
87c87
<     public GenNode find (NodeMapping nodeMap) {
---
>     public GenNode [] find (NodeMapping nodeMap) {
90c90
<         return genNode != null ? genNode : findChildNode (nodeMap);
---
>         return genNode != null ? new GenNode [] {genNode} : findChildNodes (nodeMap);
