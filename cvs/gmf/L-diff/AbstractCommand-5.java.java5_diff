2a3,4
> import java.util.ArrayList;
> 
5c7,23
< import java.util.Collections;
---
> import java.util.List;
> 
> import org.eclipse.core.commands.ExecutionException;
> 
> import org.eclipse.core.commands.operations.AbstractOperation;
> 
> import org.eclipse.core.commands.operations.IOperationApprover;
> 
> import org.eclipse.core.commands.operations.IUndoContext;
> 
> import org.eclipse.core.commands.operations.IUndoableOperation;
> 
> import org.eclipse.core.commands.operations.OperationHistoryFactory;
> 
> import org.eclipse.core.resources.IFile;
> 
> import org.eclipse.core.runtime.IAdaptable;
13,14d30
< import org.eclipse.core.runtime.Status;
< 
19,22d34
< import org.eclipse.gmf.runtime.common.core.internal.CommonCoreStatusCodes;
< 
< import org.eclipse.gmf.runtime.common.core.internal.l10n.CommonCoreMessages;
< 
27,30c39,45
< public abstract class AbstractCommand implements ICommand {
<     protected static final String EMPTY_STRING = "";
<     private final String label;
<     private CommandResult result = null;
---
> public abstract class AbstractCommand extends AbstractOperation implements ICommand {
>     private final List affectedFiles;
>     private CommandResult commandResult;
> 
>     public AbstractCommand (String label) {
>         this (label, null);
>     }
32,34c47,53
<     protected AbstractCommand (String label) {
<         super ();
<         this.label = label;
---
>     public AbstractCommand (String label, List affectedFiles) {
>         super (label);
>         if (affectedFiles == null) {
>             this.affectedFiles = new ArrayList ();
>         } else {
>             this.affectedFiles = affectedFiles;
>         }
37,38c56,57
<     public String getLabel () {
<         return label;
---
>     public List getAffectedFiles () {
>         return affectedFiles;
41,42c60,61
<     public final CommandResult getCommandResult () {
<         return result;
---
>     public CommandResult getCommandResult () {
>         return commandResult;
46c65
<         this.result = result;
---
>         this.commandResult = result;
49,50c68,72
<     public Collection getAffectedObjects () {
<         return Collections.EMPTY_LIST;
---
>     public ICommand compose (IUndoableOperation operation) {
>         if (operation != null) {
>             return new CompositeCommand (getLabel ()).compose (this).compose (operation);
>         }
>         return this;
53,54c75,76
<     public boolean involvesReadOnlyNonWorkSpaceFiles () {
<         return false;
---
>     public ICommand reduce () {
>         return this;
57,58c79,82
<     public CMValidator getValidator () {
<         return new CMValidator ();
---
>     public IStatus execute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
>         CommandResult result = doExecuteWithResult (monitor, info);
>         setResult (result);
>         return result.getStatus ();
61,62c85,90
<     protected String getPluginId () {
<         return CommonCorePlugin.getPluginId ();
---
>     protected abstract CommandResult doExecuteWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException;
> 
>     public IStatus redo (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
>         CommandResult result = doRedoWithResult (monitor, info);
>         setResult (result);
>         return result.getStatus ();
65,67c93,121
<     public ICommand compose (ICommand command) {
<         assert null != command : "null command";
<         return new CompositeCommand (getLabel ()).compose (this).compose (command);
---
>     protected abstract CommandResult doRedoWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException;
> 
>     public IStatus undo (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
>         CommandResult result = doUndoWithResult (monitor, info);
>         setResult (result);
>         return result.getStatus ();
>     }
> 
>     protected abstract CommandResult doUndoWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException;
> 
>     public void dispose () {
>         super.dispose ();
>         IUndoContext [] contexts = getContexts ();
>         for (int i = 0;
>         i < contexts.length; i ++) {
>             removeContext (contexts [i]);
>         }
>     }
> 
>     public Collection getAffectedObjects () {
>         return getAffectedFiles ();
>     }
> 
>     public CMValidator getValidator () {
>         return null;
>     }
> 
>     public boolean involvesReadOnlyNonWorkSpaceFiles () {
>         return false;
71c125
<         return true;
---
>         return canExecute ();
75c129
<         return false;
---
>         return canRedo ();
79c133
<         return false;
---
>         return canUndo ();
83d136
<         IProgressMonitor monitor = (progressMonitor == null) ? new NullProgressMonitor () : progressMonitor;
85,90c138,139
<             if (getValidator ().okToEdit (this)) {
<                 setResult (doExecute (monitor));
<             } else {
<                 setResult (newCancelledCommandResult ());
<             }
<         } catch (Exception e) {
---
>             execute (progressMonitor, null);
>         } catch (ExecutionException e) {
97,102c146,147
<             if (getValidator ().okToEdit (this)) {
<                 setResult (doRedo ());
<             } else {
<                 setResult (newCancelledCommandResult ());
<             }
<         } catch (Exception e) {
---
>             redo (new NullProgressMonitor (), null);
>         } catch (ExecutionException e) {
109,114c154,155
<             if (getValidator ().okToEdit (this)) {
<                 setResult (doUndo ());
<             } else {
<                 setResult (newCancelledCommandResult ());
<             }
<         } catch (Exception e) {
---
>             undo (new NullProgressMonitor (), null);
>         } catch (ExecutionException e) {
119,138d159
<     protected CommandResult newOKCommandResult () {
<         return new CommandResult (new Status (IStatus.OK, getPluginId (), CommonCoreStatusCodes.OK, EMPTY_STRING, null));
<     }
< 
<     protected CommandResult newOKCommandResult (Object returnValue) {
<         return new CommandResult (new Status (IStatus.OK, getPluginId (), CommonCoreStatusCodes.OK, EMPTY_STRING, null), returnValue);
<     }
< 
<     protected CommandResult newCancelledCommandResult () {
<         return new CommandResult (new Status (IStatus.ERROR, getPluginId (), CommonCoreStatusCodes.CANCELLED, CommonCoreMessages.AbstractCommand__INFO__cancelOperation, null), null);
<     }
< 
<     protected CommandResult newErrorCommandResult (String errorMessage) {
<         return new CommandResult (new Status (IStatus.ERROR, getPluginId (), CommonCoreStatusCodes.COMMAND_FAILURE, errorMessage, null));
<     }
< 
<     protected CommandResult newWarningCommandResult (String warningMessage, Object returnValue) {
<         return new CommandResult (new Status (IStatus.WARNING, getPluginId (), CommonCoreStatusCodes.OK, warningMessage, null), returnValue);
<     }
< 
141c162
<         setResult (new CommandResult (new Status (IStatus.ERROR, getPluginId (), CommonCoreStatusCodes.COMMAND_FAILURE, String.valueOf (exception.getMessage ()), exception)));
---
>         setResult (CommandResult.newErrorCommandResult (exception));
145,158d165
<     protected abstract CommandResult doExecute (IProgressMonitor progressMonitor);
< 
<     protected CommandResult doRedo () {
<         UnsupportedOperationException uoe = new UnsupportedOperationException ();
<         Trace.throwing (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.EXCEPTIONS_THROWING, getClass (), "doRedo", uoe);
<         throw uoe;
<     }
< 
<     protected CommandResult doUndo () {
<         UnsupportedOperationException uoe = new UnsupportedOperationException ();
<         Trace.throwing (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.EXCEPTIONS_THROWING, getClass (), "doUndo", uoe);
<         throw uoe;
<     }
< 
