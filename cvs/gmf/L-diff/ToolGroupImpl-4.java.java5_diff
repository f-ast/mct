1c1
< package org.eclipse.gmf.tooldef.impl;
---
> package org.eclipse.gmf.codegen.gmfgen.impl;
3c3,7
< import org.eclipse.emf.common.notify.Notification;
---
> import java.util.Collection;
> 
> import org.eclipse.emf.common.notify.NotificationChain;
> 
> import org.eclipse.emf.common.util.EList;
9c13,19
< import org.eclipse.emf.ecore.impl.ENotificationImpl;
---
> import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
> 
> import org.eclipse.emf.ecore.util.InternalEList;
> 
> import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
> 
> import org.eclipse.gmf.codegen.gmfgen.LinkEntry;
11c21
< import org.eclipse.gmf.tooldef.AbstractTool;
---
> import org.eclipse.gmf.codegen.gmfgen.NodeEntry;
13c23
< import org.eclipse.gmf.tooldef.GMFToolPackage;
---
> import org.eclipse.gmf.codegen.gmfgen.Palette;
15c25
< import org.eclipse.gmf.tooldef.ToolGroup;
---
> import org.eclipse.gmf.codegen.gmfgen.ToolGroup;
17,22c27,29
< public class ToolGroupImpl extends ToolContainerImpl implements ToolGroup {
<     protected static final boolean COLLAPSIBLE_EDEFAULT = false;
<     protected boolean collapsible = COLLAPSIBLE_EDEFAULT;
<     protected static final boolean STACK_EDEFAULT = false;
<     protected boolean stack = STACK_EDEFAULT;
<     protected AbstractTool active = null;
---
> public class ToolGroupImpl extends EntryBaseImpl implements ToolGroup {
>     protected EList nodeTools = null;
>     protected EList linkTools = null;
29c36
<         return GMFToolPackage.eINSTANCE.getToolGroup ();
---
>         return GMFGenPackage.eINSTANCE.getToolGroup ();
32,33c39,41
<     public boolean isCollapsible () {
<         return collapsible;
---
>     public EList getNodeTools () {
>         if (nodeTools == null) {
>             nodeTools = new EObjectContainmentWithInverseEList (NodeEntry.class, this, GMFGenPackage.TOOL_GROUP__NODE_TOOLS, GMFGenPackage.NODE_ENTRY__GROUP);
35,40c43
< 
<     public void setCollapsible (boolean newCollapsible) {
<         boolean oldCollapsible = collapsible;
<         collapsible = newCollapsible;
<         if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFToolPackage.TOOL_GROUP__COLLAPSIBLE, oldCollapsible, collapsible));
< 
---
>         return nodeTools;
43,44c46,50
<     public boolean isStack () {
<         return stack;
---
>     public EList getLinkTools () {
>         if (linkTools == null) {
>             linkTools = new EObjectContainmentWithInverseEList (LinkEntry.class, this, GMFGenPackage.TOOL_GROUP__LINK_TOOLS, GMFGenPackage.LINK_ENTRY__GROUP);
>         }
>         return linkTools;
47,50c53,54
<     public void setStack (boolean newStack) {
<         boolean oldStack = stack;
<         stack = newStack;
<         if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFToolPackage.TOOL_GROUP__STACK, oldStack, stack));
---
>     public Palette getPalette () {
>         if (eContainerFeatureID != GMFGenPackage.TOOL_GROUP__PALETTE) return null;
51a56
>         return (Palette) eContainer ();
54,59c59,66
<     public AbstractTool getActive () {
<         if (active != null && active.eIsProxy ()) {
<             InternalEObject oldActive = (InternalEObject) active;
<             active = (AbstractTool) eResolveProxy (oldActive);
<             if (active != oldActive) {
<                 if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.RESOLVE, GMFToolPackage.TOOL_GROUP__ACTIVE, oldActive, active));
---
>     public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
>         switch (featureID) {
>             case GMFGenPackage.TOOL_GROUP__NODE_TOOLS :
>                 return ((InternalEList) getNodeTools ()).basicAdd (otherEnd, msgs);
>             case GMFGenPackage.TOOL_GROUP__LINK_TOOLS :
>                 return ((InternalEList) getLinkTools ()).basicAdd (otherEnd, msgs);
>             case GMFGenPackage.TOOL_GROUP__PALETTE :
>                 if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);
60a68
>                 return eBasicSetContainer (otherEnd, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
62,63c70
<         }
<         return active;
---
>         return super.eInverseAdd (otherEnd, featureID, msgs);
66,67c73,88
<     public AbstractTool basicGetActive () {
<         return active;
---
>     public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
>         switch (featureID) {
>             case GMFGenPackage.TOOL_GROUP__NODE_TOOLS :
>                 return ((InternalEList) getNodeTools ()).basicRemove (otherEnd, msgs);
>             case GMFGenPackage.TOOL_GROUP__LINK_TOOLS :
>                 return ((InternalEList) getLinkTools ()).basicRemove (otherEnd, msgs);
>             case GMFGenPackage.TOOL_GROUP__PALETTE :
>                 return eBasicSetContainer (null, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
>         }
>         return super.eInverseRemove (otherEnd, featureID, msgs);
>     }
> 
>     public NotificationChain eBasicRemoveFromContainerFeature (NotificationChain msgs) {
>         switch (eContainerFeatureID) {
>             case GMFGenPackage.TOOL_GROUP__PALETTE :
>                 return eInternalContainer ().eInverseRemove (this, GMFGenPackage.PALETTE__GROUPS, Palette.class, msgs);
69,74c90
< 
<     public void setActive (AbstractTool newActive) {
<         AbstractTool oldActive = active;
<         active = newActive;
<         if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFToolPackage.TOOL_GROUP__ACTIVE, oldActive, active));
< 
---
>         return super.eBasicRemoveFromContainerFeature (msgs);
79,86c95,100
<             case GMFToolPackage.TOOL_GROUP__COLLAPSIBLE :
<                 return isCollapsible () ? Boolean.TRUE : Boolean.FALSE;
<             case GMFToolPackage.TOOL_GROUP__STACK :
<                 return isStack () ? Boolean.TRUE : Boolean.FALSE;
<             case GMFToolPackage.TOOL_GROUP__ACTIVE :
<                 if (resolve) return getActive ();
< 
<                 return basicGetActive ();
---
>             case GMFGenPackage.TOOL_GROUP__NODE_TOOLS :
>                 return getNodeTools ();
>             case GMFGenPackage.TOOL_GROUP__LINK_TOOLS :
>                 return getLinkTools ();
>             case GMFGenPackage.TOOL_GROUP__PALETTE :
>                 return getPalette ();
93,100c107,113
<             case GMFToolPackage.TOOL_GROUP__COLLAPSIBLE :
<                 setCollapsible (((Boolean) newValue).booleanValue ());
<                 return;
<             case GMFToolPackage.TOOL_GROUP__STACK :
<                 setStack (((Boolean) newValue).booleanValue ());
<                 return;
<             case GMFToolPackage.TOOL_GROUP__ACTIVE :
<                 setActive ((AbstractTool) newValue);
---
>             case GMFGenPackage.TOOL_GROUP__NODE_TOOLS :
>                 getNodeTools ().clear ();
>                 getNodeTools ().addAll ((Collection) newValue);
>                 return;
>             case GMFGenPackage.TOOL_GROUP__LINK_TOOLS :
>                 getLinkTools ().clear ();
>                 getLinkTools ().addAll ((Collection) newValue);
108,112c121,122
<             case GMFToolPackage.TOOL_GROUP__COLLAPSIBLE :
<                 setCollapsible (COLLAPSIBLE_EDEFAULT);
<                 return;
<             case GMFToolPackage.TOOL_GROUP__STACK :
<                 setStack (STACK_EDEFAULT);
---
>             case GMFGenPackage.TOOL_GROUP__NODE_TOOLS :
>                 getNodeTools ().clear ();
114,115c124,125
<             case GMFToolPackage.TOOL_GROUP__ACTIVE :
<                 setActive ((AbstractTool) null);
---
>             case GMFGenPackage.TOOL_GROUP__LINK_TOOLS :
>                 getLinkTools ().clear ();
123,128c133,138
<             case GMFToolPackage.TOOL_GROUP__COLLAPSIBLE :
<                 return collapsible != COLLAPSIBLE_EDEFAULT;
<             case GMFToolPackage.TOOL_GROUP__STACK :
<                 return stack != STACK_EDEFAULT;
<             case GMFToolPackage.TOOL_GROUP__ACTIVE :
<                 return active != null;
---
>             case GMFGenPackage.TOOL_GROUP__NODE_TOOLS :
>                 return nodeTools != null && ! nodeTools.isEmpty ();
>             case GMFGenPackage.TOOL_GROUP__LINK_TOOLS :
>                 return linkTools != null && ! linkTools.isEmpty ();
>             case GMFGenPackage.TOOL_GROUP__PALETTE :
>                 return getPalette () != null;
133,144d142
<     public String toString () {
<         if (eIsProxy ()) return super.toString ();
< 
<         StringBuffer result = new StringBuffer (super.toString ());
<         result.append (" (collapsible: ");
<         result.append (collapsible);
<         result.append (", stack: ");
<         result.append (stack);
<         result.append (')');
<         return result.toString ();
<     }
< 
