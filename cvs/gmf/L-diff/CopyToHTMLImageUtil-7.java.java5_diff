78a79,80
> import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
> 
102c104
<         createHTMLFileForTiledImage (destination, exportInfo.commonTileFileName, format.getName ().toLowerCase (), exportInfo.tiles.y, exportInfo.tiles.x);
---
>         createHTMLFileForTiledImage (destination, exportInfo);
108c110
<         createHTMLFileForTiledImage (destination, exportInfo.commonTileFileName, format.getName ().toLowerCase (), exportInfo.tiles.y, exportInfo.tiles.x);
---
>         createHTMLFileForTiledImage (destination, exportInfo);
111c113,132
<     private Point exportImage (DiagramGenerator gen, List editParts, IPath destinationFolder, String fileName, ImageFileFormat imageFormat, int logTileWidth, int logTileHeight, IProgressMonitor monitor) throws Error, CoreException {
---
>     public String generateHTMLImage (Diagram diagram, IPath destination, ImageFileFormat format, IProgressMonitor monitor) throws CoreException {
>         ExportInfo exportInfo = null;
>         DiagramEditor openedDiagramEditor = DiagramEditorUtil.findOpenedDiagramEditorForID (ViewUtil.getIdStr (diagram));
>         if (openedDiagramEditor != null) {
>             DiagramEditPart diagramEditPart = openedDiagramEditor.getDiagramEditPart ();
>             exportInfo = copyToImageAndReturnInfo (diagramEditPart, diagramEditPart.getPrimaryEditParts (), destination, format, monitor);
>         } else {
>             Shell shell = new Shell ();
>             try {
>                 DiagramEditPart diagramEditPart = createDiagramEditPart (diagram, shell, null);
>                 Assert.isNotNull (diagramEditPart);
>                 exportInfo = copyToImageAndReturnInfo (diagramEditPart, diagramEditPart.getPrimaryEditParts (), destination, format, monitor);
>             } finally {
>                 shell.dispose ();
>             }
>         }
>         return createHTMLString (exportInfo);
>     }
> 
>     private ExportInfo exportImage (DiagramGenerator gen, List editParts, IPath destinationFolder, String fileName, ImageFileFormat imageFormat, Dimension logTileSize, IProgressMonitor monitor) throws Error, CoreException {
113a135,136
>         int logTileWidth = logTileSize.width;
>         int logTileHeight = logTileSize.height;
138c161
<         return new Point (columns, rows);
---
>         return new ExportInfo (gen, new Point (columns, rows), fileName, destinationFolder, imageFormat, new Dimension (logTileWidth, logTileHeight));
141c164
<     private IStatus createHTMLFileForTiledImage (IPath htmlFileLocation, String fileName, String fileExtension, int numRows, int numColumns) {
---
>     private IStatus createHTMLFileForTiledImage (IPath htmlFileLocation, ExportInfo info) {
144,156c167
<             out.write ("<html>\n<body>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" align=\"RIGHT\">\n");
<             for (int i = 0;
<             i < numRows; i ++) {
<                 out.write ("<tr>\n");
<                 for (int j = 0;
<                 j < numColumns; j ++) {
<                     out.write ("\t<td><img src=\"");
<                     out.write (fileName + getTileImageFileNameIndexDelimiter () + i + getTileImageFileNameIndexDelimiter () + j + StringStatics.PERIOD + fileExtension);
<                     out.write ("\"></td>\n");
<                 }
<                 out.write ("</tr>\n");
<             }
<             out.write ("</table>\n</body>\n</html>");
---
>             out.write (createHTMLString (info));
170a182,218
>     private String createHTMLString (ExportInfo info) {
>         Assert.isNotNull (info);
>         StringBuffer buffer = new StringBuffer ("<html>\n<body>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" align=\"CENTER\">\n");
>         String commonFileNamePath = new Path ("file://", info.directory.toString ()).append (info.commonTileFileName).makeAbsolute ().toString ();
>         for (int i = 0;
>         i < info.tiles.y; i ++) {
>             buffer.append ("<tr>\n");
>             for (int j = 0;
>             j < info.tiles.x; j ++) {
>                 String fileName = commonFileNamePath + getTileImageFileNameIndexDelimiter () + i + getTileImageFileNameIndexDelimiter () + j + StringStatics.PERIOD + info.imageFormat.getName ().toLowerCase ();
>                 if (ImageFileFormat.SVG.equals (info.imageFormat)) {
>                     buffer.append ("\t<td>\n\t\t<object data=\"");
>                     buffer.append (fileName);
>                     buffer.append ("\" type=\"image/svg+xml\" width=\"");
>                     buffer.append (info.tileSize.width);
>                     buffer.append ("\" height=\"");
>                     buffer.append (info.tileSize.height);
>                     buffer.append ("\">\n");
>                     buffer.append ("\t\t<embed src=\"");
>                     buffer.append (fileName);
>                     buffer.append ("\" type=\"image/svg+xml\" width=\"");
>                     buffer.append (info.tileSize.width);
>                     buffer.append ("\" height=\"");
>                     buffer.append (info.tileSize.height);
>                     buffer.append ("\"/></td>\n");
>                 } else {
>                     buffer.append ("\t<td><img src=\"");
>                     buffer.append (fileName);
>                     buffer.append ("\"/></td>\n");
>                 }
>             }
>             buffer.append ("</tr>\n");
>         }
>         buffer.append ("</table>\n</body>\n</html>");
>         return buffer.toString ();
>     }
> 
185,188c233,239
<     private class ExportInfo {
<         DiagramGenerator diagramGenerator;
<         Point tiles;
<         String commonTileFileName;
---
>     public class ExportInfo {
>         final public DiagramGenerator diagramGenerator;
>         final public Point tiles;
>         final public String commonTileFileName;
>         final public IPath directory;
>         final public ImageFileFormat imageFormat;
>         final public Dimension tileSize;
190c241
<         ExportInfo (DiagramGenerator diagramGenerator, Point tiles, String commonTileFileName) {
---
>         ExportInfo (DiagramGenerator diagramGenerator, Point tiles, String commonTileFileName, IPath directory, ImageFileFormat imageFormat, Dimension tileSize) {
193a245,247
>             this.directory = directory;
>             this.imageFormat = imageFormat;
>             this.tileSize = tileSize;
198c252
<     private ExportInfo copyToImageAndReturnInfo (DiagramEditPart diagramEP, List selection, IPath destination, ImageFileFormat format, IProgressMonitor monitor) throws CoreException {
---
>     public ExportInfo copyToImageAndReturnInfo (DiagramEditPart diagramEP, List selection, IPath destination, ImageFileFormat format, IProgressMonitor monitor) throws CoreException {
200c254,255
<         Dimension dimension = (Dimension) MapModeUtil.getMapMode (diagramEP.getFigure ()).DPtoLP (imageFormatToTileSizeMap.get (format).getCopy ());
---
>         IMapMode mm = MapModeUtil.getMapMode (diagramEP.getFigure ());
>         Dimension dimension = (Dimension) mm.DPtoLP (imageFormatToTileSizeMap.get (format).getCopy ());
203,204c258,260
<         Point tiles = exportImage (gen, selection, destinationFolder, fileName, format, dimension.width, dimension.height, monitor);
<         return new ExportInfo (gen, tiles, fileName);
---
>         ExportInfo info = exportImage (gen, selection, destinationFolder, fileName, format, dimension, monitor);
>         mm.LPtoDP (info.tileSize);
>         return info;
227c283
<         return createTilesPartsInfoList (exportInfo, partsInfo, format);
---
>         return createTilesPartsInfoList (exportInfo);
230c286,287
<     private List < List < List < PartPositionInfo > > > createTilesPartsInfoList (ExportInfo exportInfo, List partsInfo, ImageFileFormat format) {
---
>     public static List < List < List < PartPositionInfo > > > createTilesPartsInfoList (ExportInfo exportInfo) {
>         List partsInfo = exportInfo.diagramGenerator.getDiagramPartInfo ();
237c294
<                 Dimension tileSize = imageFormatToTileSizeMap.get (format);
---
>                 Dimension tileSize = exportInfo.tileSize;
310c367
<     private List < List < List < PartPositionInfo > > > initializeTilesPartsInfoList (int rows, int columns) {
---
>     private static List < List < List < PartPositionInfo > > > initializeTilesPartsInfoList (int rows, int columns) {
324c381
<     private class LineSegmentPointsComparator implements Comparator < Point > {
---
>     private static class LineSegmentPointsComparator implements Comparator < Point > {
340c397
<     private HashMap < Point, LineSeg > getMapOfLineSegments (Point startPoint, Point endPoint, Dimension tileSize, HashSet < Point > cells) {
---
>     private static HashMap < Point, LineSeg > getMapOfLineSegments (Point startPoint, Point endPoint, Dimension tileSize, HashSet < Point > cells) {
366c423
<             Collections.sort (linePoints, new LineSegmentPointsComparator (startPoint));
---
>             Collections.sort (linePoints, new CopyToHTMLImageUtil.LineSegmentPointsComparator (startPoint));
396c453
<     private List < Point > createCellPolyline (Dimension cellSize, List < LineSeg > segments) {
---
>     private static List < Point > createCellPolyline (Dimension cellSize, List < LineSeg > segments) {
419c476
<     private List < Point > connectLineSegmentsEndsViaCellEdges (Dimension cellSize, LineSeg lineSeg1, LineSeg lineSeg2) {
---
>     private static List < Point > connectLineSegmentsEndsViaCellEdges (Dimension cellSize, LineSeg lineSeg1, LineSeg lineSeg2) {
434c491
<     private List < Point > createClockwiseListOfCellVertices (Dimension cellSize) {
---
>     private static List < Point > createClockwiseListOfCellVertices (Dimension cellSize) {
443c500
<     private int indexOfCellEdgePointClockwise (Dimension cellSize, Point pt) {
---
>     private static int indexOfCellEdgePointClockwise (Dimension cellSize, Point pt) {
