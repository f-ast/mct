2a3,4
> import java.lang.ref.WeakReference;
> 
22a25,28
> import org.eclipse.emf.common.command.Command;
> 
> import org.eclipse.emf.common.command.CompoundCommand;
> 
33c39
< import org.eclipse.gmf.runtime.common.core.util.Trace;
---
> import org.eclipse.emf.transaction.ResourceSetChangeEvent;
35c41
< import org.eclipse.gmf.runtime.diagram.core.internal.DiagramDebugOptions;
---
> import org.eclipse.emf.transaction.ResourceSetListenerImpl;
37,39c43
< import org.eclipse.gmf.runtime.diagram.core.internal.DiagramPlugin;
< 
< import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
---
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
43,50d46
< import org.eclipse.gmf.runtime.emf.core.EventTypes;
< 
< import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;
< 
< import org.eclipse.gmf.runtime.emf.core.edit.MFilter;
< 
< import org.eclipse.gmf.runtime.emf.core.edit.MUniversalListener;
< 
55c51
< public class DiagramEventBroker extends MUniversalListener {
---
> public class DiagramEventBroker extends ResourceSetListenerImpl {
57c53,55
<     private final NotifierToKeyToListenersSetMap listeners = new NotifierToKeyToListenersSetMap ();
---
>     private final NotifierToKeyToListenersSetMap preListeners = new NotifierToKeyToListenersSetMap ();
>     private final NotifierToKeyToListenersSetMap postListeners = new NotifierToKeyToListenersSetMap ();
>     private static final Map instanceMap = new WeakHashMap ();
124,127c122,123
<     public void startListening () {
<         Trace.trace (DiagramPlugin.getInstance (), DiagramDebugOptions.EVENTS, this + "#startListening()");
<         setFilter (new MFilter.NotifierType (EObject.class, false));
<         super.startListening ();
---
>     private DiagramEventBroker () {
>         super (NotificationFilter.createNotifierTypeFilter (EObject.class));
130,132c126,131
<     public void stopListening () {
<         Trace.trace (DiagramPlugin.getInstance (), DiagramDebugOptions.EVENTS, this + "#stopListening()");
<         super.stopListening ();
---
>     public static DiagramEventBroker getInstance (TransactionalEditingDomain editingDomain) {
>         WeakReference reference = (WeakReference) instanceMap.get (editingDomain);
>         if (reference != null) {
>             return (DiagramEventBroker) reference.get ();
>         }
>         return null;
135,138c134,154
<     public final void onEvent (List events) {
<         List eventArray = new ArrayList (events);
<         HashSet deletedObjects = new HashSet ();
<         for (Iterator i = eventArray.iterator ();
---
>     public static void startListening (TransactionalEditingDomain editingDomain) {
>         DiagramEventBroker diagramEventBroker = getInstance (editingDomain);
>         if (diagramEventBroker == null) {
>             diagramEventBroker = new DiagramEventBroker ();
>             editingDomain.addResourceSetListener (diagramEventBroker);
>             instanceMap.put (editingDomain, new WeakReference (diagramEventBroker));
>         }
>     }
> 
>     public static void stopListening (TransactionalEditingDomain editingDomain) {
>         DiagramEventBroker diagramEventBroker = getInstance (editingDomain);
>         if (diagramEventBroker != null) {
>             editingDomain.removeResourceSetListener (diagramEventBroker);
>             instanceMap.remove (editingDomain);
>         }
>     }
> 
>     public Command transactionAboutToCommit (ResourceSetChangeEvent event) {
>         Set deletedObjects = getDeletedObjects (event);
>         CompoundCommand cc = new CompoundCommand ();
>         for (Iterator i = event.getNotifications ().iterator ();
140,141c156,163
<             Notification event = (Notification) i.next ();
<             if (event.getEventType () == EventTypes.UNCREATE || event.getEventType () == EventTypes.DESTROY) deletedObjects.add (event.getNotifier ());
---
>             final Notification notification = (Notification) i.next ();
>             Object eventFeature = notification.getFeature ();
>             if ((notification.isTouch () && notification.getEventType () != Notification.RESOLVE) || NotationPackage.eINSTANCE.getView_Mutable ().equals (eventFeature)) {
>                 continue;
>             }
>             Object notifier = notification.getNotifier ();
>             if (notifier instanceof EObject) {
>                 if (deletedObjects.contains (notification.getNotifier ()) && ! isDestroyEvent (notification)) continue;
142a165,171
>                 Command cmd = handleTransactionAboutToCommitEvent (notification);
>                 if (cmd != null) {
>                     cc.append (cmd);
>                 }
>             }
>         }
>         return cc.isEmpty () ? null : cc;
144c173,176
<         for (Iterator i = eventArray.iterator ();
---
> 
>     public void resourceSetChanged (ResourceSetChangeEvent event) {
>         Set deletedObjects = getDeletedObjects (event);
>         for (Iterator i = event.getNotifications ().iterator ();
146,148c178,180
<             Notification event = (Notification) i.next ();
<             Object eventFeature = event.getFeature ();
<             if ((event.isTouch () && event.getEventType () != Notification.RESOLVE) || NotationPackage.eINSTANCE.getView_Mutable ().equals (eventFeature)) {
---
>             final Notification notification = (Notification) i.next ();
>             Object eventFeature = notification.getFeature ();
>             if ((notification.isTouch () && notification.getEventType () != Notification.RESOLVE) || NotationPackage.eINSTANCE.getView_Mutable ().equals (eventFeature)) {
151c183
<             Object notifier = event.getNotifier ();
---
>             Object notifier = notification.getNotifier ();
153c185
<                 if (deletedObjects.contains (event.getNotifier ()) && event.getEventType () != EventTypes.UNCREATE && event.getEventType () != EventTypes.DESTROY && event.getEventType () != EventTypes.UNRESOLVE) continue;
---
>                 if (deletedObjects.contains (notification.getNotifier ()) && ! isDestroyEvent (notification)) continue;
155c187
<                 handleElementEvent (event);
---
>                 handleElementEvent (notification);
160,161c192,208
<     protected void fireNotification (Notification event) {
<         Collection listenerList = getInterestedNotificationListeners (event);
---
>     private Set getDeletedObjects (ResourceSetChangeEvent event) {
>         HashSet deletedObjects = new HashSet ();
>         for (Iterator i = event.getNotifications ().iterator ();
>         i.hasNext ();) {
>             Notification notification = (Notification) i.next ();
>             if (isDestroyEvent (notification)) deletedObjects.add (notification.getNotifier ());
> 
>         }
>         return deletedObjects;
>     }
> 
>     private boolean isDestroyEvent (Notification notification) {
>         return (notification.getEventType () == Notification.REMOVE || notification.getEventType () == Notification.REMOVE_MANY) && ((EObject) notification.getNotifier ()).eContainer () == null;
>     }
> 
>     private void fireNotification (Notification event) {
>         Collection listenerList = getInterestedNotificationListeners (event, false);
173a221,246
>     private Command fireTransactionAboutToCommit (Notification event) {
>         Collection listenerList = getInterestedNotificationListeners (event, true);
>         if (! listenerList.isEmpty ()) {
>             List listenersSnapShot = new ArrayList (listenerList);
>             if (! listenerList.isEmpty ()) {
>                 CompoundCommand cc = new CompoundCommand ();
>                 for (Iterator listenerIT = listenersSnapShot.iterator ();
>                 listenerIT.hasNext ();) {
>                     NotificationPreCommitListener listener = (NotificationPreCommitListener) listenerIT.next ();
>                     Command cmd = listener.transactionAboutToCommit (event);
>                     if (cmd != null) {
>                         cc.append (cmd);
>                     }
>                 }
>                 return cc.isEmpty () ? null : cc;
>             }
>         }
>         return null;
>     }
> 
>     public final void addNotificationListener (EObject target, NotificationPreCommitListener listener) {
>         if (target != null) {
>             preListeners.addListener (target, LISTEN_TO_ALL_FEATURES, listener);
>         }
>     }
> 
176c249,255
<             listeners.addListener (target, LISTEN_TO_ALL_FEATURES, listener);
---
>             postListeners.addListener (target, LISTEN_TO_ALL_FEATURES, listener);
>         }
>     }
> 
>     public final void addNotificationListener (EObject target, EStructuralFeature key, NotificationPreCommitListener listener) {
>         if (target != null) {
>             preListeners.addListener (target, key, listener);
182c261,267
<             listeners.addListener (target, key, listener);
---
>             postListeners.addListener (target, key, listener);
>         }
>     }
> 
>     public final void removeNotificationListener (EObject target, NotificationPreCommitListener listener) {
>         if (target != null) {
>             preListeners.removeListener (target, LISTEN_TO_ALL_FEATURES, listener);
188c273,279
<             listeners.removeListener (target, LISTEN_TO_ALL_FEATURES, listener);
---
>             postListeners.removeListener (target, LISTEN_TO_ALL_FEATURES, listener);
>         }
>     }
> 
>     public final void removeNotificationListener (EObject target, Object key, NotificationPreCommitListener listener) {
>         if (target != null) {
>             preListeners.removeListener (target, key, listener);
194c285
<             listeners.removeListener (target, key, listener);
---
>             postListeners.removeListener (target, key, listener);
200c291,295
<             stopListening ();
---
>             for (Iterator iter = instanceMap.keySet ().iterator ();
>             iter.hasNext ();) {
>                 TransactionalEditingDomain editingDomain = (TransactionalEditingDomain) iter.next ();
>                 editingDomain.removeResourceSetListener ((DiagramEventBroker) ((WeakReference) instanceMap.get (editingDomain)).get ());
>             }
205c300,301
<     protected Set getNotificationListeners (Object notifier) {
---
>     private Set getNotificationListeners (Object notifier, boolean preCommit) {
>         NotifierToKeyToListenersSetMap listeners = preCommit ? preListeners : postListeners;
209c305,306
<     protected Set getNotificationListeners (Object notifier, Object key) {
---
>     private Set getNotificationListeners (Object notifier, Object key, boolean preCommit) {
>         NotifierToKeyToListenersSetMap listeners = preCommit ? preListeners : postListeners;
228,244c325
<     public final static MFilter SLOT_MODIFIED = new MFilter.And (new MFilter.NotifierType (EObject.class, false), new MFilter.And (new MFilter.EventType (EventTypes.SET), new MFilter.EventType (EventTypes.UNSET)));
<     public final static MFilter ELEMENT_INSERTED_INTO_SLOT = new MFilter.And (new MFilter.NotifierType (EObject.class, false), new MFilter.Or (new MFilter.EventType (EventTypes.ADD), new MFilter.EventType (EventTypes.ADD_MANY)));
<     public final static MFilter ELEMENT_REMOVED_FROM_SLOT = new MFilter.And (new MFilter.NotifierType (EObject.class, false), new MFilter.Or (new MFilter.EventType (EventTypes.REMOVE), new MFilter.EventType (EventTypes.REMOVE_MANY)));
<     public final static MFilter ELEMENT_CREATED = new MFilter.And (new MFilter.NotifierType (EObject.class, false), new MFilter.EventType (EventTypes.CREATE));
<     public final static MFilter ELEMENT_UNCREATED = new MFilter.And (new MFilter.NotifierType (EObject.class, false), new MFilter.EventType (EventTypes.UNCREATE));
<     public final static MFilter ELEMENT_DELETED = new MFilter.And (new MFilter.NotifierType (EObject.class, false), new MFilter.EventType (EventTypes.DESTROY));
<     public final static MFilter ELEMENT_UNDELETED = new MFilter.And (new MFilter.NotifierType (EObject.class, false), new MFilter.EventType (EventTypes.UNDESTROY));
<     private static DiagramEventBroker instance;
< 
<     public static DiagramEventBroker getInstance () {
<         if (instance == null) {
<             instance = new DiagramEventBroker ();
<         }
<         return instance;
<     }
< 
<     protected Set getInterestedNotificationListeners (Notification event) {
---
>     private Set getInterestedNotificationListeners (Notification event, boolean preCommit) {
246c327
<         Collection c = getNotificationListeners (event.getNotifier (), event.getFeature ());
---
>         Collection c = getNotificationListeners (event.getNotifier (), event.getFeature (), preCommit);
252c333
<             listenerSet.addAll (getNotificationListeners (notifier.eContainer ()));
---
>             listenerSet.addAll (getNotificationListeners (notifier.eContainer (), preCommit));
254c335
<             addListenersOfNotifier (listenerSet, notifier.eContainer (), event);
---
>             addListenersOfNotifier (listenerSet, notifier.eContainer (), event, preCommit);
259c340
<             addListenersOfNotifier (listenerSet, notifier, event);
---
>             addListenersOfNotifier (listenerSet, notifier, event, preCommit);
265c346
<     private void addListenersOfNotifier (Set listenerSet, EObject notifier, Notification event) {
---
>     private void addListenersOfNotifier (Set listenerSet, EObject notifier, Notification event, boolean preCommit) {
267c348
<             Collection c = getNotificationListeners (notifier, event.getFeature ());
---
>             Collection c = getNotificationListeners (notifier, event.getFeature (), preCommit);
281,283c362,371
<     protected void handleElementEvent (Notification event) {
<         MEditingDomain doamin = null;
<         if (! event.isTouch () && ! (doamin = MEditingDomainGetter.getMEditingDomain (event)).isUndoNotification (event) && ! doamin.isRedoNotification (event)) {
---
>     private Command handleTransactionAboutToCommitEvent (Notification event) {
>         EObject element = (EObject) event.getNotifier ();
>         if (element != null) {
>             return fireTransactionAboutToCommit (event);
>         }
>         return null;
>     }
> 
>     private void handleElementEvent (Notification event) {
>         if (! event.isTouch ()) {
