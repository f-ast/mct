7c7
< import java.util.HashMap;
---
> import java.util.Collection;
13,16d12
< import org.eclipse.emf.ecore.EClass;
< 
< import org.eclipse.emf.ecore.EObject;
< 
19,22d14
< import org.eclipse.emf.ecore.EReference;
< 
< import org.eclipse.emf.ecore.EStructuralFeature;
< 
37,41c29,30
< public class MigrationResource extends ToolResource {
<     protected boolean oldVersionDetected;
<     protected boolean migrationApplied;
<     private Map < EObject, Map < String, String > > ignoredAttributes;
<     private MigrationConfig config;
---
> public abstract class MigrationResource extends ToolResource {
>     private boolean isOldVersionDetected;
43c32
<     MigrationResource (URI uri) {
---
>     protected MigrationResource (URI uri) {
47,67c36
<     protected XMLLoad createXMLLoad () {
<         return new XMILoadImpl (createXMLHelper ()) {
< 
<             protected DefaultHandler makeDefaultHandler () {
<                 return new MigrationHandler (MigrationResource.this, helper, options);
<             }
< 
<         }
< 
<         ;
<     }
< 
<     protected final void doUnload () {
<         try {
<             super.doUnload ();
<         } finally {
<             this.oldVersionDetected = false;
<             this.migrationApplied = false;
<         }
<     }
< 
---
>     @Override
70c39
<             ignoredAttributes = new HashMap < EObject, Map < String, String > > ();
---
>             isOldVersionDetected = false;
72c41
<             handlePostLoad (null);
---
>             handlePostLoadSuccess ();
74c43
<             handlePostLoad (e);
---
>             handlePostLoadException (e);
77c46
<             handlePostLoad (e);
---
>             handlePostLoadException (e);
79,95d47
<         } finally {
<             ignoredAttributes = null;
<             config = null;
<         }
<     }
< 
<     protected void handleOldVersionDetected () {
<         this.oldVersionDetected = true;
<     }
< 
<     protected void handleMigrationPatchApplied () {
<         this.migrationApplied = true;
<     }
< 
<     protected void handlePostLoad (Exception exception) {
<         if (exception == null && config != null) {
<             config.handleResourceLoaded (this, ignoredAttributes);
99,101c51
<     static Resource createCheckedResource (URI uri) {
<         return new MigrationResource (uri) {
< 
---
>     @Override
103d52
<                 final MigrationResource res = this;
105a55
>             @Override
107,108c57
<                         return new BCKWDCompatibleHandler (res, helper, options);
<                     }
---
>                 return new SAXXMIHandler (resource, helper, options) {
109a59,63
>                     @Override
>                     protected EPackage getPackageForURI (String uriString) {
>                         if (! getMetamodelNsURI ().equals (uriString) && getBackwardSupportedURIs ().contains (uriString)) {
>                             handleOldVersionDetected ();
>                             return super.getPackageForURI (getMetamodelNsURI ());
111,120c65
< 
<                 ;
<             }
< 
<             protected void handlePostLoad (Exception exception) {
<                 super.handlePostLoad (exception);
<                 if (oldVersionDetected && exception != null || ! getErrors ().isEmpty () || ! getWarnings ().isEmpty ()) {
<                     Diagnostic diagnostic = MigrationUtil.createMessageDiagnostic (this, Messages.oldModelVersionLoadErrorMigrationMayBeRequired);
<                     getErrors ().add (0, diagnostic);
<                 }
---
>                         return super.getPackageForURI (uriString);
128,138d72
<     static Resource createCheckAndMigrateOnLoadResource (URI uri) {
<         return new MigrationResource (uri) {
< 
<             protected void handlePostLoad (Exception exception) {
<                 super.handlePostLoad (exception);
<                 if (this.oldVersionDetected && migrationApplied) {
<                     Diagnostic diagnostic = MigrationUtil.createMessageDiagnostic (this, Messages.oldModelVersionLoadedMigrationRequired);
<                     getWarnings ().add (0, diagnostic);
<                 }
<             }
< 
144,149c78,79
<     private static class BCKWDCompatibleHandler extends SAXXMIHandler {
<         MigrationConfig config;
<         protected boolean fixmePotentiallyCompatibilityIssues;
< 
<         BCKWDCompatibleHandler (MigrationResource xmiResource, XMLHelper helper, Map < ?, ? > options) {
<             super (xmiResource, helper, options);
---
>     private void handleOldVersionDetected () {
>         isOldVersionDetected = true;
152,166c82,85
<         @Override
<         protected EPackage getPackageForURI (String uriString) {
<             if (config == null) {
<                 EPackage.Registry.INSTANCE.getEPackage (uriString);
<                 String ext = xmlResource.getURI ().fileExtension ();
<                 config = (ext != null) ? MigrationConfig.Registry.INSTANCE.getConfig (ext) : null;
<                 resource ().config = config;
<             }
<             if (config != null) {
<                 if (! config.getMetamodelNsURI ().equals (uriString) && config.backwardSupportedNsURIs ().contains (uriString)) {
<                     resource ().handleOldVersionDetected ();
<                     return super.getPackageForURI (config.getMetamodelNsURI ());
<                 }
<                 if (config.getMetamodelNsURI ().equals (uriString)) {
<                     fixmePotentiallyCompatibilityIssues = true;
---
>     protected void handlePostLoadSuccess () {
>         if (isOldVersionDetected) {
>             Diagnostic diagnostic = MigrationResource.createMessageDiagnostic (this, Messages.oldModelVersionLoadedMigrationRequired);
>             getWarnings ().add (0, diagnostic);
169c88,91
<             return super.getPackageForURI (uriString);
---
> 
>     protected void handlePostLoadException (Exception e) {
>         Diagnostic diagnostic = MigrationResource.createMessageDiagnostic (this, Messages.oldModelVersionLoadErrorMigrationMayBeRequired);
>         getErrors ().add (0, diagnostic);
173,179c95,98
<         protected void handleUnknownFeature (String prefix, String name, boolean isElement, EObject peekObject, String value) {
<             if (fixmePotentiallyCompatibilityIssues) {
<                 if (config.shouldIgnoreAttribute (peekObject, name)) {
<                     resource ().handleOldVersionDetected ();
<                 }
<             }
<             super.handleUnknownFeature (prefix, name, isElement, peekObject, value);
---
>     protected XMLHelper createXMLHelper () {
>         MigrationHelperDelegate delegate = createDelegate ();
>         assert delegate != null;
>         return new MigrationHelper (this, delegate);
182,185c101
<         MigrationResource resource () {
<             assert xmlResource instanceof MigrationResource;
<             return (MigrationResource) xmlResource;
<         }
---
>     protected abstract Collection < String > getBackwardSupportedURIs ();
187c103
<     };
---
>     protected abstract MigrationHelperDelegate createDelegate ();
189,190c105
<     public static class MigrationHandler extends BCKWDCompatibleHandler {
<         private FeatureKey processedFeatureKey;
---
>     protected abstract String getMetamodelNsURI ();
192,194c107,109
<         MigrationHandler (MigrationResource resource, XMLHelper helper, Map < ?, ? > options) {
<             super (resource, helper, options);
<             this.processedFeatureKey = new FeatureKey ();
---
>     private static Diagnostic createMessageDiagnostic (Resource resource, final String message) {
>         final String location = resource.getURI () == null ? null : resource.getURI ().toString ();
>         return new Diagnostic (message, location);
197,255c112,114
<         @Override
<         protected void setAttribValue (EObject object, String name, String value) {
<             if ((isMigrationEnabled () || fixmePotentiallyCompatibilityIssues)) {
<                 if (config.setAttribValue (this, object, name, value)) {
<                     notifyMigrationApplied ();
<                     return;
<                 }
<                 if (config.shouldIgnoreAttribute (object, name)) {
<                     Map < EObject, Map < String, String > > ignoredAttributes = resource ().ignoredAttributes;
<                     if (ignoredAttributes != null) {
<                         Map < String, String > attrs = ignoredAttributes.get (object);
<                         if (attrs == null) {
<                             attrs = new HashMap < String, String > ();
<                             ignoredAttributes.put (object, attrs);
<                         }
<                         attrs.put (name, value);
<                     }
<                     notifyMigrationApplied ();
<                     return;
<                 }
<             }
<             super.setAttribValue (object, name, value);
<         }
< 
<         @Override
<         protected void createObject (EObject peekObject, EStructuralFeature feature) {
<             if (isMigrationEnabled ()) {
<                 if (config.handleCreateObject (this, peekObject, feature)) {
<                     notifyMigrationApplied ();
<                     return;
<                 }
<                 processedFeatureKey.setFeature (feature);
<                 if (getXSIType () == null && feature instanceof EReference) {
<                     EClass oldDefaultRefType = (config != null) ? config.getAddedTypeInfo (processedFeatureKey) : null;
<                     if (oldDefaultRefType != null) {
<                         String typeQName = helper.getQName (oldDefaultRefType);
<                         super.createObjectFromTypeName (peekObject, typeQName, feature);
<                         notifyMigrationApplied ();
<                         return;
<                     }
<                 }
<             }
<             super.createObject (peekObject, feature);
<         }
< 
<         @Override
<         protected void handleFeature (String prefix, String name) {
<             if (isMigrationEnabled ()) {
<                 if (config.handleFeature (this, prefix, name)) {
<                     notifyMigrationApplied ();
<                     return;
<                 }
<             }
<             super.handleFeature (prefix, name);
<         }
< 
<         public EObject createObjectFromTypeNameHook (EObject peekObject, String typeQName, EStructuralFeature feature) {
<             return super.createObjectFromTypeName (peekObject, typeQName, feature);
<         }
---
>     public static class Diagnostic implements Resource.Diagnostic {
>         private final String myMessage;
>         private final String myLocation;
257,258c116,118
<         public void handleFeatureHook (String prefix, String name) {
<             super.handleFeature (prefix, name);
---
>         Diagnostic (String message, String location) {
>             myMessage = message;
>             myLocation = location;
261,262c121,122
<         public String getXSIType () {
<             return super.getXSIType ();
---
>         public String getMessage () {
>             return myMessage;
265,266c125,126
<         public EObject peekEObject () {
<             return objects.peekEObject ();
---
>         public String getLocation () {
>             return myLocation;
269,270c129,130
<         private boolean isMigrationEnabled () {
<             return config != null && resource ().oldVersionDetected;
---
>         public int getColumn () {
>             return 0;
273,274c133,134
<         private void notifyMigrationApplied () {
<             resource ().handleMigrationPatchApplied ();
---
>         public int getLine () {
>             return 0;
