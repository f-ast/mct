10a11,12
> import java.util.List;
> 
14a17,22
> import org.eclipse.emf.ecore.EClass;
> 
> import org.eclipse.emf.ecore.EClassifier;
> 
> import org.eclipse.emf.ecore.EFactory;
> 
16a25,26
> import org.eclipse.emf.ecore.EPackage;
> 
21,22d30
< import org.eclipse.emf.ecore.EcorePackage;
< 
25,26d32
< import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;
< 
29,46d34
< import org.eclipse.gmf.codegen.gmfgen.GenAuditContainer;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenAuditContext;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenAuditRoot;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenAuditRule;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenAuditable;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenPlugin;
< 
55,59c43,45
<     private GenAuditContainer myRootContainer;
<     private Map < GenExpressionInterpreter, Collection < String > > myRequiredPlugins;
<     private GenExpressionProviderContainer myProvidersContainer;
<     private EAttribute myGenAuditRule_ContextSelectorLocalClassName;
<     private Map < GenAuditRule, String > myAuditContexts;
---
>     private EObject myRootContainer;
>     private LinkedHashMap < EObject, Collection < String > > myRequiredPlugins;
>     private EObject myProvidersContainer;
63a50,83
>     private EPackage gmfgen2006 = get2006GenModelPackage ();
>     private EFactory factory2006 = gmfgen2006.getEFactoryInstance ();
>     private GMFGenPackage gmfgen2008 = GMFGenPackage.eINSTANCE;
>     private EClassifier class_editorCandies = gmfgen2006.getEClassifier (gmfgen2008.getEditorCandies ().getName ());
>     private EClassifier class_providerClassNames = gmfgen2006.getEClassifier (gmfgen2008.getProviderClassNames ().getName ());
>     private EClassifier class_editPartCandies = gmfgen2006.getEClassifier (gmfgen2008.getEditPartCandies ().getName ());
>     private EClassifier class_typeLinkModelFacet = gmfgen2006.getEClassifier (gmfgen2008.getTypeLinkModelFacet ().getName ());
>     private EClass class_genPlugin = (EClass) gmfgen2006.getEClassifier (gmfgen2008.getGenPlugin ().getName ());
>     private EClass class_genExpressionInterpreter = (EClass) gmfgen2006.getEClassifier (gmfgen2008.getGenExpressionInterpreter ().getName ());
>     private EClass class_featureLabelModelFacet = (EClass) gmfgen2006.getEClassifier (gmfgen2008.getFeatureLabelModelFacet ().getName ());
>     private EClass class_genAuditRule = (EClass) gmfgen2006.getEClassifier (gmfgen2008.getGenAuditRule ().getName ());
>     private EClass class_genAuditContainer = (EClass) gmfgen2006.getEClassifier (gmfgen2008.getGenAuditContainer ().getName ());
>     private EClass class_genAuditRoot = (EClass) gmfgen2006.getEClassifier (gmfgen2008.getGenAuditRoot ().getName ());
>     private EClass class_genFeatureValueSpec = (EClass) gmfgen2006.getEClassifier (gmfgen2008.getGenFeatureValueSpec ().getName ());
>     private EClass class_genExpressionProviderBase = (EClass) gmfgen2006.getEClassifier (gmfgen2008.getGenExpressionProviderBase ().getName ());
>     private EClass class_genExpressionProviderContainer = (EClass) gmfgen2006.getEClassifier (gmfgen2008.getGenExpressionProviderContainer ().getName ());
>     private EClass class_genEditorGenerator = (EClass) gmfgen2006.getEClassifier (gmfgen2008.getGenEditorGenerator ().getName ());
>     private EStructuralFeature feature_genExpressionProviderBase_container = class_genExpressionProviderBase.getEStructuralFeature (gmfgen2008.getGenExpressionProviderBase_Container ().getName ());
>     private EStructuralFeature feature_genExpressionProviderContainer_providers = class_genExpressionProviderContainer.getEStructuralFeature (gmfgen2008.getGenExpressionProviderContainer_Providers ().getName ());
>     private EStructuralFeature feature_genExpressionProviderContainer_editorGen = class_genExpressionProviderContainer.getEStructuralFeature (gmfgen2008.getGenExpressionProviderContainer_EditorGen ().getName ());
>     private EStructuralFeature feature_genEditorGenerator_expressionProviders = class_genEditorGenerator.getEStructuralFeature (gmfgen2008.getGenEditorGenerator_ExpressionProviders ().getName ());
>     private EStructuralFeature feature_genEditorGenerator_plugin = class_genEditorGenerator.getEStructuralFeature (gmfgen2008.getGenEditorGenerator_Plugin ().getName ());
>     private EStructuralFeature feature_genPlugin_requiredPlugins = class_genPlugin.getEStructuralFeature (gmfgen2008.getGenPlugin_RequiredPlugins ().getName ());
>     private EStructuralFeature feature_featureLabelModelFacet_metaFeatures = class_featureLabelModelFacet.getEStructuralFeature (gmfgen2008.getFeatureLabelModelFacet_MetaFeatures ().getName ());
>     private EStructuralFeature feature_genAuditContainer_path = class_genAuditContainer.getEStructuralFeature (gmfgen2008.getGenAuditContainer_Path ().getName ());
>     private EStructuralFeature feature_genAuditContainer_id = class_genAuditContainer.getEStructuralFeature (gmfgen2008.getGenAuditContainer_Id ().getName ());
>     private EStructuralFeature feature_genAuditContainer_name = class_genAuditContainer.getEStructuralFeature (gmfgen2008.getGenAuditContainer_Name ().getName ());
>     private EStructuralFeature feature_genAuditContainer_description = class_genAuditContainer.getEStructuralFeature (gmfgen2008.getGenAuditContainer_Description ().getName ());
>     private EStructuralFeature feature_genAuditContainer_audits = class_genAuditContainer.getEStructuralFeature (gmfgen2008.getGenAuditContainer_Audits ().getName ());
>     private EStructuralFeature feature_genAuditContainer_root = class_genAuditContainer.getEStructuralFeature (gmfgen2008.getGenAuditContainer_Root ().getName ());
>     private EStructuralFeature feature_genAuditRoot_categories = class_genAuditRoot.getEStructuralFeature (gmfgen2008.getGenAuditRoot_Categories ().getName ());
>     private EStructuralFeature feature_genAuditRoot_rules = class_genAuditRoot.getEStructuralFeature (gmfgen2008.getGenAuditRoot_Rules ().getName ());
>     private EStructuralFeature feature_genAuditRule_category = class_genAuditRule.getEStructuralFeature (gmfgen2008.getGenAuditRule_Category ().getName ());
> 
65,68c85,88
<         registerDeletedAttributes (GMFGenPackage.eINSTANCE.getEditorCandies (), "diagramFileCreatorClassName", "preferenceInitializerClassName");
<         registerDeletedAttributes (GMFGenPackage.eINSTANCE.getProviderClassNames (), "abstractParserClassName", "structuralFeatureParserClassName", "structuralFeaturesParserClassName", "paletteProviderClassName", "paletteProviderPriority", "propertyProviderClassName", "propertyProviderPriority");
<         registerDeletedAttributes (GMFGenPackage.eINSTANCE.getEditPartCandies (), "referenceConnectionEditPolicyClassName", "externalNodeLabelHostLayoutEditPolicyClassName");
<         registerDeletedAttributes (GMFGenPackage.eINSTANCE.getTypeLinkModelFacet (), "createCommandClassName");
---
>         registerDeletedAttributes (class_editorCandies, "diagramFileCreatorClassName", "preferenceInitializerClassName");
>         registerDeletedAttributes (class_providerClassNames, "abstractParserClassName", "structuralFeatureParserClassName", "structuralFeaturesParserClassName", "paletteProviderClassName", "paletteProviderPriority", "propertyProviderClassName", "propertyProviderPriority");
>         registerDeletedAttributes (class_editPartCandies, "referenceConnectionEditPolicyClassName", "externalNodeLabelHostLayoutEditPolicyClassName");
>         registerDeletedAttributes (class_typeLinkModelFacet, "createCommandClassName");
71,72c91,92
<             renamings.put ("requiredPluginIDs", GMFGenPackage.eINSTANCE.getGenPlugin_RequiredPlugins ());
<             registerRenamedAttributes (GMFGenPackage.eINSTANCE.getGenExpressionInterpreter (), renamings);
---
>             renamings.put ("requiredPluginIDs", feature_genPlugin_requiredPlugins);
>             registerRenamedAttributes (class_genExpressionInterpreter, renamings);
75,78c95,98
<             renamings.put ("metaFeature", GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet_MetaFeatures ());
<             registerRenamedAttributes (GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet (), renamings);
<         } registerRenamedType ("CompositeFeatureLabelModelFacet", GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet ());
<         myGenAuditContainer_ChildContainers = createNewReference ("childContainers", GMFGenPackage.eINSTANCE.getGenAuditContainer (), true);
---
>             renamings.put ("metaFeature", feature_featureLabelModelFacet_metaFeatures);
>             registerRenamedAttributes (class_featureLabelModelFacet, renamings);
>         } registerRenamedType ("CompositeFeatureLabelModelFacet", class_featureLabelModelFacet);
>         myGenAuditContainer_ChildContainers = createNewReference ("childContainers", class_genAuditContainer, true);
82,86c102,106
<             registerRenamedAttributes (GMFGenPackage.eINSTANCE.getGenAuditContainer (), renamings);
<         } myGenAuditRoot_Id = (EAttribute) EcoreUtil.copy (GMFGenPackage.eINSTANCE.getGenAuditContainer_Id ());
<         myGenAuditRoot_Name = (EAttribute) EcoreUtil.copy (GMFGenPackage.eINSTANCE.getGenAuditContainer_Name ());
<         myGenAuditRoot_Description = (EAttribute) EcoreUtil.copy (GMFGenPackage.eINSTANCE.getGenAuditContainer_Description ());
<         myGenAuditRoot_Audits = createNewReference ("audits", GMFGenPackage.eINSTANCE.getGenAuditRule (), true);
---
>             registerRenamedAttributes (class_genAuditContainer, renamings);
>         } myGenAuditRoot_Id = (EAttribute) EcoreUtil.copy (gmfgen2008.getGenAuditContainer_Id ());
>         myGenAuditRoot_Name = (EAttribute) EcoreUtil.copy (gmfgen2008.getGenAuditContainer_Name ());
>         myGenAuditRoot_Description = (EAttribute) EcoreUtil.copy (gmfgen2008.getGenAuditContainer_Description ());
>         myGenAuditRoot_Audits = createNewReference ("audits", class_genAuditRule, true);
94,97c114,115
<             registerRenamedAttributes (GMFGenPackage.eINSTANCE.getGenAuditRoot (), renamings);
<         } myGenAuditRule_ContextSelectorLocalClassName = createNewAttribute ("contextSelectorLocalClassName", EcorePackage.eINSTANCE.getEString (), false);
<         registerRenamedAttribute (GMFGenPackage.eINSTANCE.getGenAuditRule (), myGenAuditRule_ContextSelectorLocalClassName.getName (), myGenAuditRule_ContextSelectorLocalClassName);
<         registerNarrowedAbstractType ("GenFeatureInitializer", GMFGenPackage.eINSTANCE.getGenFeatureValueSpec ());
---
>             registerRenamedAttributes (class_genAuditRoot, renamings);
>         } registerNarrowedAbstractType ("GenFeatureInitializer", class_genFeatureValueSpec);
101d118
<         myAuditContexts = null;
103a121
>     @SuppressWarnings("unchecked")
106,107c124,127
<         if (GMFGenPackage.eINSTANCE.getGenPlugin_RequiredPlugins ().equals (feature) && object instanceof GenExpressionInterpreter) {
<             GenExpressionInterpreter expressionInterpreter = (GenExpressionInterpreter) object;
---
>         if (! gmfgen2006.equals (object.eClass ().getEPackage ())) {
>             return super.setValue (object, feature, value, position);
>         }
>         if (feature_genPlugin_requiredPlugins.equals (feature) && class_genExpressionInterpreter.isInstance (object)) {
109c129
<             saveRequiredPlugin (expressionInterpreter, requiredPlugin);
---
>             saveRequiredPlugin (object, requiredPlugin);
111c131
<             GenAuditRoot root = (GenAuditRoot) object;
---
>             EObject root = object;
113,114c133,134
<             GenAuditContainer rootContainer = getOrCreateRootContainerOnce (root);
<             rootContainer.setId (id);
---
>             EObject rootContainer = getOrCreateRootContainerOnce (root);
>             rootContainer.eSet (feature_genAuditContainer_id, id);
117c137
<             GenAuditRoot root = (GenAuditRoot) object;
---
>             EObject root = object;
119,120c139,140
<             GenAuditContainer rootContainer = getOrCreateRootContainerOnce (root);
<             rootContainer.setName (name);
---
>             EObject rootContainer = getOrCreateRootContainerOnce (root);
>             rootContainer.eSet (feature_genAuditContainer_name, name);
123c143
<             GenAuditRoot root = (GenAuditRoot) object;
---
>             EObject root = object;
125,126c145,146
<             GenAuditContainer rootContainer = getOrCreateRootContainerOnce (root);
<             rootContainer.setDescription (description);
---
>             EObject rootContainer = getOrCreateRootContainerOnce (root);
>             rootContainer.eSet (feature_genAuditContainer_description, description);
128,130c148,150
<         } else if (myGenAuditContainer_ChildContainers.equals (feature) && object instanceof GenAuditRoot) {
<             GenAuditRoot root = (GenAuditRoot) object;
<             GenAuditContainer container = (GenAuditContainer) value;
---
>         } else if (myGenAuditContainer_ChildContainers.equals (feature) && class_genAuditRoot.isInstance (object)) {
>             EObject root = object;
>             EObject container = (EObject) value;
132c152
<                 container.getPath ().add (myRootContainer);
---
>                 ((List < EObject >) container.eGet (feature_genAuditContainer_path)).add (myRootContainer);
134c154
<             root.getCategories ().add (container);
---
>             ((List < EObject >) root.eGet (feature_genAuditRoot_categories)).add (container);
136,138c156,158
<         } else if (myGenAuditRoot_Audits.equals (feature) && object instanceof GenAuditRoot) {
<             GenAuditRoot root = (GenAuditRoot) object;
<             GenAuditRule rule = (GenAuditRule) value;
---
>         } else if (myGenAuditRoot_Audits.equals (feature) && class_genAuditRoot.isInstance (object)) {
>             EObject root = object;
>             EObject rule = (EObject) value;
140c160
<                 rule.setCategory (myRootContainer);
---
>                 rule.eSet (feature_genAuditRule_category, myRootContainer);
143,149c163,169
<             root.getRules ().add (rule);
<         } else if (myGenAuditContainer_ChildContainers.equals (feature) && object instanceof GenAuditContainer) {
<             GenAuditContainer parent = (GenAuditContainer) object;
<             GenAuditContainer container = (GenAuditContainer) value;
<             container.getPath ().addAll (parent.getPath ());
<             container.getPath ().add (parent);
<             getOrCreateRoot (parent).getCategories ().add (container);
---
>             ((List < EObject >) root.eGet (feature_genAuditRoot_rules)).add (rule);
>         } else if (myGenAuditContainer_ChildContainers.equals (feature) && class_genAuditContainer.isInstance (object)) {
>             EObject parent = object;
>             EObject container = (EObject) value;
>             ((List < EObject >) container.eGet (feature_genAuditContainer_path)).addAll (((List < EObject >) parent.eGet (feature_genAuditContainer_path)));
>             ((List < EObject >) container.eGet (feature_genAuditContainer_path)).add (parent);
>             ((List < EObject >) getOrCreateRoot (parent).eGet (feature_genAuditRoot_categories)).add (container);
151,159c171,175
<         } else if (GMFGenPackage.eINSTANCE.getGenAuditContainer_Audits ().equals (feature) && object instanceof GenAuditContainer) {
<             GenAuditContainer container = (GenAuditContainer) object;
<             GenAuditRule rule = (GenAuditRule) value;
<             rule.setCategory (container);
<             getOrCreateRoot (container).getRules ().add (rule);
<         } else if (myGenAuditRule_ContextSelectorLocalClassName.equals (feature)) {
<             GenAuditRule rule = (GenAuditRule) object;
<             String className = (String) value;
<             saveAuditContext (rule, className);
---
>         } else if (feature_genAuditContainer_audits.equals (feature) && class_genAuditContainer.isInstance (object)) {
>             EObject container = object;
>             EObject rule = (EObject) value;
>             rule.eSet (feature_genAuditRule_category, container);
>             ((List < EObject >) getOrCreateRoot (container).eGet (feature_genAuditRoot_rules)).add (rule);
167,178c183
<     private void saveAuditContext (GenAuditRule rule, String className) {
<         if (myAuditContexts == null) {
<             myAuditContexts = new LinkedHashMap < GenAuditRule, String > ();
<         }
<         myAuditContexts.put (rule, className);
<     }
< 
<     private Map < GenAuditRule, String > getSavedAuditContexts () {
<         return myAuditContexts;
<     }
< 
<     private void saveRequiredPlugin (GenExpressionInterpreter expressionProvider, String requiredPlugin) {
---
>     private void saveRequiredPlugin (EObject expressionProvider, String requiredPlugin) {
180c185
<             myRequiredPlugins = new LinkedHashMap < GenExpressionInterpreter, Collection < String > > ();
---
>             myRequiredPlugins = new LinkedHashMap < EObject, Collection < String > > ();
190c195
<     private Map < GenExpressionInterpreter, Collection < String > > getSavedRequiredPlugins () {
---
>     private Map < EObject, Collection < String > > getSavedRequiredPlugins () {
193a199
>     @SuppressWarnings("unchecked")
197,198c203,204
<             for (GenExpressionInterpreter expressionProvider : getSavedRequiredPlugins ().keySet ()) {
<                 GenExpressionProviderContainer container = expressionProvider.getContainer ();
---
>             for (EObject expressionProvider : getSavedRequiredPlugins ().keySet ()) {
>                 EObject container = (EObject) expressionProvider.eGet (feature_genExpressionProviderBase_container);
201c207
<                     container.getProviders ().add (expressionProvider);
---
>                     ((List < EObject >) container.eGet (feature_genExpressionProviderContainer_providers)).add (expressionProvider);
203c209
<                 GenEditorGenerator editor = container.getEditorGen ();
---
>                 EObject editor = (EObject) container.eGet (feature_genExpressionProviderContainer_editorGen);
205c211
<                     editor = GMFGenFactory.eINSTANCE.createGenEditorGenerator ();
---
>                     editor = factory2006.create (class_genEditorGenerator);
207c213
<                     editor.setExpressionProviders (container);
---
>                     editor.eSet (feature_genEditorGenerator_expressionProviders, container);
209c215
<                 GenPlugin plugin = editor.getPlugin ();
---
>                 EObject plugin = (EObject) editor.eGet (feature_genEditorGenerator_plugin);
211,212c217,218
<                     plugin = GMFGenFactory.eINSTANCE.createGenPlugin ();
<                     editor.setPlugin (plugin);
---
>                     plugin = factory2006.create (class_genPlugin);
>                     editor.eSet (feature_genEditorGenerator_plugin, plugin);
214c220
<                 plugin.getRequiredPlugins ().addAll (getSavedRequiredPlugins ().get (expressionProvider));
---
>                 ((List < String >) plugin.eGet (feature_genPlugin_requiredPlugins)).addAll (getSavedRequiredPlugins ().get (expressionProvider));
219,231d224
<         if (getSavedAuditContexts () != null) {
<             for (GenAuditRule rule : getSavedAuditContexts ().keySet ()) {
<                 GenAuditRoot root = getOrCreateRoot (rule);
<                 String className = getSavedAuditContexts ().get (rule);
<                 GenAuditContext context = getOrCreateContext (root, className);
<                 GenAuditable target = rule.getTarget ();
<                 if (target != null) {
<                     target.setContextSelector (context);
<                     fireMigrationApplied (true);
<                 }
<             }
<             getSavedAuditContexts ().clear ();
<         }
234,272c227
<     private GenAuditContext getOrCreateContext (GenAuditRoot root, String className) {
<         GenAuditContext context = null;
<         for (GenAuditContext next : root.getClientContexts ()) {
<             String explicit = next.getClassName ();
<             if (className.equals (explicit) || (explicit == null && className.equals (next.getId ()))) {
<                 context = next;
<                 break;
<             }
<         }
<         if (context == null) {
<             context = GMFGenFactory.eINSTANCE.createGenAuditContext ();
<             String id = generateUnique (root, className);
<             context.setId (id);
<             if (! id.equals (className)) {
<                 context.setClassName (className);
<             }
<             root.getClientContexts ().add (context);
<         }
<         return context;
<     }
< 
<     private String generateUnique (GenAuditRoot root, String defaultId) {
<         String id = defaultId;
<         int i = 0;
<         boolean haveSuchId = false;
<         do {
<             haveSuchId = false;
<             for (GenAuditContext next : root.getClientContexts ()) {
<                 if (id.equals (next.getId ())) {
<                     haveSuchId = true;
<                     id = defaultId + (++ i);
<                     break;
<                 }
<             }
<         } while (haveSuchId);
<         return id;
<     }
< 
<     private GenExpressionProviderContainer getOrCreateParenlessProvidersContainerOnce (GenExpressionInterpreter expressionProvider) {
---
>     private EObject getOrCreateParenlessProvidersContainerOnce (EObject expressionProvider) {
274c229
<             myProvidersContainer = GMFGenFactory.eINSTANCE.createGenExpressionProviderContainer ();
---
>             myProvidersContainer = factory2006.create (class_genExpressionProviderContainer);
280c235,236
<     private GenAuditContainer getOrCreateRootContainerOnce (GenAuditRoot root) {
---
>     @SuppressWarnings("unchecked")
>     private EObject getOrCreateRootContainerOnce (EObject root) {
282,283c238,239
<             myRootContainer = GMFGenFactory.eINSTANCE.createGenAuditContainer ();
<             root.getCategories ().add (myRootContainer);
---
>             myRootContainer = factory2006.create (class_genAuditContainer);
>             ((List < EObject >) root.eGet (feature_genAuditRoot_categories)).add (myRootContainer);
288,289c244,246
<     private GenAuditRoot getOrCreateRoot (GenAuditContainer auditContainer) {
<         GenAuditRoot result = auditContainer.getRoot ();
---
>     @SuppressWarnings("unchecked")
>     private EObject getOrCreateRoot (EObject auditContainer) {
>         EObject result = (EObject) auditContainer.eGet (feature_genAuditContainer_root);
292,301c249
<             result.getCategories ().add (auditContainer);
<         }
<         return result;
<     }
< 
<     private GenAuditRoot getOrCreateRoot (GenAuditRule auditRule) {
<         GenAuditRoot result = auditRule.getRoot ();
<         if (result == null) {
<             result = createRoot (auditRule);
<             result.getRules ().add (auditRule);
---
>             ((List < EObject >) result.eGet (feature_genAuditRoot_categories)).add (auditContainer);
306,307c254,255
<     private GenAuditRoot createRoot (EObject child) {
<         GenAuditRoot result = GMFGenFactory.eINSTANCE.createGenAuditRoot ();
---
>     private EObject createRoot (EObject child) {
>         EObject result = factory2006.create (class_genAuditRoot);
314a263,281
>     public String getURI (String prefix, String uri) {
>         if (is2005GenModel (prefix, uri)) {
>             return get2006GenModelURI ();
>         }
>         return super.getURI (prefix, uri);
>     }
> 
>     static boolean is2005GenModel (String prefix, String uri) {
>         return "gmfgen".equals (prefix) && ("http://www.eclipse.org/gmf/2005/GenModel".equals (uri) || "http://www.eclipse.org/gmf/2005/GenModel/2.0".equals (uri));
>     }
> 
>     static String get2006GenModelURI () {
>         return "http://www.eclipse.org/gmf/2006/GenModel";
>     }
> 
>     private EPackage get2006GenModelPackage () {
>         return EPackage.Registry.INSTANCE.getEPackage (get2006GenModelURI ());
>     }
> 
