5,6d4
< import org.eclipse.emf.codegen.util.CodeGenUtil;
< 
9,18d6
< import org.eclipse.gmf.codegen.gmfgen.GenCompartment;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenLabel;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenLink;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenNode;
< 
< import org.eclipse.gmf.common.IncrementalNamesDispenser;
< 
23,24d10
< import org.eclipse.gmf.mappings.CompartmentMapping;
< 
29,30d14
< import org.eclipse.gmf.mappings.MappingEntry;
< 
34,39d17
<     private final NamesDispenser namesDispenser;
<     private final String suffix;
< 
<     public ClassNamingStrategy (String suffix) {
<         this (suffix, null, new IncrementalNamesDispenser ());
<     }
41,46c19,20
<     public ClassNamingStrategy (String suffix, NamingStrategy chained, NamesDispenser namesDispenser) {
<         super (chained);
<         assert suffix != null;
<         this.suffix = suffix;
<         assert namesDispenser != null;
<         this.namesDispenser = namesDispenser;
---
>     public ClassNamingStrategy (String suffix, NamesDispenser namesDispenser, NamingStrategy chainedNamingStrategy, NamingStrategy prefixNamingStrategy) {
>         super (suffix, namesDispenser, chainedNamingStrategy, prefixNamingStrategy);
69,78d42
<     public String getAsPrefix (NodeMapping mapping) {
<         if (mapping.getDomainMetaElement () != null) {
<             String name = mapping.getDomainMetaElement ().getName ();
<             if (! isEmpty (name)) {
<                 return getValidClassName (name);
<             }
<         }
<         return GenNode.CLASS_NAME_PREFIX;
<     }
< 
97,125d60
<     public String getAsPrefix (LinkMapping mapping) {
<         if (mapping.getDomainMetaElement () != null) {
<             String name = mapping.getDomainMetaElement ().getName ();
<             if (! isEmpty (name)) {
<                 return getValidClassName (name);
<             }
<         }
<         if (mapping.getLinkMetaFeature () != null) {
<             String name = mapping.getLinkMetaFeature ().getName ();
<             if (! isEmpty (name)) {
<                 name = Character.toUpperCase (name.charAt (0)) + name.substring (1);
<                 name = mapping.getLinkMetaFeature ().getEContainingClass ().getName () + name;
<                 return getValidClassName (name);
<             }
<         }
<         return GenLink.CLASS_NAME_PREFIX;
<     }
< 
<     public String get (CompartmentMapping mapping) {
<         if (mapping.getCompartment () != null) {
<             String name = mapping.getCompartment ().getName ();
<             if (! isEmpty (name)) {
<                 name = Character.toUpperCase (name.charAt (0)) + name.substring (1);
<                 return createClassName (getAsPrefix (mapping.getParentNode ()) + name);
<             }
<         }
<         return createClassName (getAsPrefix (mapping.getParentNode ()) + GenCompartment.CLASS_NAME_PREFIX);
<     }
< 
137,154c72,73
<         String hostName;
<         MappingEntry parentMapping = mapping.getMapEntry ();
<         if (parentMapping instanceof NodeMapping) {
<             hostName = getAsPrefix ((NodeMapping) parentMapping);
<         } else if (parentMapping instanceof LinkMapping) {
<             hostName = getAsPrefix ((LinkMapping) parentMapping);
<         } else {
<             throw new IllegalArgumentException (String.valueOf (mapping));
<         }
< 
<         return createClassName (hostName + (sb.length () > 0 ? sb.toString () : GenLabel.CLASS_NAME_PREFIX));
<     }
< 
<     protected String createClassName (String name) {
<         assert ! isEmpty (name);
<         name = CodeGenUtil.validJavaIdentifier (name);
<         name = Character.toUpperCase (name.charAt (0)) + name.substring (1);
<         return namesDispenser.get (name, suffix);
---
>         if (sb.length () > 0) {
>             return createClassName (getLabelHostPrefix (mapping) + sb.toString ());
156,160c75
< 
<     protected static String getValidClassName (String s) {
<         assert ! isEmpty (s);
<         s = CodeGenUtil.validJavaIdentifier (s);
<         return Character.toUpperCase (s.charAt (0)) + s.substring (1);
---
>         return super.get (mapping);
