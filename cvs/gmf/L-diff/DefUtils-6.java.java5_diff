14a15,16
> import java.util.LinkedList;
> 
35,36d36
< import org.eclipse.emf.common.util.EMap;
< 
190c190
<                     List nameSeq = new ArrayList < String > (Arrays.asList (typeName));
---
>                     ArrayList < String > nameSeq = new ArrayList < String > (Arrays.asList (typeName));
267c267
<                 List < EClassifier > subTypes = getSubTypes (getRootEPackage (referencedClass.getEPackage ()), referencedClass, new ArrayList < EClassifier > ());
---
>                 List < EClass > subTypes = getSubTypes (getRootEPackage (referencedClass.getEPackage ()), referencedClass, new LinkedList < EClass > ());
269c269
<                 for (Iterator it = subTypes.iterator ();
---
>                 for (Iterator < EClass > it = subTypes.iterator ();
271c271
<                     EClass nextClass = (EClass) it.next ();
---
>                     EClass nextClass = it.next ();
279c279
<                 for (Iterator it = subTypes.iterator ();
---
>                 for (Iterator < EClass > it = subTypes.iterator ();
281c281
<                     EClass nextClass = (EClass) it.next ();
---
>                     EClass nextClass = it.next ();
317,319c317,318
<                 for (Iterator it = contextProviderEClass.getESuperTypes ().iterator ();
<                 it.hasNext ();) {
<                     ContextProvider nextProvider = referencedContexts.get (it.next ());
---
>                 for (EClass nextClass : contextProviderEClass.getESuperTypes ()) {
>                     ContextProvider nextProvider = referencedContexts.get (nextClass);
437c436
<         List children = diagnostic.getChildren ();
---
>         List < Diagnostic > children = diagnostic.getChildren ();
441,443c440,441
<             for (Iterator it = children.iterator ();
<             it.hasNext ();) {
<                 mergeAndFlatten ((Diagnostic) it.next (), diagnosticChain);
---
>             for (Diagnostic next : children) {
>                 mergeAndFlatten (next, diagnosticChain);
497c495
<             Class rightClass = right.getInstanceClass ();
---
>             Class < ? > rightClass = right.getInstanceClass ();
516,518c514
<         for (Iterator it = eModelElement.getEAnnotations ().iterator ();
<         it.hasNext ();) {
<             EAnnotation nextAnnotation = (EAnnotation) it.next ();
---
>         for (EAnnotation nextAnnotation : eModelElement.getEAnnotations ()) {
526,529c522,523
<     public static Map.Entry findAnnotationDetailEntry (EModelElement eModelElement, String sourceURI, String key, String val) {
<         for (Iterator it = eModelElement.getEAnnotations ().iterator ();
<         it.hasNext ();) {
<             EAnnotation nextAnnotation = (EAnnotation) it.next ();
---
>     public static Map.Entry < String, String > findAnnotationDetailEntry (EModelElement eModelElement, String sourceURI, String key, String val) {
>         for (EAnnotation nextAnnotation : eModelElement.getEAnnotations ()) {
531,533c525
<                 for (Iterator entryIt = nextAnnotation.getDetails ().iterator ();
<                 entryIt.hasNext ();) {
<                     Map.Entry nextEntry = (Map.Entry) entryIt.next ();
---
>                 for (Map.Entry < String, String > nextEntry : nextAnnotation.getDetails ()) {
543,547c535,537
<     public static Map.Entry getKeyPreffixAnnotation (EAnnotation annotation, String keyPrefix) {
<         for (Iterator it = annotation.getDetails ().entrySet ().iterator ();
<         it.hasNext ();) {
<             Map.Entry nextEntry = (Map.Entry) it.next ();
<             if (((String) nextEntry.getKey ()).startsWith (keyPrefix)) {
---
>     public static Map.Entry < String, String > getKeyPrefixAnnotation (EAnnotation annotation, String keyPrefix) {
>         for (Map.Entry < String, String > nextEntry : annotation.getDetails ()) {
>             if (nextEntry.getKey ().startsWith (keyPrefix)) {
554,559c544,546
<     @SuppressWarnings("unchecked")
<     public static List getAnnotationsWithKeyAndValue (EModelElement eModelElement, String sourceURI, String key, String value) {
<         List annotations = null;
<         for (Iterator it = eModelElement.getEAnnotations ().iterator ();
<         it.hasNext ();) {
<             EAnnotation nextAnnotation = (EAnnotation) it.next ();
---
>     public static List < EAnnotation > getAnnotationsWithKeyAndValue (EModelElement eModelElement, String sourceURI, String key, String value) {
>         ArrayList < EAnnotation > annotations = null;
>         for (EAnnotation nextAnnotation : eModelElement.getEAnnotations ()) {
564c551
<                         annotations = new ArrayList (eModelElement.getEAnnotations ().size ());
---
>                         annotations = new ArrayList < EAnnotation > (eModelElement.getEAnnotations ().size ());
570c557,560
<         return annotations != null ? annotations : Collections.EMPTY_LIST;
---
>         if (annotations != null) {
>             return annotations;
>         }
>         return Collections.emptyList ();
609,616d598
<     public static String getAnnotationDetailValue (EMap detail, String key) {
<         if (detail == null || key == null) {
<             throw new IllegalArgumentException ("null detail map or key");
<         }
<         Object val = detail.get (key);
<         return val instanceof String ? (String) val : null;
<     }
< 
622,626c604,606
<             for (Iterator it = ctxAnnotation.getDetails ().entrySet ().iterator ();
<             it.hasNext ();) {
<                 Map.Entry nextDetail = (Map.Entry) it.next ();
<                 Object key = nextDetail.getKey ();
<                 String value = nextDetail.getValue () instanceof String ? (String) nextDetail.getValue () : "";
---
>             for (Map.Entry < String, String > nextDetail : ctxAnnotation.getDetails ()) {
>                 String key = nextDetail.getKey ();
>                 String value = nextDetail.getValue () != null ? nextDetail.getValue () : "";
648,651c628,629
<     static List < EClassifier > getSubTypes (EPackage ePackage, EClass superType, List < EClassifier > foundSubTypes) {
<         for (Iterator it = ePackage.getEClassifiers ().iterator ();
<         it.hasNext ();) {
<             EClassifier classifier = (EClassifier) it.next ();
---
>     static List < EClass > getSubTypes (EPackage ePackage, EClass superType, List < EClass > foundSubTypes) {
>         for (EClassifier classifier : ePackage.getEClassifiers ()) {
653c631
<                 foundSubTypes.add (classifier);
---
>                 foundSubTypes.add ((EClass) classifier);
656,658c634,635
<         for (Iterator it = ePackage.getESubpackages ().iterator ();
<         it.hasNext ();) {
<             getSubTypes ((EPackage) it.next (), superType, foundSubTypes);
---
>         for (EPackage next : ePackage.getESubpackages ()) {
>             getSubTypes (next, superType, foundSubTypes);
