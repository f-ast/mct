5,6d4
< import java.util.HashMap;
< 
18a17,18
> import org.eclipse.core.runtime.IExtension;
> 
55,56c55,56
<                     Log.info (corePlugin, CommonCoreStatusCodes.OK, "Activating provider '" + getElement ().getAttribute (A_CLASS) + "'...");
<                     provider = (IProvider) getElement ().createExecutableExtension (A_CLASS);
---
>                     Log.info (corePlugin, CommonCoreStatusCodes.OK, "Activating provider '" + element.getAttribute (A_CLASS) + "'...");
>                     provider = (IProvider) element.createExecutableExtension (A_CLASS);
58c58
<                     Trace.trace (corePlugin, CommonCoreDebugOptions.SERVICES_ACTIVATE, "Provider '" + String.valueOf (provider) + "' activated.");
---
>                     Trace.trace (corePlugin, CommonCoreDebugOptions.SERVICES_ACTIVATE, "Provider '" + provider + "' activated.");
70c70
<                 IConfigurationElement [] elements = getElement ().getChildren (E_POLICY);
---
>                 IConfigurationElement [] elements = element.getChildren (E_POLICY);
81,82c81,82
<                             policy = (IProviderPolicy) getElement ().createExecutableExtension (E_POLICY);
<                             Trace.trace (corePlugin, CommonCoreDebugOptions.SERVICES_ACTIVATE, "Provider policy '" + String.valueOf (policy) + "' activated.");
---
>                             policy = (IProviderPolicy) element.createExecutableExtension (E_POLICY);
>                             Trace.trace (corePlugin, CommonCoreDebugOptions.SERVICES_ACTIVATE, "Provider policy '" + policy + "' activated.");
110c110
<     private static final int cacheSize;
---
>     private static final int priorityCount;
121c121
<         cacheSize = maxOrdinal + 1;
---
>         priorityCount = maxOrdinal + 1;
125c125
<     private final Map providers = new HashMap ();
---
>     private final ArrayList [] providers;
139,140c139,140
<             cache = new Map [cacheSize];
<             for (int ordinal = cacheSize;
---
>             cache = new Map [priorityCount];
>             for (int ordinal = priorityCount;
147a148,151
>         providers = new ArrayList [priorityCount];
>         for (int ordinal = priorityCount;
>         -- ordinal >= 0;) providers [ordinal] = new ArrayList (0);
> 
168c172
<             for (int ordinal = cacheSize;
---
>             for (int ordinal = priorityCount;
175,181c179,180
<     List getProviders (ProviderPriority priority) {
<         List result = (List) providers.get (priority);
<         if (null == result) {
<             result = new ArrayList ();
<             providers.put (priority, result);
<         }
<         return result;
---
>     final List getProviders (ProviderPriority priority) {
>         return providers [priority.getOrdinal ()];
188c187
<         if (! isOptimized ()) {
---
>         if (null == cache) {
190a190
>             Object cachingKey = getCachingKey (operation);
192,203c192,204
<             providerList = (List) map.get (getCachingKey (operation));
<             if (! isOptimistic () && null != providerList) {
<                 if (providerList.isEmpty ()) {
<                     providerList = null;
<                 } else {
<                     for (Iterator i = providerList.iterator ();
<                     i.hasNext ();) {
<                         IProvider provider = (IProvider) i.next ();
<                         if (! provider.provides (operation)) {
<                             providerList = null;
<                             break;
<                         }
---
>             providerList = (List) map.get (cachingKey);
>             if (null != providerList) {
>                 if (optimistic) return providerList;
> 
>                 int n = providerList.size ();
>                 if (n != 0) {
>                     for (int i = 0;
>                     ;) {
>                         IProvider provider = (IProvider) providerList.get (i);
>                         if (! provider.provides (operation)) break;
> 
>                         if (++ i == n) return providerList;
> 
207d207
<             if (null == providerList) {
209,210c209
<                 map.put (getCachingKey (operation), providerList);
<             }
---
>             map.put (cachingKey, providerList);
216,220c215,222
<         List allProviders = new ArrayList ();
<         for (Iterator i = providers.values ().iterator ();
<         i.hasNext ();) {
<             allProviders.addAll ((List) i.next ());
<         }
---
>         int i;
>         int n = priorityCount;
>         int total;
>         for (i = n, total = 0; -- i >= 0;) total += providers [i].size ();
> 
>         List allProviders = new ArrayList (total);
>         for (i = 0; i < n; ++ i) allProviders.addAll (providers [i]);
> 
226a229
>         int ordinal = priority.getOrdinal ();
228c231
<             cache [priority.getOrdinal ()].clear ();
---
>             cache [ordinal].clear ();
230c233
<         getProviders (priority).add (provider);
---
>         providers [ordinal].add (provider);
236,238c239,241
<         for (Iterator i = providers.values ().iterator ();
<         i.hasNext ();) {
<             if (((List) i.next ()).remove (provider)) {
---
>         for (int i = 0, n = priorityCount;
>         i < n; ++ i) {
>             if (providers [i].remove (provider)) {
251c254
<             Trace.trace (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.SERVICES_EXECUTE, "Operation '" + String.valueOf (operation) + "' executed using strategy '" + String.valueOf (strategy) + "'.");
---
>             Trace.trace (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.SERVICES_EXECUTE, "Operation '" + operation + "' executed using strategy '" + strategy + "'.");
263,270c266,272
<         for (Iterator list = providers.values ().iterator ();
<         list.hasNext ();) {
<             for (Iterator provider = ((List) list.next ()).iterator ();
<             provider.hasNext ();) {
<                 if (((IProvider) provider.next ()).provides (operation)) {
<                     return true;
<                 }
<             }
---
>         for (int priority = 0, n = priorityCount;
>         priority < n; ++ priority) {
>             List providerList = providers [priority];
>             int providerCount = providerList.size ();
>             for (int provider = 0;
>             provider < providerCount; ++ provider) if (((IProvider) providerList.get (provider)).provides (operation)) return true;
> 
279c281
<         i < ExecutionStrategy.PRIORITIES.length; i ++) {
---
>         i < ExecutionStrategy.PRIORITIES.length; ++ i) {
282,287c284,287
<             for (Iterator provider = providerList.iterator ();
<             provider.hasNext ();) {
<                 if (((IProvider) provider.next ()).provides (operation)) {
<                     return true;
<                 }
<             }
---
>             int providerCount = providerList.size ();
>             for (int provider = 0;
>             provider < providerCount; ++ provider) if (((IProvider) providerList.get (provider)).provides (operation)) return true;
> 
297a298,301
>     public final void configureProviders (String namespace, String extensionPointName) {
>         configureProviders (Platform.getExtensionRegistry ().getExtensionPoint (namespace, extensionPointName).getConfigurationElements ());
>     }
> 
301,303c305,317
<         i < elements.length; i ++) {
<             addProvider (ProviderPriority.parse (getPriority (elements [i])), newProviderDescriptor (elements [i]));
<             Trace.trace (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.SERVICES_CONFIG, "Provider configured from extension '" + String.valueOf (elements [i].getDeclaringExtension ()) + "'.");
---
>         i < elements.length; ++ i) {
>             IConfigurationElement element = elements [i];
>             try {
>                 addProvider (ProviderPriority.parse (getPriority (element)), newProviderDescriptor (element));
>             } finally {
>                 if (Trace.shouldTrace (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.SERVICES_CONFIG)) {
>                     IExtension extension = element.getDeclaringExtension ();
>                     String identifier = extension.getUniqueIdentifier ();
>                     if (identifier == null) identifier = String.valueOf (extension.getNamespace ());
> 
>                     extension.getExtensionPointUniqueIdentifier ();
>                     Trace.trace (CommonCorePlugin.getDefault (), CommonCoreDebugOptions.SERVICES_CONFIG, "Provider of '" + extension.getExtensionPointUniqueIdentifier () + "' configured from extension '" + identifier + "'.");
>                 }
305a320,323
>         for (int i = priorityCount;
>         -- i >= 0;) providers [i].trimToSize ();
> 
>     }
