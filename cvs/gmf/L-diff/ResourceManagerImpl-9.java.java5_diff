28,30d27
<         if (hasCachedXtend (fullyQualifiedName)) {
<             return cachedXtend.get (fullyQualifiedName);
<         }
32,37c29
<             final XtendResource loaded = doLoadXtendResource (fullyQualifiedName);
<             assert loaded != null;
<             if (shouldCache ()) {
<                 cachedXtend.put (fullyQualifiedName, loaded);
<             }
<             return loaded;
---
>             return loadXtendThroughCache (fullyQualifiedName);
43c35
<             handleParserException (fullyQualifiedName, ex);
---
>             handleParserException (ex);
48,62c40,42
<     private XtendResource doLoadXtendResource (String fullyQualifiedName) throws IOException, ParserException {
<         Reader [] rs = resolveMultiple (fullyQualifiedName, XtendResource.FILE_EXTENSION);
<         assert rs != null && rs.length > 0;
<         XtendResource [] result = new XtendResource [rs.length];
<         for (int i = 0;
<         i < rs.length; i ++) {
<             Reader r = rs [i];
<             assert r != null;
<             try {
<                 result [i] = loadXtendResource (r, fullyQualifiedName);
<                 assert result [i] != null;
<             } finally {
<                 try {
<                     r.close ();
<                 } catch (Exception ex) {
---
>     protected XtendResource loadXtendThroughCache (String qualifiedName) throws IOException, ParserException {
>         if (hasCachedXtend (qualifiedName)) {
>             return cachedXtend.get (qualifiedName);
63a44,47
>         final XtendResource loaded = doLoadXtendResource (qualifiedName);
>         assert loaded != null;
>         if (shouldCache ()) {
>             cachedXtend.put (qualifiedName, loaded);
64a49
>         return loaded;
65a51,55
> 
>     private XtendResource doLoadXtendResource (String fullyQualifiedName) throws IOException, ParserException {
>         Reader [] rs = resolveMultiple (fullyQualifiedName, XtendResource.FILE_EXTENSION);
>         assert rs != null && rs.length > 0;
>         XtendResource [] result = loadXtendResources (rs, fullyQualifiedName);
73,75d62
<         if (hasCachedXpand (fullyQualifiedName)) {
<             return cachedXpand.get (fullyQualifiedName);
<         }
77,81c64
<             final XpandResource loaded = doLoadXpandResource (fullyQualifiedName);
<             if (shouldCache ()) {
<                 cachedXpand.put (fullyQualifiedName, loaded);
<             }
<             return loaded;
---
>             return loadXpandThroughCache (fullyQualifiedName);
87c70
<             handleParserException (fullyQualifiedName, ex);
---
>             handleParserException (ex);
91a75,85
>     protected XpandResource loadXpandThroughCache (String qualifiedName) throws IOException, ParserException {
>         if (hasCachedXpand (qualifiedName)) {
>             return cachedXpand.get (qualifiedName);
>         }
>         final XpandResource loaded = doLoadXpandResource (qualifiedName);
>         if (shouldCache ()) {
>             cachedXpand.put (qualifiedName, loaded);
>         }
>         return loaded;
>     }
> 
93c87,89
<         XpandResource [] unadvised = internalLoadXpandResources (fullyQualifiedName);
---
>         Reader [] rs1 = resolveMultiple (fullyQualifiedName, XpandResource.TEMPLATE_EXTENSION);
>         assert rs1 != null && rs1.length > 0;
>         XpandResource [] unadvised = loadXpandResources (rs1, fullyQualifiedName);
97c93,94
<             advices = internalLoadXpandResources (aspectsTemplateName);
---
>             Reader [] rs2 = resolveMultiple (aspectsTemplateName, XpandResource.TEMPLATE_EXTENSION);
>             advices = loadXpandResources (rs2, aspectsTemplateName);
102c99
<             handleParserException (fullyQualifiedName, ex);
---
>             handleParserException (ex);
124,127c121,126
<     private XpandResource [] internalLoadXpandResources (String fullyQualifiedName) throws IOException, ParserException {
<         Reader [] rs = resolveMultiple (fullyQualifiedName, XpandResource.TEMPLATE_EXTENSION);
<         assert rs != null && rs.length > 0;
<         XpandResource [] result = new XpandResource [rs.length];
---
>     protected abstract void handleParserException (ParserException ex);
> 
>     protected abstract Reader [] resolveMultiple (String fullyQualifiedName, String extension) throws IOException;
> 
>     protected XtendResource [] loadXtendResources (Reader [] readers, String fullyQualifiedName) throws IOException, ParserException {
>         XtendResource [] result = new XtendResource [readers.length];
129,131c128,129
<         i < rs.length; i ++) {
<             Reader r = rs [i];
<             assert r != null;
---
>         i < readers.length; i ++) {
>             assert readers [i] != null;
133c131
<                 result [i] = loadXpandResource (r, fullyQualifiedName);
---
>                 result [i] = new XtendResourceParser ().parse (readers [i], fullyQualifiedName);
137c135
<                     r.close ();
---
>                     readers [i].close ();
145,146c143,154
<     protected void handleParserException (String name, ParserException ex) {
<         Activator.logWarn (name + ":" + ex.getClass ().getName ());
---
>     protected XpandResource [] loadXpandResources (Reader [] readers, String fullyQualifiedName) throws IOException, ParserException {
>         XpandResource [] result = new XpandResource [readers.length];
>         for (int i = 0;
>         i < readers.length; i ++) {
>             assert readers [i] != null;
>             try {
>                 result [i] = new XpandResourceParser ().parse (readers [i], fullyQualifiedName);
>                 assert result [i] != null;
>             } finally {
>                 try {
>                     readers [i].close ();
>                 } catch (Exception ex) {
148,153d155
< 
<     @Deprecated
<     protected abstract Reader resolve (String fullyQualifiedName, String extension) throws IOException;
< 
<     protected Reader [] resolveMultiple (String fullyQualifiedName, String extension) throws IOException {
<         return new Reader [] {resolve (fullyQualifiedName, extension)};
155,157d156
< 
<     protected XtendResource loadXtendResource (Reader reader, String fullyQualifiedName) throws IOException, ParserException {
<         return new XtendResourceParser ().parse (reader, fullyQualifiedName);
159,161c158
< 
<     protected XpandResource loadXpandResource (Reader reader, String fullyQualifiedName) throws IOException, ParserException {
<         return new XpandResourceParser ().parse (reader, fullyQualifiedName);
---
>         return result;
