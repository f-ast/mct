32a33,34
> import org.eclipse.gmf.gmfgraph.BasicFont;
> 
36a39,42
> import org.eclipse.gmf.gmfgraph.Color;
> 
> import org.eclipse.gmf.gmfgraph.ConstantColor;
> 
40a47,48
> import org.eclipse.gmf.gmfgraph.Font;
> 
54a63,64
> import org.eclipse.gmf.gmfgraph.RGBColor;
> 
76a87,88
> import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;
> 
78a91,92
> import org.eclipse.jface.resource.FontDescriptor;
> 
80a95,98
> import org.eclipse.swt.graphics.FontData;
> 
> import org.eclipse.swt.graphics.RGB;
> 
83a102,193
>     private static Integer getGridDataAlignment (Alignment alignment) {
>         switch (alignment.getValue ()) {
>             case Alignment.BEGINNING :
>                 return GridData.BEGINNING;
>             case Alignment.END :
>                 return GridData.END;
>             case Alignment.CENTER :
>                 return GridData.CENTER;
>             case Alignment.FILL :
>                 return GridData.FILL;
>         }
>         return null;
>     }
> 
>     private static int getFlowLayoutAllignment (Alignment alignment, boolean isToolbar) {
>         switch (alignment.getValue ()) {
>             case Alignment.BEGINNING :
>                 return isToolbar ? ToolbarLayout.ALIGN_TOPLEFT : org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP;
>             case Alignment.END :
>                 return isToolbar ? ToolbarLayout.ALIGN_BOTTOMRIGHT : org.eclipse.draw2d.FlowLayout.ALIGN_RIGHTBOTTOM;
>         }
>         return isToolbar ? ToolbarLayout.ALIGN_CENTER : org.eclipse.draw2d.FlowLayout.ALIGN_CENTER;
>     }
> 
>     protected static int getLineStyle (LineKind lineKind) {
>         switch (lineKind.getValue ()) {
>             case LineKind.LINE_DASH :
>                 {
>                     return Graphics.LINE_DASH;
>                 } case LineKind.LINE_DOT :
>                 {
>                     return Graphics.LINE_DOT;
>                 } case LineKind.LINE_DASHDOT :
>                 {
>                     return Graphics.LINE_DASHDOT;
>                 } case LineKind.LINE_DASHDOTDOT :
>                 {
>                     return Graphics.LINE_DASHDOTDOT;
>                 } case LineKind.LINE_CUSTOM :
>                 {
>                     return Graphics.LINE_CUSTOM;
>                 } default :
>                 {
>                     return Graphics.LINE_SOLID;
>                 }}
>     }
> 
>     protected static org.eclipse.swt.graphics.Color getColor (Color modelColor) {
>         if (modelColor instanceof ConstantColor) {
>             ConstantColor constantColor = (ConstantColor) modelColor;
>             switch (constantColor.getValue ()) {
>                 case BLACK_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.black;
>                 case BLUE_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.blue;
>                 case CYAN_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.cyan;
>                 case DARK_BLUE_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.darkBlue;
>                 case DARK_GRAY_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.darkGray;
>                 case DARK_GREEN_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.darkGreen;
>                 case GRAY_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.gray;
>                 case GREEN_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.green;
>                 case LIGHT_BLUE_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.lightBlue;
>                 case LIGHT_GRAY_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.lightGray;
>                 case LIGHT_GREEN_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.lightGreen;
>                 case ORANGE_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.orange;
>                 case RED_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.red;
>                 case WHITE_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.white;
>                 case YELLOW_LITERAL :
>                     return org.eclipse.draw2d.ColorConstants.yellow;
>             }
>         } else if (modelColor instanceof RGBColor) {
>             RGBColor rgbColor = (RGBColor) modelColor;
>             return DiagramColorRegistry.getInstance ().getColor (new RGB (rgbColor.getRed (), rgbColor.getGreen (), rgbColor.getBlue ()));
>         }
> 
>         return null;
>     }
> 
>     private FontData myCachedFontData;
> 
178,201d287
<     private int getDraw2dAllignment (Alignment alignment, boolean isToolbar) {
<         switch (alignment.getValue ()) {
<             case Alignment.BEGINNING :
<                 return isToolbar ? ToolbarLayout.ALIGN_TOPLEFT : org.eclipse.draw2d.FlowLayout.ALIGN_LEFTTOP;
<             case Alignment.END :
<                 return isToolbar ? ToolbarLayout.ALIGN_BOTTOMRIGHT : org.eclipse.draw2d.FlowLayout.ALIGN_RIGHTBOTTOM;
<         }
<         return isToolbar ? ToolbarLayout.ALIGN_CENTER : org.eclipse.draw2d.FlowLayout.ALIGN_CENTER;
<     }
< 
<     private Integer getGridDataAlignment (Alignment alignment) {
<         switch (alignment.getValue ()) {
<             case Alignment.BEGINNING :
<                 return GridData.BEGINNING;
<             case Alignment.END :
<                 return GridData.END;
<             case Alignment.CENTER :
<                 return GridData.CENTER;
<             case Alignment.FILL :
<                 return GridData.FILL;
<         }
<         return null;
<     }
< 
217c303
<                 layoutManager.setMinorAlignment (getDraw2dAllignment (flowLayout.getMinorAlignment (), flowLayout.isForceSingleLine ()));
---
>                 layoutManager.setMinorAlignment (getFlowLayoutAllignment (flowLayout.getMinorAlignment (), flowLayout.isForceSingleLine ()));
224,225c310,311
<                 layoutManager.setMinorAlignment (getDraw2dAllignment (flowLayout.getMinorAlignment (), flowLayout.isForceSingleLine ()));
<                 layoutManager.setMajorAlignment (getDraw2dAllignment (flowLayout.getMajorAlignment (), flowLayout.isForceSingleLine ()));
---
>                 layoutManager.setMinorAlignment (getFlowLayoutAllignment (flowLayout.getMinorAlignment (), flowLayout.isForceSingleLine ()));
>                 layoutManager.setMajorAlignment (getFlowLayoutAllignment (flowLayout.getMajorAlignment (), flowLayout.isForceSingleLine ()));
264,286d349
<     protected static int getLineStyle (LineKind lineKind) {
<         switch (lineKind.getValue ()) {
<             case LineKind.LINE_DASH :
<                 {
<                     return Graphics.LINE_DASH;
<                 } case LineKind.LINE_DOT :
<                 {
<                     return Graphics.LINE_DOT;
<                 } case LineKind.LINE_DASHDOT :
<                 {
<                     return Graphics.LINE_DASHDOT;
<                 } case LineKind.LINE_DASHDOTDOT :
<                 {
<                     return Graphics.LINE_DASHDOTDOT;
<                 } case LineKind.LINE_CUSTOM :
<                 {
<                     return Graphics.LINE_CUSTOM;
<                 } default :
<                 {
<                     return Graphics.LINE_SOLID;
<                 }}
<     }
< 
300a364,432
>     protected org.eclipse.draw2d.geometry.Dimension getDraw2dDimension (Dimension dimension) {
>         return new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (dimension.getDx ()), getMapMode ().DPtoLP (dimension.getDy ()));
>     }
> 
>     protected org.eclipse.draw2d.geometry.Point getDraw2DPoint (Point point) {
>         return new org.eclipse.draw2d.geometry.Point (getMapMode ().DPtoLP (point.getX ()), getMapMode ().DPtoLP (point.getY ()));
>     }
> 
>     protected void refreshLayoutData () {
>         if (! hasParentFigure ()) {
>             return;
>         }
>         Object layoutConstraint = getLayoutConstraint ();
>         if (layoutConstraint != null) {
>             getFigure ().getParent ().setConstraint (getFigure (), layoutConstraint);
>         }
>     }
> 
>     private boolean hasParentFigure () {
>         return getFigure ().getParent () != null;
>     }
> 
>     protected void refreshLayoutManager () {
>         if (! hasParentFigure ()) {
>             return;
>         }
>         handleMajorSemanticChange ();
>     }
> 
>     protected Shape getShape () {
>         View view = getNotationView ();
>         if (view != null && view.getElement () instanceof Shape) {
>             return (Shape) view.getElement ();
>         }
>         return null;
>     }
> 
>     protected void refreshFont () {
>         Font modelFont = getShape ().getFont ();
>         if (modelFont instanceof BasicFont) {
>             BasicFont basicFont = (BasicFont) modelFont;
>             int fontStyle = SWT.NONE;
>             switch (basicFont.getStyle ()) {
>                 case BOLD_LITERAL :
>                     fontStyle = SWT.BOLD;
>                     break;
>                 case ITALIC_LITERAL :
>                     fontStyle = SWT.ITALIC;
>                     break;
>             }
>             if (basicFont.getFaceName () == null) {
>                 return;
>             }
>             FontData fontData = new FontData (basicFont.getFaceName (), basicFont.getHeight (), fontStyle);
>             if (myCachedFontData != null && myCachedFontData.equals (fontData)) {
>                 return;
>             }
>             org.eclipse.swt.graphics.Font font = getResourceManager ().createFont (FontDescriptor.createFrom (fontData));
>             getNodeFigure ().setFont (font);
>             getNodeFigure ().repaint ();
>             if (myCachedFontData != null) {
>                 getResourceManager ().destroyFont (FontDescriptor.createFrom (myCachedFontData));
>             }
>         } else {
>             getNodeFigure ().setFont (null);
>             getNodeFigure ().repaint ();
>         }
>     }
> 
364,400d495
<     protected org.eclipse.draw2d.geometry.Dimension getDraw2dDimension (Dimension dimension) {
<         return new org.eclipse.draw2d.geometry.Dimension (getMapMode ().DPtoLP (dimension.getDx ()), getMapMode ().DPtoLP (dimension.getDy ()));
<     }
< 
<     protected org.eclipse.draw2d.geometry.Point getDraw2DPoint (Point point) {
<         return new org.eclipse.draw2d.geometry.Point (getMapMode ().DPtoLP (point.getX ()), getMapMode ().DPtoLP (point.getY ()));
<     }
< 
<     protected void refreshLayoutData () {
<         if (! hasParentFigure ()) {
<             return;
<         }
<         Object layoutConstraint = getLayoutConstraint ();
<         if (layoutConstraint != null) {
<             getFigure ().getParent ().setConstraint (getFigure (), layoutConstraint);
<         }
<     }
< 
<     private boolean hasParentFigure () {
<         return getFigure ().getParent () != null;
<     }
< 
<     protected void refreshLayoutManager () {
<         if (! hasParentFigure ()) {
<             return;
<         }
<         handleMajorSemanticChange ();
<     }
< 
<     protected Shape getShape () {
<         View view = getNotationView ();
<         if (view != null && view.getElement () instanceof Shape) {
<             return (Shape) view.getElement ();
<         }
<         return null;
<     }
< 
