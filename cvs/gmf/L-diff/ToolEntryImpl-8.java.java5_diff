2a3,4
> import java.util.Collection;
> 
6a9,14
> import org.eclipse.emf.common.notify.NotificationChain;
> 
> import org.eclipse.emf.common.util.EList;
> 
> import org.eclipse.emf.common.util.EMap;
> 
8a17,22
> import org.eclipse.emf.ecore.EStructuralFeature;
> 
> import org.eclipse.emf.ecore.EcorePackage;
> 
> import org.eclipse.emf.ecore.InternalEObject;
> 
10a25,32
> import org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl;
> 
> import org.eclipse.emf.ecore.util.EObjectResolvingEList;
> 
> import org.eclipse.emf.ecore.util.EcoreEMap;
> 
> import org.eclipse.emf.ecore.util.InternalEList;
> 
12a35,38
> import org.eclipse.gmf.codegen.gmfgen.GenLink;
> 
> import org.eclipse.gmf.codegen.gmfgen.GenNode;
> 
15c41
< public abstract class ToolEntryImpl extends EntryBaseImpl implements ToolEntry {
---
> public class ToolEntryImpl extends EntryBaseImpl implements ToolEntry {
17a44,48
>     protected EList genNodes = null;
>     protected EList genLinks = null;
>     protected static final String QUALIFIED_TOOL_NAME_EDEFAULT = null;
>     protected String qualifiedToolName = QUALIFIED_TOOL_NAME_EDEFAULT;
>     protected EMap properties = null;
37a69,115
>     public EList getGenNodes () {
>         if (genNodes == null) {
>             genNodes = new EObjectResolvingEList (GenNode.class, this, GMFGenPackage.TOOL_ENTRY__GEN_NODES);
>         }
>         return genNodes;
>     }
> 
>     public EList getGenLinks () {
>         if (genLinks == null) {
>             genLinks = new EObjectResolvingEList (GenLink.class, this, GMFGenPackage.TOOL_ENTRY__GEN_LINKS);
>         }
>         return genLinks;
>     }
> 
>     public EList getElements () {
>         if (getGenNodes ().isEmpty ()) {
>             return getGenLinks ();
>         }
>         return getGenNodes ();
>     }
> 
>     public String getQualifiedToolName () {
>         return qualifiedToolName;
>     }
> 
>     public void setQualifiedToolName (String newQualifiedToolName) {
>         String oldQualifiedToolName = qualifiedToolName;
>         qualifiedToolName = newQualifiedToolName;
>         if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME, oldQualifiedToolName, qualifiedToolName));
> 
>     }
> 
>     public EMap getProperties () {
>         if (properties == null) {
>             properties = new EcoreEMap (EcorePackage.Literals.ESTRING_TO_STRING_MAP_ENTRY, EStringToStringMapEntryImpl.class, this, GMFGenPackage.TOOL_ENTRY__PROPERTIES);
>         }
>         return properties;
>     }
> 
>     public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
>         switch (featureID) {
>             case GMFGenPackage.TOOL_ENTRY__PROPERTIES :
>                 return ((InternalEList) getProperties ()).basicRemove (otherEnd, msgs);
>         }
>         return super.eInverseRemove (otherEnd, featureID, msgs);
>     }
> 
41a120,131
>             case GMFGenPackage.TOOL_ENTRY__GEN_NODES :
>                 return getGenNodes ();
>             case GMFGenPackage.TOOL_ENTRY__GEN_LINKS :
>                 return getGenLinks ();
>             case GMFGenPackage.TOOL_ENTRY__ELEMENTS :
>                 return getElements ();
>             case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME :
>                 return getQualifiedToolName ();
>             case GMFGenPackage.TOOL_ENTRY__PROPERTIES :
>                 if (coreType) return getProperties ();
>                 else return getProperties ().map ();
> 
50a141,154
>             case GMFGenPackage.TOOL_ENTRY__GEN_NODES :
>                 getGenNodes ().clear ();
>                 getGenNodes ().addAll ((Collection) newValue);
>                 return;
>             case GMFGenPackage.TOOL_ENTRY__GEN_LINKS :
>                 getGenLinks ().clear ();
>                 getGenLinks ().addAll ((Collection) newValue);
>                 return;
>             case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME :
>                 setQualifiedToolName ((String) newValue);
>                 return;
>             case GMFGenPackage.TOOL_ENTRY__PROPERTIES :
>                 ((EStructuralFeature.Setting) getProperties ()).set (newValue);
>                 return;
59a164,175
>             case GMFGenPackage.TOOL_ENTRY__GEN_NODES :
>                 getGenNodes ().clear ();
>                 return;
>             case GMFGenPackage.TOOL_ENTRY__GEN_LINKS :
>                 getGenLinks ().clear ();
>                 return;
>             case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME :
>                 setQualifiedToolName (QUALIFIED_TOOL_NAME_EDEFAULT);
>                 return;
>             case GMFGenPackage.TOOL_ENTRY__PROPERTIES :
>                 getProperties ().clear ();
>                 return;
67a184,193
>             case GMFGenPackage.TOOL_ENTRY__GEN_NODES :
>                 return genNodes != null && ! genNodes.isEmpty ();
>             case GMFGenPackage.TOOL_ENTRY__GEN_LINKS :
>                 return genLinks != null && ! genLinks.isEmpty ();
>             case GMFGenPackage.TOOL_ENTRY__ELEMENTS :
>                 return ! getElements ().isEmpty ();
>             case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME :
>                 return QUALIFIED_TOOL_NAME_EDEFAULT == null ? qualifiedToolName != null : ! QUALIFIED_TOOL_NAME_EDEFAULT.equals (qualifiedToolName);
>             case GMFGenPackage.TOOL_ENTRY__PROPERTIES :
>                 return properties != null && ! properties.isEmpty ();
77a204,205
>         result.append (", qualifiedToolName: ");
>         result.append (qualifiedToolName);
86c214
<         return CodeGenUtil.validJavaIdentifier ("create" + getTitleKey () + getEntryID () + "CreationTool");
---
>         return CodeGenUtil.validJavaIdentifier ("create" + getTitle () + getEntryID () + "CreationTool");
