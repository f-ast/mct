4a5,8
> import java.util.HashSet;
> 
> import java.util.Iterator;
> 
12a17,18
> import java.util.Set;
> 
156,169c162
<             List children = parent.getChildren ();
<             for (int i = 0;
<             i < children.size (); i ++) {
<                 IFigure child = (IFigure) children.get (i);
<                 if (child != conn.getSourceAnchor ().getOwner () && child != conn.getTargetAnchor ().getOwner () && ! FigureUtilities.isAncestor (child, conn.getSourceAnchor ().getOwner ()) && ! FigureUtilities.isAncestor (child, conn.getTargetAnchor ().getOwner ())) {
<                     Rectangle rObstruct = new Rectangle (child.getBounds ());
<                     child.translateToAbsolute (rObstruct);
<                     conn.translateToRelative (rObstruct);
<                     rObstruct.expand (1, 1);
<                     if (rPoly.intersects (rObstruct)) {
<                         collectObstructs.add (rObstruct);
<                     }
<                 }
<             }
---
>             collectObstructions (conn, rPoly, collectObstructs);
202a196,237
>     protected void collectObstructions (Connection connection, Rectangle connectionRect, List obstructionsToReturn) {
>         Set containerFiguresToSearch = new HashSet ();
>         Set figuresToExclude = new HashSet ();
>         IFigure figure = connection.getSourceAnchor ().getOwner ();
>         figuresToExclude.add (figure);
>         figure = figure.getParent ();
>         while (figure != null) {
>             if (figure.getLayoutManager () instanceof XYLayout) {
>                 containerFiguresToSearch.add (figure);
>             }
>             figuresToExclude.add (figure);
>             figure = figure.getParent ();
>         }
>         figure = connection.getTargetAnchor ().getOwner ();
>         figuresToExclude.add (figure);
>         figure = figure.getParent ();
>         while (figure != null) {
>             if (figure.getLayoutManager () instanceof XYLayout) {
>                 containerFiguresToSearch.add (figure);
>             }
>             figuresToExclude.add (figure);
>             figure = figure.getParent ();
>         }
>         for (Iterator iter = containerFiguresToSearch.iterator ();
>         iter.hasNext ();) {
>             IFigure containerFigure = (IFigure) iter.next ();
>             for (Iterator iterator = containerFigure.getChildren ().iterator ();
>             iterator.hasNext ();) {
>                 IFigure childFigure = (IFigure) iterator.next ();
>                 if (! figuresToExclude.contains (childFigure)) {
>                     Rectangle rObstruct = new Rectangle (childFigure.getBounds ());
>                     childFigure.translateToAbsolute (rObstruct);
>                     connection.translateToRelative (rObstruct);
>                     rObstruct.expand (1, 1);
>                     if (connectionRect.intersects (rObstruct)) {
>                         obstructionsToReturn.add (rObstruct);
>                     }
>                 }
>             }
>         }
>     }
> 
