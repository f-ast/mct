25,26d24
< import org.eclipse.core.runtime.Platform;
< 
48a47,48
> import org.eclipse.gef.EditPartViewer;
> 
109,110d108
< import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.DefaultEditableEditPart;
< 
115,116d112
< import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramFontRegistry;
< 
120a117,118
> import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;
> 
124a123,124
> import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
> 
132a133,134
> import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
> 
158a161,172
> import org.eclipse.jface.preference.IPreferenceStore;
> 
> import org.eclipse.jface.preference.PreferenceConverter;
> 
> import org.eclipse.jface.resource.DeviceResourceException;
> 
> import org.eclipse.jface.resource.FontDescriptor;
> 
> import org.eclipse.jface.resource.JFaceResources;
> 
> import org.eclipse.jface.resource.ResourceManager;
> 
171,172d184
< import org.eclipse.swt.widgets.Display;
< 
179c191
<     private final IEditableEditPart editableEditPart;
---
>     private boolean isEditable = true;
180a193
>     private FontData cachedFontData;
184d196
<         this.editableEditPart = new DefaultEditableEditPart (this);
192,196c204,220
<         EObject semanticProxy = null;
<         if (hasNotationView ()) semanticProxy = ((View) getModel ()).getElement ();
<         else semanticProxy = (EObject) basicGetModel ();
< 
<         EObject semanticElement = EMFCoreUtil.resolve (getEditingDomain (), semanticProxy);
---
>         EObject semanticElement;
>         EObject semanticProxy;
>         if (hasNotationView ()) {
>             semanticProxy = ((View) super.getModel ()).getElement ();
>             if ((semanticProxy == null) || semanticProxy.eIsProxy ()) {
>                 semanticElement = null;
>             } else {
>                 semanticElement = semanticProxy;
>             }
>         } else {
>             semanticProxy = (EObject) basicGetModel ();
>             if ((semanticProxy != null) && semanticProxy.eIsProxy ()) {
>                 semanticElement = EMFCoreUtil.resolve (getEditingDomain (), semanticProxy);
>             } else {
>                 semanticElement = semanticProxy;
>             }
>         }
267a292,299
>     public void removeNotify () {
>         super.removeNotify ();
>         if (cachedFontData != null) {
>             getResourceManager ().destroyFont (FontDescriptor.createFrom (cachedFontData));
>             cachedFontData = null;
>         }
>     }
> 
277d308
<         Object model = basicGetModel ();
283a315
>             else return null;
285a318
>         Object model = basicGetModel ();
296c329
<             if (key.isInstance (semanticObject)) {
---
>             if ((semanticObject != null) && key.isInstance (semanticObject)) {
303,306c336
<         Object adapter = super.getAdapter (key);
<         if (adapter != null) return adapter;
< 
<         return Platform.getAdapterManager ().getAdapter (this, key);
---
>         return super.getAdapter (key);
318,319c348,350
<         if (getModel () != null) {
<             View view = ViewUtil.getChildBySemanticHint ((View) getModel (), semanticHint);
---
>         View view;
>         if (hasNotationView () && (view = (View) super.getModel ()) != null) {
>             view = ViewUtil.getChildBySemanticHint (view, semanticHint);
332,333c363,365
<         if (getModel () != null) {
<             return ViewUtil.getChildBySemanticHint ((View) getModel (), semanticHint);
---
>         View view;
>         if (hasNotationView () && (view = (View) super.getModel ()) != null) {
>             return ViewUtil.getChildBySemanticHint (view, semanticHint);
377c409,413
<                     cc.add (ToggleCanonicalModeCommand.getToggleCanonicalModeCommand (tcmd, true));
---
>                     ToggleCanonicalModeCommand tcmd2 = ToggleCanonicalModeCommand.getToggleCanonicalModeCommand (tcmd, true);
>                     if (tcmd2 != null) {
>                         tcmd2.setDomain (getEditingDomain ());
>                     }
>                     cc.add (tcmd2);
459,463c495
<         EditDomain editDomain = getEditDomain ();
<         if (editDomain != null) {
<             return (IDiagramEditDomain) editDomain;
<         }
<         return null;
---
>         return (IDiagramEditDomain) getEditDomain ();
475c507
<         if (hasNotationView ()) return ViewUtil.getStructuralFeatureValue ((View) getModel (), feature);
---
>         if (hasNotationView ()) return ViewUtil.getPropertyValue ((View) super.getModel (), feature, feature.getEContainingClass ());
480a513,526
>         EObject semanticElement = null;
>         Object basicModel = basicGetModel ();
>         if (hasNotationView ()) {
>             semanticElement = ((View) basicModel).getElement ();
>         } else if (basicModel instanceof EObject) {
>             semanticElement = (EObject) basicModel;
>         }
> 
>         if (semanticElement == null) {
>             return null;
>         }
>         if (! semanticElement.eIsProxy ()) {
>             return semanticElement;
>         }
583c629
<         FillStyle style = (FillStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getFillStyle ());
---
>         FillStyle style = (FillStyle) getPrimaryView ().getStyle (NotationPackage.Literals.FILL_STYLE);
590c636
<         FontStyle style = (FontStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getFontStyle ());
---
>         FontStyle style = (FontStyle) getPrimaryView ().getStyle (NotationPackage.Literals.FONT_STYLE);
597c643
<         FontStyle style = (FontStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getFontStyle ());
---
>         FontStyle style = (FontStyle) getPrimaryView ().getStyle (NotationPackage.Literals.FONT_STYLE);
604c650
<         LineStyle style = (LineStyle) getPrimaryView ().getStyle (NotationPackage.eINSTANCE.getLineStyle ());
---
>         LineStyle style = (LineStyle) getPrimaryView ().getStyle (NotationPackage.Literals.LINE_STYLE);
629c675
<         Object [] objects = (Object []) listenerFilters.get (filterId);
---
>         Object [] objects = (Object []) listenerFilters.remove (filterId);
637d682
<         listenerFilters.remove (filterId);
645,646c690,694
<         Font newFont = DiagramFontRegistry.getInstance ().getFont (Display.getDefault (), fontData);
<         if (! newFont.equals (getFigure ().getFont ())) {
---
>         if (cachedFontData != null && cachedFontData.equals (fontData)) {
>             return;
>         }
>         try {
>             Font newFont = getResourceManager ().createFont (FontDescriptor.createFrom (fontData));
648a697,703
>             if (cachedFontData != null) {
>                 getResourceManager ().destroyFont (FontDescriptor.createFrom (cachedFontData));
>             }
>             cachedFontData = fontData;
>         } catch (DeviceResourceException e) {
>             Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "setFont", e);
>             Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING, "setFont", e);
660,661c715,717
<         if (hasNotationView ()) ViewUtil.setStructuralFeatureValue ((View) getModel (), feature, value);
< 
---
>         if (hasNotationView () && (feature != null)) {
>             ViewUtil.setPropertyValue ((View) super.getModel (), feature, feature.getEContainingClass (), value);
>         }
749a806
>         EditPartViewer viewer = getViewer ();
753c810
<             getViewer ().getEditPartRegistry ().put (basicGetModel (), this);
---
>             viewer.getEditPartRegistry ().put (basicGetModel (), this);
763c820
<         ((IDiagramGraphicalViewer) getViewer ()).registerEditPartForElement (elementGuid, this);
---
>         ((IDiagramGraphicalViewer) viewer).registerEditPartForElement (elementGuid, this);
766a824
>         EditPartViewer viewer = getViewer ();
769c827
<             Map registry = getViewer ().getEditPartRegistry ();
---
>             Map registry = viewer.getEditPartRegistry ();
776c834
<         ((IDiagramGraphicalViewer) getViewer ()).unregisterEditPartForElement (elementGuid, this);
---
>         ((IDiagramGraphicalViewer) viewer).unregisterEditPartForElement (elementGuid, this);
804c862
<     public final boolean isCanonical () {
---
>     public boolean isCanonical () {
814c872,893
<         this.editableEditPart.disableEditMode ();
---
>         if (! isEditModeEnabled ()) {
>             return;
>         }
>         List l = getSourceConnections ();
>         int size = l.size ();
>         for (int i = 0;
>         i < size; i ++) {
>             Object obj = l.get (i);
>             if (obj instanceof IEditableEditPart) {
>                 ((IEditableEditPart) obj).disableEditMode ();
>             }
>         }
>         List c = getChildren ();
>         size = c.size ();
>         for (int i = 0;
>         i < size; i ++) {
>             Object obj = c.get (i);
>             if (obj instanceof IEditableEditPart) {
>                 ((IEditableEditPart) obj).disableEditMode ();
>             }
>         }
>         isEditable = false;
818c897,918
<         this.editableEditPart.enableEditMode ();
---
>         if (isEditModeEnabled ()) {
>             return;
>         }
>         isEditable = true;
>         List c = getChildren ();
>         int size = c.size ();
>         for (int i = 0;
>         i < size; i ++) {
>             Object obj = c.get (i);
>             if (obj instanceof IEditableEditPart) {
>                 ((IEditableEditPart) obj).enableEditMode ();
>             }
>         }
>         List l = getSourceConnections ();
>         size = l.size ();
>         for (int i = 0;
>         i < size; i ++) {
>             Object obj = l.get (i);
>             if (obj instanceof IEditableEditPart) {
>                 ((IEditableEditPart) obj).enableEditMode ();
>             }
>         }
824c924
<         return this.editableEditPart.isEditModeEnabled ();
---
>         return isEditable;
862,863c962,964
<         if (getRoot () instanceof IDiagramPreferenceSupport) {
<             return ((IDiagramPreferenceSupport) getRoot ()).getPreferencesHint ();
---
>         RootEditPart root = getRoot ();
>         if (root instanceof IDiagramPreferenceSupport) {
>             return ((IDiagramPreferenceSupport) root).getPreferencesHint ();
879c980
<         if (NotationPackage.eINSTANCE.getView_PersistedChildren ().equals (event.getFeature ()) || NotationPackage.eINSTANCE.getView_TransientChildren ().equals (event.getFeature ())) {
---
>         if (NotationPackage.Literals.VIEW__PERSISTED_CHILDREN.equals (event.getFeature ()) || NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN.equals (event.getFeature ())) {
881c982
<         } else if (NotationPackage.eINSTANCE.getView_Visible ().equals (event.getFeature ())) {
---
>         } else if (NotationPackage.Literals.VIEW__VISIBLE.equals (event.getFeature ())) {
887c988
<         } else if (NotationPackage.eINSTANCE.getView_Element ().equals (event.getFeature ())) {
---
>         } else if (NotationPackage.Literals.VIEW__ELEMENT.equals (event.getFeature ())) {
893c994
<     final protected IMapMode getMapMode () {
---
>     protected IMapMode getMapMode () {
927a1029,1037
>     protected IFigure createFigure () {
>         return null;
>     }
> 
>     public void setModel (Object model) {
>         editingDomain = null;
>         super.setModel (model);
>     }
> 
942a1053,1075
>     public Object getPreferredValue (EStructuralFeature feature) {
>         Object preferenceStore = getDiagramPreferencesHint ().getPreferenceStore ();
>         if (preferenceStore instanceof IPreferenceStore) {
>             if (feature == NotationPackage.eINSTANCE.getLineStyle_LineColor ()) {
>                 return FigureUtilities.RGBToInteger (PreferenceConverter.getColor ((IPreferenceStore) preferenceStore, IPreferenceConstants.PREF_LINE_COLOR));
>             } else if (feature == NotationPackage.eINSTANCE.getFontStyle_FontColor ()) {
>                 return FigureUtilities.RGBToInteger (PreferenceConverter.getColor ((IPreferenceStore) preferenceStore, IPreferenceConstants.PREF_FONT_COLOR));
>             } else if (feature == NotationPackage.eINSTANCE.getFillStyle_FillColor ()) {
>                 return FigureUtilities.RGBToInteger (PreferenceConverter.getColor ((IPreferenceStore) preferenceStore, IPreferenceConstants.PREF_FILL_COLOR));
>             }
> 
>         }
>         return getStructuralFeatureValue (feature);
>     }
> 
>     protected ResourceManager getResourceManager () {
>         EditPartViewer viewer = getViewer ();
>         if (viewer instanceof DiagramGraphicalViewer) {
>             return ((DiagramGraphicalViewer) viewer).getResourceManager ();
>         }
>         return JFaceResources.getResources ();
>     }
> 
