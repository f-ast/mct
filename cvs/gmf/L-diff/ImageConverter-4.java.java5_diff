54,56c54,55
<                 int color = imageData.getPixel (x, y);
<                 color = translateColor (imageData, color);
<                 image.setRGB (x, y, color);
---
>                 RGB color = imageData.palette.getRGB (imageData.getPixel (x, y));
>                 image.setRGB (x, y, new java.awt.Color (color.red, color.green, color.blue).getRGB ());
73,148d71
<     private static int translateColor (ImageData imageData, int color) {
<         int bitCount = imageData.depth;
<         RGB [] rgb = imageData.getRGBs ();
<         if (bitCount == 1 || bitCount == 4 || bitCount == 8) {
<             if (rgb != null) {
<                 java.awt.Color foo = new java.awt.Color (rgb [color].red, rgb [color].green, rgb [color].blue);
<                 color = foo.getRGB ();
<             } else {
<                 color = 0;
<             }
<         } else if (bitCount == 16) {
<             int BLUE_MASK = 0x1f;
<             int GREEN_MASK = 0x3e0;
<             int RED_MASK = 0x7C00;
<             color = applyRGBMask (color, RED_MASK, GREEN_MASK, BLUE_MASK);
<         } else if (bitCount == 24) {
<             int blue = (color & 0x00ff0000)>> 16;
<             int green = (color & 0x0000ff00)>> 8;
<             int red = (color & 0x000000ff);
<             java.awt.Color foo = new java.awt.Color (red, green, blue);
<             color = foo.getRGB ();
<         } else if (bitCount == 32) {
<             int blue = (color & 0xff000000)>>> 24;
<             int green = (color & 0x00ff0000)>> 16;
<             int red = (color & 0x0000ff00)>> 8;
<             java.awt.Color foo = new java.awt.Color (red, green, blue);
<             color = foo.getRGB ();
<         }
< 
<         return color;
<     }
< 
<     private static int applyRGBMask (int color, int redMask, int greenMask, int blueMask) {
<         int shiftCount;
<         int maskSize;
<         int red;
<         int green;
<         int blue;
<         shiftCount = getShiftCount (redMask);
<         maskSize = countBits (redMask);
<         red = (color & redMask)>>> shiftCount;
<         red = red * 255 / ((int) Math.pow (2, maskSize) - 1);
<         shiftCount = getShiftCount (greenMask);
<         maskSize = countBits (greenMask);
<         green = (color & greenMask)>>> shiftCount;
<         green = green * 255 / ((int) Math.pow (2, maskSize) - 1);
<         shiftCount = getShiftCount (blueMask);
<         maskSize = countBits (blueMask);
<         blue = (color & blueMask)>>> shiftCount;
<         blue = blue * 255 / ((int) Math.pow (2, maskSize) - 1);
<         java.awt.Color foo = new java.awt.Color (red, green, blue);
<         color = foo.getRGB ();
<         return color;
<     }
< 
<     private static int getShiftCount (int mask) {
<         int count = 0;
<         while (mask != 0 && ((mask & 0x1) == 0)) {
<             mask = mask>>> 1;
<             count ++;
<         }
<         return count;
<     }
< 
<     private static int countBits (int mask) {
<         int count = 0;
<         for (int index = 0;
<         index < 32; index ++) {
<             if ((mask & 0x1) != 0) {
<                 count ++;
<             }
<             mask = mask>>> 1;
<         }
<         return count;
<     }
< 
