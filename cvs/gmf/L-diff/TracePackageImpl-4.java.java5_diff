19,28d18
< import org.eclipse.emf.ocl.expressions.ExpressionsPackage;
< 
< import org.eclipse.emf.ocl.query.QueryPackage;
< 
< import org.eclipse.emf.ocl.types.TypesPackage;
< 
< import org.eclipse.emf.ocl.uml.UMLPackage;
< 
< import org.eclipse.emf.ocl.utilities.UtilitiesPackage;
< 
81,85d70
<         TypesPackage.eINSTANCE.eClass ();
<         ExpressionsPackage.eINSTANCE.eClass ();
<         UMLPackage.eINSTANCE.eClass ();
<         UtilitiesPackage.eINSTANCE.eClass ();
<         QueryPackage.eINSTANCE.eClass ();
132,135d116
<     public EReference getMatchingTrace_Query () {
<         return (EReference) matchingTraceEClass.getEStructuralFeatures ().get (1);
<     }
< 
196d176
<         createEReference (matchingTraceEClass, MATCHING_TRACE__QUERY);
218d197
<         QueryPackage theQueryPackage = (QueryPackage) EPackage.Registry.INSTANCE.getEPackage (QueryPackage.eNS_URI);
233,238c212,217
<         EOperation op = addEOperation (traceModelEClass, this.getGenNodeTrace (), "getNodeTrace", 0, 1);
<         addEParameter (op, ecorePackage.getEInt (), "visualID", 0, 1);
<         op = addEOperation (traceModelEClass, this.getGenLinkTrace (), "getLinkTrace", 0, 1);
<         addEParameter (op, ecorePackage.getEInt (), "visualID", 0, 1);
<         addEOperation (traceModelEClass, this.getAbstractTrace (), "getAllAbstractTraces", 0, - 1);
<         addEOperation (traceModelEClass, null, "purgeUnprocessedTraces");
---
>         EOperation op = addEOperation (traceModelEClass, this.getGenNodeTrace (), "getNodeTrace", 0, 1, IS_UNIQUE, IS_ORDERED);
>         addEParameter (op, ecorePackage.getEInt (), "visualID", 0, 1, IS_UNIQUE, IS_ORDERED);
>         op = addEOperation (traceModelEClass, this.getGenLinkTrace (), "getLinkTrace", 0, 1, IS_UNIQUE, IS_ORDERED);
>         addEParameter (op, ecorePackage.getEInt (), "visualID", 0, 1, IS_UNIQUE, IS_ORDERED);
>         addEOperation (traceModelEClass, this.getAbstractTrace (), "getAllAbstractTraces", 0, - 1, IS_UNIQUE, IS_ORDERED);
>         addEOperation (traceModelEClass, null, "purgeUnprocessedTraces", 0, 1, IS_UNIQUE, IS_ORDERED);
244,251c223,229
<         initEReference (getMatchingTrace_Query (), theQueryPackage.getQuery (), null, "query", null, 0, 1, MatchingTrace.class, IS_TRANSIENT, ! IS_VOLATILE, ! IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, IS_DERIVED, IS_ORDERED);
<         addEOperation (matchingTraceEClass, theQueryPackage.getQuery (), "createQuery", 0, 1);
<         op = addEOperation (matchingTraceEClass, ecorePackage.getEString (), "getEClassComparision", 0, 1);
<         addEParameter (op, ecorePackage.getEString (), "varName", 0, 1);
<         addEParameter (op, ecorePackage.getEClass (), "eClass", 0, 1);
<         op = addEOperation (matchingTraceEClass, ecorePackage.getEString (), "getEStructuralFeatureComparison", 0, 1);
<         addEParameter (op, ecorePackage.getEString (), "varName", 0, 1);
<         addEParameter (op, ecorePackage.getEStructuralFeature (), "feature", 0, 1);
---
>         addEOperation (matchingTraceEClass, ecorePackage.getEClass (), "getQueryContext", 0, 1, IS_UNIQUE, IS_ORDERED);
>         op = addEOperation (matchingTraceEClass, ecorePackage.getEString (), "getEClassComparision", 0, 1, IS_UNIQUE, IS_ORDERED);
>         addEParameter (op, ecorePackage.getEString (), "varName", 0, 1, IS_UNIQUE, IS_ORDERED);
>         addEParameter (op, ecorePackage.getEClass (), "eClass", 0, 1, IS_UNIQUE, IS_ORDERED);
>         op = addEOperation (matchingTraceEClass, ecorePackage.getEString (), "getEStructuralFeatureComparison", 0, 1, IS_UNIQUE, IS_ORDERED);
>         addEParameter (op, ecorePackage.getEString (), "varName", 0, 1, IS_UNIQUE, IS_ORDERED);
>         addEParameter (op, ecorePackage.getEStructuralFeature (), "feature", 0, 1, IS_UNIQUE, IS_ORDERED);
255,256c233,234
<         op = addEOperation (genNodeTraceEClass, null, "setContext");
<         addEParameter (op, theGMFGenPackage.getGenNode (), "genNode", 0, 1);
---
>         op = addEOperation (genNodeTraceEClass, null, "setContext", 0, 1, IS_UNIQUE, IS_ORDERED);
>         addEParameter (op, theGMFGenPackage.getGenNode (), "genNode", 0, 1, IS_UNIQUE, IS_ORDERED);
259,260c237,238
<         op = addEOperation (genNodeLabelTraceEClass, null, "setContext");
<         addEParameter (op, theGMFGenPackage.getGenNodeLabel (), "genNodeLabel", 0, 1);
---
>         op = addEOperation (genNodeLabelTraceEClass, null, "setContext", 0, 1, IS_UNIQUE, IS_ORDERED);
>         addEParameter (op, theGMFGenPackage.getGenNodeLabel (), "genNodeLabel", 0, 1, IS_UNIQUE, IS_ORDERED);
263,264c241,242
<         op = addEOperation (genLinkTraceEClass, null, "setContext");
<         addEParameter (op, theGMFGenPackage.getGenLink (), "genLink", 0, 1);
---
>         op = addEOperation (genLinkTraceEClass, null, "setContext", 0, 1, IS_UNIQUE, IS_ORDERED);
>         addEParameter (op, theGMFGenPackage.getGenLink (), "genLink", 0, 1, IS_UNIQUE, IS_ORDERED);
266,267c244,245
<         op = addEOperation (genCompartmentTraceEClass, null, "setContext");
<         addEParameter (op, theGMFGenPackage.getGenCompartment (), "genCompartment", 0, 1);
---
>         op = addEOperation (genCompartmentTraceEClass, null, "setContext", 0, 1, IS_UNIQUE, IS_ORDERED);
>         addEParameter (op, theGMFGenPackage.getGenCompartment (), "genCompartment", 0, 1, IS_UNIQUE, IS_ORDERED);
269,270c247,248
<         op = addEOperation (genLinkLabelTraceEClass, null, "setContext");
<         addEParameter (op, theGMFGenPackage.getGenLinkLabel (), "genLinkLabel", 0, 1);
---
>         op = addEOperation (genLinkLabelTraceEClass, null, "setContext", 0, 1, IS_UNIQUE, IS_ORDERED);
>         addEParameter (op, theGMFGenPackage.getGenLinkLabel (), "genLinkLabel", 0, 1, IS_UNIQUE, IS_ORDERED);
272,273c250,251
<         op = addEOperation (toolGroupTraceEClass, null, "setContext");
<         addEParameter (op, theGMFGenPackage.getToolGroup (), "toolGroup", 0, 1);
---
>         op = addEOperation (toolGroupTraceEClass, null, "setContext", 0, 1, IS_UNIQUE, IS_ORDERED);
>         addEParameter (op, theGMFGenPackage.getToolGroup (), "toolGroup", 0, 1, IS_UNIQUE, IS_ORDERED);
