5,12d4
< import java.io.IOException;
< 
< import java.io.InputStream;
< 
< import java.io.InputStreamReader;
< 
< import java.io.Reader;
< 
55,58d46
< import org.eclipse.emf.codegen.merge.java.JControlModel;
< 
< import org.eclipse.emf.codegen.merge.java.JMerger;
< 
90d77
<     private JControlModel myJControlModel;
96a84
>     private TextMerger myMerger;
98c86,88
<     protected abstract URL getJMergeControlFile ();
---
>     protected final URL getJMergeControlFile () {
>         return null;
>     }
205c195
<             pm.beginTask (null, 4);
---
>             pm.beginTask (null, 5);
210c200
<             boolean propertyFile = "properties".equals (filePath.getFileExtension ());
---
>             final boolean propertyFile = "properties".equals (filePath.getFileExtension ());
217c207
<                 oldText = getFileContents (f);
---
>                 oldText = FileServices.getFileContents (f);
220,223c210
<                 TextMerger merger = TextMerger.getForFile (f.getName ());
<                 if (merger != null) {
<                     genText = merger.process (oldText, genText);
<                 }
---
>                 genText = mergePlainText (oldText, genText, f, new SubProgressMonitor (pm, 1));
230c217
<                 f.create (new ByteArrayInputStream (genText.getBytes (charset)), true, new SubProgressMonitor (pm, 1));
---
>                 f.create (new ByteArrayInputStream (genText.getBytes (charset)), true, new SubProgressMonitor (pm, 2));
246,268d232
<     private static String getFileContents (IFile file) {
<         StringBuffer contents = new StringBuffer ();
<         char [] buffer = new char [1024];
<         int count;
<         try {
<             Reader in = new InputStreamReader (file.getContents (true), file.getCharset ());
<             try {
<                 while ((count = in.read (buffer)) > 0) {
<                     contents.append (buffer, 0, count);
<                 }
<             } finally {
<                 in.close ();
<             }
<         } catch (CoreException ce) {
<             ce.printStackTrace ();
<             return null;
<         } catch (IOException ioe) {
<             ioe.printStackTrace ();
<             return null;
<         }
<         return contents.toString ();
<     }
< 
296,316d259
<     protected boolean contains (IFile f, InputStream is) {
<         int fc = 0;
<         int ic = 0;
<         InputStream fs = null;
<         try {
<             fs = f.getContents (true);
<             while ((fc = fs.read ()) == (ic = is.read ()) && fc >= 0);
< 
<         } catch (CoreException ce) {
<         } catch (IOException ioe) {
<         } finally {
<             if (fs != null) {
<                 try {
<                     fs.close ();
<                 } catch (IOException ioe) {
<                 }
<             }
<         }
<         return fc < 0 && ic < 0;
<     }
< 
329c272,278
<             genText = mergeJavaCode (genText, cu, new SubProgressMonitor (pm, 1));
---
>             String oldContents = null;
>             if (cu.exists ()) {
>                 oldContents = cu.getSource ();
>                 genText = mergeJavaCode (oldContents, genText, new SubProgressMonitor (pm, 1));
>             } else {
>                 pm.worked (1);
>             }
331c280
<             if (! cu.exists () || ! genText.equals (cu.getSource ())) {
---
>             if (! genText.equals (oldContents)) {
372c321
<     protected final String mergeJavaCode (String generatedText, ICompilationUnit oldCU, IProgressMonitor pm) throws JavaModelException {
---
>     protected String mergeJavaCode (String oldContents, String generatedText, IProgressMonitor pm) throws JavaModelException {
375,382c324,327
<             if (oldCU != null && oldCU.exists () && getJControlModel () != null) {
<                 JMerger jMerge = new JMerger (getJControlModel ());
<                 jMerge.setSourceCompilationUnit (jMerge.createCompilationUnitForContents (generatedText));
<                 jMerge.setTargetCompilationUnit (jMerge.createCompilationUnitForContents (oldCU.getSource ()));
<                 jMerge.merge ();
<                 return jMerge.getTargetCompilationUnitContents ();
<             } else {
<                 return generatedText;
---
>             return getMergeService ().mergeJava (oldContents, generatedText);
>         } finally {
>             pm.done ();
>         }
383a329,333
> 
>     protected String mergePlainText (String oldText, String genText, IFile oldRes, IProgressMonitor pm) {
>         pm.beginTask (GeneratorBaseMessages.merge, 1);
>         try {
>             return getMergeService ().process (oldRes.getFileExtension (), oldText, genText);
388a339,350
>     private TextMerger getMergeService () {
>         if (myMerger == null) {
>             myMerger = createMergeService ();
>             assert myMerger != null;
>         }
>         return myMerger;
>     }
> 
>     protected TextMerger createMergeService () {
>         return new TextMerger ();
>     }
> 
422,435d383
<     private JControlModel getJControlModel () {
<         if (myJControlModel == null) {
<             URL controlFile = getJMergeControlFile ();
<             if (controlFile != null) {
<                 myJControlModel = new JControlModel ();
<                 myJControlModel.initialize (CodeGenUtil.instantiateFacadeHelper (JMerger.DEFAULT_FACADE_HELPER_CLASS), controlFile.toString ());
<                 if (! myJControlModel.canMerge ()) {
<                     throw new IllegalStateException ("Can not initialize JControlModel");
<                 }
<             }
<         }
<         return myJControlModel;
<     }
< 
