22a23,26
> import org.eclipse.gmf.mappings.Auditable;
> 
> import org.eclipse.gmf.mappings.AuditedMetricTarget;
> 
54a59,60
> import org.eclipse.gmf.mappings.Measurable;
> 
56a63,66
> import org.eclipse.gmf.mappings.MetricContainer;
> 
> import org.eclipse.gmf.mappings.MetricRule;
> 
67,68d76
< import org.eclipse.gmf.mappings.RuleTarget;
< 
103d110
<     private EClass ruleTargetEClass = null;
106a114,118
>     private EClass metricContainerEClass = null;
>     private EClass metricRuleEClass = null;
>     private EClass auditedMetricTargetEClass = null;
>     private EClass auditableEClass = null;
>     private EClass measurableEClass = null;
331a344,347
>     public EReference getMapping_Metrics () {
>         return (EReference) mappingEClass.getEStructuralFeatures ().get (5);
>     }
> 
456,457c472,473
<     public EAttribute getAuditRule_Name () {
<         return (EAttribute) auditRuleEClass.getEStructuralFeatures ().get (2);
---
>     public EReference getAuditRule_Target () {
>         return (EReference) auditRuleEClass.getEStructuralFeatures ().get (2);
472,475d487
<     public EAttribute getAuditRule_Description () {
<         return (EAttribute) auditRuleEClass.getEStructuralFeatures ().get (6);
<     }
< 
477c489
<         return (EReference) auditRuleEClass.getEStructuralFeatures ().get (7);
---
>         return (EReference) auditRuleEClass.getEStructuralFeatures ().get (6);
484,489c496,497
<     public EReference getRuleBase_Target () {
<         return (EReference) ruleBaseEClass.getEStructuralFeatures ().get (0);
<     }
< 
<     public EClass getRuleTarget () {
<         return ruleTargetEClass;
---
>     public EAttribute getRuleBase_Name () {
>         return (EAttribute) ruleBaseEClass.getEStructuralFeatures ().get (0);
492,493c500,501
<     public EReference getRuleTarget_Rule () {
<         return (EReference) ruleTargetEClass.getEStructuralFeatures ().get (0);
---
>     public EAttribute getRuleBase_Description () {
>         return (EAttribute) ruleBaseEClass.getEStructuralFeatures ().get (1);
519a528,571
>     public EClass getMetricContainer () {
>         return metricContainerEClass;
>     }
> 
>     public EReference getMetricContainer_Metrics () {
>         return (EReference) metricContainerEClass.getEStructuralFeatures ().get (0);
>     }
> 
>     public EClass getMetricRule () {
>         return metricRuleEClass;
>     }
> 
>     public EAttribute getMetricRule_Key () {
>         return (EAttribute) metricRuleEClass.getEStructuralFeatures ().get (0);
>     }
> 
>     public EReference getMetricRule_Rule () {
>         return (EReference) metricRuleEClass.getEStructuralFeatures ().get (1);
>     }
> 
>     public EReference getMetricRule_Target () {
>         return (EReference) metricRuleEClass.getEStructuralFeatures ().get (2);
>     }
> 
>     public EReference getMetricRule_Container () {
>         return (EReference) metricRuleEClass.getEStructuralFeatures ().get (3);
>     }
> 
>     public EClass getAuditedMetricTarget () {
>         return auditedMetricTargetEClass;
>     }
> 
>     public EReference getAuditedMetricTarget_Metric () {
>         return (EReference) auditedMetricTargetEClass.getEStructuralFeatures ().get (0);
>     }
> 
>     public EClass getAuditable () {
>         return auditableEClass;
>     }
> 
>     public EClass getMeasurable () {
>         return measurableEClass;
>     }
> 
539a592
>         createEReference (mappingEClass, MAPPING__METRICS);
614c667,668
<         createEReference (ruleBaseEClass, RULE_BASE__TARGET);
---
>         createEAttribute (ruleBaseEClass, RULE_BASE__NAME);
>         createEAttribute (ruleBaseEClass, RULE_BASE__DESCRIPTION);
618c672
<         createEAttribute (auditRuleEClass, AUDIT_RULE__NAME);
---
>         createEReference (auditRuleEClass, AUDIT_RULE__TARGET);
622d675
<         createEAttribute (auditRuleEClass, AUDIT_RULE__DESCRIPTION);
624,625d676
<         ruleTargetEClass = createEClass (RULE_TARGET);
<         createEReference (ruleTargetEClass, RULE_TARGET__RULE);
631a683,693
>         metricContainerEClass = createEClass (METRIC_CONTAINER);
>         createEReference (metricContainerEClass, METRIC_CONTAINER__METRICS);
>         metricRuleEClass = createEClass (METRIC_RULE);
>         createEAttribute (metricRuleEClass, METRIC_RULE__KEY);
>         createEReference (metricRuleEClass, METRIC_RULE__RULE);
>         createEReference (metricRuleEClass, METRIC_RULE__TARGET);
>         createEReference (metricRuleEClass, METRIC_RULE__CONTAINER);
>         auditedMetricTargetEClass = createEClass (AUDITED_METRIC_TARGET);
>         createEReference (auditedMetricTargetEClass, AUDITED_METRIC_TARGET__METRIC);
>         auditableEClass = createEClass (AUDITABLE);
>         measurableEClass = createEClass (MEASURABLE);
662,664c724,731
<         domainElementTargetEClass.getESuperTypes ().add (this.getRuleTarget ());
<         diagramElementTargetEClass.getESuperTypes ().add (this.getRuleTarget ());
<         notationElementTargetEClass.getESuperTypes ().add (this.getRuleTarget ());
---
>         domainElementTargetEClass.getESuperTypes ().add (this.getAuditable ());
>         domainElementTargetEClass.getESuperTypes ().add (this.getMeasurable ());
>         diagramElementTargetEClass.getESuperTypes ().add (this.getAuditable ());
>         diagramElementTargetEClass.getESuperTypes ().add (this.getMeasurable ());
>         notationElementTargetEClass.getESuperTypes ().add (this.getAuditable ());
>         notationElementTargetEClass.getESuperTypes ().add (this.getMeasurable ());
>         metricRuleEClass.getESuperTypes ().add (this.getRuleBase ());
>         auditedMetricTargetEClass.getESuperTypes ().add (this.getAuditable ());
670a738
>         initEReference (getMapping_Metrics (), this.getMetricContainer (), null, "metrics", null, 0, 1, Mapping.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
747c815,816
<         initEReference (getRuleBase_Target (), this.getRuleTarget (), this.getRuleTarget_Rule (), "target", null, 1, 1, RuleBase.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
---
>         initEAttribute (getRuleBase_Name (), ecorePackage.getEString (), "name", null, 0, 1, RuleBase.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
>         initEAttribute (getRuleBase_Description (), ecorePackage.getEString (), "description", null, 0, 1, RuleBase.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
751c820
<         initEAttribute (getAuditRule_Name (), ecorePackage.getEString (), "name", null, 0, 1, AuditRule.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
---
>         initEReference (getAuditRule_Target (), this.getAuditable (), null, "target", null, 1, 1, AuditRule.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
755d823
<         initEAttribute (getAuditRule_Description (), ecorePackage.getEString (), "description", null, 0, 1, AuditRule.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
757,758d824
<         initEClass (ruleTargetEClass, RuleTarget.class, "RuleTarget", IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
<         initEReference (getRuleTarget_Rule (), this.getRuleBase (), this.getRuleBase_Target (), "rule", null, 1, 1, RuleTarget.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
764a831,841
>         initEClass (metricContainerEClass, MetricContainer.class, "MetricContainer", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
>         initEReference (getMetricContainer_Metrics (), this.getMetricRule (), this.getMetricRule_Container (), "metrics", null, 1, - 1, MetricContainer.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
>         initEClass (metricRuleEClass, MetricRule.class, "MetricRule", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
>         initEAttribute (getMetricRule_Key (), ecorePackage.getEString (), "key", null, 1, 1, MetricRule.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_UNSETTABLE, ! IS_ID, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
>         initEReference (getMetricRule_Rule (), this.getValueExpression (), null, "rule", null, 1, 1, MetricRule.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
>         initEReference (getMetricRule_Target (), this.getMeasurable (), null, "target", null, 1, 1, MetricRule.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
>         initEReference (getMetricRule_Container (), this.getMetricContainer (), this.getMetricContainer_Metrics (), "container", null, 1, 1, MetricRule.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, ! IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
>         initEClass (auditedMetricTargetEClass, AuditedMetricTarget.class, "AuditedMetricTarget", ! IS_ABSTRACT, ! IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
>         initEReference (getAuditedMetricTarget_Metric (), this.getMetricRule (), null, "metric", null, 1, 1, AuditedMetricTarget.class, ! IS_TRANSIENT, ! IS_VOLATILE, IS_CHANGEABLE, ! IS_COMPOSITE, IS_RESOLVE_PROXIES, ! IS_UNSETTABLE, IS_UNIQUE, ! IS_DERIVED, IS_ORDERED);
>         initEClass (auditableEClass, Auditable.class, "Auditable", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
>         initEClass (measurableEClass, Measurable.class, "Measurable", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
795a873
>         addAnnotation (getMetricRule_Rule (), source, new String [] {"def", "context", "ocl", "target.getContext()"});
