3,4d2
< import org.eclipse.core.commands.ExecutionException;
< 
7,16d4
< import org.eclipse.core.runtime.IAdaptable;
< 
< import org.eclipse.core.runtime.IProgressMonitor;
< 
< import org.eclipse.core.runtime.IStatus;
< 
< import org.eclipse.core.runtime.NullProgressMonitor;
< 
< import org.eclipse.core.runtime.Status;
< 
19,20d6
< import org.eclipse.emf.workspace.AbstractEMFOperation;
< 
23,29c9,10
< import org.eclipse.gef.commands.Command;
< 
< import org.eclipse.gmf.internal.runtime.lite.Activator;
< 
< public class WrappingCommand extends Command {
<     private final IUndoableOperation operation;
<     private final TransactionalEditingDomain editingDomain;
---
> public class WrappingCommand extends AbstractWrappingCommand {
>     private final EMFCommandOperation operation;
31a13
>         super (editingDomain);
33d14
<         this.editingDomain = editingDomain;
36,82c17,18
<     public void execute () {
<         try {
<             operation.execute (new NullProgressMonitor (), null);
<         } catch (ExecutionException e) {
<             Activator.getDefault ().logError ("exception occurred while executing operation", e);
<         }
<     }
< 
<     public boolean canExecute () {
<         final boolean [] result = new boolean [1];
<         AbstractEMFOperation canExecute = new AbstractEMFOperation (editingDomain, "canExecute") {
< 
<             @Override
<             protected IStatus doExecute (IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
<                 result [0] = operation.canExecute ();
<                 return Status.OK_STATUS;
<             }
< 
<         }
< 
<         ;
<         try {
<             canExecute.execute (new NullProgressMonitor (), null);
<         } catch (ExecutionException e) {
<             Activator.getDefault ().logError ("exception occurred while testing executability of operation", e);
<         }
<         return result [0];
<     }
< 
<     public void undo () {
<         try {
<             operation.undo (new NullProgressMonitor (), null);
<         } catch (ExecutionException e) {
<             Activator.getDefault ().logError ("exception occurred while undoing operation", e);
<         }
<     }
< 
<     public boolean canUndo () {
<         return operation.canUndo ();
<     }
< 
<     public void redo () {
<         try {
<             operation.redo (new NullProgressMonitor (), null);
<         } catch (ExecutionException e) {
<             Activator.getDefault ().logError ("exception occurred while redoing operation", e);
<         }
---
>     public org.eclipse.emf.common.command.Command getEMFCommand () {
>         return operation.getCommand ();
86,88c22,23
<     public void dispose () {
<         operation.dispose ();
<         super.dispose ();
---
>     protected IUndoableOperation getOperation () {
>         return operation;
