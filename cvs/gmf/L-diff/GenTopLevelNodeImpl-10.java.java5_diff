2a3,4
> import org.eclipse.emf.common.notify.Notification;
> 
8a11,14
> import org.eclipse.emf.ecore.impl.ENotificationImpl;
> 
> import org.eclipse.emf.ecore.util.EcoreUtil;
> 
31a38,58
>     public NotificationChain basicSetDiagram (GenDiagram newDiagram, NotificationChain msgs) {
>         msgs = eBasicSetContainer ((InternalEObject) newDiagram, GMFGenPackage.GEN_TOP_LEVEL_NODE__DIAGRAM, msgs);
>         return msgs;
>     }
> 
>     public void setDiagram (GenDiagram newDiagram) {
>         if (newDiagram != eInternalContainer () || (eContainerFeatureID != GMFGenPackage.GEN_TOP_LEVEL_NODE__DIAGRAM && newDiagram != null)) {
>             if (EcoreUtil.isAncestor (this, newDiagram)) throw new IllegalArgumentException ("Recursive containment not allowed for " + toString ());
> 
>             NotificationChain msgs = null;
>             if (eInternalContainer () != null) msgs = eBasicRemoveFromContainer (msgs);
> 
>             if (newDiagram != null) msgs = ((InternalEObject) newDiagram).eInverseAdd (this, GMFGenPackage.GEN_DIAGRAM__TOP_LEVEL_NODES, GenDiagram.class, msgs);
> 
>             msgs = basicSetDiagram (newDiagram, msgs);
>             if (msgs != null) msgs.dispatch ();
> 
>         } else if (eNotificationRequired ()) eNotify (new ENotificationImpl (this, Notification.SET, GMFGenPackage.GEN_TOP_LEVEL_NODE__DIAGRAM, newDiagram, newDiagram));
> 
>     }
> 
38c65
<                 return eBasicSetContainer (otherEnd, GMFGenPackage.GEN_TOP_LEVEL_NODE__DIAGRAM, msgs);
---
>                 return basicSetDiagram ((GenDiagram) otherEnd, msgs);
47c74
<                 return eBasicSetContainer (null, GMFGenPackage.GEN_TOP_LEVEL_NODE__DIAGRAM, msgs);
---
>                 return basicSetDiagram (null, msgs);
70a98,117
>     public void eSet (int featureID, Object newValue) {
>         switch (featureID) {
>             case GMFGenPackage.GEN_TOP_LEVEL_NODE__DIAGRAM :
>                 setDiagram ((GenDiagram) newValue);
>                 return;
>         }
>         super.eSet (featureID, newValue);
>     }
> 
>     @Override
>     public void eUnset (int featureID) {
>         switch (featureID) {
>             case GMFGenPackage.GEN_TOP_LEVEL_NODE__DIAGRAM :
>                 setDiagram ((GenDiagram) null);
>                 return;
>         }
>         super.eUnset (featureID);
>     }
> 
>     @Override
