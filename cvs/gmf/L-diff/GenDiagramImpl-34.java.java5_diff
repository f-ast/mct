31,32d30
< import org.eclipse.emf.ecore.EStructuralFeature;
< 
61,62d58
< import org.eclipse.gmf.codegen.gmfgen.Viewmap;
< 
159,160c155,156
<             GenPackage oldDomainMetaModel = domainMetaModel;
<             domainMetaModel = (GenPackage) eResolveProxy ((InternalEObject) domainMetaModel);
---
>             InternalEObject oldDomainMetaModel = (InternalEObject) domainMetaModel;
>             domainMetaModel = (GenPackage) eResolveProxy (oldDomainMetaModel);
182,183c178,179
<             GenClass oldDomainDiagramElement = domainDiagramElement;
<             domainDiagramElement = (GenClass) eResolveProxy ((InternalEObject) domainDiagramElement);
---
>             InternalEObject oldDomainDiagramElement = (InternalEObject) domainDiagramElement;
>             domainDiagramElement = (GenClass) eResolveProxy (oldDomainDiagramElement);
992,1134c988,989
<     public boolean hasLinkCreationConstraints () {
<         for (Iterator it = getLinks ().iterator ();
<         it.hasNext ();) {
<             GenLink nextLink = (GenLink) it.next ();
<             if (nextLink.getCreationConstraints () != null) {
<                 return true;
<             }
<         }
<         return false;
<     }
< 
<     public String getLinkCreationConstraintsClassName () {
<         return "LinkConstraints";
<     }
< 
<     public String getLinkCreationConstraintsQualifiedClassName () {
<         String owningClass = getBaseItemSemanticEditPolicyQualifiedClassName ();
<         if (owningClass != null) {
<             return owningClass + "." + getLinkCreationConstraintsClassName ();
<         }
<         return getLinkCreationConstraintsClassName ();
<     }
< 
<     public String getEditorQualifiedClassName () {
<         return getEditorPackageName () + '.' + getEditorClassName ();
<     }
< 
<     public String getReorientConnectionViewCommandQualifiedClassName () {
<         return getEditCommandsPackageName () + '.' + getReorientConnectionViewCommandClassName ();
<     }
< 
<     public String getEditPartFactoryQualifiedClassName () {
<         return getEditPartsPackageName () + '.' + getEditPartFactoryClassName ();
<     }
< 
<     public String getBaseItemSemanticEditPolicyQualifiedClassName () {
<         return getEditPoliciesPackageName () + '.' + getBaseItemSemanticEditPolicyClassName ();
<     }
< 
<     public String getBaseGraphicalNodeEditPolicyQualifiedClassName () {
<         return getEditPoliciesPackageName () + '.' + getBaseGraphicalNodeEditPolicyClassName ();
<     }
< 
<     public String getReferenceConnectionEditPolicyQualifiedClassName () {
<         return getEditPoliciesPackageName () + '.' + getReferenceConnectionEditPolicyClassName ();
<     }
< 
<     public String getCanonicalEditPolicyQualifiedClassName () {
<         return getEditPoliciesPackageName () + '.' + getCanonicalEditPolicyClassName ();
<     }
< 
<     public String getElementTypesQualifiedClassName () {
<         return getProvidersPackageName () + '.' + getElementTypesClassName ();
<     }
< 
<     public String getSemanticHintsQualifiedClassName () {
<         return getProvidersPackageName () + '.' + getSemanticHintsClassName ();
<     }
< 
<     public String getNotationViewProviderQualifiedClassName () {
<         return getProvidersPackageName () + '.' + getNotationViewProviderClassName ();
<     }
< 
<     public String [] getRequiredPluginIDs () {
<         ArrayList requiredPlugins = new ArrayList ();
<         if (usesSVGShapes ()) {
<             requiredPlugins.add ("org.eclipse.gmf.diagramrt.gefsvg");
<         }
<         requiredPlugins.addAll (getExpressionsRequiredPluginIDs ());
<         return (String []) requiredPlugins.toArray (new String [requiredPlugins.size ()]);
<     }
< 
<     public String getInitDiagramFileActionQualifiedClassName () {
<         return getEditorPackageName () + '.' + getInitDiagramFileActionClassName ();
<     }
< 
<     public String getEditPartProviderQualifiedClassName () {
<         return getProvidersPackageName () + '.' + getEditPartProviderClassName ();
<     }
< 
<     public String getMetamodelSupportProviderQualifiedClassName () {
<         return getProvidersPackageName () + '.' + getMetamodelSupportProviderClassName ();
<     }
< 
<     public String getModelingAssistantProviderQualifiedClassName () {
<         return getProvidersPackageName () + '.' + getModelingAssistantProviderClassName ();
<     }
< 
<     public String getPropertyProviderQualifiedClassName () {
<         return getProvidersPackageName () + '.' + getPropertyProviderClassName ();
<     }
< 
<     public String getIconProviderQualifiedClassName () {
<         return getProvidersPackageName () + '.' + getIconProviderClassName ();
<     }
< 
<     public String getStructuralFeatureParserQualifiedClassName () {
<         return getProvidersPackageName () + '.' + getStructuralFeatureParserClassName ();
<     }
< 
<     public String getActionBarContributorQualifiedClassName () {
<         return getEditorPackageName () + '.' + getActionBarContributorClassName ();
<     }
< 
<     public String getCreationWizardQualifiedClassName () {
<         return getEditorPackageName () + '.' + getCreationWizardClassName ();
<     }
< 
<     public String getCreationWizardPageQualifiedClassName () {
<         return getEditorPackageName () + '.' + getCreationWizardPageClassName ();
<     }
< 
<     public String getDiagramEditorUtilQualifiedClassName () {
<         return getEditorPackageName () + '.' + getDiagramEditorUtilClassName ();
<     }
< 
<     public String getDiagramFileCreatorQualifiedClassName () {
<         return getEditorPackageName () + '.' + getDiagramFileCreatorClassName ();
<     }
< 
<     public String getDocumentProviderQualifiedClassName () {
<         return getEditorPackageName () + '.' + getDocumentProviderClassName ();
<     }
< 
<     public String getMatchingStrategyQualifiedClassName () {
<         return getEditorPackageName () + '.' + getMatchingStrategyClassName ();
<     }
< 
<     public String getElementInitializersClassName () {
<         return "ElementInitializers";
<     }
< 
<     public String getElementInitializersPackageName () {
<         return getProvidersPackageName ();
<     }
< 
<     private boolean usesSVGShapes () {
<         return false;
<     }
< 
<     public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
<         if (featureID >= 0) {
<             switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
---
>     public NotificationChain eInverseAdd (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
>         switch (featureID) {
1143,1144d997
<                 default :
<                     return eDynamicInverseAdd (otherEnd, featureID, baseClass, msgs);
1146,1149c999
<         }
<         if (eContainer != null) msgs = eBasicRemoveFromContainer (msgs);
< 
<         return eBasicSetContainer (otherEnd, featureID, msgs);
---
>         return super.eInverseAdd (otherEnd, featureID, msgs);
1152,1156c1002,1003
<     public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
<         if (featureID >= 0) {
<             switch (eDerivedStructuralFeatureID (featureID, baseClass)) {
<                 case GMFGenPackage.GEN_DIAGRAM__VIEWMAP :
<                     return basicSetViewmap (null, msgs);
---
>     public NotificationChain eInverseRemove (InternalEObject otherEnd, int featureID, NotificationChain msgs) {
>         switch (featureID) {
1163,1164d1009
<                 default :
<                     return eDynamicInverseRemove (otherEnd, featureID, baseClass, msgs);
1166,1167c1011
<         }
<         return eBasicSetContainer (null, featureID, msgs);
---
>         return super.eInverseRemove (otherEnd, featureID, msgs);
1170,1185c1014,1015
<     public Object eGet (EStructuralFeature eFeature, boolean resolve) {
<         switch (eDerivedStructuralFeatureID (eFeature)) {
<             case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_RUN_TIME_CLASS :
<                 if (resolve) return getDiagramRunTimeClass ();
< 
<                 return basicGetDiagramRunTimeClass ();
<             case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID :
<                 return new Integer (getVisualID ());
<             case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_CLASS_NAME :
<                 return getEditPartClassName ();
<             case GMFGenPackage.GEN_DIAGRAM__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
<                 return getItemSemanticEditPolicyClassName ();
<             case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORY_CLASS_NAME :
<                 return getNotationViewFactoryClassName ();
<             case GMFGenPackage.GEN_DIAGRAM__VIEWMAP :
<                 return getViewmap ();
---
>     public Object eGet (int featureID, boolean resolve, boolean coreType) {
>         switch (featureID) {
1279c1109
<         return eDynamicGet (eFeature, resolve);
---
>         return super.eGet (featureID, resolve, coreType);
1282,1301c1112,1113
<     public void eSet (EStructuralFeature eFeature, Object newValue) {
<         switch (eDerivedStructuralFeatureID (eFeature)) {
<             case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_RUN_TIME_CLASS :
<                 setDiagramRunTimeClass ((GenClass) newValue);
<                 return;
<             case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID :
<                 setVisualID (((Integer) newValue).intValue ());
<                 return;
<             case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_CLASS_NAME :
<                 setEditPartClassName ((String) newValue);
<                 return;
<             case GMFGenPackage.GEN_DIAGRAM__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
<                 setItemSemanticEditPolicyClassName ((String) newValue);
<                 return;
<             case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORY_CLASS_NAME :
<                 setNotationViewFactoryClassName ((String) newValue);
<                 return;
<             case GMFGenPackage.GEN_DIAGRAM__VIEWMAP :
<                 setViewmap ((Viewmap) newValue);
<                 return;
---
>     public void eSet (int featureID, Object newValue) {
>         switch (featureID) {
1437c1249
<         eDynamicSet (eFeature, newValue);
---
>         super.eSet (featureID, newValue);
1440,1459c1252,1253
<     public void eUnset (EStructuralFeature eFeature) {
<         switch (eDerivedStructuralFeatureID (eFeature)) {
<             case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_RUN_TIME_CLASS :
<                 setDiagramRunTimeClass ((GenClass) null);
<                 return;
<             case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID :
<                 setVisualID (VISUAL_ID_EDEFAULT);
<                 return;
<             case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_CLASS_NAME :
<                 setEditPartClassName (EDIT_PART_CLASS_NAME_EDEFAULT);
<                 return;
<             case GMFGenPackage.GEN_DIAGRAM__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
<                 setItemSemanticEditPolicyClassName (ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
<                 return;
<             case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORY_CLASS_NAME :
<                 setNotationViewFactoryClassName (NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
<                 return;
<             case GMFGenPackage.GEN_DIAGRAM__VIEWMAP :
<                 setViewmap ((Viewmap) null);
<                 return;
---
>     public void eUnset (int featureID) {
>         switch (featureID) {
1593c1387
<         eDynamicUnset (eFeature);
---
>         super.eUnset (featureID);
1596,1609c1390,1391
<     public boolean eIsSet (EStructuralFeature eFeature) {
<         switch (eDerivedStructuralFeatureID (eFeature)) {
<             case GMFGenPackage.GEN_DIAGRAM__DIAGRAM_RUN_TIME_CLASS :
<                 return diagramRunTimeClass != null;
<             case GMFGenPackage.GEN_DIAGRAM__VISUAL_ID :
<                 return visualID != VISUAL_ID_EDEFAULT;
<             case GMFGenPackage.GEN_DIAGRAM__EDIT_PART_CLASS_NAME :
<                 return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : ! EDIT_PART_CLASS_NAME_EDEFAULT.equals (editPartClassName);
<             case GMFGenPackage.GEN_DIAGRAM__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME :
<                 return ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? itemSemanticEditPolicyClassName != null : ! ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals (itemSemanticEditPolicyClassName);
<             case GMFGenPackage.GEN_DIAGRAM__NOTATION_VIEW_FACTORY_CLASS_NAME :
<                 return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : ! NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals (notationViewFactoryClassName);
<             case GMFGenPackage.GEN_DIAGRAM__VIEWMAP :
<                 return viewmap != null;
---
>     public boolean eIsSet (int featureID) {
>         switch (featureID) {
1699c1481,1621
<         return eDynamicIsSet (eFeature);
---
>         return super.eIsSet (featureID);
>     }
> 
>     public boolean hasLinkCreationConstraints () {
>         for (Iterator it = getLinks ().iterator ();
>         it.hasNext ();) {
>             GenLink nextLink = (GenLink) it.next ();
>             if (nextLink.getCreationConstraints () != null) {
>                 return true;
>             }
>         }
>         return false;
>     }
> 
>     public String getLinkCreationConstraintsClassName () {
>         return "LinkConstraints";
>     }
> 
>     public String getLinkCreationConstraintsQualifiedClassName () {
>         String owningClass = getBaseItemSemanticEditPolicyQualifiedClassName ();
>         if (owningClass != null) {
>             return owningClass + "." + getLinkCreationConstraintsClassName ();
>         }
>         return getLinkCreationConstraintsClassName ();
>     }
> 
>     public String getEditorQualifiedClassName () {
>         return getEditorPackageName () + '.' + getEditorClassName ();
>     }
> 
>     public String getReorientConnectionViewCommandQualifiedClassName () {
>         return getEditCommandsPackageName () + '.' + getReorientConnectionViewCommandClassName ();
>     }
> 
>     public String getEditPartFactoryQualifiedClassName () {
>         return getEditPartsPackageName () + '.' + getEditPartFactoryClassName ();
>     }
> 
>     public String getBaseItemSemanticEditPolicyQualifiedClassName () {
>         return getEditPoliciesPackageName () + '.' + getBaseItemSemanticEditPolicyClassName ();
>     }
> 
>     public String getBaseGraphicalNodeEditPolicyQualifiedClassName () {
>         return getEditPoliciesPackageName () + '.' + getBaseGraphicalNodeEditPolicyClassName ();
>     }
> 
>     public String getReferenceConnectionEditPolicyQualifiedClassName () {
>         return getEditPoliciesPackageName () + '.' + getReferenceConnectionEditPolicyClassName ();
>     }
> 
>     public String getCanonicalEditPolicyQualifiedClassName () {
>         return getEditPoliciesPackageName () + '.' + getCanonicalEditPolicyClassName ();
>     }
> 
>     public String getElementTypesQualifiedClassName () {
>         return getProvidersPackageName () + '.' + getElementTypesClassName ();
>     }
> 
>     public String getSemanticHintsQualifiedClassName () {
>         return getProvidersPackageName () + '.' + getSemanticHintsClassName ();
>     }
> 
>     public String getNotationViewProviderQualifiedClassName () {
>         return getProvidersPackageName () + '.' + getNotationViewProviderClassName ();
>     }
> 
>     public String [] getRequiredPluginIDs () {
>         ArrayList requiredPlugins = new ArrayList ();
>         if (usesSVGShapes ()) {
>             requiredPlugins.add ("org.eclipse.gmf.diagramrt.gefsvg");
>         }
>         requiredPlugins.addAll (getExpressionsRequiredPluginIDs ());
>         return (String []) requiredPlugins.toArray (new String [requiredPlugins.size ()]);
>     }
> 
>     public String getInitDiagramFileActionQualifiedClassName () {
>         return getEditorPackageName () + '.' + getInitDiagramFileActionClassName ();
>     }
> 
>     public String getEditPartProviderQualifiedClassName () {
>         return getProvidersPackageName () + '.' + getEditPartProviderClassName ();
>     }
> 
>     public String getMetamodelSupportProviderQualifiedClassName () {
>         return getProvidersPackageName () + '.' + getMetamodelSupportProviderClassName ();
>     }
> 
>     public String getModelingAssistantProviderQualifiedClassName () {
>         return getProvidersPackageName () + '.' + getModelingAssistantProviderClassName ();
>     }
> 
>     public String getPropertyProviderQualifiedClassName () {
>         return getProvidersPackageName () + '.' + getPropertyProviderClassName ();
>     }
> 
>     public String getIconProviderQualifiedClassName () {
>         return getProvidersPackageName () + '.' + getIconProviderClassName ();
>     }
> 
>     public String getStructuralFeatureParserQualifiedClassName () {
>         return getProvidersPackageName () + '.' + getStructuralFeatureParserClassName ();
>     }
> 
>     public String getActionBarContributorQualifiedClassName () {
>         return getEditorPackageName () + '.' + getActionBarContributorClassName ();
>     }
> 
>     public String getCreationWizardQualifiedClassName () {
>         return getEditorPackageName () + '.' + getCreationWizardClassName ();
>     }
> 
>     public String getCreationWizardPageQualifiedClassName () {
>         return getEditorPackageName () + '.' + getCreationWizardPageClassName ();
>     }
> 
>     public String getDiagramEditorUtilQualifiedClassName () {
>         return getEditorPackageName () + '.' + getDiagramEditorUtilClassName ();
>     }
> 
>     public String getDiagramFileCreatorQualifiedClassName () {
>         return getEditorPackageName () + '.' + getDiagramFileCreatorClassName ();
>     }
> 
>     public String getDocumentProviderQualifiedClassName () {
>         return getEditorPackageName () + '.' + getDocumentProviderClassName ();
>     }
> 
>     public String getMatchingStrategyQualifiedClassName () {
>         return getEditorPackageName () + '.' + getMatchingStrategyClassName ();
>     }
> 
>     public String getElementInitializersClassName () {
>         return "ElementInitializers";
>     }
> 
>     public String getElementInitializersPackageName () {
>         return getProvidersPackageName ();
>     }
> 
>     private boolean usesSVGShapes () {
>         return false;
