10a11,12
> import org.eclipse.core.commands.ExecutionException;
> 
15,19c17
< import org.eclipse.emf.ecore.EObject;
< 
< import org.eclipse.gef.commands.Command;
< 
< import org.eclipse.jface.viewers.IStructuredSelection;
---
> import org.eclipse.core.runtime.IStatus;
21c19
< import org.eclipse.jface.viewers.StructuredSelection;
---
> import org.eclipse.core.runtime.Status;
23c21
< import org.eclipse.ui.IObjectActionDelegate;
---
> import org.eclipse.emf.ecore.EObject;
25c23
< import org.eclipse.ui.IWorkbenchPart;
---
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
27c25
< import org.eclipse.ui.IWorkbenchWindowActionDelegate;
---
> import org.eclipse.emf.transaction.util.TransactionUtil;
29c27
< import org.eclipse.gmf.runtime.common.core.command.CommandResult;
---
> import org.eclipse.gef.commands.Command;
33c31
< import org.eclipse.gmf.runtime.diagram.core.internal.services.semantic.DuplicateElementsRequest;
---
> import org.eclipse.gmf.runtime.common.core.util.Log;
35c33
< import org.eclipse.gmf.runtime.diagram.core.internal.services.semantic.SemanticService;
---
> import org.eclipse.gmf.runtime.common.core.util.Trace;
40a39,44
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
> 
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
> 
46a51,56
> import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
> 
> import org.eclipse.gmf.runtime.emf.type.core.IElementType;
> 
> import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;
> 
50a61,70
> import org.eclipse.jface.viewers.IStructuredSelection;
> 
> import org.eclipse.jface.viewers.StructuredSelection;
> 
> import org.eclipse.ui.IObjectActionDelegate;
> 
> import org.eclipse.ui.IWorkbenchPart;
> 
> import org.eclipse.ui.IWorkbenchWindowActionDelegate;
> 
60c80
<             request = new DuplicateElementsRequest ();
---
>             request = new DuplicateElementsRequest (getEditingDomain (getStructuredSelection ()));
63,67c83,87
<         if (cmd != null && cmd.isExecutable ());
< 
<         {
<             CommandResult result = getCommandManager ().execute (cmd);
<             if (result.getStatus ().isOK ()) {
---
>         if (cmd != null && cmd.canExecute ()) {
>             try {
>                 IStatus status = cmd.execute (progressMonitor, null);
>                 setStatus (status);
>                 if (status.isOK ()) {
73c93,100
<         }}
---
>             } catch (ExecutionException e) {
>                 IStatus status = new Status (Status.ERROR, DiagramUIPlugin.getPluginId (), DiagramUIStatusCodes.COMMAND_FAILURE, e.getLocalizedMessage (), e);
>                 setStatus (status);
>                 Trace.catching (DiagramUIPlugin.getInstance (), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass (), "doRun", e);
>                 Log.error (DiagramUIPlugin.getInstance (), DiagramUIStatusCodes.COMMAND_FAILURE, e.getLocalizedMessage (), e);
>             }
>         }
>     }
76,77c103,104
<         ICommand cmd = (workbenchPart instanceof IDiagramWorkbenchPart) ? getDuplicateViewCommand (selection, workbenchPart, new DuplicateRequest ()) : getDuplicateElementsCommand (selection, new DuplicateElementsRequest ());
<         return (cmd != null && cmd.isExecutable ());
---
>         ICommand cmd = (workbenchPart instanceof IDiagramWorkbenchPart) ? getDuplicateViewCommand (selection, workbenchPart, new DuplicateRequest ()) : getDuplicateElementsCommand (selection, new DuplicateElementsRequest (getEditingDomain (selection)));
>         return (cmd != null && cmd.canExecute ());
91c118,121
<             return SemanticService.getInstance ().getCommand (request);
---
>             IElementType elementType = ElementTypeRegistry.getInstance ().getElementType (request.getEditHelperContext ());
>             if (elementType != null) {
>                 return elementType.getEditCommand (request);
>             }
134a165,182
>     public static TransactionalEditingDomain getEditingDomain (IStructuredSelection selection) {
>         for (Iterator i = selection.iterator ();
>         i.hasNext ();) {
>             EObject element = (EObject) ((IAdaptable) i.next ()).getAdapter (EObject.class);
>             if (element != null) {
>                 TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain (element);
>                 if (editingDomain != null) {
>                     return editingDomain;
>                 }
>             }
>         }
>         return null;
>     }
> 
>     protected TransactionalEditingDomain getEditingDomain () {
>         return getEditingDomain (getStructuredSelection ());
>     }
> 
