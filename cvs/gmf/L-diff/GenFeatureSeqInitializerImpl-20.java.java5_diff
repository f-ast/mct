3,4d2
< import java.util.ArrayList;
< 
7,12d4
< import java.util.Collections;
< 
< import java.util.LinkedHashSet;
< 
< import java.util.List;
< 
19,20d10
< import org.eclipse.emf.common.util.BasicEList;
< 
39,40d28
< import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
< 
45,48d32
< import org.eclipse.gmf.codegen.gmfgen.GenFeatureValueSpec;
< 
< import org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider;
< 
53,54d36
< import org.eclipse.gmf.common.codegen.ImportAssistant;
< 
132,162d113
<     public List < GenFeatureSeqInitializer > getAllFeatureSeqInitializers () {
<         List < GenFeatureSeqInitializer > result = new ArrayList < GenFeatureSeqInitializer > ();
<         result.add (this);
<         for (GenFeatureInitializer nextFeatureInit : getInitializers ()) {
<             result.addAll (nextFeatureInit.getAllFeatureSeqInitializers ());
<         }
<         return Collections.unmodifiableList (result);
<     }
< 
<     public String getElementClassAccessorName () {
<         GenClass genClass = getElementClass ();
<         return (genClass != null) ? genClass.getClassifierAccessorName () : null;
<     }
< 
<     public String getElementQualifiedPackageInterfaceName () {
<         GenClass genClass = getElementClass ();
<         return (genClass != null) ? genClass.getGenPackage ().getQualifiedPackageInterfaceName () : null;
<     }
< 
<     public String getElementClassAccessor () {
<         return getElementClassAccessor (null);
<     }
< 
<     public String getFeatureAccessor (GenFeatureInitializer ftInitializer) {
<         return getFeatureAccessor (ftInitializer, null);
<     }
< 
<     public EList < GenFeatureValueSpec > getJavaExpressionFeatureInitializersList (GenExpressionProviderContainer expressionProviders) {
<         return new BasicEList < GenFeatureValueSpec > (getJavaExpressionFeatureInitializers (expressionProviders));
<     }
< 
283,323d233
<     public String getElementClassAccessor (ImportAssistant importAssistant) {
<         if (getElementClass () == null) {
<             return "";
<         }
<         StringBuffer buf = new StringBuffer ();
<         buf.append (getElementQualifiedPackageInterfaceName ()).append (".eINSTANCE.get").append (getElementClass ().getClassifierAccessorName ()).append ("()");
<         return buf.toString ();
<     }
< 
<     public String getFeatureAccessor (GenFeatureInitializer featureInitializer, ImportAssistant importAssistant) {
<         if (featureInitializer.getFeature () == null) {
<             return "";
<         }
<         StringBuffer buf = new StringBuffer ();
<         String fqn = featureInitializer.getFeatureQualifiedPackageInterfaceName ();
<         if (importAssistant != null) {
<             fqn = importAssistant.getImportedName (fqn);
<         }
<         buf.append (fqn).append (".eINSTANCE.get").append (featureInitializer.getFeature ().getFeatureAccessorName ()).append ("()");
<         return buf.toString ();
<     }
< 
<     public LinkedHashSet < GenFeatureValueSpec > getJavaExpressionFeatureInitializers (GenExpressionProviderContainer expressionProviders) {
<         LinkedHashSet < GenFeatureValueSpec > result = new LinkedHashSet < GenFeatureValueSpec > ();
<         if (expressionProviders != null) {
<             for (GenFeatureInitializer next : getInitializers ()) {
<                 if (next instanceof GenFeatureValueSpec) {
<                     GenFeatureValueSpec featureValueSpec = (GenFeatureValueSpec) next;
<                     if (expressionProviders.getProvider (featureValueSpec) instanceof GenJavaExpressionProvider && ! expressionProviders.isCopy (featureValueSpec)) {
<                         result.add (featureValueSpec);
<                     }
<                 } else {
<                     for (GenFeatureSeqInitializer ftSeqInitializer : next.getAllFeatureSeqInitializers ()) {
<                         result.addAll (ftSeqInitializer.getJavaExpressionFeatureInitializers (expressionProviders));
<                     }
<                 }
<             }
<         }
<         return result;
<     }
< 
