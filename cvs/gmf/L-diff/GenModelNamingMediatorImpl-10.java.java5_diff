2a3,4
> import org.eclipse.emf.ecore.EObject;
> 
22a25,28
> import org.eclipse.gmf.codegen.gmfgen.MetamodelType;
> 
> import org.eclipse.gmf.codegen.gmfgen.SpecializationType;
> 
48a55,56
>     private NamingStrategy myEditHelper;
>     private NamingStrategy myEditHelperAdvice;
60a69,70
>         setEditHelper (new ClassNameStrategy (MetamodelType.EDIT_HELPER_SUFFIX, null, dispenser));
>         setEditHelperAdvice (new ClassNameStrategy (SpecializationType.EDIT_HELPER_ADVICE_SUFFIX, null, dispenser));
110a121,136
>     public void setEditHelper (NamingStrategy editHelper) {
>         this.myEditHelper = editHelper;
>     }
> 
>     public NamingStrategy getEditHelper () {
>         return myEditHelper;
>     }
> 
>     public void setEditHelperAdvice (NamingStrategy editHelperAdvice) {
>         this.myEditHelperAdvice = editHelperAdvice;
>     }
> 
>     public NamingStrategy getEditHelperAdvice () {
>         return myEditHelperAdvice;
>     }
> 
112a139
>         myDispenser.add (genDiagram.getBaseExternalNodeLabelEditPartClassName ());
113a141
>         myDispenser.add (genDiagram.getBaseItemSemanticEditPolicyClassName ());
116c144,146
<         getNodeGraphicalPolicy ().getNamesDispenser ().add (genDiagram.getBaseGraphicalNodeEditPolicyClassName ());
---
>         myDispenser.add (genDiagram.getBaseGraphicalNodeEditPolicyClassName ());
>         myDispenser.add (genDiagram.getBaseEditHelperClassName ());
>         feedElementType (genDiagram, cme);
124a155
>         feedElementType (genNode, nme);
132a164
>         feedElementType (childNode, nme);
138a171
>         feedElementType (genLink, lme);
151a185
>         feedElementType (label, labelMapping);
157a192
>         feedElementType (label, labelMapping);
165a201,227
>     protected void feedElementType (GenCommonBase element, EObject mapping) {
>         if (element.getElementType () instanceof MetamodelType) {
>             MetamodelType type = (MetamodelType) element.getElementType ();
>             type.setEditHelperClassName (getName (getEditHelper (), mapping));
>         } else if (element.getElementType () instanceof SpecializationType) {
>             SpecializationType type = (SpecializationType) element.getElementType ();
>             type.setEditHelperAdviceClassName (getName (getEditHelperAdvice (), mapping));
>         }
> 
>     }
> 
>     protected static String getName (NamingStrategy strategy, EObject mapping) {
>         if (mapping instanceof CanvasMapping) {
>             return strategy.get ((CanvasMapping) mapping);
>         } else if (mapping instanceof NodeMapping) {
>             return strategy.get ((NodeMapping) mapping);
>         } else if (mapping instanceof LinkMapping) {
>             return strategy.get ((LinkMapping) mapping);
>         } else if (mapping instanceof CompartmentMapping) {
>             return strategy.get ((CompartmentMapping) mapping);
>         } else if (mapping instanceof LabelMapping) {
>             return strategy.get ((LabelMapping) mapping);
>         }
> 
>         throw new IllegalArgumentException ();
>     }
> 
