1c1
< package org.eclipse.gmf.internal.graphdef.codegen;
---
> package org.eclipse.gmf.internal.runtime.lite;
3c3
< import java.net.MalformedURLException;
---
> import org.eclipse.core.runtime.IStatus;
5c5
< import java.net.URL;
---
> import org.eclipse.core.runtime.Status;
7c7
< import java.util.ArrayList;
---
> import org.eclipse.jface.resource.ImageDescriptor;
9c9
< import org.eclipse.core.runtime.Plugin;
---
> import org.eclipse.jface.resource.ImageRegistry;
11,15c11
< import org.eclipse.gmf.graphdef.codegen.MapModeCodeGenStrategy;
< 
< import org.eclipse.gmf.internal.xpand.ResourceManager;
< 
< import org.eclipse.gmf.internal.xpand.util.BundleResourceManager;
---
> import org.eclipse.ui.plugin.AbstractUIPlugin;
19,20c15,17
< public class Activator extends Plugin {
<     private static Activator instance;
---
> public class Activator extends AbstractUIPlugin {
>     public static final String PLUGIN_ID = "org.eclipse.gmf.runtime.lite";
>     private static Activator plugin;
23c20,24
<         instance = this;
---
>         plugin = this;
>     }
> 
>     public void start (BundleContext context) throws Exception {
>         super.start (context);
26d26
<     @Override
28c28
<         instance = null;
---
>         plugin = null;
32,42c32,37
<     public static ResourceManager createResourceEngine (MapModeCodeGenStrategy strategy) {
<         try {
<             URL baseURL = instance.getBundle ().getEntry ("/templates/");
<             ArrayList < URL > urls = new ArrayList < URL > (3);
<             if (strategy.getToken ().length () > 0) {
<                 urls.add (new URL (baseURL, strategy.getToken () + '/'));
<             }
<             urls.add (baseURL);
<             return new BundleResourceManager (urls.toArray (new URL [urls.size ()]));
<         } catch (MalformedURLException ex) {
<             throw new Error ();
---
>     public static Activator getDefault () {
>         return plugin;
>     }
> 
>     public void logError (String error) {
>         logError (error, null);
43a39,79
> 
>     @Override
>     protected void initializeImageRegistry (ImageRegistry reg) {
>         PluginImages.initialize ();
>         super.initializeImageRegistry (reg);
>     }
> 
>     public void logError (String error, Throwable throwable) {
>         log (error, throwable, IStatus.ERROR);
>     }
> 
>     private void debug (String message, Throwable throwable) {
>         if (! isDebugging ()) {
>             return;
>         }
>         if (message != null) {
>             System.err.println (message);
>         }
>         if (throwable != null) {
>             throwable.printStackTrace ();
>         }
>     }
> 
>     public void logWarning (String error) {
>         logWarning (error, null);
>     }
> 
>     public void logWarning (String error, Throwable throwable) {
>         log (error, throwable, IStatus.WARNING);
>     }
> 
>     private void log (String error, Throwable throwable, int severity) {
>         if (error == null && throwable != null) {
>             error = throwable.getMessage ();
>         }
>         getLog ().log (new Status (severity, getBundle ().getSymbolicName (), IStatus.OK, error, throwable));
>         debug (error, throwable);
>     }
> 
>     public static ImageDescriptor getImageDescriptor (String imageFilePath) {
>         return imageDescriptorFromPlugin (getDefault ().getBundle ().getSymbolicName (), imageFilePath);
