50a51,54
> import org.eclipse.emf.common.ui.URIEditorInput;
> 
> import org.eclipse.emf.ecore.EObject;
> 
66a71,72
> import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider;
> 
80a87,88
> import org.eclipse.gmf.runtime.emf.core.resources.GMFResourceFactory;
> 
82a91,92
> import org.eclipse.jface.operation.IRunnableContext;
> 
93c103
< public class GMFGraphDocumentProvider extends StorageDocumentProvider implements IDiagramDocumentProvider {
---
> public class GMFGraphDocumentProvider extends AbstractDocumentProvider implements IDiagramDocumentProvider {
95,97c105,107
<     protected ElementInfo createElementInfo (Object element) throws CoreException {
<         if (false == element instanceof FileEditorInput) {
<             throw new CoreException (new Status (IStatus.ERROR, GMFGraphDiagramEditorPlugin.ID, 0, "Incorrect element used: " + element + " instead of org.eclipse.ui.part.FileEditorInput", null));
---
>     protected ElementInfo createElementInfo (Object element) throws org.eclipse.core.runtime.CoreException, CoreException {
>         if (false == element instanceof FileEditorInput && false == element instanceof URIEditorInput) {
>             throw new CoreException (new Status (IStatus.ERROR, GMFGraphDiagramEditorPlugin.ID, 0, "Incorrect element used: " + element + " instead of org.eclipse.ui.part.FileEditorInput or org.eclipse.emf.common.ui.URIEditorInput", null));
99c109
<         FileEditorInput editorInput = (FileEditorInput) element;
---
>         IEditorInput editorInput = (IEditorInput) element;
104,105d113
<         ResourceSetModificationListener modificationListener = new ResourceSetModificationListener (info);
<         info.getResourceSet ().eAdapters ().add (modificationListener);
108a117,129
>     protected IDocument createDocument (Object element) throws CoreException {
>         if (false == element instanceof FileEditorInput && false == element instanceof URIEditorInput) {
>             throw new CoreException (new Status (IStatus.ERROR, GMFGraphDiagramEditorPlugin.ID, 0, "Incorrect element used: " + element + " instead of org.eclipse.ui.part.FileEditorInput or org.eclipse.emf.common.ui.URIEditorInput", null));
>         }
>         IDocument document = createEmptyDocument ();
>         setDocumentContent (document, (IEditorInput) element);
>         setupDocument (element, document);
>         return document;
>     }
> 
>     protected void setupDocument (Object element, IDocument document) {
>     }
> 
132,133c153,154
<     private TransactionalEditingDomain createEditingDomain () {
<         TransactionalEditingDomain editingDomain = DiagramEditingDomainFactory.getInstance ().createEditingDomain ();
---
>     private org.eclipse.emf.transaction.TransactionalEditingDomain createEditingDomain () {
>         org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.gmf.runtime.diagram.core.DiagramEditingDomainFactory.getInstance ().createEditingDomain ();
135,137c156,158
<         final NotificationFilter diagramResourceModifiedFilter = NotificationFilter.createNotifierFilter (editingDomain.getResourceSet ()).and (NotificationFilter.createEventTypeFilter (Notification.ADD)).and (NotificationFilter.createFeatureFilter (ResourceSet.class, ResourceSet.RESOURCE_SET__RESOURCES));
<         editingDomain.getResourceSet ().eAdapters ().add (new Adapter () {
<             private Notifier myTarger;
---
>         final org.eclipse.emf.transaction.NotificationFilter diagramResourceModifiedFilter = org.eclipse.emf.transaction.NotificationFilter.createNotifierFilter (editingDomain.getResourceSet ()).and (org.eclipse.emf.transaction.NotificationFilter.createEventTypeFilter (org.eclipse.emf.common.notify.Notification.ADD)).and (org.eclipse.emf.transaction.NotificationFilter.createFeatureFilter (org.eclipse.emf.ecore.resource.ResourceSet.class, org.eclipse.emf.ecore.resource.ResourceSet.RESOURCE_SET__RESOURCES));
>         editingDomain.getResourceSet ().eAdapters ().add (new org.eclipse.emf.common.notify.Adapter () {
>             private org.eclipse.emf.common.notify.Notifier myTarger;
139c160
<             public Notifier getTarget () {
---
>             public org.eclipse.emf.common.notify.Notifier getTarget () {
147c168
<             public void notifyChanged (Notification notification) {
---
>             public void notifyChanged (org.eclipse.emf.common.notify.Notification notification) {
150,151c171,172
<                     if (value instanceof Resource) {
<                         ((Resource) value).setTrackingModification (true);
---
>                     if (value instanceof org.eclipse.emf.ecore.resource.Resource) {
>                         ((org.eclipse.emf.ecore.resource.Resource) value).setTrackingModification (true);
156c177
<             public void setTarget (Notifier newTarget) {
---
>             public void setTarget (org.eclipse.emf.common.notify.Notifier newTarget) {
166c187
<     protected void setDocumentContentFromStorage (IDocument document, IStorage storage) throws CoreException {
---
>     protected void setDocumentContent (IDocument document, IEditorInput element) throws CoreException {
168a190,191
>         if (element instanceof FileEditorInput) {
>             IStorage storage = ((FileEditorInput) element).getStorage ();
170a194,244
>         } else if (element instanceof URIEditorInput) {
>             org.eclipse.emf.common.util.URI uri = ((URIEditorInput) element).getURI ();
>             Resource resource = null;
>             try {
>                 resource = domain.getResourceSet ().getResource (uri.trimFragment (), false);
>                 if (resource == null) {
>                     resource = domain.getResourceSet ().createResource (uri.trimFragment ());
>                 }
>                 if (! resource.isLoaded ()) {
>                     try {
>                         Map options = new HashMap (GMFResourceFactory.getDefaultLoadOptions ());
>                         resource.load (options);
>                     } catch (IOException e) {
>                         resource.unload ();
>                         throw e;
>                     }
>                 }
>                 if (resource == null) {
>                     throw new RuntimeException ("Unable to load diagram resource");
>                 }
>                 if (uri.fragment () != null) {
>                     EObject rootElement = resource.getEObject (uri.fragment ());
>                     if (rootElement instanceof Diagram) {
>                         document.setContent ((Diagram) rootElement);
>                         return;
>                     }
>                 } else {
>                     for (Iterator it = resource.getContents ().iterator ();
>                     it.hasNext ();) {
>                         Object rootElement = it.next ();
>                         if (rootElement instanceof Diagram) {
>                             document.setContent ((Diagram) rootElement);
>                             return;
>                         }
>                     }
>                 }
>                 throw new RuntimeException ("Diagram is not present in resource");
>             } catch (Exception e) {
>                 CoreException thrownExcp = null;
>                 if (e instanceof CoreException) {
>                     thrownExcp = (CoreException) e;
>                 } else {
>                     String msg = e.getLocalizedMessage ();
>                     thrownExcp = new CoreException (new Status (IStatus.ERROR, GMFGraphDiagramEditorPlugin.ID, 0, msg != null ? msg : "Error loading diagram", e));
>                 }
>                 throw thrownExcp;
>             }
>         } else {
>             throw new CoreException (new Status (IStatus.ERROR, GMFGraphDiagramEditorPlugin.ID, 0, "Incorrect element used: " + element + " instead of org.eclipse.ui.part.FileEditorInput or org.eclipse.emf.common.ui.URIEditorInput", null));
>         }
> 
181,188d254
<     public long getSynchronizationStamp (Object element) {
<         ResourceSetInfo info = getResourceSetInfo (element);
<         if (info != null) {
<             return info.getModificationStamp ();
<         }
<         return super.getSynchronizationStamp (element);
<     }
< 
190,194c256,261
<         if (element instanceof IFileEditorInput) {
<             IFileEditorInput input = (IFileEditorInput) element;
<             IPath path = input.getFile ().getLocation ();
<             if (path == null) {
<                 return true;
---
>         IDiagramDocument document = getDiagramDocument (element);
>         if (document != null) {
>             Resource diagramResource = document.getDiagram ().eResource ();
>             if (diagramResource != null) {
>                 IFile file = WorkspaceSynchronizer.getFile (diagramResource);
>                 return file == null || file.getLocation () == null || ! file.getLocation ().toFile ().exists ();
196d262
<             return ! path.toFile ().exists ();
213c279
<     protected void doValidateState (Object element, Object computationContext) throws CoreException {
---
>     protected void doValidateState (Object element, Object computationContext) throws org.eclipse.core.runtime.CoreException, CoreException {
229a296,310
>     public boolean isReadOnly (Object element) {
>         ResourceSetInfo info = getResourceSetInfo (element);
>         if (info != null) {
>             if (info.isUpdateCache ()) {
>                 try {
>                     updateCache (element);
>                 } catch (CoreException ex) {
>                     GMFGraphDiagramEditorPlugin.getInstance ().logError (Messages.DocumentProvider_isModifiable, ex);
>                 }
>             }
>             return info.isReadOnly ();
>         }
>         return super.isReadOnly (element);
>     }
> 
232c313
<             if (element instanceof FileEditorInput) {
---
>             if (element instanceof FileEditorInput || element instanceof URIEditorInput) {
235a317,327
>         ResourceSetInfo info = getResourceSetInfo (element);
>         if (info != null) {
>             if (info.isUpdateCache ()) {
>                 try {
>                     updateCache (element);
>                 } catch (CoreException ex) {
>                     GMFGraphDiagramEditorPlugin.getInstance ().logError (Messages.DocumentProvider_isModifiable, ex);
>                 }
>             }
>             return info.isModifiable ();
>         }
239,240c331,332
<     protected void updateCache (IStorageEditorInput input) throws CoreException {
<         ResourceSetInfo info = getResourceSetInfo (input);
---
>     protected void updateCache (Object element) throws CoreException {
>         ResourceSetInfo info = getResourceSetInfo (element);
247,248c339,340
<                     info.fIsReadOnly = true;
<                     info.fIsModifiable = false;
---
>                     info.setReadOnly (true);
>                     info.setModifiable (false);
252,253c344,345
<             info.fIsReadOnly = false;
<             info.fIsModifiable = true;
---
>             info.setReadOnly (false);
>             info.setModifiable (true);
256c348,355
<         super.updateCache (input);
---
>     }
> 
>     protected void doUpdateStateCache (Object element) throws CoreException {
>         ResourceSetInfo info = getResourceSetInfo (element);
>         if (info != null) {
>             info.setUpdateCache (true);
>         }
>         super.doUpdateStateCache (element);
348c447
<         if (info != null && element instanceof FileEditorInput) {
---
>         if (info != null) {
359,366d457
<     protected void markWholeResourceSetAsDirty (ResourceSet resourceSet) {
<         for (Iterator it = resourceSet.getResources ().iterator ();
<         it.hasNext ();) {
<             Resource nextResource = (Resource) it.next ();
<             nextResource.setModified (true);
<         }
<     }
< 
371c462
<                 throw new CoreException (new Status (IStatus.ERROR, GMFGraphDiagramEditorPlugin.ID, IResourceStatus.OUT_OF_SYNC_LOCAL, "The file has been changed on the file system", null));
---
>                 throw new CoreException (new Status (IStatus.ERROR, GMFGraphDiagramEditorPlugin.ID, IStatus.OK, "The file has been changed on the file system", null));
401,404d491
<             if (info != null) {
<                 info.setModificationStamp (computeModificationStamp (info));
<                 info.setSynchronized ();
<             }
406d492
<         super.doSaveDocument (monitor, element, document, overwrite);
414,415c500,501
<             } catch (CoreException e) {
<                 handleCoreException (e, "FileDocumentProvider.handleElementContentChanged");
---
>             } catch (CoreException ex) {
>                 GMFGraphDiagramEditorPlugin.getInstance ().logError (Messages.DocumentProvider_handleElementContentChanged, ex);
434,436c520,522
<     protected void handleElementMoved (FileEditorInput input, IPath path) {
<         IWorkspace workspace = ResourcesPlugin.getWorkspace ();
<         IFile newFile = workspace.getRoot ().getFile (path);
---
>     protected void handleElementMoved (IEditorInput input, org.eclipse.emf.common.util.URI uri) {
>         if (input instanceof FileEditorInput) {
>             IFile newFile = ResourcesPlugin.getWorkspace ().getRoot ().getFile (new Path (org.eclipse.emf.common.util.URI.decode (uri.path ())).removeFirstSegments (1));
437a524
>             return;
439,441c526
< 
<     protected void handleElementDeleted (FileEditorInput input) {
<         fireElementDeleted (input);
---
>         fireElementMoved (input, new URIEditorInput (uri));
456c541,545
<     protected class ResourceSetInfo extends StorageInfo {
---
>     protected IRunnableContext getOperationRunner (IProgressMonitor monitor) {
>         return null;
>     }
> 
>     protected class ResourceSetInfo extends ElementInfo {
461c550,554
<         private FileEditorInput myEditorInput;
---
>         private IEditorInput myEditorInput;
>         private boolean myUpdateCache = true;
>         private boolean myModifiable = false;
>         private boolean myReadOnly = true;
>         private ResourceSetModificationListener myResourceSetListener;
463c556
<         public ResourceSetInfo (IDiagramDocument document, FileEditorInput editorInput) {
---
>         public ResourceSetInfo (IDiagramDocument document, IEditorInput editorInput) {
467a561,562
>             myResourceSetListener = new ResourceSetModificationListener (this);
>             getResourceSet ().eAdapters ().add (myResourceSetListener);
482c577
<         public FileEditorInput getEditorInput () {
---
>         public IEditorInput getEditorInput () {
487a583
>             getResourceSet ().eAdapters ().remove (myResourceSetListener);
499,502d594
<         public void setSynchronized () {
<             myUnSynchronizedResources.clear ();
<         }
< 
519a612,635
>         public boolean isUpdateCache () {
>             return myUpdateCache;
>         }
> 
>         public void setUpdateCache (boolean update) {
>             myUpdateCache = update;
>         }
> 
>         public boolean isModifiable () {
>             return myModifiable;
>         }
> 
>         public void setModifiable (boolean modifiable) {
>             myModifiable = modifiable;
>         }
> 
>         public boolean isReadOnly () {
>             return myReadOnly;
>         }
> 
>         public void setReadOnly (boolean readOnly) {
>             myReadOnly = readOnly;
>         }
> 
525a642,647
>                 synchronized (ResourceSetInfo.this) {
>                     if (ResourceSetInfo.this.fCanBeSaved) {
>                         ResourceSetInfo.this.setUnSynchronized (resource);
>                         return true;
>                     }
>                 }
538a661,666
>                 synchronized (ResourceSetInfo.this) {
>                     if (ResourceSetInfo.this.fCanBeSaved) {
>                         ResourceSetInfo.this.setUnSynchronized (resource);
>                         return true;
>                     }
>                 }
542c670
<                         handleElementDeleted (ResourceSetInfo.this.getEditorInput ());
---
>                         fireElementDeleted (ResourceSetInfo.this.getEditorInput ());
552,553c680,686
<                 IFile file = WorkspaceSynchronizer.getFile (resource);
<                 if (file != null && file.equals (ResourceSetInfo.this.getEditorInput ().getFile ())) {
---
>                 synchronized (ResourceSetInfo.this) {
>                     if (ResourceSetInfo.this.fCanBeSaved) {
>                         ResourceSetInfo.this.setUnSynchronized (resource);
>                         return true;
>                     }
>                 }
>                 if (myDocument.getDiagram ().eResource () == resource) {
557c690
<                             handleElementMoved (ResourceSetInfo.this.getEditorInput (), new Path (org.eclipse.emf.common.util.URI.decode (newURI.path ())).removeFirstSegments (1));
---
>                             handleElementMoved (ResourceSetInfo.this.getEditorInput (), newURI);
