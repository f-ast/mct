17,18d16
< import org.eclipse.gmf.common.codegen.ImportAssistant;
< 
20a19,20
> import org.eclipse.gmf.gmfgraph.FigureDescriptor;
> 
38,39d37
<     private static final String VAR_OUTPUT_METHODS = "outputAdditionalMethods";
<     private static final String VAR_PACKAGE_STMT = "packageStatement";
42d39
<     private static final String SLOT_METHODS = "additionalMethods";
45,46d41
<     private Variable packageStatement;
<     private StringBuilder additionalMethods;
48a44
>     private String packageStatement;
50,51c46,47
<     public FigureGenerator (String runtimeToken, boolean asInnerClass) {
<         this (runtimeToken, MapModeCodeGenStrategy.DYNAMIC, "getMapMode().", asInnerClass);
---
>     public FigureGenerator (String runtimeToken, String packageStmt, boolean asInnerClass) {
>         this (runtimeToken, packageStmt, MapModeCodeGenStrategy.DYNAMIC, "getMapMode().", asInnerClass);
54,55c50,51
<     public FigureGenerator (String runtimeToken, MapModeCodeGenStrategy mapModeStrategy, String mapModeAccessor, boolean asInnerClass) {
<         this (runtimeToken, mapModeStrategy, mapModeAccessor, asInnerClass, null);
---
>     public FigureGenerator (String runtimeToken, String packageStmt, MapModeCodeGenStrategy mapModeStrategy, String mapModeAccessor, boolean asInnerClass) {
>         this (runtimeToken, packageStmt, mapModeStrategy, mapModeAccessor, asInnerClass, null);
58c54
<     public FigureGenerator (String runtimeToken, MapModeCodeGenStrategy mapModeStrategy, String mapModeAccessor, boolean asInnerClass, URL [] dynamicTemplates) {
---
>     public FigureGenerator (String runtimeToken, String packageStmt, MapModeCodeGenStrategy mapModeStrategy, String mapModeAccessor, boolean asInnerClass, URL [] dynamicTemplates) {
59a56
>         this.packageStatement = packageStmt;
72,83d68
<         packageStatement = new Variable (VAR_PACKAGE_STMT, "");
<         globals.add (packageStatement);
<         additionalMethods = new StringBuilder ();
<         globals.add (new Variable (VAR_OUTPUT_METHODS, "") {
< 
<             public Object getValue () {
<                 return additionalMethods.toString ();
<             }
< 
<         }
< 
<         );
96d80
<         slots.put (SLOT_METHODS, additionalMethods);
103c87,98
<     public String go (Figure figure, ImportAssistant importAssistant) {
---
>     public String getPackageName () {
>         return packageStatement;
>     }
> 
>     public String fqnSwitch (Figure figure) {
>         result.setLength (0);
>         additionalFields.setLength (0);
>         xpandFacade.evaluate ("Runtime::fqn", figure, null);
>         return result.toString ();
>     }
> 
>     public String go (FigureDescriptor figure) {
105d99
<         additionalMethods.setLength (0);
107,112c101,106
<         StringBuffer ss = new StringBuffer ();
<         importAssistant.emitPackageStatement (ss);
<         packageStatement.setValue (ss.toString ());
<         xpandFacade.evaluate ("top::Figure::FigureClass", figure, new Object [] {myIsInnerClassCode});
<         final String resultString = result.toString ();
<         return resultString;
---
>         if (myIsInnerClassCode) {
>             xpandFacade.evaluate ("top::Descriptor::Inner", figure, null);
>         } else {
>             xpandFacade.evaluate ("top::Descriptor::Top", figure, new Object [] {packageStatement});
>         }
>         return result.toString ();
116,117c110,111
<         if (arguments == null || arguments.length != 2 || false == arguments [0] instanceof Figure || false == arguments [1] instanceof ImportAssistant) {
<             throw new UnexpectedBehaviourException ("(Figure, ImportAssistant) expected as arguments, not " + arguments);
---
>         if (arguments == null || arguments.length != 1 || false == arguments [0] instanceof FigureDescriptor) {
>             throw new UnexpectedBehaviourException ("(FigureDescriptor) expected as arguments, not " + arguments);
119c113
<         return go ((Figure) arguments [0], (ImportAssistant) arguments [1]);
---
>         return go ((FigureDescriptor) arguments [0]);
