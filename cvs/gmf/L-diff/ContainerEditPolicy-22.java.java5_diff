38a39,40
> import org.eclipse.gef.commands.CompoundCommand;
> 
82a85,86
> import org.eclipse.gmf.runtime.diagram.ui.internal.commands.SnapCommand;
> 
84a89,90
> import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;
> 
92a99,102
> import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;
> 
> import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;
> 
122a133,138
> import org.eclipse.jface.preference.IPreferenceStore;
> 
> import org.eclipse.ui.IWorkbenchPart;
> 
> import org.eclipse.ui.PlatformUI;
> 
230a247
>             request.setPartsToArrange (editparts);
257a275,285
>         boolean isSnap = true;
>         IWorkbenchPart activePart = PlatformUI.getWorkbench ().getActiveWorkbenchWindow ().getActivePage ().getActivePart ();
>         if (activePart != null) {
>             IDiagramWorkbenchPart editor = (IDiagramWorkbenchPart) activePart;
>             if (editor != null) {
>                 DiagramGraphicalViewer viewer = (DiagramGraphicalViewer) editor.getDiagramGraphicalViewer ();
>                 IPreferenceStore preferenceStore = viewer.getWorkspaceViewerPreferenceStore ();
>                 isSnap = preferenceStore.getBoolean (WorkspaceViewerProperties.SNAPTOGRID);
>             }
>         }
>         CompoundCommand cmd = new CompoundCommand ();
259c287
<             return ((IInternalLayoutRunnable) layoutRun).getCommand ();
---
>             cmd.add (((IInternalLayoutRunnable) layoutRun).getCommand ());
262c290
<             return new ICommandProxy (new AbstractTransactionalCommand (editingDomain, "", null) {
---
>             cmd.add (new ICommandProxy (new AbstractTransactionalCommand (editingDomain, "", null) {
271c299
<             );
---
>             ));
272a301,304
>         if (isSnap) {
>             cmd.add (getSnapCommand (request));
>         }
>         return cmd;
336a369,383
>     private Command getSnapCommand (Request request) {
>         List editparts = null;
>         if (request instanceof GroupRequest) {
>             editparts = ((GroupRequest) request).getEditParts ();
>         } else if (request instanceof ArrangeRequest) {
>             editparts = ((ArrangeRequest) request).getPartsToArrange ();
>         }
> 
>         TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost ()).getEditingDomain ();
>         if (editparts != null) {
>             return new ICommandProxy (new SnapCommand (editingDomain, editparts));
>         }
>         return null;
>     }
> 
340a388,390
>         if (RequestConstants.REQ_SNAP_TO_GRID.equals (request.getType ())) {
>             return getSnapCommand (request);
>         }
377c427
<         return (ActionIds.ACTION_ARRANGE_ALL.equals (request.getType ()) || ActionIds.ACTION_TOOLBAR_ARRANGE_ALL.equals (request.getType ()) || ActionIds.ACTION_ARRANGE_SELECTION.equals (request.getType ()) || ActionIds.ACTION_TOOLBAR_ARRANGE_SELECTION.equals (request.getType ()) || RequestConstants.REQ_ARRANGE_RADIAL.equals (request.getType ()) || RequestConstants.REQ_ARRANGE_DEFERRED.equals (request.getType ()) || RequestConstants.REQ_REFRESH.equals (request.getType ()) || RequestConstants.REQ_PASTE.equals (request.getType ()) || RequestConstants.REQ_DUPLICATE.equals (request.getType ()) || ZOrderRequest.REQ_BRING_TO_FRONT.equals (request.getType ()) || ZOrderRequest.REQ_BRING_FORWARD.equals (request.getType ()) || ZOrderRequest.REQ_SEND_TO_BACK.equals (request.getType ()) || ZOrderRequest.REQ_SEND_BACKWARD.equals (request.getType ()));
---
>         return (ActionIds.ACTION_ARRANGE_ALL.equals (request.getType ()) || ActionIds.ACTION_TOOLBAR_ARRANGE_ALL.equals (request.getType ()) || ActionIds.ACTION_ARRANGE_SELECTION.equals (request.getType ()) || ActionIds.ACTION_TOOLBAR_ARRANGE_SELECTION.equals (request.getType ()) || RequestConstants.REQ_ARRANGE_RADIAL.equals (request.getType ()) || RequestConstants.REQ_ARRANGE_DEFERRED.equals (request.getType ()) || RequestConstants.REQ_REFRESH.equals (request.getType ()) || RequestConstants.REQ_PASTE.equals (request.getType ()) || RequestConstants.REQ_DUPLICATE.equals (request.getType ()) || RequestConstants.REQ_SNAP_TO_GRID.equals (request.getType ()) || ZOrderRequest.REQ_BRING_TO_FRONT.equals (request.getType ()) || ZOrderRequest.REQ_BRING_FORWARD.equals (request.getType ()) || ZOrderRequest.REQ_SEND_TO_BACK.equals (request.getType ()) || ZOrderRequest.REQ_SEND_BACKWARD.equals (request.getType ()));
