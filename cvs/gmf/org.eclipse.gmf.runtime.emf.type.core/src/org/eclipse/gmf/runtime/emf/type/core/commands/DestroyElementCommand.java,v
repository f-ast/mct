head	1.8;
access;
symbols
	v20081020-0700:1.8
	v20080807-1333:1.8
	v20080807-1325:1.8
	v20080731-1520:1.8
	v20080725-1738:1.8
	v20080722-1827:1.8
	R2_1_maintenance:1.8.0.4
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080425-1959:1.8
	v20080328-1605:1.8
	v20080222-1200:1.8
	v20080114-2222:1.8
	v20080107-1111:1.8
	v20071130-1111:1.8
	v20071124-0000:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	RC3_20:1.8
	v20070601-1400:1.8
	v20070518-1300:1.8
	v20070403-1500:1.8
	v20070330-1300:1.8
	v20070208-1800:1.8
	M4_20:1.8
	v20061214-0000:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061013-1330:1.8
	v20060919-0800:1.7.2.2
	v20060907-1100:1.7.2.2
	M1_20:1.7
	v20060831-1500:1.7.2.2
	v20060817-1500:1.7.2.1
	v20060803-1200:1.7.2.1
	v20060721-1130:1.7.2.1
	v20060713-1700:1.7.2.1
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-0800:1.7
	I20060505-1400:1.7
	I20060428-1300:1.7
	I20060424-0500:1.7
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.5
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.8
date	2006.10.03.15.06.37;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.17.19.31.19;	author ldamus;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.03.15.19.15.35;	author vramaswamy;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.09.23.49.14;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.07.02.40.34;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.13.19.12.20;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.43;	author sshaw;	state Exp;
branches;
next	;

1.7.2.1
date	2006.07.07.18.18.07;	author ldamus;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2006.08.28.20.36.12;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core.commands;

import java.util.Collection;
import java.util.Iterator;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature.Setting;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.emf.core.util.CrossReferenceAdapter;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypeDebugOptions;
import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePlugin;
import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePluginStatusCodes;
import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.EMFTypeCoreMessages;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.osgi.util.NLS;

/**
 * Command to create a model element using the EMF action protocol.
 * 
 * @@author ldamus
 * @@author Christian W. Damus (cdamus)
 */
public class DestroyElementCommand
	extends EditElementCommand {

	/**
	 * The element to be destroyed.
	 */
	private final EObject elementToDestroy;

	/**
	 * Constructs a new command to destroy a model element.
	 * 
	 * @@param request
	 *            the destroy element request
	 */
	public DestroyElementCommand(DestroyElementRequest request) {

		super(request.getLabel(), request.getContainer(), request);
		this.elementToDestroy = request.getElementToDestroy();
	}
	
	/**
	 * Convenience method for destroying the specified object by executing a
	 * <code>DestroyElementCommand</code> on it, if it is attached to a
	 * resource.  Detached elements cannot be destroyed.
	 * <p>
	 * <b>Note</b> that the command will not be executed on the operation
	 * history.
	 * </b>
	 * 
	 * @@param eObject an element to destroy
	 */
	public static void destroy(EObject eObject) {

		Resource resource = eObject.eResource();

		if (resource != null) {
			DestroyElementRequest destroy = new DestroyElementRequest(
					TransactionUtil.getEditingDomain(resource),
					eObject,
					false);
			
			IElementType context = ElementTypeRegistry.getInstance().getElementType(
					destroy.getEditHelperContext());
			ICommand command = context.getEditCommand(destroy);
		
			if (command != null && command.canExecute()) {
				try {
					command.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					Trace.catching(EMFTypePlugin.getPlugin(),
							EMFTypeDebugOptions.EXCEPTIONS_CATCHING,
							DestroyElementCommand.class, "destroy(EObject)", e); //$NON-NLS-1$
					Log.error(EMFTypePlugin.getPlugin(),
							EMFTypePluginStatusCodes.COMMAND_FAILURE,
							NLS.bind(EMFTypeCoreMessages.destroyCommandFailed,
									context.getDisplayName()),
							e);
				}
			}
		}
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand#doExecuteWithResult(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
	 */
	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info)
	    throws ExecutionException {

		EObject destructee = getElementToDestroy();
		
		// only destroy attached elements
		if ((destructee != null) && (destructee.eResource() != null)) {
			// tear down incoming references
			tearDownIncomingReferences(destructee);
			
			// also tear down outgoing references, because we don't want
			//    reverse-reference lookups to find destroyed objects
			tearDownOutgoingReferences(destructee);
			
			// remove the object from its container
			EcoreUtil.remove(destructee);
			
			// in case it was cross-resource-contained
			Resource res = destructee.eResource();
			if (res != null) {
				res.getContents().remove(destructee);
			}
		}
		
		return CommandResult.newOKCommandResult();
	}
	
	/**
	 * Tears down references to the object that we are destroying, from all other
	 * objects in the resource set.
	 * 
	 * @@param destructee the object being destroyed
	 */
	protected void tearDownIncomingReferences(EObject destructee) {
		CrossReferenceAdapter crossReferencer = CrossReferenceAdapter
			.getExistingCrossReferenceAdapter(destructee);
		if (crossReferencer != null) {
			Collection inverseReferences = crossReferencer
				.getInverseReferences(destructee);
			if (inverseReferences != null) {
				int size = inverseReferences.size();
				if (size > 0) {
					Setting setting;
					EReference eRef;
					Setting[] settings = (Setting[]) inverseReferences
						.toArray(new Setting[size]);
					for (int i = 0; i < size; ++i) {
						setting = settings[i];
						eRef = (EReference) setting.getEStructuralFeature();
						if (eRef.isChangeable() && (eRef.isDerived() == false)
							&& (eRef.isContainment() == false)
							&& (eRef.isContainer() == false)) {
							EcoreUtil.remove(setting.getEObject(), eRef,
								destructee);
						}
					}
				}
			}
		}
	}
	
	/**
	 * Tears down outgoing unidirectional references from the object being
	 * destroyed to all other elements in the resource set.  This is required
	 * so that reverse-reference queries will not find the destroyed object.
	 * 
	 * @@param destructee the object being destroyed
	 */
	protected void tearDownOutgoingReferences(EObject destructee) {
		for (Iterator iter = destructee.eClass().getEAllReferences().iterator(); iter.hasNext();) {
			EReference reference = (EReference) iter.next();
			
			// container/containment features are handled separately, and
			//   bidirectional references were handled via incomings
			if (reference.isChangeable() && !reference.isDerived()
					&& !reference.isContainer() && !reference.isContainment()
					&& (reference.getEOpposite() == null)) {
				
				if (destructee.eIsSet(reference)) {
					destructee.eUnset(reference);
				}
			}
		}
	}
	
	/**
	 * Gets the element to be destroyed.
	 * @@return the element to be destroyed
	 */
	protected EObject getElementToDestroy() {
		return elementToDestroy;
	}

	public boolean canExecute() {
		return (elementToDestroy != null) && (elementToDestroy.eResource() != null);
	}
	
}@


1.7
log
@[136738] gmf_head cdamus 060417 DeleteElementCommand leaves cross-resource-contained objects
@
text
@d14 1
a15 1
import java.util.List;
d23 1
d31 1
a31 1
import org.eclipse.gmf.runtime.emf.core.internal.util.ReferenceVisitor;
d92 1
a92 1
			if (command != null) {
d109 3
d146 25
a170 3
		TearDownVisitor visitor = new TearDownVisitor(getElementToDestroy());
		visitor.visitReferencers();    // gather the tear-down actions
		visitor.tearDownReferences();  // execute them
a208 52
	/**
	 * A reference visitor that creates a list of deferred tear-down actions,
	 * to tear down references to the element being destroyed.  These actions
	 * are deferred to avoid concurrently updating the cross-reference map while
	 * we are walking the cross-references.
	 *
	 * @@author Christian W. Damus (cdamus)
	 */
	private static class TearDownVisitor extends ReferenceVisitor {
		private List tearDownActions = null;
		
		TearDownVisitor(EObject elementToRemove) {
			super(elementToRemove);
		}
		
		/**
		 * Gather up the list of deferred tear-down actions.
		 */
		protected void visitedReferencer(final EReference reference,
				final EObject referencer) {

			// container references will be handled by recursive detachment of
			//   the contents, and unchangeable/derived features can't be
			//   updated directly
			if (reference.isChangeable() && !reference.isDerived()
					&& !reference.isContainer()) {
				
				if (tearDownActions == null) {
					tearDownActions = new java.util.ArrayList();
				}
				
				tearDownActions.add(new Runnable() {
					public void run() {
						// remove the referenced object from the reference
						EcoreUtil.remove(referencer, reference, referencedObject);
					}});
			}
		}
		
		/**
		 * Execute the list of deferred tear-down actions, if any, to actually
		 * delete references.
		 */
		void tearDownReferences() {
			if (tearDownActions != null) {
				for (Iterator iter = tearDownActions.iterator(); iter.hasNext();) {
					((Runnable) iter.next()).run();
				}
			}
		}
	}

@


1.7.2.1
log
@[147874] gmf_R1_0_maintenance ldamus 060707 DestroyElementCommand#destroy executes unexecutable commands
@
text
@d91 1
a91 1
			if (command != null && command.canExecute()) {
@


1.7.2.2
log
@[155233] gmf_R1_0_maintenance ylulu 060828 Deleting and element using the EditHelpers could be enhanced
@
text
@a13 1
import java.util.Collection;
d15 1
a22 1
import org.eclipse.emf.ecore.EStructuralFeature.Setting;
d30 1
a30 1
import org.eclipse.gmf.runtime.emf.core.util.CrossReferenceAdapter;
a107 3
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand#doExecuteWithResult(org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
	 */
d142 3
a144 25
		CrossReferenceAdapter crossReferencer = CrossReferenceAdapter
			.getExistingCrossReferenceAdapter(destructee);
		if (crossReferencer != null) {
			Collection inverseReferences = crossReferencer
				.getInverseReferences(destructee);
			if (inverseReferences != null) {
				int size = inverseReferences.size();
				if (size > 0) {
					Setting setting;
					EReference eRef;
					Setting[] settings = (Setting[]) inverseReferences
						.toArray(new Setting[size]);
					for (int i = 0; i < size; ++i) {
						setting = settings[i];
						eRef = (EReference) setting.getEStructuralFeature();
						if (eRef.isChangeable() && (eRef.isDerived() == false)
							&& (eRef.isContainment() == false)
							&& (eRef.isContainer() == false)) {
							EcoreUtil.remove(setting.getEObject(), eRef,
								destructee);
						}
					}
				}
			}
		}
d183 52
@


1.6
log
@[131995],gmf_head, vramaswa,060315,The CrossReferenceAdapter needs to public for applications to extend the functionality
@
text
@d124 6
@


1.5
log
@[129773] gmf_head cdamus 060309 EMFCoreUtil.destroy() cannot destroy non-contained dependents
@
text
@d30 1
a30 1
import org.eclipse.gmf.runtime.emf.core.internal.index.ReferenceVisitor;
@


1.4
log
@[129773] gmf_head cdamus 060306 EMFCoreUtil.destroy() cannot destroy non-contained dependents
@
text
@d174 1
a174 1
		return elementToDestroy != null;
@


1.3
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d14 3
d20 1
d22 4
d27 10
a36 1
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
d38 1
d44 1
d58 1
a58 1
	 *            the destroy element requestO
d66 42
d111 13
a123 2
		if (getElementToDestroy().eResource() != null) {
			EMFCoreUtil.destroy(getElementToDestroy());
d125 1
d130 36
d176 52
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d14 2
a15 2
import java.util.Collection;

a17 2
import org.eclipse.emf.ecore.EReference;

d19 1
d46 3
d50 2
a51 10
	protected CommandResult doExecute(IProgressMonitor progressMonitor) {

		EReference reference = getElementToDestroy().eContainmentFeature();

		if (reference.isMany()) {
			((Collection) getElementToEdit().eGet(reference))
				.remove(getElementToDestroy());
			
		} else {
			getElementToEdit().eSet(reference, null);
d53 1
a53 1
		return newOKCommandResult();
d64 1
a64 6
	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.commands.core.internal.commands.EditElementCommand#isExecutable()
	 */
	public boolean isExecutable() {
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

