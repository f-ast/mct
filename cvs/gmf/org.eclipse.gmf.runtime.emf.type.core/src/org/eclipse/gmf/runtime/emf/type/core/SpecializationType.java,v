head	1.6;
access;
symbols
	v20081020-0700:1.6
	v20080807-1333:1.6
	v20080807-1325:1.6
	v20080731-1520:1.6
	v20080725-1738:1.6
	v20080722-1827:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080425-1959:1.6
	v20080328-1605:1.6
	v20080222-1200:1.6
	v20080114-2222:1.6
	v20080107-1111:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	RC3_20:1.6
	v20070601-1400:1.6
	v20070518-1300:1.6
	v20070403-1500:1.6
	v20070330-1300:1.6
	v20070208-1800:1.6
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061013-1330:1.6
	v20060919-0800:1.5.2.1
	v20060907-1100:1.5.2.1
	M1_20:1.5
	v20060831-1500:1.5.2.1
	v20060817-1500:1.5.2.1
	v20060803-1200:1.5.2.1
	v20060721-1130:1.5.2.1
	v20060713-1700:1.5.2.1
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.6
date	2006.10.03.15.06.37;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.26.20.14.33;	author ldamus;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.02.23.18.53.55;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.12.20.55.06;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.45;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.07.13.15.10.02;	author mmostafa;	state Exp;
branches;
next	;


desc
@@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core;

import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.emf.type.core.edithelper.IEditHelper;
import org.eclipse.gmf.runtime.emf.type.core.edithelper.IEditHelperAdvice;
import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;

/**
 * Represents an application type that specializes other application types.
 * <P>
 * Specializations can contribute 'before' and 'after' advice to the editing
 * commands associated with the application types that they specialize.
 * 
 * @@author ldamus
 */
public class SpecializationType
	extends ElementType
	implements ISpecializationType {

	/**
	 * The container descriptor.
	 */
	private final IContainerDescriptor containerDescriptor;

	/**
	 * The element matcher.
	 */
	private IElementMatcher matcher;

	/**
	 * The element types that are specialized by this type.
	 */
	private final IElementType[] specializedTypes;

	/**
	 * The identifiers of the element types that are specialized by this type.
	 */
	private String[] specializedTypeIds;

	/**
	 * The edit helper advice.
	 */
	private final IEditHelperAdvice editHelperAdvice;

	/**
	 * The metamodel type
	 */
	private IMetamodelType metamodelType;

	/**
	 * Constructs a new specialization type.
	 * 
	 * @@param id
	 *            the type id
	 * @@param iconURL
	 *            the URL for the icon
	 * @@param displayName
	 *            the display name
	 * @@param elementTypes
	 *            the element types that are specialized by this type
	 * @@param matcher
	 *            the element matcher
	 * @@param descriptor
	 *            the container descriptor
	 * @@param editHelperAdvice
	 *            the edit helper advice
	 */
	public SpecializationType(String id, URL iconURL, String displayName,
			IElementType[] elementTypes, IElementMatcher matcher,
			IContainerDescriptor descriptor, IEditHelperAdvice editHelperAdvice) {

		super(id, iconURL, displayName);

		this.containerDescriptor = descriptor;
		this.matcher = matcher;
		this.specializedTypes = elementTypes;
		this.editHelperAdvice = editHelperAdvice;
	}
	

	/**
	 * Constructs a new instance using values from the type descriptor.
	 * 
	 * @@param descriptor
	 *            the specialization type descriptor
	 */
	public SpecializationType(ISpecializationTypeDescriptor descriptor) {

		this(descriptor.getId(), descriptor.getIconURL(), descriptor.getName(),
				descriptor.getSpecializedTypes(), descriptor.getMatcher(),
				descriptor.getContainerDescriptor(), descriptor
						.getEditHelperAdvice());
	}

	/**
	 * Gets the container descriptor.
	 * 
	 * @@return the container descriptor.
	 */
	public IContainerDescriptor getEContainerDescriptor() {
		return containerDescriptor;
	}

	/**
	 * Gets the element matcher.
	 * 
	 * @@return the element matcher.
	 */
	public IElementMatcher getMatcher() {
		return matcher;
	}

	/**
	 * Gets the element types that this type specializes.
	 * 
	 * @@return an array of types that are specialized by this type.
	 */
	public IElementType[] getSpecializedTypes() {
		return specializedTypes;
	}

	/**
	 * Gets the IDs of the specialized types.
	 * 
	 * @@return the IDs of the specialized types
	 */
	public String[] getSpecializedTypeIds() {

		if (specializedTypeIds == null && specializedTypes != null) {
			specializedTypeIds = new String[specializedTypes.length];

			for (int i = 0; i < specializedTypes.length; i++) {
				specializedTypeIds[i] = specializedTypes[i].getId();
			}
		}
		return specializedTypeIds;
	}

	/**
	 * Answers whether or not I am a specialization of <code>type</code>.
	 * 
	 * @@param type
	 *            the type to be tested
	 * @@return <code>true</code> if I am a specialization of <code>type</code>,
	 *         <code>false</code> otherwise.
	 */
	public boolean isSpecializationOf(IElementType type) {

        String[] ids = getSpecializedTypeIds();
        
		for (int i = 0; i < ids.length; i++) {
			if (type.getId().equals(ids[i])) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Gets my edit helper advice. The advice can return 'before' or 'after'
	 * editing commands for editing elements of the types that I specialize.
	 * 
	 * @@return the edit helper advice.
	 */
	public IEditHelperAdvice getEditHelperAdvice() {
		return editHelperAdvice;
	}

	/**
	 * Gets the metaclass that is specialized by this type.
	 * 
	 * @@return the metaclass
	 */
	public EClass getEClass() {

		return getMetamodelType().getEClass();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.ISpecializationType#getMetamodelType()
	 */
	public IMetamodelType getMetamodelType() {

		if (metamodelType == null) {

			for (int i = 0; i < getSpecializedTypes().length; i++) {
				IElementType nextElementType = getSpecializedTypes()[i];

				if (nextElementType instanceof IMetamodelType) {
					metamodelType = (IMetamodelType) nextElementType;
					break;

				} else if (nextElementType instanceof ISpecializationType) {
					metamodelType = ((ISpecializationType) nextElementType)
						.getMetamodelType();
					break;
				}
			}
		}
		return metamodelType;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.IElementType#getEditHelper()
	 */
	public IEditHelper getEditHelper() {
		return getMetamodelType().getEditHelper();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.IElementType#getCommand(org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest)
	 */
	public ICommand getEditCommand(IEditCommandRequest request) {
		return getEditHelper().getEditCommand(request);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.IElementType#getAllSuperTypes()
	 */
	public IElementType[] getAllSuperTypes() {

		if (super.getAllSuperTypes() == null) {
			List result = new ArrayList();
	
			// Add all the metamodel supertypes
			IElementType[] metamodelSupertypes = getMetamodelType()
				.getAllSuperTypes();
			result.addAll(Arrays.asList(metamodelSupertypes));
			
			// Add the metamodel type
			result.add(getMetamodelType());
	
			// Add all the specialization supertypes
			result.addAll(getSpecializationSupertypes(this));

			setAllSupertypes((IElementType[]) result.toArray(new IElementType[] {}));
		}
		return super.getAllSuperTypes();
	}

	/**
	 * Gest the specialization supertypes of <code>specializationType</code>
	 * 
	 * @@param specializationType
	 *            the specialization type
	 * @@return the list of specialization supertypes
	 */
	private List getSpecializationSupertypes(
			ISpecializationType specializationType) {

		List result = new ArrayList();
		IElementType[] specializationSupertypes = specializationType
			.getSpecializedTypes();

		for (int i = 0; i < specializationSupertypes.length; i++) {
			IElementType nextType = specializationSupertypes[i];

			if (nextType instanceof ISpecializationType) {
				result
					.addAll(getSpecializationSupertypes((ISpecializationType) nextType));
				result.add(nextType);
			}
		}
		return result;
	}
	
	public String toString() {
		return "SpecializationType[" + getId()+ "]";  //$NON-NLS-1$//$NON-NLS-2$
	}

}@


1.5
log
@[136760] gmf_head ldamus 060426  ElementTypeRegistry prevents deployment of different applications sharing the same metamodel
@
text
@d294 1
a294 1
		return "SpecializationType[" + getId()+ "]";
@


1.5.2.1
log
@[110316] gmf_R1_0_maintenance mmostafa  060713 Compiler warning count should be 0 - runtime diagram layer components
@
text
@d294 1
a294 1
		return "SpecializationType[" + getId()+ "]";  //$NON-NLS-1$//$NON-NLS-2$
@


1.4
log
@[120765] gmf_head ldamus 060223 SpecializationType#isSpecializationOf() needs to be initialized
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d292 4
@


1.3
log
@Bugzilla 110653 gmf_head ahunter 051012 Eroneous references to xtools in gmf common namespace
@
text
@d167 4
a170 2
		for (int i = 0; i < specializedTypeIds.length; i++) {
			if (type.getId().equals(specializedTypeIds[i])) {
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d224 1
a224 1
	 * @@see com.ibm.xtools.emf.msl.type.IElementType#getEditHelper()
d233 1
a233 1
	 * @@see com.ibm.xtools.emf.msl.type.IElementType#getCommand(com.ibm.xtools.emf.msl.type.edit.EditCommandRequest)
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

