head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080807-1333:1.5
	v20080807-1325:1.5
	v20080731-1520:1.5
	v20080725-1738:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080425-1959:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080114-2222:1.5
	v20080107-1111:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070518-1300:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5
	v20060919-0800:1.4.2.1
	v20060907-1100:1.4.2.1
	M1_20:1.4
	v20060831-1500:1.4.2.1
	v20060817-1500:1.4.2.1
	v20060803-1200:1.4.2.1
	v20060721-1130:1.4.2.1
	v20060713-1700:1.4.2.1
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.10.03.15.06.38;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.26.20.14.33;	author ldamus;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.12.22.19.01.48;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.48;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.07.13.15.10.02;	author mmostafa;	state Exp;
branches;
next	;


desc
@@


1.5
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core.internal.descriptors;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;

import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.emf.type.core.IContainerDescriptor;
import org.eclipse.gmf.runtime.emf.type.core.IElementMatcher;
import org.eclipse.gmf.runtime.emf.type.core.edithelper.IEditHelperAdvice;
import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePlugin;
import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePluginStatusCodes;
import org.eclipse.gmf.runtime.emf.type.core.internal.impl.XMLExpressionMatcher;
import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.EMFTypeCoreMessages;

/**
 * Descriptor for an advice binding. Advice can be bound to any element type.
 * 
 * @@author ldamus
 */
public class AdviceBindingDescriptor
	implements IEditHelperAdviceDescriptor {

	/**
	 * The advice binding ID.
	 */
	private final String id;
	
	/**
	 * The identifier of this element type.
	 */
	private final String typeId;

	/**
	 * Indicates the related element types that should inherite this advice.
	 */
	private final AdviceBindingInheritance inheritance;

	/**
	 * The matcher class name. May be <code>null</code>.
	 */
	private String matcherClassName;
	
	/**
	 * The container element matcher. May be <code>null</code>.
	 */
	private IElementMatcher matcher;

	/**
	 * The container matcher configuration element.
	 */
	private IConfigurationElement matcherConfig;

	/**
	 * The binding configuration element.
	 */
	private final IConfigurationElement bindingConfig;

	/**
	 * The class name of the edit helper advice.
	 */
	private String editHelperAdviceName;
	
	/**
	 * The edit helper advice.
	 */
	private IEditHelperAdvice editHelperAdvice;

	/**
	 * The container descriptor.
	 */
	private IContainerDescriptor containerDescriptor;

	/**
	 * Teh metamodel descriptor.
	 */
	private final MetamodelDescriptor metamodelDescriptor;

	/**
	 * Constructs a new container descriptor from the configuration element.
	 * 
	 * @@param config
	 *            the configuration element
	 * @@throws CoreException
	 *             when the configuration element does not contain the required
	 *             elements and attributes
	 */
	public AdviceBindingDescriptor(IConfigurationElement config,
			MetamodelDescriptor metamodelDescriptor)
		throws CoreException {

		this.bindingConfig = config;
		this.metamodelDescriptor = metamodelDescriptor;
	
		// ID
		this.id = config.getAttribute(ElementTypeXmlConfig.A_ID);
		if (id == null) {
			throw EMFTypePluginStatusCodes.getAdviceBindingInitException(
					StringStatics.BLANK,
					EMFTypeCoreMessages.adviceBinding_reason_no_id_WARN_);
		}
		
		// EDIT HELPER ADVICE CLASS
		editHelperAdviceName = config
			.getAttribute(ElementTypeXmlConfig.A_CLASS);
		if (editHelperAdviceName == null) {
			throw EMFTypePluginStatusCodes
					.getAdviceBindingInitException(
							id,
							EMFTypeCoreMessages.adviceBinding_reason_no_edit_helper_advice_id_WARN_);
		}

		// TYPE ID
		this.typeId = config.getAttribute(ElementTypeXmlConfig.A_TYPE_ID);
		if (typeId == null) {
			throw EMFTypePluginStatusCodes.getAdviceBindingInitException(id,
					EMFTypeCoreMessages.adviceBinding_reason_no_type_id_WARN_);
		}
		
		// ECONTAINER
		IConfigurationElement[] containerConfigs = config
			.getChildren(ElementTypeXmlConfig.E_ECONTAINER);

		if (containerConfigs.length > 0) {
			containerDescriptor = new ContainerDescriptor(containerConfigs[0],
				metamodelDescriptor, getId());
		}

		// APPLY TO RELATED ELEMENT TYPES
		String inheritanceString = config
				.getAttribute(ElementTypeXmlConfig.A_INHERITANCE);
		AdviceBindingInheritance declaredInheritance = AdviceBindingInheritance
				.getAdviceBindingInheritance(inheritanceString);

		if (declaredInheritance == null) {
			if (inheritanceString != null) {
				// Invalid inheritance value
				throw EMFTypePluginStatusCodes.getAdviceBindingInitException(id,
						EMFTypeCoreMessages.adviceBinding_reason_invalid_inheritance_WARN_);
			}
			// Default inheritance is NONE
			declaredInheritance = AdviceBindingInheritance.NONE;
		}
		
		this.inheritance = declaredInheritance;

		// XML MATCHER EXPRESSION
		IConfigurationElement[] enablementConfigs = config
			.getChildren(ElementTypeXmlConfig.E_ENABLEMENT);

		if (enablementConfigs.length > 0) {
			matcher = new XMLExpressionMatcher(enablementConfigs[0], id);
		}

		// MATCHER CLASS
		if (matcher == null) {
			IConfigurationElement[] matcherConfigs = config
				.getChildren(ElementTypeXmlConfig.E_MATCHER);

			if (matcherConfigs.length > 0) {
				matcherClassName = matcherConfigs[0].getAttribute(ElementTypeXmlConfig.A_CLASS);
				
				if (matcherClassName == null) {
					throw EMFTypePluginStatusCodes.getInitException(id,
							EMFTypeCoreMessages.element_reason_matcher_no_class_WARN_, null);
				}
				matcherConfig = matcherConfigs[0];
				
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.internal.impl.IEditHelperAdviceDescriptor#getTypeId()
	 */
	public String getTypeId() {
		return typeId;
	}
	
	/**
	 * Returns the advice binding id.
	 * @@return the advice binding id
	 */
	public String getId() {
		return id;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.internal.impl.IEditHelperAdviceDescriptor#getMatcher()
	 */
	public IElementMatcher getMatcher() {

		if (matcher == null && matcherClassName != null && matcherConfig != null) {
			try {
				matcher = (IElementMatcher) matcherConfig
					.createExecutableExtension(ElementTypeXmlConfig.A_CLASS);

			} catch (CoreException e) {
				Log
						.error(
								EMFTypePlugin.getPlugin(),
								EMFTypePluginStatusCodes.MATCHER_CLASS_NOT_FOUND,
								EMFTypeCoreMessages
										.bind(
												EMFTypeCoreMessages.matcher_class_not_found_ERROR_,
												matcherClassName), e);

				// Don't try to recompute the matcher class if it has failed.
				matcherClassName = null;
			}
		}
		return matcher;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.internal.impl.IEditHelperAdviceDescriptor#getEditHelperAdvice()
	 */
	public IEditHelperAdvice getEditHelperAdvice() {

		if (editHelperAdvice == null) {

			if (editHelperAdviceName != null) {
				try {
					editHelperAdvice = (IEditHelperAdvice) bindingConfig
						.createExecutableExtension(ElementTypeXmlConfig.A_CLASS);

				} catch (CoreException e) {
					Log
							.error(
									EMFTypePlugin.getPlugin(),
									EMFTypePluginStatusCodes.EDIT_HELPER_ADVICE_CLASS_NOT_FOUND,
									EMFTypeCoreMessages
											.bind(
													EMFTypeCoreMessages.editHelperAdvice_class_not_found_ERROR_,
													editHelperAdviceName), e);
					// Don't recompute the edit helper advice after it has
					// failed once.
					editHelperAdviceName = null;
				}
			}
		}
		return editHelperAdvice;
	}

	/**
	 * Gets the metamodel descriptor for this advice binding.
	 * 
	 * @@return the metamodel descriptor
	 */
	public MetamodelDescriptor getMetamodelDescriptor() {
		return metamodelDescriptor;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.emf.type.core.internal.descriptors.IEditHelperAdviceDescriptor#getInheritance()
	 */
	public AdviceBindingInheritance getInheritance() {
		return inheritance;
	}
	
	/**
	 * Gets the container descriptor.
	 * 
	 * @@return the container descriptor
	 */
	public IContainerDescriptor getContainerDescriptor() {
		return containerDescriptor;
	}
	
	public String toString() {
		return "AdviceBindingDescriptor[" + getId()+ "]";  //$NON-NLS-1$//$NON-NLS-2$
	}
}@


1.4
log
@[136760] gmf_head ldamus 060426  ElementTypeRegistry prevents deployment of different applications sharing the same metamodel
@
text
@d288 1
a288 1
		return "AdviceBindingDescriptor[" + getId()+ "]";
@


1.4.2.1
log
@[110316] gmf_R1_0_maintenance mmostafa  060713 Compiler warning count should be 0 - runtime diagram layer components
@
text
@d288 1
a288 1
		return "AdviceBindingDescriptor[" + getId()+ "]";  //$NON-NLS-1$//$NON-NLS-2$
@


1.3
log
@[120871] gmf_head ldamus 051222 org.eclipse.gmf.runtime.emf.type.core needs NLS sweep
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d286 4
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d25 1
a25 1
import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.ResourceManager;
d109 3
a111 2
			throw EMFTypePluginStatusCodes.getAdviceBindingInitException(StringStatics.BLANK,
				EMFTypePluginStatusCodes.ADVICE_BINDING_NO_ID_KEY);
d118 4
a121 2
			throw EMFTypePluginStatusCodes.getAdviceBindingInitException(id,
				EMFTypePluginStatusCodes.ADVICE_BINDING_NO_EDIT_HELPER_ADVICE_KEY);
d128 1
a128 1
				EMFTypePluginStatusCodes.ADVICE_BINDING_NO_TYPE_ID_KEY);
d150 1
a150 1
						EMFTypePluginStatusCodes.ADVICE_BINDING_INVALID_INHERITANCE);
d176 1
a176 1
						EMFTypePluginStatusCodes.MATCHER_NO_CLASS_KEY, null);
d215 7
a221 8
					.error(
						EMFTypePlugin.getPlugin(),
						EMFTypePluginStatusCodes.MATCHER_CLASS_NOT_FOUND,
						ResourceManager
							.getMessage(
								EMFTypePluginStatusCodes.MATCHER_CLASS_NOT_FOUND_KEY,
								new Object[] {matcherClassName}),
						e);
d246 7
a252 7
						.error(
							EMFTypePlugin.getPlugin(),
							EMFTypePluginStatusCodes.EDIT_HELPER_ADVICE_CLASS_NOT_FOUND,
							ResourceManager
								.getMessage(
									EMFTypePluginStatusCodes.EDIT_HELPER_ADVICE_CLASS_NOT_FOUND_KEY,
									new Object[] {editHelperAdviceName}), e);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

