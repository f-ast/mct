head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080807-1333:1.5
	v20080807-1325:1.5
	v20080731-1520:1.5
	v20080725-1738:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.6
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080425-1959:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080114-2222:1.5
	v20080107-1111:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.4
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070518-1300:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5
	v20060919-0800:1.5
	v20060907-1100:1.5
	M1_20:1.5
	v20060831-1500:1.5
	v20060817-1500:1.5
	v20060803-1200:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.4
	v20060519-0800:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.05.29.20.54.32;	author cmahoney;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.26.20.14.33;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.13.19.12.20;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.49;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Bugzilla#143916 gmf_head cmahoney 060529 DeleteFromModelAction uses wrong editing domain for multiple editors
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core.requests;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.emf.type.core.IClientContext;

/**
 * Abstract superclass for edit command requests.
 * 
 * @@author ldamus
 */
public abstract class AbstractEditCommandRequest
	implements IEditCommandRequest {

	/**
	 * The edit command label. If <code>null</code>, the default command
	 * label will be used.
	 */
	private String label;
	
	/**
	 * My client context.
	 */
	private IClientContext clientContext;

	/**
	 * Arbitrary edit command parameters. Keyed on strings representing the name
	 * of the parameter. Value is any object representing the parameter value.
	 * <P>
	 * Used to pass additional information from the client to the edit helpers.
	 */
	private Map parameters = new HashMap();
	
	/**
	 * The editing domain in which I am requesting to make model changes.
	 */
	private TransactionalEditingDomain editingDomain;
	
	/**
	 * Initializes me with the editing domain in which I am requesting to make
	 * model changes.
	 * 
	 * @@param editingDomain
	 *            the editing domain in which I am requesting to make model
	 *            changes.
	 */
	protected AbstractEditCommandRequest(TransactionalEditingDomain editingDomain) {
		this.editingDomain = editingDomain;
	}
	
	// Documentation copied from the interface
	public TransactionalEditingDomain getEditingDomain() {
		return editingDomain;
	}

	/**
	 * Gets the edit command label. If the label has not been specified, the
	 * default command label will be returned.
	 */
	public String getLabel() {
		if (label == null) {
			return getDefaultLabel();
		}
		return label;
	}

	/**
	 * Gets the default edit command label.
	 * 
	 * @@return the default label
	 */
	protected String getDefaultLabel() {
		return StringStatics.BLANK;
	}

	/**
	 * Sets the edit command label. Once the edit command label has been set,
	 * the default command label will no longer be used.
	 * 
	 * @@param label
	 *            the new label
	 */
	public void setLabel(String label) {
		this.label = label;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.edithelper.IEditCommandRequest#getElementsToEdit()
	 */
	public List getElementsToEdit() {
		return Collections.EMPTY_LIST;
	}

	/**
	 * Gets the value of the parameter named <code>parameterName</code>.
	 * 
	 * @@return the parameter value, or <code>null</code> if the parameter
	 *         value is not set.
	 */
	public Object getParameter(String parameterName) {
		return parameters.get(parameterName);
	}

	/**
	 * Sets the value of the parameter named <code>parameterName</code> to
	 * <code>value</code>.
	 * 
	 * @@param parameterName
	 *            the parameter name
	 * @@param value
	 *            the parameter value
	 */
	public void setParameter(String parameterName, Object value) {
		parameters.put(parameterName, value);
	}

	/**
	 * Adds of the parameter values in <code>newParameters</code> to this
	 * request.
	 * 
	 * @@param newParameters
	 *            the parameters to add
	 */
	public void addParameters(Map newParameters) {
		if (newParameters != null) {
			parameters.putAll(newParameters);
		}
	}

	/**
	 * Gets the parameters associated with this request.
	 * 
	 * @@return the map of parameter values, keyed on parameter name
	 */
	public Map getParameters() {
		return parameters;
	}
	
	// documentation copied from the interface
	public void setClientContext(IClientContext clientContext) {
		this.clientContext = clientContext;
	}
	
	// documentation copied from the interface
	public IClientContext getClientContext() {
		return clientContext;
	}
    
    /**
     * Sets the editing domain.
     * 
     * @@param editingDomain
     *            the editing domain in which I am requesting to make model
     *            changes.
     */
    public void setEditingDomain(TransactionalEditingDomain editingDomain) {
        this.editingDomain = editingDomain;
    }

}@


1.4
log
@[136760] gmf_head ldamus 060426  ElementTypeRegistry prevents deployment of different applications sharing the same metamodel
@
text
@d166 11
@


1.3
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d21 1
d36 5
d156 10
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d19 1
d43 22
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

