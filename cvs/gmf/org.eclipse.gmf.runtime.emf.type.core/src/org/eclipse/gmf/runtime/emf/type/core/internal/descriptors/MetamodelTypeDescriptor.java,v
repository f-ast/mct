head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080807-1333:1.5
	v20080807-1325:1.5
	v20080731-1520:1.5
	v20080725-1738:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.6
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080425-1959:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080114-2222:1.5
	v20080107-1111:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.4
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070518-1300:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5
	v20060919-0800:1.5
	v20060907-1100:1.5
	M1_20:1.5
	v20060831-1500:1.5
	v20060817-1500:1.5
	v20060803-1200:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.05.25.21.36.03;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.26.20.14.33;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.22.19.01.44;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.48;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[143695] gmf_head ldamus 060525 ElementTypeRegistry causes premature plugin loading
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core.internal.descriptors;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.IElementTypeFactory;
import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;
import org.eclipse.gmf.runtime.emf.type.core.IMetamodelTypeDescriptor;
import org.eclipse.gmf.runtime.emf.type.core.edithelper.IEditHelper;
import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePlugin;
import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePluginStatusCodes;
import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.EMFTypeCoreMessages;

/**
 * Descriptor for a metamodel element type that has been defined in XML using
 * the <code>elementTypes</code> extension point.
 * 
 * @@author ldamus
 */
public class MetamodelTypeDescriptor
	extends ElementTypeDescriptor
	implements IMetamodelTypeDescriptor {

	/**
	 * The metaclass that this type represents.
	 */
	private EClass eClass;
	
	/**
	 * The name of the metaclass that this type represents.
	 */
	private String eClassName;

	/**
	 * Flag indicating that a metaclass could not be found with the specified
	 * name.
	 */
	private boolean eClassNotFound = false;

	/**
	 * Describes the metamodel in which to find the metaclass.
	 */
	private final MetamodelDescriptor metamodelDescriptor;

	/**
	 * The edit helper.
	 */
	private IEditHelper editHelper;

	/**
	 * The metamodel type.
	 */
	private IMetamodelType metamodelType;

	/**
	 * The edit helper class name. May be <code>null</code>.
	 */
	private String editHelperName;

	/**
	 * Constructs a descriptor for the <code>metamodelType</code>.
	 * 
	 * @@param metamodelType
	 *            the metamodel type
	 */
	public MetamodelTypeDescriptor(IMetamodelType metamodelType) {

		super(metamodelType);

		this.eClass = metamodelType.getEClass();
		this.editHelper = metamodelType.getEditHelper();
		this.metamodelType = metamodelType;
		this.metamodelDescriptor = null;
	}
	
	/**
	 * Create a descriptor from a config element.
	 * 
	 * @@param configElement
	 *            the configuration element
	 * @@throws CoreException
	 *             when the configuration element is missing required attributes
	 */
	public MetamodelTypeDescriptor(IConfigurationElement configElement,
			MetamodelDescriptor metamodelDescriptor)
		throws CoreException {

		super(configElement);
		
		this.metamodelDescriptor = metamodelDescriptor;

		// ECLASS
		eClassName = configElement
			.getAttribute(ElementTypeXmlConfig.A_ECLASS);

		if (eClassName == null) {
			throw EMFTypePluginStatusCodes.getTypeInitException(getId(),
				EMFTypeCoreMessages.type_reason_no_eclass_WARN_, null);
		}

		editHelperName = getConfigElement().getAttribute(
			ElementTypeXmlConfig.A_EDIT_HELPER);
	}

	/**
	 * Returns the metamodel type for this descriptor. Lazy creation of the
	 * metamodel type to avoid premature plugin loading.
	 * 
	 * @@return the metamodel type
	 */
	public IElementType getElementType() {

		if (metamodelType == null) {

			if (getKindName() != null && getKindName().length() > 0) {
				IElementTypeFactory factory = ElementTypeRegistry.getInstance()
					.getElementTypeFactory(getKindName());

				if (factory != null) {
					metamodelType = factory.createMetamodelType(this);
				}
			}
		}
		return metamodelType;
	}

	/**
	 * Gets the <code>EClass</code> that this type represents.
	 */
	public EClass getEClass() {
		if (eClass == null && !eClassNotFound && metamodelDescriptor != null) {
			EPackage ePackage = metamodelDescriptor.getEPackage();
			ENamedElement namedElement = ePackage.getEClassifier(getEClassName());

			if (namedElement instanceof EClass) {
				eClass = (EClass) namedElement;
			}

			if (eClass == null) {
				eClassNotFound = true;
				Log
				.error(
						EMFTypePlugin.getPlugin(),
						EMFTypePluginStatusCodes.TYPE_NOT_INITED,
						EMFTypeCoreMessages
								.bind(
										EMFTypeCoreMessages.type_not_init_WARN_,
										getEClassName(),
										EMFTypeCoreMessages.type_reason_eclass_not_found_WARN_));
			}
		}
		return eClass;
	}
	
	/**
	 * Gets the name of the <code>EClass</code> that this type represents.
	 * @@return the name of the EClass, or <code>null</code> if this type doesn't represent an EClass.
	 */
	public String getEClassName() {
		if (eClassName == null && eClass != null) {
			eClassName = eClass.getName();
		}
		return eClassName;
	}
	
	/**
	 * Gets the namespace URI of the metamodel that owns the <code>EClass</code>
	 * that I represent.
	 * 
	 * @@return the namespace URI, or <code>null</code> if I don't have one
	 */
	public String getNsURI() {
		if (metamodelDescriptor == null) {
			if (eClass != null) {
				return eClass.getEPackage().getNsURI();
			}
			return null;
		}
		return metamodelDescriptor.getNsURI();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.IMetamodelTypeDescriptor#getEditHelper()
	 */
	public IEditHelper getEditHelper() {

		if (editHelper == null) {

			if (editHelperName != null) {
				try {
					editHelper = (IEditHelper) getConfigElement()
						.createExecutableExtension(
							ElementTypeXmlConfig.A_EDIT_HELPER);

				} catch (CoreException e) {
					Log
							.error(
									EMFTypePlugin.getPlugin(),
									EMFTypePluginStatusCodes.EDIT_HELPER_CLASS_NOT_FOUND,
									EMFTypeCoreMessages
											.bind(
													EMFTypeCoreMessages.editHelper_class_not_found_ERROR_,
													editHelperName), e);
					// Don't recompute the edit helper class after it has failed
					// once.
					editHelperName = null;
				}
			}
		}
		return editHelper;
	}
	
	/**
	 * Gets my name. If no name is specified, uses the name of the
	 * <code>EClass</code> that I represent.
	 */
	public String getName() {
		String name = super.getName();
		
		if ((name == null || name.length() < 1) && getEClass() != null) {
			name = getEClass().getName();
			setName(name);
		}
		return name;
	}
	
	public String toString() {
		return "MetamodelTypeDescriptor[" + getId()+ "]"; //$NON-NLS-1$ //$NON-NLS-2$
	}

}@


1.4
log
@[136760] gmf_head ldamus 060426  ElementTypeRegistry prevents deployment of different applications sharing the same metamodel
@
text
@d45 16
d90 1
d106 2
d110 1
a110 1
		String eClassName = configElement
a117 17
		EPackage ePackage = metamodelDescriptor.getEPackage();
		ENamedElement namedElement = ePackage.getEClassifier(eClassName);

		if (namedElement instanceof EClass) {
			eClass = (EClass) namedElement;
		}

		if (eClass == null) {
			throw EMFTypePluginStatusCodes.getTypeInitException(getId(),
				EMFTypeCoreMessages.type_reason_eclass_not_found_WARN_, null);
		}

		// NAME
		if (getName() == null || getName().length() < 1) {
			setName(eClass.getName());
		}

d144 2
a145 4
	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.IMetamodelTypeDescriptor#getEClass()
d148 21
d171 27
d232 14
d247 1
a247 1
		return "MetamodelTypeDescriptor[" + getId()+ "]";
@


1.3
log
@[120871] gmf_head ldamus 051222 org.eclipse.gmf.runtime.emf.type.core needs NLS sweep
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d183 4
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d29 1
a29 1
import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.ResourceManager;
d96 1
a96 1
				EMFTypePluginStatusCodes.TYPE_NO_ECLASS_KEY, null);
d108 1
a108 1
				EMFTypePluginStatusCodes.TYPE_ECLASS_NOT_FOUND_KEY, null);
d168 7
a174 7
						.error(
							EMFTypePlugin.getPlugin(),
							EMFTypePluginStatusCodes.EDIT_HELPER_CLASS_NOT_FOUND,
							ResourceManager
								.getMessage(
									EMFTypePluginStatusCodes.EDIT_HELPER_CLASS_NOT_FOUND_KEY,
									new Object[] {editHelperName}), e);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

