head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080807-1333:1.7
	v20080807-1325:1.7
	v20080731-1520:1.7
	v20080725-1738:1.7
	v20080722-1827:1.7
	R2_1_maintenance:1.7.0.6
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080425-1959:1.7
	v20080328-1605:1.7
	v20080222-1200:1.7
	v20080114-2222:1.7
	v20080107-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.4
	R2_0:1.7
	R4_20:1.7
	RC3_20:1.7
	v20070601-1400:1.7
	v20070518-1300:1.7
	v20070403-1500:1.7
	v20070330-1300:1.7
	v20070208-1800:1.7
	M4_20:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061013-1330:1.7
	v20060919-0800:1.7
	v20060907-1100:1.7
	M1_20:1.7
	v20060831-1500:1.7
	v20060817-1500:1.7
	v20060803-1200:1.7
	v20060721-1130:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.6
	v20060519-0800:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2006.06.01.18.56.51;	author ldamus;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.25.21.36.03;	author ldamus;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.20.21.27.48;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.20.20.36.57;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.22.19.02.01;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.55;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[136432] gmf_head ldamus 060601 ElementTypeRegistry doesn't respect dynamic plug-in loading
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core.internal;

import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Plugin;

/**
 * Plug-in class for the Model Element Type framework.
 * <p>
 * This class is not intended to be used by clients.
 * 
 * @@author ldamus
 */
public class EMFTypePlugin
	extends Plugin {
	
	/**
	 * Flag indicating whether or not the <code>ElementTypeRegistry</code> and
	 * the <code>ClientContextManager</code> should add types, contexts and
	 * bindings declared in extensions from dynamically loaded plugins.
	 * <P>
	 * This feature can only be enabled when running JUnit tests.
	 */
	private static boolean DYNAMIC_AWARE_MODE = false;

	/**
	 * The shared instance.
	 */
	private static EMFTypePlugin plugin;

	/**
	 * The constructor.
	 */
	public EMFTypePlugin() {
		super();
		plugin = this;
	}

	/**
	 * @@return Returns the plugin.
	 */
	public static EMFTypePlugin getPlugin() {
		return plugin;
	}

	/**
	 * Retrieves the unique identifier of this plug-in.
	 * 
	 * @@return A non-empty string which is unique within the plug-in registry.
	 */
	public static String getPluginId() {
		return getPlugin().getBundle().getSymbolicName();
	}
	
	/**
	 * <B>FOR INTERNAL USE ONLY.  CLIENTS MUST NEVER CALL THIS METHOD.</B>
	 */
	public static void startDynamicAwareMode() {
		// Discourage use of this method by ensuring that it only works when
		// JUnits are running.

		String[] args = Platform.getCommandLineArgs();
		String applicationId = null;

		for (int i = 0; i < args.length - 1; i++) {
			if (args[i].equalsIgnoreCase("-application")) { //$NON-NLS-1$
				applicationId = args[i + 1];
			}
		}

		if (applicationId != null
				&& applicationId.startsWith("org.eclipse.pde.junit")) { //$NON-NLS-1$
			DYNAMIC_AWARE_MODE = true;
		}
	}
	
	/**
	 * <B>FOR INTERNAL USE ONLY.  CLIENTS MUST NEVER CALL THIS METHOD.</B>
	 */
	public static boolean isDynamicAware() {
		return DYNAMIC_AWARE_MODE;
	}
}@


1.6
log
@[143695] gmf_head ldamus 060525 ElementTypeRegistry causes premature plugin loading
@
text
@d14 1
d26 9
d64 29
a92 1

@


1.5
log
@Rollback of mistaken changes.
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
a14 2
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.osgi.framework.BundleContext;
a53 13
	
	public void start(BundleContext context) throws Exception {
		super.start(context);
		configureElementTypeRegistry();
	}

	/**
	 * Configures validation constraint providers based on the
	 * <tt>constraintProvider</tt> extension configurations.
	 */
	protected void configureElementTypeRegistry() {
		ElementTypeRegistry.getInstance();
	}
@


1.4
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@a61 4
	public void stop(BundleContext context) throws Exception {
		deconfigureElementTypeRegistry();
		super.stop(context);
	}
a69 3
	private void deconfigureElementTypeRegistry() {
		ElementTypeRegistry.getInstance().shutdown();
	}
@


1.3
log
@[120871] gmf_head ldamus 051222 org.eclipse.gmf.runtime.emf.type.core needs NLS sweep
@
text
@d62 4
d74 3
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d14 1
a14 2
import org.eclipse.gmf.runtime.common.core.l10n.AbstractResourceManager;
import org.eclipse.gmf.runtime.common.core.plugin.XToolsPlugin;
d16 1
a16 1
import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.ResourceManager;
d26 1
a26 1
	extends XToolsPlugin {
d56 3
a58 7

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.core.internal.plugin.XToolsPlugin#doStartup()
	 */
	protected void doStartup() {
a69 9
	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.core.internal.plugin.XToolsPlugin#getResourceManager()
	 */
	public AbstractResourceManager getResourceManager() {
		return ResourceManager.getInstance();
	}

@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

