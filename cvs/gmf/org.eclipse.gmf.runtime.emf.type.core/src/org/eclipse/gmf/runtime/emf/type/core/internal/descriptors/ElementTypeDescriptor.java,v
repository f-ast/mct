head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080807-1333:1.5
	v20080807-1325:1.5
	v20080731-1520:1.5
	v20080725-1738:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.6
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080425-1959:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080114-2222:1.5
	v20080107-1111:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.4
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070518-1300:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5
	v20060919-0800:1.5
	v20060907-1100:1.5
	M1_20:1.5
	v20060831-1500:1.5
	v20060817-1500:1.5
	v20060803-1200:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.06.01.20.31.30;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.20.20.57.33;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.22.19.01.44;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.49;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[144906] gmf_head ldamus 060601 Can't use platform URI for location of element type icons
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core.internal.descriptors;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.Platform;
import org.osgi.framework.Bundle;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.IElementTypeDescriptor;
import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePluginStatusCodes;
import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.EMFTypeCoreMessages;

/**
 * Descriptor for an element type that has been defined in XML using the
 * <code>elementTypes</code> extension point.
 * 
 * @@author ldamus
 */
public abstract class ElementTypeDescriptor implements IElementTypeDescriptor {

	/**
	 * The configuration element describing this element type.
	 */
	private IConfigurationElement configElement;

	/**
	 * The identifier of this element type.
	 */
	private final String id;

	/**
	 * The display name of this element type.
	 */
	private String name;

	/**
	 * The URL of the icon for this element type.
	 */
	private URL iconURL;

	/**
	 * The name of the element factory kind. Identifies the factory that should
	 * be used to create the new element type.
	 */
	private String kindName;

	/**
	 * The map of custom parameters that may be associated with this element
	 * type. Keyed on parameter name, each value is the string specified in the
	 * XML parameter value attribute.
	 */
	private final Map params = new HashMap();

	/**
	 * Constructs a new element type descriptor for <code>elementType</code>.
	 * 
	 * @@param element
	 *            type the element type
	 */
	protected ElementTypeDescriptor(IElementType elementType) {
		this.id = elementType.getId();
		this.iconURL = elementType.getIconURL();
		this.name = elementType.getDisplayName();
	}
	
	/**
	 * Constructs a new element type descriptor.
	 * 
	 * @@param configElement
	 *            the configuration element
	 * @@throws CoreException
	 *             when the type ID or display name have not been correctly
	 *             specified in the configuration element
	 */
	protected ElementTypeDescriptor(IConfigurationElement configElement)
		throws CoreException {

		assert configElement != null;

		this.configElement = configElement;

		// ID
		this.id = configElement.getAttribute(ElementTypeXmlConfig.A_ID);
		if (id == null) {
			throw EMFTypePluginStatusCodes.getTypeInitException(StringStatics.BLANK,
				EMFTypeCoreMessages.type_reason_no_id_WARN_, null);
		}

		// NAME
		this.name = configElement.getAttribute(ElementTypeXmlConfig.A_NAME);

		// ICON
		String imageFilePath = configElement
			.getAttribute(ElementTypeXmlConfig.A_ICON);
		if (imageFilePath != null) {
			String pluginId = configElement.getDeclaringExtension()
				.getContributor().getName();
			if (pluginId != null) {
				this.iconURL = getUrlFromPlugin(pluginId, imageFilePath);
			}
		}

		kindName = configElement.getAttribute(ElementTypeXmlConfig.A_KIND);

		if (kindName == null || kindName.length() < 1) {
			// use the default kind name
			kindName = IElementType.class.getName();
		}

		IConfigurationElement[] paramConfigElements = configElement
			.getChildren(ElementTypeXmlConfig.E_PARAM);

		for (int i = 0; i < paramConfigElements.length; i++) {
			IConfigurationElement nextParamConfig = paramConfigElements[i];
			String paramName = nextParamConfig
				.getAttribute(ElementTypeXmlConfig.A_NAME);

			if (paramName == null) {
				throw EMFTypePluginStatusCodes.getTypeInitException(getId(),
					EMFTypeCoreMessages.type_reason_no_param_name_WARN_, null);
			}

			String paramValue = nextParamConfig
				.getAttribute(ElementTypeXmlConfig.A_VALUE);
			if (paramValue == null) {
				throw EMFTypePluginStatusCodes.getTypeInitException(getId(),
						EMFTypeCoreMessages.type_reason_no_param_value_WARN_, null);
			}
			params.put(paramName, paramValue);

		}
	}

	/**
	 * Gets the URL given image file path in a specific plugin.
	 * 
	 * @@param pluginId
	 *            the plugin ID
	 * @@param imageFilePath
	 *            the image file path
	 * @@return the URL, or <code>null</code> if it can't be found
	 */
	private URL getUrlFromPlugin(String pluginId, String imageFilePath) {

		Bundle bundle = Platform.getBundle(pluginId);
		URL result = bundle.getEntry(imageFilePath);

		if (result == null) {
			try {
				result = new URL(imageFilePath);
			} catch (MalformedURLException e) {
				result = null;
			}
		}
		return result;
	}

	/**
	 * Gets the element type identifier.
	 * 
	 * @@return the element type identifier.
	 */
	public String getId() {
		return id;
	}

	/**
	 * Gets the element type icon URL.
	 * 
	 * @@return the element type icon URL
	 */
	public URL getIconURL() {
		return iconURL;
	}

	/**
	 * Gets the element type display name.
	 * 
	 * @@return the element type display name.
	 */
	public String getName() {
		return name;
	}

	/**
	 * Sets the name.
	 * 
	 * @@param name
	 *            the new name
	 */
	protected void setName(String name) {
		this.name = name;
	}

	/**
	 * Gets the name of the element factory kind. Identifies the factory that
	 * should be used to create the new element type.
	 * 
	 * @@return the element factory kind name
	 */
	public String getKindName() {
		return kindName;
	}

	/**
	 * Gets the configuration element for this element type.
	 * 
	 * @@return the configuration element
	 */
	public IConfigurationElement getConfigElement() {
		return configElement;
	}

	/**
	 * Gets the element type for this descriptor. Will cause the element type to
	 * be created if this is the first time it is called.
	 * <P>
	 * May cause plugin containng the element type factory and element type
	 * class to be loaded.
	 * 
	 * @@return the element type
	 */
	public abstract IElementType getElementType();

	/**
	 * Gets the value for the parameter named <code>paramName</code>.
	 * 
	 * @@param paramName
	 *            the parameter name
	 * @@return the parameter value
	 */
	public String getParamValue(String paramName) {
		return (String) params.get(paramName);
	}
}@


1.4
log
@[132588] gmf_head ldamus 060320 Fix deprecation warnings for IExtension#getNamespace
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d14 1
d163 10
a172 1
		return bundle.getEntry(imageFilePath);
@


1.3
log
@[120871] gmf_head ldamus 051222 org.eclipse.gmf.runtime.emf.type.core needs NLS sweep
@
text
@d113 1
a113 1
				.getNamespace();
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d27 1
d102 1
a102 1
				EMFTypePluginStatusCodes.TYPE_NO_ID_KEY, null);
d136 1
a136 1
					EMFTypePluginStatusCodes.TYPE_NO_PARAM_NAME_KEY, null);
d143 1
a143 1
					EMFTypePluginStatusCodes.TYPE_NO_PARAM_VALUE_KEY, null);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

