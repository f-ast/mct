head	1.8;
access;
symbols
	v20081020-0700:1.8
	v20080807-1333:1.8
	v20080807-1325:1.8
	v20080731-1520:1.8
	v20080725-1738:1.8
	v20080722-1827:1.8
	R2_1_maintenance:1.8.0.6
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080425-1959:1.8
	v20080328-1605:1.8
	v20080222-1200:1.8
	v20080114-2222:1.8
	v20080107-1111:1.8
	v20071130-1111:1.8
	v20071124-0000:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.4
	R2_0:1.8
	R4_20:1.8
	RC3_20:1.8
	v20070601-1400:1.8
	v20070518-1300:1.8
	v20070403-1500:1.8
	v20070330-1300:1.8
	v20070208-1800:1.8
	M4_20:1.8
	v20061214-0000:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061013-1330:1.8
	v20060919-0800:1.8
	v20060907-1100:1.8
	M1_20:1.8
	v20060831-1500:1.8
	v20060817-1500:1.8
	v20060803-1200:1.8
	v20060721-1130:1.8
	v20060713-1700:1.8
	R1_0_maintenance:1.8.0.2
	R1_0:1.8
	v20060627-1200:1.8
	v20060616-1200:1.8
	v20060609-1400:1.8
	v20060531-1730:1.8
	v20060530-1930:1.8
	v20060526-1200:1.8
	v20060519-0800:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4;
locks; strict;
comment	@# @;


1.8
date	2006.04.27.22.29.24;	author ldamus;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.26.20.14.33;	author ldamus;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.09.23.49.14;	author ldamus;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.07.02.40.34;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.12.21.09.03;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.12.20.55.06;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.45;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[136760] gmf_head ldamus 060427  Return default edit helper if none explicitly provided for metamodel type
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core;

import java.net.URL;
import java.util.LinkedHashSet;
import java.util.List;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.emf.type.core.edithelper.IEditHelper;
import org.eclipse.gmf.runtime.emf.type.core.internal.impl.DefaultMetamodelType;
import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;

/**
 * Represents an element type that maps directly to a metamodel element type (
 * <code>EClass</code>). There is only one metamodel type registered with the
 * {@@link org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry}for a given EClass.
 * <P>
 * Provides an edit helper for editing model elements with the same
 * <code>EClass</code>.
 * 
 * @@author ldamus
 */
public class MetamodelType
	extends ElementType
	implements IMetamodelType {

	/**
	 * The edit helper.
	 */
	private IEditHelper editHelper;

	/**
	 * Constructs a new metamodel type.
	 * 
	 * @@param id
	 *            the id
	 * @@param iconURL
	 *            the URL for the icon
	 * @@param displayName
	 *            the display name
	 * @@param eClass
	 *            the metaclass
	 * @@param editHelper
	 *            the edit helper
	 */
	public MetamodelType(String id, URL iconURL, String displayName,
			EClass eClass, IEditHelper editHelper) {

		super(id, iconURL, displayName, eClass);
		this.editHelper = editHelper;
	}
	

	/**
	 * Constructs a new metamodel type using values from the type descriptor.
	 * 
	 * @@param descriptor
	 *            the metamodel type descriptor.
	 */
	public MetamodelType(IMetamodelTypeDescriptor descriptor) {

		this(descriptor.getId(), descriptor.getIconURL(), descriptor.getName(),
				descriptor.getEClass(), descriptor.getEditHelper());

	}

	/**
	 * Gets the edit helper. May activate the plugin in which the edit helper is
	 * defined.
	 * 
	 * @@return the edit helper.
	 */
	public IEditHelper getEditHelper() {
		
		if (editHelper == null) {
			IElementType[] superTypes = getAllSuperTypes();
			
			if (superTypes.length > 0) {
				editHelper = superTypes[superTypes.length - 1].getEditHelper();
				
			} else {
				editHelper = DefaultMetamodelType.getInstance().getEditHelper();
			}
		}
		return editHelper;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.IElementType#getCommand(org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest)
	 */
	public ICommand getEditCommand(IEditCommandRequest request) {
		return getEditHelper().getEditCommand(request);
	}
	
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.emf.type.core.IElementType#getAllSuperTypes()
	 */
	public IElementType[] getAllSuperTypes() {

		if (super.getAllSuperTypes() == null) {
			
			IClientContext context = ClientContextManager.getInstance()
					.getBinding(this);
			
			LinkedHashSet result = new LinkedHashSet();
			if (getEClass() != null) {
				List supertypes = getEClass().getEAllSuperTypes();
	
				for (int i = 0; i < supertypes.size(); i++) {
					EClass nextEClass = (EClass) supertypes.get(i);
					IElementType nextElementType = ElementTypeRegistry
						.getInstance().getElementType(nextEClass, context);
	
					if ((nextElementType != null)
							&& (nextElementType != DefaultMetamodelType.getInstance())) {
						
						result.add(nextElementType);
					}
				}
			}
			setAllSupertypes((IElementType[]) result
				.toArray(new IElementType[] {}));
		}
		return super.getAllSuperTypes();
	}
	
	public String toString() {
		return "MetamodelType[" + getId()+ "]"; //$NON-NLS-1$ //$NON-NLS-2$
	}

}@


1.7
log
@[136760] gmf_head ldamus 060426  ElementTypeRegistry prevents deployment of different applications sharing the same metamodel
@
text
@d92 3
d143 1
a143 1
		return "MetamodelType[" + getId()+ "]";
@


1.6
log
@[129773] gmf_head cdamus 060309 EMFCoreUtil.destroy() cannot destroy non-contained dependents
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d113 4
d124 1
a124 1
						.getInstance().getElementType(nextEClass);
d138 4
@


1.5
log
@[129773] gmf_head cdamus 060306 EMFCoreUtil.destroy() cannot destroy non-contained dependents
@
text
@d22 1
@


1.4
log
@Bugzilla Bug 112303 gmf_head ldamus 051012 NPE while creating diagram element for the specialization type
@
text
@d121 3
a123 1
					if (nextElementType != null) {
@


1.3
log
@Bugzilla 110653 gmf_head ahunter 051012 Eroneous references to xtools in gmf common namespace
@
text
@d113 11
a123 9
			List supertypes = getEClass().getEAllSuperTypes();

			for (int i = 0; i < supertypes.size(); i++) {
				EClass nextEClass = (EClass) supertypes.get(i);
				IElementType nextElementType = ElementTypeRegistry
					.getInstance().getElementType(nextEClass);

				if (nextElementType != null) {
					result.add(nextElementType);
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d99 1
a99 1
	 * @@see com.ibm.xtools.emf.msl.type.IElementType#getCommand(com.ibm.xtools.emf.msl.type.edit.EditCommandRequest)
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

