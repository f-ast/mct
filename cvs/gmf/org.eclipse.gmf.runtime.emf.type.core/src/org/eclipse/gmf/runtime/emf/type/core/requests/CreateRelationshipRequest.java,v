head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080807-1333:1.3
	v20080807-1325:1.3
	v20080731-1520:1.3
	v20080725-1738:1.3
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.6
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080425-1959:1.3
	v20080328-1605:1.3
	v20080222-1200:1.3
	v20080114-2222:1.3
	v20080107-1111:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20070208-1800:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.3
	v20060919-0800:1.3
	v20060907-1100:1.3
	M1_20:1.3
	v20060831-1500:1.3
	v20060817-1500:1.3
	v20060803-1200:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.3
date	2006.02.13.19.12.20;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.49;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core.requests;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;

/**
 * Request to create a new relationship element.
 * 
 * @@author ldamus
 */
public class CreateRelationshipRequest extends CreateElementRequest {

	/**
	 * The parameter name for the relationship source.
	 */
	public static final String SOURCE = "CreateRelationshipRequest.source"; //$NON-NLS-1$

	/**
	 * The parameter name for the relationship target.
	 */
	public static final String TARGET = "CreateRelationshipRequest.target"; //$NON-NLS-1$

	/**
	 * The source of the relationship.
	 */
	private EObject source;

	/**
	 * The target of the relationship.
	 */
	private EObject target;

	/**
	 * <code>true</code> if the user should be prompted to create any parts
	 * necessary to the creation of the new relationship, <code>false</code>
	 * otherwise.
	 */
	private boolean prompt;

	/**
	 * Constructs a new request to create a new relationship.
	 * 
	 * @@param editingDomain
	 *            the editing domain in which I am requesting to make model
	 * @@param container
	 *            the container for the new relationship
	 * @@param source
	 *            the source of the new relationship
	 * @@param target
	 *            the target of the new relationship
	 * @@param elementType
	 *            the element type of the new relationship
	 * @@param containmentFeature
	 *            the feature that will contain the new relationship
	 */
	public CreateRelationshipRequest(TransactionalEditingDomain editingDomain,
			EObject container, EObject source, EObject target,
			IElementType elementType, EReference containmentFeature) {

		super(editingDomain, container, elementType, containmentFeature);

		this.source = source;
		this.target = target;
	}

	/**
	 * Constructs a new request to create a new relationship.
	 * 
	 * @@param editingDomain
	 *            the editing domain in which I am requesting to make model
	 * @@param container
	 *            the container for the new relationship
	 * @@param source
	 *            the source of the new relationship
	 * @@param target
	 *            the target of the new relationship
	 * @@param elementType
	 *            the element type of the new relationship
	 */
	public CreateRelationshipRequest(TransactionalEditingDomain editingDomain,
			EObject container, EObject source, EObject target,
			IElementType elementType) {

		this(editingDomain, container, source, target, elementType, null);
	}

	/**
	 * Constructs a new request to create a new relationship.
	 * 
	 * @@param editingDomain
	 *            the editing domain in which I am requesting to make model
	 * @@param source
	 *            the source of the new relationship
	 * @@param target
	 *            the target of the new relationship
	 * @@param elementType
	 *            the element type of the new relationship
	 */
	public CreateRelationshipRequest(TransactionalEditingDomain editingDomain,
			EObject source, EObject target, IElementType elementType) {

		this(editingDomain, null, source, target, elementType, null);
	}

    /**
     * Constructs a new request to create a new relationship. The editing domain
     * will be derived from the result of {@@link #getContainer()}.
     * 
     * @@param source
     *            the source of the new relationship
     * @@param target
     *            the target of the new relationship
     * @@param elementType
     *            the element type of the new relationship
     */
    public CreateRelationshipRequest(EObject source, EObject target,
            IElementType elementType) {

        this(null, null, source, target, elementType, null);
    }

	/**
	 * Constructs a new request to create a new relationship.
	 * 
	 * @@param editingDomain
	 *            the editing domain in which I am requesting to make model
	 * @@param elementType
	 *            the element type of the new relationship
	 */
	public CreateRelationshipRequest(TransactionalEditingDomain editingDomain,
			IElementType elementType) {

		this(editingDomain, null, null, null, elementType, null);
	}

    /**
     * Constructs a new request to create a new relationship. The editing domain will
     * be derived from the result of {@@link #getContainer()}.
     * 
     * @@param elementType
     *            the element type of the new relationship
     */
    public CreateRelationshipRequest(
            IElementType elementType) {

        this(null, null, null, null, elementType, null);
    }
    
    /**
     * Constructs a new request to create a new relationship.  The
     * editing domain will be derived from <code>container</code>.
     * 
     * @@param container
     *            the container for the new relationship
     * @@param source
     *            the source of the new relationship
     * @@param target
     *            the target of the new relationship
     * @@param elementType
     *            the element type of the new relationship
     * @@param containmentFeature
     *            the feature that will contain the new relationship
     */
    public CreateRelationshipRequest(EObject container, EObject source,
            EObject target, IElementType elementType,
            EReference containmentFeature) {

        this(TransactionUtil.getEditingDomain(container), container, source,
                target, elementType, containmentFeature);
    }
    
    /**
     * Constructs a new request to create a new relationship.  The
     * editing domain will be derived from <code>container</code>.
     * 
     * @@param container
     *            the container for the new relationship
     * @@param source
     *            the source of the new relationship
     * @@param target
     *            the target of the new relationship
     * @@param elementType
     *            the element type of the new relationship
     */
    public CreateRelationshipRequest(EObject container, EObject source,
            EObject target, IElementType elementType) {

        this(TransactionUtil.getEditingDomain(container), container, source,
                target, elementType);
    }

	/**
	 * Gets the source of the new relationship.
	 * 
	 * @@return the source of the new relationship
	 */
	public EObject getSource() {
		return source;
	}

	/**
	 * Sets the relationship source.
	 * <p>
	 * Does nothing of the source has not changed. Othewise, invalidates the
	 * edit helper context and containment feature.
	 * 
	 * @@param source
	 *            the relationship source
	 */
	public void setSource(EObject source) {

		if (this.source != source) {

			this.source = source;
			invalidateEditHelperContext();

			if (super.getContainer() == null) {
				invalidateContainmentFeature();
			}
		}
	}

	/**
	 * Gets the target of the new relationship.
	 * 
	 * @@return the target of the new relationship
	 */
	public EObject getTarget() {
		return target;
	}

	/**
	 * Sets the relationship target.
	 * <p>
	 * Does nothing of the target has not changed. Otherwise, invalidates the
	 * edit helper context.
	 * 
	 * @@param target
	 *            the relationship target
	 */
	public void setTarget(EObject target) {

		if (this.target != target) {
			this.target = target;
			invalidateEditHelperContext();
		}
	}

	/**
	 * Gets the container for the new element.
	 * 
	 * @@return the container for the new element.
	 */
	public EObject getContainer() {

		EObject eObject = super.getContainer();

		if (eObject == null) {
			return getSource();
		}
		return eObject;
	}

	/**
	 * Gets the value of the prompt flag.
	 * 
	 * @@return <code>true</code> if the user should be prompted to create any
	 *         parts necessary to the creation of the new relationship,
	 *         <code>false</code> if defaults should be used.
	 */
	public boolean isPrompt() {
		return prompt;
	}

	/**
	 * Sets the value of the prompt flag.
	 * 
	 * @@param prompt
	 *            <code>true</code> if the user should be prompted to create
	 *            any parts necessary to the creation of the new relationship,
	 *            <code>false</code> if defaults should be used.
	 */
	public void setPrompt(boolean prompt) {
		this.prompt = prompt;

	}
}@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d16 2
a17 1

d25 1
a25 2
public class CreateRelationshipRequest
	extends CreateElementRequest {
d57 2
d70 3
a72 3
	public CreateRelationshipRequest(EObject container, EObject source,
			EObject target, IElementType elementType,
			EReference containmentFeature) {
d74 1
a74 1
		super(container, elementType, containmentFeature);
d83 2
d94 3
a96 2
	public CreateRelationshipRequest(EObject container, EObject source,
			EObject target, IElementType elementType) {
d98 1
a98 1
		this(container, source, target, elementType, null);
d104 2
d113 2
a114 2
	public CreateRelationshipRequest(EObject source, EObject target,
			IElementType elementType) {
d116 1
a116 1
		this(null, source, target, elementType, null);
d119 17
d139 2
d144 2
a145 1
	public CreateRelationshipRequest(IElementType elementType) {
d147 1
a147 1
		this(null, null, null, elementType, null);
d150 56
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

