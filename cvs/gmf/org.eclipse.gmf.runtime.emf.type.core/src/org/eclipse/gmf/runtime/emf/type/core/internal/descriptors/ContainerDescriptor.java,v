head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080807-1333:1.5
	v20080807-1325:1.5
	v20080731-1520:1.5
	v20080725-1738:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080425-1959:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080114-2222:1.5
	v20080107-1111:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070518-1300:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5
	v20060919-0800:1.4.2.1
	v20060907-1100:1.4
	M1_20:1.4
	v20060831-1500:1.4
	v20060817-1500:1.4
	v20060803-1200:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.10.03.15.06.38;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.10.19.23.34;	author ldamus;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.12.22.19.01.48;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.48;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.09.13.16.46.15;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.5
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core.internal.descriptors;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.emf.type.core.IContainerDescriptor;
import org.eclipse.gmf.runtime.emf.type.core.IElementMatcher;
import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePlugin;
import org.eclipse.gmf.runtime.emf.type.core.internal.EMFTypePluginStatusCodes;
import org.eclipse.gmf.runtime.emf.type.core.internal.impl.XMLExpressionMatcher;
import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.EMFTypeCoreMessages;

/**
 * Descriptor for a model element container.
 * 
 * @@author ldamus
 */
class ContainerDescriptor
	implements IContainerDescriptor {

	/**
	 * The matcher class name. May be <code>null</code>.
	 */
	private String matcherClassName;

	/**
	 * The container element matcher. May be <code>null</code>.
	 */
	private IElementMatcher matcher;

	/**
	 * The container matcher configuration element.
	 */
	private IConfigurationElement matcherConfig;

	/**
	 * The containment features. May be <code>null</code>.
	 */
	private EReference[] containmentFeatures;

	/**
	 * The containment feature names.
	 */
	private List featureNames = new ArrayList();

	/**
	 * The metamodel descriptor.
	 */
	private final MetamodelDescriptor metamodelDescriptor;

	/**
	 * Constructs a new container descriptor from the configuration element.
	 * 
	 * @@param config
	 *            the configuration element
	 * @@throws CoreException
	 *             when the configuration element does not contain the required
	 *             elements and attributes
	 */
	public ContainerDescriptor(IConfigurationElement config,
			MetamodelDescriptor metamodelDescriptor, String id)
		throws CoreException {

		this.metamodelDescriptor = metamodelDescriptor;

		// CONTAINMENT FEATURES
		IConfigurationElement[] featureConfigs = config
			.getChildren(ElementTypeXmlConfig.E_ECONTAINMENT_FEATURE);

		if (featureConfigs.length > 0 && metamodelDescriptor == null) {
			// Containment features can only be specified if a metamodel is
			// specified.
			throw EMFTypePluginStatusCodes
					.getInitException(
							id,
							EMFTypeCoreMessages
									.bind(
											EMFTypeCoreMessages.element_reason_no_econtainmentfeature_metamodel_WARN_,
											featureConfigs[0]), null);
		}

		for (int i = 0; i < featureConfigs.length; i++) {
			IConfigurationElement nextFeatureConfig = featureConfigs[i];
			String qname = nextFeatureConfig
				.getAttribute(ElementTypeXmlConfig.A_QNAME);

			if (qname == null) {
				throw EMFTypePluginStatusCodes
						.getInitException(
								id,
								EMFTypeCoreMessages.element_reason_no_econtainmentfeature_qname_WARN_,
								null);
			}
			featureNames.add(qname);
		}

		// XML MATCHER EXPRESSION
		IConfigurationElement[] enablementConfigs = config
			.getChildren(ElementTypeXmlConfig.E_ENABLEMENT);

		if (enablementConfigs.length > 0) {
			matcher = new XMLExpressionMatcher(enablementConfigs[0], id);
		}

		// MATCHER CLASS
		if (matcher == null) {
			IConfigurationElement[] matcherConfigs = config
				.getChildren(ElementTypeXmlConfig.E_MATCHER);

			if (matcherConfigs.length > 0) {
				matcherClassName = matcherConfigs[0]
					.getAttribute(ElementTypeXmlConfig.A_CLASS);

				if (matcherClassName == null) {
					throw EMFTypePluginStatusCodes
							.getInitException(
									id,
									EMFTypeCoreMessages.element_reason_matcher_no_class_WARN_,
									null);
				}
				matcherConfig = matcherConfigs[0];
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.IContainerDescriptor#getMatcher()
	 */
	public IElementMatcher getMatcher() {

		if (matcher == null && matcherClassName != null
			&& matcherConfig != null) {
			try {
				matcher = (IElementMatcher) matcherConfig
					.createExecutableExtension(ElementTypeXmlConfig.A_CLASS);

			} catch (CoreException e) {
				Log
						.error(
								EMFTypePlugin.getPlugin(),
								EMFTypePluginStatusCodes.MATCHER_CLASS_NOT_FOUND,
								EMFTypeCoreMessages
										.bind(
												EMFTypeCoreMessages.matcher_class_not_found_ERROR_,
												matcherClassName), e);
				// Don't recompute the matcher class if it has failed once.
				matcherClassName = null;
			}
		}
		return matcher;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.IContainerDescriptor#getContainmentFeatures()
	 */
	public EReference[] getContainmentFeatures() {

		if (containmentFeatures == null && !featureNames.isEmpty()) {

			List references = new ArrayList();
			if (metamodelDescriptor != null) {

				for (Iterator i = featureNames.iterator(); i.hasNext();) {
					String nextFeatureName = (String) i.next();

					EPackage ePackage = metamodelDescriptor.getEPackage();

					int featureIndex = nextFeatureName
						.lastIndexOf(StringStatics.PERIOD);
					String classifierName = nextFeatureName.substring(0,
						featureIndex);

					EClassifier classifier = ePackage
						.getEClassifier(classifierName);

					if ((featureIndex < nextFeatureName.length() - 1)
						&& classifier instanceof EClass) {

						String featureName = nextFeatureName
							.substring(featureIndex + 1);
						EStructuralFeature feature = ((EClass) classifier)
							.getEStructuralFeature(featureName);

						if (feature instanceof EReference) {
							references.add(feature);

						} else {
							Log
									.error(
											EMFTypePlugin.getPlugin(),
											EMFTypePluginStatusCodes.CONTAINMENT_FEATURE_NOT_REFERENCE_FEATURE,
											EMFTypeCoreMessages
													.bind(
															EMFTypeCoreMessages.eContainmentFeature_not_reference_feature_ERROR_,
															nextFeatureName),
											null);
						}
                    } else {
						Log
								.error(
										EMFTypePlugin.getPlugin(),
										EMFTypePluginStatusCodes.CONTAINMENT_FEATURE_NO_SUCH_FEATURE,
										EMFTypeCoreMessages
												.bind(
														EMFTypeCoreMessages.eContainmentFeature_no_such_feature_ERROR_,
														nextFeatureName), null);
					}
				}
			}
			containmentFeatures = (EReference[]) references
				.toArray(new EReference[] {});
		}
		return containmentFeatures;
	}

}@


1.4
log
@[129780] gmf_head ldamus 060310 ContainerDescriptor is missing an else statement
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
@


1.4.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.3
log
@[120871] gmf_head ldamus 051222 org.eclipse.gmf.runtime.emf.type.core needs NLS sweep
@
text
@d224 1
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d33 1
a33 1
import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.ResourceManager;
d96 6
a101 6
				.getInitException(
					id,
					ResourceManager
						.getMessage(
							EMFTypePluginStatusCodes.CONTAINMENT_FEATURE_NO_METAMODEL_KEY,
							new Object[] {featureConfigs[0]}), null);
d110 5
a114 3
				throw EMFTypePluginStatusCodes.getInitException(id,
					EMFTypePluginStatusCodes.CONTAINMENT_FEATURE_NO_QNAME_KEY,
					null);
d137 5
a141 2
					throw EMFTypePluginStatusCodes.getInitException(id,
						EMFTypePluginStatusCodes.MATCHER_NO_CLASS_KEY, null);
d162 8
a169 5
				Log.error(EMFTypePlugin.getPlugin(),
					EMFTypePluginStatusCodes.MATCHER_CLASS_NOT_FOUND,
					ResourceManager.getMessage(
						EMFTypePluginStatusCodes.MATCHER_CLASS_NOT_FOUND_KEY,
						new Object[] {matcherClassName}), e);
d215 8
a222 8
								.error(
									EMFTypePlugin.getPlugin(),
									EMFTypePluginStatusCodes.CONTAINMENT_FEATURE_NOT_REFERENCE_FEATURE,
									ResourceManager
										.getMessage(
											EMFTypePluginStatusCodes.CONTAINMENT_FEATURE_NOT_REFERENCE_FEATURE_KEY,
											new Object[] {nextFeatureName}),
									null);
a223 1
					} else {
d225 7
a231 7
							.error(
								EMFTypePlugin.getPlugin(),
								EMFTypePluginStatusCodes.CONTAINMENT_FEATURE_NO_SUCH_FEATURE,
								ResourceManager
									.getMessage(
										EMFTypePluginStatusCodes.CONTAINMENT_FEATURE_NO_SUCH_FEATURE_KEY,
										new Object[] {nextFeatureName}), null);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

