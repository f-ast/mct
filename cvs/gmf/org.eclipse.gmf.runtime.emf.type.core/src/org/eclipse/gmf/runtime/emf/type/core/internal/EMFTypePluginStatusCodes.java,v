head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080807-1333:1.5
	v20080807-1325:1.5
	v20080731-1520:1.5
	v20080725-1738:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.6
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080425-1959:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080114-2222:1.5
	v20080107-1111:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.4
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070518-1300:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5
	v20060919-0800:1.5
	v20060907-1100:1.5
	M1_20:1.5
	v20060831-1500:1.5
	v20060817-1500:1.5
	v20060803-1200:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.04.26.20.14.33;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.13.19.12.20;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.22.19.02.01;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.55;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[136760] gmf_head ldamus 060426  ElementTypeRegistry prevents deployment of different applications sharing the same metamodel
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core.internal;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;

import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.EMFTypeCoreMessages;

/**
 * Status codes for errors and warnings logged by the Element Type framework.
 * <P>
 * Also includes keys into the .properties file for error and warning messages.
 * 
 * @@author ldamus
 */
public class EMFTypePluginStatusCodes {

	//
	// Integer-valued error codes
	//

    public static final int COMMAND_FAILURE = 4;
    
	public static final int ERROR_PARSING_XML = 10;

	public static final int TYPE_NOT_INITED = 11;

	public static final int ADVICE_BINDING_NOT_INITED = 12;

	public static final int ELEMENT_NOT_INITED = 13;

	public static final int FACTORY_NOT_INITED = 14;

	public static final int METAMODEL_NOT_INITED = 15;
	
	public static final int CONTEXT_NOT_INITED = 16;

	public static final int EDIT_HELPER_ADVICE_CLASS_NOT_FOUND = 20;

	public static final int MATCHER_CLASS_NOT_FOUND = 21;

	public static final int EDIT_HELPER_CLASS_NOT_FOUND = 22;

	public static final int EXPRESSION_EVALUATION_FAILURE = 23;

	public static final int ELEMENT_TYPE_FACTORY_CLASS_NOT_FOUND = 24;

	public static final int CONTAINMENT_FEATURE_NOT_REFERENCE_FEATURE = 25;

	public static final int CONTAINMENT_FEATURE_NO_SUCH_FEATURE = 26;

	public static final int SPECIALIZATION_TYPE_SPECIALIZES_MULTIPLE_METAMODEL_TYPES = 27;

	public static final int SPECIALIZATION_TYPE_SPECIALIZES_INVALID_ID = 28;
	
	public static final int CONTAINMENT_FEATURE_NO_METAMODEL = 29;
	
	public static final int CLIENT_CONTEXT_NOT_INITED = 50;
	
	public static final int BINDING_NO_CONTEXT = 60;
	
	public static final int BINDING_NO_SUCH_CONTEXT = 61;
	
	public static final int PATTERN_INVALID_SYNTAX = 62;
	
	public static final int BINDING_NO_REF_OR_PATTERN = 63;
	
	public static final int BINDING_BOTH_REF_AND_PATTERN = 64;
	
	public static final int CLIENT_MATCHER_FAILURE = 70;
	
	public static final int CLIENT_NO_MATCHER = 71;


	/**
	 * Cannot be instantiated by clients.
	 */
	private EMFTypePluginStatusCodes() {
		// nothing to do
	}

	/**
	 * Convenience method to construct a new CoreException indicating that an
	 * advice binding failed to be created.
	 * 
	 * @@param adviceId
	 *            the advice binding ID
	 * @@param reason
	 *            the localized reason why the advice binding was
	 *            not initialized
	 * @@return the new CoreException
	 */
	public static CoreException getAdviceBindingInitException(String adviceId,
			String reason) {

		return new CoreException(new Status(IStatus.WARNING, EMFTypePlugin
				.getPluginId(), ADVICE_BINDING_NOT_INITED, EMFTypeCoreMessages
				.bind(EMFTypeCoreMessages.adviceBinding_not_init_WARN_,
						adviceId, reason), null));
	}

	/**
	 * Convenience method to construct a new CoreException indicating that an
	 * element type failed to be created.
	 * 
	 * @@param typeId
	 *            the element type ID
	 * @@param reason
	 *            the localized reason why the element type was not
	 *            initialized
	 * @@param e
	 *            an exception, if the failure was due to an exception
	 * @@return the new CoreException
	 */
	public static CoreException getTypeInitException(String typeId,
			String reason, Exception e) {

		return new CoreException(new Status(IStatus.WARNING, EMFTypePlugin
				.getPluginId(), TYPE_NOT_INITED, EMFTypeCoreMessages.bind(
				EMFTypeCoreMessages.type_not_init_WARN_, typeId, reason), e));
	}

	/**
	 * Convenience method to construct a new CoreException indicating that an
	 * element initialization failed.
	 * 
	 * @@param elementId
	 *            the element ID
	 * @@param reason
	 *            the localized reason why the element was not
	 *            initialized
	 * @@param e
	 *            an exception, if the failure was due to an exception
	 * @@return the new CoreException
	 */
	public static CoreException getInitException(String elementId,
			String reason, Exception e) {

		return new CoreException(new Status(IStatus.WARNING, EMFTypePlugin
				.getPluginId(), ELEMENT_NOT_INITED, EMFTypeCoreMessages.bind(
				EMFTypeCoreMessages.elment_not_init_WARN_, elementId, reason),
				e));
	}

	/**
	 * Convenience method to construct a new CoreException indicating that an
	 * element type factory initialization failed.
	 * 
	 * @@param factoryName
	 *            the factory name
	 * @@param reason
	 *            the localized reason why the element type factory
	 *            was not initialized
	 * @@return the new CoreException
	 */
	public static CoreException getFactoryInitException(String factoryName,
			String reason) {

		return new CoreException(new Status(IStatus.WARNING, EMFTypePlugin
				.getPluginId(), FACTORY_NOT_INITED, EMFTypeCoreMessages.bind(
				EMFTypeCoreMessages.elementTypeFactory_not_init_WARN_,
				factoryName, reason), null));
	}

	/**
	 * Convenience method to construct a new CoreException indicating that an
	 * metamodel element itialization failed.
	 * 
	 * @@param nsURI
	 *            the namespace URI
	 * @@param reason
	 *            the localized reason why the metamodel element
	 *            was not initialized
	 * @@return the new CoreException
	 */
	public static CoreException getMetamodelInitException(String nsURI,
			String reason) {

		return new CoreException(new Status(IStatus.WARNING, EMFTypePlugin
				.getPluginId(), METAMODEL_NOT_INITED, EMFTypeCoreMessages.bind(
				EMFTypeCoreMessages.metamodel_not_init_WARN_, nsURI, reason),
				null));
	}

	/**
	 * Convenience method to construct a new CoreException indicating that an
	 * element type factory initialization failed.
	 * 
	 * @@param factoryName
	 *            the factory name
	 * @@param reason
	 *            the localized reason why the element type factory
	 *            was not initialized
	 * @@return the new CoreException
	 */
	public static CoreException getContextInitException(String contextId,
			String reason) {

		return new CoreException(new Status(IStatus.WARNING, EMFTypePlugin
				.getPluginId(), CONTEXT_NOT_INITED, EMFTypeCoreMessages.bind(
				EMFTypeCoreMessages.clientContext_not_init_WARN_,
				contextId, reason), null));
	}
}

@


1.4
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d46 2
d68 17
d195 20
@


1.3
log
@[120871] gmf_head ldamus 051222 org.eclipse.gmf.runtime.emf.type.core needs NLS sweep
@
text
@d32 3
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d18 1
a18 1
import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.ResourceManager;
a63 81
	//
	// XML loading failure messages
	//
	public static final String ERROR_PARSING_XML_KEY = "xml.parsing_ERROR_"; //$NON-NLS-1$

	public static final String TYPE_NOT_INITED_KEY = "type.not-init_WARN_"; //$NON-NLS-1$

	public static final String ADVICE_BINDING_NOT_INITED_KEY = "adviceBinding.not-init_WARN_"; //$NON-NLS-1$

	public static final String ELEMENT_NOT_INITED_KEY = "element.not-init_WARN_"; //$NON-NLS-1$

	public static final String FACTORY_NOT_INITED_KEY = "elementTypeFactory.not-init_WARN_"; //$NON-NLS-1$

	public static final String METAMODEL_NOT_INITED_KEY = "metamodel.not-init_WARN_"; //$NON-NLS-1$

	//
	// Reasons for XML loading failure
	//
	public static final String TYPE_DUPLICATE_KEY = "type.reason.duplicate-id_WARN_"; //$NON-NLS-1$

	public static final String TYPE_NO_ID_KEY = "type.reason.no-id_WARN_"; //$NON-NLS-1$

	public static final String TYPE_NO_ECLASS_KEY = "type.reason.no-eclass_WARN_"; //$NON-NLS-1$

	public static final String TYPE_ECLASS_NOT_FOUND_KEY = "type.reason.eclass-not-found_WARN_"; //$NON-NLS-1$

	public static final String TYPE_NO_SPECIALIZED_KEY = "type.reason.no-specialized_WARN_"; //$NON-NLS-1$

	public static final String TYPE_NO_SPECIALIZED_ID_KEY = "type.reason.no-specialized-id_WARN_"; //$NON-NLS-1$

	public static final String TYPE_NO_PARAM_NAME_KEY = "type.reason.no-param-name_WARN_"; //$NON-NLS-1$

	public static final String TYPE_NO_PARAM_VALUE_KEY = "type.reason.no-param-value_WARN_"; //$NON-NLS-1$

	public static final String ADVICE_BINDING_NO_ID_KEY = "adviceBinding.reason.no-id_WARN_"; //$NON-NLS-1$

	public static final String ADVICE_BINDING_NO_TYPE_ID_KEY = "adviceBinding.reason.no-type-id_WARN_"; //$NON-NLS-1$

	public static final String ADVICE_BINDING_NO_EDIT_HELPER_ADVICE_KEY = "adviceBinding.reason.no-edit-helper-advice-id_WARN_"; //$NON-NLS-1$

	public static final String ADVICE_BINDING_INVALID_INHERITANCE = "adviceBinding.reason.invalid-inheritance_WARN_"; //$NON-NLS-1$
	
	public static final String CONTAINMENT_FEATURE_NO_QNAME_KEY = "element.reason.no-econtainmentfeature-qname_WARN_"; //$NON-NLS-1$
	
	public static final String CONTAINMENT_FEATURE_NO_METAMODEL_KEY = "element.reason.no-econtainmentfeature-metamodel_WARN_"; //$NON-NLS-1$

	public static final String ENABLEMENT_INVALID_EXPRESSION_KEY = "element.reason.invalid-enablement-expression_WARN_"; //$NON-NLS-1$

	public static final String MATCHER_NO_CLASS_KEY = "element.reason.matcher-no-class_WARN_"; //$NON-NLS-1$

	public static final String ELEMENT_TYPE_FACTORY_NO_FACTORY_KEY = "elementTypeFactory.reason.no-factory_WARN_"; //$NON-NLS-1$

	public static final String ELEMENT_TYPE_FACTORY_NO_KIND_KEY = "elementTypeFactory.reason.no-kind_WARN_"; //$NON-NLS-1$

	public static final String METAMODEL_NO_NSURI_KEY = "metamodel.reason.no-nsURI_WARN_"; //$NON-NLS-1$

	public static final String METAMODEL_NSURI_NOT_FOUND_KEY = "metamodel.reason.nsURI-not-found_WARN_"; //$NON-NLS-1$

	
	//
	// Errors
	//
	public static final String EDIT_HELPER_ADVICE_CLASS_NOT_FOUND_KEY = "editHelperAdvice.class-not-found_ERROR_"; //$NON-NLS-1$

	public static final String MATCHER_CLASS_NOT_FOUND_KEY = "matcher.class-not-found_ERROR_"; //$NON-NLS-1$

	public static final String EDIT_HELPER_CLASS_NOT_FOUND_KEY = "editHelper.class-not-found_ERROR_"; //$NON-NLS-1$

	public static final String EXPRESSION_EVALUATION_FAILURE_KEY = "expression.evaluation-failure_ERROR_"; //$NON-NLS-1$

	public static final String ELEMENT_TYPE_FACTORY_CLASS_NOT_FOUND_KEY = "elementTypeFactory.class-not-found_ERROR_"; //$NON-NLS-1$

	public static final String CONTAINMENT_FEATURE_NOT_REFERENCE_FEATURE_KEY = "eContainmentFeature.not-reference-feature_ERROR_"; //$NON-NLS-1$

	public static final String CONTAINMENT_FEATURE_NO_SUCH_FEATURE_KEY = "eContainmentFeature.no-such-feature_ERROR_"; //$NON-NLS-1$

	public static final String SPECIALIZATION_TYPE_SPECIALIZES_MULTIPLE_METAMODEL_TYPES_KEY = "specializationType.specializes-multiple-metamodel-types_ERROR_"; //$NON-NLS-1$

	public static final String SPECIALIZATION_TYPE_SPECIALIZES_INVALID_ID_KEY = "specializationType.specializes-invalid-id_ERROR_"; //$NON-NLS-1$

	
d77 2
a78 2
	 * @@param argKey
	 *            resource bundle key of the reason why the advice binding was
d83 1
a83 1
			String argKey) {
d86 3
a88 3
			.getPluginId(), ADVICE_BINDING_NOT_INITED, ResourceManager
			.getMessage(ADVICE_BINDING_NOT_INITED_KEY, new Object[] {adviceId,
				ResourceManager.getLocalizedString(argKey)}), null));
d97 2
a98 2
	 * @@param argKey
	 *            resource bundle key of the reason why the element type was not
d105 1
a105 1
			String argKey, Exception e) {
d108 2
a109 3
			.getPluginId(), TYPE_NOT_INITED, ResourceManager.getMessage(
			TYPE_NOT_INITED_KEY, new Object[] {typeId,
				ResourceManager.getLocalizedString(argKey)}), e));
d118 2
a119 2
	 * @@param argKey
	 *            resource bundle key of the reason why the element was not
d126 1
a126 1
			String argKey, Exception e) {
d129 3
a131 3
			.getPluginId(), ELEMENT_NOT_INITED, ResourceManager.getMessage(
			ELEMENT_NOT_INITED_KEY, new Object[] {elementId,
				ResourceManager.getLocalizedString(argKey)}), e));
d140 2
a141 2
	 * @@param argKey
	 *            resource bundle key of the reason why the element type factory
d146 1
a146 1
			String argKey) {
d149 3
a151 3
			.getPluginId(), FACTORY_NOT_INITED, ResourceManager.getMessage(
			FACTORY_NOT_INITED_KEY, new Object[] {factoryName,
				ResourceManager.getLocalizedString(argKey)}), null));
d160 2
a161 2
	 * @@param argKey
	 *            resource bundle key of the reason why the metamodel element
d166 1
a166 1
			String argKey) {
d169 3
a171 3
			.getPluginId(), METAMODEL_NOT_INITED, ResourceManager.getMessage(
			METAMODEL_NOT_INITED_KEY, new Object[] {nsURI,
				ResourceManager.getLocalizedString(argKey)}), null));
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

