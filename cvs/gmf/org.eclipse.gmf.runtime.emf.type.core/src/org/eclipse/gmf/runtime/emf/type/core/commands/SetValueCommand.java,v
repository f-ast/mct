head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080807-1333:1.7
	v20080807-1325:1.7
	v20080731-1520:1.7
	v20080725-1738:1.7
	v20080722-1827:1.7
	R2_1_maintenance:1.7.0.4
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080425-1959:1.7
	v20080328-1605:1.7
	v20080222-1200:1.7
	v20080114-2222:1.7
	v20080107-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	RC3_20:1.7
	v20070601-1400:1.7
	v20070518-1300:1.7
	v20070403-1500:1.7
	v20070330-1300:1.7
	v20070208-1800:1.7
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061013-1330:1.6
	v20060919-0800:1.5.2.1
	v20060907-1100:1.5.2.1
	M1_20:1.5
	v20060831-1500:1.5
	v20060817-1500:1.5
	v20060803-1200:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.5
	I20060505-1400:1.5
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2007.01.05.15.23.59;	author mmostafa;	state Exp;
branches;
next	1.6;
commitid	4026459e6d8f4567;

1.6
date	2006.10.03.15.06.37;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.04.19.49.40;	author vramaswamy;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.02.16.20.44.02;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.13.19.12.20;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.43;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.09.01.16.19.48;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[152080]  gmf_head mmostafa 070104 SetValueCommand does not support multi-valued references
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core.commands;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.util.FeatureMapUtil;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;

/**
 * Command to set the value of a feature of a model element.
 * 
 * @@author ldamus, mmostafa
 */
public class SetValueCommand
	extends EditElementCommand {

	/**
	 * The feature whose value should be set.
	 */
	private final EStructuralFeature feature;

	/**
	 * The new value.
	 */
	private final Object value;

	/**
	 * Constructs a new command to set the value of a feature of a model
	 * element.
	 * 
	 * @@param request
	 *            the set value request
	 */
	public SetValueCommand(SetRequest request) {
		super(request.getLabel(), request.getElementToEdit(), request);

		this.feature = request.getFeature();
		this.value = request.getValue();
	}

	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info)
	    throws ExecutionException {

        EObject elementToEdit = getElementToEdit();
        boolean many = FeatureMapUtil.isMany(elementToEdit,feature);
        if (many) {
            Collection collection = ((Collection)elementToEdit.eGet(feature));
            if (value instanceof List){
                List values = (List)value;
                collection.clear();
                collection.addAll(values);
            }else {
                collection.add(value);
            }
        } else {
            getElementToEdit().eSet(feature, value);
        }
        return CommandResult.newOKCommandResult();
	}
    
    /**
     * Checks that the feature is a modifiable feature of the element whose
     * value will be set by this command. Also checks that the new value is of
     * the correct type for the feature.
     */
    public boolean canExecute() {
        EObject elementToEdit = getElementToEdit();
        if (elementToEdit == null || !super.canExecute()) {
            return false;
        }
        boolean many = FeatureMapUtil.isMany(elementToEdit, feature);
        if (value == null && many) {
            return false;
        }
        List allFeatures = getElementToEdit().eClass()
            .getEAllStructuralFeatures();
        if (allFeatures.contains(feature) && feature.isChangeable()){
            if (!many && (value==null || feature.getEType().isInstance(value)))
                return true;
            else {
                return verifyMany();
            }
        }
        return false;
    }
    
    private boolean verifyMany() {
        if (value instanceof List){
            List values = (List)value;
            for (Iterator iter = values.iterator(); iter.hasNext();) {
                Object element = iter.next();
                if (!feature.getEType().isInstance(element))
                    return false;
            }
            return true;
        }
        return feature.getEType().isInstance(value);
    }

}@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
d15 1
d21 1
a23 1

d30 1
a30 1
 * @@author ldamus
d62 15
a76 7
		if (FeatureMapUtil.isMany(getElementToEdit(),feature)) {
			((Collection) getElementToEdit().eGet(feature)).add(value);

		} else {
			getElementToEdit().eSet(feature, value);
		}
		return CommandResult.newOKCommandResult();
d85 2
a86 2

        if (getElementToEdit() == null || !super.canExecute()) {
d89 2
a90 2

        if (value == null && FeatureMapUtil.isMany(getElementToEdit(), feature)) {
a92 1

d95 21
a115 3

        return allFeatures.contains(feature) && feature.isChangeable()
            && (value == null || feature.getEType().isInstance(value));
@


1.5
log
@[131094] gmf_head cmcgee 060504 Sweep Code for EReference.isMany() calls
@
text
@d77 1
a77 1
        if (!super.canExecute()) {
@


1.5.2.1
log
@[152302] gmf_R1_0_maintenance ldamus 060901 NPE while creating SetValueCommand without domain element
@
text
@d77 1
a77 1
        if (getElementToEdit() == null || !super.canExecute()) {
@


1.4
log
@[114944] gmf_head ldamus 060216 SetValueCommand: no checks that specified value may be set
@
text
@d21 1
d61 1
a61 1
		if (feature.isMany()) {
d81 1
a81 1
        if (value == null && feature.isMany()) {
@


1.3
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d15 1
d68 22
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d16 2
d56 3
a58 1
	protected CommandResult doExecute(IProgressMonitor progressMonitor) {
d65 1
a65 1
		return newOKCommandResult();
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

