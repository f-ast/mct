head	1.1;
access;
symbols
	v20081020-0700:1.1
	v20080807-1333:1.1
	v20080807-1325:1.1
	v20080731-1520:1.1
	v20080725-1738:1.1
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.6
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20080328-1605:1.1
	v20080222-1200:1.1
	v20080114-2222:1.1
	v20080107-1111:1.1
	v20071130-1111:1.1
	v20071124-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.4
	R2_0:1.1
	R4_20:1.1
	RC3_20:1.1
	v20070601-1400:1.1
	v20070518-1300:1.1
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1
	v20060919-0800:1.1
	v20060907-1100:1.1
	M1_20:1.1
	v20060831-1500:1.1
	v20060817-1500:1.1
	v20060803-1200:1.1
	v20060721-1130:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1;
locks; strict;
comment	@# @;


1.1
date	2006.04.26.20.14.33;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.1
log
@[136760] gmf_head ldamus 060426  ElementTypeRegistry prevents deployment of different applications sharing the same metamodel
@
text
@/******************************************************************************
 * Copyright (c) 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core.internal.impl;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.emf.type.core.ClientContext;
import org.eclipse.gmf.runtime.emf.type.core.ClientContextManager;
import org.eclipse.gmf.runtime.emf.type.core.IClientContext;
import org.eclipse.gmf.runtime.emf.type.core.IElementMatcher;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.IElementTypeDescriptor;
import org.eclipse.gmf.runtime.emf.type.core.internal.descriptors.IEditHelperAdviceDescriptor;

/**
 * The default client context which includes the types and advice specifically
 * bound to it, as well as any types and advice to which no other context has
 * been bound.
 * 
 * @@author ldamus
 */
public final class DefaultClientContext extends ClientContext {

	/**
	 * Identifier for the default client context.
	 */
	public static final String ID = "org.eclipse.gmf.runtime.emf.type.core.defaultContext"; //$NON-NLS-1$

	/**
	 * The singleton instance.
	 */
	private static IClientContext _instance;

	/**
	 * Gets the singleton instance.
	 * 
	 * @@return the default client context
	 */
	public static final IClientContext getInstance() {
		if (_instance == null) {
			_instance = new DefaultClientContext();
		}
		return _instance;
	}

	/**
	 * Private constructor for the singleton.
	 */
	private DefaultClientContext() {
		super(ID, new IElementMatcher() {
			public boolean matches(EObject eObject) {
				return true;
			}
		});
	}

	/**
	 * Includes the <code>elementTypeDescriptor</code> if it is explicitly
	 * bound to me, or there is no other context bound to it.
	 */
	public boolean includes(IElementTypeDescriptor elementTypeDescriptor) {
		boolean result = super.includes(elementTypeDescriptor);

		if (!result) {
			result = ClientContextManager.getInstance().getBinding(
					elementTypeDescriptor) == _instance;
		}
		return result;
	}

	/**
	 * Includes the <code>advice</code> if it is explicitly bound to me, or
	 * there is no other context bound to it.
	 */
	public boolean includes(IEditHelperAdviceDescriptor advice) {
		boolean result = super.includes(advice);

		if (!result) {
			result = ClientContextManager.getInstance().getBinding(advice) == _instance;
		}
		return result;
	}

	/**
	 * Includes the <code>elementTyper</code> if it is explicitly bound to me,
	 * or there is no other context bound to it.
	 */
	public boolean includes(IElementType elementType) {
		boolean result = super.includes(elementType);

		if (!result) {
			result = ClientContextManager.getInstance().getBinding(elementType) == _instance;
		}
		return result;
	}

}
@
