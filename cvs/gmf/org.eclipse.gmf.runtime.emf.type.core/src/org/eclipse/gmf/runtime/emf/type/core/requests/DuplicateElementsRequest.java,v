head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080807-1333:1.5
	v20080807-1325:1.5
	v20080731-1520:1.5
	v20080725-1738:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.6
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080425-1959:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080114-2222:1.5
	v20080107-1111:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.4
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070518-1300:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5
	v20060919-0800:1.5
	v20060907-1100:1.5
	M1_20:1.5
	v20060831-1500:1.5
	v20060817-1500:1.5
	v20060803-1200:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.04.26.20.14.33;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.13.19.12.20;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.22.19.02.01;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.49;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[136760] gmf_head ldamus 060426  ElementTypeRegistry prevents deployment of different applications sharing the same metamodel
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core.requests;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.emf.type.core.EditHelperContext;
import org.eclipse.gmf.runtime.emf.type.core.IClientContext;
import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.EMFTypeCoreMessages;

/**
 * Request to duplicate a model element.
 * 
 * @@author ldamus
 */
public class DuplicateElementsRequest extends AbstractEditCommandRequest {

	/**
	 * The common container of all of the elements to be duplicated.
	 */
	private EObject commonContainer;

	/**
	 * The elements to be duplicated.
	 */
	private List elementsToDuplicate;

	/**
	 * This will be populated with all the elements that are duplicated after
	 * the command executes. The key is the original element and the value is
	 * the new duplicated element. There may be more elements duplicated than
	 * the original list of elements passed in (e.g. contained elements) --
	 * these will appear in this map.
	 */
	private Map allDuplicatedElementsMap = new HashMap();

	/**
	 * The duplicate element. Will be <code>null</code> until this request has
	 * been answered.
	 */
	private EObject duplicate;

	/**
	 * Constructs a new request to duplicate a model element.
	 * 
	 * @@param editingDomain
	 *            the editing domain in which I am requesting to make model
	 */
	public DuplicateElementsRequest(TransactionalEditingDomain editingDomain) {

		this(editingDomain, null);
	}

	/**
	 * Constructs a new request to duplicate a model element.
	 * 
	 * @@param editingDomain
	 *            the editing domain in which I am requesting to make model
	 * @@param elementToDuplicate
	 *            the element to be duplicated
	 */
	public DuplicateElementsRequest(TransactionalEditingDomain editingDomain,
			List elementsToDuplicate) {

		super(editingDomain);
		this.elementsToDuplicate = elementsToDuplicate;
	}
    
    /**
     * Constructs a new request to duplicate a model element.  The editing domain will be
     * derived from the elements in {@@link #getElementsToBeDuplicated()}.
     * 
     */
    public DuplicateElementsRequest() {

        this(null, null);
    }
    
    /**
     * Constructs a new request to duplicate a model element. The editing domain will be
     * derived from the elements in {@@link #getElementsToBeDuplicated()}.
     * 
     * @@param elementToDuplicate
     *            the element to be duplicated
     */
    public DuplicateElementsRequest(List elementsToDuplicate) {

        this(null, elementsToDuplicate);
    }

	/**
	 * Returns a map of all duplicated elements. This will be populated with all
	 * the elements that are duplicated after the command executes. The key is
	 * the original element and the value is the new duplicated element. There
	 * may be more elements duplicated than the original list of elements passed
	 * in (e.g. contained elements) -- these will appear in this map.
	 * 
	 * @@return Returns the allDuplicatedElementsMap.
	 */
	public Map getAllDuplicatedElementsMap() {
		return allDuplicatedElementsMap;
	}

	/**
	 * Returns the primary elements to be duplicated.
	 * 
	 * @@return Returns the elements to be duplicated.
	 */
	public List getElementsToBeDuplicated() {
		return elementsToDuplicate;
	}

	/**
	 * Gets the duplicate. Will return <code>null</code> until the request has
	 * been answered.
	 * 
	 * @@return the duplicate
	 */
	public EObject getDuplicate() {
		return duplicate;
	}

	/**
	 * Sets the duplicate.
	 * 
	 * @@param duplicate
	 *            the duplicate
	 */
	public void setAllDuplicatedElementsMap(Map duplicatedElementsMap) {
		this.allDuplicatedElementsMap = duplicatedElementsMap;
	}
    
    /**
     * Sets the primary elements to be duplicated.
     * 
     * @@param elements
     *            The elements to be duplicated.
     */
    public void setElementsToBeDuplicated(List elements) {
        this.elementsToDuplicate = elements;
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.edithelper.IEditCommandRequest#getElementsToEdit()
	 */
	public List getElementsToEdit() {
		return elementsToDuplicate;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditCommandRequest#getDefaultLabel()
	 */
	protected String getDefaultLabel() {
		return EMFTypeCoreMessages.Request_Label_Duplicate;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.type.core.edithelper.IEditCommandRequest#getEditHelperContext()
	 */
	public Object getEditHelperContext() {

		if (commonContainer == null) {
			commonContainer = getLeastCommonContainer(getElementsToBeDuplicated());
		}
		
		IClientContext context = getClientContext();
		
		if (context == null) {
			return commonContainer;
			
		} else {
			return new EditHelperContext(commonContainer, context);
		}
	}

	/**
	 * Finds the first common container of a collection of objects, or
	 * <code>null</code> if there is not common container.
	 * 
	 * @@param objects
	 *            the elements
	 * @@return the least common container that containes all of the
	 *         <code>objects</code>, or <code>null</code> if there is no
	 *         common container.
	 */
	private static EObject getLeastCommonContainer(Collection objects) {

		EObject commonContainer = null;
		List prevContainers = new ArrayList();

		for (Iterator i = objects.iterator(); i.hasNext();) {
			EObject nextElement = (EObject) i.next();

			boolean found = false;
			List containers = new ArrayList();
			EObject container = nextElement;

			// Construct the list of containers for this next element.
			while (container != null) {
				containers.add(container);

				if (!found) {

					if ((prevContainers.isEmpty()) || (commonContainer == null)) {
						commonContainer = container;
						found = true;

					} else if ((prevContainers.contains(container))
							&& (contains(container, commonContainer))) {

						commonContainer = container;
						found = true;
					}
				}
				container = container.eContainer();
			}

			if (!found) {
				return null;
			}
			prevContainers = containers;
		}
		return commonContainer;
	}

	/**
	 * Checks if a model element is contained by another element, recursively.
	 * 
	 * @@param container
	 *            the container element
	 * @@param eObject
	 *            the element to be tested to see if it is contained in the
	 *            container
	 * @@return <code>true</code> if <code>container</code> contains
	 *         <code>eObject</code>,<code>false</code> otherwise.
	 */
	private static boolean contains(EObject container, EObject eObject) {

		if (container == eObject) {
			return true;

		} else if ((container == null) || (eObject == null)) {
			return false;

		} else {
			return contains(container, eObject.eContainer());
		}
	}
    

    /**
     * Derives the editing domain from the elements to be duplicated, if it hasn't
     * already been specified.
     */
    public TransactionalEditingDomain getEditingDomain() {
        TransactionalEditingDomain result = super.getEditingDomain();

        if (result == null) {
            EObject eObject = (EObject) ((getElementsToBeDuplicated().size() > 0) ? getElementsToBeDuplicated()
                .get(0)
                : null);
            
            if (eObject != null) {
                result = TransactionUtil.getEditingDomain(eObject); 
            }
        }
        return result;
    }
}@


1.4
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d24 2
d188 9
a196 1
		return commonContainer;
@


1.3
log
@[120871] gmf_head ldamus 051222 org.eclipse.gmf.runtime.emf.type.core needs NLS sweep
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d22 2
a23 1

d31 2
a32 3
public class DuplicateElementsRequest
	extends AbstractEditCommandRequest {
	
d60 3
d64 1
a64 1
	public DuplicateElementsRequest() {
d66 1
a66 1
		this(null);
d72 2
d77 2
a78 1
	public DuplicateElementsRequest(List elementsToDuplicate) {
d80 1
a80 1
		super();
d83 23
a105 1
	
d127 1
d147 10
d182 1
a182 1
		
d188 1
a188 1
	
d190 2
a191 2
	 * Finds the first common container of a collection of objects, or <code>null</code> if
	 * there is not common container.
d195 3
a197 2
	 * @@return the least common container that containes all of the <code>objects</code>, or
	 * <code>null</code> if there is no common container.
d206 1
a206 1
			
d210 1
a210 1
			
d222 1
a222 1
						&& (contains(container, commonContainer))) {
d254 1
a254 1
			
d257 1
a257 1
			
d262 20
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d23 1
a23 1
import org.eclipse.gmf.runtime.emf.type.core.internal.l10n.ResourceManager;
d134 1
a134 2
		return ResourceManager.getInstance().getString(
			"Request.Label.Duplicate"); //$NON-NLS-1$
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

