head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080807-1333:1.5
	v20080807-1325:1.5
	v20080731-1520:1.5
	v20080725-1738:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080425-1959:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080114-2222:1.5
	v20080107-1111:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070518-1300:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5
	v20060919-0800:1.4.2.2
	v20060907-1100:1.4.2.1
	M1_20:1.4
	v20060831-1500:1.4.2.1
	v20060817-1500:1.4
	v20060803-1200:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	I20060505-1400:1.4
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.10.03.15.06.37;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.04.19.49.40;	author vramaswamy;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2006.02.13.19.12.20;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.43;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.08.28.20.36.12;	author ldamus;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2006.09.13.16.46.15;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.5
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core.commands;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.FeatureMapUtil;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;

/**
 * Command to destroy a reference from one element to another.
 * 
 * @@author ldamus
 */
public class DestroyReferenceCommand
	extends EditElementCommand {

	/**
	 * The element that contains the reference.
	 */
	private EObject container;

	/**
	 * The feature in the <code>container</code> that contains the reference.
	 */
	private EReference containingFeature;

	/**
	 * The referenced object.
	 */
	private EObject referencedObject;

	/**
	 * Constructs a new command to destroy a model element.
	 * 
	 * @@param request
	 *            the destroy element requestO
	 */
	public DestroyReferenceCommand(DestroyReferenceRequest request) {

		super(request.getLabel(), request.getContainer(), request);
		this.container = request.getContainer();
		this.containingFeature = request.getContainingFeature();
		this.referencedObject = request.getReferencedObject();
	}

    protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info)
        throws ExecutionException {

		List features = new ArrayList();

		if (getContainingFeature() == null) {
			features.addAll(getContainer().eClass().getEAllReferences());

		} else {
			features.add(getContainingFeature());
		}

		for (Iterator i = features.iterator(); i.hasNext();) {
			EReference nextReference = (EReference) i.next();
			if (nextReference.isChangeable() && !nextReference.isDerived()
				&& getContainer().eIsSet(nextReference)) {
				if (FeatureMapUtil.isMany(getContainer(), nextReference)) {
					Collection referenceCollection = (Collection) getContainer()
						.eGet(nextReference);
					referenceCollection.remove(getReferencedObject());
				} else if (getContainer().eGet(nextReference) == getReferencedObject()) {
					getContainer().eSet(nextReference, null);
				}
			}
		}
		return CommandResult.newOKCommandResult();
	}

	/**
	 * Gets element that contains the reference.
	 * 
	 * @@return the element that contains the reference
	 */
	protected EObject getContainer() {
		return container;
	}

	/**
	 * Gets the feature in the <code>container</code> that contains the
	 * reference.
	 * 
	 * @@return the feature in the <code>container</code> that contains the
	 *         reference.
	 */
	protected EReference getContainingFeature() {
		return containingFeature;
	}

	/**
	 * Gets the referenced object.
	 * 
	 * @@return the referenced object.
	 */
	protected EObject getReferencedObject() {
		return referencedObject;
	}

	public boolean canExecute() {
		return getReferencedObject() != null && getContainer() != null;
	}

}@


1.4
log
@[131094] gmf_head cmcgee 060504 Sweep Code for EReference.isMany() calls
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d80 5
a84 6

			if (FeatureMapUtil.isMany(getContainer(), nextReference)) {
				Collection referenceCollection = (Collection) getContainer()
					.eGet(nextReference);

				if (referenceCollection.contains(getReferencedObject())) {
d86 2
a88 3

			} else if (getContainer().eGet(nextReference) == getReferencedObject()) {
				getContainer().eSet(nextReference, null);
@


1.4.2.1
log
@[155233] gmf_R1_0_maintenance ylulu 060828 Deleting and element using the EditHelpers could be enhanced
@
text
@d80 6
a85 5
			if (nextReference.isChangeable() && !nextReference.isDerived()
				&& getContainer().eIsSet(nextReference)) {
				if (FeatureMapUtil.isMany(getContainer(), nextReference)) {
					Collection referenceCollection = (Collection) getContainer()
						.eGet(nextReference);
a86 2
				} else if (getContainer().eGet(nextReference) == getReferencedObject()) {
					getContainer().eSet(nextReference, null);
d88 3
@


1.4.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.3
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d24 1
d81 1
a81 1
			if (nextReference.isMany()) {
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d19 2
d65 2
a66 1
	protected CommandResult doExecute(IProgressMonitor progressMonitor) {
d92 1
a92 1
		return newOKCommandResult();
d124 1
a124 6
	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.commands.core.internal.commands.EditElementCommand#isExecutable()
	 */
	public boolean isExecutable() {
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

