head	1.1;
access;
symbols
	v20081020-0700:1.1
	v20080807-1333:1.1
	v20080807-1325:1.1
	v20080731-1520:1.1
	v20080725-1738:1.1
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.6
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20080328-1605:1.1
	v20080222-1200:1.1
	v20080114-2222:1.1
	v20080107-1111:1.1
	v20071130-1111:1.1
	v20071124-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.4
	R2_0:1.1
	R4_20:1.1
	RC3_20:1.1
	v20070601-1400:1.1
	v20070518-1300:1.1
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1
	v20060919-0800:1.1
	v20060907-1100:1.1
	M1_20:1.1
	v20060831-1500:1.1
	v20060817-1500:1.1
	v20060803-1200:1.1
	v20060721-1130:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1;
locks; strict;
comment	@# @;


1.1
date	2006.04.26.20.14.33;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.1
log
@[136760] gmf_head ldamus 060426  ElementTypeRegistry prevents deployment of different applications sharing the same metamodel
@
text
@/******************************************************************************
 * Copyright (c) 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.type.core;

import java.util.Collection;
import java.util.regex.Pattern;

import org.eclipse.gmf.runtime.emf.type.core.internal.descriptors.IEditHelperAdviceDescriptor;

/**
 * Interface of an object that defines a context to which clients of the element
 * type registry may bind element types and advice. This effectively selects the
 * types and advice that are applicable to the model defined by a client.
 * <p>
 * This interface is not intended to be implemented outside of the element type
 * framework.
 * </p>
 * 
 * @@author ldamus
 */
public interface IClientContext {

	/**
	 * Returns the context ID defined by the client if this is not a
	 * multi-context. It is is a mult-context, returns the multi-context ID.
	 * 
	 * @@return my context ID
	 */
	String getId();

	/**
	 * Returns whether this context is a multi-context, which is a compound
	 * context representing a group of client contexts.
	 * <p>
	 * 
	 * @@return <code>true</code> for a multi-context, <code>false</code>
	 *         otherwise
	 */
	public boolean isMultiClientContext();

	/**
	 * Returns a list of {@@link IClientContext}s contained in this
	 * multi-context, or an empty list if this is not a multi-context.
	 * 
	 * @@return an array of client context objects
	 */
	public Collection getChildren();

	/**
	 * Obtains the element matcher that determines the elements belong to me.
	 * 
	 * @@return my selector
	 */
	IElementMatcher getMatcher();

	/**
	 * Binds a specific element type or advice to me.
	 * 
	 * @@param typeId
	 *            the ID of a element type or advice that is to be bound to me
	 */
	public void bindId(String typeId);

	/**
	 * Binds a pattern of element types and advice to me.
	 * 
	 * @@param pattern
	 *            the pattern of element type and advice IDs that are bound to
	 *            me
	 */
	public void bindPattern(Pattern pattern);

	/**
	 * Queries whether I am bound to the specified
	 * <code>elementTypeDescriptor</code>.
	 * 
	 * @@param elementTypeDescriptor
	 *            an element type descriptor
	 * @@return <code>true</code> if I am bound to the
	 *         <code>elementTypeDescriptor</code>; <code>false</code>,
	 *         otherwise
	 */
	boolean includes(IElementTypeDescriptor elementTypeDescriptor);

	/**
	 * Queries whether I am bound to the specified <code>elementType</code>.
	 * 
	 * @@param elementType
	 *            an element type
	 * @@return <code>true</code> if I am bound to the <code>elementType</code>;
	 *         <code>false</code>, otherwise
	 */
	boolean includes(IElementType elementType);

	/**
	 * Queries whether I am bound to the specified <code>adviceDescriptor</code>.
	 * 
	 * @@param advice
	 *            an edit helper advice descriptor
	 * @@return <code>true</code> if I am bound to the <code>a</code>;
	 *         <code>false</code>, otherwise
	 */
	boolean includes(IEditHelperAdviceDescriptor adviceDescriptor);
}@
