head	1.6;
access;
symbols
	v20080924-1925:1.6
	v20080917-1925:1.6
	v20080911-1728:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20051030:1.5;
locks; strict;
comment	@# @;


1.6
date	2005.11.02.23.30.53;	author sshaw;	state dead;
branches;
next	1.5;

1.5
date	2005.09.22.15.42.27;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.12.21.26.25;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.08.18.58.43;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.48.03;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.45;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.providers.internal;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint;
import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;
import org.eclipse.gmf.runtime.diagram.core.util.ViewType;
import org.eclipse.gmf.runtime.diagram.ui.view.factories.BasicNodeViewFactory;
import org.eclipse.gmf.runtime.diagram.ui.view.factories.ConnectorViewFactory;
import org.eclipse.gmf.runtime.diagram.ui.view.factories.NoteViewFactory;
import org.eclipse.gmf.runtime.diagram.ui.view.factories.TextShapeViewFactory;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Supports the creation of <b>presentation</b> view elements.  
 * Presentation elemenst are commonly used by all plugins.
 * 
 * @@author schafe
 * @@canBeSeenBy org.eclipse.gmf.runtime.diagram.ui.providers.*
 */
public class PresentationViewProvider extends AbstractViewProvider {
	
	private static PresentationViewProvider instance;

	public PresentationViewProvider() {
		instance = this;
	}

	/** list of supported shape views. */
	private Map nodeMap = new HashMap();
	{
		nodeMap.put(CommonParserHint.DESCRIPTION, BasicNodeViewFactory.class);
		nodeMap.put(ViewType.DIAGRAM_NAME, BasicNodeViewFactory.class);
		nodeMap.put(ViewType.NOTE, NoteViewFactory.class);
		nodeMap.put(ViewType.TEXT, TextShapeViewFactory.class);
		nodeMap.put(NotationPackage.eINSTANCE.getDiagram(), NoteViewFactory.class);	
	}
	/** list of supported connector views. */
	static private Map connectorMap = new HashMap();
	{
		connectorMap.put(
			ViewType.NOTEATTACHMENT,
			ConnectorViewFactory.class);
	}

	/**
	 * Returns the shape view class to instantiate based on the passed params
	 * @@param semanticAdapter
	 * @@param containerView
	 * @@param semanticHint
	 * @@return Class
	 */
	protected Class getNodeViewClass(
		IAdaptable semanticAdapter,
		View containerView,
		String semanticHint) {
		if (semanticHint != null && semanticHint.length() > 0)
			return (Class)nodeMap.get(semanticHint);
		return (Class)nodeMap.get(getSemanticEClass(semanticAdapter));
	}

	/**
	 * Returns the connector view class to instantiate based on the passed params
	 * @@param semanticAdapter
	 * @@param containerView
	 * @@param semanticHint
	 * @@return Class
	 */
	protected Class getConnectorViewClass(
		IAdaptable semanticAdapter,
		View containerView,
		String semanticHint) {
		return (Class) connectorMap.get(semanticHint);
	}
	
	
	public static boolean isNoteView(View view) {
		if ((instance != null) && (view != null)) {
			return (instance.nodeMap.get(view.getType()) instanceof NoteViewFactory);
		}
		return false;
	}
	
	public static boolean isTextView(View view){
		if ((instance != null) && (view != null)) {
			return (instance.nodeMap.get(view.getType()) instanceof TextShapeViewFactory);
		}
		return false;
	}
}
@


1.5
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@@


1.4
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d20 1
a20 1
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
d47 3
a49 3
		nodeMap.put(Properties.DIAGRAM_NAME, BasicNodeViewFactory.class);
		nodeMap.put(Properties.NOTE, NoteViewFactory.class);
		nodeMap.put(Properties.TEXT, TextShapeViewFactory.class);
d56 1
a56 1
			Properties.NOTEATTACHMENT,
@


1.3
log
@Bugzilla 109092  : rumv_head mmostafa 050908 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@a15 1

d17 1
a17 5
import org.eclipse.gmf.runtime.diagram.core.internal.services.view.AbstractViewProvider;
import org.eclipse.gmf.runtime.diagram.ui.internal.view.factories.DiagramTextCompartmentViewFactory;
import org.eclipse.gmf.runtime.diagram.ui.internal.view.factories.NoteAttachmentViewFactory;
import org.eclipse.gmf.runtime.diagram.ui.internal.view.factories.NoteViewFactory;
import org.eclipse.gmf.runtime.diagram.ui.internal.view.factories.TextViewFactory;
d19 4
d44 2
a45 2
		nodeMap.put(CommonParserHint.DESCRIPTION, DiagramTextCompartmentViewFactory.class);
		nodeMap.put(Properties.DIAGRAM_NAME, DiagramTextCompartmentViewFactory.class);
d47 1
a47 1
		nodeMap.put(Properties.TEXT, TextViewFactory.class);
d55 1
a55 1
			NoteAttachmentViewFactory.class);
d98 1
a98 1
			return (instance.nodeMap.get(view.getType()) instanceof TextViewFactory);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d24 2
a25 2
import com.ibm.xtools.notation.NotationPackage;
import com.ibm.xtools.notation.View;
@

