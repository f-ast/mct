head	1.9;
access;
symbols
	v20081020-0700:1.9
	v20080813-1510:1.9
	v20080811-1546:1.9
	v20080722-1827:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080603-1553:1.9
	v20080521:1.8
	v20080503-1740:1.8
	v20080425-1959:1.7
	v20080417-1610:1.7
	v20080409-1326:1.7
	v20080328-1605:1.7
	v20080222-1200:1.7
	v20080201-2010:1.7
	v20080118-1129:1.6.4.1
	v20080114-2222:1.6.4.1
	v20071222-1111:1.7
	v20071214-1111:1.7
	v20071207-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.6.4.1
	v20071108-0000:1.7
	v20071003-0000:1.6
	v20070915-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.4
	R2_0:1.6
	R4_20:1.6
	RC3_20:1.6
	v20070608-1300:1.6
	v20070601-1400:1.6
	v20070518-1300:1.6
	bugzilla111892_group_support:1.6.0.2
	Root_bugzilla111892_group_support:1.6
	v20070405-2000:1.6
	v20070330-1300:1.6
	v20070208-1800:1.6
	v20070202-0200:1.5.2.2
	v20070111-0800:1.5.2.2
	M4_20:1.6
	v20061218-1500:1.5.2.2
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	v20061012-1100:1.5.2.2
	v20060919-0800:1.5.2.2
	M1_20:1.5
	v20060824-1600:1.5.2.2
	v20060803-1200:1.5.2.2
	v20060721-1130:1.5.2.1
	v20060713-1700:1.5.2.1
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051201-1800:1.4
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.9
date	2008.06.02.16.00.13;	author ahunter;	state Exp;
branches;
next	1.8;
commitid	571f4844190c4567;

1.8
date	2008.05.03.20.56.23;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	60b6481cd1754567;

1.7
date	2007.11.06.13.59.49;	author crevells;	state Exp;
branches;
next	1.6;
commitid	44d1473073554567;

1.6
date	2006.10.03.15.02.59;	author ahunter;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2006.01.20.22.10.06;	author cmahoney;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2005.11.25.19.38.18;	author cmahoney;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.14.20.58.45;	author mmostafa;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.24.46;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.50;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.07.11.15.10.31;	author cmahoney;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2006.08.02.17.07.58;	author ahunter;	state Exp;
branches;
next	;

1.6.4.1
date	2007.11.06.14.49.36;	author crevells;	state Exp;
branches;
next	;
commitid	542647307eff4567;


desc
@@


1.9
log
@[234250] gmf-head lgrahek 080602 TVT34:TCT487: PLK: truncation in Logic Diagram -> Properties -> Appearance
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/
package org.eclipse.gmf.runtime.diagram.ui.properties.sections.appearance;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.eclipse.gmf.runtime.common.ui.util.WindowUtil;
import org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n.DiagramUIPropertiesMessages;
import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.SWT;
import org.eclipse.swt.SWTException;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Device;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.PaletteData;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.ColorDialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;

public class ColorPalettePopup {

	/** variable to store previous color */
	private int previousColor;
	private Button customColorButton;
	private HashMap buttonMap = new HashMap();
	
	/**
	 * A descirptor for an inventory color
	 */
	private static class InventoryColorDescriptor
		extends ImageDescriptor {

		/** the default preference color */
		private static final RGB OUTLINE_COLOR = new RGB(192, 192, 192);

		public RGB rgb;

		public InventoryColorDescriptor(RGB colorValue) {
			this.rgb = colorValue;

		}

		/**
		 * @@see org.eclipse.jface.resource.ImageDescriptor#getImageData()
		 */
		public ImageData getImageData() {
			ImageData data = new ImageData(ICON_SIZE.x, ICON_SIZE.y, 1,
				new PaletteData(new RGB[] {rgb, OUTLINE_COLOR}));

			for (int i = 0; i < ICON_SIZE.y; i++)
				data.setPixel(0, i, 1);
			for (int i = 0; i < ICON_SIZE.y; i++)
				data.setPixel(ICON_SIZE.x - 1, i, 1);
			for (int i = 0; i < ICON_SIZE.x; i++)
				data.setPixel(i, 0, 1);
			for (int i = 0; i < ICON_SIZE.x; i++)
				data.setPixel(i, ICON_SIZE.y - 1, 1);
			return data;
		}

		/**
		 * Creates and returns a new SWT image for this image descriptor. The
		 * returned image must be explicitly disposed using the image's dispose
		 * call. The image will not be automatically garbage collected. In the
		 * even of an error, a default image is returned if
		 * <code>returnMissingImageOnError</code> is true, otherwise
		 * <code>null</code> is returned.
		 * <p>
		 * Note: Even if <code>returnMissingImageOnError</code> is true, it is
		 * still possible for this method to return <code>null</code> in
		 * extreme cases, for example if SWT runs out of image handles.
		 * </p>
		 * 
		 * @@return a new image or <code>null</code> if the image could not be
		 *         created
		 * 
		 */
		public Image createImage() {

			Device device = Display.getCurrent();
			ImageData data = getImageData();
			if (data == null)
				data = DEFAULT_IMAGE_DATA;

			/*
			 * Try to create the supplied image. If there is an SWT Exception
			 * try and create the default image if that was requested. Return
			 * null if this fails.
			 */

			try {
				if (data.transparentPixel >= 0) {
					ImageData maskData = data.getTransparencyMask();
					return new Image(device, data, maskData);
				}
				return new Image(device, data);
			} catch (SWTException exception) {

				try {
					return new Image(device, DEFAULT_IMAGE_DATA);
				} catch (SWTException nextException) {
					return null;
				}

			}
		}
	}

	/** default color icon width */
	public static final Point ICON_SIZE = new Point(IDialogConstants.BUTTON_BAR_HEIGHT, 
			IDialogConstants.BUTTON_BAR_HEIGHT);

	/** inventory colors */
	private static final InventoryColorDescriptor WHITE = new InventoryColorDescriptor(
		new RGB(255, 255, 255));

	private static final InventoryColorDescriptor BLACK = new InventoryColorDescriptor(
		new RGB(0, 0, 0));

	private static final InventoryColorDescriptor LIGHT_GRAY = new InventoryColorDescriptor(
		new RGB(192, 192, 192));

	private static final InventoryColorDescriptor GRAY = new InventoryColorDescriptor(
		new RGB(128, 128, 128));

	private static final InventoryColorDescriptor RED = new InventoryColorDescriptor(
		new RGB(227, 164, 156));

	private static final InventoryColorDescriptor GREEN = new InventoryColorDescriptor(
		new RGB(166, 193, 152));

	private static final InventoryColorDescriptor BLUE = new InventoryColorDescriptor(
		new RGB(152, 168, 191));

	private static final InventoryColorDescriptor YELLOW = new InventoryColorDescriptor(
		new RGB(225, 225, 135));

	private static final InventoryColorDescriptor PURPLE = new InventoryColorDescriptor(
		new RGB(184, 151, 192));

	private static final InventoryColorDescriptor TEAL = new InventoryColorDescriptor(
		new RGB(155, 199, 204));

	private static final InventoryColorDescriptor PINK = new InventoryColorDescriptor(
		new RGB(228, 179, 229));

	private static final InventoryColorDescriptor ORANGE = new InventoryColorDescriptor(
		new RGB(237, 201, 122));

	/** the inventory color list key: anRGB, value: anImage */
	private static final HashMap imageColorMap = new HashMap();

	private static final String DEAFULT_COLOR_STRING = DiagramUIPropertiesMessages.ColorPalettePopup_default;

	private static final String CUSTOM_COLOR_STRING = DiagramUIPropertiesMessages.ColorPalettePopup_custom;
	
	static {

		// inventory colors
		imageColorMap.put(WHITE.rgb, WHITE.createImage());
		imageColorMap.put(BLACK.rgb, BLACK.createImage());
		imageColorMap.put(LIGHT_GRAY.rgb, LIGHT_GRAY.createImage());
		imageColorMap.put(GRAY.rgb, GRAY.createImage());
		imageColorMap.put(RED.rgb, RED.createImage());
		imageColorMap.put(GREEN.rgb, GREEN.createImage());
		imageColorMap.put(BLUE.rgb, BLUE.createImage());
		imageColorMap.put(YELLOW.rgb, YELLOW.createImage());
		imageColorMap.put(PURPLE.rgb, PURPLE.createImage());
		imageColorMap.put(TEAL.rgb, TEAL.createImage());
		imageColorMap.put(PINK.rgb, PINK.createImage());
		imageColorMap.put(ORANGE.rgb, ORANGE.createImage());
	}

	private Shell shell;

	private RGB selectedColor = null;

    /**
     * The default color to be used if the user presses the default button.
     */
    private boolean useDefaultColor = false;

	/**
     * Creates a color palette popup above the specified shell.
     * 
     * @@param parent
     *            a Shell control which will be the parent of the new instance
     *            (cannot be null)
     * @@deprecated Use the other constructor. This one does not retrieve the
     *             default value from the correct preference store.
     */
    public ColorPalettePopup(Shell parent, String preferenceId, int rowHeight) {
        this(parent, rowHeight);
    }
    
	/**
	 * Creates a PopupList above the specified shell.
	 * 
	 * @@param parent
	 *            a widget which will be the parent of the new instance (cannot
	 *            be null)
	 * @@param style
	 *            the style of widget to construct
	 */
	public ColorPalettePopup(Shell parent, int rowHeight) {
		shell = new Shell(parent, checkStyle(SWT.NONE));
		shell.setLayout(new FillLayout());
		GridLayout layout = new GridLayout(4, true);
		shell.setLayout(layout);

		for (Iterator e = imageColorMap.keySet().iterator(); e.hasNext();) {
			Button button = new Button(shell, SWT.PUSH | SWT.FLAT);
			GridData data = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
			data.heightHint = rowHeight;
			data.widthHint = rowHeight;
			button.setLayoutData(data);

			final RGB rgb = (RGB) e.next();
			final Image image = (Image) imageColorMap.get(rgb);
			button.setImage(image);
			button.addSelectionListener(new SelectionAdapter() {

				public void widgetSelected(SelectionEvent e1) {
					selectedColor = rgb;
					shell.dispose();
				}
			});
			buttonMap.put(rgb , button);
		}	
		Button defaultButton = new Button(shell, SWT.PUSH | SWT.FLAT);
		defaultButton.setText(DEAFULT_COLOR_STRING);
		GridData data = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
		data.horizontalSpan = 4;
		defaultButton.setLayoutData(data);

		defaultButton.addSelectionListener(new SelectionAdapter() {

            public void widgetSelected(SelectionEvent event) {
                useDefaultColor = true;
                shell.dispose();
            }
        });

		Button moreColors = new Button(shell, SWT.PUSH | SWT.FLAT);
		moreColors.setText(CUSTOM_COLOR_STRING);
		data = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
		data.horizontalSpan = 4;
		moreColors.setLayoutData(data);

		moreColors.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {

				ColorDialog dialog = new ColorDialog(Display.getCurrent()
					.getActiveShell());	
				dialog.setRGB(FigureUtilities.integerToRGB(getPreviousColor()));
				WindowUtil.centerDialog(dialog.getParent(), Display
					.getCurrent().getActiveShell());
				dialog.open();
				selectedColor = dialog.getRGB();
				shell.dispose();

			}
		});		
		// close dialog if user selects outside of the shell
		shell.addListener(SWT.Deactivate, new Listener() {
		
			public void handleEvent(Event e) {
				shell.setVisible(false);
			}
		});
		customColorButton = moreColors;

	}

	/**
	 * @@param style
	 * @@return
	 */
	private static int checkStyle(int style) {
		int mask = SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;
		return style & mask;
	}

	/**
	 * Launches the Popup List, waits for an item to be selected and then closes
	 * PopupList.
	 * 
	 * @@param rect
	 *            the initial size and location of the PopupList; the dialog
	 *            will be positioned so that it does not run off the screen and
	 *            the largest number of items are visible
	 * 
	 * @@return the text of the selected item or null if no item is selected
	 */
	public RGB open(Point location) {

		Point listSize = shell.computeSize(SWT.DEFAULT, SWT.DEFAULT, false);
		shell.setBounds(location.x, location.y, listSize.x, listSize.y);

		shell.open();
		shell.setFocus();		
		Display display = shell.getDisplay();
		Button prevButton = (Button)buttonMap.get(FigureUtilities.integerToRGB(getPreviousColor()));
		if (prevButton != null){
			shell.setDefaultButton(prevButton);
		}	
		else{
			shell.setDefaultButton(customColorButton);
		}
		while (!shell.isDisposed() && shell.isVisible()) {
			if (!display.readAndDispatch())
				display.sleep();
		}		
		return getSelectedColor();
	}

	/**
     * Gets the color the user selected. Could be null as the user may have
     * cancelled the gesture or they may have selected the default color button.
     * See {@@link #useDefaultColor()}.
     * 
     * @@return the selected color or null
     */
    public RGB getSelectedColor() {
        return selectedColor;
    }

    /**
     * Returns true if the user selected to use the default color
     * 
     * @@return true if the default color is to be used; false otherwise
     */
    public boolean useDefaultColor() {
        return useDefaultColor;
    }
    
	public int getPreviousColor() {
		return previousColor;
	}

	public void setPreviousColor(int previousColor) {
		this.previousColor = previousColor;
	}
}
@


1.8
log
@[225137] gmf-head ahunter 080503 Line styles enhancement
@
text
@a256 1
		data.heightHint = rowHeight;
a270 1
		data.heightHint = rowHeight;
@


1.7
log
@[183150] gmf_head crevells 071106 [RulersGrid] Properties view: Rulers and Grid page: Custom color dialog should use currently selected color
Contributed by:  Carson Li
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2007 IBM Corporation and others.
d20 1
d32 1
d39 1
d133 2
a134 1
	public static final Point ICON_SIZE = new Point(20, 20);
d230 1
a231 4
		layout.horizontalSpacing = 0;
		layout.marginWidth = 0;
		layout.marginHeight = 0;
		layout.verticalSpacing = 0;
d235 1
a235 1
			Button button = new Button(shell, SWT.PUSH);
d253 1
a253 1
		Button defaultButton = new Button(shell, SWT.PUSH);
d268 1
a268 1
		Button moreColors = new Button(shell, SWT.PUSH);
@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
d15 1
d19 1
d42 5
d250 2
a251 2
		}

d279 2
a280 1
					.getActiveShell());
d288 1
a288 2
		});

d291 1
a291 1

d296 1
d326 1
a326 2
		shell.setFocus();

d328 7
d338 1
a338 1
		}
d361 8
@


1.6.4.1
log
@[183150] gmf_R2_0_maintenance crevells 071106 [RulersGrid] Properties view: Rulers and Grid page: Custom color dialog should use currently selected color
Contributed by:  Carson Li
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2007 IBM Corporation and others.
a14 1
import java.util.List;
a17 1
import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
a39 5
	/** variable to store previous color */
	private int previousColor;
	private Button customColorButton;
	private HashMap buttonMap = new HashMap();
	
d243 2
a244 2
			buttonMap.put(rgb , button);
		}	
d272 1
a272 2
					.getActiveShell());	
				dialog.setRGB(FigureUtilities.integerToRGB(getPreviousColor()));
d280 2
a281 1
		});		
d284 1
a284 1
		
a288 1
		customColorButton = moreColors;
d318 2
a319 1
		shell.setFocus();		
a320 7
		Button prevButton = (Button)buttonMap.get(FigureUtilities.integerToRGB(getPreviousColor()));
		if (prevButton != null){
			shell.setDefaultButton(prevButton);
		}	
		else{
			shell.setDefaultButton(customColorButton);
		}
d324 1
a324 1
		}		
a346 8
    
	public int getPreviousColor() {
		return previousColor;
	}

	public void setPreviousColor(int previousColor) {
		this.previousColor = previousColor;
	}
@


1.5
log
@Bugzilla#123313 gmf_head cmahoney 060120 Making DiagramUIPlugin, DiagramUIStatusCodes, and DiagramUIDebugOptions internal
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
a16 1
import org.eclipse.gmf.runtime.diagram.ui.properties.internal.DiagramPropertiesPlugin;
a17 2
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferenceConverter;
d89 1
a89 1
		 * @@since 2.0
d188 1
a188 1
	private String preferenceId;
d190 4
a193 1
	private RGB selectedColor = null;
d196 12
a207 11
	 * Creates a PopupList above the specified shell.
	 * 
	 * @@param parent
	 *            a Shell control which will be the parent of the new instance
	 *            (cannot be null)
	 */
	public ColorPalettePopup(Shell parent, String preferenceId, int rowHeight) {
		this(parent, rowHeight);
		this.preferenceId = preferenceId;
	}

a215 2
	 * 
	 * @@since 3.0
d217 1
a217 1
	private ColorPalettePopup(Shell parent, int rowHeight) {
d245 2
a246 2
		Button defaultColor = new Button(shell, SWT.PUSH);
		defaultColor.setText(DEAFULT_COLOR_STRING);
d250 1
a250 1
		defaultColor.setLayoutData(data);
d252 1
a252 1
		defaultColor.addSelectionListener(new SelectionAdapter() {
d254 5
a258 10
			public void widgetSelected(SelectionEvent event) {

				IPreferenceStore store = DiagramPropertiesPlugin.getDefault()
					.getPreferenceStore();
				if (preferenceId != null)
					selectedColor = PreferenceConverter.getColor(store,
						preferenceId);
				shell.dispose();
			}
		});
d328 19
a346 4
	public RGB getSelectedColor() {
		return selectedColor;
	}

@


1.5.2.1
log
@Bugzilla#146690 gmf_R1_0_maintenance cmahoney 060711 Inconsistent default colours
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
d17 1
d19 2
d191 2
d195 11
a205 4
    /**
     * The default color to be used if the user presses the default button.
     */
    private boolean useDefaultColor = false;
a207 13
     * Creates a color palette popup above the specified shell.
     * 
     * @@param parent
     *            a Shell control which will be the parent of the new instance
     *            (cannot be null)
     * @@deprecated Use the other constructor. This one does not retrieve the
     *             default value from the correct preference store.
     */
    public ColorPalettePopup(Shell parent, String preferenceId, int rowHeight) {
        this(parent, rowHeight);
    }
    
	/**
d215 2
d218 1
a218 1
	public ColorPalettePopup(Shell parent, int rowHeight) {
d246 2
a247 2
		Button defaultButton = new Button(shell, SWT.PUSH);
		defaultButton.setText(DEAFULT_COLOR_STRING);
d251 1
a251 1
		defaultButton.setLayoutData(data);
d253 1
a253 1
		defaultButton.addSelectionListener(new SelectionAdapter() {
d255 10
a264 5
            public void widgetSelected(SelectionEvent event) {
                useDefaultColor = true;
                shell.dispose();
            }
        });
d334 4
a337 19
	/**
     * Gets the color the user selected. Could be null as the user may have
     * cancelled the gesture or they may have selected the default color button.
     * See {@@link #useDefaultColor()}.
     * 
     * @@return the selected color or null
     */
    public RGB getSelectedColor() {
        return selectedColor;
    }

    /**
     * Returns true if the user selected to use the default color
     * 
     * @@return true if the default color is to be used; false otherwise
     */
    public boolean useDefaultColor() {
        return useDefaultColor;
    }
@


1.5.2.2
log
@[148078] gmf_R_1_0_maintenance aboyko 060802 @@since 3.0/3.1 tags in Javadocs in DiagramDocumentEditor class
@
text
@d89 1
a89 1
		 * 
@


1.4
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d17 1
a17 1
import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;
d257 1
a257 1
				IPreferenceStore store = DiagramUIPlugin.getInstance()
@


1.3
log
@bugzilla 110316 gmf-head mmostafa 051014 Compiler warning count should be 0 - runtime diagram layer components
@
text
@d18 1
a18 1
import org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n.ResourceManager;
d168 1
a168 2
	private static final String DEAFULT_COLOR_STRING = ResourceManager
	.getI18NString("ColorPalettePopup.default"); //$NON-NLS-1$
d170 1
a170 3

	private static final String CUSTOM_COLOR_STRING = ResourceManager
	.getI18NString("ColorPalettePopup.custom"); //$NON-NLS-1$
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d16 3
a40 4
import org.eclipse.gmf.runtime.common.ui.util.WindowUtil;
import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n.ResourceManager;

d242 1
a242 1
				public void widgetSelected(SelectionEvent e) {
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 10
@

