head	1.5;
access;
symbols
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	I20060331-1000:1.4
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.04.06.18.21.59;	author cmahoney;	state dead;
branches;
next	1.4;

1.4
date	2006.03.30.18.55.43;	author vramaswamy;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.10.21.32.30;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.24.46;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.51;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Bugzilla#129793 gmf_head cmahoney 060407 Removing GenericModelElementFilter and NotationElementFilter
@
text
@/******************************************************************************
 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.properties.filters;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.ui.views.properties.tabbed.AbstractTypeMapper;

/**
 * Create a filter that is used assist in input filtering for the
 * propertySection extension point. 
 * <p>
 * Elements in this filter are assumed to be Modeling EObjects. 
 * 
 * @@author nbalaba
 */
public class GenericModelElementFilter
	extends AbstractTypeMapper {

	/**
	 * Converts the input into an EObject, if it can be adapted. Otherwise
	 * returns null.
	 * 
	 * @@param input
	 *            Input object to be converted to an EObject
	 * @@return EObject converted from the input object or null if the input
	 *         object cannot be converted
	 */
	protected EObject getEObject(Object input) {

		if (input instanceof IAdaptable) {
			EObject eObj = (EObject) ((IAdaptable) input)
				.getAdapter(EObject.class);
			if (eObj != null && isSupportedMObjectType(eObj)) {
				return eObj;
			} else {
				return null;
			}
		}

		return null;
	}

	
	/**
	 * @@inheritDoc
	 */
	public Class mapType(Object input) {
		EObject object = getEObject(input);

		if (isApplicableToEObject(object))
			return object.getClass();

		return super.mapType(object);
	}

	/**
	 * The generic filter already has been applied during 'remap' filtering
	 * phase. If it got to this point - it is fine, always true (except when
	 * null) - the underlaying model element type of the input will be returned.
	 * Subclasses can override to filter out more specific element types
	 * 
	 * @@param object object to check
	 * @@return <code>true</code> is filter is applicable to specified <code>EObject</code>, <code>false</code> otherwise
	 */
	protected boolean isApplicableToEObject(EObject object) {
		// the object can still be null after the model resolution - it may not
		// be a model element
		return object != null;
	}

	/**
	 * Checks if the MObjectType of the EObject is supported. This
	 * implementation excludes all types except MODELING. Subclasses may
	 * override.
	 * 
	 * @@param obj
	 *            EObject whose type is to be tested. Must not be null.
	 * @@return <code>true</code> if the type is supported; otherwise <code>false</code>
	 */
	protected boolean isSupportedMObjectType(EObject obj) {
		return true; // all objects in GMF are "modeling" objects
	}
}@


1.4
log
@[129416],gmf_head, cdamus,060330,Remove the MSL compatibility plug-in
@
text
@@


1.3
log
@gmf_head ahunter 060210 Migrate GMF usage of tabbed properties view from WTP to Eclipse Core (org.eclipse.wst.common.ui.properties to org.eclipse.ui.views.properties.tabbed)
@
text
@a15 2
import org.eclipse.gmf.runtime.emf.core.edit.MObjectType;
import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
d91 1
a91 1
		return EObjectUtil.getType(obj) == MObjectType.MODELING;
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a15 2
import org.eclipse.wst.common.ui.properties.internal.provisional.ITypeMapper;

d18 1
d29 1
a29 1
	implements ITypeMapper {
d56 2
a57 2
	/* (non-Javadoc)
	 * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ITypeMapper#remapType(java.lang.Object, java.lang.Class)
d59 1
a59 1
	public Class remapType(Object input, Class effectiveType) {
d65 1
a65 1
		return effectiveType;
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.     	           |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

