head	1.9;
access;
symbols
	v20081020-0700:1.9
	v20080813-1510:1.9
	v20080811-1546:1.9
	v20080722-1827:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080603-1553:1.9
	v20080521:1.9
	v20080503-1740:1.9
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080409-1326:1.8
	v20080328-1605:1.8
	v20080222-1200:1.8
	v20080201-2010:1.8
	v20080118-1129:1.8
	v20080114-2222:1.8
	v20071222-1111:1.8
	v20071214-1111:1.8
	v20071207-1111:1.8
	v20071130-1111:1.8
	v20071124-0000:1.8
	v20071108-0000:1.8
	v20071003-0000:1.8
	v20070915-0000:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.4
	R2_0:1.8
	R4_20:1.8
	RC3_20:1.8
	v20070608-1300:1.8
	v20070601-1400:1.8
	v20070518-1300:1.8
	bugzilla111892_group_support:1.8.0.2
	Root_bugzilla111892_group_support:1.8
	v20070405-2000:1.8
	v20070330-1300:1.8
	v20070208-1800:1.8
	v20070202-0200:1.7.2.1
	v20070111-0800:1.7.2.1
	M4_20:1.8
	v20061218-1500:1.7.2.1
	v20061214-0000:1.8
	M3_20:1.8
	v20061013-1330:1.8
	v20061012-1100:1.7.2.1
	v20060919-0800:1.7.2.1
	M1_20:1.7
	v20060824-1600:1.7
	v20060803-1200:1.7
	v20060721-1130:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	I20060505-1400:1.7
	I20060428-1300:1.7
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2008.05.03.20.56.23;	author ahunter;	state Exp;
branches;
next	1.8;
commitid	60b6481cd1754567;

1.8
date	2006.10.03.15.02.59;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.28.02.10.03;	author ahunter;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.04.28.01.57.48;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.27.18.39.17;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.28.02.30.41;	author cmahoney;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.16.19.49.13;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.25.19.38.18;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.23.30.41;	author sshaw;	state Exp;
branches;
next	;

1.7.2.1
date	2006.09.13.16.43.23;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[225137] gmf-head ahunter 080503 Line styles enhancement
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.properties.sections.appearance;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.eclipse.draw2d.ColorConstants;
import org.eclipse.emf.common.util.AbstractEnumerator;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ITreeBranchEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n.DiagramUIPropertiesMessages;
import org.eclipse.gmf.runtime.emf.core.util.PackageUtil;
import org.eclipse.gmf.runtime.notation.JumpLinkStatus;
import org.eclipse.gmf.runtime.notation.JumpLinkType;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.Routing;
import org.eclipse.gmf.runtime.notation.Smoothness;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;

/**
 * @@author dlander, nbalaba
 * 
 * Appearance properties
 */
public class ConnectionAppearancePropertySection
	extends ColoursAndFontsAndLineStylesPropertySection {

	protected static final String REVERSE_JUMP_LINKS_NAME_LABEL = DiagramUIPropertiesMessages.
	ConnectionAppearanceDetails_ReverseJumpLinksLabel_Text;
	
	private static final String ROUTER_OPTIONS_LABEL = DiagramUIPropertiesMessages.
		ConnectionAppearanceDetails_RouterOptionsLabel_Text;

	protected static final String AVOID_OBSTACLES_NAME_LABEL = DiagramUIPropertiesMessages.
		ConnectionAppearanceDetails_AvoidObstaclesLabel_Text;

	protected static final String CLOSEST_DISTANCE_NAME_LABEL = DiagramUIPropertiesMessages.
		ConnectionAppearanceDetails_ClosestDistanceLabel_Text;

	protected static final String LINE_ROUTER_NAME_LABEL = DiagramUIPropertiesMessages.
		ConnectionAppearanceDetails_LineRouterLabel_Text;

	protected static final String SMOOTHNESS_NAME_LABEL = DiagramUIPropertiesMessages.
		ConnectionAppearanceDetails_SmoothnessLabel_Text;

	protected static final String JUMP_LINKS_NAME_LABEL = DiagramUIPropertiesMessages.
		ConnectionAppearanceDetails_JumpLinksLabel_Text;

	protected static final String JUMP_LINK_TYPE_NAME_LABEL = DiagramUIPropertiesMessages.
		ConnectionAppearanceDetails_JumpLinkTypeLabel_Text;



	private static final String JUMP_LINKS_GROUP_NAME = DiagramUIPropertiesMessages.
	ConnectionAppearanceDetails_JumpLinkGroupLabel_Text;
	

	// radio buttonn widgets cache with a button as a value and abstract
	// enumeration literal as a key
	protected Map buttons = new HashMap();

	private Button avoidObstaclesButton;

	private Button closestDistanceButton;

	private Button reverseJumpLinksButton;

	/**
	 * Transfer data to model
	 */
	private void updateModel(final String szCmd, final String szID,
			final Object val) {
		if (isReadOnly()) {
			refresh();
			return;
		}

		ArrayList commands = new ArrayList();

		Iterator it = getInput().iterator();

		while (it.hasNext()) {
			final ConnectionNodeEditPart ep = (ConnectionNodeEditPart) it
				.next();

			Resource res = ((View) ep.getModel()).eResource();

			commands.add(createCommand(szCmd, res, new Runnable() {

				public void run() {
					ENamedElement element = PackageUtil.getElement(szID);
					if (element instanceof EStructuralFeature)
						ep.setStructuralFeatureValue((EStructuralFeature)element, val);
				}
			}));
		}

		executeAsCompositeCommand(szCmd, commands);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractNotationPropertiesSection#initializeControls(org.eclipse.swt.widgets.Composite)
	 */
	protected void initializeControls(Composite parent) {
        composite = getWidgetFactory().createFlatFormComposite(parent);
        FormLayout layout = (FormLayout) composite.getLayout();
        layout.spacing = 3;
        
		Composite groups = getWidgetFactory().createComposite(composite);
		groups.setLayout(new GridLayout(2, false));		
		createFontsAndColorsGroups(groups);		
		colorsAndFontsGroup.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING ));		
		createConnectionPropertyGroups(groups);
	}	
	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.properties.ISection#createControls(org.eclipse.swt.widgets.Composite,
	 *      org.eclipse.gmf.runtime.common.ui.properties.TabbedPropertySheetPage)
	 */
	public void createConnectionPropertyGroups(Composite groups) {

		// routing
		Group routing = getWidgetFactory().createGroup(groups,
			ROUTER_OPTIONS_LABEL);
		routing.setLayout(new GridLayout(1, false));
		GridData data = new GridData(GridData.FILL_HORIZONTAL);
		routing.setLayoutData(data);

		// left composite for line styles and smoothness
		Composite left = getWidgetFactory().createComposite(groups);
		GridLayout layout = new GridLayout(1, false);
		layout.marginWidth = 0;
		left.setLayout(layout);
		data = new GridData(GridData.FILL_BOTH);
		left.setLayoutData(data);
		
		// line styles
		createLineStylesGroup(left);
		lineStylesGroup.setLayoutData(new GridData(GridData.FILL_BOTH));
		
		// smoothness
		createRadioGroup(left, Smoothness.VALUES.iterator(),
			Properties.ID_SMOOTHNESS, DiagramUIPropertiesMessages.
				AppearanceDetails_SmoothnessCommand_Text,
			SMOOTHNESS_NAME_LABEL, 2);

		// line router
		createRadioGroup(routing, Routing.VALUES.iterator(),
			Properties.ID_ROUTING, DiagramUIPropertiesMessages.
				AppearanceDetails_LineRouterCommand_Text,
			LINE_ROUTER_NAME_LABEL, 3);

		// router options
		createRouterOptionsGroup(routing);

		// jump links
		Group jumpLinks = getWidgetFactory().createGroup(groups,
			JUMP_LINKS_GROUP_NAME);
		jumpLinks.setLayout(new GridLayout(2, false));
		data = new GridData(GridData.FILL_HORIZONTAL);
		jumpLinks.setLayoutData(data);

		// jump links status
		createRadioGroup(jumpLinks, JumpLinkStatus.VALUES.iterator(),
			Properties.ID_JUMPLINKS_STATUS, DiagramUIPropertiesMessages.
				AppearanceDetails_JumpLinksCommand_Text,
			JUMP_LINKS_NAME_LABEL, 2);

		// jump links type
		createRadioGroup(jumpLinks, JumpLinkType.VALUES.iterator(),
			Properties.ID_JUMPLINKS_TYPE, DiagramUIPropertiesMessages.
				AppearanceDetails_JumpLinkTypeCommand_Text,
			JUMP_LINK_TYPE_NAME_LABEL, 2);

		Composite jumpLinksComposite = getWidgetFactory().createComposite(
			jumpLinks);
		jumpLinksComposite.setLayout(new GridLayout(2, false));

		reverseJumpLinksButton = getWidgetFactory().createButton(
			jumpLinksComposite, REVERSE_JUMP_LINKS_NAME_LABEL, SWT.CHECK);
		reverseJumpLinksButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				updateModel(
					DiagramUIPropertiesMessages.
						AppearanceDetails_ReverseJumpLinksCommand_Text,
					Properties.ID_JUMPLINKS_REVERSE, Boolean.valueOf(
						reverseJumpLinksButton.getSelection()));
			}
		});

	}

	/**
	 * Create router options group
	 * 
	 * @@param groups -
	 *            aprent composite
	 */
	protected void createRouterOptionsGroup(Composite groups) {

		Composite routerOptionsGroup = getWidgetFactory().createComposite(
			groups);
		GridData data = new GridData(GridData.FILL_HORIZONTAL);
		routerOptionsGroup.setLayoutData(data);
		routerOptionsGroup.setLayout(new GridLayout(2, false));

		avoidObstaclesButton = getWidgetFactory().createButton(
			routerOptionsGroup, AVOID_OBSTACLES_NAME_LABEL, SWT.CHECK);
		avoidObstaclesButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				updateModel(
					DiagramUIPropertiesMessages.
						AppearanceDetails_AvoidObstaclesCommand_Text,
					Properties.ID_AVOIDOBSTRUCTIONS, Boolean.valueOf(
						avoidObstaclesButton.getSelection()));
			}
		});

		closestDistanceButton = getWidgetFactory().createButton(
			routerOptionsGroup, CLOSEST_DISTANCE_NAME_LABEL, SWT.CHECK);

		closestDistanceButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				updateModel(
					DiagramUIPropertiesMessages.
						AppearanceDetails_ClosestDistanceCommand_Text,
					Properties.ID_CLOSESTDISTANCE, Boolean.valueOf(
						closestDistanceButton.getSelection()));
			}
		});
	}

	/**
	 * Create and return a group of radio buttons representing a property
	 * 
	 * @@param parent -
	 *            patrent compopsite
	 * @@return - a last control created for this group
	 */
	protected void createRadioGroup(Composite parent, Iterator iterator,
			final Object propertyId, final String commandName,
			String propertyName, int rows) {

		Group group = getWidgetFactory().createGroup(parent, propertyName);
		group.setLayout(new GridLayout(rows, true));
		GridData data = new GridData(GridData.FILL_BOTH);//GridData.FILL_HORIZONTAL | 
		group.setLayoutData(data);

		Button radioButton = null;
		for (Iterator e = iterator; e.hasNext();) {
			AbstractEnumerator literal = (AbstractEnumerator) e.next();
			String propertyValueName = translate(literal);

			radioButton = getWidgetFactory().createButton(group,
				propertyValueName, SWT.RADIO);
			radioButton.setData(literal);
			buttons.put(literal, radioButton);
			radioButton.addSelectionListener(new SelectionAdapter() {

				public void widgetSelected(SelectionEvent event) {
					setPropertyValue(event, propertyId, commandName); 
				}
			});

			if (isReadOnly())
				radioButton.setEnabled(false);
		}

	}

	/**
	 * Returns the translated string representing the connection appearance
	 * properties. This is not a generic method; it needs to be updated if it is
	 * to handle a new property.
	 * 
	 * @@param literal
	 *            the enumerator of literals
	 * @@return the translated string
	 */
	private String translate(AbstractEnumerator literal) {
		
		if (JumpLinkType.SEMICIRCLE_LITERAL.equals(literal)) {
			return DiagramUIMessages.PropertyDescriptorFactory_JumplinksType_SemiCircle;
		} else if (JumpLinkType.SQUARE_LITERAL.equals(literal)) {
			return DiagramUIMessages.PropertyDescriptorFactory_JumplinksType_Square;
		} else if (JumpLinkType.CHAMFERED_LITERAL.equals(literal)) {
			return DiagramUIMessages.PropertyDescriptorFactory_JumplinksType_Chamfered;
		} else if (JumpLinkStatus.NONE_LITERAL.equals(literal)) {
			return DiagramUIMessages.PropertyDescriptorFactory_JumplinksStatus_None;
		} else if (JumpLinkStatus.ALL_LITERAL.equals(literal)) {
			return DiagramUIMessages.PropertyDescriptorFactory_JumplinksStatus_All;
		} else if (JumpLinkStatus.BELOW_LITERAL.equals(literal)) {
			return DiagramUIMessages.PropertyDescriptorFactory_JumplinksStatus_Below;
		} else if (JumpLinkStatus.ABOVE_LITERAL.equals(literal)) {
			return DiagramUIMessages.PropertyDescriptorFactory_JumplinksStatus_Above;
		} else if (Smoothness.NONE_LITERAL.equals(literal)) {
			return DiagramUIMessages.PropertyDescriptorFactory_Smoothness_SmoothNone;
		} else if (Smoothness.NORMAL_LITERAL.equals(literal)) {
			return DiagramUIMessages.PropertyDescriptorFactory_Smoothness_SmoothNormal;
		} else if (Smoothness.LESS_LITERAL.equals(literal)) {
			return DiagramUIMessages.PropertyDescriptorFactory_Smoothness_SmoothLess;
		} else if (Smoothness.MORE_LITERAL.equals(literal)) {
			return DiagramUIMessages.PropertyDescriptorFactory_Smoothness_SmoothMore;
		} else if (Routing.MANUAL_LITERAL.equals(literal)) {
			return DiagramUIMessages.ConnectionAppearancePropertySection_Router_Manual;
		} else if (Routing.RECTILINEAR_LITERAL.equals(literal)) {
			return DiagramUIMessages.ConnectionAppearancePropertySection_Router_Rectilinear;
		} else if (Routing.TREE_LITERAL.equals(literal)) {
			return DiagramUIMessages.ConnectionAppearancePropertySection_Router_Tree;
		}

		assert false : "No translated string available."; //$NON-NLS-1$
		return ""; //$NON-NLS-1$

	}

	/**
	 * @@param event
	 */
	protected void setPropertyValue(SelectionEvent event,
			final Object propertyId, String commandName) {

		ArrayList commands = new ArrayList();
		Iterator it = getInput().iterator();
		final Button button = (Button) event.getSource();

		while (it.hasNext()) {
			final IGraphicalEditPart ep = (IGraphicalEditPart) it.next();

			commands.add(createCommand(commandName, ((View) ep.getModel())
				.eResource(), new Runnable() {

				public void run() {
					if (propertyId instanceof String){
						ENamedElement element = PackageUtil.getElement((String)propertyId);
						if (element instanceof EStructuralFeature)
							ep.setStructuralFeatureValue((EStructuralFeature)element, button.getData());
					}

				}
			}));
		}

		executeAsCompositeCommand(commandName, commands);

	}

	public void refresh() {
		super.refresh();
        if (!isDisposed()) {
            try {
                executeAsReadAction(new Runnable() {

                    public void run() {

                        // Deselect all the radio buttons;
                        // the appropriate radio buttons will be properly
                        // selected below
                        for (Iterator i = buttons.keySet().iterator(); i
                            .hasNext();) {
                            Button radioButton = (Button) buttons.get(i.next());
                            radioButton.setSelection(false);
                        }

                        // Update display from model
                        ConnectionEditPart obj = (ConnectionEditPart) getSingleInput();

                        if (!avoidObstaclesButton.isDisposed()) {
                            Boolean val = (Boolean) obj
                                .getStructuralFeatureValue(NotationPackage.eINSTANCE
                                    .getRoutingStyle_AvoidObstructions());
                            avoidObstaclesButton.setSelection(val
                                .booleanValue());
                        }

                        if (!closestDistanceButton.isDisposed()) {
                            Boolean val = (Boolean) obj
                                .getStructuralFeatureValue(NotationPackage.eINSTANCE
                                    .getRoutingStyle_ClosestDistance());
                            closestDistanceButton.setSelection(val
                                .booleanValue());
                        }

                        if (!reverseJumpLinksButton.isDisposed()) {
                            Boolean val = (Boolean) obj
                                .getStructuralFeatureValue(NotationPackage.eINSTANCE
                                    .getRoutingStyle_JumpLinksReverse());
                            reverseJumpLinksButton.setSelection(val
                                .booleanValue());
                        }

                        Button button = (Button) buttons
                            .get(obj
                                .getStructuralFeatureValue(NotationPackage.eINSTANCE
                                    .getRoutingStyle_JumpLinkStatus()));
                        if (button != null)
                            button.setSelection(true);

                        button = (Button) buttons
                            .get(obj
                                .getStructuralFeatureValue(NotationPackage.eINSTANCE
                                    .getRoutingStyle_JumpLinkType()));
                        if (button != null)
                            button.setSelection(true);

                        // determine if tree routing is supported
                        Button treeRoutingButton = (Button) buttons
                            .get(Routing.TREE_LITERAL);
                        if (treeRoutingButton != null)
                            treeRoutingButton
                                .setEnabled(obj instanceof ITreeBranchEditPart);

                        button = (Button) buttons
                            .get(obj
                                .getStructuralFeatureValue(NotationPackage.eINSTANCE
                                    .getRoutingStyle_Routing()));
                        if (button != null)
                            button.setSelection(true);

                        button = (Button) buttons
                            .get(obj
                                .getStructuralFeatureValue(NotationPackage.eINSTANCE
                                    .getRoutingStyle_Smoothness()));
                        if (button != null)
                            button.setSelection(true);

                    }
                });
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
	}
}@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
d19 1
d41 1
d55 1
a55 1
	extends ColorsAndFontsPropertySection {
d156 12
d170 1
a170 1
		createRadioGroup(groups, Smoothness.VALUES.iterator(),
d173 1
a173 1
			SMOOTHNESS_NAME_LABEL, 1);
@


1.7
log
@[137183] gmf_head ahunter 060427 Occasional exception while selecting connection based on ereference
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2005 IBM Corporation and others.
@


1.7.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.6
log
@[126413] gmf_head ahunter 060427 ShapeColorsAndFontsPropertySection.refresh and ColorsAndFontsPropertySection.refresh leak image handles
@
text
@d367 83
a449 63
		try {
			executeAsReadAction(new Runnable() {

				public void run() {

					// Deselect all the radio buttons;
					// the appropriate radio buttons will be properly selected below				 
					for (Iterator i = buttons.keySet().iterator(); i.hasNext();) {
						Button radioButton = (Button) buttons.get(i.next());
						radioButton.setSelection(false);
					}
															
					// Update display from model
					ConnectionEditPart obj = (ConnectionEditPart) getSingleInput();

					if (!avoidObstaclesButton.isDisposed()) {
						Boolean val = (Boolean) obj
							.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_AvoidObstructions());
						avoidObstaclesButton.setSelection(val.booleanValue());
					}

					if (!closestDistanceButton.isDisposed()) {
						Boolean val = (Boolean) obj
							.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_ClosestDistance());
						closestDistanceButton.setSelection(val.booleanValue());
					}

					if (!reverseJumpLinksButton.isDisposed()) {
						Boolean val = (Boolean) obj
							.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_JumpLinksReverse());
						reverseJumpLinksButton.setSelection(val.booleanValue());
					}

					Button button = (Button) buttons.get(obj
						.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkStatus()));
					if (button != null)
						button.setSelection(true);

					button = (Button) buttons.get(obj
						.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkType()));
					if (button != null)
						button.setSelection(true);

					// determine if tree routing is supported
					Button treeRoutingButton = (Button)buttons.get(Routing.TREE_LITERAL);
					if (treeRoutingButton != null)
						treeRoutingButton.setEnabled(obj instanceof ITreeBranchEditPart);
					
					button = (Button) buttons.get(obj
						.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_Routing()));
					if (button != null)
						button.setSelection(true);

					button = (Button) buttons.get(obj
						.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_Smoothness()));
					if (button != null)
						button.setSelection(true);

				}
			});
		} catch (Exception e) {
			e.printStackTrace();
		}
@


1.5
log
@[126413] gmf_head ndoyle 060427 ShapeColorsAndFontsPropertySection.refresh and ColorsAndFontsPropertySection.refresh leak image handles
@
text
@d40 1
d132 4
a135 1
		super.initializeControls(parent);
@


1.4
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d131 1
a131 1
		createPaintedSectionComposite(parent);
@


1.3
log
@bugzilla 123311 gmf-head sshaw 060116 Tree routing is enabled while selecting a note attachment
@
text
@d30 1
a30 1
import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;
d117 1
a117 1
					ENamedElement element = MetaModelUtil.getElement(szID);
d348 1
a348 1
						ENamedElement element = MetaModelUtil.getElement((String)propertyId);
@


1.2
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d26 1
d190 1
a190 1
			jumpLinksComposite, REVERSE_JUMP_LINKS_NAME_LABEL, SWT.CHECK);//$NON-NLS-1$
d232 1
a232 1
			routerOptionsGroup, CLOSEST_DISTANCE_NAME_LABEL, SWT.CHECK);//$NON-NLS-1$
d274 1
a274 1
					setPropertyValue(event, propertyId, commandName); //$NON-NLS-1$
d406 5
@


1.1
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d27 2
a28 2
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
import org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n.ResourceManager;
d53 2
a54 2
	protected static final String REVERSE_JUMP_LINKS_NAME_LABEL = ResourceManager
	.getI18NString("ConnectionAppearanceDetails.ReverseJumpLinksLabel.Text"); //$NON-NLS-1$
d56 2
a57 2
	private static final String ROUTER_OPTIONS_LABEL = ResourceManager
		.getI18NString("ConnectionAppearanceDetails.RouterOptionsLabel.Text"); //$NON-NLS-1$
d59 2
a60 2
	protected static final String AVOID_OBSTACLES_NAME_LABEL = ResourceManager
		.getI18NString("ConnectionAppearanceDetails.AvoidObstaclesLabel.Text"); //$NON-NLS-1$
d62 2
a63 2
	protected static final String CLOSEST_DISTANCE_NAME_LABEL = ResourceManager
		.getI18NString("ConnectionAppearanceDetails.ClosestDistanceLabel.Text"); //$NON-NLS-1$
d65 2
a66 2
	protected static final String LINE_ROUTER_NAME_LABEL = ResourceManager
		.getI18NString("ConnectionAppearanceDetails.LineRouterLabel.Text"); //$NON-NLS-1$
d68 2
a69 2
	protected static final String SMOOTHNESS_NAME_LABEL = ResourceManager
		.getI18NString("ConnectionAppearanceDetails.SmoothnessLabel.Text"); //$NON-NLS-1$
d71 2
a72 2
	protected static final String JUMP_LINKS_NAME_LABEL = ResourceManager
		.getI18NString("ConnectionAppearanceDetails.JumpLinksLabel.Text"); //$NON-NLS-1$
d74 2
a75 2
	protected static final String JUMP_LINK_TYPE_NAME_LABEL = ResourceManager
		.getI18NString("ConnectionAppearanceDetails.JumpLinkTypeLabel.Text"); //$NON-NLS-1$
d79 2
a80 2
	private static final String JUMP_LINKS_GROUP_NAME = ResourceManager
	.getI18NString("ConnectionAppearanceDetails.JumpLinkGroupLabel.Text"); //$NON-NLS-1$
d152 2
a153 3
			"PropertyDescriptorFactory.Smoothness.Smooth", //$NON-NLS-1$
			Properties.ID_SMOOTHNESS, ResourceManager
				.getI18NString("AppearanceDetails.SmoothnessCommand.Text"), //$NON-NLS-1$
a154 2
		

d158 2
a159 3
			"ConnectionAppearancePropertySection.Router.", //$NON-NLS-1$
			Properties.ID_ROUTING, ResourceManager
				.getI18NString("AppearanceDetails.LineRouterCommand.Text"), //$NON-NLS-1$
d174 2
a175 3
			"PropertyDescriptorFactory.JumplinksStatus.", //$NON-NLS-1$
			Properties.ID_JUMPLINKS_STATUS, ResourceManager
				.getI18NString("AppearanceDetails.JumpLinksCommand.Text"), //$NON-NLS-1$
d180 2
a181 3
			"PropertyDescriptorFactory.JumplinksType.", //$NON-NLS-1$
			Properties.ID_JUMPLINKS_TYPE, ResourceManager
				.getI18NString("AppearanceDetails.JumpLinkTypeCommand.Text"), //$NON-NLS-1$
d194 2
a195 2
					ResourceManager
						.getI18NString("AppearanceDetails.ReverseJumpLinksCommand.Text"), //$NON-NLS-1$
d223 2
a224 2
					ResourceManager
						.getI18NString("AppearanceDetails.AvoidObstaclesCommand.Text"), //$NON-NLS-1$
d237 2
a238 2
					ResourceManager
						.getI18NString("AppearanceDetails.ClosestDistanceCommand.Text"), //$NON-NLS-1$
d253 2
a254 2
			String propertyValueNameKey, final Object propertyId,
			final String commandName, String propertyName, int rows) {
d264 1
a264 2
			String propertyValueName = translate(propertyId, literal,
				propertyValueNameKey);
d284 7
a290 5
	 * @@param propertyValueNameKey -
	 *            bundle key prefix
	 * @@param name -
	 *            bundle key suffix
	 * @@return - translated string
d292 31
a322 7
	private String translate(Object propertyId, AbstractEnumerator literal,
			String propertyValueNameKey) {

		if (propertyId == Properties.ID_JUMPLINKS_TYPE
			&& literal.getName().equals("Semicircle"))//$NON-NLS-1$
			return DiagramResourceManager
				.getI18NString(propertyValueNameKey + "SemiCircle");//$NON-NLS-1$
d324 2
a325 2
		return DiagramResourceManager.getI18NString(propertyValueNameKey
			+ literal.getName());
a359 3
	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.properties.view.ITabbedPropertySection#refresh()
	 */
@

