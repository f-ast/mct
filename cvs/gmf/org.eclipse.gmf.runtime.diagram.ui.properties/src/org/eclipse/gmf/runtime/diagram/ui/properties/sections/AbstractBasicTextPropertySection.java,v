head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080813-1510:1.4
	v20080811-1546:1.4
	v20080722-1827:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.6
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080603-1553:1.4
	v20080521:1.4
	v20080503-1740:1.4
	v20080425-1959:1.4
	v20080417-1610:1.4
	v20080409-1326:1.4
	v20080328-1605:1.4
	v20080222-1200:1.4
	v20080201-2010:1.4
	v20080118-1129:1.4
	v20080114-2222:1.4
	v20071222-1111:1.4
	v20071214-1111:1.4
	v20071207-1111:1.4
	v20071130-1111:1.4
	v20071124-0000:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070915-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070608-1300:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	bugzilla111892_group_support:1.4.0.2
	Root_bugzilla111892_group_support:1.4
	v20070405-2000:1.4
	v20070330-1300:1.4
	v20070208-1800:1.4
	v20070202-0200:1.3.2.1
	v20070111-0800:1.3.2.1
	M4_20:1.4
	v20061218-1500:1.3.2.1
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20061012-1100:1.3.2.1
	v20060919-0800:1.3.2.1
	M1_20:1.3
	v20060824-1600:1.3
	v20060803-1200:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.4
date	2006.10.03.15.02.59;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.10.21.32.30;	author ahunter;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.24.46;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.51;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.09.13.16.43.23;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.properties.sections;

import java.util.ArrayList;
import java.util.Iterator;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CLabel;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.views.properties.tabbed.ITabbedPropertyConstants;
import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.common.ui.util.StatusLineUtil;
import org.eclipse.gmf.runtime.diagram.ui.properties.views.TextChangeHelper;

/**
 * A generic class to edit a property via text field. This class supports
 * multi-select behavior
 * 
 * @@author natalia balaba
 */
public abstract class AbstractBasicTextPropertySection
	extends AbstractModelerPropertySection {

	// text widget to display and set value of the property
	private Text textWidget;

	// label widget for the property name
	private CLabel propertyNameLabelWidget;

	/**
	 * @@return - name of the property to place in the label widget
	 */
	abstract protected String getPropertyNameLabel();

	/**
	 * Set property value for the given object
	 * 
	 * @@param object -
	 *            owner of the property
	 * @@param value -
	 *            new value
	 */
	abstract protected void setPropertyValue(EObject object, Object value);

	/**
	 * @@return - string representation of the property value
	 */
	abstract protected String getPropertyValueString();

	/**
	 * @@return - title of the command which will be executed to set the property
	 */
	protected abstract String getPropertyChangeCommandName();

	/**
	 * A helper to listen for events that indicate that a text field has been
	 * changed.
	 */
	private TextChangeHelper listener = new TextChangeHelper() {
		boolean textModified = false;
		/**
		 * @@see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
		 */
		public void handleEvent(Event event) {
			switch (event.type) {
				case SWT.KeyDown :
					textModified = true;
					if (event.character == SWT.CR)
						textChanged((Control)event.widget);
					break;
				case SWT.FocusOut :
					textChanged((Control)event.widget);
					break;
			}
		}
		
		public void textChanged(Control control) {
			if (textModified) {
				// clear error message
				IWorkbenchPart part = PlatformUI.getWorkbench()
					.getActiveWorkbenchWindow().getActivePage().getActivePart();
				StatusLineUtil.outputErrorMessage(part, StringStatics.BLANK);

				setPropertyValue(control);
				textModified = false;
			}
		}		
	};

	private Composite sectionComposite;


	/* (non-Javadoc)
	 * @@see org.eclipse.ui.views.properties.tabbed.ISection#createControls(org.eclipse.swt.widgets.Composite, org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage)
	 */
	public void createControls(Composite parent,
			TabbedPropertySheetPage aTabbedPropertySheetPage) {
		doCreateControls(parent, aTabbedPropertySheetPage);
	}
	
	/**
	 * Creates the GUI <code>Control</code> for this text property section
	 * @@param parent parent <code>Composite</code>
	 * @@param aTabbedPropertySheetPage <code>TabbedPropertySheetPage</code>
	 * @@see org.eclipse.gmf.runtime.common.ui.properties.ISection#createControls(org.eclipse.swt.widgets.Composite,
	 *      org.eclipse.gmf.runtime.common.ui.properties.TabbedPropertySheetPage)
	 */
	public void doCreateControls(Composite parent,
			TabbedPropertySheetPage aTabbedPropertySheetPage) {
		super.createControls(parent, aTabbedPropertySheetPage);

		sectionComposite = getWidgetFactory().createFlatFormComposite(parent);
		textWidget = createTextWidget(sectionComposite);
		propertyNameLabelWidget = createLabelWidget(sectionComposite);

		startTextWidgetEventListener();

	}

	/**
	 * Start listening to the text widget events
	 */
	protected void startTextWidgetEventListener() {
		if (!isReadOnly()) {
			getListener().startListeningTo(getTextWidget());
			getListener().startListeningForEnter(getTextWidget());
		}
	}

	/**
	 * Stop listening to text widget events
	 */
	protected void stopTextWidgetEventListener() {
		if (!isReadOnly())
			getListener().stopListeningTo(getTextWidget());
	}

	/**
	 * Instantiate a text widget
	 * 
	 * @@param parent -
	 *            parent composite
	 * @@return - a text widget to display and edit the property
	 */
	protected Text createTextWidget(Composite parent) {
		Text text = getWidgetFactory().createText(parent, StringStatics.BLANK);
		FormData data = new FormData();
		data.left = new FormAttachment(0, getStandardLabelWidth(parent,
			getPropertyNameStringsArray()));
		data.right = new FormAttachment(100, 0);
		data.top = new FormAttachment(0, 0);
		text.setLayoutData(data);
		if (isReadOnly())
			text.setEditable(false);
		return text;
	}

	/**
	 * returns as an array the property name
	 * @@return - array of strings where each describes a property name one per
	 *         property. The strings will be used to calculate common indent
	 *         from the left
	 */
	protected String[] getPropertyNameStringsArray() {
		return new String[] {getPropertyNameLabel()};
	}

	/**
	 * Create a label for property name
	 * 
	 * @@param parent -
	 *            parent composite
	 * @@return - label to show property name
	 */
	protected CLabel createLabelWidget(Composite parent) {
		CLabel label = getWidgetFactory().createCLabel(parent,
			getPropertyNameLabel());
		FormData data = new FormData();
		data.left = new FormAttachment(0, 0);
		data.right = new FormAttachment(getTextWidget(),
			-ITabbedPropertyConstants.HSPACE);
		data.top = new FormAttachment(getTextWidget(), 0, SWT.CENTER);
		label.setLayoutData(data);
		return label;
	}

	/**
	 * User pressed Enter key after editing text field - update the model
	 * 
	 * @@param control <code>Control</code>
	 */
	protected synchronized void setPropertyValue(Control control) {

		final Object value = computeNewPropertyValue();
		ArrayList commands = new ArrayList();
		for (Iterator it = getEObjectList().iterator(); it.hasNext();) {
			final EObject next = (EObject) it.next();
			commands.add(createCommand(getPropertyChangeCommandName(), next,
				new Runnable() {

					public void run() {
						setPropertyValue(next, value);
					}

				}));
		}

		executeAsCompositeCommand(getPropertyChangeCommandName(), commands);
		refresh();

	}

	/**
	 * @@return - a default implementation returns contents of the text widget as
	 *         a new value for the property. Subclasses can override.
	 */
	protected Object computeNewPropertyValue() {
		return getTextWidget().getText();
	}

	
	/* (non-Javadoc)
	 * @@see org.eclipse.ui.views.properties.tabbed.ISection#dispose()
	 */
	public void dispose() {
		stopTextWidgetEventListener();
		super.dispose();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.ui.views.properties.tabbed.ISection#refresh()
	 */
	public void refresh() {
		getListener().startNonUserChange();
		try {
			executeAsReadAction(new Runnable() {

				public void run() {
					refreshUI();
				}
			});
		} finally {
			getListener().finishNonUserChange();
		}
	}

	/**
	 * Refresh UI body - referesh will surround this with read action block
	 */
	protected void refreshUI() {
		getTextWidget().setText(getPropertyValueString());
	}

	/**
	 * @@return Returns the listener.
	 */
	protected TextChangeHelper getListener() {
		return listener;
	}

	/**
	 * @@return Returns the textWidget.
	 */
	protected Text getTextWidget() {
		return textWidget;
	}

	/**
	 * @@return Returns the propertyNameLabelWidget.
	 */
	public CLabel getPropertyNameLabelWidget() {
		return propertyNameLabelWidget;
	}

	/**
	 * @@return Returns the sectionComposite.
	 */
	public Composite getSectionComposite() {
		return sectionComposite;
	}
}@


1.3
log
@gmf_head ahunter 060210 Migrate GMF usage of tabbed properties view from WTP to Eclipse Core (org.eclipse.wst.common.ui.properties to org.eclipse.ui.views.properties.tabbed)
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
@


1.3.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d28 2
a29 2
import org.eclipse.wst.common.ui.properties.internal.provisional.ITabbedPropertyConstants;
import org.eclipse.wst.common.ui.properties.internal.provisional.TabbedPropertySheetPage;
d114 1
a114 1
	 * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#createControls(org.eclipse.swt.widgets.Composite, org.eclipse.wst.common.ui.properties.internal.provisional.TabbedPropertySheetPage)
d243 1
a243 1
	 * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#dispose()
d251 1
a251 1
	 * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#refresh()
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

