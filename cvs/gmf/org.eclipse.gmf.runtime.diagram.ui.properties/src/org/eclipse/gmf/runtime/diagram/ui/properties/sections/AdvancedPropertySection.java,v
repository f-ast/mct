head	1.9;
access;
symbols
	v20081020-0700:1.9
	v20080813-1510:1.9
	v20080811-1546:1.9
	v20080722-1827:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.6
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080603-1553:1.9
	v20080521:1.9
	v20080503-1740:1.9
	v20080425-1959:1.9
	v20080417-1610:1.9
	v20080409-1326:1.9
	v20080328-1605:1.9
	v20080222-1200:1.9
	v20080201-2010:1.9
	v20080118-1129:1.9
	v20080114-2222:1.9
	v20071222-1111:1.9
	v20071214-1111:1.9
	v20071207-1111:1.9
	v20071130-1111:1.9
	v20071124-0000:1.9
	v20071108-0000:1.9
	v20071003-0000:1.9
	v20070915-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.4
	R2_0:1.9
	R4_20:1.9
	RC3_20:1.9
	v20070608-1300:1.9
	v20070601-1400:1.9
	v20070518-1300:1.9
	bugzilla111892_group_support:1.9.0.2
	Root_bugzilla111892_group_support:1.9
	v20070405-2000:1.9
	v20070330-1300:1.9
	v20070208-1800:1.9
	v20070202-0200:1.8.2.1
	v20070111-0800:1.8.2.1
	M4_20:1.9
	v20061218-1500:1.8.2.1
	v20061214-0000:1.9
	M3_20:1.9
	v20061013-1330:1.9
	v20061012-1100:1.8.2.1
	v20060919-0800:1.8.2.1
	M1_20:1.8
	v20060824-1600:1.8.2.1
	v20060803-1200:1.8.2.1
	v20060721-1130:1.8.2.1
	v20060713-1700:1.8.2.1
	R1_0_maintenance:1.8.0.2
	R1_0:1.8
	v20060627-1200:1.8
	v20060616-1200:1.8
	v20060609-1400:1.8
	v20060531-1730:1.7
	v20060530-1930:1.7
	I20060505-1400:1.7
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.3
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.9
date	2006.10.03.15.02.59;	author ahunter;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.08.15.04.46;	author ldamus;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2006.05.02.18.00.45;	author cmahoney;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.02.21.58.29;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.28.02.31.04;	author cmahoney;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.13.19.11.07;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.10.21.32.30;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.24.46;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.51;	author sshaw;	state Exp;
branches;
next	;

1.8.2.1
date	2006.07.13.15.10.00;	author mmostafa;	state Exp;
branches;
next	;


desc
@@


1.9
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2003, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.properties.sections;

import org.eclipse.core.commands.operations.OperationHistoryFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.domain.IEditingDomainProvider;
import org.eclipse.emf.transaction.NotificationFilter;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gmf.runtime.emf.ui.properties.sections.UndoableModelPropertySheetEntry;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CLabel;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.views.properties.IPropertySourceProvider;
import org.eclipse.ui.views.properties.PropertySheetPage;
import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;

/**
 * The advanced property section displayed the "original" tabular property sheet
 * page.
 * 
 * @@author Anthony Hunter <a
 *         href="mailto:anthonyh@@ca.ibm.com">anthonyh@@ca.ibm.com </a>
 */
public class AdvancedPropertySection extends AbstractModelerPropertySection {

    /**
     * the property sheet page for this section
     */
    protected PropertySheetPage page;
  
    /* (non-Javadoc)
     * @@see org.eclipse.ui.views.properties.tabbed.ISection#createControls(org.eclipse.swt.widgets.Composite, org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage)
     */
    public void createControls(final Composite parent,
            TabbedPropertySheetPage aTabbedPropertySheetPage) {
        super.createControls(parent, aTabbedPropertySheetPage);
        Composite composite = getWidgetFactory()
                .createFlatFormComposite(parent);
        FormData data = null;

        String tableLabelStr = getTableLabel();
        CLabel tableLabel = null;
        if (tableLabelStr != null && tableLabelStr.length() > 0) {
            tableLabel = getWidgetFactory().createCLabel(composite,
                    tableLabelStr);
            data = new FormData();
            data.left = new FormAttachment(0, 0);
            data.top = new FormAttachment(0, 0);
            tableLabel.setLayoutData(data);
        }

        page = new PropertySheetPage();
        UndoableModelPropertySheetEntry root = new UndoableModelPropertySheetEntry(
            OperationHistoryFactory.getOperationHistory());
        
        root.setPropertySourceProvider(getPropertySourceProvider());
        page.setRootEntry(root);

        page.createControl(composite);
        data = new FormData();
        data.left = new FormAttachment(0, 0);
        data.right = new FormAttachment(100, 0);
        if (tableLabel == null) {
            data.top = new FormAttachment(0, 0);
        } else {
            data.top = new FormAttachment(tableLabel, 0, SWT.BOTTOM);
        }
        data.bottom = new FormAttachment(100, 0);
        data.height = 100;
        data.width = 100;
        page.getControl().setLayoutData(data);

        setActionBars(aTabbedPropertySheetPage.getSite().getActionBars());
        
    }

    /**
     * Sets and prepares the actionBars for this section
     *  
     * @@param actionBars the action bars for this page
     * @@see org.eclipse.gmf.runtime.common.ui.properties.TabbedPropertySheetPage#setActionBars(org.eclipse.ui.IActionBars)
     */   
    public void setActionBars(IActionBars actionBars) {
        
        actionBars.getMenuManager().removeAll();
        actionBars.getToolBarManager().removeAll();
        actionBars.getStatusLineManager().removeAll();

        page.makeContributions(actionBars.getMenuManager(), actionBars
                .getToolBarManager(), actionBars.getStatusLineManager());
        
        actionBars.getToolBarManager().update(true);

    }

    /**
     * Returns the PropertySource provider. The default implementation returns
     * static adapter factory for the properties services. If the extending
     * class needs to use a different provider then this method has to be
     * overwriten.
     * 
     * @@return The PropertySource provider
     */
    protected IPropertySourceProvider getPropertySourceProvider() {
        return propertiesProvider;
    }

    /**
     * Returns the label for the table. The default implementation returns null,
     * that is, there is no label.
     * 
     * @@return The label for the table
     */
    protected String getTableLabel() {
        return null;
    }

   
    /* (non-Javadoc)
     * @@see org.eclipse.ui.views.properties.tabbed.ISection#setInput(org.eclipse.ui.IWorkbenchPart, org.eclipse.jface.viewers.ISelection)
     */
    public void setInput(IWorkbenchPart part, ISelection selection) {
        IEditingDomainProvider provider = (IEditingDomainProvider) part
            .getAdapter(IEditingDomainProvider.class);
        if (provider != null) {
            EditingDomain theEditingDomain = provider.getEditingDomain();
            if (theEditingDomain instanceof TransactionalEditingDomain) {
                setEditingDomain((TransactionalEditingDomain) theEditingDomain);
            }
        }
        
        // Set the eObject for the section, too. The workbench part may not
		// adapt to IEditingDomainProvider, in which case the selected EObject
		// will be used to derive the editing domain.
		if (!selection.isEmpty() && selection instanceof IStructuredSelection) {
            Object firstElement = ((IStructuredSelection) selection)
                .getFirstElement();
            
            if (firstElement != null) {
            	EObject adapted = unwrap(firstElement);
            	
	            if (adapted != null) {
	                setEObject(adapted);
	            }
            }
        }
        
        page.selectionChanged(part, selection);
    }

    /* (non-Javadoc)
     * @@see org.eclipse.ui.views.properties.tabbed.ISection#dispose()
     */
    public void dispose() {
        super.dispose();

        if (page != null) {
            page.dispose();
            page = null;
        }

    }

 
    /* (non-Javadoc)
     * @@see org.eclipse.ui.views.properties.tabbed.ISection#refresh()
     */
    public void refresh() {

        page.refresh();
    }

   
    /* (non-Javadoc)
     * @@see org.eclipse.ui.views.properties.tabbed.ISection#shouldUseExtraSpace()
     */
    public boolean shouldUseExtraSpace() {
        return true;
    }

    /**
     * Update if nessesary, upon receiving the model event.
     * 
     * @@see #aboutToBeShown()
     * @@see #aboutToBeHidden()
     * @@param notification -
     *            even notification
     * @@param element -
     *            element that has changed
     */
    public void update(final Notification notification, EObject element) {
    	if (!isDisposed()) {
			postUpdateRequest(new Runnable() {

				public void run() {
					if (!isDisposed() && !isNotifierDeleted(notification))
						refresh();
				}
			});
		}
	}
   
    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.emf.core.edit.IDemuxedMListener#getFilter()
     */
    public NotificationFilter getFilter() {
        return NotificationFilter.createEventTypeFilter(Notification.SET).or(
            NotificationFilter.createEventTypeFilter(Notification.UNSET)).or(
            NotificationFilter.createEventTypeFilter(Notification.ADD)).or(
            NotificationFilter.createEventTypeFilter(Notification.ADD_MANY))
            .or(NotificationFilter.createEventTypeFilter(Notification.REMOVE))
            .or(
                NotificationFilter
                    .createEventTypeFilter(Notification.REMOVE_MANY)).and(
                NotificationFilter.createNotifierTypeFilter(EObject.class));
    }

   
    /*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractModelerPropertySection#addToEObjectList(java.lang.Object)
	 */
    protected boolean addToEObjectList(Object object) {
        /* not implemented */
    	return true;
    }  

}@


1.8
log
@[145341]  gmf_head ldamus 060608  No editing domain in AdvancedPropertySection for workbench parts that don't adapt to IEditingDomainProvider
@
text
@d161 1
a161 1
	                setEObject((EObject) adapted);
@


1.8.2.1
log
@[110316] gmf_R1_0_maintenance mmostafa  060713 Compiler warning count should be 0 - runtime diagram layer components
@
text
@d161 1
a161 1
	                setEObject(adapted);
@


1.7
log
@Bugzilla#130380 gmf_head cmahoney 050206 PropertySections will miss UNSET events
@
text
@d23 1
d149 17
@


1.6
log
@Bugzilla#130176 gmf_head cmahoney 060302 Values of properties on advanced tab not refreshed after property is changed
@
text
@d208 1
@


1.5
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d17 2
d20 1
a22 1
import org.eclipse.jface.viewers.IStructuredSelection;
d140 6
a145 5
        if (!selection.isEmpty() && selection instanceof IStructuredSelection) {
            Object firstElement = ((IStructuredSelection) selection)
                .getFirstElement();
            if (firstElement instanceof EObject) {
                setEObject((EObject) firstElement);
d207 9
a215 9
		return NotificationFilter.createEventTypeFilter(Notification.SET).or(
			NotificationFilter.createEventTypeFilter(Notification.ADD)).or(
			NotificationFilter.createEventTypeFilter(Notification.ADD_MANY))
			.or(NotificationFilter.createEventTypeFilter(Notification.REMOVE))
			.or(
				NotificationFilter
					.createEventTypeFilter(Notification.REMOVE_MANY)).and(
				NotificationFilter.createNotifierTypeFilter(EObject.class));
	}
@


1.4
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d17 1
a17 2
import org.eclipse.gmf.runtime.emf.core.edit.MFilter;
import org.eclipse.gmf.runtime.emf.core.exceptions.MSLActionAbandonedException;
d20 1
a67 1
        
d138 7
d199 1
a199 27

    /**
	 * Overwrites the default behavior to perform update on the create event.
	 * That must be done because proeprties of the advanced tab might be
	 * affected by creation of new elements.
	 * 
	 * @@see org.eclipse.gmf.runtime.emf.core.internal.events.IDemuxedMListener#handleElementCreatedEvent(org.eclipse.emf.common.notify.Notification,
	 *      org.eclipse.emf.ecore.EObject, org.eclipse.emf.ecore.EObject)
	 */
    public void handleElementCreatedEvent(Notification notification,
            EObject owner, EObject newElement) {
        update(notification, owner);
    }

    /**
     * Overwrites the default behavior to perform update on the delete event.
     * That must be done because proeprties of the advanced tab might be
     * affected by deletion of elements.
     * 
     * @@see org.eclipse.gmf.runtime.emf.core.internal.events.IDemuxedMListener#handleElementDeletedEvent(org.eclipse.emf.common.notify.Notification,
     *      org.eclipse.emf.ecore.EObject, org.eclipse.emf.ecore.EObject)
     */
    public void handleElementDeletedEvent(Notification notification,
            EObject owner, EObject oldElement) {
        update(notification, owner);
    }

d203 10
a212 8
    public MFilter getFilter() {
        MFilter lifeCycleEventFilter = new MFilter.Or(
                MFilter.ELEMENT_CREATED_FILTER,
                MFilter.ELEMENT_DELETED_FILTER);

        return new MFilter.Or(lifeCycleEventFilter,
                        MFilter.ELEMENT_MODIFIED_FILTER);
    }
d215 5
a219 3
    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractModelerPropertySection#addToEObjectList(java.lang.Object)
     */
d223 1
a223 1
    }
a224 7
  
    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractModelerPropertySection#handleException(org.eclipse.gmf.runtime.emf.core.exceptions.MSLActionAbandonedException)
     */
    protected void handleException(MSLActionAbandonedException exception) {
        /* not implemented */
    }
@


1.3
log
@gmf_head ahunter 060210 Migrate GMF usage of tabbed properties view from WTP to Eclipse Core (org.eclipse.wst.common.ui.properties to org.eclipse.ui.views.properties.tabbed)
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2004 IBM Corporation and others.
d14 1
d17 3
a31 5
import org.eclipse.gmf.runtime.common.core.command.CommandManager;
import org.eclipse.gmf.runtime.emf.core.edit.MFilter;
import org.eclipse.gmf.runtime.emf.core.exceptions.MSLActionAbandonedException;
import org.eclipse.gmf.runtime.emf.ui.properties.sections.UndoableModelPropertySheetEntry;

a44 1

d68 1
d70 2
a71 1
                CommandManager.getDefault());
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d26 1
a26 1
import org.eclipse.wst.common.ui.properties.internal.provisional.TabbedPropertySheetPage;
d49 1
a49 1
     * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#createControls(org.eclipse.swt.widgets.Composite, org.eclipse.wst.common.ui.properties.internal.provisional.TabbedPropertySheetPage)
d136 1
a136 1
     * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#setInput(org.eclipse.ui.IWorkbenchPart, org.eclipse.jface.viewers.ISelection)
d143 1
a143 1
     * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#dispose()
d157 1
a157 1
     * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#refresh()
d166 1
a166 1
     * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#shouldUseExtraSpace()
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2003, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

