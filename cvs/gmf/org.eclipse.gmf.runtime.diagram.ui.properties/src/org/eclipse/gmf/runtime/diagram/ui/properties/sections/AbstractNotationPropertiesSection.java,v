head	1.8;
access;
symbols
	v20081020-0700:1.8
	v20080813-1510:1.8
	v20080811-1546:1.8
	v20080722-1827:1.8
	v20080716-1600:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.6
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080603-1553:1.8
	v20080521:1.8
	v20080503-1740:1.8
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080409-1326:1.8
	v20080328-1605:1.8
	v20080222-1200:1.8
	v20080201-2010:1.8
	v20080118-1129:1.8
	v20080114-2222:1.8
	v20071222-1111:1.8
	v20071214-1111:1.8
	v20071207-1111:1.8
	v20071130-1111:1.8
	v20071124-0000:1.8
	v20071108-0000:1.8
	v20071003-0000:1.8
	v20070915-0000:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.4
	R2_0:1.8
	R4_20:1.8
	RC3_20:1.8
	v20070608-1300:1.8
	v20070601-1400:1.8
	v20070518-1300:1.8
	bugzilla111892_group_support:1.8.0.2
	Root_bugzilla111892_group_support:1.8
	v20070405-2000:1.8
	v20070330-1300:1.8
	v20070208-1800:1.8
	v20070202-0200:1.7.2.1
	v20070111-0800:1.7.2.1
	M4_20:1.8
	v20061218-1500:1.7.2.1
	v20061214-0000:1.8
	M3_20:1.8
	v20061013-1330:1.8
	v20061012-1100:1.7.2.1
	v20060919-0800:1.7.2.1
	M1_20:1.7
	v20060824-1600:1.7
	v20060803-1200:1.7
	v20060721-1130:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	I20060505-1400:1.7
	I20060428-1300:1.7
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4;
locks; strict;
comment	@# @;


1.8
date	2006.10.03.15.02.59;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.27.18.39.17;	author ahunter;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.02.28.02.30.41;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.10.21.32.30;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.06.20.26.01;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.24.46;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.48.37;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.51;	author sshaw;	state Exp;
branches;
next	;

1.7.2.1
date	2006.09.13.16.43.23;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.properties.sections;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.properties.descriptors.NotationPropertyDescriptor;
import org.eclipse.gmf.runtime.emf.core.util.PackageUtil;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.views.properties.IPropertyDescriptor;
import org.eclipse.ui.views.properties.IPropertySource;
import org.eclipse.ui.views.properties.tabbed.ITabbedPropertyConstants;
import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;

/**
 * @@author nbalaba
 * 
 */
public abstract class AbstractNotationPropertiesSection
	extends AbstractModelerPropertySection {

	protected static int vertical_offset = ITabbedPropertyConstants.VSPACE;

	protected static int button_margin = IDialogConstants.BUTTON_MARGIN / 2;

	protected int standardLabelWidth = -1;

	protected Composite composite;

	/**
	 * 
	 * Get a label provider to do the translation Most entries on this page are
	 * handled using the string table to take care of translation. In this case
	 * the string table does not have what we need so we get a label provider
	 * from a property descriptor. The property descriptor itself comes from a
	 * property source. This is the way the advanced tab operates.
	 * 
	 * @@return
	 */
	protected ILabelProvider getLabelProvider(Object propertyId) {
		IPropertySource propertySource = propertiesProvider
			.getPropertySource(getSingleInput());
		ILabelProvider labelProvider = null;
		NotationPropertyDescriptor pdNotation = null;
		IPropertyDescriptor[] descriptors = null;

		if (null != propertySource) {
			descriptors = propertySource.getPropertyDescriptors();
			for (int i = 0; i < descriptors.length; i++) {
				if (descriptors[i].getId() == NotationPackage.eINSTANCE
					.getView_Styles()) {
					pdNotation = (NotationPropertyDescriptor) descriptors[i];
					break;
				}
			}
		}

		if (null != pdNotation) {
			propertySource = (IPropertySource) pdNotation.getPropertyValue();

			descriptors = propertySource.getPropertyDescriptors();
			for (int j = 0; j < descriptors.length; j++) {
				if (descriptors[j].getId() == PackageUtil
					.getElement(propertyId.toString())) {
					labelProvider = descriptors[j].getLabelProvider();
					break;
				}
			}
		}
		return labelProvider;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.ui.views.properties.tabbed.ISection#createControls(org.eclipse.swt.widgets.Composite,
	 *      org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage)
	 */
	public void createControls(Composite parent,
			TabbedPropertySheetPage aTabbedPropertySheetPage) {
		super.createControls(parent, aTabbedPropertySheetPage);
		initializeControls(parent);
	}

	
	/**
	 * Provides a level of indirection for subclasses which want 'jump' over
	 * some control creation/initilialization steps and/or chnage thier order
	 * 
	 * @@param parent - parent composite
	 */
	protected void initializeControls(Composite parent) {
		composite = getWidgetFactory().createFlatFormComposite(parent);
		FormLayout layout = (FormLayout) composite.getLayout();
		layout.spacing = 3;
	}

	/**
	 * Determines if the page is displaying properties for this element The
	 * element being passed to us is the style ie UMLConnectorStyle or
	 * UMLShapeStype. The element which we are holding will be an association,
	 * class etc. Comparing these 2 eobjects will always result in false being
	 * returned and no refresh. We are unable to analytically, consistantly
	 * trave from the eobject representing the style to the eobject representing
	 * the shape so we are stuck returning true in all cases.
	 * 
	 * @@param notification
	 *            The notification
	 * @@param element
	 *            The element to be tested
	 * @@return 'true' if the page is displaying properties for this element
	 * 
	 */
	protected boolean isCurrentSelection(Notification notification,
			EObject element) {

		return true;
	}
	
	/**
	 * Returns currently selected view object
	 * 
	 * @@return Returns the input.
	 */
	public IGraphicalEditPart getSingleInput() {
		return (IGraphicalEditPart) getPrimarySelection();
	}

	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractModelerPropertySection#unwrap(java.lang.Object)
	 */
	protected EObject unwrap(Object object) {
		EObject o = super.unwrap(object);
		if (o != null && object instanceof IGraphicalEditPart)
			return o;
		return null;
	}

	/**
	 * Adapt the object to an EObject - if possible
	 * 
	 * @@param object
	 *            object from a diagram or ME
	 * @@return EObject
	 */
	protected EObject adapt(Object object) {
		if (object instanceof IAdaptable) {
			if (object instanceof IGraphicalEditPart)// digram case
				return (EObject) ((IAdaptable) object).getAdapter(View.class);
			// ME case
			return (EObject) ((IAdaptable) object).getAdapter(EObject.class);
		}

		return null;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractModelerPropertySection#getStandardLabelWidth(org.eclipse.swt.widgets.Composite,
	 *      java.lang.String[])
	 */
	protected int getStandardLabelWidth(Composite parent) {
		if (standardLabelWidth == -1) {
			standardLabelWidth = getStandardLabelWidth(parent,
				getAllNameLabels());
		}
		return standardLabelWidth;
	}

	/**
	 * @@return - an array of property names (I18N-ed) to compute label column
	 *         width
	 */
	protected String[] getAllNameLabels() {
		return new String[] {};
	}
}
@


1.7
log
@[126413] gmf_head ndoyle 060427 ShapeColorsAndFontsPropertySection.refresh and ColorsAndFontsPropertySection.refresh leak image handles
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
@


1.7.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.6
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@a23 4
import org.eclipse.swt.events.PaintEvent;
import org.eclipse.swt.events.PaintListener;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Rectangle;
a25 1
import org.eclipse.ui.forms.FormColors;
a45 2
	protected PaintListener painter;

a108 9
		createPaintedSectionComposite(parent);		
	}

	/**
	 * Create a composite for the section
	 * 
	 * @@param parent - parent widget to host the section's composite
	 */
	protected Composite createPaintedSectionComposite(Composite parent) {
a109 1

a111 44

		painter = createPainter();
		composite.addPaintListener(painter);
		return composite;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.ui.views.properties.tabbed.ISection#dispose()
	 */
	public void dispose() {
		if (composite != null && ! composite.isDisposed() && painter != null)
			composite.removePaintListener(painter);
		super.dispose();

	}

	/**
	 * @@return - create and return a painter for the section composite which
	 *         will do partial gradient color fill fopr the section widget
	 */
	protected PaintListener createPainter() {
		return new PaintListener() {

			public void paintControl(PaintEvent e) {
				Rectangle bounds = composite.getClientArea();
				GC gc = e.gc;

				gc.setForeground(gc.getBackground());
				gc.setBackground(getWidgetFactory().getColors().getColor(
					FormColors.TB_BG));

				gc.fillGradientRectangle(4 + bounds.width / 2, 0,
					bounds.width / 2 - 9, bounds.height, false);

				gc.setForeground(getWidgetFactory().getColors().getColor(
					FormColors.TB_BORDER));
				gc.drawLine(bounds.width - 5, 0, bounds.width - 5,
					bounds.height);
			}

		};

@


1.5
log
@gmf_head ahunter 060210 Migrate GMF usage of tabbed properties view from WTP to Eclipse Core (org.eclipse.wst.common.ui.properties to org.eclipse.ui.views.properties.tabbed)
@
text
@d17 5
a35 6
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.properties.descriptors.NotationPropertyDescriptor;
import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

d86 1
a86 1
				if (descriptors[j].getId() == MetaModelUtil
@


1.4
log
@Bugzilla 110317 gmf_head etworkow 051006 Compiler warning count should be 0 - runtime foundation layer components
@
text
@d28 2
a29 2
import org.eclipse.wst.common.ui.properties.internal.provisional.ITabbedPropertyConstants;
import org.eclipse.wst.common.ui.properties.internal.provisional.TabbedPropertySheetPage;
d100 2
a101 2
	 * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#createControls(org.eclipse.swt.widgets.Composite,
	 *      org.eclipse.wst.common.ui.properties.internal.provisional.TabbedPropertySheetPage)
d139 1
a139 1
	 * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#dispose()
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a32 1
import org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n.ResourceManager;
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d33 2
a34 2
import com.ibm.xtools.notation.NotationPackage;
import com.ibm.xtools.notation.View;
@

