head	1.10;
access;
symbols
	R1_0_maintenance:1.10.0.2
	R1_0:1.10
	v20051030:1.9;
locks; strict;
comment	@# @;


1.10
date	2005.11.02.23.30.41;	author sshaw;	state dead;
branches;
next	1.9;

1.9
date	2005.10.12.20.55.09;	author ahunter;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.12.15.52.28;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.04.17.05.11;	author sshaw;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.03.20.44.03;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.23.18.37.31;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.22.15.42.25;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.24.46;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.48.37;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.50;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.properties.sections.appearance;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.eclipse.emf.common.util.AbstractEnumerator;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
import org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n.ResourceManager;
import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;
import org.eclipse.gmf.runtime.notation.JumpLinkStatus;
import org.eclipse.gmf.runtime.notation.JumpLinkType;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.Routing;
import org.eclipse.gmf.runtime.notation.Smoothness;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;

/**
 * @@author dlander, nbalaba
 * 
 * Appearance properties
 */
public class ConnectorAppearancePropertySection
	extends ColorsAndFontsPropertySection {

	protected static final String REVERSE_JUMP_LINKS_NAME_LABEL = ResourceManager
	.getI18NString("ConnectorAppearanceDetails.ReverseJumpLinksLabel.Text"); //$NON-NLS-1$
	
	private static final String ROUTER_OPTIONS_LABEL = ResourceManager
		.getI18NString("ConnectorAppearanceDetails.RouterOptionsLabel.Text"); //$NON-NLS-1$

	protected static final String AVOID_OBSTACLES_NAME_LABEL = ResourceManager
		.getI18NString("ConnectorAppearanceDetails.AvoidObstaclesLabel.Text"); //$NON-NLS-1$

	protected static final String CLOSEST_DISTANCE_NAME_LABEL = ResourceManager
		.getI18NString("ConnectorAppearanceDetails.ClosestDistanceLabel.Text"); //$NON-NLS-1$

	protected static final String LINE_ROUTER_NAME_LABEL = ResourceManager
		.getI18NString("ConnectorAppearanceDetails.LineRouterLabel.Text"); //$NON-NLS-1$

	protected static final String SMOOTHNESS_NAME_LABEL = ResourceManager
		.getI18NString("ConnectorAppearanceDetails.SmoothnessLabel.Text"); //$NON-NLS-1$

	protected static final String JUMP_LINKS_NAME_LABEL = ResourceManager
		.getI18NString("ConnectorAppearanceDetails.JumpLinksLabel.Text"); //$NON-NLS-1$

	protected static final String JUMP_LINK_TYPE_NAME_LABEL = ResourceManager
		.getI18NString("ConnectorAppearanceDetails.JumpLinkTypeLabel.Text"); //$NON-NLS-1$



	private static final String JUMP_LINKS_GROUP_NAME = ResourceManager
	.getI18NString("ConnectorAppearanceDetails.JumpLinkGroupLabel.Text"); //$NON-NLS-1$
	

	// radio buttonn widgets cache with a button as a value and abstract
	// enumeration literal as a key
	protected Map buttons = new HashMap();

	private Button avoidObstaclesButton;

	private Button closestDistanceButton;

	private Button reverseJumpLinksButton;

	/**
	 * Transfer data to model
	 */
	private void updateModel(final String szCmd, final String szID,
			final Object val) {
		if (isReadOnly()) {
			refresh();
			return;
		}

		ArrayList commands = new ArrayList();

		Iterator it = getInput().iterator();

		while (it.hasNext()) {
			final ConnectionNodeEditPart ep = (ConnectionNodeEditPart) it
				.next();

			Resource res = ((View) ep.getModel()).eResource();

			commands.add(createCommand(szCmd, res, new Runnable() {

				public void run() {
					ENamedElement element = MetaModelUtil.getElement(szID);
					if (element instanceof EStructuralFeature)
						ep.setStructuralFeatureValue((EStructuralFeature)element, val);
				}
			}));
		}

		executeAsCompositeCommand(szCmd, commands);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractNotationPropertiesSection#initializeControls(org.eclipse.swt.widgets.Composite)
	 */
	protected void initializeControls(Composite parent) {
		createPaintedSectionComposite(parent);
		Composite groups = getWidgetFactory().createComposite(composite);
		groups.setLayout(new GridLayout(2, false));		
		createFontsAndColorsGroups(groups);		
		colorsAndFontsGroup.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING ));		
		createConnectorPropertyGroups(groups);
	}	
	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.properties.ISection#createControls(org.eclipse.swt.widgets.Composite,
	 *      org.eclipse.gmf.runtime.common.ui.properties.TabbedPropertySheetPage)
	 */
	public void createConnectorPropertyGroups(Composite groups) {

		// routing
		Group routing = getWidgetFactory().createGroup(groups,
			ROUTER_OPTIONS_LABEL);
		routing.setLayout(new GridLayout(1, false));
		GridData data = new GridData(GridData.FILL_HORIZONTAL);
		routing.setLayoutData(data);
		
		// smoothness
		createRadioGroup(groups, Smoothness.VALUES.iterator(),
			"PropertyDescriptorFactory.Smoothness.Smooth", //$NON-NLS-1$
			Properties.ID_SMOOTHNESS, ResourceManager
				.getI18NString("AppearanceDetails.SmoothnessCommand.Text"), //$NON-NLS-1$
			SMOOTHNESS_NAME_LABEL, 1);
		


		// line router
		createRadioGroup(routing, Routing.VALUES.iterator(),
			"ConnectorAppearancePropertySection.Router.", //$NON-NLS-1$
			Properties.ID_ROUTING, ResourceManager
				.getI18NString("AppearanceDetails.LineRouterCommand.Text"), //$NON-NLS-1$
			LINE_ROUTER_NAME_LABEL, 3);

		// router options
		createRouterOptionsGroup(routing);

		// jump links
		Group jumpLinks = getWidgetFactory().createGroup(groups,
			JUMP_LINKS_GROUP_NAME);
		jumpLinks.setLayout(new GridLayout(2, false));
		data = new GridData(GridData.FILL_HORIZONTAL);
		jumpLinks.setLayoutData(data);

		// jump links status
		createRadioGroup(jumpLinks, JumpLinkStatus.VALUES.iterator(),
			"PropertyDescriptorFactory.JumplinksStatus.", //$NON-NLS-1$
			Properties.ID_JUMPLINKS_STATUS, ResourceManager
				.getI18NString("AppearanceDetails.JumpLinksCommand.Text"), //$NON-NLS-1$
			JUMP_LINKS_NAME_LABEL, 2);

		// jump links type
		createRadioGroup(jumpLinks, JumpLinkType.VALUES.iterator(),
			"PropertyDescriptorFactory.JumplinksType.", //$NON-NLS-1$
			Properties.ID_JUMPLINKS_TYPE, ResourceManager
				.getI18NString("AppearanceDetails.JumpLinkTypeCommand.Text"), //$NON-NLS-1$
			JUMP_LINK_TYPE_NAME_LABEL, 2);

		Composite jumpLinksComposite = getWidgetFactory().createComposite(
			jumpLinks);
		jumpLinksComposite.setLayout(new GridLayout(2, false));

		reverseJumpLinksButton = getWidgetFactory().createButton(
			jumpLinksComposite, REVERSE_JUMP_LINKS_NAME_LABEL, SWT.CHECK);//$NON-NLS-1$
		reverseJumpLinksButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				updateModel(
					ResourceManager
						.getI18NString("AppearanceDetails.ReverseJumpLinksCommand.Text"), //$NON-NLS-1$
					Properties.ID_JUMPLINKS_REVERSE, Boolean.valueOf(
						reverseJumpLinksButton.getSelection()));
			}
		});

	}

	/**
	 * Create router options group
	 * 
	 * @@param groups -
	 *            aprent composite
	 */
	protected void createRouterOptionsGroup(Composite groups) {

		Composite routerOptionsGroup = getWidgetFactory().createComposite(
			groups);
		GridData data = new GridData(GridData.FILL_HORIZONTAL);
		routerOptionsGroup.setLayoutData(data);
		routerOptionsGroup.setLayout(new GridLayout(2, false));

		avoidObstaclesButton = getWidgetFactory().createButton(
			routerOptionsGroup, AVOID_OBSTACLES_NAME_LABEL, SWT.CHECK);
		avoidObstaclesButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				updateModel(
					ResourceManager
						.getI18NString("AppearanceDetails.AvoidObstaclesCommand.Text"), //$NON-NLS-1$
					Properties.ID_AVOIDOBSTRUCTIONS, Boolean.valueOf(
						avoidObstaclesButton.getSelection()));
			}
		});

		closestDistanceButton = getWidgetFactory().createButton(
			routerOptionsGroup, CLOSEST_DISTANCE_NAME_LABEL, SWT.CHECK);//$NON-NLS-1$

		closestDistanceButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				updateModel(
					ResourceManager
						.getI18NString("AppearanceDetails.ClosestDistanceCommand.Text"), //$NON-NLS-1$
					Properties.ID_CLOSESTDISTANCE, Boolean.valueOf(
						closestDistanceButton.getSelection()));
			}
		});
	}

	/**
	 * Create and return a group of radio buttons representing a property
	 * 
	 * @@param parent -
	 *            patrent compopsite
	 * @@return - a last control created for this group
	 */
	protected void createRadioGroup(Composite parent, Iterator iterator,
			String propertyValueNameKey, final Object propertyId,
			final String commandName, String propertyName, int rows) {

		Group group = getWidgetFactory().createGroup(parent, propertyName);
		group.setLayout(new GridLayout(rows, true));
		GridData data = new GridData(GridData.FILL_BOTH);//GridData.FILL_HORIZONTAL | 
		group.setLayoutData(data);

		Button radioButton = null;
		for (Iterator e = iterator; e.hasNext();) {
			AbstractEnumerator literal = (AbstractEnumerator) e.next();
			String propertyValueName = translate(propertyId, literal,
				propertyValueNameKey);

			radioButton = getWidgetFactory().createButton(group,
				propertyValueName, SWT.RADIO);
			radioButton.setData(literal);
			buttons.put(literal, radioButton);
			radioButton.addSelectionListener(new SelectionAdapter() {

				public void widgetSelected(SelectionEvent event) {
					setPropertyValue(event, propertyId, commandName); //$NON-NLS-1$
				}
			});

			if (isReadOnly())
				radioButton.setEnabled(false);
		}

	}

	/**
	 * @@param propertyValueNameKey -
	 *            bundle key prefix
	 * @@param name -
	 *            bundle key suffix
	 * @@return - translated string
	 */
	private String translate(Object propertyId, AbstractEnumerator literal,
			String propertyValueNameKey) {

		if (propertyId == Properties.ID_JUMPLINKS_TYPE
			&& literal.getName().equals("Semicircle"))//$NON-NLS-1$
			return PresentationResourceManager
				.getI18NString(propertyValueNameKey + "SemiCircle");//$NON-NLS-1$

		return PresentationResourceManager.getI18NString(propertyValueNameKey
			+ literal.getName());

	}

	/**
	 * @@param event
	 */
	protected void setPropertyValue(SelectionEvent event,
			final Object propertyId, String commandName) {

		ArrayList commands = new ArrayList();
		Iterator it = getInput().iterator();
		final Button button = (Button) event.getSource();

		while (it.hasNext()) {
			final IGraphicalEditPart ep = (IGraphicalEditPart) it.next();

			commands.add(createCommand(commandName, ((View) ep.getModel())
				.eResource(), new Runnable() {

				public void run() {
					if (propertyId instanceof String){
						ENamedElement element = MetaModelUtil.getElement((String)propertyId);
						if (element instanceof EStructuralFeature)
							ep.setStructuralFeatureValue((EStructuralFeature)element, button.getData());
					}

				}
			}));
		}

		executeAsCompositeCommand(commandName, commands);

	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.properties.view.ITabbedPropertySection#refresh()
	 */
	public void refresh() {
		super.refresh();
		try {
			executeAsReadAction(new Runnable() {

				public void run() {

					// Deselect all the radio buttons;
					// the appropriate radio buttons will be properly selected below				 
					for (Iterator i = buttons.keySet().iterator(); i.hasNext();) {
						Button radioButton = (Button) buttons.get(i.next());
						radioButton.setSelection(false);
					}
															
					// Update display from model
					ConnectionEditPart obj = (ConnectionEditPart) getSingleInput();

					if (!avoidObstaclesButton.isDisposed()) {
						Boolean val = (Boolean) obj
							.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_AvoidObstructions());
						avoidObstaclesButton.setSelection(val.booleanValue());
					}

					if (!closestDistanceButton.isDisposed()) {
						Boolean val = (Boolean) obj
							.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_ClosestDistance());
						closestDistanceButton.setSelection(val.booleanValue());
					}

					if (!reverseJumpLinksButton.isDisposed()) {
						Boolean val = (Boolean) obj
							.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_JumpLinksReverse());
						reverseJumpLinksButton.setSelection(val.booleanValue());
					}

					Button button = (Button) buttons.get(obj
						.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkStatus()));
					if (button != null)
						button.setSelection(true);

					button = (Button) buttons.get(obj
						.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkType()));
					if (button != null)
						button.setSelection(true);

					button = (Button) buttons.get(obj
						.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_Routing()));
					if (button != null)
						button.setSelection(true);

					button = (Button) buttons.get(obj
						.getStructuralFeatureValue(NotationPackage.eINSTANCE.getRoutingStyle_Smoothness()));
					if (button != null)
						button.setSelection(true);

				}
			});
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}@


1.9
log
@Bugzilla 110653 gmf_head ahunter 051012 Eroneous references to xtools in gmf common namespace
@
text
@@


1.8
log
@Bugzilla 112348 gmf_head anthonyh 051012 Sweep code for creation of Boolean objects
@
text
@a46 1
 * @@canBeSeenBy com.ibm.xtools.uml.ui.diagram.*
@


1.7
log
@Bugzilla 109784 gmf_head tmacdoug 051004 - Problem: Refresh Problem in Property View for Connector Routing Style and Smoothness
@
text
@d203 1
a203 1
					Properties.ID_JUMPLINKS_REVERSE, new Boolean(
d232 1
a232 1
					Properties.ID_AVOIDOBSTRUCTIONS, new Boolean(
d246 1
a246 1
					Properties.ID_CLOSESTDISTANCE, new Boolean(
@


1.6
log
@Bugzilla 111081 gmf_head - PropertiesView for edges is broken
@
text
@d352 7
@


1.5
log
@Bugzilla 109092: gmf_head sshaw 050923 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d331 1
a331 1
							ep.setStructuralFeatureValue((EStructuralFeature)propertyId, button.getData());
@


1.4
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d20 2
a22 9
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;

d29 1
d32 1
d36 8
d117 3
a119 1
					ep.setPropertyValue(szID, val);
d328 5
a332 2

					ep.setPropertyValue(propertyId, button.getData());
d357 1
a357 1
							.getPropertyValue(Properties.ID_AVOIDOBSTRUCTIONS);
d363 1
a363 1
							.getPropertyValue(Properties.ID_CLOSESTDISTANCE);
d369 1
a369 1
							.getPropertyValue(Properties.ID_JUMPLINKS_REVERSE);
d374 1
a374 1
						.getPropertyValue(Properties.ID_JUMPLINKS_STATUS));
d379 1
a379 1
						.getPropertyValue(Properties.ID_JUMPLINKS_TYPE));
d384 1
a384 1
						.getPropertyValue(Properties.ID_ROUTING));
d389 1
a389 1
						.getPropertyValue(Properties.ID_SMOOTHNESS));
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d33 1
a34 1
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d34 5
a38 5
import com.ibm.xtools.notation.JumpLinkStatus;
import com.ibm.xtools.notation.JumpLinkType;
import com.ibm.xtools.notation.Routing;
import com.ibm.xtools.notation.Smoothness;
import com.ibm.xtools.notation.View;
@

