head	1.15;
access;
symbols
	v20081020-0700:1.15
	v20080813-1510:1.14.2.1
	v20080811-1546:1.15
	v20080722-1827:1.15
	v20080716-1600:1.14.2.1
	v20080716-1642:1.15
	R2_1_maintenance:1.14.0.2
	Root_R2_1_maintenance:1.14
	R2_1_0:1.14
	v20080603-1553:1.14
	v20080521:1.14
	v20080503-1740:1.14
	v20080425-1959:1.14
	v20080417-1610:1.14
	v20080409-1326:1.13
	v20080328-1605:1.13
	v20080222-1200:1.13
	v20080201-2010:1.13
	v20080118-1129:1.10.4.1
	v20080114-2222:1.10.4.1
	v20071222-1111:1.13
	v20071214-1111:1.13
	v20071207-1111:1.12
	v20071130-1111:1.11
	v20071124-0000:1.10.4.1
	v20071108-0000:1.11
	v20071003-0000:1.10
	v20070915-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.4
	R2_0:1.10
	R4_20:1.10
	RC3_20:1.10
	v20070608-1300:1.10
	v20070601-1400:1.10
	v20070518-1300:1.10
	bugzilla111892_group_support:1.10.0.2
	Root_bugzilla111892_group_support:1.10
	v20070405-2000:1.9
	v20070330-1300:1.8
	v20070208-1800:1.8
	v20070202-0200:1.7.2.3
	v20070111-0800:1.7.2.3
	M4_20:1.8
	v20061218-1500:1.7.2.3
	v20061214-0000:1.8
	M3_20:1.8
	v20061013-1330:1.8
	v20061012-1100:1.7.2.3
	v20060919-0800:1.7.2.3
	M1_20:1.7
	v20060824-1600:1.7.2.2
	v20060803-1200:1.7.2.1
	v20060721-1130:1.7.2.1
	v20060713-1700:1.7.2.1
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.4
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1;
locks; strict;
comment	@# @;


1.15
date	2008.07.08.19.09.14;	author ahunter;	state Exp;
branches;
next	1.14;
commitid	623f4873bb5a4567;

1.14
date	2008.04.17.17.08.09;	author ahunter;	state Exp;
branches
	1.14.2.1;
next	1.13;
commitid	f46480783f84567;

1.13
date	2007.12.11.15.17.06;	author crevells;	state Exp;
branches;
next	1.12;
commitid	7102475ea9f14567;

1.12
date	2007.12.06.21.18.59;	author ahunter;	state Exp;
branches;
next	1.11;
commitid	72b7475867424567;

1.11
date	2007.11.06.13.59.49;	author crevells;	state Exp;
branches;
next	1.10;
commitid	44d1473073554567;

1.10
date	2007.05.16.17.10.01;	author ahunter;	state Exp;
branches
	1.10.4.1;
next	1.9;
commitid	4e87464b3ae94567;

1.9
date	2007.04.05.19.45.17;	author aboyko;	state Exp;
branches;
next	1.8;
commitid	6df0461551cd4567;

1.8
date	2006.10.03.15.02.59;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.29.16.39.20;	author mmostafa;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.02.10.21.32.30;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.26.15.37.23;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.17.14.58.28;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.16.22.13.42;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.06.20.00.53;	author ldamus;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.21.23.06.43;	author cmahoney;	state Exp;
branches;
next	;

1.7.2.1
date	2006.07.11.15.10.31;	author cmahoney;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2006.08.24.15.00.57;	author cmahoney;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2006.09.11.19.42.32;	author ldamus;	state Exp;
branches;
next	;

1.10.4.1
date	2007.11.06.14.49.36;	author crevells;	state Exp;
branches;
next	;
commitid	542647307eff4567;

1.14.2.1
date	2008.07.08.18.37.01;	author ahunter;	state Exp;
branches;
next	;
commitid	48364873b3cc4567;


desc
@@


1.15
log
@[180196] gmf-head ahunter 080708 [Cleanup] RulerGridPropertySection: don’t cast Part to DiagramEditor
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.properties.sections.grid;

import java.text.ParseException;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n.DiagramUIPropertiesImages;
import org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n.DiagramUIPropertiesMessages;
import org.eclipse.gmf.runtime.diagram.ui.properties.sections.appearance.ColorPalettePopup;
import org.eclipse.gmf.runtime.diagram.ui.properties.views.TextChangeHelper;
import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.resource.CompositeImageDescriptor;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.util.IPropertyChangeListener;
import org.eclipse.jface.util.PropertyChangeEvent;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.accessibility.AccessibleAdapter;
import org.eclipse.swt.accessibility.AccessibleEvent;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.PaletteData;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.views.properties.tabbed.AbstractPropertySection;
import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;

import com.ibm.icu.text.NumberFormat;

public class RulerGridPropertySection
	extends AbstractPropertySection {

	// Groups
	private Group displayGroup;
	private Group measurementGroup;
	private Group gridlineGroup;

	// Buttons
	private Button gridVisibilityButton;
	private Button gridOrderButton;
	private Button snapToGridButton;
    private Button snapToGeometryButton;
	private Button restoreButton;

	private Button rulerVisibilityButton;

	private Button lineColorButton;

	// Labels
	private static final String GRID_ON_LABEL = DiagramUIPropertiesMessages.Grid_On_Label_Text;
	private static final String GRID_LEVEL_LABEL = DiagramUIPropertiesMessages.Grid_Level_Label_Text;
	private static final String SNAP_TO_GRID_LABEL = DiagramUIPropertiesMessages.Snap_To_Grid_Label_Text;
    private static final String SNAP_TO_GEOMETRY_LABEL = DiagramUIPropertiesMessages.Snap_To_Geometry_Label_Text;
	private static final String RULER_ON_LABEL = DiagramUIPropertiesMessages.Ruler_On_Label_Text;
	private static final String RULER_UNITS_LABEL = DiagramUIPropertiesMessages.Ruler_Units_Label_Text;
	private static final String GRID_SPACING_LABEL = DiagramUIPropertiesMessages.Grid_Spacing_Label_Text;
	private static final String VISIBILITY_LABEL = DiagramUIPropertiesMessages.Display_Group_Label_Text;
	private static final String MEASUREMENT_LABEL = DiagramUIPropertiesMessages.Measurement_Group_Label_Text;
	private static final String GRIDLINE_LABEL = DiagramUIPropertiesMessages.Gridline_Group_Label_Text;
	private static final String LINE_COLOR_LABEL = DiagramUIPropertiesMessages.Line_Color_Label_Text;
	private static final String LINE_STYLE_LABEL = DiagramUIPropertiesMessages.Line_Style_Label_Text;
	private static final String RESTORE_LABEL = DiagramUIPropertiesMessages.Restore_Defaults_Label_Text;

	// Unit labels
	private static final String INCHES_LABEL = DiagramUIPropertiesMessages.Inches_Label_Text;
	private static final String CENTIMETERS_LABEL = DiagramUIPropertiesMessages.Centimeters_Label_Text;
	private static final String PIXEL_LABEL = DiagramUIPropertiesMessages.Pixel_Label_Text;

	// Line Style labels
	private static final String SOLID_LABEL = DiagramUIPropertiesMessages.Solid_Label_Text;
	private static final String DASH_LABEL = DiagramUIPropertiesMessages.Dash_Label_Text;
	private static final String DOT_LABEL = DiagramUIPropertiesMessages.Dot_Label_Text;
	private static final String DASH_DOT_LABEL = DiagramUIPropertiesMessages.Dash_Dot_Label_Text;
	private static final String DASH_DOT_DOT_LABEL = DiagramUIPropertiesMessages.Dash_Dot_Dot_Label_Text;
	private static final String SPACED_DOT_LABEL = DiagramUIPropertiesMessages.Spaced_Dot_Label_Text;

	// Default color for the grid.
	private static final int LIGHT_GRAY_RGB = 12632256;

	// Ruler unit drop down
	private CCombo rulerUnitCombo;

	// Line style drop down
	private CCombo lineStyleCombo;

	// Text widget to display and set value of the property
	private Text textWidget;

	private RGB lineColor = null;

	// For changing ruler units
	private static final int INCHES = 0;
	private static final int CENTIMETERS = 1;
	private static final int PIXELS = 2;

	// Conversion from inch to centimeter
	private static final double INCH2CM = 2.54;

	// Valid grid spacing range
	private double minValidValue = 00.009;
	private double maxValidValue = 99.999;

	// Listener for workspace property changes
	private PropertyStoreListener propertyListener = new PropertyStoreListener();

	private IPreferenceStore workspaceViewerProperties = null;

    private static class ColorOverlayImageDescriptor
	extends CompositeImageDescriptor {

	/** default color icon width */
	private static final Point ICON_SIZE = new Point(16, 16);

	/** the basic icon */
	private ImageData basicImgData;

	/** the color of the thin color bar */
	private RGB rgb;

	/**
	 * Creates a new color menu image descriptor
	 * 
	 * @@param basicIcon
	 *            The basic Image data
	 * @@param rgb
	 *            The color bar RGB value
	 */
	public ColorOverlayImageDescriptor(ImageData basicImgData, RGB rgb) {
		this.basicImgData = basicImgData;
		this.rgb = rgb;
	}

	/**
	 * @@see org.eclipse.jface.resource.CompositeImageDescriptor#drawCompositeImage(int,
	 *      int)
	 */
	protected void drawCompositeImage(int width, int height) {

		// draw the thin color bar underneath
		if (rgb != null) {
			ImageData colorBar = new ImageData(width, height / 5, 1,
			
				new PaletteData(new RGB[] {rgb}));
			drawImage(colorBar, 0, height - height / 5);
			
		}
		// draw the base image
		drawImage(basicImgData, 0, 0);
	}

	/**
	 * @@see org.eclipse.jface.resource.CompositeImageDescriptor#getSize()
	 */
	protected Point getSize() {
		return ICON_SIZE;
	}
}  
		
    /* (non-Javadoc)
     * @@see org.eclipse.ui.views.properties.tabbed.ISection#createControls(org.eclipse.swt.widgets.Composite, org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage)
	 */
    public void createControls(Composite parent, TabbedPropertySheetPage aTabbedPropertySheetPage) {
		super.createControls(parent, aTabbedPropertySheetPage);
		initializeControls(parent);
	}

	/**
	 * 
	 * Sets up controls with proper layouts and groups	 
	 * @@param parent
	 */
	private void initializeControls(Composite parent) {
		parent.setLayout(new GridLayout(1, false));

		// Top row composite
		Composite topComposite = getWidgetFactory().createComposite(parent);
		topComposite.setLayout(new GridLayout(2, false));

		// Create the groups for this section
		createDisplayGroup(topComposite);
		createMeasurementGroup(topComposite);

		// Bottom row composite
		Composite bottomComposite = getWidgetFactory().createComposite(parent);
		bottomComposite.setLayout(new GridLayout(2, false));

		// Create grid line settings
		createGridlineGroup(bottomComposite);

        Composite extraComposite = getWidgetFactory().createComposite(bottomComposite);
		extraComposite.setLayout(new GridLayout(1, false));

		// Create snap to grid checkbox
        snapToGridButton = getWidgetFactory().createButton(
            extraComposite, SNAP_TO_GRID_LABEL, SWT.CHECK);
		snapToGridButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				// Set the snap to grid workspace property
                setWorkspaceProperty(WorkspaceViewerProperties.SNAPTOGRID, snapToGridButton.getSelection());
			}
		});

        // Create snap to geometry checkbox
        snapToGeometryButton = getWidgetFactory().createButton(
            extraComposite, SNAP_TO_GEOMETRY_LABEL, SWT.CHECK);
        snapToGeometryButton.addSelectionListener(new SelectionAdapter() {

            public void widgetSelected(SelectionEvent event) {
                // Set the snap to geometry workspace property
                setWorkspaceProperty(WorkspaceViewerProperties.SNAPTOGEOMETRY, snapToGeometryButton.getSelection());
            }
        });
        
		// Create restore to preferences defaults
        restoreButton = getWidgetFactory().createButton(
            extraComposite, RESTORE_LABEL, SWT.PUSH);
		restoreButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				restorePreferenceValues();
			}

			private void restorePreferenceValues() {
				IPreferenceStore preferenceStore = getPreferenceStore();

				// The workspace properties will always exist because it is set
				// 
				IPreferenceStore wsPrefStore = getWorkspaceViewerProperties();

				if (wsPrefStore.getBoolean(WorkspaceViewerProperties.GRIDORDER) == false) {
                    wsPrefStore.setValue(WorkspaceViewerProperties.GRIDORDER, true);            
				}
				if (wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINECOLOR) != LIGHT_GRAY_RGB) {
                    wsPrefStore.setValue(WorkspaceViewerProperties.GRIDLINECOLOR, LIGHT_GRAY_RGB);          
				}
				if (wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINESTYLE) != SWT.LINE_CUSTOM) {
                    wsPrefStore.setValue(WorkspaceViewerProperties.GRIDLINESTYLE, SWT.LINE_CUSTOM);         
				}
                if (wsPrefStore.getBoolean(WorkspaceViewerProperties.VIEWRULERS) != preferenceStore.getBoolean(IPreferenceConstants.PREF_SHOW_RULERS)) {
                    wsPrefStore.setValue(WorkspaceViewerProperties.VIEWRULERS, preferenceStore.getBoolean(IPreferenceConstants.PREF_SHOW_RULERS));
				}
                if (wsPrefStore.getBoolean(WorkspaceViewerProperties.VIEWGRID) != preferenceStore.getBoolean(IPreferenceConstants.PREF_SHOW_GRID)) {
                    wsPrefStore.setValue(WorkspaceViewerProperties.VIEWGRID, preferenceStore.getBoolean(IPreferenceConstants.PREF_SHOW_GRID));
				}
                if (wsPrefStore.getBoolean(WorkspaceViewerProperties.SNAPTOGRID) != preferenceStore.getBoolean(IPreferenceConstants.PREF_SNAP_TO_GRID)) {
                    wsPrefStore.setValue(WorkspaceViewerProperties.SNAPTOGRID, preferenceStore.getBoolean(IPreferenceConstants.PREF_SNAP_TO_GRID));         
				}
                if (wsPrefStore.getBoolean(WorkspaceViewerProperties.SNAPTOGEOMETRY) != preferenceStore.getBoolean(IPreferenceConstants.PREF_SNAP_TO_GEOMETRY)) {
                    wsPrefStore.setValue(WorkspaceViewerProperties.SNAPTOGEOMETRY, preferenceStore.getBoolean(IPreferenceConstants.PREF_SNAP_TO_GEOMETRY));         
                }
                if ((wsPrefStore.getInt(WorkspaceViewerProperties.RULERUNIT) != preferenceStore.getInt(IPreferenceConstants.PREF_RULER_UNITS)) || 
                        (wsPrefStore.getDouble(WorkspaceViewerProperties.GRIDSPACING) != preferenceStore.getDouble(IPreferenceConstants.PREF_GRID_SPACING))) {
                    wsPrefStore.setValue(WorkspaceViewerProperties.RULERUNIT, preferenceStore.getInt(IPreferenceConstants.PREF_RULER_UNITS));                       
                    wsPrefStore.setValue(WorkspaceViewerProperties.GRIDSPACING, preferenceStore.getDouble(IPreferenceConstants.PREF_GRID_SPACING));         
				}

				// reset the input values
				setInput(getPart(), null);
			}
		});
	}

	private IPreferenceStore getPreferenceStore() {
        IPreferenceStore preferenceStore =
            (IPreferenceStore) ((IDiagramWorkbenchPart) getPart()).getDiagramEditPart().getDiagramPreferencesHint().getPreferenceStore();
		return preferenceStore;
	}

	private void createLineColorControl(Composite composite) {
		getWidgetFactory().createLabel(composite, LINE_COLOR_LABEL);

		lineColorButton = new Button(composite, SWT.PUSH);
        lineColorButton.setImage(DiagramUIPropertiesImages.get(DiagramUIPropertiesImages.IMG_LINE_COLOR));

        lineColorButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
					public void getName(AccessibleEvent e) {
						e.result = DiagramUIMessages.PropertyDescriptorFactory_LineColor;
					}
				});

		lineColorButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				changeLineColor(event);
			}

			/**
			 * Change line color property value
			 */
			private void changeLineColor(SelectionEvent event) {
				lineColor = changeColor(
						event,
						lineColorButton,
						DiagramUIPropertiesImages.DESC_LINE_COLOR,
						getWorkspacePropertyInt(WorkspaceViewerProperties.GRIDLINECOLOR));
				if (lineColor != null)
                    setWorkspaceProperty(WorkspaceViewerProperties.GRIDLINECOLOR, FigureUtilities.RGBToInteger(lineColor).intValue());
			}
		});
		lineColorButton.setEnabled(true);
	}

	private void createLineStyleControl(Composite composite) {
		getWidgetFactory().createLabel(composite, LINE_STYLE_LABEL);

		lineStyleCombo = getWidgetFactory().createCCombo(composite,
				SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
		lineStyleCombo.setItems(getStyles());
		lineStyleCombo.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				updateLineStyle();
			}

			private void updateLineStyle() {
				int style = lineStyleCombo.getSelectionIndex();
                setWorkspaceProperty(WorkspaceViewerProperties.GRIDLINESTYLE, style + SWT.LINE_SOLID);
			}
		});

	}

	/**
	 * @@param event -
	 *            selection event
	 * @@param button -
	 *            event source
	 * @@param imageDescriptor -
     *            the image to draw overlay on the button after the new
     *            color is set
	 * @@return - new RGB color, or null if none selected
	 */
	private RGB changeColor(SelectionEvent event, Button button,
			ImageDescriptor imageDescriptor, int previousColor) {

		ColorPalettePopup popup = new ColorPalettePopup(button.getParent()
				.getShell(), IDialogConstants.BUTTON_BAR_HEIGHT);

		popup.setPreviousColor(previousColor);
		Rectangle r = button.getBounds();
		Point location = button.getParent().toDisplay(r.x, r.y);
		popup.open(new Point(location.x, location.y + r.height));

		if (popup.useDefaultColor()) {
			Image overlyedImage = new ColorOverlayImageDescriptor(
					imageDescriptor.getImageData(), FigureUtilities.integerToRGB(new Integer(LIGHT_GRAY_RGB)))
					.createImage();
			disposeImage(button.getImage());
			button.setImage(overlyedImage);
			return FigureUtilities.integerToRGB(new Integer(LIGHT_GRAY_RGB));
		}

		if (popup.getSelectedColor() != null) {
			Image overlyedImage = new ColorOverlayImageDescriptor(
					imageDescriptor.getImageData(), popup.getSelectedColor())
					.createImage();
			disposeImage(button.getImage());
			button.setImage(overlyedImage);
		}

		return popup.getSelectedColor();

	}

	private void disposeImage(Image image) {
		if (image == null) {
			return;
		}

		if (image.equals(DiagramUIPropertiesImages
				.get(DiagramUIPropertiesImages.IMG_LINE_COLOR))) {
			return;
		}

		if (!image.isDisposed()) {
			image.dispose();
		}
	}

	private Double convertStringToDouble(String strValue) {
		NumberFormat numberFormatter = NumberFormat.getInstance();
		Double value;
		try {
			value = forceDouble(numberFormatter.parse(strValue));
		} catch (ParseException e) {
			// default value
            value = new Double(getWorkspacePropertyDouble(WorkspaceViewerProperties.GRIDSPACING));
			setGridSpacing(value.doubleValue());
		}
		return value;
	}

	private void setGridSpacing(double value) {
		// Set grid spacing back to the input value
		NumberFormat numberFormater = NumberFormat.getInstance();
		textWidget.setText(numberFormater.format(value));
		textWidget.selectAll();
	}

	/**
	 * Creates group with ruler units and grid spacing controls	 
	 * @@param composite
	 */
	private void createMeasurementGroup(Composite composite) {

        measurementGroup = getWidgetFactory().createGroup(composite, MEASUREMENT_LABEL);        
		measurementGroup.setLayout(new GridLayout(2, false));

		// Create ruler unit combo
		getWidgetFactory().createLabel(measurementGroup, RULER_UNITS_LABEL);

		rulerUnitCombo = getWidgetFactory().createCCombo(measurementGroup,
				SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
		rulerUnitCombo.setItems(getUnits());
		rulerUnitCombo.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				int oldUnits = getWorkspacePropertyInt(WorkspaceViewerProperties.RULERUNIT);
				int newUnits = rulerUnitCombo.getSelectionIndex();

				// Order of the changes is important so that there is no
				// interim point with a 1 pixel grid spacing
				if (oldUnits < newUnits) {
					updateSpacing(oldUnits, newUnits);
					updateRulerUnits();
				} else {
					updateRulerUnits();
					updateSpacing(oldUnits, newUnits);
				}
			}

			private void updateSpacing(int fromUnits, int toUnits) {
				String currentUnits = convertUnits(fromUnits, toUnits);
                setWorkspaceProperty(WorkspaceViewerProperties.GRIDSPACING, convertStringToDouble(currentUnits).doubleValue());
			}

			private void updateRulerUnits() {
				int units = getCurrentRulerUnit();
				setWorkspaceProperty(WorkspaceViewerProperties.RULERUNIT, units);
			}
		});

		// Create grid spacing text field
		getWidgetFactory().createLabel(measurementGroup, GRID_SPACING_LABEL);
        textWidget = getWidgetFactory().createText(measurementGroup, StringStatics.BLANK, SWT.BORDER);
		GridData data = new GridData(SWT.FILL, SWT.FILL, true, false);
		textWidget.setLayoutData(data);
		startTextWidgetEventListener();

	}

	/**
	 * 
	 * converts fromUnits to toUnits (e.g. inches to pixels)
	 * 
	 * @@param fromUnits
	 * @@param toUnits
	 * @@return equivalent number of toUnits for the given fromUnits
	 */
	private String convertUnits(int fromUnits, int toUnits) {
		String valueStr = textWidget.getText();
		if (fromUnits == toUnits) {
			return valueStr;
		}
		Double value = convertStringToDouble(valueStr);
		double pixelValue = 0;
		switch (fromUnits) {
		case INCHES:
			pixelValue = value.doubleValue() * Display.getDefault().getDPI().x;
			break;
		case CENTIMETERS:
                pixelValue = value.doubleValue() * Display.getDefault().getDPI().x / INCH2CM;
			break;
		case PIXELS:
			pixelValue = value.intValue();
		}

		double returnValue = 0;

		switch (toUnits) {
		case INCHES:
			returnValue = pixelValue / Display.getDefault().getDPI().x;
			break;
		case CENTIMETERS:
                returnValue = pixelValue * INCH2CM / Display.getDefault().getDPI().x;
			break;
		case PIXELS:
			returnValue = Math.round(pixelValue);
		}
		NumberFormat numberFormatter = NumberFormat.getInstance();
		return numberFormatter.format(returnValue);

	}

	/**
	 * A helper to listen for events that indicate that a text field has been
	 * changed.
	 */
	private TextChangeHelper textListener = new TextChangeHelper() {
		boolean textModified = false;

		/**
		 * @@see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
		 */
		public void handleEvent(Event event) {
			switch (event.type) {
			case SWT.KeyDown:
				textModified = true;
				if (event.character == SWT.CR)
					textChanged((Control) event.widget);
				break;
			case SWT.FocusOut:
				textChanged((Control) event.widget);
				break;
			}
		}

		public void textChanged(Control control) {
			if (textModified) {
				String currentText = ((Text) control).getText();
				try {

                    double value = convertStringToDouble(currentText).doubleValue();
					double pixels = convertToBase(value);
					if (pixels >= minValidValue && pixels <= maxValidValue) {
                        setWorkspaceProperty(WorkspaceViewerProperties.GRIDSPACING, value);                       
						setGridSpacing(value);
					} else {
						resetGridSpacing();
					}

				} catch (NumberFormatException e) {
					resetGridSpacing();
				}
				textModified = false;
			}
		}

		private void resetGridSpacing() {
			// Set grid spacing back to original value
			double value = getWorkspacePropertyDouble(WorkspaceViewerProperties.GRIDSPACING);
			setGridSpacing(value);
		}

	};

	/**
	 * 
     * converts the current units used to a base unit value to be used (e.g. in validation)
	 * 
     * @@param number Units to be converted to the base unit
	 * @@return
	 */
	private double convertToBase(double number) {

		double returnValue = 0;
		switch (getCurrentRulerUnit()) {
		case INCHES:
			returnValue = number;
			break;
		case CENTIMETERS:
			returnValue = number / INCH2CM;
			break;
		case PIXELS:
			returnValue = number / Display.getDefault().getDPI().x;
		}
		return returnValue;
	}

	private int getCurrentRulerUnit() {
		return rulerUnitCombo.getSelectionIndex();
	}

    /* (non-Javadoc)
     * @@see org.eclipse.ui.views.properties.tabbed.ISection#setInput(org.eclipse.ui.IWorkbenchPart, org.eclipse.jface.viewers.ISelection)
	 */
	public void setInput(IWorkbenchPart part, ISelection selection) {
		super.setInput(part, selection);

		// Set up workspace property listener
		initWorkspacePropertyListener();
		double value = getWorkspacePropertyDouble(WorkspaceViewerProperties.GRIDSPACING);
		NumberFormat numberFormatter = NumberFormat.getNumberInstance();
		textWidget.setText(numberFormatter.format(value));
        rulerVisibilityButton.setSelection(getBooleanWorkspaceProperty(WorkspaceViewerProperties.VIEWRULERS));
        gridVisibilityButton.setSelection(getBooleanWorkspaceProperty(WorkspaceViewerProperties.VIEWGRID));
        gridOrderButton.setSelection(getBooleanWorkspaceProperty(WorkspaceViewerProperties.GRIDORDER));
        snapToGridButton.setSelection(getBooleanWorkspaceProperty(WorkspaceViewerProperties.SNAPTOGRID));
        snapToGeometryButton.setSelection(getBooleanWorkspaceProperty(WorkspaceViewerProperties.SNAPTOGEOMETRY));

		int rulerValue = getValue(WorkspaceViewerProperties.RULERUNIT);
		int styleValue = getValue(WorkspaceViewerProperties.GRIDLINESTYLE) - 1;
		rulerUnitCombo.setText(getUnits()[rulerValue]);
		lineStyleCombo.setText(getStyles()[styleValue]);
		Image overlyedImage = new ColorOverlayImageDescriptor(
				(DiagramUIPropertiesImages.DESC_LINE_COLOR).getImageData(),
				FigureUtilities
						.integerToRGB(getWorkspacePropertyInt(WorkspaceViewerProperties.GRIDLINECOLOR)))
				.createImage();
		disposeImage(lineColorButton.getImage());
		lineColorButton.setImage(overlyedImage);

	}

	/**
	 * @@param property
	 * @@return the integer value of the string property
	 */
	private int getValue(String property) {
		int value;
		String valueString = getWorkspaceProperty(property);

		if (valueString.equals(StringStatics.BLANK)) {
			value = 0;
		} else {
			value = new Integer(getWorkspaceProperty(property)).intValue();
		}
		return value;
	}

	private String[] getUnits() {
		return new String[] { INCHES_LABEL, CENTIMETERS_LABEL, PIXEL_LABEL };
	}

	private String[] getStyles() {
        return new String[]{SOLID_LABEL,DASH_LABEL,DOT_LABEL,DASH_DOT_LABEL,DASH_DOT_DOT_LABEL,SPACED_DOT_LABEL};
	}

    /* (non-Javadoc)
	 * @@see org.eclipse.ui.views.properties.tabbed.ISection#dispose()
	 */
	public void dispose() {
		stopTextWidgetEventListener();
		removeWorkspacePropertyListener();
		super.dispose();
	}

	/**
	 * Start listening to the text widget events
	 */
	private void startTextWidgetEventListener() {
		getListener().startListeningTo(getTextWidget());
		getListener().startListeningForEnter(getTextWidget());
	}

	/**
	 * Stop listening to text widget events
	 */
	private void stopTextWidgetEventListener() {
		getListener().stopListeningTo(getTextWidget());
	}

	/**
	 * @@return Returns the textWidget.
	 */
	private Text getTextWidget() {
		return textWidget;
	}

	/**
	 * @@return Returns the listener.
	 */
	private TextChangeHelper getListener() {
		return textListener;
	}

	/**
	 * Creates group with ruler and grid visibility and grid order controls
	 * @@param composite
	 */
	private void createDisplayGroup(Composite composite) {

        displayGroup = getWidgetFactory().createGroup(composite, VISIBILITY_LABEL);     
		displayGroup.setLayout(new GridLayout(1, true));

        rulerVisibilityButton = getWidgetFactory().createButton(
            displayGroup, RULER_ON_LABEL, SWT.CHECK);
		rulerVisibilityButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				// Set ruler visibility workspace property
                setWorkspaceProperty(WorkspaceViewerProperties.VIEWRULERS, rulerVisibilityButton.getSelection());
			}
		});

        
        gridVisibilityButton = getWidgetFactory().createButton(
            displayGroup, GRID_ON_LABEL, SWT.CHECK);
		gridVisibilityButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				// Set grid visibility workspace property
                setWorkspaceProperty(WorkspaceViewerProperties.VIEWGRID, gridVisibilityButton.getSelection());
			}
		});

        gridOrderButton = getWidgetFactory().createButton(
            displayGroup, GRID_LEVEL_LABEL, SWT.CHECK);
		gridOrderButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				// Set grid level workspace property
                setWorkspaceProperty(WorkspaceViewerProperties.GRIDORDER, gridOrderButton.getSelection());
			}
		});

	}

	/**
	 * Creates group with line color and style controls
	 * @@param composite
	 */
	private void createGridlineGroup(Composite composite) {

        gridlineGroup = getWidgetFactory().createGroup(composite, GRIDLINE_LABEL);  
		GridLayout gridLayout = new GridLayout(2, false);
		gridlineGroup.setLayout(gridLayout);
		createLineColorControl(gridlineGroup);
		createLineStyleControl(gridlineGroup);

	}

	private void setWorkspaceProperty(String property, boolean setting) {
		getWorkspaceViewerProperties().setValue(property, setting);
	}

	private void setWorkspaceProperty(String property, int setting) {
		getWorkspaceViewerProperties().setValue(property, setting);
	}

	private void setWorkspaceProperty(String property, double setting) {
		getWorkspaceViewerProperties().setValue(property, setting);
	}

	private String getWorkspaceProperty(String property) {
		return getWorkspaceViewerProperties().getString(property);
	}

	private int getWorkspacePropertyInt(String property) {
		return getWorkspaceViewerProperties().getInt(property);
	}

	private double getWorkspacePropertyDouble(String property) {
		return getWorkspaceViewerProperties().getDouble(property);
	}

	private boolean getBooleanWorkspaceProperty(String property) {
		return getWorkspaceViewerProperties().getBoolean(property);
	}

	private IPreferenceStore getWorkspaceViewerProperties() {
		return workspaceViewerProperties;
	}

	/**
	 * Listener for the workspace preference store.
	 */
	private class PropertyStoreListener implements IPropertyChangeListener {

		/*
		 * (non-Javadoc)
		 * @@see org.eclipse.jface.util.IPropertyChangeListener#propertyChange(org.eclipse.jface.util.PropertyChangeEvent)
		 */
        public void propertyChange(org.eclipse.jface.util.PropertyChangeEvent event) {
			handleWorkspacePropertyChanged(event);
		}
	}

	/**
	 * Handles workspace property changes	  
	 * @@param event
	 */
	private void handleWorkspacePropertyChanged(PropertyChangeEvent event) {
		if (WorkspaceViewerProperties.VIEWGRID.equals(event.getProperty())) {
			if (!gridVisibilityButton.isDisposed()) {
				gridVisibilityButton.setSelection(getEventBoolean(event));
			}
        } else if (WorkspaceViewerProperties.VIEWRULERS.equals(event.getProperty())) {          
			if (!rulerVisibilityButton.isDisposed()) {
				rulerVisibilityButton.setSelection(getEventBoolean(event));
			}
        } else if (WorkspaceViewerProperties.SNAPTOGRID.equals(event.getProperty())) {          
			if (!snapToGridButton.isDisposed()) {
				snapToGridButton.setSelection(getEventBoolean(event));
			}
        } else if (WorkspaceViewerProperties.SNAPTOGEOMETRY.equals(event.getProperty())) {          
            if (!snapToGeometryButton.isDisposed()) {
                snapToGeometryButton.setSelection(getEventBoolean(event));
            }
        } else if (WorkspaceViewerProperties.GRIDORDER.equals(event.getProperty())) {
			if (!gridOrderButton.isDisposed()) {
				gridOrderButton.setSelection(getEventBoolean(event));
			}
        } else if (WorkspaceViewerProperties.GRIDSPACING.equals(event.getProperty())) {
			if (!textWidget.isDisposed()) {
				Double value = new Double(getEventString(event));
				textWidget.setText(NumberFormat.getInstance().format(value));
			}
        } else if (WorkspaceViewerProperties.RULERUNIT.equals(event.getProperty())) {           
			if (!rulerUnitCombo.isDisposed()) {
				rulerUnitCombo.select(Integer.parseInt(getEventString(event)));
			}
        } else if (WorkspaceViewerProperties.GRIDLINESTYLE.equals(event.getProperty())) {
			if (!lineStyleCombo.isDisposed()) {
                lineStyleCombo.select(Integer.parseInt(getEventString(event))-1);
			}
		}
	}

	private boolean getEventBoolean(PropertyChangeEvent event) {
		Boolean newValue = (Boolean) event.getNewValue();
		return newValue.booleanValue();
	}

	private String getEventString(PropertyChangeEvent event) {
		return event.getNewValue().toString();
	}

	/**
     * Initializes the preferenceStore property change
     * listener.
	 */
	private void initWorkspacePropertyListener() {
		IDiagramWorkbenchPart editor = (IDiagramWorkbenchPart) getPart();
        if (editor == null) return;
        DiagramGraphicalViewer viewer = (DiagramGraphicalViewer) editor.getDiagramGraphicalViewer();
		workspaceViewerProperties = viewer.getWorkspaceViewerPreferenceStore();
		workspaceViewerProperties.addPropertyChangeListener(propertyListener);
	}

	/**
     * This method removes all listeners to the notational world (views, figures, editpart...etc)
     * Override this method to remove notational listeners down the hierarchy
	 */
	private void removeWorkspacePropertyListener() {
		if (getWorkspaceViewerProperties() != null) {
            getWorkspaceViewerProperties().removePropertyChangeListener(propertyListener);
			workspaceViewerProperties = null;
		}
		propertyListener = null;
	}

	/**
     * The NumberFormatter.parse() could return a Long or Double
     * We are storing all values related to the page setup as doubles
     * so we call this function when ever we are getting values from
     * the dialog.
	 * @@param number
	 * @@return
	 */
	private Double forceDouble(Number number) {
		if (!(number instanceof Double))
			return new Double(number.doubleValue());
		return (Double) number;
	}
}
@


1.14
log
@[147497] gmf-head carson_li 080417 ROLLBACK [Properties] Buttons on the appearance tab should be DROP_DOWN style
@
text
@a18 1
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;
d297 1
a297 1
            (IPreferenceStore) ((DiagramEditor) getPart()).getDiagramEditPart().getDiagramPreferencesHint().getPreferenceStore();
@


1.14.2.1
log
@[180196] gmf-R2_1_maintenance ahunter 080708 [Cleanup] RulerGridPropertySection: don’t cast Part to DiagramEditor
@
text
@d19 1
d298 1
a298 1
            (IPreferenceStore) ((IDiagramWorkbenchPart) getPart()).getDiagramEditPart().getDiagramPreferencesHint().getPreferenceStore();
@


1.13
log
@[188974] gmf_head crevells 071211 [RulersGrid] GEF alignment feature missing
Contributed by:  Carson Li
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2007 IBM Corporation and others.
a55 2
import org.eclipse.swt.widgets.ToolBar;
import org.eclipse.swt.widgets.ToolItem;
d63 1
a63 1
    extends AbstractPropertySection {
d65 9
a73 9
    // Groups
    private Group displayGroup;
    private Group measurementGroup;
    private Group gridlineGroup;

    // Buttons
    private Button gridVisibilityButton;
    private Button gridOrderButton;
    private Button snapToGridButton;
d75 1
a75 1
    private Button restoreButton;
d77 1
a77 1
    private Button rulerVisibilityButton;
d79 1
a79 1
    private ToolItem lineColorButton;
d81 4
a84 4
    // Labels
    private static final String GRID_ON_LABEL = DiagramUIPropertiesMessages.Grid_On_Label_Text;
    private static final String GRID_LEVEL_LABEL = DiagramUIPropertiesMessages.Grid_Level_Label_Text;
    private static final String SNAP_TO_GRID_LABEL = DiagramUIPropertiesMessages.Snap_To_Grid_Label_Text;
d86 48
a133 48
    private static final String RULER_ON_LABEL = DiagramUIPropertiesMessages.Ruler_On_Label_Text;
    private static final String RULER_UNITS_LABEL = DiagramUIPropertiesMessages.Ruler_Units_Label_Text;
    private static final String GRID_SPACING_LABEL = DiagramUIPropertiesMessages.Grid_Spacing_Label_Text;
    private static final String VISIBILITY_LABEL = DiagramUIPropertiesMessages.Display_Group_Label_Text;
    private static final String MEASUREMENT_LABEL = DiagramUIPropertiesMessages.Measurement_Group_Label_Text;
    private static final String GRIDLINE_LABEL = DiagramUIPropertiesMessages.Gridline_Group_Label_Text;
    private static final String LINE_COLOR_LABEL = DiagramUIPropertiesMessages.Line_Color_Label_Text;
    private static final String LINE_STYLE_LABEL = DiagramUIPropertiesMessages.Line_Style_Label_Text;
    private static final String RESTORE_LABEL = DiagramUIPropertiesMessages.Restore_Defaults_Label_Text;

    // Unit labels
    private static final String INCHES_LABEL = DiagramUIPropertiesMessages.Inches_Label_Text;
    private static final String CENTIMETERS_LABEL = DiagramUIPropertiesMessages.Centimeters_Label_Text;
    private static final String PIXEL_LABEL = DiagramUIPropertiesMessages.Pixel_Label_Text;

    // Line Style labels
    private static final String SOLID_LABEL = DiagramUIPropertiesMessages.Solid_Label_Text;
    private static final String DASH_LABEL = DiagramUIPropertiesMessages.Dash_Label_Text;
    private static final String DOT_LABEL = DiagramUIPropertiesMessages.Dot_Label_Text;
    private static final String DASH_DOT_LABEL = DiagramUIPropertiesMessages.Dash_Dot_Label_Text;
    private static final String DASH_DOT_DOT_LABEL = DiagramUIPropertiesMessages.Dash_Dot_Dot_Label_Text;
    private static final String SPACED_DOT_LABEL = DiagramUIPropertiesMessages.Spaced_Dot_Label_Text;

    // Default color for the grid.
    private static final int LIGHT_GRAY_RGB = 12632256;

    // Ruler unit drop down
    private CCombo rulerUnitCombo;

    // Line style drop down
    private CCombo lineStyleCombo;

    // Text widget to display and set value of the property
    private Text textWidget;

    private RGB lineColor = null;

    // For changing ruler units
    private static final int INCHES = 0;
    private static final int CENTIMETERS = 1;
    private static final int PIXELS = 2;

    // Conversion from inch to centimeter
    private static final double INCH2CM = 2.54;

    // Valid grid spacing range
    private double minValidValue = 00.009;
    private double maxValidValue = 99.999;
d135 2
a136 2
    // Listener for workspace property changes
    private PropertyStoreListener propertyListener = new PropertyStoreListener();
d138 1
a138 1
    private IPreferenceStore workspaceViewerProperties = null;
d141 1
a141 1
    extends CompositeImageDescriptor {
d143 2
a144 2
    /** default color icon width */
    private static final Point ICON_SIZE = new Point(16, 16);
d146 2
a147 2
    /** the basic icon */
    private ImageData basicImgData;
d149 40
a188 40
    /** the color of the thin color bar */
    private RGB rgb;

    /**
     * Creates a new color menu image descriptor
     * 
     * @@param basicIcon
     *            The basic Image data
     * @@param rgb
     *            The color bar RGB value
     */
    public ColorOverlayImageDescriptor(ImageData basicImgData, RGB rgb) {
        this.basicImgData = basicImgData;
        this.rgb = rgb;
    }

    /**
     * @@see org.eclipse.jface.resource.CompositeImageDescriptor#drawCompositeImage(int,
     *      int)
     */
    protected void drawCompositeImage(int width, int height) {

        // draw the thin color bar underneath
        if (rgb != null) {
            ImageData colorBar = new ImageData(width, height / 5, 1,
            
                new PaletteData(new RGB[] {rgb}));
            drawImage(colorBar, 0, height - height / 5);
            
        }
        // draw the base image
        drawImage(basicImgData, 0, 0);
    }

    /**
     * @@see org.eclipse.jface.resource.CompositeImageDescriptor#getSize()
     */
    protected Point getSize() {
        return ICON_SIZE;
    }
d190 1
a190 1
        
d193 1
a193 1
     */
d195 23
a217 23
        super.createControls(parent, aTabbedPropertySheetPage);
        initializeControls(parent);
    }

    /**
     * 
     * Sets up controls with proper layouts and groups   
     * @@param parent
     */
    private void initializeControls(Composite parent) {
        parent.setLayout(new GridLayout(1, false));

        // Top row composite
        Composite topComposite = getWidgetFactory().createComposite(parent);
        topComposite.setLayout(new GridLayout(2, false));

        // Create the groups for this section
        createDisplayGroup(topComposite);
        createMeasurementGroup(topComposite);

        // Bottom row composite
        Composite bottomComposite = getWidgetFactory().createComposite(parent);
        bottomComposite.setLayout(new GridLayout(2, false));
d219 2
a220 2
        // Create grid line settings
        createGridlineGroup(bottomComposite);
d223 1
a223 1
        extraComposite.setLayout(new GridLayout(1, false));
d225 1
a225 1
        // Create snap to grid checkbox
d228 1
a228 1
        snapToGridButton.addSelectionListener(new SelectionAdapter() {
d230 2
a231 2
            public void widgetSelected(SelectionEvent event) {
                // Set the snap to grid workspace property
d233 3
a235 3
            }
        });
        
d247 1
a247 1
        // Create restore to preferences defaults
d250 1
a250 1
        restoreButton.addSelectionListener(new SelectionAdapter() {
d252 3
a254 3
            public void widgetSelected(SelectionEvent event) {
                restorePreferenceValues();
            }
d256 2
a257 2
            private void restorePreferenceValues() {
                IPreferenceStore preferenceStore = getPreferenceStore();
d259 3
a261 3
                // The workspace properties will always exist because it is set
                
                IPreferenceStore wsPrefStore = getWorkspaceViewerProperties();
d263 1
a263 1
                if (wsPrefStore.getBoolean(WorkspaceViewerProperties.GRIDORDER) == false) {
d265 2
a266 2
                }
                if (wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINECOLOR) != LIGHT_GRAY_RGB) {
d268 2
a269 2
                }
                if (wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINESTYLE) != SWT.LINE_CUSTOM) {
d271 1
a271 1
                }
d274 1
a274 1
                }
d277 1
a277 1
                }
d280 1
a280 1
                }
d288 1
a288 1
                }
d290 5
a294 5
                // reset the input values
                setInput(getPart(), null);
            }
        });
    }
d296 1
a296 1
    private IPreferenceStore getPreferenceStore() {
d299 5
a303 2
        return preferenceStore;
    }
d305 1
a305 6
    private void createLineColorControl(Composite composite) {
        getWidgetFactory().createLabel(composite, LINE_COLOR_LABEL);
        ToolBar toolBar = new ToolBar(composite, SWT.FLAT);
            toolBar.setLayout(new GridLayout(1, false));
            toolBar.setBackground(composite.getBackground());
        lineColorButton = new ToolItem(toolBar, SWT.DROP_DOWN);
a306 5
        lineColorButton.addSelectionListener(new SelectionAdapter() {

            public void widgetSelected(SelectionEvent event) {
                changeLineColor(event);
            }
d308 22
a329 10
            /**
             * Change line color property value
             */
            private void changeLineColor(SelectionEvent event) {
                lineColor = changeColor(
                        event,
                        lineColorButton,
                        DiagramUIPropertiesImages.DESC_LINE_COLOR,
                        getWorkspacePropertyInt(WorkspaceViewerProperties.GRIDLINECOLOR));
                if (lineColor != null)
d331 16
a346 25
            }
        });
        lineColorButton.setEnabled(true);

        //the accessibility listener is applied to the whole tool bar because there is only one item in it, in the event
        //that additional tool items are added, this should be changed to search for the tool bar's children and their
        //their respective tool tips. Refer to ColorsAndFontsPropertySection.java.
        toolBar.getAccessible().addAccessibleListener(new AccessibleAdapter() {
            public void getName(AccessibleEvent e) {
                e.result = DiagramUIMessages.PropertyDescriptorFactory_LineColor;
            }
        });     
    }

    private void createLineStyleControl(Composite composite) {
        getWidgetFactory().createLabel(composite, LINE_STYLE_LABEL);

        lineStyleCombo = getWidgetFactory().createCCombo(composite,
                SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
        lineStyleCombo.setItems(getStyles());
        lineStyleCombo.addSelectionListener(new SelectionAdapter() {

            public void widgetSelected(SelectionEvent event) {
                updateLineStyle();
            }
d348 2
a349 2
            private void updateLineStyle() {
                int style = lineStyleCombo.getSelectionIndex();
d351 2
a352 2
            }
        });
d354 1
a354 1
    }
d356 6
a361 6
    /**
     * @@param event -
     *            selection event
     * @@param toolItem -
     *            event source
     * @@param imageDescriptor -
d364 56
a419 56
     * @@return - new RGB color, or null if none selected
     */
    private RGB changeColor(SelectionEvent event, ToolItem toolItem,
            ImageDescriptor imageDescriptor, int previousColor) {

        ColorPalettePopup popup = new ColorPalettePopup(toolItem.getParent()
                .getShell(), IDialogConstants.BUTTON_BAR_HEIGHT);

        popup.setPreviousColor(previousColor);
        Rectangle r = toolItem.getBounds();
        Point location = toolItem.getParent().toDisplay(r.x, r.y);
        popup.open(new Point(location.x, location.y + r.height));

        if (popup.useDefaultColor()) {
            Image overlyedImage = new ColorOverlayImageDescriptor(
                    imageDescriptor.getImageData(), FigureUtilities.integerToRGB(new Integer(LIGHT_GRAY_RGB)))
                    .createImage();
            disposeImage(toolItem.getImage());
            toolItem.setImage(overlyedImage);
            return FigureUtilities.integerToRGB(new Integer(LIGHT_GRAY_RGB));
        }

        if (popup.getSelectedColor() != null) {
            Image overlyedImage = new ColorOverlayImageDescriptor(
                    imageDescriptor.getImageData(), popup.getSelectedColor())
                    .createImage();
            disposeImage(toolItem.getImage());
            toolItem.setImage(overlyedImage);
        }

        return popup.getSelectedColor();

    }

    private void disposeImage(Image image) {
        if (image == null) {
            return;
        }

        if (image.equals(DiagramUIPropertiesImages
                .get(DiagramUIPropertiesImages.IMG_LINE_COLOR))) {
            return;
        }

        if (!image.isDisposed()) {
            image.dispose();
        }
    }

    private Double convertStringToDouble(String strValue) {
        NumberFormat numberFormatter = NumberFormat.getInstance();
        Double value;
        try {
            value = forceDouble(numberFormatter.parse(strValue));
        } catch (ParseException e) {
            // default value
d421 17
a437 17
            setGridSpacing(value.doubleValue());
        }
        return value;
    }

    private void setGridSpacing(double value) {
        // Set grid spacing back to the input value
        NumberFormat numberFormater = NumberFormat.getInstance();
        textWidget.setText(numberFormater.format(value));
        textWidget.selectAll();
    }

    /**
     * Creates group with ruler units and grid spacing controls  
     * @@param composite
     */
    private void createMeasurementGroup(Composite composite) {
d440 1
a440 1
        measurementGroup.setLayout(new GridLayout(2, false));
d442 2
a443 2
        // Create ruler unit combo
        getWidgetFactory().createLabel(measurementGroup, RULER_UNITS_LABEL);
d445 19
a463 4
        rulerUnitCombo = getWidgetFactory().createCCombo(measurementGroup,
                SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
        rulerUnitCombo.setItems(getUnits());
        rulerUnitCombo.addSelectionListener(new SelectionAdapter() {
d465 2
a466 18
            public void widgetSelected(SelectionEvent event) {
                int oldUnits = getWorkspacePropertyInt(WorkspaceViewerProperties.RULERUNIT);
                int newUnits = rulerUnitCombo.getSelectionIndex();

                // Order of the changes is important so that there is no
                // interim point with a 1 pixel grid spacing
                if (oldUnits < newUnits) {
                    updateSpacing(oldUnits, newUnits);
                    updateRulerUnits();
                } else {
                    updateRulerUnits();
                    updateSpacing(oldUnits, newUnits);
                }
            }

            private void updateSpacing(int fromUnits, int toUnits) {
                String currentUnits = convertUnits(fromUnits, toUnits);
                
d468 1
a468 1
            }
d470 5
a474 5
            private void updateRulerUnits() {
                int units = getCurrentRulerUnit();
                setWorkspaceProperty(WorkspaceViewerProperties.RULERUNIT, units);
            }
        });
d476 2
a477 2
        // Create grid spacing text field
        getWidgetFactory().createLabel(measurementGroup, GRID_SPACING_LABEL);
d479 26
a504 26
        GridData data = new GridData(SWT.FILL, SWT.FILL, true, false);
        textWidget.setLayoutData(data);
        startTextWidgetEventListener();

    }

    /**
     * 
     * converts fromUnits to toUnits (e.g. inches to pixels)
     * 
     * @@param fromUnits
     * @@param toUnits
     * @@return equivalent number of toUnits for the given fromUnits
     */
    private String convertUnits(int fromUnits, int toUnits) {
        String valueStr = textWidget.getText();
        if (fromUnits == toUnits) {
            return valueStr;
        }
        Double value = convertStringToDouble(valueStr);
        double pixelValue = 0;
        switch (fromUnits) {
        case INCHES:
            pixelValue = value.doubleValue() * Display.getDefault().getDPI().x;
            break;
        case CENTIMETERS:
d506 12
a517 12
            break;
        case PIXELS:
            pixelValue = value.intValue();
        }

        double returnValue = 0;

        switch (toUnits) {
        case INCHES:
            returnValue = pixelValue / Display.getDefault().getDPI().x;
            break;
        case CENTIMETERS:
d519 36
a554 36
            break;
        case PIXELS:
            returnValue = Math.round(pixelValue);
        }
        NumberFormat numberFormatter = NumberFormat.getInstance();
        return numberFormatter.format(returnValue);

    }

    /**
     * A helper to listen for events that indicate that a text field has been
     * changed.
     */
    private TextChangeHelper textListener = new TextChangeHelper() {
        boolean textModified = false;

        /**
         * @@see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
         */
        public void handleEvent(Event event) {
            switch (event.type) {
            case SWT.KeyDown:
                textModified = true;
                if (event.character == SWT.CR)
                    textChanged((Control) event.widget);
                break;
            case SWT.FocusOut:
                textChanged((Control) event.widget);
                break;
            }
        }

        public void textChanged(Control control) {
            if (textModified) {
                String currentText = ((Text) control).getText();
                try {
d557 2
a558 2
                    double pixels = convertToBase(value);
                    if (pixels >= minValidValue && pixels <= maxValidValue) {
d560 17
a576 18
                        setGridSpacing(value);                      
                        
                    } else {
                        resetGridSpacing();
                    }

                } catch (NumberFormatException e) {
                    resetGridSpacing();
                }
                textModified = false;
            }
        }

        private void resetGridSpacing() {
            // Set grid spacing back to original value
            double value = getWorkspacePropertyDouble(WorkspaceViewerProperties.GRIDSPACING);
            setGridSpacing(value);
        }
d578 1
a578 1
    };
d580 2
a581 2
    /**
     * 
d583 1
a583 1
     * 
d585 21
a605 21
     * @@return
     */
    private double convertToBase(double number) {

        double returnValue = 0;
        switch (getCurrentRulerUnit()) {
        case INCHES:
            returnValue = number;
            break;
        case CENTIMETERS:
            returnValue = number / INCH2CM;
            break;
        case PIXELS:
            returnValue = number / Display.getDefault().getDPI().x;
        }
        return returnValue;
    }

    private int getCurrentRulerUnit() {
        return rulerUnitCombo.getSelectionIndex();
    }
d609 9
a617 9
     */
    public void setInput(IWorkbenchPart part, ISelection selection) {
        super.setInput(part, selection);

        // Set up workspace property listener
        initWorkspacePropertyListener();
        double value = getWorkspacePropertyDouble(WorkspaceViewerProperties.GRIDSPACING);
        NumberFormat numberFormatter = NumberFormat.getNumberInstance();
        textWidget.setText(numberFormatter.format(value));
d624 33
a656 33
        int rulerValue = getValue(WorkspaceViewerProperties.RULERUNIT);
        int styleValue = getValue(WorkspaceViewerProperties.GRIDLINESTYLE) - 1;
        rulerUnitCombo.setText(getUnits()[rulerValue]);
        lineStyleCombo.setText(getStyles()[styleValue]);
        Image overlyedImage = new ColorOverlayImageDescriptor(
                (DiagramUIPropertiesImages.DESC_LINE_COLOR).getImageData(),
                FigureUtilities
                        .integerToRGB(getWorkspacePropertyInt(WorkspaceViewerProperties.GRIDLINECOLOR)))
                .createImage();
        disposeImage(lineColorButton.getImage());
        lineColorButton.setImage(overlyedImage);

    }

    /**
     * @@param property
     * @@return the integer value of the string property
     */
    private int getValue(String property) {
        int value;
        String valueString = getWorkspaceProperty(property);

        if (valueString.equals(StringStatics.BLANK)) {
            value = 0;
        } else {
            value = new Integer(getWorkspaceProperty(property)).intValue();
        }
        return value;
    }

    private String[] getUnits() {
        return new String[] { INCHES_LABEL, CENTIMETERS_LABEL, PIXEL_LABEL };
    }
d658 1
a658 1
    private String[] getStyles() {
d660 1
a660 1
    }
d663 42
a704 42
     * @@see org.eclipse.ui.views.properties.tabbed.ISection#dispose()
     */
    public void dispose() {
        stopTextWidgetEventListener();
        removeWorkspacePropertyListener();
        super.dispose();
    }

    /**
     * Start listening to the text widget events
     */
    private void startTextWidgetEventListener() {
        getListener().startListeningTo(getTextWidget());
        getListener().startListeningForEnter(getTextWidget());
    }

    /**
     * Stop listening to text widget events
     */
    private void stopTextWidgetEventListener() {
        getListener().stopListeningTo(getTextWidget());
    }

    /**
     * @@return Returns the textWidget.
     */
    private Text getTextWidget() {
        return textWidget;
    }

    /**
     * @@return Returns the listener.
     */
    private TextChangeHelper getListener() {
        return textListener;
    }

    /**
     * Creates group with ruler and grid visibility and grid order controls
     * @@param composite
     */
    private void createDisplayGroup(Composite composite) {
d707 1
a707 1
        displayGroup.setLayout(new GridLayout(1, true));
d711 1
a711 1
        rulerVisibilityButton.addSelectionListener(new SelectionAdapter() {
d713 2
a714 2
            public void widgetSelected(SelectionEvent event) {
                // Set ruler visibility workspace property
d716 2
a717 2
            }
        });
d722 1
a722 1
        gridVisibilityButton.addSelectionListener(new SelectionAdapter() {
d724 2
a725 2
            public void widgetSelected(SelectionEvent event) {
                // Set grid visibility workspace property
d727 2
a728 2
            }
        });
d732 1
a732 1
        gridOrderButton.addSelectionListener(new SelectionAdapter() {
d734 2
a735 2
            public void widgetSelected(SelectionEvent event) {
                // Set grid level workspace property
d737 2
a738 2
            }
        });
d740 1
a740 1
    }
d742 5
a746 5
    /**
     * Creates group with line color and style controls
     * @@param composite
     */
    private void createGridlineGroup(Composite composite) {
d749 48
a796 48
        GridLayout gridLayout = new GridLayout(2, false);
        gridlineGroup.setLayout(gridLayout);
        createLineColorControl(gridlineGroup);
        createLineStyleControl(gridlineGroup);

    }

    private void setWorkspaceProperty(String property, boolean setting) {
        getWorkspaceViewerProperties().setValue(property, setting);
    }

    private void setWorkspaceProperty(String property, int setting) {
        getWorkspaceViewerProperties().setValue(property, setting);
    }

    private void setWorkspaceProperty(String property, double setting) {
        getWorkspaceViewerProperties().setValue(property, setting);
    }

    private String getWorkspaceProperty(String property) {
        return getWorkspaceViewerProperties().getString(property);
    }

    private int getWorkspacePropertyInt(String property) {
        return getWorkspaceViewerProperties().getInt(property);
    }

    private double getWorkspacePropertyDouble(String property) {
        return getWorkspaceViewerProperties().getDouble(property);
    }

    private boolean getBooleanWorkspaceProperty(String property) {
        return getWorkspaceViewerProperties().getBoolean(property);
    }

    private IPreferenceStore getWorkspaceViewerProperties() {
        return workspaceViewerProperties;
    }

    /**
     * Listener for the workspace preference store.
     */
    private class PropertyStoreListener implements IPropertyChangeListener {

        /*
         * (non-Javadoc)
         * @@see org.eclipse.jface.util.IPropertyChangeListener#propertyChange(org.eclipse.jface.util.PropertyChangeEvent)
         */
d798 13
a810 13
            handleWorkspacePropertyChanged(event);
        }
    }

    /**
     * Handles workspace property changes     
     * @@param event
     */
    private void handleWorkspacePropertyChanged(PropertyChangeEvent event) {
        if (WorkspaceViewerProperties.VIEWGRID.equals(event.getProperty())) {
            if (!gridVisibilityButton.isDisposed()) {
                gridVisibilityButton.setSelection(getEventBoolean(event));
            }
d812 3
a814 3
            if (!rulerVisibilityButton.isDisposed()) {
                rulerVisibilityButton.setSelection(getEventBoolean(event));
            }
d816 3
a818 3
            if (!snapToGridButton.isDisposed()) {
                snapToGridButton.setSelection(getEventBoolean(event));
            }
d824 3
a826 3
            if (!gridOrderButton.isDisposed()) {
                gridOrderButton.setSelection(getEventBoolean(event));
            }
d828 4
a831 4
            if (!textWidget.isDisposed()) {
                Double value = new Double(getEventString(event));
                textWidget.setText(NumberFormat.getInstance().format(value));
            }
d833 3
a835 3
            if (!rulerUnitCombo.isDisposed()) {
                rulerUnitCombo.select(Integer.parseInt(getEventString(event)));
            }
d837 1
a837 1
            if (!lineStyleCombo.isDisposed()) {
d839 12
a850 12
            }
        }
    }

    private boolean getEventBoolean(PropertyChangeEvent event) {
        Boolean newValue = (Boolean) event.getNewValue();
        return newValue.booleanValue();
    }

    private String getEventString(PropertyChangeEvent event) {
        return event.getNewValue().toString();
    }
d852 1
a852 1
    /**
d855 3
a857 3
     */
    private void initWorkspacePropertyListener() {
        IDiagramWorkbenchPart editor = (IDiagramWorkbenchPart) getPart();
d860 3
a862 3
        workspaceViewerProperties = viewer.getWorkspaceViewerPreferenceStore();
        workspaceViewerProperties.addPropertyChangeListener(propertyListener);
    }
d864 1
a864 1
    /**
d867 3
a869 3
     */
    private void removeWorkspacePropertyListener() {
        if (getWorkspaceViewerProperties() != null) {
d871 4
a874 4
            workspaceViewerProperties = null;
        }
        propertyListener = null;
    }
d876 1
a876 1
    /**
d881 8
a888 8
     * @@param number
     * @@return
     */
    private Double forceDouble(Number number) {
        if (!(number instanceof Double))
            return new Double(number.doubleValue());
        return (Double) number;
    }
@


1.12
log
@[147497] gmf-head carson_li 071206 [Properties] Buttons on the appearance tab should be DROP_DOWN style
@
text
@d65 1
a65 1
	extends AbstractPropertySection {
d67 69
a135 67
	// Groups
	private Group displayGroup;
	private Group measurementGroup;
	private Group gridlineGroup;

	// Buttons
	private Button gridVisibilityButton;
	private Button gridOrderButton;
	private Button snapToGridButton;
	private Button restoreButton;

	private Button rulerVisibilityButton;

	private ToolItem lineColorButton;

	// Labels
	private static final String GRID_ON_LABEL = DiagramUIPropertiesMessages.Grid_On_Label_Text;
	private static final String GRID_LEVEL_LABEL = DiagramUIPropertiesMessages.Grid_Level_Label_Text;
	private static final String SNAP_TO_GRID_LABEL = DiagramUIPropertiesMessages.Snap_To_Grid_Label_Text;
	private static final String RULER_ON_LABEL = DiagramUIPropertiesMessages.Ruler_On_Label_Text;
	private static final String RULER_UNITS_LABEL = DiagramUIPropertiesMessages.Ruler_Units_Label_Text;
	private static final String GRID_SPACING_LABEL = DiagramUIPropertiesMessages.Grid_Spacing_Label_Text;
	private static final String VISIBILITY_LABEL = DiagramUIPropertiesMessages.Display_Group_Label_Text;
	private static final String MEASUREMENT_LABEL = DiagramUIPropertiesMessages.Measurement_Group_Label_Text;
	private static final String GRIDLINE_LABEL = DiagramUIPropertiesMessages.Gridline_Group_Label_Text;
	private static final String LINE_COLOR_LABEL = DiagramUIPropertiesMessages.Line_Color_Label_Text;
	private static final String LINE_STYLE_LABEL = DiagramUIPropertiesMessages.Line_Style_Label_Text;
	private static final String RESTORE_LABEL = DiagramUIPropertiesMessages.Restore_Defaults_Label_Text;

	// Unit labels
	private static final String INCHES_LABEL = DiagramUIPropertiesMessages.Inches_Label_Text;
	private static final String CENTIMETERS_LABEL = DiagramUIPropertiesMessages.Centimeters_Label_Text;
	private static final String PIXEL_LABEL = DiagramUIPropertiesMessages.Pixel_Label_Text;

	// Line Style labels
	private static final String SOLID_LABEL = DiagramUIPropertiesMessages.Solid_Label_Text;
	private static final String DASH_LABEL = DiagramUIPropertiesMessages.Dash_Label_Text;
	private static final String DOT_LABEL = DiagramUIPropertiesMessages.Dot_Label_Text;
	private static final String DASH_DOT_LABEL = DiagramUIPropertiesMessages.Dash_Dot_Label_Text;
	private static final String DASH_DOT_DOT_LABEL = DiagramUIPropertiesMessages.Dash_Dot_Dot_Label_Text;
	private static final String SPACED_DOT_LABEL = DiagramUIPropertiesMessages.Spaced_Dot_Label_Text;

	// Default color for the grid.
	private static final int LIGHT_GRAY_RGB = 12632256;

	// Ruler unit drop down
	private CCombo rulerUnitCombo;

	// Line style drop down
	private CCombo lineStyleCombo;

	// Text widget to display and set value of the property
	private Text textWidget;

	private RGB lineColor = null;

	// For changing ruler units
	private static final int INCHES = 0;
	private static final int CENTIMETERS = 1;
	private static final int PIXELS = 2;

	// Conversion from inch to centimeter
	private static final double INCH2CM = 2.54;

	// Valid grid spacing range
	private double minValidValue = 00.009;
	private double maxValidValue = 99.999;
d137 2
a138 2
	// Listener for workspace property changes
	private PropertyStoreListener propertyListener = new PropertyStoreListener();
d140 1
a140 1
	private IPreferenceStore workspaceViewerProperties = null;
d143 1
a143 1
	extends CompositeImageDescriptor {
d145 2
a146 2
	/** default color icon width */
	private static final Point ICON_SIZE = new Point(16, 16);
d148 2
a149 2
	/** the basic icon */
	private ImageData basicImgData;
d151 40
a190 40
	/** the color of the thin color bar */
	private RGB rgb;

	/**
	 * Creates a new color menu image descriptor
	 * 
	 * @@param basicIcon
	 *            The basic Image data
	 * @@param rgb
	 *            The color bar RGB value
	 */
	public ColorOverlayImageDescriptor(ImageData basicImgData, RGB rgb) {
		this.basicImgData = basicImgData;
		this.rgb = rgb;
	}

	/**
	 * @@see org.eclipse.jface.resource.CompositeImageDescriptor#drawCompositeImage(int,
	 *      int)
	 */
	protected void drawCompositeImage(int width, int height) {

		// draw the thin color bar underneath
		if (rgb != null) {
			ImageData colorBar = new ImageData(width, height / 5, 1,
			
				new PaletteData(new RGB[] {rgb}));
			drawImage(colorBar, 0, height - height / 5);
			
		}
		// draw the base image
		drawImage(basicImgData, 0, 0);
	}

	/**
	 * @@see org.eclipse.jface.resource.CompositeImageDescriptor#getSize()
	 */
	protected Point getSize() {
		return ICON_SIZE;
	}
d192 1
a192 1
		
d195 1
a195 1
	 */
d197 23
a219 23
		super.createControls(parent, aTabbedPropertySheetPage);
		initializeControls(parent);
	}

	/**
	 * 
	 * Sets up controls with proper layouts and groups	 
	 * @@param parent
	 */
	private void initializeControls(Composite parent) {
		parent.setLayout(new GridLayout(1, false));

		// Top row composite
		Composite topComposite = getWidgetFactory().createComposite(parent);
		topComposite.setLayout(new GridLayout(2, false));

		// Create the groups for this section
		createDisplayGroup(topComposite);
		createMeasurementGroup(topComposite);

		// Bottom row composite
		Composite bottomComposite = getWidgetFactory().createComposite(parent);
		bottomComposite.setLayout(new GridLayout(2, false));
d221 2
a222 2
		// Create grid line settings
		createGridlineGroup(bottomComposite);
d225 1
a225 1
		extraComposite.setLayout(new GridLayout(1, false));
d227 1
a227 1
		// Create snap to grid checkbox
d230 1
a230 1
		snapToGridButton.addSelectionListener(new SelectionAdapter() {
d232 2
a233 2
			public void widgetSelected(SelectionEvent event) {
				// Set the snap to grid workspace property
d235 15
a249 4
			}
		});

		// Create restore to preferences defaults
d252 1
a252 1
		restoreButton.addSelectionListener(new SelectionAdapter() {
d254 3
a256 3
			public void widgetSelected(SelectionEvent event) {
				restorePreferenceValues();
			}
d258 2
a259 2
			private void restorePreferenceValues() {
				IPreferenceStore preferenceStore = getPreferenceStore();
d261 3
a263 3
				// The workspace properties will always exist because it is set
				// 
				IPreferenceStore wsPrefStore = getWorkspaceViewerProperties();
d265 1
a265 1
				if (wsPrefStore.getBoolean(WorkspaceViewerProperties.GRIDORDER) == false) {
d267 2
a268 2
				}
				if (wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINECOLOR) != LIGHT_GRAY_RGB) {
d270 2
a271 2
				}
				if (wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINESTYLE) != SWT.LINE_CUSTOM) {
d273 1
a273 1
				}
d276 1
a276 1
				}
d279 1
a279 1
				}
d282 4
a285 2
				}

d290 1
a290 1
				}
d292 5
a296 5
				// reset the input values
				setInput(getPart(), null);
			}
		});
	}
d298 1
a298 1
	private IPreferenceStore getPreferenceStore() {
d301 2
a302 2
		return preferenceStore;
	}
d304 6
a309 6
	private void createLineColorControl(Composite composite) {
		getWidgetFactory().createLabel(composite, LINE_COLOR_LABEL);
		ToolBar toolBar = new ToolBar(composite, SWT.FLAT);
			toolBar.setLayout(new GridLayout(1, false));
			toolBar.setBackground(composite.getBackground());
		lineColorButton = new ToolItem(toolBar, SWT.DROP_DOWN);
d311 1
a311 1
		lineColorButton.addSelectionListener(new SelectionAdapter() {
d313 14
a326 14
			public void widgetSelected(SelectionEvent event) {
				changeLineColor(event);
			}

			/**
			 * Change line color property value
			 */
			private void changeLineColor(SelectionEvent event) {
				lineColor = changeColor(
						event,
						lineColorButton,
						DiagramUIPropertiesImages.DESC_LINE_COLOR,
						getWorkspacePropertyInt(WorkspaceViewerProperties.GRIDLINECOLOR));
				if (lineColor != null)
d328 7
a334 7
			}
		});
		lineColorButton.setEnabled(true);

		//the accessibility listener is applied to the whole tool bar because there is only one item in it, in the event
		//that additional tool items are added, this should be changed to search for the tool bar's children and their
		//their respective tool tips. Refer to ColorsAndFontsPropertySection.java.
d336 17
a352 17
			public void getName(AccessibleEvent e) {
				e.result = DiagramUIMessages.PropertyDescriptorFactory_LineColor;
			}
		});		
	}

	private void createLineStyleControl(Composite composite) {
		getWidgetFactory().createLabel(composite, LINE_STYLE_LABEL);

		lineStyleCombo = getWidgetFactory().createCCombo(composite,
				SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
		lineStyleCombo.setItems(getStyles());
		lineStyleCombo.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				updateLineStyle();
			}
d354 2
a355 2
			private void updateLineStyle() {
				int style = lineStyleCombo.getSelectionIndex();
d357 2
a358 2
			}
		});
d360 1
a360 1
	}
d362 6
a367 6
	/**
	 * @@param event -
	 *            selection event
	 * @@param toolItem -
	 *            event source
	 * @@param imageDescriptor -
d370 56
a425 56
	 * @@return - new RGB color, or null if none selected
	 */
	private RGB changeColor(SelectionEvent event, ToolItem toolItem,
			ImageDescriptor imageDescriptor, int previousColor) {

		ColorPalettePopup popup = new ColorPalettePopup(toolItem.getParent()
				.getShell(), IDialogConstants.BUTTON_BAR_HEIGHT);

		popup.setPreviousColor(previousColor);
		Rectangle r = toolItem.getBounds();
		Point location = toolItem.getParent().toDisplay(r.x, r.y);
		popup.open(new Point(location.x, location.y + r.height));

		if (popup.useDefaultColor()) {
			Image overlyedImage = new ColorOverlayImageDescriptor(
					imageDescriptor.getImageData(), FigureUtilities.integerToRGB(new Integer(LIGHT_GRAY_RGB)))
					.createImage();
			disposeImage(toolItem.getImage());
			toolItem.setImage(overlyedImage);
			return FigureUtilities.integerToRGB(new Integer(LIGHT_GRAY_RGB));
		}

		if (popup.getSelectedColor() != null) {
			Image overlyedImage = new ColorOverlayImageDescriptor(
					imageDescriptor.getImageData(), popup.getSelectedColor())
					.createImage();
			disposeImage(toolItem.getImage());
			toolItem.setImage(overlyedImage);
		}

		return popup.getSelectedColor();

	}

	private void disposeImage(Image image) {
		if (image == null) {
			return;
		}

		if (image.equals(DiagramUIPropertiesImages
				.get(DiagramUIPropertiesImages.IMG_LINE_COLOR))) {
			return;
		}

		if (!image.isDisposed()) {
			image.dispose();
		}
	}

	private Double convertStringToDouble(String strValue) {
		NumberFormat numberFormatter = NumberFormat.getInstance();
		Double value;
		try {
			value = forceDouble(numberFormatter.parse(strValue));
		} catch (ParseException e) {
			// default value
d427 17
a443 17
			setGridSpacing(value.doubleValue());
		}
		return value;
	}

	private void setGridSpacing(double value) {
		// Set grid spacing back to the input value
		NumberFormat numberFormater = NumberFormat.getInstance();
		textWidget.setText(numberFormater.format(value));
		textWidget.selectAll();
	}

	/**
	 * Creates group with ruler units and grid spacing controls	 
	 * @@param composite
	 */
	private void createMeasurementGroup(Composite composite) {
d446 1
a446 4
		measurementGroup.setLayout(new GridLayout(2, false));

		// Create ruler unit combo
		getWidgetFactory().createLabel(measurementGroup, RULER_UNITS_LABEL);
d448 2
a449 19
		rulerUnitCombo = getWidgetFactory().createCCombo(measurementGroup,
				SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
		rulerUnitCombo.setItems(getUnits());
		rulerUnitCombo.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				int oldUnits = getWorkspacePropertyInt(WorkspaceViewerProperties.RULERUNIT);
				int newUnits = rulerUnitCombo.getSelectionIndex();

				// Order of the changes is important so that there is no
				// interim point with a 1 pixel grid spacing
				if (oldUnits < newUnits) {
					updateSpacing(oldUnits, newUnits);
					updateRulerUnits();
				} else {
					updateRulerUnits();
					updateSpacing(oldUnits, newUnits);
				}
			}
d451 23
a473 2
			private void updateSpacing(int fromUnits, int toUnits) {
				String currentUnits = convertUnits(fromUnits, toUnits);
d475 1
a475 1
			}
d477 5
a481 5
			private void updateRulerUnits() {
				int units = getCurrentRulerUnit();
				setWorkspaceProperty(WorkspaceViewerProperties.RULERUNIT, units);
			}
		});
d483 2
a484 2
		// Create grid spacing text field
		getWidgetFactory().createLabel(measurementGroup, GRID_SPACING_LABEL);
d486 26
a511 26
		GridData data = new GridData(SWT.FILL, SWT.FILL, true, false);
		textWidget.setLayoutData(data);
		startTextWidgetEventListener();

	}

	/**
	 * 
	 * converts fromUnits to toUnits (e.g. inches to pixels)
	 * 
	 * @@param fromUnits
	 * @@param toUnits
	 * @@return equivalent number of toUnits for the given fromUnits
	 */
	private String convertUnits(int fromUnits, int toUnits) {
		String valueStr = textWidget.getText();
		if (fromUnits == toUnits) {
			return valueStr;
		}
		Double value = convertStringToDouble(valueStr);
		double pixelValue = 0;
		switch (fromUnits) {
		case INCHES:
			pixelValue = value.doubleValue() * Display.getDefault().getDPI().x;
			break;
		case CENTIMETERS:
d513 12
a524 12
			break;
		case PIXELS:
			pixelValue = value.intValue();
		}

		double returnValue = 0;

		switch (toUnits) {
		case INCHES:
			returnValue = pixelValue / Display.getDefault().getDPI().x;
			break;
		case CENTIMETERS:
d526 36
a561 36
			break;
		case PIXELS:
			returnValue = Math.round(pixelValue);
		}
		NumberFormat numberFormatter = NumberFormat.getInstance();
		return numberFormatter.format(returnValue);

	}

	/**
	 * A helper to listen for events that indicate that a text field has been
	 * changed.
	 */
	private TextChangeHelper textListener = new TextChangeHelper() {
		boolean textModified = false;

		/**
		 * @@see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
		 */
		public void handleEvent(Event event) {
			switch (event.type) {
			case SWT.KeyDown:
				textModified = true;
				if (event.character == SWT.CR)
					textChanged((Control) event.widget);
				break;
			case SWT.FocusOut:
				textChanged((Control) event.widget);
				break;
			}
		}

		public void textChanged(Control control) {
			if (textModified) {
				String currentText = ((Text) control).getText();
				try {
d564 2
a565 2
					double pixels = convertToBase(value);
					if (pixels >= minValidValue && pixels <= maxValidValue) {
d567 18
a584 17
						setGridSpacing(value);
					} else {
						resetGridSpacing();
					}

				} catch (NumberFormatException e) {
					resetGridSpacing();
				}
				textModified = false;
			}
		}

		private void resetGridSpacing() {
			// Set grid spacing back to original value
			double value = getWorkspacePropertyDouble(WorkspaceViewerProperties.GRIDSPACING);
			setGridSpacing(value);
		}
d586 1
a586 1
	};
d588 2
a589 2
	/**
	 * 
d591 1
a591 1
	 * 
d593 21
a613 21
	 * @@return
	 */
	private double convertToBase(double number) {

		double returnValue = 0;
		switch (getCurrentRulerUnit()) {
		case INCHES:
			returnValue = number;
			break;
		case CENTIMETERS:
			returnValue = number / INCH2CM;
			break;
		case PIXELS:
			returnValue = number / Display.getDefault().getDPI().x;
		}
		return returnValue;
	}

	private int getCurrentRulerUnit() {
		return rulerUnitCombo.getSelectionIndex();
	}
d617 9
a625 9
	 */
	public void setInput(IWorkbenchPart part, ISelection selection) {
		super.setInput(part, selection);

		// Set up workspace property listener
		initWorkspacePropertyListener();
		double value = getWorkspacePropertyDouble(WorkspaceViewerProperties.GRIDSPACING);
		NumberFormat numberFormatter = NumberFormat.getNumberInstance();
		textWidget.setText(numberFormatter.format(value));
d630 1
d632 33
a664 33
		int rulerValue = getValue(WorkspaceViewerProperties.RULERUNIT);
		int styleValue = getValue(WorkspaceViewerProperties.GRIDLINESTYLE) - 1;
		rulerUnitCombo.setText(getUnits()[rulerValue]);
		lineStyleCombo.setText(getStyles()[styleValue]);
		Image overlyedImage = new ColorOverlayImageDescriptor(
				(DiagramUIPropertiesImages.DESC_LINE_COLOR).getImageData(),
				FigureUtilities
						.integerToRGB(getWorkspacePropertyInt(WorkspaceViewerProperties.GRIDLINECOLOR)))
				.createImage();
		disposeImage(lineColorButton.getImage());
		lineColorButton.setImage(overlyedImage);

	}

	/**
	 * @@param property
	 * @@return the integer value of the string property
	 */
	private int getValue(String property) {
		int value;
		String valueString = getWorkspaceProperty(property);

		if (valueString.equals(StringStatics.BLANK)) {
			value = 0;
		} else {
			value = new Integer(getWorkspaceProperty(property)).intValue();
		}
		return value;
	}

	private String[] getUnits() {
		return new String[] { INCHES_LABEL, CENTIMETERS_LABEL, PIXEL_LABEL };
	}
d666 1
a666 1
	private String[] getStyles() {
d668 1
a668 1
	}
d671 42
a712 42
	 * @@see org.eclipse.ui.views.properties.tabbed.ISection#dispose()
	 */
	public void dispose() {
		stopTextWidgetEventListener();
		removeWorkspacePropertyListener();
		super.dispose();
	}

	/**
	 * Start listening to the text widget events
	 */
	private void startTextWidgetEventListener() {
		getListener().startListeningTo(getTextWidget());
		getListener().startListeningForEnter(getTextWidget());
	}

	/**
	 * Stop listening to text widget events
	 */
	private void stopTextWidgetEventListener() {
		getListener().stopListeningTo(getTextWidget());
	}

	/**
	 * @@return Returns the textWidget.
	 */
	private Text getTextWidget() {
		return textWidget;
	}

	/**
	 * @@return Returns the listener.
	 */
	private TextChangeHelper getListener() {
		return textListener;
	}

	/**
	 * Creates group with ruler and grid visibility and grid order controls
	 * @@param composite
	 */
	private void createDisplayGroup(Composite composite) {
d715 1
a715 1
		displayGroup.setLayout(new GridLayout(1, true));
d719 1
a719 1
		rulerVisibilityButton.addSelectionListener(new SelectionAdapter() {
d721 2
a722 2
			public void widgetSelected(SelectionEvent event) {
				// Set ruler visibility workspace property
d724 2
a725 2
			}
		});
d730 1
a730 1
		gridVisibilityButton.addSelectionListener(new SelectionAdapter() {
d732 2
a733 2
			public void widgetSelected(SelectionEvent event) {
				// Set grid visibility workspace property
d735 2
a736 2
			}
		});
d740 1
a740 1
		gridOrderButton.addSelectionListener(new SelectionAdapter() {
d742 2
a743 2
			public void widgetSelected(SelectionEvent event) {
				// Set grid level workspace property
d745 2
a746 2
			}
		});
d748 1
a748 1
	}
d750 5
a754 5
	/**
	 * Creates group with line color and style controls
	 * @@param composite
	 */
	private void createGridlineGroup(Composite composite) {
d757 48
a804 48
		GridLayout gridLayout = new GridLayout(2, false);
		gridlineGroup.setLayout(gridLayout);
		createLineColorControl(gridlineGroup);
		createLineStyleControl(gridlineGroup);

	}

	private void setWorkspaceProperty(String property, boolean setting) {
		getWorkspaceViewerProperties().setValue(property, setting);
	}

	private void setWorkspaceProperty(String property, int setting) {
		getWorkspaceViewerProperties().setValue(property, setting);
	}

	private void setWorkspaceProperty(String property, double setting) {
		getWorkspaceViewerProperties().setValue(property, setting);
	}

	private String getWorkspaceProperty(String property) {
		return getWorkspaceViewerProperties().getString(property);
	}

	private int getWorkspacePropertyInt(String property) {
		return getWorkspaceViewerProperties().getInt(property);
	}

	private double getWorkspacePropertyDouble(String property) {
		return getWorkspaceViewerProperties().getDouble(property);
	}

	private boolean getBooleanWorkspaceProperty(String property) {
		return getWorkspaceViewerProperties().getBoolean(property);
	}

	private IPreferenceStore getWorkspaceViewerProperties() {
		return workspaceViewerProperties;
	}

	/**
	 * Listener for the workspace preference store.
	 */
	private class PropertyStoreListener implements IPropertyChangeListener {

		/*
		 * (non-Javadoc)
		 * @@see org.eclipse.jface.util.IPropertyChangeListener#propertyChange(org.eclipse.jface.util.PropertyChangeEvent)
		 */
d806 13
a818 13
			handleWorkspacePropertyChanged(event);
		}
	}

	/**
	 * Handles workspace property changes	  
	 * @@param event
	 */
	private void handleWorkspacePropertyChanged(PropertyChangeEvent event) {
		if (WorkspaceViewerProperties.VIEWGRID.equals(event.getProperty())) {
			if (!gridVisibilityButton.isDisposed()) {
				gridVisibilityButton.setSelection(getEventBoolean(event));
			}
d820 3
a822 3
			if (!rulerVisibilityButton.isDisposed()) {
				rulerVisibilityButton.setSelection(getEventBoolean(event));
			}
d824 7
a830 3
			if (!snapToGridButton.isDisposed()) {
				snapToGridButton.setSelection(getEventBoolean(event));
			}
d832 3
a834 3
			if (!gridOrderButton.isDisposed()) {
				gridOrderButton.setSelection(getEventBoolean(event));
			}
d836 4
a839 4
			if (!textWidget.isDisposed()) {
				Double value = new Double(getEventString(event));
				textWidget.setText(NumberFormat.getInstance().format(value));
			}
d841 3
a843 3
			if (!rulerUnitCombo.isDisposed()) {
				rulerUnitCombo.select(Integer.parseInt(getEventString(event)));
			}
d845 1
a845 1
			if (!lineStyleCombo.isDisposed()) {
d847 12
a858 12
			}
		}
	}

	private boolean getEventBoolean(PropertyChangeEvent event) {
		Boolean newValue = (Boolean) event.getNewValue();
		return newValue.booleanValue();
	}

	private String getEventString(PropertyChangeEvent event) {
		return event.getNewValue().toString();
	}
d860 1
a860 1
	/**
d863 3
a865 3
	 */
	private void initWorkspacePropertyListener() {
		IDiagramWorkbenchPart editor = (IDiagramWorkbenchPart) getPart();
d868 3
a870 3
		workspaceViewerProperties = viewer.getWorkspaceViewerPreferenceStore();
		workspaceViewerProperties.addPropertyChangeListener(propertyListener);
	}
d872 1
a872 1
	/**
d875 3
a877 3
	 */
	private void removeWorkspacePropertyListener() {
		if (getWorkspaceViewerProperties() != null) {
d879 4
a882 4
			workspaceViewerProperties = null;
		}
		propertyListener = null;
	}
d884 1
a884 1
	/**
d889 8
a896 8
	 * @@param number
	 * @@return
	 */
	private Double forceDouble(Number number) {
		if (!(number instanceof Double))
			return new Double(number.doubleValue());
		return (Double) number;
	}
@


1.11
log
@[183150] gmf_head crevells 071106 [RulersGrid] Properties view: Rulers and Grid page: Custom color dialog should use currently selected color
Contributed by:  Carson Li
@
text
@d56 2
d80 1
a80 1
	private Button lineColorButton;
d291 4
a294 2

		lineColorButton = new Button(composite, SWT.PUSH);
a295 7

        lineColorButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
					public void getName(AccessibleEvent e) {
						e.result = DiagramUIMessages.PropertyDescriptorFactory_LineColor;
					}
				});

d316 9
d350 1
a350 1
	 * @@param button -
d357 1
a357 1
	private RGB changeColor(SelectionEvent event, Button button,
d360 1
a360 1
		ColorPalettePopup popup = new ColorPalettePopup(button.getParent()
d364 2
a365 2
		Rectangle r = button.getBounds();
		Point location = button.getParent().toDisplay(r.x, r.y);
d372 2
a373 2
			disposeImage(button.getImage());
			button.setImage(overlyedImage);
d381 2
a382 2
			disposeImage(button.getImage());
			button.setImage(overlyedImage);
@


1.10
log
@gmf-head ahunter 070516 Add missing Copyright
@
text
@d30 1
d41 3
a61 1

d63 1
a63 1
    extends AbstractPropertySection {
d65 124
a188 73
    // Groups
    private Group displayGroup;
    private Group measurementGroup;
    private Group gridlineGroup;
    
    // Buttons
    private Button gridVisibilityButton;
    private Button gridOrderButton;
    private Button snapToGridButton;
    private Button restoreButton;

    private Button rulerVisibilityButton;

    private Button lineColorButton; 
    
    // Labels
    private static final String GRID_ON_LABEL = DiagramUIPropertiesMessages.Grid_On_Label_Text;
    private static final String GRID_LEVEL_LABEL = DiagramUIPropertiesMessages.Grid_Level_Label_Text;
    private static final String SNAP_TO_GRID_LABEL = DiagramUIPropertiesMessages.Snap_To_Grid_Label_Text;
    private static final String RULER_ON_LABEL = DiagramUIPropertiesMessages.Ruler_On_Label_Text;
    private static final String RULER_UNITS_LABEL = DiagramUIPropertiesMessages.Ruler_Units_Label_Text;
    private static final String GRID_SPACING_LABEL = DiagramUIPropertiesMessages.Grid_Spacing_Label_Text;
    private static final String VISIBILITY_LABEL = DiagramUIPropertiesMessages.Display_Group_Label_Text;
    private static final String MEASUREMENT_LABEL = DiagramUIPropertiesMessages.Measurement_Group_Label_Text;
    private static final String GRIDLINE_LABEL = DiagramUIPropertiesMessages.Gridline_Group_Label_Text;
    private static final String LINE_COLOR_LABEL = DiagramUIPropertiesMessages.Line_Color_Label_Text;
    private static final String LINE_STYLE_LABEL = DiagramUIPropertiesMessages.Line_Style_Label_Text;
    private static final String RESTORE_LABEL = DiagramUIPropertiesMessages.Restore_Defaults_Label_Text;

    // Unit labels
    private static final String INCHES_LABEL = DiagramUIPropertiesMessages.Inches_Label_Text;
    private static final String CENTIMETERS_LABEL = DiagramUIPropertiesMessages.Centimeters_Label_Text;
    private static final String PIXEL_LABEL = DiagramUIPropertiesMessages.Pixel_Label_Text;
    
    // Line Style labels
    private static final String  SOLID_LABEL = DiagramUIPropertiesMessages.Solid_Label_Text;
    private static final String  DASH_LABEL = DiagramUIPropertiesMessages.Dash_Label_Text;
    private static final String  DOT_LABEL = DiagramUIPropertiesMessages.Dot_Label_Text;
    private static final String  DASH_DOT_LABEL = DiagramUIPropertiesMessages.Dash_Dot_Label_Text;
    private static final String  DASH_DOT_DOT_LABEL = DiagramUIPropertiesMessages.Dash_Dot_Dot_Label_Text;
    private static final String  SPACED_DOT_LABEL = DiagramUIPropertiesMessages.Spaced_Dot_Label_Text;

    // Default color for the grid.
    private static final int LIGHT_GRAY_RGB = 12632256;

    // Ruler unit drop down
    private CCombo rulerUnitCombo;

    // Line style drop down
    private CCombo lineStyleCombo;
    
    // Text widget to display and set value of the property
    private Text textWidget;

    private RGB lineColor = null;   

    // For changing ruler units
    private static final int INCHES = 0;
    private static final int CENTIMETERS = 1;
    private static final int PIXELS = 2;

    // Conversion from inch to centimeter
    private static final double INCH2CM = 2.54;
    
    // Valid grid spacing range
    private double minValidValue = 00.009;
    private double maxValidValue = 99.999;
    
    // Listener for workspace property changes
    private PropertyStoreListener propertyListener = new PropertyStoreListener();
    
    private IPreferenceStore workspaceViewerProperties = null;
    
d191 1
a191 1
     */
d193 26
a218 23
        super.createControls(parent, aTabbedPropertySheetPage);
        initializeControls(parent);
    }

    /**
     * 
     * Sets up controls with proper layouts and groups
     * @@param parent
     */
    private void initializeControls(Composite parent) {
        parent.setLayout(new GridLayout(1, false));

        // Top row composite
        Composite topComposite = getWidgetFactory().createComposite(parent);
        topComposite.setLayout(new GridLayout(2, false));
        
        // Create the groups for this section
        createDisplayGroup(topComposite);
        createMeasurementGroup(topComposite);
        
        // Bottom row composite
        Composite bottomComposite = getWidgetFactory().createComposite(parent);
        bottomComposite.setLayout(new GridLayout(2, false));
a219 3
        // Create grid line settings
        createGridlineGroup(bottomComposite);
        
d221 1
a221 1
        extraComposite.setLayout(new GridLayout(1, false));
d223 1
a223 1
        // Create snap to grid checkbox
d226 4
a229 4
        snapToGridButton.addSelectionListener(new SelectionAdapter() {
    
            public void widgetSelected(SelectionEvent event) {
                // Set the snap to grid workspace property          
d231 4
a234 4
            }
        });
        
        // Create restore to preferences defaults
d237 14
a250 14
        restoreButton.addSelectionListener(new SelectionAdapter() {
    
            public void widgetSelected(SelectionEvent event) {
                restorePreferenceValues();
            }
                        
            private void restorePreferenceValues() {
                IPreferenceStore preferenceStore = getPreferenceStore();
                
                // The workspace properties will always exist because it is set 
                // 
                IPreferenceStore wsPrefStore = getWorkspaceViewerProperties();
                
                if (wsPrefStore.getBoolean(WorkspaceViewerProperties.GRIDORDER) == false) {
d252 2
a253 2
                } 
                if (wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINECOLOR) != LIGHT_GRAY_RGB) {
d255 2
a256 2
                } 
                if (wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINESTYLE) != SWT.LINE_CUSTOM) {
d258 1
a258 1
                }
d261 1
a261 1
                }
d264 1
a264 1
                }
d267 2
a268 2
                } 
                
d273 9
a281 9
                }
                
                // reset the input values
                setInput(getPart(),null);
            }
        });     
    }
    
     private IPreferenceStore getPreferenceStore() {
d284 5
a288 2
        return preferenceStore;
    }
d290 1
a290 4
    private void createLineColorControl(Composite composite) {
        getWidgetFactory().createLabel(composite, LINE_COLOR_LABEL);
        
        lineColorButton = new Button(composite, SWT.PUSH);
d294 21
a314 17
            public void getName(AccessibleEvent e) {
                e.result = DiagramUIMessages.PropertyDescriptorFactory_LineColor;
            }
        });
        
        lineColorButton.addSelectionListener(new SelectionAdapter() {

            public void widgetSelected(SelectionEvent event) {
                changeLineColor(event);
            }

            /**
             * Change line color property value
             */
            private void changeLineColor(SelectionEvent event) {
                lineColor = changeColor(event, lineColorButton, DiagramUIPropertiesImages.DESC_LINE_COLOR);
                if (lineColor != null) 
d316 16
a331 2
            }           
        });
d333 5
a337 5
        lineColorButton.setEnabled(true);   
    }

    private void createLineStyleControl(Composite composite) {
        getWidgetFactory().createLabel(composite, LINE_STYLE_LABEL); 
d339 1
a339 8
        lineStyleCombo = getWidgetFactory().createCCombo(composite,
            SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
        lineStyleCombo.setItems(getStyles());
        lineStyleCombo.addSelectionListener(new SelectionAdapter() {

            public void widgetSelected(SelectionEvent event) {
                updateLineStyle();
            }
d341 6
a346 14
            private void updateLineStyle() {
                int style = lineStyleCombo.getSelectionIndex(); 
                setWorkspaceProperty(WorkspaceViewerProperties.GRIDLINESTYLE, style + SWT.LINE_SOLID);
            }
        });

    }   
    
    /**
     * @@param event -
     *            selection event
     * @@param button -
     *            event source
     * @@param imageDescriptor -
d349 56
a404 26
     * @@return - new RGB color, or null if none selected
     */
    private RGB changeColor(SelectionEvent event, Button button,
            ImageDescriptor imageDescriptor) {

        ColorPalettePopup popup = new ColorPalettePopup(button.getParent()
            .getShell(), IDialogConstants.BUTTON_BAR_HEIGHT);

        Rectangle r = button.getBounds();
        Point location = button.getParent().toDisplay(r.x, r.y);
        popup.open(new Point(location.x, location.y + r.height));

        if (popup.useDefaultColor()) {
            return FigureUtilities.integerToRGB(new Integer(LIGHT_GRAY_RGB));
        }
        return popup.getSelectedColor();

    }
    
    private Double convertStringToDouble(String strValue){
        NumberFormat numberFormatter = NumberFormat.getInstance();
        Double value;
        try {
            value = forceDouble(numberFormatter.parse(strValue));
        } catch (ParseException e) {
            // default value
d406 17
a422 17
            setGridSpacing(value.doubleValue());
        }
        return value;
    }   

    private void setGridSpacing(double value) {
        // Set grid spacing back to the input value
        NumberFormat numberFormater = NumberFormat.getInstance();
        textWidget.setText(numberFormater.format(value));
        textWidget.selectAll();
    }       
    
    /**
     * Creates group with ruler units and grid spacing controls
     * @@param composite
     */
    private void createMeasurementGroup(Composite composite) {
d425 24
a448 24
        measurementGroup.setLayout(new GridLayout(2, false));
                
        // Create ruler unit combo
        getWidgetFactory().createLabel(measurementGroup, RULER_UNITS_LABEL);
        
        rulerUnitCombo = getWidgetFactory().createCCombo(measurementGroup,
            SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
        rulerUnitCombo.setItems(getUnits());
        rulerUnitCombo.addSelectionListener(new SelectionAdapter() {
            
            public void widgetSelected(SelectionEvent event) {
                int oldUnits = getWorkspacePropertyInt(WorkspaceViewerProperties.RULERUNIT);
                int newUnits = rulerUnitCombo.getSelectionIndex();
                
                // Order of the changes is important so that there is no  
                // interim point with a 1 pixel grid spacing
                if (oldUnits < newUnits) {
                    updateSpacing(oldUnits,newUnits);
                    updateRulerUnits();
                } else {
                    updateRulerUnits();
                    updateSpacing(oldUnits,newUnits);
                }
            }
d450 2
a451 2
            private void updateSpacing(int fromUnits, int toUnits) {                
                String currentUnits = convertUnits(fromUnits, toUnits);
d453 1
a453 7
            }

            private void updateRulerUnits() {
                int units = getCurrentRulerUnit();
                setWorkspaceProperty(WorkspaceViewerProperties.RULERUNIT, units);
            }
        });
d455 5
d461 2
a462 2
        // Create grid spacing text field
        getWidgetFactory().createLabel(measurementGroup, GRID_SPACING_LABEL);
d464 26
a489 27
        GridData data = new GridData(SWT.FILL,SWT.FILL,true,false);
        textWidget.setLayoutData(data);
        startTextWidgetEventListener();     
        
    
    }
    
    /**
     * 
     * converts fromUnits to toUnits (e.g. inches to pixels)
     * 
     * @@param fromUnits
     * @@param toUnits
     * @@return equivalent number of toUnits for the given fromUnits
     */
    private String convertUnits(int fromUnits, int toUnits ) {
        String valueStr = textWidget.getText();
        if( fromUnits == toUnits ) {
            return valueStr;
        }
        Double value = convertStringToDouble(valueStr);
        double pixelValue = 0;
        switch( fromUnits ) {
            case INCHES:
                pixelValue = value.doubleValue() * Display.getDefault().getDPI().x;
                break;
            case CENTIMETERS:
d491 12
a502 12
                break;
            case PIXELS:
                pixelValue = value.intValue();
        }
        
        double returnValue = 0;
        
        switch( toUnits ) {
            case INCHES:
                returnValue = pixelValue / Display.getDefault().getDPI().x;
                break;
            case CENTIMETERS:
d504 36
a539 8
                break;
            case PIXELS:
                returnValue = Math.round(pixelValue);
        }
        NumberFormat numberFormatter = NumberFormat.getInstance();
        return numberFormatter.format(returnValue);     
        
    }
a540 27
    /**
     * A helper to listen for events that indicate that a text field has been
     * changed.
     */
    private TextChangeHelper textListener = new TextChangeHelper() {
        boolean textModified = false;
        /**
         * @@see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
         */
        public void handleEvent(Event event) {
            switch (event.type) {
                case SWT.KeyDown :
                    textModified = true;
                    if (event.character == SWT.CR)
                        textChanged((Control)event.widget);
                    break;
                case SWT.FocusOut :
                    textChanged((Control)event.widget);
                    break;
            }
        }
        
        public void textChanged(Control control) {
            if (textModified) {
                String currentText = ((Text) control).getText();
                try {
                    
d542 2
a543 2
                    double pixels = convertToBase(value);
                    if (pixels >= minValidValue && pixels <= maxValidValue) {
d545 22
a566 22
                        setGridSpacing(value);
                    } else {
                        resetGridSpacing();
                    }
                    
                } catch (NumberFormatException e) {
                    resetGridSpacing();
                }
                textModified = false;
            }
        }
        
        private void resetGridSpacing() {
            // Set grid spacing back to original value
            double value = getWorkspacePropertyDouble(WorkspaceViewerProperties.GRIDSPACING);
            setGridSpacing(value);
        }       
        
    };
    
    /**
     * 
d568 1
a568 1
     * 
d570 21
a590 22
     * @@return
     */
    private double convertToBase(double number) {
        
        double returnValue = 0;
        switch( getCurrentRulerUnit() ) {
            case INCHES:
                returnValue = number;
                break;
            case CENTIMETERS:
                returnValue = number / INCH2CM;
                break;
            case PIXELS:
                returnValue = number / Display.getDefault().getDPI().x;
        }
        return returnValue;
    }
    
    
    private int getCurrentRulerUnit() {     
        return rulerUnitCombo.getSelectionIndex();
    }
d594 9
a602 9
     */
    public void setInput(IWorkbenchPart part, ISelection selection) {
        super.setInput(part, selection);
        
        // Set up workspace property listener 
        initWorkspacePropertyListener();
        double value = getWorkspacePropertyDouble(WorkspaceViewerProperties.GRIDSPACING);
        NumberFormat numberFormatter = NumberFormat.getNumberInstance();
        textWidget.setText(numberFormatter.format(value));
a606 7
        
        int rulerValue = getValue(WorkspaceViewerProperties.RULERUNIT);
        int styleValue = getValue(WorkspaceViewerProperties.GRIDLINESTYLE)-1;
        rulerUnitCombo.setText(getUnits()[rulerValue]);
        lineStyleCombo.setText(getStyles()[styleValue]);
        
    }
d608 33
a640 19
    /**
     * @@param property
     * @@return the integer value of the string property
     */
    private int getValue(String property) {
        int value;
        String valueString = getWorkspaceProperty(property);

        if (valueString.equals(StringStatics.BLANK)) {
            value = 0;
        } else {
            value = new Integer(getWorkspaceProperty(property)).intValue();
        }
        return value;
    }

    private String[] getUnits() {       
        return new String[]{INCHES_LABEL,CENTIMETERS_LABEL,PIXEL_LABEL};
    }
d642 1
a642 1
    private String[] getStyles() {      
d644 2
a645 2
    }
    
d647 42
a688 42
     * @@see org.eclipse.ui.views.properties.tabbed.ISection#dispose()
     */
    public void dispose() {
        stopTextWidgetEventListener();
        removeWorkspacePropertyListener();
        super.dispose();
    }   

    /**
     * Start listening to the text widget events
     */
    private void startTextWidgetEventListener() {
        getListener().startListeningTo(getTextWidget());
        getListener().startListeningForEnter(getTextWidget());
    }

    /**
     * Stop listening to text widget events
     */
    private void stopTextWidgetEventListener() {
        getListener().stopListeningTo(getTextWidget());
    }
    
    /**
     * @@return Returns the textWidget.
     */
    private Text getTextWidget() {
        return textWidget;
    }
    
    /**
     * @@return Returns the listener.
     */
    private TextChangeHelper getListener() {
        return textListener;
    }
    
    /**
     * Creates group with ruler and grid visibility and grid order controls
     * @@param composite
     */
    private void createDisplayGroup(Composite composite) {  
d691 2
a692 2
        displayGroup.setLayout(new GridLayout(1, true));
        
d695 4
a698 4
        rulerVisibilityButton.addSelectionListener(new SelectionAdapter() {
    
            public void widgetSelected(SelectionEvent event) {
                // Set ruler visibility workspace property
d700 2
a701 2
            }
        });
d706 4
a709 4
        gridVisibilityButton.addSelectionListener(new SelectionAdapter() {
    
            public void widgetSelected(SelectionEvent event) {
                // Set grid visibility workspace property
d711 3
a713 3
            }
        });
        
d716 4
a719 4
        gridOrderButton.addSelectionListener(new SelectionAdapter() {
    
            public void widgetSelected(SelectionEvent event) {
                // Set grid level workspace property                
d721 10
a730 10
            }
        });
                
    }

    /**
     * Creates group with line color and style controls
     * @@param composite
     */
    private void createGridlineGroup(Composite composite) { 
d733 48
a780 50
        GridLayout gridLayout = new GridLayout(2, false);
        gridlineGroup.setLayout(gridLayout);
        createLineColorControl(gridlineGroup);
        createLineStyleControl(gridlineGroup);
                
    }
    
    
    private void setWorkspaceProperty(String property, boolean setting) {
        getWorkspaceViewerProperties().setValue(property, setting);
    }
    
    private void setWorkspaceProperty(String property, int setting) {
        getWorkspaceViewerProperties().setValue(property, setting);
    }
    
    private void setWorkspaceProperty(String property, double setting) {
        getWorkspaceViewerProperties().setValue(property, setting);
    }

    private String getWorkspaceProperty(String property) {
        return getWorkspaceViewerProperties().getString(property);
    }

    private int getWorkspacePropertyInt(String property) {
        return getWorkspaceViewerProperties().getInt(property);
    }
    
    private double getWorkspacePropertyDouble(String property) {
        return getWorkspaceViewerProperties().getDouble(property);
    }
    
    private boolean getBooleanWorkspaceProperty(String property) {
        return getWorkspaceViewerProperties().getBoolean(property);
    }

    private IPreferenceStore getWorkspaceViewerProperties() {
        return workspaceViewerProperties;
    }

    
    /**
     * Listener for the workspace preference store.
     */
    private class PropertyStoreListener implements IPropertyChangeListener {
        
        /* 
         * (non-Javadoc)
         * @@see org.eclipse.jface.util.IPropertyChangeListener#propertyChange(org.eclipse.jface.util.PropertyChangeEvent)
         */
d782 13
a794 13
            handleWorkspacePropertyChanged(event);          
        }
    }
    
    /**
     * Handles workspace preoperty changes
     * @@param event
     */
    private void handleWorkspacePropertyChanged(PropertyChangeEvent event) {
        if (WorkspaceViewerProperties.VIEWGRID.equals(event.getProperty())) {       
            if (! gridVisibilityButton.isDisposed()) {
                gridVisibilityButton.setSelection(getEventBoolean(event));
            }
d796 3
a798 3
            if (! rulerVisibilityButton.isDisposed()) {
                rulerVisibilityButton.setSelection(getEventBoolean(event));
            }
d800 3
a802 3
            if (! snapToGridButton.isDisposed()) {
                snapToGridButton.setSelection(getEventBoolean(event));
            }
d804 3
a806 3
            if (! gridOrderButton.isDisposed()) {
                gridOrderButton.setSelection(getEventBoolean(event));
            }
d808 4
a811 4
            if (! textWidget.isDisposed()) {
                Double value = new Double(getEventString(event));
                textWidget.setText(NumberFormat.getInstance().format(value));
            }
d813 3
a815 3
            if (! rulerUnitCombo.isDisposed()) {
                rulerUnitCombo.select(Integer.parseInt(getEventString(event)));
            }
d817 1
a817 1
            if (! lineStyleCombo.isDisposed()) {
d819 12
a830 12
            }
        }       
    }
    
    private boolean getEventBoolean(PropertyChangeEvent event) {
        Boolean newValue = (Boolean) event.getNewValue();
        return newValue.booleanValue();
    }

    private String getEventString(PropertyChangeEvent event) {
        return event.getNewValue().toString();
    }
d832 1
a832 2
    
    /**
d835 3
a837 3
     */
    private void initWorkspacePropertyListener() {
        IDiagramWorkbenchPart editor = (IDiagramWorkbenchPart) getPart();
d840 5
a844 5
        workspaceViewerProperties = viewer.getWorkspaceViewerPreferenceStore();
        workspaceViewerProperties.addPropertyChangeListener(propertyListener);
    }
    
    /**
d847 3
a849 3
     */
    private void removeWorkspacePropertyListener() {
        if (getWorkspaceViewerProperties() != null ) {
d851 6
a856 6
            workspaceViewerProperties = null;
        }
        propertyListener = null;
    }
    
    /**
d861 8
a868 8
     * @@param number
     * @@return
     */
    private Double forceDouble(Number number) {
        if (!(number instanceof Double))
            return new Double(number.doubleValue());            
        return (Double) number;
    }
@


1.10.4.1
log
@[183150] gmf_R2_0_maintenance crevells 071106 [RulersGrid] Properties view: Rulers and Grid page: Custom color dialog should use currently selected color
Contributed by:  Carson Li
@
text
@a29 1
import org.eclipse.jface.resource.CompositeImageDescriptor;
a39 3
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.PaletteData;
d58 1
d60 1
a60 1
	extends AbstractPropertySection {
d62 73
a134 124
	// Groups
	private Group displayGroup;
	private Group measurementGroup;
	private Group gridlineGroup;

	// Buttons
	private Button gridVisibilityButton;
	private Button gridOrderButton;
	private Button snapToGridButton;
	private Button restoreButton;

	private Button rulerVisibilityButton;

	private Button lineColorButton;

	// Labels
	private static final String GRID_ON_LABEL = DiagramUIPropertiesMessages.Grid_On_Label_Text;
	private static final String GRID_LEVEL_LABEL = DiagramUIPropertiesMessages.Grid_Level_Label_Text;
	private static final String SNAP_TO_GRID_LABEL = DiagramUIPropertiesMessages.Snap_To_Grid_Label_Text;
	private static final String RULER_ON_LABEL = DiagramUIPropertiesMessages.Ruler_On_Label_Text;
	private static final String RULER_UNITS_LABEL = DiagramUIPropertiesMessages.Ruler_Units_Label_Text;
	private static final String GRID_SPACING_LABEL = DiagramUIPropertiesMessages.Grid_Spacing_Label_Text;
	private static final String VISIBILITY_LABEL = DiagramUIPropertiesMessages.Display_Group_Label_Text;
	private static final String MEASUREMENT_LABEL = DiagramUIPropertiesMessages.Measurement_Group_Label_Text;
	private static final String GRIDLINE_LABEL = DiagramUIPropertiesMessages.Gridline_Group_Label_Text;
	private static final String LINE_COLOR_LABEL = DiagramUIPropertiesMessages.Line_Color_Label_Text;
	private static final String LINE_STYLE_LABEL = DiagramUIPropertiesMessages.Line_Style_Label_Text;
	private static final String RESTORE_LABEL = DiagramUIPropertiesMessages.Restore_Defaults_Label_Text;

	// Unit labels
	private static final String INCHES_LABEL = DiagramUIPropertiesMessages.Inches_Label_Text;
	private static final String CENTIMETERS_LABEL = DiagramUIPropertiesMessages.Centimeters_Label_Text;
	private static final String PIXEL_LABEL = DiagramUIPropertiesMessages.Pixel_Label_Text;

	// Line Style labels
	private static final String SOLID_LABEL = DiagramUIPropertiesMessages.Solid_Label_Text;
	private static final String DASH_LABEL = DiagramUIPropertiesMessages.Dash_Label_Text;
	private static final String DOT_LABEL = DiagramUIPropertiesMessages.Dot_Label_Text;
	private static final String DASH_DOT_LABEL = DiagramUIPropertiesMessages.Dash_Dot_Label_Text;
	private static final String DASH_DOT_DOT_LABEL = DiagramUIPropertiesMessages.Dash_Dot_Dot_Label_Text;
	private static final String SPACED_DOT_LABEL = DiagramUIPropertiesMessages.Spaced_Dot_Label_Text;

	// Default color for the grid.
	private static final int LIGHT_GRAY_RGB = 12632256;

	// Ruler unit drop down
	private CCombo rulerUnitCombo;

	// Line style drop down
	private CCombo lineStyleCombo;

	// Text widget to display and set value of the property
	private Text textWidget;

	private RGB lineColor = null;

	// For changing ruler units
	private static final int INCHES = 0;
	private static final int CENTIMETERS = 1;
	private static final int PIXELS = 2;

	// Conversion from inch to centimeter
	private static final double INCH2CM = 2.54;

	// Valid grid spacing range
	private double minValidValue = 00.009;
	private double maxValidValue = 99.999;

	// Listener for workspace property changes
	private PropertyStoreListener propertyListener = new PropertyStoreListener();

	private IPreferenceStore workspaceViewerProperties = null;

    private static class ColorOverlayImageDescriptor
	extends CompositeImageDescriptor {

	/** default color icon width */
	private static final Point ICON_SIZE = new Point(16, 16);

	/** the basic icon */
	private ImageData basicImgData;

	/** the color of the thin color bar */
	private RGB rgb;

	/**
	 * Creates a new color menu image descriptor
	 * 
	 * @@param basicIcon
	 *            The basic Image data
	 * @@param rgb
	 *            The color bar RGB value
	 */
	public ColorOverlayImageDescriptor(ImageData basicImgData, RGB rgb) {
		this.basicImgData = basicImgData;
		this.rgb = rgb;
	}

	/**
	 * @@see org.eclipse.jface.resource.CompositeImageDescriptor#drawCompositeImage(int,
	 *      int)
	 */
	protected void drawCompositeImage(int width, int height) {

		// draw the thin color bar underneath
		if (rgb != null) {
			ImageData colorBar = new ImageData(width, height / 5, 1,
			
				new PaletteData(new RGB[] {rgb}));
			drawImage(colorBar, 0, height - height / 5);
			
		}
		// draw the base image
		drawImage(basicImgData, 0, 0);
	}

	/**
	 * @@see org.eclipse.jface.resource.CompositeImageDescriptor#getSize()
	 */
	protected Point getSize() {
		return ICON_SIZE;
	}
}  
		
d137 1
a137 1
	 */
d139 23
a161 26
		super.createControls(parent, aTabbedPropertySheetPage);
		initializeControls(parent);
	}

	/**
	 * 
	 * Sets up controls with proper layouts and groups	 
	 * @@param parent
	 */
	private void initializeControls(Composite parent) {
		parent.setLayout(new GridLayout(1, false));

		// Top row composite
		Composite topComposite = getWidgetFactory().createComposite(parent);
		topComposite.setLayout(new GridLayout(2, false));

		// Create the groups for this section
		createDisplayGroup(topComposite);
		createMeasurementGroup(topComposite);

		// Bottom row composite
		Composite bottomComposite = getWidgetFactory().createComposite(parent);
		bottomComposite.setLayout(new GridLayout(2, false));

		// Create grid line settings
		createGridlineGroup(bottomComposite);
d163 3
d167 1
a167 1
		extraComposite.setLayout(new GridLayout(1, false));
d169 1
a169 1
		// Create snap to grid checkbox
d172 4
a175 4
		snapToGridButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				// Set the snap to grid workspace property
d177 4
a180 4
			}
		});

		// Create restore to preferences defaults
d183 14
a196 14
		restoreButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				restorePreferenceValues();
			}

			private void restorePreferenceValues() {
				IPreferenceStore preferenceStore = getPreferenceStore();

				// The workspace properties will always exist because it is set
				// 
				IPreferenceStore wsPrefStore = getWorkspaceViewerProperties();

				if (wsPrefStore.getBoolean(WorkspaceViewerProperties.GRIDORDER) == false) {
d198 2
a199 2
				}
				if (wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINECOLOR) != LIGHT_GRAY_RGB) {
d201 2
a202 2
				}
				if (wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINESTYLE) != SWT.LINE_CUSTOM) {
d204 1
a204 1
				}
d207 1
a207 1
				}
d210 1
a210 1
				}
d213 2
a214 2
				}

d219 9
a227 9
				}

				// reset the input values
				setInput(getPart(), null);
			}
		});
	}

	private IPreferenceStore getPreferenceStore() {
d230 2
a231 2
		return preferenceStore;
	}
d233 4
a236 4
	private void createLineColorControl(Composite composite) {
		getWidgetFactory().createLabel(composite, LINE_COLOR_LABEL);

		lineColorButton = new Button(composite, SWT.PUSH);
d240 17
a256 21
					public void getName(AccessibleEvent e) {
						e.result = DiagramUIMessages.PropertyDescriptorFactory_LineColor;
					}
				});

		lineColorButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				changeLineColor(event);
			}

			/**
			 * Change line color property value
			 */
			private void changeLineColor(SelectionEvent event) {
				lineColor = changeColor(
						event,
						lineColorButton,
						DiagramUIPropertiesImages.DESC_LINE_COLOR,
						getWorkspacePropertyInt(WorkspaceViewerProperties.GRIDLINECOLOR));
				if (lineColor != null)
d258 8
a265 16
			}
		});
		lineColorButton.setEnabled(true);
	}

	private void createLineStyleControl(Composite composite) {
		getWidgetFactory().createLabel(composite, LINE_STYLE_LABEL);

		lineStyleCombo = getWidgetFactory().createCCombo(composite,
				SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
		lineStyleCombo.setItems(getStyles());
		lineStyleCombo.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				updateLineStyle();
			}
d267 11
a277 2
			private void updateLineStyle() {
				int style = lineStyleCombo.getSelectionIndex();
d279 2
a280 4
			}
		});

	}
d282 8
a289 6
	/**
	 * @@param event -
	 *            selection event
	 * @@param button -
	 *            event source
	 * @@param imageDescriptor -
d292 26
a317 56
	 * @@return - new RGB color, or null if none selected
	 */
	private RGB changeColor(SelectionEvent event, Button button,
			ImageDescriptor imageDescriptor, int previousColor) {

		ColorPalettePopup popup = new ColorPalettePopup(button.getParent()
				.getShell(), IDialogConstants.BUTTON_BAR_HEIGHT);

		popup.setPreviousColor(previousColor);
		Rectangle r = button.getBounds();
		Point location = button.getParent().toDisplay(r.x, r.y);
		popup.open(new Point(location.x, location.y + r.height));

		if (popup.useDefaultColor()) {
			Image overlyedImage = new ColorOverlayImageDescriptor(
					imageDescriptor.getImageData(), FigureUtilities.integerToRGB(new Integer(LIGHT_GRAY_RGB)))
					.createImage();
			disposeImage(button.getImage());
			button.setImage(overlyedImage);
			return FigureUtilities.integerToRGB(new Integer(LIGHT_GRAY_RGB));
		}

		if (popup.getSelectedColor() != null) {
			Image overlyedImage = new ColorOverlayImageDescriptor(
					imageDescriptor.getImageData(), popup.getSelectedColor())
					.createImage();
			disposeImage(button.getImage());
			button.setImage(overlyedImage);
		}

		return popup.getSelectedColor();

	}

	private void disposeImage(Image image) {
		if (image == null) {
			return;
		}

		if (image.equals(DiagramUIPropertiesImages
				.get(DiagramUIPropertiesImages.IMG_LINE_COLOR))) {
			return;
		}

		if (!image.isDisposed()) {
			image.dispose();
		}
	}

	private Double convertStringToDouble(String strValue) {
		NumberFormat numberFormatter = NumberFormat.getInstance();
		Double value;
		try {
			value = forceDouble(numberFormatter.parse(strValue));
		} catch (ParseException e) {
			// default value
d319 17
a335 17
			setGridSpacing(value.doubleValue());
		}
		return value;
	}

	private void setGridSpacing(double value) {
		// Set grid spacing back to the input value
		NumberFormat numberFormater = NumberFormat.getInstance();
		textWidget.setText(numberFormater.format(value));
		textWidget.selectAll();
	}

	/**
	 * Creates group with ruler units and grid spacing controls	 
	 * @@param composite
	 */
	private void createMeasurementGroup(Composite composite) {
d338 24
a361 1
		measurementGroup.setLayout(new GridLayout(2, false));
d363 4
a366 22
		// Create ruler unit combo
		getWidgetFactory().createLabel(measurementGroup, RULER_UNITS_LABEL);

		rulerUnitCombo = getWidgetFactory().createCCombo(measurementGroup,
				SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
		rulerUnitCombo.setItems(getUnits());
		rulerUnitCombo.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				int oldUnits = getWorkspacePropertyInt(WorkspaceViewerProperties.RULERUNIT);
				int newUnits = rulerUnitCombo.getSelectionIndex();

				// Order of the changes is important so that there is no
				// interim point with a 1 pixel grid spacing
				if (oldUnits < newUnits) {
					updateSpacing(oldUnits, newUnits);
					updateRulerUnits();
				} else {
					updateRulerUnits();
					updateSpacing(oldUnits, newUnits);
				}
			}
d368 5
a372 4
			private void updateSpacing(int fromUnits, int toUnits) {
				String currentUnits = convertUnits(fromUnits, toUnits);
                setWorkspaceProperty(WorkspaceViewerProperties.GRIDSPACING, convertStringToDouble(currentUnits).doubleValue());
			}
a373 5
			private void updateRulerUnits() {
				int units = getCurrentRulerUnit();
				setWorkspaceProperty(WorkspaceViewerProperties.RULERUNIT, units);
			}
		});
d375 2
a376 2
		// Create grid spacing text field
		getWidgetFactory().createLabel(measurementGroup, GRID_SPACING_LABEL);
d378 27
a404 26
		GridData data = new GridData(SWT.FILL, SWT.FILL, true, false);
		textWidget.setLayoutData(data);
		startTextWidgetEventListener();

	}

	/**
	 * 
	 * converts fromUnits to toUnits (e.g. inches to pixels)
	 * 
	 * @@param fromUnits
	 * @@param toUnits
	 * @@return equivalent number of toUnits for the given fromUnits
	 */
	private String convertUnits(int fromUnits, int toUnits) {
		String valueStr = textWidget.getText();
		if (fromUnits == toUnits) {
			return valueStr;
		}
		Double value = convertStringToDouble(valueStr);
		double pixelValue = 0;
		switch (fromUnits) {
		case INCHES:
			pixelValue = value.doubleValue() * Display.getDefault().getDPI().x;
			break;
		case CENTIMETERS:
d406 12
a417 12
			break;
		case PIXELS:
			pixelValue = value.intValue();
		}

		double returnValue = 0;

		switch (toUnits) {
		case INCHES:
			returnValue = pixelValue / Display.getDefault().getDPI().x;
			break;
		case CENTIMETERS:
d419 8
a426 36
			break;
		case PIXELS:
			returnValue = Math.round(pixelValue);
		}
		NumberFormat numberFormatter = NumberFormat.getInstance();
		return numberFormatter.format(returnValue);

	}

	/**
	 * A helper to listen for events that indicate that a text field has been
	 * changed.
	 */
	private TextChangeHelper textListener = new TextChangeHelper() {
		boolean textModified = false;

		/**
		 * @@see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
		 */
		public void handleEvent(Event event) {
			switch (event.type) {
			case SWT.KeyDown:
				textModified = true;
				if (event.character == SWT.CR)
					textChanged((Control) event.widget);
				break;
			case SWT.FocusOut:
				textChanged((Control) event.widget);
				break;
			}
		}

		public void textChanged(Control control) {
			if (textModified) {
				String currentText = ((Text) control).getText();
				try {
d428 27
d456 2
a457 2
					double pixels = convertToBase(value);
					if (pixels >= minValidValue && pixels <= maxValidValue) {
d459 22
a480 22
						setGridSpacing(value);
					} else {
						resetGridSpacing();
					}

				} catch (NumberFormatException e) {
					resetGridSpacing();
				}
				textModified = false;
			}
		}

		private void resetGridSpacing() {
			// Set grid spacing back to original value
			double value = getWorkspacePropertyDouble(WorkspaceViewerProperties.GRIDSPACING);
			setGridSpacing(value);
		}

	};

	/**
	 * 
d482 1
a482 1
	 * 
d484 22
a505 21
	 * @@return
	 */
	private double convertToBase(double number) {

		double returnValue = 0;
		switch (getCurrentRulerUnit()) {
		case INCHES:
			returnValue = number;
			break;
		case CENTIMETERS:
			returnValue = number / INCH2CM;
			break;
		case PIXELS:
			returnValue = number / Display.getDefault().getDPI().x;
		}
		return returnValue;
	}

	private int getCurrentRulerUnit() {
		return rulerUnitCombo.getSelectionIndex();
	}
d509 9
a517 9
	 */
	public void setInput(IWorkbenchPart part, ISelection selection) {
		super.setInput(part, selection);

		// Set up workspace property listener
		initWorkspacePropertyListener();
		double value = getWorkspacePropertyDouble(WorkspaceViewerProperties.GRIDSPACING);
		NumberFormat numberFormatter = NumberFormat.getNumberInstance();
		textWidget.setText(numberFormatter.format(value));
d522 7
d530 19
a548 33
		int rulerValue = getValue(WorkspaceViewerProperties.RULERUNIT);
		int styleValue = getValue(WorkspaceViewerProperties.GRIDLINESTYLE) - 1;
		rulerUnitCombo.setText(getUnits()[rulerValue]);
		lineStyleCombo.setText(getStyles()[styleValue]);
		Image overlyedImage = new ColorOverlayImageDescriptor(
				(DiagramUIPropertiesImages.DESC_LINE_COLOR).getImageData(),
				FigureUtilities
						.integerToRGB(getWorkspacePropertyInt(WorkspaceViewerProperties.GRIDLINECOLOR)))
				.createImage();
		disposeImage(lineColorButton.getImage());
		lineColorButton.setImage(overlyedImage);

	}

	/**
	 * @@param property
	 * @@return the integer value of the string property
	 */
	private int getValue(String property) {
		int value;
		String valueString = getWorkspaceProperty(property);

		if (valueString.equals(StringStatics.BLANK)) {
			value = 0;
		} else {
			value = new Integer(getWorkspaceProperty(property)).intValue();
		}
		return value;
	}

	private String[] getUnits() {
		return new String[] { INCHES_LABEL, CENTIMETERS_LABEL, PIXEL_LABEL };
	}
d550 1
a550 1
	private String[] getStyles() {
d552 2
a553 2
	}

d555 42
a596 42
	 * @@see org.eclipse.ui.views.properties.tabbed.ISection#dispose()
	 */
	public void dispose() {
		stopTextWidgetEventListener();
		removeWorkspacePropertyListener();
		super.dispose();
	}

	/**
	 * Start listening to the text widget events
	 */
	private void startTextWidgetEventListener() {
		getListener().startListeningTo(getTextWidget());
		getListener().startListeningForEnter(getTextWidget());
	}

	/**
	 * Stop listening to text widget events
	 */
	private void stopTextWidgetEventListener() {
		getListener().stopListeningTo(getTextWidget());
	}

	/**
	 * @@return Returns the textWidget.
	 */
	private Text getTextWidget() {
		return textWidget;
	}

	/**
	 * @@return Returns the listener.
	 */
	private TextChangeHelper getListener() {
		return textListener;
	}

	/**
	 * Creates group with ruler and grid visibility and grid order controls
	 * @@param composite
	 */
	private void createDisplayGroup(Composite composite) {
d599 2
a600 2
		displayGroup.setLayout(new GridLayout(1, true));

d603 4
a606 4
		rulerVisibilityButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				// Set ruler visibility workspace property
d608 2
a609 2
			}
		});
d614 4
a617 4
		gridVisibilityButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				// Set grid visibility workspace property
d619 3
a621 3
			}
		});

d624 4
a627 4
		gridOrderButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				// Set grid level workspace property
d629 10
a638 10
			}
		});

	}

	/**
	 * Creates group with line color and style controls
	 * @@param composite
	 */
	private void createGridlineGroup(Composite composite) {
d641 50
a690 48
		GridLayout gridLayout = new GridLayout(2, false);
		gridlineGroup.setLayout(gridLayout);
		createLineColorControl(gridlineGroup);
		createLineStyleControl(gridlineGroup);

	}

	private void setWorkspaceProperty(String property, boolean setting) {
		getWorkspaceViewerProperties().setValue(property, setting);
	}

	private void setWorkspaceProperty(String property, int setting) {
		getWorkspaceViewerProperties().setValue(property, setting);
	}

	private void setWorkspaceProperty(String property, double setting) {
		getWorkspaceViewerProperties().setValue(property, setting);
	}

	private String getWorkspaceProperty(String property) {
		return getWorkspaceViewerProperties().getString(property);
	}

	private int getWorkspacePropertyInt(String property) {
		return getWorkspaceViewerProperties().getInt(property);
	}

	private double getWorkspacePropertyDouble(String property) {
		return getWorkspaceViewerProperties().getDouble(property);
	}

	private boolean getBooleanWorkspaceProperty(String property) {
		return getWorkspaceViewerProperties().getBoolean(property);
	}

	private IPreferenceStore getWorkspaceViewerProperties() {
		return workspaceViewerProperties;
	}

	/**
	 * Listener for the workspace preference store.
	 */
	private class PropertyStoreListener implements IPropertyChangeListener {

		/*
		 * (non-Javadoc)
		 * @@see org.eclipse.jface.util.IPropertyChangeListener#propertyChange(org.eclipse.jface.util.PropertyChangeEvent)
		 */
d692 13
a704 13
			handleWorkspacePropertyChanged(event);
		}
	}

	/**
	 * Handles workspace property changes	  
	 * @@param event
	 */
	private void handleWorkspacePropertyChanged(PropertyChangeEvent event) {
		if (WorkspaceViewerProperties.VIEWGRID.equals(event.getProperty())) {
			if (!gridVisibilityButton.isDisposed()) {
				gridVisibilityButton.setSelection(getEventBoolean(event));
			}
d706 3
a708 3
			if (!rulerVisibilityButton.isDisposed()) {
				rulerVisibilityButton.setSelection(getEventBoolean(event));
			}
d710 3
a712 3
			if (!snapToGridButton.isDisposed()) {
				snapToGridButton.setSelection(getEventBoolean(event));
			}
d714 3
a716 3
			if (!gridOrderButton.isDisposed()) {
				gridOrderButton.setSelection(getEventBoolean(event));
			}
d718 4
a721 4
			if (!textWidget.isDisposed()) {
				Double value = new Double(getEventString(event));
				textWidget.setText(NumberFormat.getInstance().format(value));
			}
d723 3
a725 3
			if (!rulerUnitCombo.isDisposed()) {
				rulerUnitCombo.select(Integer.parseInt(getEventString(event)));
			}
d727 1
a727 1
			if (!lineStyleCombo.isDisposed()) {
d729 12
a740 12
			}
		}
	}

	private boolean getEventBoolean(PropertyChangeEvent event) {
		Boolean newValue = (Boolean) event.getNewValue();
		return newValue.booleanValue();
	}

	private String getEventString(PropertyChangeEvent event) {
		return event.getNewValue().toString();
	}
d742 2
a743 1
	/**
d746 3
a748 3
	 */
	private void initWorkspacePropertyListener() {
		IDiagramWorkbenchPart editor = (IDiagramWorkbenchPart) getPart();
d751 5
a755 5
		workspaceViewerProperties = viewer.getWorkspaceViewerPreferenceStore();
		workspaceViewerProperties.addPropertyChangeListener(propertyListener);
	}

	/**
d758 3
a760 3
	 */
	private void removeWorkspacePropertyListener() {
		if (getWorkspaceViewerProperties() != null) {
d762 6
a767 6
			workspaceViewerProperties = null;
		}
		propertyListener = null;
	}

	/**
d772 8
a779 8
	 * @@param number
	 * @@return
	 */
	private Double forceDouble(Number number) {
		if (!(number instanceof Double))
			return new Double(number.doubleValue());
		return (Double) number;
	}
@


1.9
log
@[167236] gmf_head aboyko 070405 Unnecessary cast in RulerGridPropertySection
@
text
@d1 11
@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d10 1
d737 1
a737 1
        DiagramEditor editor = (DiagramEditor) getPart();
@


1.7
log
@bugzilla 142634 gmf-head mmostafa 060529 TVT3.2:TCT552: Wrong decimal point in Grid Spacing box
@
text
@d7 1
d23 2
a25 1
import org.eclipse.swt.custom.CLabel;
a30 2
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
a41 1
import org.eclipse.ui.views.properties.tabbed.ITabbedPropertyConstants;
d91 4
a94 1
    
d176 1
a176 3

            private static final int LIGHT_GRAY_RGB = 12632256;
            
d222 1
d227 6
d243 1
a243 1
                lineColor = changeColor(event, lineColorButton,null, DiagramUIPropertiesImages.DESC_LINE_COLOR);
d249 1
a249 8
        FormData data = new FormData();
        data.left = new FormAttachment(0,80);
        data.right = new FormAttachment(100, 0);
        data.top = new FormAttachment(0, 0);
        lineColorButton.setLayoutData(data);
        lineColorButton.setEnabled(true);
        
        createLabelWidget(composite, LINE_COLOR_LABEL, lineColorButton);
d253 2
d269 1
a269 8
        
        FormData data = new FormData();
        data.left = new FormAttachment(0,80);
        data.right = new FormAttachment(100, 0);
        data.top = new FormAttachment(0, 0);
        lineStyleCombo.setLayoutData(data);
        
        createLabelWidget(composite, LINE_STYLE_LABEL, lineStyleCombo); 
a276 2
     * @@param preferenceId -
     *            id of the preference of the default color value for that property
d283 1
a283 1
            String preferenceId, ImageDescriptor imageDescriptor) {
d286 1
a286 1
            .getShell(), preferenceId, IDialogConstants.BUTTON_BAR_HEIGHT);
d291 4
d306 2
a307 1
            value = new Double(getPreferenceStore().getDouble(IPreferenceConstants.PREF_GRID_SPACING));
d311 7
d326 1
a326 1
        measurementGroup.setLayout(new GridLayout(2, true));
d443 1
a443 1
                    double value = new Double(currentText).doubleValue();
d446 2
a447 1
                        setWorkspaceProperty(WorkspaceViewerProperties.GRIDSPACING, new Double(currentText).doubleValue());
d458 1
a458 1

d462 1
a462 3
            NumberFormat numberFormater = NumberFormat.getInstance();
            textWidget.setText(numberFormater.format(value));
            textWidget.selectAll();
d464 1
a571 18
        
    /**
     * Create a label for property name
     * 
     * @@param parent -
     *            parent composite
     * @@return - label to show property name
     */
    private CLabel createLabelWidget(Composite parent, String labelText, Control control) {
        CLabel label = getWidgetFactory().createCLabel(parent, labelText);
        FormData data = new FormData();
        data.left = new FormAttachment(0, 0);
        data.right = new FormAttachment(control,
            -ITabbedPropertyConstants.HSPACE);
        data.top = new FormAttachment(control, 0, SWT.CENTER);
        label.setLayoutData(data);
        return label;
    }
d628 5
a632 8
        gridlineGroup = getWidgetFactory().createGroup(composite, GRIDLINE_LABEL);      
        gridlineGroup.setLayout(new GridLayout(1, true));

        Composite sectionComposite3 = getWidgetFactory().createFlatFormComposite(gridlineGroup);
        createLineColorControl(sectionComposite3);

        Composite sectionComposite4 = getWidgetFactory().createFlatFormComposite(gridlineGroup);
        createLineStyleControl(sectionComposite4);
@


1.7.2.1
log
@Bugzilla#146690 gmf_R1_0_maintenance cmahoney 060711 Inconsistent default colours
@
text
@d92 1
a92 4

    // Default color for the grid.
    private static final int LIGHT_GRAY_RGB = 12632256;

d174 3
a176 1
                        
d236 1
a236 1
                lineColor = changeColor(event, lineColorButton, DiagramUIPropertiesImages.DESC_LINE_COLOR);
d282 2
d290 1
a290 1
            ImageDescriptor imageDescriptor) {
d293 1
a293 1
            .getShell(), IDialogConstants.BUTTON_BAR_HEIGHT);
a297 4

        if (popup.useDefaultColor()) {
            return FigureUtilities.integerToRGB(new Integer(LIGHT_GRAY_RGB));
        }
@


1.7.2.2
log
@Bugzilla#144685 gmf_R1_0_maintenance cmahoney 060824 Diagram property pages are not accessible
@
text
@a6 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
a21 2
import org.eclipse.swt.accessibility.AccessibleAdapter;
import org.eclipse.swt.accessibility.AccessibleEvent;
d23 1
d29 2
d42 1
a222 1
        getWidgetFactory().createLabel(composite, LINE_COLOR_LABEL);
a226 6
        lineColorButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
            public void getName(AccessibleEvent e) {
                e.result = DiagramUIMessages.PropertyDescriptorFactory_LineColor;
            }
        });
        
d243 8
a250 1
        lineColorButton.setEnabled(true);   
a253 2
        getWidgetFactory().createLabel(composite, LINE_STYLE_LABEL); 

d268 8
a275 1

d324 1
a324 1
        measurementGroup.setLayout(new GridLayout(2, false));
d570 18
d644 8
a651 5
        gridlineGroup = getWidgetFactory().createGroup(composite, GRIDLINE_LABEL);  
        GridLayout gridLayout = new GridLayout(2, false);
        gridlineGroup.setLayout(gridLayout);
        createLineColorControl(gridlineGroup);
        createLineStyleControl(gridlineGroup);
@


1.7.2.3
log
@[151402] gmf_R1_0_maintenance tmacdoug 060908 Grid spacing property text control is not not I18N compliant (decimal separator)
@
text
@d306 1
a306 2
            value = new Double(getWorkspacePropertyDouble(WorkspaceViewerProperties.GRIDSPACING));
            setGridSpacing(value.doubleValue());
a309 7

    private void setGridSpacing(double value) {
        // Set grid spacing back to the input value
        NumberFormat numberFormater = NumberFormat.getInstance();
        textWidget.setText(numberFormater.format(value));
        textWidget.selectAll();
    }       
d435 1
a435 1
                    double value = convertStringToDouble(currentText).doubleValue();
d438 1
a438 2
                        setWorkspaceProperty(WorkspaceViewerProperties.GRIDSPACING, value);                       
                        setGridSpacing(value);
d449 1
a449 1
        
d453 3
a455 1
            setGridSpacing(value);
a456 1
        
@


1.6
log
@gmf_head ahunter 060210 Migrate GMF usage of tabbed properties view from WTP to Eclipse Core (org.eclipse.wst.common.ui.properties to org.eclipse.ui.views.properties.tabbed)
@
text
@d3 1
d49 1
a49 700
	extends AbstractPropertySection {

	// Groups
	private Group displayGroup;
	private Group measurementGroup;
	private Group gridlineGroup;
	
	// Buttons
	private Button gridVisibilityButton;
	private Button gridOrderButton;
	private Button snapToGridButton;
	private Button restoreButton;

	private Button rulerVisibilityButton;

	private Button lineColorButton;	
	
	// Labels
	private static final String GRID_ON_LABEL = DiagramUIPropertiesMessages.Grid_On_Label_Text;
	private static final String GRID_LEVEL_LABEL = DiagramUIPropertiesMessages.Grid_Level_Label_Text;
	private static final String SNAP_TO_GRID_LABEL = DiagramUIPropertiesMessages.Snap_To_Grid_Label_Text;
	private static final String RULER_ON_LABEL = DiagramUIPropertiesMessages.Ruler_On_Label_Text;
	private static final String RULER_UNITS_LABEL = DiagramUIPropertiesMessages.Ruler_Units_Label_Text;
	private static final String GRID_SPACING_LABEL = DiagramUIPropertiesMessages.Grid_Spacing_Label_Text;
	private static final String VISIBILITY_LABEL = DiagramUIPropertiesMessages.Display_Group_Label_Text;
	private static final String MEASUREMENT_LABEL = DiagramUIPropertiesMessages.Measurement_Group_Label_Text;
	private static final String GRIDLINE_LABEL = DiagramUIPropertiesMessages.Gridline_Group_Label_Text;
	private static final String LINE_COLOR_LABEL = DiagramUIPropertiesMessages.Line_Color_Label_Text;
	private static final String LINE_STYLE_LABEL = DiagramUIPropertiesMessages.Line_Style_Label_Text;
	private static final String RESTORE_LABEL = DiagramUIPropertiesMessages.Restore_Defaults_Label_Text;

	// Unit labels
	private static final String INCHES_LABEL = DiagramUIPropertiesMessages.Inches_Label_Text;
	private static final String CENTIMETERS_LABEL = DiagramUIPropertiesMessages.Centimeters_Label_Text;
	private static final String PIXEL_LABEL = DiagramUIPropertiesMessages.Pixel_Label_Text;
	
	// Line Style labels
	private static final String  SOLID_LABEL = DiagramUIPropertiesMessages.Solid_Label_Text;
	private static final String  DASH_LABEL = DiagramUIPropertiesMessages.Dash_Label_Text;
	private static final String  DOT_LABEL = DiagramUIPropertiesMessages.Dot_Label_Text;
	private static final String  DASH_DOT_LABEL = DiagramUIPropertiesMessages.Dash_Dot_Label_Text;
	private static final String  DASH_DOT_DOT_LABEL = DiagramUIPropertiesMessages.Dash_Dot_Dot_Label_Text;
	private static final String  SPACED_DOT_LABEL = DiagramUIPropertiesMessages.Spaced_Dot_Label_Text;
	
	// Ruler unit drop down
	private CCombo rulerUnitCombo;

	// Line style drop down
	private CCombo lineStyleCombo;
	
	// Text widget to display and set value of the property
	private Text textWidget;

	private RGB lineColor = null;	

	// For changing ruler units
	private static final int INCHES = 0;
	private static final int CENTIMETERS = 1;
	private static final int PIXELS = 2;

	// Conversion from inch to centimeter
	private static final double INCH2CM = 2.54;
	
	// Valid grid spacing range
	private double minValidValue = 00.009;
	private double maxValidValue = 99.999;
	
	// Listener for workspace property changes
	private PropertyStoreListener propertyListener = new PropertyStoreListener();
	
	private IPreferenceStore workspaceViewerProperties = null;
	
	/* (non-Javadoc)
	 * @@see org.eclipse.ui.views.properties.tabbed.ISection#createControls(org.eclipse.swt.widgets.Composite, org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage)
	 */
	public void createControls(Composite parent, TabbedPropertySheetPage aTabbedPropertySheetPage) {
		super.createControls(parent, aTabbedPropertySheetPage);
		initializeControls(parent);
	}

	/**
	 * 
	 * Sets up controls with proper layouts and groups
	 * @@param parent
	 */
	private void initializeControls(Composite parent) {
		parent.setLayout(new GridLayout(1, false));

		// Top row composite
		Composite topComposite = getWidgetFactory().createComposite(parent);
		topComposite.setLayout(new GridLayout(2, false));
		
		// Create the groups for this section
		createDisplayGroup(topComposite);
		createMeasurementGroup(topComposite);
		
		// Bottom row composite
		Composite bottomComposite = getWidgetFactory().createComposite(parent);
		bottomComposite.setLayout(new GridLayout(2, false));

		// Create grid line settings
		createGridlineGroup(bottomComposite);
		
		Composite extraComposite = getWidgetFactory().createComposite(bottomComposite);
		extraComposite.setLayout(new GridLayout(1, false));

		// Create snap to grid checkbox
		snapToGridButton = getWidgetFactory().createButton(
			extraComposite, SNAP_TO_GRID_LABEL, SWT.CHECK);
		snapToGridButton.addSelectionListener(new SelectionAdapter() {
	
			public void widgetSelected(SelectionEvent event) {
				// Set the snap to grid workspace property			
				setWorkspaceProperty(WorkspaceViewerProperties.SNAPTOGRID, snapToGridButton.getSelection());
			}
		});
		
		// Create restore to preferences defaults
		restoreButton = getWidgetFactory().createButton(
			extraComposite, RESTORE_LABEL, SWT.PUSH);
		restoreButton.addSelectionListener(new SelectionAdapter() {
	
			public void widgetSelected(SelectionEvent event) {
				restorePreferenceValues();
			}

			private static final int LIGHT_GRAY_RGB = 12632256;
			
			private void restorePreferenceValues() {
				IPreferenceStore preferenceStore =
					(IPreferenceStore) ((DiagramEditor) getPart()).getDiagramEditPart().getDiagramPreferencesHint().getPreferenceStore();
				
				// The workspace properties will always exist because it is set 
				// 
				IPreferenceStore wsPrefStore = getWorkspaceViewerProperties();
				
				if (wsPrefStore.getBoolean(WorkspaceViewerProperties.GRIDORDER) == false) {
					wsPrefStore.setValue(WorkspaceViewerProperties.GRIDORDER, true);			
				} 
				if (wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINECOLOR) != LIGHT_GRAY_RGB) {
					wsPrefStore.setValue(WorkspaceViewerProperties.GRIDLINECOLOR, LIGHT_GRAY_RGB);			
				} 
				if (wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINESTYLE) != SWT.LINE_CUSTOM) {
					wsPrefStore.setValue(WorkspaceViewerProperties.GRIDLINESTYLE, SWT.LINE_CUSTOM);			
				}
				if (wsPrefStore.getBoolean(WorkspaceViewerProperties.VIEWRULERS) != preferenceStore.getBoolean(IPreferenceConstants.PREF_SHOW_RULERS)) {
					wsPrefStore.setValue(WorkspaceViewerProperties.VIEWRULERS, preferenceStore.getBoolean(IPreferenceConstants.PREF_SHOW_RULERS));
				}
				if (wsPrefStore.getBoolean(WorkspaceViewerProperties.VIEWGRID) != preferenceStore.getBoolean(IPreferenceConstants.PREF_SHOW_GRID)) {
					wsPrefStore.setValue(WorkspaceViewerProperties.VIEWGRID, preferenceStore.getBoolean(IPreferenceConstants.PREF_SHOW_GRID));
				}
				if (wsPrefStore.getBoolean(WorkspaceViewerProperties.SNAPTOGRID) != preferenceStore.getBoolean(IPreferenceConstants.PREF_SNAP_TO_GRID)) {
					wsPrefStore.setValue(WorkspaceViewerProperties.SNAPTOGRID, preferenceStore.getBoolean(IPreferenceConstants.PREF_SNAP_TO_GRID));			
				} 
				
				if ((wsPrefStore.getInt(WorkspaceViewerProperties.RULERUNIT) != preferenceStore.getInt(IPreferenceConstants.PREF_RULER_UNITS)) || 
						(wsPrefStore.getDouble(WorkspaceViewerProperties.GRIDSPACING) != preferenceStore.getDouble(IPreferenceConstants.PREF_GRID_SPACING))) {
					wsPrefStore.setValue(WorkspaceViewerProperties.RULERUNIT, preferenceStore.getInt(IPreferenceConstants.PREF_RULER_UNITS));						
					wsPrefStore.setValue(WorkspaceViewerProperties.GRIDSPACING, preferenceStore.getDouble(IPreferenceConstants.PREF_GRID_SPACING));			
				}
				
				// reset the input values
				setInput(getPart(),null);
			}
		});		
	}

	private void createLineColorControl(Composite composite) {
		
		lineColorButton = new Button(composite, SWT.PUSH);
		lineColorButton.setImage(DiagramUIPropertiesImages.get(DiagramUIPropertiesImages.IMG_LINE_COLOR));

		lineColorButton.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				changeLineColor(event);
			}

			/**
			 * Change line color property value
			 */
			private void changeLineColor(SelectionEvent event) {
				lineColor = changeColor(event, lineColorButton,null, DiagramUIPropertiesImages.DESC_LINE_COLOR);
				if (lineColor != null) 
					setWorkspaceProperty(WorkspaceViewerProperties.GRIDLINECOLOR, FigureUtilities.RGBToInteger(lineColor).intValue());
			}			
		});

		FormData data = new FormData();
		data.left = new FormAttachment(0,80);
		data.right = new FormAttachment(100, 0);
		data.top = new FormAttachment(0, 0);
		lineColorButton.setLayoutData(data);
		lineColorButton.setEnabled(true);
		
		createLabelWidget(composite, LINE_COLOR_LABEL, lineColorButton);
	}

	private void createLineStyleControl(Composite composite) {
		lineStyleCombo = getWidgetFactory().createCCombo(composite,
			SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
		lineStyleCombo.setItems(getStyles());
		lineStyleCombo.addSelectionListener(new SelectionAdapter() {

			public void widgetSelected(SelectionEvent event) {
				updateLineStyle();
			}

			private void updateLineStyle() {
				int style = lineStyleCombo.getSelectionIndex(); 
				setWorkspaceProperty(WorkspaceViewerProperties.GRIDLINESTYLE, style + SWT.LINE_SOLID);
			}
		});
		
		FormData data = new FormData();
		data.left = new FormAttachment(0,80);
		data.right = new FormAttachment(100, 0);
		data.top = new FormAttachment(0, 0);
		lineStyleCombo.setLayoutData(data);
		
		createLabelWidget(composite, LINE_STYLE_LABEL, lineStyleCombo);	
	}	
	
	/**
	 * @@param event -
	 *            selection event
	 * @@param button -
	 *            event source
	 * @@param preferenceId -
	 *            id of the preference of the default color value for that property
	 * @@param imageDescriptor -
	 *            the image to draw overlay on the button after the new
	 *            color is set
	 * @@return - new RGB color, or null if none selected
	 */
	private RGB changeColor(SelectionEvent event, Button button,
			String preferenceId, ImageDescriptor imageDescriptor) {

		ColorPalettePopup popup = new ColorPalettePopup(button.getParent()
			.getShell(), preferenceId, IDialogConstants.BUTTON_BAR_HEIGHT);

		Rectangle r = button.getBounds();
		Point location = button.getParent().toDisplay(r.x, r.y);
		popup.open(new Point(location.x, location.y + r.height));
		return popup.getSelectedColor();

	}	
	
	/**
	 * Creates group with ruler units and grid spacing controls
	 * @@param composite
	 */
	private void createMeasurementGroup(Composite composite) {

		measurementGroup = getWidgetFactory().createGroup(composite, MEASUREMENT_LABEL);		
		measurementGroup.setLayout(new GridLayout(2, true));
				
		// Create ruler unit combo
		getWidgetFactory().createLabel(measurementGroup, RULER_UNITS_LABEL);
		
		rulerUnitCombo = getWidgetFactory().createCCombo(measurementGroup,
			SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
		rulerUnitCombo.setItems(getUnits());
		rulerUnitCombo.addSelectionListener(new SelectionAdapter() {
			
			public void widgetSelected(SelectionEvent event) {
				int oldUnits = getWorkspacePropertyInt(WorkspaceViewerProperties.RULERUNIT);
				int newUnits = rulerUnitCombo.getSelectionIndex();
				
				// Order of the changes is important so that there is no  
				// interim point with a 1 pixel grid spacing
				if (oldUnits < newUnits) {
					updateSpacing(oldUnits,newUnits);
					updateRulerUnits();
				} else {
					updateRulerUnits();
					updateSpacing(oldUnits,newUnits);
				}
			}

			private void updateSpacing(int fromUnits, int toUnits) {				
				String currentUnits = convertUnits(fromUnits, toUnits);
				//textWidget.setText(currentUnits);
				setWorkspaceProperty(WorkspaceViewerProperties.GRIDSPACING, new Double(currentUnits).doubleValue());
			}

			private void updateRulerUnits() {
				int units = getCurrentRulerUnit();
				setWorkspaceProperty(WorkspaceViewerProperties.RULERUNIT, units);
			}
		});


		// Create grid spacing text field
		getWidgetFactory().createLabel(measurementGroup, GRID_SPACING_LABEL);
		textWidget = getWidgetFactory().createText(measurementGroup, StringStatics.BLANK, SWT.BORDER);
		GridData data = new GridData(SWT.FILL,SWT.FILL,true,false);
		textWidget.setLayoutData(data);
		startTextWidgetEventListener();		
		
	
	}
	
	/**
	 * 
	 * converts fromUnits to toUnits (e.g. inches to pixels)
	 * 
	 * @@param fromUnits
	 * @@param toUnits
	 * @@return equivalent number of toUnits for the given fromUnits
	 */
	private String convertUnits(int fromUnits, int toUnits ) {
		
		String valueStr = textWidget.getText();
		if( fromUnits == toUnits ) {
			return valueStr;
		}
		
		Double value = new Double(valueStr);
		double pixelValue = 0;

		switch( fromUnits ) {
			case INCHES:
				pixelValue = value.doubleValue() * Display.getDefault().getDPI().x;
				break;
			case CENTIMETERS:
				pixelValue = value.doubleValue() * Display.getDefault().getDPI().x / INCH2CM;
				break;
			case PIXELS:
				pixelValue = value.intValue();
		}
		
		double returnValue = 0;
		
		switch( toUnits ) {
			case INCHES:
				returnValue = pixelValue / Display.getDefault().getDPI().x;
				break;
			case CENTIMETERS:
				returnValue = pixelValue * INCH2CM / Display.getDefault().getDPI().x;
				break;
			case PIXELS:
				returnValue = Math.round(pixelValue);
		}
		NumberFormat numberFormatter = NumberFormat.getInstance();
		return numberFormatter.format(returnValue);		
		
	}

	/**
	 * A helper to listen for events that indicate that a text field has been
	 * changed.
	 */
	private TextChangeHelper textListener = new TextChangeHelper() {
		boolean textModified = false;
		/**
		 * @@see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
		 */
		public void handleEvent(Event event) {
			switch (event.type) {
				case SWT.KeyDown :
					textModified = true;
					if (event.character == SWT.CR)
						textChanged((Control)event.widget);
					break;
				case SWT.FocusOut :
					textChanged((Control)event.widget);
					break;
			}
		}
		
		public void textChanged(Control control) {
			if (textModified) {
				String currentText = ((Text) control).getText();
				try {
					
					double value = new Double(currentText).doubleValue();
					double pixels = convertToBase(value);
					if (pixels >= minValidValue && pixels <= maxValidValue) {
						setWorkspaceProperty(WorkspaceViewerProperties.GRIDSPACING, new Double(currentText).doubleValue());
					} else {
						resetGridSpacing();
					}
					
				} catch (NumberFormatException e) {
					resetGridSpacing();
				}
				textModified = false;
			}
		}

		private void resetGridSpacing() {
			// Set grid spacing back to original value
			textWidget.setText(getWorkspaceProperty(WorkspaceViewerProperties.GRIDSPACING));
			textWidget.selectAll();
		}		
	};
	
	/**
	 * 
	 * converts the current units used to a base unit value to be used (e.g. in validation)
	 * 
	 * @@param number Units to be converted to the base unit
	 * @@return
	 */
	private double convertToBase(double number) {
		
		double returnValue = 0;
		switch( getCurrentRulerUnit() ) {
			case INCHES:
				returnValue = number;
				break;
			case CENTIMETERS:
				returnValue = number / INCH2CM;
				break;
			case PIXELS:
				returnValue = number / Display.getDefault().getDPI().x;
		}
		return returnValue;
	}
	
	
	private int getCurrentRulerUnit() {		
		return rulerUnitCombo.getSelectionIndex();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.ui.views.properties.tabbed.ISection#setInput(org.eclipse.ui.IWorkbenchPart, org.eclipse.jface.viewers.ISelection)
	 */
	public void setInput(IWorkbenchPart part, ISelection selection) {
		super.setInput(part, selection);
		
		// Set up workspace property listener 
		initWorkspacePropertyListener();
		
		textWidget.setText(getWorkspaceProperty(WorkspaceViewerProperties.GRIDSPACING));
		rulerVisibilityButton.setSelection(getBooleanWorkspaceProperty(WorkspaceViewerProperties.VIEWRULERS));
		gridVisibilityButton.setSelection(getBooleanWorkspaceProperty(WorkspaceViewerProperties.VIEWGRID));
		gridOrderButton.setSelection(getBooleanWorkspaceProperty(WorkspaceViewerProperties.GRIDORDER));
		snapToGridButton.setSelection(getBooleanWorkspaceProperty(WorkspaceViewerProperties.SNAPTOGRID));
		
		int rulerValue = getValue(WorkspaceViewerProperties.RULERUNIT);
		int styleValue = getValue(WorkspaceViewerProperties.GRIDLINESTYLE)-1;
		rulerUnitCombo.setText(getUnits()[rulerValue]);
		lineStyleCombo.setText(getStyles()[styleValue]);
		
	}

	/**
	 * @@param property
	 * @@return the integer value of the string property
	 */
	private int getValue(String property) {
		int value;
		String valueString = getWorkspaceProperty(property);

		if (valueString.equals(StringStatics.BLANK)) {
			value = 0;
		} else {
			value = new Integer(getWorkspaceProperty(property)).intValue();
		}
		return value;
	}

	private String[] getUnits() {		
		return new String[]{INCHES_LABEL,CENTIMETERS_LABEL,PIXEL_LABEL};
	}

	private String[] getStyles() {		
		return new String[]{SOLID_LABEL,DASH_LABEL,DOT_LABEL,DASH_DOT_LABEL,DASH_DOT_DOT_LABEL,SPACED_DOT_LABEL};
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.ui.views.properties.tabbed.ISection#dispose()
	 */
	public void dispose() {
		stopTextWidgetEventListener();
		removeWorkspacePropertyListener();
		super.dispose();
	}	

	/**
	 * Start listening to the text widget events
	 */
	private void startTextWidgetEventListener() {
		getListener().startListeningTo(getTextWidget());
		getListener().startListeningForEnter(getTextWidget());
	}

	/**
	 * Stop listening to text widget events
	 */
	private void stopTextWidgetEventListener() {
		getListener().stopListeningTo(getTextWidget());
	}
	
	/**
	 * @@return Returns the textWidget.
	 */
	private Text getTextWidget() {
		return textWidget;
	}
		
	/**
	 * Create a label for property name
	 * 
	 * @@param parent -
	 *            parent composite
	 * @@return - label to show property name
	 */
	private CLabel createLabelWidget(Composite parent, String labelText, Control control) {
		CLabel label = getWidgetFactory().createCLabel(parent, labelText);
		FormData data = new FormData();
		data.left = new FormAttachment(0, 0);
		data.right = new FormAttachment(control,
			-ITabbedPropertyConstants.HSPACE);
		data.top = new FormAttachment(control, 0, SWT.CENTER);
		label.setLayoutData(data);
		return label;
	}
	
	/**
	 * @@return Returns the listener.
	 */
	private TextChangeHelper getListener() {
		return textListener;
	}
	
	/**
	 * Creates group with ruler and grid visibility and grid order controls
	 * @@param composite
	 */
	private void createDisplayGroup(Composite composite) {	

		displayGroup = getWidgetFactory().createGroup(composite, VISIBILITY_LABEL);		
		displayGroup.setLayout(new GridLayout(1, true));
		
		rulerVisibilityButton = getWidgetFactory().createButton(
			displayGroup, RULER_ON_LABEL, SWT.CHECK);
		rulerVisibilityButton.addSelectionListener(new SelectionAdapter() {
	
			public void widgetSelected(SelectionEvent event) {
				// Set ruler visibility workspace property
				setWorkspaceProperty(WorkspaceViewerProperties.VIEWRULERS, rulerVisibilityButton.getSelection());
			}
		});

		
		gridVisibilityButton = getWidgetFactory().createButton(
			displayGroup, GRID_ON_LABEL, SWT.CHECK);
		gridVisibilityButton.addSelectionListener(new SelectionAdapter() {
	
			public void widgetSelected(SelectionEvent event) {
				// Set grid visibility workspace property
				setWorkspaceProperty(WorkspaceViewerProperties.VIEWGRID, gridVisibilityButton.getSelection());
			}
		});
		
		gridOrderButton = getWidgetFactory().createButton(
			displayGroup, GRID_LEVEL_LABEL, SWT.CHECK);
		gridOrderButton.addSelectionListener(new SelectionAdapter() {
	
			public void widgetSelected(SelectionEvent event) {
				// Set grid level workspace property				
				setWorkspaceProperty(WorkspaceViewerProperties.GRIDORDER, gridOrderButton.getSelection());
			}
		});
				
	}

	/**
	 * Creates group with line color and style controls
	 * @@param composite
	 */
	private void createGridlineGroup(Composite composite) {	

		gridlineGroup = getWidgetFactory().createGroup(composite, GRIDLINE_LABEL);		
		gridlineGroup.setLayout(new GridLayout(1, true));

		Composite sectionComposite3 = getWidgetFactory().createFlatFormComposite(gridlineGroup);
		createLineColorControl(sectionComposite3);

		Composite sectionComposite4 = getWidgetFactory().createFlatFormComposite(gridlineGroup);
		createLineStyleControl(sectionComposite4);
				
	}
	
	
	private void setWorkspaceProperty(String property, boolean setting) {
		getWorkspaceViewerProperties().setValue(property, setting);
	}
	
	private void setWorkspaceProperty(String property, int setting) {
		getWorkspaceViewerProperties().setValue(property, setting);
	}
	
	private void setWorkspaceProperty(String property, double setting) {
		getWorkspaceViewerProperties().setValue(property, setting);
	}

	private String getWorkspaceProperty(String property) {
		return getWorkspaceViewerProperties().getString(property);
	}

	private int getWorkspacePropertyInt(String property) {
		return getWorkspaceViewerProperties().getInt(property);
	}
	
	private boolean getBooleanWorkspaceProperty(String property) {
		return getWorkspaceViewerProperties().getBoolean(property);
	}

	private IPreferenceStore getWorkspaceViewerProperties() {
		return workspaceViewerProperties;
	}

	
	/**
	 * Listener for the workspace preference store.
	 */
	private class PropertyStoreListener implements IPropertyChangeListener {
		
		/* 
		 * (non-Javadoc)
		 * @@see org.eclipse.jface.util.IPropertyChangeListener#propertyChange(org.eclipse.jface.util.PropertyChangeEvent)
		 */
		public void propertyChange(org.eclipse.jface.util.PropertyChangeEvent event) {
			handleWorkspacePropertyChanged(event);			
		}
	}
	
	/**
	 * Handles workspace preoperty changes
	 * @@param event
	 */
	private void handleWorkspacePropertyChanged(PropertyChangeEvent event) {
		if (WorkspaceViewerProperties.VIEWGRID.equals(event.getProperty())) {		
			if (! gridVisibilityButton.isDisposed()) {
				gridVisibilityButton.setSelection(getEventBoolean(event));
			}
		} else if (WorkspaceViewerProperties.VIEWRULERS.equals(event.getProperty())) {			
			if (! rulerVisibilityButton.isDisposed()) {
				rulerVisibilityButton.setSelection(getEventBoolean(event));
			}
		} else if (WorkspaceViewerProperties.SNAPTOGRID.equals(event.getProperty())) {			
			if (! snapToGridButton.isDisposed()) {
				snapToGridButton.setSelection(getEventBoolean(event));
			}
		} else if (WorkspaceViewerProperties.GRIDORDER.equals(event.getProperty())) {
			if (! gridOrderButton.isDisposed()) {
				gridOrderButton.setSelection(getEventBoolean(event));
			}
		} else if (WorkspaceViewerProperties.GRIDSPACING.equals(event.getProperty())) {
			if (! textWidget.isDisposed()) {
				textWidget.setText(getEventString(event));
			}
		} else if (WorkspaceViewerProperties.RULERUNIT.equals(event.getProperty())) { 			
			if (! rulerUnitCombo.isDisposed()) {
				rulerUnitCombo.select(Integer.parseInt(getEventString(event)));
			}
		} else if (WorkspaceViewerProperties.GRIDLINESTYLE.equals(event.getProperty())) {
			if (! lineStyleCombo.isDisposed()) {
				lineStyleCombo.select(Integer.parseInt(getEventString(event))-1);
			}
		}		
	}
	
	private boolean getEventBoolean(PropertyChangeEvent event) {
		Boolean newValue = (Boolean) event.getNewValue();
		return newValue.booleanValue();
	}

	private String getEventString(PropertyChangeEvent event) {
		return event.getNewValue().toString();
	}

	
	/**
	 * Initializes the preferenceStore property change
	 * listener.
	 */
	private void initWorkspacePropertyListener() {
		DiagramEditor editor = (DiagramEditor) getPart();
		if (editor == null) return;
		DiagramGraphicalViewer viewer = (DiagramGraphicalViewer) editor.getDiagramGraphicalViewer();
		workspaceViewerProperties = viewer.getWorkspaceViewerPreferenceStore();
		workspaceViewerProperties.addPropertyChangeListener(propertyListener);
	}
	
	/**
	 * This method removes all listeners to the notational world (views, figures, editpart...etc)
	 * Override this method to remove notational listeners down the hierarchy
	 */
	private void removeWorkspacePropertyListener() {
		if (getWorkspaceViewerProperties() != null ) {
			getWorkspaceViewerProperties().removePropertyChangeListener(propertyListener);
			workspaceViewerProperties = null;
		}
		propertyListener = null;
	}
d51 733
@


1.5
log
@[112794] gmf_head etworkowska 060126 Adopt ICU4J as part of Eclipse 3.2
@
text
@d40 3
a42 3
import org.eclipse.wst.common.ui.properties.internal.provisional.AbstractPropertySection;
import org.eclipse.wst.common.ui.properties.internal.provisional.ITabbedPropertyConstants;
import org.eclipse.wst.common.ui.properties.internal.provisional.TabbedPropertySheetPage;
d121 1
a121 1
	 * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#createControls(org.eclipse.swt.widgets.Composite, org.eclipse.wst.common.ui.properties.internal.provisional.TabbedPropertySheetPage)
d475 1
a475 1
	 * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#setInput(org.eclipse.ui.IWorkbenchPart, org.eclipse.jface.viewers.ISelection)
d521 1
a521 1
	 * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#dispose()
@


1.4
log
@[123248] gmf_head tmacdoug 060117 Grid: Dot looks like Dash..
@
text
@a2 1
import java.text.NumberFormat;
d44 2
@


1.3
log
@[123325] gmf_head tmacdoug 060116 Restore defaults on Rulers & Grid Properties tab does not restore Snap to Grid
@
text
@d89 1
d189 2
a190 2
				if (wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINESTYLE) != SWT.LINE_DOT) {
					wsPrefStore.setValue(WorkspaceViewerProperties.GRIDLINESTYLE, SWT.LINE_DOT);			
d256 1
a256 1
				int style = lineStyleCombo.getSelectionIndex();
d516 1
a516 1
		return new String[]{SOLID_LABEL,DASH_LABEL,DOT_LABEL,DASH_DOT_LABEL,DASH_DOT_DOT_LABEL};
@


1.2
log
@Bugzilla 122767 gmf_head tmacdoug - Do not throw NullPointerException from RulerGridPropertySection
@
text
@d197 3
@


1.1
log
@Bugzilla 111902 gmf_head tmacdoug 051221 - Usability:  Some diagrams may be hard to see when the grid is visible [Grid Enhancements]
@
text
@d116 2
d178 2
d656 1
a656 3
		DiagramEditor editor = (DiagramEditor) getPart();
		DiagramGraphicalViewer viewer = (DiagramGraphicalViewer) editor.getDiagramGraphicalViewer();
		return viewer.getWorkspaceViewerPreferenceStore();
d725 5
a729 1
		getWorkspaceViewerProperties().addPropertyChangeListener(propertyListener);
d737 4
a740 1
		getWorkspaceViewerProperties().removePropertyChangeListener(propertyListener);
@

