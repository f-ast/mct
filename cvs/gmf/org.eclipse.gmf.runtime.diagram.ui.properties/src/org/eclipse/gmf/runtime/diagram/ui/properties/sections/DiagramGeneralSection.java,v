head	1.6;
access;
symbols
	v20081020-0700:1.6
	v20080813-1510:1.6
	v20080811-1546:1.6
	v20080722-1827:1.6
	v20080716-1600:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.6
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080603-1553:1.6
	v20080521:1.6
	v20080503-1740:1.6
	v20080425-1959:1.6
	v20080417-1610:1.6
	v20080409-1326:1.6
	v20080328-1605:1.6
	v20080222-1200:1.6
	v20080201-2010:1.6
	v20080118-1129:1.6
	v20080114-2222:1.6
	v20071222-1111:1.6
	v20071214-1111:1.6
	v20071207-1111:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070915-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.4
	R2_0:1.6
	R4_20:1.6
	RC3_20:1.6
	v20070608-1300:1.6
	v20070601-1400:1.6
	v20070518-1300:1.6
	bugzilla111892_group_support:1.6.0.2
	Root_bugzilla111892_group_support:1.6
	v20070405-2000:1.6
	v20070330-1300:1.6
	v20070208-1800:1.6
	v20070202-0200:1.5.2.1
	v20070111-0800:1.5.2.1
	M4_20:1.6
	v20061218-1500:1.5.2.1
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	v20061012-1100:1.5.2.1
	v20060919-0800:1.5.2.1
	M1_20:1.5
	v20060824-1600:1.5
	v20060803-1200:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051201-1800:1.4
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.6
date	2006.10.03.15.02.57;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.10.21.32.30;	author ahunter;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2005.11.25.19.38.18;	author cmahoney;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.24.46;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.48.37;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.51;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.09.13.16.43.23;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.properties.sections;

import java.util.ArrayList;
import java.util.Iterator;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n.DiagramUIPropertiesMessages;
import org.eclipse.gmf.runtime.notation.DescriptionStyle;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CLabel;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.views.properties.tabbed.ITabbedPropertyConstants;
import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;

/**
 * The general section displayed for diagrams in the properties view
 * 
 * @@author nbalaba
 */
public class DiagramGeneralSection
	extends AbstractBasicTextPropertySection {

	/** Name label for diagram general section. */
	protected static final String NAME_LABEL = DiagramUIPropertiesMessages.DiagramGeneralDetails_nameLabel_text;

	/** Type label. */
	protected static final String DIAGRAM_TYPE_LABEL = DiagramUIPropertiesMessages.DiagramGeneralDetails_diagramTypeLabel_text;

	/** Description label. */
	protected static final String DESCRIPTION_LABEL = DiagramUIPropertiesMessages.DiagramGeneralDetails_diagramDescriptionLabel_text;

	/**
	 * The labels used by the General Diagram section
	 */
	public static final String[] GENERAL_DIAGRAM_LABELS = {NAME_LABEL,
		DIAGRAM_TYPE_LABEL, DESCRIPTION_LABEL};

	/** Name label. */
	protected static final String NAME = DiagramUIPropertiesMessages.DiagramGeneralDetails_nameChangeCommand_text;

	/** Description label. */
	protected static final String DESCRIPTION = DiagramUIPropertiesMessages.DiagramGeneralDetails_diagramDescriptionChangeCommand_text;

	// commads
	private static final String NAME_PROPERTY_CHANGE_COMMAND_NAME = NAME
		+ VALUE_CHANGED_STRING;

	private static final String DESCRIPTION_PROPERTY_CHANGE_COMMAND_NAME = DESCRIPTION
		+ VALUE_CHANGED_STRING;

	/**
	 * The Type label field.
	 */
	private CLabel typeText;

	/**
	 * The description label field.
	 */
	private Text descriptionText;

	/**
	 * The Name text cached from the model.
	 */
	private String descriptionCache;

	/**
	 * User pressed Enter key after editing name field - update the model
	 */
	protected synchronized void setDescription() {

		final String newDescription = descriptionText.getText();
		if (!newDescription.equals(descriptionCache)) {
			ArrayList commands = new ArrayList();

			for (Iterator i = getEObjectList().iterator(); i.hasNext();) {
				final EObject next = (EObject) i.next();
				commands.add(createCommand(
					DESCRIPTION_PROPERTY_CHANGE_COMMAND_NAME, next,
					new Runnable() {

						public void run() {
							DescriptionStyle description = (DescriptionStyle) ((Diagram) next)
								.getStyle(NotationPackage.eINSTANCE
									.getDescriptionStyle());
							if (description != null)
								description.setDescription(newDescription);
						}
					}));
			}

			executeAsCompositeCommand(DESCRIPTION_PROPERTY_CHANGE_COMMAND_NAME,
				commands);

			descriptionCache = newDescription;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.ui.views.properties.tabbed.ISection#dispose()
	 */
	public void dispose() {
		getListener().stopListeningTo(descriptionText);
		super.dispose();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractBasicTextPropertySection#refreshUI()
	 */
	protected void refreshUI() {
		super.refreshUI();

		Diagram diagram = (Diagram) getEObject();

		typeText.setText(getDiagramType(diagram));

		DescriptionStyle description = (DescriptionStyle) diagram
			.getStyle(NotationPackage.eINSTANCE.getDescriptionStyle());

		if (description != null)
			descriptionText.setText(description.getDescription());

	}

	/**
	 * Gets the string to be displayed in the diagram type field.
	 * @@param diagram the diagram in question
	 * @@return the string to be displayed
	 */
	protected String getDiagramType(Diagram diagram) {
		return diagram.getType();
	}

	/**
	 * Enforce the correct type selection - we are only intersted in Diagram
	 * objects
	 * 
	 */
	protected EObject unwrap(Object object) {

		EObject o = super.unwrap(object);
		if (o instanceof Diagram)
			return o;

		return null;
	}

	/**
	 * Adapt the object to an EObject - if possible
	 * 
	 * @@param object
	 *            object from a diagram or ME
	 * @@return EObject
	 */
	protected EObject adapt(Object object) {
		if (object instanceof IAdaptable) {
			if (object instanceof IGraphicalEditPart)// diagram case
				return (EObject) ((IAdaptable) object).getAdapter(View.class);
			// ME case
			return (EObject) ((IAdaptable) object).getAdapter(EObject.class);

		}

		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractModelerPropertySection#isCurrentSelection(org.eclipse.emf.common.notify.Notification,
	 *      org.eclipse.emf.ecore.EObject)
	 */
	protected boolean isCurrentSelection(Notification notification,
			EObject element) {
		if (getEObjectList().size() > 0) {
			EObject eventObject = element;

			// check for annotations
			if (element instanceof EAnnotation || element instanceof Diagram) {
				eventObject = element.eContainer();
			}

			if (eventObject == null) {
				// the annotation has been removed - check the old owner
				Object tmpObj = notification.getOldValue();
				if (tmpObj != null && tmpObj instanceof EObject) {
					eventObject = (EObject) tmpObj;
				} else {
					return false;
				}
			}

			return getEObjectList().contains(eventObject);

		}
		return false;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractBasicTextPropertySection#getPropertyNameLabel()
	 */
	protected String getPropertyNameLabel() {
		return NAME_LABEL;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractBasicTextPropertySection#setPropertyValue(org.eclipse.swt.widgets.Control)
	 */
	protected void setPropertyValue(Control control) {
		if (control == getTextWidget())
			super.setPropertyValue(control);
		else
			setDescription();

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractBasicTextPropertySection#setPropertyValue(org.eclipse.emf.ecore.EObject,
	 *      java.lang.String)
	 */
	protected void setPropertyValue(EObject object, Object value) {
		((Diagram) object).setName((String) value);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractBasicTextPropertySection#getPropertyValueString()
	 */
	protected String getPropertyValueString() {
		return ((Diagram) getEObject()).getName();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractBasicTextPropertySection#getPropertyChangeCommandName()
	 */
	protected String getPropertyChangeCommandName() {
		return NAME_PROPERTY_CHANGE_COMMAND_NAME;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.properties.sections.AbstractBasicTextPropertySection#getPropertyNameStringsArray()
	 */
	protected String[] getPropertyNameStringsArray() {
		return GENERAL_DIAGRAM_LABELS;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.properties.ISection#createControls(org.eclipse.swt.widgets.Composite,
	 *      org.eclipse.gmf.runtime.common.ui.properties.TabbedPropertySheetPage)
	 */
	public void doCreateControls(Composite parent,
			TabbedPropertySheetPage aTabbedPropertySheetPage) {
		super.doCreateControls(parent, aTabbedPropertySheetPage);

		FormData data;

		typeText = getWidgetFactory().createCLabel(getSectionComposite(),
			StringStatics.BLANK);
		data = new FormData();
		data.left = new FormAttachment(getTextWidget(), 0, SWT.LEFT);
		data.right = new FormAttachment(getTextWidget(), 0, SWT.RIGHT);
		data.top = new FormAttachment(getTextWidget(),
			ITabbedPropertyConstants.VSPACE, SWT.BOTTOM);
		typeText.setLayoutData(data);

		CLabel typeLabel = getWidgetFactory().createCLabel(
			getSectionComposite(), DIAGRAM_TYPE_LABEL);
		data = new FormData();
		data.left = new FormAttachment(0, 0);
		data.right = new FormAttachment(typeText,
			-ITabbedPropertyConstants.HSPACE);
		data.top = new FormAttachment(typeText, 0, SWT.CENTER);
		typeLabel.setLayoutData(data);

		descriptionText = getWidgetFactory().createText(getSectionComposite(),
			StringStatics.BLANK,
			SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.WRAP);
		data = new FormData();
		data.left = new FormAttachment(typeText, 0, SWT.LEFT);
		data.right = new FormAttachment(typeText, 0, SWT.RIGHT);
		data.top = new FormAttachment(typeText,
			ITabbedPropertyConstants.VSPACE, SWT.BOTTOM);
		data.bottom = new FormAttachment(100, 0);
		data.height = 100;
		data.width = 100;
		descriptionText.setLayoutData(data);

		CLabel descriptionLabel = getWidgetFactory().createCLabel(
			getSectionComposite(), DESCRIPTION_LABEL);
		data = new FormData();
		data.left = new FormAttachment(0, 0);
		data.right = new FormAttachment(descriptionText,
			-ITabbedPropertyConstants.HSPACE);
		data.top = new FormAttachment(typeText, 0, SWT.LEFT);

		descriptionLabel.setLayoutData(data);

		getListener().startListeningTo(descriptionText);
		getListener().startListeningForEnter(descriptionText);

		if (isReadOnly())
			descriptionText.setEditable(false);

	}
}@


1.5
log
@gmf_head ahunter 060210 Migrate GMF usage of tabbed properties view from WTP to Eclipse Core (org.eclipse.wst.common.ui.properties to org.eclipse.ui.views.properties.tabbed)
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2005 IBM Corporation and others.
@


1.5.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.4
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d35 2
a36 2
import org.eclipse.wst.common.ui.properties.internal.provisional.ITabbedPropertyConstants;
import org.eclipse.wst.common.ui.properties.internal.provisional.TabbedPropertySheetPage;
d124 1
a124 1
	 * @@see org.eclipse.wst.common.ui.properties.internal.provisional.ISection#dispose()
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d21 7
a37 8
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.properties.internal.l10n.ResourceManager;
import org.eclipse.gmf.runtime.notation.DescriptionStyle;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

d47 1
a47 2
	protected static final String NAME_LABEL = ResourceManager
		.getI18NString("DiagramGeneralDetails.nameLabel.text"); //$NON-NLS-1$
d50 1
a50 2
	protected static final String DIAGRAM_TYPE_LABEL = ResourceManager
		.getI18NString("DiagramGeneralDetails.diagramTypeLabel.text"); //$NON-NLS-1$
d53 1
a53 2
	protected static final String DESCRIPTION_LABEL = ResourceManager
		.getI18NString("DiagramGeneralDetails.diagramDescriptionLabel.text"); //$NON-NLS-1$
d62 1
a62 2
	protected static final String NAME = ResourceManager
		.getI18NString("DiagramGeneralDetails.nameChangeCommand.text"); //$NON-NLS-1$
d65 1
a65 2
	protected static final String DESCRIPTION = ResourceManager
		.getI18NString("DiagramGeneralDetails.diagramDescriptionChangeCommand.text"); //$NON-NLS-1$
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d32 4
a35 4
import com.ibm.xtools.notation.DescriptionStyle;
import com.ibm.xtools.notation.Diagram;
import com.ibm.xtools.notation.NotationPackage;
import com.ibm.xtools.notation.View;
@

