head	1.2;
access;
symbols
	v20081020-0700:1.2
	v20081015-1925:1.2
	v20081015-1755:1.2
	v20081008-1925:1.2
	v20081008-1755:1.2
	v20080903-1520:1.2
	v20080903-1510:1.2
	v20080807-1333:1.2
	v20080807-1325:1.2
	v20080731-1520:1.2
	v20080725-1738:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080425-1959:1.2
	v20080328-1605:1.2
	v20080222-1200:1.2
	v20080107-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070915-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	bugzilla111892_group_support:1.2.0.2
	Root_bugzilla111892_group_support:1.2
	v20070420-1000:1.2
	v20070405-2000:1.2
	v20070330-1300:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061027-1200:1.1.2.2
	v20061013-1330:1.2
	v20060919-0800:1.1.2.2
	v20060907-1100:1.1.2.2
	v20060831-1500:1.1.2.2
	v20060817-1500:1.1.2.2
	v20060810-1700:1.1.2.1
	v20060803-1200:1.1.2.1
	v20060728-0500:1.1.2.1
	R1_0_maintenance:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2006.10.03.15.01.44;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.26.21.44.38;	author mmostafa;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.07.26.21.44.38;	author mmostafa;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.08.15.15.31.25;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2006, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.core.internal.commands;

import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.diagram.core.internal.DiagramPlugin;
import org.eclipse.gmf.runtime.diagram.core.internal.l10n.DiagramCoreMessages;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@author Yasser Lulu
 * 
 */
public class PersistViewsCommand
    extends AbstractTransactionalCommand {

    private List views;

    /**
     * @@param editingDomain
     *            the editing domain through which model changes are made
     * @@param view
     */
    public PersistViewsCommand(TransactionalEditingDomain editingDomain,
            List views) {
        super(editingDomain, DiagramCoreMessages.AddCommand_Label, null);
        this.views = views;
    }

    /**
     * Creates a new instance.
     * 
     * @@param domain
     * @@param label
     * @@param options
     * @@param affectedFiles
     */
    public PersistViewsCommand(TransactionalEditingDomain editingDomain,
            List views, Map options) {
        super(editingDomain, DiagramCoreMessages.AddCommand_Label, options,
            null);
        this.views = views;
    }

    /**
     * persisted the views, by moving them from the transient Feature
	 * to the persisted feature. This command supports persisteing Views or  Edges
     * @@return the persisted views.
     */
    protected CommandResult doExecuteWithResult(
            IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {
        try {
            Iterator it = views.iterator();
            while (it.hasNext()) {
                View view = (View) it.next();
                EObject container = view.eContainer();
                if (view instanceof Edge) {
                    Diagram diagram = (Diagram) container;
                    diagram.persistEdges();
                } else if (container instanceof View) {
                    ((View) container).persistChildren();
                }
            }
            return CommandResult.newOKCommandResult(views);
        } catch (Exception e) {
            Log.error(DiagramPlugin.getInstance(), IStatus.ERROR, e
                .getMessage(), e);
            return CommandResult.newErrorCommandResult(e.getMessage());
        }
    }
}
@


1.1
log
@file PersistViewsCommand.java was initially added on branch R1_0_maintenance.
@
text
@d1 95
@


1.1.2.1
log
@[150317] gmf_R1_0_maintenace ylulu 060726  DiagramEventBroker performance could be enhanced
@
text
@a0 93
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2006.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
package org.eclipse.gmf.runtime.diagram.core.internal.commands;

import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.diagram.core.internal.DiagramPlugin;
import org.eclipse.gmf.runtime.diagram.core.internal.l10n.DiagramCoreMessages;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@author Yasser Lulu
 * 
 */
public class PersistViewsCommand
    extends AbstractTransactionalCommand {

    private List views;

    /**
     * @@param editingDomain
     *            the editing domain through which model changes are made
     * @@param view
     */
    public PersistViewsCommand(TransactionalEditingDomain editingDomain,
            List views) {
        super(editingDomain, DiagramCoreMessages.AddCommand_Label, null);
        this.views = views;
    }

    /**
     * Creates a new instance.
     * 
     * @@param domain
     * @@param label
     * @@param options
     * @@param affectedFiles
     */
    public PersistViewsCommand(TransactionalEditingDomain editingDomain,
            List views, Map options) {
        super(editingDomain, DiagramCoreMessages.AddCommand_Label, options,
            null);
        this.views = views;
    }

    /**
     * persisted the views, by moving them from the transient Feature
	 * to the persisted feature. This command supports persisteing Views or  Edges
     * @@return the persisted views.
     */
    protected CommandResult doExecuteWithResult(
            IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {
        try {
            Iterator it = views.iterator();
            while (it.hasNext()) {
                View view = (View) it.next();
                EObject container = view.eContainer();
                if (view instanceof Edge) {
                    Diagram diagram = (Diagram) container;
                    diagram.persistEdges();
                } else if (container instanceof View) {
                    ((View) container).persistChildren();
                }
            }
            return CommandResult.newOKCommandResult(views);
        } catch (Exception e) {
            Log.error(DiagramPlugin.getInstance(), IStatus.ERROR, e
                .getMessage(), e);
            return CommandResult.newErrorCommandResult(e.getMessage());
        }
    }
}
@


1.1.2.2
log
@[153899] gmf_R1_0_maintenance aboyko 060815 Bad Header in two files
@
text
@d1 9
a9 11
/******************************************************************************
 * Copyright (c) 2006, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

@


