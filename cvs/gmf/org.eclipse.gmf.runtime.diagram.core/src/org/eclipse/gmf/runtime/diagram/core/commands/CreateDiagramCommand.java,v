head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20081015-1925:1.7
	v20081015-1755:1.7
	v20081008-1925:1.7
	v20081008-1755:1.7
	v20080903-1520:1.7
	v20080903-1510:1.7
	v20080807-1333:1.7
	v20080807-1325:1.7
	v20080731-1520:1.7
	v20080725-1738:1.7
	v20080722-1827:1.7
	R2_1_maintenance:1.7.0.6
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080425-1959:1.7
	v20080328-1605:1.7
	v20080222-1200:1.7
	v20080107-1111:1.7
	v20071214-1111:1.7
	v20071130-1111:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070915-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.4
	R2_0:1.7
	R4_20:1.7
	RC3_20:1.7
	v20070601-1400:1.7
	v20070518-1300:1.7
	bugzilla111892_group_support:1.7.0.2
	Root_bugzilla111892_group_support:1.7
	v20070420-1000:1.7
	v20070405-2000:1.7
	v20070330-1300:1.7
	v20070208-1800:1.7
	M4_20:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061027-1200:1.6.2.1
	v20061013-1330:1.7
	v20060919-0800:1.6.2.1
	v20060907-1100:1.6.2.1
	M1_20:1.6
	v20060831-1500:1.6.2.1
	v20060817-1500:1.6.2.1
	v20060810-1700:1.6.2.1
	v20060803-1200:1.6.2.1
	v20060728-0500:1.6.2.1
	v20060721-1130:1.6.2.1
	v20060713-1700:1.6.2.1
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060519-0800:1.6
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4;
locks; strict;
comment	@# @;


1.7
date	2006.10.03.15.01.44;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.13.19.12.29;	author ldamus;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2005.12.20.16.49.30;	author mmostafa;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.12.21.24.26;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.15.48.40;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.48.50;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.47;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.07.13.17.39.42;	author mmostafa;	state Exp;
branches;
next	;


desc
@@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.core.commands;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.diagram.core.internal.DiagramPlugin;
import org.eclipse.gmf.runtime.diagram.core.internal.DiagramStatusCodes;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.core.services.ViewService;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.notation.Diagram;

/**
 * Creates a diagram
 *
 * @@author schafe
 */
public class CreateDiagramCommand
	extends AbstractTransactionalCommand {

	private final String _diagramType;

	private EObject _semanticContext;
	
	private PreferencesHint _preferencesHint;

	/**
	 * creates a create diagram command.
     * @@param editingDomain
     *            the editing domain through which model changes are made
	 * @@param label command label
	 * @@param anElementContext semantic element to contain the diagram
	 * @@param aDiagramKindType diagram type ID
	 * @@param preferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 */
	public CreateDiagramCommand(TransactionalEditingDomain editingDomain, String label, EObject anElementContext,
		String aDiagramKindType, PreferencesHint preferencesHint) {
		super(editingDomain, label, null);
		assert null != anElementContext: "Null element context in CreateDiagramCommand";//$NON-NLS-1$		
		_semanticContext = anElementContext;
		_diagramType = aDiagramKindType;
		_preferencesHint = preferencesHint;
	}

	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info)
	    throws ExecutionException {

		// Create the new diagram element
		//IElementCollection contents = getOwnedDiagramCollection(createOwningElement(progressMonitor));
		Diagram diagram = ViewService.getInstance().createDiagram(
			new EObjectAdapter(getSemanticContext()), getDiagramType(), getPreferencesHint());
        int severity = IStatus.OK;
        if (diagram==null)
            severity = IStatus.ERROR;
		return new CommandResult(new Status(severity, getPluginId(),
			DiagramStatusCodes.OK, StringStatics.BLANK, null), diagram);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand2#getPluginId()
	 */
	protected String getPluginId() {
		return DiagramPlugin.getPluginId();
	}

	/**
	 * gives access to the diagram type.
	 * @@return DiagramKind diagramType
	 */
	protected String getDiagramType() {
		return _diagramType;
	}

	/**
	 * gives access to the semantic context
	 * @@return the semantic context
	 */
	protected EObject getSemanticContext() {
		return _semanticContext;

	}

	/**
	 * Gets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry <@@link DiagramPreferencesRegistry>.
	 * 
	 * @@return the preferences hint
	 */
	protected PreferencesHint getPreferencesHint() {
		return _preferencesHint;

	}
}@


1.6
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d74 4
a77 2

		return new CommandResult(new Status(IStatus.OK, getPluginId(),
@


1.6.2.1
log
@ [129345] gmf_R1_0_maintenance mmostafa  060713 CreateDiagramCommand#doeExecute() does not report errors
@
text
@d74 2
a75 4
        int severity = IStatus.OK;
        if (diagram==null)
            severity = IStatus.ERROR;
		return new CommandResult(new Status(severity, getPluginId(),
@


1.5
log
@bugzilla 115826 gmf-head mmostafa 051220 ViewService should be public
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d14 2
d20 1
a20 1

d22 1
d27 1
a27 1
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;
d37 1
a37 1
	extends AbstractModelCommand {
d47 2
d58 1
a58 1
	public CreateDiagramCommand(String label, EObject anElementContext,
d60 1
a60 1
		super(label, null);
d67 2
a68 4
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doExecute(org.eclipse.core.runtime.IProgressMonitor)
	 */
	protected CommandResult doExecute(IProgressMonitor progressMonitor) {
d76 1
a76 1
			DiagramStatusCodes.OK, EMPTY_STRING, null), diagram);
d80 1
a80 1
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#getPluginId()
@


1.4
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a21 1
import org.eclipse.gmf.runtime.diagram.core.internal.services.view.ViewService;
d23 1
@


1.3
log
@Bugzilla109092 : rmp_head mmostafa 050912 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d27 1
a27 1
 * abstract command that creates a diagram by calling the view service
d67 1
a67 1
		Diagram diagram = ViewService.getInstance().createDiagramView(
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d24 1
a24 1
import com.ibm.xtools.notation.Diagram;
@

