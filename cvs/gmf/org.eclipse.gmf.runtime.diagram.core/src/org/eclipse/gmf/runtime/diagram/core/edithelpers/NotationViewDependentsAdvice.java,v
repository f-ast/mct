head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20081015-1925:1.4
	v20081015-1755:1.4
	v20081008-1925:1.4
	v20081008-1755:1.4
	v20080903-1520:1.4
	v20080903-1510:1.4
	v20080807-1333:1.4
	v20080807-1325:1.4
	v20080731-1520:1.4
	v20080725-1738:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20080328-1605:1.4
	v20080222-1200:1.4
	v20080107-1111:1.4
	v20071214-1111:1.4
	v20071130-1111:1.4
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070915-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	bugzilla111892_group_support:1.3.0.2
	Root_bugzilla111892_group_support:1.3
	v20070420-1000:1.3
	v20070405-2000:1.3
	v20070330-1300:1.3
	v20070208-1800:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061027-1200:1.2.2.1
	v20061013-1330:1.3
	v20060919-0800:1.2.2.1
	v20060907-1100:1.2.2.1
	M1_20:1.2
	v20060831-1500:1.2.2.1
	v20060817-1500:1.2
	v20060810-1700:1.2
	v20060803-1200:1.2
	v20060728-0500:1.2
	v20060721-1130:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1;
locks; strict;
comment	@# @;


1.4
date	2007.11.21.17.57.30;	author crevells;	state Exp;
branches;
next	1.3;
commitid	4a59474471894567;

1.3
date	2006.10.03.15.01.44;	author ahunter;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2006.04.12.21.10.34;	author cmahoney;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.03.07.02.40.37;	author ldamus;	state Exp;
branches;
next	;

1.2.2.1
date	2006.08.28.20.36.13;	author ldamus;	state Exp;
branches;
next	;

1.3.2.1
date	2007.05.18.17.36.35;	author crevells;	state Exp;
branches;
next	;
commitid	1815464de4234567;


desc
@@


1.4
log
@[111892] gmf_head crevells 071121 Group/Ungroup support
@
text
@/******************************************************************************
 * Copyright (c) 2006, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.core.edithelpers;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature.Setting;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.diagram.core.commands.UngroupCommand;
import org.eclipse.gmf.runtime.diagram.core.commands.UpdateGroupLocationCommand;
import org.eclipse.gmf.runtime.diagram.core.util.ViewType;
import org.eclipse.gmf.runtime.emf.core.util.CrossReferenceAdapter;
import org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelperAdvice;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyDependentsRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Edit helper advice for the {@@link DestroyDependentsRequest} that destroys
 * notations views under the following circumstances:
 * <ul>
 *   <li>element being destroyed is the view's semantic referent</li>
 *   <li>element being destroyed is a Node or Edge to which an Edge is connected</li>
 * </ul>
 *
 * @@author Christian W. Damus (cdamus)
 */
public class NotationViewDependentsAdvice extends AbstractEditHelperAdvice {

	public ICommand getBeforeEditCommand(IEditCommandRequest request) {
		if (request instanceof DestroyDependentsRequest) {
			return getBeforeDestroyDependentsCommand((DestroyDependentsRequest) request);
		}
		return null;
	}
	
	public ICommand getAfterEditCommand(IEditCommandRequest request) {		
		return null;
	}
	
	protected ICommand getBeforeDestroyDependentsCommand(
			DestroyDependentsRequest request) {
		
		EObject destructee = request.getElementToDestroy();
		CrossReferenceAdapter crossReferenceAdapter = getCrossReferenceAdapter(request, destructee);
		ICommand result = getDestroyDependentsCommand(destructee, request,
				NotationPackage.Literals.VIEW__ELEMENT, crossReferenceAdapter);
		// handle the node entries for views
		if (destructee instanceof View) {
			result = CompositeCommand.compose(result, getDestroyDependentsCommand(destructee, request,
				NotationPackage.Literals.NODE_ENTRY__KEY, crossReferenceAdapter));

			//  handle the edges connected to nodes or other edges        
			if (destructee instanceof Node || destructee instanceof Edge) {
				View view = (View) destructee;

				if (view.eIsSet(NotationPackage.Literals.VIEW__SOURCE_EDGES)) {
					result = CompositeCommand.compose(result, request
						.getDestroyDependentsCommand(view.getSourceEdges()));
				}
				if (view.eIsSet(NotationPackage.Literals.VIEW__TARGET_EDGES)) {
					result = CompositeCommand.compose(result, request
						.getDestroyDependentsCommand(view.getTargetEdges()));
				}
			}			
		}
		
		// handle deletion of groups
        if (destructee instanceof Node) {
            EObject parent = ((Node) destructee).eContainer();
            if (parent instanceof Node
                && ViewType.GROUP.equals(((Node) parent).getType())) {
                if (((Node) parent).getChildren().size() == 2) {
                    // There will only be one child of the group left after this
                    // child is destroyed, so remove the group as well.
                    result = CompositeCommand.compose(result,
                        new UngroupCommand(request.getEditingDomain(),
                            (Node) parent));
                } else {
                    // The remaining group's location may require changing after
                    // the deletion.
                    result = CompositeCommand.compose(result,
                        new UpdateGroupLocationCommand(request
                            .getEditingDomain(), (Node) parent));
                }
            }
        }
        
		return result;
	}
	
	private CrossReferenceAdapter getCrossReferenceAdapter(
			DestroyDependentsRequest request, EObject destructee) {
		
		CrossReferenceAdapter crossReferenceAdapter = null;
		Map cacheMaps = (Map) request.getParameter("Cache_Maps");//$NON-NLS-1$ RequestCacheEntries.Cache_Maps
		if (cacheMaps != null) {
			crossReferenceAdapter = (CrossReferenceAdapter) cacheMaps
					.get("CrossRefAdapter");//$NON-NLS-1$ RequestCacheEntries.CrossRefAdapter
		}

		if (crossReferenceAdapter == null) {
			crossReferenceAdapter = CrossReferenceAdapter
					.getExistingCrossReferenceAdapter(destructee);
			if (crossReferenceAdapter == null) {
				TransactionalEditingDomain domain = TransactionUtil
						.getEditingDomain(destructee);
				if (domain != null) {
					crossReferenceAdapter = CrossReferenceAdapter
							.getCrossReferenceAdapter(domain.getResourceSet());
				}
			}
		}
		return crossReferenceAdapter;
	}
	
	
	private ICommand getDestroyDependentsCommand(EObject destructee,
			DestroyDependentsRequest request, EReference eRef, CrossReferenceAdapter crossReferenceAdapter) {
		
		if (crossReferenceAdapter != null) {
			Collection revRefs = crossReferenceAdapter
				.getNonNavigableInverseReferences(destructee);
			if (revRefs.isEmpty() == false) {
				Set set = null;
				Iterator it = revRefs.iterator();
				while (it.hasNext()) {
					Setting setting = (Setting) it.next();
					if (setting.getEStructuralFeature() == eRef) {
						if (set == null) {
							set = new HashSet();
						}
						set.add(setting.getEObject());
					}
				}

				if (set != null) {
					return request.getDestroyDependentsCommand(set);
				}
			}
		}

		return null;
	}
}
@


1.3
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2006 IBM Corporation and others.
d27 3
d88 22
@


1.3.2.1
log
@[111892] gmf_head crevells 070518 First milestone of group/ungroup support (painting issues when grouping shapes with border items)
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2007 IBM Corporation and others.
a26 3
import org.eclipse.gmf.runtime.diagram.core.commands.UngroupCommand;
import org.eclipse.gmf.runtime.diagram.core.internal.commands.AdjustGroupLocationCommand;
import org.eclipse.gmf.runtime.diagram.core.util.ViewType;
d40 2
a41 2
 * <li>element being destroyed is the view's semantic referent</li>
 * <li>element being destroyed is a Node or Edge to which an Edge is connected</li>
d43 1
a43 1
 * 
d48 15
a62 15
    public ICommand getBeforeEditCommand(IEditCommandRequest request) {
        if (request instanceof DestroyDependentsRequest) {
            return getBeforeDestroyDependentsCommand((DestroyDependentsRequest) request);
        }
        return null;
    }

    public ICommand getAfterEditCommand(IEditCommandRequest request) {
        return null;
    }

    protected ICommand getBeforeDestroyDependentsCommand(
            DestroyDependentsRequest request) {

        EObject destructee = request.getElementToDestroy();
d64 4
a67 4
        ICommand result = getDestroyDependentsCommand(destructee, request,
            NotationPackage.Literals.VIEW__ELEMENT, crossReferenceAdapter);
        // handle the node entries for views
        if (destructee instanceof View) {
d71 44
a114 65
            // handle the edges connected to nodes or other edges
            if (destructee instanceof Node || destructee instanceof Edge) {
                View view = (View) destructee;

                if (view.eIsSet(NotationPackage.Literals.VIEW__SOURCE_EDGES)) {
                    result = CompositeCommand.compose(result, request
                        .getDestroyDependentsCommand(view.getSourceEdges()));
                }
                if (view.eIsSet(NotationPackage.Literals.VIEW__TARGET_EDGES)) {
                    result = CompositeCommand.compose(result, request
                        .getDestroyDependentsCommand(view.getTargetEdges()));
                }
            }
        }

        // handle deletion of groups
        if (destructee instanceof Node) {
            EObject parent = ((Node) destructee).eContainer();
            if (parent instanceof Node
                && ViewType.GROUP.equals(((Node) parent).getType())) {
                if (((Node) parent).getChildren().size() == 2) {
                    // There will only be one child of the group left after this
                    // child is destroyed, so remove the group as well.
                    result = CompositeCommand.compose(result,
                        new UngroupCommand(request.getEditingDomain(),
                            (Node) parent));
                } else {
                    // The remaining group's location may require changing after
                    // the deletion.
                    result = CompositeCommand.compose(result,
                        new AdjustGroupLocationCommand(request
                            .getEditingDomain(), (Node) parent));
                }
            }
        }

        return result;
    }

    private CrossReferenceAdapter getCrossReferenceAdapter(
            DestroyDependentsRequest request, EObject destructee) {

        CrossReferenceAdapter crossReferenceAdapter = null;
        Map cacheMaps = (Map) request.getParameter("Cache_Maps");//$NON-NLS-1$ RequestCacheEntries.Cache_Maps
        if (cacheMaps != null) {
            crossReferenceAdapter = (CrossReferenceAdapter) cacheMaps
                .get("CrossRefAdapter");//$NON-NLS-1$ RequestCacheEntries.CrossRefAdapter
        }

        if (crossReferenceAdapter == null) {
            crossReferenceAdapter = CrossReferenceAdapter
                .getExistingCrossReferenceAdapter(destructee);
            if (crossReferenceAdapter == null) {
                TransactionalEditingDomain domain = TransactionUtil
                    .getEditingDomain(destructee);
                if (domain != null) {
                    crossReferenceAdapter = CrossReferenceAdapter
                        .getCrossReferenceAdapter(domain.getResourceSet());
                }
            }
        }
        return crossReferenceAdapter;
    }

    private ICommand getDestroyDependentsCommand(EObject destructee,
d116 22
d139 2
a140 26
        if (crossReferenceAdapter != null) {
            Collection revRefs = crossReferenceAdapter
                .getNonNavigableInverseReferences(destructee);
            if (revRefs.isEmpty() == false) {
                Set set = null;
                Iterator it = revRefs.iterator();
                while (it.hasNext()) {
                    Setting setting = (Setting) it.next();
                    if (setting.getEStructuralFeature() == eRef) {
                        if (set == null) {
                            set = new HashSet();
                        }
                        set.add(setting.getEObject());
                    }
                }

                if (set != null) {
                    return request.getDestroyDependentsCommand(set);
                }
            }
        }

        return null;
    }

    
@


1.2
log
@Bugzilla#136191 gmf_head cmahoney 060412 When a connection is deleted, any connected connections are not deleted
@
text
@d15 4
d22 3
d27 1
a27 1
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
d30 1
d47 15
a61 1
	protected ICommand getBeforeDestroyDependentsCommand(DestroyDependentsRequest request) {
d63 75
a137 1
		ICommand result = null;
d139 1
a139 37
		// handle views referencing a semantic element being destroyed
		
        Collection semanticReferencers = EMFCoreUtil.getReferencers(
                destructee,
                new EReference[] {NotationPackage.Literals.VIEW__ELEMENT});

        result = CompositeCommand.compose(
        		result,
        		request.getDestroyDependentsCommand(semanticReferencers));

        // handle the node entries for views
        
        if (destructee instanceof View) {
            Collection nodeEntryKeys = EMFCoreUtil.getReferencers(
            		destructee,
            		new EReference[] {NotationPackage.Literals.NODE_ENTRY__KEY});

            result = CompositeCommand.compose(
            		result,
            		request.getDestroyDependentsCommand(nodeEntryKeys));
        }
        
        // handle the edges connected to nodes or other edges
        
        if (destructee instanceof Node || destructee instanceof Edge) {
        	View view = (View) destructee;
        	
            result = CompositeCommand.compose(
            		result,
            		request.getDestroyDependentsCommand(view.getSourceEdges()));
        	
            result = CompositeCommand.compose(
            		result,
            		request.getDestroyDependentsCommand(view.getTargetEdges()));
        }
        
 		return result;
@


1.2.2.1
log
@[155233] gmf_R1_0_maintenance ylulu 060828 Deleting and element using the EditHelpers could be enhanced
@
text
@a14 4
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
a17 3
import org.eclipse.emf.ecore.EStructuralFeature.Setting;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
d20 1
a20 1
import org.eclipse.gmf.runtime.emf.core.util.CrossReferenceAdapter;
a22 1
import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;
d39 3
d43 1
a43 13
	public ICommand getBeforeEditCommand(IEditCommandRequest request) {
		if (request instanceof DestroyDependentsRequest) {
			return getBeforeDestroyDependentsCommand((DestroyDependentsRequest) request);
		}
		return null;
	}
	
	public ICommand getAfterEditCommand(IEditCommandRequest request) {		
		return null;
	}
	
	protected ICommand getBeforeDestroyDependentsCommand(
			DestroyDependentsRequest request) {
d45 35
a79 78
		EObject destructee = request.getElementToDestroy();
		CrossReferenceAdapter crossReferenceAdapter = getCrossReferenceAdapter(request, destructee);
		ICommand result = getDestroyDependentsCommand(destructee, request,
				NotationPackage.Literals.VIEW__ELEMENT, crossReferenceAdapter);
		// handle the node entries for views
		if (destructee instanceof View) {
			result = CompositeCommand.compose(result, getDestroyDependentsCommand(destructee, request,
				NotationPackage.Literals.NODE_ENTRY__KEY, crossReferenceAdapter));

			//  handle the edges connected to nodes or other edges        
			if (destructee instanceof Node || destructee instanceof Edge) {
				View view = (View) destructee;

				if (view.eIsSet(NotationPackage.Literals.VIEW__SOURCE_EDGES)) {
					result = CompositeCommand.compose(result, request
						.getDestroyDependentsCommand(view.getSourceEdges()));
				}
				if (view.eIsSet(NotationPackage.Literals.VIEW__TARGET_EDGES)) {
					result = CompositeCommand.compose(result, request
						.getDestroyDependentsCommand(view.getTargetEdges()));
				}
			}			
		}
		return result;
	}
	
	private CrossReferenceAdapter getCrossReferenceAdapter(
			DestroyDependentsRequest request, EObject destructee) {
		
		CrossReferenceAdapter crossReferenceAdapter = null;
		Map cacheMaps = (Map) request.getParameter("Cache_Maps");//$NON-NLS-1$ RequestCacheEntries.Cache_Maps
		if (cacheMaps != null) {
			crossReferenceAdapter = (CrossReferenceAdapter) cacheMaps
					.get("CrossRefAdapter");//$NON-NLS-1$ RequestCacheEntries.CrossRefAdapter
		}

		if (crossReferenceAdapter == null) {
			crossReferenceAdapter = CrossReferenceAdapter
					.getExistingCrossReferenceAdapter(destructee);
			if (crossReferenceAdapter == null) {
				TransactionalEditingDomain domain = TransactionUtil
						.getEditingDomain(destructee);
				if (domain != null) {
					crossReferenceAdapter = CrossReferenceAdapter
							.getCrossReferenceAdapter(domain.getResourceSet());
				}
			}
		}
		return crossReferenceAdapter;
	}
	
	
	private ICommand getDestroyDependentsCommand(EObject destructee,
			DestroyDependentsRequest request, EReference eRef, CrossReferenceAdapter crossReferenceAdapter) {
		
		if (crossReferenceAdapter != null) {
			Collection revRefs = crossReferenceAdapter
				.getNonNavigableInverseReferences(destructee);
			if (revRefs.isEmpty() == false) {
				Set set = null;
				Iterator it = revRefs.iterator();
				while (it.hasNext()) {
					Setting setting = (Setting) it.next();
					if (setting.getEStructuralFeature() == eRef) {
						if (set == null) {
							set = new HashSet();
						}
						set.add(setting.getEObject());
					}
				}

				if (set != null) {
					return request.getDestroyDependentsCommand(set);
				}
			}
		}

		return null;
@


1.1
log
@[129773] gmf_head cdamus 060306 EMFCoreUtil.destroy() cannot destroy non-contained dependents
@
text
@d23 1
d33 1
a33 1
 *   <li>element being destroyed is a Node to which an Edge is connected</li>
d65 1
a65 1
        // handle the edges connected to nodes
d67 2
a68 2
        if (destructee instanceof Node) {
        	Node node = (Node) destructee;
d72 1
a72 1
            		request.getDestroyDependentsCommand(node.getSourceEdges()));
d76 1
a76 1
            		request.getDestroyDependentsCommand(node.getTargetEdges()));
@

