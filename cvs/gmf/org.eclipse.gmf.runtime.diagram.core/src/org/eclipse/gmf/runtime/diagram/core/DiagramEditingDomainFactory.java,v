head	1.10;
access;
symbols
	v20081020-0700:1.10
	v20081015-1925:1.10
	v20081015-1755:1.10
	v20081008-1925:1.10
	v20081008-1755:1.10
	v20080903-1520:1.10
	v20080903-1510:1.10
	v20080807-1333:1.10
	v20080807-1325:1.10
	v20080731-1520:1.10
	v20080725-1738:1.10
	v20080722-1827:1.10
	R2_1_maintenance:1.10.0.6
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080425-1959:1.10
	v20080328-1605:1.10
	v20080222-1200:1.10
	v20080107-1111:1.10
	v20071214-1111:1.10
	v20071130-1111:1.10
	v20071108-0000:1.10
	v20071003-0000:1.10
	v20070915-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.4
	R2_0:1.10
	R4_20:1.10
	RC3_20:1.10
	v20070601-1400:1.10
	v20070518-1300:1.10
	bugzilla111892_group_support:1.10.0.2
	Root_bugzilla111892_group_support:1.10
	v20070420-1000:1.9
	v20070405-2000:1.9
	v20070330-1300:1.8
	v20070208-1800:1.8
	M4_20:1.8
	v20061214-0000:1.8
	M3_20:1.8
	v20061027-1200:1.7.2.2
	v20061013-1330:1.8
	v20060919-0800:1.7.2.2
	v20060907-1100:1.7.2.2
	M1_20:1.7
	v20060831-1500:1.7.2.1
	v20060817-1500:1.7.2.1
	v20060810-1700:1.7.2.1
	v20060803-1200:1.7
	v20060728-0500:1.7
	v20060721-1130:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060519-0800:1.6
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.6
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.3
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2007.05.16.16.50.40;	author ahunter;	state Exp;
branches;
next	1.9;
commitid	43c4464b36604567;

1.9
date	2007.04.05.19.42.55;	author aboyko;	state Exp;
branches;
next	1.8;
commitid	2b124615513e4567;

1.8
date	2006.10.03.15.01.44;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.31.16.26.08;	author sshaw;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.05.02.15.05.51;	author vramaswamy;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.21.21.24.51;	author mmostafa;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.30.17.49.58;	author vramaswamy;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.23.22.13.35;	author vramaswamy;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.23.22.05.22;	author vramaswamy;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.01.22.49.10;	author cmahoney;	state Exp;
branches;
next	;

1.7.2.1
date	2006.08.10.18.40.10;	author mmostafa;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2006.09.05.18.07.18;	author mmostafa;	state Exp;
branches;
next	;


desc
@@


1.10
log
@gmf_head ahunter 070516 Update Copyright for files changed in 2007
@
text
@/******************************************************************************
 * Copyright (c) 2006, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.core;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import org.eclipse.core.commands.operations.IOperationHistory;
import org.eclipse.core.commands.operations.OperationHistoryFactory;
import org.eclipse.emf.common.command.AbstractCommand;
import org.eclipse.emf.common.command.Command;
import org.eclipse.emf.common.command.CompoundCommand;
import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.transaction.NotificationFilter;
import org.eclipse.emf.transaction.ResourceSetChangeEvent;
import org.eclipse.emf.transaction.ResourceSetListener;
import org.eclipse.emf.transaction.ResourceSetListenerImpl;
import org.eclipse.emf.transaction.RollbackException;
import org.eclipse.emf.transaction.Transaction;
import org.eclipse.emf.transaction.TransactionChangeDescription;
import org.eclipse.emf.transaction.TransactionalCommandStack;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.impl.FilterManager;
import org.eclipse.emf.transaction.impl.InternalTransaction;
import org.eclipse.emf.transaction.impl.ReadWriteValidatorImpl;
import org.eclipse.emf.transaction.impl.TransactionValidator;
import org.eclipse.emf.transaction.impl.TransactionalEditingDomainImpl;
import org.eclipse.emf.transaction.util.ConditionalRedoCommand;
import org.eclipse.emf.transaction.util.TriggerCommand;
import org.eclipse.emf.workspace.WorkspaceEditingDomainFactory;
import org.eclipse.emf.workspace.impl.WorkspaceCommandStackImpl;
import org.eclipse.gmf.runtime.diagram.core.internal.listener.NotationSemProc;
import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;
import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;


/**
 * Factory for {@@link TransactionalEditingDomain}s that are properly configured
 * to support a GMF diagram application. This factory should be preferred over
 * the {@@link GMFEditingDomainFactory} because it attaches a listener required
 * to update the notation model after changes to the semantic model. Also, it
 * handles special use cases involving the DiagramEventBroker.
 * 
 * @@author cmahoney
 */
public class DiagramEditingDomainFactory
    extends GMFEditingDomainFactory {
	
	protected static class DiagramEditingDomain extends TransactionalEditingDomainImpl {
		// The following variable acts as a special latch for the DiagramEventBroker
		//  listener so that we can allow it to execute in a write transaction context
		//  while handling a post-commit event.
		private InternalTransaction originatingTransaction = null;
		private DiagramEventBroker deb = null;
		private ResourceSetListener debWrapper = null;
		
		public void addResourceSetListener(ResourceSetListener l) {
			if (DiagramEventBroker.class.isInstance(l)) {
				assert deb == null;
				deb = (DiagramEventBroker)l;
				debWrapper = new ResourceSetListenerImpl() {
					public boolean isAggregatePrecommitListener() {
						return deb.isAggregatePrecommitListener();
					}
					
					public boolean isPrecommitOnly() {
						return true;
					}
					
					public Command transactionAboutToCommit(ResourceSetChangeEvent event)
						throws RollbackException {
						return deb.transactionAboutToCommit(event);
					}
					
					public void resourceSetChanged(ResourceSetChangeEvent event) {
						deb.resourceSetChanged(event);
					}
					
					public NotificationFilter getFilter() {
						return deb.getFilter();
					}
					
					public boolean isPostcommitOnly() {
						return false;
					}
				};
				
				super.addResourceSetListener(debWrapper);
			} else {
				super.addResourceSetListener(l);
			}
		}
		
		public void removeResourceSetListener(ResourceSetListener l) {
			if (DiagramEventBroker.class.isInstance(l)) {
				assert deb != null;
				deb = null;
				super.removeResourceSetListener(debWrapper);
				debWrapper = null;
			} else {
				super.removeResourceSetListener(l);
			}
		}
		
		public DiagramEditingDomain(AdapterFactory adapterFactory, ResourceSet resourceSet) {
			super(adapterFactory, resourceSet);
		}

		public DiagramEditingDomain(AdapterFactory adapterFactory, TransactionalCommandStack stack, ResourceSet resourceSet) {
			super(adapterFactory, stack, resourceSet);
		}

		public DiagramEditingDomain(AdapterFactory adapterFactory, TransactionalCommandStack stack) {
			super(adapterFactory, stack);
		}

		public DiagramEditingDomain(AdapterFactory adapterFactory) {
			super(adapterFactory);
		}
		
		public void precommit(InternalTransaction tx) throws RollbackException {
			super.precommit(tx);
			
			if ((tx.getParent() == null) && (deb != null)) {
				// ensure that when the top-level transaction commits, it
				//    has a self-chaining composite command as a trigger to
				//    insert the DiagramEventBroker's post-commit changes into,
				//    so that the transaction's change description and any other
				//    AbstractEMFOperation will get the changes automatically
				Command existingTriggers = tx.getTriggers();
				if (existingTriggers instanceof CompoundCommand) {
					// nothing to do:  already a self-chaining command
				} else if (existingTriggers != null) {
					// force it to be a compound by appending a no-op
					tx.addTriggers(NOOP_TRIGGER);
				} else {
					// no triggers, yet?  have to add *two* no-ops
					tx.addTriggers(NOOP_TRIGGER);
					tx.addTriggers(NOOP_TRIGGER);
				}
			}
		}
		
		public void broadcastUnbatched(Notification notification) {
            super.broadcastUnbatched(notification);
            final ResourceSetChangeEvent unbatchedChangeEvent =
                new ResourceSetChangeEvent(this, null, Collections.singletonList(notification));
            try {
            runExclusive(new Runnable() {
                public void run() {
                    try {
                        if (deb!=null)
                            deb.resourceSetChanged(unbatchedChangeEvent);
                    }catch (Exception e) {
                        // do nothing for now  
                    }
                }});
            } catch (InterruptedException e) {
                // do ntohing for now
            }
        }

        protected void postcommit(InternalTransaction tx) {
			try {
				List notifications = getValidator().getNotificationsForPostcommit(tx);
				
				if (deb != null && notifications != null && !notifications.isEmpty()) {	
					TransactionValidator originalValidator = null;
					
					// Set the latch if it has not yet been set
					if (originatingTransaction == null) {
						originatingTransaction = tx;
						originalValidator = getValidator();
						setValidator(new ReadWriteValidatorImpl());
					} else {
						// In this case we must copy over the notifications and change
						//  descriptions to the originatingTransaction.  Do this
						//  as a "late trigger command" because the trigger
						//  mechanism is already understood by some of the
						//  operations that need to undo/redo these changes
						originatingTransaction.addTriggers(new TriggerCommand(
								Collections.singletonList(
										new DiagramEventBrokerCommand(
												tx.getChangeDescription()))));
						originatingTransaction.getNotifications().addAll(notifications);
					}
					
					try {
						ArrayList cache = new ArrayList(notifications.size());
						
						List filtered = FilterManager.getInstance().select(
							notifications,
							deb.getFilter(),
							cache);
						
						HashMap options = new HashMap(originatingTransaction.getOptions());
						options.put(Transaction.OPTION_NO_UNDO, Boolean.FALSE);
						InternalTransaction newTx = startTransaction(false, options);
						deb.resourceSetChanged(
							new ResourceSetChangeEvent(
								this,
								tx,
								filtered));

						newTx.commit();
					} catch (RollbackException e) {
						// Do nothing in the rollback case, we have no change descriptions
						//  or notifications to propagate.
					} finally {
						// Undo the latch if we are top-most in the recursion.
						if (originatingTransaction == tx) {
							originatingTransaction = null;
							getValidator().dispose();
							setValidator(originalValidator);
						}
					}
				}
			} catch (InterruptedException e) {
				// Simply fall-through in this case and allow the post commit listeners
				//  to be notified.
			}
			
			// We will only call super on the top-most in the recursion.
			if (originatingTransaction == null) {
				super.postcommit(tx);
			}
		}
	}
	
	private static class DiagramEventBrokerCommand
			extends AbstractCommand
			implements ConditionalRedoCommand {
		private final TransactionChangeDescription change;
		
		DiagramEventBrokerCommand(TransactionChangeDescription change) {
			this.change = change;
		}
		
		protected boolean prepare() {
			return true;
		}
		
		public final void execute() {
			// never executed
		}

		public boolean canUndo() {
			return (change != null) && change.canApply();
		}
		
		public final void undo() {
			if (change != null) {
				change.applyAndReverse();
			}
		}
		
		public boolean canRedo() {
			return (change != null) && change.canApply();
		}
		
		public final void redo() {
			if (change != null) {
				change.applyAndReverse();
			}
		}
	}
	
	static final TriggerCommand NOOP_TRIGGER = new TriggerCommand(
			Collections.singletonList(new AbstractCommand() {
				protected boolean prepare() { return true; }
				public void execute() {}
				public boolean canUndo() { return true;	}
				// this command does not need to implement canRedo() because it
				//    is assumed to be redoable, anyway, which is what we want
				public void undo() {}
				public void redo() {}}));
	
    /**
     * The single shared instance of the GMF diagram editing domain factory.
     */
    private static DiagramEditingDomainFactory instance = new DiagramEditingDomainFactory();

    /**
     * Gets the single shared instance of the GMF diagram editing domain factory.
     * 
     * @@return the editing domain factory
     */
    public static WorkspaceEditingDomainFactory getInstance() {
        return instance;
    }  
    
    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory#configure(org.eclipse.emf.transaction.TransactionalEditingDomain)
     */
    protected void configure(TransactionalEditingDomain domain) {
        super.configure(domain);
        domain.addResourceSetListener(new NotationSemProc());
    }

    public TransactionalEditingDomain createEditingDomain() {
		TransactionalEditingDomain result = createEditingDomain(OperationHistoryFactory.getOperationHistory());
		configure(result);
		return result;
    }
    
    public TransactionalEditingDomain createEditingDomain(IOperationHistory history) {
		WorkspaceCommandStackImpl stack = new WorkspaceCommandStackImpl(history);
		
		TransactionalEditingDomain result = new DiagramEditingDomain(
			new ComposedAdapterFactory(
				ComposedAdapterFactory.Descriptor.Registry.INSTANCE),
			stack);
		
		mapResourceSet(result);
		
		configure(result);
		return result;
    }
    
    public TransactionalEditingDomain createEditingDomain(ResourceSet rset) {
		TransactionalEditingDomain result = createEditingDomain(
			rset,
			OperationHistoryFactory.getOperationHistory());
		configure(result);
		return result;
    }
    
    public TransactionalEditingDomain createEditingDomain(ResourceSet rset, IOperationHistory history) {
		WorkspaceCommandStackImpl stack = new WorkspaceCommandStackImpl(history);
		
		TransactionalEditingDomain result = new DiagramEditingDomain(
			new ComposedAdapterFactory(
				ComposedAdapterFactory.Descriptor.Registry.INSTANCE),
			stack,
			rset);
		
		mapResourceSet(result);
		configure(result);
		return result;
    }
}
@


1.9
log
@[176091] gmf_head aboyko 070405 Increase visibility of DiagramEditingDomainFactory.DiagramEditingDomain
@
text
@d2 1
a2 1
 * Copyright (c) 2006 IBM Corporation and others.
@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d63 1
a63 1
	private static class DiagramEditingDomain extends TransactionalEditingDomainImpl {
@


1.7
log
@bugzilla 142803 gmf-head sshaw 060531 Illegal Asynchronous Access to ResourceSetChangeEvent in DiagramEventBrokerThreadSafe
@
text
@d25 1
d158 20
a177 1
		protected void postcommit(InternalTransaction tx) {
@


1.7.2.1
log
@[153456] gmf_R1_0_maintenance mmostafa  060810 DiagramEdititng Domain does not forward the Resource unload events to the DiagramEventBroker
@
text
@a24 1
import org.eclipse.emf.common.notify.Notification;
d157 1
a157 19
		public void broadcastUnbatched(Notification notification) {
            super.broadcastUnbatched(notification);
            final ResourceSetChangeEvent unbatchedChangeEvent =
                new ResourceSetChangeEvent(this, null, Collections.singletonList(notification));
            try {
            runExclusive(new Runnable() {
                public void run() {
                    try {
                        deb.resourceSetChanged(unbatchedChangeEvent);
                    }catch (Exception e) {
                        // do nothing for now  
                    }
                }});
            } catch (InterruptedException e) {
                // do ntohing for now
            }
        }

        protected void postcommit(InternalTransaction tx) {
@


1.7.2.2
log
@[154487] gmf_R1_0_maintenace mmostafa 060905  NullPointerException when open editor
@
text
@d166 1
a166 2
                        if (deb!=null)
                            deb.resourceSetChanged(unbatchedChangeEvent);
@


1.6
log
@[138516], gmf_head, contributed  by cdamus, 060502, DiagramEventBrokerCommand should implement canRedo() using the EMF-TX extension to the Command interface
@
text
@d71 1
a71 1
			if (l.getClass() == DiagramEventBroker.class) {
d108 1
a108 1
			if (l.getClass() == DiagramEventBroker.class) {
@


1.5
log
@bugzilla 138064 gmf-head mmostafa 060421 Redo is broken on canonically created elements
@
text
@d41 1
d224 3
a226 1
	private static class DiagramEventBrokerCommand extends AbstractCommand {
d251 4
d267 2
@


1.4
log
@[132367],gmf_head, cbmcgee,060330,Provide specialized post commit listener that can open a write transaction
@
text
@d15 1
d21 1
d23 1
d33 1
d41 1
a41 1
import org.eclipse.emf.transaction.util.CompositeChangeDescription;
d133 23
d170 8
a177 2
						//  descriptions to the originatingTransaction.
						((CompositeChangeDescription)originatingTransaction.getChangeDescription()).add(tx.getChangeDescription());
d223 40
@


1.3
log
@[132367] gmf_head cmcgee 060323 Provide specialized post commit listener that can open a write transaction
@
text
@d20 1
d24 1
d27 1
d63 1
d69 30
a99 2
			
			super.addResourceSetListener(l);
d106 4
a110 2
			
			super.removeResourceSetListener(l);
@


1.2
log
@[132367] gmf_head cmcgee 060323 Provide specialized post commit listener that can open a write transaction
@
text
@a16 1
import java.util.Map;
@


1.1
log
@Bugzilla#129803 gmf_head cmahoney 060301 Deleting node leaves connection connected to space
@
text
@d14 15
d30 6
d37 1
d39 1
d47 2
a48 1
 * to update the notation model after changes to the semantic model.
d54 37
d92 65
d179 41
@

