head	1.7;
access;
symbols
	v20081015-1925:1.7
	v20081008-1925:1.7
	v20080903-1520:1.7
	v20080731-1520:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	I20051124-2000:1.6
	M3_10:1.6
	I20051118-1245:1.6
	I20051111-1800:1.6
	I20051106-0900:1.6
	v20051030:1.5;
locks; strict;
comment	@# @;


1.7
date	2005.11.25.19.34.27;	author cmahoney;	state dead;
branches;
next	1.6;

1.6
date	2005.11.02.23.29.21;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.22.15.42.32;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.12.21.24.26;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.15.48.40;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.48.50;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.54;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Bugzilla#113157 gmf_head cmahoney 051125 Removing deprecated classes
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2003 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.core.listener;

import java.util.Collection;
import java.util.Iterator;
import java.util.Set;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.diagram.core.internal.listener.ModelServerListener;
import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;
import org.eclipse.gmf.runtime.notation.View;

/**
 * A model server listener that broadcast EObject events to
 * all registered listeners.
 * 
 * @@author melaasar, mmostafa
 * @@deprecated Renamed to {@@link org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker}
 */
public class PresentationListener extends ModelServerListener {
	/** The PresentationListener singleton */
	private static PresentationListener instance;

	/**
	 * gives access to the <code>PresentationListener</code> singleton
	 * @@return the <code>PresentationListener</code> singleton
	 */
	public static PresentationListener getInstance() {
		if ( instance == null ) {
			instance = new PresentationListener();
		}
		return instance;
	}
	

	/**
	 * gets a subset of all the registered listeners who are interested
	 * in receiving the supplied event.
	 * @@param event the event to use
	 * @@return	the interested listeners in the event
	 */
	protected Set getInterestedNotificationListeners( Notification event ) {
		Set listenerSet = super.getInterestedNotificationListeners(event);
		EObject notifier = (EObject) event.getNotifier();
		if (notifier instanceof EAnnotation){
			addListenersOfNotifier(listenerSet, notifier.eContainer(), event);
		} else if (!(notifier instanceof View)) {
			while (notifier != null && !(notifier instanceof View)) {
				notifier = notifier.eContainer();
			}
			addListenersOfNotifier(listenerSet, notifier, event);
		}
		return listenerSet;
	}

	/**
	 * Helper method to add all the listners of the given <code>notifier</code>
	 * to the list of listeners
	 * @@param listenerSet
	 * @@param notifier
	 */
	private void addListenersOfNotifier(Set listenerSet, EObject notifier,Notification event) {
		if (notifier != null) {
			Collection c = getNotificationListeners(notifier, event.getFeature());
			if (c != null) {
				if (listenerSet.isEmpty())
					listenerSet.addAll(c);
				else {
					Iterator i = c.iterator();
					while (i.hasNext()) {
						Object o = i.next();
						listenerSet.add(o);
					}
				}
			}
		}
	}
	
    /**
     * Forwards the event to all interested  listeners.
     * @@param event the event to handle
	 */
	protected void handleElementEvent(Notification event) {
		MEditingDomain doamin = null;
		if (!event.isTouch()
			&& !(doamin = MEditingDomainGetter.getMEditingDomain(event))
				.isUndoNotification(event) && !doamin.isRedoNotification(event)) {
			EObject element = (EObject) event.getNotifier();
			while (element != null && !(element instanceof View)) {
				element = element.eContainer();
			}
			if (element != null) {
				ViewUtil.persistElement((View) element);
			}
		}
		super.handleElementEvent(event);
	}
}
@


1.6
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@@


1.5
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d32 1
@


1.4
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a20 2
import org.eclipse.emf.ecore.EStructuralFeature;

a47 40
	/**
	 * gets a notifier to the given element.
	 * @@param element the element to get the notifier for
	 * @@return the Notifier of the element
	 * @@deprecated the PropertyChangeNotifier is deprecated, to add a listener use the 
	 * <code>addPropertyChangeListener</code> Api instead.
	 */
	public static PropertyChangeNotifier getNotifier(EObject element) {
		return PresentationListener.getInstance().getPropertyChangeNotifier(element);
	}
	
	/**
	 * gets a notifier to the given element.
	 * @@param element the element to get the notifier for
	 * @@return the Notifier of the element
	 * @@deprecated the PropertyChangeNotifier is deprecated, to add a listener use the 
	 * <code>addPropertyChangeListener</code> Api instead.
	 */
	public static PropertyChangeNotifier getNotifier(EObject element,EStructuralFeature feature) {
		return PresentationListener.getInstance().getPropertyChangeNotifier(element,feature);
	}

	/**
	 * Wraps the supplied event into a property change event.
	 * @@param event	the event top wrap
	 * @@return	the Notification event
	 */
	protected NotificationEvent getNotificationEvent( Notification event ) {
		Object notifier = event.getNotifier();
		if (notifier instanceof View) {
			View view = (View)notifier;
			if (view != null)
				return new NotificationEvent( 
					view, 
					event.getOldValue(),
					event.getNewValue(),
					event);
		}
		return new NotificationEvent(event);
	}
d55 2
a56 3
	protected Set getInterestedListeners( Notification event ) {
		Set listenerSet = super.getInterestedListeners(event);

d77 1
a77 1
			Collection c = getListeners(notifier, event.getFeature());
@


1.3
log
@Bugzilla109092 : rmp_head mmostafa 050912 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d52 2
d63 2
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d25 1
a25 1
import com.ibm.xtools.notation.View;
@

