head	1.10;
access;
symbols
	v20081020-0700:1.10
	v20081015-1925:1.10
	v20081015-1755:1.10
	v20081008-1925:1.10
	v20081008-1755:1.10
	v20080903-1520:1.10
	v20080903-1510:1.10
	v20080807-1333:1.10
	v20080807-1325:1.10
	v20080731-1520:1.10
	v20080725-1738:1.10
	v20080722-1827:1.10
	R2_1_maintenance:1.10.0.6
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080425-1959:1.10
	v20080328-1605:1.10
	v20080222-1200:1.10
	v20080107-1111:1.10
	v20071214-1111:1.10
	v20071130-1111:1.10
	v20071108-0000:1.10
	v20071003-0000:1.10
	v20070915-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.4
	R2_0:1.10
	R4_20:1.10
	RC3_20:1.10
	v20070601-1400:1.10
	v20070518-1300:1.10
	bugzilla111892_group_support:1.10.0.2
	Root_bugzilla111892_group_support:1.10
	v20070420-1000:1.10
	v20070405-2000:1.10
	v20070330-1300:1.10
	v20070208-1800:1.10
	M4_20:1.10
	v20061214-0000:1.10
	M3_20:1.10
	v20061027-1200:1.9.2.1
	v20061013-1330:1.10
	v20060919-0800:1.9.2.1
	v20060907-1100:1.9
	M1_20:1.9
	v20060831-1500:1.9
	v20060817-1500:1.9
	v20060810-1700:1.9
	v20060803-1200:1.9
	v20060728-0500:1.9
	v20060721-1130:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060616-1200:1.9
	v20060609-1400:1.9
	v20060531-1730:1.9
	v20060519-0800:1.9
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.7
	I20060216-1945:1.7
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.7
	I20060129-1145:1.7
	I20060127-0900:1.7
	I20060120-1530:1.7
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.7
	I20051201-1800:1.6
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.4;
locks; strict;
comment	@# @;


1.10
date	2006.10.03.15.01.43;	author ahunter;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.15.15.26.04;	author cmahoney;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2006.02.28.02.31.23;	author cmahoney;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.12.16.49.32;	author sshaw;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.25.19.37.54;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.02.23.29.21;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.14.19.37.50;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.24.26;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.15.48.40;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.08.18.58.50;	author sshaw;	state Exp;
branches;
next	;

1.9.2.1
date	2006.09.13.16.43.28;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.10
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.core.providers;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.HashMap;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.diagram.core.internal.DiagramPlugin;
import org.eclipse.gmf.runtime.diagram.core.internal.DiagramStatusCodes;
import org.eclipse.gmf.runtime.diagram.core.internal.l10n.DiagramCoreMessages;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.core.services.view.CreateDiagramViewOperation;
import org.eclipse.gmf.runtime.diagram.core.services.view.CreateEdgeViewOperation;
import org.eclipse.gmf.runtime.diagram.core.services.view.CreateNodeViewOperation;
import org.eclipse.gmf.runtime.diagram.core.services.view.CreateViewForKindOperation;
import org.eclipse.gmf.runtime.diagram.core.services.view.CreateViewOperation;
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.osgi.util.NLS;

/**
 * Implements of the <code>IViewProvider</code> interface. This
 * implementations invokes the approrpiate factory method by inspecting the
 * supplied operation and provides the actual view creation functionality.
 */
public class AbstractViewProvider
	extends AbstractProvider
	implements IViewProvider {

	private static String viewCreationMethodName = "createView"; //$NON-NLS-1$

	private static String diagramCreationMethodName = "createDiagram"; //$NON-NLS-1$
	
	static protected class ClassToCreationMethodMap
		extends HashMap {
		static final long serialVersionUID = 1;
		
		public void addMethod(Class clazz, Method method) {
			if (get(clazz) == null)
				put(clazz, method);
		}

		public Method getCreationMethod(Class clazz) {
			return (Method) get(clazz);
		}
	}

	public static ClassToCreationMethodMap classToCreateMethod = new ClassToCreationMethodMap();

	/**
	 * Determines whether this view provider can provide for the required
	 * operation It inspects the type of view operation and calls the
	 * corresponding <code>provides</code> method.
	 * 
	 * @@see org.eclipse.gmf.runtime.common.core.service.IProvider#provides(IOperation)
	 */
	public final boolean provides(IOperation operation) {
		/* if this is the CreateViewForKindOperation operation */
		if (operation instanceof CreateViewForKindOperation)
			return provides((CreateViewForKindOperation) operation);

		/* Make sure it is a view operation */
		assert operation instanceof CreateViewOperation : "operation is not CreateViewOperation in AbstractViewProvider";//$NON-NLS-1$

		/* call the specific provides method */
		if (operation instanceof CreateDiagramViewOperation)
			return provides((CreateDiagramViewOperation) operation);
		else if (operation instanceof CreateEdgeViewOperation)
			return provides((CreateEdgeViewOperation) operation);
		else if (operation instanceof CreateNodeViewOperation)
			return provides((CreateNodeViewOperation) operation);
		return false;
	}

	public final Diagram createDiagram(IAdaptable contextElement,
			String diagramKind, PreferencesHint preferencesHint) {
		return (Diagram) createNewView(getDiagramViewClass(contextElement,
			diagramKind), new Object[] {contextElement, diagramKind,
			preferencesHint});
	}

	public final Edge createEdge(IAdaptable semanticAdapter,
			View containerView, String semanticHint, int index,
			boolean persisted, PreferencesHint preferencesHint) {

		return (Edge) createNewView(getEdgeViewClass(semanticAdapter,
			containerView, semanticHint), new Object[] {semanticAdapter,
			containerView, semanticHint, new Integer(index),
			Boolean.valueOf(persisted), preferencesHint});
	}

	public final Node createNode(IAdaptable semanticAdapter,
			View containerView, String semanticHint, int index,
			boolean persisted, PreferencesHint preferencesHint) {

		return (Node) createNewView(getNodeViewClass(semanticAdapter,
			containerView, semanticHint), new Object[] {semanticAdapter,
			containerView, semanticHint, new Integer(index),
			Boolean.valueOf(persisted), preferencesHint});
	}

	/**
	 * Determines whether this provider can provide for the specified view
	 * creation operation
	 * 
	 * @@param operation
	 *            Contains a semantic kind and a containerView
	 * @@return boolean
	 */
	protected boolean provides(CreateViewForKindOperation op) {
		if (op.getViewKind() == Node.class)
			return getNodeViewClass(op.getSemanticAdapter(), op
				.getContainerView(), op.getSemanticHint()) != null;
		if (op.getViewKind() == Edge.class)
			return getEdgeViewClass(op.getSemanticAdapter(), op
				.getContainerView(), op.getSemanticHint()) != null;
		return true;
	}

	/**
	 * Determines whether this provider can provide for the specified diagram
	 * view operation
	 * 
	 * @@param operation
	 * @@return boolean
	 */
	protected boolean provides(CreateDiagramViewOperation operation) {
		return getDiagramViewClass(operation.getSemanticAdapter(), operation
			.getSemanticHint()) != null;
	}

	/**
	 * Determines whether this provider can provide for the specified edge view
	 * operation
	 * 
	 * @@param operation
	 * @@return boolean
	 */
	protected boolean provides(CreateEdgeViewOperation operation) {
		return (getEdgeViewClass(operation.getSemanticAdapter(), operation
			.getContainerView(), operation.getSemanticHint()) != null);
	}

	/**
	 * Determines whether this provider can provide for the specified node view
	 * operation
	 * 
	 * @@param operation
	 * @@return boolean
	 */
	protected boolean provides(CreateNodeViewOperation operation) {
		return (getNodeViewClass(operation.getSemanticAdapter(), operation
			.getContainerView(), operation.getSemanticHint()) != null);
	}

	/**
	 * Returns the diagram view class to instantiate based on the passed params
	 * 
	 * @@param semanticAdapter
	 *            TODO
	 * @@param semanticAdapter
	 * @@return Class
	 */
	protected Class getDiagramViewClass(IAdaptable semanticAdapter,
			String diagramKind) {
		return null;
	}

	/**
	 * Returns the edge view class to instantiate based on the passed params
	 * 
	 * @@param semanticAdapter
	 * @@param containerView
	 * @@param semanticHint
	 * @@return Class
	 */
	protected Class getEdgeViewClass(IAdaptable semanticAdapter,
			View containerView, String semanticHint) {
		return null;
	}

	/**
	 * Returns the node view class to instantiate based on the passed params
	 * 
	 * @@param semanticAdapter
	 * @@param containerView
	 * @@param semanticHint
	 * @@return Class
	 */
	protected Class getNodeViewClass(IAdaptable semanticAdapter,
			View containerView, String semanticHint) {
		return null;
	}

	/**
	 * creates a view instance via reflection.
	 * 
	 * @@param constructorParams
	 *            the view's constructor parameters.
	 */
	private View createNewView(Class viewClass, Object[] constructorParams) {
		try {
			assert null != viewClass : "Null viewClass in AbstractProvider";//$NON-NLS-1$			
			assert null != constructorParams : "Null constructorParams in AbstractProvider";//$NON-NLS-1$

			Constructor constructor = getFactoryConstructor(viewClass);
			if (constructor == null) {
				Log
					.error(
						DiagramPlugin.getInstance(),
						DiagramStatusCodes.SERVICE_FAILURE,
						"View (" + viewClass + ") is missing a proper creation Factory"); //$NON-NLS-1$//$NON-NLS-2$
				return null;
			}

			Object factory = constructor.newInstance(null);
			Method method = getCreationMethod(viewClass, constructorParams);
			if (method == null) {
				Log
					.error(
						DiagramPlugin.getInstance(),
						DiagramStatusCodes.SERVICE_FAILURE,
						"View (" + viewClass + ") is missing a proper creation Factory"); //$NON-NLS-1$//$NON-NLS-2$
				return null;
			}
			return (View) method.invoke(factory, constructorParams);
		} catch (Throwable e) {
			String eMsg = NLS
				.bind(
					DiagramCoreMessages.AbstractViewProvider_create_view_failed_ERROR_,
					viewClass.getName());
			Log.warning(DiagramPlugin.getInstance(), IStatus.WARNING, eMsg, e);
			return null;
		}
	}

	private Constructor getFactoryConstructor(Class viewClass) {
		if (viewClass != null) {
			Constructor[] ctors = viewClass.getConstructors();
			for (int i = 0; i < ctors.length; i++) {
				if (ctors[i].getParameterTypes().length == 0) {
					return ctors[i];
				}
			}
		}
		return null;
	}

	/** Return the <i>creation</i> constructor for the cached view class. */
	private Method getCreationMethod(Class viewClass, Object[] params) {
		if (viewClass != null) {
			Method method = classToCreateMethod.getCreationMethod(viewClass);
			if (method != null)
				return method;

			Method[] methods = viewClass.getMethods();
			for (int i = 0; i < methods.length; i++) {
				method = methods[i];
				String methodName = method.getName();
				if (methodName.equals(viewCreationMethodName)
					|| methodName.equals(diagramCreationMethodName)) {
					classToCreateMethod.addMethod(viewClass, method);
					return method;
				}
			}
		}
		return null;
	}

	/**
	 * Returns the EClass associated with the semantic adapter
	 * 
	 * @@param semanticAdapter
	 * @@return EClass
	 */
	protected EClass getSemanticEClass(IAdaptable semanticAdapter) {
		if (semanticAdapter == null)
			return null;
		EObject eObject = (EObject) semanticAdapter.getAdapter(EObject.class);
		if (eObject != null)
			return EMFCoreUtil.getProxyClass(eObject);
		IElementType type = (IElementType) semanticAdapter
			.getAdapter(IElementType.class);
		if (type != null)
			return type.getEClass();
		return null;
	}

	/**
	 * Returns the semantic element associated with the semantic adapter
	 * 
	 * @@param semanticAdapter
	 * @@return EClass
	 */
	protected EObject getSemanticElement(IAdaptable semanticAdapter) {
		if (semanticAdapter == null)// TODO which MEditingDomain to use?
			return null;
		EObject eObject = (EObject) semanticAdapter.getAdapter(EObject.class);
		if (eObject != null)
			return EMFCoreUtil.resolve(TransactionUtil.getEditingDomain(eObject), eObject);
		return null;
	}

	/**
	 * Returns the semantic element associated with the semantic adapter
	 * 
	 * @@param semanticAdapter
	 * @@return EClass
	 */
	protected EObject getSemanticElement(IAdaptable semanticAdapter,
			TransactionalEditingDomain domain) {
		if (semanticAdapter == null)
			return null;
		EObject eObject = (EObject) semanticAdapter.getAdapter(EObject.class);
		if (eObject != null)
			return EMFCoreUtil.resolve(domain, eObject);
		return null;
	}

}
@


1.9
log
@Bugzilla#140166 gmf_head cmahoney 060515 Move necessary client accessed internal classes into public API
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
@


1.9.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.8
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@a29 5
import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateDiagramViewOperation;
import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateEdgeViewOperation;
import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateNodeViewOperation;
import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateViewForKindOperation;
import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateViewOperation;
d31 5
@


1.7
log
@bugzilla 110316 gmf-head 051212 Compiler warning count should be 0 - runtime diagram layer
@
text
@d22 2
a34 1
import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
d36 1
a36 2
import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;
import org.eclipse.gmf.runtime.emf.core.util.ProxyUtil;
d304 1
a304 1
			return ProxyUtil.getProxyClass(eObject);
d323 1
a323 2
			return ProxyUtil.resolve(MEditingDomainGetter
				.getMEditingDomain(eObject), eObject);
d334 1
a334 1
			MEditingDomain domain) {
d339 1
a339 1
			return ProxyUtil.resolve(domain, eObject);
@


1.6
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d56 1
a56 1

d59 2
a60 1

@


1.5
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a15 1
import java.text.MessageFormat;
d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.core.internal.l10n.DiagramResourceManager;
d42 1
d250 4
a253 4
			String eMsg = MessageFormat.format(DiagramResourceManager
				.getInstance().getString(
					"AbstractViewProvider.create.view.failed_ERROR_"),//$NON-NLS-1$
				new Object[] {viewClass.getName()});
@


1.4
log
@bugzilla 112685 gmf-head sshaw 051014 Sweep code for creation of Boolean objects
@
text
@a22 1

a28 1
import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateConnectorViewOperation;
d30 1
d45 3
a47 3
 * Implements of the <code>IViewProvider</code> interface.  
 * This implementations invokes the approrpiate factory method by inspecting the supplied
 * operation and provides the actual view creation functionality.
d49 2
a50 1
public class AbstractViewProvider extends AbstractProvider
d52 3
a54 2
	
	private static String viewCreationMethodName = "createView";  //$NON-NLS-1$
d56 7
a62 5
	
	static protected class ClassToCreationMethodMap extends HashMap{
		public void addMethod(Class clazz,Method method){
			if (get(clazz)==null)
				put(clazz,method);
d64 3
a66 3
		
		public Method getCreationMethod(Class clazz){
			return (Method)get(clazz);
d69 3
a71 4
	
	public static ClassToCreationMethodMap classToCreateMethod =
		new ClassToCreationMethodMap();
	
d73 4
a76 2
	 * Determines whether this view provider can provide for the required operation
	 * It inspects the type of view operation and calls the corresponding <code>provides</code> method.
d83 2
a84 2
		
		/* Make sure it is a view operation */		
d90 2
a91 2
		else if (operation instanceof CreateConnectorViewOperation)
			return provides((CreateConnectorViewOperation) operation);
d97 19
a115 38
	public final Diagram createDiagram(
			IAdaptable contextElement,
			String diagramKind, PreferencesHint preferencesHint){
		return (Diagram) createNewView(
					getDiagramViewClass(
						contextElement, diagramKind),
					new Object[] {
						contextElement,
						diagramKind,
						preferencesHint});
	}

	public final Edge createEdge(
		IAdaptable semanticAdapter,
		View containerView,
		String semanticHint,
		int index,
		boolean persisted, PreferencesHint preferencesHint) {

		return (Edge)createNewView(
			getConnectorViewClass(
				semanticAdapter,
				containerView,
				semanticHint),
			new Object[] {
				semanticAdapter,
				containerView,
				semanticHint,
				new Integer(index),
				Boolean.valueOf(persisted),
				preferencesHint});
	}

	public final Node createNode(
			IAdaptable semanticAdapter,
			View containerView,
			String semanticHint,
			int index,
d118 4
a121 12
			return (Node)createNewView(
				getNodeViewClass(
					semanticAdapter,
					containerView,
					semanticHint),
				new Object[] {
					semanticAdapter,
					containerView,
					semanticHint,
					new Integer(index),
					Boolean.valueOf(persisted),
					preferencesHint});
d123 1
a123 1
	
d125 5
a129 2
	 * Determines whether this provider can provide for the specified view creation operation
	 * @@param operation Contains a semantic kind and a containerView
d134 2
a135 1
			return getNodeViewClass(op.getSemanticAdapter(), op.getContainerView(), op.getSemanticHint()) != null;
d137 2
a138 1
			return getConnectorViewClass(op.getSemanticAdapter(), op.getContainerView(), op.getSemanticHint()) != null;
d143 3
a145 1
	 * Determines whether this provider can provide for the specified diagram view operation
d150 2
a151 1
		return getDiagramViewClass(operation.getSemanticAdapter(), operation.getSemanticHint()) != null;
d155 3
a157 1
	 * Determines whether this provider can provide for the specified connector view operation
d161 3
a163 7
	protected boolean provides(CreateConnectorViewOperation operation) {
		return (
				getConnectorViewClass(
					operation.getSemanticAdapter(),
					operation.getContainerView(),
					operation.getSemanticHint())
					!= null);
d167 3
a169 1
	 * Determines whether this provider can provide for the specified node view operation
d174 2
a175 6
		return (
				getNodeViewClass(
					operation.getSemanticAdapter(),
					operation.getContainerView(),
					operation.getSemanticHint())
					!= null);
d177 1
a177 1
	
d180 3
a182 1
	 * @@param semanticAdapter TODO
d186 2
a187 1
	protected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {
d190 1
a190 1
	
d192 2
a193 1
	 * Returns the connector view class to instantiate based on the passed params
d199 2
a200 4
	protected Class getConnectorViewClass(
		IAdaptable semanticAdapter,
		View containerView,
		String semanticHint) {
d203 1
a203 1
	
d206 1
d212 3
a214 5
	protected Class getNodeViewClass(
		IAdaptable semanticAdapter,
		View containerView,
		String semanticHint) {
		return null;				
d216 1
a216 1
	
d219 3
a221 1
	 * @@param constructorParams the view's constructor parameters.
d224 1
a224 1
		try {			
d230 5
a234 1
				Log.error(DiagramPlugin.getInstance(), DiagramStatusCodes.SERVICE_FAILURE, "View (" + viewClass + ") is missing a proper creation Factory");  //$NON-NLS-1$//$NON-NLS-2$
d237 1
a237 1
			
d239 7
a245 3
			Method method = getCreationMethod(viewClass,constructorParams);
			if (method==null){
				Log.error(DiagramPlugin.getInstance(), DiagramStatusCodes.SERVICE_FAILURE, "View (" + viewClass + ") is missing a proper creation Factory");  //$NON-NLS-1$//$NON-NLS-2$
d248 1
a248 1
			return (View)method.invoke(factory,constructorParams);
d250 3
a252 2
			String eMsg = MessageFormat.format(  
				DiagramResourceManager.getInstance().getString("AbstractViewProvider.create.view.failed_ERROR_"),//$NON-NLS-1$
d259 1
a259 1
	private Constructor getFactoryConstructor(Class viewClass){
d262 2
a263 2
			for (int i = 0; i < ctors.length; i++) {			
				if ( ctors[i].getParameterTypes().length == 0 ) {
d270 1
a270 1
	
d272 1
a272 1
	private Method getCreationMethod(Class viewClass, Object[] params){
d275 1
a275 1
			if (method!=null)
d277 3
a279 4
			
			Method[] methods = 
				viewClass.getMethods();
			for (int i = 0; i < methods.length; i++) {			
d282 3
a284 3
				if (methodName.equals(viewCreationMethodName)||
					methodName.equals(diagramCreationMethodName)) {
					classToCreateMethod.addMethod(viewClass,method);
d294 1
d296 1
a296 1
	 * @@return EClass 
d304 2
a305 1
		IElementType type = (IElementType) semanticAdapter.getAdapter(IElementType.class);
d313 1
d315 1
a315 1
	 * @@return EClass 
d318 1
a318 1
		if (semanticAdapter == null)//TODO which MEditingDomain to use? 
d322 2
a323 2
			return ProxyUtil.resolve(MEditingDomainGetter.getMEditingDomain(eObject),
				eObject);
d326 1
a326 1
	
d329 1
d331 1
a331 1
	 * @@return EClass 
d333 3
a335 2
	protected EObject getSemanticElement(IAdaptable semanticAdapter, MEditingDomain domain) {
		if (semanticAdapter == null) 
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d122 1
a122 1
				new Boolean(persisted),
d143 1
a143 1
					new Boolean(persisted),
@


1.2
log
@Bugzilla109092 : rmp_head mmostafa 050912 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Bugzilla 109092  : rumv_head mmostafa 050908 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d91 1
a91 1
	public final Diagram createDiagramView(
d103 1
a103 1
	public final Edge createConnectorView(
d124 1
a124 1
	public final View createNodeView(
d131 1
a131 1
			return createNewView(
@

