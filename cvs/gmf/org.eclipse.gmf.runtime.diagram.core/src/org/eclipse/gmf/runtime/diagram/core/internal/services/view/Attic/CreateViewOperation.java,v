head	1.7;
access;
symbols
	v20081015-1925:1.7
	v20081008-1925:1.7
	v20080903-1520:1.7
	v20080731-1520:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.3;
locks; strict;
comment	@# @;


1.7
date	2006.05.15.15.26.04;	author cmahoney;	state dead;
branches;
next	1.6;

1.6
date	2006.02.28.02.30.53;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.20.16.49.29;	author mmostafa;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.04.22.13.07;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.24.26;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.48.50;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.37;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Bugzilla#140166 gmf_head cmahoney 060515 Move necessary client accessed internal classes into public API
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2003 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.core.internal.services.view;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.emf.core.util.PackageUtil;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@author melaasar
 * @@canBeSeenBy org.eclipse.gmf.runtime.diagram.core.*
 *
 * Base of view creation operations
 */
public abstract class CreateViewOperation implements IOperation {

	/** The semantic adapter */
	private final IAdaptable semanticAdapter;
	
	/** child view factory hint */
	private final String semanticHint;
	
	/**
	 * The hint used to find the appropriate preference store from which general
	 * diagramming preference values for properties of shapes, connections, and
	 * diagrams can be retrieved. This hint is mapped to a preference store in
	 * the {@@link DiagramPreferencesRegistry}.
	 */
	private final PreferencesHint preferencesHint;

	/**
	 * Method CreateViewOperation.
	 * @@param semanticRef adapts to <code<IReference</code>
	 * @@param preferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 */
	protected CreateViewOperation(
		IAdaptable semanticAdapter,
		String semanticHint, PreferencesHint preferencesHint) {
		
		this.semanticAdapter = semanticAdapter;		
		this.semanticHint = semanticHint;
		this.preferencesHint = preferencesHint;
	}

	/**
	 * Method getSemanticAdapter.
	 * @@return IAdaptable
	 */
	public final IAdaptable getSemanticAdapter() {
		return semanticAdapter;
	}

	/**
	 * Returns the view kind class
	 * 
	 * @@return class of the view kind
	 */
	public abstract Class getViewKind();

	/**
	 * Method extractContainerView.
	 * Return the supplied view's container. This method requires that the supplied
	 * view be <b>incarnated</b> in order to get the container.
	 * @@param view
	 * @@return IContainerView
	 */
	static final View extractContainerView(View view) {
		/*return (IContainerView) ViewService.getInstance().incarnateView(
			ViewUtil.getContainerView(view));*/
		EObject container = view.eContainer();
		if (container instanceof View)
			return (View)container;
		return null;
	}

	/**
	 * Method extractSemanticHint.
	 * Return the supplied view's semantic hint
	 * @@param view
	 * @@return String
	 */
	static final String extractSemanticHint(View view) {
		return view.getType();
	}

	/**
	 * Method extractSemanticAdapter.
	 * @@param umlView
	 * @@return IAdaptable
	 */
	static final IAdaptable extractSemanticAdapter(View view) {
		EObject element = view.getElement();
		if (element  != null)
			return  new EObjectAdapter(element);
		return null;
	}

	/**
	 * Method getSemanticHint.
	 * @@return String
	 */
	public final String getSemanticHint() {
		return semanticHint;
	}

	/**
	 * Gets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry <@@link DiagramPreferencesRegistry>.
	 * 
	 * @@return the preferences hint
	 */
	public final PreferencesHint getPreferencesHint() {
		return preferencesHint;
	}
	
	private String cachingKey;
	private static final String dummyHiny = "dummy";  //$NON-NLS-1$

	public String getCachingKey() {
		if (cachingKey == null)
			cachingKey = determineCachingKey();
		return cachingKey;
	}
	
	private String determineCachingKey() {
		String type = getSemanticHint();
		if (type != null && type.length() > 0)
			return type;
		
		String classId = getSemanticEClassId();
		if (classId != null)
			return classId;
		
		return dummyHiny;
	}

	/** Return the supplied view's underlying notation element's eClass */
	private String getSemanticEClassId() {
		if (semanticAdapter == null)
			return null;
		EObject eObject = (EObject) semanticAdapter.getAdapter(EObject.class);
		if (eObject != null)
			return PackageUtil.getID(EMFCoreUtil.getProxyClass(eObject));
		IElementType type = (IElementType) semanticAdapter.getAdapter(IElementType.class);
		if (type != null)
			PackageUtil.getID(type.getEClass());
		return null;
	}

}
@


1.6
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@@


1.5
log
@bugzilla 115826 gmf-head mmostafa 051220 ViewService should be public
@
text
@a15 1

d18 1
d20 1
a20 2
import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;
import org.eclipse.gmf.runtime.emf.core.util.ProxyUtil;
d164 1
a164 1
			return ProxyUtil.getProxyClassID(eObject);
d167 1
a167 1
			MetaModelUtil.getID(type.getEClass());
@


1.4
log
@Bugzilla#113157 gmf_head cmahoney 051104 Updating tutorial guides and some comments with name changes
@
text
@d141 1
a141 1
	String getCachingKey() {
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d41 1
a41 1
	 * diagramming preference values for properties of shapes, connectors, and
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d21 1
a21 1
import com.ibm.xtools.notation.View;
@

