head	1.10;
access;
symbols
	v20081020-0700:1.10
	v20081015-1925:1.10
	v20081015-1755:1.10
	v20081008-1925:1.10
	v20081008-1755:1.10
	v20080903-1520:1.10
	v20080903-1510:1.10
	v20080807-1333:1.10
	v20080807-1325:1.10
	v20080731-1520:1.10
	v20080725-1738:1.10
	v20080722-1827:1.10
	R2_1_maintenance:1.10.0.6
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080425-1959:1.10
	v20080328-1605:1.10
	v20080222-1200:1.10
	v20080107-1111:1.10
	v20071214-1111:1.10
	v20071130-1111:1.10
	v20071108-0000:1.10
	v20071003-0000:1.10
	v20070915-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.4
	R2_0:1.10
	R4_20:1.10
	RC3_20:1.10
	v20070601-1400:1.10
	v20070518-1300:1.10
	bugzilla111892_group_support:1.10.0.2
	Root_bugzilla111892_group_support:1.10
	v20070420-1000:1.10
	v20070405-2000:1.10
	v20070330-1300:1.10
	v20070208-1800:1.10
	M4_20:1.10
	v20061214-0000:1.10
	M3_20:1.10
	v20061027-1200:1.9.2.1
	v20061013-1330:1.10
	v20060919-0800:1.9.2.1
	v20060907-1100:1.9.2.1
	M1_20:1.9
	v20060831-1500:1.9.2.1
	v20060817-1500:1.9.2.1
	v20060810-1700:1.9.2.1
	v20060803-1200:1.9.2.1
	v20060728-0500:1.9.2.1
	v20060721-1130:1.9.2.1
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060616-1200:1.9
	v20060609-1400:1.9
	v20060531-1730:1.9
	v20060519-0800:1.9
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.5
	I20051217-0925:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.10
date	2006.10.03.15.01.44;	author ahunter;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.12.14.56.48;	author mmostafa;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2006.03.07.02.40.37;	author ldamus;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.28.02.30.53;	author cmahoney;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.23.20.28.42;	author mmostafa;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.20.16.49.29;	author mmostafa;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.15.02.54.45;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.02.23.29.21;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.23.20.55.58;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.23.18.45.42;	author sshaw;	state Exp;
branches;
next	;

1.9.2.1
date	2006.07.17.19.47.59;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.10
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.core.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.common.util.EMap;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.core.services.ViewService;
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.FilteringStyle;
import org.eclipse.gmf.runtime.notation.Guide;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.SortingStyle;
import org.eclipse.gmf.runtime.notation.Style;
import org.eclipse.gmf.runtime.notation.View;

/**
 * A helper class to perform notational refactoring based on a semantic refactoring.
 * The helper provides a typical or generic implementation of the refactoring operation
 * based on the Notation metamodel. However, if the notations being refactoring use other
 * extended notation metamodels, the implementation of this helper class might need to
 * be extended. This can be achieved by directly subclassing this helper class.
 * 
 * @@author melaasar - Maged Elaasar
 */
public class ViewRefactorHelper {

	private PreferencesHint preferencesHint;
	
	/**
	 * Constructs a new <code>ViewRefactorHelper</code> with a given preferences hint 
	 */
	public ViewRefactorHelper() {
		this(PreferencesHint.USE_DEFAULTS);
	}

	/**
	 * Constructs a new <code>ViewRefactorHelper</code> with a given preferences hint 
	 * 
	 * @@param preferencesHint The preferences hint to be used to perform refactoring
	 */
	public ViewRefactorHelper(PreferencesHint preferencesHint) {
		this.preferencesHint = preferencesHint;
	}
	
	/**
	 * Returns the preferences hint
	 * 
	 * @@return The preferences hint
	 */
	public PreferencesHint getPreferencesHint() {
		return preferencesHint;
	}

	/**
	 * Refactors the notations associated with the old element to make them
	 * consistent with the new element.
	 * 
	 * @@param oldElement The semantic element being refactored
	 * @@param newElement The semantic element that replaces the refactored one
	 */
	public void refactor(EObject oldElement, EObject newElement) {

		// refactor views
		Collection views = getReferencingViews(oldElement); 
		for (Iterator i = views.iterator(); i.hasNext();) {
			View oldView = (View) i.next();
			if (oldView instanceof Node) {
				refactorNode((Node)oldView, newElement);
			} else if (oldView instanceof Edge) {
				refactorEdge((Edge)oldView, newElement);
			} else if (oldView instanceof Diagram) {
				refactorDiagram((Diagram)oldView, newElement);
			}
			DestroyElementCommand.destroy(oldView);
		}
		
		// refactor filtering styles
		Collection filterStyles = EMFCoreUtil.getReferencers(oldElement, new EReference[]{NotationPackage.eINSTANCE.getFilteringStyle_FilteredObjects()});
		for (Iterator i = filterStyles.iterator(); i.hasNext();) {
			List filteredObjects = ((FilteringStyle) i.next()).getFilteredObjects();
			if (!filteredObjects.contains(oldElement))
				filteredObjects.add(filteredObjects.indexOf(oldElement), newElement);
			filteredObjects.remove(oldElement);
		}
		
		// refactor sorting styles
		Collection sortingStyles = EMFCoreUtil.getReferencers(oldElement, new EReference[]{NotationPackage.eINSTANCE.getSortingStyle_SortedObjects()});
		for (Iterator i = sortingStyles.iterator(); i.hasNext();) {
			List sortingObjects = ((SortingStyle) i.next()).getSortedObjects();
			if (!sortingObjects.contains(oldElement))
				sortingObjects.add(sortingObjects.indexOf(oldElement), newElement);
			sortingObjects.remove(oldElement);
		}
	}
	
	/**
	 * Refactors an old node to a new one with the given new element
	 * 
	 * @@param oldNode The old node being refactored
	 * @@param newElement The replacing new element 
	 * @@return A new refactored node
	 */
	protected Node refactorNode(Node oldNode, EObject newElement) {
		if (oldNode.eContainingFeature() == NotationPackage.eINSTANCE.getView_PersistedChildren()) {
			Node newNode = createNode(oldNode, newElement);

			if (newNode != null) {
				copyNodeFeatures(oldNode, newNode);
				View container = (View) oldNode.eContainer();
				container.getPersistedChildren().move(container.getPersistedChildren().indexOf(oldNode), newNode);
				refactorGuides(oldNode, newNode);
				return newNode;
			}
		}
		return null;
	}

	/**
	 * Refactors an old edge to a new one with the given new element
	 * 
	 * @@param oldEdge The old edge being refactored
	 * @@param newElement The replacing new element 
	 * @@return A new refactored edge
	 */
	protected Edge refactorEdge(Edge oldEdge, EObject newElement) {
		if (oldEdge.eContainingFeature() == NotationPackage.eINSTANCE.getDiagram_PersistedEdges()) {
			Edge newEdge = createEdge(oldEdge, newElement);
			
			if (newEdge != null) {
				copyEdgeFeatures(oldEdge, newEdge);
				Diagram container = (Diagram)oldEdge.eContainer();
				container.getPersistedEdges().move(container.getPersistedEdges().indexOf(oldEdge), newEdge);
				return newEdge;
			}
		}
		return null;
	}

	/**
	 * Refactors an old diagram to a new one with the given new element
	 * 
	 * @@param oldDiagram The old diagram being refactored
	 * @@param newElement The replacing new element 
	 * @@return A new refactored diagram
	 */
	protected Diagram refactorDiagram(Diagram oldDiagram, EObject newElement) {
		if (oldDiagram.eContainingFeature() == EcorePackage.eINSTANCE.getEAnnotation_Contents()) {
			Diagram newDiagram = createDiagram(oldDiagram, newElement);
			
			if (newDiagram != null) {
				copyDiagramFeatures(oldDiagram, newDiagram);
				EAnnotation container = (EAnnotation) oldDiagram.eContainer(); 
				container.getContents().add(container.getContents().indexOf(oldDiagram), newDiagram);
				refactorDiagramLinks(oldDiagram, newDiagram);
				return newDiagram;
			}
		}
		return null;
	}

	protected void refactorDiagramLinks(Diagram oldDiagram, Diagram newDiagram) {
		Collection links = EMFCoreUtil.getReferencers(oldDiagram, new EReference[]{NotationPackage.eINSTANCE.getView_Element()});
		for (Iterator i = links.iterator(); i.hasNext();) {
			View view = (View) i.next();
			view.setElement(newDiagram);
		}
	}
	
	/**
	 * Copies the notational features of the old node to the new node
	 * 
	 * @@param oldNode The old node to copy features from
	 * @@param newNode The new node to copy features to
	 */
	protected void copyNodeFeatures(Node oldNode, Node newNode) {
		newNode.setLayoutConstraint(oldNode.getLayoutConstraint());
		copyViewFeatures(oldNode, newNode);
	}

	/**
	 * Copies the notational features of the old edge to the new edge
	 * 
	 * @@param oldEdge The old edge to copy features from
	 * @@param newEdge The new edge to copy features to
	 */
	protected void copyEdgeFeatures(Edge oldEdge, Edge newEdge) {
		newEdge.setBendpoints(oldEdge.getBendpoints());
		newEdge.setSourceAnchor(oldEdge.getSourceAnchor());
		newEdge.setTargetAnchor(oldEdge.getTargetAnchor());
		copyViewFeatures(oldEdge, newEdge);
	}

	/**
	 * Copies the notational features of the old diagram to the new diagram
	 * 
	 * @@param oldDiagram The old diagram to copy features from
	 * @@param newDiagram The new diagram to copy features to
	 */
	protected void copyDiagramFeatures(Diagram oldDiagram, Diagram newDiagram) {
		newDiagram.setName(oldDiagram.getName());
		newDiagram.getPersistedEdges().addAll(oldDiagram.getPersistedEdges());
		copyViewFeatures(oldDiagram, newDiagram);
	}

	/**
	 * Copies the notational features of the old view to the new view
	 * 
	 * @@param oldView The old view to copy features from
	 * @@param newView The new view to copy features to
	 */
	protected void copyViewFeatures(View oldView, View newView) {
		copyViewAppearance(oldView, newView, new ArrayList());
		newView.getSourceEdges().addAll(oldView.getSourceEdges());
		newView.getTargetEdges().addAll(oldView.getTargetEdges());
		copyViewChildren(oldView, newView);
	}

	/**
	 * Copies the appearance of the old view to the new view.  Typically this means copying the visibility
	 * and the styles of the root and it's children.
	 * 
	 * @@param oldView The old view to copy style features from
	 * @@param newView The new view to copy style features to
	 * @@param excludeStyles the <code>List</code> of <code>Style.eClass</code> types to exclude
	 * from the copy operation.
	 */
	public void copyViewAppearance(View oldView, View newView, final List excludeStyles) {
		newView.setVisible(oldView.isVisible());
		copyViewStyles(oldView, newView, excludeStyles);
		
		for (Iterator j = new ArrayList(oldView.getPersistedChildren()).iterator(); j.hasNext();) {
			Node oldChildNode = (Node) j.next();
			if (oldView.getElement() == oldChildNode.getElement() && oldChildNode.getType() != null) {
				Node newChildNode = (Node) ViewUtil.getChildBySemanticHint(newView, oldChildNode.getType());
				if (newChildNode != null) {
					copyViewAppearance(oldChildNode, newChildNode, excludeStyles);
				}
			}
		}
	}
	
	/**
	 * Copies the style features of the old view to the new view
	 * 
	 * @@param oldView The old view to copy style features from
	 * @@param newView The new view to copy style features to
	 */
	protected void copyViewStyles(View oldView, View newView) {
		copyViewStyles(oldView, newView, new ArrayList());
	}
	
	/**
	 * Copies all styles feature from the old view to the new view
	 * 
	 * @@param oldView The old view to copy style features from
	 * @@param newView The new view to copy style features to
	 * @@param excludeStyles the <code>List</code> of <code>Style.eClass</code> types to exclude
	 * from the copy operation.
	 */
	protected void copyViewStyles(View oldView, View newView, List excludeStyles) {
		for (Iterator i = oldView.getStyles().iterator(); i.hasNext();) {
			Style oldStyle = (Style) i.next();
			copyViewStyle(oldView, newView, oldStyle, excludeStyles);
		}
	}
	
	/**
	 * Copies the given style features of the old view to the new view
	 * 
	 * @@param oldView The old view to copy style features from
	 * @@param newView The new view to copy style features to
	 * @@param oldStyle The old style to copy
	 * @@param excludeStyles the list of <code>Style.eClass</code> types to exclude
	 */
	protected void copyViewStyle(View oldView, View newView, Style oldStyle, List excludeStyles) {
		// since the same structural feature may appear in styles with different eClass(s)
		// we really need to get the new style that has the feature; which could be of different 
		// eClass than the source style
		
		Map eClassMap = new HashMap();
		for (Iterator j = oldStyle.eClass().getEAllStructuralFeatures().iterator(); j.hasNext();) {
			EStructuralFeature feature = (EStructuralFeature) j.next();
			Style newStyle;
			
			EClass containingStyleEClass = feature.getEContainingClass();
			if (excludeStyles.contains(containingStyleEClass))
				continue;
			
			if (eClassMap.containsKey(feature.getEContainingClass())) {
				newStyle = (Style) eClassMap.get(feature.getEContainingClass());
			} else {
				eClassMap.put(feature.getEContainingClass(), newStyle = newView.getStyle(feature.getEContainingClass()));
			}
			if (newStyle != null) {
				newStyle.eSet(feature, oldStyle.eGet(feature));
			}
		}
	}
	
	/**
	 * Copies the notational properties of the old view children to the new view children
	 * 
	 * @@param oldView The old view to copy children notational features from
	 * @@param newView The new view to copy children notational features to
	 */
	protected void copyViewChildren(View oldView, View newView) {
		for (Iterator j = new ArrayList(oldView.getPersistedChildren()).iterator(); j.hasNext();) {
			Node oldChildNode = (Node) j.next();
			copyViewChild(oldView, newView, oldChildNode);
		}
	}
	
	/**
	 * If the child view has the same element as the parent and also has a type, it is considered a subview
	 * and therefore only its properties are copied to matching subviews (if any) of the new parent.
	 * Otherwise, the default behavior is for the child view to be moved to the new parent
	 * 
	 * @@param oldView The old view to copy children notational features from
	 * @@param newView The new view to copy children notational features to
	 * @@param oldChildNode A child node of the old view
	 */
	protected void copyViewChild(View oldView, View newView, Node oldChildNode) {
		if (oldView.getElement() == oldChildNode.getElement() && oldChildNode.getType() != null) {
			Node newChildNode = (Node) ViewUtil.getChildBySemanticHint(newView, oldChildNode.getType());
			if (newChildNode != null) {
				copyNodeFeatures(oldChildNode, newChildNode);
			}
		} else
			newView.getPersistedChildren().add(oldChildNode);
	}

	/**
	 * Refactors the diagram guides to reference the new node instead of the old one
	 * 
	 * @@param oldNode The old node being refactored
	 * @@param newNode The replacing new node
	 */
	protected final void refactorGuides(Node oldNode, Node newNode) {
		Collection guides = EMFCoreUtil.getReferencers(oldNode, new EReference[]{NotationPackage.eINSTANCE.getNodeEntry_Key()});
		for (Iterator i = guides.iterator(); i.hasNext();) {
			EMap nodeMap =  ((Guide) ((EObject) i.next()).eContainer()).getNodeMap();
			nodeMap.put(newNode, nodeMap.get(oldNode));
			nodeMap.remove(oldNode);
		}
	}

	/**
	 * A utility to get all the views of the given element to be refactored. The implementation
	 * of method delegated to a reverse look up map to get those views. Override if you have
	 * a more efficient way of getting those view or to cover more or less views.
	 * 
	 * @@param element The element referenced by views to be refactored
	 * @@return A collection of views that reference the given element to refactor
	 */
	protected Collection getReferencingViews(EObject element) {
		Collection views = EMFCoreUtil.getReferencers(element, new EReference[]{NotationPackage.eINSTANCE.getView_Element()});

		// remove subviews since they will be refactored with their parent
		for (Iterator i = views.iterator(); i.hasNext();) {
			View view = (View) i.next();
			
			EObject parent = null;
			while ((parent = view.eContainer()) instanceof View) { 
				if (views.contains(parent)) {
					i.remove();
					break;
				}
				view = (View) parent;
			}
		}
		return views;
	}

	/**
	 * A utility to create a new node for the given new element that would replace the given old node.
	 * The method uses default parameters to create the new node for the element. Override and change 
	 * this method if you think this is not the proper way to create a node of this new element.
	 * 
	 * @@param oldNode The old node being refactored
	 * @@param newElement The new element to create a node on
	 * @@return A new node that references the given new element
	 */
	protected Node createNode(Node oldNode, EObject newElement) {
		return ViewService.getInstance().createNode(
			new EObjectAdapter(newElement), 
			(View)oldNode.eContainer(), 
			getNewViewType(oldNode, newElement), 
			ViewUtil.APPEND, 
			preferencesHint);
	}
	
	/**
	 * A utility to create a new edge for the given new element that would replace the given old edge.
	 * The method uses default parameters to create the new edge for the element. Override and change 
	 * this method if you think this is not the proper way to create a edge of this new element.
	 * 
	 * @@param oldEdge The old edge being refactored
	 * @@param newElement The new element to create a edge on
	 * @@return A new edge that references the given new element
	 */
	protected Edge createEdge(Edge oldEdge, EObject newElement) {
		Edge edge = (Edge) ViewService.getInstance().createEdge(
			new EObjectAdapter(newElement), 
			oldEdge.getDiagram(), 
			getNewViewType(oldEdge, newElement), 
			ViewUtil.APPEND, 
			preferencesHint);
		if (edge != null) {
			edge.setSource(oldEdge.getSource());
			edge.setTarget(oldEdge.getTarget());
		}
		return edge;
	}

	/**
	 * A utility to create a new diagram for the given new element that would replace the given old diagram.
	 * The method uses default parameters to create the new diagram for the element. Override and change 
	 * this method if you think this is not the proper way to create a diagram of this new element.
	 * 
	 * @@param oldDiagram The old diagram being refactored
	 * @@param newElement The new element to create a diagram on
	 * @@return A new diagram that references the given new element
	 */
	protected Diagram createDiagram(Diagram oldDiagram, EObject newElement) {
		return ViewService.getInstance().createDiagram(
			new EObjectAdapter(newElement), 
			getNewViewType(oldDiagram, newElement),
			preferencesHint);
	}

	/**
	 * Returns the type of the new view that replaces the old one 
	 * 
	 * @@param oldView The old view being replaced
	 * @@param newElement The new element of the new view
	 * @@return The type of the new view
	 */
	protected String getNewViewType(View oldView, EObject newElement) {
		return oldView.getType();
	}
	
}
@


1.9
log
@bugzilla 141146 gmf-head mmostafa 060512 Remove eroneous restricted disclaimer...
@
text
@d2 1
a2 1
 * Copyright (c) 2005-2006 IBM Corporation and others.
@


1.9.2.1
log
@[150280] gmf_R1_0_maintenance ahunter 060717 Incorrect copyright in some GMF files
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.8
log
@[129773] gmf_head cdamus 060306 EMFCoreUtil.destroy() cannot destroy non-contained dependents
@
text
@d1 10
a10 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.7
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d31 1
d100 1
a100 1
			EMFCoreUtil.destroy(oldView);
@


1.6
log
@bugzilla 119065 gmf-head mmostafa 051224 Enahnce the ViewRefactorHelper utility
@
text
@d29 1
a30 1
import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
d99 1
a99 1
			EObjectUtil.destroy(oldView);
d103 1
a103 1
		Collection filterStyles = EObjectUtil.getReferencers(oldElement, new EReference[]{NotationPackage.eINSTANCE.getFilteringStyle_FilteredObjects()});
d112 1
a112 1
		Collection sortingStyles = EObjectUtil.getReferencers(oldElement, new EReference[]{NotationPackage.eINSTANCE.getSortingStyle_SortedObjects()});
d187 1
a187 1
		Collection links = EObjectUtil.getReferencers(oldDiagram, new EReference[]{NotationPackage.eINSTANCE.getView_Element()});
d364 1
a364 1
		Collection guides = EObjectUtil.getReferencers(oldNode, new EReference[]{NotationPackage.eINSTANCE.getNodeEntry_Key()});
d381 1
a381 1
		Collection views = EObjectUtil.getReferencers(element, new EReference[]{NotationPackage.eINSTANCE.getView_Element()});
@


1.5
log
@bugzilla 115826 gmf-head mmostafa 051220 ViewService should be public
@
text
@a19 1
import org.eclipse.core.runtime.IAdaptable;
d56 7
d78 1
a78 1
	
d106 2
a107 1
			filteredObjects.add(filteredObjects.indexOf(oldElement), newElement);
d115 2
a116 1
			sortingObjects.add(sortingObjects.indexOf(oldElement), newElement);
d140 1
a140 1
		throw new RuntimeException("could not refactor a node for the morphed element"); //$NON-NLS-1$
d161 1
a161 1
		throw new RuntimeException("could not refactor an edge for the morphed element"); //$NON-NLS-1$
d179 1
d183 1
a183 1
		throw new RuntimeException("could not refactor a diagram for the morphed element"); //$NON-NLS-1$
d186 8
d278 1
a278 1
	 * Copies the style features of the old view to the new view
d285 1
a285 1
	protected void copyViewStyles(View oldView, View newView, final List excludeStyles) {
d288 25
a312 4

			// since the same structural feature may appear in styles with different eClass(s)
			// we really need to get the new style that has the feature; which could be of different 
			// eClass than the source style
d314 7
a320 17
			Map eClassMap = new HashMap();
			for (Iterator j = oldStyle.eClass().getEAllStructuralFeatures().iterator(); j.hasNext();) {
				EStructuralFeature feature = (EStructuralFeature) j.next();
				Style newStyle;
				
				EClass containingStyleEClass = feature.getEContainingClass();
				if (excludeStyles.contains(containingStyleEClass))
					continue;
				
				if (eClassMap.containsKey(feature.getEContainingClass())) {
					newStyle = (Style) eClassMap.get(feature.getEContainingClass());
				} else {
					eClassMap.put(feature.getEContainingClass(), newStyle = newView.getStyle(feature.getEContainingClass()));
				}
				if (newStyle != null) {
					newStyle.eSet(feature, oldStyle.eGet(feature));
				}
d339 3
a341 1
	 * Copies the notational properties of the old child node to a corresponding one on under the new view
d381 16
a396 1
		return EObjectUtil.getReferencers(element, new EReference[]{NotationPackage.eINSTANCE.getView_Element()});
d409 6
a414 1
		return createNode(ViewUtil.getContainerView(oldNode), newElement, getNewViewType(oldNode, newElement));	
d427 11
a437 1
		return createEdge(oldEdge.getSource(), oldEdge.getTarget(), newElement, getNewViewType(oldEdge, newElement));	
d450 4
a453 1
		return createDiagram(newElement, getNewViewType(oldDiagram, newElement));	
d455 1
a455 1
	
d464 1
a464 3
		if (oldView instanceof Diagram)
			return ((Diagram)oldView).getType();
		return null;
a466 80
	/**
	 * Creates a diagram with the given context and kind
	 * 
	 * @@param context The diagram element context
	 * @@param kind diagram kind
	 * @@param preferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 * @@return A newly created <code>Diagram</code>
	 */
	private Diagram createDiagram(EObject context, String kind) {
		IAdaptable viewModel = (context != null) ? new EObjectAdapter(context) : null;
		String viewType = (kind != null) ? kind : ""; //$NON-NLS-1$
		return ViewService.getInstance().createDiagram(viewModel, viewType, preferencesHint);
	}
	
	/**
	 * Creates a node for a given eObject and with a given type and inserts it into a given container
	 * 
	 * @@param container The node view container
	 * @@param eObject The node view object context
	 * @@param type The node view type
	 * @@param preferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 * @@return A newly created <code>Node</code>
	 */
	private Node createNode(View container, EObject eObject, String type) {
		IAdaptable viewModel = (eObject != null) ? new EObjectAdapter(eObject) : null;
		String viewType = (type != null) ? type : ""; //$NON-NLS-1$
		View view = ViewService.getInstance().createNode(viewModel, container, viewType, ViewUtil.APPEND, preferencesHint);
		return (view != null) ? (Node)view : null;
	}
	
	/**
	 * Creates an edge for a given eObject and with a given type in the given diagram
	 *
	 * @@param diagram The container diagram 
	 * @@param eObject The edge view object context
	 * @@param type The edge view type
	 * @@param preferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 * @@return A newly created <code>Edge</code>
	 */
	private Edge createEdge(Diagram diagram, EObject eObject, String type) {
		IAdaptable viewModel = (eObject != null) ? new EObjectAdapter(eObject) : null;
		String viewType = (type != null) ? type : ""; //$NON-NLS-1$
		View view = ViewService.getInstance().createEdge(viewModel, diagram, viewType, ViewUtil.APPEND, preferencesHint);
		return (view != null) ? (Edge) view : null;
	}
	
	/**
	 * Creates an edge for a given eObject and with a given type and connects it between a given source and a given target
	 * 
	 * @@param source The edge's source view
	 * @@param target The edge's target view
	 * @@param eObject The edge view object context
	 * @@param type The edge view type
	 * @@param preferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 * @@return A newly created <code>Edge</code>
	 */
	private Edge createEdge(View source, View target, EObject eObject, String type) {
		Edge edge = createEdge(source.getDiagram(), eObject, type);
		if (edge != null) {
			edge.setSource(source);
			edge.setTarget(target);
		}
		return edge;
	}
@


1.4
log
@bugzilla 112986 gmf-head sshaw 051114 Apply Appearance Properties messes up colors on a LED in a Logic Diagram
@
text
@a27 1
import org.eclipse.gmf.runtime.diagram.core.internal.services.view.ViewService;
d29 1
@


1.3
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d23 1
d220 1
a220 2
		newView.setVisible(oldView.isVisible());
		copyViewStyles(oldView, newView);
d227 24
d257 12
d280 5
@


1.2
log
@Bugzilla 109092: gmf_head sshaw 050923 : fixing build errors
@
text
@d419 1
a419 1
		View view = ViewService.getInstance().createConnectorView(viewModel, diagram, viewType, ViewUtil.APPEND, preferencesHint);
@


1.1
log
@bugzilla 110478 gmf-head sshaw Introduce a view refactoring helper based on semantic refactoring

Contributed by: Maged Elaasar
@
text
@d20 1
d29 1
d323 1
a323 1
		return ViewService.getInstance().createNode(ViewUtil.getContainerView(oldNode), newElement, getNewViewType(oldNode, newElement), getPreferencesHint());	
d336 1
a336 1
		return ViewService.getInstance().createEdge(oldEdge.getSource(), oldEdge.getTarget(), newElement, getNewViewType(oldEdge, newElement), getPreferencesHint());	
d349 1
a349 1
		return ViewService.getInstance().createDiagram(newElement, getNewViewType(oldDiagram, newElement), getPreferencesHint());	
d364 81
@

