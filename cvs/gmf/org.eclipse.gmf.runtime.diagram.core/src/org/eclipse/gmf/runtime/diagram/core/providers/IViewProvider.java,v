head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20081015-1925:1.5
	v20081015-1755:1.5
	v20081008-1925:1.5
	v20081008-1755:1.5
	v20080903-1520:1.5
	v20080903-1510:1.5
	v20080807-1333:1.5
	v20080807-1325:1.5
	v20080731-1520:1.5
	v20080725-1738:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.6
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080425-1959:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080107-1111:1.5
	v20071214-1111:1.5
	v20071130-1111:1.5
	v20071108-0000:1.5
	v20071003-0000:1.5
	v20070915-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.4
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070518-1300:1.5
	bugzilla111892_group_support:1.5.0.2
	Root_bugzilla111892_group_support:1.5
	v20070420-1000:1.5
	v20070405-2000:1.5
	v20070330-1300:1.5
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061027-1200:1.4.2.1
	v20061013-1330:1.5
	v20060919-0800:1.4.2.1
	v20060907-1100:1.4
	M1_20:1.4
	v20060831-1500:1.4
	v20060817-1500:1.4
	v20060810-1700:1.4
	v20060803-1200:1.4
	v20060728-0500:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.5
date	2006.10.03.15.01.43;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.24.17.10.42;	author cmahoney;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.09.12.21.24.26;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.15.48.40;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.08.18.58.50;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.09.13.16.43.28;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.5
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.core.providers;

import org.eclipse.core.runtime.IAdaptable;

import org.eclipse.gmf.runtime.common.core.service.IProvider;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@author melaasar, mmostafa
 * 
 * An interface for manipulating the notational model Defines the factory
 * methods for creating the various view elements.
 * <p>
 * This interface is <EM>not</EM> intended to be implemented by clients as new
 * methods may be added in the future. Extend {@@link AbstractViewProvider}
 * instead.
 * </p>
 */
public interface IViewProvider extends IProvider {

	/**
	 * create an <code>Diagram</code> element.
	 * @@param IAdaptable (for semantic element)
	 * @@param diagramKind  indicates the diagram type 
	 * @@param preferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 *  @@return the created <code>Diagram</code>
	 */
	public Diagram createDiagram(
		IAdaptable semanticAdapter,
		String diagramKind, PreferencesHint preferencesHint);

	/** 
	 * create an <code>Edge</code> element.
	 * @@param IAdaptable (for semantic element)
	 * @@param containerView the container view that will contain the created view.
	 * @@param indicates the type of the Edge, it could be used later to determine the edge type
	 * @@param index position in the container view's list of children views.
	 * @@param persisted indicates if the created edge will be persisted or not
	 * @@param preferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 * @@return the created <code>Edge</code>
	 */
	public Edge createEdge(
		IAdaptable semanticAdapter,
		View containerView,
		String semanticHint,
		int index,
		boolean persisted, PreferencesHint preferencesHint);
		
	/** 
	 * create a <code>Node</code>.
	 * @@param IAdaptable (for semantic element)
	 * @@param containerView the container view that will contain the created view.
	 * @@param indicates the type of the view, it could be used later to determine the view type
	 * @@param index position in the container view's list of children views.
	 * @@param persisted indicates if the created view will be persisted or not
	 * @@param preferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 * @@return the created <code>Node</code>
	 */
	public Node createNode(
		IAdaptable semanticAdapter,
		View containerView,
		String semanticHint,
		int index,
		boolean persisted, PreferencesHint preferencesHint);
}
@


1.4
log
@Bugzilla#117537 gmf_head cmahoney 060424 Mark our public interfaces as not meant to be implemented
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
@


1.4.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d25 8
a32 3
 *
 * An interface for manipulating the notational model
 * Defines the factory methods for creating the various view elements.
@


1.2
log
@Bugzilla109092 : rmp_head mmostafa 050912 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Bugzilla 109092  : rumv_head mmostafa 050908 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d18 1
d38 1
d40 1
a40 1
	public Diagram createDiagramView(
d56 1
d58 1
a58 1
	public Edge createConnectorView(
d66 1
a66 1
	 * create an <code>View</code> element.
d77 1
d79 1
a79 1
	public View createNodeView(
@

