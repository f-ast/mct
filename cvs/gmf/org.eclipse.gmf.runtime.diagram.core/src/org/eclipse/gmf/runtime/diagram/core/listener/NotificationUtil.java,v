head	1.8;
access;
symbols
	v20081020-0700:1.8
	v20081015-1925:1.8
	v20081015-1755:1.8
	v20081008-1925:1.8
	v20081008-1755:1.8
	v20080903-1520:1.8
	v20080903-1510:1.8
	v20080807-1333:1.8
	v20080807-1325:1.8
	v20080731-1520:1.8
	v20080725-1738:1.8
	v20080722-1827:1.8
	R2_1_maintenance:1.8.0.6
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080425-1959:1.8
	v20080328-1605:1.8
	v20080222-1200:1.8
	v20080107-1111:1.8
	v20071214-1111:1.8
	v20071130-1111:1.8
	v20071108-0000:1.8
	v20071003-0000:1.8
	v20070915-0000:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.4
	R2_0:1.8
	R4_20:1.8
	RC3_20:1.8
	v20070601-1400:1.8
	v20070518-1300:1.8
	bugzilla111892_group_support:1.8.0.2
	Root_bugzilla111892_group_support:1.8
	v20070420-1000:1.6
	v20070405-2000:1.6
	v20070330-1300:1.6
	v20070208-1800:1.6
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061027-1200:1.5.2.2
	v20061013-1330:1.6
	v20060919-0800:1.5.2.2
	v20060907-1100:1.5.2.1
	M1_20:1.5
	v20060831-1500:1.5.2.1
	v20060817-1500:1.5.2.1
	v20060810-1700:1.5.2.1
	v20060803-1200:1.5.2.1
	v20060728-0500:1.5.2.1
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;


1.8
date	2007.05.16.16.50.40;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	43c4464b36604567;

1.7
date	2007.05.11.22.19.00;	author mmostafa;	state Exp;
branches;
next	1.6;
commitid	45c34644ebd24567;

1.6
date	2006.10.03.15.01.44;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.05.18.20.10;	author mmostafa;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.03.14.14.38.34;	author cmahoney;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.01.22.49.10;	author cmahoney;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.28.02.31.23;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.22.15.42.32;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.07.26.21.44.38;	author mmostafa;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2006.09.13.16.43.28;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.8
log
@gmf_head ahunter 070516 Update Copyright for files changed in 2007
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.core.listener;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.transaction.ResourceSetChangeEvent;

/**
 * Utility class that implements few helper methods around the EMF
 * <code>Notification</code> object
 * 
 * @@author mmostafa
 */
public class NotificationUtil {

	/**
	 * checks if the event resulted in a slot modification (set/unset event)
	 * @@return <tt>true</tt> if the event type is
	 * one of {@@link Notification#SET} or {@@link Notification#UNSET};
	 * otherwise <tt>false</tt>.
	 */
	public static boolean isSlotModified(Notification notification) {
		return notification.getEventType() == Notification.SET || 
			   notification.getEventType() == Notification.UNSET;
	}

	/**
	 * checks if the event resulted in adding an element
	 * @@return <tt>true</tt> if the event type is
	 * one of {@@link Notification#ADD} or {@@link Notification#ADD_MANY};
	 * otherwise <tt>false</tt>.
	 */
	public static boolean isElementAddedToSlot(Notification notification) {
		return notification.getEventType() == Notification.ADD ||
			   notification.getEventType() == Notification.ADD_MANY;
	}

	/**
	 * checks if the event resulted in removing an element
	 * @@return <tt>true</tt> if the event type is
	 * one of {@@link Notification#REMOVE} or {@@link Notification#REMOVE_MANY};
	 * otherwise <tt>false</tt>.
	 */
	public static boolean isElementRemovedFromSlot(Notification notification) {
		return notification.getEventType() == Notification.REMOVE ||
			   notification.getEventType() == Notification.REMOVE_MANY;
	}

	/**
	 * checks if the event is an {@@link Notification.MOVE} event.
	 * @@return <tt>true</tt> if the event type equals
	 * {@@link Notification.MOVE}; otherwise <tt>false</tt>.
	 */
	public static boolean isMove(Notification notification) {
		return notification.getEventType() == Notification.MOVE;
	}

    /**
     * checks if the Notification is a custom notification or not
     * @@return <tt>true</tt> if the noptificatio is custom notification otherwise <tt>false</tt>. 
     */
    public static boolean isCustomNotification(Notification notification) {
        if (notification.getEventType() < 0 || notification.getEventType() >= Notification.EVENT_TYPE_COUNT)
            return true;
        return false;
    }

    /**
     * Collect the deleted objects from all the notifications in the event.
     * 
     * @@param event
     * @@return
     */
    public static Set getDeletedObjects(ResourceSetChangeEvent event) {
        HashSet deletedObjects = new HashSet();
        for (Iterator i = event.getNotifications().iterator(); i.hasNext();) {
            Notification notification = (Notification) i.next();
            int eventType = notification.getEventType();
            if ((eventType == Notification.REMOVE_MANY)
                || (eventType == Notification.REMOVE)) {
                Object feature = notification.getFeature();
                if (feature instanceof EReference
                    && ((EReference) feature).isContainment()) {                    
                    if (eventType == Notification.REMOVE_MANY) {
                        for (Iterator iter = ((Collection) notification
                            .getOldValue()).iterator(); iter.hasNext();) {
                            EObject removedObject = (EObject) iter.next();
                            if (removedObject.eResource() == null) {
                                deletedObjects.add(removedObject);
                            }
                        }
                    } else if (((EObject) notification.getOldValue())
                        .eResource() == null) {
                        deletedObjects.add(notification.getOldValue());
                    }
                }
            }            
        }
        return deletedObjects;
    }

    /**
     * Collect the added objects from all the notifications in the event.
     * 
     * @@param event
     * @@return Set contains all added objects
     */
    public static Set getAddedObjects(ResourceSetChangeEvent event) {
        HashSet addedObjects = new HashSet();
        for (Iterator i = event.getNotifications().iterator(); i.hasNext();) {
            Notification notification = (Notification) i.next();
            int eventType = notification.getEventType();
            if ((eventType == Notification.ADD_MANY)
                || (eventType == Notification.ADD)) {
                Object feature = notification.getFeature();
                if (feature instanceof EReference
                    && ((EReference) feature).isContainment()) {                    
                    if (eventType == Notification.ADD_MANY) {
                        // Mutli value add handling
                        for (Iterator iter = ((Collection) notification
                            .getNewValue()).iterator(); iter.hasNext();) {
                            addedObjects.add(iter.next());
                        }
                    } else {
                        // single value add handling
                        addedObjects.add(notification.getNewValue());
                    }
                }
            }            
        }
        return addedObjects;
    }
    
}
@


1.7
log
@[186637] gmf_head mmostafa 070511 View#setElement is not undone
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d117 32
@


1.5
log
@bugzilla 144693 gmf-head mmostafa 060606 Shape Edit Part does not handle the Unresolve Event any more
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
a11 1

d31 1
a31 1
	
d42 1
a42 1
	
a52 1
	
d64 1
a64 1
	
d73 1
a73 1
    
d83 1
a83 1
    
d94 13
a106 8
            if (notification.getFeature() instanceof EReference
                && ((EReference) notification.getFeature()).isContainment()) {
                if (notification.getEventType() == Notification.REMOVE_MANY) {
                    for (Iterator iter = ((Collection) notification
                        .getOldValue()).iterator(); iter.hasNext();) {
                        EObject removedObject = (EObject) iter.next();
                        if (removedObject.eResource() == null) {
                            deletedObjects.add(notification.getOldValue());
d108 3
d113 1
a113 5
                if (notification.getEventType() == Notification.REMOVE
                    && ((EObject) notification.getOldValue()).eResource() == null) {
                    deletedObjects.add(notification.getOldValue());
                }
            }
d117 1
@


1.5.2.1
log
@[150317] gmf_R1_0_maintenace ylulu 060726  DiagramEventBroker performance could be enhanced
@
text
@d12 1
d32 1
a32 1

d43 1
a43 1

d54 1
d66 1
a66 1

d75 1
a75 1

d85 1
a85 1

d96 8
a103 13
            int eventType = notification.getEventType();
            if ((eventType == Notification.REMOVE_MANY)
                || (eventType == Notification.REMOVE)) {
                Object feature = notification.getFeature();
                if (feature instanceof EReference
                    && ((EReference) feature).isContainment()) {                    
                    if (eventType == Notification.REMOVE_MANY) {
                        for (Iterator iter = ((Collection) notification
                            .getOldValue()).iterator(); iter.hasNext();) {
                            EObject removedObject = (EObject) iter.next();
                            if (removedObject.eResource() == null) {
                                deletedObjects.add(removedObject);
                            }
a104 3
                    } else if (((EObject) notification.getOldValue())
                        .eResource() == null) {
                        deletedObjects.add(notification.getOldValue());
d107 5
a111 1
            }            
a114 1
    
@


1.5.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.4
log
@Bugzilla#130990 gmf_head cmahoney 060313 NotificationUtil.getDeletedObjects() will catch REMOVE_MANY events as well
@
text
@d77 10
@


1.3
log
@Bugzilla#129803 gmf_head cmahoney 060301 Deleting node leaves connection connected to space
@
text
@d15 1
d22 1
d86 15
a100 3
            if (notification.getEventType() == Notification.REMOVE
                && ((EObject) notification.getOldValue()).eResource() == null) {
                deletedObjects.add(notification.getOldValue());
@


1.2
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d15 4
d20 2
d73 18
@


1.1
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@a15 1
import org.eclipse.gmf.runtime.emf.core.EventTypes;
d28 1
a28 1
	 * one of {@@link EventTypes#SET} or {@@link EventTypes#UNSET};
d32 2
a33 2
		return notification.getEventType() == EventTypes.SET || 
			   notification.getEventType() == EventTypes.UNSET;
d39 1
a39 1
	 * one of {@@link EventTypes#ADD} or {@@link EventTypes#ADD_MANY};
d43 2
a44 2
		return notification.getEventType() == EventTypes.ADD ||
			   notification.getEventType() == EventTypes.ADD_MANY;
d51 1
a51 1
	 * one of {@@link EventTypes#REMOVE} or {@@link EventTypes#REMOVE_MANY};
d55 2
a56 11
		return notification.getEventType() == EventTypes.REMOVE ||
			   notification.getEventType() == EventTypes.REMOVE_MANY;
	}

	/**
	 * checks if the event resulted in destroying an element
	 * @@return <tt>true</tt> if the event type equals
	 * {@@link EventTypes#DESTROY}; otherwise <tt>false</tt>.
	 */
	public static boolean isDestroy(Notification notification) {
		return notification.getEventType() == EventTypes.DESTROY;
d60 1
a60 1
	 * checks if the event is an {@@link EventTypes.MOVE} event.
d62 1
a62 1
	 * {@@link EventTypes.MOVE}; otherwise <tt>false</tt>.
d65 1
a65 1
		return notification.getEventType() == EventTypes.MOVE;
@

