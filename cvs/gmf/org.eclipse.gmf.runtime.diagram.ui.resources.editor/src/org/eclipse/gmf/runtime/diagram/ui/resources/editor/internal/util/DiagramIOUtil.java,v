head	1.9;
access;
symbols
	v20081020-0700:1.9
	v20080722-1827:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.4
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080425-1959:1.9
	v20080222-1200:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	RC3_20:1.9
	v20070601-1400:1.9
	v20070330-1300:1.9
	v20070208-1800:1.9
	v20070111-0800:1.8.2.6
	M4_20:1.9
	v20061214-0000:1.9
	M3_20:1.9
	v20061013-1330:1.9
	v20060919-0800:1.8.2.6
	M1_20:1.8
	v20060831-1500:1.8.2.5
	v20060817-1500:1.8.2.4
	v20060803-1200:1.8.2.3
	v20060721-1130:1.8.2.3
	v20060713-1700:1.8.2.2
	R1_0_maintenance:1.8.0.2
	R1_0:1.8
	v20060627-1200:1.8
	v20060616-1200:1.8
	v20060531-1730:1.8
	v20060519-0800:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.5
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.3
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2006.10.03.15.04.48;	author ahunter;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.13.20.19.11;	author ldamus;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2006.04.13.18.48.19;	author mmostafa;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.28.15.47.22;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.23.23.57.06;	author mmostafa;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.28.02.31.07;	author cmahoney;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.24.14.56.52;	author vramaswamy;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.25.19.37.53;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.14.16.52.28;	author sshaw;	state Exp;
branches;
next	;

1.8.2.1
date	2006.07.11.15.13.17;	author ahunter;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2006.07.13.15.10.07;	author mmostafa;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2006.07.20.15.20.05;	author ahunter;	state Exp;
branches;
next	1.8.2.4;

1.8.2.4
date	2006.08.10.20.48.31;	author ahunter;	state Exp;
branches;
next	1.8.2.5;

1.8.2.5
date	2006.08.31.15.09.51;	author mmostafa;	state Exp;
branches;
next	1.8.2.6;

1.8.2.6
date	2006.09.13.16.43.31;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.9
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util;

import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IStorage;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.xmi.FeatureNotFoundException;
import org.eclipse.emf.ecore.xmi.PackageNotFoundException;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorPlugin;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.l10n.EditorMessages;
import org.eclipse.gmf.runtime.emf.core.resources.GMFResourceFactory;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.util.NotationExtendedMetaData;

public class DiagramIOUtil {
	
	// localized labels
	private static String UNABLE_TO_LOAD_DIAGRAM = EditorMessages.Diagram_UNABLE_TO_LOAD_RESOURCE;

	private static String NO_DIAGRAM_IN_RESOURCE = EditorMessages.Diagram_NO_DIAGRAM_IN_RESOURCE;

	private static interface ILoader {
		public Resource load(TransactionalEditingDomain domain, Map loadOptions, IProgressMonitor monitor) throws IOException, CoreException;
	}
	
	private static class FileLoader implements ILoader {
		private IFile fFile;
		public FileLoader(IFile file) {
			assert file != null;
			fFile = file;
		}
		
		public Resource load(TransactionalEditingDomain domain, Map loadOptions, IProgressMonitor monitor) throws IOException, CoreException {
			fFile.refreshLocal(IResource.DEPTH_ZERO, monitor);
			URI uri = URI.createPlatformResourceURI(fFile.getFullPath()
                .toString(), true);
			
			Resource resource = domain.getResourceSet().getResource(uri, false);
			
			if (resource == null) {
				resource = domain.getResourceSet().createResource(uri);
			}
			
			if (!resource.isLoaded()) {
				Map loadingOptions = new HashMap(GMFResourceFactory.getDefaultLoadOptions());
				
                // propogate passed in options to the defaults
                Iterator iter = loadOptions.keySet().iterator();
                while (iter.hasNext()) {
                    Object key = iter.next();
                    loadingOptions.put(key, loadOptions.get(key));
                }
                
                try {
                	resource.load(loadingOptions);
                } catch (IOException e) {
                	resource.unload();
                	throw e;
                }
			}
			
			logResourceErrorsAndWarnings(resource);
						
			return resource;
		}
	}

	private static void logResourceErrorsAndWarnings(Resource resource) {
		for (Iterator iter = resource.getErrors().iterator(); iter.hasNext();) {
			Resource.Diagnostic diagnostic = (Resource.Diagnostic) iter.next();
			Log.error(EditorPlugin.getInstance(), EditorStatusCodes.ERROR, diagnostic.getMessage());				
		}

		for (Iterator iter = resource.getWarnings().iterator(); iter.hasNext();) {
			Resource.Diagnostic diagnostic = (Resource.Diagnostic) iter.next();
			Log.warning(EditorPlugin.getInstance(), EditorStatusCodes.WARNING, diagnostic.getMessage());				
		}
	}

	
	private static class StorageLoader implements ILoader {
		private IStorage fStorage;
		public StorageLoader(IStorage storage) {
			assert storage != null;
			fStorage = storage;
		}
		
		public Resource load(TransactionalEditingDomain editingDomain,
				Map loadOptions, IProgressMonitor monitor)
			throws IOException, CoreException {
            String storageName = fStorage.getName();
            URI uri = URI.createPlatformResourceURI(storageName);
            Resource resource = editingDomain.getResourceSet().getResource(uri,false);
            if (resource == null) {
                resource = editingDomain.getResourceSet().createResource(uri);
            }
            if (!resource.isLoaded()) {
                resource.load(fStorage.getContents(), loadOptions);
            }
			logResourceErrorsAndWarnings(resource);
			return resource;
		}
	}
	
	static public Diagram load(final TransactionalEditingDomain domain, final IFile file, boolean bTryCompatible, IProgressMonitor monitor) throws CoreException {
		FileLoader loader = new FileLoader(file);
		return load(domain, loader, bTryCompatible, monitor);
	}
	
	static public Diagram load(final TransactionalEditingDomain domain, final IStorage storage, boolean bTryCompatible, IProgressMonitor monitor) throws CoreException {
		ILoader loader = null;
		if(storage instanceof IFile) {
			loader = new FileLoader((IFile)storage);
		} else {
			loader = new StorageLoader(storage);
		}
		return load(domain, loader, bTryCompatible, monitor);
	}
	
	/**
	 * load an existing diagram file.
	 * 
	 * @@param file
	 * @@return
	 * @@throws CoreException
	 */
	static private Diagram load(final TransactionalEditingDomain domain, final ILoader loader, boolean bTryCompatible, IProgressMonitor monitor) throws CoreException  {
		Resource notationModel = null;
		try {
			try {	
				// File exists with contents..
				notationModel = loader.load(domain, new HashMap(), monitor);
			} catch (Resource.IOWrappedException e) {
				if (bTryCompatible) {
					Throwable causeError = e.getCause();
					
					if (causeError == null) {
						causeError = e;
					}
					
					String errMsg = causeError.getLocalizedMessage();
					if (causeError instanceof Resource.IOWrappedException) {
						Exception exc = (Exception)((Resource.IOWrappedException) causeError)
							.getCause();
						if (exc != null) {
							causeError = exc;
						}
					}
					
					if ((causeError instanceof PackageNotFoundException 
							|| causeError instanceof ClassNotFoundException
							|| causeError instanceof FeatureNotFoundException)) {
						if (shouldLoadInCompatibilityMode(errMsg)) {
                            Map loadOptions = new HashMap();
            				
                            // We will place a special extended metadata in here to ensure that we can load diagrams
            				//  from older versions of our metamodel.
            				loadOptions.put(XMLResource.OPTION_EXTENDED_META_DATA, new NotationExtendedMetaData());
            				
                            loadOptions.put(XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);
							notationModel = loader.load(domain, loadOptions, monitor);
						} else {
							// user does not want to load in compatibility mode.
							return null; 
						}
					} else {
                        throw e;
					}
				} else {
					throw e;
				}
			}
			if(notationModel == null)
				throw new RuntimeException(UNABLE_TO_LOAD_DIAGRAM);

			Iterator rootContents = notationModel.getContents().iterator();
			while(rootContents.hasNext()) {
				EObject rootElement = (EObject)rootContents.next();
				if(rootElement instanceof Diagram)
					return (Diagram)rootElement;
			}
			
			throw new RuntimeException(NO_DIAGRAM_IN_RESOURCE);
		} catch(Exception e) {
			Trace.catching(EditorPlugin.getInstance(), EditorDebugOptions.EXCEPTIONS_CATCHING, DiagramIOUtil.class, "load(IFile, boolean)", e); //$NON-NLS-1$
			CoreException thrownExcp = null;
			if(e instanceof CoreException) {
				thrownExcp = (CoreException)e;
            } else {
                String exceptionMessage = e.getLocalizedMessage();
                thrownExcp = new CoreException(new Status(IStatus.ERROR,
                    EditorPlugin.getPluginId(), EditorStatusCodes.ERROR,
                    exceptionMessage != null ? exceptionMessage
                        : "load(IFile, boolean)", e)); //$NON-NLS-1$
            }
			Trace.throwing(EditorPlugin.getInstance(), EditorDebugOptions.EXCEPTIONS_THROWING, DiagramIOUtil.class, "load(IFile, boolean)", thrownExcp); //$NON-NLS-1$
			throw thrownExcp;
		}
	}

	static public void save(TransactionalEditingDomain domain, IFile file, Diagram diagram, boolean bKeepUnrecognizedData, IProgressMonitor progressMonitor) throws CoreException {
        Map options = new HashMap();
		if(bKeepUnrecognizedData)
            options.put(XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);
        save(domain, file, diagram, progressMonitor, options);
	}
    
    static public void save(TransactionalEditingDomain domain, IFile file, Diagram diagram, IProgressMonitor progressMonitor) throws CoreException {
        Map options = new HashMap();
        save(domain, file, diagram, progressMonitor, options);
    }
	
	static public void save(TransactionalEditingDomain domain, IFile file, Diagram diagram, IProgressMonitor progressMonitor, Map options) throws CoreException {
		Resource notationModel = ((EObject) diagram).eResource();
		String fileName = file.getFullPath().toOSString();
		notationModel.setURI(URI.createPlatformResourceURI(fileName, true));
		try {
			notationModel.save(options);
		} catch (IOException e) {
			throw new CoreException(new Status(IStatus.ERROR, EditorPlugin
				.getPluginId(), EditorStatusCodes.RESOURCE_FAILURE, e
				.getLocalizedMessage(), null));
		}

		if (progressMonitor != null)
			progressMonitor.done();
		
		logResourceErrorsAndWarnings(notationModel);
	}
	
		/**
	 * @@param errMsg
	 * @@return
	 */
	private static boolean shouldLoadInCompatibilityMode(String errMsg) {
		// no compatibility support at present
		return false;
	}
	
	public static void unload(TransactionalEditingDomain domain, Diagram diagram) {
		diagram.eResource().unload();
	}

	public static boolean hasUnrecognizedData(Resource resource) {
		// no compatibility support at present
		return false;
	}
}
@


1.8
log
@[135652] gmf_head ldamus 060413 The Modeling Preference Page Needs To Be Removed
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d33 1
d89 3
d95 13
d119 10
a128 5
            
			String storagePath = fStorage.getFullPath().toString();
 
			Resource resource = editingDomain.getResourceSet().getResource(
				URI.createPlatformResourceURI(storagePath, true), true);
d163 1
a163 1
					Throwable causeError = e.getWrappedException();
d171 2
a172 2
						Exception exc = ((Resource.IOWrappedException) causeError)
							.getWrappedException();
d195 1
a195 1
						throw new CoreException(new Status(IStatus.ERROR, EditorPlugin.getPluginId(), EditorStatusCodes.ERROR, UNABLE_TO_LOAD_DIAGRAM, causeError));
d217 7
a223 2
			} else
				thrownExcp = new CoreException(new Status(IStatus.ERROR, EditorPlugin.getPluginId(), EditorStatusCodes.ERROR, e.getMessage(), e));
d255 2
a276 1

@


1.8.2.1
log
@[149073] gmf_R1_0_maintenance mgoyal 060711 NPE thrown in DiagramIOUtil
@
text
@d173 1
a173 1
                        throw e;
d196 1
a196 1
				thrownExcp = new CoreException(new Status(IStatus.ERROR, EditorPlugin.getPluginId(), EditorStatusCodes.ERROR, "load(IFile, boolean)", e)); //$NON-NLS-1$
@


1.8.2.2
log
@[110316] gmf_R1_0_maintenance mmostafa  060713 Compiler warning count should be 0 - runtime diagram layer components
@
text
@d141 1
a141 1
					Throwable causeError = e.getCause();
d149 2
a150 2
						Exception exc = (Exception)((Resource.IOWrappedException) causeError)
							.getCause();
d248 1
@


1.8.2.3
log
@[150429] gmf_R1_0_maintenance wdiu 060720 DiagramIOUtil provides bad status message
@
text
@d195 2
a196 7
            } else {
                String exceptionMessage = e.getLocalizedMessage();
                thrownExcp = new CoreException(new Status(IStatus.ERROR,
                    EditorPlugin.getPluginId(), EditorStatusCodes.ERROR,
                    exceptionMessage != null ? exceptionMessage
                        : "load(IFile, boolean)", e)); //$NON-NLS-1$
            }
@


1.8.2.4
log
@[142012] gmf_R_1_0_maintenance tmacdoug 060810 DiagramDocumentProviders should log errors and warnings when resource is loaded
@
text
@a32 1
import org.eclipse.gmf.runtime.common.core.util.Log;
a87 3
			
			logResourceErrorsAndWarnings(resource);
						
a90 13

	private static void logResourceErrorsAndWarnings(Resource resource) {
		for (Iterator iter = resource.getErrors().iterator(); iter.hasNext();) {
			Resource.Diagnostic diagnostic = (Resource.Diagnostic) iter.next();
			Log.error(EditorPlugin.getInstance(), EditorStatusCodes.ERROR, diagnostic.getMessage());				
		}

		for (Iterator iter = resource.getWarnings().iterator(); iter.hasNext();) {
			Resource.Diagnostic diagnostic = (Resource.Diagnostic) iter.next();
			Log.warning(EditorPlugin.getInstance(), EditorStatusCodes.WARNING, diagnostic.getMessage());				
		}
	}

a106 3
			
			logResourceErrorsAndWarnings(resource);
			
a232 2
		
		logResourceErrorsAndWarnings(notationModel);
@


1.8.2.5
log
@[154174] gmf_R1_0_maintenace mmostafa 060830 StorageDocumentProvider isn't able to handle CVS Editor Input properly
patch provided by m goyal
@
text
@d119 6
a124 9
            String storageName = fStorage.getName();
            URI uri = URI.createPlatformResourceURI(storageName);
            Resource resource = editingDomain.getResourceSet().getResource(uri,false);
            if (resource == null) {
                resource = editingDomain.getResourceSet().createResource(uri);
            }
            if (!resource.isLoaded()) {
                resource.load(fStorage.getContents(), loadOptions);
            }
d126 1
@


1.8.2.6
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.7
log
@bugzilla 135406 gmf-head mmostafa 060413 DiagramIOUtil's static public load() should allow specifying options
@
text
@a32 1
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
a33 1
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;
a40 4
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialogWithToggle;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.swt.widgets.Display;
a44 8
	private static String TITLE_OPEN = EditorMessages.compatibility_title_open;

	private static String MESSAGE1_OPEN = EditorMessages.compatibility_message1_open;

	private static String MESSAGE2_OPEN = EditorMessages.compatibility_message2_open;

	private static String MESSAGE3_OPEN = EditorMessages.compatibility_message3_open;

a48 6
	private static String TITLE_SAVE = EditorMessages.compatibility_title_save;

	private static String MESSAGE1_SAVE = EditorMessages.compatibility_message1_save;

	private static String MESSAGE2_SAVE = EditorMessages.compatibility_message2_save;

d235 2
a236 59

		boolean bLoadAgain = false;

		// Check prefs to see how we handle compatibility issues.
		IPreferenceStore prefs = CommonUIPlugin.getDefault()
			.getPreferenceStore();
		// The pref is available on globalPreferancesPage.java
		prefs
			.setDefault(
				org.eclipse.gmf.runtime.common.ui.preferences.IPreferenceConstants.OPEN_UNRECOGNIZED_VERSIONS,
				MessageDialogWithToggle.PROMPT);
		String szOption = prefs
			.getString(org.eclipse.gmf.runtime.common.ui.preferences.IPreferenceConstants.OPEN_UNRECOGNIZED_VERSIONS);

		// Are we prompting the user?
		if (szOption == MessageDialogWithToggle.PROMPT) {

			// Prepare the message
			StringBuffer displayErrors = new StringBuffer();
			displayErrors.append(MESSAGE1_OPEN);
			displayErrors.append(StringStatics.PLATFORM_NEWLINE);

			if (errMsg != null && errMsg.trim().length() > 0) {
				displayErrors.append(StringStatics.PLATFORM_NEWLINE);
				displayErrors.append(errMsg);
			}

			displayErrors.append(StringStatics.PLATFORM_NEWLINE);
			displayErrors.append(StringStatics.PLATFORM_NEWLINE);
			displayErrors.append(MESSAGE2_OPEN);
			displayErrors.append(StringStatics.PLATFORM_NEWLINE);
			displayErrors.append(StringStatics.PLATFORM_NEWLINE);
			displayErrors.append(MESSAGE3_OPEN);

			// Show the message
			MessageDialogWithToggle dlg = MessageDialogWithToggle
				.openYesNoQuestion(Display.getDefault().getActiveShell(),
					TITLE_OPEN, displayErrors.toString(), null, false, null,
					null);

			// Respond to the user's decisions
			bLoadAgain = (dlg.getReturnCode() == IDialogConstants.YES_ID);

			//	More Responding to the user's decisions
			if (true == dlg.getToggleState()) {
				String state = MessageDialogWithToggle.ALWAYS;
				if (false == bLoadAgain) {
					state = MessageDialogWithToggle.NEVER;
				}
				prefs
					.setValue(
						org.eclipse.gmf.runtime.common.ui.preferences.IPreferenceConstants.OPEN_UNRECOGNIZED_VERSIONS,
						state);
			}
		} else {
			bLoadAgain = (szOption == MessageDialogWithToggle.ALWAYS);
		}

		return bLoadAgain;
d244 2
a245 52
		boolean bKeepUnrecognizedData = false;
		// Do we have any tags?
		if ((resource instanceof XMLResource)
			&& (false == ((XMLResource) resource).getEObjectToExtensionMap()
				.isEmpty())) {

			// Check prefs to see how we handle compatibility issues.
			// The pref is available on globalPreferancesPage.java which is in
			// presentation
			IPreferenceStore prefs = CommonUIPlugin.getDefault()
				.getPreferenceStore();
			prefs
				.setDefault(
					org.eclipse.gmf.runtime.common.ui.preferences.IPreferenceConstants.SAVE_UNRECOGNIZED_VERSIONS,
					MessageDialogWithToggle.PROMPT);
			String szOption = prefs
				.getString(org.eclipse.gmf.runtime.common.ui.preferences.IPreferenceConstants.SAVE_UNRECOGNIZED_VERSIONS);

			// Are we prompting the user?
			if (szOption == MessageDialogWithToggle.PROMPT) {

				// Prepare the message
				String display = MESSAGE1_SAVE + StringStatics.PLATFORM_NEWLINE
					+ StringStatics.PLATFORM_NEWLINE + MESSAGE2_SAVE;

				// Show the message
				MessageDialogWithToggle dlg = MessageDialogWithToggle
					.openYesNoQuestion(Display.getDefault().getActiveShell(),
						TITLE_SAVE, display, null, false, null, null);

				// Respond to the user's decisions
				bKeepUnrecognizedData = (dlg.getReturnCode() == IDialogConstants.YES_ID);

				//	More Responding to the user's decisions
				if (true == dlg.getToggleState()) {

					//Warnings say this is not used
					//String state = MessageDialogWithToggle.ALWAYS;
					//if (false == bKeepUnrecognizedData) {
					//	state = MessageDialogWithToggle.NEVER;
					//}
					prefs
						.setValue(
							org.eclipse.gmf.runtime.common.ui.preferences.IPreferenceConstants.SAVE_UNRECOGNIZED_VERSIONS,
							szOption);
				}
			} else if (MessageDialogWithToggle.ALWAYS.equals(szOption)) {
				bKeepUnrecognizedData = true;
			}
		}

		return bKeepUnrecognizedData;
@


1.6
log
@bugzilla 133436 gmf-head sshaw 060328 Remove deprecated reference to MObjectType and MEditingDomain
@
text
@d70 1
a70 1
		public Resource load(TransactionalEditingDomain domain, Map loadOptions, IProgressMonitor monitor) throws CoreException;
d80 1
a80 1
		public Resource load(TransactionalEditingDomain domain, Map loadOptions, IProgressMonitor monitor) throws CoreException {
a92 3
				// We will place a special extended metadata in here to ensure that we can load diagrams
				//  from older versions of our metamodel.
				loadingOptions.put(XMLResource.OPTION_EXTENDED_META_DATA, new NotationExtendedMetaData());
d101 6
a106 5
				try {
					resource.load(loadingOptions);
				} catch (IOException e) {
					// Proceed with an unloaded resource.
				}
d121 1
a121 1
			throws CoreException {
d157 3
a159 4
			// File exists with contents..
			notationModel = loader.load(domain, new HashMap(), monitor);

			} catch (Exception e) {
d161 1
a161 1
					Throwable t = e.getCause();
a162 1
					Throwable causeError = t.getCause();
d164 1
a164 1
						causeError = t;
d166 1
d175 1
d181 5
a225 1
			
d228 5
d367 1
a367 1
			} else if (szOption == MessageDialogWithToggle.ALWAYS) {
@


1.5
log
@bugzilla 128977 gmf-head mmostafa 060323 The Notation Metamodel should change the way that it registers its older namespace URIs
@
text
@a39 1
import org.eclipse.gmf.runtime.emf.core.edit.MResourceOption;
d70 1
a70 1
		public Resource load(TransactionalEditingDomain domain, int loadOptions, IProgressMonitor monitor) throws CoreException;
d80 1
a80 1
		public Resource load(TransactionalEditingDomain domain, int loadOptions, IProgressMonitor monitor) throws CoreException {
d97 7
d122 1
a122 1
				int loadOptions, IProgressMonitor monitor)
d160 1
a160 1
			notationModel = loader.load(domain, 0, monitor);
d182 3
a184 1
							notationModel = loader.load(domain, MResourceOption.COMPATIBILITY_MODE, monitor);
a220 1
		int nOptions = 0;
d222 2
a223 1
			nOptions |= MResourceOption.COMPATIBILITY_MODE;
@


1.4
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d41 1
d43 1
d86 18
a103 1
			Resource resource = domain.getResourceSet().getResource(uri, true);
@


1.3
log
@[122234] gmf_head cbmcgee 060224 MSL Editor:  bug in MSLSave.Escape.convert(String input) - escape strings overwrite input
@
text
@d14 2
a15 1
import java.io.InputStream;
d17 1
d26 1
a28 1
import org.eclipse.emf.ecore.xmi.ClassNotFoundException;
d32 1
a39 1
import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;
a40 1
import org.eclipse.gmf.runtime.emf.core.exceptions.MSLRuntimeException;
d69 1
a69 1
		public Resource load(MEditingDomain domain, int loadOptions, IProgressMonitor monitor) throws CoreException;
d79 1
a79 1
		public Resource load(MEditingDomain domain, int loadOptions, IProgressMonitor monitor) throws CoreException {
d81 2
a82 1
			String fileName = fFile.getLocation().toOSString();
d84 1
a84 1
			Resource resource = domain.loadResource(fileName);
d96 4
a99 2
		public Resource load(MEditingDomain domain, int loadOptions, IProgressMonitor monitor) throws CoreException {
			InputStream contents = fStorage.getContents();
d101 3
a103 7
			
            Resource resource = domain.findResource(storagePath, loadOptions);
            if ( resource == null ) {
                resource = domain.createResource(storagePath);                
            }
            
            domain.loadResource(resource, loadOptions, contents);
d108 1
a108 1
	static public Diagram load(final MEditingDomain domain, final IFile file, boolean bTryCompatible, IProgressMonitor monitor) throws CoreException {
d113 1
a113 1
	static public Diagram load(final MEditingDomain domain, final IStorage storage, boolean bTryCompatible, IProgressMonitor monitor) throws CoreException {
d130 1
a130 1
	static private Diagram load(final MEditingDomain domain, final ILoader loader, boolean bTryCompatible, IProgressMonitor monitor) throws CoreException  {
d134 4
a137 4
				// File exists with contents..
				notationModel = loader.load(domain, 0, monitor);
		     
			} catch (MSLRuntimeException e) {
d192 2
a193 1
	static public void save(MEditingDomain domain, IFile file, Diagram diagram, boolean bOverwrite, boolean bKeepUnrecognizedData, IProgressMonitor progressMonitor) throws CoreException {
a194 2
		if(bOverwrite)
			nOptions = MResourceOption.OVERWRITE_READONLY;
d197 1
a197 1
        save(domain, file, diagram, progressMonitor, nOptions);
d200 11
a210 5
	static public void save(MEditingDomain domain, IFile file, Diagram diagram, IProgressMonitor progressMonitor, int nOptions) throws CoreException {
        Resource notationModel = ((EObject)diagram).eResource();
        String fileName = file.getLocation().toOSString();
        
        domain.saveResourceAs(notationModel, fileName, nOptions);
d212 1
a212 1
		if (progressMonitor != null)		
d216 1
a216 1
	/**
d282 2
a283 3
	public static void unload(MEditingDomain domain, Diagram diagram) {
		Resource resource = diagram.eResource();
		domain.unloadResource(resource);
@


1.2
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d98 6
a103 1
			Resource resource = domain.loadResource(storagePath, loadOptions, contents);
@


1.1
log
@Bugzilla 108928 gmf_head 051114 tmacdoug - org.eclipse.gmf.runtime.diagram.ui.resources.editor API issues
@
text
@a29 5
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialogWithToggle;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.swt.widgets.Display;

d36 1
a36 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.l10n.EditorResourceManager;
d41 4
d48 2
a49 3
	//	localized labels
	private static String TITLE_OPEN = EditorResourceManager
		.getI18NString("compatibility.title_open"); //$NON-NLS-1$
d51 1
a51 2
	private static String MESSAGE1_OPEN = EditorResourceManager
		.getI18NString("compatibility.message1_open"); //$NON-NLS-1$
d53 1
a53 2
	private static String MESSAGE2_OPEN = EditorResourceManager
		.getI18NString("compatibility.message2_open"); //$NON-NLS-1$
d55 5
a59 5
	private static String MESSAGE3_OPEN = EditorResourceManager
		.getI18NString("compatibility.message3_open"); //$NON-NLS-1$
	
	private static String UNABLE_TO_LOAD_DIAGRAM = EditorResourceManager.getI18NString("Diagram.UNABLE_TO_LOAD_RESOURCE"); //$NON-NLS-1$
	private static String NO_DIAGRAM_IN_RESOURCE = EditorResourceManager.getI18NString("Diagram.NO_DIAGRAM_IN_RESOURCE"); //$NON-NLS-1$
d61 1
a61 2
	private static String TITLE_SAVE = EditorResourceManager
	.getI18NString("compatibility.title_save"); //$NON-NLS-1$
d63 1
a63 2
	private static String MESSAGE1_SAVE = EditorResourceManager
	.getI18NString("compatibility.message1_save"); //$NON-NLS-1$
d65 1
a65 2
	private static String MESSAGE2_SAVE = EditorResourceManager
	.getI18NString("compatibility.message2_save"); //$NON-NLS-1$
@

