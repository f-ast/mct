head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080722-1827:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20080222-1200:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070330-1300:1.4
	v20070208-1800:1.4
	v20070111-0800:1.3.2.2
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060831-1500:1.3.2.1
	v20060817-1500:1.3.2.1
	v20060803-1200:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;


1.4
date	2006.10.03.15.04.48;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.02.18.02.28;	author cmahoney;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2006.02.28.02.31.07;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.30.16.12.33;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.08.17.14.49.10;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.43.31;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/
package org.eclipse.gmf.runtime.diagram.ui.resources.editor.document;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EContentAdapter;
import org.eclipse.emf.transaction.NotificationFilter;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.notation.Diagram;


/**
 * Listener for modification events on a diagram.
 * 
 * This listener is well suited for detecting events that make a diagram dirty. 
 * 
 * @@author mgoyal, wdiu
 */
public class DiagramModificationListener extends EContentAdapter {

	private TransactionalEditingDomain editingDomain;

	private NotificationFilter diagramResourceModifiedFilter;
	
	private DiagramDocument document;
	
	/**
	 * Constructs a modification listener which listens to modifications on
	 * a diagram.
	 * 
	 * @@param documentProvider the FileDocumentProvider to handle the document
	 * being dirtied
	 * @@param document the DiagramDocument being dirtied
	 * @@param element the IFileEditorInput that contains the file being saved
	 */
	public DiagramModificationListener(
			AbstractDocumentProvider documentProvider,
			DiagramDocument document) {
		this.document = document;
		Diagram diagram = document.getDiagram();
		editingDomain = TransactionUtil.getEditingDomain(diagram);

		diagramResourceModifiedFilter = NotificationFilter
            .createNotifierFilter(diagram.eResource()).and(
                NotificationFilter.createEventTypeFilter(Notification.SET).or(
                    NotificationFilter
                        .createEventTypeFilter(Notification.UNSET))).and(
                NotificationFilter.createFeatureFilter(Resource.class,
                    Resource.RESOURCE__IS_MODIFIED));
	}

	public void startListening() {
		EList adapters = getEditingDomain().getResourceSet().eAdapters();
		if (!adapters.contains(this)) {
				adapters.add(this);
		}
	}
	
	public void stopListening() {
		getEditingDomain().getResourceSet().eAdapters().remove(this);
	}
	
	/**
	 * Gets the editingDomain.
	 * @@return Returns the editingDomain.
	 */
	protected TransactionalEditingDomain getEditingDomain() {
		return editingDomain;
	}

	protected DiagramDocument getDiagramDocument() {
		return document;
	}
	
	public boolean isAdapterForType(Object type) {
		return type == DiagramModificationListener.class;
	}

	public void notifyChanged(Notification notification) {
		if (notification.getNotifier() instanceof ResourceSet) {
			super.notifyChanged(notification);
		}
		
		if (diagramResourceModifiedFilter.matches(notification)) {
			// provide further filtering not available with the
			// NotificationFilter
			if (getDiagramDocument().getDiagram() != null
				&& notification.getNotifier() instanceof Resource) {
				Resource notifierResource = (Resource) notification
					.getNotifier();
	
				EList contents = notifierResource.getContents();
				if (!contents.isEmpty()) {
					Object root = contents.get(0);
					if (notification.getNewBooleanValue() == true
						&& notification.getOldBooleanValue() == false) {
						if (root instanceof EObject
							&& ((EObject) root).eResource() != null
							&& ((EObject) root).eResource().equals(
								notifierResource)
							&& notifierResource.isLoaded()) {
	
							getDiagramDocument().setContent(getDiagramDocument().getContent());
						}
					}
				}
			}
		}
	}

	public void unsetTarget(Notifier oldTarget) {
		if (oldTarget instanceof ResourceSet) {
		    super.unsetTarget(oldTarget);
		}
	}

	public Notifier getTarget() {
		return null;
	}

	public void setTarget(Notifier newTarget) {
		if (newTarget instanceof ResourceSet) {
		    super.setTarget(newTarget);
		}
	}
	
}
@


1.3
log
@Bugzilla#130380 gmf_head cmahoney 050206 PropertySections will miss UNSET events
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d14 1
d18 2
a19 1
import org.eclipse.emf.transaction.DemultiplexingListener;
a20 1
import org.eclipse.emf.transaction.ResourceSetListener;
d33 5
a37 1
public class DiagramModificationListener {
d39 1
a39 3
	private ResourceSetListener diagramChangeListener = null;
	
	private TransactionalEditingDomain editingDomain;
d51 4
a54 4
			final AbstractDocumentProvider documentProvider,
			final DiagramDocument document) {
		
		final Diagram diagram = document.getDiagram();
d57 1
a57 1
		NotificationFilter diagramResourceModifiedFilter = NotificationFilter
a63 34

		if (diagramChangeListener == null) {
			diagramChangeListener = new DemultiplexingListener(
				diagramResourceModifiedFilter) {

				protected void handleNotification(TransactionalEditingDomain domain,
						Notification notification) {
					// provide further filtering not available with the
					// NotificationFilter
					if (diagram != null
						&& notification.getNotifier() instanceof Resource) {
						Resource notifierResource = (Resource) notification
							.getNotifier();

						EList contents = notifierResource.getContents();
						if (!contents.isEmpty()) {
							Object root = contents.get(0);
							if (notification.getNewBooleanValue() == true
								&& notification.getOldBooleanValue() == false) {
								if (root instanceof EObject
									&& ((EObject) root).eResource() != null
									&& ((EObject) root).eResource().equals(
										notifierResource)
									&& notifierResource.isLoaded()) {

									document.setContent(document.getContent());
								}
							}
						}
					}
				}

			};
		}
d67 4
a70 1
		getEditingDomain().addResourceSetListener(diagramChangeListener);
d74 1
a74 1
		getEditingDomain().removeResourceSetListener(diagramChangeListener);
d85 56
@


1.3.2.1
log
@[150667] gmf_R1_0_maintenance cvogt 060817 Change DiagramModificationListeners to be adapters rather than ResourceSetListeners
@
text
@a13 1
import org.eclipse.emf.common.notify.Notifier;
d17 1
a17 2
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EContentAdapter;
d19 1
d32 4
a35 2
public class DiagramModificationListener extends EContentAdapter {

a36 4

	private NotificationFilter diagramResourceModifiedFilter;
	
	private DiagramDocument document;
d48 4
a51 4
			AbstractDocumentProvider documentProvider,
			DiagramDocument document) {
		this.document = document;
		Diagram diagram = document.getDiagram();
d54 1
a54 1
		diagramResourceModifiedFilter = NotificationFilter
d61 34
d98 1
a98 4
		EList adapters = getEditingDomain().getResourceSet().eAdapters();
		if (!adapters.contains(this)) {
				adapters.add(this);
		}
d102 1
a102 1
		getEditingDomain().getResourceSet().eAdapters().remove(this);
a112 56
	protected DiagramDocument getDiagramDocument() {
		return document;
	}
	
	public boolean isAdapterForType(Object type) {
		return type == DiagramModificationListener.class;
	}

	public void notifyChanged(Notification notification) {
		if (notification.getNotifier() instanceof ResourceSet) {
			super.notifyChanged(notification);
		}
		
		if (diagramResourceModifiedFilter.matches(notification)) {
			// provide further filtering not available with the
			// NotificationFilter
			if (getDiagramDocument().getDiagram() != null
				&& notification.getNotifier() instanceof Resource) {
				Resource notifierResource = (Resource) notification
					.getNotifier();
	
				EList contents = notifierResource.getContents();
				if (!contents.isEmpty()) {
					Object root = contents.get(0);
					if (notification.getNewBooleanValue() == true
						&& notification.getOldBooleanValue() == false) {
						if (root instanceof EObject
							&& ((EObject) root).eResource() != null
							&& ((EObject) root).eResource().equals(
								notifierResource)
							&& notifierResource.isLoaded()) {
	
							getDiagramDocument().setContent(getDiagramDocument().getContent());
						}
					}
				}
			}
		}
	}

	public void unsetTarget(Notifier oldTarget) {
		if (oldTarget instanceof ResourceSet) {
		    super.unsetTarget(oldTarget);
		}
	}

	public Notifier getTarget() {
		return null;
	}

	public void setTarget(Notifier newTarget) {
		if (newTarget instanceof ResourceSet) {
		    super.setTarget(newTarget);
		}
	}
	
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d55 6
a60 5
			.createNotifierFilter(diagram.eResource()).and(
				NotificationFilter.createEventTypeFilter(Notification.SET))
			.and(
				NotificationFilter.createFeatureFilter(Resource.class,
					Resource.RESOURCE__IS_MODIFIED));
@


1.1
log
@gmf_head sshaw 050930 DiagramDocument listener isn't correctly detecting save events
Contributed by: Wayne Diu
@
text
@a12 2
import java.util.List;

d14 1
d17 5
a21 3
import org.eclipse.gmf.runtime.emf.core.edit.MFilter;
import org.eclipse.gmf.runtime.emf.core.edit.MListener;
import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;
d34 3
a36 1
	private MListener diagramChangeListener = null;
d47 26
a72 20
	public DiagramModificationListener(final AbstractDocumentProvider documentProvider, final DiagramDocument document) {
		MFilter diagramResourceModifiedFilter = new MFilter() {
			public boolean matches(Notification notification) {
				Diagram diagram = document.getDiagram();
				Object notifier = notification.getNotifier();
				if(diagram != null && notifier instanceof Resource) {
					Resource diagramResource = diagram.eResource();
					Resource notifierResource = (Resource)notifier;
					if(notifierResource == diagramResource) {
						if (notification.getEventType() == Notification.SET) {
							Resource resource = (Resource) notifier;
							EObject root = ResourceUtil.getFirstRoot(resource);
							int featureID = notification.getFeatureID(Resource.class);
							if (featureID == Resource.RESOURCE__IS_MODIFIED
								&& notification.getNewBooleanValue() == true && notification
									.getOldBooleanValue() == false) {
								if (resource != null && root != null
									&& root.eResource() != null
									&& root.eResource().equals(resource)
									&& resource.isLoaded()) {
d74 12
a85 1
										return true;
d87 1
a87 1
							}				
d91 1
a91 8
				return false;
			};
		};
		if(diagramChangeListener == null) {
			diagramChangeListener = new MListener(diagramResourceModifiedFilter) {
				public void onEvent(List events) {
					document.setContent(document.getContent());
				}
d95 4
d100 2
a101 5
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument#enableDiagramListener()
	 */
	public void startListening() {
		diagramChangeListener.startListening();
d104 3
a106 2
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument#disableDiagramListener()
d108 2
a109 2
	public void stopListening() {
		diagramChangeListener.stopListening();
d111 1
@

