head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080722-1827:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20080222-1200:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070330-1300:1.4
	v20070208-1800:1.4
	v20070111-0800:1.3.2.1
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.1
	M1_20:1.3
	v20060831-1500:1.3
	v20060817-1500:1.3
	v20060803-1200:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.4
date	2006.10.03.15.04.48;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.27.19.48.53;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.26.19;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.38;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.09.13.16.43.31;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util;


import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.jface.dialogs.ErrorDialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.PlatformUI;

import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorPlugin;

/**
 * @@author qili
 * 
 */
public class Util {

    /**
     * The relative path of the elements and relationships icons.
     * It's relative to the icon subdirectory.
     *
     * I use PATH_SEPARATOR since we are not getting an os path.
     */
    protected static final String ELEMENTS_AND_RELATIONSHIPS_PATH = "elementsandrelationships" + StringStatics.PATH_SEPARATOR; //$NON-NLS-1$

    final static String PLUGIN_ID = "org.eclipse.gmf.runtime.diagram.ui.resources.editor"; //$NON-NLS-1$

    static public IProject getProject(IFile file) {
        return file.getProject();
    }

    static public IProject getProject(IEditorPart editor) {
        if (editor == null)
            return null;
        IEditorInput input = editor.getEditorInput();
        if (input == null)
            return null;
        IResource resource =
            (IResource) ((IAdaptable)input).getAdapter(IResource.class);
        if (resource == null)
            return null;
        IProject project = resource.getProject();
        return project;
    }

    static public void logWarning(String s) {
        Log.warning(EditorPlugin.getInstance(), IStatus.OK, s);
    }
    static public void logError(String s) {
        Log.error(EditorPlugin.getInstance(), IStatus.OK, s);
    }
    static public void logInfo(String s) {
        Log.info(EditorPlugin.getInstance(), IStatus.OK, s);
    }

    public static void reportException(CoreException e) {
        final IStatus status = e.getStatus();
        logError(status.getMessage());
        Display display = getStandardDisplay();
        display.asyncExec(new Runnable() {
            public void run() {
                ErrorDialog.openError(null, null, null, status);
            }
        });
    }

    /**
	 * Returns the standard display to be used. The method first checks, if
	 * the thread calling this method has an associated disaply. If so, this
	 * display is returned. Otherwise the method returns the default display.
	 */
	public static Display getStandardDisplay() {
		Display display;
		display= Display.getCurrent();
		if (display == null)
			display= PlatformUI.getWorkbench().getDisplay();
		return display;
	}


    public static void reportException(
        Throwable e,
        final String title,
        String message,
        String pluginId) {
        if (e instanceof InvocationTargetException) {
            e = ((InvocationTargetException)e).getTargetException();
        }
        IStatus status = null;
        if (e instanceof CoreException) {
            reportException((CoreException)e);
            return;
        } else {
            if (message == null)
                message = e.getMessage();
            if (message == null)
                message = e.toString();
            status =
                new org.eclipse.core.runtime.Status(
                    IStatus.ERROR,
                    pluginId,
                    IStatus.OK,
                    message,
                    e);
        }
        logError(message);
        final IStatus fstatus = status;
        Display display = getStandardDisplay();
        display.asyncExec(new Runnable() {
            public void run() {
                ErrorDialog.openError(null, title, null, fstatus);
            }
        });
    }
    
    public static void reportException(
            Throwable e,
            final String title,
            String message) {
    	reportException(e, title, message, PLUGIN_ID);
    }
    
}

@


1.3
log
@bugzilla 135968 gmf-head mmostafa 060427 Thread safety of EditPart handleNotification
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
@


1.3.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d28 1
d98 1
a98 1
			display= Display.getDefault();
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

