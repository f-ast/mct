head	1.6;
access;
symbols
	v20081020-0700:1.6
	v20080722-1827:1.6
	v20080716-1600:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080425-1959:1.6
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	RC3_20:1.6
	v20070601-1400:1.6
	v20070330-1300:1.6
	v20070208-1800:1.6
	v20070111-0800:1.5.2.1
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	v20060919-0800:1.5.2.1
	M1_20:1.5
	v20060831-1500:1.5
	v20060817-1500:1.5
	v20060803-1200:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060531-1730:1.5
	v20060519-0800:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2006.10.03.15.04.49;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.01.22.49.05;	author cmahoney;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.02.28.02.31.07;	author cmahoney;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.17.18.12.18;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.20.16.49.31;	author mmostafa;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.14.16.52.28;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.09.13.16.43.31;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.diagram.ui.resources.editor.util;


import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.Collections;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.core.services.ViewService;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorPlugin;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.operation.IRunnableContext;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.swt.widgets.Shell;


/**
 * Diagram Utility Class for Editor.
 *
 * @@author qili
 * @@canBeSeenBy %level1
 * 
 */
public class EditorUtil {

	/**
	 * Creates a new diagram file resource in the selected container and with
	 * the selected name. Creates any missing resource containers along the
	 * path; does nothing if the container resources already exist. Creates a
	 * new editing domain for this diagram.
	 * <p>
	 * In normal usage, this method is invoked after the user has pressed Finish
	 * on the wizard; the enablement of the Finish button implies that all
	 * controls on on this page currently contain valid values.
	 * </p>
	 * <p>
	 * Note that this page caches the new file once it has been successfully
	 * created; subsequent invocations of this method will answer the same file
	 * resource without attempting to create it again.
	 * </p>
	 * <p>
	 * This method should be called within a workspace modify operation since it
	 * creates resources.
	 * </p>
	 * 
	 * @@param preferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 * 
	 * @@return the created file resource, or <code>null</code> if the file was
	 *         not created
	 */
	public static IFile createNewDiagramFile(
			DiagramFileCreator diagramFileCreator,
			IPath containerFullPath, String fileName,
			InputStream initialContents, final String kind,
			Shell shell, final IProgressMonitor progressMonitor,
			final PreferencesHint preferencesHint) {
		/** cache of newly-created file */
		final IFile newDiagramFile = diagramFileCreator.createNewFile(
			containerFullPath, fileName, initialContents, shell,
			new IRunnableContext() {

				public void run(boolean fork, boolean cancelable,
						IRunnableWithProgress runnable)
					throws InvocationTargetException, InterruptedException {
					runnable.run(progressMonitor);
				}
			});

		// Fill the contents of the file dynamically
		Resource notationModel = null;

		try {
			newDiagramFile.refreshLocal(IResource.DEPTH_ZERO, null); //RATLC00514368
			InputStream stream = newDiagramFile.getContents();
			String completeFileName = newDiagramFile.getFullPath().toString();

			try {
				// Empty file....
                ResourceSet resourceSet = new ResourceSetImpl();
                notationModel = resourceSet.createResource(URI
                    .createPlatformResourceURI(completeFileName, true)); 
			} finally {
				stream.close();
			}

		} catch (Exception e) {
			Trace.catching(EditorPlugin.getInstance(),
				EditorDebugOptions.EXCEPTIONS_CATCHING,
				EditorUtil.class, "createNewDiagramFile", //$NON-NLS-1$
				e);
		}

		if (notationModel != null) {
            View view = ViewService.createDiagram(kind, preferencesHint);

            if (view != null) {
                notationModel.getContents().add(view.getDiagram());
                view.getDiagram().setName(newDiagramFile.getName());
            }
		}
		try {
            notationModel.save(Collections.EMPTY_MAP);
        } catch (IOException e) {
            Trace.catching(EditorPlugin.getInstance(),
                EditorDebugOptions.EXCEPTIONS_CATCHING, EditorUtil.class,
                "createNewDiagramFile", e); //$NON-NLS-1$
            Log.error(EditorPlugin.getInstance(),
                EditorStatusCodes.RESOURCE_FAILURE, e.getLocalizedMessage());
        }
 		return newDiagramFile;
	}

	/**
	 * Gets the default diagram path for a new diagram that will contain the
	 * elements in <code>elements</code>. Returns <code>null</code> if
	 * there is no IVizUIHandler to handle the visualization, or there is a
	 * handler, but it has no default diagram path for the elements.
	 * <P>
	 *
	 * @@param elements
	 *            the list of elements being visualized on a new class diagram
	 * @@param diagramKind
	 *            the kind of diagram we want to create
	 * @@return the default diagram path for a new diagram that will contain the
	 *         elements in <code>elements</code>. Returns <code>null</code>
	 *         if there is no IVizUIHandler to handle the visualization, or
	 *         there is a handler, but it has no default diagram path for the
	 *         elements.
	 */
	public static IPath getDefaultDiagramPath(List elements,
			String diagramKind) {

		IPath path = null;

		return path;
	}

	/**
	 * Method getInitialContents. Gets the initial contents of the UML
	 * Visualizer diagram file. Currently it returns an empty byte stream.
	 *
	 * @@return Byte stream that will initially populate the UML
	 *         Visualizer diagram file.
	 */
	public static InputStream getInitialContents() {
		return new ByteArrayInputStream(new byte[0]);
	}
}@


1.5
log
@Bugzilla#129803 gmf_head cmahoney 060301 Deleting node leaves connection connected to space
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
@


1.5.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.4
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d106 1
a106 1
			String completeFileName = newDiagramFile.getLocation().toOSString();
d112 1
a112 1
                    .createFileURI(completeFileName)); 
@


1.3
log
@bugzilla 110316 gmf-head sshaw 060117 Compiler warning count should be 0 - runtime diagram laye...
@
text
@d17 1
d20 1
d27 1
d29 3
a32 1
import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
a34 2
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;
d37 1
a37 3
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.ui.parts.FileResourceEditorInput;
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;
a41 4
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
a53 77
	 * @@param diagramFileCreator 
	 * @@param containerPath Directory path where the file will be stored
	 * @@param fileName Name of the file to be created
	 * @@param initialContents InputStream of the initial contents of the file if desired
	 * @@param diagramId the id of the editor extension to use
	 * @@param kind diagram kind, check {@@link ViewType} for predefined values
	 * @@param dWindow the workbench window containing the active page
	 * @@param progressMonitor A progress monitor for tracking the progress of the action's execution
	 * @@param openEditor boolean indicating if the editor containing the diagram should be opened
	 * @@param saveDiagram boolean indicating if the diagram is to be saved
	 * @@param preferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 * @@return
	 */
	public static final IFile createAndOpenDiagram(
			DiagramFileCreator diagramFileCreator,
			IPath containerPath, String fileName, String diagramId,
			InputStream initialContents,
			String kind, IWorkbenchWindow dWindow,
			IProgressMonitor progressMonitor, boolean openEditor,
			boolean saveDiagram, PreferencesHint preferencesHint) {
		IFile newFile = EditorUtil.createNewDiagramFile(diagramFileCreator,
			containerPath, fileName, initialContents, kind, dWindow.getShell(),
			progressMonitor, preferencesHint);

		if (newFile != null && openEditor) {
			//Since the file resource was created fine, open it for editing
			// iff requested by the user
			EditorUtil.openDiagram(newFile, dWindow, saveDiagram,
				progressMonitor, diagramId);
			
		}

		return newFile;
	}
	
	/**
	 * @@param file IFile to be opened
	 * @@param dWindow the workbench window containing the active page
	 * @@param saveDiagram boolean indicating if the diagram is to be saved
	 * @@param progressMonitor A progress monitor for tracking the progress of the action's execution
	 * @@param diagramId the id of the editor extension to use
	 * @@return editpart representing opened diagram
	 */
	public static final DiagramEditPart openDiagram(IFile file,
			IWorkbenchWindow dWindow, boolean saveDiagram,
			IProgressMonitor progressMonitor, String diagramId) {
		IEditorPart editorPart = null;
		try {
			//TODO which MEditingDomain to use?
			IWorkbenchPage page = dWindow.getActivePage();
			if (page != null) {
				
				editorPart = PlatformUI.getWorkbench().getActiveWorkbenchWindow()
				.getActivePage().openEditor(new FileResourceEditorInput(file),
					diagramId);

				if (saveDiagram)
					editorPart.doSave(progressMonitor);
			}
			file.refreshLocal(IResource.DEPTH_ZERO, null);
			return ((IDiagramWorkbenchPart) editorPart).getDiagramEditPart();
		} catch (Exception e) {
			Trace.catching(EditorPlugin.getInstance(),
				EditorDebugOptions.EXCEPTIONS_CATCHING,
				EditorUtil.class, "openDiagram", e); //$NON-NLS-1$
		}

		return null;
	}	



	/**
d56 2
a57 1
	 * path; does nothing if the container resources already exist.
d72 1
d78 1
a78 1
	 *
d86 2
a87 1
			Shell shell, final IProgressMonitor progressMonitor, final PreferencesHint preferencesHint) {
d102 1
d110 3
a112 1
				notationModel = ResourceUtil.create(completeFileName, null);//TODO which MEditingDomain to use?
d125 6
a130 13
			final Resource notationModel_ = notationModel;
			MEditingDomainGetter.getMEditingDomain(notationModel_).runAsUnchecked(new MRunnable() {
				public Object run() {
					View view = ViewService
						.createDiagram(kind, preferencesHint);
					
					if (view != null) {
						notationModel_.getContents().add(view.getDiagram());
						view.getDiagram().setName(newDiagramFile.getName());
					}
					return null;
				}
			});
d132 10
a141 2

		return newDiagramFile;
@


1.2
log
@bugzilla 115826 gmf-head mmostafa 051220 ViewService should be public
@
text
@a29 1
import org.eclipse.gmf.runtime.diagram.core.util.ViewType;
@


1.1
log
@Bugzilla 108928 gmf_head 051114 tmacdoug - org.eclipse.gmf.runtime.diagram.ui.resources.editor API issues
@
text
@a25 8
import org.eclipse.jface.operation.IRunnableContext;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;

d29 2
a30 1
import org.eclipse.gmf.runtime.diagram.ui.DiagramUtil;
d39 7
d203 2
a204 2
					View view = DiagramUtil
						.createDiagram(null, kind, preferencesHint);
@

