head	1.5;
access;
symbols
	v20080910-1520:1.5
	v20080722-1827:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080507-1326:1.5
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080322-0000:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070921-0000:1.3
	v20070915-0000:1.3
	v20070903-0000:1.4
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.2
	v20070518-1300:1.1
	v20070504-1000:1.1
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1;
locks; strict;
comment	@# @;


1.5
date	2008.05.07.13.55.37;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	388c4821b4d44567;

1.4
date	2007.08.13.14.11.02;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	65c246c066754567;

1.3
date	2007.05.21.16.38.31;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	4ab64651cb064567;

1.2
date	2007.05.18.21.17.25;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	25e5464e17e24567;

1.1
date	2007.04.04.11.04.48;	author bblajer;	state Exp;
branches;
next	;
commitid	18c54613864d4567;


desc
@@


1.5
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/emf/2002/Ecore";
import "http://www.eclipse.org/emf/2002/GenModel";
import "http://www.eclipse.org/gmf/2008/GenModel";
extension xpt::commands::CommandUtils;
extension xpt::diagram::PhantomUtils;
extension xpt::GenModelUtils;

boolean needsNotationModelRefresher(gmfgen::GenContainerBase gcb) :
	gcb.getChildNodesForNotationModelRefresher().size() > 0
;

boolean needsNotationModelRefresher(gmfgen::GenDiagram diagram) :
	diagram.getChildNodesForNotationModelRefresher().size() > 0 || diagram.getPhantomNodes().size() > 0
;

//Phantom features are not included here 
cached Collection[gmfgen::GenNode] getChildNodesForNotationModelRefresher(gmfgen::GenContainerBase gcb) :
	gcb.getChildNodes().select(e| e.modelFacet != null && e.modelFacet.metaClass != null && !e.modelFacet.isPhantomElement() && e.modelFacet.childMetaFeature != null)
;

Collection[gmfgen::GenNode] getConstraintsInChildren(gmfgen::GenContainerBase gcb) :
	gcb.getChildNodes().select(e| e.modelFacet != null && e.modelFacet.metaClass != null && e.modelFacet.modelElementSelector != null)
;

Collection[genmodel::GenFeature] getChildFeatures(gmfgen::GenContainerBase gcb) :
	//{}.union() provides uniqueness
	{}.union(gcb.getChildNodesForNotationModelRefresher().modelFacet.childMetaFeature)
;

Collection[genmodel::GenFeature] getChildFeaturesForFilter(gmfgen::GenContainerBase gcb) :
	//{}.union() provides uniqueness
	{}.union(gcb.getChildNodesForNotationModelRefresher().modelFacet.childMetaFeatureForFilter())
;

private genmodel::GenFeature childMetaFeatureForFilter(gmfgen::TypeModelFacet modelFacet) :
	modelFacet.childMetaFeature.ecoreFeature.derived ? modelFacet.containmentMetaFeature : modelFacet.childMetaFeature
;

Collection[gmfgen::GenNode] getGenNodes(gmfgen::GenContainerBase genContainerBase, genmodel::GenFeature genFeature) :
JAVA org.eclipse.gmf.internal.codegen.lite.utils.SemanticSyncUtils.getGenNodes(org.eclipse.gmf.codegen.gmfgen.GenContainerBase, org.eclipse.emf.codegen.ecore.genmodel.GenFeature)
;

cached Collection[gmfgen::GenContainerBase] getAllInitableContainers(gmfgen::GenDiagram diagram) :
	diagram.getAllContainersWithChildren().union(diagram.getAllNodes().select(e|e.getInitableCompartments().size() > 0))
;

private Collection[gmfgen::GenContainerBase] getAllContainersWithChildren(gmfgen::GenDiagram diagram) :
	diagram.getAllContainers().select(e| e.needsNotationModelRefresher())
;

cached Collection[gmfgen::GenCompartment] getInitableCompartments(gmfgen::GenNode node) :
	node.compartments.select(e| e.needsNotationModelRefresher())
;

Collection[gmfgen::GenContainerBase] getInitableGrandChildren(gmfgen::GenContainerBase gcb) :
	let allInitableContainers = getAllInitableContainers(gcb.getDiagram()) :
		gcb.getChildNodesForNotationModelRefresher().select(e| allInitableContainers.contains(e))
;
@


1.4
log
@1. Don't cache templates if dynamic templates option is on;
2. [199747] Support shortcuts in the Lite diagrams (including notation model update for links between alien shortcuts);
3. Decorations should be visible;
4. TransactionalUpdateManager: more notifications to be dispatched to parents, make it possible to add more in subclasses;
5. On element creation, it should be given an opportunity to contribute its notational update commands;
6. [199749]: Delete from View supported (request, edit policy, command, UI action);
7. Add @@generated tags where they were missing;
8. ChildNotationModelRefresher: if the child feature is derived transient, notation model refresher should listen to containment feature.
@
text
@d15 1
a15 1
import "http://www.eclipse.org/gmf/2006/GenModel";
@


1.3
log
@Phantoms support
@
text
@d42 9
@


1.2
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d17 2
d24 5
d30 1
a30 1
	gcb.getChildNodes().select(e| e.modelFacet != null && e.modelFacet.metaClass != null && e.modelFacet.childMetaFeature != null)
a61 1

@


1.1
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@d15 1
a15 1
import "http://www.eclipse.org/gmf/2005/GenModel/2.0";
@

