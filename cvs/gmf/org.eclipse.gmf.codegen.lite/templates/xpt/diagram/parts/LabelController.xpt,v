head	1.10;
access;
symbols
	v20080910-1520:1.10
	v20080722-1827:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080507-1326:1.10
	v20080501-1739:1.9
	v20080425-1959:1.9
	v20080322-0000:1.9
	v20071108-0000:1.8
	v20071003-0000:1.8
	v20070921-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.8
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070520-1200:1.5
	v20070518-1300:1.4
	v20070504-1000:1.2
	v20070427-0600:1.2
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1;
locks; strict;
comment	@# @;


1.10
date	2008.05.07.13.55.37;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	388c4821b4d44567;

1.9
date	2008.02.26.22.50.33;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	405e47c497b74567;

1.8
date	2007.07.04.13.22.25;	author bblajer;	state Exp;
branches;
next	1.7;
commitid	405d468b9f0f4567;

1.7
date	2007.06.15.15.36.23;	author bblajer;	state Exp;
branches;
next	1.6;
commitid	f534672b1f74567;

1.6
date	2007.06.12.13.14.41;	author bblajer;	state Exp;
branches;
next	1.5;
commitid	1f30466e9c404567;

1.5
date	2007.05.18.21.17.25;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	25e5464e17e24567;

1.4
date	2007.05.11.11.39.03;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	79e1464455d74567;

1.3
date	2007.05.10.12.29.20;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	26c24643101f4567;

1.2
date	2007.04.24.14.16.48;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	4264462e114e4567;

1.1
date	2007.04.04.11.04.48;	author bblajer;	state Exp;
branches;
next	;
commitid	18c54613864d4567;


desc
@@


1.10
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::diagram::parts::LabelController»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»
«EXTENSION xpt::providers::ParserUtils»

«DEFINE directEditManager FOR gmfgen::GenCommonBase-»
«IF !isReadOnly()-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gef.tools.DirectEditManager manager;

«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.tools.DirectEditManager getManager() {
	if (manager == null) {
		manager = new org.eclipse.gef.tools.DirectEditManager(this, org.eclipse.jface.viewers.TextCellEditor.class, new org.eclipse.gmf.runtime.lite.services.LabelCellEditorLocator(getViewer(), getLabel())) {
			protected void initCellEditor() {
				getCellEditor().setValue(getLabelTextDisplayer().getEditText(«EXPAND xpt::diagram::parts::Common::getViewCode».getElement()));
			}
		};
	}
	return manager;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE performDirectEdit FOR gmfgen::GenCommonBase-»
«IF !isReadOnly()-»
«EXPAND xpt::Common::generatedMemberComment»
protected void performDirectEdit() {
	if («getDiagram().getDiagramEditorUtilQualifiedClassName()».isReadOnly(«EXPAND xpt::diagram::parts::Common::getViewCode».getElement()) || «getDiagram().getDiagramEditorUtilQualifiedClassName()».isReadOnly(«EXPAND xpt::diagram::parts::Common::getViewCode»)) {
		return;
	}
	if (getLabelTextDisplayer() == null) {
		return;
	}
	getManager().show();
}
«ENDIF-»
«ENDDEFINE»

«DEFINE labelDisplayer FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
public static final org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer LABEL_DISPLAYER = createLabelTextDisplayer();

«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer getLabelTextDisplayer() {
	return LABEL_DISPLAYER;
}

«EXPAND xpt::Common::generatedMemberComment»
private static org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer createLabelTextDisplayer() {
«LET getLabelModelFacet() AS facet-»
«IF facet == null-»
«ERROR "Unexpected type"-»
«ELSE-»
«EXPAND createLabelTextDisplayer(isReadOnly()) FOR facet-»
«ENDIF-»
«ENDLET-»
}
«ENDDEFINE»

«DEFINE createLabelTextDisplayer(Boolean isReadOnly) FOR gmfgen::LabelModelFacet-»
// TODO: implement this method
// Ensure that you remove @@generated or mark it @@generated NOT
return null;
«ENDDEFINE»

«DEFINE createLabelTextDisplayer(Boolean isReadOnly) FOR gmfgen::FeatureLabelModelFacet-»
«IF viewMethod.literal == editMethod.literal-»
«LET (Collection[int]){} AS nonNLSHolder-»
return «EXPAND instantiateLabelTextDisplayer(isReadOnly, nonNLSHolder)»;	«FOREACH nonNLSHolder AS index»«EXPAND xpt::Common::nonNLS(index)»«ENDFOREACH»
«ENDLET-»
«ELSE-»
«LET (Collection[int]){} AS nonNLSHolder-»
org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer reader = «EXPAND instantiateLabelTextReader(nonNLSHolder)»;
«ENDLET-»
«LET (Collection[int]){} AS nonNLSHolder-»
org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer writer = «IF isReadOnly»null«ELSE»«EXPAND instantiateLabelTextWriter(nonNLSHolder)»«ENDIF»;
«ENDLET-»
return new org.eclipse.gmf.runtime.lite.edit.parts.labels.CompositeLabelTextDisplayer(reader, writer);
«ENDIF-»
«ENDDEFINE»

«DEFINE features FOR gmfgen::FeatureLabelModelFacet-»
new org.eclipse.emf.ecore.EAttribute[] {«EXPAND MetaModel::MetaFeature FOREACH metaFeatures SEPARATOR ', '»}«-»
«ENDDEFINE»

«DEFINE instantiateLabelTextDisplayer(Boolean isReadOnly, Collection[int] nonNLSHolder) FOR gmfgen::FeatureLabelModelFacet-»
«IF viewMethod.literal == gmfgen::LabelTextAccessMethod::MESSAGE_FORMAT.literal-»
new org.eclipse.gmf.runtime.lite.edit.parts.labels.MessageFormatLabelTextDisplayer(«EXPAND readerPatterns(nonNLSHolder)»«IF !isReadOnly», «EXPAND writerPatterns(nonNLSHolder)»«ENDIF», «EXPAND features»)«-»
«ELSEIF viewMethod.literal == gmfgen::LabelTextAccessMethod::NATIVE.literal-»
	«IF metaFeatures.size() != 1»«ERROR "Unexpected features size for NATIVE label text access method"»«ENDIF-»
new org.eclipse.gmf.runtime.lite.edit.parts.labels.NativeLabelTextDisplayer(«EXPAND features»)«-»
«ELSEIF viewMethod.literal == gmfgen::LabelTextAccessMethod::PRINTF.literal-»
new org.eclipse.gmf.runtime.lite.edit.parts.labels.PrintfLabelTextDisplayer(«EXPAND readerPatterns(nonNLSHolder)», «EXPAND features»)«-»
«ELSE-»
«ERROR "Unexpected label text access method"-»
«ENDIF-»
«ENDDEFINE»

«DEFINE instantiateLabelTextReader(Collection[int] nonNLSHolder) FOR gmfgen::FeatureLabelModelFacet»«EXPAND instantiateLabelTextDisplayer(true, nonNLSHolder)»«ENDDEFINE»

«DEFINE instantiateLabelTextWriter(Collection[int] nonNLSHolder) FOR gmfgen::FeatureLabelModelFacet-»
«IF viewMethod.literal == gmfgen::LabelTextAccessMethod::MESSAGE_FORMAT.literal-»
new org.eclipse.gmf.runtime.lite.edit.parts.labels.MessageFormatLabelTextDisplayer(null, null, «EXPAND writerPatterns(nonNLSHolder)», «EXPAND features»)«-»
«ELSEIF viewMethod.literal == gmfgen::LabelTextAccessMethod::NATIVE.literal-»
	«IF metaFeatures.size() != 1»«ERROR "Unexpected features size for NATIVE label text access method"»«ENDIF-»
new org.eclipse.gmf.runtime.lite.edit.parts.labels.NativeLabelTextDisplayer(«EXPAND features»)«-»
«ELSEIF editMethod.literal == gmfgen::LabelTextAccessMethod::REGEXP.literal-»
new org.eclipse.gmf.runtime.lite.edit.parts.labels.RegexpParser(«EXPAND writerPatterns(nonNLSHolder)», «EXPAND features»)«-»
«ELSE-»
«ERROR "Unexpected label text access method"-»
«ENDIF-»
«ENDDEFINE»

«DEFINE readerPatterns(Collection[int] nonNLSHolder) FOR gmfgen::FeatureLabelModelFacet-»
«EXPAND quote(viewPattern, nonNLSHolder)», «EXPAND quote(isPatternSpecified(editorPattern) ? editorPattern : viewPattern, nonNLSHolder)-»
«ENDDEFINE»

«DEFINE writerPatterns(Collection[int] nonNLSHolder) FOR gmfgen::FeatureLabelModelFacet-»
«EXPAND quote(isPatternSpecified(editPattern) ? editPattern : (isPatternSpecified(editorPattern) ? editorPattern : viewPattern), nonNLSHolder)-»
«ENDDEFINE»

«DEFINE quote(String text, Collection[int] nonNLSHolder) FOR gmfgen::FeatureLabelModelFacet-»
«IF text == null»null«ELSE»"«text»"«nonNLSHolder.add(nonNLSHolder.size() + 1)->""»«ENDIF-»
«ENDDEFINE»

«DEFINE labelText FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
private String defaultText;

«EXPAND xpt::Common::generatedMemberComment»
public void setLabelText(String text) {
	if (text == null || text.length() == 0) {
		text = defaultText;
	}
	getLabel().setText(text);
}

«EXPAND xpt::Common::generatedMemberComment»
protected String getLabelText() {
	if (getLabelTextDisplayer() == null) {
		return defaultText;
	}
	org.eclipse.emf.ecore.EObject element = «EXPAND xpt::diagram::parts::Common::getViewCode».getElement();
	if (element == null) {
		return defaultText;
	}
	String result = getLabelTextDisplayer().getDisplayText(element);
	if (result == null || result.length() == 0) {
		return defaultText;
	}
	return result;
}
«ENDDEFINE»

«DEFINE labelFigure(gmfgen::GenCommonBase label) FOR gmfgen::ParentAssignedViewmap-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.draw2d.IFigure createFigure() {
	// Parent should assign one using «EXPAND xpt::diagram::parts::NodeEditPart::setter» method
	return null;
}

«EXPAND getLabel-»

«EXPAND xpt::Common::generatedMemberComment»
public void «EXPAND xpt::diagram::parts::NodeEditPart::setter»(«getFigureQualifiedClassName()» label) {
	unregisterVisuals();
	setFigure(label);
	«EXPAND initDefaultText-»
	registerVisuals();
	refreshVisuals();
}
«ENDDEFINE»

«DEFINE labelFigure(gmfgen::GenCommonBase label) FOR gmfgen::Viewmap-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.draw2d.IFigure createFigure() {
	«getFigureQualifiedClassName()» label = createLabel();
	«EXPAND initDefaultText-»
	return label;
}

«EXPAND xpt::Common::generatedMemberComment»
protected «getFigureQualifiedClassName()» createLabel() {
	«EXPAND createLabel-»
}

«EXPAND getLabel-»
«ENDDEFINE»

«DEFINE createLabel FOR gmfgen::Viewmap»«ERROR "Unexpected viewmap type: " + this»«ENDDEFINE»

«DEFINE createLabel FOR gmfgen::FigureViewmap-»
return new «getFigureQualifiedClassName()»();
«ENDDEFINE»

«DEFINE createLabel FOR gmfgen::SnippetViewmap-»
return «body»;
«ENDDEFINE»

«DEFINE createLabel FOR gmfgen::InnerClassViewmap-»
return new «getFigureQualifiedClassName()»();
«ENDDEFINE»

«DEFINE initDefaultText FOR gmfgen::Viewmap-»
«IF "org.eclipse.draw2d.Label" == getFigureQualifiedClassName()-»
defaultText = label.getText();
«ELSE-»
if (label instanceof org.eclipse.draw2d.Label) {
	defaultText = label.getText();
} else {
	defaultText = "";	«EXPAND xpt::Common::nonNLS»
}
«ENDIF-»
«ENDDEFINE»

«DEFINE initDefaultText FOR gmfgen::InnerClassViewmap-»
defaultText = label.getText();
«ENDDEFINE»

«DEFINE getLabel FOR gmfgen::Viewmap-»
«EXPAND getLabelComment-»
public org.eclipse.draw2d.Label getLabel() {
	return (org.eclipse.draw2d.Label) getFigure();
}
«ENDDEFINE»

«DEFINE getLabelComment FOR gmfgen::Viewmap-»
«IF ("org.eclipse.draw2d.Label" == getFigureQualifiedClassName())-»
«EXPAND xpt::Common::generatedMemberComment»
«ELSE-»
«EXPAND xpt::Common::generatedMemberComment("TODO: reimplement, since the figure used by this editpart may not be a Label.")»
«ENDIF-»
«ENDDEFINE»

«DEFINE getLabelComment FOR gmfgen::InnerClassViewmap-»
«EXPAND xpt::Common::generatedMemberComment»
«ENDDEFINE»


«DEFINE labelIcon FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.swt.graphics.Image getLabelIcon() {
«IF isElementIcon()-»
	return «getDiagram().getElementTypesQualifiedClassName()».getImage(«EXPAND getElement».eClass());
«ELSE-»
	return null;
«ENDIF-»
}
«ENDDEFINE»

«DEFINE getElement FOR gmfgen::GenCommonBase»«EXPAND xpt::diagram::parts::Common::getViewCode».getElement()«ENDDEFINE»

«DEFINE getElement FOR gmfgen::GenLinkLabel-»
«EXPAND getElement(link) FOR link.modelFacet-»
«ENDDEFINE»

«DEFINE getElement(gmfgen::GenLink link) FOR gmfgen::LinkModelFacet»«ERROR "Unexpected model facet: " + this»«ENDDEFINE»

«DEFINE getElement(gmfgen::GenLink link) FOR gmfgen::TypeLinkModelFacet»getUpdatableParent().«EXPAND xpt::diagram::parts::Common::getViewCode FOR link».getElement()«ENDDEFINE»

«DEFINE getElement(gmfgen::GenLink link) FOR gmfgen::FeatureLinkModelFacet»getUpdatableParent().«EXPAND xpt::diagram::parts::Common::getViewCode FOR link».getTarget().getElement()«ENDDEFINE»

«DEFINE getUpdatableParent FOR gmfgen::GenLabel-»
«EXPAND xpt::Common::generatedMemberComment»
private «getLabelHostQualifiedClassName()» getUpdatableParent() {
	assert getParent() instanceof «getLabelHostQualifiedClassName()»;
	return («getLabelHostQualifiedClassName()») getParent();
}
«ENDDEFINE»

«REM»
The activate/deactivate pair for labels with updatable parents more belongs to the LabelController template.
It is thus referenced from the common activate/deactivate mechanism.
«ENDREM»
«DEFINE activateAdditions FOR gmfgen::GenLabel-»
«getLabelHostQualifiedClassName()» updatableParent = getUpdatableParent();
if (updatableParent != null) {
«IF !viewmap.isFixedFont()-»
	updatableParent.addExternalRefresher(fontColorRefresher);
	updatableParent.addExternalRefresher(fontRefresher);
«ENDIF-»
	updatableParent.addExternalRefresher(getLabelRefresher());
	«EXPAND activateMore-»
}
«ENDDEFINE»

«DEFINE deactivateAdditions FOR gmfgen::GenLabel-»
«getLabelHostQualifiedClassName()» updatableParent = getUpdatableParent();
if (updatableParent != null) {
«IF !viewmap.isFixedFont()-»
	updatableParent.removeExternalRefresher(fontColorRefresher);
	updatableParent.removeExternalRefresher(fontRefresher);
«ENDIF-»
	updatableParent.removeExternalRefresher(getLabelRefresher());
	«EXPAND deactivateMore-»
}
«ENDDEFINE»

«DEFINE activateMore FOR gmfgen::GenLabel»«ENDDEFINE»
«DEFINE deactivateMore FOR gmfgen::GenLabel»«ENDDEFINE»

«DEFINE activateMore FOR gmfgen::GenExternalNodeLabel-»
updatableParent.addExternalRefresher(boundsRefresher);
«ENDDEFINE»

«DEFINE deactivateMore FOR gmfgen::GenExternalNodeLabel-»
updatableParent.removeExternalRefresher(boundsRefresher);
«ENDDEFINE»

«DEFINE activateMore FOR gmfgen::GenLinkLabel-»
updatableParent.addExternalRefresher(boundsRefresher);
«ENDDEFINE»

«DEFINE deactivateMore FOR gmfgen::GenLinkLabel-»
updatableParent.removeExternalRefresher(boundsRefresher);
«ENDDEFINE»
@


1.9
log
@[150177] phase I, refactor existing code: completed - all metamodel access moved to MetaModel template, LiteRT version updated
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.8
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d98 1
a98 1
new org.eclipse.emf.ecore.EAttribute[] {«EXPAND xpt::Common::metaFeatureAccessor FOREACH metaFeatures SEPARATOR ', '»}«-»
@


1.7
log
@i18n for all Lite templates in Xpand
@
text
@d326 1
a326 1
updatableParent.addExternalRefresher(locationRefresher);
d330 1
a330 1
updatableParent.removeExternalRefresher(locationRefresher);
@


1.6
log
@Fix test failures (full RT templates moved to a different place)
@
text
@d83 10
a92 4
return «EXPAND instantiateLabelTextDisplayer(isReadOnly)»;
«ELSE-»
org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer reader = «EXPAND instantiateLabelTextReader»;
org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer writer = «IF isReadOnly»null«ELSE»«EXPAND instantiateLabelTextWriter»«ENDIF»;
d101 1
a101 1
«DEFINE instantiateLabelTextDisplayer(Boolean isReadOnly) FOR gmfgen::FeatureLabelModelFacet-»
d103 1
a103 1
new org.eclipse.gmf.runtime.lite.edit.parts.labels.MessageFormatLabelTextDisplayer(«EXPAND readerPatterns»«IF !isReadOnly», «EXPAND writerPatterns»«ENDIF», «EXPAND features»)«-»
d108 1
a108 1
new org.eclipse.gmf.runtime.lite.edit.parts.labels.PrintfLabelTextDisplayer(«EXPAND readerPatterns», «EXPAND features»)«-»
d114 1
a114 1
«DEFINE instantiateLabelTextReader FOR gmfgen::FeatureLabelModelFacet»«EXPAND instantiateLabelTextDisplayer(true)»«ENDDEFINE»
d116 1
a116 1
«DEFINE instantiateLabelTextWriter FOR gmfgen::FeatureLabelModelFacet-»
d118 1
a118 1
new org.eclipse.gmf.runtime.lite.edit.parts.labels.MessageFormatLabelTextDisplayer(null, null, «EXPAND writerPatterns», «EXPAND features»)«-»
d123 1
a123 1
new org.eclipse.gmf.runtime.lite.edit.parts.labels.RegexpParser(«EXPAND writerPatterns», «EXPAND features»)«-»
d129 2
a130 2
«DEFINE readerPatterns FOR gmfgen::FeatureLabelModelFacet-»
«EXPAND quote(viewPattern)», «EXPAND quote(isPatternSpecified(editorPattern) ? editorPattern : viewPattern)-»
d133 2
a134 2
«DEFINE writerPatterns FOR gmfgen::FeatureLabelModelFacet-»
«EXPAND quote(isPatternSpecified(editPattern) ? editPattern : (isPatternSpecified(editorPattern) ? editorPattern : viewPattern))-»
d137 2
a138 2
«DEFINE quote(String text) FOR gmfgen::FeatureLabelModelFacet-»
«IF text == null»null«ELSE»"«text»"«ENDIF-»
@


1.5
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d18 1
a18 1
«EXTENSION xpt::diagram::providers::ParserUtils»
@


1.4
log
@Labels with undefined label displayer should not be editable;
Empty label text should always be replaced with default text;
Closing and reopening outline should not lead to "widget disposed" exceptions;
Delete outgoing links before deleting element.
Make it easier to set the default text to display in the outline
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.3
log
@[185782]: Support label text access methods in lite GMF runtime;
FeatureLabelModelFacet: default view pattern is now LabelTextAccessMethod-dependent, thus moved to templates (both in full and lite versions)
@
text
@d46 3
d141 3
@


1.2
log
@CanonicalStyle is taken into account while refreshing notational model to reflect changes in underlying domain model;
Update is now centralized and transactional;
Changes to visibility are dispatched to the parent of the affected view as well (was: only to the view itself);
Save options are not reused, for easy modification of the generated code;
Side-affixed children are not considered direct children;
Empty edit-patterns are treated the same way as null patterns (view pattern is used instead).
@
text
@d18 1
d79 7
a85 1
return new org.eclipse.gmf.runtime.lite.edit.parts.labels.SimpleLabelTextDisplayer("«viewPattern»"«IF !isReadOnly», "«(editPattern == null || editPattern.length() == 0) ? viewPattern : editPattern»"«ENDIF», «EXPAND features»);
d89 41
a129 1
new org.eclipse.emf.ecore.EStructuralFeature[] {«EXPAND xpt::Common::metaFeatureAccessor FOREACH metaFeatures SEPARATOR ', '»}«-»
@


1.1
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@d78 1
a78 1
return new org.eclipse.gmf.runtime.lite.edit.parts.labels.SimpleLabelTextDisplayer("«viewPattern»"«IF !isReadOnly», "«editPattern == null ? viewPattern : editPattern»"«ENDIF», «EXPAND features»);
d235 2
a236 5
	updatableParent.addRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);
	updatableParent.addRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_FontHeight(), fontRefresher);
	updatableParent.addRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_FontName(), fontRefresher);
	updatableParent.addRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_Bold(), fontRefresher);
	updatableParent.addRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_Italic(), fontRefresher);
d247 2
a248 5
	updatableParent.removeRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_FontColor(), fontColorRefresher);
	updatableParent.removeRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_FontHeight(), fontRefresher);
	updatableParent.removeRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_FontName(), fontRefresher);
	updatableParent.removeRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_Bold(), fontRefresher);
	updatableParent.removeRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFontStyle_Italic(), fontRefresher);
d259 1
a259 5
updatableParent.addRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLocation_X(), boundsRefresher);
updatableParent.addRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLocation_Y(), boundsRefresher);
updatableParent.addRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getSize_Width(), boundsRefresher);
updatableParent.addRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getSize_Height(), boundsRefresher);
updatableParent.addRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);
d263 1
a263 5
updatableParent.removeRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLocation_X(), boundsRefresher);
updatableParent.removeRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLocation_Y(), boundsRefresher);
updatableParent.removeRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getSize_Width(), boundsRefresher);
updatableParent.removeRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getSize_Height(), boundsRefresher);
updatableParent.removeRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getNode_LayoutConstraint(), boundsRefresher);
d267 1
a267 2
updatableParent.addRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLocation_X(), locationRefresher);
updatableParent.addRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLocation_Y(), locationRefresher);
d271 1
a271 2
updatableParent.removeRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLocation_X(), locationRefresher);
updatableParent.removeRefresher(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLocation_Y(), locationRefresher);
@

