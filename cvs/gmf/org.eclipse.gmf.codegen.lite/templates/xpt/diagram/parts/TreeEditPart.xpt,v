head	1.11;
access;
symbols
	v20080910-1520:1.11
	v20080722-1827:1.11
	v20080716-1642:1.11
	R2_1_maintenance:1.11.0.2
	Root_R2_1_maintenance:1.11
	R2_1_0:1.11
	v20080507-1326:1.11
	v20080501-1739:1.10
	v20080425-1959:1.10
	v20080322-0000:1.10
	v20071108-0000:1.10
	v20071003-0000:1.10
	v20070921-0000:1.8.2.1
	v20070915-0000:1.8
	v20070903-0000:1.10
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070614-1400:1.8
	v20070608-1300:1.8
	v20070601-1400:1.8
	v20070525-1500:1.8
	v20070520-1200:1.8
	v20070518-1300:1.7
	v20070504-1000:1.3
	v20070427-0600:1.3
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1;
locks; strict;
comment	@# @;


1.11
date	2008.05.07.13.55.37;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	388c4821b4d44567;

1.10
date	2007.08.15.09.27.47;	author bblajer;	state Exp;
branches;
next	1.9;
commitid	58cf46c2c7134567;

1.9
date	2007.07.04.13.22.25;	author bblajer;	state Exp;
branches;
next	1.8;
commitid	405d468b9f0f4567;

1.8
date	2007.05.18.21.17.25;	author atikhomirov;	state Exp;
branches
	1.8.2.1;
next	1.7;
commitid	25e5464e17e24567;

1.7
date	2007.05.11.11.39.03;	author bblajer;	state Exp;
branches;
next	1.6;
commitid	79e1464455d74567;

1.6
date	2007.05.10.12.25.47;	author bblajer;	state Exp;
branches;
next	1.5;
commitid	7a4c46430f4a4567;

1.5
date	2007.05.04.17.46.29;	author bblajer;	state Exp;
branches;
next	1.4;
commitid	62fb463b71754567;

1.4
date	2007.05.04.14.08.43;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	464d463b3e6a4567;

1.3
date	2007.04.24.14.30.24;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	311c462e14804567;

1.2
date	2007.04.24.14.16.48;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	4264462e114e4567;

1.1
date	2007.04.04.11.04.48;	author bblajer;	state Exp;
branches;
next	;
commitid	18c54613864d4567;

1.8.2.1
date	2007.09.17.16.02.13;	author bblajer;	state Exp;
branches;
next	;
commitid	7b9846eea5004567;


desc
@@


1.11
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::diagram::policies::ComponentEditPolicy»
«EXTENSION xpt::diagram::parts::TreeEditPart»
«EXTENSION xpt::diagram::parts::Common»
«EXTENSION xpt::diagram::LinkFinder»

«DEFINE getAdapterClause FOR gmfgen::GenCommonBase-»
«IF needsTreeEditPartAdapter()-»
if (org.eclipse.gef.TreeEditPart.class == key) {
	return getTreeEditPartAdapter();
}
«ENDIF-»
«ENDDEFINE»

«DEFINE getTreeEditPartAdapter FOR gmfgen::GenCommonBase-»
«IF needsTreeEditPartAdapter()-»
«EXPAND xpt::Common::generatedMemberComment»
private «EXPAND className» myTreeEditPartAdapter;

«EXPAND xpt::Common::generatedMemberComment»
private «EXPAND className» getTreeEditPartAdapter() {
	if (myTreeEditPartAdapter == null) {
		myTreeEditPartAdapter = new «EXPAND className»();
	}
	return myTreeEditPartAdapter;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE TreeEditPart FOR gmfgen::GenCommonBase-»
«IF needsTreeEditPartAdapter()-»
	«EXPAND xpt::Common::generatedClassComment»
private class «EXPAND className» extends org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart {
	«EXPAND ctors-»
	«EXPAND createEditPolicies-»
	«EXPAND listeners-»
	«EXPAND setWidget-»
«LET getPrimaryLabel() AS primaryLabel-»
	«EXPAND createLabelTextDisplayer(primaryLabel)-»
	«EXPAND getImage(primaryLabel)-»
	«EXPAND getPrimaryLabel(primaryLabel)-»
«ENDLET-»
	«EXPAND getModelChildren-»
	«EXPAND additions-»
}
«ELSE»«ERROR "Unexpected Type"»«ENDIF-»
«ENDDEFINE»

«DEFINE setWidget FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
public void setWidget(org.eclipse.swt.widgets.Widget widget) {
	if (widget == null) {
		myTreeEditPartAdapter = null;
	}
	super.setWidget(widget);
}
«ENDDEFINE»

«DEFINE ctors FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND className»() {
		super(«EXPAND xpt::diagram::parts::Common::getViewCode», «getDiagram().editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemProvidersAdapterFactory());
	}
«ENDDEFINE»

«DEFINE createEditPolicies FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void createEditPolicies() {
		«EXPAND installComponentEditPolicy-»
«IF needsTreeDirectEditPolicy()-»
		«EXPAND installDirectEditPolicy-»
«ENDIF-»
	}
«ENDDEFINE»

«DEFINE installComponentEditPolicy FOR gmfgen::GenCommonBase-»
installEditPolicy(org.eclipse.gef.EditPolicy.COMPONENT_ROLE, «EXPAND instantiateComponentEditPolicy»);
«ENDDEFINE»

«DEFINE instantiateComponentEditPolicyPrim FOR gmfgen::GenCommonBase»new «EXPAND xpt::diagram::policies::ComponentEditPolicy::qualifiedClassName»()«ENDDEFINE»

«DEFINE instantiateComponentEditPolicy FOR gmfgen::GenDiagram»new org.eclipse.gef.editpolicies.RootComponentEditPolicy()«ENDDEFINE»

«DEFINE instantiateComponentEditPolicy FOR gmfgen::GenCommonBase-»
«IF needsGetGraphicalEditPart()-»
new «EXPAND xpt::diagram::policies::ComponentEditPolicy::qualifiedClassName»() {
	protected org.eclipse.gef.GraphicalEditPart getGraphicalEditPart() {
		return «editPartClassName».this;
	}
}«ELSE»«EXPAND instantiateComponentEditPolicyPrim»«ENDIF-»
«ENDDEFINE»

«DEFINE installDirectEditPolicy FOR gmfgen::GenCommonBase-»
installEditPolicy(org.eclipse.gef.EditPolicy.DIRECT_EDIT_ROLE, new org.eclipse.gmf.runtime.lite.edit.policies.LabelDirectEditPolicy());
«ENDDEFINE»

«DEFINE listeners FOR gmfgen::GenCommonBase-»
«ENDDEFINE»

«DEFINE listeners FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	public void activate() {
		myUpdateManager = new org.eclipse.gmf.runtime.lite.edit.parts.update.TransactionalUpdateManager(getViewer());
		getViewer().setProperty(org.eclipse.gmf.runtime.lite.edit.parts.update.TransactionalUpdateManager.class.getName(), myUpdateManager);
		super.activate();
		getTransactionalUpdateManager().install(org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(getNotationView()));
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void deactivate() {
		getTransactionalUpdateManager().uninstall();
		super.deactivate();
		org.eclipse.gmf.runtime.lite.edit.parts.update.TransactionalUpdateManager updateManager = (org.eclipse.gmf.runtime.lite.edit.parts.update.TransactionalUpdateManager) getViewer().getProperty(org.eclipse.gmf.runtime.lite.edit.parts.update.TransactionalUpdateManager.class.getName());
		if (updateManager != null) {
			updateManager.dispose();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.lite.edit.parts.update.TransactionalUpdateManager getTransactionalUpdateManager() {
		return myUpdateManager;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.lite.edit.parts.update.TransactionalUpdateManager myUpdateManager;
«ENDDEFINE»

«REM»Nodes and links share the same template«ENDREM»
«DEFINE createLabelTextDisplayer(gmfgen::GenLabel primaryLabel) FOR gmfgen::GenCommonBase-»
«IF primaryLabel != null-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer createLabelTextDisplayer() {
	«primaryLabel.getEditPartQualifiedClassName()» primaryLabelEditPart = getPrimaryLabelEditPart();
	if (primaryLabelEditPart != null) {
		return primaryLabelEditPart.getLabelTextDisplayer();
	}
	return super.createLabelTextDisplayer();
}
«ENDIF-»
«ENDDEFINE»

«REM»For diagrams, use text displayer from the base class«ENDREM»
«DEFINE createLabelTextDisplayer(gmfgen::GenLabel primaryLabel) FOR gmfgen::GenDiagram-»
«ENDDEFINE»

«DEFINE createLabelTextDisplayer(gmfgen::GenLabel primaryLabel) FOR gmfgen::GenChildLabelNode-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer createLabelTextDisplayer() {
			return «editPartClassName».this.getLabelTextDisplayer();
		}
«ENDDEFINE»

«DEFINE getImage(gmfgen::GenLabel primaryLabel) FOR gmfgen::GenCommonBase-»
«IF primaryLabel != null-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.swt.graphics.Image getImage() {
	«primaryLabel.getEditPartQualifiedClassName()» primaryLabelEditPart = getPrimaryLabelEditPart();
	if (primaryLabelEditPart != null) {
		return primaryLabelEditPart.getLabelIcon();
	}
	return null;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE getImage(gmfgen::GenLabel primaryLabel) FOR gmfgen::GenDiagram-»
«ENDDEFINE»

«DEFINE getImage(gmfgen::GenLabel primaryLabel) FOR gmfgen::GenChildLabelNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.swt.graphics.Image getImage() {
	return «editPartClassName».this.getLabelIcon();
}
«ENDDEFINE»

«DEFINE getPrimaryLabel(gmfgen::GenLabel primaryLabel) FOR gmfgen::GenCommonBase-»
«IF primaryLabel != null-»
«EXPAND xpt::Common::generatedMemberComment»
private «primaryLabel.getEditPartQualifiedClassName()» getPrimaryLabelEditPart() {
	if (!isActive() || !«editPartClassName».this.isActive()) {
		return null;
	}
	for(java.util.Iterator it = «EXPAND xpt::diagram::parts::Common::getViewCode».getChildren().iterator(); it.hasNext(); ) {
		org.eclipse.gmf.runtime.notation.View nextChild = (org.eclipse.gmf.runtime.notation.View)it.next();
		if («getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(nextChild) == «primaryLabel.getEditPartQualifiedClassName()».VISUAL_ID) {
			return («primaryLabel.getEditPartQualifiedClassName()») «editPartClassName».this.getViewer().getEditPartRegistry().get(nextChild);
		}
	}
	return null;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE getPrimaryLabel(gmfgen::GenLabel primaryLabel) FOR gmfgen::GenChildLabelNode-»
«ENDDEFINE»

«DEFINE getPrimaryLabel(gmfgen::GenLabel primaryLabel) FOR gmfgen::GenDiagram-»
«ENDDEFINE»

«DEFINE getModelChildren FOR gmfgen::GenCommonBase-»
«ENDDEFINE»

«DEFINE getModelChildren FOR gmfgen::GenChildLabelNode-»
	«EXPAND xpt::Common::generatedClassComment»
	protected java.util.List getModelChildren() {
		return java.util.Collections.EMPTY_LIST;
	}
«ENDDEFINE»

«DEFINE getModelChildren FOR gmfgen::GenLink-»
	«EXPAND xpt::Common::generatedMemberComment("Since labels are not selectable edit parts, they are filtered from the overview as well.")»
	protected java.util.List getModelChildren() {
		java.util.List result = new java.util.ArrayList();
		for (java.util.Iterator it = getNotationView().getSourceEdges().iterator(); it.hasNext(); ) {
			org.eclipse.gmf.runtime.notation.Edge next = (org.eclipse.gmf.runtime.notation.Edge) it.next();
			if (next.isVisible()) {
				result.add(next);
			}
		}
		return result;
	}
«ENDDEFINE»

«DEFINE getModelChildren FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment("Since compartments and labels are not selectable edit parts, they are filtered from the overview as well.")»
	protected java.util.List getModelChildren() {
		java.util.List result = new java.util.ArrayList();
		for(java.util.Iterator it = getNotationView().getVisibleChildren().iterator(); it.hasNext(); ) {
			org.eclipse.gmf.runtime.notation.View next = (org.eclipse.gmf.runtime.notation.View) it.next();
			switch («getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(next)) {
«EXPAND addChildren FOREACH childNodes-»
«EXPAND addChildren FOREACH compartments-»
			}
		}
		for (java.util.Iterator it = getNotationView().getSourceEdges().iterator(); it.hasNext(); ) {
			org.eclipse.gmf.runtime.notation.Edge next = (org.eclipse.gmf.runtime.notation.Edge) it.next();
			if (next.isVisible()) {
				result.add(next);
			}
		}
		return result;
	}
«ENDDEFINE»

«DEFINE addChildren FOR gmfgen::GenNode-»
case «getEditPartQualifiedClassName()».VISUAL_ID:
	result.add(next);
	break;
«ENDDEFINE»

«DEFINE addChildren FOR gmfgen::GenCompartment-»
case «getEditPartQualifiedClassName()».VISUAL_ID: {
	org.eclipse.gmf.runtime.notation.DrawerStyle style = (org.eclipse.gmf.runtime.notation.DrawerStyle) next.getStyle(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getDrawerStyle());
	if (style != null && style.isCollapsed()) {
		break;
	}
	result.addAll(next.getVisibleChildren());
	break;
}
«ENDDEFINE»

«DEFINE className FOR gmfgen::GenCommonBase»TreeEditPartAdapter«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenCommonBase-»
«ENDDEFINE»
@


1.10
log
@prevent possible NPE when the graphical edit part is no longer active (and tree edit part still is)
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.9
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@d195 3
@


1.8
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@a16 1
«EXTENSION xpt::diagram::policies::ClassNames»
d95 1
a95 1
«DEFINE instantiateComponentEditPolicyPrim FOR gmfgen::GenCommonBase»new «getComponentEditPolicyQualifiedClassName()»()«ENDDEFINE»
d101 1
a101 1
new «getComponentEditPolicyQualifiedClassName()»() {
@


1.8.2.1
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator)
@
text
@d17 1
d96 1
a96 1
«DEFINE instantiateComponentEditPolicyPrim FOR gmfgen::GenCommonBase»new «EXPAND xpt::diagram::policies::ComponentEditPolicy::qualifiedClassName»()«ENDDEFINE»
d102 1
a102 1
new «EXPAND xpt::diagram::policies::ComponentEditPolicy::qualifiedClassName»() {
@


1.7
log
@Labels with undefined label displayer should not be editable;
Empty label text should always be replaced with default text;
Closing and reopening outline should not lead to "widget disposed" exceptions;
Delete outgoing links before deleting element.
Make it easier to set the default text to display in the outline
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.6
log
@Compilation error when multiple element appear in the same compartment (duplicate var declaration) -- FIXED
@
text
@d18 1
d53 1
d65 10
d101 1
a101 2
«LET incomingLinks().select(e| {e.modelFacet}.typeSelect(gmfgen::TypeLinkModelFacet).size() > 0) AS incomingTypeLinks-»
«IF incomingTypeLinks.size() > 0-»
a106 1
«ENDLET-»
@


1.5
log
@[170078]: Remove link with class from the domain model on deleting link's destination (as applied to links-to-links)
@
text
@d255 1
a255 1
case «getEditPartQualifiedClassName()».VISUAL_ID:
d262 1
@


1.4
log
@1. Links to links;
2. Exception from TreeEditPartViewer (in the outline) while closing the diagram editor (because unregister is not called, only deactivate) fixed;
3. instead of rerouting a link to an end that does not support it, remove the link
@
text
@d20 1
d84 1
a84 1
«DEFINE instantiateComponentEditPolicy FOR gmfgen::GenCommonBase»new «getComponentEditPolicyQualifiedClassName()»()«ENDDEFINE»
d88 3
a90 1
«DEFINE instantiateComponentEditPolicy FOR gmfgen::GenNode-»
d95 2
a96 1
}«-»
@


1.3
log
@Unregister what has been registered
@
text
@d104 5
a108 3
	protected void register() {
		super.register();
		getViewer().setProperty(org.eclipse.gmf.runtime.lite.edit.parts.update.TransactionalUpdateManager.class.getName(), new org.eclipse.gmf.runtime.lite.edit.parts.update.TransactionalUpdateManager(getViewer()));
d112 3
a114 1
	protected void unregister() {
a118 1
		super.unregister();
d122 2
a123 3
	public void activate() {
		super.activate();
		getTransactionalUpdateManager().install(org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(getNotationView()));
d127 1
a127 4
	public void deactivate() {
		getTransactionalUpdateManager().uninstall();
		super.deactivate();
	}
d212 8
a219 1
		return java.util.Collections.EMPTY_LIST;
a228 4
			org.eclipse.gmf.runtime.notation.DrawerStyle style = (org.eclipse.gmf.runtime.notation.DrawerStyle) next.getStyle(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getDrawerStyle());
			if (style != null && style.isCollapsed()) {
				continue;
			}
d252 4
@


1.2
log
@CanonicalStyle is taken into account while refreshing notational model to reflect changes in underlying domain model;
Update is now centralized and transactional;
Changes to visibility are dispatched to the parent of the affected view as well (was: only to the view itself);
Save options are not reused, for easy modification of the generated code;
Side-affixed children are not considered direct children;
Empty edit-patterns are treated the same way as null patterns (view pattern is used instead).
@
text
@d110 9
@


1.1
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@d104 6
d112 1
a112 3
		if (!getNotationView().eAdapters().contains(getTreeUpdateManager())) {
			getNotationView().eAdapters().add(getTreeUpdateManager());
		}
d117 1
a117 1
		getNotationView().eAdapters().remove(getTreeUpdateManager());
a119 11

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager getTreeUpdateManager() {
		if (treeUpdateManager == null) {
			treeUpdateManager = new org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager(getViewer());
		}
		return treeUpdateManager;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.lite.edit.parts.update.UpdateManager treeUpdateManager;
@

