head	1.7;
access;
symbols
	v20080910-1520:1.7
	v20080722-1827:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080507-1326:1.7
	v20080501-1739:1.5
	v20080425-1959:1.5
	v20080322-0000:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070921-0000:1.3.2.1
	v20070915-0000:1.3
	v20070903-0000:1.4
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070518-1300:1.2
	v20070504-1000:1.2
	v20070427-0600:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2;
locks; strict;
comment	@# @;


1.7
date	2008.05.07.13.55.39;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	388c4821b4d44567;

1.6
date	2008.05.05.19.03.57;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	abf481f5a1d4567;

1.5
date	2008.04.14.08.37.50;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	1b0b480317de4567;

1.4
date	2007.07.04.13.22.26;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	405d468b9f0f4567;

1.3
date	2007.05.18.21.17.26;	author atikhomirov;	state Exp;
branches
	1.3.2.1;
next	1.2;
commitid	25e5464e17e24567;

1.2
date	2007.02.08.18.06.31;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	53645cb66a64567;

1.1
date	2007.02.02.17.14.33;	author bblajer;	state Exp;
branches;
next	;
commitid	78d445c371764567;

1.3.2.1
date	2007.09.17.16.02.13;	author bblajer;	state Exp;
branches;
next	;
commitid	7b9846eea5004567;


desc
@@


1.7
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/emf/2002/Ecore";
import "http://www.eclipse.org/gmf/2008/GenModel";

extension xpt::GenAuditRoot reexport;

boolean validationNeeded(gmfgen::GenDiagram diagram) :
	diagram.validationEnabled || diagram.editorGen.hasAudits()
;

//TODO: introduce into the gmfgen model
String getConstraintAdapterLocalClassName(gmfgen::GenAuditRule rule) :
	"Adapter" + (rule.root.rules.indexOf(rule) + 1)
;

String toStringLiteral(String strValue) :
JAVA org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(java.lang.String)
;

List[gmfgen::GenMetricRule] getMetricRules(gmfgen::GenDiagram diagram) :
	diagram.editorGen.metrics.metrics.select(e| e.rule != null && e.target != null && e.target.getContext() != null)
;
@


1.6
log
@[228913] useless code removed
@
text
@d14 1
a14 1
import "http://www.eclipse.org/gmf/2006/GenModel";
@


1.5
log
@[226149] Refactor Validation/Constraints: explicit context groupings instead of ID matching, unused IClientSelectors implementations are no longer generated, less custom code in the model, odd approach with map (semanticCtxIdMap) replaced with in-place VisualID check.
@
text
@a26 16
List[gmfgen::GenAuditRule] getJavaAuditRules(gmfgen::GenDiagram diagram) :
	diagram.editorGen.audits.rules.select(e| e.rule != null && diagram.editorGen.expressionProviders.getProvider(e.rule).isJavaExpressionProvider())
;

List[gmfgen::GenMetricRule] getJavaMetricRules(gmfgen::GenDiagram diagram) :
	diagram.editorGen.metrics.metrics.select(e| e.rule != null && e.target != null && e.target.getContext() != null && diagram.editorGen.expressionProviders.getProvider(e.rule).isJavaExpressionProvider())
;

private boolean isJavaExpressionProvider(gmfgen::GenExpressionProviderBase gepb) :
	false
;

private boolean isJavaExpressionProvider(gmfgen::GenJavaExpressionProvider gepb) :
	true
;

a33 1

@


1.4
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corp.
d16 2
d19 1
a19 43
	diagram.validationEnabled || (diagram.editorGen.audits != null && diagram.editorGen.audits.rules.size() > 0)
;

boolean hasNotationModelAudit(gmfgen::GenDiagram diagram) :
	let audits = diagram.editorGen.audits : 
		(audits == null ? false : 
		audits.rules.select(e| e.target.isNotationModelAudit()).size() > 0)
;

boolean isNotationModelAudit(gmfgen::GenAuditable auditable) :
	false
;

boolean isNotationModelAudit(gmfgen::GenDiagramElementTarget diagramElementTarget) :
	true
;

boolean isNotationModelAudit(gmfgen::GenNotationElementTarget notationElementTarget) :
	true
;

cached Collection[String] getClientContextIDs(gmfgen::GenAuditRoot audits) :
	{}.union(audits.rules.select(e| e.target != null).collect(e| e.target.getClientContextID()))
;

cached List[gmfgen::GenAuditRule] getAuditsForClientContextID(gmfgen::GenAuditRoot audits, String clientContextId) :
	audits.rules.select(e| e.target != null && e.target.getClientContextID() == clientContextId)
;

boolean usesNotationContextSwitch(gmfgen::GenAuditRoot audits) :
	audits.rules.select(e| {e.target}.typeSelect(gmfgen::GenDiagramElementTarget).size() > 0).size() > 0
;

List[gmfgen::GenCommonBase] getViewsThatNeedSelectorClass(gmfgen::GenAuditRoot audits) :
	audits.rules.collect(e| e.target.getViewsThatNeedSelectorClass()).flatten()
;

List[gmfgen::GenCommonBase] getViewsThatNeedSelectorClass(gmfgen::GenAuditable auditable) :
	{}
;

List[gmfgen::GenCommonBase] getViewsThatNeedSelectorClass(gmfgen::GenDiagramElementTarget diagramElementTarget) :
	diagramElementTarget.element
@


1.3
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d19 72
@


1.3.2.1
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator)
@
text
@a18 72

boolean hasNotationModelAudit(gmfgen::GenDiagram diagram) :
	let audits = diagram.editorGen.audits : 
		(audits == null ? false : 
		audits.rules.select(e| e.target.isNotationModelAudit()).size() > 0)
;

boolean isNotationModelAudit(gmfgen::GenAuditable auditable) :
	false
;

boolean isNotationModelAudit(gmfgen::GenDiagramElementTarget diagramElementTarget) :
	true
;

boolean isNotationModelAudit(gmfgen::GenNotationElementTarget notationElementTarget) :
	true
;

cached Collection[String] getClientContextIDs(gmfgen::GenAuditRoot audits) :
	{}.union(audits.rules.select(e| e.target != null).collect(e| e.target.getClientContextID()))
;

cached List[gmfgen::GenAuditRule] getAuditsForClientContextID(gmfgen::GenAuditRoot audits, String clientContextId) :
	audits.rules.select(e| e.target != null && e.target.getClientContextID() == clientContextId)
;

boolean usesNotationContextSwitch(gmfgen::GenAuditRoot audits) :
	audits.rules.select(e| {e.target}.typeSelect(gmfgen::GenDiagramElementTarget).size() > 0).size() > 0
;

List[gmfgen::GenCommonBase] getViewsThatNeedSelectorClass(gmfgen::GenAuditRoot audits) :
	audits.rules.collect(e| e.target.getViewsThatNeedSelectorClass()).flatten()
;

List[gmfgen::GenCommonBase] getViewsThatNeedSelectorClass(gmfgen::GenAuditable auditable) :
	{}
;

List[gmfgen::GenCommonBase] getViewsThatNeedSelectorClass(gmfgen::GenDiagramElementTarget diagramElementTarget) :
	diagramElementTarget.element
;

//TODO: introduce into the gmfgen model
String getConstraintAdapterLocalClassName(gmfgen::GenAuditRule rule) :
	"Adapter" + (rule.root.rules.indexOf(rule) + 1)
;

List[gmfgen::GenAuditRule] getJavaAuditRules(gmfgen::GenDiagram diagram) :
	diagram.editorGen.audits.rules.select(e| e.rule != null && diagram.editorGen.expressionProviders.getProvider(e.rule).isJavaExpressionProvider())
;

List[gmfgen::GenMetricRule] getJavaMetricRules(gmfgen::GenDiagram diagram) :
	diagram.editorGen.metrics.metrics.select(e| e.rule != null && e.target != null && e.target.getContext() != null && diagram.editorGen.expressionProviders.getProvider(e.rule).isJavaExpressionProvider())
;

private boolean isJavaExpressionProvider(gmfgen::GenExpressionProviderBase gepb) :
	false
;

private boolean isJavaExpressionProvider(gmfgen::GenJavaExpressionProvider gepb) :
	true
;

String toStringLiteral(String strValue) :
JAVA org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(java.lang.String)
;

List[gmfgen::GenMetricRule] getMetricRules(gmfgen::GenDiagram diagram) :
	diagram.editorGen.metrics.metrics.select(e| e.rule != null && e.target != null && e.target.getContext() != null)
;

@


1.2
log
@refactor GenAuditContainer: flatten hierarchy as it fits most for templates we write
@
text
@d14 1
a14 1
import "http://www.eclipse.org/gmf/2005/GenModel/2.0";
@


1.1
log
@[172664]: Provide audits and metrics for Lite diagrams (including view-based and RCP) + validation decorators + validation markers (for non-RCP case);
Several templates are rewritten with xpand;
lite-specific TextEmitter is back (otherwise importManager is sometimes passed to xpand templates)
@
text
@d17 1
a17 1
	diagram.validationEnabled || (diagram.editorGen.audits != null && diagram.editorGen.audits.getAllAuditRules().size() > 0)
@

