head	1.13;
access;
symbols
	v20080910-1520:1.13
	RC3_20:1.12
	v20070614-1400:1.12
	v20070608-1300:1.12
	v20070601-1400:1.12
	v20070525-1500:1.12
	v20070520-1200:1.12
	v20070518-1300:1.12
	v20070504-1000:1.11
	v20070427-0600:1.11
	v20070420-1000:1.11
	v20070413-1300:1.11
	v20070405-1100:1.11
	v20070403-1500:1.11
	v20070330-1300:1.11
	v20060330-1300:1.11
	v20070322-1100:1.11
	v20060316-0600:1.11
	v20070307-0700:1.11
	v20070228-2000:1.11
	v20070221-1500:1.10
	v20070208-1800:1.10
	v20070103-0300:1.10
	M4_20:1.10
	v20061222-1800:1.10
	v20061214-0000:1.10
	v20061120-1300:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061013-1330:1.6
	v20061005-1700:1.4
	M1_20:1.5
	v20060904-1500:1.5
	v20060824-1600:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060620-0400:1.4
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-1300:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.2
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2007.06.20.10.16.10;	author bblajer;	state dead;
branches;
next	1.12;
commitid	37dd4678fe694567;

1.12
date	2007.05.18.13.54.13;	author bblajer;	state Exp;
branches;
next	1.11;
commitid	4090464db0054567;

1.11
date	2007.02.23.16.19.36;	author bblajer;	state Exp;
branches;
next	1.10;
commitid	496945df14164567;

1.10
date	2006.11.24.15.05.16;	author bblajer;	state Exp;
branches;
next	1.9;
commitid	524b45670a2b4567;

1.9
date	2006.11.22.16.27.49;	author bblajer;	state Exp;
branches;
next	1.8;
commitid	35045647a844567;

1.8
date	2006.11.03.18.05.39;	author bblajer;	state Exp;
branches;
next	1.7;

1.7
date	2006.10.17.14.50.08;	author bblajer;	state Exp;
branches;
next	1.6;

1.6
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.01.16.14.09;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.25.14.22.15;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.26.11.58.49;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.19.19.42.29;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Rewrite /editor/* templates in XPand;
Use common template to generate code that creates an editing domain in various places;
OpenDiagramEditPolicy: package statement was missing.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.editor" class="PaletteFactoryGenerator"
    imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0]; 
final Palette palette = genDiagram.getPalette();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

importManager.emitPackageStatement(stringBuffer);

importManager.addImport("org.eclipse.gef.Tool");
importManager.addImport("org.eclipse.gef.Request");
importManager.addImport("org.eclipse.gef.tools.CreationTool");
importManager.addImport("org.eclipse.gef.tools.ConnectionCreationTool");
importManager.addImport("org.eclipse.gef.palette.PaletteContainer");
importManager.addImport("org.eclipse.gef.palette.PaletteDrawer");
importManager.addImport("org.eclipse.gef.palette.PaletteGroup");
importManager.addImport("org.eclipse.gef.palette.PaletteRoot");
importManager.addImport("org.eclipse.gef.palette.ConnectionCreationToolEntry");
importManager.addImport("org.eclipse.gef.palette.MarqueeToolEntry");
importManager.addImport("org.eclipse.gef.palette.ToolEntry");
importManager.addImport("org.eclipse.jface.resource.ImageDescriptor");
importManager.addImport("org.eclipse.emf.edit.provider.IItemLabelProvider");
importManager.addImport("org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry");
importManager.addImport("org.eclipse.emf.common.notify.AdapterFactory");

importManager.registerInnerClass("LinkToolEntry");
importManager.registerInnerClass("NodeToolEntry");

importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class <%=palette.getFactoryClassName()%> {
	/**
	 * @@generated
	 */
	private final AdapterFactory domainAdapterFactory;

	/**
	 * @@generated
	 */
	public <%=palette.getFactoryClassName()%>(AdapterFactory domainAdapterFactory) {
		this.domainAdapterFactory = domainAdapterFactory;
	}

	/**
	 * @@generated
	 */
	public void contributeToPalette(PaletteRoot paletteRoot) {
<%
if (!palette.definesStandardTools()) {
%>
        PaletteGroup controls = new PaletteGroup("Controls");
        paletteRoot.add(controls);

        ToolEntry tool = new <%=importManager.getImportedName("org.eclipse.gef.palette.SelectionToolEntry")%>();
        controls.add(tool);
        paletteRoot.setDefaultEntry(tool);

        controls.add(new MarqueeToolEntry());
<%
}
%>
<%
List toolGroups = palette.getGroups();
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
%>
		paletteRoot.add(<%=toolGroup.getCreateMethodName()%>());
<%}%>
	}

<%
final LinkedList<ToolGroup> toolGroupsQueue = new LinkedList<ToolGroup>();
for(Object next : palette.getGroups()) {
	toolGroupsQueue.add((ToolGroup) next);
}
final LinkedList<AbstractToolEntry> toolsQueue = new LinkedList<AbstractToolEntry>();
while (!toolGroupsQueue.isEmpty()) {
	// TODO with additional counter and hashmap here it's easy to add "unique method name" check here
	ToolGroup toolGroup = (ToolGroup) toolGroupsQueue.removeFirst();
%>

	/**
	 * @@generated
	 */
	private PaletteContainer <%=toolGroup.getCreateMethodName()%>() {
<%if (toolGroup.isCollapse() && toolGroup.isToolsOnly()) { %>
		PaletteContainer paletteContainer = new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteDrawer")%>("<%=toolGroup.getTitle()%>");
<%} else if (toolGroup.isStack()) {%>
<%
	if (toolGroup.getSmallIconPath() != null) {
%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> smallImage = <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.findImageDescriptor("<%=toolGroup.getSmallIconPath()%>");
<%
	} else {
%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> smallImage = null;
<%
	}
%>
		PaletteContainer paletteContainer = new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteStack")%>("<%=toolGroup.getTitle()%>", <%if (toolGroup.getDescription() != null) {%>"<%=toolGroup.getDescription()%>"<%} else {%>null<%}%>, smallImage);
<%} else {%>
		PaletteContainer paletteContainer = new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteGroup")%>("<%=toolGroup.getTitle()%>");
<%}
if (toolGroup.getDescription() != null) {%>
		paletteContainer.setDescription("<%=toolGroup.getDescription()%>");
<%}%>
<%
boolean hasDeclaredPaletteEntry = false;
for(Iterator it = toolGroup.getEntries().iterator(); it.hasNext(); ) {
	ToolGroupItem groupItem = (ToolGroupItem) it.next();
	if (groupItem instanceof AbstractToolEntry) {
		toolsQueue.add((AbstractToolEntry) groupItem);
%>
		<%if (!hasDeclaredPaletteEntry) { hasDeclaredPaletteEntry = true;%> <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteEntry")%> <%}%>paletteEntry = <%=((AbstractToolEntry) groupItem).getCreateMethodName()%>();
		if (paletteEntry != null) {
			paletteContainer.add(paletteEntry);
		}
<%	} else if (groupItem instanceof ToolGroup) {
		toolGroupsQueue.addLast((ToolGroup) groupItem);
%>
		<%if (!hasDeclaredPaletteEntry) { hasDeclaredPaletteEntry = true;%> <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteEntry")%> <%}%>paletteEntry = <%=((ToolGroup) groupItem).getCreateMethodName()%>();
		if (paletteEntry != null) {
			paletteContainer.add(paletteEntry);
		}
<%
	} else if (groupItem instanceof Separator) {%>
		paletteContainer.add(new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteSeparator")%>());
<%	} /*else - no more options possible, log warning? */%>
<%} /*for*/%>
		return paletteContainer;
	}
<%
} /*while*/
boolean hasNodeEntries = false;
boolean hasLinkEntries = false;
for(AbstractToolEntry abstractToolEntry : toolsQueue) {
	if (abstractToolEntry instanceof StandardEntry) {
		StandardEntry toolEntry = (StandardEntry) abstractToolEntry;
%>

	/**
	 * @@generated
	 */
	private ToolEntry <%=toolEntry.getCreateMethodName()%>() {
<%
		String toolEntryQualifiedName;
		if (toolEntry.getKind() == StandardEntryKind.SELECT_LITERAL) {
			toolEntryQualifiedName = "org.eclipse.gef.palette.PanningSelectionToolEntry";
		} else if (toolEntry.getKind() == StandardEntryKind.MARQUEE_LITERAL) {
			toolEntryQualifiedName = "org.eclipse.gef.palette.MarqueeToolEntry";
		} else {
			toolEntryQualifiedName = null;
		}
		if (toolEntryQualifiedName == null) {
%>
		return null;
<%
		} else {
%>
		<%=importManager.getImportedName(toolEntryQualifiedName)%> result = new <%=importManager.getImportedName(toolEntryQualifiedName)%>();
<%@@include file="palette-tool-props.jetinc"%>
		return result;
<%
		}
%>
	}

<%
		continue;
	}
	ToolEntry toolEntry = (ToolEntry) abstractToolEntry;
	GenCommonBase firstGenElement = toolEntry.getElements().isEmpty() ? null : (GenCommonBase) toolEntry.getElements().get(0);
	String domainElementInstanceCreationCode = null;
	if (firstGenElement instanceof GenNode) {
		GenNode firstGenNode = (GenNode) firstGenElement;
		GenClass genClass = firstGenNode.getDomainMetaClass();
		if (!genClass.isMapEntry()) {
			domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
		} else {
			domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create(" + 
				importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + genClass.getClassifierAccessorName() + "())";
		}
	} else if (firstGenElement instanceof GenLink) {
		GenLink firstGenLink = (GenLink) firstGenElement;
		LinkModelFacet linkModelFacet = firstGenLink.getModelFacet();
		if (linkModelFacet instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) linkModelFacet;
			GenClass genClass = typeLinkModelFacet.getMetaClass();
			domainElementInstanceCreationCode = importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
		}
	}
%>

	/**
	 * @@generated
	 */
	private ToolEntry <%=toolEntry.getCreateMethodName()%>() {
		<%if (toolEntry.getSmallIconPath() != null) {%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> smallImage = <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.findImageDescriptor("<%=toolEntry.getSmallIconPath()%>");
		<%} else if (domainElementInstanceCreationCode != null) {%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> smallImage = getImageDescriptor(<%=domainElementInstanceCreationCode%>); 
		<%} else {%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> smallImage = null;
		<%}%>
		<%if (toolEntry.getLargeIconPath() != null) {%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> largeImage = <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.findImageDescriptor("<%=toolEntry.getLargeIconPath()%>");
		<%} else {%>
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%> largeImage = smallImage;
		<%}%>
<%
	if (!toolEntry.getElements().isEmpty()) {
%>
		final int[] visualIds = new int[] {
<%
		for (Iterator genElementsIterator = toolEntry.getElements().iterator(); genElementsIterator.hasNext();) {
			GenCommonBase next = (GenCommonBase) genElementsIterator.next();
%>
			<%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID<%if (genElementsIterator.hasNext()) {%>,<%}%>
<%
		}
%>
		};
<%
	}
	if (firstGenElement instanceof GenNode) {
		hasNodeEntries = true;
%>
		ToolEntry result = new NodeToolEntry("<%=toolEntry.getTitle()%>", "<%=toolEntry.getDescription()%>", smallImage, largeImage, visualIds);
<%
	} else if (firstGenElement instanceof GenLink) {
		hasLinkEntries = true;
%>
		ToolEntry result = new LinkToolEntry("<%=toolEntry.getTitle()%>", "<%=toolEntry.getDescription()%>", smallImage, largeImage, visualIds);
<%
	} else {
%>
		ToolEntry result = new ToolEntry("<%=toolEntry.getTitle()%>", "<%=toolEntry.getDescription()%>", smallImage, largeImage) {};
<%
	}
%>
<%@@include file="palette-tool-props.jetinc"%>
		return result;
	}
<%
}	/*for*/
%>

<%
if (hasNodeEntries) {
%>
	/**
	 * @@generated
	 */
	private static class NodeToolEntry extends <%=importManager.getImportedName("org.eclipse.gef.palette.CombinedTemplateCreationEntry")%> {

		/**
		 * @@generated
		 */
		private final int[] myVisualIDs;

		/**
		 * @@generated
		 */
		private NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, int[] visualIDs) {
			super(title, description, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.ModelCreationFactory")%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>.class), smallIcon, largeIcon);
			myVisualIDs = visualIDs;
		}

		/**
		 * @@generated
		 */
		public Tool createTool() {
			Tool result = new CreationTool() {
				protected Request createTargetRequest() {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%> request = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%>(<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, myVisualIDs);
					request.setFactory(getFactory());
					return request;
				}
				protected void performCreation(int button) {
					super.performCreation(button);
					final <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> createdEditPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>)getCurrentViewer().getEditPartRegistry().get(getCreateRequest().getNewObject());
					if (createdEditPart != null) {
						getCurrentViewer().getControl().getDisplay().asyncExec(new Runnable() {
							public void run() {
								if (createdEditPart.isActive()) {
									createdEditPart.performRequest(new <%=importManager.getImportedName("org.eclipse.gef.Request")%>(<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_DIRECT_EDIT));
								}
							}
						});
					}
				}
			};
			result.setProperties(getToolProperties());
			return result;
		}
	}
<%
}	/*if (hasNodeEntries)*/
if (hasLinkEntries) {
%>

	/**
	 * @@generated
	 */
	private static class LinkToolEntry extends ConnectionCreationToolEntry {

		/**
		 * @@generated
		 */
		private final int[] myVisualIDs;

		/**
		 * @@generated
		 */
		private LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, int[] visualIDs) {
			super(title, description, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.ModelCreationFactory")%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>.class), smallIcon, largeIcon);
			myVisualIDs = visualIDs;
		}

		/**
		 * @@generated
		 */
		public Tool createTool() {
			Tool result = new ConnectionCreationTool() {
				{
					setUnloadWhenFinished(true);
				}
				protected Request createTargetRequest() {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> request = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%>(<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, myVisualIDs);
					request.setFactory(getFactory());
					return request;
				}
			};
			result.setProperties(getToolProperties());
			return result;
		}
	}
<%
}	/*if (hasLinkEntries)*/
%>

	/**
	 * @@generated
	 */
	private ImageDescriptor getImageDescriptor(Object o) {
		IItemLabelProvider labelProvider = (IItemLabelProvider) domainAdapterFactory.adapt(o, IItemLabelProvider.class);
		if (labelProvider != null) {
			return ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(o));
		}
		return null;
	}
}
<%importManager.emitSortedImports();%>
@


1.12
log
@Uncompilable code generated if a tool does not define any visual IDs it is able to create
@
text
@@


1.11
log
@ComponentEditPolicy separated into a top-level class;
CreateRequest now knows about the MODEL_ID;
All "Command" class references fully-qualified in templates to prevent compilation problems;
[170078]: Remove link with class from the domain model on deleting link's destination
@
text
@a224 1
	}
d228 1
@


1.10
log
@[164021] allow to choose standard tools for lite generator
@
text
@d279 1
a279 1
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%> request = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%>(myVisualIDs);
d333 1
a333 1
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> request = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%>(myVisualIDs);
@


1.9
log
@Do not assume tool entry's properties are strings, let users specify whatever they want (e.g. constants)
@
text
@a19 1
importManager.addImport("org.eclipse.gef.palette.SelectionToolEntry");
d52 3
d58 1
a58 1
        ToolEntry tool = new SelectionToolEntry();
d64 3
d80 1
a80 1
final LinkedList<ToolEntry> toolsQueue = new LinkedList<ToolEntry>();
d112 1
d115 2
a116 2
	if (groupItem instanceof ToolEntry) {
		toolsQueue.add((ToolEntry) groupItem);
d118 4
a121 1
		paletteContainer.add(<%=((ToolEntry) groupItem).getCreateMethodName()%>());
d125 4
a128 1
		paletteContainer.add(<%=((ToolGroup) groupItem).getCreateMethodName()%>());
d140 36
a175 1
for(ToolEntry toolEntry : toolsQueue) {
a243 15
	// there's a problem with qualifiedToolName - we should also respect different tools 
	// in NodeToolEntry and LinkToolEntry (right now there's hardcoded name of the tool) 
	if (toolEntry.getQualifiedToolName() != null && toolEntry.getQualifiedToolName().trim().length() > 0 ) {
%>
		result.setToolClass(<%=importManager.getImportedName(toolEntry.getQualifiedToolName())%>.class);
<%
	} /*tool class presence*/
	if (!toolEntry.getProperties().isEmpty()) {
		for (Iterator it = toolEntry.getProperties().entrySet().iterator(); it.hasNext();) {
			Map.Entry entry = (Map.Entry) it.next();
%>
		result.setToolProperty(<%=entry.getKey()%>, <%=entry.getValue()%>);
<%
		} /*properties iterator*/
	} /*properties presence check*/
d245 1
@


1.8
log
@[163126] Using ToolGroup with stack = true produces uncompiliable code + Tests
@
text
@d208 1
a208 1
		result.setToolProperty("<%=entry.getKey()%>", "<%=entry.getValue()%>");
@


1.7
log
@Correct icons in wizards and palette: generate images, recognize relative paths, fix incorrect paths in wizard code;
Make it possible to nest palette groups
@
text
@d88 12
a99 1
		PaletteContainer paletteContainer = new <%=importManager.getImportedName("org.eclipse.gef.palette.PaletteStack")%>("<%=toolGroup.getTitle()%>");
d115 3
@


1.6
log
@[160205] bblajer - move and clone elements on diagram
@
text
@d27 3
d71 8
a78 4
final List nodeCreationTools = new ArrayList();
final List linkCreationTools = new ArrayList();
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
d85 10
a94 1
		PaletteContainer paletteContainer = createContainer("<%=toolGroup.getTitle()%>");
d96 2
a97 3
List tools = toolGroup.getEntries();
for (int j = 0; j < tools.size(); j++) {
	ToolGroupItem groupItem = (ToolGroupItem) tools.get(j);
d99 3
a101 7
			ToolEntry toolEntry = (ToolEntry) groupItem;
			if (!toolEntry.getGenNodes().isEmpty()) {
				nodeCreationTools.add(toolEntry);
			} else if (!toolEntry.getGenLinks().isEmpty()) {
				linkCreationTools.add(toolEntry);
			}%>
		paletteContainer.add(<%=toolEntry.getCreateMethodName()%>());
d103 1
a103 1
	/* FIXME */
d111 8
a118 5
}
	for (int j = 0; j < nodeCreationTools.size(); j++) {
		ToolEntry nodeCreationTool = (ToolEntry) nodeCreationTools.get(j);
		List genNodes = nodeCreationTool.getGenNodes();
		GenNode firstGenNode = (GenNode) genNodes.get(0);
a119 1
		final String domainElementInstanceCreationCode;
d126 9
d140 5
a144 3
	private ToolEntry <%=nodeCreationTool.getCreateMethodName()%>() {
		<%if (nodeCreationTool.getSmallIconPath() != null) {%>
		ImageDescriptor smallImage = ImageDescriptor.createFromFile(<%=palette.getFactoryClassName()%>.class, "<%=nodeCreationTool.getSmallIconPath()%>");
d146 1
a146 1
		ImageDescriptor smallImage = getImage(<%=domainElementInstanceCreationCode%>);
d148 2
a149 2
		<%if (nodeCreationTool.getLargeIconPath() != null) {%>
		ImageDescriptor largeImage = ImageDescriptor.createFromFile(<%=palette.getFactoryClassName()%>.class, "<%=nodeCreationTool.getLargeIconPath()%>");
d151 1
a151 1
		ImageDescriptor largeImage = smallImage;
d153 3
d158 2
a159 2
		for (Iterator genNodesIterator = genNodes.iterator(); genNodesIterator.hasNext();) {
			GenNode nextNode = (GenNode) genNodesIterator.next();
d161 1
a161 1
			<%=importManager.getImportedName(nextNode.getEditPartQualifiedClassName())%>.VISUAL_ID<%if (genNodesIterator.hasNext()) {%>,<%}%>
d164 2
a165 28
%>		
		};
		return new <%=importManager.getImportedName("org.eclipse.gef.palette.CombinedTemplateCreationEntry")%>("<%=nodeCreationTool.getTitle()%>", 
			"<%=nodeCreationTool.getDescription()%>", new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.ModelCreationFactory")%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>.class), smallImage, largeImage) {
			public Tool createTool() {
				Tool result = new CreationTool() {
					protected Request createTargetRequest() {
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%> request = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%>(visualIds);
						request.setFactory(getFactory());
						return request;
					}
					protected void performCreation(int button) {
						super.performCreation(button);
						final <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> createdEditPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>)getCurrentViewer().getEditPartRegistry().get(getCreateRequest().getNewObject());
						if (createdEditPart != null) {
							getCurrentViewer().getControl().getDisplay().asyncExec(new Runnable() {
								public void run() {
									if (createdEditPart.isActive()) {
										createdEditPart.performRequest(new <%=importManager.getImportedName("org.eclipse.gef.Request")%>(<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_DIRECT_EDIT));
									}
								}
							});
						}
					}
				};
				result.setProperties(getToolProperties());
				return result;
			}
d167 15
d183 5
d189 11
d201 3
d205 2
a206 13
	for (int j = 0; j < linkCreationTools.size(); j++) {
		ToolEntry linkCreationTool = (ToolEntry) linkCreationTools.get(j);
		List genLinks = linkCreationTool.getGenLinks();
		GenLink firstGenLink = (GenLink) genLinks.get(0);
		LinkModelFacet linkModelFacet = firstGenLink.getModelFacet();
		final String domainElementInstanceCreationCode;
		if (linkModelFacet instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) linkModelFacet;
			GenClass genClass = typeLinkModelFacet.getMetaClass();
			domainElementInstanceCreationCode = importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
		} else {
			domainElementInstanceCreationCode = "null";
		}
a207 1

d211 13
a223 18
	private ToolEntry <%=linkCreationTool.getCreateMethodName()%>() {
		<%if (linkCreationTool.getSmallIconPath() != null) {%>
		ImageDescriptor smallImage = ImageDescriptor.createFromFile(<%=palette.getFactoryClassName()%>.class, "<%=linkCreationTool.getSmallIconPath()%>");
		<%} else {%>
		ImageDescriptor smallImage = getImage(<%=domainElementInstanceCreationCode%>);
		<%}%>
		<%if (linkCreationTool.getLargeIconPath() != null) {%>
		ImageDescriptor largeImage = ImageDescriptor.createFromFile(<%=palette.getFactoryClassName()%>.class, "<%=linkCreationTool.getLargeIconPath()%>");
		<%} else {%>
		ImageDescriptor largeImage = smallImage;
		<%}%>
		final int[] visualIds = new int[] {
<%
		for (Iterator genLinksIterator = genLinks.iterator(); genLinksIterator.hasNext();) {
			GenLink nextLink = (GenLink) genLinksIterator.next();
%>
			<%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID<%if (genLinksIterator.hasNext()) {%>,<%}%>
<%
d225 22
a246 8
%>		
		};
		return new ConnectionCreationToolEntry("<%=linkCreationTool.getTitle()%>", "<%=linkCreationTool.getDescription()%>", 
			new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.ModelCreationFactory")%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>.class), smallImage, largeImage) {
			public Tool createTool() {
				Tool result = new ConnectionCreationTool() {
					{
						setUnloadWhenFinished(true);
d248 5
a252 10
					protected Request createTargetRequest() {
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> request = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%>(visualIds);
						request.setFactory(getFactory());
						return request;
					}
				};
				result.setProperties(getToolProperties());
				return result;
			}
		};
d255 2
a256 1
	}
d262 32
a293 2
	private PaletteContainer createContainer(String title) {
		return new PaletteDrawer(title);
d295 4
a298 1
	
d302 1
a302 1
	private ImageDescriptor getImage(Object o) {
@


1.5
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@a11 1
importManager.addImport("org.eclipse.gef.requests.CreationFactory");
@


1.4
log
@[bblajer] #143686 getCreateNodeCommand returns null
@
text
@d141 1
a141 1
			"<%=nodeCreationTool.getDescription()%>", new ModelCreationFactory(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>.class), smallImage, largeImage) {
d145 1
a145 1
						CreateRequestEx request = new CreateRequestEx(visualIds);
d211 1
a211 1
			new ModelCreationFactory(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>.class), smallImage, largeImage) {
d218 1
a218 1
						CreateConnectionRequestEx request = new CreateConnectionRequestEx(visualIds);
a248 105

	/**
	 * @@generated
	 */
	public static class CreateRequestEx extends <%=importManager.getImportedName("org.eclipse.gef.requests.CreateRequest")%> {
		/**
		 * @@generated
		 */
		private final int[] visualIds;

		/**
		 * @@generated
		 */
		public CreateRequestEx(int[] visualIds) {
			this.visualIds = visualIds;
		}

		/**
		 * @@generated
		 */
		public int[] getVisualIds() {
			return visualIds;
		}

		/**
		 * @@generated
		 */
		public void setCreatedObject(Object createdObject) {
			((ModelCreationFactory)getFactory()).setCreatedObject(createdObject);
		}
	}

	/**
	 * @@generated
	 */
	public static class CreateConnectionRequestEx extends <%=importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest")%> {
		/**
		 * @@generated
		 */
		private final int[] visualIds;

		/**
		 * @@generated
		 */
		public CreateConnectionRequestEx(int[] visualIds) {
			this.visualIds = visualIds;
		}

		/**
		 * @@generated
		 */
		public int[] getVisualIds() {
			return visualIds;
		}

		/**
		 * @@generated
		 */
		public void setCreatedObject(Object createdObject) {
			((ModelCreationFactory)getFactory()).setCreatedObject(createdObject);
		}
	}

	/**
	 * @@generated
	 */
	public static class ModelCreationFactory implements CreationFactory {
		/**
		 * @@generated
		 */
		private Object createdObject;

		/**
		 * @@generated
		 */
		private final Class createdObjectType;

		/**
		 * @@generated
		 */
		public ModelCreationFactory(Class objectType) {
			createdObjectType = objectType;
		}

		/**
		 * @@generated
		 */
		public Object getNewObject() {
			return createdObject;
		}

		/**
		 * @@generated
		 */
		public Object getObjectType() {
			return createdObjectType;
		}

		/**
		 * @@generated
		 */
		public void setCreatedObject(Object createdObject) {
			this.createdObject = createdObject;
		}
	}
@


1.3
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d315 1
a315 1
	private static class ModelCreationFactory implements CreationFactory {
@


1.2
log
@#131270 Duplicated tool entries when same tool definition is referenced from gmfmap.
@
text
@d135 1
a135 1
			<%=nextNode.getVisualID()%><%if (genNodesIterator.hasNext()) {%>,<%}%>
d205 1
a205 1
			<%=nextLink.getVisualID()%><%if (genLinksIterator.hasNext()) {%>,<%}%>
d214 3
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d69 2
d79 1
a79 1
		PaletteContainer paletteContainer = createContainer("<%=toolGroup.getTitleKey()%>");
d81 14
a94 11
	List nodeCreationTools = toolGroup.getNodeTools();
	for (int j = 0; j < nodeCreationTools.size(); j++) {
		NodeEntry nodeCreationTool = (NodeEntry) nodeCreationTools.get(j);
%>
		paletteContainer.add(<%=nodeCreationTool.getCreateMethodName()%>());
<%	}
	List linkCreationTools = toolGroup.getLinkTools();
	for (int j = 0; j < linkCreationTools.size(); j++) {
		LinkEntry linkCreationTool = (LinkEntry) linkCreationTools.get(j);
		if (j == 0) {
%>
d96 2
a97 3
<%		}%>
		paletteContainer.add(<%=linkCreationTool.getCreateMethodName()%>());
<%	}%>
a101 3
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
	List nodeCreationTools = toolGroup.getNodeTools();
d103 2
a104 2
		NodeEntry nodeCreationTool = (NodeEntry) nodeCreationTools.get(j);
		List genNodes = nodeCreationTool.getGenNode();
d140 2
a141 2
		return new <%=importManager.getImportedName("org.eclipse.gef.palette.CombinedTemplateCreationEntry")%>("<%=nodeCreationTool.getTitleKey()%>", 
			"<%=nodeCreationTool.getDescriptionKey()%>", new ModelCreationFactory(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>.class), smallImage, largeImage) {
d170 1
a170 1
	List linkCreationTools = toolGroup.getLinkTools();
d172 2
a173 2
		LinkEntry linkCreationTool = (LinkEntry) linkCreationTools.get(j);
		List genLinks = linkCreationTool.getGenLink();
d210 1
a210 1
		return new ConnectionCreationToolEntry("<%=linkCreationTool.getTitleKey()%>", "<%=linkCreationTool.getDescriptionKey()%>", 
a226 1
}
@

