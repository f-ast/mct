head	1.3;
access;
symbols
	v20080910-1520:1.3
	v20070525-1500:1.2
	v20070520-1200:1.2
	v20070518-1300:1.2
	v20070504-1000:1.2
	v20070427-0600:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061214-0000:1.2
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1
	v20061005-1700:1.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060824-1600:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060620-0400:1.1
	v20060616-1400:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.05.29.14.55.31;	author bblajer;	state dead;
branches;
next	1.2;
commitid	2543465c3ee24567;

1.2
date	2006.11.23.18.57.15;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	66934565ef0a4567;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Rewrite some templates with XPand;
Adopt VisualIDRegistry from full RT.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.editor" class="ActionBarContributorGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
<%
final GenEditorView editorView = (GenEditorView) ((Object[]) argument)[0];
final GenModel genModel = editorView.getEditorGen().getDomainGenModel();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);
%>

import org.eclipse.gef.ui.actions.ActionBarContributor;
import org.eclipse.gef.ui.actions.DeleteRetargetAction;
import org.eclipse.gef.ui.actions.GEFActionConstants;
import org.eclipse.gef.ui.actions.RedoRetargetAction;
import org.eclipse.gef.ui.actions.UndoRetargetAction;
import org.eclipse.gef.ui.actions.ZoomComboContributionItem;
import org.eclipse.gef.ui.actions.ZoomInRetargetAction;
import org.eclipse.gef.ui.actions.ZoomOutRetargetAction;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.action.Separator;
import org.eclipse.ui.IWorkbenchActionConstants;
import org.eclipse.ui.actions.ActionFactory;

/**
 * The action bar contributor for the <%=genModel.getModelName()%> editor.
 *
 * @@generated
 */
public class <%=editorView.getActionBarContributorClassName()%> extends ActionBarContributor {
<%
if (!editorView.isEclipseEditor()) {
%>
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("java.util.List")%> globalActionKeys = new <%=importManager.getImportedName("java.util.ArrayList")%>();

	/**
	 * @@generated
	 */
	private ZoomComboContributionItem myZoomContributionItem;
<%
}
%>
	/**
	 * @@generated
	 */
    protected void buildActions() {
        addRetargetAction(new UndoRetargetAction());
        addRetargetAction(new RedoRetargetAction());
        addRetargetAction(new DeleteRetargetAction());
    
        addRetargetAction(new ZoomInRetargetAction());
        addRetargetAction(new ZoomOutRetargetAction());
    }

	/**
	 * @@generated
	 */
    protected void declareGlobalActionKeys() {
        addGlobalActionKey(ActionFactory.PRINT.getId());
		addGlobalActionKey(ActionFactory.DELETE.getId());
    }

<%
if (!editorView.isEclipseEditor()) {
%>
	/**
	 * @@generated
	 */
	protected void addGlobalActionKey(String key) {
		super.addGlobalActionKey(key);
		globalActionKeys.add(key);
	}

<%
}
%>
	/**
	 * @@generated
	 */
    public void contributeToMenu(IMenuManager menuManager) {
        super.contributeToMenu(menuManager);

<%
if (editorView.isEclipseEditor()) {
%>
        // add a "View" menu after "Edit"
        MenuManager viewMenu = new MenuManager("View");
        viewMenu.add(getAction(GEFActionConstants.ZOOM_IN));
        viewMenu.add(getAction(GEFActionConstants.ZOOM_OUT));
        
        menuManager.insertAfter(IWorkbenchActionConstants.M_EDIT, viewMenu);
<%
} else {
%>
		menuManager.add(getAction(GEFActionConstants.ZOOM_IN));
		menuManager.add(getAction(GEFActionConstants.ZOOM_OUT));
<%
}
%>
    }

	/**
	 * @@generated
	 */
    public void contributeToToolBar(IToolBarManager toolBarManager) {
        super.contributeToToolBar(toolBarManager);

        toolBarManager.add(getAction(ActionFactory.UNDO.getId()));
        toolBarManager.add(getAction(ActionFactory.REDO.getId()));
    
        toolBarManager.add(new Separator());
<%
if (editorView.isEclipseEditor()) {
%>
        toolBarManager.add(new ZoomComboContributionItem(getPage()));
<%
} else {
%>
		myZoomContributionItem = new ZoomComboContributionItem(getPage());
		toolBarManager.add(myZoomContributionItem);
<%
}
%>
    }

<%
if (!editorView.isEclipseEditor()) {
%>
	/**
	 * @@generated
	 */
	public void updateGlobalActions(<%=importManager.getImportedName("org.eclipse.ui.IViewPart")%> viewPart) {
		<%=importManager.getImportedName("org.eclipse.gef.ui.actions.ActionRegistry")%> registry = viewPart == null ? null : (<%=importManager.getImportedName("org.eclipse.gef.ui.actions.ActionRegistry")%>) viewPart.getAdapter(<%=importManager.getImportedName("org.eclipse.gef.ui.actions.ActionRegistry")%>.class);
		<%=importManager.getImportedName("org.eclipse.ui.IActionBars")%> bars = getActionBars();
		if (registry == null) {
			bars.clearGlobalActionHandlers();
		} else {
			for (int i = 0; i < globalActionKeys.size(); i++) {
				String id = (String) globalActionKeys.get(i);
				bars.setGlobalActionHandler(id, registry.getAction(id));
			}
		}
		<%=importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager")%> zoomManager = viewPart == null ? null : (<%=importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager")%>) viewPart.getAdapter(<%=importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager")%>.class);
		myZoomContributionItem.setZoomManager(zoomManager);
		bars.updateActionBars();
	}
<%
}
%>
}
<%importManager.emitSortedImports();%>
@


1.2
log
@[163214]: Lite runtime should support generation to a View
[164843]: Make it possible to specify the editing domain with which the editor/viewer should operate
@
text
@@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d33 15
d68 14
d88 3
d97 8
d117 3
d121 8
d130 25
d156 1
@

