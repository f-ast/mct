head	1.13;
access;
symbols
	v20080910-1520:1.13
	RC3_20:1.12
	v20070614-1400:1.12
	v20070608-1300:1.12
	v20070601-1400:1.12
	v20070525-1500:1.12
	v20070520-1200:1.12
	v20070518-1300:1.12
	v20070504-1000:1.12
	v20070427-0600:1.12
	v20070420-1000:1.12
	v20070413-1300:1.12
	v20070405-1100:1.11
	v20070403-1500:1.11
	v20070330-1300:1.11
	v20060330-1300:1.11
	v20070322-1100:1.11
	v20060316-0600:1.11
	v20070307-0700:1.11
	v20070228-2000:1.11
	v20070221-1500:1.11
	v20070208-1800:1.11
	v20070103-0300:1.11
	M4_20:1.11
	v20061222-1800:1.10
	v20061214-0000:1.9
	v20061120-1300:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061013-1330:1.8
	v20061005-1700:1.2.2.1
	M1_20:1.3
	v20060904-1500:1.3
	v20060824-1600:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2007.06.20.10.16.10;	author bblajer;	state dead;
branches;
next	1.12;
commitid	37dd4678fe694567;

1.12
date	2007.04.10.14.40.10;	author bblajer;	state Exp;
branches;
next	1.11;
commitid	5b02461ba1c84567;

1.11
date	2006.12.25.12.00.12;	author bblajer;	state Exp;
branches;
next	1.10;
commitid	430d458fbd4b4567;

1.10
date	2006.12.19.19.09.56;	author bblajer;	state Exp;
branches;
next	1.9;
commitid	9c1458839044567;

1.9
date	2006.11.23.18.57.15;	author bblajer;	state Exp;
branches;
next	1.8;
commitid	66934565ef0a4567;

1.8
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.10.02.12.29.34;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.09.29.16.32.04;	author rgronback;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.22.16.57.21;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.21.10.12.03;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.08.04.17.05.48;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.18.27.23;	author atikhomirov;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;

1.2.2.1
date	2006.09.29.16.38.28;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Rewrite /editor/* templates in XPand;
Use common template to generate code that creates an editing domain in various places;
OpenDiagramEditPolicy: package statement was missing.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.editor" class="CreationWizardPageGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.ecore.* "%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final GenPlugin genPlugin = editorGen.getPlugin();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final boolean isRichClientPlatform = genDiagram.getEditorGen().getApplication() != null;

importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);

importManager.addImport("org.eclipse.core.runtime.IProgressMonitor");
importManager.addImport("org.eclipse.core.runtime.CoreException");
importManager.addImport("java.io.IOException");
importManager.addImport("org.eclipse.emf.common.util.URI");
if (isRichClientPlatform) {
importManager.addImport("java.io.File");
importManager.addImport("org.eclipse.swt.widgets.Composite");
importManager.addImport("org.eclipse.swt.widgets.Label");
importManager.addImport("org.eclipse.swt.widgets.Text");
importManager.addImport("org.eclipse.swt.events.ModifyListener");
importManager.addImport("org.eclipse.swt.events.ModifyEvent");
importManager.addImport("org.eclipse.swt.layout.GridLayout");
importManager.addImport("org.eclipse.swt.layout.GridData");
}
%>

/**
 * @@generated
 */
public class <%=genDiagram.getCreationWizardPageClassName()%> extends <%=importManager.getImportedName(isRichClientPlatform ? "org.eclipse.jface.wizard.WizardPage" : "org.eclipse.ui.dialogs.WizardNewFileCreationPage")%> {
<%
if (isRichClientPlatform) {
%>
	/**
	 * @@generated
	 */
	private Text fileField;

	/**
	 * @@generated
	 */
	private URI createdDiagramFileURI;
<%
} else {
%>
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> createdDiagramFile;
<%
}
%>

	/**
	 * @@generated
	 */
<%
if (isRichClientPlatform) {
%>
	public <%=genDiagram.getCreationWizardPageClassName()%>() {
		super("CreationWizardPage"); //$NON-NLS-1$
<%
} else {
%>
	public <%=genDiagram.getCreationWizardPageClassName()%>(<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> selection) {
		super("CreationWizardPage", selection);	//$NON-NLS-1$
<%
}
%>
		setTitle("Create <%=editorGen.getDomainGenModel().getModelName()%> Diagram"); //$NON-NLS-1$
		setDescription("Create a new <%=editorGen.getDomainGenModel().getModelName()%> diagram."); //$NON-NLS-1$
	}

<%
if (isRichClientPlatform) {
%>
	/**
	 * @@generated
	 */
	public void createControl(Composite parent)
	{
		Composite composite = new Composite(parent, SWT.NONE);
		{
			GridLayout layout = new GridLayout();
			layout.numColumns = 1;
			layout.verticalSpacing = 12;
			composite.setLayout(layout);

			GridData data = new GridData();
			data.verticalAlignment = GridData.FILL;
			data.grabExcessVerticalSpace = true;
			data.horizontalAlignment = GridData.FILL;
			composite.setLayoutData(data);
		}
		Label resourceURILabel = new Label(composite, SWT.LEFT);
		{
			resourceURILabel.setText("&File");

			GridData data = new GridData();
			data.horizontalAlignment = GridData.FILL;
			resourceURILabel.setLayoutData(data);
		}

		Composite fileComposite = new Composite(composite, SWT.NONE);
		{
			GridData data = new GridData();
			data.horizontalAlignment = GridData.FILL;
			data.grabExcessHorizontalSpace = true;
			fileComposite.setLayoutData(data);

			GridLayout layout = new GridLayout();
			layout.marginHeight = 0;
			layout.marginWidth = 0;
			layout.numColumns = 2;
			fileComposite.setLayout(layout);
		}

		fileField = new <%=importManager.getImportedName("org.eclipse.swt.widgets.Text")%>(fileComposite, SWT.BORDER);
		{
			GridData data = new GridData();
			data.horizontalAlignment = GridData.FILL;
			data.grabExcessHorizontalSpace = true;
			data.horizontalSpan = 1;
			fileField.setLayoutData(data);
		}

		fileField.addModifyListener(validator);
		<%=importManager.getImportedName("org.eclipse.swt.widgets.Button")%> resourceURIBrowseFileSystemButton = new <%=importManager.getImportedName("org.eclipse.swt.widgets.Button")%>(fileComposite, SWT.PUSH);
		resourceURIBrowseFileSystemButton.setText("&Browse");
  
		resourceURIBrowseFileSystemButton.addSelectionListener
			(new <%=importManager.getImportedName("org.eclipse.swt.events.SelectionAdapter")%>() {
				 public void widgetSelected(<%=importManager.getImportedName("org.eclipse.swt.events.SelectionEvent")%> event) {
					 String fileExtension = "<%=editorGen.getDiagramFileExtension()%>";
					 String filePath = <%=genDiagram.getDiagramEditorUtilClassName()%>.openFilePathDialog(getShell(), "*." + fileExtension, <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.OPEN);
					 if (filePath != null) {
						 if (!filePath.endsWith("." + fileExtension)) {
							 filePath = filePath + "." + fileExtension;
						 }
						 fileField.setText(filePath);
					 }
				 }
			 }); 
		setPageComplete(validatePage());
		setControl(composite);
	}

	/**
	 * @@generated
	 */
	protected ModifyListener validator =
		new ModifyListener() {
			public void modifyText(ModifyEvent e) {
				setPageComplete(validatePage());
			}
		};

<%
}
%>
	/**
	 * @@generated
	 */
	 protected boolean validatePage() {
<%
if (isRichClientPlatform) {
%>
		URI diagramFileURI = getDiagramFileURI();
		if (diagramFileURI == null || diagramFileURI.isEmpty()) {
			setErrorMessage(null);
			return false;
		}

		if (diagramFileURI.isFile()) {
			File diagramFile = new File(diagramFileURI.toFileString());
			if (diagramFile.exists()) {
				setErrorMessage("Diagram File already exists: " + diagramFile);
				return false;
			}
		}
<%
} else {
%>
		if (!super.validatePage()) {
			return false;
		}
		String fileName = getFileName();

		if (fileName == null) {
			setErrorMessage(null);
			return false;
		}

		<%=importManager.getImportedName("org.eclipse.core.runtime.IPath")%> path = getContainerFullPath().append(fileName);
		if (path.getFileExtension() == null) {
			path = path.addFileExtension("<%=editorGen.getDiagramFileExtension()%>");	//$NON-NLS-1$
		}

		if (<%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().exists(path)) {
			setErrorMessage("Diagram File already exists: " + path.toOSString());
			return false;
		}
<%
}
%>
		String requiredExt = "<%=editorGen.getDiagramFileExtension()%>";
<%
if (isRichClientPlatform) {
%>
		String enteredExt = diagramFileURI.fileExtension();
<%
} else {
%>
		String enteredExt = path.getFileExtension();
<%
}
%>
		if (enteredExt == null || !enteredExt.equals(requiredExt)) {
			setErrorMessage("The file name must end in " + requiredExt); 
			return false;
		}
<%
if (!editorGen.isSameFileForDiagramAndModel()) {
	if (isRichClientPlatform) {
%>
			URI modelFileURI = getModelFileURI();
			File modelFile = new File(modelFileURI.toFileString());
			if (modelFile.exists()) {
				setErrorMessage("Model File already exists: " + modelFile);
				return false;
			}
<%
	} else {
%>
			path = path.removeFileExtension().addFileExtension("<%=editorGen.getDomainFileExtension()%>"); //$NON-NLS-1$
			if (<%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().exists(path)) {
				setErrorMessage("Model File already exists: " + path.lastSegment());
				return false;
			}
<%
	}
}
%>
		setErrorMessage(null);
		return true;
	}

<%
if (isRichClientPlatform) {
%>
	/**
	 * @@generated
	 */
	public URI getCreatedDiagramFileURI() {
		return createdDiagramFileURI;
	}
<%
} else {
%>
	/**
	 * @@generated
	 */
	public IFile getCreatedDiagramFile() {
		return createdDiagramFile;
	}
<%
}
%>

<%
if (isRichClientPlatform) {
%>
	/**
	 * @@generated
	 */
	private URI getDiagramFileURI() {
		try {
			return URI.createFileURI(fileField.getText());
		} catch (Exception exception) {
		}
		return null;
	}

<%
	if (!editorGen.isSameFileForDiagramAndModel()) {
%>
	/**
	 * @@generated
	 */
	private URI getModelFileURI() {
		URI diagramFileURI = getDiagramFileURI();
		if (diagramFileURI == null) {
			return null;
		}
		return diagramFileURI.trimFileExtension().appendFileExtension("<%=editorGen.getDomainFileExtension()%>");
	}
<%
	}
}
%>

	/**
	 * Performs the operations necessary to create and open the diagram
	 * @@return boolean indicating whether the creation and opening the Diagram was successful 
	 * @@generated
	 */
	public boolean finish() {
		final boolean[] result = new boolean[1];
<%
if (isRichClientPlatform) {
%>
		<%=importManager.getImportedName("org.eclipse.jface.operation.IRunnableWithProgress")%> op = new IRunnableWithProgress() {
			public void run(IProgressMonitor monitor) {
<%
} else {
%>
		<%=importManager.getImportedName("org.eclipse.ui.actions.WorkspaceModifyOperation")%> op = new WorkspaceModifyOperation(null) {
			protected void execute(IProgressMonitor monitor) {
<%
}
%>
				result[0] = doFinish(monitor);
			}
		};

		try {
			getContainer().run(false, true, op);
		} catch (InterruptedException e) {
			return false;
		} catch (<%=importManager.getImportedName("java.lang.reflect.InvocationTargetException")%> e) {
			if (e.getTargetException() instanceof CoreException) {
				<%=importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog")%>.openError(
					getContainer().getShell(),
					"Creation Problems",
					null,	// no special message
					((CoreException) e.getTargetException()).getStatus());
			}
			else {
				// CoreExceptions are handled above, but unexpected runtime exceptions and errors may still occur.
				<%=genPlugin.getActivatorClassName()%>.getInstance().getLog().log(new <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>(<%=importManager.getImportedName("org.eclipse.core.runtime.IStatus")%>.ERROR, <%=genPlugin.getActivatorClassName()%>.ID, 0, "Creation failed", e.getTargetException()));
			}
			return false;
		}
		return result[0];
	}

	/**
	 * @@param monitor the <code>IProgressMonitor</code> to use to indicate progress and check for cancellation
	 * @@return boolean indicating whether the diagram was created and opened successfully
	 * @@generated
	 */
	public boolean doFinish(IProgressMonitor monitor) {
<%
String createdVar = isRichClientPlatform ? "createdDiagramFileURI" : "createdDiagramFile";
%>
		<%=createdVar%> = createDiagramFile(monitor);
		return <%=createdVar%> != null;
	}

	/**
	 * @@generated
	 */
<%if (isRichClientPlatform) {%>
	private URI createDiagramFile(IProgressMonitor monitor) {
<%} else {%>
	private IFile createDiagramFile(IProgressMonitor monitor) {
<%}%>
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.workspace.WorkspaceEditingDomainFactory")%>.INSTANCE.createEditingDomain();
		<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet")%> resourceSet = editingDomain.getResourceSet();
<%
if (isRichClientPlatform) {
%>
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> diagramResource = resourceSet.createResource(getDiagramFileURI());
<%
} else {
%>
		IPath diagramFilePath = getContainerFullPath().append(getFileName());
		if (diagramFilePath.getFileExtension() == null) {
			diagramFilePath = diagramFilePath.addFileExtension("<%=editorGen.getDiagramFileExtension()%>");		//$NON-NLS-1$
		}
		final IFile diagramFile = ResourcesPlugin.getWorkspace().getRoot().getFile(diagramFilePath);
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> diagramResource = resourceSet.createResource(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(diagramFilePath.toString(), true));
<%
}
%>
<%
final boolean standaloneDomainModel = !editorGen.isSameFileForDiagramAndModel() && genDiagram.getDomainDiagramElement() != null;
if (standaloneDomainModel) {
	if (isRichClientPlatform) {
%>
		final Resource modelResource = resourceSet.createResource(getModelFileURI());
<%
	} else {
%>
		IPath modelFilePath = diagramFilePath.removeFileExtension().addFileExtension("<%=editorGen.getDomainFileExtension()%>"); //$NON-NLS-1$
		final IFile modelFile = ResourcesPlugin.getWorkspace().getRoot().getFile(modelFilePath);
		final Resource modelResource = resourceSet.createResource(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(modelFilePath.toString(), true));
<%
	}
}
%>

		if (diagramResource != null<%if (standaloneDomainModel) {%> && modelResource != null<%}%>) {
			<%=importManager.getImportedName("org.eclipse.emf.workspace.AbstractEMFOperation")%> saveOperation = new <%=importManager.getImportedName("org.eclipse.emf.workspace.AbstractEMFOperation")%>(editingDomain, "Create diagram") {
				public <%=importManager.getImportedName("org.eclipse.core.runtime.IStatus")%> doExecute(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> monitor, <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%> info) throws <%=importManager.getImportedName("org.eclipse.core.commands.ExecutionException")%> {
<%
if (genDiagram.getDomainDiagramElement() != null) {
%>
					<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> model = <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>();
<%
	if (standaloneDomainModel) {
		if (genDiagram.getDomainDiagramElement().getGenPackage().hasDocumentRoot()) {
%>
					modelResource.getContents().add(createInitialRoot(model));
<%
		} else {
%>
					modelResource.getContents().add(<%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>model);
<%
		}
%>
					try {
						modelResource.save(<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.getSaveOptions());
					} catch (IOException e) {
						handleSaveException(e);
					}
<%
	} else {
%>
					diagramResource.getContents().add(<%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>model);
<%
	}
}
%>
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDiagram();
					diagram.setElement(<%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>model);
					<%=importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName())%>.INSTANCE.decorateView(diagram);
					diagramResource.getContents().add(diagram);
					try {
						diagramResource.save(<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.getSaveOptions());
					} catch (IOException e) {
						handleSaveException(e);
					}
					return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.OK_STATUS;
				}
			};
			try {
				saveOperation.execute(new <%=importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%>(), null);
			} catch (<%=importManager.getImportedName("org.eclipse.core.commands.ExecutionException")%> e) {
				<%=genPlugin.getActivatorClassName()%>.getInstance().logError("exception occurred while creating the diagram", e);
				return null;
			}
<%
if (!isRichClientPlatform) {
%>
			<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.setCharset(diagramFile);
<%
	if (standaloneDomainModel) {
%>
			<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.setCharset(modelFile);
<%
	}
}
%>
		}
<%
if (isRichClientPlatform) {
%>
<%
	if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {
%>
		boolean result = <%=genDiagram.getDiagramEditorUtilClassName()%>.openEditor(getDiagramFileURI()) != null;
<%
	} else {
%>
		boolean result = <%=genDiagram.getDiagramEditorUtilClassName()%>.showView(getDiagramFileURI()) != null;
<%
	}
%>
		if (!result) {
			return null;
		}
		return getDiagramFileURI();
<%
} else {
%>
<%
	if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {
%>
		try {
			<%=importManager.getImportedName("org.eclipse.ui.ide.IDE")%>.openEditor(<%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getActiveWorkbenchWindow().getActivePage(), diagramFile);
		} catch (<%=importManager.getImportedName("org.eclipse.ui.PartInitException")%> e) {
			<%=genPlugin.getActivatorClassName()%>.getInstance().getLog().log(e.getStatus());
			return null;
		}
		return diagramFile;
<%
	} else {
%>
		<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> diagramFileURI = diagramResource.getURI();
		boolean result = <%=genDiagram.getDiagramEditorUtilClassName()%>.showView(diagramFileURI) != null;
		if (!result) {
			return null;
		}
		return diagramFile;
<%
	}
%>
<%
}
%>
	}

<%
if (standaloneDomainModel && genDiagram.getDomainDiagramElement().getGenPackage().hasDocumentRoot()) {
%>
	/**
	 * @@generated
	 */
	private static <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> createInitialRoot(<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> model) {
<%
	// would be better to get GenClass for docRoot and directly use setter
	GenClass docRoot = genDiagram.getDomainDiagramElement().getGenPackage().getDocumentRoot();
	String featureAccessor = "null"; // Alternative is: genDiagram.getDomainDiagramElement().getInterfaceName(); although it's a hack. Seems better to fail right away
	for (java.util.Iterator it = docRoot.getGenFeatures().iterator(); it.hasNext(); ) {
		GenFeature genFeature = (GenFeature) it.next();
		boolean unspecifiedUpperBound = ETypedElement.UNSPECIFIED_MULTIPLICITY == genFeature.getEcoreFeature().getUpperBound();
		// Perhaps, makes sense to check instanceof EReference && isContainment
		if (genFeature.isSet() && unspecifiedUpperBound && genDiagram.getDomainDiagramElement().equals(genFeature.getTypeGenClass())) {
			featureAccessor = genFeature.getAccessorName();
			break;
		}
	} /*for*/
%>
		<%=importManager.getImportedName(docRoot.getQualifiedInterfaceName())%> docRoot = <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName())%>.<%=genDiagram.getDomainDiagramElement().getGenPackage().getFactoryInstanceName()%>.create<%=docRoot.getName()%>();
		docRoot.set<%=featureAccessor%>(model);
		return docRoot;
	}

<%
} /*if standaloneDomainModel && genDiagram.getDomainDiagramElement().getGenPackage().hasDocumentRoot()*/
%>
	/**
	 * @@generated
	 */
	private void handleSaveException(IOException e) throws <%=importManager.getImportedName("org.eclipse.core.commands.ExecutionException")%> {
		throw new <%=importManager.getImportedName("org.eclipse.core.commands.ExecutionException")%>("Save failed", e);
	}
}
<%importManager.emitSortedImports();%>
@


1.12
log
@[179970] - Adopt code generater to make use of EMF "conditional resource saving";
Correctly set charset for IFiles
@
text
@@


1.11
log
@[159567]: Use GenApplication element from gmfgen model to generate RCP code
Use as much of the runtime templates as possible (changes are isolated as aspects)
@
text
@d384 1
a384 1
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFilePath.toString(), true));
d398 2
a399 1
		final Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFilePath.toString(), true));
d425 1
a425 1
						modelResource.save(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_MAP);
d442 1
a442 1
						diagramResource.save(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_MAP);
d455 12
@


1.10
log
@Make tests pass: Resource.getContents() is now parametrized
@
text
@d8 1
a8 1
final boolean isRichClientPlatform = genDiagram.getEditorGen().getDomainGenModel().isRichClientPlatform();
@


1.9
log
@[163214]: Lite runtime should support generation to a View
[164843]: Make it possible to specify the editing domain with which the editor/viewer should operate
@
text
@d419 1
a419 1
					modelResource.getContents().add(model);
d431 1
a431 1
					diagramResource.getContents().add(model);
@


1.8
log
@[160205] bblajer - move and clone elements on diagram
@
text
@d384 1
a384 1
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFilePath.toString()));
d398 1
a398 1
		final Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFilePath.toString()));
d458 3
d462 7
d476 3
d487 12
@


1.7
log
@[158023] bblajer - Diagram Layout
@
text
@d410 1
a410 1
					<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> model = <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryClassName())%>.eINSTANCE.create<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>();
@


1.6
log
@Added import for Collections.
@
text
@d458 1
a458 1
		boolean result = <%=genDiagram.getDiagramEditorUtilClassName()%>.openEditor(getDiagramFileURI());
@


1.5
log
@[158158] bblajer - Creation of diagrams for models generated from XSD schemas fails
@
text
@d441 1
a441 1
						diagramResource.save(Collections.EMPTY_MAP);
@


1.4
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
d370 2
a371 2
		//TODO: Editing domain!
		<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet")%> resourceSet = new <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl")%>();
d405 2
a406 2
			//TODO: Editing domain!
			<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> model = <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryClassName())%>.eINSTANCE.create<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>();
d408 14
a421 1
if (standaloneDomainModel) {
d423 5
a427 6
			modelResource.getContents().add(model);
			try {
				modelResource.save(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_MAP);
			} catch (IOException e) {
				handleSaveException(e);
			}
d429 1
a429 1
} else {
d431 1
a431 1
			diagramResource.getContents().add(model);
d433 1
d436 12
a447 4
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDiagram();
			diagram.setElement(<%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>model);
			<%=importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName())%>.INSTANCE.decorateView(diagram);
			diagramResource.getContents().add(diagram);
d449 4
a452 3
				diagramResource.save(Collections.EMPTY_MAP);
			} catch (IOException e) {
				handleSaveException(e);
d478 29
d510 2
a511 2
	private void handleSaveException(IOException e) {
		throw new RuntimeException(e);
@


1.3
log
@[bblajer] #152774 Compilable code when EClass has instance class attribute set
@
text
@d425 1
a425 1
			<%=importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName())%>.decorateView(diagram);
@


1.2
log
@[bblajer] #114200 Provide an option to generate RCP application - added RCP support for pure-GEF (lite) generator
@
text
@d424 1
a424 1
			diagram.setElement(model);
@


1.2.2.1
log
@Added import for Collections.
@
text
@d428 1
a428 1
				diagramResource.save(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_MAP);
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d8 1
a12 1
importManager.addImport("java.io.File");
a15 1
importManager.addImport("org.eclipse.swt.widgets.Text");
d17 2
d21 1
d26 1
d32 4
a35 1
public class <%=genDiagram.getCreationWizardPageClassName()%> extends <%=importManager.getImportedName("org.eclipse.jface.wizard.WizardPage")%> {
d45 10
d59 3
d64 8
d76 3
d159 4
a162 1
 
d167 3
a174 6
		String requiredExt = "<%=editorGen.getDiagramFileExtension()%>";
		String enteredExt = diagramFileURI.fileExtension();
		if (enteredExt == null || !enteredExt.equals(requiredExt)) {
			setErrorMessage("The file name must end in " + requiredExt); 
			return false;
		}
d182 46
a227 1
<%if (!editorGen.isSameFileForDiagramAndModel()) {%>
d234 13
a246 3
<%}%>
		}
		setErrorMessage(null); 
d250 3
d259 12
d272 3
d286 3
a288 1
<%if (!editorGen.isSameFileForDiagramAndModel()) {%>
d299 4
a302 1
<%}%>
d311 3
d316 8
d355 5
a359 2
		createdDiagramFileURI = createDiagramFile(monitor);
		return createdDiagramFileURI != null;
d365 1
d367 3
d372 3
d377 12
d391 1
d394 9
a402 1
<%}%>
d433 3
d441 13
@

