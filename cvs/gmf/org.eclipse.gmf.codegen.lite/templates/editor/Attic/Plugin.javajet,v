head	1.5;
access;
symbols
	v20080910-1520:1.5
	v20070103-0300:1.4
	M4_20:1.4
	v20061222-1800:1.4
	v20061214-0000:1.3
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.2
	v20061005-1700:1.2
	M1_20:1.2
	v20060904-1500:1.2
	v20060824-1600:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2007.02.02.17.14.33;	author bblajer;	state dead;
branches;
next	1.4;
commitid	78d445c371764567;

1.4
date	2006.12.19.19.11.42;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	733e4588396c4567;

1.3
date	2006.10.17.14.50.08;	author bblajer;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.18.27.23;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[172664]: Provide audits and metrics for Lite diagrams (including view-based and RCP) + validation decorators + validation markers (for non-RCP case);
Several templates are rewritten with xpand;
lite-specific TextEmitter is back (otherwise importManager is sometimes passed to xpand templates)
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.editor" class="PluginGenerator"
    imports="org.eclipse.emf.common.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenPlugin genPlugin = (GenPlugin) ((Object[]) argument)[0];
final EList genPackages = genPlugin.getEditorGen().getAllDomainGenPackages(true);
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

importManager.emitPackageStatement(stringBuffer);%>

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;
import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;
import org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genPlugin.getActivatorClassName()%> extends AbstractUIPlugin {

	/**
	 * @@generated
	 */
	public static final String ID = "<%=genPlugin.getID()%>"; //$NON-NLS-1$

	/**
	 * @@generated
	 */
	private static <%=genPlugin.getActivatorClassName()%> instance;

	/**
	 * @@generated
	 */
	private ComposedAdapterFactory adapterFactory;

	/**
	 * @@generated
	 */
	public <%=genPlugin.getActivatorClassName()%>() {
	}

	/**
	 * @@generated
	 */
	public void start(BundleContext context) throws Exception {
		super.start(context);
		instance = this;
		adapterFactory = createAdapterFactory();
	}

	/**
	 * @@generated
	 */
	public void stop(BundleContext context) throws Exception {
		adapterFactory.dispose();
		adapterFactory = null;
		instance = null;
		super.stop(context);
	}

	/**
	 * @@generated
	 */
	public static <%=genPlugin.getActivatorClassName()%> getInstance() {
		return instance;
	}

	/**
	 * @@generated
	 */
	protected ComposedAdapterFactory createAdapterFactory() {
		List factories = new ArrayList();
		fillItemProviderFactories(factories);
		return new ComposedAdapterFactory(factories);
	}

	/**
	 * @@generated
	 */
	protected void fillItemProviderFactories(List factories) {
<%
for (int i = 0; i < genPackages.size(); i++) {
	GenPackage genPackage = (GenPackage) genPackages.get(i);
%>
		factories.add(new <%=importManager.getImportedName(genPackage.getQualifiedItemProviderAdapterFactoryClassName())%>());
<%}%>
		factories.add(new ResourceItemProviderAdapterFactory());
		factories.add(new ReflectiveItemProviderAdapterFactory());
	}
	
	/**
	 * @@generated
	 */
	public AdapterFactory getItemProvidersAdapterFactory() {
		return adapterFactory;
	}

	/**
	 * @@generated
	 */
	public ImageDescriptor getItemImageDescriptor(Object item) {
		IItemLabelProvider labelProvider = (IItemLabelProvider) adapterFactory.adapt(item, IItemLabelProvider.class);
		if (labelProvider != null) {
<%
			// XXX dependency org.eclipse.emf.edit.ui is for ExtendedImageRegistry only. 
			// FIXME move image registry to plugin class code
%>
			return ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(item));
		}
		return null;
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getItemImage(Object item) {
		IItemLabelProvider labelProvider = (IItemLabelProvider) adapterFactory.adapt(item, IItemLabelProvider.class);
		if (labelProvider != null) {
			return ExtendedImageRegistry.getInstance().getImage(labelProvider.getImage(item));
		}
		return null;
	}

	/**
	 * Returns an image descriptor for the image file at the given
	 * plug-in relative path.
	 *
	 * @@generated
	 * @@param path the path
	 * @@return the image descriptor
	 */
	public static ImageDescriptor getBundledImageDescriptor(String path) {
		return AbstractUIPlugin.imageDescriptorFromPlugin(ID, path);
	}
	
	/**
	 * Respects images residing in any plug-in. If path is relative,
	 * then this bundle is looked up for the image, otherwise, for absolute 
	 * path, first segment is taken as id of plug-in with image
	 *
	 * @@generated
	 * @@param path the path to image, either absolute (with plug-in id as first segment), or relative for bundled images
	 * @@return the image descriptor
	 */
	public static ImageDescriptor findImageDescriptor(String path) {
		final <%=importManager.getImportedName("org.eclipse.core.runtime.IPath")%> p = new <%=importManager.getImportedName("org.eclipse.core.runtime.Path")%>(path);
		if (p.isAbsolute() && p.segmentCount() > 1) {
			return AbstractUIPlugin.imageDescriptorFromPlugin(p.segment(0), p.removeFirstSegments(1).makeAbsolute().toString());
		} else {
			return getBundledImageDescriptor(p.makeAbsolute().toString());
		} 
	}
	
	/**
	 * Returns an image for the image file at the given plug-in relative path.
	 * Client do not need to dispose this image. Images will be disposed automatically.
	 *
	 * @@generated
	 * @@param path the path
	 * @@return image instance
	 */
	public Image getBundledImage(String path) {
		Image image = getImageRegistry().get(path);
		if (image == null) {
			getImageRegistry().put(path, getBundledImageDescriptor(path));
			image = getImageRegistry().get(path);
		}
		return image;
	}
	
	/**
	 * @@generated
	 */
	public String getBundleString(String key) {
		try {
			return <%=importManager.getImportedName("org.eclipse.core.runtime.Platform")%>.getResourceBundle(getBundle()).getString(key);
		} catch (<%=importManager.getImportedName("java.util.MissingResourceException")%> e) {
			return "!" + key + "!";	//$NON-NLS-1$	//$NON-NLS-2$
		}
	}

	/**
	 * @@generated
	 */
	public void logError(String error) {
		logError(error, null);
	}

	/**
	 * @@param throwable actual error or null could be passed
	 * @@generated
	 */
	public void logError(String error, Throwable throwable) {
		if (error == null && throwable != null) {
			error = throwable.getMessage();
		}
		getLog().log(new Status(IStatus.ERROR, <%=genPlugin.getActivatorClassName()%>.ID, IStatus.OK, error, throwable));
		debug(error, throwable);
	}
	
	/**
	 * @@generated
	 */
	public void logInfo(String message) {
		logInfo(message, null);
	}

	/**
	 * @@param throwable actual error or null could be passed
	 * @@generated
	 */
	public void logInfo(String message, Throwable throwable) {
		if (message == null && message != null) {
			message = throwable.getMessage();
		}
		getLog().log(new Status(IStatus.INFO, <%=genPlugin.getActivatorClassName()%>.ID, IStatus.OK, message, throwable));
		debug(message, throwable);
	}
	
	/**
	 * @@generated
	 */
	private void debug(String message, Throwable throwable) {
		if (!isDebugging()) {
			return;
		}
		if (message != null) {
			System.err.println(message);
		}
		if (throwable != null) {
			throwable.printStackTrace();
		}
	}
	
}
<%importManager.emitSortedImports();%>
@


1.4
log
@Generate support for Navigator
@
text
@@


1.3
log
@Correct icons in wizards and palette: generate images, recognize relative paths, fix incorrect paths in wizard code;
Make it possible to nest palette groups
@
text
@d126 11
@


1.2
log
@[bblajer] #114200 Provide an option to generate RCP application - added RCP support for pure-GEF (lite) generator
@
text
@d138 18
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d157 11
@

