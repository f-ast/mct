head	1.6;
access;
symbols
	v20080910-1520:1.6
	v20070525-1500:1.5
	v20070520-1200:1.5
	v20070518-1300:1.5
	v20070504-1000:1.5
	v20070427-0600:1.5
	v20070420-1000:1.5
	v20070413-1300:1.5
	v20070405-1100:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070307-0700:1.5
	v20070228-2000:1.5
	v20070221-1500:1.5
	v20070208-1800:1.5
	v20070103-0300:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061214-0000:1.5
	v20061120-1300:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5
	v20061005-1700:1.3
	M1_20:1.4
	v20060904-1500:1.4
	v20060824-1600:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060620-0400:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.05.29.14.55.31;	author bblajer;	state dead;
branches;
next	1.5;
commitid	2543465c3ee24567;

1.5
date	2006.09.06.20.09.23;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.08.02.10.43.52;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.31.15.54.57;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.49;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Rewrite some templates with XPand;
Adopt VisualIDRegistry from full RT.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.editor" class="VisualIDRegistryGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* java.util.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);

final String matcherClassName = "Matcher";
final String javaMatcherContainer = "JavaMatchers";
importManager.registerInnerClass(matcherClassName);
importManager.registerInnerClass(javaMatcherContainer);

importManager.addImport("org.eclipse.emf.ecore.EClass");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");

importManager.markImportLocation(stringBuffer);
%>

/**
 * This registry is used to determine which type of visual object should be
 * created for the corresponding Diagram, Node, ChildNode or Link represented 
 * by a domain model object. Note that it only returns semantically complete objects (those who must have an element associated with them).
 *
 * @@generated
 */
public class <%=genDiagram.getVisualIDRegistryClassName()%> {

	/**
	 * @@generated
	 */
	public static final <%=genDiagram.getVisualIDRegistryClassName()%> INSTANCE = new <%=genDiagram.getVisualIDRegistryClassName()%>();

	/**
	 * @@generated
	 */
	public static int getVisualID(View view) {
		if (view instanceof Diagram) {
			if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(view.getType())) {
				return <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.VISUAL_ID;
			} else {
				return -1;
			}
		}
		return getVisualID(view.getType());
	}
	
	/**
	 * @@generated
	 */
	public static String getModelID(View view) {
		View diagram = view.getDiagram();
		while (view != diagram) {
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation")%> annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
			if (annotation != null) {
				return (String) annotation.getDetails().get("modelID"); //$NON-NLS-1$
			}
			view = (View) view.eContainer();
		}
		return diagram != null ? diagram.getType() : null;
	}

	/**
	 * @@generated
	 */
	public static int getVisualID(String type) {
		try {
			return Integer.parseInt(type);
		} catch (NumberFormatException e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logInfo("Unable to parse view type as a visualID number: " + type);
		}
		return -1;
	}

	/**
	 * @@generated
	 */
	public static String getType(int visualID) {
		return String.valueOf(visualID);
	}

	/**
	 * @@generated
	 */
	public int getDiagramVisualID(EObject domainElement) {
		if (domainElement == null) {
			return -1;
		}
		EClass domainElementMetaclass = domainElement.eClass();
		return getDiagramVisualID(domainElement, domainElementMetaclass);
	}

	/**
	 * @@generated
	 */
	public int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {
<%
if (genDiagram.getDomainDiagramElement() != null) {	/*we do not support diagrams without domain elements in other places, but keep this copy-pasted occurrence*/
	String classifierAccessorName = genDiagram.getDomainDiagramElement().getClassifierAccessorName();
	String interfaceName = importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName());
%>
		if (<%=genDiagram.getMetaPackageName(importManager)%>.eINSTANCE.get<%=classifierAccessorName%>().equals(domainElementMetaclass) && isDiagram<%=genDiagram.getUniqueIdentifier()%>((<%=interfaceName%>) domainElement)) {
			return <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.VISUAL_ID;
		}
<%}%>
		return getUnrecognizedDiagramID(domainElement);
	}

	/**
	 * @@generated
	 */
	public int getNodeVisualID(View containerView, EObject domainElement) {
		if (domainElement == null) {
			return -1;
		}
		EClass domainElementMetaclass = domainElement.eClass();
		return getNodeVisualID(containerView, domainElement, domainElementMetaclass);
	}
	
	/**
	 * @@generated
	 */
	public int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass) {
		String containerModelID = getModelID(containerView);
		if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(containerModelID)) {
			return -1;
		}
		int containerVisualID;
		if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(containerModelID)) {
			containerVisualID = getVisualID(containerView);
		} else {
			if (containerView instanceof Diagram) {
				containerVisualID = <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.VISUAL_ID;
			} else {
				return -1;
			}
		}
		switch (containerVisualID) {
<%
List nodeContainers = genDiagram.getAllContainers();
for(Iterator it = nodeContainers.iterator(); it.hasNext(); ) {
	GenContainerBase nextContainer = (GenContainerBase) it.next();
	if (nextContainer.getContainedNodes().isEmpty()) {
		continue;
	}
%>
		case <%=importManager.getImportedName(nextContainer.getEditPartQualifiedClassName())%>.VISUAL_ID:
<%
	for (Iterator childNodes = nextContainer.getContainedNodes().iterator(); childNodes.hasNext(); ) {
		GenNode childNode = (GenNode) childNodes.next();
		final String classifierAccessorName = childNode.getDomainMetaClass().getClassifierAccessorName();
		final String interfaceName = importManager.getImportedName(childNode.getDomainMetaClass().getQualifiedInterfaceName());
		final String semanticPackageInterfaceName = importManager.getImportedName(childNode.getDomainMetaClass().getGenPackage().getQualifiedPackageInterfaceName()); 
%>
			if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=classifierAccessorName%>().isSuperTypeOf(domainElementMetaclass) && isNode<%=childNode.getUniqueIdentifier()%>((<%=interfaceName%>) domainElement)) {
				return <%=importManager.getImportedName(childNode.getEditPartQualifiedClassName())%>.VISUAL_ID;
			}
<%
	}
%>
			return getUnrecognized<%=nextContainer.getUniqueIdentifier()%>ChildNodeID(domainElement);
<%
}
%>
		}
		return -1;
	}

	/**
	 * @@generated
	 */
	public int getLinkWithClassVisualID(EObject domainElement) {
		if (domainElement == null) {
			return -1;
		}
		EClass domainElementMetaclass = domainElement.eClass();
		return getLinkWithClassVisualID(domainElement, domainElementMetaclass);
	}
		
	/**
	 * @@generated
	 */
	public int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {
<%
for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink) it.next();
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		final TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		final String semanticLinkInterfaceName = modelFacet.getMetaClass().getClassifierAccessorName();
		final String interfaceName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());
		final String semanticPackageInterfaceName = importManager.getImportedName(modelFacet.getMetaClass().getGenPackage().getQualifiedPackageInterfaceName());
%>
		if (<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticLinkInterfaceName%>().isSuperTypeOf(domainElementMetaclass) && isLinkWithClass<%=genLink.getUniqueIdentifier()%>((<%=interfaceName%>) domainElement)) {
			return <%=importManager.getImportedName(genLink.getEditPartQualifiedClassName())%>.VISUAL_ID;
		}
<%
	}
}
%>
		return getUnrecognizedLinkWithClassID(domainElement);
	}

<%if (genDiagram.getDomainDiagramElement() != null) {%>
	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private boolean isDiagram<%=genDiagram.getUniqueIdentifier()%>(<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> element) {
		return true;
	}
<%}%>

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private int getUnrecognizedDiagramID(EObject domainElement) {
		return -1;
	}

<%
for (Iterator nodes = genDiagram.getAllNodes().iterator(); nodes.hasNext();) {
	GenNode nextNode = (GenNode) nodes.next();
	if (nextNode.getModelFacet() == null) {
		continue;
	}
	String childNodeInterfaceName = importManager.getImportedName(nextNode.getDomainMetaClass().getQualifiedInterfaceName());
	boolean callMatcher = nextNode.getModelFacet() != null && nextNode.getModelFacet().getModelElementSelector() != null;
%>

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private boolean isNode<%=nextNode.getUniqueIdentifier()%>(<%=childNodeInterfaceName%> element) {
		return <%if (callMatcher) {%><%=nextNode.getUniqueIdentifier()%>.matches(element)<%} else {%>true<%}%>;
	}
<%
}
for (Iterator containers = nodeContainers.iterator(); containers.hasNext();) {
	GenContainerBase nextContainer = (GenContainerBase) containers.next();
	if (nextContainer.getContainedNodes().isEmpty()) {
		continue;
	}
%>

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */	
	private int getUnrecognized<%=nextContainer.getUniqueIdentifier()%>ChildNodeID(EObject domainElement) {
		return -1;
	}
<%
}
%>

	/**
	 * User can change implementation of this method to handle some specific
	 * situations not covered by default logic.
	 *
	 * @@generated
	 */
	private int getUnrecognizedLinkWithClassID(EObject domainElement) {
		return -1;
	}

<%
for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink) it.next();
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		String interfaceName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());
		boolean callMatcher = modelFacet.getModelElementSelector() != null;		
%>

	/**
	 * User can change implementation of this method to check some additional 
	 * conditions here.
	 *
	 * @@generated
	 */
	private boolean isLinkWithClass<%=genLink.getUniqueIdentifier()%>(<%=interfaceName%> element) {
		return <%if (callMatcher) {%><%=genLink.getUniqueIdentifier()%>.matches(element)<%} else {%>true<%}%>;
	}
<%
	}
}


final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
final List javaSelectorFacets = new ArrayList();
final Map __exprEnvVariables = Collections.EMPTY_MAP;
final String __outEnvVarName = null; // no custom env
final String __javaOperationContainer = javaMatcherContainer; // put method here

int selectorCounter = 0;
for (Iterator it = genDiagram.eAllContents(); it.hasNext() && expressionProviders != null;) {
	Object next = it.next();
	String id = null;
	TypeModelFacet modelFacet = null;
	if (next instanceof GenNode) {
		id = ((GenNode) next).getUniqueIdentifier();
		modelFacet = ((GenNode) next).getModelFacet();
	} else if (next instanceof GenLink && ((GenLink) next).getModelFacet() instanceof TypeLinkModelFacet) {
		id = ((GenLink) next).getUniqueIdentifier();
		modelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
	}
	if (modelFacet == null || modelFacet.getModelElementSelector() == null || modelFacet.getMetaClass() == null) {
		continue;
	}
	GenConstraint selector = modelFacet.getModelElementSelector();
	selectorCounter++;
	// setup expression factory
	ValueExpression __genValueExpression = selector;
	GenClassifier __genExprContext = modelFacet.getMetaClass();
	GenExpressionProviderBase expressionProvider = expressionProviders.getProvider(__genValueExpression); 
	if(expressionProvider instanceof GenJavaExpressionProvider && !expressionProviders.isCopy(__genValueExpression)) {
		// skipping duplicates coming from reused node mappings 
		javaSelectorFacets.add(modelFacet);
	}
%>

		/**
		 * @@generated
		 */
		private static final <%=matcherClassName%> <%=id%> = new <%=matcherClassName%>(<%@@ include file="../expressions/getExpression.jetinc"%>);
<%
} /* end of selector interation */

if(selectorCounter > 0) { %>			

	/**
	 * @@generated
	 */
	static class <%=matcherClassName%> {
	
		/**
		 * @@generated	
		 */					
		private <%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> condition;
					
		/**
		 * @@generated	
		 */				
		<%=matcherClassName%>(<%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> conditionExpression) {			
			this.condition = conditionExpression;
		}
	
		/**
		 * @@generated	
		 */						
		boolean matches(EObject object) {
			Object result = condition.evaluate(object);
			return result instanceof Boolean && ((Boolean)result).booleanValue();			
		}
	}// <%=matcherClassName%>
<%
	if(!javaSelectorFacets.isEmpty()) {
%>
	/**
	 * @@generated
	 */
	 private static class <%=javaMatcherContainer%> {
<%
		for(Iterator it = javaSelectorFacets.iterator(); it.hasNext();) {
			TypeModelFacet modelFacet = (TypeModelFacet) it.next();
			ValueExpression __genValueExpression = modelFacet.getModelElementSelector();
			GenClassifier __genExprContext = modelFacet.getMetaClass();
			String __genExprResultType = "java.lang.Boolean"; //$NON-NLS-1$
%>
<%@@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
		} /* java javaSelectorFacets iteration */
%>
	}// <%=javaMatcherContainer%>
<%
	} /* !javaSelectorFacets.isEmpty() */
} /* selectorCounter > 0 */
%>
}
	
<%importManager.emitSortedImports();%>
@


1.5
log
@[155955] bblajer -  Allow creation of child nodes directly in parent elements
@
text
@@


1.4
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@d143 1
a143 2
Collection nodeContainers = new ArrayList(genDiagram.getCompartments());
nodeContainers.add(genDiagram);
d146 3
d251 3
@


1.3
log
@[bblajer] #144412 Allow non-OCL-based FeatureSeqInitializers, constraints and selectors
@
text
@d174 3
d296 1
@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* java.util.* org.eclipse.gmf.common.codegen.*"%>
d9 6
d32 3
a223 1
String acceptAllMatcherAccessor = "acceptAllMatcher()"; //$NON-NLS-1$
d226 5
a230 2
	String qualifiedChildNodeInterfaceName = nextNode.getDomainMetaClass().getQualifiedInterfaceName();
	String childNodeSelector = nextNode.getModelFacet() != null && nextNode.getModelFacet().getModelElementSelector() != null ? nextNode.getUniqueIdentifier() : acceptAllMatcherAccessor;
d239 3
a241 3
	private boolean isNode<%=nextNode.getUniqueIdentifier()%>(<%=importManager.getImportedName(qualifiedChildNodeInterfaceName)%> element) {
		return ElementSelectors.<%=childNodeSelector%>.matches(element);
	}	
d277 1
a277 1
		String linkSelector = modelFacet.getModelElementSelector() != null ? genLink.getUniqueIdentifier() : acceptAllMatcherAccessor;		
d287 1
a287 1
		return ElementSelectors.<%=linkSelector%>.matches(element);
a291 1
%>
d293 6
a298 5
	/**
	 * @@generated
	 */
	private static class ElementSelectors {	
<%
d300 1
a300 1
for (Iterator it = genDiagram.eAllContents(); it.hasNext();) {
d311 1
a311 1
	if (modelFacet == null || modelFacet.getModelElementSelector() == null) {
d316 8
a326 3
		 * Element matching condition for <%=id%>.
		 * <pre>language: <%=selector.getLanguage()%></pre>	
		 * <pre>body    : <%=selector.getBody()%></pre>
d329 11
a339 9
		private static final Matcher <%=id%> = new Matcher("<%=selector.getBody()%>");
<%}%>
		
		/**
		 * @@generated
		 */
		private ElementSelectors() {
		}
<%if(selectorCounter > 0) { %>			
d341 3
a343 18
		* @@generated	
		*/
		static class Matcher {
	
			/**
			* @@generated	
			*/					
			private EClass evalContext;
	
			/**
			* @@generated	
			*/						
			private <%=importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OCLConstraintCondition")%> condition;
	
			/**
			* @@generated	
			*/						
			private String body;		
a344 47
			/**
			* @@generated	
			*/				
			Matcher(String expressionBody) {			
				body = expressionBody;
			}
	
			/**
			* @@generated	
			*/						
			boolean matches(EObject object) {		
				try {
					Boolean result = (object != null) ? evaluate(object) : Boolean.FALSE;
					return result.booleanValue();
				} catch(IllegalArgumentException e) {
					<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError(null, e);
					return false;
				}
			}
	
			/**
			* @@generated	
			*/		
			private Boolean evaluate(EObject context) {
				this.evalContext = context.eClass();
				if(condition == null) {					
					condition = new <%=importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OCLConstraintCondition")%>(body, evalContext);
				}
				if(condition != null) {
					return booleanCast(condition.evaluate(context));
				}
				return Boolean.FALSE;
			}
	
			/**
			* @@generated	
			*/					
			private static Boolean booleanCast(Object value) {
				if(value == null) {
					return null;
				} else if(value instanceof Boolean) {
					 return (Boolean)value;	
				}
				return Boolean.FALSE;
			}
		} // end of Matcher
<%}%>		
d346 4
a349 13
		 * @@generated
		 */
		static class AcceptAllMatcher {
			/**
			 * @@generated
			 */		
			static final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();
			/**
			 * @@generated
			 */					
			boolean matches(Object element) {
				return true;
			}
d351 1
a351 1
		
d353 5
a357 4
		 * @@generated
		 */		
		static AcceptAllMatcher acceptAllMatcher() {
			return AcceptAllMatcher.INSTANCE;
d359 24
a382 1
	} // end of ElementSelectors
d384 1
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@a4 1
final String modelID = genDiagram.getEditorGen().getModelID();
d31 48
d97 1
a97 1
			return <%=genDiagram.getVisualID()%>;
d119 1
a119 1
		if (!"<%=modelID%>".equals(containerModelID)) {
d123 1
a123 1
		if ("<%=modelID%>".equals(containerModelID)) {
d127 1
a127 1
				containerVisualID = <%=genDiagram.getVisualID()%>;		
d139 1
a139 1
		case <%=nextContainer.getVisualID()%>:
d148 1
a148 1
				return <%=childNode.getVisualID()%>;
d183 1
a183 1
			return <%=genLink.getVisualID()%>;
a282 4
<%@@ include file="getModelID.jetinc" %>

<%@@ include file="getVisualID.jetinc" %>

@

