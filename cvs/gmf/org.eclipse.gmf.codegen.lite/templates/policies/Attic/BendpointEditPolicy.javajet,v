head	1.3;
access;
symbols
	v20080910-1520:1.3
	v20061005-1700:1.1.2.1
	v20060824-1600:1.1.2.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060620-0400:1.1
	v20060616-1400:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.09.01.16.14.09;	author atikhomirov;	state dead;
branches;
next	1.2;

1.2
date	2006.08.09.14.34.54;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.05.13.35.59;	author ashatalin;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.08.24.12.09.01;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.policies" class="BendpointEditPolicyGenerator"
	imports="org.eclipse.gmf.common.codegen.* org.eclipse.gmf.codegen.gmfgen.*"%>
<%
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>

<%
importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class BendpointEditPolicy extends <%=importManager.getImportedName("org.eclipse.gef.editpolicies.BendpointEditPolicy")%> {
	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> getDiagramEdge() {
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>)getHost().getModel();
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getCreateBendpointCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.BendpointRequest")%> request) {
		return getModifyBendpointCommand(new BendpointCreator(request.getIndex(), request.getLocation()));
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getDeleteBendpointCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.BendpointRequest")%> request) {
		return getModifyBendpointCommand(new BendpointDeleter(request.getIndex()));
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getMoveBendpointCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.BendpointRequest")%> request) {
		return getModifyBendpointCommand(new BendpointMover(request.getIndex(), request.getLocation()));
	}

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getModifyBendpointCommand(final BendpointModifier modifier) {
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramEdge().getDiagram().getElement());
		return new <%=importManager.getImportedName(genDiagram.getEditPartsPackageName() + ".WrappingCommand")%>(editingDomain, new BendpointModificationCommand(modifier));
	}

	/**
	 * @@generated
	 */
	private class BendpointModificationCommand extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
		/**
		 * @@generated
		 */
		private BendpointModifier bendpointModifier; 
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("java.util.List")%> oldPoints;

		/**
		 * @@generated
		 */
		public BendpointModificationCommand(BendpointModifier bendpointModifier) {
			this.bendpointModifier = bendpointModifier;
		}

		/**
		 * @@generated
		 */
		public void execute() {
			<%=importManager.getImportedName("org.eclipse.draw2d.Connection")%> connection = getConnection();
			final <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> ptRef1 = connection.getSourceAnchor().getReferencePoint().getCopy();
			connection.translateToRelative(ptRef1);
			final <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> ptRef2 = connection.getTargetAnchor().getReferencePoint().getCopy();
			connection.translateToRelative(ptRef2);
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints")%> bendpoints = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints")%>) getDiagramEdge().getBendpoints();
			if (bendpoints == null) {
				bendpoints = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createRelativeBendpoints();
				getDiagramEdge().setBendpoints(bendpoints);
			}
			oldPoints = bendpoints.getPoints();
			<%=importManager.getImportedName("java.util.List")%> newPoints = new <%=importManager.getImportedName("java.util.ArrayList")%>(oldPoints);
			bendpointModifier.applyModification(newPoints, new BendpointConverter() {
				public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint")%> convert(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> point) {
					<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%> s = point.getDifference(ptRef1);
					<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%> t = point.getDifference(ptRef2);
					return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint")%>(s.width, s.height, t.width, t.height);
				}
			});
			bendpoints.setPoints(newPoints);
		}

		/**
		 * @@generated
		 */
		public void undo() {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints")%> bendpoints = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints")%>) getDiagramEdge().getBendpoints();
			bendpoints.setPoints(oldPoints);
		}

		/**
		 * @@generated
		 */
		public void redo() {
			execute();
		}

		/**
		 * @@generated
		 */
		public boolean canExecute() {
			return true;
		}
	}

	/**
	 * @@generated
	 */
	private static interface BendpointConverter {
		/**
		 * @@generated
		 */
		public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint")%> convert(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> point);
	}

	/**
	 * @@generated
	 */
	private static interface BendpointModifier {
		/**
		 * @@generated
		 */
		public void applyModification(<%=importManager.getImportedName("java.util.List")%>/*<<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint")%>>*/ originalBendpoints, BendpointConverter converter);
	}

	/**
	 * @@generated
	 */
	private static class BendpointDeleter implements BendpointModifier {
		/**
		 * @@generated
		 */
		private int index;

		/**
		 * @@generated
		 */
		public BendpointDeleter(int index) {
			this.index = index;
		}

		/**
		 * @@generated
		 */
		public void applyModification(<%=importManager.getImportedName("java.util.List")%> originalBendpoints, BendpointConverter converter) {
			originalBendpoints.remove(index);
		}
	}

	/**
	 * @@generated
	 */
	private static class BendpointMover implements BendpointModifier {
		/**
		 * @@generated
		 */
		private int index;

		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> point;

		/**
		 * @@generated
		 */
		public BendpointMover(int index, <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> point) {
			this.index = index;
			this.point = point;
		}

		/**
		 * @@generated
		 */
		public void applyModification(<%=importManager.getImportedName("java.util.List")%> originalBendpoints, BendpointConverter converter) {
			originalBendpoints.set(index, converter.convert(point));
		}
	}

	/**
	 * @@generated
	 */
	private static class BendpointCreator implements BendpointModifier {
		/**
		 * @@generated
		 */
		private int index;

		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> point;

		/**
		 * @@generated
		 */
		public BendpointCreator(int index, <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> point) {
			this.index = index;
			this.point = point;
		}

		/**
		 * @@generated
		 */
		public void applyModification(<%=importManager.getImportedName("java.util.List")%> originalBendpoints, BendpointConverter converter) {
			originalBendpoints.add(index, converter.convert(point));
		}
	}
}
<%importManager.emitSortedImports();%>
@


1.2
log
@[152859] bblajer - add missing @@generated tags
@
text
@@


1.1
log
@#145101 Lite Generator: Support bendpoints in the same format as runtime-based generated diagrams
@
text
@d126 3
d136 3
@


1.1.2.1
log
@[152859] bblajer - Lite Generator: All generated methods should be marked as @@generated
[152854] bblajer - Lite Generator: Allow shape nodes to be placed inside list-layout compartments
@
text
@a125 3
		/**
		 * @@generated
		 */
a132 3
		/**
		 * @@generated
		 */
@


