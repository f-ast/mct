head	1.2;
access;
symbols
	v20080910-1520:1.2
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070307-0700:1.1
	v20070228-2000:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061214-0000:1.1
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2007.04.04.11.05.01;	author bblajer;	state dead;
branches;
next	1.1;
commitid	18c54613864d4567;

1.1
date	2006.09.21.10.12.03;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.2
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@<%
if (childNodes.size() == 0) {
%>
	return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
<%
} else {
%>
	<%=importManager.getImportedName("java.util.List")%> result = new <%=importManager.getImportedName("java.util.LinkedList")%>();
<%
	Map genFeature2genNodeMap = new LinkedHashMap();
	for (int nodeIndex = 0; nodeIndex < childNodes.size(); nodeIndex++) {
		GenNode nextNode = (GenNode) childNodes.get(nodeIndex);
		TypeModelFacet typeModelFacet = nextNode.getModelFacet();
		if (typeModelFacet == null) {
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
		if (!genFeature2genNodeMap.containsKey(childMetaFeature)) {
			genFeature2genNodeMap.put(childMetaFeature, new ArrayList());
		}
		((Collection) genFeature2genNodeMap.get(childMetaFeature)).add(nextNode);
	}
	Set entrySet = genFeature2genNodeMap.entrySet();
	if (entrySet.size() > 0) {
%>
	<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> viewObject = <%=_getViewCode%>;
	<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelObject = viewObject.getElement();
	<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> nextValue;
	int nodeVID;
<%
	}
	for (Iterator entries = entrySet.iterator(); entries.hasNext();) {
		Map.Entry nextEntry = (Map.Entry) entries.next();
		GenFeature childMetaFeature = (GenFeature) nextEntry.getKey();
		Collection genNodesCollection = (Collection) nextEntry.getValue();
		if (childMetaFeature.isListType()) {
%>
	for(<%=importManager.getImportedName("java.util.Iterator")%> it = <%myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", childMetaFeature, null, true);%>.iterator(); it.hasNext(); ) {
		nextValue = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) it.next();
<%
		} else {
%>
	nextValue = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>)<%myFeatureGetAccessorHelper.appendFeatureValueGetter("modelObject", childMetaFeature, null, false);%>;
<%
	}
%>
	nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(viewObject, nextValue);
<%
	boolean generateSwitch = genNodesCollection.size() != 1;
	if (generateSwitch) {
%>
	switch (nodeVID) {
<%
	}
	for (Iterator genNodesIterator = genNodesCollection.iterator(); genNodesIterator.hasNext();) {
		GenNode nextNode = (GenNode) genNodesIterator.next();
		if (generateSwitch) {
%>
	case <%=importManager.getImportedName(nextNode.getEditPartQualifiedClassName())%>.VISUAL_ID: {
<%
		} else {
%>
	if (<%=importManager.getImportedName(nextNode.getEditPartQualifiedClassName())%>.VISUAL_ID == nodeVID) {
<%
		}
%>
		result.add(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor")%>(nextValue, nodeVID));
<%
		if (generateSwitch) {
%>
		break;
		}
<%
		} else {
%>
		}
<%
		}
	}
	if (generateSwitch) {
%>
	}
<%
	}
	if (childMetaFeature.isListType()) {
%>
	}
<%
	}
}
%>
	return result;
<%
}
%>
@


1.1
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@@

