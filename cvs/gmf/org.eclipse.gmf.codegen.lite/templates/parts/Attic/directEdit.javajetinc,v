head	1.5;
access;
symbols
	v20080910-1520:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	v20060330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070307-0700:1.3
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070103-0300:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061214-0000:1.3
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.1
	v20061005-1700:1.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060824-1600:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060620-0400:1.1
	v20060616-1400:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2007.04.04.11.04.48;	author bblajer;	state dead;
branches;
next	1.4;
commitid	18c54613864d4567;

1.4
date	2007.03.15.16.43.30;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	617845f977b04567;

1.3
date	2006.11.09.18.15.42;	author bblajer;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.26.14.34.57;	author bblajer;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager")%> getManager() {
		if (manager == null) {
			manager = new <%=importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager")%>(this, <%=importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor")%>.class, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.services.LabelCellEditorLocator")%>(getViewer(), getLabel())) {
				protected void initCellEditor() {
					getCellEditor().setValue(getLabelTextDisplayer().getEditText(<%=primaryView%>.getElement()));
				}
			};
		}
		return manager;
	}

	/**
	 * @@generated
	 */
	protected void performDirectEdit() {
		if (<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.isReadOnly(<%=primaryView%>.getElement()) || <%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.isReadOnly(<%=primaryView%>)) {
			return;
		}
		getManager().show();
	}

@


1.4
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@@


1.3
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d6 1
a6 24
			manager = new <%=importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager")%>(this, <%=importManager.getImportedName("org.eclipse.jface.viewers.TextCellEditor")%>.class, new <%=importManager.getImportedName("org.eclipse.gef.tools.CellEditorLocator")%>() {
				public void relocate(<%=importManager.getImportedName("org.eclipse.jface.viewers.CellEditor")%> celleditor) {
					<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> rect = getLabel().getTextBounds();
					getLabel().translateToAbsolute(rect);
					<%=importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager")%> zoomManager = (<%=importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager")%>) getViewer().getProperty(<%=importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager")%>.class.toString());
					double zoomLevel = zoomManager == null ? 1.0 : zoomManager.getZoom();
					if (zoomLevel > 1.0 && getLabel().getFont() != null) {
						<%=importManager.getImportedName("org.eclipse.swt.graphics.FontData")%>[] datas = getLabel().getFont().getFontData();
						for(int i = 0; i < datas.length; i++) {
							datas[i].height *= zoomLevel;
						}
						final <%=importManager.getImportedName("org.eclipse.swt.graphics.Font")%> font = new <%=importManager.getImportedName("org.eclipse.swt.graphics.Font")%>(getLabel().getFont().getDevice(), datas);
						celleditor.getControl().setFont(font);
						celleditor.getControl().addDisposeListener(new <%=importManager.getImportedName("org.eclipse.swt.events.DisposeListener")%>() {
							public void widgetDisposed(<%=importManager.getImportedName("org.eclipse.swt.events.DisposeEvent")%> e) {
								font.dispose();
							}
						});
					}
					int avr = <%=importManager.getImportedName("org.eclipse.draw2d.FigureUtilities")%>.getFontMetrics(celleditor.getControl().getFont()).getAverageCharWidth();
					rect.setSize(new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(celleditor.getControl().computeSize(<%=importManager.getImportedName("org.eclipse.swt.SWT")%>.DEFAULT, <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.DEFAULT)).expand(avr * 2, 0));
					celleditor.getControl().setBounds(rect.x, rect.y, rect.width, rect.height);
				}
			}) {
d8 1
a8 1
					getCellEditor().setValue(getLabelEditText());
d19 3
@


1.2
log
@When zoom level is > 100%, font height of the inplace editor should be adjusted to match the font height of the label (when zoom level is < 100%, no scaling is performed, otherwise the text is not readable)
@
text
@a3 11
	public void performRequest(<%=importManager.getImportedName("org.eclipse.gef.Request")%> req) {
		if (<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_DIRECT_EDIT == req.getType()) {
			performDirectEdit();
		} else {
			super.performRequest(req);
		}
	}

	/**
	 * @@generated
	 */
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d21 17
@

