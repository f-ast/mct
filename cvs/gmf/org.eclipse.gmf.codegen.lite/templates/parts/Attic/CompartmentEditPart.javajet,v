head	1.23;
access;
symbols
	v20080910-1520:1.23
	v20070403-1500:1.22
	v20070330-1300:1.22
	v20060330-1300:1.22
	v20070322-1100:1.22
	v20060316-0600:1.22
	v20070307-0700:1.20
	v20070228-2000:1.18
	v20070221-1500:1.17
	v20070208-1800:1.17
	v20070103-0300:1.15
	M4_20:1.15
	v20061222-1800:1.15
	v20061214-0000:1.15
	v20061120-1300:1.14
	M3_20:1.14
	v20061117-0800:1.14
	v20061013-1330:1.12
	v20061005-1700:1.5
	M1_20:1.8
	v20060904-1500:1.8
	v20060824-1600:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060620-0400:1.5
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.23
date	2007.04.04.11.04.48;	author bblajer;	state dead;
branches;
next	1.22;
commitid	18c54613864d4567;

1.22
date	2007.03.15.16.43.30;	author bblajer;	state Exp;
branches;
next	1.21;
commitid	617845f977b04567;

1.21
date	2007.03.09.17.19.35;	author bblajer;	state Exp;
branches;
next	1.20;
commitid	22ed45f197244567;

1.20
date	2007.03.02.21.35.39;	author bblajer;	state Exp;
branches;
next	1.19;
commitid	403a45e898a74567;

1.19
date	2007.03.02.21.21.16;	author bblajer;	state Exp;
branches;
next	1.18;
commitid	2b1945e895484567;

1.18
date	2007.02.23.16.19.36;	author bblajer;	state Exp;
branches;
next	1.17;
commitid	496945df14164567;

1.17
date	2007.02.08.16.44.13;	author bblajer;	state Exp;
branches;
next	1.16;
commitid	af945cb535c4567;

1.16
date	2007.01.11.19.16.11;	author bblajer;	state Exp;
branches;
next	1.15;
commitid	6c2845a68cf94567;

1.15
date	2006.12.12.12.54.48;	author bblajer;	state Exp;
branches;
next	1.14;
commitid	355b457ea6574567;

1.14
date	2006.11.09.18.15.42;	author bblajer;	state Exp;
branches;
next	1.13;

1.13
date	2006.11.01.14.38.00;	author bblajer;	state Exp;
branches;
next	1.12;

1.12
date	2006.10.12.10.23.44;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.06.20.09.23;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.04.19.27.26;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.01.16.14.09;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.04.17.05.48;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.08.02.10.43.51;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.19.19.14.13;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.24.18.18.05;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.22.18.22.10;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.48;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.23
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.parts" class="CompartmentEditPartGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
GenCompartment genCompartment = (GenCompartment) ((Object[]) argument)[0];
GenNode genHost = genCompartment.getNode();
GenDiagram genDiagram = genCompartment.getDiagram();
List childNodes = genCompartment.getChildNodes();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
importManager.registerInnerClass("NotationModelRefresher");	//from notationModelRefresher.jetinc
%>
<%@@ include file="../copyright4java.jetinc"%>

<%@@ include file="../common/featureGetAccessor.jetinc"%>

<%importManager.emitPackageStatement(stringBuffer);
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.gef.EditPart");
importManager.addImport("org.eclipse.gef.requests.CreateRequest");

importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class <%=genCompartment.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart")%> implements <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%> {
<%{
GenCommonBase genCommonBase = genCompartment;%>
<%@@ include file="visualID.jetinc"%>
<%}%>

	/**
	 * @@generated
	 */
	public <%=genCompartment.getEditPartClassName()%>(View view) {
		setModel(view);
	}

	/**
	 * @@generated
	 */
	public boolean isSelectable() {
		return false;
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getModelChildren() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.DrawerStyle")%> style = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.DrawerStyle")%>) getDiagramNode().getStyle(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getDrawerStyle());
		if (style != null && style.isCollapsed()) {
			return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
		}
		return getDiagramNode().getChildren();
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> getDiagramNode() {
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) getModel();
	}

	/**
	 * @@generated
	 */
	protected void createEditPolicies() {
<%{
GenCommonBase genCommonBase = genCompartment;%>
<%@@ include file="layoutEditPolicy.jetinc"%>
<%@@ include file="customBehaviour.jetinc"%>
<%@@include file="openEditPolicy.jetinc"%>
<%}%>
		installNotationModelRefresher();
	}

	/**
	 * Returns the selection handles that should be contributed to the parent when it becomes selected.
	 * @@generated
	 */
	public <%=importManager.getImportedName("java.util.List")%> createSelectionHandles() {
<%
if (!genCompartment.isCanCollapse()) {
%>
		return <%=importManager.getImportedName("java.util.Collections")%>.singletonList(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.handles.CompartmentNameHandle")%>(this, getTitleName()));
<%
} else {
%>
		return <%=importManager.getImportedName("java.util.Collections")%>.singletonList(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.handles.CompartmentCollapseHandle")%>(this, getTitleName()));
<%
}
%>
	}

	/**
	 * @@generated
	 */
	public void performRequest(<%=importManager.getImportedName("org.eclipse.gef.Request")%> req) {
<%@@include file="performOpen.jetinc"%>
		super.performRequest(req);
	}

	/**
	 * @@generated
	 */
	protected String getTitleName() {
<%
if (genCompartment.isNeedsTitle()) {
%>
		return "<%=genCompartment.getTitle()%>";
<%
} else {
%>
		return "";	//$NON-NLS-1$
<%
}
%>
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {
		<%=importManager.getImportedName("org.eclipse.draw2d.Figure")%> result = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.figures.CompartmentFigure")%>();
		result.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.StackLayout")%>());
		<%=importManager.getImportedName("org.eclipse.draw2d.ScrollPane")%> scrollPane = new <%=importManager.getImportedName("org.eclipse.draw2d.ScrollPane")%>();
		result.add(scrollPane);
<%if (genCompartment.isListLayout()) {%>
		<%=importManager.getImportedName("org.eclipse.draw2d.Viewport")%> viewport = new <%=importManager.getImportedName("org.eclipse.draw2d.Viewport")%>();
		contentPane = new <%=importManager.getImportedName("org.eclipse.draw2d.Figure")%>();
		contentPane.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.ToolbarLayout")%>());
<%} else {%>
		<%=importManager.getImportedName("org.eclipse.draw2d.Viewport")%> viewport = new <%=importManager.getImportedName("org.eclipse.draw2d.FreeformViewport")%>();
		contentPane = new <%=importManager.getImportedName("org.eclipse.draw2d.FreeformLayer")%>();
		contentPane.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.FreeformLayout")%>());
<%}%>
		viewport.setContents(contentPane);
		scrollPane.setViewport(viewport);
		return result;
	}

<%
if (!genCompartment.isListLayout()) {
%>
	/**
	 * @@generated
	 */
	public Object getAdapter(Class key) {
		if (<%=importManager.getImportedName("org.eclipse.gef.SnapToHelper")%>.class == key) {
			return new <%=importManager.getImportedName("org.eclipse.gef.SnapToGrid")%>(this);
		}
		return super.getAdapter(key);
	}
<%
}
%>

	/**
	 * @@generated
	 */
	public IFigure getContentPane() {
		return contentPane;
	}

	/**
	 * @@generated
	 */
	private IFigure contentPane;

	/**
	 * @@generated
	 */
	public void activate() {
		super.activate();
		installNotationModelRefresher();
	}

	/**
	 * @@generated
	 */
	public void deactivate() {
		uninstallNotationModelRefresher();
		super.deactivate();
	}

<%
{
String _getViewCode = "getDiagramNode()";
String _getDiagramCode = _getViewCode + ".getDiagram()";
boolean isListLayout = genCompartment.isListLayout();
%>
<%@@ include file="notationModelRefresher.jetinc"%>
<%
}
%>

<%@@ include file="refresher.javajetinc"%>

	/**
	 * @@generated
	 */
	private void createRefreshers() {
		structuralFeatures2Refresher = new HashMap();
<%@@ include file="refreshers.javajetinc/children.javajetinc"%>
<%@@ include file="refreshers.javajetinc/visibility.javajetinc"%>
	}

	/**
	 * @@generated
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
//XXX:		refreshBackgroundColor();
//XXX:		refreshForegroundColor();
//XXX:		refreshFont();
		refreshVisibility();
	}

	/**
	 * @@generated
	 */
	protected void refreshVisibility() {
		boolean isVisible = ((View)getModel()).isVisible();
		boolean wasVisible = getFigure().isVisible();
		if (isVisible == wasVisible) {
			return;
		}
		if (!isVisible && (getSelected() != SELECTED_NONE)) {
			getViewer().deselect(this);
		}

		getFigure().setVisible(isVisible);
		getFigure().revalidate();
	}
}

<%importManager.emitSortedImports();%>
@


1.22
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@@


1.21
log
@[164018]: Command generation separated from Parts for layout edit policy and graphical node edit policy;
NewDiagramFileWizard: layout is not persisted if the diagram is closed right after initialization
@
text
@a16 2
importManager.addImport("org.eclipse.gef.commands.Command");
importManager.addImport("org.eclipse.gef.commands.CompoundCommand");
@


1.20
log
@Generated diagram plugin should at least compile when there's a node with  an abstract underlying element.
@
text
@a69 67
<%if (!genCompartment.isListLayout()) {%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.LAYOUT_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.XYLayoutEditPolicyEx")%>() {
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> createChangeConstraintCommand(final <%=importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest")%> request, final <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child, Object constraint) {
<%@@include file="changeConstraintCommand.jetinc"%>
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> createChangeConstraintCommand(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child, Object constraint) {
				assert false;
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
			}
<%@@include file="preservePrimaryDragEditPolicy.jetinc"%>
<%} else {%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.LAYOUT_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.ListLayoutEditPolicy")%>() {
			protected Object getConstraintFor(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> rect) {
				return null;
			}
			protected Object getConstraintFor(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> point) {
				return null;
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> createChangeConstraintCommand(EditPart child, Object constraint) {
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
			}
<%@@include file="preservePrimaryDragEditPolicy.jetinc"%>
<%}%>
<%
{
	String _getViewCode = "getDiagramNode()";
	boolean isListLayout = genCompartment.isListLayout();
%>
<%@@include file="createAddCommand.jetinc"%>
<%@@include file="createCloneCommand.jetinc"%>
<%
}
%>
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getCreateCommand(CreateRequest request) {
<%if (null != genDiagram.getPalette()) {%>
				if (request instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%>) {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%> requestEx = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%>) request;
					if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(requestEx.getModelID())) {
						return null;
					}
					int[] visualIds = requestEx.getVisualIds();
					<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
					for(int i = 0; i < visualIds.length; i++) {
						int nextVisualId = visualIds[i];
						switch (nextVisualId) {
<%
for(Iterator it = genCompartment.getChildNodes().iterator(); it.hasNext(); ) {
	GenChildNode next = (GenChildNode)it.next();
	if (next.isSansDomain() || next.getDomainMetaClass().isAbstract()) {
		continue;
	}
%>
						case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
							result.append(new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Create" + next.getDomainMetaClass().getName() + next.getVisualID() + "Command")%>((View) getModel(), requestEx<%if (!genCompartment.isListLayout()) {%>, 
								(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>)getConstraintFor(request)<%}%>));
							break;
<%
}
%>
						}
					}
					return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(((View) getModel()).getDiagram().getElement()), result);
				}
<%}/*when there's palette*/%>
				return null;
			}
		});
d72 1
@


1.19
log
@[164018]: Add<>Command and Clone<>Command moved to separate classes;
Common methods from edit policies moved to runtime superclasses
@
text
@d118 3
@


1.18
log
@ComponentEditPolicy separated into a top-level class;
CreateRequest now knows about the MODEL_ID;
All "Command" class references fully-qualified in templates to prevent compilation problems;
[170078]: Remove link with class from the domain model on deleting link's destination
@
text
@a23 1
<%@@ include file="../common/relatedNodesFinder.jetinc"%>
d71 1
a71 1
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.LAYOUT_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.XYLayoutEditPolicy")%>() {
d81 1
a81 1
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.LAYOUT_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy")%>() {
@


1.17
log
@Ensure unselectability of the inner auxiliary edit parts by more standard GEF means (isSelectable() returns false instead of using EditPolicy with getHost() delegation)
@
text
@d76 1
a76 1
			protected Command createChangeConstraintCommand(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child, Object constraint) {
d89 1
a89 1
			protected Command createChangeConstraintCommand(EditPart child, Object constraint) {
d104 1
a104 1
			protected Command getCreateCommand(CreateRequest request) {
d108 3
@


1.16
log
@[170248]: Beautify compartments generated for the lite version
@
text
@d45 7
@


1.15
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@d46 4
d73 1
d85 1
d134 18
d163 3
d167 7
d180 1
a180 3
		<%=importManager.getImportedName("org.eclipse.draw2d.LabeledContainer")%> result = new <%=importManager.getImportedName("org.eclipse.draw2d.LabeledContainer")%>();
		result.setLabel(getTitleName());
		result.setOpaque(false);
a228 8
	private <%=importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName())%> resolveSemanticElement() {
		View view = getDiagramNode();
		return (view.getElement() instanceof <%=importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName())%>) ? (<%=importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName())%>) view.getElement() : null;
	}

	/**
	 * @@generated
	 */
@


1.14
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d105 1
a105 1
							result.append(new Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>Command((View) getModel(), requestEx<%if (!genCompartment.isListLayout()) {%>, 
a266 11

<%
for(Iterator it = genCompartment.getChildNodes().iterator(); it.hasNext(); ) {
	GenChildNode next = (GenChildNode)it.next();
	boolean isStatic = false;
	boolean isListLayout = genCompartment.isListLayout();
%>
<%@@ include file="createNodeCommand.javajetinc"%>
<%
}
%>
@


1.13
log
@Containers with XY layout should define adapter for SnapToHelper (used to be defined only for the DiagramEditPart)
@
text
@d119 5
d130 8
@


1.12
log
@[160225] bblajer - Respect EStructuralFeature cardinality in commands that create/move/clone elements
@
text
@d153 16
@


1.11
log
@[160205] bblajer - move and clone elements on diagram
@
text
@a243 1
	String resolvedSemanticElement = "resolveSemanticElement()";
@


1.10
log
@[155955] bblajer -  Allow creation of child nodes directly in parent elements
@
text
@d24 1
d81 10
@


1.9
log
@clean compilation warnings
@
text
@d61 2
a62 42
			protected Command createChangeConstraintCommand(final <%=importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest")%> request, final EditPart child, Object constraint) {
				final Node node = (Node) child.getModel();
				<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> emfCommand = new <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%>("Change node position/size") {
					private <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> moveDelta;
					private <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%> resizeDelta;

					public boolean canUndo() {
						return canExecute();
					}
					protected boolean prepare() {
						if (node.getLayoutConstraint() instanceof Bounds == false) {
							return false;
						}
						Bounds bounds = (Bounds) node.getLayoutConstraint();
						<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> original = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());
						<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> referenceFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>)child).getFigure();
						referenceFigure.translateToAbsolute(original);
						<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> transformed = request.getTransformedRectangle(original);
						referenceFigure.translateToRelative(transformed);
						referenceFigure.translateToRelative(original);
						resizeDelta = transformed.getSize().expand(original.getSize().negate());
						moveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());
						return true;
					}
					public void undo() {
						execute(moveDelta.getNegated(), resizeDelta.getNegated());
					}
					public void execute() {
						execute(moveDelta, resizeDelta);
					}
					public void redo() {
						execute();
					}
					private void execute(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> move, <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%> resize) {
						Bounds bounds = (Bounds) node.getLayoutConstraint();
						bounds.setX(bounds.getX() + move.x);
						bounds.setY(bounds.getY() + move.y);
						bounds.setWidth(bounds.getWidth() + resize.width);
						bounds.setHeight(bounds.getHeight() + resize.height);
					}
				};
				return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(node.getDiagram().getElement()), emfCommand);
d64 1
a64 1
			protected Command createChangeConstraintCommand(EditPart child, Object constraint) {
@


1.8
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d121 1
a121 2
<%if (null != genDiagram.getPalette()) {
final Palette palette = genDiagram.getPalette();%>
@


1.7
log
@[bblajer] #152774 Compilable code when EClass has instance class attribute set
@
text
@d28 1
a28 1
public class <%=genCompartment.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart")%> implements IUpdatableEditPart {
d102 1
a102 1
				return new WrappingCommand(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(node.getDiagram().getElement()), emfCommand);
d123 2
a124 2
				if (request instanceof <%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateRequestEx) {
					<%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateRequestEx requestEx = (<%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateRequestEx) request;
d143 1
a143 1
					return new WrappingCommand(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(((View) getModel()).getDiagram().getElement()), result);
@


1.6
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@d12 3
a222 1
String _getSemanticElementCode = "resolveSemanticElement()";
@


1.5
log
@#146009 Lite Generator: Changes in the underlying domain model should be automatically reflected in the notational model
1,2,3 Parts commited.
@
text
@d196 2
a197 7
		for(EditPart editPart = this; editPart != null; editPart = editPart.getParent()) {
			View view = (View)editPart.getModel();
			if (view != null && view.getElement() != null) {
				return (<%=importManager.getImportedName(genHost.getDomainMetaClass().getQualifiedInterfaceName())%>) view.getElement();
			}
		}
		return null;
@


1.4
log
@[bblajer] #143168 Make Align actions work
@
text
@d7 1
d9 1
d42 8
a49 1
		return ((View) getModel()).getChildren();
a55 1
		//XXX: install correct edit policies!
d146 1
d205 28
d273 1
a273 1
for(Iterator it = genCompartment.getChildNodes().iterator(); genDiagram.getPalette() != null && it.hasNext(); ) {
@


1.3
log
@[bblajer] #138430 Lite Generator: Generated code should make use of emf.transaction API
@
text
@d50 1
a50 1
			protected Command createChangeConstraintCommand(final <%=importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest")%> request, EditPart child, Object constraint) {
d53 2
a54 2
					private <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> moveDelta = request.getMoveDelta();
					private <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%> resizeDelta = request.getSizeDelta();
d59 14
a72 2
					public boolean canExecute() {
						return node.getLayoutConstraint() instanceof Bounds;
@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d52 1
a52 1
				return new Command("Change node position/size") {
d68 3
d79 1
d103 1
a103 1
					CompoundCommand result = new CompoundCommand();
d112 1
a112 1
							result.add(new Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>Command((View) getModel(), requestEx<%if (!genCompartment.isListLayout()) {%>, 
d120 1
a120 1
					return result.unwrap();
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d24 5
d107 1
a107 1
						case <%=next.getVisualID()%>:
@

