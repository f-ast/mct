head	1.8;
access;
symbols
	v20080910-1520:1.8
	v20061120-1300:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061013-1330:1.7
	v20061005-1700:1.3
	M1_20:1.5
	v20060904-1500:1.5
	v20060824-1600:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060620-0400:1.3
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2006.12.12.12.54.48;	author bblajer;	state dead;
branches;
next	1.7;
commitid	355b457ea6574567;

1.7
date	2006.10.12.10.23.44;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.09.21.10.12.03;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.01.16.14.08;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.08.04.17.05.48;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.19.19.14.13;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.22.18.22.10;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@<%
if (genDiagram.getPalette() != null) {
%>
	/**
	 * @@generated
	 */
	private <%if (isStatic) {%>static <%}%>class Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>Command extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
		/**
		 * @@generated
		 */
		private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand")%> notationAddCommand;

		/**
		 * @@generated
		 */
		public Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>Command(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parent, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%> request<%if (!isListLayout) {%>, <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> constraint<%}%>) {
			<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(parent.getDiagram().getElement());
<%
	if (next.getDomainMetaClass().isMapEntry()) {
	/*Workaround for Ecore example: map entries cannot be created using factory, only using reflective EFactory.create() method*/
%>
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> createdDomainElement = <%=importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create(
				<%=importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=next.getDomainMetaClass().getClassifierAccessorName()%>());
<%
	} else {
%>
			<%=importManager.getImportedName(next.getDomainMetaClass().getQualifiedInterfaceName())%> createdDomainElement = <%=importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=next.getDomainMetaClass().getClassifierAccessorName()%>();
<%
	}
%>
			<%/*XXX: Class name DomainElementInitializer should be user-customizable*/%>
			<%=importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")%>.<%=next.getUniqueIdentifier()%>.initializeElement(<%if (next.getDomainMetaClass().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>createdDomainElement);
<%
	TypeModelFacet facet = next.getModelFacet();
	GenFeature childFeature = facet.getChildMetaFeature();
	GenFeature containmentFeature = facet.getContainmentMetaFeature();
	{
		GenFeature _feature = containmentFeature;
		String _ownerInstance = "parent.getElement()";
		String _exceedsUpperBound = "this.domainModelAddCommand = null;this.notationAddCommand = null;return;";
		GenClass _ownerGenClass = null;
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
	}
	if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
		GenFeature _feature = childFeature;
		String _ownerInstance = "parent.getElement()";
		String _exceedsUpperBound = "this.domainModelAddCommand = null;this.notationAddCommand = null;return;";
		GenClass _ownerGenClass = null;
%>
<%@@ include file="featureMultiplicity.jetinc"%>
			<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> compoundCommand = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
			compoundCommand.append(<%=importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, parent.getElement(), 
				<%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), createdDomainElement));
			compoundCommand.append(<%=importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, parent.getElement(), 
				<%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(), createdDomainElement));
			this.domainModelAddCommand = compoundCommand;
<%
	} else {
%>
			this.domainModelAddCommand = <%=importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, parent.getElement(), 
				<%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), createdDomainElement);
<%
	}
%>
<%
	if (!isListLayout) {
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}
%>
			constraint = constraint.union(new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(<%=defaultWidth%>, <%=defaultHeight%>));
<%
	}
%>
			this.notationAddCommand = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand")%>(parent, <%if (next.getDomainMetaClass().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>createdDomainElement, 
				<%if(!isListLayout) {%>constraint<%} else {%>null<%}%>, <%=importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName())%>.INSTANCE);
			request.setCreatedObject(notationAddCommand.getCreatedView());
		}

		/**
		 * @@generated
		 */
		private final org.eclipse.emf.common.command.Command domainModelAddCommand;

		/**
		 * @@generated
		 */
		public boolean canExecute() {
			return domainModelAddCommand != null
					&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();
		}

		/**
		 * @@generated
		 */
		public boolean canUndo() {
			return domainModelAddCommand != null
					&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();
		}

		/**
		 * @@generated
		 */
		public void execute() {
			domainModelAddCommand.execute();
			notationAddCommand.execute();
		}

		/**
		 * @@generated
		 */
		public void undo() {
			notationAddCommand.undo();
			domainModelAddCommand.undo();
		}
		/**
		 * @@generated
		 */
		public void redo() {
			execute();
		}
	}
<%
}
%>
@


1.7
log
@[160225] bblajer - Respect EStructuralFeature cardinality in commands that create/move/clone elements
@
text
@@


1.6
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d37 9
d47 4
d52 1
d54 1
a54 1
			compoundCommand.append(<%=importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, <%=resolvedSemanticElement%>, 
d56 1
a56 1
			compoundCommand.append(<%=importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, <%=resolvedSemanticElement%>, 
d62 1
a62 1
			this.domainModelAddCommand = <%=importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, <%=resolvedSemanticElement%>, 
@


1.5
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@a0 38
	/**
	 * @@generated
	 */
	private <%if (isStatic) {%>static <%}%>class Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>NotationCommand extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand")%> {
		/**
		 * @@generated
		 */
		private Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>NotationCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parent, 
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> domainElement<%if (!isListLayout) {%>, <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> constraint<%}%>) {
			super(parent);
			Node createdNode = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createNode();
			setCreatedView(createdNode);
			createdNode.setElement(domainElement);
			<%=importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName())%>.decorateView(createdNode);
<%
	if (!isListLayout) {
%>
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%> bounds = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createBounds();
			createdNode.setLayoutConstraint(bounds);
			bounds.setX(constraint.x);
			bounds.setY(constraint.y);
<%
		int defaultWidth = 40;
		int defaultHeight = 40;
		DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
		if (defSizeAttrs != null) {
			defaultWidth = defSizeAttrs.getWidth();
			defaultHeight = defSizeAttrs.getHeight();
		}
%>
			bounds.setWidth(Math.max(constraint.width, <%=defaultWidth%>));
			bounds.setHeight(Math.max(constraint.height, <%=defaultHeight%>));
<%
	}
%>
		}
	}

d11 1
a11 1
		private final Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>NotationCommand notationAddCommand;
d53 16
a68 1
			this.notationAddCommand = new Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>NotationCommand(parent, <%if (next.getDomainMetaClass().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>createdDomainElement<%if(!isListLayout) {%>, constraint<%}%>);
@


1.4
log
@[bblajer] #152774 Compilable code when EClass has instance class attribute set
@
text
@d4 1
a4 1
	private <%if (isStatic) {%>static <%}%>class Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>NotationCommand extends <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalElementCommand")%> {
d54 1
a54 1
		public Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>Command(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parent, <%=importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName())%>.CreateRequestEx request<%if (!isListLayout) {%>, <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> constraint<%}%>) {
@


1.3
log
@#146009 Lite Generator: Changes in the underlying domain model should be automatically reflected in the notational model
1,2,3 Parts commited.
@
text
@d70 1
a70 1
			<%=importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")%>.<%=next.getUniqueIdentifier()%>.initializeElement(createdDomainElement);
d91 1
a91 1
			this.notationAddCommand = new Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>NotationCommand(parent, createdDomainElement<%if(!isListLayout) {%>, constraint<%}%>);
@


1.2
log
@[bblajer] #138430 Lite Generator: Generated code should make use of emf.transaction API
@
text
@d4 1
a4 1
	private <%if (isStatic) {%>static <%}%>class Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>Command extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
d8 6
a13 27
		private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parent;

		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> createdNode;
		/**
		 * @@generated
		 */
		public Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>Command(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parent, <%=importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName())%>.CreateRequestEx request<%if (!isListLayout) {%>, <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> constraint<%}%>) {
			this.parent = parent;
			createdNode = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createNode();
<%
if (next.getDomainMetaClass().isMapEntry()) {
/*Workaround for Ecore example: map entries cannot be created using factory, only using reflective EFactory.create() method*/
%>
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> createdDomainElement = <%=importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create(
				<%=importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=next.getDomainMetaClass().getClassifierAccessorName()%>());
<%
} else {
%>
			<%=importManager.getImportedName(next.getDomainMetaClass().getQualifiedInterfaceName())%> createdDomainElement = <%=importManager.getImportedName(next.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=next.getDomainMetaClass().getClassifierAccessorName()%>();
<%
}
%>			createdNode.setElement(createdDomainElement);
			<%/*XXX: Class name DomainElementInitializer should be user-customizable*/%>
			<%=importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")%>.<%=next.getUniqueIdentifier()%>.initializeElement(createdDomainElement);
d36 19
d57 15
d79 1
a79 1
				<%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), createdNode.getElement()));
d81 1
a81 1
				<%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(), createdNode.getElement()));
d87 1
a87 1
				<%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), createdNode.getElement());
d91 2
a92 1
			request.setCreatedObject(createdNode);
d104 2
a105 1
			return domainModelAddCommand != null && domainModelAddCommand.canExecute();
d112 2
a113 1
			return domainModelAddCommand != null && domainModelAddCommand.canUndo();
a119 1
			parent.insertChild(createdNode);
d121 1
d128 1
a128 1
			parent.getPersistedChildren().remove(createdNode);
d138 3
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d4 1
a4 1
	private <%if (isStatic) {%>static <%}%>class Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>Command extends <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> {
d57 1
a57 1
			<%=importManager.getImportedName("org.eclipse.emf.edit.domain.EditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>.getEditingDomainFor(parent.getDiagram().getElement());
d115 6
@

