head	1.20;
access;
symbols
	v20080910-1520:1.20
	v20070403-1500:1.19
	v20070330-1300:1.19
	v20060330-1300:1.19
	v20070322-1100:1.19
	v20060316-0600:1.19
	v20070307-0700:1.18
	v20070228-2000:1.16
	v20070221-1500:1.15
	v20070208-1800:1.15
	v20070103-0300:1.14
	M4_20:1.14
	v20061222-1800:1.14
	v20061214-0000:1.14
	v20061120-1300:1.13
	M3_20:1.13
	v20061117-0800:1.13
	v20061013-1330:1.9
	v20061005-1700:1.5.2.1
	M1_20:1.8
	v20060904-1500:1.8
	v20060824-1600:1.5.2.1
	v20060713-1700:1.5.2.1
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060620-0400:1.5
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.3
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.20
date	2007.04.04.11.04.48;	author bblajer;	state dead;
branches;
next	1.19;
commitid	18c54613864d4567;

1.19
date	2007.03.15.16.43.30;	author bblajer;	state Exp;
branches;
next	1.18;
commitid	617845f977b04567;

1.18
date	2007.03.05.12.58.41;	author bblajer;	state Exp;
branches;
next	1.17;
commitid	437c45ec14004567;

1.17
date	2007.03.03.23.45.10;	author bblajer;	state Exp;
branches;
next	1.16;
commitid	2e3145ea08814567;

1.16
date	2007.02.23.16.19.36;	author bblajer;	state Exp;
branches;
next	1.15;
commitid	496945df14164567;

1.15
date	2007.02.02.17.14.33;	author bblajer;	state Exp;
branches;
next	1.14;
commitid	78d445c371764567;

1.14
date	2006.12.12.12.54.48;	author bblajer;	state Exp;
branches;
next	1.13;
commitid	355b457ea6574567;

1.13
date	2006.11.09.18.15.42;	author bblajer;	state Exp;
branches;
next	1.12;

1.12
date	2006.10.18.16.29.03;	author bblajer;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.18.09.56.59;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.17.13.08.27;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.11.15.45.01;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.01.16.14.09;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.02.10.43.51;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.07.04.15.44.10;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.05.13.35.59;	author ashatalin;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.05.29.12.27.00;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.25.14.26.26;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.48;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;

1.5.2.1
date	2006.07.04.15.54.41;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.20
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.parts" class="LinkEditPartGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.ecore.* java.util.*"%>
<%
GenLink genLink = (GenLink) ((Object[]) argument)[0];
final GenCommonBase genElement = genLink;
GenDiagram genDiagram = genLink.getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
importManager.registerInnerClass("TreeEditPartAdapter");
%>
<%@@ include file="../copyright4java.jetinc"%>
<%
importManager.emitPackageStatement(stringBuffer);
importManager.addImport("java.util.List");
importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class <%=genLink.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractConnectionEditPart")%> implements <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecoratableEditPart")%> {
<%{
GenCommonBase genCommonBase = genLink;%>
<%@@ include file="visualID.jetinc"%>
<%}%>

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager")%> myDecorationManager;

	/**
	 * @@generated
	 */
	public <%=genLink.getEditPartClassName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		assert view instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>;
		setModel(view);
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> getDiagramEdge() {
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) getModel();
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager")%> getDecorationManager() {
		return myDecorationManager;
	}

<%@@ include file="registerModel.jetinc"%>
<%
GenLinkLabel primaryLabel = null;
for(Iterator it = genLink.getLabels().iterator(); it.hasNext(); ) {
	GenLinkLabel next = (GenLinkLabel)it.next();
	if (!next.isReadOnly()) {
		primaryLabel = next;
		break;
	}
}
%>

	/**
	 * @@generated
	 */
	protected void createEditPolicies() {
<%@@ include file="componentEditPolicy.javajetinc"%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.CONNECTION_ENDPOINTS_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ConnectionEndpointEditPolicy")%>());
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.CONNECTION_BENDPOINTS_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.BendpointEditPolicy")%>());
<%
if (primaryLabel != null) {
%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.DIRECT_EDIT_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.DelegatingDirectEditPolicy")%>());
<%
}
%>
<%{
GenCommonBase genCommonBase = genLink;%>
<%@@ include file="customBehaviour.jetinc"%>
<%@@include file="openEditPolicy.jetinc"%>
<%}%>
	}

<%
if (primaryLabel != null) {
%>

	/**
	 * Returns the label which should be direct-edited by default.
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getPrimaryLabelEditPart() {
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextChild = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)it.next();
			if (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextChild) == <%=importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName())%>.VISUAL_ID) {
				return (EditPart) getViewer().getEditPartRegistry().get(nextChild);
			}
		}
		return null;
	}

	/**
	 * @@generated
	 */
	public void performRequest(<%=importManager.getImportedName("org.eclipse.gef.Request")%> req) {
		if (<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_DIRECT_EDIT.equals(req.getType())) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> labelToEdit;
			if (req instanceof <%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>) {
				labelToEdit = getLabelEditPart((<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>)req);
			} else {
				labelToEdit = getPrimaryLabelEditPart();
			}
			if (labelToEdit != null) {
				labelToEdit.performRequest(req);
			}
		}
<%@@include file="performOpen.jetinc"%>
		super.performRequest(req);
	}

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getLabelEditPart(<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%> req) {
		<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> result = getViewer().findObjectAt(req.getLocation());
		if (result != null) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) result.getModel();
			if (getDiagramEdge().getChildren().contains(view)) {
				int visualId = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view);
				switch (visualId) {
<%
		for (Iterator it = genLink.getLabels().iterator(); it.hasNext(); ) {
			GenLinkLabel genLabel = (GenLinkLabel) it.next();
			if (genLabel.isReadOnly()) {
				continue;
			}
%>
				case <%=importManager.getImportedName(genLabel.getEditPartQualifiedClassName())%>.VISUAL_ID:
					return result;
<%
		}
%>
				}
			}
		}
		return getPrimaryLabelEditPart();
	}

<%
}	//if (primaryLabel != null, i.e., there are editable labels)
%>

	/**
	 * @@generated
	 */
	protected List getModelChildren() {
		return ((Edge)getModel()).getChildren();
	}

<%@@ include file="refresher.javajetinc"%>

	/**
	 * @@generated
	 */
	public Object getAdapter(Class key) {
		if (<%=importManager.getImportedName("org.eclipse.gef.TreeEditPart")%>.class == key) {
			return getTreeEditPartAdapter();
		}
		return super.getAdapter(key);
	}

	/**
	 * @@generated
	 */
	private TreeEditPartAdapter myTreeEditPartAdapter;

	/**
	 * @@generated
	 */
	private TreeEditPartAdapter getTreeEditPartAdapter() {
		if (myTreeEditPartAdapter == null) {
			myTreeEditPartAdapter = new TreeEditPartAdapter();
		}
		return myTreeEditPartAdapter;
	}

<%
if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
	//Otherwise, there's no element associated with the element
%>
	/**
	 * @@generated
	 */
	public void activate() {
		super.activate();
		getDiagramEdge().getElement().eAdapters().add(domainModelRefresher);
	}

	/**
	 * @@generated
	 */
	public void deactivate() {
		getDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);
		super.deactivate();
	}

<%@@ include file="refreshers.javajetinc/domainModelRefresher.javajetinc"%>

<%
}
%>
<%@@ include file="refreshers.javajetinc/externalRefreshers.javajetinc"%>
<%@@ include file="refreshers.javajetinc/external.jetinc"%>

	/**
	 * @@generated
	 */
	private void createRefreshers() {
		structuralFeatures2Refresher = new HashMap();
<%@@ include file="refreshers.javajetinc/children.javajetinc"%>
<%@@ include file="refreshers.javajetinc/visibility.javajetinc"%>
<%@@ include file="refreshers.javajetinc/bendpoints.javajetinc"%>
	}

	/**
	 * @@generated
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
//XXX:		refreshBackgroundColor();
//XXX:		refreshForegroundColor();
//XXX:		refreshFont();
		refreshVisibility();
		refreshBendpoints();
	}

	/**
	 * @@generated
	 */
	protected void refreshBendpoints() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints")%> bendpoints = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.RelativeBendpoints")%>) getDiagramEdge().getBendpoints();
		if (bendpoints == null) {
			getConnectionFigure().setRoutingConstraint(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST);
			return;
		}
		<%=importManager.getImportedName("java.util.List")%> modelConstraint = bendpoints.getPoints();
		<%=importManager.getImportedName("java.util.List")%> figureConstraint = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		for (int i = 0; i < modelConstraint.size(); i++) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint")%> wbp = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint")%>) modelConstraint.get(i);
			<%=importManager.getImportedName("org.eclipse.draw2d.RelativeBendpoint")%> rbp = new <%=importManager.getImportedName("org.eclipse.draw2d.RelativeBendpoint")%>(getConnectionFigure());
			rbp.setRelativeDimensions(new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(wbp.getSourceX(), wbp.getSourceY()), new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(wbp.getTargetX(), wbp.getTargetY()));
			rbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));
			figureConstraint.add(rbp);
		}
		getConnectionFigure().setRoutingConstraint(figureConstraint);
	}

	/**
	 * @@generated
	 */
	protected void refreshVisibility() {
		boolean isVisible = ((View)getModel()).isVisible();
		boolean wasVisible = getFigure().isVisible();
		if (isVisible == wasVisible) {
			return;
		}
		if (!isVisible && (getSelected() != SELECTED_NONE)) {
			getViewer().deselect(this);
		}

		getFigure().setVisible(isVisible);
		getFigure().revalidate();
	}

	/**
	 * @@generated
	 */
	public void addNotify() {
		super.addNotify();
		getConnectionFigure().setConnectionRouter(new <%=importManager.getImportedName("org.eclipse.draw2d.BendpointConnectionRouter")%>());
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {
		<%=importManager.getImportedName("org.eclipse.draw2d.Connection")%> result = primCreateFigure();
		myDecorationManager = createDecorationManager(result);
		return result;
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager")%> createDecorationManager(<%=importManager.getImportedName("org.eclipse.draw2d.Connection")%> connection) {
		return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.ConnectionDecorationManager")%>(connection);
	}

	/**
	 * Creates figure for this edit part.
	 * 
	 * Body of this method does not depend on settings in generation model
	 * so you may safely remove <i>generated</i> tag and modify it.
	 * 
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.draw2d.Connection")%> primCreateFigure() {<%
Viewmap viewmap = genLink.getViewmap();
if (viewmap instanceof FigureViewmap) {
	String figureQualifiedClassName = null;
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.gmf.runtime.draw2d.PolylineConnection";
	}
%>
		return new <%=importManager.getImportedName(figureQualifiedClassName)%>();
<%} // instanceof FigureViewmap
	else if (viewmap instanceof SnippetViewmap) {%>
		return <%=((SnippetViewmap) viewmap).getBody()%>;
<%} // instanceof SnippetViewmap 
	else if (viewmap instanceof InnerClassViewmap) {%>
 		return new <%=((InnerClassViewmap) viewmap).getClassName()%>();
<%}%>
	}

<%
if (genLink.getViewmap() instanceof InnerClassViewmap) {
	String classBody = ((InnerClassViewmap) genLink.getViewmap()).getClassBody();
%>
<%=classBody%>
<%@@ include file="mapmodeWorkaround.javajetinc"%>
<%
}
%>

	/**
	 * @@generated
	 */
	private class TreeEditPartAdapter extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart")%> {
		/**
		 * @@generated
		 */
		public TreeEditPartAdapter() {
			super(getDiagramEdge(), <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
		}

		/**
		 * @@generated
		 */
		protected void createEditPolicies() {
<%@@ include file="treeComponentEditPolicy.javajetinc"%>
<%
if (primaryLabel != null && genLink.getModelFacet() instanceof TypeLinkModelFacet) {
%>
<%@@ include file="directEditPolicy.javajetinc"%>
<%
}
%>
		}

<%
if (primaryLabel != null) {
%>
		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer")%> createLabelTextDisplayer() {
			<%=importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName())%> primaryLabelEditPart = getPrimaryLabelEditPart();
			if (primaryLabelEditPart != null) {
				return primaryLabelEditPart.getLabelTextDisplayer();
			}
			return super.createLabelTextDisplayer();
		}

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getImage() {
			<%=importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName())%> primaryLabelEditPart = getPrimaryLabelEditPart();
			if (primaryLabelEditPart != null) {
				return primaryLabelEditPart.getLabelIcon();
			}
			return null;
		}

		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName())%> getPrimaryLabelEditPart() {
			for(<%=importManager.getImportedName("java.util.Iterator")%> it = getDiagramEdge().getChildren().iterator(); it.hasNext(); ) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextChild = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)it.next();
				if (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextChild) == <%=importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName())%>.VISUAL_ID) {
					return (<%=importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName())%>) <%=genLink.getEditPartClassName()%>.this.getViewer().getEditPartRegistry().get(nextChild);
				}
			}
			return null;
		}
<%
}
%>

		/**
		 * Since labels are not selectable edit parts, they are filtered from the overview as well.
		 * @@generated
		 */
		protected <%=importManager.getImportedName("java.util.List")%> getModelChildren() {
			return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
		}
	}
}
<%importManager.emitSortedImports();%>
@


1.19
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@@


1.18
log
@[176362]: ClassCastException while selecting items in tree outline of the generated diagram + test to reproduce;
ComponentEditPolicy.xpt: replace int constant with a reference thereto to facilitate readability
@
text
@d20 1
a20 1
public class <%=genLink.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractConnectionEditPart")%> implements <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecoratableEditPart")%> {
d215 1
a355 6
		String editPatternCode = importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()) + ".EDIT_PATTERN";
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		String primaryView = "getDiagramEdge()";
		String resolvedSemanticElement = "(" + importManager.getImportedName(typeLinkModelFacet.getMetaClass().getQualifiedInterfaceName()) + ") getDiagramEdge().getElement()";
		LabelModelFacet labelModelFacet = primaryLabel.getModelFacet();
		GenClass underlyingMetaClass = typeLinkModelFacet.getMetaClass();
d357 1
a357 1
<%@@ include file="treeDirectEditPolicy.jetinc"%>
a363 86
if (primaryLabel != null && genLink.getModelFacet() instanceof TypeLinkModelFacet) {
%>
<%@@include file="treeDirectEdit.jetinc" %>

		/**
		 * @@generated
		 */
		protected String getEditText() {
			<%=importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName())%> primaryLabelEditPart = getPrimaryLabelEditPart();
	
			if (primaryLabelEditPart != null) {
				return primaryLabelEditPart.getLabelEditText();
			}
			return "";
		}

<%
}
%>

<%
if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
	//Otherwise, there's no element associated with the element
%>
		/**
		 * @@generated
		 */
		public void activate() {
			super.activate();
			getDiagramEdge().getElement().eAdapters().add(domainModelRefresher);
		}

		/**
		 * @@generated
		 */
		public void deactivate() {
			getDiagramEdge().getElement().eAdapters().remove(domainModelRefresher);
			super.deactivate();
		}

<%@@ include file="refreshers.javajetinc/domainModelRefresher.javajetinc"%>

<%
}
%>
		/**
		 * @@generated
		 */
		protected void createRefreshers() {
			super.createRefreshers();
<%
if (genLink.getModelFacet() instanceof TypeLinkModelFacet || primaryLabel != null) {
	//Otherwise, an empty string will be returned, and it will not change no matter what.
%>
			Refresher labelRefresher = new Refresher() {
				public void refresh() {
					refreshVisuals();
				}
			};
<%
	if (primaryLabel != null) {
		LabelModelFacet labelModelFacet = primaryLabel.getModelFacet();
		if (labelModelFacet instanceof FeatureLabelModelFacet) {
			FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
			for(Iterator it = featureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
				GenFeature next = (GenFeature) it.next();
%>
			registerRefresher(<%=importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=next.getFeatureAccessorName()%>(), labelRefresher);
<%
			}
		}
	} else {
		GenClass metaClass = ((TypeLinkModelFacet) genLink.getModelFacet()).getMetaClass();
		List labelNotifyFeatures = metaClass.getLabelNotifyFeatures();
		for(Iterator it = labelNotifyFeatures.iterator(); it.hasNext(); ) {
			GenFeature next = (GenFeature) it.next();
%>
			registerRefresher(<%=importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=next.getFeatureAccessorName()%>(), labelRefresher);
<%
		}
	}
}
%>
		}

<%
d369 1
a369 1
		protected String getText() {
d372 1
a372 1
				return primaryLabelEditPart.getLabelText();
d374 1
a374 1
			return super.getText();
@


1.17
log
@Images should be reused across the editparts that represent same model element types (prevent SWTErrors when opening huge diagrams)
@
text
@d352 1
a352 1
<%@@ include file="componentEditPolicy.javajetinc"%>
@


1.16
log
@ComponentEditPolicy separated into a top-level class;
CreateRequest now knows about the MODEL_ID;
All "Command" class references fully-qualified in templates to prevent compilation problems;
[170078]: Remove link with class from the domain model on deleting link's destination
@
text
@d471 11
@


1.15
log
@[172664]: Provide audits and metrics for Lite diagrams (including view-based and RCP) + validation decorators + validation markers (for non-RCP case);
Several templates are rewritten with xpand;
lite-specific TextEmitter is back (otherwise importManager is sometimes passed to xpand templates)
@
text
@d5 1
d69 1
a69 1
<%@@ include file="linkComponentEditPolicy.javajetinc"%>
d352 1
a352 1
<%@@ include file="linkComponentEditPolicy.javajetinc"%>
@


1.14
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@d19 1
a19 1
public class <%=genLink.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractConnectionEditPart")%> implements <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%> {
d28 5
d45 7
d284 16
d307 1
a307 1
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {<%
@


1.13
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d62 1
a62 8
		//This edit part understands the direct edit request and delegates it to the appropriate label, so no command is needed here.
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.DIRECT_EDIT_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy")%>() {
			protected void showCurrentEditValue(<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%> request) {
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getDirectEditCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%> request) {
				return null;
			}
		});
@


1.12
log
@Fix compilation problems introduced by recent fix of https://bugs.eclipse.org/bugs/show_bug.cgi?id=161380
@
text
@d73 5
d102 1
a102 1
		if (<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_DIRECT_EDIT == req.getType()) {
d113 2
@


1.11
log
@#161380 move readOnly back to GenLabel
@
text
@d403 2
a404 7
			GenFeature feature = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();
%>
			registerRefresher(<%=importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=feature.getFeatureAccessorName()%>(), labelRefresher);
<%
		} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
			CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
			for(Iterator it = compositeFeatureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
@


1.10
log
@#160894 Move readOnly property from GenLabel to LabelFeatureModelFacet
@
text
@d45 1
a45 2
	boolean labelReadOnly = next.getModelFacet() != null && next.getModelFacet().isReadOnly();
	if (!labelReadOnly) {
d123 1
a123 2
			boolean labelReadOnly = genLabel.getModelFacet() != null && genLabel.getModelFacet().isReadOnly();
			if (labelReadOnly) {
@


1.9
log
@[156358] bblajer - Diagram overview with Lite runtime
@
text
@d45 2
a46 1
	if (!next.isReadOnly()) {
d124 2
a125 1
			if (genLabel.isReadOnly()) {
@


1.8
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d7 1
d41 10
a55 1
		//XXX: install correct edit policies!
d59 14
a75 8
GenLinkLabel primaryLabel = null;
for(Iterator it = genLink.getLabels().iterator(); it.hasNext(); ) {
	GenLinkLabel next = (GenLinkLabel)it.next();
	if (!next.isReadOnly()) {
		primaryLabel = next;
		break;
	}
}
d151 25
d307 161
@


1.7
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@d18 1
a18 1
public class <%=genLink.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractConnectionEditPart")%> implements IUpdatableEditPart {
d48 1
a48 1
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.CONNECTION_BENDPOINTS_ROLE, new <%=importManager.getImportedName(genDiagram.getEditPoliciesPackageName() + ".BendpointEditPolicy")%>());
@


1.6
log
@[bblajer] #149484 Lite Generator: Notation model instances (Edges) should not store domain model element for reference-only links
@
text
@d39 2
@


1.5
log
@#145101 Lite Generator: Support bendpoints in the same format as runtime-based generated diagrams
@
text
@d133 4
d155 3
@


1.5.2.1
log
@[bblajer] #149484 Lite Generator: Notation model instances (Edges) should not store domain model element for reference-only links
@
text
@a132 4
<%
if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
	//Otherwise, there's no element associated with the element
%>
a149 3
<%
}
%>
@


1.4
log
@[bblajer] #144180 CCE in generated diagram when trying to direct-edit an element
@
text
@d46 1
d160 1
d172 22
d214 8
@


1.3
log
@[bblajer] #143687 impossible to direct-edit any label except the first one
@
text
@d79 6
a84 1
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> labelToEdit = getLabelEditPart((<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>)req);
@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.ecore.*"%>
d49 9
a57 2
if (genLink.getLabels().size() > 0) {
	GenLinkLabel primaryLabel = (GenLinkLabel)genLink.getLabels().get(0);
d79 3
a81 3
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> primaryLabel = getPrimaryLabelEditPart();
			if (primaryLabel != null) {
				primaryLabel.performRequest(req);
d85 29
d115 1
a115 1
}	//if (genLink.getLabels().size() > 0)
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d19 5
a51 1
<%@@ include file="../editor/getVisualID.jetinc" %>
d60 1
a60 1
			if (getVisualID(nextChild) == <%=primaryLabel.getVisualID()%>) {
@

