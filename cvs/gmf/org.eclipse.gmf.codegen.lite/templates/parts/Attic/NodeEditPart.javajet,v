head	1.45;
access;
symbols
	v20080910-1520:1.45
	v20070403-1500:1.44
	v20070330-1300:1.44
	v20060330-1300:1.44
	v20070322-1100:1.44
	v20060316-0600:1.44
	v20070307-0700:1.42
	v20070228-2000:1.38
	v20070221-1500:1.37
	v20070208-1800:1.37
	v20070103-0300:1.33
	M4_20:1.33
	v20061222-1800:1.33
	v20061214-0000:1.33
	v20061120-1300:1.32
	M3_20:1.32
	v20061117-0800:1.32
	v20061013-1330:1.24
	v20061005-1700:1.12.2.2
	M1_20:1.19
	v20060904-1500:1.19
	v20060824-1600:1.12.2.2
	v20060713-1700:1.12.2.1
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	v20060627-1200:1.12
	v20060626-1420:1.12
	v20060620-0400:1.10
	v20060616-1400:1.10
	v20060616-1200:1.10
	v20060609-1400:1.9
	v20060531-1730:1.9
	v20060530-1930:1.8
	v20060526-1200:1.6
	v20060519-1300:1.4
	v20060519-0800:1.4
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.45
date	2007.04.04.11.04.48;	author bblajer;	state dead;
branches;
next	1.44;
commitid	18c54613864d4567;

1.44
date	2007.03.15.16.43.30;	author bblajer;	state Exp;
branches;
next	1.43;
commitid	617845f977b04567;

1.43
date	2007.03.09.17.19.35;	author bblajer;	state Exp;
branches;
next	1.42;
commitid	22ed45f197244567;

1.42
date	2007.03.05.12.58.41;	author bblajer;	state Exp;
branches;
next	1.41;
commitid	437c45ec14004567;

1.41
date	2007.03.03.23.45.11;	author bblajer;	state Exp;
branches;
next	1.40;
commitid	2e3145ea08814567;

1.40
date	2007.03.02.21.35.39;	author bblajer;	state Exp;
branches;
next	1.39;
commitid	403a45e898a74567;

1.39
date	2007.03.02.21.21.16;	author bblajer;	state Exp;
branches;
next	1.38;
commitid	2b1945e895484567;

1.38
date	2007.02.23.16.19.36;	author bblajer;	state Exp;
branches;
next	1.37;
commitid	496945df14164567;

1.37
date	2007.02.08.16.44.13;	author bblajer;	state Exp;
branches;
next	1.36;
commitid	af945cb535c4567;

1.36
date	2007.02.02.18.09.21;	author bblajer;	state Exp;
branches;
next	1.35;
commitid	711b45c37e4f4567;

1.35
date	2007.02.02.17.14.33;	author bblajer;	state Exp;
branches;
next	1.34;
commitid	78d445c371764567;

1.34
date	2007.01.11.19.16.11;	author bblajer;	state Exp;
branches;
next	1.33;
commitid	6c2845a68cf94567;

1.33
date	2006.12.12.12.54.48;	author bblajer;	state Exp;
branches;
next	1.32;
commitid	355b457ea6574567;

1.32
date	2006.11.09.18.15.42;	author bblajer;	state Exp;
branches;
next	1.31;

1.31
date	2006.11.01.14.38.01;	author bblajer;	state Exp;
branches;
next	1.30;

1.30
date	2006.10.19.11.00.31;	author bblajer;	state Exp;
branches;
next	1.29;

1.29
date	2006.10.18.16.29.03;	author bblajer;	state Exp;
branches;
next	1.28;

1.28
date	2006.10.18.14.28.28;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.10.18.14.22.07;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.10.18.09.56.59;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2006.10.17.13.08.27;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2006.10.12.10.23.44;	author atikhomirov;	state Exp;
branches;
next	1.23;

1.23
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	1.22;

1.22
date	2006.09.21.10.12.03;	author atikhomirov;	state Exp;
branches;
next	1.21;

1.21
date	2006.09.11.15.45.01;	author atikhomirov;	state Exp;
branches;
next	1.20;

1.20
date	2006.09.06.20.09.23;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.09.01.16.14.09;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.08.09.14.34.53;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2006.08.04.17.48.33;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2006.08.04.17.05.48;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2006.08.02.10.43.51;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.07.04.15.44.10;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.07.03.17.42.27;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.25.15.36.40;	author atikhomirov;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2006.06.21.15.22.43;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.16.07.52.07;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.31.15.54.57;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.29.12.27.00;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.29.12.23.05;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.25.14.26.26;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.22.18.22.10;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.18.19.18.26;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.17.12.40.01;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.48;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;

1.12.2.1
date	2006.07.04.15.54.41;	author ashatalin;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2006.08.24.12.09.01;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.45
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.parts" class="NodeEditPartGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.gmfgen.util.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.ecore.*"
%>
<%
final GenCommonBase genElement = (GenCommonBase) ((Object[]) argument)[0];
final GenNode genNode = (GenNode) genElement;
final GenDiagram genDiagram = genNode.getDiagram();
boolean isXYLayout = ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genNode);
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
importManager.registerInnerClass("LinkNotationModelRefresher");	//from linkNotationModelRefresher.jetinc
importManager.registerInnerClass("NotationModelRefresher");	//from notationModelRefresher.jetinc
importManager.registerInnerClass("TreeEditPartAdapter");
%>

<%@@ include file="../common/featureGetAccessor.jetinc"%>

<%
@@SuppressWarnings("unchecked")
class NodeEditPartHelper {
	private final List myInnerLabels = new LinkedList();
	private final List myAllLabels = new LinkedList();
	private final List myExternalLabels = new LinkedList();
	private final List myPinnedCompartments = new LinkedList();
	private final List myFloatingCompartments = new LinkedList();
	private final List myContainedFeatureModelFacetLinks = new LinkedList();
	private final List myContainedTypeModelFacetLinks = new LinkedList();
	private GenNodeLabel myPrimaryLabel;

	public NodeEditPartHelper(GenNode genNode){
		myPrimaryLabel = null;

		for (Iterator labels = genNode.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel next = (GenNodeLabel) labels.next();
			if (myPrimaryLabel == null && !next.isReadOnly()){
				myPrimaryLabel = next;
			}
			myAllLabels.add(next);
			if (next instanceof GenExternalNodeLabel) {
				myExternalLabels.add(next);
			} else {
				if (next.getViewmap() instanceof ParentAssignedViewmap) {
					myInnerLabels.add(next);
				}
			}
		}
		
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();){
			GenCompartment next = (GenCompartment) compartments.next();
			if (next.getViewmap() instanceof ParentAssignedViewmap){
				myPinnedCompartments.add(next);
			} else {
				myFloatingCompartments.add(next);
			}	
		}

		for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
			GenLink genLink = (GenLink)it.next();
			if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
				continue;
			}
			GenClass containerClass;
			if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
				TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
				if (modelFacet.getSourceMetaFeature() == null && modelFacet.getTargetMetaFeature() == null) {
					//if one link feature is null, the element is treated as this end of the link. If both are null, we cannot do anything about such a link.
					containerClass = null;
				} else {
					containerClass = modelFacet.getContainmentMetaFeature().getGenClass();
				}
			} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
				GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
				containerClass = metaFeature.getGenClass();
			} else {
				continue;
			}
			if (containerClass != null && containerClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
				if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
					myContainedTypeModelFacetLinks.add(genLink);
				} else {
					myContainedFeatureModelFacetLinks.add(genLink);
				}
			}
		}
	}

	public boolean hasBothChildrenAndCompartments() {
		return !genNode.getCompartments().isEmpty() && !genNode.getChildNodes().isEmpty();
	}

	public boolean containsLinks() {
		return containsFeatureModelFacetLinks() || containsTypeModelFacetLinks();
	}

	public boolean containsFeatureModelFacetLinks() {
		return !myContainedFeatureModelFacetLinks.isEmpty();
	}

	public boolean containsTypeModelFacetLinks() {
		return !myContainedTypeModelFacetLinks.isEmpty();
	}

	public boolean hasInnerFixedLabels(){
		return !myInnerLabels.isEmpty();
	}
	
	public boolean hasPinnedCompartments(){
		return !myPinnedCompartments.isEmpty();
	}
	
	public boolean hasFixedChildren(){
		return hasInnerFixedLabels() || hasPinnedCompartments();
	}
	
	public boolean hasExternalLabels(){
		return !myExternalLabels.isEmpty();
	}
	
	public GenNodeLabel getPrimaryLabel(){
		return myPrimaryLabel;
	}
	
	public Iterator getInnerFixedLabels(){
		return myInnerLabels.iterator();
	}
	
	public Iterator getExternalLabels(){
		return myExternalLabels.iterator();
	}
	
	public Iterator getPinnedCompartments(){
		return myPinnedCompartments.iterator();
	}

	public Iterator getAllLabels() {
		return myAllLabels.iterator();
	}

	public Iterator getContainedFeatureModelFacetLinks() {
		return myContainedFeatureModelFacetLinks.iterator();
	}

	public Iterator getContainedTypeModelFacetLinks() {
		return myContainedTypeModelFacetLinks.iterator();
	}
}
final NodeEditPartHelper myHelper = new NodeEditPartHelper(genNode);
%>
<%@@ include file="../copyright4java.jetinc"%>

<%importManager.emitPackageStatement(stringBuffer);%>
<%
importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class <%=genNode.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart")%> implements <%=importManager.getImportedName("org.eclipse.gef.NodeEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecoratableEditPart")%> {
<%{
GenCommonBase genCommonBase = genNode;%>
<%@@ include file="visualID.jetinc"%>
<%}%>

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> contentPane;

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> primaryShape;

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager")%> myDecorationManager;

<%
	if (myHelper.hasBothChildrenAndCompartments()) {
%>
	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> childNodesPane;
<%
	}
%>

	/**
	 * @@generated
	 */
	public <%=genNode.getEditPartClassName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> model) {
		assert model instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>;
		setModel(model);
	}

<%@@ include file="registerModel.jetinc"%>

	/**
	 * @@generated
	 */
	protected void createEditPolicies() {
<%@@ include file="componentEditPolicy.javajetinc"%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.GRAPHICAL_NODE_ROLE, new <%=importManager.getImportedName(genNode.getGraphicalNodeEditPolicyQualifiedClassName())%>());
<%
if (myHelper.getPrimaryLabel() != null) {
%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.DIRECT_EDIT_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.DelegatingDirectEditPolicy")%>());
<%
}
%>
<%{
GenCommonBase genCommonBase = genNode;%>
<%@@ include file="layoutEditPolicy.jetinc"%>
<%@@ include file="customBehaviour.jetinc"%>
<%@@include file="openEditPolicy.jetinc"%>
<%}%>
		installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());
<%
if (!genNode.getChildNodes().isEmpty()) {
%>
		installNotationModelRefresher();
<%
}
%>
<%
if (myHelper.containsLinks()) {
%>
		installLinkNotationModelRefresher();
<%
}
%>
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%> getPrimaryDragEditPolicy() {
<%
if (genNode.getPrimaryDragEditPolicyQualifiedClassName() != null) {
%>
		return new <%=importManager.getImportedName(genNode.getPrimaryDragEditPolicyQualifiedClassName())%>();
<%
} else {
	if (genNode.getCompartments().isEmpty()) {
%>
		<%=importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy")%> result = new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy")%>();
<%
	} else {
%>
		<%=importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy")%> result = new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy")%>() {
			protected <%=importManager.getImportedName("java.util.List")%> createSelectionHandles() {
				<%=importManager.getImportedName("java.util.List")%> result = super.createSelectionHandles();
				for(<%=importManager.getImportedName("java.util.Iterator")%> it = getChildren().iterator(); it.hasNext(); ) {
					<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> next = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) it.next();
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) next.getModel();
					switch (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextView)) {
<%
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();){
			GenCompartment next = (GenCompartment) compartments.next();
%>
					case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
						result.addAll(((<%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>) next).createSelectionHandles());
						break;
<%
		}
%>
					}
				}
				return result;
			}
		};
<%
	}
	ResizeConstraints rc = (ResizeConstraints) genNode.getViewmap().find(ResizeConstraints.class);
	if (rc != null) {
		if (rc.getResizeHandles() == 0) {
%>
		result.setResizeDirections(<%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.NONE);
<%
		} else {
%>
		result.setResizeDirections(<%
			for (Iterator it = rc.getResizeHandleNames().iterator(); it.hasNext(); ) {
				String next = (String) it.next();
%><%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.<%=next%><%
				if (it.hasNext()) {%> | <%
				}
			}
		%>);
<%
		}
	}
%>
		return result;
<%
}
%>
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {
		<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> invisibleRectangle = new <%=importManager.getImportedName("org.eclipse.draw2d.Figure")%>();
		invisibleRectangle.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.StackLayout")%>());
		<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> shape = createNodeShape();
		invisibleRectangle.add(shape);
		contentPane = setupContentPane(shape);
<%
	if (myHelper.hasBothChildrenAndCompartments()) {
%>
		childNodesPane = createChildNodesPane();
		shape.add(childNodesPane);
<%
	}
%>

		<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> decorationShape = createDecorationPane();
		if (decorationShape != null) {
			myDecorationManager = createDecorationManager(decorationShape);
			invisibleRectangle.add(decorationShape, 0);
		}

		return invisibleRectangle;
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager")%> createDecorationManager(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> decorationShape) {
		return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.PaneDecorationManager")%>(decorationShape);
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecorationManager")%> getDecorationManager() {
		return myDecorationManager;
	}

<%
	if (!genNode.getCompartments().isEmpty() && !genNode.getChildNodes().isEmpty()) {
%>
	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createChildNodesPane() {
		<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> result = new <%=importManager.getImportedName("org.eclipse.draw2d.RectangleFigure")%>();
		setupContentPane(result);
		return result;
	}
<%
	}
%>
	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createNodeShape() {
<%
String figureQualifiedClassName = null;
Viewmap viewmap = genNode.getViewmap();
if (viewmap instanceof FigureViewmap) {
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.draw2d.RectangleFigure";
	}
%>
		primaryShape = new <%=importManager.getImportedName(figureQualifiedClassName)%>()<%if (isXYLayout) {%> {
			protected boolean useLocalCoordinates() {
				return true;
			}
		}<%} /* use flow layout*/ %>;
<%} else if (viewmap instanceof SnippetViewmap) {%>
		primaryShape = <%=((SnippetViewmap) viewmap).getBody()%>;
<%} else if (viewmap instanceof InnerClassViewmap) {
 	figureQualifiedClassName = ((InnerClassViewmap) viewmap).getClassName();
%>
		<%=figureQualifiedClassName%> figure = new <%=figureQualifiedClassName%>();
<%if (!genNode.getChildNodes().isEmpty() && isXYLayout) { /*otherwise, leave to figure's default value*/%>
 		figure.setUseLocalCoordinates(true);
<%}%>
 		primaryShape = figure;
<%}%>
		return primaryShape;
	}
<%if (figureQualifiedClassName != null) {%>

	/**
	 * @@generated
	 */
	public <%=figureQualifiedClassName%> getPrimaryShape() {
		return (<%=figureQualifiedClassName%>) primaryShape;
	}
<%}%>

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createDecorationPane() {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.Figure")%>();
	}

	/**
	 * Default implementation treats passed figure as content pane.
	 * Respects layout one may have set for generated figure.
	 * @@param nodeShape instance of generated figure class
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> setupContentPane(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> nodeShape) {
		if (nodeShape.getLayoutManager() == null) {
<%
if (!isXYLayout) {
	String layoutClassName = importManager.getImportedName("org.eclipse.draw2d.ToolbarLayout");
%>
			<%=layoutClassName%> layout = new <%=layoutClassName%>();
			layout.setSpacing(5);
			nodeShape.setLayoutManager(layout);
<%} else {%>
		nodeShape.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.FreeformLayout")%>() {

			public Object getConstraint(<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> figure) {
				Object result = constraints.get(figure);
				if (result == null) {
					result = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>(0, 0, -1, -1);
				}
				return result;
			}
		});
<%}%>
		}
		return nodeShape; // use nodeShape itself as contentPane
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> getContentPane() {
		if (contentPane == null) {
			return super.getContentPane();
		}
		return contentPane;
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> getDiagramNode() {
		return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) getModel();
	}

<%
	if (myHelper.hasFixedChildren()) {
%>
	/**
	 * @@generated
	 */
	protected boolean addFixedChild(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
<%
for (Iterator it = myHelper.getInnerFixedLabels(); it.hasNext(); ) {
	GenNodeLabel genLabel = (GenNodeLabel) it.next();
	final String labelEditPart = importManager.getImportedName(genLabel.getEditPartQualifiedClassName());
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) genLabel.getViewmap();
	final String childSetterName = childViewmap.getSetterName() == null ? "setLabel" : childViewmap.getSetterName();
%>
		if (childEditPart instanceof <%=labelEditPart%>) {
			((<%=labelEditPart%>) childEditPart).<%=childSetterName%>(getPrimaryShape().<%=childViewmap.getGetterName()%>());
			return true;
		}
<%
}

for (Iterator it = myHelper.getPinnedCompartments(); it.hasNext(); ) {
	GenCompartment next = (GenCompartment) it.next();
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) next.getViewmap();
	String compartmentEditPartFQN = importManager.getImportedName(next.getEditPartQualifiedClassName());
%>
		if (childEditPart instanceof <%=compartmentEditPartFQN%>) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> pane = getPrimaryShape().<%=childViewmap.getGetterName()%>();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((<%=compartmentEditPartFQN%>)childEditPart).getFigure());
			return true;
		}	
<%	
} // for pinned compartments
%>
		return false;
	}

	/**
	 * @@generated
	 */
	protected boolean removeFixedChild(EditPart childEditPart) {
<%
//XXX: ignore labels assuming that they never may be removed
for (Iterator it = myHelper.getPinnedCompartments(); it.hasNext(); ) {
	GenCompartment next = (GenCompartment) it.next();
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) next.getViewmap();
	String compartmentEditPartFQN = importManager.getImportedName(next.getEditPartQualifiedClassName());
%>		
		if (childEditPart instanceof <%=compartmentEditPartFQN%>) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> pane = getPrimaryShape().<%=childViewmap.getGetterName()%>();
			pane.remove(((<%=compartmentEditPartFQN%>)childEditPart).getFigure());
			return true;
		}	
<%
} // for pinned compartments
%>
		return false;
	}
<%
} // if myHelper.hasFixedChildren()
%>

	/**
	 * Returns the label which should be direct-edited by default.
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getPrimaryLabelEditPart() {
<%
		if (myHelper.getPrimaryLabel() != null) {
%>
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextChild = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)it.next();
			if (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextChild) == <%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%>.VISUAL_ID) {
				return (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) getViewer().getEditPartRegistry().get(nextChild);
			}
		}
<%
		}
%>
		return null;
	}

	/**
	 * @@generated
	 */
	public void performRequest(<%=importManager.getImportedName("org.eclipse.gef.Request")%> req) {
		if (<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_DIRECT_EDIT.equals(req.getType())) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> labelToEdit;
			if (req instanceof <%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>) {
				labelToEdit = getLabelEditPart((<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>)req);
			} else {
				labelToEdit = getPrimaryLabelEditPart();
			}
			if (labelToEdit != null) {
				labelToEdit.performRequest(req);
			}
		}
<%@@include file="performOpen.jetinc"%>
		super.performRequest(req);
	}

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getLabelEditPart(<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%> req) {
		<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> result = getViewer().findObjectAt(req.getLocation());
		if (result != null) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) result.getModel();
			if (getDiagramNode().getChildren().contains(view)) {
				int visualId = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view);
				switch (visualId) {
<%
		for (Iterator it = myHelper.getAllLabels(); it.hasNext(); ) {
			GenNodeLabel genLabel = (GenNodeLabel) it.next();
			if (genLabel.isReadOnly()) {
				continue;
			}
%>
				case <%=importManager.getImportedName(genLabel.getEditPartQualifiedClassName())%>.VISUAL_ID:
					return result;
<%
		}
%>
				}
			}
		}
		return getPrimaryLabelEditPart();
	}

<%
if (myHelper.hasExternalLabels()) {
%>
	/**
	 * @@generated
	 */
	public boolean isExternalLabel(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
<%
	for (Iterator externalLabels = myHelper.getExternalLabels(); externalLabels.hasNext();) {
		GenNodeLabel next = (GenNodeLabel) externalLabels.next();
%>
		if (childEditPart instanceof <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>) {
			return true;
		}
<%
	}
%>
		return false;
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> getExternalLabelsContainer() {
		<%=importManager.getImportedName("org.eclipse.gef.editparts.LayerManager")%> root = (<%=importManager.getImportedName("org.eclipse.gef.editparts.LayerManager")%>) getRoot();
		return root.getLayer(<%=importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName())%>.EXTERNAL_NODE_LABELS_LAYER);
	}

<%
}
if (!genNode.getChildNodes().isEmpty()) {
%>
	/**
	 * @@generated
	 */
	public boolean isDirectChild(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
<%
	for(Iterator directChildren = genNode.getChildNodes().iterator(); directChildren.hasNext(); ) {
		GenChildNode next = (GenChildNode) directChildren.next();
%>
		if (childEditPart instanceof <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>) {
			return true;
		}
<%
	}
%>
		return false;
	}
<%
}
if (myHelper.hasExternalLabels() || myHelper.hasFixedChildren() || myHelper.hasBothChildrenAndCompartments()) {
%>

	/**
	 * @@generated
	 */
	protected void addChildVisual(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart, int index) {
<%
	if (myHelper.hasExternalLabels()) {
%>
		if (isExternalLabel(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> labelFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			getExternalLabelsContainer().add(labelFigure);
			return;
		}
<%
	}
	if (myHelper.hasFixedChildren()) {
%>
		if (addFixedChild(childEditPart)) {
			return;
		}
<%
	}
	if (myHelper.hasBothChildrenAndCompartments()) {
%>
		if (isDirectChild(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> childFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			childNodesPane.add(childFigure);
			return;
		}
<%
	}
%>
		super.addChildVisual(childEditPart, -1);
	}

	/**
	 * @@generated
	 */
	protected void removeChildVisual(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
<%
	if (myHelper.hasExternalLabels()) {
%>
		if (isExternalLabel(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> labelFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			getExternalLabelsContainer().remove(labelFigure);
			return;
		}
<%
	}
	if (myHelper.hasFixedChildren()){
%>
		if (removeFixedChild(childEditPart)){
			return;
		}
<%
	}
	if (myHelper.hasBothChildrenAndCompartments()) {
%>
		if (isDirectChild(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> childFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			childNodesPane.remove(childFigure);
			return;
		}
<%
	}
%>
		super.removeChildVisual(childEditPart);
	}
<%
}
%>
<%
if (myHelper.hasExternalLabels()) {
%>
	/**
	 * @@generated
	 */
	public void removeNotify() {
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = getChildren().iterator(); it.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) it.next();
			if (isExternalLabel(childEditPart)) {
				IFigure labelFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
				getExternalLabelsContainer().remove(labelFigure);
			}
		}
		super.removeNotify();
	}
<%
}
%>

	/**
	 * @@generated
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshBounds();
		refreshBackgroundColor();
		refreshForegroundColor();
		refreshFont();
		refreshVisibility();
	}

	/**
	 * @@generated
	 */
	protected void refreshVisibility() {
		boolean isVisible = getDiagramNode().isVisible();
		boolean wasVisible = getFigure().isVisible();
		if (isVisible == wasVisible) {
			return;
		}
		if (!isVisible && (getSelected() != SELECTED_NONE)) {
			getViewer().deselect(this);
		}

		getFigure().setVisible(isVisible);
		getFigure().revalidate();
	}

	/**
	 * @@generated
	 */
	protected void refreshBounds() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> node = getDiagramNode();
		if (node.getLayoutConstraint() == null) {
			return;
		}
		assert node.getLayoutConstraint() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%>;
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%> bounds = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%>) node.getLayoutConstraint();
		int x = bounds.getX();
		int y = bounds.getY();
		int width = bounds.getWidth();
		int height = bounds.getHeight();
		if (width < 0) {
			x -= width;
			width = -width;
		}
		if (height < 0) {
			y -= height;
			height = -height;
		}
		((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) getParent()).setLayoutConstraint(this, getFigure(), 
			new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>(x, y, width, height));
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getModelChildren() {
		return getDiagramNode().getVisibleChildren();
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getModelSourceConnections() {
		return getDiagramNode().getSourceEdges();
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getModelTargetConnections() {
		return getDiagramNode().getTargetEdges();
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor")%> getSourceConnectionAnchor(<%=importManager.getImportedName("org.eclipse.gef.ConnectionEditPart")%> connection) {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor")%>(getFigure());
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor")%> getSourceConnectionAnchor(<%=importManager.getImportedName("org.eclipse.gef.Request")%> request) {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor")%>(getFigure());
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor")%>  getTargetConnectionAnchor(<%=importManager.getImportedName("org.eclipse.gef.ConnectionEditPart")%> connection) {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor")%>(getFigure());
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.ConnectionAnchor")%>  getTargetConnectionAnchor(<%=importManager.getImportedName("org.eclipse.gef.Request")%> request) {
		return new <%=importManager.getImportedName("org.eclipse.draw2d.ChopboxAnchor")%>(getFigure());
	}

	/**
	 * @@generated
	 */
	public Object getAdapter(Class key) {
<%
if (!genNode.getChildNodes().isEmpty() && isXYLayout) {
%>
		if (<%=importManager.getImportedName("org.eclipse.gef.SnapToHelper")%>.class == key) {
			return new <%=importManager.getImportedName("org.eclipse.gef.SnapToGrid")%>(this);
		}
<%
}
%>
		if (<%=importManager.getImportedName("org.eclipse.gef.TreeEditPart")%>.class == key) {
			return getTreeEditPartAdapter();
		}
<%/*@@ include file="adapters/propertySource.javajetinc"*/%>
		return super.getAdapter(key);
	}

	/**
	 * @@generated
	 */
	private TreeEditPartAdapter myTreeEditPartAdapter;

	/**
	 * @@generated
	 */
	private TreeEditPartAdapter getTreeEditPartAdapter() {
		if (myTreeEditPartAdapter == null) {
			myTreeEditPartAdapter = new TreeEditPartAdapter();
		}
		return myTreeEditPartAdapter;
	}

	/**
	 * @@generated
	 */
	public void activate() {
		super.activate();
		getDiagramNode().getElement().eAdapters().add(domainModelRefresher);
<%
if (!genNode.getChildNodes().isEmpty()) {
%>
		installNotationModelRefresher();
<%
}
%>
<%
if (myHelper.containsLinks()) {
%>
		installLinkNotationModelRefresher();
<%
}
%>
	}

	/**
	 * @@generated
	 */
	public void deactivate() {
<%
if (myHelper.containsLinks()) {
%>
		uninstallLinkNotationModelRefresher();
<%
}
%>
<%
if (!genNode.getChildNodes().isEmpty()) {
%>
		uninstallNotationModelRefresher();
<%
}
%>
		getDiagramNode().getElement().eAdapters().remove(domainModelRefresher);
		super.deactivate();
	}
<%
{
	final String _getViewCode = "getDiagramNode()";
	final String _getDiagramCode = "getDiagramNode().getDiagram()";
	final boolean _includeUncontainedLinks = false;
	if (!genNode.getChildNodes().isEmpty()) {
		final boolean isListLayout = !isXYLayout;
		final List childNodes = genNode.getChildNodes();
%>
<%@@ include file="notationModelRefresher.jetinc"%>
<%
	}
%>
<%@@ include file="linkNotationModelRefresher.jetinc"%>
<%
}	//end of local declarations
%>

<%@@ include file="refreshers.javajetinc/domainModelRefresher.javajetinc"%>

<%@@ include file="refreshers.javajetinc/externalRefreshers.javajetinc"%>
<%@@ include file="refreshers.javajetinc/external.jetinc"%>

<%
	final String primaryView = "getDiagramNode()";
%>
<%@@ include file="refreshMethods/font.javajetinc"%>

<%@@ include file="refreshMethods/shapeColor.javajetinc"%>

<%@@ include file="refresher.javajetinc"%>

	/**
	 * @@generated
	 */
	private void createRefreshers() {
		structuralFeatures2Refresher = new <%=importManager.getImportedName("java.util.HashMap")%>();
<%@@ include file="refreshers.javajetinc/children.javajetinc"%>
<%@@ include file="refreshers.javajetinc/bounds.javajetinc"%>
<%@@ include file="refreshers.javajetinc/visibility.javajetinc"%>
<%@@ include file="refreshers.javajetinc/sourceEdges.javajetinc"%>
<%@@ include file="refreshers.javajetinc/targetEdges.javajetinc"%>
<%@@ include file="refreshers.javajetinc/font.javajetinc"%>
<%@@ include file="refreshers.javajetinc/shapeColor.javajetinc"%>
	}

<%
if (genNode.getViewmap() instanceof InnerClassViewmap) {
	String classBody = ((InnerClassViewmap) genNode.getViewmap()).getClassBody();
%>
<%=classBody%>
<%@@ include file="mapmodeWorkaround.javajetinc"%>
<%
}
%>

	/**
	 * @@generated
	 */
	private class TreeEditPartAdapter extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.tree.BaseTreeEditPart")%> {
		/**
		 * @@generated
		 */
		public TreeEditPartAdapter() {
			super(getDiagramNode(), <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
		}

		/**
		 * @@generated
		 */
		protected void createEditPolicies() {
<%@@ include file="treeComponentEditPolicy.javajetinc"%>
<%
if (myHelper.getPrimaryLabel() != null) {
%>
<%@@ include file="directEditPolicy.javajetinc"%>
<%
}
%>
		}

<%
if (myHelper.getPrimaryLabel() != null) {
%>
		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer")%> createLabelTextDisplayer() {
			<%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%> primaryLabelEditPart = getPrimaryLabelEditPart();
			if (primaryLabelEditPart != null) {
				return primaryLabelEditPart.getLabelTextDisplayer();
			}
			return super.createLabelTextDisplayer();
		}

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getImage() {
			<%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%> primaryLabelEditPart = getPrimaryLabelEditPart();
			if (primaryLabelEditPart != null) {
				return primaryLabelEditPart.getLabelIcon();
			}
			return null;
		}

		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%> getPrimaryLabelEditPart() {
			for(<%=importManager.getImportedName("java.util.Iterator")%> it = getDiagramNode().getChildren().iterator(); it.hasNext(); ) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextChild = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)it.next();
				if (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextChild) == <%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%>.VISUAL_ID) {
					return (<%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%>) <%=genNode.getEditPartClassName()%>.this.getViewer().getEditPartRegistry().get(nextChild);
				}
			}
			return null;
		}
<%
}
%>

		/**
		 * Since compartments and labels are not selectable edit parts, they are filtered from the overview as well.
		 * @@generated
		 */
		protected <%=importManager.getImportedName("java.util.List")%> getModelChildren() {
			<%=importManager.getImportedName("java.util.List")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
			for(<%=importManager.getImportedName("java.util.Iterator")%> it = getDiagramNode().getVisibleChildren().iterator(); it.hasNext(); ) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> next = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next();
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.DrawerStyle")%> style = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.DrawerStyle")%>) next.getStyle(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getDrawerStyle());
				if (style != null && style.isCollapsed()) {
					continue;
				}
				switch (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(next)) {
<%
	for(Iterator it = genNode.getChildNodes().iterator(); it.hasNext(); ) {
		GenChildNode next = (GenChildNode)it.next();
%>
				case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
					result.add(next);
					break;
<%
}
%>
<%
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();){
			GenCompartment next = (GenCompartment) compartments.next();
%>
				case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
					result.addAll(next.getChildren());
					break;
<%
}
%>
				}
			}
			result.addAll(getDiagramNode().getSourceEdges());
			return result;
		}
	}
}
<%importManager.emitSortedImports();%>
@


1.44
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@@


1.43
log
@[164018]: Command generation separated from Parts for layout edit policy and graphical node edit policy;
NewDiagramFileWizard: layout is not persisted if the diagram is closed right after initialization
@
text
@d158 1
a158 1
public class <%=genNode.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart")%> implements <%=importManager.getImportedName("org.eclipse.gef.NodeEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecoratableEditPart")%> {
d929 1
a981 4
		String editPatternCode = importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName()) + ".EDIT_PATTERN";
		String resolvedSemanticElement = "(" + importManager.getImportedName(genNode.getDomainMetaClass().getQualifiedInterfaceName()) + ") getDiagramNode().getElement()";
		LabelModelFacet labelModelFacet = myHelper.getPrimaryLabel().getModelFacet();
		GenClass underlyingMetaClass = genNode.getDomainMetaClass();
d983 1
a983 1
<%@@ include file="treeDirectEditPolicy.jetinc"%>
a991 37
<%@@include file="treeDirectEdit.jetinc" %>

		/**
		 * @@generated
		 */
		protected String getEditText() {
			<%=importManager.getImportedName(myHelper.getPrimaryLabel().getEditPartQualifiedClassName())%> primaryLabelEditPart = getPrimaryLabelEditPart();
			if (primaryLabelEditPart != null) {
				return primaryLabelEditPart.getLabelEditText();
			}
			return "";
		}

<%
}
%>
		/**
		 * @@generated
		 */
		public void activate() {
			super.activate();
			getDiagramNode().getElement().eAdapters().add(domainModelRefresher);
		}

		/**
		 * @@generated
		 */
		public void deactivate() {
			getDiagramNode().getElement().eAdapters().remove(domainModelRefresher);
			super.deactivate();
		}

<%@@ include file="refreshers.javajetinc/domainModelRefresher.javajetinc"%>

<%
if (myHelper.getPrimaryLabel() != null) {
%>
d995 1
a995 1
		protected String getText() {
d998 1
a998 1
				return primaryLabelEditPart.getLabelText();
d1000 1
a1000 1
			return super.getText();
a1030 39
		 * @@generated
		 */
		protected void createRefreshers() {
			super.createRefreshers();
			Refresher labelRefresher = new Refresher() {
				public void refresh() {
					refreshVisuals();
				}
			};
<%
if (myHelper.getPrimaryLabel() != null) {
	LabelModelFacet labelModelFacet = myHelper.getPrimaryLabel().getModelFacet();
	if (labelModelFacet instanceof FeatureLabelModelFacet) {
		FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
		for(Iterator it = featureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
			GenFeature next = (GenFeature) it.next();
%>
			registerRefresher(<%=importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=next.getFeatureAccessorName()%>(), labelRefresher);
<%
		}
	}
} else {
	GenClass metaClass = genNode.getDomainMetaClass();
	if (metaClass != null) {
		List labelNotifyFeatures = metaClass.getLabelNotifyFeatures();
		for(Iterator it = labelNotifyFeatures.iterator(); it.hasNext(); ) {
			GenFeature next = (GenFeature) it.next();
%>
			registerRefresher(<%=importManager.getImportedName(next.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=next.getFeatureAccessorName()%>(), labelRefresher);
<%
		}
	}
%>
<%
}
%>
		}

		/**
@


1.42
log
@[176362]: ClassCastException while selecting items in tree outline of the generated diagram + test to reproduce;
ComponentEditPolicy.xpt: replace int constant with a reference thereto to facilitate readability
@
text
@a7 1
Palette palette = genDiagram.getPalette();
d18 1
a27 3
	private boolean myHasChildrenInListCompartments = false;
	private boolean hasIncomingLinks = false;
	private boolean hasOutgoingLinks = false;
a53 2
			
			myHasChildrenInListCompartments |= next.isListLayout() && !next.getChildNodes().isEmpty();
a60 2
			GenClass incomingClass;
			GenClass outgoingClass;
a63 4
				incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
				outgoingClass = modelFacet.getSourceMetaFeature() == null
					? modelFacet.getContainmentMetaFeature().getGenClass()
					: modelFacet.getSourceMetaFeature().getTypeGenClass();
a71 2
				incomingClass = metaFeature.getTypeGenClass();
				outgoingClass = metaFeature.getGenClass();
a75 2
			hasIncomingLinks |= (incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass()));
			hasOutgoingLinks |= (outgoingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass()));
a101 12
	public boolean hasIncomingLinks() {
		return hasIncomingLinks;
	}

	public boolean hasOutgoingLinks() {
		return hasOutgoingLinks;
	}

	public boolean hasChildrenInListCompartments(){
		return myHasChildrenInListCompartments;
	}
	
d205 1
a205 340
<%
String layoutEditPolicyBaseClass;
if (!genNode.getChildNodes().isEmpty() && isXYLayout) {
	layoutEditPolicyBaseClass = "org.eclipse.gmf.runtime.lite.edit.policies.XYLayoutEditPolicyEx";
} else {
	layoutEditPolicyBaseClass = "org.eclipse.gmf.runtime.lite.edit.policies.ListLayoutEditPolicy";
}
%>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.LAYOUT_ROLE, new <%=importManager.getImportedName(layoutEditPolicyBaseClass)%>() {
<%
{
	String _getViewCode = "getDiagramNode()";
	List childNodes = genNode.getChildNodes();
	boolean isListLayout = !isXYLayout;
%>
<%@@include file="createAddCommand.jetinc"%>
<%@@include file="createCloneCommand.jetinc"%>
<%
}
%>
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getCreateCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.CreateRequest")%> request) {
<%
if (palette != null && !genNode.getChildNodes().isEmpty()) {
%>
				if (request instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%>) {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%> requestEx = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%>) request;
					int[] visualIds = requestEx.getVisualIds();
					if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(requestEx.getModelID())) {
						return null;
					}
					<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
					for(int i = 0; i < visualIds.length; i++) {
						int nextVisualId = visualIds[i];
						switch (nextVisualId) {
<%
	for(Iterator it = genNode.getChildNodes().iterator(); it.hasNext(); ) {
		GenChildNode next = (GenChildNode)it.next();
		if (next.isSansDomain() || next.getDomainMetaClass().isAbstract()) {
			continue;
		}
%>
						case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
							result.append(new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Create" + next.getDomainMetaClass().getName() + next.getVisualID() + "Command")%>((View) getModel(), requestEx<%if (isXYLayout) {%>, 
								(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>)getConstraintFor(request)<%}%>));
							break;
<%
	}
%>
						}
					}
					return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(((View) getModel()).getDiagram().getElement()), result);
				}
<%
}
%>
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
			}
<%
if (!genNode.getChildNodes().isEmpty() && isXYLayout) {
%>
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> createChangeConstraintCommand(final <%=importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest")%> request, final <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child, Object constraint) {
				if (!isDirectChild(child)) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
<%@@include file="changeConstraintCommand.jetinc"%>
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> createChangeConstraintCommand(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child, Object constraint) {
				assert false;
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
			}
<%
} else {
%>
			protected Object getConstraintFor(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> rect) {
				return null;
			}
			protected Object getConstraintFor(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> point) {
				return null;
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> createChangeConstraintCommand(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child, Object constraint) {
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
			}
<%
}
%>
			protected <%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%> createChildEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child) {
				<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%> result = child.getEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.PRIMARY_DRAG_ROLE);
				if (result != null) {
					return result;
				}
<%
if (myHelper.hasExternalLabels()) {
%>
				if (isExternalLabel(child)) {
					return new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy")%>() {
						public <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getTargetEditPart(<%=importManager.getImportedName("org.eclipse.gef.Request")%> request) {
							if (<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_SELECTION.equals(request.getType())) {
								return <%=genNode.getEditPartClassName()%>.this;
							}
							return super.getTargetEditPart(request);
						}
					};
				}
<%
}
%>
				return super.createChildEditPolicy(child);
			}
		});
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.GRAPHICAL_NODE_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.GraphicalNodeEditPolicy")%>() {
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getReconnectTargetCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest")%> request) {
<%
if (!myHelper.hasIncomingLinks()) {
%> 
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
<%
} else {
%>
				<%=importManager.getImportedName("org.eclipse.gef.ConnectionEditPart")%> connection = request.getConnectionEditPart();
				if (connection.getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> == false) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>)connection.getModel();
				String modelID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(edge);
				if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(modelID)) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> result = null;
				int visualID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(edge);
				switch (visualID) {
<%
	for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
		GenLink genLink = (GenLink)it.next();
		if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
			continue;
		}
		GenClass incomingClass;
		String reconnectCommandNameInfix;
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
			reconnectCommandNameInfix = modelFacet.getMetaClass().getName();
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			incomingClass = metaFeature.getTypeGenClass();
			reconnectCommandNameInfix = metaFeature.getFeatureAccessorName();
		} else {
			continue;
		}
		if (!incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
			continue;
		}
%>
				case <%=importManager.getImportedName(genLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
					result = new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Reconnect" + reconnectCommandNameInfix + genLink.getVisualID() + "TargetCommand")%>(request);
					break;
<%
	}
%>
				}
				if (result == null) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramNode().getDiagram().getElement()), result);
<%
}
%>
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getReconnectSourceCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest")%> request) {
<%
if (!myHelper.hasOutgoingLinks()) {
%> 
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
<%
} else {
%>
				<%=importManager.getImportedName("org.eclipse.gef.ConnectionEditPart")%> connection = request.getConnectionEditPart();
				if (connection.getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> == false) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>)connection.getModel();
				String modelID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(edge);
				if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(modelID)) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> result = null;
				int visualID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(edge);
				switch (visualID) {
<%
	for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
		GenLink genLink = (GenLink)it.next();
		if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
			continue;
		}
		GenClass outgoingClass;
		String reconnectCommandNameInfix;
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			outgoingClass = modelFacet.getSourceMetaFeature() == null
				? modelFacet.getContainmentMetaFeature().getGenClass()
				: modelFacet.getSourceMetaFeature().getTypeGenClass();
			reconnectCommandNameInfix = modelFacet.getMetaClass().getName();
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			outgoingClass = metaFeature.getGenClass();
			reconnectCommandNameInfix = metaFeature.getFeatureAccessorName();
		} else {
			continue;
		}
		if (!outgoingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
			continue;
		}
%>
				case <%=importManager.getImportedName(genLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
					result = new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Reconnect" + reconnectCommandNameInfix + genLink.getVisualID() + "SourceCommand")%>(request);
					break;
<%
	}
%>
				}
				if (result == null) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramNode().getDiagram().getElement()), result);
<%
}
%>
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getConnectionCreateCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest")%> request) {
<%if (palette != null && myHelper.hasOutgoingLinks()) {%>
				if (request instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%>) {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> requestEx = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%>) request;
					if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(requestEx.getModelID())) {
						return null;
					}
					int[] visualIds = requestEx.getVisualIds();
					<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
					for (int i = 0; i < visualIds.length; i++) {
						int nextVisualId = visualIds[i];
						switch (nextVisualId) {
<%
for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass outgoingClass;
	String createCommandNameInfix;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		outgoingClass = modelFacet.getSourceMetaFeature() == null
			? modelFacet.getContainmentMetaFeature().getGenClass()
			: modelFacet.getSourceMetaFeature().getTypeGenClass();
		createCommandNameInfix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		outgoingClass = metaFeature.getGenClass();
		createCommandNameInfix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (!outgoingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
		continue;
	}
%>
						case <%=importManager.getImportedName(genLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
							result.appendIfCanExecute(new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Create" + createCommandNameInfix + genLink.getVisualID() + "StartCommand")%>(requestEx));
							break;
<%
}
%>
						}
					}
					if (!result.canExecute()) {
						//returning an unexecutable command does not change cursor to "No".
						return null;
					}
					<%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> wrappedResult = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramNode().getDiagram().getElement()), result);
					request.setStartCommand(wrappedResult);
					return wrappedResult;
				}
<%}/*when there's palette*/%>
				return null;
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getConnectionCompleteCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest")%> request) {
<%if (palette != null && myHelper.hasIncomingLinks()) {%>
				if (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {
					return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
				}
				if (request instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%>) {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> requestEx = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%>) request;
					if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(requestEx.getModelID())) {
						return null;
					}
					int[] visualIds = requestEx.getVisualIds();
					<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
					for (int i = 0; i < visualIds.length; i++) {
						int nextVisualId = visualIds[i];
						switch (nextVisualId) {
<%
for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass incomingClass;
	String createCommandNameInfix;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
		createCommandNameInfix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		incomingClass = metaFeature.getTypeGenClass();
		createCommandNameInfix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (!incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
		continue;
	}
%>
						case <%=importManager.getImportedName(genLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
							result.appendIfCanExecute(new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Create" + createCommandNameInfix + genLink.getVisualID() + "Command")%>(requestEx));
							break;
<%
}
%>
						}
					}
					if (result.getCommandList().size() != 1 || !result.canExecute()) {
						//Cannot create several connections at once.
						return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
					}
					return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramNode().getDiagram().getElement()), result);
				}
<%}/*when there's palette*/%>
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
			}
		});
d215 1
d589 1
a589 1
	protected boolean isExternalLabel(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
d618 1
a618 1
	protected boolean isDirectChild(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
@


1.41
log
@Images should be reused across the editparts that represent same model element types (prevent SWTErrors when opening huge diagrams)
@
text
@d1343 1
a1343 1
<%@@ include file="componentEditPolicy.javajetinc"%>
@


1.40
log
@Generated diagram plugin should at least compile when there's a node with  an abstract underlying element.
@
text
@d1411 11
@


1.39
log
@[164018]: Add<>Command and Clone<>Command moved to separate classes;
Common methods from edit policies moved to runtime superclasses
@
text
@d269 3
@


1.38
log
@ComponentEditPolicy separated into a top-level class;
CreateRequest now knows about the MODEL_ID;
All "Command" class references fully-qualified in templates to prevent compilation problems;
[170078]: Remove link with class from the domain model on deleting link's destination
@
text
@a16 1
<%@@ include file="../common/relatedNodesFinder.jetinc"%>
d235 1
a235 1
	layoutEditPolicyBaseClass = "org.eclipse.gef.editpolicies.XYLayoutEditPolicy";
d237 1
a237 1
	layoutEditPolicyBaseClass = "org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy";
@


1.37
log
@Ensure unselectability of the inner auxiliary edit parts by more standard GEF means (isSelectable() returns false instead of using EditPolicy with getHost() delegation)
@
text
@d260 3
d296 1
a296 1
			protected Command createChangeConstraintCommand(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child, Object constraint) {
d462 3
d521 3
@


1.36
log
@Fixed inselectability of child editparts caused by validation decoration managers
@
text
@d313 4
d318 1
a318 1
if (!genNode.getChildNodes().isEmpty()) {
d320 9
a328 6
				if (isDirectChild(child)) {
					<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%> result = child.getEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.PRIMARY_DRAG_ROLE);
					if (result != null) {
						return result;
					}
					return super.createChildEditPolicy(child);
d333 1
a333 8
				return new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy")%>() {
					public <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> getTargetEditPart(<%=importManager.getImportedName("org.eclipse.gef.Request")%> request) {
						if (<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_SELECTION.equals(request.getType())) {
							return <%=genNode.getEditPartClassName()%>.this;
						}
						return super.getTargetEditPart(request);
					}
				};
@


1.35
log
@[172664]: Provide audits and metrics for Lite diagrams (including view-based and RCP) + validation decorators + validation markers (for non-RCP case);
Several templates are rewritten with xpand;
lite-specific TextEmitter is back (otherwise importManager is sometimes passed to xpand templates)
@
text
@d677 1
a677 1
			invisibleRectangle.add(decorationShape);
@


1.34
log
@[170248]: Beautify compartments generated for the lite version
@
text
@d186 1
a186 1
public class <%=genNode.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart")%> implements <%=importManager.getImportedName("org.eclipse.gef.NodeEditPart")%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart")%> {
d202 5
d676 1
d683 14
d756 1
a756 12
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) getModel();
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation")%> annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
		if (annotation == null) {
			return null;
		}
		
		<%=importManager.getImportedName("org.eclipse.draw2d.Figure")%> decorationPane = new <%=importManager.getImportedName("org.eclipse.draw2d.Figure")%>();
		decorationPane.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.BorderLayout")%>());

		<%=importManager.getImportedName("org.eclipse.draw2d.ImageFigure")%> imageFigure = new <%=importManager.getImportedName("org.eclipse.draw2d.ImageFigure")%>(<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getBundledImage("icons/shortcut.gif"), <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.EAST);
		decorationPane.add(imageFigure, <%=importManager.getImportedName("org.eclipse.draw2d.BorderLayout")%>.BOTTOM);
 		return decorationPane;
@


1.33
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@d312 4
d568 1
d588 66
d1451 4
@


1.32
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d264 1
a264 1
							result.append(new Create<%=next.getDomainMetaClass().getName()%><%=next.getVisualID()%>Command((View) getModel(), requestEx<%if (isXYLayout) {%>, 
d372 1
a372 1
					result = new Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>TargetCommand(request);
d432 1
a432 1
					result = new Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>SourceCommand(request);
d481 1
a481 1
							result.appendIfCanExecute(new Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>StartCommand(requestEx));
d535 1
a535 1
							result.appendIfCanExecute(new Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>Command(requestEx));
d555 1
a555 8
		//This edit part understands the direct edit request and delegates it to the appropriate label, so no command is needed here.
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.DIRECT_EDIT_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.DirectEditPolicy")%>() {
			protected void showCurrentEditValue(<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%> request) {
			}
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getDirectEditCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%> request) {
				return null;
			}
		});
a1227 1007
for(Iterator it = genNode.getChildNodes().iterator(); it.hasNext(); ) {
	GenChildNode next = (GenChildNode)it.next();
	boolean isStatic = true;
	boolean isListLayout = !isXYLayout;
%>
<%@@ include file="createNodeCommand.javajetinc"%>
<%
}
for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass outgoingClass;
	String createCommandNameInfix;
	String reconnectCommandNameInfix;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		outgoingClass = modelFacet.getSourceMetaFeature() == null
			? modelFacet.getContainmentMetaFeature().getGenClass()
			: modelFacet.getSourceMetaFeature().getTypeGenClass();
		reconnectCommandNameInfix = createCommandNameInfix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		outgoingClass = metaFeature.getGenClass();
		reconnectCommandNameInfix = createCommandNameInfix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (!outgoingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
		continue;
	}
	GenLinkConstraints linkConstraints = genLink.getCreationConstraints();
%>
	/**
	 * @@generated
	 */
	private static class Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>SourceCommand extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge;
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> newSource;
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> oldSource;
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> reconnectCommand;
		/**
		 * @@generated
		 */
		public Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>SourceCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest")%> request) {
			this((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>)request.getConnectionEditPart().getModel(), (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)request.getTarget().getModel());
		}
		/**
		 * @@generated
		 */
		public Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>SourceCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> newSource) {
			this.edge = edge;
			this.newSource = newSource;
			this.oldSource = edge.getSource();
		}
		/**
		 * @@generated
		 */
		public void execute() {
			reconnectCommand.execute();
		}
		/**
		 * @@generated
		 */
		public boolean canUndo() {
			return reconnectCommand.canUndo();
		}
		/**
		 * @@generated
		 */
		public void undo() {
			reconnectCommand.undo();
		}
		/**
		 * @@generated
		 */
		public void redo() {
			execute();
		}
		/**
		 * @@generated
		 */
		protected boolean prepare() {
<%
	if (linkConstraints != null) {
%>
			final boolean[] resultHolder = new boolean[1];
			//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion.
			final <%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(oldSource.getDiagram().getElement());
			<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> command = new <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%>() {
				private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);
				public boolean canExecute() {
					return deleteCommand.canExecute();
				}
				public boolean canUndo() {
					return true;
				}
				public void redo() {
				}
				public void undo() {
				}
				public void execute() {
					deleteCommand.execute();
					try {
						resultHolder[0] = canReconnect();
					} finally {
						deleteCommand.undo();
					}
				}
			};
			if (!command.canExecute()) {
				return false;
			}
			new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(domainModelEditDomain, command).execute();
			if (resultHolder[0]) {
				reconnectCommand = createReconnectCommand();
			}
			return resultHolder[0] && reconnectCommand.canExecute();
<%
	} else {
%>
			if (canReconnect()) {
				reconnectCommand = createReconnectCommand();
				return reconnectCommand.canExecute();
			}
			return false;
<%
	}
%>
		}

		/**
		 * @@generated
		 */
		private boolean canReconnect() {
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
			GenFeature childFeature = modelFacet.getChildMetaFeature();
			if (containmentFeature == null) {
%>
			return false;
<%
			} else {
%>
			<%=importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName())%> container = (<%=importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName())%>)getRelationshipContainer(newSource.getElement(), <%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>());
			if (container == null) {
				return false;
			}
<%
				{
					GenFeature _feature = containmentFeature;
					String _ownerInstance = "container";
					String _exceedsUpperBound = "return false;";
					GenClass _ownerGenClass = containmentFeature.getGenClass();
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
				}
				if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
					{
						GenFeature _feature = childFeature;
						String _ownerInstance = "container";
						String _exceedsUpperBound = "return false;";
						GenClass _ownerGenClass = containmentFeature.getGenClass();
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
					}
				}
			}
			//No need to check the size of the source or target features: their size does not change
			//Still need to check the eOpposite() of the source feature
			GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
			GenFeature sourceReverseFeature = sourceFeature == null ? null : sourceFeature.getReverse();
			if (sourceReverseFeature != null && !sourceReverseFeature.isDerived() && sourceReverseFeature != containmentFeature && sourceReverseFeature != childFeature) {
				GenFeature _feature = sourceReverseFeature;
				String _ownerInstance = "newSource.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
			}
{
	String _source = "newSource.getElement()";
	String _target = "edge.getTarget().getElement()";
%>
<%@@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
<%
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			{
				GenFeature _feature = metaFeature;
				String _ownerInstance = "newSource.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
			}
{
	String _source = "newSource.getElement()";
	String _target = "edge.getTarget().getElement()";
%>
<%@@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
<%
		} else {
%>
			return false;
<%
		}
%>
		}

		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> createReconnectCommand() {
			<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(oldSource.getDiagram().getElement());
			<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
			result.append(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ReconnectNotationalEdgeSourceCommand")%>(edge, newSource));
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
			GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
			GenFeature childFeature = modelFacet.getChildMetaFeature();
			boolean setSource = sourceFeature != null;
			boolean setChild = childFeature != null && childFeature != containmentFeature && !childFeature.isDerived();
			if (containmentFeature != null) {
				if (sourceFeature != null && sourceFeature.getEcoreFeature() instanceof EReference == true) {
					EReference sourceEcoreFeature = (EReference)sourceFeature.getEcoreFeature();
					if (sourceEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
						setSource = false;
					}
				}
			}
			if (containmentFeature != null || setChild) {
%>
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container = getRelationshipContainer(newSource.getElement(), <%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>());
			if (container == null) {
				return <%=importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand")%>.INSTANCE;
			}
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> oldContainer = edge.getElement().eContainer();
			if (oldContainer == null) {
				return <%=importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand")%>.INSTANCE;
			}
			if (oldContainer != container) {
<%
			}
			if (containmentFeature != null) {
				if (containmentFeature.getEcoreFeature().isMany()) {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
					editingDomain,
					edge.getElement().eContainer(), <%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), edge.getElement()));
<%
				} else {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
					editingDomain,
					edge.getElement().eContainer(), <%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
<%
				}
%>
				result.append(<%=importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(
					editingDomain,
					container, <%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), edge.getElement()));
<%
			}
			if (setChild) {
				if (childFeature.getEcoreFeature().isMany()) {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
					editingDomain,
					edge.getElement().eContainer(), <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(),
					edge.getElement()));
<%
				} else {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
					editingDomain,
					edge.getElement().eContainer(), <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(),
					<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
<%
				}
%>
				result.append(<%=importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(
					editingDomain,
					container, <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(), edge.getElement()));
<%
			}
%>
			}
<%
			if (setSource) {
				if (sourceFeature.getEcoreFeature().isMany()) {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
				editingDomain,
				edge.getElement(), <%=importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=sourceFeature.getFeatureAccessorName()%>(),
				oldSource.getElement()));
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand")%>.create(
				editingDomain,
				edge.getElement(), <%=importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=sourceFeature.getFeatureAccessorName()%>(),
				newSource.getElement()));
<%
				} else {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
				editingDomain,
				edge.getElement(), <%=importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=sourceFeature.getFeatureAccessorName()%>(),
				newSource.getElement()));
<%
				}
			}
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			if (metaFeature.getEcoreFeature().isMany()) {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
				editingDomain,
				oldSource.getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), edge.getTarget().getElement()));
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand")%>.create(
				editingDomain,
				newSource.getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), edge.getTarget().getElement()));
<%
			} else {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
				editingDomain,
				oldSource.getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
				editingDomain,
				newSource.getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), edge.getTarget().getElement()));
<%
			}
		}
%>
			return result;
		}

<%@@ include file="getRelationshipContainer.jetinc"%>
<%
	if (linkConstraints != null) {
		String _edge = "edge";
%>
	/**
	 * @@generated
	 */
<%@@ include file="createDomainModelRemoveCommandForLink.jetinc"%>
<%
	}
%>
	}

<%
	if (palette != null) {
%>
	/**
	 * @@generated
	 */
	private static class Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>StartCommand extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> source;
		/**
		 * @@generated
		 */
		public Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>StartCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> requestEx) {
			//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart().
			source = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)requestEx.getTargetEditPart().getModel();
		}
		/**
		 * @@generated
		 */
		public void execute() {
			//This command never gets executed
		}
		/**
		 * @@generated
		 */
		public void undo() {
			//This command never gets executed
		}
		/**
		 * @@generated
		 */
		public void redo() {
			//This command never gets executed
		}
		/**
		 * @@generated
		 */
		public boolean canUndo() {
			return true;
		}
		/**
		 * @@generated
		 */
		protected boolean prepare() {
			if (source == null) {
				return false;
			}
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
			if (containmentFeature == null) {
%>
			return false;
<%
			} else {
%>
			<%=importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName())%> container = (<%=importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName())%>)getRelationshipContainer(source.getElement(), <%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>());
			if (container == null) {
				return false;
			}
<%
				{
					GenFeature _feature = containmentFeature;
					String _ownerInstance = "container";
					String _exceedsUpperBound = "return false;";
					GenClass _ownerGenClass = containmentFeature.getGenClass();
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
				}
				GenFeature childFeature = modelFacet.getChildMetaFeature();
				if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
					{
						GenFeature _feature = childFeature;
						String _ownerInstance = "container";
						String _exceedsUpperBound = "return false;";
						GenClass _ownerGenClass = containmentFeature.getGenClass();
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
					}
				}
				//Need to check the eOpposite() of the source feature
				GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
				GenFeature sourceReverseFeature = sourceFeature == null ? null : sourceFeature.getReverse();
				if (sourceReverseFeature != null && !sourceReverseFeature.isDerived() && sourceReverseFeature != containmentFeature && sourceReverseFeature != childFeature) {
					GenFeature _feature = sourceReverseFeature;
					String _ownerInstance = "source.getElement()";
					String _exceedsUpperBound = "return false;";
					GenClass _ownerGenClass = null;
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
				}
{
	String _source = "source.getElement()";
	String _target = "null";
%>
<%@@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
<%
			}
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		{
			GenFeature _feature = metaFeature;
			String _ownerInstance = "source.getElement()";
			String _exceedsUpperBound = "return false;";
			GenClass _ownerGenClass = null;
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
		}
{
	String _source = "source.getElement()";
	String _target = "null";
%>
<%@@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
<%
		} else {
%>
			return false;
<%
		}
%>
		}
<%@@ include file="getRelationshipContainer.jetinc"%>

	}
<%
	}	//if there's palette 
}	//outgoing links
%>
<%
for(Iterator it = genDiagram.getLinks().iterator(); it.hasNext(); ) {
	GenLink genLink = (GenLink)it.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass incomingClass;
	String createCommandNameInfix;
	String reconnectCommandNameInfix;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
		reconnectCommandNameInfix = createCommandNameInfix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		incomingClass = metaFeature.getTypeGenClass();
		reconnectCommandNameInfix = createCommandNameInfix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (!incomingClass.getEcoreClass().isSuperTypeOf(genNode.getModelFacet().getMetaClass().getEcoreClass())) {
		continue;
	}
	GenLinkConstraints linkConstraints = genLink.getCreationConstraints();
%>
	/**
	 * @@generated
	 */
	private static class Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>TargetCommand extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge;
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> newTarget;
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> oldTarget;
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> reconnectCommand;
		/**
		 * @@generated
		 */
		public Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>TargetCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest")%> request) {
			this((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>)request.getConnectionEditPart().getModel(), (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)request.getTarget().getModel());
		}
		/**
		 * @@generated
		 */
		public Reconnect<%=reconnectCommandNameInfix%><%=genLink.getVisualID()%>TargetCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> newTarget) {
			this.edge = edge;
			this.newTarget = newTarget;
			this.oldTarget = edge.getTarget();
		}
		/**
		 * @@generated
		 */
		public void execute() {
			reconnectCommand.execute();
		}
		/**
		 * @@generated
		 */
		public boolean canUndo() {
			return reconnectCommand.canUndo();
		}
		/**
		 * @@generated
		 */
		public void undo() {
			reconnectCommand.undo();
		}
		/**
		 * @@generated
		 */
		public void redo() {
			execute();
		}
		/**
		 * @@generated
		 */
		protected boolean prepare() {
<%
	if (linkConstraints != null) {
%>
			final boolean[] resultHolder = new boolean[1];
			//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion.
			final <%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(oldTarget.getDiagram().getElement());
			<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> command = new <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%>() {
				private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);
				public boolean canExecute() {
					return deleteCommand.canExecute();
				}
				public boolean canUndo() {
					return true;
				}
				public void redo() {
				}
				public void undo() {
				}
				public void execute() {
					deleteCommand.execute();
					try {
						resultHolder[0] = canReconnect();
					} finally {
						deleteCommand.undo();
					}
				}
			};
			if (!command.canExecute()) {
				return false;
			}
			new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(domainModelEditDomain, command).execute();
			if (resultHolder[0]) {
				reconnectCommand = createReconnectCommand();
			}
			return resultHolder[0] && reconnectCommand.canExecute();
<%
	} else {
%>
			if (canReconnect()) {
				reconnectCommand = createReconnectCommand();
				return reconnectCommand.canExecute();
			}
			return false;
<%
	}
%>
		}
		/**
		 * @@generated
		 */
		private boolean canReconnect() {
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			//Need to check the eOpposite() of the target feature
			GenFeature targetFeature = modelFacet.getTargetMetaFeature();
			GenFeature targetReverseFeature = targetFeature == null ? null : targetFeature.getReverse();
			if (targetReverseFeature != null && !targetReverseFeature.isDerived()) {
				GenFeature _feature = targetReverseFeature;
				String _ownerInstance = "newTarget.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
			}
{
	String _source = "edge.getSource().getElement()";
	String _target = "newTarget.getElement()";
%>
<%@@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
<%
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			//Need to check eOpposite() of the metaFeature
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			GenFeature reverseMetaFeature = metaFeature == null ? null : metaFeature.getReverse();
			if (reverseMetaFeature != null && !reverseMetaFeature.isDerived()) {
				GenFeature _feature = reverseMetaFeature;
				String _ownerInstance = "newTarget.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
			}
{
	String _source = "edge.getSource().getElement()";
	String _target = "newTarget.getElement()";
%>
<%@@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
<%
		} else {
%>
			return false;
<%
		}
%>
		}
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> createReconnectCommand() {
			<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(oldTarget.getDiagram().getElement());
			<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
			result.append(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ReconnectNotationalEdgeTargetCommand")%>(edge, newTarget));
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature targetFeature = modelFacet.getTargetMetaFeature();
			if (targetFeature.getEcoreFeature().isMany()) {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
				editingDomain,
				edge.getElement(), <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(),
				oldTarget.getElement()));
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand")%>.create(
				editingDomain,
				edge.getElement(), <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(),
				newTarget.getElement()));
<%
			} else {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
				editingDomain,
				edge.getElement(), <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(),
				newTarget.getElement()));
<%
			}
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			if (metaFeature.getEcoreFeature().isMany()) {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
				editingDomain,
				edge.getSource().getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), oldTarget.getElement()));
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand")%>.create(
				editingDomain,
				edge.getSource().getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), newTarget.getElement()));
<%
			} else {
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
				editingDomain,
				edge.getSource().getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), newTarget.getElement()));
<%
			}
		}
%>
			return result;
		}
<%
	if (linkConstraints != null) {
		String _edge = "edge";
%>
	/**
	 * @@generated
	 */
<%@@ include file="createDomainModelRemoveCommandForLink.jetinc"%>
<%
	}
%>
	}

<%
	if (palette != null) {
%>
	/**
	 * @@generated
	 */
	private static class Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>Command extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
		/**
		 * @@generated
		 */
		private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> source;
		/**
		 * @@generated
		 */
		private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> target;
		/**
		 * @@generated
		 */
		private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> createdEdge;
		/**
		 * @@generated
		 */
		private final org.eclipse.emf.common.command.Command domainModelAddCommand;
		/**
		 * @@generated
		 */
		public Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>Command(<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> requestEx) {
			if (requestEx.getSourceEditPart().getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
				source = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)requestEx.getSourceEditPart().getModel();
			} else {
				source = null;
			}
			if (requestEx.getTargetEditPart().getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
				target = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)requestEx.getTargetEditPart().getModel();
			} else {
				target = null;
			}
			if (source == null || target == null) {
				createdEdge = null;
				domainModelAddCommand = <%=importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand")%>.INSTANCE;
				return;
			}
			createdEdge = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createEdge();
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenClass linkClass = modelFacet.getMetaClass();
%>
			<%=importManager.getImportedName(importManager.getImportedName(linkClass.getQualifiedInterfaceName()))%> createdDomainElement = <%=importManager.getImportedName(linkClass.getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=linkClass.getClassifierAccessorName()%>();
			createdEdge.setElement(<%if (linkClass.isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>createdDomainElement);
			<%/*XXX: Class name DomainElementInitializer should be user-customizable*/%>
			<%=importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")%>.<%=genLink.getUniqueIdentifier()%>.initializeElement(<%if (linkClass.isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>createdDomainElement);
<%
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
%>
			createdEdge.setElement(null);
<%
		}
%>
			<%=importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName())%>.INSTANCE.decorateView(createdEdge);
			<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(source.getDiagram().getElement());
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
%>
			org.eclipse.emf.common.command.CompoundCommand addLinkEndsCommand = new org.eclipse.emf.common.command.CompoundCommand();
<%
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
			GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
			GenFeature childFeature = modelFacet.getChildMetaFeature();
			GenFeature targetFeature = modelFacet.getTargetMetaFeature();
			//source/link features seem to be pointing from link to its ends, not vice versa.
			//Anyway, if there is containment feature and it is not opposite to either the source/target, we should add containment, 
			//otherwise we will have problems with saving uncontained EObjects.
			boolean addSource = sourceFeature != null;
			boolean addTarget = targetFeature != null;
			boolean addChild = childFeature != null && childFeature != containmentFeature && !childFeature.isDerived();
			if (containmentFeature != null) {
				if (sourceFeature != null && sourceFeature.getEcoreFeature() instanceof EReference == true) {
					EReference sourceEcoreFeature = (EReference)sourceFeature.getEcoreFeature();
					if (sourceEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
						addSource = false;
					}
				}
				if (targetFeature != null && targetFeature.getEcoreFeature() instanceof EReference == true) {
					EReference targetEcoreFeature = (EReference)targetFeature.getEcoreFeature();
					if (targetEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
						addTarget = false;
					}
				}
%>
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container = getRelationshipContainer(source.getElement(), <%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>());
			if (container == null) {
				domainModelAddCommand = null;
				return;
			}
			addLinkEndsCommand.append(<%=importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, 
				container, <%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), createdDomainElement));
<%
			}
			if (addChild) {
%>
			addLinkEndsCommand.append(<%=importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain,
				container, <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(), createdDomainElement));
<%
			}
			if (addSource) {
				{
					GenFeature _feature = sourceFeature;
					String _ownerInstance = "createdDomainElement";
					String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
					GenClass _ownerGenClass = modelFacet.getMetaClass();
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
				}
%>
			addLinkEndsCommand.append(<%=importManager.getImportedName(sourceFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, 
				createdDomainElement, <%=importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=sourceFeature.getFeatureAccessorName()%>(), source.getElement()));
<%
			}
			if (addTarget) {
				{
					GenFeature _feature = targetFeature;
					String _ownerInstance = "createdDomainElement";
					String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
					GenClass _ownerGenClass = modelFacet.getMetaClass();
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
				}
				//Need to check the eOpposite() of the target feature
				GenFeature targetReverseFeature = targetFeature == null ? null : targetFeature.getReverse();
				if (targetReverseFeature != null && !targetReverseFeature.isDerived()) {
					GenFeature _feature = targetReverseFeature;
					String _ownerInstance = "target.getElement()";
					String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
					GenClass _ownerGenClass = null;
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
				}
%>
			addLinkEndsCommand.append(<%=importManager.getImportedName(targetFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, 
				createdDomainElement, <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(), target.getElement()));
<%
			}
%>
		domainModelAddCommand = addLinkEndsCommand;
<%
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			//Need to check eOpposite() of the metaFeature
			GenFeature reverseMetaFeature = metaFeature == null ? null : metaFeature.getReverse();
			if (reverseMetaFeature != null && !reverseMetaFeature.isDerived()) {
				GenFeature _feature = reverseMetaFeature;
				String _ownerInstance = "target.getElement()";
				String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
				GenClass _ownerGenClass = null;
%>
<%@@ include file="featureMultiplicity.jetinc"%>
<%
			}
%>
			domainModelAddCommand = <%=importManager.getImportedName(metaFeature.getEcoreFeature().isMany()? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, source.getElement(), 
				<%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), target.getElement());
<%
		}
%>
		}

<%@@ include file="getRelationshipContainer.jetinc"%>

		/**
		 * @@generated
		 */
		public boolean canExecute() {
			if (source == null || target == null || createdEdge == null || domainModelAddCommand == null || !domainModelAddCommand.canExecute()) {
				return false;
			}
<%
{
	String _source = "source.getElement()";
	String _target = "target.getElement()";
%>
<%@@ include file="linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
			return true;
		}
		/**
		 * @@generated
		 */
		public boolean canUndo() {
			return source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canUndo();
		}
		/**
		 * @@generated
		 */
		public void execute() {
			domainModelAddCommand.execute();
			source.getDiagram().insertEdge(createdEdge);
			createdEdge.setSource(source);
			createdEdge.setTarget(target);
		}
		/**
		 * @@generated
		 */
		public void undo() {
			domainModelAddCommand.undo();
			source.getDiagram().removeEdge(createdEdge);
			createdEdge.setSource(null);
			createdEdge.setTarget(null);
		}
		/**
		 * @@generated
		 */
		public void redo() {
			execute();
		}
	}
<%
	}
%>
<%}/*when there's palette*/%>
<%
@


1.31
log
@Containers with XY layout should define adapter for SnapToHelper (used to be defined only for the DiagramEditPart)
@
text
@d566 5
d821 1
a821 1
		if (<%=importManager.getImportedName("org.eclipse.gef.RequestConstants")%>.REQ_DIRECT_EDIT == req.getType()) {
d832 2
@


1.30
log
@#161253: External node labels should be attached to nodes correctly
Generate 2 icons if myDiagram.getCreationWizardIconPathX() and myEditorGen.getEditor().getIconPathX() specify different absolute paths
@
text
@d1108 9
@


1.29
log
@Fix compilation problems introduced by recent fix of https://bugs.eclipse.org/bugs/show_bug.cgi?id=161380
@
text
@d22 1
a22 1
	private final List myAllInnerLabels = new LinkedList();
d41 1
a44 1
				myAllInnerLabels.add(next);
d162 2
a163 2
	public Iterator getAllInnerLabels() {
		return myAllInnerLabels.iterator();
d840 1
a840 1
		for (Iterator it = myHelper.getAllInnerLabels(); it.hasNext(); ) {
@


1.28
log
@#161380 simplify feature model facets
@
text
@d2345 2
a2346 2
		FeatureLabelModelFacet compositeFeatureLabelModelFacet = (FeatureLabelModelFacet) labelModelFacet;
		for(Iterator it = compositeFeatureLabelModelFacet.getMetaFeatures().iterator(); it.hasNext(); ) {
@


1.27
log
@#161380 simplify feature model facets
@
text
@d523 2
a524 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d1241 2
a1242 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d1427 2
a1428 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d1558 2
a1559 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d1706 2
a1707 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d1754 2
a1755 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d1904 1
a1904 1
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
d1906 1
a1906 1
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d1964 2
a1965 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d2052 1
a2052 1
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
d2149 2
a2150 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d2345 1
a2345 6
		GenFeature feature = ((FeatureLabelModelFacet)labelModelFacet).getMetaFeature();
%>
			registerRefresher(<%=importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=feature.getFeatureAccessorName()%>(), labelRefresher);
<%
	} else if (labelModelFacet instanceof CompositeFeatureLabelModelFacet) {
		CompositeFeatureLabelModelFacet compositeFeatureLabelModelFacet = (CompositeFeatureLabelModelFacet) labelModelFacet;
@


1.26
log
@#161380 move readOnly back to GenLabel
@
text
@d82 2
a83 2
			} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
				GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d360 2
a361 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d420 2
a421 2
		} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d469 2
a470 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
@


1.25
log
@#160894 Move readOnly property from GenLabel to LabelFeatureModelFacet
@
text
@d38 1
a38 2
			boolean labelReadOnly = next.getModelFacet() != null && next.getModelFacet().isReadOnly();
			if (myPrimaryLabel == null && !labelReadOnly){
d842 1
a842 2
			boolean labelReadOnly = genLabel.getModelFacet() != null && genLabel.getModelFacet().isReadOnly();
			if (labelReadOnly) {
@


1.24
log
@[160225] bblajer - Respect EStructuralFeature cardinality in commands that create/move/clone elements
@
text
@d38 2
a39 1
			if (myPrimaryLabel == null && !next.isReadOnly()){
d843 2
a844 1
			if (genLabel.isReadOnly()) {
@


1.23
log
@[160205] bblajer - move and clone elements on diagram
@
text
@d481 1
a481 1
							result.append(new Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>StartCommand(requestEx));
d488 1
a488 2
					if (result.getCommandList().size() != 1 || !result.canExecute()) {
						//Cannot create several connections at once.
d535 1
a535 1
							result.append(new Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>Command(requestEx));
d542 1
a542 1
					if (result.getCommandList().size() != 1) {
a1222 1
	String resolvedSemanticElement = "parent.getElement()";
d1371 1
d1389 1
a1389 1
<%@@ include file="linkMultiplicity.jetinc"%>
a1391 1
				GenFeature childFeature = modelFacet.getChildMetaFeature();
d1399 1
a1399 1
<%@@ include file="linkMultiplicity.jetinc"%>
d1405 12
d1435 1
a1435 1
<%@@ include file="linkMultiplicity.jetinc"%>
d1668 1
a1668 1
<%@@ include file="linkMultiplicity.jetinc"%>
d1679 1
a1679 1
<%@@ include file="linkMultiplicity.jetinc"%>
d1683 12
d1714 1
a1714 1
<%@@ include file="linkMultiplicity.jetinc"%>
d1881 13
d1905 12
d2112 1
a2112 1
<%@@ include file="linkMultiplicity.jetinc"%>
d2127 12
a2138 1
<%@@ include file="linkMultiplicity.jetinc"%>
d2151 11
@


1.22
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d17 1
d237 11
d1487 1
a1487 1
					edge.getElement().eContainer(), edge.getElement().eContainmentFeature(), edge.getElement()));
d1493 1
a1493 1
					edge.getElement().eContainer(), edge.getElement().eContainmentFeature(), <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
@


1.21
log
@[156358] bblajer - Diagram overview with Lite runtime
@
text
@d1028 12
d1041 1
a1041 1
			new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight()));
d1999 1
a1999 1
			<%=importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName())%>.decorateView(createdEdge);
@


1.20
log
@[155955] bblajer -  Allow creation of child nodes directly in parent elements
@
text
@d12 2
d37 1
a37 1
			if (myPrimaryLabel == null){
d542 14
d787 1
a787 9
		GenNodeLabel firstEditableLabel = null;
		for (Iterator it = myHelper.getAllInnerLabels(); it.hasNext(); ) {
			GenNodeLabel genLabel = (GenNodeLabel) it.next();
			if (!genLabel.isReadOnly()) {
				firstEditableLabel = genLabel;
				break;
			}
		}
		if (firstEditableLabel != null) {
d791 1
a791 1
			if (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextChild) == <%=importManager.getImportedName(firstEditableLabel.getEditPartQualifiedClassName())%>.VISUAL_ID) {
d1085 3
d1095 15
d2141 176
@


1.19
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d99 4
d199 11
d225 9
a233 1
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.LAYOUT_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy")%>() {
d235 28
d265 16
d290 3
d294 9
d540 7
d564 9
a572 1
		
d581 14
d868 21
a888 1
if (myHelper.hasExternalLabels() || myHelper.hasFixedChildren()) {
d912 9
d946 9
d1088 7
d1114 7
d1129 7
d1170 9
@


1.18
log
@[152859] bblajer - add missing @@generated tags
@
text
@a11 1
importManager.registerInnerClass("LinkDescriptor");	//from linkNotationModelRefresher.jetinc
d179 1
a179 1
public class <%=genNode.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gef.editparts.AbstractGraphicalEditPart")%> implements <%=importManager.getImportedName("org.eclipse.gef.NodeEditPart")%>, IUpdatableEditPart {
d288 1
a288 1
				return new WrappingCommand(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramNode().getDiagram().getElement()), result);
d348 1
a348 1
				return new WrappingCommand(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramNode().getDiagram().getElement()), result);
d355 2
a356 2
				if (request instanceof <%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateConnectionRequestEx) {
					<%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateConnectionRequestEx requestEx = (<%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateConnectionRequestEx) request;
d400 1
a400 1
					<%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> wrappedResult = new WrappingCommand(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramNode().getDiagram().getElement()), result);
d412 2
a413 2
				if (request instanceof <%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateConnectionRequestEx) {
					<%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateConnectionRequestEx requestEx = (<%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateConnectionRequestEx) request;
d454 1
a454 1
					return new WrappingCommand(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramNode().getDiagram().getElement()), result);
d1121 1
a1121 1
			new WrappingCommand(domainModelEditDomain, command).execute();
d1226 1
a1226 1
			result.append(new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReconnectNotationalEdgeSourceCommand")%>(edge, newSource));
d1376 1
a1376 1
		public Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>StartCommand(<%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateConnectionRequestEx requestEx) {
d1610 1
a1610 1
			new WrappingCommand(domainModelEditDomain, command).execute();
d1667 1
a1667 1
			result.append(new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReconnectNotationalEdgeTargetCommand")%>(edge, newTarget));
d1752 1
a1752 1
		public Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>Command(<%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>.CreateConnectionRequestEx requestEx) {
@


1.17
log
@[bblajer] #152854 Allow shape nodes to be placed inside list-layout compartments
@
text
@d1354 3
d1718 3
@


1.16
log
@[bblajer] #152774 Compilable code when EClass has instance class attribute set
@
text
@d870 3
@


1.15
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@d13 3
d17 1
a965 1
	final String _getSemanticElementCode = "getDiagramNode().getElement()";
d1160 1
d1171 1
d1193 1
a1193 1
				String _ownerInstance = "((" + importManager.getImportedName(outgoingClass.getQualifiedInterfaceName()) + ") newSource.getElement())";
d1195 1
d1425 1
d1436 1
d1457 1
a1457 1
			String _ownerInstance = "((" + importManager.getImportedName(outgoingClass.getQualifiedInterfaceName()) + ") source.getElement())";
d1459 1
d1767 1
a1767 1
			createdEdge.setElement(createdDomainElement);
d1769 1
a1769 1
			<%=importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")%>.<%=genLink.getUniqueIdentifier()%>.initializeElement(createdDomainElement);
d1829 1
d1844 1
@


1.14
log
@[bblajer] #149484 Lite Generator: Notation model instances (Edges) should not store domain model element for reference-only links
@
text
@d11 2
d20 2
d63 1
d70 6
d80 1
d86 7
d96 12
d155 8
d200 2
d457 7
d935 7
d948 7
d958 11
@


1.13
log
@#149298 Lite Generator: Make it possible to reroute links
@
text
@a1621 5
%>
			result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
				editingDomain,
				edge, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getView_Element(), newTarget.getElement()));
<%
d1691 1
a1691 1
			createdEdge.setElement(target.getElement());		//XXX: is this correct?
@


1.12
log
@copy of #127491 fix (issue #3) to remove external labels
@
text
@d7 1
a7 1
GenDiagram genDiagram = genNode.getDiagram();
d20 3
a22 1
	
d51 28
d80 5
a84 1
	
d192 3
a194 1
				//XXX: reconnect command
d196 52
d250 3
a252 1
				//XXX: reconnect command
d254 54
d310 1
a310 1
<%if (palette != null) {%>
d364 1
a364 1
<%if (palette != null) {%>
a923 2
<%/*XXX: probably, this should go to a separate jet-template along with GraphicalNodeEditPolicy*/%>
<%if (palette != null) {%>
d932 1
d938 1
a938 1
		createCommandNameInfix = modelFacet.getMetaClass().getName();
d942 1
a942 1
		createCommandNameInfix = metaFeature.getFeatureAccessorName();
d954 330
d1328 4
a1331 4
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		if (containmentFeature == null) {
d1335 1
a1335 1
		} else {
d1342 4
a1345 4
			{
				GenFeature _feature = containmentFeature;
				String _ownerInstance = "container";
				String _exceedsUpperBound = "return false;";
d1349 7
a1355 7
			}
			GenFeature childFeature = modelFacet.getChildMetaFeature();
			if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
				{
					GenFeature _feature = childFeature;
					String _ownerInstance = "container";
					String _exceedsUpperBound = "return false;";
d1359 1
a1360 1
			}
d1371 3
a1373 6
		}
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
%>
			<%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%> domainElement = (<%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%>)source.getElement();
<%
d1376 1
a1376 1
			String _ownerInstance = "domainElement";
d1392 1
a1392 1
	} else {
a1395 2
	}
%>
a1396 2
<%
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
a1397 15
		/**
		 * Finds container element for the new relationship of the specified type.
		 * Default implementation goes up by containment hierarchy starting from
		 * the specified element and returns the first element that is instance of
		 * the specified container class.
		 * 
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> getRelationshipContainer(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element, <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> containerClass) {
			for (; element != null; element = element.eContainer()) {
				if (containerClass.isSuperTypeOf(element.eClass())) {
					return element;
				}
			}
			return null;
d1399 1
a1399 3
<%
	}
%>
d1403 1
d1414 1
d1418 1
a1418 1
		createCommandNameInfix = modelFacet.getMetaClass().getName();
d1422 1
a1422 1
		createCommandNameInfix = metaFeature.getFeatureAccessorName();
d1434 213
d1685 3
a1687 3
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenClass linkClass = modelFacet.getMetaClass();
d1694 1
a1694 1
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
d1698 1
a1698 1
	}
d1703 1
a1703 1
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
d1707 23
a1729 22
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature childFeature = modelFacet.getChildMetaFeature();
		GenFeature targetFeature = modelFacet.getTargetMetaFeature();
		//source/link features seem to be pointing from link to its ends, not vice versa.
		//Anyway, if there is containment feature and it is not opposite to either the source/target, we should add containment, 
		//otherwise we will have problems with saving uncontained EObjects.
		boolean addSource = sourceFeature != null;
		boolean addTarget = targetFeature != null;
		boolean addChild = childFeature != null && childFeature != containmentFeature && !childFeature.isDerived();
		if (containmentFeature != null) {
			if (sourceFeature != null && sourceFeature.getEcoreFeature() instanceof EReference == true) {
				EReference sourceEcoreFeature = (EReference)sourceFeature.getEcoreFeature();
				if (sourceEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					addSource = false;
				}
			}
			if (targetFeature != null && targetFeature.getEcoreFeature() instanceof EReference == true) {
				EReference targetEcoreFeature = (EReference)targetFeature.getEcoreFeature();
				if (targetEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					addTarget = false;
a1730 1
			}
d1740 2
a1741 2
		}
		if (addChild) {
d1746 6
a1751 6
		}
		if (addSource) {
			{
				GenFeature _feature = sourceFeature;
				String _ownerInstance = "createdDomainElement";
				String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
d1755 1
a1755 1
			}
d1760 6
a1765 6
		}
		if (addTarget) {
			{
				GenFeature _feature = targetFeature;
				String _ownerInstance = "createdDomainElement";
				String _exceedsUpperBound = "domainModelAddCommand = null;\nreturn;";
d1769 1
a1769 1
			}
d1774 1
a1774 1
		}
d1778 2
a1779 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d1784 1
a1784 1
	}
d1788 1
a1788 22
<%
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
%>
		/**
		 * Finds container element for the new relationship of the specified type.
		 * Default implementation goes up by containment hierarchy starting from
		 * the specified element and returns the first element that is instance of
		 * the specified container class.
		 * 
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> getRelationshipContainer(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element, <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> containerClass) {
			for (; element != null; element = element.eContainer()) {
				if (containerClass.isSuperTypeOf(element.eClass())) {
					return element;
				}
			}
			return null;
		}
<%
	}
%>
d1840 1
a1840 1
}
@


1.12.2.1
log
@[bblajer] #149484 Lite Generator: Notation model instances (Edges) should not store domain model element for reference-only links
@
text
@d1032 1
a1032 1
			createdEdge.setElement(null);
@


1.12.2.2
log
@[152859] bblajer - Lite Generator: All generated methods should be marked as @@generated
[152854] bblajer - Lite Generator: Allow shape nodes to be placed inside list-layout compartments
@
text
@a673 3
		if (node.getLayoutConstraint() == null) {
			return;
		}
@


1.11
log
@[mgolubev] #147853 Fonts defined in the gmfgraph model should be used by the generated labels
@
text
@d620 19
@


1.10
log
@[bblajer] #147076 Lite generator: Support ParentAssignedViewmap for labels and compartments
@
text
@d5 2
a6 1
GenNode genNode = (GenNode) ((Object[]) argument)[0];
@


1.9
log
@[bblajer] #144412 Allow non-OCL-based FeatureSeqInitializers, constraints and selectors
@
text
@d10 81
d322 9
d399 1
a399 10
	boolean hasFixedChildren = false;
	List innerLabels = new ArrayList(genNode.getLabels().size());
	for (Iterator it = genNode.getLabels().iterator(); it.hasNext(); ) {
		GenNodeLabel genLabel = (GenNodeLabel) it.next();
		if (!(genLabel instanceof GenExternalNodeLabel)) {
			innerLabels.add(genLabel);
		}
	}
	if (!innerLabels.isEmpty()) {
		hasFixedChildren = true;
d406 5
a410 16
		for (Iterator it = innerLabels.iterator(); it.hasNext(); ) {
			GenNodeLabel genLabel = (GenNodeLabel) it.next();
			String labelEditPart = importManager.getImportedName(genLabel.getEditPartQualifiedClassName());
			String labelFigureClassName = null;
			boolean isAccessor;
			if (genLabel.getViewmap() instanceof InnerClassViewmap) {
				labelFigureClassName = ((InnerClassViewmap) genLabel.getViewmap()).getClassName();
				isAccessor = true;
			} else if (genLabel.getViewmap() instanceof FigureViewmap) {
				labelFigureClassName = ((FigureViewmap) genLabel.getViewmap()).getFigureQualifiedClassName();
				isAccessor = false;
			} else {
				// temp hack to make tests pass
				labelFigureClassName = "org.eclipse.draw2d.Label";
				isAccessor = false;
			}
d413 1
a413 5
<%			if (isAccessor) {%>
			((<%=labelEditPart%>) childEditPart).setLabel(((<%=figureQualifiedClassName%>) primaryShape).getFigure<%=labelFigureClassName%>());
<%			} else {%>
			((<%=labelEditPart%>) childEditPart).setLabel(new <%=labelFigureClassName%>());
<%			}%>
d416 39
a454 1
<%		}%>
d457 3
d468 1
a468 1
		for (Iterator it = innerLabels.iterator(); it.hasNext(); ) {
d517 1
a517 1
		for (Iterator it = innerLabels.iterator(); it.hasNext(); ) {
d535 1
a535 12
	}
%>
<%
boolean hasExternalLabels = false;
for (Iterator labels = genNode.getLabels().iterator(); labels.hasNext();) {
	GenNodeLabel label = (GenNodeLabel) labels.next();
	if (label instanceof GenExternalNodeLabel) {
		hasExternalLabels = true;
		break;
	}
}
if (hasExternalLabels) {
d540 7
a546 12
	protected void addChildVisual(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart, int index) {
		if (isExternalLabel(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> labelFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			getExternalLabelsContainer().add(labelFigure);
		} else {
<%	if (hasFixedChildren) {%>
			if (!addFixedChild(childEditPart)) {
				super.addChildVisual(childEditPart, -1);
			}
<%	} else {%>
			super.addChildVisual(childEditPart, -1);
<%	}%>
d548 4
d557 3
a559 7
	protected void removeChildVisual(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
		if (isExternalLabel(childEditPart)) {
			<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> labelFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) childEditPart).getFigure();
			getExternalLabelsContainer().remove(labelFigure);
		} else {
			super.removeChildVisual(childEditPart);
		}
d562 5
d570 1
a570 1
	protected boolean isExternalLabel(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart) {
d572 1
a572 3
	for (Iterator labels = genNode.getLabels().iterator(); labels.hasNext();) {
		GenNodeLabel label = (GenNodeLabel) labels.next();
		if (label instanceof GenExternalNodeLabel) {
d574 4
a577 2
		if (childEditPart instanceof <%=importManager.getImportedName(label.getEditPartQualifiedClassName())%>) {
			return true;
d580 5
d586 1
d589 1
a589 1
		return false;
d595 1
a595 5
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> getExternalLabelsContainer() {
		<%=importManager.getImportedName("org.eclipse.gef.editparts.ScalableFreeformRootEditPart")%> root = (<%=importManager.getImportedName("org.eclipse.gef.editparts.ScalableFreeformRootEditPart")%>) getRoot();
		return root.getLayer(<%=importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName())%>.EXTERNAL_NODE_LABELS_LAYER);
	}

d597 6
a602 9
} else {
	if (hasFixedChildren) {%>

	/**
	 * @@generated
	 */
	protected void addChildVisual(<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> childEditPart, int index) {
		if (!addFixedChild(childEditPart)) {
			super.addChildVisual(childEditPart, -1);
d604 1
d606 5
d613 4
@


1.8
log
@[bblajer] #144180 CCE in generated diagram when trying to direct-edit an element
@
text
@d8 1
a8 1
boolean useFlowLayout = ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genNode);
d223 1
a223 1
		primaryShape = new <%=importManager.getImportedName(figureQualifiedClassName)%>()<%if (useFlowLayout) {%> {
d234 3
a236 1
 		figure.setUseLocalCoordinates(<%=useFlowLayout ? "true" : "false"%>);
d269 1
a269 1
if (!useFlowLayout) {
d681 1
d763 7
d787 7
d853 1
d1026 13
a1038 1
			return source != null && target != null && createdEdge != null && domainModelAddCommand != null && domainModelAddCommand.canExecute();
@


1.7
log
@[bblajer] #143983 Respect link cardinality in commands that start connections
@
text
@d385 6
a390 1
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> labelToEdit = getLabelEditPart((<%=importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest")%>)req);
@


1.6
log
@[bblajer] #143687 impossible to direct-edit any label except the first one
@
text
@d88 1
a88 1
					int matchingVisualIdsCount = 0;
d99 1
d105 1
d109 1
d118 1
a118 1
							matchingVisualIdsCount++;
d125 1
a125 1
					if (matchingVisualIdsCount != 1) {
d127 2
a128 1
						return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
d130 3
a132 5
					<%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> result = new <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%>() {
						//XXX: check multiplicity requirements etc.
					};
					request.setStartCommand(result);
					return result;
d135 1
a135 1
				return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
d649 160
a831 1
<%if (palette != null) {%>
d936 8
d950 8
@


1.5
log
@[bblajer] #138430 Lite Generator: Generated code should make use of emf.transaction API
@
text
@d355 11
d368 1
a368 1
			if (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(nextChild) == <%=importManager.getImportedName(((GenNodeLabel)innerLabels.get(0)).getEditPartQualifiedClassName())%>.VISUAL_ID) {
d372 3
d383 30
a412 3
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> primaryLabel = getPrimaryLabelEditPart();
			if (primaryLabel != null) {
				primaryLabel.performRequest(req);
d415 1
@


1.4
log
@hack no longer needed, cu's name is imported implicitly with importAssistant
@
text
@d143 1
a143 1
					<%=importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand")%>();
d171 1
a171 1
							result.add(new Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>Command(requestEx));
d178 1
a178 1
					if (result.getChildren().length != 1) {
d182 1
a182 1
					return result.unwrap();
d632 1
a632 1
	private static class Create<%=createCommandNameInfix%><%=genLink.getVisualID()%>Command extends <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> {
d663 5
d686 1
a686 1
			<%=importManager.getImportedName("org.eclipse.emf.edit.domain.EditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>.getEditingDomainFor(source.getDiagram().getElement());
d810 6
@


1.3
log
@Made compilable with  #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@a14 2
/*XXX: temporary hack to generate compilable code in tests (where class NodeEditPart extends NodeEditPart is generated otherwise)*/
importManager.registerInnerClass(genNode.getEditPartClassName());
@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d2 1
a2 1
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.ecore.*"
d8 1
a8 1
boolean useFlowLayout = !genNode.isListLayout();
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d24 5
d116 1
a116 1
						case <%=genLink.getVisualID()%>:
d172 1
a172 1
						case <%=genLink.getVisualID()%>:
a351 2
<%@@ include file="../editor/getVisualID.jetinc" %>

d359 1
a359 1
			if (getVisualID(nextChild) == <%=((GenNodeLabel)innerLabels.get(0)).getVisualID()%>) {
@

