head	1.8;
access;
symbols
	v20080910-1520:1.8
	v20070427-0600:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070405-1100:1.6
	v20070403-1500:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070307-0700:1.6
	v20070228-2000:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070103-0300:1.6
	M4_20:1.6
	v20061222-1800:1.6
	v20061214-0000:1.6
	v20061120-1300:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061013-1330:1.4
	v20061005-1700:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060824-1600:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060620-0400:1.3
	v20060616-1400:1.3
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2007.05.03.15.23.43;	author bblajer;	state dead;
branches;
next	1.7;
commitid	4f2e4639fe7e4567;

1.7
date	2007.05.03.14.45.19;	author bblajer;	state Exp;
branches;
next	1.6;
commitid	510b4639f57c4567;

1.6
date	2006.11.16.16.41.34;	author radvorak;	state Exp;
branches;
next	1.5;
commitid	617e455c94bd4567;

1.5
date	2006.10.16.11.20.18;	author radvorak;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.26.17.04.30;	author radvorak;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.16.17.21.16;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.05.21.08.32;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.31.15.54.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Reuse templates from full RT
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.expressions" class="OCLExpressionFactoryGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenExpressionInterpreter genInterpreter = (GenExpressionInterpreter) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenDiagram genDiagram = genInterpreter.getContainer().getEditorGen().getDiagram();
final String factoryClassName = genInterpreter.getClassName();
final String abstractExpressionClass = genInterpreter.getContainer().getAbstractExpressionQualifiedClassName();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

<%
importManager.registerInnerClass("Expression");
importManager.addImport("java.util.Collections");
importManager.addImport("java.util.Iterator");
importManager.addImport("java.util.Map");
importManager.addImport("java.lang.ref.WeakReference");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.emf.ecore.EClassifier");
importManager.addImport("org.eclipse.emf.ecore.EEnum");
importManager.addImport("org.eclipse.emf.ecore.EEnumLiteral");
importManager.addImport("org.eclipse.emf.ecore.ETypedElement");

importManager.addImport("org.eclipse.ocl.Environment");
importManager.addImport("org.eclipse.ocl.EvaluationEnvironment");
importManager.addImport("org.eclipse.ocl.ParserException");
importManager.addImport("org.eclipse.ocl.Query");
importManager.addImport("org.eclipse.ocl.ecore.EcoreFactory");
importManager.addImport("org.eclipse.ocl.ecore.OCL");
importManager.addImport("org.eclipse.ocl.expressions.OCLExpression");
importManager.addImport("org.eclipse.ocl.expressions.OperationCallExp");
importManager.addImport("org.eclipse.ocl.expressions.Variable");
importManager.addImport("org.eclipse.ocl.helper.OCLHelper");
importManager.addImport("org.eclipse.ocl.utilities.AbstractVisitor");
importManager.addImport("org.eclipse.ocl.utilities.PredefinedType");

%>

/**
 * @@generated 
 */
public class <%=factoryClassName%> {

	<%@@ include file="OCLExpressionFactory_additions.jetinc" fail="silent"%>

	/**
	 * @@generated 
	 */
	private <%=factoryClassName%>() {
	}

	/**
	 * @@generated 
	 */	
	public static <%=importManager.getImportedName(abstractExpressionClass)%> getExpression(String body, EClassifier context, Map environment) {		
		return new Expression(body, context, environment);
	}
	
	/**
	 * @@generated 
	 */	
	public static <%=importManager.getImportedName(abstractExpressionClass)%> getExpression(String body, EClassifier context) {		
		return getExpression(body, context, Collections.EMPTY_MAP);
	}	
	
	/**
	 * @@generated 
	 */	
	private static class Expression extends <%=importManager.getImportedName(abstractExpressionClass)%> {
		/**
		 * @@generated 
		 */		
		private WeakReference queryRef;

		/**
		 * @@generated 
		 */		
		private final OCL oclInstance;

		/**
		 * @@generated 
		 */			
		public Expression(String body, EClassifier context, Map environment) {
			super(body, context);
			oclInstance = OCL.newInstance();
			initCustomEnv(oclInstance.getEnvironment(), environment);
		}

		/**
		 * @@generated 
		 */
		protected Query getQuery() {
			Query oclQuery = null;
			if(this.queryRef != null) {
				oclQuery = (Query)this.queryRef.get();
			}
			if(oclQuery == null) {
				OCLHelper oclHelper = oclInstance.createOCLHelper();
				oclHelper.setContext(context());
				try {
					OCLExpression oclExpression = oclHelper.createQuery(body());
					oclQuery = oclInstance.createQuery(oclExpression);
					this.queryRef = new WeakReference(oclQuery);
					setStatus(IStatus.OK, null, null);
				} catch (ParserException e) {
					setStatus(IStatus.ERROR, e.getMessage(), e);
				}
			}
			return oclQuery;			
		}

		/**
		 * @@generated 
		 */		
		protected Object doEvaluate(Object context, Map env) {
			Query oclQuery = getQuery();					
			if (oclQuery == null) {
				return null;
			}
			EvaluationEnvironment evalEnv = oclQuery.getEvaluationEnvironment();
			// init environment
			for (Iterator it = env.entrySet().iterator(); it.hasNext();) {
				Map.Entry nextEntry = (Map.Entry) it.next();
				evalEnv.replace((String)nextEntry.getKey(), nextEntry.getValue());					
			}
			
			try {
				initExtentMap(context);
				Object result = oclQuery.evaluate(context);
				return (result != oclInstance.getEnvironment().getOCLStandardLibrary().getOclInvalid()) ? result : null;
			} finally {				
				evalEnv.clear();
				oclQuery.getExtentMap().clear();
			}
		}
		
		/**
		 * @@generated
		 */	
		protected Object performCast(Object value, ETypedElement targetType) {
			if (targetType.getEType() instanceof EEnum) {
				if(value instanceof EEnumLiteral) {
					EEnumLiteral literal = (EEnumLiteral)value;
					return (literal.getInstance() != null) ? literal.getInstance() : literal;
				}
			}
			return super.performCast(value, targetType);
		}

		/**
		 * @@generated
		 */	
		private void initExtentMap(Object context) {
			if (!getStatus().isOK() || context == null) {
				return;
			}
			final Query queryToInit = getQuery();
			final Object extentContext = context;
			
			queryToInit.getExtentMap().clear();
			if (queryToInit.queryText() != null && queryToInit.queryText().indexOf(PredefinedType.ALL_INSTANCES_NAME) >= 0) {
				AbstractVisitor visitior = new AbstractVisitor() {
					private boolean usesAllInstances  = false;
					
					public Object visitOperationCallExp(OperationCallExp oc) {
						if(!usesAllInstances) {
							usesAllInstances = PredefinedType.ALL_INSTANCES == oc.getOperationCode();
							if(usesAllInstances) {
								queryToInit.getExtentMap().putAll(oclInstance.getEvaluationEnvironment().createExtentMap(extentContext));
							}
						}
						return super.visitOperationCallExp(oc);
					}
				};
				queryToInit.getExpression().accept(visitior);
			}
		}

		/**
		 * @@generated 
		 */		
		private static void initCustomEnv(Environment ecoreEnv, Map environment) {
			for (Iterator it = environment.keySet().iterator(); it.hasNext();) {
						String varName = (String)it.next();
				EClassifier varType = (EClassifier) environment.get(varName);
				ecoreEnv.addElement(varName, createVar(ecoreEnv, varName, varType), false);
				}
		}
		
		/**
		 * @@generated 
		 */		
		private static Variable createVar(Environment ecoreEnv, String name, EClassifier type) {
			Variable var = EcoreFactory.eINSTANCE.createVariable(); // or ecoreEnv.getOCLFactory().createVariable()?
			var.setName(name);
			var.setType(ecoreEnv.getUMLReflection().getOCLType(type));
			return var;
		}		
	}
}
<%importManager.emitSortedImports();%>
@


1.7
log
@eliminate compilation problems in tests
@
text
@@


1.6
log
@[151719] ...ExpressionFactory templates should implement weakref caching of re-parseable expressions
@
text
@d26 14
a39 17
importManager.addImport("org.eclipse.emf.ocl.expressions.ExpressionsFactory");
importManager.addImport("org.eclipse.emf.ocl.expressions.OCLExpression");
importManager.addImport("org.eclipse.emf.ocl.expressions.Variable");
importManager.addImport("org.eclipse.emf.ocl.expressions.OperationCallExp");
importManager.addImport("org.eclipse.emf.ocl.expressions.util.AbstractVisitor");
importManager.addImport("org.eclipse.emf.ocl.utilities.PredefinedType");

importManager.addImport("org.eclipse.emf.ocl.helper.HelperUtil");
importManager.addImport("org.eclipse.emf.ocl.helper.IOCLHelper");
importManager.addImport("org.eclipse.emf.ocl.helper.OCLParsingException");
importManager.addImport("org.eclipse.emf.ocl.parser.EcoreEnvironment");
importManager.addImport("org.eclipse.emf.ocl.parser.EcoreEnvironmentFactory");
importManager.addImport("org.eclipse.emf.ocl.parser.EvaluationEnvironment");
importManager.addImport("org.eclipse.emf.ocl.parser.Environment");
importManager.addImport("org.eclipse.emf.ocl.query.Query");
importManager.addImport("org.eclipse.emf.ocl.query.QueryFactory");
importManager.addImport("org.eclipse.emf.ocl.types.util.Types");
d77 6
d87 3
a89 1
			super(body, context, environment);
d101 1
a101 3
				IOCLHelper oclHelper = (environment().isEmpty()) ? 
						HelperUtil	.createOCLHelper() :
						HelperUtil.createOCLHelper(createCustomEnv(environment()));
d105 1
a105 1
					oclQuery = QueryFactory.eINSTANCE.createQuery(oclExpression);
d108 1
a108 1
				} catch (OCLParsingException e) {
d133 1
a133 1
				return (result != Types.OCL_INVALID) ? result : null;
d136 1
a136 1
				oclQuery.setExtentMap(Collections.EMPTY_MAP);
d163 2
a164 2
			queryToInit.setExtentMap(Collections.EMPTY_MAP);
			if(queryToInit.queryText() != null && queryToInit.queryText().indexOf("allInstances") >= 0) {			
d172 1
a172 1
								queryToInit.setExtentMap(EcoreEnvironmentFactory.ECORE_INSTANCE.createExtentMap(extentContext));
d185 2
a186 6
		private static EcoreEnvironmentFactory createCustomEnv(Map environment) {
			final Map env = environment;
			return new EcoreEnvironmentFactory() {					
				public Environment createClassifierContext(Object context) {
					Environment ecoreEnv = super.createClassifierContext(context);
					for (Iterator it = env.keySet().iterator(); it.hasNext();) {
d188 2
a189 4
						EClassifier varType = (EClassifier)env.get(varName);
						ecoreEnv.addElement(varName, createVar(varName, varType), false);
					}
					return ecoreEnv;
a190 1
			};				
d196 2
a197 2
		private static Variable createVar(String name, EClassifier type) {
			Variable var = ExpressionsFactory.eINSTANCE.createVariable();
d199 1
a199 1
			var.setType(EcoreEnvironment.getOCLType(type));
@


1.5
log
@[161027] mgolubev - Increase extensibility of OCL-related generated code in the ExpressionFactory and ElementTypes.Initializers
@
text
@d20 1
d79 1
a79 1
		private Query query;
d85 25
a109 11
			
			IOCLHelper oclHelper = (environment.isEmpty()) ? 
					HelperUtil.createOCLHelper() :
					HelperUtil.createOCLHelper(createCustomEnv(environment));
			oclHelper.setContext(context());
			try {
				OCLExpression oclExpression = oclHelper.createQuery(body);
				this.query = QueryFactory.eINSTANCE.createQuery(oclExpression);
			} catch (OCLParsingException e) {
				setStatus(IStatus.ERROR, e.getMessage(), e);
			}			
d116 2
a117 1
			if (query == null) {
d120 1
a120 1
			EvaluationEnvironment evalEnv = query.getEvaluationEnvironment();
d129 1
a129 1
				Object result = query.evaluate(context);
d133 1
a133 1
				query.setExtentMap(Collections.EMPTY_MAP);
d154 1
a154 1
			if(query == null || context == null) {
d157 1
a157 1
			final Query queryToInit = query;
@


1.4
log
@#148676 Template for OCLExpressionFactory should not define environment variables as implicit
@
text
@d48 3
@


1.3
log
@#146053 OCLExpressionFactory.javajet should ensure that extentMap is available if .allInstances() is used
@
text
@d171 1
a171 1
						ecoreEnv.addElement(varName, createVar(varName, varType), true);
@


1.2
log
@#145337 Move element initializer's assignment of expressions to features into expression templates
@
text
@d28 4
d109 1
d112 1
a112 1
			} finally {
d114 1
d132 29
@


1.1
log
@[bblajer] #144412 Allow non-OCL-based FeatureSeqInitializers, constraints and selectors
@
text
@d22 3
d113 13
@

