head	1.4;
access;
symbols
	v20080910-1520:1.4
	v20070915-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070427-0600:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2
	v20061005-1700:1.2
	M1_20:1.2
	v20060904-1500:1.2
	v20060824-1600:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.1
	v20060531-1730:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.07.04.13.22.26;	author bblajer;	state dead;
branches;
next	1.3;
commitid	405d468b9f0f4567;

1.3
date	2007.05.03.14.45.19;	author bblajer;	state Exp;
branches
	1.3.2.1;
next	1.2;
commitid	510b4639f57c4567;

1.2
date	2006.06.14.13.56.41;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.31.15.54.57;	author atikhomirov;	state Exp;
branches;
next	;

1.3.2.1
date	2007.09.17.16.02.13;	author bblajer;	state dead;
branches;
next	;
commitid	7b9846eea5004567;


desc
@@


1.4
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@<%
{ /*begin the scope*/
/*
ValueExpression __genValueExpression;
GenClassifier __genExprContext
java.util.Map __exprEnvVariables
String __outEnvVarName;
String __javaOperationContainer;
*/
	org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
	String __ctxEClassifierAccess = importManager.getImportedName(__genExprContext.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + __genExprContext.getClassifierAccessorName()+"()";
	String __importedAbstractClass = __genExprProvider != null ? importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName()) : null;

	if(__genExprProvider == null || __importedAbstractClass == null) {
%>null<%
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {
		org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter interpreter = (org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter)__genExprProvider;
		String __expressionAccessor = interpreter.getExpressionAccessor(__genValueExpression);
		String providerImportedClass = importManager.getImportedName(interpreter.getQualifiedClassName());
		if(!__exprEnvVariables.isEmpty()) {			
%><%=providerImportedClass%>.<%=__expressionAccessor%>(<%=__genValueExpression.getBodyString()%>, //$NON-NLS-1$
	<%=__ctxEClassifierAccess%>, <%=__outEnvVarName%>)<%
		} else { 		
%><%=providerImportedClass%>.<%=__expressionAccessor%>(<%=__genValueExpression.getBodyString()%>, //$NON-NLS-1$
	<%=__ctxEClassifierAccess%>)<%
		}
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) { /*inlined java expression adapter*/
		String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
		String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);	

%>new <%=__importedAbstractClass%>(<%=__ctxEClassifierAccess%>) {
	protected Object doEvaluate(Object context, <%=importManager.getImportedName("java.util.Map")%> env) {	
		<%=importManager.getImportedName(evalCtxQualifiedName)%> self = (<%=importManager.getImportedName(evalCtxQualifiedName)%>)context;
<%	
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
			String nextVariableName = (String)envVarIt.next();
			org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
			String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);
%>	
		<%=importManager.getImportedName(qualifiedTypeName)%> <%=nextVariableName%> = (<%=importManager.getImportedName(qualifiedTypeName)%>)env.get("<%=nextVariableName%>"); //$NON-NLS-1$
<%		} %>
		return <%
		if(__javaOperationContainer != null && __javaOperationContainer.length() > 0) { %><%=__javaOperationContainer%>.<%
		} %><%=__exprJavaOperName%>(self<%
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();){%>, <%=(String)envVarIt.next()%><%}%>);
	}
}
<%}%>
<%} /*end of scope*/%>
@


1.3
log
@eliminate compilation problems in tests
@
text
@@


1.3.2.1
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator)
@
text
@@


1.2
log
@#140401 Escape all String literals in the generated code according to java rules, escape strings used  in plugins.xml
@
text
@a16 1
		String __bodyLiteral = org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(__genValueExpression.getBody());
d21 1
a21 1
%><%=providerImportedClass%>.<%=__expressionAccessor%>(<%=__bodyLiteral%>, //$NON-NLS-1$
d24 1
a24 1
%><%=providerImportedClass%>.<%=__expressionAccessor%>(<%=__bodyLiteral%>, //$NON-NLS-1$
@


1.1
log
@[bblajer] #144412 Allow non-OCL-based FeatureSeqInitializers, constraints and selectors
@
text
@d17 1
d22 1
a22 1
%><%=providerImportedClass%>.<%=__expressionAccessor%>("<%=__genValueExpression.getBody()%>", //$NON-NLS-1$
d25 1
a25 1
%><%=providerImportedClass%>.<%=__expressionAccessor%>("<%=__genValueExpression.getBody()%>", //$NON-NLS-1$
@

