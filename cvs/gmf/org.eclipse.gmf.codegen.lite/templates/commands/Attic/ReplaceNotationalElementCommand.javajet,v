head	1.4;
access;
symbols
	v20080910-1520:1.4
	v20061005-1700:1.2
	v20060824-1600:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.09.01.16.14.08;	author atikhomirov;	state dead;
branches;
next	1.3;

1.3
date	2006.08.02.10.43.51;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.25.15.32.29;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.19.19.14.13;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.commands" class="ReplaceNotationalElementCommandGenerator"
	imports="org.eclipse.gmf.common.codegen.*"%>

<%
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>

<%
importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class ReplaceNotationalElementCommand extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
	/**
	 * @@generated
	 */
	private final CreateNotationalElementCommand createCommand;
	/**
	 * @@generated
	 */
	private final RemoveNotationalElementCommand removeCommand;
	/**
	 * @@generated
	 */
	private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> obsoleteView;

	/**
	 * @@generated
	 */
	public ReplaceNotationalElementCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parentView, CreateNotationalElementCommand createCommand, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> obsoleteView) {
		this.createCommand = createCommand;
		this.obsoleteView = obsoleteView;
		this.removeCommand = obsoleteView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> ? new RemoveNotationalEdgeCommand(parentView, obsoleteView) : new RemoveNotationalElementCommand(parentView, obsoleteView);
	}

	/**
	 * @@generated
	 */
	public boolean canExecute() {
		return createCommand != null && createCommand.canExecute() && removeCommand != null && removeCommand.canExecute();
	}

	/**
	 * @@generated
	 */
	public boolean canUndo() {
		return createCommand != null && createCommand.canUndo() && removeCommand != null && removeCommand.canUndo();
	}

	/**
	 * @@generated
	 */
	public void execute() {
		createCommand.execute();
		removeCommand.execute();
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> createdView = createCommand.getCreatedView();
//		createdView.getSourceEdges().addAll(obsoleteView.getSourceEdges());
//		createdView.getTargetEdges().addAll(obsoleteView.getTargetEdges());
		if (createdView != null && obsoleteView != null && createdView.eClass().equals(obsoleteView.eClass())) {
			if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getNode().equals(createdView.eClass())) {
				copy(obsoleteView, createdView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getNode_LayoutConstraint());
			} else if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getEdge().equals(createdView.eClass())) {
				copy(obsoleteView, createdView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getEdge_Bendpoints());
			}
		}
	}

	/**
	 * @@generated
	 */
	private void copy(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> source, <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> target, <%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> feature) {
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> oldValue = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) source.eGet(feature);
		if (oldValue == null) {
			return;	//nothing to copy
		}
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> newValue = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) target.eGet(feature);
		if (newValue != null && !newValue.eClass().equals(oldValue.eClass())) {
			return;	//incompatible instances.
		}
		target.eSet(feature, oldValue);
	}

	/**
	 * @@generated
	 */
	public void undo() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> createdView = createCommand.getCreatedView();
		if (createdView != null && obsoleteView != null && createdView.eClass().equals(obsoleteView.eClass())) {
			if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getNode().equals(createdView.eClass())) {
				copy(obsoleteView, createdView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getNode_LayoutConstraint());
			} else if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getEdge().equals(createdView.eClass())) {
				copy(obsoleteView, createdView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getEdge_Bendpoints());
			}
		}
//		obsoleteView.getSourceEdges().addAll(createdView.getSourceEdges());
//		obsoleteView.getTargetEdges().addAll(createdView.getTargetEdges());
		removeCommand.undo();
		createCommand.undo();
	}

	/**
	 * @@generated
	 */
	public void redo() {
		execute();
	}
}
<%importManager.emitSortedImports();%>
@


1.3
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@@


1.2
log
@[bblajer] #146009 [Lite] Changes in the underlying domain model should be automatically reflected in the notational model
@
text
@d36 1
a36 1
		this.removeCommand = new RemoveNotationalElementCommand(parentView, obsoleteView);
d60 8
a67 9
		createdView.getSourceEdges().addAll(obsoleteView.getSourceEdges());
		createdView.getTargetEdges().addAll(obsoleteView.getTargetEdges());
		if (createdView == null || obsoleteView == null || !createdView.eClass().equals(obsoleteView.eClass())) {
			return;
		}
		if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getNode().equals(createdView.eClass())) {
			copy(obsoleteView, createdView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getNode_LayoutConstraint());
		} else if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getEdge().equals(createdView.eClass())) {
			copy(obsoleteView, createdView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getEdge_Bendpoints());
d91 9
a99 2
		obsoleteView.getSourceEdges().addAll(createdView.getSourceEdges());
		obsoleteView.getTargetEdges().addAll(createdView.getTargetEdges());
@


1.1
log
@#146009 Lite Generator: Changes in the underlying domain model should be automatically reflected in the notational model
1,2,3 Parts commited.
@
text
@d60 2
d91 3
@

