head	1.2;
access;
symbols
	v20080910-1520:1.2
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061214-0000:1.1;
locks; strict;
comment	@# @;


1.2
date	2007.02.14.13.42.30;	author bblajer;	state dead;
branches;
next	1.1;
commitid	75e045d311c54567;

1.1
date	2006.12.12.12.54.41;	author bblajer;	state Exp;
branches;
next	;
commitid	355b457ea6574567;


desc
@@


1.2
log
@Commands rewritten with xPand;
[173999]: Non-resizable figures (for the Lite version).
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.commands" class="CreateNodeCommandGenerator"
    imports="org.eclipse.emf.common.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.common.codegen.*"%>
<%
GenNode genNode = (GenNode) ((Object[]) argument)[0];
GenDiagram genDiagram = genNode.getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%
importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);
%>
<%@@ include file="../common/featureGetAccessor.jetinc"%>

/**
 * @@generated
 */
public class <%=importManager.getCompilationUnitName()%> extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
	/**
	 * @@generated
	 */
	private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand")%> notationAddCommand;

	/**
	 * @@generated
	 */
	private final <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> domainModelAddCommand;

	/**
	 * @@generated
	 */
	public <%=importManager.getCompilationUnitName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parent, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%> request) {
		this(parent, request, null);
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getCompilationUnitName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parent, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateRequestEx")%> request, <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> constraint) {
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(parent.getDiagram().getElement());
<%
	if (genNode.getDomainMetaClass().isMapEntry()) {
	/*Workaround for Ecore example: map entries cannot be created using factory, only using reflective EFactory.create() method*/
%>
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> createdDomainElement = <%=importManager.getImportedName(genNode.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create(
			<%=importManager.getImportedName(genNode.getDomainMetaClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=genNode.getDomainMetaClass().getClassifierAccessorName()%>());
<%
	} else {
%>
		<%=importManager.getImportedName(genNode.getDomainMetaClass().getQualifiedInterfaceName())%> createdDomainElement = <%=importManager.getImportedName(genNode.getDomainMetaClass().getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=genNode.getDomainMetaClass().getClassifierAccessorName()%>();
<%
	}
%>
		<%/*XXX: Class name DomainElementInitializer should be user-customizable*/%>
		<%=importManager.getImportedName(genDiagram.getNotationViewFactoriesPackageName() + ".DomainElementInitializer")%>.<%=genNode.getUniqueIdentifier()%>.initializeElement(<%if (genNode.getDomainMetaClass().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>createdDomainElement);
<%
	TypeModelFacet facet = genNode.getModelFacet();
	GenFeature childFeature = facet.getChildMetaFeature();
	GenFeature containmentFeature = facet.getContainmentMetaFeature();
	{
		GenFeature _feature = containmentFeature;
		String _ownerInstance = "parent.getElement()";
		String _exceedsUpperBound = "this.domainModelAddCommand = null;this.notationAddCommand = null;return;";
		GenClass _ownerGenClass = null;
%>
<%@@ include file="../common/featureMultiplicity.jetinc"%>
<%
	}
	if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
		GenFeature _feature = childFeature;
		String _ownerInstance = "parent.getElement()";
		String _exceedsUpperBound = "this.domainModelAddCommand = null;this.notationAddCommand = null;return;";
		GenClass _ownerGenClass = null;
%>
<%@@ include file="../common/featureMultiplicity.jetinc"%>
		<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> compoundCommand = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
		compoundCommand.append(<%=importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, parent.getElement(), 
			<%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), createdDomainElement));
		compoundCommand.append(<%=importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, parent.getElement(), 
			<%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(), createdDomainElement));
		this.domainModelAddCommand = compoundCommand;
<%
	} else {
%>
		this.domainModelAddCommand = <%=importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(domainModelEditDomain, parent.getElement(), 
			<%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), createdDomainElement);
<%
	}
%>
<%
	int defaultWidth = 40;
	int defaultHeight = 40;
	DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) genNode.getViewmap().find(DefaultSizeAttributes.class);
	if (defSizeAttrs != null) {
		defaultWidth = defSizeAttrs.getWidth();
		defaultHeight = defSizeAttrs.getHeight();
	}
%>
		if (constraint != null) {
			constraint = constraint.union(new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(<%=defaultWidth%>, <%=defaultHeight%>));
		}
		this.notationAddCommand = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand")%>(parent, <%if (genNode.getDomainMetaClass().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>createdDomainElement, 
			constraint, <%=importManager.getImportedName(genNode.getNotationViewFactoryQualifiedClassName())%>.INSTANCE);
		request.setCreatedObject(notationAddCommand.getCreatedView());
	}

	/**
	 * @@generated
	 */
	public boolean canExecute() {
		return domainModelAddCommand != null
				&& domainModelAddCommand.canExecute() && notationAddCommand != null && notationAddCommand.canExecute();
	}

	/**
	 * @@generated
	 */
	public boolean canUndo() {
		return domainModelAddCommand != null
				&& domainModelAddCommand.canUndo() && notationAddCommand != null && notationAddCommand.canUndo();
	}

	/**
	 * @@generated
	 */
	public void execute() {
		domainModelAddCommand.execute();
		notationAddCommand.execute();
	}

	/**
	 * @@generated
	 */
	public void undo() {
		notationAddCommand.undo();
		domainModelAddCommand.undo();
	}
	/**
	 * @@generated
	 */
	public void redo() {
		execute();
	}
}
<%importManager.emitSortedImports();%>
@


1.1
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@@

