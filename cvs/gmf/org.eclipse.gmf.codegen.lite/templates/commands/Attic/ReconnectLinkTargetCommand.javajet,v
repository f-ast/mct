head	1.2;
access;
symbols
	v20080910-1520:1.2
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061214-0000:1.1;
locks; strict;
comment	@# @;


1.2
date	2007.02.14.13.42.30;	author bblajer;	state dead;
branches;
next	1.1;
commitid	75e045d311c54567;

1.1
date	2006.12.12.12.54.40;	author bblajer;	state Exp;
branches;
next	;
commitid	355b457ea6574567;


desc
@@


1.2
log
@Commands rewritten with xPand;
[173999]: Non-resizable figures (for the Lite version).
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.commands" class="ReconnectLinkTargetCommandGenerator"
    imports="org.eclipse.emf.common.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.ecore.* org.eclipse.gmf.common.codegen.*"%>
<%
GenLink genLink = (GenLink) ((Object[]) argument)[0];
GenDiagram genDiagram = genLink.getDiagram();
GenLinkConstraints linkConstraints = genLink.getCreationConstraints();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%
importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);
%>
<%@@ include file="../common/featureGetAccessor.jetinc"%>

/**
 * @@generated
 */
public class <%=importManager.getCompilationUnitName()%> extends <%=importManager.getImportedName("org.eclipse.emf.common.command.CommandWrapper")%> {
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge;
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> newTarget;
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> oldTarget;
	/**
	 * @@generated
	 */
	public <%=importManager.getCompilationUnitName()%>(<%=importManager.getImportedName("org.eclipse.gef.requests.ReconnectRequest")%> request) {
		this((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>)request.getConnectionEditPart().getModel(), (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)request.getTarget().getModel());
	}
	/**
	 * @@generated
	 */
	public <%=importManager.getCompilationUnitName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> newTarget) {
		this.edge = edge;
		this.newTarget = newTarget;
		this.oldTarget = edge.getTarget();
	}
	/**
	 * @@generated
	 */
	protected boolean prepare() {
<%
	if (linkConstraints != null) {
%>
		final boolean[] resultHolder = new boolean[1];
		//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion.
		final <%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(oldTarget.getDiagram().getElement());
		<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> command = new <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%>() {
			private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);
			public boolean canExecute() {
				return deleteCommand.canExecute();
			}
			public boolean canUndo() {
				return true;
			}
			public void redo() {
			}
			public void undo() {
			}
			public void execute() {
				deleteCommand.execute();
				try {
					resultHolder[0] = canReconnect();
				} finally {
					deleteCommand.undo();
				}
			}
		};
		if (!command.canExecute()) {
			return false;
		}
		new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(domainModelEditDomain, command).execute();
		if (!resultHolder[0]) {
			return false;
		}
		return super.prepare();
<%
	} else {
%>
		if (!canReconnect()) {
			return false;
		}
		return super.prepare();
<%
	}
%>
	}

	/**
	 * @@generated
	 */
	private boolean canReconnect() {
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			//Need to check the eOpposite() of the target feature
			GenFeature targetFeature = modelFacet.getTargetMetaFeature();
			GenFeature targetReverseFeature = targetFeature == null ? null : targetFeature.getReverse();
			if (targetReverseFeature != null && !targetReverseFeature.isDerived()) {
				GenFeature _feature = targetReverseFeature;
				String _ownerInstance = "newTarget.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;
%>
<%@@ include file="../common/featureMultiplicity.jetinc"%>
<%
			}
{
	String _source = "edge.getSource().getElement()";
	String _target = "newTarget.getElement()";
%>
<%@@ include file="../common/linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
		return true;
<%
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			//Need to check eOpposite() of the metaFeature
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			GenFeature reverseMetaFeature = metaFeature == null ? null : metaFeature.getReverse();
			if (reverseMetaFeature != null && !reverseMetaFeature.isDerived()) {
				GenFeature _feature = reverseMetaFeature;
				String _ownerInstance = "newTarget.getElement()";
				String _exceedsUpperBound = "return false;";
				GenClass _ownerGenClass = null;
%>
<%@@ include file="../common/featureMultiplicity.jetinc"%>
<%
			}
{
	String _source = "edge.getSource().getElement()";
	String _target = "newTarget.getElement()";
%>
<%@@ include file="../common/linkConstraints.jetinc"%>
<%
}	//local declarations for linkConstraints.jetinc
%>
		return true;
<%
		} else {
%>
		return false;
<%
		}
%>
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> createCommand() {
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(oldTarget.getDiagram().getElement());
		<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
		result.append(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ReconnectNotationalEdgeTargetCommand")%>(edge, newTarget));
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature targetFeature = modelFacet.getTargetMetaFeature();
			if (targetFeature.getEcoreFeature().isMany()) {
%>
		result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
			editingDomain,
			edge.getElement(), <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(),
			oldTarget.getElement()));
		result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand")%>.create(
			editingDomain,
			edge.getElement(), <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(),
			newTarget.getElement()));
<%
			} else {
%>
		result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
			editingDomain,
			edge.getElement(), <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(),
			newTarget.getElement()));
<%
			}
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
			if (metaFeature.getEcoreFeature().isMany()) {
%>
		result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
			editingDomain,
			edge.getSource().getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), oldTarget.getElement()));
		result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand")%>.create(
			editingDomain,
			edge.getSource().getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), newTarget.getElement()));
<%
			} else {
%>
		result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
			editingDomain,
			edge.getSource().getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), newTarget.getElement()));
<%
			}
		}
%>
		return result;
	}

<%
	if (linkConstraints != null) {
		String _edge = "edge";
%>
	/**
	 * @@generated
	 */
<%@@ include file="../parts/createDomainModelRemoveCommandForLink.jetinc"%>
<%
	}
%>
}
<%importManager.emitSortedImports();%>
@


1.1
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@@

