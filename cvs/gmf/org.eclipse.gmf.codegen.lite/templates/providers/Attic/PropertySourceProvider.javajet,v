head	1.4;
access;
symbols
	v20080910-1520:1.4
	v20061005-1700:1.2.2.1
	v20060824-1600:1.2.2.1
	v20060713-1700:1.2.2.1
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.09.01.16.14.08;	author atikhomirov;	state dead;
branches;
next	1.3;

1.3
date	2006.07.04.15.44.10;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.49;	author atikhomirov;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;

1.2.2.1
date	2006.07.04.15.54.41;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.providers"  class="PropertySourceProviderGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%
importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class <%=genDiagram.getPropertyProviderClassName()%> implements <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySourceProvider")%> {
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider")%> adapterFactoryContentProvider;

	/**
	 * @@generated
	 */
	public <%=genDiagram.getPropertyProviderClassName()%>(<%=importManager.getImportedName("org.eclipse.emf.common.notify.AdapterFactory")%> domainAdapterFactory) {
		adapterFactoryContentProvider = new <%=importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider")%>(domainAdapterFactory);
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%> getPropertySource(Object object) {
		if (object instanceof <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%>) {
			return (<%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%>) object;
		}
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = getNotationElement(object);
		if (view == null) {
			return adapterFactoryContentProvider.getPropertySource(object);
		}
		//XXX: compose with view properties
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> domainElement = view.getElement();
		if (domainElement == null && view instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) view;
			domainElement = edge.getTarget().getElement();
		}
		return adapterFactoryContentProvider.getPropertySource(domainElement);
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> getNotationElement(Object object) {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = null;
		if (object instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
			view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) object;
		} else if (object instanceof <%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) {
			<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> editPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) object;
			if (editPart.getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
				view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) editPart.getModel();
			}
		}
		if (view != null && "<%=genDiagram.getEditorGen().getModelID()%>".equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(view))) {
			return view;
		}
		return null;
	}
}
<%importManager.emitSortedImports();%>
@


1.3
log
@[bblajer] #149484 Lite Generator: Notation model instances (Edges) should not store domain model element for reference-only links
@
text
@@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d42 4
@


1.2.2.1
log
@[bblajer] #149484 Lite Generator: Notation model instances (Edges) should not store domain model element for reference-only links
@
text
@a41 4
		if (domainElement == null && view instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> edge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) view;
			domainElement = edge.getTarget().getElement();
		}
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d58 1
a58 1
		if (view != null && "<%=genDiagram.getEditorGen().getModelID()%>".equals(getModelID(view))) {
a62 2

<%@@ include file="../editor/getModelID.jetinc" %>
@

