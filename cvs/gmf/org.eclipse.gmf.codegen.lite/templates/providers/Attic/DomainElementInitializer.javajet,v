head	1.8;
access;
symbols
	v20080910-1520:1.8
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070520-1200:1.7
	v20070518-1300:1.7
	v20070504-1000:1.7
	v20070427-0600:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070405-1100:1.7
	v20070403-1500:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070307-0700:1.7
	v20070228-2000:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070103-0300:1.6
	M4_20:1.6
	v20061222-1800:1.6
	v20061214-0000:1.6
	v20061120-1300:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061013-1330:1.6
	v20061005-1700:1.3.2.1
	M1_20:1.4
	v20060904-1500:1.4
	v20060824-1600:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060620-0400:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.2
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2007.06.15.09.53.04;	author bblajer;	state dead;
branches;
next	1.7;
commitid	2a0c4672617d4567;

1.7
date	2007.01.25.16.57.56;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	274845b8e1934567;

1.6
date	2006.10.12.10.23.44;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.05.12.26.14;	author radvorak;	state Exp;
branches;
next	1.4;

1.4
date	2006.08.09.14.34.53;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.05.21.08.32;	author radvorak;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2006.05.31.15.54.57;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;

1.3.2.1
date	2006.08.24.12.09.01;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[192168]: Convert /providers/DomainElementInitializer.javajet lite template to Xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.providers"  class="DomainElementInitializerGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* java.util.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
<%
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%
final String javaExprContainer = "JavaInitializers";
importManager.registerInnerClass(javaExprContainer);
final String javaConstraintsContainer = "JavaConstraints";
importManager.registerInnerClass(javaExprContainer);
importManager.registerInnerClass(genDiagram.getLinkCreationConstraintsClassName());

importManager.emitPackageStatement(stringBuffer);

importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class DomainElementInitializer <%/*XXX: class name should be customizable!*/%>{
	/**
	 * @@generated
	 */
	public static interface IElementInitializer {
		/**
		 * @@generated
		 */
		public void initializeElement(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> instance);
	}

<%
{	//start local block that separates initializers and constraints
boolean needsNullInitializer = false;
boolean needsObjectInitializer = false;
final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
final LinkedHashSet<GenFeatureValueSpec> javaInitializers = new LinkedHashSet<GenFeatureValueSpec>();
final Map __exprEnvVariables = Collections.EMPTY_MAP;
final String __javaOperationContainer = javaExprContainer; // place java expression methods here
for (Map.Entry<TypeModelFacet, GenCommonBase> next : genDiagram.getTypeModelFacet2GenBaseMap().entrySet()) {
	String id = next.getValue().getUniqueIdentifier();
	TypeModelFacet modelFacet = next.getKey();

	GenElementInitializer elementInitializer = modelFacet.getModelElementInitializer();
	if (elementInitializer instanceof GenFeatureSeqInitializer == false || expressionProviders == null) {
		if (!needsNullInitializer) {
			needsNullInitializer = true;
%>
	/**
	 * @@generated
	 */
	private static IElementInitializer NULL_INITIALIZER = new IElementInitializer() {
		public void initializeElement(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> instance) {
		}
	};

<%
		}
%>
	/**
	 * @@generated
	 */
	public static IElementInitializer <%=id%> = NULL_INITIALIZER;
<%
		continue;
	}
	needsObjectInitializer = true;
	GenFeatureSeqInitializer rootFtSeqInitializer = (GenFeatureSeqInitializer)modelFacet.getModelElementInitializer();
	javaInitializers.addAll(rootFtSeqInitializer.getJavaExpressionFeatureInitializers(expressionProviders));
	for(GenFeatureSeqInitializer nextFtSeqInitializer : rootFtSeqInitializer.getAllFeatureSeqInitializers()) {
		boolean isTopLevelObjInit = nextFtSeqInitializer == rootFtSeqInitializer;
		if(isTopLevelObjInit){
%>
		/**
		 * @@generated
		 */
		public static final IElementInitializer <%=nextFtSeqInitializer.getInitializerFieldName(id)%> = new ObjectInitializer(<%=nextFtSeqInitializer.getElementClassAccessor(importManager)%>) {
<%		} else {%>
		ObjectInitializer <%=nextFtSeqInitializer.getInitializerFieldName(id)%>() {
			return new ObjectInitializer(<%=nextFtSeqInitializer.getElementClassAccessor(importManager)%>) {
<%		} %>
		 	protected void init() {				
<%		for(GenFeatureInitializer nextFtInitializer : (List<GenFeatureInitializer>)nextFtSeqInitializer.getInitializers()) {
			String metaFeatureAccessor = nextFtSeqInitializer.getFeatureAccessor(nextFtInitializer, importManager);
			if(nextFtInitializer instanceof GenReferenceNewElementSpec) {
				GenReferenceNewElementSpec newElementSpec = (GenReferenceNewElementSpec)nextFtInitializer;
%>			
				add(createNewElementFeatureInitializer(<%=metaFeatureAccessor%>, new ObjectInitializer[] {
<%				for(GenFeatureSeqInitializer newElemInit : (List<GenFeatureSeqInitializer>)newElementSpec.getNewElementInitializers()) { %>
					<%=newElemInit.getInitializerFieldName(id)%>(), 
<%				} // end of newElementInitializers %>
				}));
<%			} // end of GenReferenceNewElementSpec
			else if(nextFtInitializer instanceof GenFeatureValueSpec) {
				String __outEnvVarName = ""; // no env to setup;
				GenClassifier __genExprContext = nextFtSeqInitializer.getElementClass();
				GenFeatureValueSpec __genValueExpression = (GenFeatureValueSpec)nextFtInitializer;
%>			
				add(createExpressionFeatureInitializer(<%=metaFeatureAccessor%>, <%@@ include file="../expressions/getExpression.jetinc"%>));
<%
			} // end of GenFeatureValueSpec
		} // end of GenFeatureInitializer iteration
%>			}
<%		if(!isTopLevelObjInit) { %>
				}; // <%=nextFtSeqInitializer.getInitializerFieldName(id)%> ObjectInitializer
			}
<%		} // GenFeatureInitializer iteration
	} // All GenFeatureSeqInitializer iteration
%>
		}; // <%=rootFtSeqInitializer.getInitializerFieldName(id)%> ObjectInitializer
<%
}
if (needsObjectInitializer) {
%>
	/** 
	 * @@generated
	 */	
	public static abstract class ObjectInitializer implements IElementInitializer {
		/** 
		 * @@generated
		 */		
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> element;		
		/** 
		 * @@generated
		 */		
		private <%=importManager.getImportedName("java.util.List")%> featureInitializers = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		/** 
		 * @@generated
		 */
		ObjectInitializer(<%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> element) {
			this.element = element;
			init();
		}
		/**
	 	 * @@generated
	 	 */
	 	protected abstract void init();							
		/** 
		 * @@generated
		 */
		protected final FeatureInitializer add(FeatureInitializer initializer) {
			featureInitializers.add(initializer);
			return initializer;
		}
		/** 
		 * @@generated
		 */		
		public void initializeElement(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> instance) {
			for (<%=importManager.getImportedName("java.util.Iterator")%> it = featureInitializers.iterator(); it.hasNext();) {
				FeatureInitializer nextExpr = (FeatureInitializer)it.next();
				try {
					nextExpr.init(instance);
				} catch(RuntimeException e) {
					<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Feature initialization failed", e);	//$NON-NLS-1$
				}
			}
		}
	} // end of ObjectInitializer
	
	/** 
	 * @@generated
	 */
	interface FeatureInitializer {
		/**
		 * @@generated
		 */
		void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> contextInstance);
	}
	
	/**
	 * @@generated
	 */		
	static FeatureInitializer createNewElementFeatureInitializer(<%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> initFeature, ObjectInitializer[] newObjectInitializers) {
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> feature = initFeature;
		final ObjectInitializer[] initializers = newObjectInitializers;
		return new FeatureInitializer() {
			public void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> contextInstance) {
				for (int i = 0; i < initializers.length; i++) {
					<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> newInstance = initializers[i].element.getEPackage().getEFactoryInstance().create(initializers[i].element);
					if(feature.isMany()) {
						((<%=importManager.getImportedName("java.util.Collection")%>)contextInstance.eGet(feature)).add(newInstance);
					} else {
						contextInstance.eSet(feature, newInstance);
					}						
					initializers[i].initializeElement(newInstance);
				}
			}
		};
	}

	/**
	 * @@generated
	 */		
	static FeatureInitializer createExpressionFeatureInitializer(<%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> initFeature, <%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> valueExpression) {
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> feature = initFeature;
		final <%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> expression = valueExpression;
		return new FeatureInitializer() {				
			public void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> contextInstance) {
				expression.assignTo(feature, contextInstance);
			}
		};			
	}
<%
	if(!javaInitializers.isEmpty()) {
%>
		/** 
		 * @@generated
		 */
		static class <%=javaExprContainer%> {
<%
		for(GenFeatureValueSpec __genValueExpression : javaInitializers) {
			GenClassifier __genExprContext = __genValueExpression.getFeatureSeqInitializer().getElementClass();
			GenExpressionProviderBase provider = expressionProviders.getProvider(__genValueExpression);
			if(!(provider instanceof GenJavaExpressionProvider)) continue;
			String __genExprResultType = provider.getQualifiedTypeInstanceClassName(__genValueExpression.getFeature());
%>
<%@@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
		}
%>
		} //<%=javaExprContainer%>
<%	} /* end of javaInitializers */ %>
<%
}
}	//end local block that separates initializers and constraints
%>

<%
final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
if (genDiagram.hasLinkCreationConstraints() && expressionProviders != null) {
	String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
	String importedAbstractExprCls = importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName());
	boolean hasJavaConstraints = false;
%>
	/**
	 * @@generated
	 */
	public static class <%=genDiagram.getLinkCreationConstraintsClassName()%> {
<%
	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLinkConstraints linkConstraints = ((GenLink)it.next()).getCreationConstraints();
		if(linkConstraints == null) continue;
		if(linkConstraints.getSourceEndContextClass() == null || linkConstraints.getTargetEndContextClass() == null) continue;
		hasJavaConstraints |= (linkConstraints.getSourceEnd() != null && expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenJavaExpressionProvider) ||
							(linkConstraints.getTargetEnd() != null && expressionProviders.getProvider(linkConstraints.getTargetEnd()) instanceof GenJavaExpressionProvider);
%>
		/**
		 * @@generated 
		 */
		public static final <%=genDiagram.getLinkCreationConstraintsClassName()%> <%=linkConstraints.getConstraintsInstanceFieldName()%> = create<%=linkConstraints.getConstraintsInstanceFieldName()%>();
<%
	} // end of link iteration
%>

<%
	final String oppositeEndVarName = "oppositeEnd";
	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLinkConstraints linkConstraints = ((GenLink)it.next()).getCreationConstraints();
		if(linkConstraints == null) continue;
		GenClass srcContext = linkConstraints.getSourceEndContextClass();
		GenClass targetContext = linkConstraints.getTargetEndContextClass();
		if(srcContext == null || targetContext == null) continue;
%>
		/**
		 * @@generated 
		 */
		private static <%=genDiagram.getLinkCreationConstraintsClassName()%> create<%=linkConstraints.getConstraintsInstanceFieldName()%>() {
<%
		String __javaOperationContainer = javaConstraintsContainer;
		Map __exprEnvVariables = new java.util.HashMap();
		String __outEnvVarName = "sourceEnv";
		GenClassifier __genExprContext = srcContext;
		ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
		__exprEnvVariables.put(oppositeEndVarName, targetContext); //$NON-NLS-1$

%><%@@ include file="../expressions/initEnv.jetinc"%>
			<%=importedAbstractExprCls%> sourceExpression = <%
		if(linkConstraints.getSourceEnd() != null) {
%><%@@ include file="../expressions/getExpression.jetinc"%><%
		} else %>null<%;%>;
<%
		__outEnvVarName = "targetEnv";
		__genExprContext = targetContext;
		__genValueExpression = linkConstraints.getTargetEnd();			
		__exprEnvVariables.put(oppositeEndVarName, srcContext); //$NON-NLS-1$
%><%@@ include file="../expressions/initEnv.jetinc"%>
			<%=importedAbstractExprCls%> targetExpression = <%
		if(linkConstraints.getTargetEnd() != null) {
%><%@@ include file="../expressions/getExpression.jetinc"%><%
		} else %>null<%;%>;
			return new <%=genDiagram.getLinkCreationConstraintsClassName()%>(sourceExpression, targetExpression);
		}
<%
	} // end of link iteration
%>
		/**
		 * @@generated 
		 */	
		private static final String OPPOSITE_END_VAR = "oppositeEnd"; //$NON-NLS-1$
		/**
		 * @@generated 
		 */	
		private <%=importedAbstractExprCls%> srcEndInv;
		/**
		 * @@generated 
		 */	
		private <%=importedAbstractExprCls%> targetEndInv;
		/**
		 * @@generated 
		 */		
		public <%=genDiagram.getLinkCreationConstraintsClassName()%>(<%=importedAbstractExprCls%> sourceEnd, <%=importedAbstractExprCls%> targetEnd) {
			this.srcEndInv = sourceEnd;			
			this.targetEndInv = targetEnd;			
		}
		
		/**
		 * @@generated 
		 */	
		public boolean canCreateLink(Object source, Object target, boolean isBackDirected) {
			if (source != null) {
				<%=importedAbstractExprCls%> sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;
				if (sourceConstraint != null && !evaluate(sourceConstraint, source, target, false)) {
					return false;
				}
			}
			if (target != null) {
				<%=importedAbstractExprCls%> targetConstraint = isBackDirected ? srcEndInv : targetEndInv;
				if (targetConstraint != null && !evaluate(targetConstraint, target, source, true)) {
					return false;
				}
			}
			return true;
		}
	
		/**
		 * @@generated 
		 */
		private static boolean evaluate(<%=importedAbstractExprCls%> constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {
			<%=importManager.getImportedName("java.util.Map")%> evalEnv = <%=importManager.getImportedName("java.util.Collections")%>.singletonMap(OPPOSITE_END_VAR, oppositeEnd);			
			try {
				Object val = constraint.evaluate(sourceEnd, evalEnv);
				return (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;
			} catch(Exception e) {	
				<%=pluginActivatorClass%>.getInstance().logError("Link constraint evaluation error", e); //$NON-NLS-1$
				return false;
			}
		}
<%
if(hasJavaConstraints) {
%>		
	/**
	 * @@generated
	 */
	private static class <%=javaConstraintsContainer%> {
<%
	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLinkConstraints linkConstraints = ((GenLink)it.next()).getCreationConstraints();
		if(linkConstraints == null) continue;
		GenClass srcContext = linkConstraints.getSourceEndContextClass();
		GenClass targetContext = linkConstraints.getTargetEndContextClass();
		if(srcContext == null || targetContext == null) continue;
		String __genExprResultType = "java.lang.Boolean";
		Map __exprEnvVariables = new java.util.HashMap();
		GenClassifier __genExprContext = srcContext;
		ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
		if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) {				
			__exprEnvVariables.put(oppositeEndVarName, targetContext);
%>
<%@@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
		}
		__genValueExpression = linkConstraints.getTargetEnd();
		if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) {		
			__genExprContext = targetContext;
			__exprEnvVariables.put(oppositeEndVarName, srcContext);
%>
<%@@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
		}
	} /*java constraints iteration*/
%>
	} // <%=javaConstraintsContainer%>
<%
} /* end of hasJavaConstraints */
%>		
	}
<%} /*end of hasLinkCreationConstraints()*/ %>	
}
<%importManager.emitSortedImports();%>
@


1.7
log
@Revriting BaseItemSemanticEditPolicy to xpand
@
text
@@


1.6
log
@[160225] bblajer - Respect EStructuralFeature cardinality in commands that create/move/clone elements
@
text
@d217 1
a217 1
			String __genExprResultType = provider.getQualifiedInstanceClassName(__genValueExpression.getFeature());
@


1.5
log
@#159256 Adapt ElementTypes.javajet with FeatureSeqInitializer complex structure support
@
text
@d330 1
a330 1
				if (targetConstraint != null && !evaluate(targetConstraint, source, target, true)) {
@


1.4
log
@[152859] bblajer - add missing @@generated tags
@
text
@d39 1
a39 1
final Map javaInitializers = new HashMap();
a40 1
final String __outEnvVarName = ""; // no env to setup;
d42 4
a45 14
for (Iterator it = genDiagram.eAllContents(); it.hasNext(); ) {
	Object next = it.next();
	String id = null;
	TypeModelFacet modelFacet = null;
	if (next instanceof GenNode) {
		id = ((GenNode) next).getUniqueIdentifier();
		modelFacet = ((GenNode) next).getModelFacet();
	} else if (next instanceof GenLink && ((GenLink) next).getModelFacet() instanceof TypeLinkModelFacet) {
		id = ((GenLink) next).getUniqueIdentifier();
		modelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
	}
	if (modelFacet == null) {
		continue;
	}
d70 5
a74 1
	GenFeatureSeqInitializer ftInitializer = (GenFeatureSeqInitializer) elementInitializer;
d76 32
a107 17

	/**
	 * @@generated
	 */
	public static IElementInitializer <%=id%> = new ObjectInitializer(new FeatureInitializer[] {
<%
		GenClassifier __genExprContext = ftInitializer.getTypeModelFacet().getMetaClass();
		for(Iterator featInitIt = ftInitializer.getInitializers().iterator(); featInitIt.hasNext();) {		 
			GenFeatureValueSpec __genValueExpression = (GenFeatureValueSpec)featInitIt.next();
			String metaFeatureAccess = importManager.getImportedName(__genValueExpression.getFeatureQualifiedPackageInterfaceName())+".eINSTANCE.get"+__genValueExpression.getFeature().getFeatureAccessorName()+"()"; 
%>
			new FeatureInitializer(
				<%@@ include file="../expressions/getExpression.jetinc"%>,
				<%=metaFeatureAccess%>)<%=featInitIt.hasNext() ? "," : ""%>
<%
			if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider && !expressionProviders.isCopy(__genValueExpression)) {
				javaInitializers.put(__genValueExpression, __genExprContext);
d109 2
a110 1
		} // end of GenFeatureValueSpec iteration
d112 1
a112 1
		});
d117 1
a117 1
	/**
d119 11
a129 3
	 */
	private static class ObjectInitializer implements IElementInitializer {
		/**
d132 4
a135 2
		private FeatureInitializer[] initExpressions;

d137 4
d143 3
a145 2
		ObjectInitializer(FeatureInitializer[] initExpressions) {
			this.initExpressions = initExpressions;
d147 1
a147 2

		/**
d149 1
a149 1
		 */
d151 2
a152 2
			for (int i = 0; i < initExpressions.length; i++) {
				FeatureInitializer nextExpr = initExpressions[i];
d155 1
a155 1
				} catch (RuntimeException e) {
d160 3
a162 3
	}

	/**
d165 1
a165 1
	static class FeatureInitializer {
d169 23
a191 1
		private <%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> sFeature;
d193 11
a203 20
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> expression;		

		/**
		 * @@generated
		 */
		FeatureInitializer(<%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> expression, 
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> sFeature) {
			this.sFeature = sFeature;
			this.expression = expression;
		}

		/** 
		 * @@generated
		 */
		void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> contextInstance) {
			expression.assignTo(sFeature, contextInstance);
		}
d213 2
a214 3
		for(Iterator javaExprIt = javaInitializers.keySet().iterator(); javaExprIt.hasNext();) {
			GenFeatureValueSpec __genValueExpression = (GenFeatureValueSpec)javaExprIt.next();
			GenClassifier __genExprContext = (GenClassifier)javaInitializers.get(__genValueExpression);
@


1.3
log
@#145337 Move element initializer's assignment of expressions to features into expression templates
@
text
@d28 3
@


1.3.2.1
log
@[152859] bblajer - Lite Generator: All generated methods should be marked as @@generated
[152854] bblajer - Lite Generator: Allow shape nodes to be placed inside list-layout compartments
@
text
@a27 3
		/**
		 * @@generated
		 */
@


1.2
log
@[bblajer] #144412 Allow non-OCL-based FeatureSeqInitializers, constraints and selectors
@
text
@d163 1
a163 14
			Object value = expression.evaluate(contextInstance);
			if (sFeature.getEType() instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EEnum")%> && 
				value instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral")%>) {
				value = ((<%=importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral")%>)value).getInstance();
			} else if(sFeature.isMany() && value instanceof <%=importManager.getImportedName("java.util.Collection")%>) {
				<%=importManager.getImportedName("java.util.Collection")%> destCollection = (<%=importManager.getImportedName("java.util.Collection")%>) contextInstance.eGet(sFeature);
				destCollection.clear();
				<%=importManager.getImportedName("java.util.Collection")%> valueCollection = (<%=importManager.getImportedName("java.util.Collection")%>) value;
				for (<%=importManager.getImportedName("java.util.Iterator")%> it = valueCollection.iterator(); it.hasNext();) {
					destCollection.add(it.next());
				}  
				return;
			}
			contextInstance.eSet(sFeature, value);
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* java.util.*"%>
d9 6
d32 1
d34 6
a39 1
boolean needsOCLInitializer = false;
d55 1
a55 1
	if (elementInitializer instanceof GenFeatureSeqInitializer == false) {
d77 1
a77 1
	needsOCLInitializer = true;
d86 8
a93 7
		for(Iterator featInitIt = ftInitializer.getInitializers().iterator(); featInitIt.hasNext();) { 
			GenFeatureValueSpec featureValSpec = (GenFeatureValueSpec)featInitIt.next();%>
			new FeatureInitializer("<%=featureValSpec.getBody()%>", //$NON-NLS-1$
						<%=importManager.getImportedName(ftInitializer.getElementQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=ftInitializer.getElementClassAccessorName()%>(),
						<%=importManager.getImportedName(featureValSpec.getFeatureQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=featureValSpec.getFeature().getFeatureAccessorName()
						%>())<%if (featInitIt.hasNext()) {%>, <%}%>

d95 3
d100 1
a100 1
	});
d103 1
a103 1
if (needsOCLInitializer) {
d127 5
a131 1
				nextExpr.init(instance);
a142 4
		private <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> contextClass;
		/**
		 * @@generated
		 */
d144 1
d148 2
a149 1
		private <%=importManager.getImportedName("java.lang.String")%> expressionBody;
d153 1
a153 6
		private <%=importManager.getImportedName("org.eclipse.emf.ocl.query.Query")%> query;
		/**
		 * @@generated
		 */
		FeatureInitializer(<%=importManager.getImportedName("java.lang.String")%> expression, 
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> context, 
d156 1
a156 2
			this.expressionBody = expression;
			this.contextClass	= context;
d158 2
a159 1
		/**
d163 2
a164 5
			if(this.query == null) {
				this.query = <%=importManager.getImportedName("org.eclipse.emf.ocl.query.QueryFactory")%>.eINSTANCE.createQuery(expressionBody, contextClass);
			}
			Object value = query.evaluate(contextInstance);
			if(sFeature.getEType() instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EEnum")%> && 
d167 8
a174 2
			} else if(value != null && sFeature.isMany()) {
				value = new <%=importManager.getImportedName("org.eclipse.emf.common.util.BasicEList")%>((<%=importManager.getImportedName("java.util.Collection")%>)value);
d180 21
d202 70
d273 92
@

