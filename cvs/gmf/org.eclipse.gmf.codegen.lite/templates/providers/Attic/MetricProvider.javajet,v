head	1.2;
access;
symbols
	v20080910-1520:1.2
	v20070915-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070614-1400:1.1
	v20070608-1300:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070520-1200:1.1
	v20070518-1300:1.1
	v20070504-1000:1.1
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070307-0700:1.1
	v20070228-2000:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1;
locks; strict;
comment	@# @;


1.2
date	2007.07.04.13.22.27;	author bblajer;	state dead;
branches;
next	1.1;
commitid	405d468b9f0f4567;

1.1
date	2007.02.02.17.14.33;	author bblajer;	state Exp;
branches
	1.1.2.1;
next	;
commitid	78d445c371764567;

1.1.2.1
date	2007.09.17.16.02.13;	author bblajer;	state dead;
branches;
next	;
commitid	7b9846eea5004567;


desc
@@


1.2
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.providers" class="MetricProviderGenerator"
    imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%
importManager.emitPackageStatement(stringBuffer);

importManager.addImport("org.eclipse.emf.ecore.EClass");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.ui.IWorkbenchPart");
importManager.addImport("org.eclipse.jface.viewers.ArrayContentProvider");
importManager.addImport("org.eclipse.jface.viewers.ColumnPixelData");
importManager.addImport("org.eclipse.jface.viewers.ColumnWeightData");
importManager.addImport("org.eclipse.jface.viewers.IOpenListener");
importManager.addImport("org.eclipse.jface.viewers.ITableColorProvider");
importManager.addImport("org.eclipse.jface.viewers.ITableLabelProvider");
importManager.addImport("org.eclipse.jface.viewers.LabelProvider");
importManager.addImport("org.eclipse.jface.viewers.OpenEvent");
importManager.addImport("org.eclipse.jface.viewers.TableLayout");
importManager.addImport("org.eclipse.jface.viewers.TableViewer");
importManager.addImport("org.eclipse.jface.viewers.Viewer");
importManager.addImport("org.eclipse.jface.viewers.ViewerSorter");
importManager.addImport("org.eclipse.swt.SWT");
importManager.addImport("org.eclipse.swt.widgets.Composite");
importManager.addImport("org.eclipse.swt.widgets.Table");
importManager.addImport("org.eclipse.swt.widgets.TableColumn");

importManager.registerInnerClass("Metric");
importManager.registerInnerClass("MetricDef");
importManager.registerInnerClass("MetricsAction");
importManager.registerInnerClass("ElementMetrics");
importManager.registerInnerClass("ResultView");

importManager.markImportLocation(stringBuffer);
final String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
%>
/**
 * @@generated
 */
public class <%=genDiagram.getMetricProviderClassName()%> {
	/**
	 * @@generated
	 */
	private static <%=importManager.getImportedName("java.util.HashMap")%> context2MetricsMap;
	/**
	 * @@generated
	 */
	private static <%=importManager.getImportedName("java.util.List")%> metricsRegistry;
	/**
	 * @@generated
	 */	
	private static <%=importManager.getImportedName("java.util.HashMap")%> key2MetricMap;
	/**
	 * @@generated
	 */	
	private static int MAX_VISIBLE_KEY_CHAR_COUNT = 8;

	/**
	 * @@generated
	 */
	public static class MetricsAction extends <%=importManager.getImportedName("org.eclipse.jface.action.Action")%> {
		/**
		 * @@generated
		 */
		public static final String ACTION_KEY = "metricsAction"; //$NON-NLS-1$
		/**
		 * @@generated
		 */
		private IWorkbenchPart myWorkbenchPart;
		/**
		 * @@generated
		 */
		public MetricsAction(IWorkbenchPart workbenchPart) {
			setId(ACTION_KEY);
			setText("Metrics");
			myWorkbenchPart = workbenchPart;
			setEnabled(myWorkbenchPart instanceof <%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>);
		}
		/**
		 * @@generated
		 */
		public void run() {
			<%=importManager.getImportedName("org.eclipse.ui.IViewPart")%> metricsView = null;
			try {
				metricsView = <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(ResultView.VIEW_ID);							
				if(metricsView == null) {
					metricsView = <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(ResultView.VIEW_ID);					
<%
if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {
%>
				} else {
<%
} else {
%>
				}
				if (metricsView != null) {
<%
}
%>
					final <%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%> part = (<%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>) myWorkbenchPart;
					((ResultView)metricsView).setInput(part);
				}
				myWorkbenchPart.getSite().getPage().activate(metricsView);					
			} catch (<%=importManager.getImportedName("org.eclipse.ui.PartInitException")%> e) {
				<%=pluginActivatorClass%>.getInstance().logError("Diagram metric view failure", e); //$NON-NLS-1$
			}			
		}	
	}
	
	/**
	 * @@generated
	 */	
	static <%=importManager.getImportedName("java.util.List")%> calculateMetrics(<%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%> diagramPart) {
		<%=importManager.getImportedName("org.eclipse.gef.GraphicalViewer")%> viewer = (<%=importManager.getImportedName("org.eclipse.gef.GraphicalViewer")%>) diagramPart.getAdapter(<%=importManager.getImportedName("org.eclipse.gef.GraphicalViewer")%>.class);
		final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram = diagramPart.getDiagram();
		if (viewer == null || diagram == null) {
			return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
		}
		final <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService")%> viewService = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.EditPartRegistryBasedViewService")%>(viewer);
		try {
			return (<%=importManager.getImportedName("java.util.List")%>)diagramPart.getEditingDomain().runExclusive(
				new org.eclipse.emf.transaction.RunnableWithResult.Impl() {
					public void run() {
						<%=importManager.getImportedName("java.util.List")%> metrics = 
							calculateMetrics(diagram, new <%=importManager.getImportedName("java.util.ArrayList")%>(50));
						if(diagram.getElement() != null) {
							calculateMetrics(diagram.getElement(), metrics);
						}
						// detach from EObject and bind to viewID
						java.util.HashSet elements = new java.util.HashSet();
						for (java.util.Iterator it = metrics.iterator(); it.hasNext();) {
							ElementMetrics elementMetrics = (ElementMetrics) it.next();
							elements.add(elementMetrics.target);
						}
						for (java.util.Iterator it = metrics.iterator(); it.hasNext();) {
							ElementMetrics elementMetrics = (ElementMetrics) it.next();
							View targetView = elementMetrics.target instanceof View ? (View) elementMetrics.target : viewService.findView(elementMetrics.target);
							if (targetView != null) {
								elementMetrics.target = null; // detach EObject
								elementMetrics.diagramElementID = targetView.eResource().getURIFragment(targetView);
							}
						}
						
						setResult(metrics);
					}
				});
		} catch(InterruptedException e) {
			return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;		
		}		
	}

	/**
	 * @@generated
	 */
	static <%=importManager.getImportedName("java.util.List")%> calculateMetrics(EObject target, <%=importManager.getImportedName("java.util.List")%> metricsList) {
		final EObject root = target;
		<%=importManager.getImportedName("java.util.Iterator")%> it = new <%=importManager.getImportedName("java.util.Iterator")%>() {
			<%=importManager.getImportedName("java.util.Iterator")%> contentsIt = root.eAllContents();
			boolean isInRoot = true;
			public boolean hasNext() {
				return isInRoot || contentsIt.hasNext();
			}
			public Object next() {
				if(isInRoot) {
					isInRoot = false;
					return root;
				}
				return contentsIt.next();
			}
			public void remove() {
				throw new UnsupportedOperationException();
			}
		};
	
		<%=importManager.getImportedName("java.util.ArrayList")%> metricsPerContext = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		while(it.hasNext()) {
			Object nextElement = it.next();
			if(nextElement instanceof EObject) {
				EObject nextEObj = (EObject)nextElement;
				EClass nextTarget = nextEObj.eClass();
				<%=importManager.getImportedName("java.util.Iterator")%> superTypeIt = nextTarget.getEAllSuperTypes().iterator();
				while(nextTarget != null) {
					<%=importManager.getImportedName("java.util.List")%> metricList = getMetricsForTarget(nextTarget);
					if(metricList != null) {
						for (<%=importManager.getImportedName("java.util.Iterator")%> metricIt = metricList.iterator(); metricIt.hasNext(); ) {
							MetricDef nextMetric = (MetricDef) metricIt.next();
							if(nextMetric.appliesTo(nextEObj)) {
								Metric metric = new Metric(nextMetric, nextEObj);
								metricsPerContext.add(metric);
							}
						}
					}
					nextTarget = superTypeIt.hasNext() ? (EClass)superTypeIt.next() : null; 
				}
				
				if(!metricsPerContext.isEmpty()) {
					metricsList.add(new ElementMetrics(nextEObj, 
							(Metric[])metricsPerContext.toArray(new Metric[metricsPerContext.size()])));
					metricsPerContext.clear();				
				}				
			}			
		}
		
		return metricsList;
	}
	
	/**
	 * @@generated
	 */	
	public static class ResultView extends <%=importManager.getImportedName("org.eclipse.ui.part.ViewPart")%> {
		/**
		 * @@generated
		 */
		public static final String VIEW_ID = "<%=genDiagram.getMetricViewID()%>"; //$NON-NLS-1$
		/**
		 * @@generated
		 */ 
		private TableViewer viewer;
<%
if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {
%>
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> editorInput;
<%
} else {
%>
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> diagramURI;
<%
}
%>
		/**
		 * @@generated
		 */	    
	    void setInput(<%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%> diagramPart) {
			<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = diagramPart.getDiagram().eResource();
<%
if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {
%>
			this.editorInput = diagramPart.getEditorInput();
<%
} else {
%>
			this.diagramURI = resource.getURI();
<%
}
%>
			setTitleToolTip(resource.getURI().path());

			<%=importManager.getImportedName("java.util.List")%> metrics = calculateMetrics(diagramPart);
	    	adjustLayout(metrics);
	    	viewer.setInput(metrics);
	    }

		/**
		 * @@generated
		 */	    
	    private void adjustLayout(<%=importManager.getImportedName("java.util.List")%> metricResultList) {
	    	<%=importManager.getImportedName("java.util.Map")%> maxValStrMap = calcMetricMaxValueStrLenMap(metricResultList);
			Table table = viewer.getTable();
			TableLayout layout = new TableLayout();
			
			<%=importManager.getImportedName("org.eclipse.swt.graphics.GC")%> gc = new <%=importManager.getImportedName("org.eclipse.swt.graphics.GC")%>(table);
			gc.setFont(<%=importManager.getImportedName("org.eclipse.jface.resource.JFaceResources")%>.getDialogFont());
			int padding = gc.stringExtent("X").x * 2; //$NON-NLS-1$
			for (int i = 0; i < getMetrics().size(); i++) {
				MetricDef nextMetric = (MetricDef)getMetrics().get(i);
				String valueStr = (String)maxValStrMap.get(nextMetric.key);
				int minWidth = valueStr != null ? gc.stringExtent(valueStr).x + padding : 20;			
				layout.addColumnData(new ColumnPixelData(minWidth, true));
			}
			gc.dispose();
			
			layout.addColumnData(new ColumnWeightData(1, 50, true));
			viewer.getTable().setLayout(layout);
			viewer.getTable().layout(true, true);
	    }

		/**
		 * @@generated
		 */
		public void createPartControl(Composite parent) {
			this.viewer = new TableViewer(parent, SWT.FULL_SELECTION);
			final Table table = viewer.getTable();
			table.setHeaderVisible(true);
			table.setLinesVisible(true);

			for (int i = 0; i < getMetrics().size(); i++) {
				MetricDef nextMetric = ((MetricDef)getMetrics().get(i));
				TableColumn column = new TableColumn(table, SWT.NONE);
				column.setAlignment(SWT.RIGHT);
				column.setMoveable(true);
				column.setText(nextMetric.key);
				column.setToolTipText(nextMetric.getToolTipText());
			}

			TableColumn objectColumn = new TableColumn(table, SWT.NONE);
			objectColumn.setText("Element");
			objectColumn.setToolTipText("Measurement element");

			viewer.setLabelProvider(new Labels());
			viewer.setContentProvider(new ArrayContentProvider());
			viewer.addOpenListener(new IOpenListener() {
				public void open(OpenEvent event) {
					handleOpen(event);
				}
			});

			<%=importManager.getImportedName("org.eclipse.swt.events.SelectionListener")%> headerSelListener = new <%=importManager.getImportedName("org.eclipse.swt.events.SelectionListener")%>() {
				public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {
					table.setSortColumn((TableColumn)e.getSource());
					table.setSortDirection((table.getSortDirection() != SWT.DOWN) ? SWT.DOWN : SWT.UP);
					viewer.refresh();
				}
				public void widgetDefaultSelected(<%=importManager.getImportedName("org.eclipse.swt.events.SelectionEvent")%> e) {
				}
			};
			TableColumn[] columns = viewer.getTable().getColumns();
			for (int i = 0; i < columns.length; i++) {
				columns[i].addSelectionListener(headerSelListener);
			}

			viewer.setSorter(
				new ViewerSorter() {
					public int compare(Viewer viewer, Object e1, Object e2) {
						TableColumn c = table.getSortColumn();
						int result = 0;
						if(c != null) {
							Metric mc1 = ((ElementMetrics)e1).getMetricByKey(c.getText());
							Metric mc2 = ((ElementMetrics)e2).getMetricByKey(c.getText());
							result = (mc1 != null && mc2 != null) ?
								mc1.compareTo(mc2) : (mc1 == null ? -1 : 1);
						} else {
							result = ((ElementMetrics)e1).targetElementQName.compareTo(((ElementMetrics)e2).targetElementQName);
						}
						return table.getSortDirection() == SWT.DOWN ? result : -result;
					}
				}
			);

<%
if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {
%>
	        <%=importManager.getImportedName("org.eclipse.ui.IEditorPart")%> editor = getSite().getPage().getActiveEditor();
	        if(editor instanceof <%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>) {
				setInput((<%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>) editor);
	        }
<%
}
%>
		}

		/**
		 * @@generated
		 */
		private void handleOpen(OpenEvent event) {
<%
if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {
%>
			<%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%> diagramPart;
			try {
				if (editorInput == null) {
					return;
				}
				<%=importManager.getImportedName("org.eclipse.ui.IEditorPart")%> editorPart = getSite().getPage()
					.openEditor(editorInput,
							<%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>.ID);
				if(false == editorPart instanceof <%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>) {
					return;
				}
				diagramPart = (<%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>) editorPart;
			} catch (<%=importManager.getImportedName("org.eclipse.ui.PartInitException")%> e) {
				<%=pluginActivatorClass%>.getInstance().logError("Can't open diagram editor", e); //$NON-NLS-1$
				return;
			}
<%
} else {
%>
			if (diagramURI == null) {
				return;
			}
			<%=importManager.getImportedName("org.eclipse.ui.IViewPart")%> viewPart = <%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.showView(diagramURI);
			if(false == viewPart instanceof <%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>) {
				return;
			}
			<%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%> diagramPart = (<%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>) viewPart;
<%
}
%>
			<%=importManager.getImportedName("org.eclipse.gef.GraphicalViewer")%> graphicalViewer = (<%=importManager.getImportedName("org.eclipse.gef.GraphicalViewer")%>) diagramPart.getAdapter(<%=importManager.getImportedName("org.eclipse.gef.GraphicalViewer")%>.class);
			ElementMetrics selection = (ElementMetrics)((<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>)event.getSelection()).getFirstElement();
			String viewID = selection.diagramElementID;
			if(viewID != null) {
				View targetView = (View)diagramPart.getDiagram().eResource().getEObject(viewID);
				if(targetView != null) {
					org.eclipse.gef.EditPart targetEditPart = (org.eclipse.gef.EditPart)graphicalViewer.getEditPartRegistry().get(targetView);
					if(targetEditPart != null) {
						graphicalViewer.setSelection(new <%=importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection")%>(targetEditPart));
					}
				}
			}
		}

		/**
		 * @@generated
		 */		
		private static <%=importManager.getImportedName("java.util.Map")%> calcMetricMaxValueStrLenMap(<%=importManager.getImportedName("java.util.List")%> allMetrics) {
			<%=importManager.getImportedName("java.util.Map")%> metric2MaxStrLen = new <%=importManager.getImportedName("java.util.HashMap")%>();
			for (int i = 0; i < getMetrics().size(); i++) {
				String nextKey = ((MetricDef)getMetrics().get(i)).key; 
				int trimPos = Math.min(nextKey.length(), MAX_VISIBLE_KEY_CHAR_COUNT);
				metric2MaxStrLen.put(nextKey, nextKey.substring(0, trimPos));			
			}

			for (<%=importManager.getImportedName("java.util.Iterator")%> it = allMetrics.iterator(); it.hasNext();) {
				ElementMetrics elementMetrics = (ElementMetrics) it.next();
				for (int i = 0; i < elementMetrics.metrics.length; i++) {
					Metric metric = elementMetrics.metrics[i];
					String valueStr = (String)metric2MaxStrLen.get(metric.def.key);
					if(valueStr == null || metric.displayValue.length() > valueStr.length()) {
						metric2MaxStrLen.put(metric.def.key, metric.displayValue);
					}
				}
			}
			return metric2MaxStrLen;		
		}

		/**
		 * @@generated
		 */
		public void setFocus() {
		}		
		
		/**
		 * @@generated
		 */		
		private class Labels extends LabelProvider implements ITableLabelProvider, ITableColorProvider {
			/**
			 * @@generated
			 */			
			private boolean isElementColumn(int columnIndex) {
				return columnIndex >= getMetrics().size();
			}
			
			/**
			 * @@generated
			 */			
			public <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getColumnImage(Object element, int columnIndex) {				
				return isElementColumn(columnIndex) ? ((ElementMetrics)element).elementImage : null;
			}		
			
			/**
			 * @@generated
			 */			
			public String getColumnText(Object element, int columnIndex) {
				ElementMetrics elementMetrics = (ElementMetrics)element;
							
				if(columnIndex == getMetrics().size()) {
					return elementMetrics.targetElementQName;
				}

				String key = ((MetricDef)getMetrics().get(columnIndex)).key;
				Metric metric = elementMetrics.getMetricByKey(key);
				return (metric != null) ? metric.displayValue : "-"; //$NON-NLS-1$
			}
			
			/**
			 * @@generated
			 */			
			public <%=importManager.getImportedName("org.eclipse.swt.graphics.Color")%> getBackground(Object element, int columnIndex) {
				return null; 
			}
			
			/**
			 * @@generated
			 */			
			public <%=importManager.getImportedName("org.eclipse.swt.graphics.Color")%> getForeground(Object element, int columnIndex) {
				if(isElementColumn(columnIndex)) return null;
				ElementMetrics columnElement = (ElementMetrics)element;
				String key = ((MetricDef)getMetrics().get(columnIndex)).key;
				Metric metric = columnElement.getMetricByKey(key);			
				if(metric != null && metric.value != null) {
					if (metric.def.highLimit != null
							&& metric.def.highLimit.longValue() < metric.value.longValue()) {
						return <%=importManager.getImportedName("org.eclipse.draw2d.ColorConstants")%>.red;
					} else if (metric.def.lowLimit != null
							&& metric.def.lowLimit.longValue() > metric.value.longValue()) {
						return <%=importManager.getImportedName("org.eclipse.draw2d.ColorConstants")%>.blue;
					}
				}
				return null;
			}
		}		
	}

	/**
	 * @@generated
	 */
	private static class ElementMetrics {
		/**
		 * @@generated
		 */	
		final Metric[] metrics;
		/**
		 * @@generated
		 */		
		final String targetElementQName;
		/**
		 * @@generated
		 */
		final <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> elementImage;
		/**
		 * @@generated
		 */
		String diagramElementID;
		/**
		 * @@generated
		 */
		EObject target;
		/**
		 * @@generated
		 */
		ElementMetrics(EObject target, Metric[] metrics) {
			this.metrics = metrics;	
			assert metrics.length > 0;
			this.target = target;
			
			EClass imageTarget = target.eClass();			
			if (target instanceof View) {
				View viewTarget = (View) target;
				StringBuffer notationQNameBuf = new StringBuffer();
				notationQNameBuf.append(formatElement(viewTarget));
				if ("".equals(viewTarget.getType()) && viewTarget.getElement() != null) { //$NON-NLS-1$
					notationQNameBuf
						.append('-').append('>')
						.append(formatElement(viewTarget.getElement()));
					imageTarget = viewTarget.getElement().eClass();
				}
				int visualID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(viewTarget);
				notationQNameBuf.append('[').append(visualID < 0 ? Integer.toString(System.identityHashCode(viewTarget)) : Integer.toString(visualID)).append(']');				

				this.targetElementQName = notationQNameBuf.toString();
			} else {
				this.targetElementQName = formatElement(target);
			}
			this.elementImage = <%=pluginActivatorClass%>.getInstance().getItemImage(imageTarget);
		}
		/**
		 * @@generated
		 */
		protected String formatElement(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> object) {
			if (object == null) {
				return String.valueOf((Object)null);
			}
			<%=importManager.getImportedName("org.eclipse.emf.common.notify.AdapterFactory")%> adapterFactory = <%=pluginActivatorClass%>.getInstance().getItemProvidersAdapterFactory();
			<%=importManager.getImportedName("org.eclipse.emf.edit.provider.IItemLabelProvider")%> labelProvider = (<%=importManager.getImportedName("org.eclipse.emf.edit.provider.IItemLabelProvider")%>) adapterFactory.adapt(object, <%=importManager.getImportedName("org.eclipse.emf.edit.provider.IItemLabelProvider")%>.class);
			if (labelProvider != null) {
				return object.eClass() + " " + labelProvider.getText(object);
			}
			return object.toString();
		}
		/**
		 * @@generated
		 */
		Metric getMetricByKey(String key) {
			for (int i = 0; i < metrics.length; i++) {
				if(metrics[i].def.key.equals(key)) {
					return metrics[i]; 
				}
			}
			return null;
		}
	}

	/**
	 * @@generated
	 */
	private static class Metric implements Comparable {
		/**
		 * @@generated
		 */
		final MetricDef def;
		/**
		 * @@generated
		 */
		final Number value;
		/**
		 * @@generated
		 */
		final String displayValue;
		/**
		 * @@generated
		 */
		Metric(MetricDef def, EObject target) {
			this.def = def;
			value = def.calcMetric(target);
			this.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : "null"; //$NON-NLS-1$
		}
		/**
		 * @@generated
		 */
		public int compareTo(Object other) {
			Metric otherMetric = (Metric)other;
			if(value != null && otherMetric.value != null) {
				return (value.longValue() < otherMetric.value.longValue()) ? 
						-1 : (value.longValue() == otherMetric.value.longValue() ? 0 : 1);
			}
			return (value == null && otherMetric.value == null) ? 
					0 : (value == null) ? -1 : 1;
		}
	}

	/**
	 * @@generated
	 */
	private static class MetricDef {
		/**
		 * @@generated
		 */
		final Double lowLimit;
		/**
		 * @@generated
		 */
		final Double highLimit;
		/**
		 * @@generated
		 */
		final String key;
		/**
		 * @@generated
		 */
		final <%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> expression;
		/**
		 * @@generated
		 */
		final int[] semanticIDs;
		/**
		 * @@generated
		 */
		final String name;
		/**
		 * @@generated
		 */
		final String description;
		/**
		 * @@generated
		 */
		MetricDef(String key, <%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> expression, int[] semanticIDs, 
			Double low, Double high, String name, String description) {
			this.key = key;
			this.expression = expression;
			this.semanticIDs = semanticIDs;
			this.lowLimit = low;
			this.highLimit = high;
			this.name = name;
			this.description = description;
		}
		/**
		 * @@generated
		 */
		Number calcMetric(Object contextInstance) {
			Object val = expression.evaluate(contextInstance);
			return (val instanceof Number) ? (Number)val : null;
		}
		/**
		 * @@generated
		 */
		boolean appliesTo(EObject eObject) {
			if(eObject instanceof View && semanticIDs != null) {
				int eObjectID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID((View)eObject);
				for(int i = 0; i < semanticIDs.length; i++) {
					if(semanticIDs[i] == eObjectID) {
						return true;
					}
				}
				return false;
			}
			return eObject != null && (expression.context() instanceof EClass) && 
				((EClass)expression.context()).isSuperTypeOf(eObject.eClass());
		}
		/**
		 * @@generated
		 */
		String getToolTipText() {
			StringBuffer buf = new StringBuffer();
			if(name != null) buf.append(name);
			if(description != null) buf.append('\n').append(description).append('\n');
			if(lowLimit != null) buf.append("low:").append(lowLimit);
			if(highLimit != null) buf.append(" high:").append(highLimit);
			return buf.toString();
		}
	}

	/**
	 * @@generated
	 */
	public static <%=importManager.getImportedName("java.util.List")%>/*MetricDef*/ getMetricsForTarget(EClass target) {
		if(context2MetricsMap == null) {
			initializeRegistry();
		}
		return (<%=importManager.getImportedName("java.util.List")%>)context2MetricsMap.get(target);
	}

	/**
	 * @@generated
	 */
	public static <%=importManager.getImportedName("java.util.List")%> getMetrics() {
		if(metricsRegistry == null) {
			initializeRegistry();
		}
		return metricsRegistry;
	}

	/**
	 * @@generated
	 */
	public static Number calculateMetric(String metricKey, Object contextInstance) {
		if (key2MetricMap == null) {
			initializeRegistry();
		}
		MetricDef metric = (MetricDef)key2MetricMap.get(metricKey);
		Number value = (metric != null) ? metric.calcMetric(contextInstance) : null;
		return (value != null && !(value instanceof Double)) ? new Double(value.doubleValue()) : value;
	}

	/**
	 * @@generated
	 */
	private static void initializeRegistry() {
		if(context2MetricsMap != null) return;
<%
List javaRules = new ArrayList();
for(Iterator it = genDiagram.getEditorGen().getMetrics().getMetrics().iterator(); it.hasNext(); ) {
	GenMetricRule nextMetric = (GenMetricRule)it.next();
	GenClassifier __genExprContext = nextMetric.getTarget() != null ? nextMetric.getTarget().getContext() : null;
	if(__genExprContext == null || nextMetric.getRule() == null) continue;	
	ValueExpression __genValueExpression = nextMetric.getRule();
	String __javaOperationContainer = "JavaRules"; 	
	Map __exprEnvVariables = Collections.EMPTY_MAP;
	String __outEnvVarName = ""; // no env variable to initialize 
	if(expressionProviders != null && expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) { 
		javaRules.add(nextMetric);
	}
%>		
		<%@@ include file="../expressions/initEnv.jetinc"%>
		register(new MetricDef(<%=org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(nextMetric.getKey())%>,
			<%@@ include file="../expressions/getExpression.jetinc"%>,
<%	
	String IDs = "null";
	if(nextMetric.getTarget() instanceof GenDiagramElementTarget) {
		GenDiagramElementTarget diagramElementTarget = (GenDiagramElementTarget) nextMetric.getTarget();
		StringBuffer buf = new StringBuffer("new int[] {");
		for(Iterator elementIt = diagramElementTarget.getElement().iterator(); elementIt.hasNext();) {
			GenCommonBase nextElement = (GenCommonBase)elementIt.next();
			buf.append(importManager.getImportedName(nextElement.getEditPartQualifiedClassName()) + ".VISUAL_ID");
			if(elementIt.hasNext()) buf.append(',').append(' ');
		}
		buf.append(" }");
		IDs = buf.toString();
	} %>
			<%=IDs%>,
			<%if(nextMetric.getLowLimit()!=null){%>new Double(<%=nextMetric.getLowLimit()%>)<%}else{%>null<%}%>,					
			<%if(nextMetric.getHighLimit()!=null){%>new Double(<%=nextMetric.getHighLimit()%>)<%}else{%>null<%}%>,
			<%=org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(nextMetric.getName())%>,
			<%=org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(nextMetric.getDescription())%>));
<%
} /* metrics iteration */
%>
	}

	/**
	 * @@generated
	 */
	private static void register(MetricDef metric) {
		if (context2MetricsMap == null) {
			context2MetricsMap = new <%=importManager.getImportedName("java.util.HashMap")%>();
			metricsRegistry = new <%=importManager.getImportedName("java.util.ArrayList")%>();
			key2MetricMap = new <%=importManager.getImportedName("java.util.HashMap")%>();
		}
		<%=importManager.getImportedName("java.util.List")%> metrics = (<%=importManager.getImportedName("java.util.List")%>)context2MetricsMap.get(metric.expression.context());
		if(metrics == null) {
			metrics = new <%=importManager.getImportedName("java.util.ArrayList")%>();
			context2MetricsMap.put(metric.expression.context(), metrics);
		}
		metricsRegistry.add(metric);
		metrics.add(metric);
		key2MetricMap.put(metric.key, metric);
	}

<%
if(!javaRules.isEmpty()) {	
%>
	/**
	 * @@generated
	 */
	private static class JavaRules {
<%
	for(Iterator it = javaRules.iterator(); it.hasNext();) {
		GenMetricRule nextMetric = (GenMetricRule)it.next();
		GenClassifier __genExprContext = nextMetric.getTarget().getContext();		
		ValueExpression __genValueExpression = nextMetric.getRule();
		String __genExprResultType = "java.lang.Double";		
		Map __exprEnvVariables = Collections.EMPTY_MAP;		
%>		
<%@@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
	}
%>
	} //JavaRules
<%
} /* end of JavaRules */
%>		

}<%importManager.emitSortedImports();%>
@


1.1
log
@[172664]: Provide audits and metrics for Lite diagrams (including view-based and RCP) + validation decorators + validation markers (for non-RCP case);
Several templates are rewritten with xpand;
lite-specific TextEmitter is back (otherwise importManager is sometimes passed to xpand templates)
@
text
@@


1.1.2.1
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator)
@
text
@@


