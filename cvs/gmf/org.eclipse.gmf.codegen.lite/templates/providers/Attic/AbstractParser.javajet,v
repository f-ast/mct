head	1.2;
access;
symbols
	v20080910-1520:1.2
	v20061005-1700:1.1
	v20060824-1600:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060620-0400:1.1
	v20060616-1400:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2006.09.01.16.14.08;	author atikhomirov;	state dead;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.2
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.providers" class="AbstractParserGenerator"
  imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];%>
<%ImportAssistant importManager = (ImportAssistant) ((Object[])argument)[1];%>
<%@@ include file="../copyright4java.jetinc"%>

<%
importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public abstract class <%=genDiagram.getAbstractParserClassName()%> {
	/**
	 * @@generated
	 */
	public static Object parseValue(<%=importManager.getImportedName("org.eclipse.emf.ecore.EAttribute")%> feature, Object value) throws IllegalArgumentException {
		if (value == null) {
			throw new IllegalArgumentException();
		}
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EDataType")%> type = feature.getEAttributeType();
		Class iClass = type.getInstanceClass();
		if (Boolean.TYPE.equals(iClass) || Boolean.class.equals(iClass)) {
			if (value instanceof Boolean) {
				// ok
			} else if (value instanceof String) {
				value = Boolean.valueOf((String) value);
			} else {
				throw new IllegalArgumentException("Value of type Boolean is expected");
			}
		} else if (Character.TYPE.equals(iClass) || Character.class.equals(iClass)) {
			if (value instanceof Character) {
				// ok
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					throw new IllegalArgumentException();	//XXX: ?
				} else {
					value = new Character(s.charAt(0));
				}
			} else {
				throw new IllegalArgumentException("Value of type Character is expected");
			}
		} else if (Byte.TYPE.equals(iClass) || Byte.class.equals(iClass)) {
			if (value instanceof Byte) {
				// ok
			} else if (value instanceof Number) {
				value = new Byte(((Number) value).byteValue());
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					value = null;
				} else {
					try {
						value = Byte.valueOf(s);
					} catch (NumberFormatException nfe) {
						throw new IllegalArgumentException("String value does not convert to Byte value");
					}
				}
			} else {
				throw new IllegalArgumentException("Value of type Byte is expected");
			}
		} else if (Short.TYPE.equals(iClass) || Short.class.equals(iClass)) {
			if (value instanceof Short) {
				// ok
			} else if (value instanceof Number) {
				value = new Short(((Number) value).shortValue());
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					value = null;
				} else {
					try {
						value = Short.valueOf(s);
					} catch (NumberFormatException nfe) {
						throw new IllegalArgumentException("String value does not convert to Short value");
					}
				}
			} else {
				throw new IllegalArgumentException("Value of type Short is expected");
			}
		} else if (Integer.TYPE.equals(iClass) || Integer.class.equals(iClass)) {
			if (value instanceof Integer) {
				// ok
			} else if (value instanceof Number) {
				value = new Integer(((Number) value).intValue());
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					value = null;
				} else {
					try {
						value = Integer.valueOf(s);
					} catch (NumberFormatException nfe) {
						throw new IllegalArgumentException("String value does not convert to Integer value");
					}
				}
			} else {
				throw new IllegalArgumentException("Value of type Integer is expected");
			}
		} else if (Long.TYPE.equals(iClass) || Long.class.equals(iClass)) {
			if (value instanceof Long) {
				// ok
			} else if (value instanceof Number) {
				value = new Long(((Number) value).longValue());
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					value = null;
				} else {
					try {
						value = Long.valueOf(s);
					} catch (NumberFormatException nfe) {
						throw new IllegalArgumentException("String value does not convert to Long value");
					}
				}
			} else {
				throw new IllegalArgumentException("Value of type Long is expected");
			}
		} else if (Float.TYPE.equals(iClass) || Float.class.equals(iClass)) {
			if (value instanceof Float) {
				// ok
			} else if (value instanceof Number) {
				value = new Float(((Number) value).floatValue());
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					value = null;
				} else {
					try {
						value = Float.valueOf(s);
					} catch (NumberFormatException nfe) {
						throw new IllegalArgumentException("String value does not convert to Float value");
					}
				}
			} else {
				throw new IllegalArgumentException("Value of type Float is expected");
			}
		} else if (Double.TYPE.equals(iClass) || Double.class.equals(iClass)) {
			if (value instanceof Double) {
				// ok
			} else if (value instanceof Number) {
				value = new Double(((Number) value).doubleValue());
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					value = null;
				} else {
					try {
						value = Double.valueOf(s);
					} catch (NumberFormatException nfe) {
						throw new IllegalArgumentException("String value does not convert to Double value");
					}
				}
			} else {
				throw new IllegalArgumentException("Value of type Double is expected");
			}
		} else if (String.class.equals(iClass)) {
			value = String.valueOf(value);
		} else if (type instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EEnum")%>) {
			if (value instanceof String) {
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral")%> literal = ((<%=importManager.getImportedName("org.eclipse.emf.ecore.EEnum")%>) type).getEEnumLiteralByLiteral((String) value);
				if (literal == null) {
					throw new IllegalArgumentException("Unknown literal: " + value);
				} else {
					value = literal.getInstance();
				}
			} else {
				throw new IllegalArgumentException("Value of type String is expected");
			}
		} else {
			throw new IllegalArgumentException("Unsupported type");
		}
		return value;
	}
}
<%importManager.emitSortedImports();%>
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@@

