head	1.51;
access;
symbols
	v20080910-1520:1.51
	v20080722-1827:1.51
	v20080716-1642:1.51
	R2_1_maintenance:1.51.0.2
	Root_R2_1_maintenance:1.51
	R2_1_0:1.51
	v20080507-1326:1.51
	v20080501-1739:1.51
	v20080425-1959:1.51
	v20080322-0000:1.51
	v20071108-0000:1.51
	v20071003-0000:1.50
	v20070921-0000:1.47.2.3
	v20070915-0000:1.47.2.2
	v20070903-0000:1.49
	v20070809-0000:1.47
	R2_0_maintenance:1.47.0.2
	R2_0:1.47
	R4_20:1.47
	v20070621-0000:1.47
	RC3_20:1.44
	v20070614-1400:1.44
	v20070608-1300:1.41
	v20070601-1400:1.41
	v20070525-1500:1.39
	v20070520-1200:1.39
	v20070518-1300:1.39
	v20070504-1000:1.39
	v20070427-0600:1.38
	v20070420-1000:1.38
	v20070413-1300:1.38
	v20070405-1100:1.37
	v20070403-1500:1.36
	v20070330-1300:1.36
	v20060330-1300:1.36
	v20070322-1100:1.33
	v20060316-0600:1.32
	v20070307-0700:1.31
	v20070228-2000:1.29
	v20070221-1500:1.28
	v20070208-1800:1.27
	v20070103-0300:1.20
	M4_20:1.20
	v20061222-1800:1.19
	v20061214-0000:1.16
	v20061120-1300:1.14
	M3_20:1.14
	v20061117-0800:1.14
	v20061013-1330:1.11
	v20061005-1700:1.6
	M1_20:1.10
	v20060904-1500:1.10
	v20060824-1600:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060626-1420:1.6
	v20060620-0400:1.6
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.4
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.51
date	2007.10.31.17.16.42;	author bblajer;	state Exp;
branches;
next	1.50;
commitid	79fa4728b8794567;

1.50
date	2007.09.18.10.18.54;	author bblajer;	state Exp;
branches;
next	1.49;
commitid	6ac646efa60d4567;

1.49
date	2007.08.13.14.11.02;	author bblajer;	state Exp;
branches;
next	1.48;
commitid	65c246c066754567;

1.48
date	2007.07.04.13.22.26;	author bblajer;	state Exp;
branches;
next	1.47;
commitid	405d468b9f0f4567;

1.47
date	2007.06.20.17.17.59;	author bblajer;	state Exp;
branches
	1.47.2.1;
next	1.46;
commitid	25af467961474567;

1.46
date	2007.06.20.10.16.10;	author bblajer;	state Exp;
branches;
next	1.45;
commitid	37dd4678fe694567;

1.45
date	2007.06.15.09.53.04;	author bblajer;	state Exp;
branches;
next	1.44;
commitid	2a0c4672617d4567;

1.44
date	2007.06.12.16.33.04;	author bblajer;	state Exp;
branches;
next	1.43;
commitid	1a98466ecabe4567;

1.43
date	2007.06.12.10.58.03;	author bblajer;	state Exp;
branches;
next	1.42;
commitid	4adc466e7c394567;

1.42
date	2007.06.11.14.58.44;	author ashatalin;	state Exp;
branches;
next	1.41;
commitid	315b466d63234567;

1.41
date	2007.06.01.09.49.13;	author bblajer;	state Exp;
branches;
next	1.40;
commitid	7e07465feb984567;

1.40
date	2007.05.29.14.55.32;	author bblajer;	state Exp;
branches;
next	1.39;
commitid	2543465c3ee24567;

1.39
date	2007.05.03.15.23.43;	author bblajer;	state Exp;
branches;
next	1.38;
commitid	4f2e4639fe7e4567;

1.38
date	2007.04.12.13.06.34;	author bblajer;	state Exp;
branches;
next	1.37;
commitid	2433461e2eda4567;

1.37
date	2007.04.04.11.05.01;	author bblajer;	state Exp;
branches;
next	1.36;
commitid	18c54613864d4567;

1.36
date	2007.03.28.19.32.48;	author ashatalin;	state Exp;
branches;
next	1.35;
commitid	6e51460ac2dd4567;

1.35
date	2007.03.22.20.48.52;	author ashatalin;	state Exp;
branches;
next	1.34;
commitid	14b54602ebb34567;

1.34
date	2007.03.22.17.15.32;	author bblajer;	state Exp;
branches;
next	1.33;
commitid	5d864602b9b34567;

1.33
date	2007.03.20.14.49.11;	author ashatalin;	state Exp;
branches;
next	1.32;
commitid	75dd45fff4664567;

1.32
date	2007.03.09.17.19.35;	author bblajer;	state Exp;
branches;
next	1.31;
commitid	22ed45f197244567;

1.31
date	2007.03.03.23.45.11;	author bblajer;	state Exp;
branches;
next	1.30;
commitid	2e3145ea08814567;

1.30
date	2007.03.02.21.21.16;	author bblajer;	state Exp;
branches;
next	1.29;
commitid	2b1945e895484567;

1.29
date	2007.02.23.16.19.36;	author bblajer;	state Exp;
branches;
next	1.28;
commitid	496945df14164567;

1.28
date	2007.02.14.13.42.30;	author bblajer;	state Exp;
branches;
next	1.27;
commitid	75e045d311c54567;

1.27
date	2007.02.08.16.35.07;	author bblajer;	state Exp;
branches;
next	1.26;
commitid	4b245cb513a4567;

1.26
date	2007.02.05.18.36.56;	author bblajer;	state Exp;
branches;
next	1.25;
commitid	7e2645c779484567;

1.25
date	2007.02.02.21.46.31;	author atikhomirov;	state Exp;
branches;
next	1.24;
commitid	44c45c3b1364567;

1.24
date	2007.02.02.21.38.25;	author bblajer;	state Exp;
branches;
next	1.23;
commitid	728e45c3af504567;

1.23
date	2007.02.02.17.14.32;	author bblajer;	state Exp;
branches;
next	1.22;
commitid	78d445c371764567;

1.22
date	2007.01.31.17.20.44;	author atikhomirov;	state Exp;
branches;
next	1.21;
commitid	27c145c0cfe94567;

1.21
date	2007.01.04.16.29.03;	author bblajer;	state Exp;
branches;
next	1.20;
commitid	2165459d2b4d4567;

1.20
date	2006.12.25.12.00.12;	author bblajer;	state Exp;
branches;
next	1.19;
commitid	430d458fbd4b4567;

1.19
date	2006.12.21.21.01.00;	author bblajer;	state Exp;
branches;
next	1.18;
commitid	24c8458af60b4567;

1.18
date	2006.12.21.20.35.34;	author bblajer;	state Exp;
branches;
next	1.17;
commitid	bee458af0104567;

1.17
date	2006.12.19.19.11.42;	author bblajer;	state Exp;
branches;
next	1.16;
commitid	733e4588396c4567;

1.16
date	2006.12.12.12.54.48;	author bblajer;	state Exp;
branches;
next	1.15;
commitid	355b457ea6574567;

1.15
date	2006.11.23.18.57.16;	author bblajer;	state Exp;
branches;
next	1.14;
commitid	66934565ef0a4567;

1.14
date	2006.11.09.18.15.43;	author bblajer;	state Exp;
branches;
next	1.13;

1.13
date	2006.10.19.11.00.31;	author bblajer;	state Exp;
branches;
next	1.12;

1.12
date	2006.10.17.14.50.08;	author bblajer;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.21.10.12.03;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.01.16.14.09;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.30.15.12.08;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.02.10.43.51;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.03.17.42.27;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.19.19.14.13;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.05.13.35.59;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.31.15.54.57;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.22.18.22.10;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.18.19.12.41;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;

1.47.2.1
date	2007.09.14.15.11.35;	author dstadnik;	state Exp;
branches;
next	1.47.2.2;
commitid	22e46eaa4a74567;

1.47.2.2
date	2007.09.14.18.46.27;	author dstadnik;	state Exp;
branches;
next	1.47.2.3;
commitid	61d846ead7024567;

1.47.2.3
date	2007.09.17.16.02.13;	author bblajer;	state Exp;
branches;
next	;
commitid	7b9846eea5004567;


desc
@@


1.51
log
@[208264]: [lite]: Implement border items
[208270]: [lite]: Feedback for element creation should show exactly where the element will be created
Move external label when a deep ancestor is moved;
NodeEditPart.xpt: add variation point to createEditPolicies;
AddNodeCommand.xpt: do not generate unused attribute
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.lite;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.codegen.jet.JETCompiler;
import org.eclipse.emf.codegen.merge.java.JControlModel;
import org.eclipse.emf.codegen.merge.java.JMerger;
import org.eclipse.emf.codegen.util.CodeGenUtil;
import org.eclipse.emf.common.CommonPlugin;
import org.eclipse.emf.common.util.URI;
import org.eclipse.gmf.common.UnexpectedBehaviourException;
import org.eclipse.gmf.internal.common.codegen.BinaryEmitter;
import org.eclipse.gmf.internal.common.codegen.DefaultTextMerger;
import org.eclipse.gmf.internal.common.codegen.GIFEmitter;
import org.eclipse.gmf.internal.common.codegen.JETGIFEmitterAdapter;
import org.eclipse.gmf.internal.common.codegen.TextEmitter;
import org.eclipse.gmf.internal.common.codegen.TextMerger;
import org.eclipse.gmf.internal.common.codegen.XpandTextEmitter;
import org.eclipse.gmf.internal.xpand.ResourceManager;
import org.eclipse.gmf.internal.xpand.util.BundleResourceManager;
import org.osgi.framework.Bundle;

/**
 * Provides Xpand templates.
 * FIXME Merge with {@@link org.eclipse.gmf.codegen.util.CodegenEmitters}
 * 
 * @@author artem
 */
public class CodegenEmitters {
	private static final String CODEGEN_PLUGIN_ID = "org.eclipse.gmf.codegen";	//$NON-NLS-1$

	private final String[] myTemplatePath;

	private ResourceManager myResourceManager;
	public CodegenEmitters(boolean usePrecompiled, String templateDirectory) {
		ArrayList<URL> templatesURI = new ArrayList<URL>(3);
		templatesURI.add(getTemplatesBundle().getEntry("/templates/"));	//$NON-NLS-1$
		templatesURI.add(getCodegenTemplatesBundle().getEntry("/templates/"));	//$NON-NLS-1$
		URL dynamicTemplatesPath = getDynamicTemplatesURL(templateDirectory);
		if (dynamicTemplatesPath != null) {
			templatesURI.add(0, dynamicTemplatesPath);
		}
		myResourceManager = new BundleResourceManager(templatesURI.toArray(new URL[templatesURI.size()]));

		myTemplatePath = new String[templatesURI.size()];
		for (int i = 0; i < templatesURI.size(); i++) {
			myTemplatePath[i] = templatesURI.get(i).toString();
		}
		if (usePrecompiled) {
			myCachedXpandEmitters = new HashMap<String, TextEmitter>();
		}
	}

	private static URL getDynamicTemplatesURL(String templateDirectory) {
		if (templateDirectory != null) {
			URI templatesURI = templateDirectory.indexOf(":") == -1 ? URI.createPlatformResourceURI(templateDirectory, true) : URI.createURI(templateDirectory); //$NON-NLS-1$
			try {
				return new URL(CommonPlugin.resolve(templatesURI).toString());
			} catch (MalformedURLException e) {
				Activator.getInstance().getLog().log(new Status(IStatus.ERROR, Activator.getPluginID(), 0, "Incorrect dynamic templates location", e)); //$NON-NLS-1$
			}
		}
		return null;
	}

	public TextMerger createMergeService() {
		URL controlFile = getJMergeControlFile();
		if (controlFile != null){
			JControlModel controlModel = new JControlModel();
			controlModel.initialize(CodeGenUtil.instantiateFacadeHelper(JMerger.DEFAULT_FACADE_HELPER_CLASS), controlFile.toString());
			if (!controlModel.canMerge()){
				throw new IllegalStateException("Can not initialize JControlModel");
			}
			return new DefaultTextMerger(controlModel);
		}
		return null;
	}

	public TextEmitter getCreateNodeCommandEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateNodeCommand::CreateNodeCommand");	//$NON-NLS-1$
	}

	public TextEmitter getCreateNodeCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateNodeCommand::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getAddNodeCommandEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::AddNodeCommand::AddNodeCommand");	//$NON-NLS-1$
	}

	public TextEmitter getAddNodeCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::AddNodeCommand::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getCloneNodeCommandEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CloneNodeCommand::CloneNodeCommand");	//$NON-NLS-1$
	}

	public TextEmitter getCloneNodeCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CloneNodeCommand::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getCreateLinkStartCommandEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateLinkStartCommand::CreateLinkStartCommand");	//$NON-NLS-1$
	}

	public TextEmitter getCreateLinkStartCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateLinkStartCommand::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getCreateLinkCompleteCommandEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateLinkCompleteCommand::CreateLinkCompleteCommand");	//$NON-NLS-1$
	}

	public TextEmitter getCreateLinkCompleteCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateLinkCompleteCommand::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getReconnectLinkSourceCommandEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::ReconnectLinkSourceCommand::ReconnectLinkSourceCommand");	//$NON-NLS-1$
	}

	public TextEmitter getReconnectLinkSourceCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::ReconnectLinkSourceCommand::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getReconnectLinkTargetCommandEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::ReconnectLinkTargetCommand::ReconnectLinkTargetCommand");	//$NON-NLS-1$
	}

	public TextEmitter getReconnectLinkTargetCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::ReconnectLinkTargetCommand::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getViewFactoryGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::viewfactories::ViewFactory::ViewFactory");	//$NON-NLS-1$
	}

	public TextEmitter getComponentEditPolicyEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::ComponentEditPolicy::ComponentEditPolicy");	//$NON-NLS-1$
	}

	public TextEmitter getComponentEditPolicyQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::ComponentEditPolicy::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getLayoutEditPolicyEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::LayoutEditPolicy::LayoutEditPolicy");	//$NON-NLS-1$
	}

	public TextEmitter getLayoutEditPolicyQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::LayoutEditPolicy::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getSideAffixedLayoutEditPolicyEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::LayoutEditPolicy::SideAffixedLayoutEditPolicy");	//$NON-NLS-1$
	}

	public TextEmitter getSideAffixedLayoutEditPolicyQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::LayoutEditPolicy::SideAffixedQualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getGraphicalEditPolicyEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::GraphicalNodeEditPolicy::GraphicalNodeEditPolicy");	//$NON-NLS-1$
	}

	public TextEmitter getGraphicalEditPolicyQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::GraphicalNodeEditPolicy::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getConnectionEndpointEditPolicyEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::ConnectionEndpointEditPolicy::ConnectionEndpointEditPolicy");	//$NON-NLS-1$
	}

	public TextEmitter getConnectionEndpointEditPolicyQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::ConnectionEndpointEditPolicy::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getValidationProviderGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::ValidationProvider::ValidationProvider");	//$NON-NLS-1$
	}

	public TextEmitter getValidateActionGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::ValidateAction::ValidateAction");	//$NON-NLS-1$
	}

	public TextEmitter getValidateActionQualifiedNameGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::ValidateAction::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getMetricProviderEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::MetricProvider::MetricProvider");	//$NON-NLS-1$
	}	

	public TextEmitter getMetricsActionEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::MetricsAction::MetricsAction");	//$NON-NLS-1$
	}	

	public TextEmitter getMetricsActionQualifiedNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::MetricsAction::qualifiedClassName");	//$NON-NLS-1$
	}	

	public TextEmitter getDomainElementInitializerGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::DomainElementInitializer::DomainElementInitializer");	//$NON-NLS-1$
	}

	public TextEmitter getDomainElementInitializerQualifiedNameGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::DomainElementInitializer::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getCompartmentEditPartGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::parts::CompartmentEditPart::CompartmentEditPart");	//$NON-NLS-1$
	}

	public TextEmitter getDiagramEditPartGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::parts::DiagramEditPart::DiagramEditPart");	//$NON-NLS-1$
	}

	public TextEmitter getEditPartFactoryGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::parts::EditPartFactory::EditPartFactory");	//$NON-NLS-1$
	}

	public TextEmitter getLinkEditPartGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::parts::LinkEditPart::LinkEditPart");	//$NON-NLS-1$
	}

	public TextEmitter getLinkLabelEditPartGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::parts::LinkLabelEditPart::LinkLabelEditPart");	//$NON-NLS-1$
	}

	public TextEmitter getChildNodeEditPartGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::parts::ChildNodeEditPart::ChildNodeEditPart");	//$NON-NLS-1$
	}

	public TextEmitter getNodeEditPartGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::parts::NodeEditPart::NodeEditPart");	//$NON-NLS-1$
	}

	public TextEmitter getNodeLabelEditPartGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::parts::NodeLabelEditPart::NodeLabelEditPart");	//$NON-NLS-1$
	}

	public TextEmitter getPluginGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::Plugin::Plugin");	//$NON-NLS-1$
	}

	public TextEmitter getActionBarContributorGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::ActionBarContributor::ActionBarContributor");	//$NON-NLS-1$
	}

	public TextEmitter getOpenDiagramInViewActionGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::OpenDiagramInViewAction::OpenDiagramInViewAction");	//$NON-NLS-1$
	}

	public TextEmitter getOpenDiagramInViewActionQualifiedClassNameGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::OpenDiagramInViewAction::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getEditorGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::Editor::Editor");	//$NON-NLS-1$
	}

	public TextEmitter getMatchingStrategyEmitter() {
		return retrieveXpand("xpt::editor::MatchingStrategy::MatchingStrategy"); //$NON-NLS-1$
	}
	
	public TextEmitter getCreationWizardGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::CreationWizard::CreationWizard");	//$NON-NLS-1$
	}

	public TextEmitter getCreationWizardPageGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::CreationWizardPage::CreationWizardPage");	//$NON-NLS-1$
	}

	public TextEmitter getDiagramEditorUtilGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::DiagramEditorUtil::DiagramEditorUtil");	//$NON-NLS-1$
	}

	public TextEmitter getPaletteFactoryGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::palette::PaletteFactory::Factory");	//$NON-NLS-1$
	}

	public TextEmitter getVisualIDRegistryGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::VisualIDRegistry::VisualIDRegistry");	//$NON-NLS-1$
	}

	public TextEmitter getManifestGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::manifest::manifest");	//$NON-NLS-1$
	}

	public TextEmitter getBuildPropertiesGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::buildProperties::buildProperties");	//$NON-NLS-1$
	}

	public TextEmitter getPluginXML() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::plugin::plugin");	//$NON-NLS-1$
	}

	public TextEmitter getModelElementSelectionPageEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::ModelElementSelectionPage::ModelElementSelectionPage");	//$NON-NLS-1$
	}

	public TextEmitter getModelElementSelectionPageQualifiedNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::ModelElementSelectionPage::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getInitDiagramFileActionGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::InitDiagramFileAction::InitDiagramFileAction");	//$NON-NLS-1$
	}

	public TextEmitter getNewDiagramFileWizardGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::NewDiagramFileWizard::NewDiagramFileWizard");	//$NON-NLS-1$
	}

	public TextEmitter getURISelectorPageGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::URISelectorPage::URISelectorPage");	//$NON-NLS-1$
	}

	public TextEmitter getURISelectorPageQualifiedClassNameGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::URISelectorPage::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getShortcutPropertyTesterEmitter() {
		return retrieveXpand("xpt::editor::ShortcutPropertyTester::ShortcutPropertyTester"); //$NON-NLS-1$
	}

	public TextEmitter getShortcutCreationWizardEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::ShortcutCreationWizard::ShortcutCreationWizard");	//$NON-NLS-1$
	}

	public TextEmitter getShortcutCreationWizardQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::ShortcutCreationWizard::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getCreateShortcutActionEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::CreateShortcutAction::CreateShortcutAction");	//$NON-NLS-1$
	}

	public TextEmitter getShortcutProviderEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::ShortcutProvider::ShortcutProvider");	//$NON-NLS-1$
	}

	public TextEmitter getShortcutProviderQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::ShortcutProvider::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getCreateShortcutNodeCommandEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateShortcutNodeCommand::CreateShortcutNodeCommand");	//$NON-NLS-1$
	}

	public TextEmitter getCreateShortcutNodeCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateShortcutNodeCommand::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getCreateShortcutEdgeCommandEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateShortcutEdgeCommand::CreateShortcutEdgeCommand");	//$NON-NLS-1$
	}

	public TextEmitter getCreateShortcutEdgeCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateShortcutEdgeCommand::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getElementChooserEmitter() {
		return retrieveXpand("xpt::editor::ElementChooser::ElementChooser"); //$NON-NLS-1$
	}

	public TextEmitter getLoadResourceActionGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::LoadResourceAction::LoadResourceAction");	//$NON-NLS-1$
	}

	public TextEmitter getElementTypesGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::ElementTypes::ElementTypes");	//$NON-NLS-1$
	}

	public TextEmitter getPluginPropertiesGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::properties::properties");	//$NON-NLS-1$
	}

	public TextEmitter getAbstractExpressionEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::expressions::AbstractExpression::AbstractExpression");
	}
	
	public TextEmitter getOCLExpressionFactoryEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::expressions::OCLExpressionFactory::OCLExpressionFactory");
	}	
	
	public TextEmitter getRegexpExpressionFactoryEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::expressions::RegexpExpressionFactory::RegexpExpressionFactory");
	}

	public TextEmitter getOpenDiagramEditPolicyEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::OpenDiagramEditPolicy::OpenDiagramEditPolicy");	//$NON-NLS-1$
	}

	public TextEmitter getAppearancePreferencePageEmitter() {
		return retrieveXpand("xpt::diagram::preferences::AppearancePreferencePage::AppearancePreferencePage");	//$NON-NLS-1$
	}

	public TextEmitter getAppearancePreferencePageQualifiedClassNameEmitter() {
		return retrieveXpand("xpt::diagram::preferences::AppearancePreferencePage::qualifiedClassName");	//$NON-NLS-1$
	}

	public TextEmitter getGeneralPreferencePageEmitter() {
		return retrieveXpand("xpt::diagram::preferences::GeneralPreferencePage::GeneralPreferencePage");	//$NON-NLS-1$
	}

	public TextEmitter getGeneralPreferencePageQualifiedClassNameEmitter() {
		return retrieveXpand("xpt::diagram::preferences::GeneralPreferencePage::qualifiedClassName");	//$NON-NLS-1$
	}

	public BinaryEmitter getDiagramIconEmitter() throws UnexpectedBehaviourException {
		return newGIFEmitterAdapter("/xpt/editor/diagram.gif"); //$NON-NLS-1$
	}

	public BinaryEmitter getWizardBannerImageEmitter() throws UnexpectedBehaviourException {
		return newGIFEmitterAdapter("/xpt/editor/wizban.gif"); //$NON-NLS-1$
	}

	public TextEmitter getWizardBannerStemEmitter()  throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::CreationWizard::wizardBannerStem");	//$NON-NLS-1$
	}

	public TextEmitter getWizardBannerLocationEmitter()  throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::CreationWizard::wizardBannerLocation");	//$NON-NLS-1$
	}
	private BinaryEmitter newGIFEmitter(String relativePath) throws UnexpectedBehaviourException {
		return new GIFEmitter(checkTemplateLocation(relativePath));
	}

	private BinaryEmitter newGIFEmitterAdapter(String relativePath) throws UnexpectedBehaviourException {
		return new JETGIFEmitterAdapter(new org.eclipse.emf.codegen.util.GIFEmitter(checkTemplateLocation(relativePath)));
	}

	private String checkTemplateLocation(String relativePath) throws UnexpectedBehaviourException {
		String templateLocation = JETCompiler.find(getTemplatePath(), relativePath);
		if (templateLocation == null) {
			throw new UnexpectedBehaviourException("Template " + relativePath +" not found");
		}
		return templateLocation;
	}

	private String[] getTemplatePath() {
		return myTemplatePath;
	}

	private static Bundle getTemplatesBundle() {
		return Activator.getDefault();
	}

	private static Bundle getCodegenTemplatesBundle() {
		return Platform.getBundle(CODEGEN_PLUGIN_ID);
	}

	public URL getJMergeControlFile() {
		return getCodegenTemplatesBundle().getEntry("/templates/emf-merge.xml");
	}

	public BinaryEmitter getShortcutImageEmitter() throws UnexpectedBehaviourException {
		return newGIFEmitter("/xpt/editor/shortcut.gif"); //$NON-NLS-1$
	}

	public TextEmitter getNavigatorContentProviderEmitter() {
		return retrieveXpand("xpt::navigator::NavigatorContentProvider::NavigatorContentProvider");	//$NON-NLS-1$
	}

	public TextEmitter getDomainNavigatorContentProviderEmitter() {
		return retrieveXpand("xpt::navigator::DomainNavigatorContentProvider::DomainNavigatorContentProvider"); //$NON-NLS-1$
	}
	
	public TextEmitter getDomainNavigatorLabelProviderEmitter() {
		return retrieveXpand("xpt::navigator::DomainNavigatorLabelProvider::DomainNavigatorLabelProvider"); //$NON-NLS-1$
	}
	
	public TextEmitter getDomainNavigatorItemEmitter() {
		return retrieveXpand("xpt::navigator::DomainNavigatorItem::DomainNavigatorItem"); //$NON-NLS-1$
	}
	
	public TextEmitter getDomainModelElementTesterEmitter() {
		return retrieveXpand("xpt::editor::DomainModelElementTester::DomainModelElementTester"); //$NON-NLS-1$
	}
	
	public TextEmitter getURIEditorInputTesterEmitter() {
		return retrieveXpand("xpt::editor::UriEditorInputTester::UriEditorInputTester"); //$NON-NLS-1$
	}

	public TextEmitter getNavigatorLabelProviderEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::navigator::NavigatorLabelProvider::NavigatorLabelProvider"); //$NON-NLS-1$
	}
	
	public TextEmitter getNavigatorLinkHelperEmitter() {
		return retrieveXpand("xpt::navigator::NavigatorLinkHelper::NavigatorLinkHelper"); //$NON-NLS-1$
	}
	
	public TextEmitter getNavigatorSorterEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::navigator::NavigatorSorter::NavigatorSorter");
	}
	
	public TextEmitter getNavigatorActionProviderEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::navigator::NavigatorActionProvider::NavigatorActionProvider"); //$NON-NLS-1$
	}
	
	public TextEmitter getAbstractNavigatorItemEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::navigator::AbstractNavigatorItem::AbstractNavigatorItem");
	}
	
	public TextEmitter getNavigatorGroupEmitter() {
		return retrieveXpand("xpt::navigator::NavigatorGroup::NavigatorGroup"); //$NON-NLS-1$
	}

	public TextEmitter getNavigatorItemEmitter() {
		return retrieveXpand("xpt::navigator::NavigatorItem::NavigatorItem"); //$NON-NLS-1$
	}

	public BinaryEmitter getGroupIconEmitter() throws UnexpectedBehaviourException {
		return newGIFEmitter("/xpt/navigator/navigatorGroup.gif"); //$NON-NLS-1$
	}

	public TextEmitter getPropertySheetLabelProviderEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::propsheet::SheetLabelProvider::SheetLabelProvider");	//$NON-NLS-1$
	}

	public TextEmitter getPropertySectionEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::propsheet::PropertySection::PropertySection");
	}

	public TextEmitter getApplicationEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::application::Application::Application"); //$NON-NLS-1$
	}

	public TextEmitter getActionBarAdvisorEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::application::ActionBarAdvisor::ActionBarAdvisor"); //$NON-NLS-1$
	}

	public TextEmitter getPerspectiveEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::application::Perspective::Perspective"); //$NON-NLS-1$
	}

	public TextEmitter getWorkbenchAdvisorEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::application::WorkbenchAdvisor::WorkbenchAdvisor"); //$NON-NLS-1$
	}

	public TextEmitter getWorkbenchWindowAdvisorEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::application::WorkbenchWindowAdvisor::WorkbenchWindowAdvisor"); //$NON-NLS-1$
	}

	public TextEmitter getMarkerNavigationProviderEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::MarkerNavigationProvider::MarkerNavigationProvider");	//$NON-NLS-1$
	}

    public TextEmitter getExternalizeEmitter() {
        return retrieveXpand("xpt::Externalizer::Access"); //$NON-NLS-1$
    }

    public TextEmitter getMessagesEmitter() {
        return retrieveXpand("xpt::Externalizer::Values"); //$NON-NLS-1$
    }

	private TextEmitter retrieveXpand(String templateFQN) {
		if (myCachedXpandEmitters == null) {
			return newXpandEmitter(templateFQN);
		}
		TextEmitter result = myCachedXpandEmitters.get(templateFQN);
		if (result == null) {
			result = newXpandEmitter(templateFQN);
			myCachedXpandEmitters.put(templateFQN, result);
		}
		return result;
	}

	private TextEmitter newXpandEmitter(String templateFQN) {
		return new XpandTextEmitter(myResourceManager, templateFQN, getClass().getClassLoader());
	}

	private HashMap<String, TextEmitter> myCachedXpandEmitters;
}
@


1.50
log
@1. Preferences for fonts and colors
2. ResourceManager employed to reuse fonts and colors used for styles
3. Option to check the availability of the font name that is specified in the style
4. Styles are initialized with defaults from preferences
@
text
@d58 1
a58 1
			templatesURI.add(dynamicTemplatesPath);
d172 8
@


1.49
log
@1. Don't cache templates if dynamic templates option is on;
2. [199747] Support shortcuts in the Lite diagrams (including notation model update for links between alien shortcuts);
3. Decorations should be visible;
4. TransactionalUpdateManager: more notifications to be dispatched to parents, make it possible to add more in subclasses;
5. On element creation, it should be given an opportunity to contribute its notational update commands;
6. [199749]: Delete from View supported (request, edit policy, command, UI action);
7. Add @@generated tags where they were missing;
8. ChildNotationModelRefresher: if the child feature is derived transient, notation model refresher should listen to containment feature.
@
text
@d404 16
@


1.48
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@d66 3
d308 8
d324 52
d552 3
d557 1
a557 1
			result = new XpandTextEmitter(myResourceManager, templateFQN, getClass().getClassLoader());
d563 5
a567 1
	private HashMap<String, TextEmitter> myCachedXpandEmitters = new HashMap<String, TextEmitter>();
@


1.47
log
@Catching up with changes in fullRT generator
@
text
@d14 1
d16 1
d19 1
d21 1
d26 1
a27 5
import org.eclipse.gmf.codegen.templates.expressions.AbstractExpressionGenerator;
import org.eclipse.gmf.codegen.templates.expressions.OCLExpressionFactoryGenerator;
import org.eclipse.gmf.codegen.templates.expressions.RegexpExpressionFactoryGenerator;
import org.eclipse.gmf.codegen.templates.lite.providers.MetricProviderGenerator;
import org.eclipse.gmf.codegen.templates.lite.providers.ValidationProviderGenerator;
a28 5
import org.eclipse.gmf.internal.codegen.dispatch.CachingEmitterFactory;
import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactory;
import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactoryImpl;
import org.eclipse.gmf.internal.codegen.dispatch.NoSuchTemplateException;
import org.eclipse.gmf.internal.codegen.dispatch.StaticTemplateRegistry;
a31 1
import org.eclipse.gmf.internal.common.codegen.JETEmitterAdapter;
d41 1
a41 1
 * Provides JET templates.
a48 2
	private final EmitterFactory myFactory;

a50 2
	private static StaticTemplateRegistry myRegistry;

d53 8
a60 9
		myRegistry = initRegistry();
		String[] variables = new String[] { "org.eclipse.emf.codegen", "org.eclipse.emf.codegen.ecore", "org.eclipse.emf.common", "org.eclipse.emf.ecore", "org.eclipse.gmf.common",
				"org.eclipse.gmf.codegen" };
		URL liteTemplatesPath = getTemplatesBundle().getEntry("/templates/");
		URL runtimeTemplatesPath = Platform.getBundle(CODEGEN_PLUGIN_ID).getEntry("/templates/");
		myTemplatePath = new String[] {
				usePrecompiled ? null : templateDirectory != null && templateDirectory.indexOf(":") == -1 ? URI.createPlatformResourceURI(templateDirectory, true).toString() : templateDirectory,
				liteTemplatesPath.toString(), runtimeTemplatesPath.toString() };
		myFactory = new CachingEmitterFactory(new EmitterFactoryImpl(getTemplatePath(), myRegistry, usePrecompiled, variables));
d62 16
a77 1
		myResourceManager = new BundleResourceManager(liteTemplatesPath, runtimeTemplatesPath);
d93 2
a94 10
	private static StaticTemplateRegistry initRegistry() {
		final StaticTemplateRegistry tr = new StaticTemplateRegistry(CodegenEmitters.class.getClassLoader());

		put(tr, "/providers/ValidationProvider.javajet", ValidationProviderGenerator.class);
		put(tr, "/providers/MetricProvider.javajet", MetricProviderGenerator.class); //$NON-NLS-1$
		put(tr, "/expressions/AbstractExpression.javajet", AbstractExpressionGenerator.class);
		put(tr, "/expressions/OCLExpressionFactory.javajet", OCLExpressionFactoryGenerator.class);
		put(tr, "/expressions/RegexpExpressionFactory.javajet", RegexpExpressionFactoryGenerator.class);

		return tr;
d97 2
a98 2
	public TextEmitter getCreateNodeCommandEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateNodeCommand::CreateNodeCommand");	//$NON-NLS-1$
d105 4
d113 4
d121 4
d129 4
d137 4
d145 4
d157 4
d165 4
d173 12
d186 9
a194 1
		return retrieve(ValidationProviderGenerator.class);
d198 9
a206 1
		return retrieve(MetricProviderGenerator.class);
d261 4
d326 1
a326 1
		return retrieve(AbstractExpressionGenerator.class);
d330 1
a330 1
		return retrieve(OCLExpressionFactoryGenerator.class);
d334 1
a334 1
		return retrieve(RegexpExpressionFactoryGenerator.class);
a355 20

	/**
	 * @@see #retrieve(Class)
	 */
	private static void put(StaticTemplateRegistry tr, String path, Class<?> precompiledTemplate) {
		tr.put(precompiledTemplate, path, precompiledTemplate);
	}

	/**
	 * depends on {@@link #put(StaticTemplateRegistry, String, Class) } impl -
	 * class object of precompiled template serves as a key
	 */
	private TextEmitter retrieve(Class<?> key) throws UnexpectedBehaviourException {
		try {
			return new JETEmitterAdapter(myFactory.acquireEmitter(key));
		} catch (NoSuchTemplateException ex) {
			throw new UnexpectedBehaviourException(ex.getMessage(), ex);
		}
	}

d380 4
d385 1
a385 1
		return getTemplatesBundle().getEntry("/templates/emf-merge.xml");
@


1.47.2.1
log
@rewrite abs expr in xpand
@
text
@d23 1
d94 1
d266 1
a266 1
		return retrieveXpand("xpt::expressions::AbstractExpression::AbstractExpression");	//$NON-NLS-1$
@


1.47.2.2
log
@get rid of jet
@
text
@d23 2
d90 1
d93 3
d268 1
a268 1
		return retrieveXpand("xpt::expressions::OCLExpressionFactory::OCLExpressionFactory");	//$NON-NLS-1$
d272 1
a272 1
		return retrieveXpand("xpt::expressions::RegexpExpressionFactory::RegexpExpressionFactory");	//$NON-NLS-1$
@


1.47.2.3
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator)
@
text
@a13 1
import java.net.MalformedURLException;
a14 1
import java.util.ArrayList;
a16 1
import org.eclipse.core.runtime.IStatus;
a17 1
import org.eclipse.core.runtime.Status;
a21 1
import org.eclipse.emf.common.CommonPlugin;
d23 2
d26 5
d34 1
d44 1
a44 1
 * Provides Xpand templates.
d52 2
d56 2
a58 1

d60 9
a68 8
		ArrayList<URL> templatesURI = new ArrayList<URL>(3);
		templatesURI.add(getTemplatesBundle().getEntry("/templates/"));	//$NON-NLS-1$
		templatesURI.add(getCodegenTemplatesBundle().getEntry("/templates/"));	//$NON-NLS-1$
		URL dynamicTemplatesPath = getDynamicTemplatesURL(templateDirectory);
		if (dynamicTemplatesPath != null) {
			templatesURI.add(dynamicTemplatesPath);
		}
		myResourceManager = new BundleResourceManager(templatesURI.toArray(new URL[templatesURI.size()]));
d70 1
a70 19
		myTemplatePath = new String[templatesURI.size()];
		for (int i = 0; i < templatesURI.size(); i++) {
			myTemplatePath[i] = templatesURI.get(i).toString();
		}
		if (usePrecompiled) {
			myCachedXpandEmitters = new HashMap<String, TextEmitter>();
		}
	}

	private static URL getDynamicTemplatesURL(String templateDirectory) {
		if (templateDirectory != null) {
			URI templatesURI = templateDirectory.indexOf(":") == -1 ? URI.createPlatformResourceURI(templateDirectory, true) : URI.createURI(templateDirectory); //$NON-NLS-1$
			try {
				return new URL(CommonPlugin.resolve(templatesURI).toString());
			} catch (MalformedURLException e) {
				Activator.getInstance().getLog().log(new Status(IStatus.ERROR, Activator.getPluginID(), 0, "Incorrect dynamic templates location", e)); //$NON-NLS-1$
			}
		}
		return null;
d86 7
a96 4
	public TextEmitter getCreateNodeCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateNodeCommand::qualifiedClassName");	//$NON-NLS-1$
	}

a100 4
	public TextEmitter getAddNodeCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::AddNodeCommand::qualifiedClassName");	//$NON-NLS-1$
	}

a104 4
	public TextEmitter getCloneNodeCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CloneNodeCommand::qualifiedClassName");	//$NON-NLS-1$
	}

a108 4
	public TextEmitter getCreateLinkStartCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateLinkStartCommand::qualifiedClassName");	//$NON-NLS-1$
	}

a112 4
	public TextEmitter getCreateLinkCompleteCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::CreateLinkCompleteCommand::qualifiedClassName");	//$NON-NLS-1$
	}

a116 4
	public TextEmitter getReconnectLinkSourceCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::ReconnectLinkSourceCommand::qualifiedClassName");	//$NON-NLS-1$
	}

a120 4
	public TextEmitter getReconnectLinkTargetCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::commands::ReconnectLinkTargetCommand::qualifiedClassName");	//$NON-NLS-1$
	}

a128 4
	public TextEmitter getComponentEditPolicyQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::ComponentEditPolicy::qualifiedClassName");	//$NON-NLS-1$
	}

a132 4
	public TextEmitter getLayoutEditPolicyQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::LayoutEditPolicy::qualifiedClassName");	//$NON-NLS-1$
	}

a136 4
	public TextEmitter getGraphicalEditPolicyQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::diagram::policies::GraphicalNodeEditPolicy::qualifiedClassName");	//$NON-NLS-1$
	}

d138 1
a138 9
		return retrieveXpand("xpt::providers::ValidationProvider::ValidationProvider");	//$NON-NLS-1$
	}

	public TextEmitter getValidateActionGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::ValidateAction::ValidateAction");	//$NON-NLS-1$
	}

	public TextEmitter getValidateActionQualifiedNameGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::ValidateAction::qualifiedClassName");	//$NON-NLS-1$
d142 1
a142 9
		return retrieveXpand("xpt::providers::MetricProvider::MetricProvider");	//$NON-NLS-1$
	}	

	public TextEmitter getMetricsActionEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::MetricsAction::MetricsAction");	//$NON-NLS-1$
	}	

	public TextEmitter getMetricsActionQualifiedNameEmitter() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::providers::MetricsAction::qualifiedClassName");	//$NON-NLS-1$
a196 4
	public TextEmitter getOpenDiagramInViewActionQualifiedClassNameGenerator() throws UnexpectedBehaviourException {
		return retrieveXpand("xpt::editor::OpenDiagramInViewAction::qualifiedClassName");	//$NON-NLS-1$
	}

d289 19
a331 4
	private static Bundle getCodegenTemplatesBundle() {
		return Platform.getBundle(CODEGEN_PLUGIN_ID);
	}

d333 1
a333 1
		return getCodegenTemplatesBundle().getEntry("/templates/emf-merge.xml");
a436 3
		if (myCachedXpandEmitters == null) {
			return newXpandEmitter(templateFQN);
		}
d439 1
a439 1
			result = newXpandEmitter(templateFQN);
d445 1
a445 5
	private TextEmitter newXpandEmitter(String templateFQN) {
		return new XpandTextEmitter(myResourceManager, templateFQN, getClass().getClassLoader());
	}

	private HashMap<String, TextEmitter> myCachedXpandEmitters;
@


1.46
log
@Rewrite /editor/* templates in XPand;
Use common template to generate code that creates an editing domain in various places;
OpenDiagramEditPolicy: package statement was missing.
@
text
@a18 1
import org.eclipse.emf.codegen.jet.JETException;
d282 1
a282 1
		return newGIFEmitterAdapter("/editor/diagram.gif"); //$NON-NLS-1$
d286 1
a286 1
		return newGIFEmitterAdapter("/editor/wizban.gif"); //$NON-NLS-1$
d344 2
a345 6
	public GIFEmitter getShortcutImageEmitter() throws JETException {
		String templateLocation = JETCompiler.find(getTemplatePath(), "/editor/shortcut.gif");
		if (templateLocation == null) {
			throw new JETException("shortcut image template not found");
		}
		return new GIFEmitter(templateLocation);
@


1.45
log
@[192168]: Convert /providers/DomainElementInitializer.javajet lite template to Xpand
@
text
@a23 5
import org.eclipse.gmf.codegen.templates.lite.editor.CreationWizardGenerator;
import org.eclipse.gmf.codegen.templates.lite.editor.CreationWizardPageGenerator;
import org.eclipse.gmf.codegen.templates.lite.editor.InitDiagramFileActionGenerator;
import org.eclipse.gmf.codegen.templates.lite.editor.NewDiagramFileWizardGenerator;
import org.eclipse.gmf.codegen.templates.lite.editor.PaletteFactoryGenerator;
d94 1
a94 6
		put(tr, "/providers/MetricProvider.javajet", MetricProviderGenerator.class); //$NON-NLS-1$		
		put(tr, "/editor/CreationWizard.javajet", CreationWizardGenerator.class);
		put(tr, "/editor/CreationWizardPage.javajet", CreationWizardPageGenerator.class);
		put(tr, "/editor/PaletteFactory.javajet", PaletteFactoryGenerator.class);
		put(tr, "/editor/InitDiagramFileAction.javajet", InitDiagramFileActionGenerator.class);
		put(tr, "/editor/NewDiagramFileWizard.javajet", NewDiagramFileWizardGenerator.class);
d215 1
a215 1
		return retrieve(CreationWizardGenerator.class);
d219 1
a219 1
		return retrieve(CreationWizardPageGenerator.class);
d227 1
a227 1
		return retrieve(PaletteFactoryGenerator.class);
d247 1
a247 1
		return retrieve(InitDiagramFileActionGenerator.class);
d251 1
a251 1
		return retrieve(NewDiagramFileWizardGenerator.class);
d290 8
@


1.44
log
@[192167]: Convert /policies/OpenDiagramEditPolicy.javajet lite template to Xpand;
Typo in NavigatorActionProvider fixed;
gif images removed (they should be inherited from the full-RT templates instead)
@
text
@a31 1
import org.eclipse.gmf.codegen.templates.lite.providers.DomainElementInitializerGenerator;
a102 1
		put(tr, "/providers/DomainElementInitializer.javajet", DomainElementInitializerGenerator.class);
d163 1
a163 1
	
d165 5
a169 1
		return retrieve(DomainElementInitializerGenerator.class);
@


1.43
log
@[191924]: Adopt lite generator to use newly created /navigator/NavigatorLabelProvider.xpt
[191954]: Adopt lite generator to use newly created /navigator/NavigatorActionProvider.xpt
@
text
@a31 1
import org.eclipse.gmf.codegen.templates.lite.policies.OpenDiagramPolicyGenerator;
a109 1
		put(tr, "/policies/OpenDiagramEditPolicy.javajet", OpenDiagramPolicyGenerator.class);
d287 1
a287 1
		return retrieve(OpenDiagramPolicyGenerator.class);
@


1.42
log
@[191851] - Convert /navigator/NavigatorSorter.javajet template to xpand
@
text
@a31 2
import org.eclipse.gmf.codegen.templates.lite.navigator.NavigatorActionProviderGenerator;
import org.eclipse.gmf.codegen.templates.lite.navigator.NavigatorLabelProviderGenerator;
a112 3
		put(tr, "/navigator/NavigatorLabelProvider.javajet", NavigatorLabelProviderGenerator.class);
		put(tr, "/navigator/NavigatorActionProvider.javajet", NavigatorActionProviderGenerator.class);

d380 1
a380 1
		return retrieve(NavigatorLabelProviderGenerator.class);
d392 1
a392 1
		return retrieve(NavigatorActionProviderGenerator.class);
@


1.41
log
@rewrite EditPartFactory in XPand
@
text
@a37 1
import org.eclipse.gmf.codegen.templates.navigator.NavigatorSorterGenerator;
a115 1
		put(tr, "/navigator/NavigatorSorter.javajet", NavigatorSorterGenerator.class);
d393 1
a393 1
		return retrieve(NavigatorSorterGenerator.class);
d413 1
a413 1
		return newGIFEmitter("/navigator/navigatorGroup.gif"); //$NON-NLS-1$
@


1.40
log
@Rewrite some templates with XPand;
Adopt VisualIDRegistry from full RT.
@
text
@a33 1
import org.eclipse.gmf.codegen.templates.lite.parts.EditPartFactoryGenerator;
a107 1
		put(tr, "/parts/EditPartFactory.javajet", EditPartFactoryGenerator.class);
d188 1
a188 1
		return retrieve(EditPartFactoryGenerator.class);
@


1.39
log
@Reuse templates from full RT
@
text
@a23 2
import org.eclipse.gmf.codegen.templates.lite.editor.ActionBarContributorGenerator;
import org.eclipse.gmf.codegen.templates.lite.editor.BuildPropertiesGenerator;
a26 1
import org.eclipse.gmf.codegen.templates.lite.editor.ManifestGenerator;
a27 1
import org.eclipse.gmf.codegen.templates.lite.editor.OpenDiagramFileInViewGenerator;
a28 1
import org.eclipse.gmf.codegen.templates.lite.editor.VisualIDRegistryGenerator;
a107 2
		// put(tr, "/editor/MatchingStrategy.javajet",
		// MatchingStrategyGenerator.class);
a108 1
		put(tr, "/editor/VisualIDRegistry.javajet", VisualIDRegistryGenerator.class);
a110 4
		put(tr, "/editor/ActionBarContributor.javajet", ActionBarContributorGenerator.class);
		put(tr, "/editor/OpenDiagramInViewAction.javajet", OpenDiagramFileInViewGenerator.class);
		put(tr, "/editor/manifest.mfjet", ManifestGenerator.class);
		put(tr, "/editor/build.propertiesjet", BuildPropertiesGenerator.class);
d218 1
a218 1
		return retrieve(ActionBarContributorGenerator.class);
d222 1
a222 1
		return retrieve(OpenDiagramFileInViewGenerator.class);
d226 1
a226 1
		return retrieveXpand("xpt::editor::Editor::Editor");
d250 1
a250 1
		return retrieve(VisualIDRegistryGenerator.class);
d254 1
a254 1
		return retrieve(ManifestGenerator.class);
d258 1
a258 1
		return retrieve(BuildPropertiesGenerator.class);
@


1.38
log
@[178836]: Generate IEditorMatchingStrategy implementation;
Lite Diagram Editor opened using New Editor popup menu item on editor tab should share the editing domain with the originating editor
@
text
@d34 3
a36 3
import org.eclipse.gmf.codegen.templates.lite.expressions.AbstractExpressionGenerator;
import org.eclipse.gmf.codegen.templates.lite.expressions.OCLExpressionFactoryGenerator;
import org.eclipse.gmf.codegen.templates.lite.expressions.RegexpExpressionFactoryGenerator;
@


1.37
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@d241 4
@


1.36
log
@Implementing "link with editor" for URI editor input
@
text
@a27 1
import org.eclipse.gmf.codegen.templates.lite.editor.DiagramEditorUtilGenerator;
a38 4
import org.eclipse.gmf.codegen.templates.lite.parts.ChildNodeEditPartGenerator;
import org.eclipse.gmf.codegen.templates.lite.parts.CompartmentEditPartGenerator;
import org.eclipse.gmf.codegen.templates.lite.parts.DiagramEditPartGenerator;
import org.eclipse.gmf.codegen.templates.lite.parts.DiagramExternalNodeLabelEditPartGenerator;
a39 4
import org.eclipse.gmf.codegen.templates.lite.parts.LinkEditPartGenerator;
import org.eclipse.gmf.codegen.templates.lite.parts.LinkLabelEditPartGenerator;
import org.eclipse.gmf.codegen.templates.lite.parts.NodeEditPartGenerator;
import org.eclipse.gmf.codegen.templates.lite.parts.NodeLabelEditPartGenerator;
a110 2
		put(tr, "/parts/DiagramExternalNodeLabelEditPart.javajet", DiagramExternalNodeLabelEditPartGenerator.class);
		put(tr, "/parts/CompartmentEditPart.javajet", CompartmentEditPartGenerator.class);
a112 1
		put(tr, "/editor/DiagramEditorUtil.javajet", DiagramEditorUtilGenerator.class);
a116 1
		put(tr, "/parts/DiagramEditPart.javajet", DiagramEditPartGenerator.class);
a120 6
		put(tr, "/parts/LinkEditPart.javajet", LinkEditPartGenerator.class);
		put(tr, "/parts/LinkLabelEditPart.javajet", LinkLabelEditPartGenerator.class);
		put(tr, "/parts/ChildNodeEditPart.javajet", ChildNodeEditPartGenerator.class);
		put(tr, "/parts/NodeEditPart.javajet", NodeEditPartGenerator.class);
		put(tr, "/parts/NodeLabelEditPart.javajet", NodeLabelEditPartGenerator.class);
		// put(tr, "/editor/ModelCreationFactory.javajet", ModelCreationFactoryGenerator.class);
d194 1
a194 1
		return retrieve(CompartmentEditPartGenerator.class);
d198 1
a198 5
		return retrieve(DiagramEditPartGenerator.class);
	}

	public TextEmitter getDiagramExternalNodeLabelEditPartEmitter() throws UnexpectedBehaviourException {
		return retrieve(DiagramExternalNodeLabelEditPartGenerator.class);
d206 1
a206 1
		return retrieve(LinkEditPartGenerator.class);
d210 1
a210 1
		return retrieve(LinkLabelEditPartGenerator.class);
d214 1
a214 1
		return retrieve(ChildNodeEditPartGenerator.class);
d218 1
a218 1
		return retrieve(NodeEditPartGenerator.class);
d222 1
a222 1
		return retrieve(NodeLabelEditPartGenerator.class);
d250 1
a250 1
		return retrieve(DiagramEditorUtilGenerator.class);
@


1.35
log
@Fixing problems with NavigatorLinkHelper.
@
text
@d414 4
@


1.34
log
@Domain model navigator from full-rt
@
text
@a39 1
import org.eclipse.gmf.codegen.templates.lite.navigator.NavigatorLinkHelperGenerator;
a149 1
		put(tr, "/navigator/NavigatorLinkHelper.javajet", NavigatorLinkHelperGenerator.class);
d419 2
a420 2
	public TextEmitter getNavigatorLinkHelperEmitter() throws UnexpectedBehaviourException {
		return retrieve(NavigatorLinkHelperGenerator.class);
@


1.33
log
@Generating diagram file navigator updating code.
@
text
@d401 16
@


1.32
log
@[164018]: Command generation separated from Parts for layout edit policy and graphical node edit policy;
NewDiagramFileWizard: layout is not persisted if the diagram is closed right after initialization
@
text
@a53 2
import org.eclipse.gmf.codegen.templates.navigator.NavigatorGroupGenerator;
import org.eclipse.gmf.codegen.templates.navigator.NavigatorItemGenerator;
a153 2
		put(tr, "/navigator/NavigatorGroup.javajet", NavigatorGroupGenerator.class);
		put(tr, "/navigator/NavigatorItem.javajet", NavigatorItemGenerator.class);
d397 1
a397 1
	public TextEmitter getNavigatorContentProviderEmitter() throws UnexpectedBehaviourException {
d421 2
a422 2
	public TextEmitter getNavigatorGroupEmitter() throws UnexpectedBehaviourException {
		return retrieve(NavigatorGroupGenerator.class);
d425 2
a426 2
	public TextEmitter getNavigatorItemEmitter() throws UnexpectedBehaviourException {
		return retrieve(NavigatorItemGenerator.class);
@


1.31
log
@Images should be reused across the editparts that represent same model element types (prevent SWTErrors when opening huge diagrams)
@
text
@d198 8
@


1.30
log
@[164018]: Add<>Command and Clone<>Command moved to separate classes;
Common methods from edit policies moved to runtime superclasses
@
text
@d306 4
@


1.29
log
@ComponentEditPolicy separated into a top-level class;
CreateRequest now knows about the MODEL_ID;
All "Command" class references fully-qualified in templates to prevent compilation problems;
[170078]: Remove link with class from the domain model on deleting link's destination
@
text
@d166 8
@


1.28
log
@Commands rewritten with xPand;
[173999]: Non-resizable figures (for the Lite version).
@
text
@d186 4
@


1.27
log
@Rewritten View factories using xpand;
[173476]: Respect label offset attributes when generating code
@
text
@a23 5
import org.eclipse.gmf.codegen.templates.lite.commands.CreateLinkCompleteCommandGenerator;
import org.eclipse.gmf.codegen.templates.lite.commands.CreateLinkStartCommandGenerator;
import org.eclipse.gmf.codegen.templates.lite.commands.CreateNodeCommandGenerator;
import org.eclipse.gmf.codegen.templates.lite.commands.ReconnectLinkSourceCommandGenerator;
import org.eclipse.gmf.codegen.templates.lite.commands.ReconnectLinkTargetCommandGenerator;
a119 5
		put(tr, "/commands/CreateNodeCommand.javajet", CreateNodeCommandGenerator.class);
		put(tr, "/commands/CreateLinkStartCommand.javajet", CreateLinkStartCommandGenerator.class);
		put(tr, "/commands/CreateLinkCompleteCommand.javajet", CreateLinkCompleteCommandGenerator.class);
		put(tr, "/commands/ReconnectLinkSourceCommand.javajet", ReconnectLinkSourceCommandGenerator.class);
		put(tr, "/commands/ReconnectLinkTargetCommand.javajet", ReconnectLinkTargetCommandGenerator.class);
d163 1
a163 1
		return retrieve(CreateNodeCommandGenerator.class);
d167 1
a167 1
		return retrieve(CreateLinkStartCommandGenerator.class);
d171 1
a171 1
		return retrieve(CreateLinkCompleteCommandGenerator.class);
d175 1
a175 1
		return retrieve(ReconnectLinkSourceCommandGenerator.class);
d179 1
a179 1
		return retrieve(ReconnectLinkTargetCommandGenerator.class);
@


1.26
log
@[172660]: Load Resource doesn't exist in RCP-Lite;
Changed order of hooking and configuration of the graphical viewer to allow menu registration using objectContributions in plugin.xml.
@
text
@a55 2
import org.eclipse.gmf.codegen.templates.lite.providers.CompartmentViewFactoryGenerator;
import org.eclipse.gmf.codegen.templates.lite.providers.DiagramViewFactoryGenerator;
a56 2
import org.eclipse.gmf.codegen.templates.lite.providers.LabelViewFactoryGenerator;
import org.eclipse.gmf.codegen.templates.lite.providers.LinkViewFactoryGenerator;
a57 1
import org.eclipse.gmf.codegen.templates.lite.providers.NodeViewFactoryGenerator;
a130 5
		put(tr, "/providers/CompartmentViewFactory.javajet", CompartmentViewFactoryGenerator.class);
		put(tr, "/providers/DiagramViewFactory.javajet", DiagramViewFactoryGenerator.class);
		put(tr, "/providers/LabelViewFactory.javajet", LabelViewFactoryGenerator.class);
		put(tr, "/providers/LinkViewFactory.javajet", LinkViewFactoryGenerator.class);
		put(tr, "/providers/NodeViewFactory.javajet", NodeViewFactoryGenerator.class);
d192 2
a193 18
	public TextEmitter getCompartmentViewFactoryGenerator() throws UnexpectedBehaviourException {
		return retrieve(CompartmentViewFactoryGenerator.class);
	}

	public TextEmitter getDiagramViewFactoryGenerator() throws UnexpectedBehaviourException {
		return retrieve(DiagramViewFactoryGenerator.class);
	}

	public TextEmitter getLabelViewFactoryGenerator() throws UnexpectedBehaviourException {
		return retrieve(LabelViewFactoryGenerator.class);
	}

	public TextEmitter getLinkViewFactoryGenerator() throws UnexpectedBehaviourException {
		return retrieve(LinkViewFactoryGenerator.class);
	}

	public TextEmitter getNodeViewFactoryGenerator() throws UnexpectedBehaviourException {
		return retrieve(NodeViewFactoryGenerator.class);
@


1.25
log
@make use of strings externalized with #139733
@
text
@d326 4
@


1.24
log
@Automatic import manager is obsolete
@
text
@d477 8
@


1.23
log
@[172664]: Provide audits and metrics for Lite diagrams (including view-based and RCP) + validation decorators + validation markers (for non-RCP case);
Several templates are rewritten with xpand;
lite-specific TextEmitter is back (otherwise importManager is sometimes passed to xpand templates)
@
text
@d480 1
a480 1
			result = new AutomaticImportManagerXpandTextEmitter(myResourceManager, templateFQN, getClass().getClassLoader());
a486 6

	private static class AutomaticImportManagerXpandTextEmitter extends XpandTextEmitter implements IAutomaticImportManager {
		public AutomaticImportManagerXpandTextEmitter(ResourceManager manager, String templateFQN, ClassLoader context) {
			super(manager, templateFQN, context);
		}
	}
@


1.22
log
@move XpandTextEmitter out from codegen to common plugin
@
text
@a33 1
import org.eclipse.gmf.codegen.templates.lite.editor.EditorGenerator;
a38 3
import org.eclipse.gmf.codegen.templates.lite.editor.PluginGenerator;
import org.eclipse.gmf.codegen.templates.lite.editor.PluginPropertiesGenerator;
import org.eclipse.gmf.codegen.templates.lite.editor.PluginXML;
d61 1
d63 1
d141 2
a155 1
		put(tr, "/editor/Editor.javajet", EditorGenerator.class);
a161 1
		put(tr, "/editor/Plugin.javajet", PluginGenerator.class);
a166 2
		put(tr, "/editor/plugin.xmljet", PluginXML.class);
		put(tr, "/editor/plugin.propertiesjet", PluginPropertiesGenerator.class);
d222 8
d271 1
a271 1
		return retrieve(PluginGenerator.class);
d283 1
a283 1
		return retrieve(EditorGenerator.class);
d315 1
a315 1
		return retrieve(PluginXML.class);
d327 1
a327 1
		return retrieve(PluginPropertiesGenerator.class);
d473 4
d480 1
a480 1
			result = new XpandTextEmitter(myResourceManager, templateFQN, getClass().getClassLoader());
d487 6
@


1.21
log
@Rewrite NavigatorContentProvider using xpand (overriding the runtime-based template using aspects);
internalGenerateJavaClass() may be used instead of doGenerateJavaClass() for xpand-based templates (no import manager gets added to the template parameters)
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
a13 1
import java.lang.reflect.InvocationTargetException;
a14 2
import java.util.ArrayList;
import java.util.Collections;
a15 1
import java.util.List;
a16 1
import org.eclipse.core.runtime.IProgressMonitor;
a23 23
import org.eclipse.gmf.common.UnexpectedBehaviourException;
import org.eclipse.gmf.common.codegen.ImportAssistant;
import org.eclipse.gmf.internal.codegen.dispatch.CachingEmitterFactory;
import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactory;
import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactoryImpl;
import org.eclipse.gmf.internal.codegen.dispatch.NoSuchTemplateException;
import org.eclipse.gmf.internal.codegen.dispatch.StaticTemplateRegistry;
import org.eclipse.gmf.internal.common.codegen.BinaryEmitter;
import org.eclipse.gmf.internal.common.codegen.DefaultTextMerger;
import org.eclipse.gmf.internal.common.codegen.GIFEmitter;
import org.eclipse.gmf.internal.common.codegen.JETEmitterAdapter;
import org.eclipse.gmf.internal.common.codegen.JETGIFEmitterAdapter;
import org.eclipse.gmf.internal.common.codegen.TextEmitter;
import org.eclipse.gmf.internal.common.codegen.TextMerger;
import org.eclipse.gmf.internal.xpand.BufferOutput;
import org.eclipse.gmf.internal.xpand.ResourceManager;
import org.eclipse.gmf.internal.xpand.XpandFacade;
import org.eclipse.gmf.internal.xpand.expression.Variable;
import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;
import org.eclipse.gmf.internal.xpand.model.XpandExecutionContextImpl;
import org.eclipse.gmf.internal.xpand.util.BundleResourceManager;
import org.eclipse.gmf.internal.xpand.util.ContextFactory;

d69 16
d472 1
a472 1
			result = new XpandTextEmitter(myResourceManager, templateFQN);
a478 45
	/*
	 * TODO: use same emitter as one in oeg.codegen? Or at least make them both subclasses of the same abstract superclass
	 * (to have possibility to use independent ways to extract the target and the arguments from the passed arguments).
	 */
	private static class XpandTextEmitter implements TextEmitter, IAutomaticImportManager {
		private final ResourceManager myResourceManager;
		private final String myTemplateFQN;

		public XpandTextEmitter(ResourceManager manager, String templateFQN) {
			myResourceManager = manager;
			myTemplateFQN = templateFQN;
		}

		public String generate(IProgressMonitor monitor, Object[] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
			StringBuilder result = new StringBuilder();
			new XpandFacade(createContext(result)).evaluate(myTemplateFQN, extractTarget(arguments), extractArguments(arguments));
			return result.toString();
		}

		protected Object extractTarget(Object[] arguments) {
			assert arguments != null && arguments.length > 0;
			return arguments[0];
		}

		protected Object[] extractArguments(Object[] arguments) {
			assert arguments != null && arguments.length > 0;
			ArrayList<Object> res = new ArrayList<Object>(arguments.length);
			// strip first one off, assume it's target
			for (int i = 1; i < arguments.length; i++) {
				if (false == arguments[i] instanceof ImportAssistant) {
					// strip assistant off
					res.add(arguments[i]);
				}
			}
			return res.toArray();
		}

		private XpandExecutionContext createContext(StringBuilder result) {
			final BufferOutput output = new BufferOutput(result);
			final List<Variable> globals = Collections.emptyList();
			final XpandExecutionContext xpandContext = ContextFactory.createXpandContext(myResourceManager, output, globals);
			((XpandExecutionContextImpl) xpandContext).setContextClassLoader(getClass().getClassLoader());
			return xpandContext;
		}
	}
@


1.20
log
@[159567]: Use GenApplication element from gmfgen model to generate RCP code
Use as much of the runtime templates as possible (changes are isolated as aspects)
@
text
@a75 1
import org.eclipse.gmf.codegen.templates.lite.navigator.NavigatorContentProviderGenerator;
a187 1
		put(tr, "/navigator/NavigatorContentProvider.javajet", NavigatorContentProviderGenerator.class);
d418 1
a418 1
		return retrieve(NavigatorContentProviderGenerator.class);
d495 1
a495 1
	private static class XpandTextEmitter implements TextEmitter {
@


1.19
log
@Compilation problems when property sheet is defined in RCP (no navigator support)
@
text
@d463 20
@


1.18
log
@Tabbed property sheet provided for the lite runtime (if GenPropertySheet is not null);
IllegalStateException when closing editor fixed.
@
text
@a51 1
import org.eclipse.gmf.codegen.templates.editor.SheetLabelProviderGenerator;
a196 2
		put(tr, "/propsheet/SheetLabelProvider.javajet", SheetLabelProviderGenerator.class);

d456 1
a456 1
		return retrieve(SheetLabelProviderGenerator.class);
@


1.17
log
@Generate support for Navigator
@
text
@d52 1
d198 2
d458 8
@


1.16
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@d14 1
d16 4
d21 2
d30 1
d43 8
d75 4
d95 3
d107 1
d115 1
d120 2
d123 2
a124 2
				usePrecompiled ? null : templateDirectory != null && templateDirectory.indexOf(":") == -1 ? URI.createPlatformResourceURI(templateDirectory).toString() : templateDirectory,
				getTemplatesBundle().getEntry("/templates/").toString() };
d126 2
d188 9
d367 1
a367 1
	private static void put(StaticTemplateRegistry tr, String path, Class precompiledTemplate) {
d375 1
a375 1
	private TextEmitter retrieve(Class key) throws UnexpectedBehaviourException {
d383 4
d418 92
@


1.15
log
@[163214]: Lite runtime should support generation to a View
[164843]: Make it possible to specify the editing domain with which the editor/viewer should operate
@
text
@d36 5
d116 6
d162 20
@


1.14
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d45 1
d130 1
d219 4
@


1.13
log
@#161253: External node labels should be attached to nodes correctly
Generate 2 icons if myDiagram.getCreationWizardIconPathX() and myEditorGen.getEditor().getIconPathX() specify different absolute paths
@
text
@d62 1
d145 1
d277 4
@


1.12
log
@Correct icons in wizards and palette: generate images, recognize relative paths, fix incorrect paths in wizard code;
Make it possible to nest palette groups
@
text
@d56 1
d114 1
d179 4
@


1.11
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d28 1
d32 1
d269 8
d296 12
@


1.10
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d40 1
d42 1
d133 2
d243 8
@


1.9
log
@extracted caching behaviour outside from the factory - moving towards support for different template engines, #114207
@
text
@d18 3
d28 1
d32 1
a33 7
import org.eclipse.gmf.codegen.templates.lite.commands.CreateNotationalEdgeCommandGenerator;
import org.eclipse.gmf.codegen.templates.lite.commands.CreateNotationalElementCommandGenerator;
import org.eclipse.gmf.codegen.templates.lite.commands.ReconnectNotationalEdgeSourceCommandGenerator;
import org.eclipse.gmf.codegen.templates.lite.commands.ReconnectNotationalEdgeTargetCommandGenerator;
import org.eclipse.gmf.codegen.templates.lite.commands.RemoveNotationalEdgeCommandGenerator;
import org.eclipse.gmf.codegen.templates.lite.commands.RemoveNotationalElementCommandGenerator;
import org.eclipse.gmf.codegen.templates.lite.commands.ReplaceNotationalElementCommandGenerator;
a56 4
import org.eclipse.gmf.codegen.templates.lite.parts.UpdatableEditPartGenerator;
import org.eclipse.gmf.codegen.templates.lite.parts.WrappingCommandGenerator;
import org.eclipse.gmf.codegen.templates.lite.policies.BendpointEditPolicyGenerator;
import org.eclipse.gmf.codegen.templates.lite.providers.AbstractParserGenerator;
a62 1
import org.eclipse.gmf.codegen.templates.lite.providers.PropertySourceProviderGenerator;
d89 13
a117 1
		put(tr, "/policies/BendpointEditPolicy.javajet", BendpointEditPolicyGenerator.class);
a118 3
		put(tr, "/parts/IUpdatableEditPart.javajet", UpdatableEditPartGenerator.class);
		put(tr, "/parts/WrappingCommand.javajet", WrappingCommandGenerator.class);
		put(tr, "/providers/AbstractParser.javajet", AbstractParserGenerator.class);
a119 1
		put(tr, "/providers/PropertySourceProvider.javajet", PropertySourceProviderGenerator.class);
a135 7
		put(tr, "/commands/CreateNotationalElementCommand.javajet", CreateNotationalElementCommandGenerator.class);
		put(tr, "/commands/CreateNotationalEdgeCommand.javajet", CreateNotationalEdgeCommandGenerator.class);
		put(tr, "/commands/ReconnectNotationalEdgeSourceCommand.javajet", ReconnectNotationalEdgeSourceCommandGenerator.class);
		put(tr, "/commands/ReconnectNotationalEdgeTargetCommand.javajet", ReconnectNotationalEdgeTargetCommandGenerator.class);
		put(tr, "/commands/RemoveNotationalElementCommand.javajet", RemoveNotationalElementCommandGenerator.class);
		put(tr, "/commands/RemoveNotationalEdgeCommand.javajet", RemoveNotationalEdgeCommandGenerator.class);
		put(tr, "/commands/ReplaceNotationalElementCommand.javajet", ReplaceNotationalElementCommandGenerator.class);
a158 4
	public TextEmitter getAbstractParserGenerator() throws UnexpectedBehaviourException {
		return retrieve(AbstractParserGenerator.class);
	}

a162 4
	public TextEmitter getPropertySourceProviderGenerator() throws UnexpectedBehaviourException {
		return retrieve(PropertySourceProviderGenerator.class);
	}

a170 4
	public TextEmitter getBendpointEditPolicyGenerator() throws UnexpectedBehaviourException {
		return retrieve(BendpointEditPolicyGenerator.class);
	}

a174 8
	public TextEmitter getUpdatableEditPartGenerator() throws UnexpectedBehaviourException {
		return retrieve(UpdatableEditPartGenerator.class);
	}

	public TextEmitter getWrappingCommandGenerator() throws UnexpectedBehaviourException {
		return retrieve(WrappingCommandGenerator.class);
	}

a254 28
	public TextEmitter getCreateNotationalElementCommandGenerator() throws UnexpectedBehaviourException {
		return retrieve(CreateNotationalElementCommandGenerator.class);
	}

	public TextEmitter getCreateNotationalEdgeCommandGenerator() throws UnexpectedBehaviourException {
		return retrieve(CreateNotationalEdgeCommandGenerator.class);
	}

	public TextEmitter getRemoveNotationalElementCommandGenerator() throws UnexpectedBehaviourException {
		return retrieve(RemoveNotationalElementCommandGenerator.class);
	}

	public TextEmitter getRemoveNotationalEdgeCommandGenerator() throws UnexpectedBehaviourException {
		return retrieve(RemoveNotationalEdgeCommandGenerator.class);
	}

	public TextEmitter getReplaceNotationalElementCommandGenerator() throws UnexpectedBehaviourException {
		return retrieve(ReplaceNotationalElementCommandGenerator.class);
	}

	public TextEmitter getReconnectNotationalEdgeSourceCommandGenerator() throws UnexpectedBehaviourException {
		return retrieve(ReconnectNotationalEdgeSourceCommandGenerator.class);
	}

	public TextEmitter getReconnectNotationalEdgeTargetCommandGenerator() throws UnexpectedBehaviourException {
		return retrieve(ReconnectNotationalEdgeTargetCommandGenerator.class);
	}

@


1.8
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@d20 1
d22 1
d93 1
a93 1
		myFactory = new EmitterFactory(getTemplatePath(), myRegistry, usePrecompiled, variables, true);
@


1.7
log
@#149298 Lite Generator: Make it possible to reroute links
@
text
@d27 1
d31 1
d134 1
d138 1
d283 4
d291 4
@


1.6
log
@#146009 Lite Generator: Changes in the underlying domain model should be automatically reflected in the notational model
1,2,3 Parts commited.
@
text
@d28 2
d132 2
d287 8
@


1.5
log
@#145101 Lite Generator: Support bendpoints in the same format as runtime-based generated diagrams
@
text
@d27 3
d129 3
d271 12
@


1.4
log
@[bblajer] #144412 Allow non-OCL-based FeatureSeqInitializers, constraints and selectors
@
text
@d52 1
d103 1
d169 4
@


1.3
log
@[bblajer] #138430 Lite Generator: Generated code should make use of emf.transaction API
@
text
@d39 3
d121 3
d247 12
@


1.2
log
@Emitter became top-level entity (TextEmitter), oddness of JetAdapter and Emitter api were cleared.
GeneratorBase lost knowledge about JET.
Parts of gmf.common made internal to avoid possible API issues.
ImportAssistant refactored to know name of compilation unit to avoid problems like #134506.
FigureGenerator's reuse of ImportAssistant removed.
[mgolubev] Tests for #134506 and 142553
@
text
@d48 1
d101 1
d169 4
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@a16 1
import org.eclipse.emf.codegen.jet.JETEmitter;
a19 1
import org.eclipse.gmf.common.codegen.GIFEmitter;
d23 3
d119 1
a119 1
	public JETEmitter getCompartmentViewFactoryGenerator() throws UnexpectedBehaviourException {
d123 1
a123 1
	public JETEmitter getDiagramViewFactoryGenerator() throws UnexpectedBehaviourException {
d127 1
a127 1
	public JETEmitter getLabelViewFactoryGenerator() throws UnexpectedBehaviourException {
d131 1
a131 1
	public JETEmitter getLinkViewFactoryGenerator() throws UnexpectedBehaviourException {
d135 1
a135 1
	public JETEmitter getNodeViewFactoryGenerator() throws UnexpectedBehaviourException {
d139 1
a139 1
	public JETEmitter getAbstractParserGenerator() throws UnexpectedBehaviourException {
d143 1
a143 1
	public JETEmitter getDomainElementInitializerGenerator() throws UnexpectedBehaviourException {
d147 1
a147 1
	public JETEmitter getPropertySourceProviderGenerator() throws UnexpectedBehaviourException {
d151 1
a151 1
	public JETEmitter getCompartmentEditPartGenerator() throws UnexpectedBehaviourException {
d155 1
a155 1
	public JETEmitter getDiagramEditPartGenerator() throws UnexpectedBehaviourException {
d159 1
a159 1
	public JETEmitter getEditPartFactoryGenerator() throws UnexpectedBehaviourException {
d163 1
a163 1
	public JETEmitter getUpdatableEditPartGenerator() throws UnexpectedBehaviourException {
d167 1
a167 1
	public JETEmitter getLinkEditPartGenerator() throws UnexpectedBehaviourException {
d171 1
a171 1
	public JETEmitter getLinkLabelEditPartGenerator() throws UnexpectedBehaviourException {
d175 1
a175 1
	public JETEmitter getChildNodeEditPartGenerator() throws UnexpectedBehaviourException {
d179 1
a179 1
	public JETEmitter getNodeEditPartGenerator() throws UnexpectedBehaviourException {
d183 1
a183 1
	public JETEmitter getNodeLabelEditPartGenerator() throws UnexpectedBehaviourException {
d187 1
a187 1
	public JETEmitter getPluginGenerator() throws UnexpectedBehaviourException {
d191 1
a191 1
	public JETEmitter getActionBarContributorGenerator() throws UnexpectedBehaviourException {
d195 1
a195 1
	public JETEmitter getEditorGenerator() throws UnexpectedBehaviourException {
d199 1
a199 1
	public JETEmitter getCreationWizardGenerator() throws UnexpectedBehaviourException {
d203 1
a203 1
	public JETEmitter getCreationWizardPageGenerator() throws UnexpectedBehaviourException {
d207 1
a207 1
	public JETEmitter getDiagramEditorUtilGenerator() throws UnexpectedBehaviourException {
d211 1
a211 1
	public JETEmitter getPaletteFactoryGenerator() throws UnexpectedBehaviourException {
d215 1
a215 1
	public JETEmitter getVisualIDRegistryGenerator() throws UnexpectedBehaviourException {
d219 1
a219 1
	public JETEmitter getManifestGenerator() throws UnexpectedBehaviourException {
d223 1
a223 1
	public JETEmitter getBuildPropertiesGenerator() throws UnexpectedBehaviourException {
d227 1
a227 1
	public JETEmitter getPluginXML() throws UnexpectedBehaviourException {
d231 1
a231 1
	public JETEmitter getPluginPropertiesGenerator() throws UnexpectedBehaviourException {
d246 1
a246 1
	private JETEmitter retrieve(Class key) throws UnexpectedBehaviourException {
d248 1
a248 1
			return myFactory.acquireEmitter(key);
@

